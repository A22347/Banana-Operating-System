
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 db fe 00 00       	call   c000fefb <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 28 6b 02 c0       	mov    eax,0xc0026b28
c0000025:	3d 28 6b 02 c0       	cmp    eax,0xc0026b28
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 28 6b 02 c0       	push   0xc0026b28
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 28 6b 02 c0       	mov    eax,0xc0026b28
c0000051:	2d 28 6b 02 c0       	sub    eax,0xc0026b28
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 28 6b 02 c0       	push   0xc0026b28
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 80 02 c0 00 	cmp    BYTE PTR ds:0xc00280c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb b0 25 02 c0       	mov    ebx,0xc00225b0
c0000097:	81 eb ac 25 02 c0    	sub    ebx,0xc00225ac
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be ac 25 02 c0       	mov    esi,0xc00225ac
c00000a6:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 80 02 c0       	mov    ds:0xc00280c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 28 6b 02 c0       	push   0xc0026b28
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 80 02 c0 01 	mov    BYTE PTR ds:0xc00280c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 80 02 c0       	push   0xc00280c8
c0000108:	68 28 6b 02 c0       	push   0xc0026b28
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 57 64 01 00       	call   c0016704 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 9c 45 01 00       	call   c0014861 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 35 64 01 00       	call   c0016704 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ae 69 01 00       	call   c0016c9c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 f5 6e 01 00       	call   c00171ec <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 e0 e0 02 c0 	lgdtd  ds:0xc002e0e0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 9e f0 00 00       	jmp    c000f41d <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 80 02 c0       	mov    ds:0xc00280e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 80 02 c0    	mov    DWORD PTR ds:0xc00280e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 c0 25 02 c0 02 	test   BYTE PTR [edx-0x3ffdda40],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 c0 25 02 c0 01 	test   BYTE PTR [edx-0x3ffdda40],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 c0 25 02 c0 08 	test   BYTE PTR [edx-0x3ffdda40],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 c0 25 02 c0 04 	test   BYTE PTR [ecx-0x3ffdda40],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 c0 25 02 c0 01 	test   BYTE PTR [edx-0x3ffdda40],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 81 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 81 02 c0    	mov    ecx,DWORD PTR ds:0xc002813c
c0000df7:	c7 42 0c 34 81 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 81 02 c0 02 	test   BYTE PTR ds:0xc0028100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 84 02 c0    	dec    DWORD PTR ds:0xc0028450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 84 02 c0    	sub    DWORD PTR ds:0xc0028464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 e9 ed 00 00       	call   c000fc49 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 f6 ec 00 00       	call   c000fbeb <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 d5 eb 00 00       	call   c000fbb5 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 d0 eb 00 00       	call   c000fbeb <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 7c ea 00 00       	call   c000fbb5 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 62 ea 00 00       	call   c000fbb5 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 38 ea 00 00       	call   c000fbb5 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 81 02 c0    	mov    edi,DWORD PTR ds:0xc0028100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 81 02 c0       	mov    eax,0xc0028100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 81 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 81 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 81 02 c0 	lea    edx,[eax*8-0x3ffd7ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028140
c00012e5:	81 fb 34 81 02 c0    	cmp    ebx,0xc0028134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 81 02 c0       	cmp    eax,0xc0028134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 81 02 c0    	cmp    DWORD PTR ds:0xc0028130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 81 02 c0       	mov    ds:0xc002813c,eax
c0001321:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001326:	a3 30 81 02 c0       	mov    ds:0xc0028130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c0001334:	c7 40 0c 34 81 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 80 02 c0 	lea    ebp,[edx*4-0x3ffd7f08]
c0001385:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 81 02 c0 	lea    ecx,[edx*4-0x3ffd7f00]
c00013a0:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 84 02 c0 	or     DWORD PTR [edi*4-0x3ffd7bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 81 02 c0 	lea    eax,[eax*8-0x3ffd7ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,ecx
c000145a:	89 0d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,ecx
c0001460:	c7 41 08 34 81 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028134
c0001467:	c7 41 0c 34 81 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 81 02 c0 	lea    edx,[ecx*8-0x3ffd7ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 81 02 c0 	lea    edx,[eax*4-0x3ffd7ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 84 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edi
c000152d:	89 3d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edi
c0001533:	c7 47 08 34 81 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028134
c000153a:	c7 47 0c 34 81 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 81 02 c0    	mov    DWORD PTR ds:0xc0028130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 81 02 c0       	mov    edx,0xc0028100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 84 02 c0    	mov    ebx,DWORD PTR ds:0xc0028454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 84 02 c0    	push   DWORD PTR ds:0xc002845c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 84 02 c0       	mov    eax,ds:0xc002845c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 81 02 c0 00 	cmp    DWORD PTR ds:0xc002812c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 81 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 81 02 c0       	mov    eax,0xc0028134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 84 02 c0       	cmp    eax,0xc002842c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 84 02 c0       	mov    eax,ds:0xc0028468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 c4 26 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd93c]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 81 02 c0       	mov    ds:0xc0028100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 84 02 c0    	mov    DWORD PTR ds:0xc0028444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 84 02 c0    	mov    DWORD PTR ds:0xc0028448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 84 02 c0    	mov    DWORD PTR ds:0xc002844c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 8d 9e 01 00       	jmp    c001be18 <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 b7 9e 01 00       	jmp    c001be58 <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 d8 9e 01 00       	jmp    c001be98 <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 20 28 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdd7e0]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 20 28 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd7e0]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba d8 56 02 c0       	mov    edx,0xc00256d8
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba dc 26 02 c0       	mov    edx,0xc00226dc
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 84 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 84 02 c0    	mov    ax,ds:0xc0028480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 84 02 c0    	mov    ds:0xc0028480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 e2 26 02 c0       	mov    eax,0xc00226e2
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf a0 27 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdd860]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 eb 26 02 c0       	mov    eax,0xc00226eb
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 20 28 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd7e0]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 84 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 70 27 02 c0       	mov    eax,0xc0022770
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb 60 27 02 c0       	mov    ebx,0xc0022760
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 40 27 02 c0       	mov    eax,0xc0022740
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 50 27 02 c0       	mov    eax,0xc0022750
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba f2 26 02 c0       	mov    edx,0xc00226f2
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba fe 26 02 c0       	mov    edx,0xc00226fe
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 12 27 02 c0       	mov    edx,0xc0022712
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 b4 9e 00 00       	call   c000fccb <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 ac 9e 00 00       	call   c000fcdb <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c 40 2b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022b40
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 40 2b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022b40
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 40 29 02 c0       	mov    eax,0xc0022940
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 80 28 02 c0       	mov    eax,0xc0022880
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 40 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd7c0]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 40 2c 02 c0       	push   0xc0022c40
c0006303:	e8 ac 64 01 00       	call   c001c7b4 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 4e 2c 02 c0       	push   0xc0022c4e
c000633b:	e8 74 64 01 00       	call   c001c7b4 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 85 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd7a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 dd 63 01 00       	call   c001c758 <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 80 02 c0       	mov    eax,0xc0028080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 80 02 c0       	mov    eax,0xc0028020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 8e 02 c0    	mov    ebp,DWORD PTR ds:0xc0028eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 5d 2c 02 c0       	push   0xc0022c5d
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 8e 02 c0       	mov    ecx,0xc0028e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 85 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd7ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd7ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7abc],esi
c0006746:	89 87 40 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ac0],eax
c000674c:	c7 87 48 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7a30],0x0
c0006768:	89 87 4c 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 85 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd7a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c00067e1:	8b 8d 4c 85 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd7ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 85 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd7ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 80 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 85 02 c0    	add    DWORD PTR [ebp-0x3ffd7ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 85 02 c0    	lea    ecx,[ebp-0x3ffd7ac0]
c00068d9:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 85 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd7ab4]
c0006917:	05 40 85 02 c0       	add    eax,0xc0028540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 85 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd7ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 85 02 c0    	lea    edi,[eax-0x3ffd7ac0]
c00069d6:	83 b8 40 85 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd7ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 60 2c 02 c0       	push   0xc0022c60
c00069fa:	e8 b5 5d 01 00       	call   c001c7b4 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 c9 5d 01 00       	call   c001c7d0 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 65 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c65
c0006a14:	e8 9b 5d 01 00       	call   c001c7b4 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7ac0]
c0006a20:	e8 ab 5d 01 00       	call   c001c7d0 <iso_kprintfd>
c0006a25:	c7 04 24 6b 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c6b
c0006a2c:	e8 83 5d 01 00       	call   c001c7b4 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7abc]
c0006a38:	e8 93 5d 01 00       	call   c001c7d0 <iso_kprintfd>
c0006a3d:	c7 04 24 71 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c71
c0006a44:	e8 6b 5d 01 00       	call   c001c7b4 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7a30]
c0006a50:	e8 7b 5d 01 00       	call   c001c7d0 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 85 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd7ab8]
c0006ab6:	81 c2 40 85 02 c0    	add    edx,0xc0028540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 85 02 c0    	lea    ebp,[eax-0x3ffd7aa8]
c0006b12:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 85 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd7aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 5d 2c 02 c0       	push   0xc0022c5d
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 85 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd7aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7ab0],eax
c0006bee:	89 93 54 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7aac],edx
c0006bf4:	81 c3 40 85 02 c0    	add    ebx,0xc0028540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 85 02 c0       	add    eax,0xc0028550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 7a 2c 02 c0       	push   0xc0022c7a
c0006c19:	e8 96 5b 01 00       	call   c001c7b4 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 80 02 c0       	mov    ds:0xc0028060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb4,0x0
c0006c4e:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 85 2c 02 c0       	push   0xc0022c85
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 8e 02 c0       	mov    ds:0xc0028eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 8c 2c 02 c0       	push   0xc0022c8c
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 80 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd7f80]
c0006cec:	bf 80 8e 02 c0       	mov    edi,0xc0028e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 8e 02 c0       	mov    eax,0xc0028e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 8e 02 c0       	mov    ds:0xc0028ea8,eax
c0006d0f:	b8 8a 8e 02 c0       	mov    eax,0xc0028e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 8e 02 c0       	mov    ds:0xc0028ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 93 2c 02 c0       	push   0xc0022c93
c0006d30:	e8 7f 5a 01 00       	call   c001c7b4 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 9e 2c 02 c0       	push   0xc0022c9e
c0006d4b:	e8 64 5a 01 00       	call   c001c7b4 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 85 02 c0       	push   0xc0028540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0028540,0xffffffff
c0006d75:	e8 51 8f 00 00       	call   c000fccb <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 8e 02 c0       	mov    ds:0xc0028eb0,eax
c0006d86:	e8 40 8f 00 00       	call   c000fccb <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 85 02 c0       	mov    ds:0xc0028520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 2b 8f 00 00       	call   c000fccb <malloc>
c0006da0:	89 04 9d 80 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 12 8f 00 00       	call   c000fccb <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7f80]
c0006de6:	e8 f0 8e 00 00       	call   c000fcdb <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 e2 8e 00 00       	call   c000fcdb <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 8e 02 c0       	mov    eax,ds:0xc0028eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 c8 8e 00 00       	call   c000fcdb <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 85 02 c0       	mov    eax,ds:0xc0028520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 b3 8e 00 00       	call   c000fcdb <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 85 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028520,0x0
c0006e35:	c7 05 b0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be b0 2c 02 c0       	mov    esi,0xc0022cb0
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 af 2c 02 c0       	mov    al,ds:0xc0022caf
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006eea:	f6 05 24 e1 02 c0 10 	test   BYTE PTR ds:0xc002e124,0x10
c0006ef1:	75 12                	jne    c0006f05 <Dbg::logc(char)+0x1f>
c0006ef3:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ef8:	ec                   	in     al,dx
c0006ef9:	a8 20                	test   al,0x20
c0006efb:	74 fb                	je     c0006ef8 <Dbg::logc(char)+0x12>
c0006efd:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f02:	88 c8                	mov    al,cl
c0006f04:	ee                   	out    dx,al
c0006f05:	c3                   	ret    

c0006f06 <Dbg::logs(char*)>:
c0006f06:	53                   	push   ebx
c0006f07:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006f0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f0e:	85 c0                	test   eax,eax
c0006f10:	74 11                	je     c0006f23 <Dbg::logs(char*)+0x1d>
c0006f12:	83 c3 01             	add    ebx,0x1
c0006f15:	50                   	push   eax
c0006f16:	e8 cb ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f1b:	58                   	pop    eax
c0006f1c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1f:	85 c0                	test   eax,eax
c0006f21:	75 ef                	jne    c0006f12 <Dbg::logs(char*)+0xc>
c0006f23:	5b                   	pop    ebx
c0006f24:	c3                   	ret    

c0006f25 <Dbg::logWriteInt(unsigned int)>:
c0006f25:	83 ec 10             	sub    esp,0x10
c0006f28:	6a 0a                	push   0xa
c0006f2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f2e:	50                   	push   eax
c0006f2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f33:	50                   	push   eax
c0006f34:	e8 0d ff ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f39:	50                   	push   eax
c0006f3a:	e8 c7 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f3f:	83 c4 20             	add    esp,0x20
c0006f42:	c3                   	ret    

c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f43:	83 ec 10             	sub    esp,0x10
c0006f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f4a:	50                   	push   eax
c0006f4b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f4f:	50                   	push   eax
c0006f50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f54:	52                   	push   edx
c0006f55:	e8 ec fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5a:	50                   	push   eax
c0006f5b:	e8 a6 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f60:	83 c4 20             	add    esp,0x20
c0006f63:	c3                   	ret    

c0006f64 <Dbg::kprintf(char const*, ...)>:
c0006f64:	55                   	push   ebp
c0006f65:	57                   	push   edi
c0006f66:	56                   	push   esi
c0006f67:	53                   	push   ebx
c0006f68:	83 ec 0c             	sub    esp,0xc
c0006f6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f6f:	f6 05 24 e1 02 c0 10 	test   BYTE PTR ds:0xc002e124,0x10
c0006f76:	74 08                	je     c0006f80 <Dbg::kprintf(char const*, ...)+0x1c>
c0006f78:	83 c4 0c             	add    esp,0xc
c0006f7b:	5b                   	pop    ebx
c0006f7c:	5e                   	pop    esi
c0006f7d:	5f                   	pop    edi
c0006f7e:	5d                   	pop    ebp
c0006f7f:	c3                   	ret    
c0006f80:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f84:	31 ff                	xor    edi,edi
c0006f86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f8a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f8d:	85 c0                	test   eax,eax
c0006f8f:	74 e7                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006f91:	8d 77 01             	lea    esi,[edi+0x1]
c0006f94:	83 f8 25             	cmp    eax,0x25
c0006f97:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f9a:	75 47                	jne    c0006fe3 <Dbg::kprintf(char const*, ...)+0x7f>
c0006f9c:	83 c7 02             	add    edi,0x2
c0006f9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fa2:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fa5:	83 e8 25             	sub    eax,0x25
c0006fa8:	0f b6 c0             	movzx  eax,al
c0006fab:	83 f8 53             	cmp    eax,0x53
c0006fae:	0f 87 ce 00 00 00    	ja     c0007082 <Dbg::kprintf(char const*, ...)+0x11e>
c0006fb4:	ff 24 85 c0 2c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd340]
c0006fbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fbf:	89 c8                	mov    eax,ecx
c0006fc1:	83 c1 04             	add    ecx,0x4
c0006fc4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fc8:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fca:	55                   	push   ebp
c0006fcb:	e8 55 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c0006fd0:	58                   	pop    eax
c0006fd1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fd4:	85 c0                	test   eax,eax
c0006fd6:	74 a0                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006fd8:	8d 77 01             	lea    esi,[edi+0x1]
c0006fdb:	83 f8 25             	cmp    eax,0x25
c0006fde:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fe1:	74 b9                	je     c0006f9c <Dbg::kprintf(char const*, ...)+0x38>
c0006fe3:	50                   	push   eax
c0006fe4:	89 f7                	mov    edi,esi
c0006fe6:	e8 fb fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006feb:	89 ee                	mov    esi,ebp
c0006fed:	58                   	pop    eax
c0006fee:	eb e1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006ff4:	89 c8                	mov    eax,ecx
c0006ff6:	83 c1 04             	add    ecx,0x4
c0006ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ffb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fff:	50                   	push   eax
c0007000:	e8 01 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0007005:	58                   	pop    eax
c0007006:	eb c9                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700c:	89 d0                	mov    eax,edx
c000700e:	83 c2 04             	add    edx,0x4
c0007011:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007015:	8b 00                	mov    eax,DWORD PTR [eax]
c0007017:	50                   	push   eax
c0007018:	e8 08 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c000701d:	58                   	pop    eax
c000701e:	eb b1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007020:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007024:	89 d0                	mov    eax,edx
c0007026:	83 c2 04             	add    edx,0x4
c0007029:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000702c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007030:	50                   	push   eax
c0007031:	e8 b0 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007036:	58                   	pop    eax
c0007037:	eb 98                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007039:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000703d:	89 c8                	mov    eax,ecx
c000703f:	83 c1 04             	add    ecx,0x4
c0007042:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007046:	6a 10                	push   0x10
c0007048:	8b 08                	mov    ecx,DWORD PTR [eax]
c000704a:	51                   	push   ecx
c000704b:	e8 f3 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c0007050:	5d                   	pop    ebp
c0007051:	58                   	pop    eax
c0007052:	e9 7a ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007057:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000705b:	89 d0                	mov    eax,edx
c000705d:	83 c2 08             	add    edx,0x8
c0007060:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007064:	6a 10                	push   0x10
c0007066:	8b 00                	mov    eax,DWORD PTR [eax]
c0007068:	50                   	push   eax
c0007069:	e8 d5 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c000706e:	58                   	pop    eax
c000706f:	5a                   	pop    edx
c0007070:	e9 5c ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007075:	6a 25                	push   0x25
c0007077:	e8 6a fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000707c:	5a                   	pop    edx
c000707d:	e9 4f ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007082:	6a 25                	push   0x25
c0007084:	e8 5d fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007089:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000708d:	50                   	push   eax
c000708e:	e8 53 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007093:	5a                   	pop    edx
c0007094:	59                   	pop    ecx
c0007095:	e9 37 ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c000709a:	66 90                	xchg   ax,ax

c000709c <KiUbsanPrintDetails(char const*, void*)>:
c000709c:	83 ec 1c             	sub    esp,0x1c
c000709f:	83 ec 08             	sub    esp,0x8
c00070a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070a6:	68 10 2e 02 c0       	push   0xc0022e10
c00070ab:	e8 b4 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070b0:	83 c4 10             	add    esp,0x10
c00070b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 24 2e 02 c0       	push   0xc0022e24
c00070ca:	e8 95 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 2e 2e 02 c0       	push   0xc0022e2e
c00070e2:	e8 7d fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070f1:	83 ec 08             	sub    esp,0x8
c00070f4:	50                   	push   eax
c00070f5:	68 38 2e 02 c0       	push   0xc0022e38
c00070fa:	e8 65 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070ff:	83 c4 10             	add    esp,0x10
c0007102:	90                   	nop
c0007103:	83 c4 1c             	add    esp,0x1c
c0007106:	c3                   	ret    
c0007107:	90                   	nop

c0007108 <__ubsan_handle_type_mismatch_v1>:
c0007108:	83 ec 0c             	sub    esp,0xc
c000710b:	83 ec 08             	sub    esp,0x8
c000710e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007112:	68 7c 2f 02 c0       	push   0xc0022f7c
c0007117:	e8 80 ff ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000711c:	83 c4 10             	add    esp,0x10
c000711f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007124:	75 16                	jne    c000713c <__ubsan_handle_type_mismatch_v1+0x34>
c0007126:	83 ec 0c             	sub    esp,0xc
c0007129:	68 42 2e 02 c0       	push   0xc0022e42
c000712e:	e8 31 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007133:	83 c4 10             	add    esp,0x10
c0007136:	e9 91 00 00 00       	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000713b:	90                   	nop
c000713c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007140:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007143:	85 c0                	test   eax,eax
c0007145:	74 29                	je     c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000714b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000714e:	83 e8 01             	sub    eax,0x1
c0007151:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007155:	75 19                	jne    c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007157:	83 ec 08             	sub    esp,0x8
c000715a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000715e:	68 9c 2f 02 c0       	push   0xc0022f9c
c0007163:	e8 fc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007168:	83 c4 10             	add    esp,0x10
c000716b:	eb 5f                	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000716d:	8d 76 00             	lea    esi,[esi+0x0]
c0007170:	83 ec 0c             	sub    esp,0xc
c0007173:	68 57 2e 02 c0       	push   0xc0022e57
c0007178:	e8 e7 fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000717d:	83 c4 10             	add    esp,0x10
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007187:	0f b6 c0             	movzx  eax,al
c000718a:	83 ec 08             	sub    esp,0x8
c000718d:	50                   	push   eax
c000718e:	68 71 2e 02 c0       	push   0xc0022e71
c0007193:	e8 cc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007198:	83 c4 10             	add    esp,0x10
c000719b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000719f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071a2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071ad:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071b0:	0f b6 c0             	movzx  eax,al
c00071b3:	8b 04 85 e0 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f20]
c00071ba:	51                   	push   ecx
c00071bb:	52                   	push   edx
c00071bc:	50                   	push   eax
c00071bd:	68 c4 2f 02 c0       	push   0xc0022fc4
c00071c2:	e8 9d fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00071c7:	83 c4 10             	add    esp,0x10
c00071ca:	66 90                	xchg   ax,ax
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	68 7c 2f 02 c0       	push   0xc0022f7c
c00071d4:	e8 39 8e 00 00       	call   c0010012 <KePanic(char const*)>
c00071d9:	83 c4 10             	add    esp,0x10
c00071dc:	90                   	nop
c00071dd:	83 c4 0c             	add    esp,0xc
c00071e0:	c3                   	ret    
c00071e1:	8d 76 00             	lea    esi,[esi+0x0]

c00071e4 <__ubsan_handle_pointer_overflow>:
c00071e4:	83 ec 0c             	sub    esp,0xc
c00071e7:	83 ec 08             	sub    esp,0x8
c00071ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ee:	68 0c 30 02 c0       	push   0xc002300c
c00071f3:	e8 a4 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00071f8:	83 c4 10             	add    esp,0x10
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	68 0c 30 02 c0       	push   0xc002300c
c0007203:	e8 0a 8e 00 00       	call   c0010012 <KePanic(char const*)>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	83 c4 0c             	add    esp,0xc
c000720f:	c3                   	ret    

c0007210 <__ubsan_handle_out_of_bounds>:
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	83 ec 08             	sub    esp,0x8
c0007216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000721a:	68 7c 2e 02 c0       	push   0xc0022e7c
c000721f:	e8 78 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007224:	83 c4 10             	add    esp,0x10
c0007227:	83 ec 0c             	sub    esp,0xc
c000722a:	68 7c 2e 02 c0       	push   0xc0022e7c
c000722f:	e8 de 8d 00 00       	call   c0010012 <KePanic(char const*)>
c0007234:	83 c4 10             	add    esp,0x10
c0007237:	90                   	nop
c0007238:	83 c4 0c             	add    esp,0xc
c000723b:	c3                   	ret    

c000723c <__ubsan_handle_add_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 99 2e 02 c0       	push   0xc0022e99
c000724b:	e8 4c fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 99 2e 02 c0       	push   0xc0022e99
c000725b:	e8 b2 8d 00 00       	call   c0010012 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_load_invalid_value>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 2c 30 02 c0       	push   0xc002302c
c0007277:	e8 20 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 2c 30 02 c0       	push   0xc002302c
c0007287:	e8 86 8d 00 00       	call   c0010012 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_divrem_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 50 30 02 c0       	push   0xc0023050
c00072a3:	e8 f4 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 50 30 02 c0       	push   0xc0023050
c00072b3:	e8 5a 8d 00 00       	call   c0010012 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_mul_overflow>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 b5 2e 02 c0       	push   0xc0022eb5
c00072cf:	e8 c8 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 b5 2e 02 c0       	push   0xc0022eb5
c00072df:	e8 2e 8d 00 00       	call   c0010012 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_sub_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 d1 2e 02 c0       	push   0xc0022ed1
c00072fb:	e8 9c fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 d1 2e 02 c0       	push   0xc0022ed1
c000730b:	e8 02 8d 00 00       	call   c0010012 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_shift_out_of_bounds>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 70 30 02 c0       	push   0xc0023070
c0007327:	e8 70 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 70 30 02 c0       	push   0xc0023070
c0007337:	e8 d6 8c 00 00       	call   c0010012 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_negate_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 94 30 02 c0       	push   0xc0023094
c0007353:	e8 44 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 94 30 02 c0       	push   0xc0023094
c0007363:	e8 aa 8c 00 00       	call   c0010012 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <KiIsHashInTable(unsigned short)>:
c0007370:	0f b7 d0             	movzx  edx,ax
c0007373:	83 e0 07             	and    eax,0x7
c0007376:	c1 fa 03             	sar    edx,0x3
c0007379:	88 c1                	mov    cl,al
c000737b:	0f b6 92 00 93 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd6d00]
c0007382:	d3 fa                	sar    edx,cl
c0007384:	89 d0                	mov    eax,edx
c0007386:	83 e0 01             	and    eax,0x1
c0007389:	c3                   	ret    

c000738a <KiSetHashInTable(unsigned short, bool)>:
c000738a:	56                   	push   esi
c000738b:	53                   	push   ebx
c000738c:	0f b7 d8             	movzx  ebx,ax
c000738f:	83 e0 07             	and    eax,0x7
c0007392:	c1 fb 03             	sar    ebx,0x3
c0007395:	89 c1                	mov    ecx,eax
c0007397:	0f b6 b3 00 93 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd6d00]
c000739e:	b8 01 00 00 00       	mov    eax,0x1
c00073a3:	d3 e0                	shl    eax,cl
c00073a5:	84 d2                	test   dl,dl
c00073a7:	74 04                	je     c00073ad <KiSetHashInTable(unsigned short, bool)+0x23>
c00073a9:	09 f0                	or     eax,esi
c00073ab:	eb 04                	jmp    c00073b1 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073ad:	f7 d0                	not    eax
c00073af:	21 f0                	and    eax,esi
c00073b1:	88 83 00 93 02 c0    	mov    BYTE PTR [ebx-0x3ffd6d00],al
c00073b7:	5b                   	pop    ebx
c00073b8:	5e                   	pop    esi
c00073b9:	c3                   	ret    

c00073ba <KiFlushSymlinkChanges()>:
c00073ba:	57                   	push   edi
c00073bb:	56                   	push   esi
c00073bc:	53                   	push   ebx
c00073bd:	83 ec 1c             	sub    esp,0x1c
c00073c0:	68 14 01 00 00       	push   0x114
c00073c5:	e8 01 89 00 00       	call   c000fccb <malloc>
c00073ca:	83 c4 0c             	add    esp,0xc
c00073cd:	89 c3                	mov    ebx,eax
c00073cf:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00073d5:	68 b3 30 02 c0       	push   0xc00230b3
c00073da:	50                   	push   eax
c00073db:	e8 52 0d 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00073e0:	83 c4 10             	add    esp,0x10
c00073e3:	85 db                	test   ebx,ebx
c00073e5:	75 10                	jne    c00073f7 <KiFlushSymlinkChanges()+0x3d>
c00073e7:	83 ec 0c             	sub    esp,0xc
c00073ea:	68 d1 30 02 c0       	push   0xc00230d1
c00073ef:	e8 1e 8c 00 00       	call   c0010012 <KePanic(char const*)>
c00073f4:	83 c4 10             	add    esp,0x10
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 06                	push   0x6
c00073fb:	53                   	push   ebx
c00073fc:	e8 4f 0d 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	74 10                	je     c0007418 <KiFlushSymlinkChanges()+0x5e>
c0007408:	83 ec 0c             	sub    esp,0xc
c000740b:	68 eb 30 02 c0       	push   0xc00230eb
c0007410:	e8 fd 8b 00 00       	call   c0010012 <KePanic(char const*)>
c0007415:	83 c4 10             	add    esp,0x10
c0007418:	31 f6                	xor    esi,esi
c000741a:	39 35 c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,esi
c0007420:	7e 70                	jle    c0007492 <KiFlushSymlinkChanges()+0xd8>
c0007422:	83 ec 0c             	sub    esp,0xc
c0007425:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007427:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000742b:	89 f0                	mov    eax,esi
c000742d:	57                   	push   edi
c000742e:	c1 e0 08             	shl    eax,0x8
c0007431:	05 00 8f 02 c0       	add    eax,0xc0028f00
c0007436:	50                   	push   eax
c0007437:	6a 00                	push   0x0
c0007439:	68 00 01 00 00       	push   0x100
c000743e:	53                   	push   ebx
c000743f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007442:	83 c4 20             	add    esp,0x20
c0007445:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000744d:	74 10                	je     c000745f <KiFlushSymlinkChanges()+0xa5>
c000744f:	83 ec 0c             	sub    esp,0xc
c0007452:	68 05 31 02 c0       	push   0xc0023105
c0007457:	e8 b6 8b 00 00       	call   c0010012 <KePanic(char const*)>
c000745c:	83 c4 10             	add    esp,0x10
c000745f:	83 ec 0c             	sub    esp,0xc
c0007462:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007464:	8d 14 f5 e0 8e 02 c0 	lea    edx,[esi*8-0x3ffd7120]
c000746b:	57                   	push   edi
c000746c:	52                   	push   edx
c000746d:	6a 00                	push   0x0
c000746f:	6a 08                	push   0x8
c0007471:	53                   	push   ebx
c0007472:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007475:	83 c4 20             	add    esp,0x20
c0007478:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000747d:	74 10                	je     c000748f <KiFlushSymlinkChanges()+0xd5>
c000747f:	83 ec 0c             	sub    esp,0xc
c0007482:	68 1f 31 02 c0       	push   0xc002311f
c0007487:	e8 86 8b 00 00       	call   c0010012 <KePanic(char const*)>
c000748c:	83 c4 10             	add    esp,0x10
c000748f:	46                   	inc    esi
c0007490:	eb 88                	jmp    c000741a <KiFlushSymlinkChanges()+0x60>
c0007492:	83 ec 0c             	sub    esp,0xc
c0007495:	53                   	push   ebx
c0007496:	e8 13 0d 00 00       	call   c00081ae <File::close()>
c000749b:	83 c4 10             	add    esp,0x10
c000749e:	85 db                	test   ebx,ebx
c00074a0:	74 0c                	je     c00074ae <KiFlushSymlinkChanges()+0xf4>
c00074a2:	83 ec 0c             	sub    esp,0xc
c00074a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a7:	53                   	push   ebx
c00074a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c00074b8:	83 c4 10             	add    esp,0x10
c00074bb:	5b                   	pop    ebx
c00074bc:	5e                   	pop    esi
c00074bd:	5f                   	pop    edi
c00074be:	c3                   	ret    

c00074bf <KiDeinitialiseSymlinks(void*)>:
c00074bf:	e9 f6 fe ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>

c00074c4 <KiGetSymlinkHash(char const*)>:
c00074c4:	53                   	push   ebx
c00074c5:	89 c3                	mov    ebx,eax
c00074c7:	83 ec 14             	sub    esp,0x14
c00074ca:	50                   	push   eax
c00074cb:	e8 a0 90 ff ff       	call   c0000570 <strlen>
c00074d0:	5a                   	pop    edx
c00074d1:	59                   	pop    ecx
c00074d2:	50                   	push   eax
c00074d3:	53                   	push   ebx
c00074d4:	e8 08 6f 00 00       	call   c000e3e1 <KeCalculateCRC32(unsigned char*, int)>
c00074d9:	83 c4 18             	add    esp,0x18
c00074dc:	89 c2                	mov    edx,eax
c00074de:	5b                   	pop    ebx
c00074df:	c1 ea 10             	shr    edx,0x10
c00074e2:	31 d0                	xor    eax,edx
c00074e4:	c3                   	ret    

c00074e5 <KiCreateSymlinkID()>:
c00074e5:	55                   	push   ebp
c00074e6:	57                   	push   edi
c00074e7:	56                   	push   esi
c00074e8:	53                   	push   ebx
c00074e9:	31 db                	xor    ebx,ebx
c00074eb:	83 ec 1c             	sub    esp,0x1c
c00074ee:	e8 14 95 00 00       	call   c0010a07 <KeRand()>
c00074f3:	43                   	inc    ebx
c00074f4:	8b 2d 00 b3 02 c0    	mov    ebp,DWORD PTR ds:0xc002b300
c00074fa:	31 d2                	xor    edx,edx
c00074fc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074ff:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007503:	89 0d 00 b3 02 c0    	mov    DWORD PTR ds:0xc002b300,ecx
c0007509:	c1 e0 1f             	shl    eax,0x1f
c000750c:	89 d7                	mov    edi,edx
c000750e:	89 c6                	mov    esi,eax
c0007510:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0007514:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000751c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007522:	75 10                	jne    c0007534 <KiCreateSymlinkID()+0x4f>
c0007524:	83 ec 0c             	sub    esp,0xc
c0007527:	68 39 31 02 c0       	push   0xc0023139
c000752c:	e8 e1 8a 00 00       	call   c0010012 <KePanic(char const*)>
c0007531:	83 c4 10             	add    esp,0x10
c0007534:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007538:	75 04                	jne    c000753e <KiCreateSymlinkID()+0x59>
c000753a:	39 f5                	cmp    ebp,esi
c000753c:	74 b0                	je     c00074ee <KiCreateSymlinkID()+0x9>
c000753e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007542:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007546:	31 f0                	xor    eax,esi
c0007548:	83 c4 1c             	add    esp,0x1c
c000754b:	31 fa                	xor    edx,edi
c000754d:	5b                   	pop    ebx
c000754e:	5e                   	pop    esi
c000754f:	5f                   	pop    edi
c0007550:	5d                   	pop    ebp
c0007551:	c3                   	ret    

c0007552 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007552:	53                   	push   ebx
c0007553:	83 ec 0c             	sub    esp,0xc
c0007556:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000755a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000755e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007562:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0007567:	68 00 01 00 00       	push   0x100
c000756c:	89 0c c5 e4 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd711c],ecx
c0007573:	6a 00                	push   0x0
c0007575:	89 14 c5 e0 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7120],edx
c000757c:	c1 e0 08             	shl    eax,0x8
c000757f:	05 00 8f 02 c0       	add    eax,0xc0028f00
c0007584:	50                   	push   eax
c0007585:	e8 66 8f ff ff       	call   c00004f0 <memset>
c000758a:	58                   	pop    eax
c000758b:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0007590:	5a                   	pop    edx
c0007591:	c1 e0 08             	shl    eax,0x8
c0007594:	53                   	push   ebx
c0007595:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000759a:	50                   	push   eax
c000759b:	e8 a0 90 ff ff       	call   c0000640 <strcpy>
c00075a0:	89 d8                	mov    eax,ebx
c00075a2:	e8 1d ff ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c00075a7:	ba 01 00 00 00       	mov    edx,0x1
c00075ac:	0f b7 c0             	movzx  eax,ax
c00075af:	e8 d6 fd ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c00075b4:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00075b9:	83 c4 10             	add    esp,0x10
c00075bc:	40                   	inc    eax
c00075bd:	a3 c0 8e 02 c0       	mov    ds:0xc0028ec0,eax
c00075c2:	83 f8 03             	cmp    eax,0x3
c00075c5:	7e 09                	jle    c00075d0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075c7:	83 c4 08             	add    esp,0x8
c00075ca:	5b                   	pop    ebx
c00075cb:	e9 ea fd ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>
c00075d0:	83 c4 08             	add    esp,0x8
c00075d3:	5b                   	pop    ebx
c00075d4:	c3                   	ret    

c00075d5 <KeInitialiseSymlinks()>:
c00075d5:	57                   	push   edi
c00075d6:	56                   	push   esi
c00075d7:	53                   	push   ebx
c00075d8:	81 ec 14 01 00 00    	sub    esp,0x114
c00075de:	c7 05 00 b3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b300,0x0
c00075e8:	68 00 20 00 00       	push   0x2000
c00075ed:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c00075f7:	6a 00                	push   0x0
c00075f9:	68 00 93 02 c0       	push   0xc0029300
c00075fe:	e8 ed 8e ff ff       	call   c00004f0 <memset>
c0007603:	59                   	pop    ecx
c0007604:	5b                   	pop    ebx
c0007605:	6a 00                	push   0x0
c0007607:	68 bf 74 00 c0       	push   0xc00074bf
c000760c:	e8 bc 5b 00 00       	call   c000d1cd <KeRegisterAtexit(void (*)(void*), void*)>
c0007611:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007618:	e8 ae 86 00 00       	call   c000fccb <malloc>
c000761d:	83 c4 0c             	add    esp,0xc
c0007620:	89 c3                	mov    ebx,eax
c0007622:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0007628:	68 b3 30 02 c0       	push   0xc00230b3
c000762d:	50                   	push   eax
c000762e:	e8 ff 0a 00 00       	call   c0008132 <File::File(char const*, Process*)>
c0007633:	83 c4 10             	add    esp,0x10
c0007636:	85 db                	test   ebx,ebx
c0007638:	75 10                	jne    c000764a <KeInitialiseSymlinks()+0x75>
c000763a:	83 ec 0c             	sub    esp,0xc
c000763d:	68 42 31 02 c0       	push   0xc0023142
c0007642:	e8 cb 89 00 00       	call   c0010012 <KePanic(char const*)>
c0007647:	83 c4 10             	add    esp,0x10
c000764a:	83 ec 0c             	sub    esp,0xc
c000764d:	53                   	push   ebx
c000764e:	e8 c1 0d 00 00       	call   c0008414 <File::exists()>
c0007653:	83 c4 10             	add    esp,0x10
c0007656:	84 c0                	test   al,al
c0007658:	75 3a                	jne    c0007694 <KeInitialiseSymlinks()+0xbf>
c000765a:	52                   	push   edx
c000765b:	52                   	push   edx
c000765c:	6a 12                	push   0x12
c000765e:	53                   	push   ebx
c000765f:	e8 ec 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007664:	83 c4 10             	add    esp,0x10
c0007667:	85 c0                	test   eax,eax
c0007669:	74 10                	je     c000767b <KeInitialiseSymlinks()+0xa6>
c000766b:	83 ec 0c             	sub    esp,0xc
c000766e:	68 5f 31 02 c0       	push   0xc002315f
c0007673:	e8 9a 89 00 00       	call   c0010012 <KePanic(char const*)>
c0007678:	83 c4 10             	add    esp,0x10
c000767b:	83 ec 0c             	sub    esp,0xc
c000767e:	53                   	push   ebx
c000767f:	e8 2a 0b 00 00       	call   c00081ae <File::close()>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 db                	test   ebx,ebx
c0007689:	0f 84 9e 00 00 00    	je     c000772d <KeInitialiseSymlinks()+0x158>
c000768f:	e9 8d 00 00 00       	jmp    c0007721 <KeInitialiseSymlinks()+0x14c>
c0007694:	50                   	push   eax
c0007695:	50                   	push   eax
c0007696:	6a 01                	push   0x1
c0007698:	53                   	push   ebx
c0007699:	e8 b2 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c000769e:	83 c4 10             	add    esp,0x10
c00076a1:	85 c0                	test   eax,eax
c00076a3:	74 10                	je     c00076b5 <KeInitialiseSymlinks()+0xe0>
c00076a5:	83 ec 0c             	sub    esp,0xc
c00076a8:	68 7c 31 02 c0       	push   0xc002317c
c00076ad:	e8 60 89 00 00       	call   c0010012 <KePanic(char const*)>
c00076b2:	83 c4 10             	add    esp,0x10
c00076b5:	83 ec 0c             	sub    esp,0xc
c00076b8:	ff 05 00 b3 02 c0    	inc    DWORD PTR ds:0xc002b300
c00076be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076c4:	57                   	push   edi
c00076c5:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076c9:	56                   	push   esi
c00076ca:	6a 00                	push   0x0
c00076cc:	68 00 01 00 00       	push   0x100
c00076d1:	53                   	push   ebx
c00076d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076d5:	83 c4 20             	add    esp,0x20
c00076d8:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076e0:	75 33                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076e2:	83 ec 0c             	sub    esp,0xc
c00076e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076e7:	57                   	push   edi
c00076e8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076ec:	52                   	push   edx
c00076ed:	6a 00                	push   0x0
c00076ef:	6a 08                	push   0x8
c00076f1:	53                   	push   ebx
c00076f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076f5:	83 c4 20             	add    esp,0x20
c00076f8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076fd:	75 16                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076ff:	89 f0                	mov    eax,esi
c0007701:	e8 be fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c0007706:	ba 01 00 00 00       	mov    edx,0x1
c000770b:	0f b7 c0             	movzx  eax,ax
c000770e:	e8 77 fc ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c0007713:	eb a0                	jmp    c00076b5 <KeInitialiseSymlinks()+0xe0>
c0007715:	83 ec 0c             	sub    esp,0xc
c0007718:	53                   	push   ebx
c0007719:	e8 90 0a 00 00       	call   c00081ae <File::close()>
c000771e:	83 c4 10             	add    esp,0x10
c0007721:	83 ec 0c             	sub    esp,0xc
c0007724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007726:	53                   	push   ebx
c0007727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000772a:	83 c4 10             	add    esp,0x10
c000772d:	81 c4 10 01 00 00    	add    esp,0x110
c0007733:	5b                   	pop    ebx
c0007734:	5e                   	pop    esi
c0007735:	5f                   	pop    edi
c0007736:	c3                   	ret    

c0007737 <KiIsSymlinkRegistered(char const*)>:
c0007737:	55                   	push   ebp
c0007738:	57                   	push   edi
c0007739:	56                   	push   esi
c000773a:	53                   	push   ebx
c000773b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007741:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007748:	89 f0                	mov    eax,esi
c000774a:	e8 75 fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c000774f:	0f b7 c0             	movzx  eax,ax
c0007752:	e8 19 fc ff ff       	call   c0007370 <KiIsHashInTable(unsigned short)>
c0007757:	31 d2                	xor    edx,edx
c0007759:	88 c1                	mov    cl,al
c000775b:	31 c0                	xor    eax,eax
c000775d:	84 c9                	test   cl,cl
c000775f:	0f 84 31 01 00 00    	je     c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007765:	31 db                	xor    ebx,ebx
c0007767:	39 1d c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,ebx
c000776d:	7e 30                	jle    c000779f <KiIsSymlinkRegistered(char const*)+0x68>
c000776f:	89 d8                	mov    eax,ebx
c0007771:	51                   	push   ecx
c0007772:	c1 e0 08             	shl    eax,0x8
c0007775:	51                   	push   ecx
c0007776:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000777b:	50                   	push   eax
c000777c:	56                   	push   esi
c000777d:	e8 ce 8f ff ff       	call   c0000750 <strcmp>
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	85 c0                	test   eax,eax
c0007787:	75 13                	jne    c000779c <KiIsSymlinkRegistered(char const*)+0x65>
c0007789:	8b 04 dd e0 8e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd7120]
c0007790:	8b 14 dd e4 8e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd711c]
c0007797:	e9 fa 00 00 00       	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000779c:	43                   	inc    ebx
c000779d:	eb c8                	jmp    c0007767 <KiIsSymlinkRegistered(char const*)+0x30>
c000779f:	83 ec 0c             	sub    esp,0xc
c00077a2:	68 14 01 00 00       	push   0x114
c00077a7:	e8 1f 85 00 00       	call   c000fccb <malloc>
c00077ac:	83 c4 0c             	add    esp,0xc
c00077af:	89 c3                	mov    ebx,eax
c00077b1:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00077b7:	68 b3 30 02 c0       	push   0xc00230b3
c00077bc:	50                   	push   eax
c00077bd:	e8 70 09 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00077c2:	83 c4 10             	add    esp,0x10
c00077c5:	85 db                	test   ebx,ebx
c00077c7:	75 12                	jne    c00077db <KiIsSymlinkRegistered(char const*)+0xa4>
c00077c9:	83 ec 0c             	sub    esp,0xc
c00077cc:	68 97 31 02 c0       	push   0xc0023197
c00077d1:	e8 3c 88 00 00       	call   c0010012 <KePanic(char const*)>
c00077d6:	83 c4 10             	add    esp,0x10
c00077d9:	eb 10                	jmp    c00077eb <KiIsSymlinkRegistered(char const*)+0xb4>
c00077db:	83 ec 0c             	sub    esp,0xc
c00077de:	53                   	push   ebx
c00077df:	e8 30 0c 00 00       	call   c0008414 <File::exists()>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	84 c0                	test   al,al
c00077e9:	74 de                	je     c00077c9 <KiIsSymlinkRegistered(char const*)+0x92>
c00077eb:	52                   	push   edx
c00077ec:	52                   	push   edx
c00077ed:	6a 01                	push   0x1
c00077ef:	53                   	push   ebx
c00077f0:	e8 5b 09 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00077f5:	83 c4 10             	add    esp,0x10
c00077f8:	85 c0                	test   eax,eax
c00077fa:	74 10                	je     c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c00077fc:	83 ec 0c             	sub    esp,0xc
c00077ff:	68 b2 31 02 c0       	push   0xc00231b2
c0007804:	e8 09 88 00 00       	call   c0010012 <KePanic(char const*)>
c0007809:	83 c4 10             	add    esp,0x10
c000780c:	83 ec 0c             	sub    esp,0xc
c000780f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007811:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007815:	55                   	push   ebp
c0007816:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000781a:	57                   	push   edi
c000781b:	6a 00                	push   0x0
c000781d:	68 00 01 00 00       	push   0x100
c0007822:	53                   	push   ebx
c0007823:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007826:	83 c4 20             	add    esp,0x20
c0007829:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007831:	75 4b                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007838:	55                   	push   ebp
c0007839:	8d 54 24 18          	lea    edx,[esp+0x18]
c000783d:	52                   	push   edx
c000783e:	6a 00                	push   0x0
c0007840:	6a 08                	push   0x8
c0007842:	53                   	push   ebx
c0007843:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007846:	83 c4 20             	add    esp,0x20
c0007849:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000784e:	75 2e                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007850:	50                   	push   eax
c0007851:	50                   	push   eax
c0007852:	57                   	push   edi
c0007853:	56                   	push   esi
c0007854:	e8 f7 8e ff ff       	call   c0000750 <strcmp>
c0007859:	83 c4 10             	add    esp,0x10
c000785c:	85 c0                	test   eax,eax
c000785e:	75 ac                	jne    c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c0007860:	83 ec 0c             	sub    esp,0xc
c0007863:	53                   	push   ebx
c0007864:	e8 45 09 00 00       	call   c00081ae <File::close()>
c0007869:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000786e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007871:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007875:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007879:	83 c4 10             	add    esp,0x10
c000787c:	eb 18                	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000787e:	83 ec 0c             	sub    esp,0xc
c0007881:	53                   	push   ebx
c0007882:	e8 27 09 00 00       	call   c00081ae <File::close()>
c0007887:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000788c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000788f:	83 c4 10             	add    esp,0x10
c0007892:	31 c0                	xor    eax,eax
c0007894:	31 d2                	xor    edx,edx
c0007896:	81 c4 1c 01 00 00    	add    esp,0x11c
c000789c:	5b                   	pop    ebx
c000789d:	5e                   	pop    esi
c000789e:	5f                   	pop    edi
c000789f:	5d                   	pop    ebp
c00078a0:	c3                   	ret    

c00078a1 <KeDereferenceSymlink(char const*, char*)>:
c00078a1:	55                   	push   ebp
c00078a2:	57                   	push   edi
c00078a3:	56                   	push   esi
c00078a4:	53                   	push   ebx
c00078a5:	83 ec 48             	sub    esp,0x48
c00078a8:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ac:	56                   	push   esi
c00078ad:	e8 85 fe ff ff       	call   c0007737 <KiIsSymlinkRegistered(char const*)>
c00078b2:	83 c4 10             	add    esp,0x10
c00078b5:	89 c7                	mov    edi,eax
c00078b7:	89 d0                	mov    eax,edx
c00078b9:	09 f8                	or     eax,edi
c00078bb:	75 07                	jne    c00078c4 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078bd:	31 c0                	xor    eax,eax
c00078bf:	e9 7c 01 00 00       	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078c4:	83 ec 0c             	sub    esp,0xc
c00078c7:	89 d5                	mov    ebp,edx
c00078c9:	68 14 01 00 00       	push   0x114
c00078ce:	e8 f8 83 00 00       	call   c000fccb <malloc>
c00078d3:	83 c4 0c             	add    esp,0xc
c00078d6:	89 c3                	mov    ebx,eax
c00078d8:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00078de:	56                   	push   esi
c00078df:	50                   	push   eax
c00078e0:	e8 4d 08 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00078e5:	83 c4 10             	add    esp,0x10
c00078e8:	85 db                	test   ebx,ebx
c00078ea:	0f 84 32 01 00 00    	je     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078f0:	56                   	push   esi
c00078f1:	56                   	push   esi
c00078f2:	6a 01                	push   0x1
c00078f4:	53                   	push   ebx
c00078f5:	e8 56 08 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00078fa:	83 c4 10             	add    esp,0x10
c00078fd:	85 c0                	test   eax,eax
c00078ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007901:	74 09                	je     c000790c <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007903:	83 ec 0c             	sub    esp,0xc
c0007906:	53                   	push   ebx
c0007907:	e9 10 01 00 00       	jmp    c0007a1c <KeDereferenceSymlink(char const*, char*)+0x17b>
c000790c:	83 ec 0c             	sub    esp,0xc
c000790f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007913:	56                   	push   esi
c0007914:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007918:	52                   	push   edx
c0007919:	6a 00                	push   0x0
c000791b:	6a 08                	push   0x8
c000791d:	53                   	push   ebx
c000791e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007921:	83 c4 20             	add    esp,0x20
c0007924:	85 c0                	test   eax,eax
c0007926:	0f 85 e2 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000792c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007931:	0f 85 d7 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007937:	83 ec 0c             	sub    esp,0xc
c000793a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000793c:	56                   	push   esi
c000793d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007941:	52                   	push   edx
c0007942:	6a 00                	push   0x0
c0007944:	6a 08                	push   0x8
c0007946:	53                   	push   ebx
c0007947:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000794a:	83 c4 20             	add    esp,0x20
c000794d:	85 c0                	test   eax,eax
c000794f:	0f 85 b9 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007955:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000795a:	0f 85 ae 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007960:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0007964:	0f 85 53 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c000796a:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000796e:	0f 85 49 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007974:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000797c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0007984:	51                   	push   ecx
c0007985:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0007989:	50                   	push   eax
c000798a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000798e:	50                   	push   eax
c000798f:	53                   	push   ebx
c0007990:	e8 bd 0a 00 00       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0007995:	83 c4 10             	add    esp,0x10
c0007998:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000799d:	75 6f                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799f:	31 c9                	xor    ecx,ecx
c00079a1:	bf 0f 00 00 00       	mov    edi,0xf
c00079a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079ae:	39 c7                	cmp    edi,eax
c00079b0:	89 cf                	mov    edi,ecx
c00079b2:	19 d7                	sbb    edi,edx
c00079b4:	73 58                	jae    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b6:	83 c0 f0             	add    eax,0xfffffff0
c00079b9:	bf ff 00 00 00       	mov    edi,0xff
c00079be:	83 d2 ff             	adc    edx,0xffffffff
c00079c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079c5:	39 c7                	cmp    edi,eax
c00079c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079cb:	19 d1                	sbb    ecx,edx
c00079cd:	72 53                	jb     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079cf:	40                   	inc    eax
c00079d0:	52                   	push   edx
c00079d1:	50                   	push   eax
c00079d2:	6a 00                	push   0x0
c00079d4:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079d8:	e8 13 8b ff ff       	call   c00004f0 <memset>
c00079dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079df:	89 34 24             	mov    DWORD PTR [esp],esi
c00079e2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ee:	53                   	push   ebx
c00079ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079f2:	83 c4 20             	add    esp,0x20
c00079f5:	85 c0                	test   eax,eax
c00079f7:	75 15                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079fd:	89 c7                	mov    edi,eax
c00079ff:	c1 ff 1f             	sar    edi,0x1f
c0007a02:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a06:	75 06                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a08:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a0c:	74 19                	je     c0007a27 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a0e:	83 ec 0c             	sub    esp,0xc
c0007a11:	53                   	push   ebx
c0007a12:	e8 97 07 00 00       	call   c00081ae <File::close()>
c0007a17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1f:	83 c4 10             	add    esp,0x10
c0007a22:	83 c8 ff             	or     eax,0xffffffff
c0007a25:	eb 19                	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a27:	83 ec 0c             	sub    esp,0xc
c0007a2a:	53                   	push   ebx
c0007a2b:	e8 7e 07 00 00       	call   c00081ae <File::close()>
c0007a30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a38:	83 c4 10             	add    esp,0x10
c0007a3b:	b8 01 00 00 00       	mov    eax,0x1
c0007a40:	83 c4 3c             	add    esp,0x3c
c0007a43:	5b                   	pop    ebx
c0007a44:	5e                   	pop    esi
c0007a45:	5f                   	pop    edi
c0007a46:	5d                   	pop    ebp
c0007a47:	c3                   	ret    

c0007a48 <KeCreateSymlink(char const*, char const*)>:
c0007a48:	55                   	push   ebp
c0007a49:	57                   	push   edi
c0007a4a:	56                   	push   esi
c0007a4b:	53                   	push   ebx
c0007a4c:	83 ec 38             	sub    esp,0x38
c0007a4f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a53:	68 14 01 00 00       	push   0x114
c0007a58:	e8 6e 82 00 00       	call   c000fccb <malloc>
c0007a5d:	6a 00                	push   0x0
c0007a5f:	89 c3                	mov    ebx,eax
c0007a61:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0007a67:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a6b:	50                   	push   eax
c0007a6c:	e8 c3 05 00 00       	call   c0008034 <File::File(char const*, Process*, bool)>
c0007a71:	83 c4 20             	add    esp,0x20
c0007a74:	b8 01 00 00 00       	mov    eax,0x1
c0007a79:	85 db                	test   ebx,ebx
c0007a7b:	0f 84 fb 00 00 00    	je     c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007a81:	52                   	push   edx
c0007a82:	52                   	push   edx
c0007a83:	6a 12                	push   0x12
c0007a85:	53                   	push   ebx
c0007a86:	e8 c5 06 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007a8b:	83 c4 10             	add    esp,0x10
c0007a8e:	85 c0                	test   eax,eax
c0007a90:	74 0b                	je     c0007a9d <KeCreateSymlink(char const*, char const*)+0x55>
c0007a92:	83 ec 0c             	sub    esp,0xc
c0007a95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a97:	53                   	push   ebx
c0007a98:	e9 d4 00 00 00       	jmp    c0007b71 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a9d:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007aa1:	be cd 31 02 c0       	mov    esi,0xc00231cd
c0007aa6:	b9 09 00 00 00       	mov    ecx,0x9
c0007aab:	fc                   	cld    
c0007aac:	83 ec 0c             	sub    esp,0xc
c0007aaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ab1:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007ab5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ab7:	56                   	push   esi
c0007ab8:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007abc:	52                   	push   edx
c0007abd:	6a 00                	push   0x0
c0007abf:	6a 08                	push   0x8
c0007ac1:	53                   	push   ebx
c0007ac2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ac5:	83 c4 20             	add    esp,0x20
c0007ac8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007acd:	0f 85 90 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ad3:	85 c0                	test   eax,eax
c0007ad5:	0f 85 88 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007adb:	e8 05 fa ff ff       	call   c00074e5 <KiCreateSymlinkID()>
c0007ae0:	83 ec 0c             	sub    esp,0xc
c0007ae3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007ae7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007aeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aed:	56                   	push   esi
c0007aee:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007af2:	52                   	push   edx
c0007af3:	6a 00                	push   0x0
c0007af5:	6a 08                	push   0x8
c0007af7:	53                   	push   ebx
c0007af8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007afb:	83 c4 20             	add    esp,0x20
c0007afe:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b03:	75 5e                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b05:	85 c0                	test   eax,eax
c0007b07:	75 5a                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b09:	83 ec 0c             	sub    esp,0xc
c0007b0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b11:	55                   	push   ebp
c0007b12:	e8 59 8a ff ff       	call   c0000570 <strlen>
c0007b17:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b1a:	31 d2                	xor    edx,edx
c0007b1c:	55                   	push   ebp
c0007b1d:	52                   	push   edx
c0007b1e:	50                   	push   eax
c0007b1f:	53                   	push   ebx
c0007b20:	ff d7                	call   edi
c0007b22:	83 c4 14             	add    esp,0x14
c0007b25:	89 c6                	mov    esi,eax
c0007b27:	55                   	push   ebp
c0007b28:	e8 43 8a ff ff       	call   c0000570 <strlen>
c0007b2d:	83 c4 10             	add    esp,0x10
c0007b30:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b34:	75 2d                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b36:	85 f6                	test   esi,esi
c0007b38:	75 29                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b3a:	50                   	push   eax
c0007b3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b43:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b47:	e8 06 fa ff ff       	call   c0007552 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b4f:	e8 5a 06 00 00       	call   c00081ae <File::close()>
c0007b54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5c:	83 c4 10             	add    esp,0x10
c0007b5f:	31 c0                	xor    eax,eax
c0007b61:	eb 19                	jmp    c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007b63:	83 ec 0c             	sub    esp,0xc
c0007b66:	53                   	push   ebx
c0007b67:	e8 42 06 00 00       	call   c00081ae <File::close()>
c0007b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b74:	83 c4 10             	add    esp,0x10
c0007b77:	b8 01 00 00 00       	mov    eax,0x1
c0007b7c:	83 c4 2c             	add    esp,0x2c
c0007b7f:	5b                   	pop    ebx
c0007b80:	5e                   	pop    esi
c0007b81:	5f                   	pop    edi
c0007b82:	5d                   	pop    ebp
c0007b83:	c3                   	ret    

c0007b84 <File::read(unsigned long long, void*, int*)>:
c0007b84:	53                   	push   ebx
c0007b85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b8d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b94:	83 f8 19             	cmp    eax,0x19
c0007b97:	77 35                	ja     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007b99:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	74 2a                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007ba4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007baa:	85 c0                	test   eax,eax
c0007bac:	74 20                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007bae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bb2:	74 21                	je     c0007bd5 <File::read(unsigned long long, void*, int*)+0x51>
c0007bb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bb6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bba:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bc8:	5b                   	pop    ebx
c0007bc9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bcc:	ff e0                	jmp    eax
c0007bce:	b8 0b 00 00 00       	mov    eax,0xb
c0007bd3:	eb 05                	jmp    c0007bda <File::read(unsigned long long, void*, int*)+0x56>
c0007bd5:	b8 05 00 00 00       	mov    eax,0x5
c0007bda:	5b                   	pop    ebx
c0007bdb:	c3                   	ret    

c0007bdc <File::write(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::write(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::write(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <Directory::read(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::write(unsigned long long, void*, int*)>:
c0007c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c90:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c97:	b8 0b 00 00 00       	mov    eax,0xb
c0007c9c:	83 fa 19             	cmp    edx,0x19
c0007c9f:	77 18                	ja     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ca1:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0007ca8:	85 d2                	test   edx,edx
c0007caa:	74 0d                	je     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cac:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cb3:	19 c0                	sbb    eax,eax
c0007cb5:	83 e0 0a             	and    eax,0xa
c0007cb8:	40                   	inc    eax
c0007cb9:	c3                   	ret    

c0007cba <File::isAtty()>:
c0007cba:	31 c0                	xor    eax,eax
c0007cbc:	c3                   	ret    
c0007cbd:	90                   	nop

c0007cbe <Directory::isAtty()>:
c0007cbe:	31 c0                	xor    eax,eax
c0007cc0:	c3                   	ret    
c0007cc1:	90                   	nop

c0007cc2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007cc2:	b8 0a 00 00 00       	mov    eax,0xa
c0007cc7:	c3                   	ret    

c0007cc8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cc8:	b8 0a 00 00 00       	mov    eax,0xa
c0007ccd:	c3                   	ret    

c0007cce <Filesystem::allocateSwapfile(char const*, int)>:
c0007cce:	31 c0                	xor    eax,eax
c0007cd0:	31 d2                	xor    edx,edx
c0007cd2:	c3                   	ret    
c0007cd3:	90                   	nop

c0007cd4 <File::~File()>:
c0007cd4:	83 ec 0c             	sub    esp,0xc
c0007cd7:	ba a4 32 02 c0       	mov    edx,0xc00232a4
c0007cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce0:	89 10                	mov    DWORD PTR [eax],edx
c0007ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce6:	83 ec 0c             	sub    esp,0xc
c0007ce9:	50                   	push   eax
c0007cea:	e8 93 b5 00 00       	call   c0013282 <UnixFile::~UnixFile()>
c0007cef:	83 c4 10             	add    esp,0x10
c0007cf2:	90                   	nop
c0007cf3:	83 c4 0c             	add    esp,0xc
c0007cf6:	c3                   	ret    
c0007cf7:	90                   	nop

c0007cf8 <File::~File()>:
c0007cf8:	83 ec 0c             	sub    esp,0xc
c0007cfb:	83 ec 0c             	sub    esp,0xc
c0007cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d02:	e8 cd ff ff ff       	call   c0007cd4 <File::~File()>
c0007d07:	83 c4 10             	add    esp,0x10
c0007d0a:	83 ec 08             	sub    esp,0x8
c0007d0d:	68 14 01 00 00       	push   0x114
c0007d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d16:	e8 38 56 00 00       	call   c000d353 <operator delete(void*, unsigned long)>
c0007d1b:	83 c4 10             	add    esp,0x10
c0007d1e:	83 c4 0c             	add    esp,0xc
c0007d21:	c3                   	ret    

c0007d22 <Directory::~Directory()>:
c0007d22:	83 ec 0c             	sub    esp,0xc
c0007d25:	ba c0 32 02 c0       	mov    edx,0xc00232c0
c0007d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d2e:	89 10                	mov    DWORD PTR [eax],edx
c0007d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d34:	83 ec 0c             	sub    esp,0xc
c0007d37:	50                   	push   eax
c0007d38:	e8 45 b5 00 00       	call   c0013282 <UnixFile::~UnixFile()>
c0007d3d:	83 c4 10             	add    esp,0x10
c0007d40:	90                   	nop
c0007d41:	83 c4 0c             	add    esp,0xc
c0007d44:	c3                   	ret    
c0007d45:	90                   	nop

c0007d46 <Directory::~Directory()>:
c0007d46:	83 ec 0c             	sub    esp,0xc
c0007d49:	83 ec 0c             	sub    esp,0xc
c0007d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d50:	e8 cd ff ff ff       	call   c0007d22 <Directory::~Directory()>
c0007d55:	83 c4 10             	add    esp,0x10
c0007d58:	83 ec 08             	sub    esp,0x8
c0007d5b:	68 14 01 00 00       	push   0x114
c0007d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d64:	e8 ea 55 00 00       	call   c000d353 <operator delete(void*, unsigned long)>
c0007d69:	83 c4 10             	add    esp,0x10
c0007d6c:	83 c4 0c             	add    esp,0xc
c0007d6f:	c3                   	ret    

c0007d70 <Filesystem::Filesystem()>:
c0007d70:	ba 38 32 02 c0       	mov    edx,0xc0023238
c0007d75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d79:	89 10                	mov    DWORD PTR [eax],edx
c0007d7b:	8b 15 04 b3 02 c0    	mov    edx,DWORD PTR ds:0xc002b304
c0007d81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d8c:	a3 04 b3 02 c0       	mov    ds:0xc002b304,eax
c0007d91:	90                   	nop
c0007d92:	c3                   	ret    
c0007d93:	90                   	nop

c0007d94 <Filesystem::~Filesystem()>:
c0007d94:	ba 38 32 02 c0       	mov    edx,0xc0023238
c0007d99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9d:	89 10                	mov    DWORD PTR [eax],edx
c0007d9f:	90                   	nop
c0007da0:	c3                   	ret    
c0007da1:	90                   	nop

c0007da2 <Filesystem::~Filesystem()>:
c0007da2:	83 ec 0c             	sub    esp,0xc
c0007da5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007da9:	e8 e6 ff ff ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0007dae:	83 c4 04             	add    esp,0x4
c0007db1:	83 ec 08             	sub    esp,0x8
c0007db4:	6a 08                	push   0x8
c0007db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dba:	e8 94 55 00 00       	call   c000d353 <operator delete(void*, unsigned long)>
c0007dbf:	83 c4 10             	add    esp,0x10
c0007dc2:	83 c4 0c             	add    esp,0xc
c0007dc5:	c3                   	ret    

c0007dc6 <Fs::getcwd(Process*, char*, int)>:
c0007dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007dca:	31 c0                	xor    eax,eax
c0007dcc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007dcf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007dd3:	7d 15                	jge    c0007dea <Fs::getcwd(Process*, char*, int)+0x24>
c0007dd5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dd9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007de0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007de3:	84 c9                	test   cl,cl
c0007de5:	74 06                	je     c0007ded <Fs::getcwd(Process*, char*, int)+0x27>
c0007de7:	40                   	inc    eax
c0007de8:	eb e2                	jmp    c0007dcc <Fs::getcwd(Process*, char*, int)+0x6>
c0007dea:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007ded:	31 c0                	xor    eax,eax
c0007def:	c3                   	ret    

c0007df0 <Fs::initVFS()>:
c0007df0:	83 ec 18             	sub    esp,0x18
c0007df3:	6a 08                	push   0x8
c0007df5:	e8 d1 7e 00 00       	call   c000fccb <malloc>
c0007dfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dfd:	e8 b2 41 01 00       	call   c001bfb4 <FAT::FAT()>
c0007e02:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e09:	e8 bd 7e 00 00       	call   c000fccb <malloc>
c0007e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e11:	e8 ca 50 01 00       	call   c001cee0 <ISO9660::ISO9660()>
c0007e16:	83 c4 1c             	add    esp,0x1c
c0007e19:	c3                   	ret    

c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e1a:	55                   	push   ebp
c0007e1b:	57                   	push   edi
c0007e1c:	56                   	push   esi
c0007e1d:	53                   	push   ebx
c0007e1e:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e24:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e2b:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e32:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e3a:	68 00 04 00 00       	push   0x400
c0007e3f:	6a 00                	push   0x0
c0007e41:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e45:	57                   	push   edi
c0007e46:	e8 a5 86 ff ff       	call   c00004f0 <memset>
c0007e4b:	83 c4 10             	add    esp,0x10
c0007e4e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007e52:	75 0b                	jne    c0007e5f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007e54:	50                   	push   eax
c0007e55:	50                   	push   eax
c0007e56:	55                   	push   ebp
c0007e57:	57                   	push   edi
c0007e58:	e8 e3 87 ff ff       	call   c0000640 <strcpy>
c0007e5d:	eb 51                	jmp    c0007eb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007e5f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007e63:	83 f8 5c             	cmp    eax,0x5c
c0007e66:	74 05                	je     c0007e6d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007e68:	83 f8 2f             	cmp    eax,0x2f
c0007e6b:	75 1e                	jne    c0007e8b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007e6d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007e74:	8a 00                	mov    al,BYTE PTR [eax]
c0007e76:	3c 60                	cmp    al,0x60
c0007e78:	7e 03                	jle    c0007e7d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007e7a:	83 e8 20             	sub    eax,0x20
c0007e7d:	88 04 24             	mov    BYTE PTR [esp],al
c0007e80:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007e87:	50                   	push   eax
c0007e88:	50                   	push   eax
c0007e89:	eb 1e                	jmp    c0007ea9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007e8b:	50                   	push   eax
c0007e8c:	50                   	push   eax
c0007e8d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007e94:	57                   	push   edi
c0007e95:	e8 a6 87 ff ff       	call   c0000640 <strcpy>
c0007e9a:	58                   	pop    eax
c0007e9b:	5a                   	pop    edx
c0007e9c:	68 94 4f 02 c0       	push   0xc0024f94
c0007ea1:	57                   	push   edi
c0007ea2:	e8 99 89 ff ff       	call   c0000840 <strcat>
c0007ea7:	59                   	pop    ecx
c0007ea8:	58                   	pop    eax
c0007ea9:	55                   	push   ebp
c0007eaa:	57                   	push   edi
c0007eab:	e8 90 89 ff ff       	call   c0000840 <strcat>
c0007eb0:	83 c4 10             	add    esp,0x10
c0007eb3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007eb6:	3c 60                	cmp    al,0x60
c0007eb8:	7e 03                	jle    c0007ebd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007eba:	83 e8 20             	sub    eax,0x20
c0007ebd:	88 04 24             	mov    BYTE PTR [esp],al
c0007ec0:	88 06                	mov    BYTE PTR [esi],al
c0007ec2:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007ec9:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007ecf:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007ed3:	bf 03 00 00 00       	mov    edi,0x3
c0007ed8:	b8 03 00 00 00       	mov    eax,0x3
c0007edd:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007ee1:	89 e9                	mov    ecx,ebp
c0007ee3:	85 ed                	test   ebp,ebp
c0007ee5:	0f 84 97 00 00 00    	je     c0007f82 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007eeb:	8d 57 01             	lea    edx,[edi+0x1]
c0007eee:	83 fd 5c             	cmp    ebp,0x5c
c0007ef1:	74 05                	je     c0007ef8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007ef3:	83 fd 2f             	cmp    ebp,0x2f
c0007ef6:	75 12                	jne    c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007ef8:	89 c5                	mov    ebp,eax
c0007efa:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007eff:	74 09                	je     c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f01:	40                   	inc    eax
c0007f02:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f06:	89 d7                	mov    edi,edx
c0007f08:	eb d3                	jmp    c0007edd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f0a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f0f:	0f be e9             	movsx  ebp,cl
c0007f12:	75 5e                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f14:	83 fd 2e             	cmp    ebp,0x2e
c0007f17:	75 59                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f19:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f1d:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f22:	74 18                	je     c0007f3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f24:	83 fd 2e             	cmp    ebp,0x2e
c0007f27:	74 53                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f29:	89 fa                	mov    edx,edi
c0007f2b:	42                   	inc    edx
c0007f2c:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f30:	83 f9 2f             	cmp    ecx,0x2f
c0007f33:	74 f6                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f35:	83 f9 5c             	cmp    ecx,0x5c
c0007f38:	74 f1                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f3a:	eb ca                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f3c:	83 fd 2e             	cmp    ebp,0x2e
c0007f3f:	74 3b                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f41:	83 f8 03             	cmp    eax,0x3
c0007f44:	74 c0                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f46:	42                   	inc    edx
c0007f47:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f4b:	83 f9 5c             	cmp    ecx,0x5c
c0007f4e:	74 f6                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f50:	83 f9 2f             	cmp    ecx,0x2f
c0007f53:	74 f1                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f55:	48                   	dec    eax
c0007f56:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f5a:	75 06                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f5c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f60:	eb f3                	jmp    c0007f55 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007f62:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f66:	74 07                	je     c0007f6f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007f68:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f6c:	48                   	dec    eax
c0007f6d:	eb f3                	jmp    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f6f:	40                   	inc    eax
c0007f70:	eb 94                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f72:	83 fd 5c             	cmp    ebp,0x5c
c0007f75:	74 8f                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f77:	83 fd 2f             	cmp    ebp,0x2f
c0007f7a:	74 8a                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f7c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007f7f:	40                   	inc    eax
c0007f80:	eb 84                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f82:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f86:	83 ec 0c             	sub    esp,0xc
c0007f89:	56                   	push   esi
c0007f8a:	e8 e1 85 ff ff       	call   c0000570 <strlen>
c0007f8f:	83 c4 10             	add    esp,0x10
c0007f92:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007f97:	74 17                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007f99:	83 ec 0c             	sub    esp,0xc
c0007f9c:	56                   	push   esi
c0007f9d:	e8 ce 85 ff ff       	call   c0000570 <strlen>
c0007fa2:	83 c4 10             	add    esp,0x10
c0007fa5:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007faa:	74 04                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007fac:	31 ff                	xor    edi,edi
c0007fae:	eb 5c                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	56                   	push   esi
c0007fb4:	e8 b7 85 ff ff       	call   c0000570 <strlen>
c0007fb9:	83 c4 10             	add    esp,0x10
c0007fbc:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0007fc1:	74 e9                	je     c0007fac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c0007fc3:	83 ec 0c             	sub    esp,0xc
c0007fc6:	56                   	push   esi
c0007fc7:	e8 a4 85 ff ff       	call   c0000570 <strlen>
c0007fcc:	83 c4 10             	add    esp,0x10
c0007fcf:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0007fd4:	eb b0                	jmp    c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c0007fd6:	52                   	push   edx
c0007fd7:	52                   	push   edx
c0007fd8:	56                   	push   esi
c0007fd9:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0007fdd:	55                   	push   ebp
c0007fde:	e8 5d 86 ff ff       	call   c0000640 <strcpy>
c0007fe3:	59                   	pop    ecx
c0007fe4:	58                   	pop    eax
c0007fe5:	56                   	push   esi
c0007fe6:	55                   	push   ebp
c0007fe7:	e8 b5 f8 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0007fec:	83 c4 10             	add    esp,0x10
c0007fef:	48                   	dec    eax
c0007ff0:	75 37                	jne    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0007ff2:	50                   	push   eax
c0007ff3:	56                   	push   esi
c0007ff4:	55                   	push   ebp
c0007ff5:	68 d6 31 02 c0       	push   0xc00231d6
c0007ffa:	e8 65 ef ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	8d 47 01             	lea    eax,[edi+0x1]
c0008005:	83 ff 14             	cmp    edi,0x14
c0008008:	74 08                	je     c0008012 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000800a:	89 c7                	mov    edi,eax
c000800c:	85 db                	test   ebx,ebx
c000800e:	75 c6                	jne    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008010:	eb 17                	jmp    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008012:	83 ec 0c             	sub    esp,0xc
c0008015:	bf 15 00 00 00       	mov    edi,0x15
c000801a:	68 f1 31 02 c0       	push   0xc00231f1
c000801f:	e8 ee 7f 00 00       	call   c0010012 <KePanic(char const*)>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	eb e3                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008029:	81 c4 0c 04 00 00    	add    esp,0x40c
c000802f:	5b                   	pop    ebx
c0008030:	5e                   	pop    esi
c0008031:	5f                   	pop    edi
c0008032:	5d                   	pop    ebp
c0008033:	c3                   	ret    

c0008034 <File::File(char const*, Process*, bool)>:
c0008034:	83 ec 1c             	sub    esp,0x1c
c0008037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000803b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000803f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008043:	83 ec 08             	sub    esp,0x8
c0008046:	6a 00                	push   0x0
c0008048:	50                   	push   eax
c0008049:	e8 4e b0 00 00       	call   c001309c <UnixFile::UnixFile(int)>
c000804e:	83 c4 10             	add    esp,0x10
c0008051:	ba a4 32 02 c0       	mov    edx,0xc00232a4
c0008056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000805a:	89 10                	mov    DWORD PTR [eax],edx
c000805c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008061:	85 c0                	test   eax,eax
c0008063:	74 0f                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008065:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000806a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000806e:	74 04                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008070:	b0 01                	mov    al,0x1
c0008072:	eb 02                	jmp    c0008076 <File::File(char const*, Process*, bool)+0x42>
c0008074:	b0 00                	mov    al,0x0
c0008076:	0f b6 c0             	movzx  eax,al
c0008079:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000807d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008083:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008087:	83 c2 0d             	add    edx,0xd
c000808a:	50                   	push   eax
c000808b:	51                   	push   ecx
c000808c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008090:	52                   	push   edx
c0008091:	e8 84 fd ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008096:	83 c4 10             	add    esp,0x10
c0008099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080a4:	83 c2 0d             	add    edx,0xd
c00080a7:	83 ec 04             	sub    esp,0x4
c00080aa:	50                   	push   eax
c00080ab:	52                   	push   edx
c00080ac:	68 17 32 02 c0       	push   0xc0023217
c00080b1:	e8 ae ee ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00080b6:	83 c4 10             	add    esp,0x10
c00080b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080c0:	83 e8 41             	sub    eax,0x41
c00080c3:	88 c2                	mov    dl,al
c00080c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080e1:	0f b6 c0             	movzx  eax,al
c00080e4:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00080eb:	85 c0                	test   eax,eax
c00080ed:	74 3e                	je     c000812d <File::File(char const*, Process*, bool)+0xf9>
c00080ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f9:	0f b6 c0             	movzx  eax,al
c00080fc:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008103:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008109:	85 c0                	test   eax,eax
c000810b:	75 20                	jne    c000812d <File::File(char const*, Process*, bool)+0xf9>
c000810d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008111:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008117:	0f b6 c0             	movzx  eax,al
c000811a:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008121:	83 ec 0c             	sub    esp,0xc
c0008124:	50                   	push   eax
c0008125:	e8 64 28 00 00       	call   c000a98e <LogicalDisk::mount()>
c000812a:	83 c4 10             	add    esp,0x10
c000812d:	90                   	nop
c000812e:	83 c4 1c             	add    esp,0x1c
c0008131:	c3                   	ret    

c0008132 <File::File(char const*, Process*)>:
c0008132:	83 ec 0c             	sub    esp,0xc
c0008135:	6a 01                	push   0x1
c0008137:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008143:	e8 ec fe ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	90                   	nop
c000814c:	83 c4 0c             	add    esp,0xc
c000814f:	c3                   	ret    

c0008150 <File::open(FileOpenMode)>:
c0008150:	53                   	push   ebx
c0008151:	b8 0b 00 00 00       	mov    eax,0xb
c0008156:	83 ec 08             	sub    esp,0x8
c0008159:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000815d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008164:	83 fa 19             	cmp    edx,0x19
c0008167:	77 40                	ja     c00081a9 <File::open(FileOpenMode)+0x59>
c0008169:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008170:	85 d2                	test   edx,edx
c0008172:	74 35                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c0008174:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000817a:	85 d2                	test   edx,edx
c000817c:	74 2b                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c000817e:	b8 06 00 00 00       	mov    eax,0x6
c0008183:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008187:	75 20                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c0008189:	8b 02                	mov    eax,DWORD PTR [edx]
c000818b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008191:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008195:	51                   	push   ecx
c0008196:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008199:	51                   	push   ecx
c000819a:	52                   	push   edx
c000819b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	85 c0                	test   eax,eax
c00081a3:	75 04                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c00081a5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081a9:	83 c4 08             	add    esp,0x8
c00081ac:	5b                   	pop    ebx
c00081ad:	c3                   	ret    

c00081ae <File::close()>:
c00081ae:	53                   	push   ebx
c00081af:	b8 0b 00 00 00       	mov    eax,0xb
c00081b4:	83 ec 08             	sub    esp,0x8
c00081b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081c2:	83 f9 19             	cmp    ecx,0x19
c00081c5:	77 41                	ja     c0008208 <File::close()+0x5a>
c00081c7:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c00081ce:	85 db                	test   ebx,ebx
c00081d0:	74 36                	je     c0008208 <File::close()+0x5a>
c00081d2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081d9:	74 2d                	je     c0008208 <File::close()+0x5a>
c00081db:	b8 05 00 00 00       	mov    eax,0x5
c00081e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081e4:	74 22                	je     c0008208 <File::close()+0x5a>
c00081e6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081ea:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c00081f1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081f7:	53                   	push   ebx
c00081f8:	53                   	push   ebx
c00081f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081fb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008201:	50                   	push   eax
c0008202:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008205:	83 c4 10             	add    esp,0x10
c0008208:	83 c4 08             	add    esp,0x8
c000820b:	5b                   	pop    ebx
c000820c:	c3                   	ret    
c000820d:	90                   	nop

c000820e <File::seek(unsigned long long)>:
c000820e:	56                   	push   esi
c000820f:	53                   	push   ebx
c0008210:	b8 0b 00 00 00       	mov    eax,0xb
c0008215:	51                   	push   ecx
c0008216:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000821a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000821e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008225:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008229:	83 fa 19             	cmp    edx,0x19
c000822c:	77 31                	ja     c000825f <File::seek(unsigned long long)+0x51>
c000822e:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008235:	85 d2                	test   edx,edx
c0008237:	74 26                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008239:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000823f:	85 d2                	test   edx,edx
c0008241:	74 1c                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008243:	b8 05 00 00 00       	mov    eax,0x5
c0008248:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000824c:	74 11                	je     c000825f <File::seek(unsigned long long)+0x51>
c000824e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008250:	53                   	push   ebx
c0008251:	51                   	push   ecx
c0008252:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008258:	52                   	push   edx
c0008259:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000825c:	83 c4 10             	add    esp,0x10
c000825f:	5a                   	pop    edx
c0008260:	5b                   	pop    ebx
c0008261:	5e                   	pop    esi
c0008262:	c3                   	ret    
c0008263:	90                   	nop

c0008264 <File::truncate(unsigned long long)>:
c0008264:	56                   	push   esi
c0008265:	53                   	push   ebx
c0008266:	b8 0b 00 00 00       	mov    eax,0xb
c000826b:	51                   	push   ecx
c000826c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008274:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000827f:	83 fa 19             	cmp    edx,0x19
c0008282:	77 31                	ja     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008284:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000828b:	85 d2                	test   edx,edx
c000828d:	74 26                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c000828f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008295:	85 d2                	test   edx,edx
c0008297:	74 1c                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008299:	b8 05 00 00 00       	mov    eax,0x5
c000829e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082a2:	74 11                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c00082a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a6:	53                   	push   ebx
c00082a7:	51                   	push   ecx
c00082a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082ae:	52                   	push   edx
c00082af:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	5a                   	pop    edx
c00082b6:	5b                   	pop    ebx
c00082b7:	5e                   	pop    esi
c00082b8:	c3                   	ret    
c00082b9:	90                   	nop

c00082ba <File::tell(unsigned long long*)>:
c00082ba:	83 ec 0c             	sub    esp,0xc
c00082bd:	b8 0b 00 00 00       	mov    eax,0xb
c00082c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082c6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082cd:	83 fa 19             	cmp    edx,0x19
c00082d0:	77 34                	ja     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082d2:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00082d9:	85 d2                	test   edx,edx
c00082db:	74 29                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082dd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082e3:	85 d2                	test   edx,edx
c00082e5:	74 1f                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082e7:	b8 05 00 00 00       	mov    eax,0x5
c00082ec:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082f0:	74 14                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082f2:	50                   	push   eax
c00082f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00082f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082ff:	52                   	push   edx
c0008300:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008303:	83 c4 10             	add    esp,0x10
c0008306:	83 c4 0c             	add    esp,0xc
c0008309:	c3                   	ret    

c000830a <File::rewind()>:
c000830a:	83 ec 10             	sub    esp,0x10
c000830d:	6a 00                	push   0x0
c000830f:	6a 00                	push   0x0
c0008311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008315:	e8 f4 fe ff ff       	call   c000820e <File::seek(unsigned long long)>
c000831a:	83 c4 1c             	add    esp,0x1c
c000831d:	c3                   	ret    

c000831e <File::unlink()>:
c000831e:	83 ec 0c             	sub    esp,0xc
c0008321:	b8 0b 00 00 00       	mov    eax,0xb
c0008326:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000832a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008331:	83 f9 19             	cmp    ecx,0x19
c0008334:	77 2f                	ja     c0008365 <File::unlink()+0x47>
c0008336:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000833d:	85 c9                	test   ecx,ecx
c000833f:	74 24                	je     c0008365 <File::unlink()+0x47>
c0008341:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008347:	85 c9                	test   ecx,ecx
c0008349:	74 1a                	je     c0008365 <File::unlink()+0x47>
c000834b:	b8 06 00 00 00       	mov    eax,0x6
c0008350:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008354:	75 0f                	jne    c0008365 <File::unlink()+0x47>
c0008356:	83 c2 0d             	add    edx,0xd
c0008359:	50                   	push   eax
c000835a:	50                   	push   eax
c000835b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000835d:	52                   	push   edx
c000835e:	51                   	push   ecx
c000835f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008362:	83 c4 10             	add    esp,0x10
c0008365:	83 c4 0c             	add    esp,0xc
c0008368:	c3                   	ret    
c0008369:	90                   	nop

c000836a <File::rename(char const*)>:
c000836a:	83 ec 0c             	sub    esp,0xc
c000836d:	b8 0b 00 00 00       	mov    eax,0xb
c0008372:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008376:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000837d:	83 f9 19             	cmp    ecx,0x19
c0008380:	77 32                	ja     c00083b4 <File::rename(char const*)+0x4a>
c0008382:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008389:	85 c9                	test   ecx,ecx
c000838b:	74 27                	je     c00083b4 <File::rename(char const*)+0x4a>
c000838d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008393:	85 c9                	test   ecx,ecx
c0008395:	74 1d                	je     c00083b4 <File::rename(char const*)+0x4a>
c0008397:	b8 06 00 00 00       	mov    eax,0x6
c000839c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083a0:	75 12                	jne    c00083b4 <File::rename(char const*)+0x4a>
c00083a2:	83 c2 0d             	add    edx,0xd
c00083a5:	50                   	push   eax
c00083a6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083ac:	52                   	push   edx
c00083ad:	51                   	push   ecx
c00083ae:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083b1:	83 c4 10             	add    esp,0x10
c00083b4:	83 c4 0c             	add    esp,0xc
c00083b7:	c3                   	ret    

c00083b8 <File::chfatattr(unsigned char, unsigned char)>:
c00083b8:	57                   	push   edi
c00083b9:	b8 0b 00 00 00       	mov    eax,0xb
c00083be:	56                   	push   esi
c00083bf:	53                   	push   ebx
c00083c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083cf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083d3:	83 f9 19             	cmp    ecx,0x19
c00083d6:	77 37                	ja     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d8:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00083df:	85 c9                	test   ecx,ecx
c00083e1:	74 2c                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e9:	85 c9                	test   ecx,ecx
c00083eb:	74 22                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083ed:	b8 06 00 00 00       	mov    eax,0x6
c00083f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f6:	75 17                	jne    c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083f8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083fa:	89 f0                	mov    eax,esi
c00083fc:	83 c2 0d             	add    edx,0xd
c00083ff:	0f b6 f0             	movzx  esi,al
c0008402:	0f b6 db             	movzx  ebx,bl
c0008405:	56                   	push   esi
c0008406:	53                   	push   ebx
c0008407:	52                   	push   edx
c0008408:	51                   	push   ecx
c0008409:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000840c:	83 c4 10             	add    esp,0x10
c000840f:	5b                   	pop    ebx
c0008410:	5e                   	pop    esi
c0008411:	5f                   	pop    edi
c0008412:	c3                   	ret    
c0008413:	90                   	nop

c0008414 <File::exists()>:
c0008414:	83 ec 0c             	sub    esp,0xc
c0008417:	31 c0                	xor    eax,eax
c0008419:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008424:	83 f9 19             	cmp    ecx,0x19
c0008427:	77 24                	ja     c000844d <File::exists()+0x39>
c0008429:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008430:	85 c9                	test   ecx,ecx
c0008432:	74 19                	je     c000844d <File::exists()+0x39>
c0008434:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000843a:	85 c9                	test   ecx,ecx
c000843c:	74 0f                	je     c000844d <File::exists()+0x39>
c000843e:	83 c2 0d             	add    edx,0xd
c0008441:	50                   	push   eax
c0008442:	50                   	push   eax
c0008443:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008445:	52                   	push   edx
c0008446:	51                   	push   ecx
c0008447:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000844a:	83 c4 10             	add    esp,0x10
c000844d:	83 c4 0c             	add    esp,0xc
c0008450:	c3                   	ret    
c0008451:	90                   	nop

c0008452 <File::stat(unsigned long long*, bool*)>:
c0008452:	56                   	push   esi
c0008453:	53                   	push   ebx
c0008454:	50                   	push   eax
c0008455:	b8 0b 00 00 00       	mov    eax,0xb
c000845a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000845e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008462:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008469:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000846d:	83 f9 19             	cmp    ecx,0x19
c0008470:	77 3d                	ja     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008472:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008479:	85 c9                	test   ecx,ecx
c000847b:	74 32                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c000847d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008483:	85 c9                	test   ecx,ecx
c0008485:	74 28                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008487:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008489:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000848d:	74 13                	je     c00084a2 <File::stat(unsigned long long*, bool*)+0x50>
c000848f:	83 ec 04             	sub    esp,0x4
c0008492:	56                   	push   esi
c0008493:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008499:	51                   	push   ecx
c000849a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000849d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084a0:	eb 0a                	jmp    c00084ac <File::stat(unsigned long long*, bool*)+0x5a>
c00084a2:	53                   	push   ebx
c00084a3:	83 c2 0d             	add    edx,0xd
c00084a6:	56                   	push   esi
c00084a7:	52                   	push   edx
c00084a8:	51                   	push   ecx
c00084a9:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084ac:	83 c4 10             	add    esp,0x10
c00084af:	5a                   	pop    edx
c00084b0:	5b                   	pop    ebx
c00084b1:	5e                   	pop    esi
c00084b2:	c3                   	ret    

c00084b3 <Fs::setcwd(Process*, char*)>:
c00084b3:	55                   	push   ebp
c00084b4:	57                   	push   edi
c00084b5:	56                   	push   esi
c00084b6:	53                   	push   ebx
c00084b7:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084bd:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084c4:	6a 00                	push   0x0
c00084c6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084cc:	57                   	push   edi
c00084cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084d4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084d8:	56                   	push   esi
c00084d9:	e8 3c f9 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084de:	89 34 24             	mov    DWORD PTR [esp],esi
c00084e1:	e8 8a 80 ff ff       	call   c0000570 <strlen>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	83 f8 02             	cmp    eax,0x2
c00084ec:	77 15                	ja     c0008503 <Fs::setcwd(Process*, char*)+0x50>
c00084ee:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084f3:	83 eb 41             	sub    ebx,0x41
c00084f6:	8b 04 9d e0 ba 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4520]
c00084fd:	85 c0                	test   eax,eax
c00084ff:	75 1c                	jne    c000851d <Fs::setcwd(Process*, char*)+0x6a>
c0008501:	eb 2f                	jmp    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008503:	83 ec 0c             	sub    esp,0xc
c0008506:	56                   	push   esi
c0008507:	e8 64 80 ff ff       	call   c0000570 <strlen>
c000850c:	83 c4 10             	add    esp,0x10
c000850f:	83 f8 03             	cmp    eax,0x3
c0008512:	75 57                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c0008514:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008519:	75 50                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c000851b:	eb d1                	jmp    c00084ee <Fs::setcwd(Process*, char*)+0x3b>
c000851d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008524:	75 0c                	jne    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008526:	83 ec 0c             	sub    esp,0xc
c0008529:	50                   	push   eax
c000852a:	e8 5f 24 00 00       	call   c000a98e <LogicalDisk::mount()>
c000852f:	83 c4 10             	add    esp,0x10
c0008532:	b8 03 00 00 00       	mov    eax,0x3
c0008537:	83 fb 19             	cmp    ebx,0x19
c000853a:	0f 87 c6 00 00 00    	ja     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008540:	8b 14 9d e0 ba 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4520]
c0008547:	b8 05 00 00 00       	mov    eax,0x5
c000854c:	85 d2                	test   edx,edx
c000854e:	0f 84 b2 00 00 00    	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008554:	b8 06 00 00 00       	mov    eax,0x6
c0008559:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008560:	0f 85 92 00 00 00    	jne    c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c0008566:	e9 9b 00 00 00       	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c000856b:	83 ec 0c             	sub    esp,0xc
c000856e:	68 14 01 00 00       	push   0x114
c0008573:	e8 53 77 00 00       	call   c000fccb <malloc>
c0008578:	83 c4 0c             	add    esp,0xc
c000857b:	89 c3                	mov    ebx,eax
c000857d:	55                   	push   ebp
c000857e:	56                   	push   esi
c000857f:	50                   	push   eax
c0008580:	e8 ad fb ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0008585:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000858a:	83 c4 0c             	add    esp,0xc
c000858d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0008591:	50                   	push   eax
c0008592:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008596:	50                   	push   eax
c0008597:	53                   	push   ebx
c0008598:	e8 b5 fe ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000859d:	83 c4 10             	add    esp,0x10
c00085a0:	83 f8 02             	cmp    eax,0x2
c00085a3:	74 27                	je     c00085cc <Fs::setcwd(Process*, char*)+0x119>
c00085a5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085aa:	75 1c                	jne    c00085c8 <Fs::setcwd(Process*, char*)+0x115>
c00085ac:	b8 02 00 00 00       	mov    eax,0x2
c00085b1:	85 db                	test   ebx,ebx
c00085b3:	74 51                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085b5:	83 ec 0c             	sub    esp,0xc
c00085b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085ba:	53                   	push   ebx
c00085bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085be:	83 c4 10             	add    esp,0x10
c00085c1:	b8 02 00 00 00       	mov    eax,0x2
c00085c6:	eb 3e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085c8:	85 c0                	test   eax,eax
c00085ca:	74 1c                	je     c00085e8 <Fs::setcwd(Process*, char*)+0x135>
c00085cc:	b8 01 00 00 00       	mov    eax,0x1
c00085d1:	85 db                	test   ebx,ebx
c00085d3:	74 31                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085d5:	83 ec 0c             	sub    esp,0xc
c00085d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085da:	53                   	push   ebx
c00085db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085de:	83 c4 10             	add    esp,0x10
c00085e1:	b8 01 00 00 00       	mov    eax,0x1
c00085e6:	eb 1e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085e8:	85 db                	test   ebx,ebx
c00085ea:	74 0c                	je     c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085f1:	53                   	push   ebx
c00085f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	50                   	push   eax
c00085f9:	50                   	push   eax
c00085fa:	56                   	push   esi
c00085fb:	57                   	push   edi
c00085fc:	e8 3f 80 ff ff       	call   c0000640 <strcpy>
c0008601:	83 c4 10             	add    esp,0x10
c0008604:	31 c0                	xor    eax,eax
c0008606:	81 c4 1c 02 00 00    	add    esp,0x21c
c000860c:	5b                   	pop    ebx
c000860d:	5e                   	pop    esi
c000860e:	5f                   	pop    edi
c000860f:	5d                   	pop    ebp
c0008610:	c3                   	ret    
c0008611:	90                   	nop

c0008612 <Directory::Directory(char const*, Process*)>:
c0008612:	83 ec 0c             	sub    esp,0xc
c0008615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008619:	83 ec 08             	sub    esp,0x8
c000861c:	6a 00                	push   0x0
c000861e:	50                   	push   eax
c000861f:	e8 78 aa 00 00       	call   c001309c <UnixFile::UnixFile(int)>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	ba c0 32 02 c0       	mov    edx,0xc00232c0
c000862c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008630:	89 10                	mov    DWORD PTR [eax],edx
c0008632:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008637:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000863b:	0f 95 c0             	setne  al
c000863e:	0f b6 c0             	movzx  eax,al
c0008641:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008645:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000864b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000864f:	83 c2 0d             	add    edx,0xd
c0008652:	50                   	push   eax
c0008653:	51                   	push   ecx
c0008654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008658:	52                   	push   edx
c0008659:	e8 bc f7 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000865e:	83 c4 10             	add    esp,0x10
c0008661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008665:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008668:	83 e8 41             	sub    eax,0x41
c000866b:	88 c2                	mov    dl,al
c000866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008671:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000867f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008683:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008689:	0f b6 c0             	movzx  eax,al
c000868c:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008693:	85 c0                	test   eax,eax
c0008695:	74 3e                	je     c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c0008697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000869b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086a1:	0f b6 c0             	movzx  eax,al
c00086a4:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086ab:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086b1:	85 c0                	test   eax,eax
c00086b3:	75 20                	jne    c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c00086b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086bf:	0f b6 c0             	movzx  eax,al
c00086c2:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086c9:	83 ec 0c             	sub    esp,0xc
c00086cc:	50                   	push   eax
c00086cd:	e8 bc 22 00 00       	call   c000a98e <LogicalDisk::mount()>
c00086d2:	83 c4 10             	add    esp,0x10
c00086d5:	90                   	nop
c00086d6:	83 c4 0c             	add    esp,0xc
c00086d9:	c3                   	ret    

c00086da <Directory::open()>:
c00086da:	53                   	push   ebx
c00086db:	b8 0b 00 00 00       	mov    eax,0xb
c00086e0:	83 ec 08             	sub    esp,0x8
c00086e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086e7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086ee:	83 fa 19             	cmp    edx,0x19
c00086f1:	77 3d                	ja     c0008730 <Directory::open()+0x56>
c00086f3:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00086fa:	85 d2                	test   edx,edx
c00086fc:	74 32                	je     c0008730 <Directory::open()+0x56>
c00086fe:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008704:	85 d2                	test   edx,edx
c0008706:	74 28                	je     c0008730 <Directory::open()+0x56>
c0008708:	b8 06 00 00 00       	mov    eax,0x6
c000870d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008711:	75 1d                	jne    c0008730 <Directory::open()+0x56>
c0008713:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008719:	50                   	push   eax
c000871a:	8b 02                	mov    eax,DWORD PTR [edx]
c000871c:	51                   	push   ecx
c000871d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008720:	51                   	push   ecx
c0008721:	52                   	push   edx
c0008722:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008725:	83 c4 10             	add    esp,0x10
c0008728:	85 c0                	test   eax,eax
c000872a:	75 04                	jne    c0008730 <Directory::open()+0x56>
c000872c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008730:	83 c4 08             	add    esp,0x8
c0008733:	5b                   	pop    ebx
c0008734:	c3                   	ret    
c0008735:	90                   	nop

c0008736 <Directory::close()>:
c0008736:	53                   	push   ebx
c0008737:	b8 0b 00 00 00       	mov    eax,0xb
c000873c:	83 ec 08             	sub    esp,0x8
c000873f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008743:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000874a:	83 f9 19             	cmp    ecx,0x19
c000874d:	77 41                	ja     c0008790 <Directory::close()+0x5a>
c000874f:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c0008756:	85 db                	test   ebx,ebx
c0008758:	74 36                	je     c0008790 <Directory::close()+0x5a>
c000875a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008761:	74 2d                	je     c0008790 <Directory::close()+0x5a>
c0008763:	b8 05 00 00 00       	mov    eax,0x5
c0008768:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000876c:	74 22                	je     c0008790 <Directory::close()+0x5a>
c000876e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008772:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c0008779:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000877f:	53                   	push   ebx
c0008780:	53                   	push   ebx
c0008781:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008783:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008789:	50                   	push   eax
c000878a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000878d:	83 c4 10             	add    esp,0x10
c0008790:	83 c4 08             	add    esp,0x8
c0008793:	5b                   	pop    ebx
c0008794:	c3                   	ret    
c0008795:	90                   	nop

c0008796 <Directory::unlink()>:
c0008796:	83 ec 0c             	sub    esp,0xc
c0008799:	b8 0b 00 00 00       	mov    eax,0xb
c000879e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a9:	83 f9 19             	cmp    ecx,0x19
c00087ac:	77 2f                	ja     c00087dd <Directory::unlink()+0x47>
c00087ae:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00087b5:	85 c9                	test   ecx,ecx
c00087b7:	74 24                	je     c00087dd <Directory::unlink()+0x47>
c00087b9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087bf:	85 c9                	test   ecx,ecx
c00087c1:	74 1a                	je     c00087dd <Directory::unlink()+0x47>
c00087c3:	b8 06 00 00 00       	mov    eax,0x6
c00087c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087cc:	75 0f                	jne    c00087dd <Directory::unlink()+0x47>
c00087ce:	83 c2 0d             	add    edx,0xd
c00087d1:	50                   	push   eax
c00087d2:	50                   	push   eax
c00087d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087d5:	52                   	push   edx
c00087d6:	51                   	push   ecx
c00087d7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	83 c4 0c             	add    esp,0xc
c00087e0:	c3                   	ret    
c00087e1:	90                   	nop

c00087e2 <Directory::rename(char const*)>:
c00087e2:	83 ec 0c             	sub    esp,0xc
c00087e5:	b8 0b 00 00 00       	mov    eax,0xb
c00087ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087f5:	83 f9 19             	cmp    ecx,0x19
c00087f8:	77 32                	ja     c000882c <Directory::rename(char const*)+0x4a>
c00087fa:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008801:	85 c9                	test   ecx,ecx
c0008803:	74 27                	je     c000882c <Directory::rename(char const*)+0x4a>
c0008805:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000880b:	85 c9                	test   ecx,ecx
c000880d:	74 1d                	je     c000882c <Directory::rename(char const*)+0x4a>
c000880f:	b8 06 00 00 00       	mov    eax,0x6
c0008814:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008818:	75 12                	jne    c000882c <Directory::rename(char const*)+0x4a>
c000881a:	83 c2 0d             	add    edx,0xd
c000881d:	50                   	push   eax
c000881e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008820:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008824:	52                   	push   edx
c0008825:	51                   	push   ecx
c0008826:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008829:	83 c4 10             	add    esp,0x10
c000882c:	83 c4 0c             	add    esp,0xc
c000882f:	c3                   	ret    

c0008830 <Directory::exists()>:
c0008830:	83 ec 0c             	sub    esp,0xc
c0008833:	31 c0                	xor    eax,eax
c0008835:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008839:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008840:	83 f9 19             	cmp    ecx,0x19
c0008843:	77 24                	ja     c0008869 <Directory::exists()+0x39>
c0008845:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000884c:	85 c9                	test   ecx,ecx
c000884e:	74 19                	je     c0008869 <Directory::exists()+0x39>
c0008850:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008856:	85 c9                	test   ecx,ecx
c0008858:	74 0f                	je     c0008869 <Directory::exists()+0x39>
c000885a:	83 c2 0d             	add    edx,0xd
c000885d:	50                   	push   eax
c000885e:	50                   	push   eax
c000885f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008861:	52                   	push   edx
c0008862:	51                   	push   ecx
c0008863:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008866:	83 c4 10             	add    esp,0x10
c0008869:	83 c4 0c             	add    esp,0xc
c000886c:	c3                   	ret    
c000886d:	90                   	nop

c000886e <Directory::read(dirent*)>:
c000886e:	83 ec 1c             	sub    esp,0x1c
c0008871:	b8 0b 00 00 00       	mov    eax,0xb
c0008876:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000887a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008881:	83 f9 19             	cmp    ecx,0x19
c0008884:	77 30                	ja     c00088b6 <Directory::read(dirent*)+0x48>
c0008886:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000888d:	85 c9                	test   ecx,ecx
c000888f:	74 25                	je     c00088b6 <Directory::read(dirent*)+0x48>
c0008891:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008898:	74 1c                	je     c00088b6 <Directory::read(dirent*)+0x48>
c000889a:	83 ec 0c             	sub    esp,0xc
c000889d:	8b 02                	mov    eax,DWORD PTR [edx]
c000889f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088a3:	51                   	push   ecx
c00088a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088a8:	6a 00                	push   0x0
c00088aa:	68 10 01 00 00       	push   0x110
c00088af:	52                   	push   edx
c00088b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088b3:	83 c4 20             	add    esp,0x20
c00088b6:	83 c4 1c             	add    esp,0x1c
c00088b9:	c3                   	ret    

c00088ba <Directory::create()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	b8 0b 00 00 00       	mov    eax,0xb
c00088c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088cd:	83 f9 19             	cmp    ecx,0x19
c00088d0:	77 2f                	ja     c0008901 <Directory::create()+0x47>
c00088d2:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00088d9:	85 c9                	test   ecx,ecx
c00088db:	74 24                	je     c0008901 <Directory::create()+0x47>
c00088dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088e3:	85 c9                	test   ecx,ecx
c00088e5:	74 1a                	je     c0008901 <Directory::create()+0x47>
c00088e7:	b8 06 00 00 00       	mov    eax,0x6
c00088ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088f0:	75 0f                	jne    c0008901 <Directory::create()+0x47>
c00088f2:	83 c2 0d             	add    edx,0xd
c00088f5:	50                   	push   eax
c00088f6:	50                   	push   eax
c00088f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088f9:	52                   	push   edx
c00088fa:	51                   	push   ecx
c00088fb:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088fe:	83 c4 10             	add    esp,0x10
c0008901:	83 c4 0c             	add    esp,0xc
c0008904:	c3                   	ret    
c0008905:	90                   	nop

c0008906 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008906:	b8 0a 00 00 00       	mov    eax,0xa
c000890b:	c3                   	ret    

c000890c <Bus::Bus(char const*)>:
c000890c:	83 ec 0c             	sub    esp,0xc
c000890f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891a:	50                   	push   eax
c000891b:	e8 3e 12 00 00       	call   c0009b5e <Device::Device(char const*)>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	ba dc 32 02 c0       	mov    edx,0xc00232dc
c0008928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892c:	89 10                	mov    DWORD PTR [eax],edx
c000892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008932:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000893c:	90                   	nop
c000893d:	83 c4 0c             	add    esp,0xc
c0008940:	c3                   	ret    
c0008941:	90                   	nop
c0008942:	66 90                	xchg   ax,ax

c0008944 <Bus::~Bus()>:
c0008944:	83 ec 0c             	sub    esp,0xc
c0008947:	ba dc 32 02 c0       	mov    edx,0xc00232dc
c000894c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008950:	89 10                	mov    DWORD PTR [eax],edx
c0008952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008956:	83 ec 0c             	sub    esp,0xc
c0008959:	50                   	push   eax
c000895a:	e8 9f 0f 00 00       	call   c00098fe <Device::~Device()>
c000895f:	83 c4 10             	add    esp,0x10
c0008962:	90                   	nop
c0008963:	83 c4 0c             	add    esp,0xc
c0008966:	c3                   	ret    
c0008967:	90                   	nop

c0008968 <Bus::~Bus()>:
c0008968:	83 ec 0c             	sub    esp,0xc
c000896b:	83 ec 0c             	sub    esp,0xc
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	e8 cd ff ff ff       	call   c0008944 <Bus::~Bus()>
c0008977:	83 c4 10             	add    esp,0x10
c000897a:	83 ec 08             	sub    esp,0x8
c000897d:	68 58 01 00 00       	push   0x158
c0008982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008986:	e8 c8 49 00 00       	call   c000d353 <operator delete(void*, unsigned long)>
c000898b:	83 c4 10             	add    esp,0x10
c000898e:	83 c4 0c             	add    esp,0xc
c0008991:	c3                   	ret    

c0008992 <KeBeepThread(void*)>:
c0008992:	83 ec 0c             	sub    esp,0xc
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00089a0:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00089a7:	75 01                	jne    c00089aa <KeBeepThread(void*)+0x18>
c00089a9:	fb                   	sti    
c00089aa:	6b c0 0a             	imul   eax,eax,0xa
c00089ad:	52                   	push   edx
c00089ae:	52                   	push   edx
c00089af:	99                   	cdq    
c00089b0:	52                   	push   edx
c00089b1:	50                   	push   eax
c00089b2:	e8 c5 e7 00 00       	call   c001717c <milliTenthSleep(unsigned long long)>
c00089b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089be:	e8 5c 18 01 00       	call   c001a21f <HalMakeBeep(int)>
c00089c3:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089cb:	83 c4 1c             	add    esp,0x1c
c00089ce:	e9 75 e6 00 00       	jmp    c0017048 <blockTask(TaskState)>

c00089d3 <KeBeep(int, int, bool)>:
c00089d3:	56                   	push   esi
c00089d4:	53                   	push   ebx
c00089d5:	83 ec 10             	sub    esp,0x10
c00089d8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e4:	e8 36 18 01 00       	call   c001a21f <HalMakeBeep(int)>
c00089e9:	83 c4 10             	add    esp,0x10
c00089ec:	89 f0                	mov    eax,esi
c00089ee:	84 c0                	test   al,al
c00089f0:	74 1f                	je     c0008a11 <KeBeep(int, int, bool)+0x3e>
c00089f2:	50                   	push   eax
c00089f3:	50                   	push   eax
c00089f4:	6b c3 0a             	imul   eax,ebx,0xa
c00089f7:	99                   	cdq    
c00089f8:	52                   	push   edx
c00089f9:	50                   	push   eax
c00089fa:	e8 7d e7 00 00       	call   c001717c <milliTenthSleep(unsigned long long)>
c00089ff:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a07:	83 c4 14             	add    esp,0x14
c0008a0a:	5b                   	pop    ebx
c0008a0b:	5e                   	pop    esi
c0008a0c:	e9 0e 18 01 00       	jmp    c001a21f <HalMakeBeep(int)>
c0008a11:	68 e6 00 00 00       	push   0xe6
c0008a16:	53                   	push   ebx
c0008a17:	68 92 89 00 c0       	push   0xc0008992
c0008a1c:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0008a22:	e8 c9 e2 00 00       	call   c0016cf0 <Process::createThread(void (*)(void*), void*, int)>
c0008a27:	83 c4 14             	add    esp,0x14
c0008a2a:	5b                   	pop    ebx
c0008a2b:	5e                   	pop    esi
c0008a2c:	c3                   	ret    
c0008a2d:	90                   	nop

c0008a2e <KeLoadTimezoneStrings()>:
c0008a2e:	55                   	push   ebp
c0008a2f:	89 e5                	mov    ebp,esp
c0008a31:	53                   	push   ebx
c0008a32:	83 ec 44             	sub    esp,0x44
c0008a35:	c6 05 20 b3 02 c0 01 	mov    BYTE PTR ds:0xc002b320,0x1
c0008a3c:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a43:	83 ec 0c             	sub    esp,0xc
c0008a46:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008a49:	e8 7d 72 00 00       	call   c000fccb <malloc>
c0008a4e:	83 c4 10             	add    esp,0x10
c0008a51:	89 c3                	mov    ebx,eax
c0008a53:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008a58:	83 ec 04             	sub    esp,0x4
c0008a5b:	50                   	push   eax
c0008a5c:	68 00 33 02 c0       	push   0xc0023300
c0008a61:	53                   	push   ebx
c0008a62:	e8 cb f6 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0008a67:	83 c4 10             	add    esp,0x10
c0008a6a:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008a6d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008a71:	75 10                	jne    c0008a83 <KeLoadTimezoneStrings()+0x55>
c0008a73:	83 ec 0c             	sub    esp,0xc
c0008a76:	68 1f 33 02 c0       	push   0xc002331f
c0008a7b:	e8 92 75 00 00       	call   c0010012 <KePanic(char const*)>
c0008a80:	83 c4 10             	add    esp,0x10
c0008a83:	83 ec 08             	sub    esp,0x8
c0008a86:	6a 01                	push   0x1
c0008a88:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008a8b:	e8 c0 f6 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0008a90:	83 c4 10             	add    esp,0x10
c0008a93:	83 ec 04             	sub    esp,0x4
c0008a96:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008a99:	50                   	push   eax
c0008a9a:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008a9d:	50                   	push   eax
c0008a9e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008aa1:	e8 ac f9 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0008aa6:	83 c4 10             	add    esp,0x10
c0008aa9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008aac:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008aaf:	83 ec 08             	sub    esp,0x8
c0008ab2:	50                   	push   eax
c0008ab3:	68 35 33 02 c0       	push   0xc0023335
c0008ab8:	e8 a7 e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008abd:	83 c4 10             	add    esp,0x10
c0008ac0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008ac3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008ac6:	83 c0 01             	add    eax,0x1
c0008ac9:	83 ec 0c             	sub    esp,0xc
c0008acc:	50                   	push   eax
c0008acd:	e8 f9 71 00 00       	call   c000fccb <malloc>
c0008ad2:	83 c4 10             	add    esp,0x10
c0008ad5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008ad8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008adb:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008ade:	83 ec 04             	sub    esp,0x4
c0008ae1:	50                   	push   eax
c0008ae2:	6a 00                	push   0x0
c0008ae4:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008ae7:	e8 04 7a ff ff       	call   c00004f0 <memset>
c0008aec:	83 c4 10             	add    esp,0x10
c0008aef:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008af2:	8b 00                	mov    eax,DWORD PTR [eax]
c0008af4:	83 c0 0c             	add    eax,0xc
c0008af7:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008af9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008afc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008aff:	83 ec 0c             	sub    esp,0xc
c0008b02:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b05:	53                   	push   ebx
c0008b06:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b09:	52                   	push   edx
c0008b0a:	50                   	push   eax
c0008b0b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b0e:	ff d1                	call   ecx
c0008b10:	83 c4 20             	add    esp,0x20
c0008b13:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b16:	83 ec 08             	sub    esp,0x8
c0008b19:	50                   	push   eax
c0008b1a:	68 45 33 02 c0       	push   0xc0023345
c0008b1f:	e8 40 e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008b24:	83 c4 10             	add    esp,0x10
c0008b27:	83 ec 0c             	sub    esp,0xc
c0008b2a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b2d:	e8 7c f6 ff ff       	call   c00081ae <File::close()>
c0008b32:	83 c4 10             	add    esp,0x10
c0008b35:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b39:	74 15                	je     c0008b50 <KeLoadTimezoneStrings()+0x122>
c0008b3b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b40:	83 c0 08             	add    eax,0x8
c0008b43:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b45:	83 ec 0c             	sub    esp,0xc
c0008b48:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b4b:	ff d0                	call   eax
c0008b4d:	83 c4 10             	add    esp,0x10
c0008b50:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008b57:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008b5e:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008b65:	7f 3a                	jg     c0008ba1 <KeLoadTimezoneStrings()+0x173>
c0008b67:	83 ec 0c             	sub    esp,0xc
c0008b6a:	6a 78                	push   0x78
c0008b6c:	e8 5a 71 00 00       	call   c000fccb <malloc>
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	89 c2                	mov    edx,eax
c0008b76:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008b79:	89 14 85 40 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4cc0],edx
c0008b80:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008b83:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008b8a:	83 ec 08             	sub    esp,0x8
c0008b8d:	68 4e 33 02 c0       	push   0xc002334e
c0008b92:	50                   	push   eax
c0008b93:	e8 a8 7a ff ff       	call   c0000640 <strcpy>
c0008b98:	83 c4 10             	add    esp,0x10
c0008b9b:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008b9f:	eb bd                	jmp    c0008b5e <KeLoadTimezoneStrings()+0x130>
c0008ba1:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008ba8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008bab:	8d 50 01             	lea    edx,[eax+0x1]
c0008bae:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008bb1:	89 c2                	mov    edx,eax
c0008bb3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008bb6:	01 d0                	add    eax,edx
c0008bb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008bba:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008bbd:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008bc1:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008bc4:	0f be c0             	movsx  eax,al
c0008bc7:	83 f8 0d             	cmp    eax,0xd
c0008bca:	0f 84 82 01 00 00    	je     c0008d52 <KeLoadTimezoneStrings()+0x324>
c0008bd0:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008bd3:	0f be c0             	movsx  eax,al
c0008bd6:	83 f8 09             	cmp    eax,0x9
c0008bd9:	75 44                	jne    c0008c1f <KeLoadTimezoneStrings()+0x1f1>
c0008bdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008bde:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008be5:	83 ec 0c             	sub    esp,0xc
c0008be8:	50                   	push   eax
c0008be9:	e8 82 79 ff ff       	call   c0000570 <strlen>
c0008bee:	83 c4 10             	add    esp,0x10
c0008bf1:	83 f8 08             	cmp    eax,0x8
c0008bf4:	0f 96 c0             	setbe  al
c0008bf7:	0f b6 c0             	movzx  eax,al
c0008bfa:	85 c0                	test   eax,eax
c0008bfc:	0f 84 56 01 00 00    	je     c0008d58 <KeLoadTimezoneStrings()+0x32a>
c0008c02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c05:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c0c:	83 ec 08             	sub    esp,0x8
c0008c0f:	68 4e 33 02 c0       	push   0xc002334e
c0008c14:	50                   	push   eax
c0008c15:	e8 26 7c ff ff       	call   c0000840 <strcat>
c0008c1a:	83 c4 10             	add    esp,0x10
c0008c1d:	eb bc                	jmp    c0008bdb <KeLoadTimezoneStrings()+0x1ad>
c0008c1f:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c22:	0f be c0             	movsx  eax,al
c0008c25:	83 f8 0a             	cmp    eax,0xa
c0008c28:	0f 85 9b 00 00 00    	jne    c0008cc9 <KeLoadTimezoneStrings()+0x29b>
c0008c2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c31:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c38:	83 ec 0c             	sub    esp,0xc
c0008c3b:	50                   	push   eax
c0008c3c:	e8 2f 79 ff ff       	call   c0000570 <strlen>
c0008c41:	83 c4 10             	add    esp,0x10
c0008c44:	83 f8 35             	cmp    eax,0x35
c0008c47:	0f 96 c0             	setbe  al
c0008c4a:	0f b6 c0             	movzx  eax,al
c0008c4d:	85 c0                	test   eax,eax
c0008c4f:	74 1d                	je     c0008c6e <KeLoadTimezoneStrings()+0x240>
c0008c51:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c54:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c5b:	83 ec 08             	sub    esp,0x8
c0008c5e:	68 4e 33 02 c0       	push   0xc002334e
c0008c63:	50                   	push   eax
c0008c64:	e8 d7 7b ff ff       	call   c0000840 <strcat>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	eb c0                	jmp    c0008c2e <KeLoadTimezoneStrings()+0x200>
c0008c6e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008c72:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c75:	89 c2                	mov    edx,eax
c0008c77:	c1 fa 1f             	sar    edx,0x1f
c0008c7a:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008c7d:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008c80:	39 c8                	cmp    eax,ecx
c0008c82:	89 d0                	mov    eax,edx
c0008c84:	19 d8                	sbb    eax,ebx
c0008c86:	0f 82 d2 00 00 00    	jb     c0008d5e <KeLoadTimezoneStrings()+0x330>
c0008c8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c8f:	a3 24 b3 02 c0       	mov    ds:0xc002b324,eax
c0008c94:	83 ec 08             	sub    esp,0x8
c0008c97:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008c9a:	68 50 33 02 c0       	push   0xc0023350
c0008c9f:	e8 c0 e2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008ca4:	83 c4 10             	add    esp,0x10
c0008ca7:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008cac:	83 ec 08             	sub    esp,0x8
c0008caf:	50                   	push   eax
c0008cb0:	68 65 33 02 c0       	push   0xc0023365
c0008cb5:	e8 aa e2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008cba:	83 c4 10             	add    esp,0x10
c0008cbd:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008cc4:	e9 9b 00 00 00       	jmp    c0008d64 <KeLoadTimezoneStrings()+0x336>
c0008cc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ccc:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008cd3:	83 ec 0c             	sub    esp,0xc
c0008cd6:	50                   	push   eax
c0008cd7:	e8 94 78 ff ff       	call   c0000570 <strlen>
c0008cdc:	83 c4 10             	add    esp,0x10
c0008cdf:	83 f8 31             	cmp    eax,0x31
c0008ce2:	0f 96 c0             	setbe  al
c0008ce5:	0f b6 c0             	movzx  eax,al
c0008ce8:	85 c0                	test   eax,eax
c0008cea:	74 1f                	je     c0008d0b <KeLoadTimezoneStrings()+0x2dd>
c0008cec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cef:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008cfc:	52                   	push   edx
c0008cfd:	50                   	push   eax
c0008cfe:	e8 3d 7b ff ff       	call   c0000840 <strcat>
c0008d03:	83 c4 10             	add    esp,0x10
c0008d06:	e9 9d fe ff ff       	jmp    c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d0e:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d15:	83 ec 0c             	sub    esp,0xc
c0008d18:	50                   	push   eax
c0008d19:	e8 52 78 ff ff       	call   c0000570 <strlen>
c0008d1e:	83 c4 10             	add    esp,0x10
c0008d21:	83 f8 32             	cmp    eax,0x32
c0008d24:	0f 94 c0             	sete   al
c0008d27:	0f b6 c0             	movzx  eax,al
c0008d2a:	85 c0                	test   eax,eax
c0008d2c:	0f 84 76 fe ff ff    	je     c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d35:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d3c:	83 ec 08             	sub    esp,0x8
c0008d3f:	68 69 33 02 c0       	push   0xc0023369
c0008d44:	50                   	push   eax
c0008d45:	e8 f6 7a ff ff       	call   c0000840 <strcat>
c0008d4a:	83 c4 10             	add    esp,0x10
c0008d4d:	e9 56 fe ff ff       	jmp    c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d52:	90                   	nop
c0008d53:	e9 50 fe ff ff       	jmp    c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d58:	90                   	nop
c0008d59:	e9 4a fe ff ff       	jmp    c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d5e:	90                   	nop
c0008d5f:	e9 44 fe ff ff       	jmp    c0008ba8 <KeLoadTimezoneStrings()+0x17a>
c0008d64:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d69:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008d6c:	7d 49                	jge    c0008db7 <KeLoadTimezoneStrings()+0x389>
c0008d6e:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d73:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008d76:	0f 9c c0             	setl   al
c0008d79:	0f b6 d0             	movzx  edx,al
c0008d7c:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d81:	52                   	push   edx
c0008d82:	50                   	push   eax
c0008d83:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008d86:	68 6e 33 02 c0       	push   0xc002336e
c0008d8b:	e8 d4 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008d90:	83 c4 10             	add    esp,0x10
c0008d93:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008d96:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d9d:	83 ec 04             	sub    esp,0x4
c0008da0:	50                   	push   eax
c0008da1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008da4:	68 7c 33 02 c0       	push   0xc002337c
c0008da9:	e8 b6 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008db5:	eb ad                	jmp    c0008d64 <KeLoadTimezoneStrings()+0x336>
c0008db7:	90                   	nop
c0008db8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008dbb:	c9                   	leave  
c0008dbc:	c3                   	ret    

c0008dbd <KeGetTimezoneStringFromID(int)>:
c0008dbd:	55                   	push   ebp
c0008dbe:	89 e5                	mov    ebp,esp
c0008dc0:	83 ec 08             	sub    esp,0x8
c0008dc3:	83 ec 08             	sub    esp,0x8
c0008dc6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008dc9:	68 85 33 02 c0       	push   0xc0023385
c0008dce:	e8 91 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008dd3:	83 c4 10             	add    esp,0x10
c0008dd6:	a0 20 b3 02 c0       	mov    al,ds:0xc002b320
c0008ddb:	83 f0 01             	xor    eax,0x1
c0008dde:	0f b6 c0             	movzx  eax,al
c0008de1:	85 c0                	test   eax,eax
c0008de3:	74 15                	je     c0008dfa <KeGetTimezoneStringFromID(int)+0x3d>
c0008de5:	e8 44 fc ff ff       	call   c0008a2e <KeLoadTimezoneStrings()>
c0008dea:	83 ec 0c             	sub    esp,0xc
c0008ded:	68 a3 33 02 c0       	push   0xc00233a3
c0008df2:	e8 6d e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008df7:	83 c4 10             	add    esp,0x10
c0008dfa:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dff:	83 ec 04             	sub    esp,0x4
c0008e02:	50                   	push   eax
c0008e03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e06:	68 b4 33 02 c0       	push   0xc00233b4
c0008e0b:	e8 54 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008e10:	83 c4 10             	add    esp,0x10
c0008e13:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008e18:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e1b:	7d 06                	jge    c0008e23 <KeGetTimezoneStringFromID(int)+0x66>
c0008e1d:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e21:	79 07                	jns    c0008e2a <KeGetTimezoneStringFromID(int)+0x6d>
c0008e23:	b8 00 00 00 00       	mov    eax,0x0
c0008e28:	eb 2e                	jmp    c0008e58 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e2d:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e34:	83 c0 01             	add    eax,0x1
c0008e37:	83 ec 04             	sub    esp,0x4
c0008e3a:	50                   	push   eax
c0008e3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e3e:	68 c7 33 02 c0       	push   0xc00233c7
c0008e43:	e8 1c e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008e48:	83 c4 10             	add    esp,0x10
c0008e4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e4e:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e55:	83 c0 01             	add    eax,0x1
c0008e58:	c9                   	leave  
c0008e59:	c3                   	ret    

c0008e5a <KeUpdateTimezone(char const*)>:
c0008e5a:	55                   	push   ebp
c0008e5b:	89 e5                	mov    ebp,esp
c0008e5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e60:	8a 00                	mov    al,BYTE PTR [eax]
c0008e62:	0f be c0             	movsx  eax,al
c0008e65:	83 f8 2b             	cmp    eax,0x2b
c0008e68:	74 11                	je     c0008e7b <KeUpdateTimezone(char const*)+0x21>
c0008e6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e6d:	8a 00                	mov    al,BYTE PTR [eax]
c0008e6f:	0f be c0             	movsx  eax,al
c0008e72:	83 f8 2d             	cmp    eax,0x2d
c0008e75:	0f 85 be 00 00 00    	jne    c0008f39 <KeUpdateTimezone(char const*)+0xdf>
c0008e7b:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e85:	83 c0 02             	add    eax,0x2
c0008e88:	8a 00                	mov    al,BYTE PTR [eax]
c0008e8a:	0f be c0             	movsx  eax,al
c0008e8d:	83 f8 2e             	cmp    eax,0x2e
c0008e90:	75 10                	jne    c0008ea2 <KeUpdateTimezone(char const*)+0x48>
c0008e92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e95:	83 c0 03             	add    eax,0x3
c0008e98:	8a 00                	mov    al,BYTE PTR [eax]
c0008e9a:	0f be c0             	movsx  eax,al
c0008e9d:	83 f8 35             	cmp    eax,0x35
c0008ea0:	74 20                	je     c0008ec2 <KeUpdateTimezone(char const*)+0x68>
c0008ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea5:	83 c0 03             	add    eax,0x3
c0008ea8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eaa:	0f be c0             	movsx  eax,al
c0008ead:	83 f8 2e             	cmp    eax,0x2e
c0008eb0:	75 14                	jne    c0008ec6 <KeUpdateTimezone(char const*)+0x6c>
c0008eb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb5:	83 c0 04             	add    eax,0x4
c0008eb8:	8a 00                	mov    al,BYTE PTR [eax]
c0008eba:	0f be c0             	movsx  eax,al
c0008ebd:	83 f8 35             	cmp    eax,0x35
c0008ec0:	75 04                	jne    c0008ec6 <KeUpdateTimezone(char const*)+0x6c>
c0008ec2:	b0 01                	mov    al,0x1
c0008ec4:	eb 02                	jmp    c0008ec8 <KeUpdateTimezone(char const*)+0x6e>
c0008ec6:	b0 00                	mov    al,0x0
c0008ec8:	a2 61 b6 02 c0       	mov    ds:0xc002b661,al
c0008ecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ed0:	83 c0 01             	add    eax,0x1
c0008ed3:	8a 00                	mov    al,BYTE PTR [eax]
c0008ed5:	0f be c0             	movsx  eax,al
c0008ed8:	83 e8 30             	sub    eax,0x30
c0008edb:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008ee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ee3:	83 c0 03             	add    eax,0x3
c0008ee6:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee8:	0f be c0             	movsx  eax,al
c0008eeb:	83 f8 2e             	cmp    eax,0x2e
c0008eee:	75 2e                	jne    c0008f1e <KeUpdateTimezone(char const*)+0xc4>
c0008ef0:	8b 15 64 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b664
c0008ef6:	89 d0                	mov    eax,edx
c0008ef8:	c1 e0 02             	shl    eax,0x2
c0008efb:	01 d0                	add    eax,edx
c0008efd:	01 c0                	add    eax,eax
c0008eff:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f07:	83 c0 02             	add    eax,0x2
c0008f0a:	8a 00                	mov    al,BYTE PTR [eax]
c0008f0c:	0f be c0             	movsx  eax,al
c0008f0f:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f12:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f17:	01 d0                	add    eax,edx
c0008f19:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f21:	8a 00                	mov    al,BYTE PTR [eax]
c0008f23:	0f be c0             	movsx  eax,al
c0008f26:	83 f8 2d             	cmp    eax,0x2d
c0008f29:	75 26                	jne    c0008f51 <KeUpdateTimezone(char const*)+0xf7>
c0008f2b:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f30:	f7 d8                	neg    eax
c0008f32:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f37:	eb 18                	jmp    c0008f51 <KeUpdateTimezone(char const*)+0xf7>
c0008f39:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008f40:	c6 05 61 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b661,0x0
c0008f47:	c7 05 64 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b664,0x0
c0008f51:	90                   	nop
c0008f52:	5d                   	pop    ebp
c0008f53:	c3                   	ret    

c0008f54 <KeSetTimezone(char const*)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	83 ec 18             	sub    esp,0x18
c0008f5a:	83 ec 0c             	sub    esp,0xc
c0008f5d:	68 d4 33 02 c0       	push   0xc00233d4
c0008f62:	e8 41 44 00 00       	call   c000d3a8 <CmOpen(char const*)>
c0008f67:	83 c4 10             	add    esp,0x10
c0008f6a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008f6d:	83 ec 08             	sub    esp,0x8
c0008f70:	68 f9 33 02 c0       	push   0xc00233f9
c0008f75:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f78:	e8 2b 50 00 00       	call   c000dfa8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008f7d:	83 c4 10             	add    esp,0x10
c0008f80:	83 ec 04             	sub    esp,0x4
c0008f83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008f86:	50                   	push   eax
c0008f87:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f8a:	e8 eb 48 00 00       	call   c000d87a <CmSetString(Reghive_Tag*, int, char const*)>
c0008f8f:	83 c4 10             	add    esp,0x10
c0008f92:	83 ec 0c             	sub    esp,0xc
c0008f95:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f98:	e8 29 45 00 00       	call   c000d4c6 <CmClose(Reghive_Tag*)>
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	83 ec 0c             	sub    esp,0xc
c0008fa3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fa6:	e8 af fe ff ff       	call   c0008e5a <KeUpdateTimezone(char const*)>
c0008fab:	83 c4 10             	add    esp,0x10
c0008fae:	90                   	nop
c0008faf:	c9                   	leave  
c0008fb0:	c3                   	ret    

c0008fb1 <KeSetTimezone(int)>:
c0008fb1:	55                   	push   ebp
c0008fb2:	89 e5                	mov    ebp,esp
c0008fb4:	83 ec 18             	sub    esp,0x18
c0008fb7:	83 ec 0c             	sub    esp,0xc
c0008fba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fbd:	e8 fb fd ff ff       	call   c0008dbd <KeGetTimezoneStringFromID(int)>
c0008fc2:	83 c4 10             	add    esp,0x10
c0008fc5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc8:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0008fcc:	74 12                	je     c0008fe0 <KeSetTimezone(int)+0x2f>
c0008fce:	83 ec 0c             	sub    esp,0xc
c0008fd1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd4:	e8 7b ff ff ff       	call   c0008f54 <KeSetTimezone(char const*)>
c0008fd9:	83 c4 10             	add    esp,0x10
c0008fdc:	b0 01                	mov    al,0x1
c0008fde:	eb 02                	jmp    c0008fe2 <KeSetTimezone(int)+0x31>
c0008fe0:	b0 00                	mov    al,0x0
c0008fe2:	c9                   	leave  
c0008fe3:	c3                   	ret    

c0008fe4 <KeLoadTimezone()>:
c0008fe4:	55                   	push   ebp
c0008fe5:	89 e5                	mov    ebp,esp
c0008fe7:	81 ec 68 02 00 00    	sub    esp,0x268
c0008fed:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c0008ff4:	83 ec 0c             	sub    esp,0xc
c0008ff7:	68 d4 33 02 c0       	push   0xc00233d4
c0008ffc:	e8 a7 43 00 00       	call   c000d3a8 <CmOpen(char const*)>
c0009001:	83 c4 10             	add    esp,0x10
c0009004:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009007:	83 ec 08             	sub    esp,0x8
c000900a:	68 f9 33 02 c0       	push   0xc00233f9
c000900f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009012:	e8 91 4f 00 00       	call   c000dfa8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009017:	83 c4 10             	add    esp,0x10
c000901a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000901d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009021:	7e 18                	jle    c000903b <KeLoadTimezone()+0x57>
c0009023:	83 ec 04             	sub    esp,0x4
c0009026:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c000902c:	50                   	push   eax
c000902d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0009030:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009033:	e8 e0 44 00 00       	call   c000d518 <CmGetString(Reghive_Tag*, int, char*)>
c0009038:	83 c4 10             	add    esp,0x10
c000903b:	83 ec 0c             	sub    esp,0xc
c000903e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009041:	e8 80 44 00 00       	call   c000d4c6 <CmClose(Reghive_Tag*)>
c0009046:	83 c4 10             	add    esp,0x10
c0009049:	83 ec 0c             	sub    esp,0xc
c000904c:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009052:	50                   	push   eax
c0009053:	e8 02 fe ff ff       	call   c0008e5a <KeUpdateTimezone(char const*)>
c0009058:	83 c4 10             	add    esp,0x10
c000905b:	90                   	nop
c000905c:	c9                   	leave  
c000905d:	c3                   	ret    

c000905e <Clock::Clock(char const*)>:
c000905e:	83 ec 0c             	sub    esp,0xc
c0009061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009065:	83 ec 08             	sub    esp,0x8
c0009068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000906c:	50                   	push   eax
c000906d:	e8 ec 0a 00 00       	call   c0009b5e <Device::Device(char const*)>
c0009072:	83 c4 10             	add    esp,0x10
c0009075:	ba 58 34 02 c0       	mov    edx,0xc0023458
c000907a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000907e:	89 10                	mov    DWORD PTR [eax],edx
c0009080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009084:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000908e:	90                   	nop
c000908f:	83 c4 0c             	add    esp,0xc
c0009092:	c3                   	ret    
c0009093:	90                   	nop

c0009094 <Clock::~Clock()>:
c0009094:	83 ec 0c             	sub    esp,0xc
c0009097:	ba 58 34 02 c0       	mov    edx,0xc0023458
c000909c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090a0:	89 10                	mov    DWORD PTR [eax],edx
c00090a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090a6:	83 ec 0c             	sub    esp,0xc
c00090a9:	50                   	push   eax
c00090aa:	e8 4f 08 00 00       	call   c00098fe <Device::~Device()>
c00090af:	83 c4 10             	add    esp,0x10
c00090b2:	90                   	nop
c00090b3:	83 c4 0c             	add    esp,0xc
c00090b6:	c3                   	ret    
c00090b7:	90                   	nop

c00090b8 <Clock::~Clock()>:
c00090b8:	83 ec 0c             	sub    esp,0xc
c00090bb:	83 ec 0c             	sub    esp,0xc
c00090be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c2:	e8 cd ff ff ff       	call   c0009094 <Clock::~Clock()>
c00090c7:	83 c4 10             	add    esp,0x10
c00090ca:	83 ec 08             	sub    esp,0x8
c00090cd:	68 58 01 00 00       	push   0x158
c00090d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d6:	e8 78 42 00 00       	call   c000d353 <operator delete(void*, unsigned long)>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	83 c4 0c             	add    esp,0xc
c00090e1:	c3                   	ret    

c00090e2 <Clock::timeInSecondsLocal()>:
c00090e2:	55                   	push   ebp
c00090e3:	89 e5                	mov    ebp,esp
c00090e5:	53                   	push   ebx
c00090e6:	83 ec 04             	sub    esp,0x4
c00090e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00090ee:	83 c0 24             	add    eax,0x24
c00090f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090f3:	83 ec 0c             	sub    esp,0xc
c00090f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00090f9:	ff d0                	call   eax
c00090fb:	83 c4 10             	add    esp,0x10
c00090fe:	89 c1                	mov    ecx,eax
c0009100:	89 d3                	mov    ebx,edx
c0009102:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009107:	0f b6 d0             	movzx  edx,al
c000910a:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c000910f:	01 c2                	add    edx,eax
c0009111:	89 d0                	mov    eax,edx
c0009113:	01 c0                	add    eax,eax
c0009115:	01 d0                	add    eax,edx
c0009117:	01 c0                	add    eax,eax
c0009119:	01 d0                	add    eax,edx
c000911b:	c1 e0 05             	shl    eax,0x5
c000911e:	01 d0                	add    eax,edx
c0009120:	c1 e0 04             	shl    eax,0x4
c0009123:	89 c2                	mov    edx,eax
c0009125:	c1 fa 1f             	sar    edx,0x1f
c0009128:	01 c1                	add    ecx,eax
c000912a:	11 d3                	adc    ebx,edx
c000912c:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c0009131:	0f b6 c0             	movzx  eax,al
c0009134:	85 c0                	test   eax,eax
c0009136:	74 0c                	je     c0009144 <Clock::timeInSecondsLocal()+0x62>
c0009138:	b8 08 07 00 00       	mov    eax,0x708
c000913d:	ba 00 00 00 00       	mov    edx,0x0
c0009142:	eb 0a                	jmp    c000914e <Clock::timeInSecondsLocal()+0x6c>
c0009144:	b8 00 00 00 00       	mov    eax,0x0
c0009149:	ba 00 00 00 00       	mov    edx,0x0
c000914e:	01 c8                	add    eax,ecx
c0009150:	11 da                	adc    edx,ebx
c0009152:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0009155:	c9                   	leave  
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0009158:	55                   	push   ebp
c0009159:	89 e5                	mov    ebp,esp
c000915b:	56                   	push   esi
c000915c:	53                   	push   ebx
c000915d:	83 ec 10             	sub    esp,0x10
c0009160:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009163:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009166:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009169:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000916c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000916f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009171:	83 c0 2c             	add    eax,0x2c
c0009174:	8b 30                	mov    esi,DWORD PTR [eax]
c0009176:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c000917b:	0f b6 d0             	movzx  edx,al
c000917e:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0009183:	01 c2                	add    edx,eax
c0009185:	89 d0                	mov    eax,edx
c0009187:	01 c0                	add    eax,eax
c0009189:	01 d0                	add    eax,edx
c000918b:	01 c0                	add    eax,eax
c000918d:	01 d0                	add    eax,edx
c000918f:	c1 e0 05             	shl    eax,0x5
c0009192:	01 d0                	add    eax,edx
c0009194:	c1 e0 04             	shl    eax,0x4
c0009197:	89 c2                	mov    edx,eax
c0009199:	c1 fa 1f             	sar    edx,0x1f
c000919c:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000919f:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091a2:	29 c1                	sub    ecx,eax
c00091a4:	19 d3                	sbb    ebx,edx
c00091a6:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c00091ab:	0f b6 c0             	movzx  eax,al
c00091ae:	85 c0                	test   eax,eax
c00091b0:	74 0c                	je     c00091be <Clock::setTimeInSecondsLocal(unsigned long long)+0x66>
c00091b2:	b8 08 07 00 00       	mov    eax,0x708
c00091b7:	ba 00 00 00 00       	mov    edx,0x0
c00091bc:	eb 0a                	jmp    c00091c8 <Clock::setTimeInSecondsLocal(unsigned long long)+0x70>
c00091be:	b8 00 00 00 00       	mov    eax,0x0
c00091c3:	ba 00 00 00 00       	mov    edx,0x0
c00091c8:	29 c1                	sub    ecx,eax
c00091ca:	19 d3                	sbb    ebx,edx
c00091cc:	89 c8                	mov    eax,ecx
c00091ce:	89 da                	mov    edx,ebx
c00091d0:	83 ec 04             	sub    esp,0x4
c00091d3:	52                   	push   edx
c00091d4:	50                   	push   eax
c00091d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00091d8:	ff d6                	call   esi
c00091da:	83 c4 10             	add    esp,0x10
c00091dd:	8d 65 f8             	lea    esp,[ebp-0x8]
c00091e0:	5b                   	pop    ebx
c00091e1:	5e                   	pop    esi
c00091e2:	5d                   	pop    ebp
c00091e3:	c3                   	ret    

c00091e4 <KeDatetimeToSeconds(datetime_t)>:
c00091e4:	55                   	push   ebp
c00091e5:	89 e5                	mov    ebp,esp
c00091e7:	53                   	push   ebx
c00091e8:	83 ec 24             	sub    esp,0x24
c00091eb:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00091ef:	2d 6c 07 00 00       	sub    eax,0x76c
c00091f4:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00091f8:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00091fb:	83 e8 01             	sub    eax,0x1
c00091fe:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c0009201:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009208:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c000920f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009216:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000921d:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c0009220:	0f b6 c8             	movzx  ecx,al
c0009223:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009226:	0f b6 d0             	movzx  edx,al
c0009229:	89 d0                	mov    eax,edx
c000922b:	01 c0                	add    eax,eax
c000922d:	01 d0                	add    eax,edx
c000922f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009236:	01 d0                	add    eax,edx
c0009238:	c1 e0 02             	shl    eax,0x2
c000923b:	01 c1                	add    ecx,eax
c000923d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0009240:	0f b6 d0             	movzx  edx,al
c0009243:	89 d0                	mov    eax,edx
c0009245:	01 c0                	add    eax,eax
c0009247:	01 d0                	add    eax,edx
c0009249:	01 c0                	add    eax,eax
c000924b:	01 d0                	add    eax,edx
c000924d:	c1 e0 05             	shl    eax,0x5
c0009250:	01 d0                	add    eax,edx
c0009252:	c1 e0 04             	shl    eax,0x4
c0009255:	01 c8                	add    eax,ecx
c0009257:	89 c2                	mov    edx,eax
c0009259:	c1 fa 1f             	sar    edx,0x1f
c000925c:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000925f:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009262:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009265:	0f b6 c0             	movzx  eax,al
c0009268:	83 e8 01             	sub    eax,0x1
c000926b:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000926e:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009271:	0f b6 c0             	movzx  eax,al
c0009274:	8b 04 85 20 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcbe0]
c000927b:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000927e:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c0009281:	0f b6 c0             	movzx  eax,al
c0009284:	83 f8 01             	cmp    eax,0x1
c0009287:	76 7c                	jbe    c0009305 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009289:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000928d:	0f b7 c0             	movzx  eax,ax
c0009290:	83 e0 03             	and    eax,0x3
c0009293:	85 c0                	test   eax,eax
c0009295:	75 6e                	jne    c0009305 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009297:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000929b:	0f b7 c8             	movzx  ecx,ax
c000929e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092a3:	89 c8                	mov    eax,ecx
c00092a5:	f7 e2                	mul    edx
c00092a7:	c1 ea 05             	shr    edx,0x5
c00092aa:	89 d0                	mov    eax,edx
c00092ac:	c1 e0 02             	shl    eax,0x2
c00092af:	01 d0                	add    eax,edx
c00092b1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092b8:	01 d0                	add    eax,edx
c00092ba:	c1 e0 02             	shl    eax,0x2
c00092bd:	29 c1                	sub    ecx,eax
c00092bf:	89 c8                	mov    eax,ecx
c00092c1:	0f b7 c0             	movzx  eax,ax
c00092c4:	85 c0                	test   eax,eax
c00092c6:	75 39                	jne    c0009301 <KeDatetimeToSeconds(datetime_t)+0x11d>
c00092c8:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092cc:	0f b7 c0             	movzx  eax,ax
c00092cf:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00092d5:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00092da:	f7 e9                	imul   ecx
c00092dc:	c1 fa 07             	sar    edx,0x7
c00092df:	89 c8                	mov    eax,ecx
c00092e1:	c1 f8 1f             	sar    eax,0x1f
c00092e4:	29 c2                	sub    edx,eax
c00092e6:	89 d0                	mov    eax,edx
c00092e8:	c1 e0 02             	shl    eax,0x2
c00092eb:	01 d0                	add    eax,edx
c00092ed:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092f4:	01 d0                	add    eax,edx
c00092f6:	c1 e0 04             	shl    eax,0x4
c00092f9:	29 c1                	sub    ecx,eax
c00092fb:	89 ca                	mov    edx,ecx
c00092fd:	85 d2                	test   edx,edx
c00092ff:	75 04                	jne    c0009305 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009301:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009305:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009309:	0f b7 c0             	movzx  eax,ax
c000930c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000930f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009312:	83 f8 46             	cmp    eax,0x46
c0009315:	0f 9f c0             	setg   al
c0009318:	0f b6 c0             	movzx  eax,al
c000931b:	85 c0                	test   eax,eax
c000931d:	0f 84 a4 00 00 00    	je     c00093c7 <KeDatetimeToSeconds(datetime_t)+0x1e3>
c0009323:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c000932a:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000932e:	0f b7 d0             	movzx  edx,ax
c0009331:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009334:	39 c2                	cmp    edx,eax
c0009336:	0f 8e b8 01 00 00    	jle    c00094f4 <KeDatetimeToSeconds(datetime_t)+0x310>
c000933c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000933f:	83 e0 03             	and    eax,0x3
c0009342:	85 c0                	test   eax,eax
c0009344:	75 6b                	jne    c00093b1 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c0009346:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009349:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000934e:	f7 e9                	imul   ecx
c0009350:	c1 fa 05             	sar    edx,0x5
c0009353:	89 c8                	mov    eax,ecx
c0009355:	c1 f8 1f             	sar    eax,0x1f
c0009358:	29 c2                	sub    edx,eax
c000935a:	89 d0                	mov    eax,edx
c000935c:	c1 e0 02             	shl    eax,0x2
c000935f:	01 d0                	add    eax,edx
c0009361:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009368:	01 d0                	add    eax,edx
c000936a:	c1 e0 02             	shl    eax,0x2
c000936d:	29 c1                	sub    ecx,eax
c000936f:	89 ca                	mov    edx,ecx
c0009371:	85 d2                	test   edx,edx
c0009373:	75 35                	jne    c00093aa <KeDatetimeToSeconds(datetime_t)+0x1c6>
c0009375:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009378:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000937e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009383:	f7 e9                	imul   ecx
c0009385:	c1 fa 07             	sar    edx,0x7
c0009388:	89 c8                	mov    eax,ecx
c000938a:	c1 f8 1f             	sar    eax,0x1f
c000938d:	29 c2                	sub    edx,eax
c000938f:	89 d0                	mov    eax,edx
c0009391:	c1 e0 02             	shl    eax,0x2
c0009394:	01 d0                	add    eax,edx
c0009396:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000939d:	01 d0                	add    eax,edx
c000939f:	c1 e0 04             	shl    eax,0x4
c00093a2:	29 c1                	sub    ecx,eax
c00093a4:	89 ca                	mov    edx,ecx
c00093a6:	85 d2                	test   edx,edx
c00093a8:	75 07                	jne    c00093b1 <KeDatetimeToSeconds(datetime_t)+0x1cd>
c00093aa:	b8 6e 01 00 00       	mov    eax,0x16e
c00093af:	eb 05                	jmp    c00093b6 <KeDatetimeToSeconds(datetime_t)+0x1d2>
c00093b1:	b8 6d 01 00 00       	mov    eax,0x16d
c00093b6:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00093b9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093bc:	83 c0 01             	add    eax,0x1
c00093bf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00093c2:	e9 63 ff ff ff       	jmp    c000932a <KeDatetimeToSeconds(datetime_t)+0x146>
c00093c7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093ca:	83 f8 45             	cmp    eax,0x45
c00093cd:	0f 8f 21 01 00 00    	jg     c00094f4 <KeDatetimeToSeconds(datetime_t)+0x310>
c00093d3:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c00093da:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00093de:	0f b7 d0             	movzx  edx,ax
c00093e1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093e4:	39 c2                	cmp    edx,eax
c00093e6:	0f 8d 8b 00 00 00    	jge    c0009477 <KeDatetimeToSeconds(datetime_t)+0x293>
c00093ec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093ef:	83 e0 03             	and    eax,0x3
c00093f2:	85 c0                	test   eax,eax
c00093f4:	75 6b                	jne    c0009461 <KeDatetimeToSeconds(datetime_t)+0x27d>
c00093f6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00093f9:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093fe:	f7 e9                	imul   ecx
c0009400:	c1 fa 05             	sar    edx,0x5
c0009403:	89 c8                	mov    eax,ecx
c0009405:	c1 f8 1f             	sar    eax,0x1f
c0009408:	29 c2                	sub    edx,eax
c000940a:	89 d0                	mov    eax,edx
c000940c:	c1 e0 02             	shl    eax,0x2
c000940f:	01 d0                	add    eax,edx
c0009411:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009418:	01 d0                	add    eax,edx
c000941a:	c1 e0 02             	shl    eax,0x2
c000941d:	29 c1                	sub    ecx,eax
c000941f:	89 ca                	mov    edx,ecx
c0009421:	85 d2                	test   edx,edx
c0009423:	75 35                	jne    c000945a <KeDatetimeToSeconds(datetime_t)+0x276>
c0009425:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009428:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000942e:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009433:	f7 e9                	imul   ecx
c0009435:	c1 fa 07             	sar    edx,0x7
c0009438:	89 c8                	mov    eax,ecx
c000943a:	c1 f8 1f             	sar    eax,0x1f
c000943d:	29 c2                	sub    edx,eax
c000943f:	89 d0                	mov    eax,edx
c0009441:	c1 e0 02             	shl    eax,0x2
c0009444:	01 d0                	add    eax,edx
c0009446:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000944d:	01 d0                	add    eax,edx
c000944f:	c1 e0 04             	shl    eax,0x4
c0009452:	29 c1                	sub    ecx,eax
c0009454:	89 ca                	mov    edx,ecx
c0009456:	85 d2                	test   edx,edx
c0009458:	75 07                	jne    c0009461 <KeDatetimeToSeconds(datetime_t)+0x27d>
c000945a:	b8 6e 01 00 00       	mov    eax,0x16e
c000945f:	eb 05                	jmp    c0009466 <KeDatetimeToSeconds(datetime_t)+0x282>
c0009461:	b8 6d 01 00 00       	mov    eax,0x16d
c0009466:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009469:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000946c:	83 e8 01             	sub    eax,0x1
c000946f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009472:	e9 63 ff ff ff       	jmp    c00093da <KeDatetimeToSeconds(datetime_t)+0x1f6>
c0009477:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000947a:	83 e0 03             	and    eax,0x3
c000947d:	85 c0                	test   eax,eax
c000947f:	75 6b                	jne    c00094ec <KeDatetimeToSeconds(datetime_t)+0x308>
c0009481:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009484:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009489:	f7 e9                	imul   ecx
c000948b:	c1 fa 05             	sar    edx,0x5
c000948e:	89 c8                	mov    eax,ecx
c0009490:	c1 f8 1f             	sar    eax,0x1f
c0009493:	29 c2                	sub    edx,eax
c0009495:	89 d0                	mov    eax,edx
c0009497:	c1 e0 02             	shl    eax,0x2
c000949a:	01 d0                	add    eax,edx
c000949c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094a3:	01 d0                	add    eax,edx
c00094a5:	c1 e0 02             	shl    eax,0x2
c00094a8:	29 c1                	sub    ecx,eax
c00094aa:	89 ca                	mov    edx,ecx
c00094ac:	85 d2                	test   edx,edx
c00094ae:	75 35                	jne    c00094e5 <KeDatetimeToSeconds(datetime_t)+0x301>
c00094b0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094b3:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00094b9:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094be:	f7 e9                	imul   ecx
c00094c0:	c1 fa 07             	sar    edx,0x7
c00094c3:	89 c8                	mov    eax,ecx
c00094c5:	c1 f8 1f             	sar    eax,0x1f
c00094c8:	29 c2                	sub    edx,eax
c00094ca:	89 d0                	mov    eax,edx
c00094cc:	c1 e0 02             	shl    eax,0x2
c00094cf:	01 d0                	add    eax,edx
c00094d1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094d8:	01 d0                	add    eax,edx
c00094da:	c1 e0 04             	shl    eax,0x4
c00094dd:	29 c1                	sub    ecx,eax
c00094df:	89 ca                	mov    edx,ecx
c00094e1:	85 d2                	test   edx,edx
c00094e3:	75 07                	jne    c00094ec <KeDatetimeToSeconds(datetime_t)+0x308>
c00094e5:	b8 6e 01 00 00       	mov    eax,0x16e
c00094ea:	eb 05                	jmp    c00094f1 <KeDatetimeToSeconds(datetime_t)+0x30d>
c00094ec:	b8 6d 01 00 00       	mov    eax,0x16d
c00094f1:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c00094f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00094f7:	89 c2                	mov    edx,eax
c00094f9:	c1 fa 1f             	sar    edx,0x1f
c00094fc:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c0009502:	6b c8 00             	imul   ecx,eax,0x0
c0009505:	01 d9                	add    ecx,ebx
c0009507:	bb 80 51 01 00       	mov    ebx,0x15180
c000950c:	f7 e3                	mul    ebx
c000950e:	01 d1                	add    ecx,edx
c0009510:	89 ca                	mov    edx,ecx
c0009512:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009515:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009518:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000951b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000951e:	83 c4 24             	add    esp,0x24
c0009521:	5b                   	pop    ebx
c0009522:	5d                   	pop    ebp
c0009523:	c3                   	ret    

c0009524 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0009524:	55                   	push   ebp
c0009525:	89 e5                	mov    ebp,esp
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 20             	sub    esp,0x20
c000952c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c000952f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009532:	e8 ad fc ff ff       	call   c00091e4 <KeDatetimeToSeconds(datetime_t)>
c0009537:	83 c4 08             	add    esp,0x8
c000953a:	89 c3                	mov    ebx,eax
c000953c:	89 d6                	mov    esi,edx
c000953e:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009543:	0f b6 d0             	movzx  edx,al
c0009546:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c000954b:	01 c2                	add    edx,eax
c000954d:	89 d0                	mov    eax,edx
c000954f:	01 c0                	add    eax,eax
c0009551:	01 d0                	add    eax,edx
c0009553:	01 c0                	add    eax,eax
c0009555:	01 d0                	add    eax,edx
c0009557:	c1 e0 05             	shl    eax,0x5
c000955a:	01 d0                	add    eax,edx
c000955c:	c1 e0 04             	shl    eax,0x4
c000955f:	89 c2                	mov    edx,eax
c0009561:	c1 fa 1f             	sar    edx,0x1f
c0009564:	29 c3                	sub    ebx,eax
c0009566:	19 d6                	sbb    esi,edx
c0009568:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c000956d:	0f b6 c0             	movzx  eax,al
c0009570:	85 c0                	test   eax,eax
c0009572:	74 0c                	je     c0009580 <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c0009574:	b8 08 07 00 00       	mov    eax,0x708
c0009579:	ba 00 00 00 00       	mov    edx,0x0
c000957e:	eb 0a                	jmp    c000958a <Clock::setTimeInDatetimeLocal(datetime_t)+0x66>
c0009580:	b8 00 00 00 00       	mov    eax,0x0
c0009585:	ba 00 00 00 00       	mov    edx,0x0
c000958a:	29 c3                	sub    ebx,eax
c000958c:	19 d6                	sbb    esi,edx
c000958e:	89 d8                	mov    eax,ebx
c0009590:	89 f2                	mov    edx,esi
c0009592:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009595:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009598:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000959b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000959e:	89 d0                	mov    eax,edx
c00095a0:	31 d2                	xor    edx,edx
c00095a2:	89 c3                	mov    ebx,eax
c00095a4:	89 d6                	mov    esi,edx
c00095a6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00095a9:	80 e5 ff             	and    ch,0xff
c00095ac:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00095af:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c00095b2:	83 e1 00             	and    ecx,0x0
c00095b5:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00095b8:	83 ec 0c             	sub    esp,0xc
c00095bb:	56                   	push   esi
c00095bc:	53                   	push   ebx
c00095bd:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00095c0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00095c3:	68 0e 34 02 c0       	push   0xc002340e
c00095c8:	e8 97 d9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00095cd:	83 c4 20             	add    esp,0x20
c00095d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00095d5:	83 c0 2c             	add    eax,0x2c
c00095d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00095da:	83 ec 04             	sub    esp,0x4
c00095dd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00095e0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00095e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00095e6:	ff d0                	call   eax
c00095e8:	83 c4 10             	add    esp,0x10
c00095eb:	8d 65 f8             	lea    esp,[ebp-0x8]
c00095ee:	5b                   	pop    ebx
c00095ef:	5e                   	pop    esi
c00095f0:	5d                   	pop    ebp
c00095f1:	c3                   	ret    

c00095f2 <KeSecondsToDatetime(unsigned long long)>:
c00095f2:	55                   	push   ebp
c00095f3:	89 e5                	mov    ebp,esp
c00095f5:	83 ec 48             	sub    esp,0x48
c00095f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00095fb:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c00095fe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009601:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0009604:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009607:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c000960a:	6a 00                	push   0x0
c000960c:	68 80 51 01 00       	push   0x15180
c0009611:	52                   	push   edx
c0009612:	50                   	push   eax
c0009613:	e8 cc 82 01 00       	call   c00218e4 <__udivdi3>
c0009618:	83 c4 10             	add    esp,0x10
c000961b:	05 6c fa 0a 00       	add    eax,0xafa6c
c0009620:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009623:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009626:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009629:	6a 00                	push   0x0
c000962b:	68 80 51 01 00       	push   0x15180
c0009630:	52                   	push   edx
c0009631:	50                   	push   eax
c0009632:	e8 ad 83 01 00       	call   c00219e4 <__umoddi3>
c0009637:	83 c4 10             	add    esp,0x10
c000963a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000963d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c0009641:	79 0b                	jns    c000964e <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009643:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c000964a:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c000964e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009651:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009656:	89 c8                	mov    eax,ecx
c0009658:	f7 ea                	imul   edx
c000965a:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000965d:	c1 f8 0b             	sar    eax,0xb
c0009660:	89 c2                	mov    edx,eax
c0009662:	89 c8                	mov    eax,ecx
c0009664:	c1 f8 1f             	sar    eax,0x1f
c0009667:	29 c2                	sub    edx,eax
c0009669:	89 d0                	mov    eax,edx
c000966b:	88 c2                	mov    dl,al
c000966d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009670:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009673:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009676:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c000967b:	89 c8                	mov    eax,ecx
c000967d:	f7 ea                	imul   edx
c000967f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009682:	c1 f8 0b             	sar    eax,0xb
c0009685:	89 c2                	mov    edx,eax
c0009687:	89 c8                	mov    eax,ecx
c0009689:	c1 f8 1f             	sar    eax,0x1f
c000968c:	29 c2                	sub    edx,eax
c000968e:	89 d0                	mov    eax,edx
c0009690:	01 c0                	add    eax,eax
c0009692:	01 d0                	add    eax,edx
c0009694:	01 c0                	add    eax,eax
c0009696:	01 d0                	add    eax,edx
c0009698:	c1 e0 05             	shl    eax,0x5
c000969b:	01 d0                	add    eax,edx
c000969d:	c1 e0 04             	shl    eax,0x4
c00096a0:	29 c1                	sub    ecx,eax
c00096a2:	89 c8                	mov    eax,ecx
c00096a4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096a7:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096aa:	ba 89 88 88 88       	mov    edx,0x88888889
c00096af:	89 c8                	mov    eax,ecx
c00096b1:	f7 ea                	imul   edx
c00096b3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096b6:	c1 f8 05             	sar    eax,0x5
c00096b9:	89 c2                	mov    edx,eax
c00096bb:	89 c8                	mov    eax,ecx
c00096bd:	c1 f8 1f             	sar    eax,0x1f
c00096c0:	29 c2                	sub    edx,eax
c00096c2:	89 d0                	mov    eax,edx
c00096c4:	88 c2                	mov    dl,al
c00096c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096c9:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00096cc:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096cf:	ba 89 88 88 88       	mov    edx,0x88888889
c00096d4:	89 c8                	mov    eax,ecx
c00096d6:	f7 ea                	imul   edx
c00096d8:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096db:	c1 f8 05             	sar    eax,0x5
c00096de:	89 c2                	mov    edx,eax
c00096e0:	89 c8                	mov    eax,ecx
c00096e2:	c1 f8 1f             	sar    eax,0x1f
c00096e5:	29 c2                	sub    edx,eax
c00096e7:	89 d0                	mov    eax,edx
c00096e9:	01 c0                	add    eax,eax
c00096eb:	01 d0                	add    eax,edx
c00096ed:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00096f4:	01 d0                	add    eax,edx
c00096f6:	c1 e0 02             	shl    eax,0x2
c00096f9:	29 c1                	sub    ecx,eax
c00096fb:	89 ca                	mov    edx,ecx
c00096fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009700:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c0009703:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009707:	79 20                	jns    c0009729 <KeSecondsToDatetime(unsigned long long)+0x137>
c0009709:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000970c:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c0009712:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009717:	89 c8                	mov    eax,ecx
c0009719:	f7 ea                	imul   edx
c000971b:	c1 fa 0f             	sar    edx,0xf
c000971e:	89 c8                	mov    eax,ecx
c0009720:	c1 f8 1f             	sar    eax,0x1f
c0009723:	29 c2                	sub    edx,eax
c0009725:	89 d0                	mov    eax,edx
c0009727:	eb 18                	jmp    c0009741 <KeSecondsToDatetime(unsigned long long)+0x14f>
c0009729:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000972c:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009731:	89 c8                	mov    eax,ecx
c0009733:	f7 ea                	imul   edx
c0009735:	c1 fa 0f             	sar    edx,0xf
c0009738:	89 c8                	mov    eax,ecx
c000973a:	c1 f8 1f             	sar    eax,0x1f
c000973d:	29 c2                	sub    edx,eax
c000973f:	89 d0                	mov    eax,edx
c0009741:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0009744:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009747:	89 d0                	mov    eax,edx
c0009749:	c1 e0 03             	shl    eax,0x3
c000974c:	01 d0                	add    eax,edx
c000974e:	c1 e0 04             	shl    eax,0x4
c0009751:	01 d0                	add    eax,edx
c0009753:	c1 e0 04             	shl    eax,0x4
c0009756:	29 d0                	sub    eax,edx
c0009758:	89 c2                	mov    edx,eax
c000975a:	c1 e2 06             	shl    edx,0x6
c000975d:	29 c2                	sub    edx,eax
c000975f:	89 d0                	mov    eax,edx
c0009761:	f7 d8                	neg    eax
c0009763:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009766:	01 d0                	add    eax,edx
c0009768:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000976b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000976e:	c1 e8 02             	shr    eax,0x2
c0009771:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c0009776:	f7 e2                	mul    edx
c0009778:	c1 ea 07             	shr    edx,0x7
c000977b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000977e:	29 d0                	sub    eax,edx
c0009780:	89 c1                	mov    ecx,eax
c0009782:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009785:	c1 e8 02             	shr    eax,0x2
c0009788:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c000978d:	f7 e2                	mul    edx
c000978f:	89 d0                	mov    eax,edx
c0009791:	c1 e8 0b             	shr    eax,0xb
c0009794:	01 c1                	add    ecx,eax
c0009796:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009799:	c1 e8 04             	shr    eax,0x4
c000979c:	ba 41 d6 72 00       	mov    edx,0x72d641
c00097a1:	f7 e2                	mul    edx
c00097a3:	89 d0                	mov    eax,edx
c00097a5:	c1 e8 04             	shr    eax,0x4
c00097a8:	29 c1                	sub    ecx,eax
c00097aa:	ba 61 f3 19 67       	mov    edx,0x6719f361
c00097af:	89 c8                	mov    eax,ecx
c00097b1:	f7 e2                	mul    edx
c00097b3:	89 c8                	mov    eax,ecx
c00097b5:	29 d0                	sub    eax,edx
c00097b7:	d1 e8                	shr    eax,1
c00097b9:	01 d0                	add    eax,edx
c00097bb:	c1 e8 08             	shr    eax,0x8
c00097be:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00097c1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097c4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00097c9:	f7 e2                	mul    edx
c00097cb:	89 d1                	mov    ecx,edx
c00097cd:	c1 e9 05             	shr    ecx,0x5
c00097d0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00097d3:	89 d0                	mov    eax,edx
c00097d5:	c1 e0 03             	shl    eax,0x3
c00097d8:	01 d0                	add    eax,edx
c00097da:	c1 e0 03             	shl    eax,0x3
c00097dd:	01 d0                	add    eax,edx
c00097df:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00097e6:	01 c2                	add    edx,eax
c00097e8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097eb:	c1 e8 02             	shr    eax,0x2
c00097ee:	01 d0                	add    eax,edx
c00097f0:	29 c1                	sub    ecx,eax
c00097f2:	89 ca                	mov    edx,ecx
c00097f4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f7:	01 d0                	add    eax,edx
c00097f9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00097fc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00097ff:	89 d0                	mov    eax,edx
c0009801:	c1 e0 02             	shl    eax,0x2
c0009804:	01 d0                	add    eax,edx
c0009806:	83 c0 02             	add    eax,0x2
c0009809:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c000980e:	f7 e2                	mul    edx
c0009810:	89 d0                	mov    eax,edx
c0009812:	c1 e8 07             	shr    eax,0x7
c0009815:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009818:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000981b:	89 d0                	mov    eax,edx
c000981d:	c1 e0 03             	shl    eax,0x3
c0009820:	01 d0                	add    eax,edx
c0009822:	01 c0                	add    eax,eax
c0009824:	01 d0                	add    eax,edx
c0009826:	c1 e0 03             	shl    eax,0x3
c0009829:	01 d0                	add    eax,edx
c000982b:	83 c0 02             	add    eax,0x2
c000982e:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0009833:	f7 e2                	mul    edx
c0009835:	c1 ea 02             	shr    edx,0x2
c0009838:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000983b:	29 d0                	sub    eax,edx
c000983d:	83 c0 01             	add    eax,0x1
c0009840:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0009843:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c0009847:	77 07                	ja     c0009850 <KeSecondsToDatetime(unsigned long long)+0x25e>
c0009849:	b8 02 00 00 00       	mov    eax,0x2
c000984e:	eb 05                	jmp    c0009855 <KeSecondsToDatetime(unsigned long long)+0x263>
c0009850:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c0009855:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c0009858:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000985b:	89 d0                	mov    eax,edx
c000985d:	c1 e0 02             	shl    eax,0x2
c0009860:	01 d0                	add    eax,edx
c0009862:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009869:	01 d0                	add    eax,edx
c000986b:	c1 e0 04             	shl    eax,0x4
c000986e:	89 c2                	mov    edx,eax
c0009870:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009873:	01 c2                	add    edx,eax
c0009875:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c0009879:	0f 96 c0             	setbe  al
c000987c:	0f b6 c0             	movzx  eax,al
c000987f:	01 d0                	add    eax,edx
c0009881:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0009884:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0009887:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000988a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000988e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0009891:	83 c0 01             	add    eax,0x1
c0009894:	88 c2                	mov    dl,al
c0009896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009899:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000989c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000989f:	88 c2                	mov    dl,al
c00098a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a4:	88 10                	mov    BYTE PTR [eax],dl
c00098a6:	90                   	nop
c00098a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098aa:	c9                   	leave  
c00098ab:	c2 04 00             	ret    0x4

c00098ae <Clock::timeInDatetimeLocal()>:
c00098ae:	55                   	push   ebp
c00098af:	89 e5                	mov    ebp,esp
c00098b1:	83 ec 08             	sub    esp,0x8
c00098b4:	83 ec 0c             	sub    esp,0xc
c00098b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00098ba:	e8 23 f8 ff ff       	call   c00090e2 <Clock::timeInSecondsLocal()>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00098c5:	83 ec 04             	sub    esp,0x4
c00098c8:	52                   	push   edx
c00098c9:	50                   	push   eax
c00098ca:	51                   	push   ecx
c00098cb:	e8 22 fd ff ff       	call   c00095f2 <KeSecondsToDatetime(unsigned long long)>
c00098d0:	83 c4 0c             	add    esp,0xc
c00098d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098d6:	c9                   	leave  
c00098d7:	c2 04 00             	ret    0x4

c00098da <Device::hibernate()>:
c00098da:	c3                   	ret    
c00098db:	90                   	nop

c00098dc <Device::wake()>:
c00098dc:	c3                   	ret    
c00098dd:	90                   	nop

c00098de <Device::detect()>:
c00098de:	c3                   	ret    
c00098df:	90                   	nop

c00098e0 <Device::disableLegacy()>:
c00098e0:	c3                   	ret    
c00098e1:	90                   	nop

c00098e2 <Device::powerSaving(PowerSavingLevel)>:
c00098e2:	c3                   	ret    
c00098e3:	90                   	nop

c00098e4 <DriverlessDevice::close(int, int, void*)>:
c00098e4:	31 c0                	xor    eax,eax
c00098e6:	c3                   	ret    
c00098e7:	90                   	nop

c00098e8 <DriverlessDevice::detect()>:
c00098e8:	c3                   	ret    
c00098e9:	90                   	nop

c00098ea <DriverlessDevice::open(int, int, void*)>:
c00098ea:	83 ec 18             	sub    esp,0x18
c00098ed:	68 8c 34 02 c0       	push   0xc002348c
c00098f2:	e8 1b 67 00 00       	call   c0010012 <KePanic(char const*)>
c00098f7:	83 c8 ff             	or     eax,0xffffffff
c00098fa:	83 c4 1c             	add    esp,0x1c
c00098fd:	c3                   	ret    

c00098fe <Device::~Device()>:
c00098fe:	ba 30 35 02 c0       	mov    edx,0xc0023530
c0009903:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009907:	89 10                	mov    DWORD PTR [eax],edx
c0009909:	90                   	nop
c000990a:	c3                   	ret    
c000990b:	90                   	nop

c000990c <Device::~Device()>:
c000990c:	83 ec 0c             	sub    esp,0xc
c000990f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009913:	e8 e6 ff ff ff       	call   c00098fe <Device::~Device()>
c0009918:	83 c4 04             	add    esp,0x4
c000991b:	83 ec 08             	sub    esp,0x8
c000991e:	68 58 01 00 00       	push   0x158
c0009923:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009927:	e8 27 3a 00 00       	call   c000d353 <operator delete(void*, unsigned long)>
c000992c:	83 c4 10             	add    esp,0x10
c000992f:	83 c4 0c             	add    esp,0xc
c0009932:	c3                   	ret    
c0009933:	90                   	nop

c0009934 <Device::findAndLoadDriver()>:
c0009934:	c7 44 24 04 aa 34 02 c0 	mov    DWORD PTR [esp+0x4],0xc00234aa
c000993c:	e9 23 d6 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c0009941:	90                   	nop

c0009942 <Device::preOpenPCI(PCIDeviceInfo)>:
c0009942:	57                   	push   edi
c0009943:	b9 09 00 00 00       	mov    ecx,0x9
c0009948:	56                   	push   esi
c0009949:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000994d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0009951:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000995b:	81 c7 18 01 00 00    	add    edi,0x118
c0009961:	fc                   	cld    
c0009962:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0009964:	5e                   	pop    esi
c0009965:	5f                   	pop    edi
c0009966:	c3                   	ret    
c0009967:	90                   	nop

c0009968 <Device::preOpenACPI(void*, char*, char*)>:
c0009968:	57                   	push   edi
c0009969:	b9 1e 00 00 00       	mov    ecx,0x1e
c000996e:	56                   	push   esi
c000996f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009973:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009977:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0009981:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0009987:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000998d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009991:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009993:	b9 0e 00 00 00       	mov    ecx,0xe
c0009998:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000999e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00099a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099a4:	5e                   	pop    esi
c00099a5:	5f                   	pop    edi
c00099a6:	c3                   	ret    
c00099a7:	90                   	nop

c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00099a8:	53                   	push   ebx
c00099a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00099b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00099b9:	0f b6 c0             	movzx  eax,al
c00099bc:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00099c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099c8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099cc:	5b                   	pop    ebx
c00099cd:	e9 15 0c 01 00       	jmp    c001a5e7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c00099d2 <Device::getParent()>:
c00099d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099d6:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c00099dc:	c3                   	ret    
c00099dd:	90                   	nop

c00099de <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099e6:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00099eb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099f7:	e9 4d 0d 01 00       	jmp    c001a749 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c00099fc <Device::addChild(Device*)>:
c00099fc:	53                   	push   ebx
c00099fd:	83 ec 08             	sub    esp,0x8
c0009a00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a08:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a0e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a14:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a16:	85 d2                	test   edx,edx
c0009a18:	74 04                	je     c0009a1e <Device::addChild(Device*)+0x22>
c0009a1a:	89 d3                	mov    ebx,edx
c0009a1c:	eb f6                	jmp    c0009a14 <Device::addChild(Device*)+0x18>
c0009a1e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a21:	83 ec 0c             	sub    esp,0xc
c0009a24:	6a 08                	push   0x8
c0009a26:	e8 a0 62 00 00       	call   c000fccb <malloc>
c0009a2b:	89 03                	mov    DWORD PTR [ebx],eax
c0009a2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a3a:	83 c4 18             	add    esp,0x18
c0009a3d:	5b                   	pop    ebx
c0009a3e:	c3                   	ret    
c0009a3f:	90                   	nop

c0009a40 <Device::removeAllChildren()>:
c0009a40:	56                   	push   esi
c0009a41:	53                   	push   ebx
c0009a42:	52                   	push   edx
c0009a43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a47:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009a4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a50:	74 17                	je     c0009a69 <Device::removeAllChildren()+0x29>
c0009a52:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009a55:	85 c0                	test   eax,eax
c0009a57:	74 0c                	je     c0009a65 <Device::removeAllChildren()+0x25>
c0009a59:	83 ec 0c             	sub    esp,0xc
c0009a5c:	8b 10                	mov    edx,DWORD PTR [eax]
c0009a5e:	50                   	push   eax
c0009a5f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009a62:	83 c4 10             	add    esp,0x10
c0009a65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a67:	eb e4                	jmp    c0009a4d <Device::removeAllChildren()+0xd>
c0009a69:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a75:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a82:	58                   	pop    eax
c0009a83:	5b                   	pop    ebx
c0009a84:	5e                   	pop    esi
c0009a85:	c3                   	ret    

c0009a86 <Device::hibernateAll()>:
c0009a86:	53                   	push   ebx
c0009a87:	83 ec 14             	sub    esp,0x14
c0009a8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a90:	53                   	push   ebx
c0009a91:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009a94:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a9a:	83 c4 10             	add    esp,0x10
c0009a9d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009aa0:	74 0f                	je     c0009ab1 <Device::hibernateAll()+0x2b>
c0009aa2:	83 ec 0c             	sub    esp,0xc
c0009aa5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009aa8:	e8 d9 ff ff ff       	call   c0009a86 <Device::hibernateAll()>
c0009aad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009aaf:	eb e9                	jmp    c0009a9a <Device::hibernateAll()+0x14>
c0009ab1:	83 c4 08             	add    esp,0x8
c0009ab4:	5b                   	pop    ebx
c0009ab5:	c3                   	ret    

c0009ab6 <Device::wakeAll()>:
c0009ab6:	53                   	push   ebx
c0009ab7:	83 ec 14             	sub    esp,0x14
c0009aba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009abe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009ac0:	53                   	push   ebx
c0009ac1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009ac4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009aca:	83 c4 10             	add    esp,0x10
c0009acd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009ad0:	74 0f                	je     c0009ae1 <Device::wakeAll()+0x2b>
c0009ad2:	83 ec 0c             	sub    esp,0xc
c0009ad5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ad8:	e8 d9 ff ff ff       	call   c0009ab6 <Device::wakeAll()>
c0009add:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009adf:	eb e9                	jmp    c0009aca <Device::wakeAll()+0x14>
c0009ae1:	83 c4 08             	add    esp,0x8
c0009ae4:	5b                   	pop    ebx
c0009ae5:	c3                   	ret    

c0009ae6 <Device::detectAll()>:
c0009ae6:	53                   	push   ebx
c0009ae7:	83 ec 14             	sub    esp,0x14
c0009aea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009af0:	53                   	push   ebx
c0009af1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009af4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b00:	74 0f                	je     c0009b11 <Device::detectAll()+0x2b>
c0009b02:	83 ec 0c             	sub    esp,0xc
c0009b05:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b08:	e8 d9 ff ff ff       	call   c0009ae6 <Device::detectAll()>
c0009b0d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b0f:	eb e9                	jmp    c0009afa <Device::detectAll()+0x14>
c0009b11:	83 c4 08             	add    esp,0x8
c0009b14:	5b                   	pop    ebx
c0009b15:	c3                   	ret    

c0009b16 <Device::disableLegacyAll()>:
c0009b16:	c3                   	ret    
c0009b17:	90                   	nop

c0009b18 <Device::loadDriversForAll()>:
c0009b18:	c3                   	ret    
c0009b19:	90                   	nop

c0009b1a <Device::powerSavingAll(PowerSavingLevel)>:
c0009b1a:	56                   	push   esi
c0009b1b:	53                   	push   ebx
c0009b1c:	83 ec 0c             	sub    esp,0xc
c0009b1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b27:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b29:	56                   	push   esi
c0009b2a:	53                   	push   ebx
c0009b2b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b2e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b3a:	74 0f                	je     c0009b4b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b3c:	52                   	push   edx
c0009b3d:	52                   	push   edx
c0009b3e:	56                   	push   esi
c0009b3f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b42:	e8 d3 ff ff ff       	call   c0009b1a <Device::powerSavingAll(PowerSavingLevel)>
c0009b47:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b49:	eb e9                	jmp    c0009b34 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009b4b:	58                   	pop    eax
c0009b4c:	5b                   	pop    ebx
c0009b4d:	5e                   	pop    esi
c0009b4e:	c3                   	ret    
c0009b4f:	90                   	nop

c0009b50 <Device::setName(char const*)>:
c0009b50:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009b58:	e9 e3 6a ff ff       	jmp    c0000640 <strcpy>
c0009b5d:	90                   	nop

c0009b5e <Device::Device(char const*)>:
c0009b5e:	83 ec 1c             	sub    esp,0x1c
c0009b61:	ba 30 35 02 c0       	mov    edx,0xc0023530
c0009b66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b6a:	89 10                	mov    DWORD PTR [eax],edx
c0009b6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b70:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009b7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b7e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009b88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b8c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009b96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b9a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009ba4:	83 ec 08             	sub    esp,0x8
c0009ba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009baf:	e8 9c ff ff ff       	call   c0009b50 <Device::setName(char const*)>
c0009bb4:	83 c4 10             	add    esp,0x10
c0009bb7:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009bbf:	83 ec 0c             	sub    esp,0xc
c0009bc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009bc6:	e8 00 61 00 00       	call   c000fccb <malloc>
c0009bcb:	83 c4 10             	add    esp,0x10
c0009bce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bd4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009bdb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009bdf:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009be5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009bef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009bff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c0a:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c15:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c20:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c2e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c3c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c4a:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009c54:	90                   	nop
c0009c55:	83 c4 1c             	add    esp,0x1c
c0009c58:	c3                   	ret    
c0009c59:	90                   	nop

c0009c5a <Device::getName()>:
c0009c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5e:	05 d0 00 00 00       	add    eax,0xd0
c0009c63:	c3                   	ret    

c0009c64 <Device::closeAll()>:
c0009c64:	53                   	push   ebx
c0009c65:	83 ec 08             	sub    esp,0x8
c0009c68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c6c:	53                   	push   ebx
c0009c6d:	e8 e8 ff ff ff       	call   c0009c5a <Device::getName()>
c0009c72:	52                   	push   edx
c0009c73:	50                   	push   eax
c0009c74:	68 e4 34 02 c0       	push   0xc00234e4
c0009c79:	e8 e6 d2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0009c7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c80:	6a 00                	push   0x0
c0009c82:	6a 00                	push   0x0
c0009c84:	6a 00                	push   0x0
c0009c86:	53                   	push   ebx
c0009c87:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009c8a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009c90:	83 c4 20             	add    esp,0x20
c0009c93:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009c96:	74 12                	je     c0009caa <Device::closeAll()+0x46>
c0009c98:	83 ec 0c             	sub    esp,0xc
c0009c9b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009c9e:	e8 c1 ff ff ff       	call   c0009c64 <Device::closeAll()>
c0009ca3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ca5:	83 c4 10             	add    esp,0x10
c0009ca8:	eb e9                	jmp    c0009c93 <Device::closeAll()+0x2f>
c0009caa:	83 c4 08             	add    esp,0x8
c0009cad:	5b                   	pop    ebx
c0009cae:	c3                   	ret    
c0009caf:	90                   	nop

c0009cb0 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009cb0:	83 ec 0c             	sub    esp,0xc
c0009cb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb7:	83 ec 08             	sub    esp,0x8
c0009cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cbe:	50                   	push   eax
c0009cbf:	e8 9a fe ff ff       	call   c0009b5e <Device::Device(char const*)>
c0009cc4:	83 c4 10             	add    esp,0x10
c0009cc7:	ba 5c 35 02 c0       	mov    edx,0xc002355c
c0009ccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd0:	89 10                	mov    DWORD PTR [eax],edx
c0009cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd6:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009ce0:	90                   	nop
c0009ce1:	83 c4 0c             	add    esp,0xc
c0009ce4:	c3                   	ret    
c0009ce5:	90                   	nop

c0009ce6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009ce6:	57                   	push   edi
c0009ce7:	56                   	push   esi
c0009ce8:	53                   	push   ebx
c0009ce9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009ced:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009cf1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009cf5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009cfb:	75 0c                	jne    c0009d09 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009cfd:	52                   	push   edx
c0009cfe:	52                   	push   edx
c0009cff:	53                   	push   ebx
c0009d00:	56                   	push   esi
c0009d01:	e8 56 7e 01 00       	call   c0021b5c <LinkedList<Device>::addElement(Device*)>
c0009d06:	83 c4 10             	add    esp,0x10
c0009d09:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d0f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d12:	74 12                	je     c0009d26 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d14:	50                   	push   eax
c0009d15:	57                   	push   edi
c0009d16:	56                   	push   esi
c0009d17:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d1a:	e8 c7 ff ff ff       	call   c0009ce6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d1f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d21:	83 c4 10             	add    esp,0x10
c0009d24:	eb e9                	jmp    c0009d0f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d26:	5b                   	pop    ebx
c0009d27:	5e                   	pop    esi
c0009d28:	5f                   	pop    edi
c0009d29:	c3                   	ret    

c0009d2a <getDevicesOfType(DeviceType)>:
c0009d2a:	53                   	push   ebx
c0009d2b:	83 ec 14             	sub    esp,0x14
c0009d2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d32:	53                   	push   ebx
c0009d33:	e8 00 7f 01 00       	call   c0021c38 <LinkedList<Device>::LinkedList()>
c0009d38:	83 c4 0c             	add    esp,0xc
c0009d3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d3f:	53                   	push   ebx
c0009d40:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c0009d46:	e8 9b ff ff ff       	call   c0009ce6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d4b:	89 d8                	mov    eax,ebx
c0009d4d:	83 c4 18             	add    esp,0x18
c0009d50:	5b                   	pop    ebx
c0009d51:	c2 04 00             	ret    0x4

c0009d54 <HardDiskController::HardDiskController(char const*)>:
c0009d54:	83 ec 0c             	sub    esp,0xc
c0009d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d5b:	83 ec 08             	sub    esp,0x8
c0009d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d62:	50                   	push   eax
c0009d63:	e8 f6 fd ff ff       	call   c0009b5e <Device::Device(char const*)>
c0009d68:	83 c4 10             	add    esp,0x10
c0009d6b:	ba 88 35 02 c0       	mov    edx,0xc0023588
c0009d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d74:	89 10                	mov    DWORD PTR [eax],edx
c0009d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d7a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009d84:	90                   	nop
c0009d85:	83 c4 0c             	add    esp,0xc
c0009d88:	c3                   	ret    
c0009d89:	90                   	nop
c0009d8a:	66 90                	xchg   ax,ax

c0009d8c <HardDiskController::~HardDiskController()>:
c0009d8c:	83 ec 0c             	sub    esp,0xc
c0009d8f:	ba 88 35 02 c0       	mov    edx,0xc0023588
c0009d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d98:	89 10                	mov    DWORD PTR [eax],edx
c0009d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d9e:	83 ec 0c             	sub    esp,0xc
c0009da1:	50                   	push   eax
c0009da2:	e8 57 fb ff ff       	call   c00098fe <Device::~Device()>
c0009da7:	83 c4 10             	add    esp,0x10
c0009daa:	90                   	nop
c0009dab:	83 c4 0c             	add    esp,0xc
c0009dae:	c3                   	ret    
c0009daf:	90                   	nop

c0009db0 <HardDiskController::~HardDiskController()>:
c0009db0:	83 ec 0c             	sub    esp,0xc
c0009db3:	83 ec 0c             	sub    esp,0xc
c0009db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dba:	e8 cd ff ff ff       	call   c0009d8c <HardDiskController::~HardDiskController()>
c0009dbf:	83 c4 10             	add    esp,0x10
c0009dc2:	83 ec 08             	sub    esp,0x8
c0009dc5:	68 58 01 00 00       	push   0x158
c0009dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dce:	e8 80 35 00 00       	call   c000d353 <operator delete(void*, unsigned long)>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	83 c4 0c             	add    esp,0xc
c0009dd9:	c3                   	ret    

c0009dda <PhysicalDisk::eject()>:
c0009dda:	83 c8 ff             	or     eax,0xffffffff
c0009ddd:	c3                   	ret    

c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009dde:	83 ec 0c             	sub    esp,0xc
c0009de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009de5:	83 ec 08             	sub    esp,0x8
c0009de8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dec:	50                   	push   eax
c0009ded:	e8 6c fd ff ff       	call   c0009b5e <Device::Device(char const*)>
c0009df2:	83 c4 10             	add    esp,0x10
c0009df5:	ba b4 35 02 c0       	mov    edx,0xc00235b4
c0009dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dfe:	89 10                	mov    DWORD PTR [eax],edx
c0009e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e04:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e0f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e1a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e2c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e36:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e40:	90                   	nop
c0009e41:	83 c4 0c             	add    esp,0xc
c0009e44:	c3                   	ret    
c0009e45:	90                   	nop

c0009e46 <PhysicalDisk::startCache()>:
c0009e46:	56                   	push   esi
c0009e47:	53                   	push   ebx
c0009e48:	83 ec 10             	sub    esp,0x10
c0009e4b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e4f:	6a 44                	push   0x44
c0009e51:	e8 75 5e 00 00       	call   c000fccb <malloc>
c0009e56:	89 c6                	mov    esi,eax
c0009e58:	58                   	pop    eax
c0009e59:	5a                   	pop    edx
c0009e5a:	53                   	push   ebx
c0009e5b:	56                   	push   esi
c0009e5c:	e8 07 14 00 00       	call   c000b268 <VCache::VCache(PhysicalDisk*)>
c0009e61:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009e67:	83 c4 14             	add    esp,0x14
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	c3                   	ret    
c0009e6d:	90                   	nop

c0009e6e <PhysicalDisk::~PhysicalDisk()>:
c0009e6e:	83 ec 0c             	sub    esp,0xc
c0009e71:	ba b4 35 02 c0       	mov    edx,0xc00235b4
c0009e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e7a:	89 10                	mov    DWORD PTR [eax],edx
c0009e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e80:	83 ec 0c             	sub    esp,0xc
c0009e83:	50                   	push   eax
c0009e84:	e8 75 fa ff ff       	call   c00098fe <Device::~Device()>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	90                   	nop
c0009e8d:	83 c4 0c             	add    esp,0xc
c0009e90:	c3                   	ret    
c0009e91:	90                   	nop

c0009e92 <PhysicalDisk::~PhysicalDisk()>:
c0009e92:	83 ec 0c             	sub    esp,0xc
c0009e95:	83 ec 0c             	sub    esp,0xc
c0009e98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e9c:	e8 cd ff ff ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	83 ec 08             	sub    esp,0x8
c0009ea7:	68 6c 01 00 00       	push   0x16c
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 9e 34 00 00       	call   c000d353 <operator delete(void*, unsigned long)>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	83 c4 0c             	add    esp,0xc
c0009ebb:	c3                   	ret    

c0009ebc <startGUI(void*)>:
c0009ebc:	55                   	push   ebp
c0009ebd:	89 e5                	mov    ebp,esp
c0009ebf:	53                   	push   ebx
c0009ec0:	83 ec 04             	sub    esp,0x4
c0009ec3:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009ecb:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009ed0:	85 c0                	test   eax,eax
c0009ed2:	75 01                	jne    c0009ed5 <startGUI(void*)+0x19>
c0009ed4:	fb                   	sti    
c0009ed5:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009edb:	83 ec 08             	sub    esp,0x8
c0009ede:	6a 01                	push   0x1
c0009ee0:	68 e4 35 02 c0       	push   0xc00235e4
c0009ee5:	e8 09 c5 00 00       	call   c00163f3 <Thr::loadDLL(char const*, bool)>
c0009eea:	83 c4 10             	add    esp,0x10
c0009eed:	83 ec 08             	sub    esp,0x8
c0009ef0:	53                   	push   ebx
c0009ef1:	50                   	push   eax
c0009ef2:	e8 4e c7 00 00       	call   c0016645 <Thr::executeDLL(unsigned long, void*)>
c0009ef7:	83 c4 10             	add    esp,0x10
c0009efa:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009f00:	83 ec 08             	sub    esp,0x8
c0009f03:	6a 01                	push   0x1
c0009f05:	68 fe 35 02 c0       	push   0xc00235fe
c0009f0a:	e8 e4 c4 00 00       	call   c00163f3 <Thr::loadDLL(char const*, bool)>
c0009f0f:	83 c4 10             	add    esp,0x10
c0009f12:	83 ec 08             	sub    esp,0x8
c0009f15:	53                   	push   ebx
c0009f16:	50                   	push   eax
c0009f17:	e8 29 c7 00 00       	call   c0016645 <Thr::executeDLL(unsigned long, void*)>
c0009f1c:	83 c4 10             	add    esp,0x10
c0009f1f:	eb fe                	jmp    c0009f1f <startGUI(void*)+0x63>

c0009f21 <startGUIVESA(void*)>:
c0009f21:	55                   	push   ebp
c0009f22:	89 e5                	mov    ebp,esp
c0009f24:	53                   	push   ebx
c0009f25:	83 ec 04             	sub    esp,0x4
c0009f28:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009f30:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009f35:	85 c0                	test   eax,eax
c0009f37:	75 01                	jne    c0009f3a <startGUIVESA(void*)+0x19>
c0009f39:	fb                   	sti    
c0009f3a:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009f40:	83 ec 08             	sub    esp,0x8
c0009f43:	6a 01                	push   0x1
c0009f45:	68 1c 36 02 c0       	push   0xc002361c
c0009f4a:	e8 a4 c4 00 00       	call   c00163f3 <Thr::loadDLL(char const*, bool)>
c0009f4f:	83 c4 10             	add    esp,0x10
c0009f52:	83 ec 08             	sub    esp,0x8
c0009f55:	53                   	push   ebx
c0009f56:	50                   	push   eax
c0009f57:	e8 e9 c6 00 00       	call   c0016645 <Thr::executeDLL(unsigned long, void*)>
c0009f5c:	83 c4 10             	add    esp,0x10
c0009f5f:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009f65:	83 ec 08             	sub    esp,0x8
c0009f68:	6a 01                	push   0x1
c0009f6a:	68 fe 35 02 c0       	push   0xc00235fe
c0009f6f:	e8 7f c4 00 00       	call   c00163f3 <Thr::loadDLL(char const*, bool)>
c0009f74:	83 c4 10             	add    esp,0x10
c0009f77:	83 ec 08             	sub    esp,0x8
c0009f7a:	53                   	push   ebx
c0009f7b:	50                   	push   eax
c0009f7c:	e8 c4 c6 00 00       	call   c0016645 <Thr::executeDLL(unsigned long, void*)>
c0009f81:	83 c4 10             	add    esp,0x10
c0009f84:	eb fe                	jmp    c0009f84 <startGUIVESA(void*)+0x63>

c0009f86 <sendKeyToTerminal(unsigned char)>:
c0009f86:	55                   	push   ebp
c0009f87:	89 e5                	mov    ebp,esp
c0009f89:	83 ec 28             	sub    esp,0x28
c0009f8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f8f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009f92:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0009f97:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009f9b:	83 ec 08             	sub    esp,0x8
c0009f9e:	52                   	push   edx
c0009f9f:	50                   	push   eax
c0009fa0:	e8 6d 8c 00 00       	call   c0012c12 <VgaText::receiveKey(unsigned char)>
c0009fa5:	83 c4 10             	add    esp,0x10
c0009fa8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fac:	83 f8 0a             	cmp    eax,0xa
c0009faf:	74 16                	je     c0009fc7 <sendKeyToTerminal(unsigned char)+0x41>
c0009fb1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fb5:	83 f8 03             	cmp    eax,0x3
c0009fb8:	74 0d                	je     c0009fc7 <sendKeyToTerminal(unsigned char)+0x41>
c0009fba:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fbe:	83 f8 1c             	cmp    eax,0x1c
c0009fc1:	0f 85 92 00 00 00    	jne    c000a059 <sendKeyToTerminal(unsigned char)+0xd3>
c0009fc7:	fa                   	cli    
c0009fc8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009fcd:	83 c0 01             	add    eax,0x1
c0009fd0:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0009fd5:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0009fda:	83 c0 01             	add    eax,0x1
c0009fdd:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0009fe2:	a1 80 b6 02 c0       	mov    eax,ds:0xc002b680
c0009fe7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009fea:	c7 05 80 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b680,0x0
c0009ff4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009ff8:	74 1f                	je     c000a019 <sendKeyToTerminal(unsigned char)+0x93>
c0009ffa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009ffd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a000:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a003:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a006:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a009:	83 ec 0c             	sub    esp,0xc
c000a00c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a00f:	e8 d0 d2 00 00       	call   c00172e4 <unblockTask(ThreadControlBlock*)>
c000a014:	83 c4 10             	add    esp,0x10
c000a017:	eb db                	jmp    c0009ff4 <sendKeyToTerminal(unsigned char)+0x6e>
c000a019:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000a01e:	83 e8 01             	sub    eax,0x1
c000a021:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c000a026:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000a02b:	85 c0                	test   eax,eax
c000a02d:	75 18                	jne    c000a047 <sendKeyToTerminal(unsigned char)+0xc1>
c000a02f:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c000a034:	85 c0                	test   eax,eax
c000a036:	74 0f                	je     c000a047 <sendKeyToTerminal(unsigned char)+0xc1>
c000a038:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c000a042:	e8 41 cf 00 00       	call   c0016f88 <schedule()>
c000a047:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000a04f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a054:	85 c0                	test   eax,eax
c000a056:	75 01                	jne    c000a059 <sendKeyToTerminal(unsigned char)+0xd3>
c000a058:	fb                   	sti    
c000a059:	90                   	nop
c000a05a:	c9                   	leave  
c000a05b:	c3                   	ret    

c000a05c <sendKeyboardToken(KeyboardToken)>:
c000a05c:	55                   	push   ebp
c000a05d:	89 e5                	mov    ebp,esp
c000a05f:	83 ec 18             	sub    esp,0x18
c000a062:	e8 dc 68 00 00       	call   c0010943 <KeUserIOReceived()>
c000a067:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a06a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a06d:	0f b7 c0             	movzx  eax,ax
c000a070:	83 f2 01             	xor    edx,0x1
c000a073:	88 90 a0 b6 02 c0    	mov    BYTE PTR [eax-0x3ffd4960],dl
c000a079:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a07e:	85 c0                	test   eax,eax
c000a080:	74 24                	je     c000a0a6 <sendKeyboardToken(KeyboardToken)+0x4a>
c000a082:	8b 0d 88 b6 02 c0    	mov    ecx,DWORD PTR ds:0xc002b688
c000a088:	83 ec 04             	sub    esp,0x4
c000a08b:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a090:	83 ec 08             	sub    esp,0x8
c000a093:	89 e2                	mov    edx,esp
c000a095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a098:	89 02                	mov    DWORD PTR [edx],eax
c000a09a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a09d:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a0a1:	ff d1                	call   ecx
c000a0a3:	83 c4 10             	add    esp,0x10
c000a0a6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a0aa:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a0ad:	0f b6 c0             	movzx  eax,al
c000a0b0:	85 c0                	test   eax,eax
c000a0b2:	0f 84 da 00 00 00    	je     c000a192 <sendKeyboardToken(KeyboardToken)+0x136>
c000a0b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0bb:	0f b7 c0             	movzx  eax,ax
c000a0be:	3d 18 03 00 00       	cmp    eax,0x318
c000a0c3:	75 06                	jne    c000a0cb <sendKeyboardToken(KeyboardToken)+0x6f>
c000a0c5:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a0cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ce:	0f b7 c0             	movzx  eax,ax
c000a0d1:	3d 19 03 00 00       	cmp    eax,0x319
c000a0d6:	75 06                	jne    c000a0de <sendKeyboardToken(KeyboardToken)+0x82>
c000a0d8:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a0de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0e1:	0f b7 c0             	movzx  eax,ax
c000a0e4:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a0e9:	75 06                	jne    c000a0f1 <sendKeyboardToken(KeyboardToken)+0x95>
c000a0eb:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a0f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f4:	0f b7 c0             	movzx  eax,ax
c000a0f7:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a0fc:	75 06                	jne    c000a104 <sendKeyboardToken(KeyboardToken)+0xa8>
c000a0fe:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a107:	0f b7 c0             	movzx  eax,ax
c000a10a:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a10f:	75 06                	jne    c000a117 <sendKeyboardToken(KeyboardToken)+0xbb>
c000a111:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a11a:	0f b7 c0             	movzx  eax,ax
c000a11d:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a122:	75 06                	jne    c000a12a <sendKeyboardToken(KeyboardToken)+0xce>
c000a124:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a12a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a12d:	0f b7 c0             	movzx  eax,ax
c000a130:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a135:	75 06                	jne    c000a13d <sendKeyboardToken(KeyboardToken)+0xe1>
c000a137:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a13d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a140:	0f b7 c0             	movzx  eax,ax
c000a143:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a148:	75 06                	jne    c000a150 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a14a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a153:	0f b7 c0             	movzx  eax,ax
c000a156:	3d 20 03 00 00       	cmp    eax,0x320
c000a15b:	75 06                	jne    c000a163 <sendKeyboardToken(KeyboardToken)+0x107>
c000a15d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a166:	0f b7 c0             	movzx  eax,ax
c000a169:	3d 21 03 00 00       	cmp    eax,0x321
c000a16e:	75 06                	jne    c000a176 <sendKeyboardToken(KeyboardToken)+0x11a>
c000a170:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a176:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a179:	0f b7 c0             	movzx  eax,ax
c000a17c:	3d 22 03 00 00       	cmp    eax,0x322
c000a181:	0f 85 f1 00 00 00    	jne    c000a278 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a187:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a18d:	e9 e6 00 00 00       	jmp    c000a278 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a195:	0f b7 c0             	movzx  eax,ax
c000a198:	3d 18 03 00 00       	cmp    eax,0x318
c000a19d:	75 0a                	jne    c000a1a9 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a19f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a1a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ac:	0f b7 c0             	movzx  eax,ax
c000a1af:	3d 19 03 00 00       	cmp    eax,0x319
c000a1b4:	75 0a                	jne    c000a1c0 <sendKeyboardToken(KeyboardToken)+0x164>
c000a1b6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a1bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1c3:	0f b7 c0             	movzx  eax,ax
c000a1c6:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a1cb:	75 0a                	jne    c000a1d7 <sendKeyboardToken(KeyboardToken)+0x17b>
c000a1cd:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a1d3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1da:	0f b7 c0             	movzx  eax,ax
c000a1dd:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a1e2:	75 0a                	jne    c000a1ee <sendKeyboardToken(KeyboardToken)+0x192>
c000a1e4:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a1ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1f1:	0f b7 c0             	movzx  eax,ax
c000a1f4:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a1f9:	75 0a                	jne    c000a205 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a1fb:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a201:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a208:	0f b7 c0             	movzx  eax,ax
c000a20b:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a210:	75 0a                	jne    c000a21c <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a212:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a218:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a21c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a21f:	0f b7 c0             	movzx  eax,ax
c000a222:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a227:	75 0a                	jne    c000a233 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a229:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a22f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a233:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a236:	0f b7 c0             	movzx  eax,ax
c000a239:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a23e:	75 0a                	jne    c000a24a <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a240:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a246:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a24a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a24d:	0f b7 c0             	movzx  eax,ax
c000a250:	3d 20 03 00 00       	cmp    eax,0x320
c000a255:	75 0a                	jne    c000a261 <sendKeyboardToken(KeyboardToken)+0x205>
c000a257:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a25d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a264:	0f b7 c0             	movzx  eax,ax
c000a267:	3d 21 03 00 00       	cmp    eax,0x321
c000a26c:	75 0a                	jne    c000a278 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a26e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a274:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a27b:	0f b7 c0             	movzx  eax,ax
c000a27e:	3d 00 02 00 00       	cmp    eax,0x200
c000a283:	75 2f                	jne    c000a2b4 <sendKeyboardToken(KeyboardToken)+0x258>
c000a285:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a28a:	83 f0 01             	xor    eax,0x1
c000a28d:	0f b6 c0             	movzx  eax,al
c000a290:	85 c0                	test   eax,eax
c000a292:	74 20                	je     c000a2b4 <sendKeyboardToken(KeyboardToken)+0x258>
c000a294:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000a299:	6a 01                	push   0x1
c000a29b:	6a 00                	push   0x0
c000a29d:	68 bc 9e 00 c0       	push   0xc0009ebc
c000a2a2:	50                   	push   eax
c000a2a3:	e8 48 ca 00 00       	call   c0016cf0 <Process::createThread(void (*)(void*), void*, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a2b2:	eb 3a                	jmp    c000a2ee <sendKeyboardToken(KeyboardToken)+0x292>
c000a2b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2b7:	0f b7 c0             	movzx  eax,ax
c000a2ba:	3d 01 02 00 00       	cmp    eax,0x201
c000a2bf:	75 2d                	jne    c000a2ee <sendKeyboardToken(KeyboardToken)+0x292>
c000a2c1:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a2c6:	83 f0 01             	xor    eax,0x1
c000a2c9:	0f b6 c0             	movzx  eax,al
c000a2cc:	85 c0                	test   eax,eax
c000a2ce:	74 1e                	je     c000a2ee <sendKeyboardToken(KeyboardToken)+0x292>
c000a2d0:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000a2d5:	6a 01                	push   0x1
c000a2d7:	6a 00                	push   0x0
c000a2d9:	68 21 9f 00 c0       	push   0xc0009f21
c000a2de:	50                   	push   eax
c000a2df:	e8 0c ca 00 00       	call   c0016cf0 <Process::createThread(void (*)(void*), void*, int)>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a2ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2f1:	0f b7 c0             	movzx  eax,ax
c000a2f4:	3d 25 03 00 00       	cmp    eax,0x325
c000a2f9:	75 06                	jne    c000a301 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a2fb:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a304:	0f b7 c0             	movzx  eax,ax
c000a307:	3d 24 03 00 00       	cmp    eax,0x324
c000a30c:	75 06                	jne    c000a314 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a30e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a317:	0f b7 c0             	movzx  eax,ax
c000a31a:	3d 23 03 00 00       	cmp    eax,0x323
c000a31f:	75 06                	jne    c000a327 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a321:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a32a:	0f b7 c0             	movzx  eax,ax
c000a32d:	3d 26 03 00 00       	cmp    eax,0x326
c000a332:	75 06                	jne    c000a33a <sendKeyboardToken(KeyboardToken)+0x2de>
c000a334:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a33a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a33d:	0f b7 c0             	movzx  eax,ax
c000a340:	3d 27 03 00 00       	cmp    eax,0x327
c000a345:	75 06                	jne    c000a34d <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a347:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a34d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a350:	0f b7 c0             	movzx  eax,ax
c000a353:	3d 22 03 00 00       	cmp    eax,0x322
c000a358:	75 06                	jne    c000a360 <sendKeyboardToken(KeyboardToken)+0x304>
c000a35a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a360:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a364:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a367:	83 f0 01             	xor    eax,0x1
c000a36a:	0f b6 c0             	movzx  eax,al
c000a36d:	85 c0                	test   eax,eax
c000a36f:	74 7c                	je     c000a3ed <sendKeyboardToken(KeyboardToken)+0x391>
c000a371:	a0 a1 b7 02 c0       	mov    al,ds:0xc002b7a1
c000a376:	0f b6 c0             	movzx  eax,al
c000a379:	85 c0                	test   eax,eax
c000a37b:	74 43                	je     c000a3c0 <sendKeyboardToken(KeyboardToken)+0x364>
c000a37d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a381:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a385:	85 c0                	test   eax,eax
c000a387:	74 2b                	je     c000a3b4 <sendKeyboardToken(KeyboardToken)+0x358>
c000a389:	8b 15 a4 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002baa4
c000a38f:	89 d0                	mov    eax,edx
c000a391:	c1 e0 02             	shl    eax,0x2
c000a394:	01 d0                	add    eax,edx
c000a396:	01 c0                	add    eax,eax
c000a398:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a39d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3a0:	0f b7 c0             	movzx  eax,ax
c000a3a3:	8d 50 d0             	lea    edx,[eax-0x30]
c000a3a6:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3ab:	01 d0                	add    eax,edx
c000a3ad:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a3b2:	eb 71                	jmp    c000a425 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3b4:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a3be:	eb 65                	jmp    c000a425 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3c0:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3c5:	85 c0                	test   eax,eax
c000a3c7:	74 18                	je     c000a3e1 <sendKeyboardToken(KeyboardToken)+0x385>
c000a3c9:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3ce:	0f b6 c0             	movzx  eax,al
c000a3d1:	83 ec 0c             	sub    esp,0xc
c000a3d4:	50                   	push   eax
c000a3d5:	e8 ac fb ff ff       	call   c0009f86 <sendKeyToTerminal(unsigned char)>
c000a3da:	83 c4 10             	add    esp,0x10
c000a3dd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3e1:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a3eb:	eb 38                	jmp    c000a425 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3f0:	0f b7 c0             	movzx  eax,ax
c000a3f3:	3d 01 01 00 00       	cmp    eax,0x101
c000a3f8:	75 2b                	jne    c000a425 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3fa:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3ff:	85 c0                	test   eax,eax
c000a401:	74 18                	je     c000a41b <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a403:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a408:	0f b6 c0             	movzx  eax,al
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	50                   	push   eax
c000a40f:	e8 72 fb ff ff       	call   c0009f86 <sendKeyToTerminal(unsigned char)>
c000a414:	83 c4 10             	add    esp,0x10
c000a417:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a41b:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a425:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a428:	83 f0 01             	xor    eax,0x1
c000a42b:	0f b6 c0             	movzx  eax,al
c000a42e:	85 c0                	test   eax,eax
c000a430:	74 5a                	je     c000a48c <sendKeyboardToken(KeyboardToken)+0x430>
c000a432:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a435:	83 f0 01             	xor    eax,0x1
c000a438:	0f b6 c0             	movzx  eax,al
c000a43b:	85 c0                	test   eax,eax
c000a43d:	74 4d                	je     c000a48c <sendKeyboardToken(KeyboardToken)+0x430>
c000a43f:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a444:	83 f0 01             	xor    eax,0x1
c000a447:	0f b6 c0             	movzx  eax,al
c000a44a:	85 c0                	test   eax,eax
c000a44c:	74 3e                	je     c000a48c <sendKeyboardToken(KeyboardToken)+0x430>
c000a44e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a451:	0f b7 c0             	movzx  eax,ax
c000a454:	83 f8 1f             	cmp    eax,0x1f
c000a457:	76 0b                	jbe    c000a464 <sendKeyboardToken(KeyboardToken)+0x408>
c000a459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a45c:	0f b7 c0             	movzx  eax,ax
c000a45f:	83 f8 7e             	cmp    eax,0x7e
c000a462:	76 16                	jbe    c000a47a <sendKeyboardToken(KeyboardToken)+0x41e>
c000a464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a467:	0f b7 c0             	movzx  eax,ax
c000a46a:	83 f8 0a             	cmp    eax,0xa
c000a46d:	74 0b                	je     c000a47a <sendKeyboardToken(KeyboardToken)+0x41e>
c000a46f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a472:	0f b7 c0             	movzx  eax,ax
c000a475:	83 f8 08             	cmp    eax,0x8
c000a478:	75 12                	jne    c000a48c <sendKeyboardToken(KeyboardToken)+0x430>
c000a47a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a47d:	0f b6 c0             	movzx  eax,al
c000a480:	83 ec 0c             	sub    esp,0xc
c000a483:	50                   	push   eax
c000a484:	e8 fd fa ff ff       	call   c0009f86 <sendKeyToTerminal(unsigned char)>
c000a489:	83 c4 10             	add    esp,0x10
c000a48c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a48f:	83 f0 01             	xor    eax,0x1
c000a492:	0f b6 c0             	movzx  eax,al
c000a495:	85 c0                	test   eax,eax
c000a497:	74 5d                	je     c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a499:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a49c:	83 f0 01             	xor    eax,0x1
c000a49f:	0f b6 c0             	movzx  eax,al
c000a4a2:	85 c0                	test   eax,eax
c000a4a4:	74 50                	je     c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4a6:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a4ab:	0f b6 c0             	movzx  eax,al
c000a4ae:	85 c0                	test   eax,eax
c000a4b0:	74 44                	je     c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4b5:	0f b7 c0             	movzx  eax,ax
c000a4b8:	83 f8 3f             	cmp    eax,0x3f
c000a4bb:	76 39                	jbe    c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4c0:	0f b7 c0             	movzx  eax,ax
c000a4c3:	83 f8 7f             	cmp    eax,0x7f
c000a4c6:	77 2e                	ja     c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4cb:	88 c2                	mov    dl,al
c000a4cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4d0:	0f b7 c0             	movzx  eax,ax
c000a4d3:	83 f8 5f             	cmp    eax,0x5f
c000a4d6:	76 04                	jbe    c000a4dc <sendKeyboardToken(KeyboardToken)+0x480>
c000a4d8:	b0 20                	mov    al,0x20
c000a4da:	eb 02                	jmp    c000a4de <sendKeyboardToken(KeyboardToken)+0x482>
c000a4dc:	b0 00                	mov    al,0x0
c000a4de:	89 d1                	mov    ecx,edx
c000a4e0:	29 c1                	sub    ecx,eax
c000a4e2:	89 c8                	mov    eax,ecx
c000a4e4:	83 e8 40             	sub    eax,0x40
c000a4e7:	0f b6 c0             	movzx  eax,al
c000a4ea:	83 ec 0c             	sub    esp,0xc
c000a4ed:	50                   	push   eax
c000a4ee:	e8 93 fa ff ff       	call   c0009f86 <sendKeyToTerminal(unsigned char)>
c000a4f3:	83 c4 10             	add    esp,0x10
c000a4f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4f9:	0f b7 c0             	movzx  eax,ax
c000a4fc:	3d 00 03 00 00       	cmp    eax,0x300
c000a501:	75 12                	jne    c000a515 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a503:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a506:	83 f0 01             	xor    eax,0x1
c000a509:	0f b6 c0             	movzx  eax,al
c000a50c:	85 c0                	test   eax,eax
c000a50e:	74 05                	je     c000a515 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a510:	e8 f2 7d 00 00       	call   c0012307 <doTerminalCycle()>
c000a515:	90                   	nop
c000a516:	c9                   	leave  
c000a517:	c3                   	ret    

c000a518 <clearInternalKeybuffer(VgaText*)>:
c000a518:	55                   	push   ebp
c000a519:	89 e5                	mov    ebp,esp
c000a51b:	83 ec 08             	sub    esp,0x8
c000a51e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a521:	05 02 01 00 00       	add    eax,0x102
c000a526:	83 ec 0c             	sub    esp,0xc
c000a529:	50                   	push   eax
c000a52a:	e8 41 60 ff ff       	call   c0000570 <strlen>
c000a52f:	83 c4 10             	add    esp,0x10
c000a532:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a535:	81 c2 02 01 00 00    	add    edx,0x102
c000a53b:	83 ec 04             	sub    esp,0x4
c000a53e:	50                   	push   eax
c000a53f:	6a 00                	push   0x0
c000a541:	52                   	push   edx
c000a542:	e8 a9 5f ff ff       	call   c00004f0 <memset>
c000a547:	83 c4 10             	add    esp,0x10
c000a54a:	90                   	nop
c000a54b:	c9                   	leave  
c000a54c:	c3                   	ret    

c000a54d <readKeyboard(VgaText*, char*, unsigned long)>:
c000a54d:	55                   	push   ebp
c000a54e:	89 e5                	mov    ebp,esp
c000a550:	83 ec 18             	sub    esp,0x18
c000a553:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a558:	85 c0                	test   eax,eax
c000a55a:	74 2a                	je     c000a586 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a55c:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a562:	8b 0d 88 b6 02 c0    	mov    ecx,DWORD PTR ds:0xc002b688
c000a568:	83 ec 04             	sub    esp,0x4
c000a56b:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a570:	83 ec 08             	sub    esp,0x8
c000a573:	89 e2                	mov    edx,esp
c000a575:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000a578:	89 02                	mov    DWORD PTR [edx],eax
c000a57a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a57d:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a581:	ff d1                	call   ecx
c000a583:	83 c4 10             	add    esp,0x10
c000a586:	fb                   	sti    
c000a587:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a58e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a592:	0f 84 08 01 00 00    	je     c000a6a0 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a59b:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5a1:	0f be c0             	movsx  eax,al
c000a5a4:	85 c0                	test   eax,eax
c000a5a6:	75 27                	jne    c000a5cf <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a5a8:	fa                   	cli    
c000a5a9:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a5ae:	83 c0 01             	add    eax,0x1
c000a5b1:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000a5b6:	e8 cd c9 00 00       	call   c0016f88 <schedule()>
c000a5bb:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000a5c3:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a5c8:	85 c0                	test   eax,eax
c000a5ca:	75 cc                	jne    c000a598 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5cc:	fb                   	sti    
c000a5cd:	eb c9                	jmp    c000a598 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a5d2:	8d 50 01             	lea    edx,[eax+0x1]
c000a5d5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a5d8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a5db:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a5e1:	88 10                	mov    BYTE PTR [eax],dl
c000a5e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5e6:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5ec:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a5ef:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a5f3:	83 f8 03             	cmp    eax,0x3
c000a5f6:	75 1e                	jne    c000a616 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a5f8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a5fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a602:	8b 80 80 07 00 00    	mov    eax,DWORD PTR [eax+0x780]
c000a608:	83 ec 08             	sub    esp,0x8
c000a60b:	6a 02                	push   0x2
c000a60d:	50                   	push   eax
c000a60e:	e8 6f 6b 00 00       	call   c0011182 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a613:	83 c4 10             	add    esp,0x10
c000a616:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a61a:	83 f8 1c             	cmp    eax,0x1c
c000a61d:	75 1e                	jne    c000a63d <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a61f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a624:	8b 00                	mov    eax,DWORD PTR [eax]
c000a626:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000a629:	8b 80 80 07 00 00    	mov    eax,DWORD PTR [eax+0x780]
c000a62f:	83 ec 08             	sub    esp,0x8
c000a632:	6a 09                	push   0x9
c000a634:	50                   	push   eax
c000a635:	e8 48 6b 00 00       	call   c0011182 <KeRaiseSignal(SigHandlerBlock*, int)>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a640:	05 02 01 00 00       	add    eax,0x102
c000a645:	83 ec 0c             	sub    esp,0xc
c000a648:	50                   	push   eax
c000a649:	e8 22 5f ff ff       	call   c0000570 <strlen>
c000a64e:	83 c4 10             	add    esp,0x10
c000a651:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a654:	81 c2 02 01 00 00    	add    edx,0x102
c000a65a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a65d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a660:	81 c2 02 01 00 00    	add    edx,0x102
c000a666:	83 ec 04             	sub    esp,0x4
c000a669:	50                   	push   eax
c000a66a:	51                   	push   ecx
c000a66b:	52                   	push   edx
c000a66c:	e8 5f 5d ff ff       	call   c00003d0 <memmove>
c000a671:	83 c4 10             	add    esp,0x10
c000a674:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a678:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a67c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a680:	83 f8 0a             	cmp    eax,0xa
c000a683:	74 16                	je     c000a69b <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a685:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a689:	83 f8 03             	cmp    eax,0x3
c000a68c:	74 0d                	je     c000a69b <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a68e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a692:	83 f8 1c             	cmp    eax,0x1c
c000a695:	0f 85 f3 fe ff ff    	jne    c000a58e <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a69b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a69e:	eb 03                	jmp    c000a6a3 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a6a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6a3:	c9                   	leave  
c000a6a4:	c3                   	ret    
c000a6a5:	90                   	nop

c000a6a6 <Keyboard::Keyboard(char const*)>:
c000a6a6:	83 ec 0c             	sub    esp,0xc
c000a6a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ad:	83 ec 08             	sub    esp,0x8
c000a6b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6b4:	50                   	push   eax
c000a6b5:	e8 a4 f4 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	ba 40 36 02 c0       	mov    edx,0xc0023640
c000a6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c6:	89 10                	mov    DWORD PTR [eax],edx
c000a6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6cc:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a6d6:	c6 05 84 b6 02 c0 01 	mov    BYTE PTR ds:0xc002b684,0x1
c000a6dd:	90                   	nop
c000a6de:	83 c4 0c             	add    esp,0xc
c000a6e1:	c3                   	ret    

c000a6e2 <Keyboard::~Keyboard()>:
c000a6e2:	83 ec 0c             	sub    esp,0xc
c000a6e5:	ba 40 36 02 c0       	mov    edx,0xc0023640
c000a6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ee:	89 10                	mov    DWORD PTR [eax],edx
c000a6f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6f4:	83 ec 0c             	sub    esp,0xc
c000a6f7:	50                   	push   eax
c000a6f8:	e8 01 f2 ff ff       	call   c00098fe <Device::~Device()>
c000a6fd:	83 c4 10             	add    esp,0x10
c000a700:	90                   	nop
c000a701:	83 c4 0c             	add    esp,0xc
c000a704:	c3                   	ret    
c000a705:	90                   	nop

c000a706 <Keyboard::~Keyboard()>:
c000a706:	83 ec 0c             	sub    esp,0xc
c000a709:	83 ec 0c             	sub    esp,0xc
c000a70c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a710:	e8 cd ff ff ff       	call   c000a6e2 <Keyboard::~Keyboard()>
c000a715:	83 c4 10             	add    esp,0x10
c000a718:	83 ec 08             	sub    esp,0x8
c000a71b:	68 5c 01 00 00       	push   0x15c
c000a720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a724:	e8 2a 2c 00 00       	call   c000d353 <operator delete(void*, unsigned long)>
c000a729:	83 c4 10             	add    esp,0x10
c000a72c:	83 c4 0c             	add    esp,0xc
c000a72f:	c3                   	ret    

c000a730 <LogicalDisk::close(int, int, void*)>:
c000a730:	83 c8 ff             	or     eax,0xffffffff
c000a733:	c3                   	ret    

c000a734 <LogicalDisk::~LogicalDisk()>:
c000a734:	83 ec 0c             	sub    esp,0xc
c000a737:	ba b8 36 02 c0       	mov    edx,0xc00236b8
c000a73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a740:	89 10                	mov    DWORD PTR [eax],edx
c000a742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a746:	83 ec 0c             	sub    esp,0xc
c000a749:	50                   	push   eax
c000a74a:	e8 af f1 ff ff       	call   c00098fe <Device::~Device()>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	90                   	nop
c000a753:	83 c4 0c             	add    esp,0xc
c000a756:	c3                   	ret    
c000a757:	90                   	nop

c000a758 <LogicalDisk::~LogicalDisk()>:
c000a758:	83 ec 0c             	sub    esp,0xc
c000a75b:	83 ec 0c             	sub    esp,0xc
c000a75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a762:	e8 cd ff ff ff       	call   c000a734 <LogicalDisk::~LogicalDisk()>
c000a767:	83 c4 10             	add    esp,0x10
c000a76a:	83 ec 08             	sub    esp,0x8
c000a76d:	68 78 01 00 00       	push   0x178
c000a772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a776:	e8 d8 2b 00 00       	call   c000d353 <operator delete(void*, unsigned long)>
c000a77b:	83 c4 10             	add    esp,0x10
c000a77e:	83 c4 0c             	add    esp,0xc
c000a781:	c3                   	ret    

c000a782 <LogicalDisk::open(int, int, void*)>:
c000a782:	83 ec 18             	sub    esp,0x18
c000a785:	68 6c 36 02 c0       	push   0xc002366c
c000a78a:	e8 83 58 00 00       	call   c0010012 <KePanic(char const*)>
c000a78f:	83 c8 ff             	or     eax,0xffffffff
c000a792:	83 c4 1c             	add    esp,0x1c
c000a795:	c3                   	ret    

c000a796 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a796:	53                   	push   ebx
c000a797:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a79b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a79f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a7a3:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a7a9:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a7af:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a7b5:	77 10                	ja     c000a7c7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a7b7:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a7bd:	89 d3                	mov    ebx,edx
c000a7bf:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a7c5:	72 05                	jb     c000a7cc <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a7c7:	83 c8 ff             	or     eax,0xffffffff
c000a7ca:	89 c2                	mov    edx,eax
c000a7cc:	5b                   	pop    ebx
c000a7cd:	c3                   	ret    

c000a7ce <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a7ce:	56                   	push   esi
c000a7cf:	83 c8 ff             	or     eax,0xffffffff
c000a7d2:	53                   	push   ebx
c000a7d3:	89 c2                	mov    edx,eax
c000a7d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a7d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a7dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a7e1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a7e7:	77 27                	ja     c000a810 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7e9:	89 d8                	mov    eax,ebx
c000a7eb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a7f1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a7f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a7fc:	89 c2                	mov    edx,eax
c000a7fe:	73 10                	jae    c000a810 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a800:	89 c8                	mov    eax,ecx
c000a802:	89 da                	mov    edx,ebx
c000a804:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a80a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a810:	5b                   	pop    ebx
c000a811:	5e                   	pop    esi
c000a812:	c3                   	ret    
c000a813:	90                   	nop

c000a814 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a814:	83 ec 1c             	sub    esp,0x1c
c000a817:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a81b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a81f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a823:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a827:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a82b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a82e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a832:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a836:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a83a:	83 ec 08             	sub    esp,0x8
c000a83d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a841:	50                   	push   eax
c000a842:	e8 17 f3 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000a847:	83 c4 10             	add    esp,0x10
c000a84a:	ba b8 36 02 c0       	mov    edx,0xc00236b8
c000a84f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a853:	89 10                	mov    DWORD PTR [eax],edx
c000a855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a859:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a860:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a864:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a86b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a86f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a87a:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a884:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a88c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a890:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a896:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a89c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a8a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a7:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a8ad:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a8b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a8bb:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a8c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c5:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a8cf:	90                   	nop
c000a8d0:	83 c4 1c             	add    esp,0x1c
c000a8d3:	c3                   	ret    

c000a8d4 <LogicalDisk::assignDriveLetter()>:
c000a8d4:	55                   	push   ebp
c000a8d5:	57                   	push   edi
c000a8d6:	56                   	push   esi
c000a8d7:	53                   	push   ebx
c000a8d8:	83 ec 14             	sub    esp,0x14
c000a8db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a8df:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a8e5:	b0 41                	mov    al,0x41
c000a8e7:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a8ed:	84 d2                	test   dl,dl
c000a8ef:	75 02                	jne    c000a8f3 <LogicalDisk::assignDriveLetter()+0x1f>
c000a8f1:	b0 43                	mov    al,0x43
c000a8f3:	8b 3d c0 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac0
c000a8f9:	0f b6 ca             	movzx  ecx,dl
c000a8fc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a900:	0f be e8             	movsx  ebp,al
c000a903:	8b 3d c4 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac4
c000a909:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a90d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a911:	3c 43                	cmp    al,0x43
c000a913:	75 10                	jne    c000a925 <LogicalDisk::assignDriveLetter()+0x51>
c000a915:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a91c:	75 5a                	jne    c000a978 <LogicalDisk::assignDriveLetter()+0xa4>
c000a91e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a923:	75 53                	jne    c000a978 <LogicalDisk::assignDriveLetter()+0xa4>
c000a925:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a928:	ba 01 00 00 00       	mov    edx,0x1
c000a92d:	89 34 24             	mov    DWORD PTR [esp],esi
c000a930:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a933:	d3 e2                	shl    edx,cl
c000a935:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a939:	89 d7                	mov    edi,edx
c000a93b:	89 d6                	mov    esi,edx
c000a93d:	c1 ff 1f             	sar    edi,0x1f
c000a940:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a944:	21 f9                	and    ecx,edi
c000a946:	09 d1                	or     ecx,edx
c000a948:	75 2e                	jne    c000a978 <LogicalDisk::assignDriveLetter()+0xa4>
c000a94a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a94e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a952:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a958:	09 f2                	or     edx,esi
c000a95a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a95d:	89 15 c0 ba 02 c0    	mov    DWORD PTR ds:0xc002bac0,edx
c000a963:	89 1c b5 e0 ba 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4520],ebx
c000a96a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a96e:	09 fa                	or     edx,edi
c000a970:	89 15 c4 ba 02 c0    	mov    DWORD PTR ds:0xc002bac4,edx
c000a976:	eb 0d                	jmp    c000a985 <LogicalDisk::assignDriveLetter()+0xb1>
c000a978:	8d 50 01             	lea    edx,[eax+0x1]
c000a97b:	45                   	inc    ebp
c000a97c:	88 d0                	mov    al,dl
c000a97e:	80 fa 5b             	cmp    dl,0x5b
c000a981:	75 8e                	jne    c000a911 <LogicalDisk::assignDriveLetter()+0x3d>
c000a983:	31 c0                	xor    eax,eax
c000a985:	83 c4 14             	add    esp,0x14
c000a988:	5b                   	pop    ebx
c000a989:	5e                   	pop    esi
c000a98a:	5f                   	pop    edi
c000a98b:	5d                   	pop    ebp
c000a98c:	c3                   	ret    
c000a98d:	90                   	nop

c000a98e <LogicalDisk::mount()>:
c000a98e:	56                   	push   esi
c000a98f:	53                   	push   ebx
c000a990:	53                   	push   ebx
c000a991:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a995:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c000a99b:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a9a5:	85 db                	test   ebx,ebx
c000a9a7:	74 27                	je     c000a9d0 <LogicalDisk::mount()+0x42>
c000a9a9:	51                   	push   ecx
c000a9aa:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a9b1:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a9b3:	83 e8 41             	sub    eax,0x41
c000a9b6:	50                   	push   eax
c000a9b7:	56                   	push   esi
c000a9b8:	53                   	push   ebx
c000a9b9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	84 c0                	test   al,al
c000a9c1:	74 08                	je     c000a9cb <LogicalDisk::mount()+0x3d>
c000a9c3:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a9c9:	eb 07                	jmp    c000a9d2 <LogicalDisk::mount()+0x44>
c000a9cb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a9ce:	eb d5                	jmp    c000a9a5 <LogicalDisk::mount()+0x17>
c000a9d0:	31 c0                	xor    eax,eax
c000a9d2:	5a                   	pop    edx
c000a9d3:	5b                   	pop    ebx
c000a9d4:	5e                   	pop    esi
c000a9d5:	c3                   	ret    

c000a9d6 <LogicalDisk::unmount()>:
c000a9d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9da:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a9e4:	c3                   	ret    
c000a9e5:	90                   	nop

c000a9e6 <LogicalDisk::eject()>:
c000a9e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9ea:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a9f0:	8b 10                	mov    edx,DWORD PTR [eax]
c000a9f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a9f9:	90                   	nop

c000a9fa <LogicalDisk::unassignDriveLetter()>:
c000a9fa:	57                   	push   edi
c000a9fb:	56                   	push   esi
c000a9fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa00:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aa07:	85 c9                	test   ecx,ecx
c000aa09:	75 0f                	jne    c000aa1a <LogicalDisk::unassignDriveLetter()+0x20>
c000aa0b:	c7 44 24 0c 90 36 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023690
c000aa13:	5e                   	pop    esi
c000aa14:	5f                   	pop    edi
c000aa15:	e9 f8 55 00 00       	jmp    c0010012 <KePanic(char const*)>
c000aa1a:	83 e9 41             	sub    ecx,0x41
c000aa1d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aa24:	b8 01 00 00 00       	mov    eax,0x1
c000aa29:	c7 04 8d e0 ba 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4520],0x0
c000aa34:	d3 e0                	shl    eax,cl
c000aa36:	89 c7                	mov    edi,eax
c000aa38:	f7 d0                	not    eax
c000aa3a:	c1 ff 1f             	sar    edi,0x1f
c000aa3d:	21 05 c0 ba 02 c0    	and    DWORD PTR ds:0xc002bac0,eax
c000aa43:	89 fe                	mov    esi,edi
c000aa45:	f7 d6                	not    esi
c000aa47:	21 35 c4 ba 02 c0    	and    DWORD PTR ds:0xc002bac4,esi
c000aa4d:	5e                   	pop    esi
c000aa4e:	5f                   	pop    edi
c000aa4f:	c3                   	ret    

c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>:
c000aa50:	57                   	push   edi
c000aa51:	56                   	push   esi
c000aa52:	53                   	push   ebx
c000aa53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa5b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa63:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa69:	77 41                	ja     c000aaac <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aa6b:	99                   	cdq    
c000aa6c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa72:	01 c8                	add    eax,ecx
c000aa74:	11 da                	adc    edx,ebx
c000aa76:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa7c:	19 d7                	sbb    edi,edx
c000aa7e:	72 33                	jb     c000aab3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aa80:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aa86:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aa8c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aa90:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aa94:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aa9a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aaa0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaa4:	5b                   	pop    ebx
c000aaa5:	5e                   	pop    esi
c000aaa6:	5f                   	pop    edi
c000aaa7:	e9 d6 0b 00 00       	jmp    c000b682 <VCache::read(unsigned long long, int, void*)>
c000aaac:	b8 05 00 00 00       	mov    eax,0x5
c000aab1:	eb 05                	jmp    c000aab8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000aab3:	b8 07 00 00 00       	mov    eax,0x7
c000aab8:	5b                   	pop    ebx
c000aab9:	5e                   	pop    esi
c000aaba:	5f                   	pop    edi
c000aabb:	c3                   	ret    

c000aabc <LogicalDisk::write(unsigned long long, int, void*)>:
c000aabc:	57                   	push   edi
c000aabd:	56                   	push   esi
c000aabe:	53                   	push   ebx
c000aabf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aac3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aac7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aacb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aacf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aad5:	77 41                	ja     c000ab18 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000aad7:	99                   	cdq    
c000aad8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aade:	01 c8                	add    eax,ecx
c000aae0:	11 da                	adc    edx,ebx
c000aae2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aae8:	19 d7                	sbb    edi,edx
c000aaea:	72 33                	jb     c000ab1f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000aaec:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aaf2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aaf8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aafc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ab00:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ab06:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ab0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab10:	5b                   	pop    ebx
c000ab11:	5e                   	pop    esi
c000ab12:	5f                   	pop    edi
c000ab13:	e9 9c 09 00 00       	jmp    c000b4b4 <VCache::write(unsigned long long, int, void*)>
c000ab18:	b8 05 00 00 00       	mov    eax,0x5
c000ab1d:	eb 05                	jmp    c000ab24 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ab1f:	b8 07 00 00 00       	mov    eax,0x7
c000ab24:	5b                   	pop    ebx
c000ab25:	5e                   	pop    esi
c000ab26:	5f                   	pop    edi
c000ab27:	c3                   	ret    

c000ab28 <Mouse::Mouse(char const*)>:
c000ab28:	83 ec 0c             	sub    esp,0xc
c000ab2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2f:	83 ec 08             	sub    esp,0x8
c000ab32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab36:	50                   	push   eax
c000ab37:	e8 22 f0 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	ba e4 36 02 c0       	mov    edx,0xc00236e4
c000ab44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab48:	89 10                	mov    DWORD PTR [eax],edx
c000ab4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ab58:	90                   	nop
c000ab59:	83 c4 0c             	add    esp,0xc
c000ab5c:	c3                   	ret    
c000ab5d:	90                   	nop
c000ab5e:	66 90                	xchg   ax,ax

c000ab60 <Mouse::~Mouse()>:
c000ab60:	83 ec 0c             	sub    esp,0xc
c000ab63:	ba e4 36 02 c0       	mov    edx,0xc00236e4
c000ab68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6c:	89 10                	mov    DWORD PTR [eax],edx
c000ab6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab72:	83 ec 0c             	sub    esp,0xc
c000ab75:	50                   	push   eax
c000ab76:	e8 83 ed ff ff       	call   c00098fe <Device::~Device()>
c000ab7b:	83 c4 10             	add    esp,0x10
c000ab7e:	90                   	nop
c000ab7f:	83 c4 0c             	add    esp,0xc
c000ab82:	c3                   	ret    
c000ab83:	90                   	nop

c000ab84 <Mouse::~Mouse()>:
c000ab84:	83 ec 0c             	sub    esp,0xc
c000ab87:	83 ec 0c             	sub    esp,0xc
c000ab8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab8e:	e8 cd ff ff ff       	call   c000ab60 <Mouse::~Mouse()>
c000ab93:	83 c4 10             	add    esp,0x10
c000ab96:	83 ec 08             	sub    esp,0x8
c000ab99:	68 58 01 00 00       	push   0x158
c000ab9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aba2:	e8 ac 27 00 00       	call   c000d353 <operator delete(void*, unsigned long)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	83 c4 0c             	add    esp,0xc
c000abad:	c3                   	ret    

c000abae <NIC::getMAC()>:
c000abae:	31 c0                	xor    eax,eax
c000abb0:	31 d2                	xor    edx,edx
c000abb2:	c3                   	ret    
c000abb3:	90                   	nop

c000abb4 <NIC::write(int, unsigned char*, int*)>:
c000abb4:	b8 01 00 00 00       	mov    eax,0x1
c000abb9:	c3                   	ret    

c000abba <NIC::NIC(char const*)>:
c000abba:	83 ec 0c             	sub    esp,0xc
c000abbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc1:	83 ec 08             	sub    esp,0x8
c000abc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abc8:	50                   	push   eax
c000abc9:	e8 90 ef ff ff       	call   c0009b5e <Device::Device(char const*)>
c000abce:	83 c4 10             	add    esp,0x10
c000abd1:	ba 10 37 02 c0       	mov    edx,0xc0023710
c000abd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abda:	89 10                	mov    DWORD PTR [eax],edx
c000abdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000abea:	90                   	nop
c000abeb:	83 c4 0c             	add    esp,0xc
c000abee:	c3                   	ret    
c000abef:	90                   	nop

c000abf0 <NIC::~NIC()>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	ba 10 37 02 c0       	mov    edx,0xc0023710
c000abf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abfc:	89 10                	mov    DWORD PTR [eax],edx
c000abfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac02:	83 ec 0c             	sub    esp,0xc
c000ac05:	50                   	push   eax
c000ac06:	e8 f3 ec ff ff       	call   c00098fe <Device::~Device()>
c000ac0b:	83 c4 10             	add    esp,0x10
c000ac0e:	90                   	nop
c000ac0f:	83 c4 0c             	add    esp,0xc
c000ac12:	c3                   	ret    
c000ac13:	90                   	nop

c000ac14 <NIC::~NIC()>:
c000ac14:	83 ec 0c             	sub    esp,0xc
c000ac17:	83 ec 0c             	sub    esp,0xc
c000ac1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac1e:	e8 cd ff ff ff       	call   c000abf0 <NIC::~NIC()>
c000ac23:	83 c4 10             	add    esp,0x10
c000ac26:	83 ec 08             	sub    esp,0x8
c000ac29:	68 58 01 00 00       	push   0x158
c000ac2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac32:	e8 1c 27 00 00       	call   c000d353 <operator delete(void*, unsigned long)>
c000ac37:	83 c4 10             	add    esp,0x10
c000ac3a:	83 c4 0c             	add    esp,0xc
c000ac3d:	c3                   	ret    

c000ac3e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac3e:	55                   	push   ebp
c000ac3f:	57                   	push   edi
c000ac40:	56                   	push   esi
c000ac41:	53                   	push   ebx
c000ac42:	81 ec 28 01 00 00    	sub    esp,0x128
c000ac48:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ac4f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ac56:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000ac5d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ac64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac68:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ac6c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac73:	e8 e2 ef ff ff       	call   c0009c5a <Device::getName()>
c000ac78:	5a                   	pop    edx
c000ac79:	59                   	pop    ecx
c000ac7a:	50                   	push   eax
c000ac7b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ac7f:	55                   	push   ebp
c000ac80:	e8 bb 59 ff ff       	call   c0000640 <strcpy>
c000ac85:	5b                   	pop    ebx
c000ac86:	58                   	pop    eax
c000ac87:	68 3c 37 02 c0       	push   0xc002373c
c000ac8c:	55                   	push   ebp
c000ac8d:	e8 ae 5b ff ff       	call   c0000840 <strcat>
c000ac92:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000ac99:	e8 2d 50 00 00       	call   c000fccb <malloc>
c000ac9e:	83 c4 0c             	add    esp,0xc
c000aca1:	89 c3                	mov    ebx,eax
c000aca3:	57                   	push   edi
c000aca4:	56                   	push   esi
c000aca5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aca9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acad:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000acb4:	55                   	push   ebp
c000acb5:	50                   	push   eax
c000acb6:	e8 59 fb ff ff       	call   c000a814 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000acbb:	83 c4 14             	add    esp,0x14
c000acbe:	53                   	push   ebx
c000acbf:	e8 10 fc ff ff       	call   c000a8d4 <LogicalDisk::assignDriveLetter()>
c000acc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000acc7:	e8 c2 fc ff ff       	call   c000a98e <LogicalDisk::mount()>
c000accc:	58                   	pop    eax
c000accd:	5a                   	pop    edx
c000acce:	53                   	push   ebx
c000accf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000acd6:	e8 21 ed ff ff       	call   c00099fc <Device::addChild(Device*)>
c000acdb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ace1:	5b                   	pop    ebx
c000ace2:	5e                   	pop    esi
c000ace3:	5f                   	pop    edi
c000ace4:	5d                   	pop    ebp
c000ace5:	c3                   	ret    

c000ace6 <createPartitionsForDisk(PhysicalDisk*)>:
c000ace6:	55                   	push   ebp
c000ace7:	57                   	push   edi
c000ace8:	56                   	push   esi
c000ace9:	53                   	push   ebx
c000acea:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000acf0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000acf7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000acfd:	3d 00 02 00 00       	cmp    eax,0x200
c000ad02:	74 27                	je     c000ad2b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ad04:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ad0a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ad10:	83 ec 10             	sub    esp,0x10
c000ad13:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ad17:	99                   	cdq    
c000ad18:	c1 e6 0a             	shl    esi,0xa
c000ad1b:	52                   	push   edx
c000ad1c:	89 fd                	mov    ebp,edi
c000ad1e:	50                   	push   eax
c000ad1f:	55                   	push   ebp
c000ad20:	56                   	push   esi
c000ad21:	e8 be 6b 01 00       	call   c00218e4 <__udivdi3>
c000ad26:	e9 b9 00 00 00       	jmp    c000ade4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad2b:	83 ec 0c             	sub    esp,0xc
c000ad2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad30:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad34:	56                   	push   esi
c000ad35:	6a 01                	push   0x1
c000ad37:	6a 00                	push   0x0
c000ad39:	6a 00                	push   0x0
c000ad3b:	53                   	push   ebx
c000ad3c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad3f:	83 c4 20             	add    esp,0x20
c000ad42:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ad4a:	75 0a                	jne    c000ad56 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ad4c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ad54:	74 2c                	je     c000ad82 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ad56:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad5c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad62:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad68:	83 ec 10             	sub    esp,0x10
c000ad6b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad6f:	89 f7                	mov    edi,esi
c000ad71:	c1 e0 0a             	shl    eax,0xa
c000ad74:	c1 ff 1f             	sar    edi,0x1f
c000ad77:	57                   	push   edi
c000ad78:	56                   	push   esi
c000ad79:	52                   	push   edx
c000ad7a:	50                   	push   eax
c000ad7b:	e8 64 6b 01 00       	call   c00218e4 <__udivdi3>
c000ad80:	eb 62                	jmp    c000ade4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad82:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ad89:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ad90:	89 cf                	mov    edi,ecx
c000ad92:	83 e2 7f             	and    edx,0x7f
c000ad95:	83 e7 7f             	and    edi,0x7f
c000ad98:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ad9f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000ada2:	83 e0 7f             	and    eax,0x7f
c000ada5:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ada8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000adaf:	83 e0 7f             	and    eax,0x7f
c000adb2:	01 d0                	add    eax,edx
c000adb4:	89 c5                	mov    ebp,eax
c000adb6:	84 c0                	test   al,al
c000adb8:	74 41                	je     c000adfb <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000adba:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000adc0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000adc6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000adcc:	83 ec 10             	sub    esp,0x10
c000adcf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000add3:	89 f7                	mov    edi,esi
c000add5:	c1 e0 0a             	shl    eax,0xa
c000add8:	c1 ff 1f             	sar    edi,0x1f
c000addb:	57                   	push   edi
c000addc:	56                   	push   esi
c000addd:	52                   	push   edx
c000adde:	50                   	push   eax
c000addf:	e8 00 6b 01 00       	call   c00218e4 <__udivdi3>
c000ade4:	83 c4 14             	add    esp,0x14
c000ade7:	52                   	push   edx
c000ade8:	50                   	push   eax
c000ade9:	6a 00                	push   0x0
c000adeb:	6a 00                	push   0x0
c000aded:	53                   	push   ebx
c000adee:	e8 4b fe ff ff       	call   c000ac3e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000adf3:	83 c4 20             	add    esp,0x20
c000adf6:	e9 73 01 00 00       	jmp    c000af6e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000adfb:	89 f0                	mov    eax,esi
c000adfd:	31 c9                	xor    ecx,ecx
c000adff:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ae06:	75 02                	jne    c000ae0a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ae08:	89 cd                	mov    ebp,ecx
c000ae0a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ae11:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000ae18:	c1 e2 08             	shl    edx,0x8
c000ae1b:	c1 e6 10             	shl    esi,0x10
c000ae1e:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ae26:	09 f2                	or     edx,esi
c000ae28:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ae30:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000ae37:	83 c0 10             	add    eax,0x10
c000ae3a:	09 f2                	or     edx,esi
c000ae3c:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae43:	c1 e6 18             	shl    esi,0x18
c000ae46:	09 f2                	or     edx,esi
c000ae48:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ae4f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ae53:	c1 e6 10             	shl    esi,0x10
c000ae56:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ae5d:	c1 e2 08             	shl    edx,0x8
c000ae60:	09 f2                	or     edx,esi
c000ae62:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ae69:	09 f2                	or     edx,esi
c000ae6b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ae72:	c1 e6 18             	shl    esi,0x18
c000ae75:	09 f2                	or     edx,esi
c000ae77:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ae7b:	41                   	inc    ecx
c000ae7c:	83 f9 04             	cmp    ecx,0x4
c000ae7f:	0f 85 7a ff ff ff    	jne    c000adff <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ae85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae89:	83 f0 01             	xor    eax,0x1
c000ae8c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ae90:	75 4f                	jne    c000aee1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae96:	83 f0 01             	xor    eax,0x1
c000ae99:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ae9d:	75 42                	jne    c000aee1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae9f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000aea7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000aeaf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000aeb5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000aebb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000aec1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000aec5:	89 f7                	mov    edi,esi
c000aec7:	c1 e0 0a             	shl    eax,0xa
c000aeca:	c1 ff 1f             	sar    edi,0x1f
c000aecd:	57                   	push   edi
c000aece:	56                   	push   esi
c000aecf:	52                   	push   edx
c000aed0:	50                   	push   eax
c000aed1:	e8 0e 6a 01 00       	call   c00218e4 <__udivdi3>
c000aed6:	83 c4 10             	add    esp,0x10
c000aed9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000aedd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000aee1:	89 e8                	mov    eax,ebp
c000aee3:	0f b6 e8             	movzx  ebp,al
c000aee6:	85 ed                	test   ebp,ebp
c000aee8:	74 50                	je     c000af3a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000aeea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeee:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000aef2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aef6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000aefa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aefe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af02:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af06:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af16:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000af1a:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000af1e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af22:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af2a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af2e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af32:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af36:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af3a:	31 ed                	xor    ebp,ebp
c000af3c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af40:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af44:	89 f8                	mov    eax,edi
c000af46:	09 f0                	or     eax,esi
c000af48:	74 1e                	je     c000af68 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af4a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af4e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af52:	89 d1                	mov    ecx,edx
c000af54:	09 c1                	or     ecx,eax
c000af56:	74 10                	je     c000af68 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af58:	83 ec 0c             	sub    esp,0xc
c000af5b:	57                   	push   edi
c000af5c:	56                   	push   esi
c000af5d:	52                   	push   edx
c000af5e:	50                   	push   eax
c000af5f:	53                   	push   ebx
c000af60:	e8 d9 fc ff ff       	call   c000ac3e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000af65:	83 c4 20             	add    esp,0x20
c000af68:	45                   	inc    ebp
c000af69:	83 fd 04             	cmp    ebp,0x4
c000af6c:	75 ce                	jne    c000af3c <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000af6e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000af74:	5b                   	pop    ebx
c000af75:	5e                   	pop    esi
c000af76:	5f                   	pop    edi
c000af77:	5d                   	pop    ebp
c000af78:	c3                   	ret    
c000af79:	66 90                	xchg   ax,ax
c000af7b:	90                   	nop

c000af7c <Serial::Serial(char const*)>:
c000af7c:	83 ec 0c             	sub    esp,0xc
c000af7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af83:	83 ec 08             	sub    esp,0x8
c000af86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af8a:	50                   	push   eax
c000af8b:	e8 ce eb ff ff       	call   c0009b5e <Device::Device(char const*)>
c000af90:	83 c4 10             	add    esp,0x10
c000af93:	ba 50 37 02 c0       	mov    edx,0xc0023750
c000af98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9c:	89 10                	mov    DWORD PTR [eax],edx
c000af9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000afac:	90                   	nop
c000afad:	83 c4 0c             	add    esp,0xc
c000afb0:	c3                   	ret    
c000afb1:	90                   	nop
c000afb2:	66 90                	xchg   ax,ax

c000afb4 <Serial::~Serial()>:
c000afb4:	83 ec 0c             	sub    esp,0xc
c000afb7:	ba 50 37 02 c0       	mov    edx,0xc0023750
c000afbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc0:	89 10                	mov    DWORD PTR [eax],edx
c000afc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc6:	83 ec 0c             	sub    esp,0xc
c000afc9:	50                   	push   eax
c000afca:	e8 2f e9 ff ff       	call   c00098fe <Device::~Device()>
c000afcf:	83 c4 10             	add    esp,0x10
c000afd2:	90                   	nop
c000afd3:	83 c4 0c             	add    esp,0xc
c000afd6:	c3                   	ret    
c000afd7:	90                   	nop

c000afd8 <Serial::~Serial()>:
c000afd8:	83 ec 0c             	sub    esp,0xc
c000afdb:	83 ec 0c             	sub    esp,0xc
c000afde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afe2:	e8 cd ff ff ff       	call   c000afb4 <Serial::~Serial()>
c000afe7:	83 c4 10             	add    esp,0x10
c000afea:	83 ec 08             	sub    esp,0x8
c000afed:	68 58 01 00 00       	push   0x158
c000aff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aff6:	e8 58 23 00 00       	call   c000d353 <operator delete(void*, unsigned long)>
c000affb:	83 c4 10             	add    esp,0x10
c000affe:	83 c4 0c             	add    esp,0xc
c000b001:	c3                   	ret    
c000b002:	66 90                	xchg   ax,ax

c000b004 <Timer::Timer(char const*)>:
c000b004:	83 ec 0c             	sub    esp,0xc
c000b007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b00b:	83 ec 08             	sub    esp,0x8
c000b00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b012:	50                   	push   eax
c000b013:	e8 46 eb ff ff       	call   c0009b5e <Device::Device(char const*)>
c000b018:	83 c4 10             	add    esp,0x10
c000b01b:	ba 54 38 02 c0       	mov    edx,0xc0023854
c000b020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b024:	89 10                	mov    DWORD PTR [eax],edx
c000b026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b034:	90                   	nop
c000b035:	83 c4 0c             	add    esp,0xc
c000b038:	c3                   	ret    
c000b039:	90                   	nop
c000b03a:	66 90                	xchg   ax,ax

c000b03c <Timer::~Timer()>:
c000b03c:	83 ec 0c             	sub    esp,0xc
c000b03f:	ba 54 38 02 c0       	mov    edx,0xc0023854
c000b044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b048:	89 10                	mov    DWORD PTR [eax],edx
c000b04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04e:	83 ec 0c             	sub    esp,0xc
c000b051:	50                   	push   eax
c000b052:	e8 a7 e8 ff ff       	call   c00098fe <Device::~Device()>
c000b057:	83 c4 10             	add    esp,0x10
c000b05a:	90                   	nop
c000b05b:	83 c4 0c             	add    esp,0xc
c000b05e:	c3                   	ret    
c000b05f:	90                   	nop

c000b060 <Timer::~Timer()>:
c000b060:	83 ec 0c             	sub    esp,0xc
c000b063:	83 ec 0c             	sub    esp,0xc
c000b066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b06a:	e8 cd ff ff ff       	call   c000b03c <Timer::~Timer()>
c000b06f:	83 c4 10             	add    esp,0x10
c000b072:	83 ec 08             	sub    esp,0x8
c000b075:	68 5c 01 00 00       	push   0x15c
c000b07a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b07e:	e8 d0 22 00 00       	call   c000d353 <operator delete(void*, unsigned long)>
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	83 c4 0c             	add    esp,0xc
c000b089:	c3                   	ret    

c000b08a <Timer::read()>:
c000b08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b08e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b094:	c3                   	ret    

c000b095 <setupTimer(int)>:
c000b095:	53                   	push   ebx
c000b096:	83 ec 14             	sub    esp,0x14
c000b099:	68 5c 01 00 00       	push   0x15c
c000b09e:	e8 28 4c 00 00       	call   c000fccb <malloc>
c000b0a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0a6:	89 c3                	mov    ebx,eax
c000b0a8:	e8 eb 60 01 00       	call   c0021198 <PIT::PIT()>
c000b0ad:	58                   	pop    eax
c000b0ae:	5a                   	pop    edx
c000b0af:	53                   	push   ebx
c000b0b0:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c000b0b6:	e8 41 e9 ff ff       	call   c00099fc <Device::addChild(Device*)>
c000b0bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0bd:	6a 00                	push   0x0
c000b0bf:	6a 00                	push   0x0
c000b0c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b0c5:	53                   	push   ebx
c000b0c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0c9:	89 d8                	mov    eax,ebx
c000b0cb:	83 c4 28             	add    esp,0x28
c000b0ce:	5b                   	pop    ebx
c000b0cf:	c3                   	ret    

c000b0d0 <timerHandler(unsigned int)>:
c000b0d0:	57                   	push   edi
c000b0d1:	31 d2                	xor    edx,edx
c000b0d3:	56                   	push   esi
c000b0d4:	53                   	push   ebx
c000b0d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0d9:	01 1d 50 bb 02 c0    	add    DWORD PTR ds:0xc002bb50,ebx
c000b0df:	11 15 54 bb 02 c0    	adc    DWORD PTR ds:0xc002bb54,edx
c000b0e5:	80 3d d5 c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0d5,0x0
c000b0ec:	75 12                	jne    c000b100 <timerHandler(unsigned int)+0x30>
c000b0ee:	c7 44 24 10 df 37 02 c0 	mov    DWORD PTR [esp+0x10],0xc00237df
c000b0f6:	5b                   	pop    ebx
c000b0f7:	5e                   	pop    esi
c000b0f8:	5f                   	pop    edi
c000b0f9:	e9 66 be ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c000b0fe:	66 90                	xchg   ax,ax
c000b100:	83 ec 0c             	sub    esp,0xc
c000b103:	68 f5 37 02 c0       	push   0xc00237f5
c000b108:	e8 57 be ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b10d:	fa                   	cli    
c000b10e:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000b114:	c7 04 24 40 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea40
c000b11b:	e8 5c 6b 01 00       	call   c0021c7c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b120:	83 c4 10             	add    esp,0x10
c000b123:	84 c0                	test   al,al
c000b125:	0f 85 a9 00 00 00    	jne    c000b1d4 <timerHandler(unsigned int)+0x104>
c000b12b:	83 ec 0c             	sub    esp,0xc
c000b12e:	68 40 ea 02 c0       	push   0xc002ea40
c000b133:	e8 60 6b 01 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b138:	83 c4 10             	add    esp,0x10
c000b13b:	89 c6                	mov    esi,eax
c000b13d:	8d 76 00             	lea    esi,[esi+0x0]
c000b140:	83 ec 0c             	sub    esp,0xc
c000b143:	68 40 ea 02 c0       	push   0xc002ea40
c000b148:	e8 4b 6b 01 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b14d:	c7 04 24 40 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea40
c000b154:	89 c7                	mov    edi,eax
c000b156:	e8 45 6b 01 00       	call   c0021ca0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b15b:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c000b15e:	83 c4 10             	add    esp,0x10
c000b161:	8b 4f 30             	mov    ecx,DWORD PTR [edi+0x30]
c000b164:	39 15 50 bb 02 c0    	cmp    DWORD PTR ds:0xc002bb50,edx
c000b16a:	a1 54 bb 02 c0       	mov    eax,ds:0xc002bb54
c000b16f:	19 c8                	sbb    eax,ecx
c000b171:	72 21                	jb     c000b194 <timerHandler(unsigned int)+0xc4>
c000b173:	83 ec 0c             	sub    esp,0xc
c000b176:	57                   	push   edi
c000b177:	e8 68 c1 00 00       	call   c00172e4 <unblockTask(ThreadControlBlock*)>
c000b17c:	83 c4 10             	add    esp,0x10
c000b17f:	39 fe                	cmp    esi,edi
c000b181:	75 25                	jne    c000b1a8 <timerHandler(unsigned int)+0xd8>
c000b183:	83 ec 0c             	sub    esp,0xc
c000b186:	68 40 ea 02 c0       	push   0xc002ea40
c000b18b:	e8 08 6b 01 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b190:	89 c6                	mov    esi,eax
c000b192:	eb 10                	jmp    c000b1a4 <timerHandler(unsigned int)+0xd4>
c000b194:	51                   	push   ecx
c000b195:	51                   	push   ecx
c000b196:	57                   	push   edi
c000b197:	68 40 ea 02 c0       	push   0xc002ea40
c000b19c:	e8 bb 6b 01 00       	call   c0021d5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b1a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b1a4:	83 c4 10             	add    esp,0x10
c000b1a7:	90                   	nop
c000b1a8:	83 ec 0c             	sub    esp,0xc
c000b1ab:	68 40 ea 02 c0       	push   0xc002ea40
c000b1b0:	e8 c7 6a 01 00       	call   c0021c7c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b1b5:	83 c4 10             	add    esp,0x10
c000b1b8:	84 c0                	test   al,al
c000b1ba:	75 18                	jne    c000b1d4 <timerHandler(unsigned int)+0x104>
c000b1bc:	83 ec 0c             	sub    esp,0xc
c000b1bf:	68 40 ea 02 c0       	push   0xc002ea40
c000b1c4:	e8 cf 6a 01 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1c9:	83 c4 10             	add    esp,0x10
c000b1cc:	39 f0                	cmp    eax,esi
c000b1ce:	0f 85 6c ff ff ff    	jne    c000b140 <timerHandler(unsigned int)+0x70>
c000b1d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1d9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b1dc:	85 c0                	test   eax,eax
c000b1de:	74 70                	je     c000b250 <timerHandler(unsigned int)+0x180>
c000b1e0:	80 3d d4 c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0d4,0x0
c000b1e7:	74 67                	je     c000b250 <timerHandler(unsigned int)+0x180>
c000b1e9:	52                   	push   edx
c000b1ea:	52                   	push   edx
c000b1eb:	50                   	push   eax
c000b1ec:	68 fd 37 02 c0       	push   0xc00237fd
c000b1f1:	e8 6e bd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b1f6:	83 c4 10             	add    esp,0x10
c000b1f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1fe:	81 78 38 e8 03 00 00 	cmp    DWORD PTR [eax+0x38],0x3e8
c000b205:	76 1d                	jbe    c000b224 <timerHandler(unsigned int)+0x154>
c000b207:	83 ec 0c             	sub    esp,0xc
c000b20a:	68 0c 38 02 c0       	push   0xc002380c
c000b20f:	e8 50 bd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b214:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b219:	83 c4 10             	add    esp,0x10
c000b21c:	c7 40 38 e8 03 00 00 	mov    DWORD PTR [eax+0x38],0x3e8
c000b223:	90                   	nop
c000b224:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b22a:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c000b22d:	89 c1                	mov    ecx,eax
c000b22f:	29 d9                	sub    ecx,ebx
c000b231:	39 d8                	cmp    eax,ebx
c000b233:	89 4a 38             	mov    DWORD PTR [edx+0x38],ecx
c000b236:	77 18                	ja     c000b250 <timerHandler(unsigned int)+0x180>
c000b238:	83 ec 0c             	sub    esp,0xc
c000b23b:	68 3b 38 02 c0       	push   0xc002383b
c000b240:	e8 1f bd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b245:	e8 3e bd 00 00       	call   c0016f88 <schedule()>
c000b24a:	83 c4 10             	add    esp,0x10
c000b24d:	8d 76 00             	lea    esi,[esi+0x0]
c000b250:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000b257:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000b25e:	75 04                	jne    c000b264 <timerHandler(unsigned int)+0x194>
c000b260:	fb                   	sti    
c000b261:	8d 76 00             	lea    esi,[esi+0x0]
c000b264:	5b                   	pop    ebx
c000b265:	5e                   	pop    esi
c000b266:	5f                   	pop    edi
c000b267:	c3                   	ret    

c000b268 <VCache::VCache(PhysicalDisk*)>:
c000b268:	53                   	push   ebx
c000b269:	83 ec 18             	sub    esp,0x18
c000b26c:	ba c4 38 02 c0       	mov    edx,0xc00238c4
c000b271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b275:	89 10                	mov    DWORD PTR [eax],edx
c000b277:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b27b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b286:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b28d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b291:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b298:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b29f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2a3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b2aa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b2b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b2bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b2c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c8:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b2cf:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b2d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2da:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b2de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2e2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b2e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2ea:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b2ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2f2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b2f9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b301:	83 ec 0c             	sub    esp,0xc
c000b304:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b308:	e8 be 49 00 00       	call   c000fccb <malloc>
c000b30d:	83 c4 10             	add    esp,0x10
c000b310:	89 c3                	mov    ebx,eax
c000b312:	83 ec 0c             	sub    esp,0xc
c000b315:	53                   	push   ebx
c000b316:	e8 dd 4c 00 00       	call   c000fff8 <Mutex::Mutex()>
c000b31b:	83 c4 10             	add    esp,0x10
c000b31e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b322:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b329:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b32d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b334:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b33b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b33f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b345:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b349:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b34c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b350:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b356:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b35c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b360:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b363:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b366:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b36a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b36e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b372:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b378:	05 00 01 00 00       	add    eax,0x100
c000b37d:	c1 e0 04             	shl    eax,0x4
c000b380:	83 ec 0c             	sub    esp,0xc
c000b383:	50                   	push   eax
c000b384:	e8 42 49 00 00       	call   c000fccb <malloc>
c000b389:	83 c4 10             	add    esp,0x10
c000b38c:	89 c2                	mov    edx,eax
c000b38e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b392:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b399:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b3a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3a4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b3a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b3ac:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b3b2:	89 d0                	mov    eax,edx
c000b3b4:	c1 e0 02             	shl    eax,0x2
c000b3b7:	01 d0                	add    eax,edx
c000b3b9:	c1 e0 04             	shl    eax,0x4
c000b3bc:	83 ec 0c             	sub    esp,0xc
c000b3bf:	50                   	push   eax
c000b3c0:	e8 06 49 00 00       	call   c000fccb <malloc>
c000b3c5:	83 c4 10             	add    esp,0x10
c000b3c8:	89 c2                	mov    edx,eax
c000b3ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b3ce:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b3d1:	90                   	nop
c000b3d2:	83 c4 18             	add    esp,0x18
c000b3d5:	5b                   	pop    ebx
c000b3d6:	c3                   	ret    
c000b3d7:	90                   	nop

c000b3d8 <VCache::invalidateReadBuffer()>:
c000b3d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3dc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b3e2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b3e6:	c3                   	ret    
c000b3e7:	90                   	nop

c000b3e8 <VCache::writeWriteBuffer()>:
c000b3e8:	53                   	push   ebx
c000b3e9:	83 ec 08             	sub    esp,0x8
c000b3ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b3f0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b3f4:	74 1e                	je     c000b414 <VCache::writeWriteBuffer()+0x2c>
c000b3f6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b3f9:	83 ec 0c             	sub    esp,0xc
c000b3fc:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3fe:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b401:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b404:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b407:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b40a:	50                   	push   eax
c000b40b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b40e:	83 c4 20             	add    esp,0x20
c000b411:	8d 76 00             	lea    esi,[esi+0x0]
c000b414:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b41b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b422:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b426:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b42d:	83 c4 08             	add    esp,0x8
c000b430:	5b                   	pop    ebx
c000b431:	c3                   	ret    
c000b432:	66 90                	xchg   ax,ax

c000b434 <VCache::~VCache()>:
c000b434:	83 ec 0c             	sub    esp,0xc
c000b437:	ba c4 38 02 c0       	mov    edx,0xc00238c4
c000b43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b440:	89 10                	mov    DWORD PTR [eax],edx
c000b442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b446:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b449:	0f b6 c0             	movzx  eax,al
c000b44c:	85 c0                	test   eax,eax
c000b44e:	74 10                	je     c000b460 <VCache::~VCache()+0x2c>
c000b450:	83 ec 0c             	sub    esp,0xc
c000b453:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b457:	e8 8c ff ff ff       	call   c000b3e8 <VCache::writeWriteBuffer()>
c000b45c:	83 c4 10             	add    esp,0x10
c000b45f:	90                   	nop
c000b460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b464:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b467:	83 ec 0c             	sub    esp,0xc
c000b46a:	50                   	push   eax
c000b46b:	e8 6b 48 00 00       	call   c000fcdb <free>
c000b470:	83 c4 10             	add    esp,0x10
c000b473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b477:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b47a:	83 ec 0c             	sub    esp,0xc
c000b47d:	50                   	push   eax
c000b47e:	e8 58 48 00 00       	call   c000fcdb <free>
c000b483:	83 c4 10             	add    esp,0x10
c000b486:	90                   	nop
c000b487:	83 c4 0c             	add    esp,0xc
c000b48a:	c3                   	ret    
c000b48b:	90                   	nop

c000b48c <VCache::~VCache()>:
c000b48c:	83 ec 0c             	sub    esp,0xc
c000b48f:	83 ec 0c             	sub    esp,0xc
c000b492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b496:	e8 99 ff ff ff       	call   c000b434 <VCache::~VCache()>
c000b49b:	83 c4 10             	add    esp,0x10
c000b49e:	83 ec 08             	sub    esp,0x8
c000b4a1:	6a 44                	push   0x44
c000b4a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a7:	e8 a7 1e 00 00       	call   c000d353 <operator delete(void*, unsigned long)>
c000b4ac:	83 c4 10             	add    esp,0x10
c000b4af:	83 c4 0c             	add    esp,0xc
c000b4b2:	c3                   	ret    
c000b4b3:	90                   	nop

c000b4b4 <VCache::write(unsigned long long, int, void*)>:
c000b4b4:	55                   	push   ebp
c000b4b5:	57                   	push   edi
c000b4b6:	56                   	push   esi
c000b4b7:	53                   	push   ebx
c000b4b8:	83 ec 1c             	sub    esp,0x1c
c000b4bb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b4bf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b4c3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b4c7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b4cb:	e8 d8 b7 00 00       	call   c0016ca8 <KeDisablePreemption()>
c000b4d0:	b9 00 10 00 00       	mov    ecx,0x1000
c000b4d5:	50                   	push   eax
c000b4d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b4d9:	0f af c3             	imul   eax,ebx
c000b4dc:	05 ff 0f 00 00       	add    eax,0xfff
c000b4e1:	99                   	cdq    
c000b4e2:	f7 f9                	idiv   ecx
c000b4e4:	50                   	push   eax
c000b4e5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4e9:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b4ef:	e8 5e 8d 00 00       	call   c0014252 <VAS::canLockPages(unsigned long, int)>
c000b4f4:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b4f8:	83 c4 10             	add    esp,0x10
c000b4fb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b500:	74 2a                	je     c000b52c <VCache::write(unsigned long long, int, void*)+0x78>
c000b502:	b9 00 10 00 00       	mov    ecx,0x1000
c000b507:	50                   	push   eax
c000b508:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b50b:	0f af c3             	imul   eax,ebx
c000b50e:	05 ff 0f 00 00       	add    eax,0xfff
c000b513:	99                   	cdq    
c000b514:	f7 f9                	idiv   ecx
c000b516:	50                   	push   eax
c000b517:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b51b:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b521:	e8 26 91 00 00       	call   c001464c <VAS::lockPages(unsigned long, int)>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	8d 76 00             	lea    esi,[esi+0x0]
c000b52c:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b530:	74 0e                	je     c000b540 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b532:	83 ec 0c             	sub    esp,0xc
c000b535:	55                   	push   ebp
c000b536:	e8 9d fe ff ff       	call   c000b3d8 <VCache::invalidateReadBuffer()>
c000b53b:	83 c4 10             	add    esp,0x10
c000b53e:	66 90                	xchg   ax,ax
c000b540:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b544:	74 72                	je     c000b5b8 <VCache::write(unsigned long long, int, void*)+0x104>
c000b546:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b549:	89 c8                	mov    eax,ecx
c000b54b:	99                   	cdq    
c000b54c:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b54f:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b552:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b556:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b55a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b55e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b562:	31 f0                	xor    eax,esi
c000b564:	31 fa                	xor    edx,edi
c000b566:	09 d0                	or     eax,edx
c000b568:	75 42                	jne    c000b5ac <VCache::write(unsigned long long, int, void*)+0xf8>
c000b56a:	83 fb 01             	cmp    ebx,0x1
c000b56d:	75 3d                	jne    c000b5ac <VCache::write(unsigned long long, int, void*)+0xf8>
c000b56f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b572:	89 cf                	mov    edi,ecx
c000b574:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b57a:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b57e:	0f af f8             	imul   edi,eax
c000b581:	89 c1                	mov    ecx,eax
c000b583:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b586:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b588:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b58b:	40                   	inc    eax
c000b58c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b58f:	83 f8 50             	cmp    eax,0x50
c000b592:	0f 85 a8 00 00 00    	jne    c000b640 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b598:	83 ec 0c             	sub    esp,0xc
c000b59b:	55                   	push   ebp
c000b59c:	e8 47 fe ff ff       	call   c000b3e8 <VCache::writeWriteBuffer()>
c000b5a1:	83 c4 10             	add    esp,0x10
c000b5a4:	e9 97 00 00 00       	jmp    c000b640 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5a9:	8d 76 00             	lea    esi,[esi+0x0]
c000b5ac:	83 ec 0c             	sub    esp,0xc
c000b5af:	55                   	push   ebp
c000b5b0:	e8 33 fe ff ff       	call   c000b3e8 <VCache::writeWriteBuffer()>
c000b5b5:	83 c4 10             	add    esp,0x10
c000b5b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5bb:	83 fb 4f             	cmp    ebx,0x4f
c000b5be:	7f 20                	jg     c000b5e0 <VCache::write(unsigned long long, int, void*)+0x12c>
c000b5c0:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b5c3:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b5c6:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b5c9:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b5cd:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b5d0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b5d6:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b5da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5dc:	eb 62                	jmp    c000b640 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b5de:	66 90                	xchg   ax,ax
c000b5e0:	83 ec 0c             	sub    esp,0xc
c000b5e3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5e5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b5e9:	53                   	push   ebx
c000b5ea:	57                   	push   edi
c000b5eb:	56                   	push   esi
c000b5ec:	50                   	push   eax
c000b5ed:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b5f0:	83 c4 20             	add    esp,0x20
c000b5f3:	89 c6                	mov    esi,eax
c000b5f5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b5fa:	74 28                	je     c000b624 <VCache::write(unsigned long long, int, void*)+0x170>
c000b5fc:	b9 00 10 00 00       	mov    ecx,0x1000
c000b601:	52                   	push   edx
c000b602:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b606:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b60c:	99                   	cdq    
c000b60d:	f7 f9                	idiv   ecx
c000b60f:	50                   	push   eax
c000b610:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b614:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b61a:	e8 6f 8c 00 00       	call   c001428e <VAS::unlockPages(unsigned long, int)>
c000b61f:	83 c4 10             	add    esp,0x10
c000b622:	66 90                	xchg   ax,ax
c000b624:	e8 a7 b6 00 00       	call   c0016cd0 <KeRestorePreemption()>
c000b629:	85 f6                	test   esi,esi
c000b62b:	74 4b                	je     c000b678 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b62d:	83 ec 0c             	sub    esp,0xc
c000b630:	68 7c 38 02 c0       	push   0xc002387c
c000b635:	e8 2a b9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b63a:	83 c4 10             	add    esp,0x10
c000b63d:	eb 39                	jmp    c000b678 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b63f:	90                   	nop
c000b640:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b645:	74 29                	je     c000b670 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b647:	b9 00 10 00 00       	mov    ecx,0x1000
c000b64c:	50                   	push   eax
c000b64d:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b651:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b657:	99                   	cdq    
c000b658:	f7 f9                	idiv   ecx
c000b65a:	50                   	push   eax
c000b65b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b65f:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b665:	e8 24 8c 00 00       	call   c001428e <VAS::unlockPages(unsigned long, int)>
c000b66a:	83 c4 10             	add    esp,0x10
c000b66d:	8d 76 00             	lea    esi,[esi+0x0]
c000b670:	e8 5b b6 00 00       	call   c0016cd0 <KeRestorePreemption()>
c000b675:	31 f6                	xor    esi,esi
c000b677:	90                   	nop
c000b678:	83 c4 1c             	add    esp,0x1c
c000b67b:	89 f0                	mov    eax,esi
c000b67d:	5b                   	pop    ebx
c000b67e:	5e                   	pop    esi
c000b67f:	5f                   	pop    edi
c000b680:	5d                   	pop    ebp
c000b681:	c3                   	ret    

c000b682 <VCache::read(unsigned long long, int, void*)>:
c000b682:	55                   	push   ebp
c000b683:	57                   	push   edi
c000b684:	bf 00 10 00 00       	mov    edi,0x1000
c000b689:	56                   	push   esi
c000b68a:	53                   	push   ebx
c000b68b:	83 ec 2c             	sub    esp,0x2c
c000b68e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b692:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b696:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b69a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b69e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6a2:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b6a6:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b6aa:	e8 f9 b5 00 00       	call   c0016ca8 <KeDisablePreemption()>
c000b6af:	50                   	push   eax
c000b6b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b6b3:	0f af c6             	imul   eax,esi
c000b6b6:	05 ff 0f 00 00       	add    eax,0xfff
c000b6bb:	99                   	cdq    
c000b6bc:	f7 ff                	idiv   edi
c000b6be:	50                   	push   eax
c000b6bf:	55                   	push   ebp
c000b6c0:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b6c6:	e8 87 8b 00 00       	call   c0014252 <VAS::canLockPages(unsigned long, int)>
c000b6cb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b6cf:	83 c4 10             	add    esp,0x10
c000b6d2:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b6d7:	74 1f                	je     c000b6f8 <VCache::read(unsigned long long, int, void*)+0x76>
c000b6d9:	50                   	push   eax
c000b6da:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b6dd:	0f af c6             	imul   eax,esi
c000b6e0:	05 ff 0f 00 00       	add    eax,0xfff
c000b6e5:	99                   	cdq    
c000b6e6:	f7 ff                	idiv   edi
c000b6e8:	50                   	push   eax
c000b6e9:	55                   	push   ebp
c000b6ea:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b6f0:	e8 57 8f 00 00       	call   c001464c <VAS::lockPages(unsigned long, int)>
c000b6f5:	83 c4 10             	add    esp,0x10
c000b6f8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b6fc:	74 0e                	je     c000b70c <VCache::read(unsigned long long, int, void*)+0x8a>
c000b6fe:	83 ec 0c             	sub    esp,0xc
c000b701:	53                   	push   ebx
c000b702:	e8 e1 fc ff ff       	call   c000b3e8 <VCache::writeWriteBuffer()>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	66 90                	xchg   ax,ax
c000b70c:	83 fe 01             	cmp    esi,0x1
c000b70f:	0f 85 ef 00 00 00    	jne    c000b804 <VCache::read(unsigned long long, int, void*)+0x182>
c000b715:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000b718:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000b71f:	0f 85 df 00 00 00    	jne    c000b804 <VCache::read(unsigned long long, int, void*)+0x182>
c000b725:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b728:	89 fe                	mov    esi,edi
c000b72a:	f7 de                	neg    esi
c000b72c:	89 f0                	mov    eax,esi
c000b72e:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000b732:	c1 f8 1f             	sar    eax,0x1f
c000b735:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b739:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b73d:	89 f0                	mov    eax,esi
c000b73f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000b743:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000b747:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b74b:	89 f2                	mov    edx,esi
c000b74d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b752:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b756:	74 0c                	je     c000b764 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b758:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b75b:	75 07                	jne    c000b764 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b75d:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000b760:	74 4e                	je     c000b7b0 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b762:	66 90                	xchg   ax,ax
c000b764:	83 ec 0c             	sub    esp,0xc
c000b767:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b76b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b76e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b771:	8b 31                	mov    esi,DWORD PTR [ecx]
c000b773:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b776:	57                   	push   edi
c000b777:	52                   	push   edx
c000b778:	50                   	push   eax
c000b779:	51                   	push   ecx
c000b77a:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b77d:	83 c4 20             	add    esp,0x20
c000b780:	89 c7                	mov    edi,eax
c000b782:	85 c0                	test   eax,eax
c000b784:	74 2a                	je     c000b7b0 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b786:	83 ec 0c             	sub    esp,0xc
c000b789:	68 94 38 02 c0       	push   0xc0023894
c000b78e:	e8 d1 b7 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b793:	83 c4 10             	add    esp,0x10
c000b796:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b79b:	0f 84 b3 00 00 00    	je     c000b854 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b7a1:	51                   	push   ecx
c000b7a2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7a5:	05 ff 0f 00 00       	add    eax,0xfff
c000b7aa:	e9 8d 00 00 00       	jmp    c000b83c <VCache::read(unsigned long long, int, void*)+0x1ba>
c000b7af:	90                   	nop
c000b7b0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7b3:	89 ef                	mov    edi,ebp
c000b7b5:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b7bb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7be:	8d 70 ff             	lea    esi,[eax-0x1]
c000b7c1:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b7c5:	0f af f1             	imul   esi,ecx
c000b7c8:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b7cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b7cd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b7d2:	74 24                	je     c000b7f8 <VCache::read(unsigned long long, int, void*)+0x176>
c000b7d4:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7d9:	52                   	push   edx
c000b7da:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b7dd:	05 ff 0f 00 00       	add    eax,0xfff
c000b7e2:	99                   	cdq    
c000b7e3:	f7 f9                	idiv   ecx
c000b7e5:	50                   	push   eax
c000b7e6:	55                   	push   ebp
c000b7e7:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b7ed:	e8 9c 8a 00 00       	call   c001428e <VAS::unlockPages(unsigned long, int)>
c000b7f2:	83 c4 10             	add    esp,0x10
c000b7f5:	8d 76 00             	lea    esi,[esi+0x0]
c000b7f8:	e8 d3 b4 00 00       	call   c0016cd0 <KeRestorePreemption()>
c000b7fd:	31 ff                	xor    edi,edi
c000b7ff:	eb 5b                	jmp    c000b85c <VCache::read(unsigned long long, int, void*)+0x1da>
c000b801:	8d 76 00             	lea    esi,[esi+0x0]
c000b804:	83 ec 0c             	sub    esp,0xc
c000b807:	53                   	push   ebx
c000b808:	e8 cb fb ff ff       	call   c000b3d8 <VCache::invalidateReadBuffer()>
c000b80d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b810:	8b 10                	mov    edx,DWORD PTR [eax]
c000b812:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b815:	56                   	push   esi
c000b816:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b81a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b81e:	50                   	push   eax
c000b81f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b822:	83 c4 20             	add    esp,0x20
c000b825:	89 c7                	mov    edi,eax
c000b827:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b82c:	74 26                	je     c000b854 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b82e:	50                   	push   eax
c000b82f:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b833:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b839:	8d 76 00             	lea    esi,[esi+0x0]
c000b83c:	b9 00 10 00 00       	mov    ecx,0x1000
c000b841:	99                   	cdq    
c000b842:	f7 f9                	idiv   ecx
c000b844:	50                   	push   eax
c000b845:	55                   	push   ebp
c000b846:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b84c:	e8 3d 8a 00 00       	call   c001428e <VAS::unlockPages(unsigned long, int)>
c000b851:	83 c4 10             	add    esp,0x10
c000b854:	e8 77 b4 00 00       	call   c0016cd0 <KeRestorePreemption()>
c000b859:	8d 76 00             	lea    esi,[esi+0x0]
c000b85c:	83 c4 2c             	add    esp,0x2c
c000b85f:	89 f8                	mov    eax,edi
c000b861:	5b                   	pop    ebx
c000b862:	5e                   	pop    esi
c000b863:	5f                   	pop    edi
c000b864:	5d                   	pop    ebp
c000b865:	c3                   	ret    

c000b866 <Video::putrect(int, int, int, int, unsigned int)>:
c000b866:	55                   	push   ebp
c000b867:	57                   	push   edi
c000b868:	56                   	push   esi
c000b869:	53                   	push   ebx
c000b86a:	83 ec 1c             	sub    esp,0x1c
c000b86d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b871:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b875:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b879:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b87d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b881:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b885:	01 df                	add    edi,ebx
c000b887:	39 fb                	cmp    ebx,edi
c000b889:	7d 1f                	jge    c000b8aa <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b88b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b88f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b893:	7d 12                	jge    c000b8a7 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b895:	8b 16                	mov    edx,DWORD PTR [esi]
c000b897:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b89b:	53                   	push   ebx
c000b89c:	55                   	push   ebp
c000b89d:	45                   	inc    ebp
c000b89e:	56                   	push   esi
c000b89f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b8a2:	83 c4 10             	add    esp,0x10
c000b8a5:	eb e8                	jmp    c000b88f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b8a7:	43                   	inc    ebx
c000b8a8:	eb dd                	jmp    c000b887 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b8aa:	83 c4 1c             	add    esp,0x1c
c000b8ad:	5b                   	pop    ebx
c000b8ae:	5e                   	pop    esi
c000b8af:	5f                   	pop    edi
c000b8b0:	5d                   	pop    ebp
c000b8b1:	c3                   	ret    

c000b8b2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b8b2:	55                   	push   ebp
c000b8b3:	57                   	push   edi
c000b8b4:	31 ff                	xor    edi,edi
c000b8b6:	56                   	push   esi
c000b8b7:	53                   	push   ebx
c000b8b8:	83 ec 1c             	sub    esp,0x1c
c000b8bb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b8bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b8c3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b8ca:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b8cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8d3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b8d7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b8db:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b8de:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b8e2:	01 f9                	add    ecx,edi
c000b8e4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b8e8:	7d 2f                	jge    c000b919 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b8ea:	31 f6                	xor    esi,esi
c000b8ec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b8f0:	01 f2                	add    edx,esi
c000b8f2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b8f6:	7d 1a                	jge    c000b912 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b8f8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b8fb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b8fe:	46                   	inc    esi
c000b8ff:	51                   	push   ecx
c000b900:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b904:	52                   	push   edx
c000b905:	55                   	push   ebp
c000b906:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b909:	83 c4 10             	add    esp,0x10
c000b90c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b910:	eb da                	jmp    c000b8ec <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b912:	47                   	inc    edi
c000b913:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b917:	eb c5                	jmp    c000b8de <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b919:	83 c4 1c             	add    esp,0x1c
c000b91c:	5b                   	pop    ebx
c000b91d:	5e                   	pop    esi
c000b91e:	5f                   	pop    edi
c000b91f:	5d                   	pop    ebp
c000b920:	c3                   	ret    
c000b921:	90                   	nop

c000b922 <Video::blit(unsigned int*, int, int, int, int)>:
c000b922:	55                   	push   ebp
c000b923:	57                   	push   edi
c000b924:	56                   	push   esi
c000b925:	53                   	push   ebx
c000b926:	83 ec 1c             	sub    esp,0x1c
c000b929:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b92d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b931:	85 c0                	test   eax,eax
c000b933:	79 02                	jns    c000b937 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000b935:	31 c0                	xor    eax,eax
c000b937:	c1 e0 02             	shl    eax,0x2
c000b93a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b93e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b942:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b946:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000b94a:	39 d8                	cmp    eax,ebx
c000b94c:	7e 49                	jle    c000b997 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b94e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b954:	7c 41                	jl     c000b997 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b956:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b95a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b95e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b962:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000b966:	39 f9                	cmp    ecx,edi
c000b968:	7e 22                	jle    c000b98c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000b96a:	83 c5 04             	add    ebp,0x4
c000b96d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b973:	7c 14                	jl     c000b989 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000b975:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b977:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000b97a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b97e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b982:	56                   	push   esi
c000b983:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b986:	83 c4 10             	add    esp,0x10
c000b989:	47                   	inc    edi
c000b98a:	eb d2                	jmp    c000b95e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000b98c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b990:	43                   	inc    ebx
c000b991:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b995:	eb ab                	jmp    c000b942 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000b997:	83 c4 1c             	add    esp,0x1c
c000b99a:	5b                   	pop    ebx
c000b99b:	5e                   	pop    esi
c000b99c:	5f                   	pop    edi
c000b99d:	5d                   	pop    ebp
c000b99e:	c3                   	ret    
c000b99f:	90                   	nop

c000b9a0 <Video::clearScreen(unsigned int)>:
c000b9a0:	57                   	push   edi
c000b9a1:	56                   	push   esi
c000b9a2:	53                   	push   ebx
c000b9a3:	31 db                	xor    ebx,ebx
c000b9a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9a9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b9af:	7e 1f                	jle    c000b9d0 <Video::clearScreen(unsigned int)+0x30>
c000b9b1:	31 ff                	xor    edi,edi
c000b9b3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b9b9:	7e 12                	jle    c000b9cd <Video::clearScreen(unsigned int)+0x2d>
c000b9bb:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9c1:	53                   	push   ebx
c000b9c2:	57                   	push   edi
c000b9c3:	47                   	inc    edi
c000b9c4:	56                   	push   esi
c000b9c5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b9c8:	83 c4 10             	add    esp,0x10
c000b9cb:	eb e6                	jmp    c000b9b3 <Video::clearScreen(unsigned int)+0x13>
c000b9cd:	43                   	inc    ebx
c000b9ce:	eb d9                	jmp    c000b9a9 <Video::clearScreen(unsigned int)+0x9>
c000b9d0:	5b                   	pop    ebx
c000b9d1:	5e                   	pop    esi
c000b9d2:	5f                   	pop    edi
c000b9d3:	c3                   	ret    

c000b9d4 <Video::putpixel(int, int, unsigned int)>:
c000b9d4:	c7 44 24 04 cc 38 02 c0 	mov    DWORD PTR [esp+0x4],0xc00238cc
c000b9dc:	e9 31 46 00 00       	jmp    c0010012 <KePanic(char const*)>
c000b9e1:	90                   	nop

c000b9e2 <Video::readPixelApprox(int, int)>:
c000b9e2:	83 ec 18             	sub    esp,0x18
c000b9e5:	68 ed 38 02 c0       	push   0xc00238ed
c000b9ea:	e8 23 46 00 00       	call   c0010012 <KePanic(char const*)>
c000b9ef:	31 c0                	xor    eax,eax
c000b9f1:	83 c4 1c             	add    esp,0x1c
c000b9f4:	c3                   	ret    
c000b9f5:	90                   	nop

c000b9f6 <Video::Video(char const*)>:
c000b9f6:	83 ec 0c             	sub    esp,0xc
c000b9f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9fd:	83 ec 08             	sub    esp,0x8
c000ba00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba04:	50                   	push   eax
c000ba05:	e8 54 e1 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000ba0a:	83 c4 10             	add    esp,0x10
c000ba0d:	ba 90 39 02 c0       	mov    edx,0xc0023990
c000ba12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba16:	89 10                	mov    DWORD PTR [eax],edx
c000ba18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba1c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000ba26:	90                   	nop
c000ba27:	83 c4 0c             	add    esp,0xc
c000ba2a:	c3                   	ret    
c000ba2b:	90                   	nop

c000ba2c <Video::~Video()>:
c000ba2c:	83 ec 0c             	sub    esp,0xc
c000ba2f:	ba 90 39 02 c0       	mov    edx,0xc0023990
c000ba34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba38:	89 10                	mov    DWORD PTR [eax],edx
c000ba3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba3e:	83 ec 0c             	sub    esp,0xc
c000ba41:	50                   	push   eax
c000ba42:	e8 b7 de ff ff       	call   c00098fe <Device::~Device()>
c000ba47:	83 c4 10             	add    esp,0x10
c000ba4a:	90                   	nop
c000ba4b:	83 c4 0c             	add    esp,0xc
c000ba4e:	c3                   	ret    
c000ba4f:	90                   	nop

c000ba50 <Video::~Video()>:
c000ba50:	83 ec 0c             	sub    esp,0xc
c000ba53:	83 ec 0c             	sub    esp,0xc
c000ba56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba5a:	e8 cd ff ff ff       	call   c000ba2c <Video::~Video()>
c000ba5f:	83 c4 10             	add    esp,0x10
c000ba62:	83 ec 08             	sub    esp,0x8
c000ba65:	68 64 01 00 00       	push   0x164
c000ba6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba6e:	e8 e0 18 00 00       	call   c000d353 <operator delete(void*, unsigned long)>
c000ba73:	83 c4 10             	add    esp,0x10
c000ba76:	83 c4 0c             	add    esp,0xc
c000ba79:	c3                   	ret    

c000ba7a <Video::isMonochrome()>:
c000ba7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba7e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ba84:	c3                   	ret    
c000ba85:	90                   	nop

c000ba86 <Video::getWidth()>:
c000ba86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba8a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ba90:	c3                   	ret    
c000ba91:	90                   	nop

c000ba92 <Video::getHeight()>:
c000ba92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba96:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba9c:	c3                   	ret    
c000ba9d:	90                   	nop

c000ba9e <Video::drawCursor(int, int, unsigned int*, int)>:
c000ba9e:	55                   	push   ebp
c000ba9f:	57                   	push   edi
c000baa0:	56                   	push   esi
c000baa1:	53                   	push   ebx
c000baa2:	83 ec 2c             	sub    esp,0x2c
c000baa5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000baa9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000baad:	83 f8 01             	cmp    eax,0x1
c000bab0:	19 c9                	sbb    ecx,ecx
c000bab2:	31 db                	xor    ebx,ebx
c000bab4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000bab8:	89 cd                	mov    ebp,ecx
c000baba:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000bac2:	f7 d5                	not    ebp
c000bac4:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000baca:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bace:	01 d8                	add    eax,ebx
c000bad0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bad4:	56                   	push   esi
c000bad5:	e8 b8 ff ff ff       	call   c000ba92 <Video::getHeight()>
c000bada:	59                   	pop    ecx
c000badb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000badf:	7e 70                	jle    c000bb51 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000bae1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000bae5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000bae9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000baec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000baf0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000baf4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000bafb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baff:	89 f8                	mov    eax,edi
c000bb01:	83 c0 20             	add    eax,0x20
c000bb04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb08:	56                   	push   esi
c000bb09:	e8 78 ff ff ff       	call   c000ba86 <Video::getWidth()>
c000bb0e:	5a                   	pop    edx
c000bb0f:	39 c7                	cmp    edi,eax
c000bb11:	7d 34                	jge    c000bb47 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000bb13:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000bb18:	74 05                	je     c000bb1f <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000bb1a:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb1c:	55                   	push   ebp
c000bb1d:	eb 0d                	jmp    c000bb2c <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000bb1f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000bb24:	74 12                	je     c000bb38 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000bb26:	8b 06                	mov    eax,DWORD PTR [esi]
c000bb28:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb30:	57                   	push   edi
c000bb31:	56                   	push   esi
c000bb32:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bb35:	83 c4 10             	add    esp,0x10
c000bb38:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bb3c:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bb40:	47                   	inc    edi
c000bb41:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000bb45:	75 c1                	jne    c000bb08 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bb47:	43                   	inc    ebx
c000bb48:	83 fb 20             	cmp    ebx,0x20
c000bb4b:	0f 85 79 ff ff ff    	jne    c000baca <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bb51:	83 c4 2c             	add    esp,0x2c
c000bb54:	5b                   	pop    ebx
c000bb55:	5e                   	pop    esi
c000bb56:	5f                   	pop    edi
c000bb57:	5d                   	pop    ebp
c000bb58:	c3                   	ret    
c000bb59:	90                   	nop

c000bb5a <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000bb5a:	55                   	push   ebp
c000bb5b:	57                   	push   edi
c000bb5c:	56                   	push   esi
c000bb5d:	53                   	push   ebx
c000bb5e:	83 ec 48             	sub    esp,0x48
c000bb61:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000bb65:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000bb69:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bb6d:	c1 e0 08             	shl    eax,0x8
c000bb70:	01 d0                	add    eax,edx
c000bb72:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb76:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb7a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bb7e:	c1 e0 08             	shl    eax,0x8
c000bb81:	01 d0                	add    eax,edx
c000bb83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bb8b:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000bb90:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bb94:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb98:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bb9f:	50                   	push   eax
c000bba0:	e8 26 41 00 00       	call   c000fccb <malloc>
c000bba5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bba9:	83 c4 10             	add    esp,0x10
c000bbac:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bbb1:	75 10                	jne    c000bbc3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000bbb3:	83 ec 0c             	sub    esp,0xc
c000bbb6:	68 18 39 02 c0       	push   0xc0023918
c000bbbb:	e8 52 44 00 00       	call   c0010012 <KePanic(char const*)>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	51                   	push   ecx
c000bbc4:	51                   	push   ecx
c000bbc5:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bbc9:	50                   	push   eax
c000bbca:	68 28 39 02 c0       	push   0xc0023928
c000bbcf:	e8 90 b3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000bbd4:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bbd7:	83 e0 20             	and    eax,0x20
c000bbda:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000bbde:	85 c0                	test   eax,eax
c000bbe0:	5e                   	pop    esi
c000bbe1:	0f 94 c0             	sete   al
c000bbe4:	5f                   	pop    edi
c000bbe5:	0f b6 c0             	movzx  eax,al
c000bbe8:	be 12 00 00 00       	mov    esi,0x12
c000bbed:	50                   	push   eax
c000bbee:	68 32 39 02 c0       	push   0xc0023932
c000bbf3:	e8 6c b3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000bbf8:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 d0                	mov    eax,edx
c000bc01:	85 d2                	test   edx,edx
c000bc03:	74 11                	je     c000bc16 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000bc05:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000bc09:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bc0d:	c1 fe 03             	sar    esi,0x3
c000bc10:	0f af f1             	imul   esi,ecx
c000bc13:	83 c6 12             	add    esi,0x12
c000bc16:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bc1b:	74 07                	je     c000bc24 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000bc1d:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000bc22:	75 12                	jne    c000bc36 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000bc24:	83 ec 0c             	sub    esp,0xc
c000bc27:	68 40 39 02 c0       	push   0xc0023940
c000bc2c:	e8 33 b3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000bc31:	e9 a0 02 00 00       	jmp    c000bed6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000bc36:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bc3a:	83 f9 02             	cmp    ecx,0x2
c000bc3d:	74 0e                	je     c000bc4d <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000bc3f:	83 f9 0a             	cmp    ecx,0xa
c000bc42:	0f 84 c8 00 00 00    	je     c000bd10 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000bc48:	e9 72 02 00 00       	jmp    c000bebf <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000bc4d:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bc52:	75 0e                	jne    c000bc62 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc54:	84 c0                	test   al,al
c000bc56:	75 0a                	jne    c000bc62 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bc58:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bc5b:	83 e8 18             	sub    eax,0x18
c000bc5e:	a8 f7                	test   al,0xf7
c000bc60:	74 0d                	je     c000bc6f <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000bc62:	83 ec 0c             	sub    esp,0xc
c000bc65:	68 55 39 02 c0       	push   0xc0023955
c000bc6a:	e9 58 02 00 00       	jmp    c000bec7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bc6f:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000bc74:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bc7c:	31 c0                	xor    eax,eax
c000bc7e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc82:	89 c7                	mov    edi,eax
c000bc84:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bc8c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bc91:	75 15                	jne    c000bca8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bc93:	99                   	cdq    
c000bc94:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bc98:	85 d2                	test   edx,edx
c000bc9a:	75 0c                	jne    c000bca8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bc9c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bca0:	29 c7                	sub    edi,eax
c000bca2:	4f                   	dec    edi
c000bca3:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000bca8:	31 d2                	xor    edx,edx
c000bcaa:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bcae:	75 08                	jne    c000bcb8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000bcb0:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000bcb5:	c1 e2 18             	shl    edx,0x18
c000bcb8:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000bcbd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bcc1:	c1 e1 10             	shl    ecx,0x10
c000bcc4:	8d 47 01             	lea    eax,[edi+0x1]
c000bcc7:	89 cd                	mov    ebp,ecx
c000bcc9:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000bcce:	c1 e1 08             	shl    ecx,0x8
c000bcd1:	09 e9                	or     ecx,ebp
c000bcd3:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bcd7:	09 e9                	or     ecx,ebp
c000bcd9:	09 d1                	or     ecx,edx
c000bcdb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bcdf:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000bce2:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bce6:	c1 fa 03             	sar    edx,0x3
c000bce9:	01 d6                	add    esi,edx
c000bceb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bcef:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bcf3:	7e 04                	jle    c000bcf9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000bcf5:	89 c7                	mov    edi,eax
c000bcf7:	eb 93                	jmp    c000bc8c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000bcf9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bcfd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd01:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bd05:	0f 8f 77 ff ff ff    	jg     c000bc82 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000bd0b:	e9 d3 01 00 00       	jmp    c000bee3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd10:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bd15:	75 0e                	jne    c000bd25 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd17:	85 d2                	test   edx,edx
c000bd19:	75 0a                	jne    c000bd25 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bd1b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bd1e:	83 e8 18             	sub    eax,0x18
c000bd21:	a8 f7                	test   al,0xf7
c000bd23:	74 0d                	je     c000bd32 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000bd25:	83 ec 0c             	sub    esp,0xc
c000bd28:	68 63 39 02 c0       	push   0xc0023963
c000bd2d:	e9 95 01 00 00       	jmp    c000bec7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bd32:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd3a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bd42:	31 c9                	xor    ecx,ecx
c000bd44:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd48:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000bd4c:	0f 8e 91 01 00 00    	jle    c000bee3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd52:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000bd56:	0f 8d 87 01 00 00    	jge    c000bee3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bd5c:	8d 46 01             	lea    eax,[esi+0x1]
c000bd5f:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bd63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bd67:	83 fd 7f             	cmp    ebp,0x7f
c000bd6a:	89 e8                	mov    eax,ebp
c000bd6c:	0f 8e 9d 00 00 00    	jle    c000be0f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000bd72:	83 e0 7f             	and    eax,0x7f
c000bd75:	31 d2                	xor    edx,edx
c000bd77:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd7b:	40                   	inc    eax
c000bd7c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bd80:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd84:	75 0a                	jne    c000bd90 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000bd86:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000bd8b:	89 ea                	mov    edx,ebp
c000bd8d:	c1 e2 18             	shl    edx,0x18
c000bd90:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000bd95:	c1 e0 10             	shl    eax,0x10
c000bd98:	89 c7                	mov    edi,eax
c000bd9a:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000bd9f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bda3:	c1 e0 08             	shl    eax,0x8
c000bda6:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bdaa:	09 f8                	or     eax,edi
c000bdac:	31 f6                	xor    esi,esi
c000bdae:	09 c5                	or     ebp,eax
c000bdb0:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000bdb5:	09 d5                	or     ebp,edx
c000bdb7:	85 ff                	test   edi,edi
c000bdb9:	75 1d                	jne    c000bdd8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bdbb:	89 c8                	mov    eax,ecx
c000bdbd:	99                   	cdq    
c000bdbe:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bdc2:	85 d2                	test   edx,edx
c000bdc4:	75 12                	jne    c000bdd8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bdc6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdca:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000bdce:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bdd2:	49                   	dec    ecx
c000bdd3:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000bdd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bddc:	8d 51 01             	lea    edx,[ecx+0x1]
c000bddf:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000bde2:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000bde6:	8d 46 01             	lea    eax,[esi+0x1]
c000bde9:	7e 06                	jle    c000bdf1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000bdeb:	89 c6                	mov    esi,eax
c000bded:	89 d1                	mov    ecx,edx
c000bdef:	eb c6                	jmp    c000bdb7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000bdf1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000bdf5:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bdf9:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000bdfd:	c1 f8 03             	sar    eax,0x3
c000be00:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000be04:	89 d1                	mov    ecx,edx
c000be06:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000be0a:	e9 35 ff ff ff       	jmp    c000bd44 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000be0f:	8d 45 01             	lea    eax,[ebp+0x1]
c000be12:	31 f6                	xor    esi,esi
c000be14:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be18:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000be1d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be21:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000be26:	75 1d                	jne    c000be45 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be28:	89 c8                	mov    eax,ecx
c000be2a:	99                   	cdq    
c000be2b:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000be2f:	85 d2                	test   edx,edx
c000be31:	75 12                	jne    c000be45 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000be33:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000be37:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000be3b:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000be3f:	49                   	dec    ecx
c000be40:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000be45:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000be4d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000be51:	75 10                	jne    c000be63 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000be53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be57:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000be5c:	c1 e7 18             	shl    edi,0x18
c000be5f:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000be63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be67:	8d 51 01             	lea    edx,[ecx+0x1]
c000be6a:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000be6f:	c1 e0 10             	shl    eax,0x10
c000be72:	89 c7                	mov    edi,eax
c000be74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be78:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000be7d:	c1 e0 08             	shl    eax,0x8
c000be80:	09 f8                	or     eax,edi
c000be82:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000be86:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000be8a:	09 f8                	or     eax,edi
c000be8c:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000be90:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000be94:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000be97:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be9b:	c1 f8 03             	sar    eax,0x3
c000be9e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000bea2:	8d 46 01             	lea    eax,[esi+0x1]
c000bea5:	39 f5                	cmp    ebp,esi
c000bea7:	7e 09                	jle    c000beb2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000bea9:	89 c6                	mov    esi,eax
c000beab:	89 d1                	mov    ecx,edx
c000bead:	e9 6f ff ff ff       	jmp    c000be21 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000beb2:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000beb6:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000beba:	e9 45 ff ff ff       	jmp    c000be04 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000bebf:	52                   	push   edx
c000bec0:	52                   	push   edx
c000bec1:	51                   	push   ecx
c000bec2:	68 72 39 02 c0       	push   0xc0023972
c000bec7:	e8 98 b0 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000becc:	58                   	pop    eax
c000becd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bed1:	e8 05 3e 00 00       	call   c000fcdb <free>
c000bed6:	83 c4 10             	add    esp,0x10
c000bed9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bee1:	eb 14                	jmp    c000bef7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000bee3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bee7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000beeb:	89 18                	mov    DWORD PTR [eax],ebx
c000beed:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000bef1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bef5:	89 18                	mov    DWORD PTR [eax],ebx
c000bef7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000befb:	83 c4 3c             	add    esp,0x3c
c000befe:	5b                   	pop    ebx
c000beff:	5e                   	pop    esi
c000bf00:	5f                   	pop    edi
c000bf01:	5d                   	pop    ebp
c000bf02:	c3                   	ret    
c000bf03:	90                   	nop

c000bf04 <Video::putTGA(int, int, unsigned char*, int)>:
c000bf04:	55                   	push   ebp
c000bf05:	57                   	push   edi
c000bf06:	56                   	push   esi
c000bf07:	53                   	push   ebx
c000bf08:	83 ec 28             	sub    esp,0x28
c000bf0b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000bf0f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf13:	50                   	push   eax
c000bf14:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bf18:	50                   	push   eax
c000bf19:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf1d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bf21:	57                   	push   edi
c000bf22:	e8 33 fc ff ff       	call   c000bb5a <Video::tgaParse(unsigned char*, int, int*, int*)>
c000bf27:	83 c4 20             	add    esp,0x20
c000bf2a:	85 c0                	test   eax,eax
c000bf2c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bf30:	74 3a                	je     c000bf6c <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf32:	89 c6                	mov    esi,eax
c000bf34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf38:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bf3c:	39 d8                	cmp    eax,ebx
c000bf3e:	7e 2c                	jle    c000bf6c <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bf40:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bf44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf48:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bf4c:	39 e8                	cmp    eax,ebp
c000bf4e:	7e 19                	jle    c000bf69 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000bf50:	83 c6 04             	add    esi,0x4
c000bf53:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bf56:	85 c0                	test   eax,eax
c000bf58:	79 0c                	jns    c000bf66 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000bf5a:	8b 17                	mov    edx,DWORD PTR [edi]
c000bf5c:	50                   	push   eax
c000bf5d:	53                   	push   ebx
c000bf5e:	55                   	push   ebp
c000bf5f:	57                   	push   edi
c000bf60:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bf63:	83 c4 10             	add    esp,0x10
c000bf66:	45                   	inc    ebp
c000bf67:	eb db                	jmp    c000bf44 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bf69:	43                   	inc    ebx
c000bf6a:	eb c8                	jmp    c000bf34 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000bf6c:	83 c4 1c             	add    esp,0x1c
c000bf6f:	5b                   	pop    ebx
c000bf70:	5e                   	pop    esi
c000bf71:	5f                   	pop    edi
c000bf72:	5d                   	pop    ebp
c000bf73:	c3                   	ret    

c000bf74 <ACPI::close(int, int, void*)>:
c000bf74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf79:	c3                   	ret    
c000bf7a:	66 90                	xchg   ax,ax

c000bf7c <loadACPITables(unsigned char*)>:
c000bf7c:	57                   	push   edi
c000bf7d:	56                   	push   esi
c000bf7e:	53                   	push   ebx
c000bf7f:	83 ec 60             	sub    esp,0x60
c000bf82:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bf87:	0f 84 43 02 00 00    	je     c000c1d0 <loadACPITables(unsigned char*)+0x254>
c000bf8d:	a0 80 bd 02 c0       	mov    al,ds:0xc002bd80
c000bf92:	0f b6 c0             	movzx  eax,al
c000bf95:	85 c0                	test   eax,eax
c000bf97:	74 7b                	je     c000c014 <loadACPITables(unsigned char*)+0x98>
c000bf99:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf9d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bfa1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bfa5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfa8:	83 e8 24             	sub    eax,0x24
c000bfab:	c1 e8 03             	shr    eax,0x3
c000bfae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfb2:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bfba:	66 90                	xchg   ax,ax
c000bfbc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfc0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bfc4:	0f 8d ba 00 00 00    	jge    c000c084 <loadACPITables(unsigned char*)+0x108>
c000bfca:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfce:	83 c0 24             	add    eax,0x24
c000bfd1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfd5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bfd9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bfdd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bfe1:	c1 e0 03             	shl    eax,0x3
c000bfe4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000bfe8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bfec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bfef:	8b 00                	mov    eax,DWORD PTR [eax]
c000bff1:	89 c1                	mov    ecx,eax
c000bff3:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000bff8:	8d 50 01             	lea    edx,[eax+0x1]
c000bffb:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000c001:	89 ca                	mov    edx,ecx
c000c003:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c00a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000c00f:	eb ab                	jmp    c000bfbc <loadACPITables(unsigned char*)+0x40>
c000c011:	8d 76 00             	lea    esi,[esi+0x0]
c000c014:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c018:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c01c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c020:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c023:	83 e8 24             	sub    eax,0x24
c000c026:	c1 e8 02             	shr    eax,0x2
c000c029:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c02d:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000c035:	8d 76 00             	lea    esi,[esi+0x0]
c000c038:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c03c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000c040:	7d 42                	jge    c000c084 <loadACPITables(unsigned char*)+0x108>
c000c042:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000c046:	83 c0 24             	add    eax,0x24
c000c049:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c04d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c051:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c055:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000c059:	c1 e0 02             	shl    eax,0x2
c000c05c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000c060:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c064:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c066:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c06b:	8d 50 01             	lea    edx,[eax+0x1]
c000c06e:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000c074:	89 ca                	mov    edx,ecx
c000c076:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c07d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c082:	eb b4                	jmp    c000c038 <loadACPITables(unsigned char*)+0xbc>
c000c084:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c08c:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c091:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c095:	0f 8d 39 01 00 00    	jge    c000c1d4 <loadACPITables(unsigned char*)+0x258>
c000c09b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c09f:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c0a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c0b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0b6:	25 ff 0f 00 00       	and    eax,0xfff
c000c0bb:	89 c6                	mov    esi,eax
c000c0bd:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c0c3:	83 ec 0c             	sub    esp,0xc
c000c0c6:	6a 01                	push   0x1
c000c0c8:	e8 30 74 00 00       	call   c00134fd <Virt::allocateKernelVirtualPages(int)>
c000c0cd:	83 c4 10             	add    esp,0x10
c000c0d0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c0d4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c0da:	83 ec 0c             	sub    esp,0xc
c000c0dd:	6a 01                	push   0x1
c000c0df:	6a 01                	push   0x1
c000c0e1:	50                   	push   eax
c000c0e2:	52                   	push   edx
c000c0e3:	53                   	push   ebx
c000c0e4:	e8 e1 7c 00 00       	call   c0013dca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c0e9:	83 c4 20             	add    esp,0x20
c000c0ec:	09 f0                	or     eax,esi
c000c0ee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0f2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c0f6:	c1 e0 03             	shl    eax,0x3
c000c0f9:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c0fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c102:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c106:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c10a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c112:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c116:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c11a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c11e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c122:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c126:	89 c6                	mov    esi,eax
c000c128:	89 d7                	mov    edi,edx
c000c12a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c12c:	89 c8                	mov    eax,ecx
c000c12e:	89 fa                	mov    edx,edi
c000c130:	89 f3                	mov    ebx,esi
c000c132:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c136:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c13a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c142:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c145:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c149:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c14d:	05 00 10 00 00       	add    eax,0x1000
c000c152:	c1 e8 0c             	shr    eax,0xc
c000c155:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c159:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c15d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c161:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c165:	25 ff 0f 00 00       	and    eax,0xfff
c000c16a:	89 c6                	mov    esi,eax
c000c16c:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c172:	83 ec 0c             	sub    esp,0xc
c000c175:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c179:	e8 7f 73 00 00       	call   c00134fd <Virt::allocateKernelVirtualPages(int)>
c000c17e:	83 c4 10             	add    esp,0x10
c000c181:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c185:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c18b:	83 ec 0c             	sub    esp,0xc
c000c18e:	6a 01                	push   0x1
c000c190:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c194:	50                   	push   eax
c000c195:	52                   	push   edx
c000c196:	53                   	push   ebx
c000c197:	e8 2e 7c 00 00       	call   c0013dca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c19c:	83 c4 20             	add    esp,0x20
c000c19f:	09 f0                	or     eax,esi
c000c1a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c1a9:	83 ec 0c             	sub    esp,0xc
c000c1ac:	50                   	push   eax
c000c1ad:	e8 53 76 00 00       	call   c0013805 <Virt::freeKernelVirtualPages(unsigned long)>
c000c1b2:	83 c4 10             	add    esp,0x10
c000c1b5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c1b9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c1bd:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c1c4:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c1c9:	e9 be fe ff ff       	jmp    c000c08c <loadACPITables(unsigned char*)+0x110>
c000c1ce:	66 90                	xchg   ax,ax
c000c1d0:	90                   	nop
c000c1d1:	8d 76 00             	lea    esi,[esi+0x0]
c000c1d4:	83 c4 60             	add    esp,0x60
c000c1d7:	5b                   	pop    ebx
c000c1d8:	5e                   	pop    esi
c000c1d9:	5f                   	pop    edi
c000c1da:	c3                   	ret    
c000c1db:	90                   	nop

c000c1dc <findRSDT(unsigned char*)>:
c000c1dc:	57                   	push   edi
c000c1dd:	56                   	push   esi
c000c1de:	53                   	push   ebx
c000c1df:	83 ec 50             	sub    esp,0x50
c000c1e2:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c1e7:	85 c0                	test   eax,eax
c000c1e9:	75 0d                	jne    c000c1f8 <findRSDT(unsigned char*)+0x1c>
c000c1eb:	b8 00 00 00 00       	mov    eax,0x0
c000c1f0:	e9 2b 01 00 00       	jmp    c000c320 <findRSDT(unsigned char*)+0x144>
c000c1f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c1f8:	89 e0                	mov    eax,esp
c000c1fa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c1fe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c202:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c206:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c20e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c212:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c216:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c21a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c21e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c222:	89 c6                	mov    esi,eax
c000c224:	89 d7                	mov    edi,edx
c000c226:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c228:	89 c8                	mov    eax,ecx
c000c22a:	89 fa                	mov    edx,edi
c000c22c:	89 f3                	mov    ebx,esi
c000c22e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c232:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c236:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c23a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c23e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c242:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c24a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c24e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c252:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c25a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c25e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c262:	25 ff 0f 00 00       	and    eax,0xfff
c000c267:	89 c6                	mov    esi,eax
c000c269:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c26f:	83 ec 0c             	sub    esp,0xc
c000c272:	6a 02                	push   0x2
c000c274:	e8 84 72 00 00       	call   c00134fd <Virt::allocateKernelVirtualPages(int)>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c280:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c286:	83 ec 0c             	sub    esp,0xc
c000c289:	6a 01                	push   0x1
c000c28b:	6a 02                	push   0x2
c000c28d:	50                   	push   eax
c000c28e:	52                   	push   edx
c000c28f:	53                   	push   ebx
c000c290:	e8 35 7b 00 00       	call   c0013dca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c295:	83 c4 20             	add    esp,0x20
c000c298:	09 f0                	or     eax,esi
c000c29a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c29e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2a2:	25 ff 0f 00 00       	and    eax,0xfff
c000c2a7:	89 c6                	mov    esi,eax
c000c2a9:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c2af:	83 ec 0c             	sub    esp,0xc
c000c2b2:	6a 02                	push   0x2
c000c2b4:	e8 44 72 00 00       	call   c00134fd <Virt::allocateKernelVirtualPages(int)>
c000c2b9:	83 c4 10             	add    esp,0x10
c000c2bc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c2c0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c2c6:	83 ec 0c             	sub    esp,0xc
c000c2c9:	6a 01                	push   0x1
c000c2cb:	6a 02                	push   0x2
c000c2cd:	50                   	push   eax
c000c2ce:	52                   	push   edx
c000c2cf:	53                   	push   ebx
c000c2d0:	e8 f5 7a 00 00       	call   c0013dca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2d5:	83 c4 20             	add    esp,0x20
c000c2d8:	09 f0                	or     eax,esi
c000c2da:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c2de:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2e3:	85 c0                	test   eax,eax
c000c2e5:	75 11                	jne    c000c2f8 <findRSDT(unsigned char*)+0x11c>
c000c2e7:	c6 05 80 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bd80,0x0
c000c2ee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2f2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2f6:	eb 24                	jmp    c000c31c <findRSDT(unsigned char*)+0x140>
c000c2f8:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c2fd:	83 f8 02             	cmp    eax,0x2
c000c300:	75 12                	jne    c000c314 <findRSDT(unsigned char*)+0x138>
c000c302:	c6 05 80 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd80,0x1
c000c309:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c30d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c311:	eb 09                	jmp    c000c31c <findRSDT(unsigned char*)+0x140>
c000c313:	90                   	nop
c000c314:	b8 00 00 00 00       	mov    eax,0x0
c000c319:	eb 05                	jmp    c000c320 <findRSDT(unsigned char*)+0x144>
c000c31b:	90                   	nop
c000c31c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c320:	83 c4 50             	add    esp,0x50
c000c323:	5b                   	pop    ebx
c000c324:	5e                   	pop    esi
c000c325:	5f                   	pop    edi
c000c326:	c3                   	ret    
c000c327:	90                   	nop

c000c328 <findDataTable(unsigned char*, char*)>:
c000c328:	83 ec 1c             	sub    esp,0x1c
c000c32b:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c330:	75 0a                	jne    c000c33c <findDataTable(unsigned char*, char*)+0x14>
c000c332:	b8 00 00 00 00       	mov    eax,0x0
c000c337:	eb 5f                	jmp    c000c398 <findDataTable(unsigned char*, char*)+0x70>
c000c339:	8d 76 00             	lea    esi,[esi+0x0]
c000c33c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c344:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c349:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c34d:	7d 41                	jge    c000c390 <findDataTable(unsigned char*, char*)+0x68>
c000c34f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c353:	c1 e0 03             	shl    eax,0x3
c000c356:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c35b:	83 ec 04             	sub    esp,0x4
c000c35e:	6a 04                	push   0x4
c000c360:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c364:	50                   	push   eax
c000c365:	e8 16 40 ff ff       	call   c0000380 <memcmp>
c000c36a:	83 c4 10             	add    esp,0x10
c000c36d:	85 c0                	test   eax,eax
c000c36f:	0f 94 c0             	sete   al
c000c372:	0f b6 c0             	movzx  eax,al
c000c375:	85 c0                	test   eax,eax
c000c377:	74 0f                	je     c000c388 <findDataTable(unsigned char*, char*)+0x60>
c000c379:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c37d:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c384:	eb 12                	jmp    c000c398 <findDataTable(unsigned char*, char*)+0x70>
c000c386:	66 90                	xchg   ax,ax
c000c388:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c38d:	eb b5                	jmp    c000c344 <findDataTable(unsigned char*, char*)+0x1c>
c000c38f:	90                   	nop
c000c390:	b8 00 00 00 00       	mov    eax,0x0
c000c395:	8d 76 00             	lea    esi,[esi+0x0]
c000c398:	83 c4 1c             	add    esp,0x1c
c000c39b:	c3                   	ret    

c000c39c <scanMADT()>:
c000c39c:	53                   	push   ebx
c000c39d:	83 ec 38             	sub    esp,0x38
c000c3a0:	c7 05 88 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd88,0x0
c000c3aa:	c7 05 84 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd84,0x0
c000c3b4:	e8 5b d4 00 00       	call   c0019814 <HalFindRSDP()>
c000c3b9:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c000c3be:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c3c3:	85 c0                	test   eax,eax
c000c3c5:	0f 84 11 04 00 00    	je     c000c7dc <scanMADT()+0x440>
c000c3cb:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c3d0:	83 ec 0c             	sub    esp,0xc
c000c3d3:	50                   	push   eax
c000c3d4:	e8 03 fe ff ff       	call   c000c1dc <findRSDT(unsigned char*)>
c000c3d9:	83 c4 10             	add    esp,0x10
c000c3dc:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c000c3e1:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c3e6:	85 c0                	test   eax,eax
c000c3e8:	0f 84 f2 03 00 00    	je     c000c7e0 <scanMADT()+0x444>
c000c3ee:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c3f3:	83 ec 0c             	sub    esp,0xc
c000c3f6:	50                   	push   eax
c000c3f7:	e8 80 fb ff ff       	call   c000bf7c <loadACPITables(unsigned char*)>
c000c3fc:	83 c4 10             	add    esp,0x10
c000c3ff:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c404:	83 ec 08             	sub    esp,0x8
c000c407:	68 d4 39 02 c0       	push   0xc00239d4
c000c40c:	50                   	push   eax
c000c40d:	e8 16 ff ff ff       	call   c000c328 <findDataTable(unsigned char*, char*)>
c000c412:	83 c4 10             	add    esp,0x10
c000c415:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c419:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c41e:	0f 84 c0 03 00 00    	je     c000c7e4 <scanMADT()+0x448>
c000c424:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c42c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c430:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c433:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c437:	0f 87 af 03 00 00    	ja     c000c7ec <scanMADT()+0x450>
c000c43d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c445:	0f 87 a1 03 00 00    	ja     c000c7ec <scanMADT()+0x450>
c000c44b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c44f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c453:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c457:	8d 50 01             	lea    edx,[eax+0x1]
c000c45a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c45e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c462:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c466:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c46a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c46e:	8d 50 01             	lea    edx,[eax+0x1]
c000c471:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c475:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c479:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c47d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c481:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c486:	83 f8 02             	cmp    eax,0x2
c000c489:	0f 86 59 03 00 00    	jbe    c000c7e8 <scanMADT()+0x44c>
c000c48f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c494:	85 c0                	test   eax,eax
c000c496:	75 58                	jne    c000c4f0 <scanMADT()+0x154>
c000c498:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c49c:	8d 50 01             	lea    edx,[eax+0x1]
c000c49f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a3:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c4a9:	0f b6 d2             	movzx  edx,dl
c000c4ac:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4b0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4b4:	88 82 c0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4040],al
c000c4ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4be:	8d 50 01             	lea    edx,[eax+0x1]
c000c4c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c5:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c4cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c4ce:	88 0d 80 bf 02 c0    	mov    BYTE PTR ds:0xc002bf80,cl
c000c4d4:	0f b6 d2             	movzx  edx,dl
c000c4d7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4db:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4df:	88 82 a0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4060],al
c000c4e5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c4ea:	e9 d9 02 00 00       	jmp    c000c7c8 <scanMADT()+0x42c>
c000c4ef:	90                   	nop
c000c4f0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c4f5:	83 f8 01             	cmp    eax,0x1
c000c4f8:	0f 85 1a 01 00 00    	jne    c000c618 <scanMADT()+0x27c>
c000c4fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c502:	8d 50 01             	lea    edx,[eax+0x1]
c000c505:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c509:	8a 15 40 be 02 c0    	mov    dl,BYTE PTR ds:0xc002be40
c000c50f:	0f b6 d2             	movzx  edx,dl
c000c512:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c516:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c51a:	88 82 60 be 02 c0    	mov    BYTE PTR [edx-0x3ffd41a0],al
c000c520:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c525:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c529:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c52d:	01 d0                	add    eax,edx
c000c52f:	83 c0 2c             	add    eax,0x2c
c000c532:	8a 00                	mov    al,BYTE PTR [eax]
c000c534:	0f b6 d0             	movzx  edx,al
c000c537:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c53b:	8d 48 01             	lea    ecx,[eax+0x1]
c000c53e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c542:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c546:	0f b6 c0             	movzx  eax,al
c000c549:	c1 e0 08             	shl    eax,0x8
c000c54c:	89 d1                	mov    ecx,edx
c000c54e:	09 c1                	or     ecx,eax
c000c550:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c554:	8d 50 02             	lea    edx,[eax+0x2]
c000c557:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c55b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c55f:	0f b6 c0             	movzx  eax,al
c000c562:	c1 e0 10             	shl    eax,0x10
c000c565:	09 c1                	or     ecx,eax
c000c567:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c56b:	8d 50 03             	lea    edx,[eax+0x3]
c000c56e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c572:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c576:	0f b6 c0             	movzx  eax,al
c000c579:	c1 e0 18             	shl    eax,0x18
c000c57c:	09 c1                	or     ecx,eax
c000c57e:	89 ca                	mov    edx,ecx
c000c580:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c585:	0f b6 c0             	movzx  eax,al
c000c588:	89 14 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],edx
c000c58f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c594:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c598:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c59c:	01 d0                	add    eax,edx
c000c59e:	83 c0 2c             	add    eax,0x2c
c000c5a1:	8a 00                	mov    al,BYTE PTR [eax]
c000c5a3:	0f b6 d0             	movzx  edx,al
c000c5a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5aa:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5b1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c5b5:	0f b6 c0             	movzx  eax,al
c000c5b8:	c1 e0 08             	shl    eax,0x8
c000c5bb:	89 d1                	mov    ecx,edx
c000c5bd:	09 c1                	or     ecx,eax
c000c5bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5c3:	8d 50 02             	lea    edx,[eax+0x2]
c000c5c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5ca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5ce:	0f b6 c0             	movzx  eax,al
c000c5d1:	c1 e0 10             	shl    eax,0x10
c000c5d4:	09 c1                	or     ecx,eax
c000c5d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5da:	8d 50 03             	lea    edx,[eax+0x3]
c000c5dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c5e1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c5e5:	0f b6 c0             	movzx  eax,al
c000c5e8:	c1 e0 18             	shl    eax,0x18
c000c5eb:	09 c1                	or     ecx,eax
c000c5ed:	89 ca                	mov    edx,ecx
c000c5ef:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c5f4:	0f b6 c0             	movzx  eax,al
c000c5f7:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c000c5fe:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c603:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c608:	83 c0 01             	add    eax,0x1
c000c60b:	a2 40 be 02 c0       	mov    ds:0xc002be40,al
c000c610:	e9 b3 01 00 00       	jmp    c000c7c8 <scanMADT()+0x42c>
c000c615:	8d 76 00             	lea    esi,[esi+0x0]
c000c618:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c61d:	83 f8 02             	cmp    eax,0x2
c000c620:	0f 85 ea 00 00 00    	jne    c000c710 <scanMADT()+0x374>
c000c626:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c62a:	8d 50 01             	lea    edx,[eax+0x1]
c000c62d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c631:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c635:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c639:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c63d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c641:	8d 50 01             	lea    edx,[eax+0x1]
c000c644:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c648:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c64c:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c650:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c654:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c658:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c65c:	01 d0                	add    eax,edx
c000c65e:	83 c0 2c             	add    eax,0x2c
c000c661:	8a 00                	mov    al,BYTE PTR [eax]
c000c663:	0f b6 d0             	movzx  edx,al
c000c666:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c66a:	8d 48 01             	lea    ecx,[eax+0x1]
c000c66d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c671:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c675:	0f b6 c0             	movzx  eax,al
c000c678:	c1 e0 08             	shl    eax,0x8
c000c67b:	89 d1                	mov    ecx,edx
c000c67d:	09 c1                	or     ecx,eax
c000c67f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c683:	8d 50 02             	lea    edx,[eax+0x2]
c000c686:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c68a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c68e:	0f b6 c0             	movzx  eax,al
c000c691:	c1 e0 10             	shl    eax,0x10
c000c694:	09 c1                	or     ecx,eax
c000c696:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c69a:	8d 50 03             	lea    edx,[eax+0x3]
c000c69d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6a1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c6a5:	0f b6 c0             	movzx  eax,al
c000c6a8:	c1 e0 18             	shl    eax,0x18
c000c6ab:	09 c8                	or     eax,ecx
c000c6ad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c6b1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c6b6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6be:	01 d0                	add    eax,edx
c000c6c0:	83 c0 2c             	add    eax,0x2c
c000c6c3:	8a 00                	mov    al,BYTE PTR [eax]
c000c6c5:	0f b6 c0             	movzx  eax,al
c000c6c8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c6cc:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c6cf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6d3:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000c6d7:	0f b6 d2             	movzx  edx,dl
c000c6da:	c1 e2 08             	shl    edx,0x8
c000c6dd:	09 d0                	or     eax,edx
c000c6df:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c6e4:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c6e9:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c6ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c6f2:	88 90 08 61 02 c0    	mov    BYTE PTR [eax-0x3ffd9ef8],dl
c000c6f8:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000c6fd:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000c702:	66 89 84 12 20 be 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd41e0],ax
c000c70a:	e9 b9 00 00 00       	jmp    c000c7c8 <scanMADT()+0x42c>
c000c70f:	90                   	nop
c000c710:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c715:	83 f8 04             	cmp    eax,0x4
c000c718:	0f 85 9a 00 00 00    	jne    c000c7b8 <scanMADT()+0x41c>
c000c71e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c722:	8d 50 01             	lea    edx,[eax+0x1]
c000c725:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c729:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c72d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c731:	0f b6 c0             	movzx  eax,al
c000c734:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c738:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c73c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c740:	01 d0                	add    eax,edx
c000c742:	83 c0 2c             	add    eax,0x2c
c000c745:	8a 00                	mov    al,BYTE PTR [eax]
c000c747:	0f b6 d0             	movzx  edx,al
c000c74a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c74e:	8d 48 01             	lea    ecx,[eax+0x1]
c000c751:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c755:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c759:	0f b6 c0             	movzx  eax,al
c000c75c:	c1 e0 08             	shl    eax,0x8
c000c75f:	09 d0                	or     eax,edx
c000c761:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c765:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c76a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c76e:	8d 50 01             	lea    edx,[eax+0x1]
c000c771:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c775:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c779:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c77d:	0f b6 c0             	movzx  eax,al
c000c780:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c788:	c1 e0 08             	shl    eax,0x8
c000c78b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c78f:	89 c1                	mov    ecx,eax
c000c791:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c795:	c1 e0 18             	shl    eax,0x18
c000c798:	89 c3                	mov    ebx,eax
c000c79a:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c000c79f:	8d 50 01             	lea    edx,[eax+0x1]
c000c7a2:	89 15 8c bd 02 c0    	mov    DWORD PTR ds:0xc002bd8c,edx
c000c7a8:	09 d9                	or     ecx,ebx
c000c7aa:	89 ca                	mov    edx,ecx
c000c7ac:	89 14 85 a0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4260],edx
c000c7b3:	eb 13                	jmp    c000c7c8 <scanMADT()+0x42c>
c000c7b5:	8d 76 00             	lea    esi,[esi+0x0]
c000c7b8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c7bd:	83 f8 05             	cmp    eax,0x5
c000c7c0:	75 06                	jne    c000c7c8 <scanMADT()+0x42c>
c000c7c2:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c7c7:	90                   	nop
c000c7c8:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c7cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c7d1:	01 d0                	add    eax,edx
c000c7d3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c7d7:	e9 50 fc ff ff       	jmp    c000c42c <scanMADT()+0x90>
c000c7dc:	90                   	nop
c000c7dd:	eb 0d                	jmp    c000c7ec <scanMADT()+0x450>
c000c7df:	90                   	nop
c000c7e0:	90                   	nop
c000c7e1:	eb 09                	jmp    c000c7ec <scanMADT()+0x450>
c000c7e3:	90                   	nop
c000c7e4:	90                   	nop
c000c7e5:	eb 05                	jmp    c000c7ec <scanMADT()+0x450>
c000c7e7:	90                   	nop
c000c7e8:	90                   	nop
c000c7e9:	8d 76 00             	lea    esi,[esi+0x0]
c000c7ec:	83 c4 38             	add    esp,0x38
c000c7ef:	5b                   	pop    ebx
c000c7f0:	c3                   	ret    
c000c7f1:	90                   	nop
c000c7f2:	66 90                	xchg   ax,ax

c000c7f4 <ACPI::ACPI()>:
c000c7f4:	83 ec 0c             	sub    esp,0xc
c000c7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7fb:	83 ec 08             	sub    esp,0x8
c000c7fe:	68 d9 39 02 c0       	push   0xc00239d9
c000c803:	50                   	push   eax
c000c804:	e8 55 d3 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000c809:	83 c4 10             	add    esp,0x10
c000c80c:	ba d4 3b 02 c0       	mov    edx,0xc0023bd4
c000c811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c815:	89 10                	mov    DWORD PTR [eax],edx
c000c817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c81b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c826:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c834:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c83e:	e8 59 fb ff ff       	call   c000c39c <scanMADT()>
c000c843:	90                   	nop
c000c844:	83 c4 0c             	add    esp,0xc
c000c847:	c3                   	ret    

c000c848 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c848:	83 ec 2c             	sub    esp,0x2c
c000c84b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c84f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c853:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c857:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000c85b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c860:	88 d0                	mov    al,dl
c000c862:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c866:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c86b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c873:	90                   	nop
c000c874:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c878:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c87e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c882:	0f 8d b0 00 00 00    	jge    c000c938 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c888:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c88c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c890:	83 c2 2a             	add    edx,0x2a
c000c893:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c897:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c89c:	0f b7 c0             	movzx  eax,ax
c000c89f:	39 c2                	cmp    edx,eax
c000c8a1:	0f 85 85 00 00 00    	jne    c000c92c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8af:	83 c2 2a             	add    edx,0x2a
c000c8b2:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c8b6:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c8bb:	0f b6 c0             	movzx  eax,al
c000c8be:	39 c2                	cmp    edx,eax
c000c8c0:	75 6a                	jne    c000c92c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c8c2:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c8c7:	85 c0                	test   eax,eax
c000c8c9:	74 3d                	je     c000c908 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c8cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8d3:	83 c2 2a             	add    edx,0x2a
c000c8d6:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c8da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c8e1:	39 c2                	cmp    edx,eax
c000c8e3:	74 13                	je     c000c8f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c8e5:	83 ec 0c             	sub    esp,0xc
c000c8e8:	68 54 3b 02 c0       	push   0xc0023b54
c000c8ed:	e8 20 37 00 00       	call   c0010012 <KePanic(char const*)>
c000c8f2:	83 c4 10             	add    esp,0x10
c000c8f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c8f8:	83 ec 0c             	sub    esp,0xc
c000c8fb:	68 de 39 02 c0       	push   0xc00239de
c000c900:	e8 0d 37 00 00       	call   c0010012 <KePanic(char const*)>
c000c905:	83 c4 10             	add    esp,0x10
c000c908:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c90c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c910:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c914:	83 c2 2a             	add    edx,0x2a
c000c917:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c91b:	8b 02                	mov    eax,DWORD PTR [edx]
c000c91d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c920:	89 01                	mov    DWORD PTR [ecx],eax
c000c922:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c925:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c92a:	66 90                	xchg   ax,ax
c000c92c:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c931:	e9 3e ff ff ff       	jmp    c000c874 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c936:	66 90                	xchg   ax,ax
c000c938:	90                   	nop
c000c939:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c93d:	83 c4 2c             	add    esp,0x2c
c000c940:	c2 04 00             	ret    0x4
c000c943:	90                   	nop

c000c944 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c944:	83 ec 1c             	sub    esp,0x1c
c000c947:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c94b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c94f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c953:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c958:	88 c8                	mov    al,cl
c000c95a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c95e:	88 d0                	mov    al,dl
c000c960:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c968:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c96e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c972:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c975:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000c979:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000c97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c981:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c987:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c98b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000c98e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c992:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000c997:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c99b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9a1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c9a5:	83 c0 01             	add    eax,0x1
c000c9a8:	88 c1                	mov    cl,al
c000c9aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9ae:	83 c2 2a             	add    edx,0x2a
c000c9b1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c9b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9b9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c9bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9c3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c9c6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c9ca:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000c9ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d2:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9d8:	8d 50 01             	lea    edx,[eax+0x1]
c000c9db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9df:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000c9e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9e9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c9ef:	3d 00 02 00 00       	cmp    eax,0x200
c000c9f4:	75 12                	jne    c000ca08 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000c9f6:	83 ec 0c             	sub    esp,0xc
c000c9f9:	68 ed 39 02 c0       	push   0xc00239ed
c000c9fe:	e8 0f 36 00 00       	call   c0010012 <KePanic(char const*)>
c000ca03:	83 c4 10             	add    esp,0x10
c000ca06:	66 90                	xchg   ax,ax
c000ca08:	90                   	nop
c000ca09:	83 c4 1c             	add    esp,0x1c
c000ca0c:	c3                   	ret    
c000ca0d:	90                   	nop
c000ca0e:	66 90                	xchg   ax,ax

c000ca10 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ca10:	b8 00 00 00 00       	mov    eax,0x0
c000ca15:	c3                   	ret    
c000ca16:	66 90                	xchg   ax,ax

c000ca18 <ACPI::detectPCI()>:
c000ca18:	53                   	push   ebx
c000ca19:	83 ec 28             	sub    esp,0x28
c000ca1c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ca21:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ca26:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000ca2b:	83 ec 08             	sub    esp,0x8
c000ca2e:	68 0a 3a 02 c0       	push   0xc0023a0a
c000ca33:	50                   	push   eax
c000ca34:	e8 ef f8 ff ff       	call   c000c328 <findDataTable(unsigned char*, char*)>
c000ca39:	83 c4 10             	add    esp,0x10
c000ca3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ca40:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ca45:	74 0d                	je     c000ca54 <ACPI::detectPCI()+0x3c>
c000ca47:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca4c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca51:	8d 76 00             	lea    esi,[esi+0x0]
c000ca54:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ca5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca60:	8a 00                	mov    al,BYTE PTR [eax]
c000ca62:	0f b6 c0             	movzx  eax,al
c000ca65:	83 f8 01             	cmp    eax,0x1
c000ca68:	75 0e                	jne    c000ca78 <ACPI::detectPCI()+0x60>
c000ca6a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca6f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca74:	eb 2e                	jmp    c000caa4 <ACPI::detectPCI()+0x8c>
c000ca76:	66 90                	xchg   ax,ax
c000ca78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca7c:	8a 00                	mov    al,BYTE PTR [eax]
c000ca7e:	0f b6 c0             	movzx  eax,al
c000ca81:	83 f8 02             	cmp    eax,0x2
c000ca84:	75 1e                	jne    c000caa4 <ACPI::detectPCI()+0x8c>
c000ca86:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca8b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000ca90:	85 c0                	test   eax,eax
c000ca92:	74 10                	je     c000caa4 <ACPI::detectPCI()+0x8c>
c000ca94:	83 ec 0c             	sub    esp,0xc
c000ca97:	68 84 3b 02 c0       	push   0xc0023b84
c000ca9c:	e8 71 35 00 00       	call   c0010012 <KePanic(char const*)>
c000caa1:	83 c4 10             	add    esp,0x10
c000caa4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000caa8:	83 f0 01             	xor    eax,0x1
c000caab:	0f b6 c0             	movzx  eax,al
c000caae:	85 c0                	test   eax,eax
c000cab0:	74 46                	je     c000caf8 <ACPI::detectPCI()+0xe0>
c000cab2:	e8 79 36 ff ff       	call   c0000130 <manualPCIProbe>
c000cab7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cabb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000cac0:	75 0e                	jne    c000cad0 <ACPI::detectPCI()+0xb8>
c000cac2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cac7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000cacc:	eb 2a                	jmp    c000caf8 <ACPI::detectPCI()+0xe0>
c000cace:	66 90                	xchg   ax,ax
c000cad0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000cad5:	75 21                	jne    c000caf8 <ACPI::detectPCI()+0xe0>
c000cad7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000cadc:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000cae1:	85 c0                	test   eax,eax
c000cae3:	74 13                	je     c000caf8 <ACPI::detectPCI()+0xe0>
c000cae5:	83 ec 0c             	sub    esp,0xc
c000cae8:	68 84 3b 02 c0       	push   0xc0023b84
c000caed:	e8 20 35 00 00       	call   c0010012 <KePanic(char const*)>
c000caf2:	83 c4 10             	add    esp,0x10
c000caf5:	8d 76 00             	lea    esi,[esi+0x0]
c000caf8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000cafd:	85 c0                	test   eax,eax
c000caff:	0f 84 87 00 00 00    	je     c000cb8c <ACPI::detectPCI()+0x174>
c000cb05:	83 ec 0c             	sub    esp,0xc
c000cb08:	68 0f 3a 02 c0       	push   0xc0023a0f
c000cb0d:	e8 81 07 00 00       	call   c000d293 <KeSetBootMessage(char const*)>
c000cb12:	83 c4 10             	add    esp,0x10
c000cb15:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000cb1d:	83 ec 0c             	sub    esp,0xc
c000cb20:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb24:	e8 a2 31 00 00       	call   c000fccb <malloc>
c000cb29:	83 c4 10             	add    esp,0x10
c000cb2c:	89 c3                	mov    ebx,eax
c000cb2e:	83 ec 0c             	sub    esp,0xc
c000cb31:	53                   	push   ebx
c000cb32:	e8 85 0a 01 00       	call   c001d5bc <PCI::PCI()>
c000cb37:	83 c4 10             	add    esp,0x10
c000cb3a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cb3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb42:	83 ec 08             	sub    esp,0x8
c000cb45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb49:	50                   	push   eax
c000cb4a:	e8 ad ce ff ff       	call   c00099fc <Device::addChild(Device*)>
c000cb4f:	83 c4 10             	add    esp,0x10
c000cb52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb56:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb58:	83 c0 08             	add    eax,0x8
c000cb5b:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb5d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000cb62:	85 d2                	test   edx,edx
c000cb64:	74 0a                	je     c000cb70 <ACPI::detectPCI()+0x158>
c000cb66:	ba 01 00 00 00       	mov    edx,0x1
c000cb6b:	eb 0b                	jmp    c000cb78 <ACPI::detectPCI()+0x160>
c000cb6d:	8d 76 00             	lea    esi,[esi+0x0]
c000cb70:	ba 02 00 00 00       	mov    edx,0x2
c000cb75:	8d 76 00             	lea    esi,[esi+0x0]
c000cb78:	6a 00                	push   0x0
c000cb7a:	6a 00                	push   0x0
c000cb7c:	52                   	push   edx
c000cb7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb81:	ff d0                	call   eax
c000cb83:	83 c4 10             	add    esp,0x10
c000cb86:	e9 91 00 00 00       	jmp    c000cc1c <ACPI::detectPCI()+0x204>
c000cb8b:	90                   	nop
c000cb8c:	83 ec 0c             	sub    esp,0xc
c000cb8f:	68 27 3a 02 c0       	push   0xc0023a27
c000cb94:	e8 fa 06 00 00       	call   c000d293 <KeSetBootMessage(char const*)>
c000cb99:	83 c4 10             	add    esp,0x10
c000cb9c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cba3:	83 ec 0c             	sub    esp,0xc
c000cba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbaa:	e8 1c 31 00 00       	call   c000fccb <malloc>
c000cbaf:	83 c4 10             	add    esp,0x10
c000cbb2:	89 c3                	mov    ebx,eax
c000cbb4:	83 ec 0c             	sub    esp,0xc
c000cbb7:	53                   	push   ebx
c000cbb8:	e8 05 16 01 00       	call   c001e1c2 <IDE::IDE()>
c000cbbd:	83 c4 10             	add    esp,0x10
c000cbc0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cbc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbc8:	83 ec 08             	sub    esp,0x8
c000cbcb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cbcf:	50                   	push   eax
c000cbd0:	e8 27 ce ff ff       	call   c00099fc <Device::addChild(Device*)>
c000cbd5:	83 c4 10             	add    esp,0x10
c000cbd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbdc:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cbe6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbea:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cbf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbf7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cc00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc04:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc06:	83 c0 08             	add    eax,0x8
c000cc09:	8b 00                	mov    eax,DWORD PTR [eax]
c000cc0b:	6a 00                	push   0x0
c000cc0d:	6a 00                	push   0x0
c000cc0f:	6a 00                	push   0x0
c000cc11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc15:	ff d0                	call   eax
c000cc17:	83 c4 10             	add    esp,0x10
c000cc1a:	66 90                	xchg   ax,ax
c000cc1c:	90                   	nop
c000cc1d:	83 c4 28             	add    esp,0x28
c000cc20:	5b                   	pop    ebx
c000cc21:	c3                   	ret    
c000cc22:	66 90                	xchg   ax,ax

c000cc24 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cc24:	83 ec 0c             	sub    esp,0xc
c000cc27:	83 ec 0c             	sub    esp,0xc
c000cc2a:	68 3c 3a 02 c0       	push   0xc0023a3c
c000cc2f:	e8 de 33 00 00       	call   c0010012 <KePanic(char const*)>
c000cc34:	83 c4 10             	add    esp,0x10
c000cc37:	90                   	nop
c000cc38:	83 c4 0c             	add    esp,0xc
c000cc3b:	c3                   	ret    

c000cc3c <ACPI::open(int, int, void*)>:
c000cc3c:	57                   	push   edi
c000cc3d:	56                   	push   esi
c000cc3e:	53                   	push   ebx
c000cc3f:	81 ec 70 01 00 00    	sub    esp,0x170
c000cc45:	83 ec 0c             	sub    esp,0xc
c000cc48:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000cc4f:	e8 c4 fd ff ff       	call   c000ca18 <ACPI::detectPCI()>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	83 ec 0c             	sub    esp,0xc
c000cc5a:	68 ac 3b 02 c0       	push   0xc0023bac
c000cc5f:	e8 2f 06 00 00       	call   c000d293 <KeSetBootMessage(char const*)>
c000cc64:	83 c4 10             	add    esp,0x10
c000cc67:	b8 4c 05 00 00       	mov    eax,0x54c
c000cc6c:	8a 00                	mov    al,BYTE PTR [eax]
c000cc6e:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000cc75:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000cc7d:	83 f8 01             	cmp    eax,0x1
c000cc80:	75 12                	jne    c000cc94 <ACPI::open(int, int, void*)+0x58>
c000cc82:	83 ec 0c             	sub    esp,0xc
c000cc85:	68 4d 3a 02 c0       	push   0xc0023a4d
c000cc8a:	e8 ea 8c 00 00       	call   c0015979 <Thr::loadKernelSymbolTable(char const*)>
c000cc8f:	83 c4 10             	add    esp,0x10
c000cc92:	eb 34                	jmp    c000ccc8 <ACPI::open(int, int, void*)+0x8c>
c000cc94:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000cc9c:	3d bb 00 00 00       	cmp    eax,0xbb
c000cca1:	75 15                	jne    c000ccb8 <ACPI::open(int, int, void*)+0x7c>
c000cca3:	83 ec 0c             	sub    esp,0xc
c000cca6:	68 6b 3a 02 c0       	push   0xc0023a6b
c000ccab:	e8 c9 8c 00 00       	call   c0015979 <Thr::loadKernelSymbolTable(char const*)>
c000ccb0:	83 c4 10             	add    esp,0x10
c000ccb3:	eb 13                	jmp    c000ccc8 <ACPI::open(int, int, void*)+0x8c>
c000ccb5:	8d 76 00             	lea    esi,[esi+0x0]
c000ccb8:	83 ec 0c             	sub    esp,0xc
c000ccbb:	68 89 3a 02 c0       	push   0xc0023a89
c000ccc0:	e8 4d 33 00 00       	call   c0010012 <KePanic(char const*)>
c000ccc5:	83 c4 10             	add    esp,0x10
c000ccc8:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ccd0:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ccdb:	83 ec 0c             	sub    esp,0xc
c000ccde:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000cce5:	e8 e1 2f 00 00       	call   c000fccb <malloc>
c000ccea:	83 c4 10             	add    esp,0x10
c000cced:	89 c3                	mov    ebx,eax
c000ccef:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000ccf4:	83 ec 04             	sub    esp,0x4
c000ccf7:	50                   	push   eax
c000ccf8:	68 a3 3a 02 c0       	push   0xc0023aa3
c000ccfd:	53                   	push   ebx
c000ccfe:	e8 2f b4 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000cd03:	83 c4 10             	add    esp,0x10
c000cd06:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000cd0d:	83 ec 08             	sub    esp,0x8
c000cd10:	6a 01                	push   0x1
c000cd12:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd19:	e8 32 b4 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000cd1e:	83 c4 10             	add    esp,0x10
c000cd21:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000cd28:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000cd30:	75 16                	jne    c000cd48 <ACPI::open(int, int, void*)+0x10c>
c000cd32:	83 ec 0c             	sub    esp,0xc
c000cd35:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd3c:	e8 6d b4 ff ff       	call   c00081ae <File::close()>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	eb 0a                	jmp    c000cd50 <ACPI::open(int, int, void*)+0x114>
c000cd46:	66 90                	xchg   ax,ax
c000cd48:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000cd50:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000cd58:	74 1e                	je     c000cd78 <ACPI::open(int, int, void*)+0x13c>
c000cd5a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000cd61:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd63:	83 c0 08             	add    eax,0x8
c000cd66:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd68:	83 ec 0c             	sub    esp,0xc
c000cd6b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd72:	ff d0                	call   eax
c000cd74:	83 c4 10             	add    esp,0x10
c000cd77:	90                   	nop
c000cd78:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000cd7f:	83 f0 01             	xor    eax,0x1
c000cd82:	0f b6 c0             	movzx  eax,al
c000cd85:	85 c0                	test   eax,eax
c000cd87:	74 2f                	je     c000cdb8 <ACPI::open(int, int, void*)+0x17c>
c000cd89:	83 ec 0c             	sub    esp,0xc
c000cd8c:	68 c1 3a 02 c0       	push   0xc0023ac1
c000cd91:	e8 fd 04 00 00       	call   c000d293 <KeSetBootMessage(char const*)>
c000cd96:	83 c4 10             	add    esp,0x10
c000cd99:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000cda4:	83 ec 0c             	sub    esp,0xc
c000cda7:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000cdae:	e8 79 69 00 00       	call   c001372c <Virt::setupPageSwapping(int)>
c000cdb3:	83 c4 10             	add    esp,0x10
c000cdb6:	66 90                	xchg   ax,ax
c000cdb8:	83 ec 0c             	sub    esp,0xc
c000cdbb:	68 dc 3a 02 c0       	push   0xc0023adc
c000cdc0:	e8 ce 04 00 00       	call   c000d293 <KeSetBootMessage(char const*)>
c000cdc5:	83 c4 10             	add    esp,0x10
c000cdc8:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000cdcf:	83 ec 08             	sub    esp,0x8
c000cdd2:	6a 13                	push   0x13
c000cdd4:	50                   	push   eax
c000cdd5:	e8 50 cf ff ff       	call   c0009d2a <getDevicesOfType(DeviceType)>
c000cdda:	83 c4 0c             	add    esp,0xc
c000cddd:	8d 76 00             	lea    esi,[esi+0x0]
c000cde0:	83 ec 0c             	sub    esp,0xc
c000cde3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cdea:	50                   	push   eax
c000cdeb:	e8 9c 50 01 00       	call   c0021e8c <LinkedList<Device>::isEmpty()>
c000cdf0:	83 c4 10             	add    esp,0x10
c000cdf3:	83 f0 01             	xor    eax,0x1
c000cdf6:	0f b6 c0             	movzx  eax,al
c000cdf9:	85 c0                	test   eax,eax
c000cdfb:	0f 84 47 01 00 00    	je     c000cf48 <ACPI::open(int, int, void*)+0x30c>
c000ce01:	83 ec 0c             	sub    esp,0xc
c000ce04:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce0b:	50                   	push   eax
c000ce0c:	e8 97 50 01 00       	call   c0021ea8 <LinkedList<Device>::getFirstElement()>
c000ce11:	83 c4 10             	add    esp,0x10
c000ce14:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ce1b:	83 ec 0c             	sub    esp,0xc
c000ce1e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ce25:	50                   	push   eax
c000ce26:	e8 85 50 01 00       	call   c0021eb0 <LinkedList<Device>::removeFirst()>
c000ce2b:	83 c4 10             	add    esp,0x10
c000ce2e:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ce35:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ce3c:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ce43:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ce47:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ce4d:	ba 09 00 00 00       	mov    edx,0x9
c000ce52:	fc                   	cld    
c000ce53:	89 c7                	mov    edi,eax
c000ce55:	89 de                	mov    esi,ebx
c000ce57:	89 d1                	mov    ecx,edx
c000ce59:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ce5b:	83 ec 08             	sub    esp,0x8
c000ce5e:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ce62:	50                   	push   eax
c000ce63:	83 ec 24             	sub    esp,0x24
c000ce66:	89 e0                	mov    eax,esp
c000ce68:	89 c3                	mov    ebx,eax
c000ce6a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ce6e:	ba 09 00 00 00       	mov    edx,0x9
c000ce73:	89 df                	mov    edi,ebx
c000ce75:	89 c6                	mov    esi,eax
c000ce77:	89 d1                	mov    ecx,edx
c000ce79:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ce7b:	e8 26 0c 01 00       	call   c001daa6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ce80:	83 c4 30             	add    esp,0x30
c000ce83:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ce8a:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ce92:	0f 84 48 ff ff ff    	je     c000cde0 <ACPI::open(int, int, void*)+0x1a4>
c000ce98:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000cea3:	83 ec 0c             	sub    esp,0xc
c000cea6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000cead:	e8 19 2e 00 00       	call   c000fccb <malloc>
c000ceb2:	83 c4 10             	add    esp,0x10
c000ceb5:	89 c3                	mov    ebx,eax
c000ceb7:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000cebc:	83 ec 04             	sub    esp,0x4
c000cebf:	50                   	push   eax
c000cec0:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cec7:	53                   	push   ebx
c000cec8:	e8 65 b2 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000cecd:	83 c4 10             	add    esp,0x10
c000ced0:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ced7:	83 ec 0c             	sub    esp,0xc
c000ceda:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cee1:	e8 2e b5 ff ff       	call   c0008414 <File::exists()>
c000cee6:	83 c4 10             	add    esp,0x10
c000cee9:	0f b6 c0             	movzx  eax,al
c000ceec:	85 c0                	test   eax,eax
c000ceee:	74 28                	je     c000cf18 <ACPI::open(int, int, void*)+0x2dc>
c000cef0:	83 ec 08             	sub    esp,0x8
c000cef3:	6a 01                	push   0x1
c000cef5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cefc:	e8 f2 94 00 00       	call   c00163f3 <Thr::loadDLL(char const*, bool)>
c000cf01:	83 c4 10             	add    esp,0x10
c000cf04:	83 ec 08             	sub    esp,0x8
c000cf07:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000cf0e:	50                   	push   eax
c000cf0f:	e8 31 97 00 00       	call   c0016645 <Thr::executeDLL(unsigned long, void*)>
c000cf14:	83 c4 10             	add    esp,0x10
c000cf17:	90                   	nop
c000cf18:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000cf20:	0f 84 ba fe ff ff    	je     c000cde0 <ACPI::open(int, int, void*)+0x1a4>
c000cf26:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000cf2d:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf2f:	83 c0 08             	add    eax,0x8
c000cf32:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf34:	83 ec 0c             	sub    esp,0xc
c000cf37:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cf3e:	ff d0                	call   eax
c000cf40:	83 c4 10             	add    esp,0x10
c000cf43:	e9 98 fe ff ff       	jmp    c000cde0 <ACPI::open(int, int, void*)+0x1a4>
c000cf48:	83 ec 0c             	sub    esp,0xc
c000cf4b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cf52:	50                   	push   eax
c000cf53:	e8 30 4f 01 00       	call   c0021e88 <LinkedList<Device>::~LinkedList()>
c000cf58:	83 c4 10             	add    esp,0x10
c000cf5b:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c000cf61:	83 ec 08             	sub    esp,0x8
c000cf64:	6a 01                	push   0x1
c000cf66:	68 f6 3a 02 c0       	push   0xc0023af6
c000cf6b:	e8 83 94 00 00       	call   c00163f3 <Thr::loadDLL(char const*, bool)>
c000cf70:	83 c4 10             	add    esp,0x10
c000cf73:	83 ec 08             	sub    esp,0x8
c000cf76:	53                   	push   ebx
c000cf77:	50                   	push   eax
c000cf78:	e8 c8 96 00 00       	call   c0016645 <Thr::executeDLL(unsigned long, void*)>
c000cf7d:	83 c4 10             	add    esp,0x10
c000cf80:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000cf85:	85 c0                	test   eax,eax
c000cf87:	0f 84 27 01 00 00    	je     c000d0b4 <ACPI::open(int, int, void*)+0x478>
c000cf8d:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000cf92:	85 c0                	test   eax,eax
c000cf94:	0f 84 1a 01 00 00    	je     c000d0b4 <ACPI::open(int, int, void*)+0x478>
c000cf9a:	83 ec 0c             	sub    esp,0xc
c000cf9d:	68 13 3b 02 c0       	push   0xc0023b13
c000cfa2:	e8 ec 02 00 00       	call   c000d293 <KeSetBootMessage(char const*)>
c000cfa7:	83 c4 10             	add    esp,0x10
c000cfaa:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000cfb5:	83 ec 0c             	sub    esp,0xc
c000cfb8:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000cfbf:	e8 07 2d 00 00       	call   c000fccb <malloc>
c000cfc4:	83 c4 10             	add    esp,0x10
c000cfc7:	89 c3                	mov    ebx,eax
c000cfc9:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000cfce:	83 ec 04             	sub    esp,0x4
c000cfd1:	50                   	push   eax
c000cfd2:	68 30 3b 02 c0       	push   0xc0023b30
c000cfd7:	53                   	push   ebx
c000cfd8:	e8 55 b1 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000cfdd:	83 c4 10             	add    esp,0x10
c000cfe0:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000cfe7:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000cfef:	74 1f                	je     c000d010 <ACPI::open(int, int, void*)+0x3d4>
c000cff1:	83 ec 0c             	sub    esp,0xc
c000cff4:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000cffb:	e8 14 b4 ff ff       	call   c0008414 <File::exists()>
c000d000:	83 c4 10             	add    esp,0x10
c000d003:	0f b6 c0             	movzx  eax,al
c000d006:	85 c0                	test   eax,eax
c000d008:	74 06                	je     c000d010 <ACPI::open(int, int, void*)+0x3d4>
c000d00a:	b0 01                	mov    al,0x1
c000d00c:	eb 06                	jmp    c000d014 <ACPI::open(int, int, void*)+0x3d8>
c000d00e:	66 90                	xchg   ax,ax
c000d010:	b0 00                	mov    al,0x0
c000d012:	66 90                	xchg   ax,ax
c000d014:	0f b6 c0             	movzx  eax,al
c000d017:	85 c0                	test   eax,eax
c000d019:	74 25                	je     c000d040 <ACPI::open(int, int, void*)+0x404>
c000d01b:	83 ec 08             	sub    esp,0x8
c000d01e:	6a 01                	push   0x1
c000d020:	68 30 3b 02 c0       	push   0xc0023b30
c000d025:	e8 c9 93 00 00       	call   c00163f3 <Thr::loadDLL(char const*, bool)>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	83 ec 08             	sub    esp,0x8
c000d030:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000d037:	50                   	push   eax
c000d038:	e8 08 96 00 00       	call   c0016645 <Thr::executeDLL(unsigned long, void*)>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d048:	74 2a                	je     c000d074 <ACPI::open(int, int, void*)+0x438>
c000d04a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000d052:	74 20                	je     c000d074 <ACPI::open(int, int, void*)+0x438>
c000d054:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000d05b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d05d:	83 c0 08             	add    eax,0x8
c000d060:	8b 00                	mov    eax,DWORD PTR [eax]
c000d062:	83 ec 0c             	sub    esp,0xc
c000d065:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000d06c:	ff d0                	call   eax
c000d06e:	83 c4 10             	add    esp,0x10
c000d071:	8d 76 00             	lea    esi,[esi+0x0]
c000d074:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000d079:	83 ec 08             	sub    esp,0x8
c000d07c:	68 4d 3b 02 c0       	push   0xc0023b4d
c000d081:	50                   	push   eax
c000d082:	e8 a1 f2 ff ff       	call   c000c328 <findDataTable(unsigned char*, char*)>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000d091:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000d099:	74 19                	je     c000d0b4 <ACPI::open(int, int, void*)+0x478>
c000d09b:	83 ec 08             	sub    esp,0x8
c000d09e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000d0a5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000d0ac:	e8 73 fb ff ff       	call   c000cc24 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d0b1:	83 c4 10             	add    esp,0x10
c000d0b4:	b8 00 00 00 00       	mov    eax,0x0
c000d0b9:	81 c4 70 01 00 00    	add    esp,0x170
c000d0bf:	5b                   	pop    ebx
c000d0c0:	5e                   	pop    esi
c000d0c1:	5f                   	pop    edi
c000d0c2:	c3                   	ret    
c000d0c3:	90                   	nop

c000d0c4 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d0c4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d0ca:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d0d1:	89 c2                	mov    edx,eax
c000d0d3:	c1 fa 1f             	sar    edx,0x1f
c000d0d6:	83 ec 04             	sub    esp,0x4
c000d0d9:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d0dd:	51                   	push   ecx
c000d0de:	52                   	push   edx
c000d0df:	50                   	push   eax
c000d0e0:	e8 db 29 00 00       	call   c000fac0 <KeItoa(long long, char*)>
c000d0e5:	83 c4 10             	add    esp,0x10
c000d0e8:	83 ec 08             	sub    esp,0x8
c000d0eb:	68 f8 3b 02 c0       	push   0xc0023bf8
c000d0f0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0f4:	50                   	push   eax
c000d0f5:	e8 46 35 ff ff       	call   c0000640 <strcpy>
c000d0fa:	83 c4 10             	add    esp,0x10
c000d0fd:	83 ec 08             	sub    esp,0x8
c000d100:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d107:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d10b:	50                   	push   eax
c000d10c:	e8 2f 37 ff ff       	call   c0000840 <strcat>
c000d111:	83 c4 10             	add    esp,0x10
c000d114:	83 ec 08             	sub    esp,0x8
c000d117:	68 06 3c 02 c0       	push   0xc0023c06
c000d11c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d120:	50                   	push   eax
c000d121:	e8 1a 37 ff ff       	call   c0000840 <strcat>
c000d126:	83 c4 10             	add    esp,0x10
c000d129:	83 ec 08             	sub    esp,0x8
c000d12c:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d133:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d137:	50                   	push   eax
c000d138:	e8 03 37 ff ff       	call   c0000840 <strcat>
c000d13d:	83 c4 10             	add    esp,0x10
c000d140:	83 ec 08             	sub    esp,0x8
c000d143:	68 09 3c 02 c0       	push   0xc0023c09
c000d148:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d14c:	50                   	push   eax
c000d14d:	e8 ee 36 ff ff       	call   c0000840 <strcat>
c000d152:	83 c4 10             	add    esp,0x10
c000d155:	83 ec 08             	sub    esp,0x8
c000d158:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d15f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d163:	50                   	push   eax
c000d164:	e8 d7 36 ff ff       	call   c0000840 <strcat>
c000d169:	83 c4 10             	add    esp,0x10
c000d16c:	83 ec 08             	sub    esp,0x8
c000d16f:	68 09 3c 02 c0       	push   0xc0023c09
c000d174:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d178:	50                   	push   eax
c000d179:	e8 c2 36 ff ff       	call   c0000840 <strcat>
c000d17e:	83 c4 10             	add    esp,0x10
c000d181:	83 ec 08             	sub    esp,0x8
c000d184:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d188:	50                   	push   eax
c000d189:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d18d:	50                   	push   eax
c000d18e:	e8 ad 36 ff ff       	call   c0000840 <strcat>
c000d193:	83 c4 10             	add    esp,0x10
c000d196:	83 ec 0c             	sub    esp,0xc
c000d199:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d19d:	50                   	push   eax
c000d19e:	e8 6f 2e 00 00       	call   c0010012 <KePanic(char const*)>
c000d1a3:	83 c4 10             	add    esp,0x10
c000d1a6:	90                   	nop
c000d1a7:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d1ad:	c3                   	ret    

c000d1ae <KeInitialiseAtexit()>:
c000d1ae:	83 ec 10             	sub    esp,0x10
c000d1b1:	c7 05 e0 bf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bfe0,0x0
c000d1bb:	6a 60                	push   0x60
c000d1bd:	6a 00                	push   0x0
c000d1bf:	68 60 c0 02 c0       	push   0xc002c060
c000d1c4:	e8 27 33 ff ff       	call   c00004f0 <memset>
c000d1c9:	83 c4 1c             	add    esp,0x1c
c000d1cc:	c3                   	ret    

c000d1cd <KeRegisterAtexit(void (*)(void*), void*)>:
c000d1cd:	a1 e0 bf 02 c0       	mov    eax,ds:0xc002bfe0
c000d1d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1d6:	89 14 85 60 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3fa0],edx
c000d1dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1e1:	89 14 85 00 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4000],edx
c000d1e8:	40                   	inc    eax
c000d1e9:	a3 e0 bf 02 c0       	mov    ds:0xc002bfe0,eax
c000d1ee:	83 f8 17             	cmp    eax,0x17
c000d1f1:	7e 0d                	jle    c000d200 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d1f3:	c7 44 24 04 0b 3c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023c0b
c000d1fb:	e9 12 2e 00 00       	jmp    c0010012 <KePanic(char const*)>
c000d200:	c3                   	ret    

c000d201 <KeExecuteAtexit()>:
c000d201:	53                   	push   ebx
c000d202:	31 db                	xor    ebx,ebx
c000d204:	83 ec 08             	sub    esp,0x8
c000d207:	39 1d e0 bf 02 c0    	cmp    DWORD PTR ds:0xc002bfe0,ebx
c000d20d:	7e 50                	jle    c000d25f <KeExecuteAtexit()+0x5e>
c000d20f:	8b 04 9d 60 c0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3fa0]
c000d216:	85 c0                	test   eax,eax
c000d218:	74 42                	je     c000d25c <KeExecuteAtexit()+0x5b>
c000d21a:	51                   	push   ecx
c000d21b:	50                   	push   eax
c000d21c:	53                   	push   ebx
c000d21d:	68 24 3c 02 c0       	push   0xc0023c24
c000d222:	e8 3d 9d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d227:	58                   	pop    eax
c000d228:	ff 34 9d 00 c0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4000]
c000d22f:	ff 14 9d 60 c0 02 c0 	call   DWORD PTR [ebx*4-0x3ffd3fa0]
c000d236:	c7 04 24 46 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c46
c000d23d:	e8 22 9d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d242:	c7 04 24 d7 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fd7
c000d249:	c7 04 9d 60 c0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd3fa0],0x0
c000d254:	e8 0b 9d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d259:	83 c4 10             	add    esp,0x10
c000d25c:	43                   	inc    ebx
c000d25d:	eb a8                	jmp    c000d207 <KeExecuteAtexit()+0x6>
c000d25f:	83 c4 08             	add    esp,0x8
c000d262:	5b                   	pop    ebx
c000d263:	c3                   	ret    

c000d264 <KeDisplaySplashScreen()>:
c000d264:	53                   	push   ebx
c000d265:	bb 01 00 00 00       	mov    ebx,0x1
c000d26a:	83 ec 08             	sub    esp,0x8
c000d26d:	43                   	inc    ebx
c000d26e:	0f be 83 49 3c 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdc3b7]
c000d275:	85 c0                	test   eax,eax
c000d277:	74 15                	je     c000d28e <KeDisplaySplashScreen()+0x2a>
c000d279:	83 ec 0c             	sub    esp,0xc
c000d27c:	6a 01                	push   0x1
c000d27e:	53                   	push   ebx
c000d27f:	6a 00                	push   0x0
c000d281:	6a 0f                	push   0xf
c000d283:	50                   	push   eax
c000d284:	e8 13 df 00 00       	call   c001b19c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d289:	83 c4 20             	add    esp,0x20
c000d28c:	eb df                	jmp    c000d26d <KeDisplaySplashScreen()+0x9>
c000d28e:	83 c4 08             	add    esp,0x8
c000d291:	5b                   	pop    ebx
c000d292:	c3                   	ret    

c000d293 <KeSetBootMessage(char const*)>:
c000d293:	57                   	push   edi
c000d294:	56                   	push   esi
c000d295:	53                   	push   ebx
c000d296:	81 ec a4 00 00 00    	sub    esp,0xa4
c000d29c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000d2a3:	68 9e 00 00 00       	push   0x9e
c000d2a8:	6a 00                	push   0x0
c000d2aa:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000d2ae:	56                   	push   esi
c000d2af:	e8 3c 32 ff ff       	call   c00004f0 <memset>
c000d2b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d2b7:	e8 b4 32 ff ff       	call   c0000570 <strlen>
c000d2bc:	ba 50 00 00 00       	mov    edx,0x50
c000d2c1:	83 c4 10             	add    esp,0x10
c000d2c4:	29 c2                	sub    edx,eax
c000d2c6:	31 c9                	xor    ecx,ecx
c000d2c8:	83 e2 fe             	and    edx,0xfffffffe
c000d2cb:	01 f2                	add    edx,esi
c000d2cd:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000d2d2:	84 c0                	test   al,al
c000d2d4:	74 0a                	je     c000d2e0 <KeSetBootMessage(char const*)+0x4d>
c000d2d6:	80 cc 07             	or     ah,0x7
c000d2d9:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000d2dd:	41                   	inc    ecx
c000d2de:	eb ed                	jmp    c000d2cd <KeSetBootMessage(char const*)+0x3a>
c000d2e0:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000d2e5:	b9 9e 00 00 00       	mov    ecx,0x9e
c000d2ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d2ec:	50                   	push   eax
c000d2ed:	50                   	push   eax
c000d2ee:	53                   	push   ebx
c000d2ef:	68 5e 3c 02 c0       	push   0xc0023c5e
c000d2f4:	e8 6b 9c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d2f9:	81 c4 b0 00 00 00    	add    esp,0xb0
c000d2ff:	5b                   	pop    ebx
c000d300:	5e                   	pop    esi
c000d301:	5f                   	pop    edi
c000d302:	c3                   	ret    

c000d303 <__cxa_atexit>:
c000d303:	31 c0                	xor    eax,eax
c000d305:	c3                   	ret    

c000d306 <__cxa_finalize>:
c000d306:	c3                   	ret    

c000d307 <__stack_chk_fail>:
c000d307:	55                   	push   ebp
c000d308:	89 e5                	mov    ebp,esp
c000d30a:	83 ec 10             	sub    esp,0x10
c000d30d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d310:	68 6c 3c 02 c0       	push   0xc0023c6c
c000d315:	e8 4a 9c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d31a:	58                   	pop    eax
c000d31b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d31e:	5a                   	pop    edx
c000d31f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d322:	68 6c 3c 02 c0       	push   0xc0023c6c
c000d327:	e8 38 9c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d32c:	c7 04 24 74 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c74
c000d333:	e8 da 2c 00 00       	call   c0010012 <KePanic(char const*)>
c000d338:	83 c4 10             	add    esp,0x10
c000d33b:	c9                   	leave  
c000d33c:	c3                   	ret    

c000d33d <__cxa_pure_virtual>:
c000d33d:	83 ec 18             	sub    esp,0x18
c000d340:	68 8c 3c 02 c0       	push   0xc0023c8c
c000d345:	e8 c8 2c 00 00       	call   c0010012 <KePanic(char const*)>
c000d34a:	83 c4 1c             	add    esp,0x1c
c000d34d:	c3                   	ret    

c000d34e <operator new[](unsigned long)>:
c000d34e:	e9 78 29 00 00       	jmp    c000fccb <malloc>

c000d353 <operator delete(void*, unsigned long)>:
c000d353:	e9 93 29 00 00       	jmp    c000fceb <rfree>

c000d358 <operator delete[](void*)>:
c000d358:	e9 8e 29 00 00       	jmp    c000fceb <rfree>

c000d35d <operator delete[](void*, unsigned long)>:
c000d35d:	e9 89 29 00 00       	jmp    c000fceb <rfree>
c000d362:	66 90                	xchg   ax,ax

c000d364 <CUnlockScheduler>:
c000d364:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000d36c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000d371:	85 c0                	test   eax,eax
c000d373:	75 03                	jne    c000d378 <CUnlockScheduler+0x14>
c000d375:	fb                   	sti    
c000d376:	66 90                	xchg   ax,ax
c000d378:	90                   	nop
c000d379:	c3                   	ret    
c000d37a:	66 90                	xchg   ax,ax

c000d37c <CLockScheduler>:
c000d37c:	fa                   	cli    
c000d37d:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000d382:	83 c0 01             	add    eax,0x1
c000d385:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000d38a:	90                   	nop
c000d38b:	c3                   	ret    

c000d38c <CPrintf>:
c000d38c:	83 ec 0c             	sub    esp,0xc
c000d38f:	83 ec 08             	sub    esp,0x8
c000d392:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d396:	68 9f 3c 02 c0       	push   0xc0023c9f
c000d39b:	e8 c4 9b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d3a0:	83 c4 10             	add    esp,0x10
c000d3a3:	90                   	nop
c000d3a4:	83 c4 0c             	add    esp,0xc
c000d3a7:	c3                   	ret    

c000d3a8 <CmOpen(char const*)>:
c000d3a8:	57                   	push   edi
c000d3a9:	56                   	push   esi
c000d3aa:	53                   	push   ebx
c000d3ab:	83 ec 1c             	sub    esp,0x1c
c000d3ae:	6a 30                	push   0x30
c000d3b0:	e8 16 29 00 00       	call   c000fccb <malloc>
c000d3b5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d3bc:	89 c3                	mov    ebx,eax
c000d3be:	e8 08 29 00 00       	call   c000fccb <malloc>
c000d3c3:	83 c4 0c             	add    esp,0xc
c000d3c6:	89 c6                	mov    esi,eax
c000d3c8:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000d3ce:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d3d2:	50                   	push   eax
c000d3d3:	e8 5a ad ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000d3d8:	83 c4 0c             	add    esp,0xc
c000d3db:	89 33                	mov    DWORD PTR [ebx],esi
c000d3dd:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d3e1:	50                   	push   eax
c000d3e2:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d3e6:	50                   	push   eax
c000d3e7:	56                   	push   esi
c000d3e8:	e8 65 b0 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000d3ed:	5a                   	pop    edx
c000d3ee:	59                   	pop    ecx
c000d3ef:	6a 01                	push   0x1
c000d3f1:	ff 33                	push   DWORD PTR [ebx]
c000d3f3:	e8 58 ad ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000d3f8:	5e                   	pop    esi
c000d3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3fd:	e8 c9 28 00 00       	call   c000fccb <malloc>
c000d402:	5a                   	pop    edx
c000d403:	89 c7                	mov    edi,eax
c000d405:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d409:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d40b:	8b 10                	mov    edx,DWORD PTR [eax]
c000d40d:	56                   	push   esi
c000d40e:	57                   	push   edi
c000d40f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d413:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d417:	50                   	push   eax
c000d418:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d41b:	83 c4 14             	add    esp,0x14
c000d41e:	ff 33                	push   DWORD PTR [ebx]
c000d420:	e8 89 ad ff ff       	call   c00081ae <File::close()>
c000d425:	59                   	pop    ecx
c000d426:	58                   	pop    eax
c000d427:	6a 13                	push   0x13
c000d429:	ff 33                	push   DWORD PTR [ebx]
c000d42b:	e8 20 ad ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000d430:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d432:	8b 10                	mov    edx,DWORD PTR [eax]
c000d434:	89 34 24             	mov    DWORD PTR [esp],esi
c000d437:	57                   	push   edi
c000d438:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d43c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d440:	50                   	push   eax
c000d441:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d444:	83 c4 14             	add    esp,0x14
c000d447:	57                   	push   edi
c000d448:	e8 8e 28 00 00       	call   c000fcdb <free>
c000d44d:	83 c4 10             	add    esp,0x10
c000d450:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d453:	75 10                	jne    c000d465 <CmOpen(char const*)+0xbd>
c000d455:	83 ec 0c             	sub    esp,0xc
c000d458:	68 a2 3c 02 c0       	push   0xc0023ca2
c000d45d:	e8 b0 2b 00 00       	call   c0010012 <KePanic(char const*)>
c000d462:	83 c4 10             	add    esp,0x10
c000d465:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d468:	50                   	push   eax
c000d469:	6a 00                	push   0x0
c000d46b:	6a 00                	push   0x0
c000d46d:	ff 33                	push   DWORD PTR [ebx]
c000d46f:	e8 9a ad ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d474:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d476:	8b 10                	mov    edx,DWORD PTR [eax]
c000d478:	89 34 24             	mov    DWORD PTR [esp],esi
c000d47b:	57                   	push   edi
c000d47c:	6a 00                	push   0x0
c000d47e:	6a 2b                	push   0x2b
c000d480:	50                   	push   eax
c000d481:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d484:	83 c4 1c             	add    esp,0x1c
c000d487:	6a 00                	push   0x0
c000d489:	6a 00                	push   0x0
c000d48b:	ff 33                	push   DWORD PTR [ebx]
c000d48d:	e8 7c ad ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d492:	83 c4 0c             	add    esp,0xc
c000d495:	6a 08                	push   0x8
c000d497:	68 b3 3c 02 c0       	push   0xc0023cb3
c000d49c:	57                   	push   edi
c000d49d:	e8 de 2e ff ff       	call   c0000380 <memcmp>
c000d4a2:	83 c4 10             	add    esp,0x10
c000d4a5:	85 c0                	test   eax,eax
c000d4a7:	74 10                	je     c000d4b9 <CmOpen(char const*)+0x111>
c000d4a9:	83 ec 0c             	sub    esp,0xc
c000d4ac:	68 bc 3c 02 c0       	push   0xc0023cbc
c000d4b1:	e8 5c 2b 00 00       	call   c0010012 <KePanic(char const*)>
c000d4b6:	83 c4 10             	add    esp,0x10
c000d4b9:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d4bd:	89 d8                	mov    eax,ebx
c000d4bf:	83 c4 10             	add    esp,0x10
c000d4c2:	5b                   	pop    ebx
c000d4c3:	5e                   	pop    esi
c000d4c4:	5f                   	pop    edi
c000d4c5:	c3                   	ret    

c000d4c6 <CmClose(Reghive_Tag*)>:
c000d4c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d4ca:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d4ce:	74 0b                	je     c000d4db <CmClose(Reghive_Tag*)+0x15>
c000d4d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d4d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d4d6:	e9 d3 ac ff ff       	jmp    c00081ae <File::close()>
c000d4db:	c3                   	ret    

c000d4dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d4dc:	53                   	push   ebx
c000d4dd:	83 ec 18             	sub    esp,0x18
c000d4e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d4e4:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d4e8:	74 29                	je     c000d513 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d4ea:	50                   	push   eax
c000d4eb:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d4f0:	99                   	cdq    
c000d4f1:	52                   	push   edx
c000d4f2:	50                   	push   eax
c000d4f3:	ff 33                	push   DWORD PTR [ebx]
c000d4f5:	e8 14 ad ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d4fa:	5a                   	pop    edx
c000d4fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4fd:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d501:	8b 10                	mov    edx,DWORD PTR [eax]
c000d503:	51                   	push   ecx
c000d504:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d508:	6a 00                	push   0x0
c000d50a:	6a 2b                	push   0x2b
c000d50c:	50                   	push   eax
c000d50d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d510:	83 c4 20             	add    esp,0x20
c000d513:	83 c4 18             	add    esp,0x18
c000d516:	5b                   	pop    ebx
c000d517:	c3                   	ret    

c000d518 <CmGetString(Reghive_Tag*, int, char*)>:
c000d518:	55                   	push   ebp
c000d519:	57                   	push   edi
c000d51a:	56                   	push   esi
c000d51b:	53                   	push   ebx
c000d51c:	31 db                	xor    ebx,ebx
c000d51e:	83 ec 70             	sub    esp,0x70
c000d521:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d528:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d52c:	50                   	push   eax
c000d52d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d534:	55                   	push   ebp
c000d535:	e8 a2 ff ff ff       	call   c000d4dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d53a:	83 c4 10             	add    esp,0x10
c000d53d:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d542:	c1 e0 08             	shl    eax,0x8
c000d545:	89 c2                	mov    edx,eax
c000d547:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d54c:	09 d0                	or     eax,edx
c000d54e:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d553:	c1 e0 08             	shl    eax,0x8
c000d556:	09 d0                	or     eax,edx
c000d558:	74 25                	je     c000d57f <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d55a:	6b fb 0d             	imul   edi,ebx,0xd
c000d55d:	52                   	push   edx
c000d55e:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d562:	52                   	push   edx
c000d563:	50                   	push   eax
c000d564:	55                   	push   ebp
c000d565:	e8 72 ff ff ff       	call   c000d4dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d56a:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d56e:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d575:	b9 27 00 00 00       	mov    ecx,0x27
c000d57a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d57c:	83 c4 10             	add    esp,0x10
c000d57f:	83 c3 03             	add    ebx,0x3
c000d582:	83 fb 15             	cmp    ebx,0x15
c000d585:	75 b6                	jne    c000d53d <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d587:	83 c4 6c             	add    esp,0x6c
c000d58a:	5b                   	pop    ebx
c000d58b:	5e                   	pop    esi
c000d58c:	5f                   	pop    edi
c000d58d:	5d                   	pop    ebp
c000d58e:	c3                   	ret    

c000d58f <CmEnterDirectory(Reghive_Tag*, int)>:
c000d58f:	83 ec 40             	sub    esp,0x40
c000d592:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d596:	50                   	push   eax
c000d597:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d59b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d59f:	e8 38 ff ff ff       	call   c000d4dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d5a4:	83 c4 10             	add    esp,0x10
c000d5a7:	83 c8 ff             	or     eax,0xffffffff
c000d5aa:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d5af:	75 19                	jne    c000d5ca <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d5b1:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d5b6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d5bb:	c1 e0 08             	shl    eax,0x8
c000d5be:	09 c2                	or     edx,eax
c000d5c0:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d5c5:	c1 e0 10             	shl    eax,0x10
c000d5c8:	09 d0                	or     eax,edx
c000d5ca:	83 c4 3c             	add    esp,0x3c
c000d5cd:	c3                   	ret    

c000d5ce <CmGetNext(Reghive_Tag*, int)>:
c000d5ce:	83 ec 40             	sub    esp,0x40
c000d5d1:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d5d5:	50                   	push   eax
c000d5d6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5da:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5de:	e8 f9 fe ff ff       	call   c000d4dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d5e3:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d5e8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d5ed:	c1 e0 08             	shl    eax,0x8
c000d5f0:	09 c2                	or     edx,eax
c000d5f2:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d5f7:	83 c4 4c             	add    esp,0x4c
c000d5fa:	c1 e0 10             	shl    eax,0x10
c000d5fd:	09 d0                	or     eax,edx
c000d5ff:	c3                   	ret    

c000d600 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d600:	53                   	push   ebx
c000d601:	83 ec 18             	sub    esp,0x18
c000d604:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d608:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d60c:	74 29                	je     c000d637 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d60e:	50                   	push   eax
c000d60f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d614:	99                   	cdq    
c000d615:	52                   	push   edx
c000d616:	50                   	push   eax
c000d617:	ff 33                	push   DWORD PTR [ebx]
c000d619:	e8 f0 ab ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d61e:	5a                   	pop    edx
c000d61f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d621:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d625:	8b 10                	mov    edx,DWORD PTR [eax]
c000d627:	51                   	push   ecx
c000d628:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d62c:	6a 00                	push   0x0
c000d62e:	6a 2b                	push   0x2b
c000d630:	50                   	push   eax
c000d631:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d634:	83 c4 20             	add    esp,0x20
c000d637:	83 c4 18             	add    esp,0x18
c000d63a:	5b                   	pop    ebx
c000d63b:	c3                   	ret    

c000d63c <CmFreeExtent(Reghive_Tag*, int)>:
c000d63c:	53                   	push   ebx
c000d63d:	83 ec 3c             	sub    esp,0x3c
c000d640:	6a 2b                	push   0x2b
c000d642:	6a 00                	push   0x0
c000d644:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d648:	53                   	push   ebx
c000d649:	e8 a2 2e ff ff       	call   c00004f0 <memset>
c000d64e:	83 c4 0c             	add    esp,0xc
c000d651:	53                   	push   ebx
c000d652:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d656:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d65a:	e8 a1 ff ff ff       	call   c000d600 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d65f:	83 c4 48             	add    esp,0x48
c000d662:	5b                   	pop    ebx
c000d663:	c3                   	ret    

c000d664 <CmUpdateHeader(Reghive_Tag*)>:
c000d664:	83 ec 0c             	sub    esp,0xc
c000d667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d66b:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d66f:	74 10                	je     c000d681 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d671:	52                   	push   edx
c000d672:	8d 50 05             	lea    edx,[eax+0x5]
c000d675:	52                   	push   edx
c000d676:	6a 00                	push   0x0
c000d678:	50                   	push   eax
c000d679:	e8 82 ff ff ff       	call   c000d600 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d67e:	83 c4 10             	add    esp,0x10
c000d681:	83 c4 0c             	add    esp,0xc
c000d684:	c3                   	ret    

c000d685 <CmExpand(Reghive_Tag*, int)>:
c000d685:	57                   	push   edi
c000d686:	56                   	push   esi
c000d687:	83 ce ff             	or     esi,0xffffffff
c000d68a:	53                   	push   ebx
c000d68b:	83 ec 30             	sub    esp,0x30
c000d68e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d692:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d696:	74 5f                	je     c000d6f7 <CmExpand(Reghive_Tag*, int)+0x72>
c000d698:	31 d2                	xor    edx,edx
c000d69a:	31 f6                	xor    esi,esi
c000d69c:	50                   	push   eax
c000d69d:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d6a1:	52                   	push   edx
c000d6a2:	50                   	push   eax
c000d6a3:	ff 33                	push   DWORD PTR [ebx]
c000d6a5:	e8 64 ab ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d6aa:	83 c4 0c             	add    esp,0xc
c000d6ad:	6a 2b                	push   0x2b
c000d6af:	6a 00                	push   0x0
c000d6b1:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000d6b5:	57                   	push   edi
c000d6b6:	e8 35 2e ff ff       	call   c00004f0 <memset>
c000d6bb:	83 c4 10             	add    esp,0x10
c000d6be:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d6c2:	7d 1b                	jge    c000d6df <CmExpand(Reghive_Tag*, int)+0x5a>
c000d6c4:	83 ec 0c             	sub    esp,0xc
c000d6c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d6c9:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d6cd:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6cf:	46                   	inc    esi
c000d6d0:	51                   	push   ecx
c000d6d1:	57                   	push   edi
c000d6d2:	6a 00                	push   0x0
c000d6d4:	6a 2b                	push   0x2b
c000d6d6:	50                   	push   eax
c000d6d7:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d6da:	83 c4 20             	add    esp,0x20
c000d6dd:	eb df                	jmp    c000d6be <CmExpand(Reghive_Tag*, int)+0x39>
c000d6df:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d6e3:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000d6e6:	83 ec 0c             	sub    esp,0xc
c000d6e9:	01 f2                	add    edx,esi
c000d6eb:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000d6ee:	53                   	push   ebx
c000d6ef:	e8 70 ff ff ff       	call   c000d664 <CmUpdateHeader(Reghive_Tag*)>
c000d6f4:	83 c4 10             	add    esp,0x10
c000d6f7:	83 c4 30             	add    esp,0x30
c000d6fa:	89 f0                	mov    eax,esi
c000d6fc:	5b                   	pop    ebx
c000d6fd:	5e                   	pop    esi
c000d6fe:	5f                   	pop    edi
c000d6ff:	c3                   	ret    

c000d700 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d700:	55                   	push   ebp
c000d701:	57                   	push   edi
c000d702:	56                   	push   esi
c000d703:	53                   	push   ebx
c000d704:	83 cb ff             	or     ebx,0xffffffff
c000d707:	83 ec 1c             	sub    esp,0x1c
c000d70a:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d70e:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d712:	74 68                	je     c000d77c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d714:	be 2b 00 00 00       	mov    esi,0x2b
c000d719:	51                   	push   ecx
c000d71a:	31 ff                	xor    edi,edi
c000d71c:	6a 00                	push   0x0
c000d71e:	31 db                	xor    ebx,ebx
c000d720:	6a 00                	push   0x0
c000d722:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d725:	e8 e4 aa ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d72a:	83 c4 10             	add    esp,0x10
c000d72d:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d730:	76 3b                	jbe    c000d76d <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d732:	83 ec 0c             	sub    esp,0xc
c000d735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d738:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d73c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d73e:	51                   	push   ecx
c000d73f:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d743:	51                   	push   ecx
c000d744:	6a 00                	push   0x0
c000d746:	6a 01                	push   0x1
c000d748:	50                   	push   eax
c000d749:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d74c:	83 c4 20             	add    esp,0x20
c000d74f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d754:	74 26                	je     c000d77c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d756:	43                   	inc    ebx
c000d757:	52                   	push   edx
c000d758:	57                   	push   edi
c000d759:	56                   	push   esi
c000d75a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d75d:	e8 ac aa ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d762:	83 c6 2b             	add    esi,0x2b
c000d765:	83 d7 00             	adc    edi,0x0
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	eb c0                	jmp    c000d72d <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d76d:	50                   	push   eax
c000d76e:	50                   	push   eax
c000d76f:	6a 40                	push   0x40
c000d771:	55                   	push   ebp
c000d772:	e8 0e ff ff ff       	call   c000d685 <CmExpand(Reghive_Tag*, int)>
c000d777:	83 c4 10             	add    esp,0x10
c000d77a:	89 c3                	mov    ebx,eax
c000d77c:	83 c4 1c             	add    esp,0x1c
c000d77f:	89 d8                	mov    eax,ebx
c000d781:	5b                   	pop    ebx
c000d782:	5e                   	pop    esi
c000d783:	5f                   	pop    edi
c000d784:	5d                   	pop    ebp
c000d785:	c3                   	ret    

c000d786 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d786:	55                   	push   ebp
c000d787:	57                   	push   edi
c000d788:	56                   	push   esi
c000d789:	53                   	push   ebx
c000d78a:	81 ec 88 00 00 00    	sub    esp,0x88
c000d790:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d797:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d79e:	e8 5d ff ff ff       	call   c000d700 <CmFindUnusedExtent(Reghive_Tag*)>
c000d7a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d7a7:	83 c4 0c             	add    esp,0xc
c000d7aa:	6a 2b                	push   0x2b
c000d7ac:	6a 00                	push   0x0
c000d7ae:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d7b2:	55                   	push   ebp
c000d7b3:	e8 38 2d ff ff       	call   c00004f0 <memset>
c000d7b8:	83 c4 10             	add    esp,0x10
c000d7bb:	85 db                	test   ebx,ebx
c000d7bd:	74 12                	je     c000d7d1 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d7bf:	51                   	push   ecx
c000d7c0:	55                   	push   ebp
c000d7c1:	53                   	push   ebx
c000d7c2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7c9:	e8 0e fd ff ff       	call   c000d4dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d7ce:	83 c4 10             	add    esp,0x10
c000d7d1:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d7d5:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d7dc:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d7e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7e3:	85 db                	test   ebx,ebx
c000d7e5:	74 49                	je     c000d830 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d7e7:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d7ec:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d7f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d7f5:	c1 e0 08             	shl    eax,0x8
c000d7f8:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d7fe:	09 c8                	or     eax,ecx
c000d800:	74 11                	je     c000d813 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d802:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d806:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d80a:	c1 e8 10             	shr    eax,0x10
c000d80d:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d811:	eb 0f                	jmp    c000d822 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d813:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d818:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d81d:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d822:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d826:	c1 ea 08             	shr    edx,0x8
c000d829:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d82e:	eb 0f                	jmp    c000d83f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d830:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d835:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d83a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d83f:	52                   	push   edx
c000d840:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d844:	50                   	push   eax
c000d845:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d849:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d850:	e8 ab fd ff ff       	call   c000d600 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d855:	83 c4 10             	add    esp,0x10
c000d858:	85 db                	test   ebx,ebx
c000d85a:	74 12                	je     c000d86e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d85c:	50                   	push   eax
c000d85d:	55                   	push   ebp
c000d85e:	53                   	push   ebx
c000d85f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d866:	e8 95 fd ff ff       	call   c000d600 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d86b:	83 c4 10             	add    esp,0x10
c000d86e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d872:	83 c4 7c             	add    esp,0x7c
c000d875:	5b                   	pop    ebx
c000d876:	5e                   	pop    esi
c000d877:	5f                   	pop    edi
c000d878:	5d                   	pop    ebp
c000d879:	c3                   	ret    

c000d87a <CmSetString(Reghive_Tag*, int, char const*)>:
c000d87a:	55                   	push   ebp
c000d87b:	57                   	push   edi
c000d87c:	56                   	push   esi
c000d87d:	53                   	push   ebx
c000d87e:	bb 27 00 00 00       	mov    ebx,0x27
c000d883:	81 ec 88 00 00 00    	sub    esp,0x88
c000d889:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d890:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d897:	e8 d4 2c ff ff       	call   c0000570 <strlen>
c000d89c:	8d 48 26             	lea    ecx,[eax+0x26]
c000d89f:	89 c8                	mov    eax,ecx
c000d8a1:	99                   	cdq    
c000d8a2:	f7 fb                	idiv   ebx
c000d8a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d8a8:	83 c4 10             	add    esp,0x10
c000d8ab:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d8b1:	7e 10                	jle    c000d8c3 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d8b3:	83 ec 0c             	sub    esp,0xc
c000d8b6:	68 cd 3c 02 c0       	push   0xc0023ccd
c000d8bb:	e8 52 27 00 00       	call   c0010012 <KePanic(char const*)>
c000d8c0:	83 c4 10             	add    esp,0x10
c000d8c3:	31 ff                	xor    edi,edi
c000d8c5:	50                   	push   eax
c000d8c6:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d8ca:	53                   	push   ebx
c000d8cb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d8d2:	56                   	push   esi
c000d8d3:	e8 04 fc ff ff       	call   c000d4dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d8d8:	83 c4 10             	add    esp,0x10
c000d8db:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000d8df:	89 d0                	mov    eax,edx
c000d8e1:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000d8e5:	c1 e0 08             	shl    eax,0x8
c000d8e8:	09 c2                	or     edx,eax
c000d8ea:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d8ee:	c1 e2 08             	shl    edx,0x8
c000d8f1:	09 c2                	or     edx,eax
c000d8f3:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000d8f7:	7e 76                	jle    c000d96f <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000d8f9:	85 d2                	test   edx,edx
c000d8fb:	75 25                	jne    c000d922 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d8fd:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d902:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d906:	50                   	push   eax
c000d907:	6a 00                	push   0x0
c000d909:	6a 00                	push   0x0
c000d90b:	56                   	push   esi
c000d90c:	e8 75 fe ff ff       	call   c000d786 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d911:	83 c4 10             	add    esp,0x10
c000d914:	89 c2                	mov    edx,eax
c000d916:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d919:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d91c:	c1 f8 10             	sar    eax,0x10
c000d91f:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d922:	55                   	push   ebp
c000d923:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000d927:	55                   	push   ebp
c000d928:	52                   	push   edx
c000d929:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d92d:	56                   	push   esi
c000d92e:	e8 a9 fb ff ff       	call   c000d4dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d933:	83 c4 0c             	add    esp,0xc
c000d936:	6a 27                	push   0x27
c000d938:	6a 00                	push   0x0
c000d93a:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d93e:	51                   	push   ecx
c000d93f:	e8 ac 2b ff ff       	call   c00004f0 <memset>
c000d944:	83 c4 0c             	add    esp,0xc
c000d947:	6b c7 27             	imul   eax,edi,0x27
c000d94a:	6a 27                	push   0x27
c000d94c:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d953:	50                   	push   eax
c000d954:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d958:	51                   	push   ecx
c000d959:	e8 22 2d ff ff       	call   c0000680 <strncpy>
c000d95e:	83 c4 0c             	add    esp,0xc
c000d961:	55                   	push   ebp
c000d962:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d966:	52                   	push   edx
c000d967:	56                   	push   esi
c000d968:	e8 93 fc ff ff       	call   c000d600 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d96d:	eb 19                	jmp    c000d988 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000d96f:	85 d2                	test   edx,edx
c000d971:	74 18                	je     c000d98b <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000d973:	51                   	push   ecx
c000d974:	51                   	push   ecx
c000d975:	52                   	push   edx
c000d976:	56                   	push   esi
c000d977:	e8 c0 fc ff ff       	call   c000d63c <CmFreeExtent(Reghive_Tag*, int)>
c000d97c:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d980:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d984:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d988:	83 c4 10             	add    esp,0x10
c000d98b:	47                   	inc    edi
c000d98c:	83 c3 03             	add    ebx,0x3
c000d98f:	83 ff 07             	cmp    edi,0x7
c000d992:	0f 85 43 ff ff ff    	jne    c000d8db <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d998:	50                   	push   eax
c000d999:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d99d:	50                   	push   eax
c000d99e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d9a5:	56                   	push   esi
c000d9a6:	e8 55 fc ff ff       	call   c000d600 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d9ab:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d9b1:	5b                   	pop    ebx
c000d9b2:	5e                   	pop    esi
c000d9b3:	5f                   	pop    edi
c000d9b4:	5d                   	pop    ebp
c000d9b5:	c3                   	ret    

c000d9b6 <CmGetMatch(char*, char*, bool, bool*)>:
c000d9b6:	56                   	push   esi
c000d9b7:	53                   	push   ebx
c000d9b8:	50                   	push   eax
c000d9b9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d9bd:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d9c2:	74 25                	je     c000d9e9 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d9c4:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d9c7:	31 db                	xor    ebx,ebx
c000d9c9:	50                   	push   eax
c000d9ca:	50                   	push   eax
c000d9cb:	8d 04 9d 20 61 02 c0 	lea    eax,[ebx*4-0x3ffd9ee0]
c000d9d2:	50                   	push   eax
c000d9d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9d7:	e8 74 2d ff ff       	call   c0000750 <strcmp>
c000d9dc:	83 c4 10             	add    esp,0x10
c000d9df:	85 c0                	test   eax,eax
c000d9e1:	74 2e                	je     c000da11 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d9e3:	43                   	inc    ebx
c000d9e4:	83 fb 3f             	cmp    ebx,0x3f
c000d9e7:	75 e0                	jne    c000d9c9 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d9e9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d9ec:	31 db                	xor    ebx,ebx
c000d9ee:	8d 04 9d 20 61 02 c0 	lea    eax,[ebx*4-0x3ffd9ee0]
c000d9f5:	51                   	push   ecx
c000d9f6:	51                   	push   ecx
c000d9f7:	50                   	push   eax
c000d9f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d9fc:	e8 4f 2d ff ff       	call   c0000750 <strcmp>
c000da01:	83 c4 10             	add    esp,0x10
c000da04:	85 c0                	test   eax,eax
c000da06:	74 09                	je     c000da11 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000da08:	43                   	inc    ebx
c000da09:	83 fb 3f             	cmp    ebx,0x3f
c000da0c:	75 e0                	jne    c000d9ee <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000da0e:	83 cb ff             	or     ebx,0xffffffff
c000da11:	89 d8                	mov    eax,ebx
c000da13:	5a                   	pop    edx
c000da14:	5b                   	pop    ebx
c000da15:	5e                   	pop    esi
c000da16:	c3                   	ret    

c000da17 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000da17:	55                   	push   ebp
c000da18:	31 c0                	xor    eax,eax
c000da1a:	57                   	push   edi
c000da1b:	56                   	push   esi
c000da1c:	53                   	push   ebx
c000da1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da21:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da25:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000da27:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000da2b:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000da2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da32:	83 fd 1f             	cmp    ebp,0x1f
c000da35:	7f 0b                	jg     c000da42 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000da37:	0f b6 c2             	movzx  eax,dl
c000da3a:	d3 e0                	shl    eax,cl
c000da3c:	09 07                	or     DWORD PTR [edi],eax
c000da3e:	b0 01                	mov    al,0x1
c000da40:	01 33                	add    DWORD PTR [ebx],esi
c000da42:	5b                   	pop    ebx
c000da43:	5e                   	pop    esi
c000da44:	5f                   	pop    edi
c000da45:	5d                   	pop    ebp
c000da46:	c3                   	ret    

c000da47 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000da47:	57                   	push   edi
c000da48:	56                   	push   esi
c000da49:	53                   	push   ebx
c000da4a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000da4e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000da52:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da56:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000da5a:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000da5c:	7c 17                	jl     c000da75 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000da5e:	8b 17                	mov    edx,DWORD PTR [edi]
c000da60:	b8 01 00 00 00       	mov    eax,0x1
c000da65:	d3 e0                	shl    eax,cl
c000da67:	48                   	dec    eax
c000da68:	21 d0                	and    eax,edx
c000da6a:	d3 ea                	shr    edx,cl
c000da6c:	89 17                	mov    DWORD PTR [edi],edx
c000da6e:	29 0b                	sub    DWORD PTR [ebx],ecx
c000da70:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000da73:	eb 05                	jmp    c000da7a <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000da75:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000da78:	31 c0                	xor    eax,eax
c000da7a:	5b                   	pop    ebx
c000da7b:	5e                   	pop    esi
c000da7c:	5f                   	pop    edi
c000da7d:	c3                   	ret    

c000da7e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000da7e:	83 ec 40             	sub    esp,0x40
c000da81:	8d 44 24 09          	lea    eax,[esp+0x9]
c000da85:	50                   	push   eax
c000da86:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da8a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da8e:	e8 49 fa ff ff       	call   c000d4dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da93:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000da97:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000da9b:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000da9f:	89 10                	mov    DWORD PTR [eax],edx
c000daa1:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000daa4:	83 c4 4c             	add    esp,0x4c
c000daa7:	c3                   	ret    

c000daa8 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000daa8:	55                   	push   ebp
c000daa9:	57                   	push   edi
c000daaa:	56                   	push   esi
c000daab:	53                   	push   ebx
c000daac:	83 ec 40             	sub    esp,0x40
c000daaf:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000dab3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000dab7:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000dabb:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000dabf:	53                   	push   ebx
c000dac0:	56                   	push   esi
c000dac1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dac5:	e8 12 fa ff ff       	call   c000d4dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000daca:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000dace:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000dad2:	83 c4 0c             	add    esp,0xc
c000dad5:	53                   	push   ebx
c000dad6:	56                   	push   esi
c000dad7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dadb:	e8 20 fb ff ff       	call   c000d600 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dae0:	83 c4 4c             	add    esp,0x4c
c000dae3:	5b                   	pop    ebx
c000dae4:	5e                   	pop    esi
c000dae5:	5f                   	pop    edi
c000dae6:	5d                   	pop    ebp
c000dae7:	c3                   	ret    

c000dae8 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000dae8:	55                   	push   ebp
c000dae9:	57                   	push   edi
c000daea:	56                   	push   esi
c000daeb:	31 f6                	xor    esi,esi
c000daed:	53                   	push   ebx
c000daee:	31 db                	xor    ebx,ebx
c000daf0:	83 ec 40             	sub    esp,0x40
c000daf3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dafb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000db03:	6a 12                	push   0x12
c000db05:	68 ee 00 00 00       	push   0xee
c000db0a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000db0e:	e8 dd 29 ff ff       	call   c00004f0 <memset>
c000db13:	83 c4 10             	add    esp,0x10
c000db16:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000db1a:	6a 08                	push   0x8
c000db1c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000db20:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000db24:	50                   	push   eax
c000db25:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000db29:	55                   	push   ebp
c000db2a:	57                   	push   edi
c000db2b:	e8 e7 fe ff ff       	call   c000da17 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000db30:	83 c4 10             	add    esp,0x10
c000db33:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000db37:	50                   	push   eax
c000db38:	6a 06                	push   0x6
c000db3a:	55                   	push   ebp
c000db3b:	57                   	push   edi
c000db3c:	e8 06 ff ff ff       	call   c000da47 <CmGetShift(unsigned int*, int*, int, bool*)>
c000db41:	83 c4 10             	add    esp,0x10
c000db44:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000db49:	74 07                	je     c000db52 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000db4b:	46                   	inc    esi
c000db4c:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000db50:	eb e1                	jmp    c000db33 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000db52:	43                   	inc    ebx
c000db53:	83 fb 12             	cmp    ebx,0x12
c000db56:	75 c2                	jne    c000db1a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000db58:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000db5c:	31 db                	xor    ebx,ebx
c000db5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000db61:	50                   	push   eax
c000db62:	50                   	push   eax
c000db63:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000db68:	43                   	inc    ebx
c000db69:	8d 04 85 20 61 02 c0 	lea    eax,[eax*4-0x3ffd9ee0]
c000db70:	50                   	push   eax
c000db71:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000db75:	e8 c6 2c ff ff       	call   c0000840 <strcat>
c000db7a:	83 c4 10             	add    esp,0x10
c000db7d:	83 fb 18             	cmp    ebx,0x18
c000db80:	75 df                	jne    c000db61 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000db82:	83 c4 3c             	add    esp,0x3c
c000db85:	31 c0                	xor    eax,eax
c000db87:	5b                   	pop    ebx
c000db88:	5e                   	pop    esi
c000db89:	5f                   	pop    edi
c000db8a:	5d                   	pop    ebp
c000db8b:	c3                   	ret    

c000db8c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000db8c:	83 ec 40             	sub    esp,0x40
c000db8f:	8d 44 24 09          	lea    eax,[esp+0x9]
c000db93:	50                   	push   eax
c000db94:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db98:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db9c:	e8 3b f9 ff ff       	call   c000d4dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dba1:	58                   	pop    eax
c000dba2:	5a                   	pop    edx
c000dba3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000dba7:	8d 44 24 15          	lea    eax,[esp+0x15]
c000dbab:	50                   	push   eax
c000dbac:	e8 37 ff ff ff       	call   c000dae8 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000dbb1:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000dbb6:	83 c4 4c             	add    esp,0x4c
c000dbb9:	c3                   	ret    

c000dbba <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000dbba:	55                   	push   ebp
c000dbbb:	57                   	push   edi
c000dbbc:	56                   	push   esi
c000dbbd:	53                   	push   ebx
c000dbbe:	31 db                	xor    ebx,ebx
c000dbc0:	83 ec 70             	sub    esp,0x70
c000dbc3:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000dbca:	6a 30                	push   0x30
c000dbcc:	6a 00                	push   0x0
c000dbce:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000dbd2:	56                   	push   esi
c000dbd3:	e8 18 29 ff ff       	call   c00004f0 <memset>
c000dbd8:	83 c4 10             	add    esp,0x10
c000dbdb:	83 ec 0c             	sub    esp,0xc
c000dbde:	57                   	push   edi
c000dbdf:	e8 8c 29 ff ff       	call   c0000570 <strlen>
c000dbe4:	83 c4 10             	add    esp,0x10
c000dbe7:	39 d8                	cmp    eax,ebx
c000dbe9:	76 16                	jbe    c000dc01 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000dbeb:	83 ec 0c             	sub    esp,0xc
c000dbee:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000dbf2:	50                   	push   eax
c000dbf3:	e8 38 2d ff ff       	call   c0000930 <toupper>
c000dbf8:	83 c4 10             	add    esp,0x10
c000dbfb:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000dbfe:	43                   	inc    ebx
c000dbff:	eb da                	jmp    c000dbdb <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000dc01:	31 f6                	xor    esi,esi
c000dc03:	52                   	push   edx
c000dc04:	31 ff                	xor    edi,edi
c000dc06:	6a 18                	push   0x18
c000dc08:	6a 3f                	push   0x3f
c000dc0a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000dc0e:	50                   	push   eax
c000dc0f:	e8 dc 28 ff ff       	call   c00004f0 <memset>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000dc1b:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000dc1f:	84 c0                	test   al,al
c000dc21:	0f 84 b0 00 00 00    	je     c000dcd7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dc27:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000dc2b:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000dc30:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000dc34:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000dc39:	8d 6e 01             	lea    ebp,[esi+0x1]
c000dc3c:	83 ec 0c             	sub    esp,0xc
c000dc3f:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000dc43:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000dc47:	53                   	push   ebx
c000dc48:	e8 23 29 ff ff       	call   c0000570 <strlen>
c000dc4d:	83 c4 10             	add    esp,0x10
c000dc50:	85 c0                	test   eax,eax
c000dc52:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dc56:	74 0b                	je     c000dc63 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000dc58:	50                   	push   eax
c000dc59:	6a 01                	push   0x1
c000dc5b:	53                   	push   ebx
c000dc5c:	8d 44 24 20          	lea    eax,[esp+0x20]
c000dc60:	50                   	push   eax
c000dc61:	eb 0a                	jmp    c000dc6d <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000dc63:	50                   	push   eax
c000dc64:	6a 00                	push   0x0
c000dc66:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000dc6a:	50                   	push   eax
c000dc6b:	6a 00                	push   0x0
c000dc6d:	e8 44 fd ff ff       	call   c000d9b6 <CmGetMatch(char*, char*, bool, bool*)>
c000dc72:	83 c4 10             	add    esp,0x10
c000dc75:	83 f8 ff             	cmp    eax,0xffffffff
c000dc78:	75 1a                	jne    c000dc94 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dc7a:	83 ec 0c             	sub    esp,0xc
c000dc7d:	68 e2 3c 02 c0       	push   0xc0023ce2
c000dc82:	e8 8b 23 00 00       	call   c0010012 <KePanic(char const*)>
c000dc87:	83 c4 10             	add    esp,0x10
c000dc8a:	b8 02 00 00 00       	mov    eax,0x2
c000dc8f:	e9 bc 00 00 00       	jmp    c000dd50 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dc94:	83 ff 18             	cmp    edi,0x18
c000dc97:	75 1a                	jne    c000dcb3 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dc99:	83 ec 0c             	sub    esp,0xc
c000dc9c:	68 f7 3c 02 c0       	push   0xc0023cf7
c000dca1:	e8 6c 23 00 00       	call   c0010012 <KePanic(char const*)>
c000dca6:	83 c4 10             	add    esp,0x10
c000dca9:	b8 01 00 00 00       	mov    eax,0x1
c000dcae:	e9 9d 00 00 00       	jmp    c000dd50 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dcb3:	47                   	inc    edi
c000dcb4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dcb9:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dcbd:	74 02                	je     c000dcc1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000dcbf:	89 ee                	mov    esi,ebp
c000dcc1:	83 ec 0c             	sub    esp,0xc
c000dcc4:	53                   	push   ebx
c000dcc5:	e8 a6 28 ff ff       	call   c0000570 <strlen>
c000dcca:	83 c4 10             	add    esp,0x10
c000dccd:	85 c0                	test   eax,eax
c000dccf:	74 06                	je     c000dcd7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dcd1:	46                   	inc    esi
c000dcd2:	e9 40 ff ff ff       	jmp    c000dc17 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dcd7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dcdf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dce7:	31 f6                	xor    esi,esi
c000dce9:	50                   	push   eax
c000dcea:	31 ff                	xor    edi,edi
c000dcec:	6a 12                	push   0x12
c000dcee:	68 ee 00 00 00       	push   0xee
c000dcf3:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dcfa:	e8 f1 27 ff ff       	call   c00004f0 <memset>
c000dcff:	83 c4 10             	add    esp,0x10
c000dd02:	83 fe 17             	cmp    esi,0x17
c000dd05:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dd09:	7e 26                	jle    c000dd31 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000dd0b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dd0f:	50                   	push   eax
c000dd10:	6a 08                	push   0x8
c000dd12:	55                   	push   ebp
c000dd13:	53                   	push   ebx
c000dd14:	e8 2e fd ff ff       	call   c000da47 <CmGetShift(unsigned int*, int*, int, bool*)>
c000dd19:	83 c4 10             	add    esp,0x10
c000dd1c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dd21:	74 26                	je     c000dd49 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000dd23:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dd2a:	4e                   	dec    esi
c000dd2b:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dd2e:	47                   	inc    edi
c000dd2f:	eb 1c                	jmp    c000dd4d <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dd31:	6a 06                	push   0x6
c000dd33:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000dd38:	50                   	push   eax
c000dd39:	55                   	push   ebp
c000dd3a:	53                   	push   ebx
c000dd3b:	e8 d7 fc ff ff       	call   c000da17 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dd40:	83 c4 10             	add    esp,0x10
c000dd43:	84 c0                	test   al,al
c000dd45:	75 06                	jne    c000dd4d <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dd47:	eb c2                	jmp    c000dd0b <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000dd49:	31 c0                	xor    eax,eax
c000dd4b:	eb 03                	jmp    c000dd50 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dd4d:	46                   	inc    esi
c000dd4e:	eb b2                	jmp    c000dd02 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000dd50:	83 c4 6c             	add    esp,0x6c
c000dd53:	5b                   	pop    ebx
c000dd54:	5e                   	pop    esi
c000dd55:	5f                   	pop    edi
c000dd56:	5d                   	pop    ebp
c000dd57:	c3                   	ret    

c000dd58 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dd58:	53                   	push   ebx
c000dd59:	83 ec 3c             	sub    esp,0x3c
c000dd5c:	6a 2b                	push   0x2b
c000dd5e:	6a 00                	push   0x0
c000dd60:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dd64:	53                   	push   ebx
c000dd65:	e8 86 27 ff ff       	call   c00004f0 <memset>
c000dd6a:	58                   	pop    eax
c000dd6b:	5a                   	pop    edx
c000dd6c:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd70:	50                   	push   eax
c000dd71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd75:	e8 40 fe ff ff       	call   c000dbba <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd7a:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dd7f:	83 c4 0c             	add    esp,0xc
c000dd82:	6a 15                	push   0x15
c000dd84:	6a 00                	push   0x0
c000dd86:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dd8a:	50                   	push   eax
c000dd8b:	e8 60 27 ff ff       	call   c00004f0 <memset>
c000dd90:	53                   	push   ebx
c000dd91:	6a 00                	push   0x0
c000dd93:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd97:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd9b:	e8 e6 f9 ff ff       	call   c000d786 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dda0:	83 c4 58             	add    esp,0x58
c000dda3:	5b                   	pop    ebx
c000dda4:	c3                   	ret    

c000dda5 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000dda5:	56                   	push   esi
c000dda6:	53                   	push   ebx
c000dda7:	83 ec 48             	sub    esp,0x48
c000ddaa:	6a 12                	push   0x12
c000ddac:	68 ff 00 00 00       	push   0xff
c000ddb1:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000ddb5:	56                   	push   esi
c000ddb6:	e8 35 27 ff ff       	call   c00004f0 <memset>
c000ddbb:	5a                   	pop    edx
c000ddbc:	59                   	pop    ecx
c000ddbd:	56                   	push   esi
c000ddbe:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ddc2:	e8 f3 fd ff ff       	call   c000dbba <CmConvertToInternalFilename(char const*, unsigned char*)>
c000ddc7:	83 c4 10             	add    esp,0x10
c000ddca:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000ddce:	85 db                	test   ebx,ebx
c000ddd0:	74 42                	je     c000de14 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000ddd2:	50                   	push   eax
c000ddd3:	8d 44 24 19          	lea    eax,[esp+0x19]
c000ddd7:	50                   	push   eax
c000ddd8:	53                   	push   ebx
c000ddd9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dddd:	e8 fa f6 ff ff       	call   c000d4dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dde2:	83 c4 0c             	add    esp,0xc
c000dde5:	6a 12                	push   0x12
c000dde7:	8d 44 24 21          	lea    eax,[esp+0x21]
c000ddeb:	50                   	push   eax
c000ddec:	56                   	push   esi
c000dded:	e8 8e 25 ff ff       	call   c0000380 <memcmp>
c000ddf2:	83 c4 10             	add    esp,0x10
c000ddf5:	85 c0                	test   eax,eax
c000ddf7:	74 1e                	je     c000de17 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000ddf9:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000ddfe:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000de03:	c1 e3 08             	shl    ebx,0x8
c000de06:	09 d8                	or     eax,ebx
c000de08:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000de0d:	c1 e3 10             	shl    ebx,0x10
c000de10:	09 c3                	or     ebx,eax
c000de12:	eb ba                	jmp    c000ddce <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000de14:	83 cb ff             	or     ebx,0xffffffff
c000de17:	89 d8                	mov    eax,ebx
c000de19:	83 c4 44             	add    esp,0x44
c000de1c:	5b                   	pop    ebx
c000de1d:	5e                   	pop    esi
c000de1e:	c3                   	ret    

c000de1f <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000de1f:	57                   	push   edi
c000de20:	56                   	push   esi
c000de21:	53                   	push   ebx
c000de22:	83 ec 34             	sub    esp,0x34
c000de25:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000de29:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000de2d:	6a 2b                	push   0x2b
c000de2f:	6a 00                	push   0x0
c000de31:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000de35:	53                   	push   ebx
c000de36:	e8 b5 26 ff ff       	call   c00004f0 <memset>
c000de3b:	58                   	pop    eax
c000de3c:	5a                   	pop    edx
c000de3d:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de41:	50                   	push   eax
c000de42:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000de46:	e8 6f fd ff ff       	call   c000dbba <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000de4f:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000de53:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000de57:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000de5b:	53                   	push   ebx
c000de5c:	6a 00                	push   0x0
c000de5e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de62:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000de66:	e8 1b f9 ff ff       	call   c000d786 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de6b:	83 c4 50             	add    esp,0x50
c000de6e:	5b                   	pop    ebx
c000de6f:	5e                   	pop    esi
c000de70:	5f                   	pop    edi
c000de71:	c3                   	ret    

c000de72 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000de72:	55                   	push   ebp
c000de73:	57                   	push   edi
c000de74:	56                   	push   esi
c000de75:	53                   	push   ebx
c000de76:	83 ec 40             	sub    esp,0x40
c000de79:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000de7d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000de81:	6a 2b                	push   0x2b
c000de83:	6a 00                	push   0x0
c000de85:	8d 74 24 11          	lea    esi,[esp+0x11]
c000de89:	56                   	push   esi
c000de8a:	e8 61 26 ff ff       	call   c00004f0 <memset>
c000de8f:	5f                   	pop    edi
c000de90:	89 ef                	mov    edi,ebp
c000de92:	58                   	pop    eax
c000de93:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de97:	50                   	push   eax
c000de98:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000de9c:	e8 19 fd ff ff       	call   c000dbba <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dea1:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000dea6:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000deab:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000deb0:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	85 ed                	test   ebp,ebp
c000deba:	74 14                	je     c000ded0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000debc:	51                   	push   ecx
c000debd:	51                   	push   ecx
c000debe:	57                   	push   edi
c000debf:	53                   	push   ebx
c000dec0:	e8 09 f7 ff ff       	call   c000d5ce <CmGetNext(Reghive_Tag*, int)>
c000dec5:	83 c4 10             	add    esp,0x10
c000dec8:	85 c0                	test   eax,eax
c000deca:	74 04                	je     c000ded0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000decc:	89 c7                	mov    edi,eax
c000dece:	eb e8                	jmp    c000deb8 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000ded0:	56                   	push   esi
c000ded1:	6a 00                	push   0x0
c000ded3:	57                   	push   edi
c000ded4:	53                   	push   ebx
c000ded5:	e8 ac f8 ff ff       	call   c000d786 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000deda:	83 c4 0c             	add    esp,0xc
c000dedd:	89 c7                	mov    edi,eax
c000dedf:	56                   	push   esi
c000dee0:	50                   	push   eax
c000dee1:	53                   	push   ebx
c000dee2:	e8 f5 f5 ff ff       	call   c000d4dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dee7:	58                   	pop    eax
c000dee8:	5a                   	pop    edx
c000dee9:	6a 6c                	push   0x6c
c000deeb:	6a 00                	push   0x0
c000deed:	6a 00                	push   0x0
c000deef:	68 08 3d 02 c0       	push   0xc0023d08
c000def4:	57                   	push   edi
c000def5:	53                   	push   ebx
c000def6:	e8 24 ff ff ff       	call   c000de1f <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000defb:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000deff:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000df03:	c1 e8 10             	shr    eax,0x10
c000df06:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000df0a:	83 c4 1c             	add    esp,0x1c
c000df0d:	56                   	push   esi
c000df0e:	57                   	push   edi
c000df0f:	53                   	push   ebx
c000df10:	e8 eb f6 ff ff       	call   c000d600 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000df15:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000df1a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000df1f:	c1 e0 08             	shl    eax,0x8
c000df22:	09 c2                	or     edx,eax
c000df24:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000df29:	83 c4 4c             	add    esp,0x4c
c000df2c:	c1 e0 10             	shl    eax,0x10
c000df2f:	5b                   	pop    ebx
c000df30:	09 d0                	or     eax,edx
c000df32:	5e                   	pop    esi
c000df33:	5f                   	pop    edi
c000df34:	5d                   	pop    ebp
c000df35:	c3                   	ret    

c000df36 <zStrtok(char*, char const*)>:
c000df36:	55                   	push   ebp
c000df37:	57                   	push   edi
c000df38:	56                   	push   esi
c000df39:	53                   	push   ebx
c000df3a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000df3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df42:	85 db                	test   ebx,ebx
c000df44:	74 2f                	je     c000df75 <zStrtok(char*, char const*)+0x3f>
c000df46:	85 c0                	test   eax,eax
c000df48:	75 09                	jne    c000df53 <zStrtok(char*, char const*)+0x1d>
c000df4a:	a1 c0 c0 02 c0       	mov    eax,ds:0xc002c0c0
c000df4f:	85 c0                	test   eax,eax
c000df51:	74 50                	je     c000dfa3 <zStrtok(char*, char const*)+0x6d>
c000df53:	31 c9                	xor    ecx,ecx
c000df55:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000df59:	74 03                	je     c000df5e <zStrtok(char*, char const*)+0x28>
c000df5b:	41                   	inc    ecx
c000df5c:	eb f7                	jmp    c000df55 <zStrtok(char*, char const*)+0x1f>
c000df5e:	31 d2                	xor    edx,edx
c000df60:	39 ca                	cmp    edx,ecx
c000df62:	74 15                	je     c000df79 <zStrtok(char*, char const*)+0x43>
c000df64:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000df68:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000df6b:	8d 3c 10             	lea    edi,[eax+edx*1]
c000df6e:	39 ee                	cmp    esi,ebp
c000df70:	74 13                	je     c000df85 <zStrtok(char*, char const*)+0x4f>
c000df72:	42                   	inc    edx
c000df73:	eb eb                	jmp    c000df60 <zStrtok(char*, char const*)+0x2a>
c000df75:	31 c0                	xor    eax,eax
c000df77:	eb 2a                	jmp    c000dfa3 <zStrtok(char*, char const*)+0x6d>
c000df79:	c7 05 c0 c0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c0c0,0x0
c000df83:	eb 1e                	jmp    c000dfa3 <zStrtok(char*, char const*)+0x6d>
c000df85:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000df88:	39 ce                	cmp    esi,ecx
c000df8a:	75 0a                	jne    c000df96 <zStrtok(char*, char const*)+0x60>
c000df8c:	40                   	inc    eax
c000df8d:	a3 c0 c0 02 c0       	mov    ds:0xc002c0c0,eax
c000df92:	89 d8                	mov    eax,ebx
c000df94:	eb 0d                	jmp    c000dfa3 <zStrtok(char*, char const*)+0x6d>
c000df96:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000df9a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000df9d:	89 15 c0 c0 02 c0    	mov    DWORD PTR ds:0xc002c0c0,edx
c000dfa3:	5b                   	pop    ebx
c000dfa4:	5e                   	pop    esi
c000dfa5:	5f                   	pop    edi
c000dfa6:	5d                   	pop    ebp
c000dfa7:	c3                   	ret    

c000dfa8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000dfa8:	57                   	push   edi
c000dfa9:	56                   	push   esi
c000dfaa:	53                   	push   ebx
c000dfab:	81 ec 08 01 00 00    	sub    esp,0x108
c000dfb1:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000dfb8:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000dfbf:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000dfc3:	53                   	push   ebx
c000dfc4:	e8 77 26 ff ff       	call   c0000640 <strcpy>
c000dfc9:	59                   	pop    ecx
c000dfca:	5e                   	pop    esi
c000dfcb:	68 94 4f 02 c0       	push   0xc0024f94
c000dfd0:	53                   	push   ebx
c000dfd1:	bb 01 00 00 00       	mov    ebx,0x1
c000dfd6:	e8 5b ff ff ff       	call   c000df36 <zStrtok(char*, char const*)>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	85 c0                	test   eax,eax
c000dfe0:	74 3b                	je     c000e01d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000dfe2:	52                   	push   edx
c000dfe3:	50                   	push   eax
c000dfe4:	6a 01                	push   0x1
c000dfe6:	57                   	push   edi
c000dfe7:	e8 b9 fd ff ff       	call   c000dda5 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000dfec:	59                   	pop    ecx
c000dfed:	89 c3                	mov    ebx,eax
c000dfef:	5e                   	pop    esi
c000dff0:	68 94 4f 02 c0       	push   0xc0024f94
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 3a ff ff ff       	call   c000df36 <zStrtok(char*, char const*)>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 c6                	mov    esi,eax
c000e001:	85 c0                	test   eax,eax
c000e003:	74 18                	je     c000e01d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e005:	52                   	push   edx
c000e006:	52                   	push   edx
c000e007:	53                   	push   ebx
c000e008:	57                   	push   edi
c000e009:	e8 81 f5 ff ff       	call   c000d58f <CmEnterDirectory(Reghive_Tag*, int)>
c000e00e:	83 c4 10             	add    esp,0x10
c000e011:	89 c3                	mov    ebx,eax
c000e013:	83 f8 ff             	cmp    eax,0xffffffff
c000e016:	74 05                	je     c000e01d <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000e018:	50                   	push   eax
c000e019:	56                   	push   esi
c000e01a:	53                   	push   ebx
c000e01b:	eb c9                	jmp    c000dfe6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000e01d:	81 c4 00 01 00 00    	add    esp,0x100
c000e023:	89 d8                	mov    eax,ebx
c000e025:	5b                   	pop    ebx
c000e026:	5e                   	pop    esi
c000e027:	5f                   	pop    edi
c000e028:	c3                   	ret    

c000e029 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000e029:	55                   	push   ebp
c000e02a:	57                   	push   edi
c000e02b:	56                   	push   esi
c000e02c:	53                   	push   ebx
c000e02d:	83 ec 5c             	sub    esp,0x5c
c000e030:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000e034:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000e038:	85 db                	test   ebx,ebx
c000e03a:	0f 8e 84 00 00 00    	jle    c000e0c4 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000e040:	31 ed                	xor    ebp,ebp
c000e042:	57                   	push   edi
c000e043:	6a 32                	push   0x32
c000e045:	6a 00                	push   0x0
c000e047:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000e04b:	57                   	push   edi
c000e04c:	e8 9f 24 ff ff       	call   c00004f0 <memset>
c000e051:	83 c4 0c             	add    esp,0xc
c000e054:	57                   	push   edi
c000e055:	53                   	push   ebx
c000e056:	56                   	push   esi
c000e057:	e8 30 fb ff ff       	call   c000db8c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000e05c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e060:	83 c4 10             	add    esp,0x10
c000e063:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000e067:	7d 13                	jge    c000e07c <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000e069:	83 ec 0c             	sub    esp,0xc
c000e06c:	45                   	inc    ebp
c000e06d:	68 88 54 02 c0       	push   0xc0025488
c000e072:	e8 ed 8e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e077:	83 c4 10             	add    esp,0x10
c000e07a:	eb e7                	jmp    c000e063 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000e07c:	51                   	push   ecx
c000e07d:	57                   	push   edi
c000e07e:	53                   	push   ebx
c000e07f:	68 0e 3d 02 c0       	push   0xc0023d0e
c000e084:	e8 db 8e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e089:	83 c4 10             	add    esp,0x10
c000e08c:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000e091:	75 1e                	jne    c000e0b1 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000e093:	52                   	push   edx
c000e094:	52                   	push   edx
c000e095:	53                   	push   ebx
c000e096:	56                   	push   esi
c000e097:	e8 f3 f4 ff ff       	call   c000d58f <CmEnterDirectory(Reghive_Tag*, int)>
c000e09c:	83 c4 0c             	add    esp,0xc
c000e09f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000e0a3:	8d 51 04             	lea    edx,[ecx+0x4]
c000e0a6:	52                   	push   edx
c000e0a7:	50                   	push   eax
c000e0a8:	56                   	push   esi
c000e0a9:	e8 7b ff ff ff       	call   c000e029 <CmDisplayTree(Reghive_Tag*, int, int)>
c000e0ae:	83 c4 10             	add    esp,0x10
c000e0b1:	50                   	push   eax
c000e0b2:	50                   	push   eax
c000e0b3:	53                   	push   ebx
c000e0b4:	56                   	push   esi
c000e0b5:	e8 14 f5 ff ff       	call   c000d5ce <CmGetNext(Reghive_Tag*, int)>
c000e0ba:	83 c4 10             	add    esp,0x10
c000e0bd:	89 c3                	mov    ebx,eax
c000e0bf:	e9 74 ff ff ff       	jmp    c000e038 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000e0c4:	83 c4 5c             	add    esp,0x5c
c000e0c7:	5b                   	pop    ebx
c000e0c8:	5e                   	pop    esi
c000e0c9:	5f                   	pop    edi
c000e0ca:	5d                   	pop    ebp
c000e0cb:	c3                   	ret    

c000e0cc <CmSplitFinalSlashInPlace(char*)>:
c000e0cc:	53                   	push   ebx
c000e0cd:	83 ec 14             	sub    esp,0x14
c000e0d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e0d4:	53                   	push   ebx
c000e0d5:	e8 96 24 ff ff       	call   c0000570 <strlen>
c000e0da:	83 c4 10             	add    esp,0x10
c000e0dd:	48                   	dec    eax
c000e0de:	85 c0                	test   eax,eax
c000e0e0:	74 15                	je     c000e0f7 <CmSplitFinalSlashInPlace(char*)+0x2b>
c000e0e2:	8d 14 03             	lea    edx,[ebx+eax*1]
c000e0e5:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000e0e9:	75 09                	jne    c000e0f4 <CmSplitFinalSlashInPlace(char*)+0x28>
c000e0eb:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000e0ee:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000e0f2:	eb 05                	jmp    c000e0f9 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000e0f4:	48                   	dec    eax
c000e0f5:	eb e7                	jmp    c000e0de <CmSplitFinalSlashInPlace(char*)+0x12>
c000e0f7:	31 c0                	xor    eax,eax
c000e0f9:	83 c4 08             	add    esp,0x8
c000e0fc:	5b                   	pop    ebx
c000e0fd:	c3                   	ret    
c000e0fe:	66 90                	xchg   ax,ax

c000e100 <Krnl::handlePowerButton()>:
c000e100:	83 ec 0c             	sub    esp,0xc
c000e103:	e8 46 28 00 00       	call   c001094e <KeHandlePowerButton()>
c000e108:	90                   	nop
c000e109:	83 c4 0c             	add    esp,0xc
c000e10c:	c3                   	ret    
c000e10d:	8d 76 00             	lea    esi,[esi+0x0]

c000e110 <Krnl::handleSleepButton()>:
c000e110:	83 ec 0c             	sub    esp,0xc
c000e113:	e8 4e 28 00 00       	call   c0010966 <KeHandleSleepButton()>
c000e118:	90                   	nop
c000e119:	83 c4 0c             	add    esp,0xc
c000e11c:	c3                   	ret    
c000e11d:	90                   	nop

c000e11e <Computer::close(int, int, void*)>:
c000e11e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e123:	c3                   	ret    

c000e124 <Computer::open(int, int, void*)>:
c000e124:	56                   	push   esi
c000e125:	53                   	push   ebx
c000e126:	83 ec 04             	sub    esp,0x4
c000e129:	f6 05 24 e1 02 c0 04 	test   BYTE PTR ds:0xc002e124,0x4
c000e130:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e134:	0f 94 05 00 68 02 c0 	sete   BYTE PTR ds:0xc0026800
c000e13b:	39 1d d0 c0 02 c0    	cmp    DWORD PTR ds:0xc002c0d0,ebx
c000e141:	74 10                	je     c000e153 <Computer::open(int, int, void*)+0x2f>
c000e143:	83 ec 0c             	sub    esp,0xc
c000e146:	68 18 3d 02 c0       	push   0xc0023d18
c000e14b:	e8 c2 1e 00 00       	call   c0010012 <KePanic(char const*)>
c000e150:	83 c4 10             	add    esp,0x10
c000e153:	83 ec 0c             	sub    esp,0xc
c000e156:	68 d0 3d 02 c0       	push   0xc0023dd0
c000e15b:	e8 33 f1 ff ff       	call   c000d293 <KeSetBootMessage(char const*)>
c000e160:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e167:	e8 5f 1b 00 00       	call   c000fccb <malloc>
c000e16c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e16f:	89 c6                	mov    esi,eax
c000e171:	e8 7e e6 ff ff       	call   c000c7f4 <ACPI::ACPI()>
c000e176:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000e17c:	58                   	pop    eax
c000e17d:	5a                   	pop    edx
c000e17e:	56                   	push   esi
c000e17f:	53                   	push   ebx
c000e180:	e8 77 b8 ff ff       	call   c00099fc <Device::addChild(Device*)>
c000e185:	c7 04 24 e8 3d 02 c0 	mov    DWORD PTR [esp],0xc0023de8
c000e18c:	e8 02 f1 ff ff       	call   c000d293 <KeSetBootMessage(char const*)>
c000e191:	e8 b9 b5 00 00       	call   c001974f <HalEnableNMI()>
c000e196:	e8 e9 a7 00 00       	call   c0018984 <HalDetectFeatures()>
c000e19b:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000e1a2:	e8 24 1b 00 00       	call   c000fccb <malloc>
c000e1a7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e1aa:	89 c6                	mov    esi,eax
c000e1ac:	e8 d9 c0 00 00       	call   c001a28a <CPU::CPU()>
c000e1b1:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e1b7:	59                   	pop    ecx
c000e1b8:	58                   	pop    eax
c000e1b9:	56                   	push   esi
c000e1ba:	53                   	push   ebx
c000e1bb:	e8 3c b8 ff ff       	call   c00099fc <Device::addChild(Device*)>
c000e1c0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e1c4:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e1ca:	8b 10                	mov    edx,DWORD PTR [eax]
c000e1cc:	51                   	push   ecx
c000e1cd:	6a 00                	push   0x0
c000e1cf:	6a 00                	push   0x0
c000e1d1:	50                   	push   eax
c000e1d2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e1d5:	83 c4 14             	add    esp,0x14
c000e1d8:	68 44 3d 02 c0       	push   0xc0023d44
c000e1dd:	e8 b1 f0 ff ff       	call   c000d293 <KeSetBootMessage(char const*)>
c000e1e2:	e8 fe bc 00 00       	call   c0019ee5 <HalInitialiseCoprocessor()>
c000e1e7:	c7 04 24 02 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e02
c000e1ee:	e8 a0 f0 ff ff       	call   c000d293 <KeSetBootMessage(char const*)>
c000e1f3:	c7 04 24 0a e2 00 c0 	mov    DWORD PTR [esp],0xc000e20a
c000e1fa:	e8 51 8c 00 00       	call   c0016e50 <setupMultitasking(void (*)())>
c000e1ff:	83 c4 14             	add    esp,0x14
c000e202:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e207:	5b                   	pop    ebx
c000e208:	5e                   	pop    esi
c000e209:	c3                   	ret    

c000e20a <KeFirstTask()>:
c000e20a:	53                   	push   ebx
c000e20b:	83 ec 14             	sub    esp,0x14
c000e20e:	fb                   	sti    
c000e20f:	68 1d 3e 02 c0       	push   0xc0023e1d
c000e214:	e8 7a f0 ff ff       	call   c000d293 <KeSetBootMessage(char const*)>
c000e219:	c7 04 24 84 07 00 00 	mov    DWORD PTR [esp],0x784
c000e220:	e8 a6 1a 00 00       	call   c000fccb <malloc>
c000e225:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e22c:	89 c3                	mov    ebx,eax
c000e22e:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000e233:	50                   	push   eax
c000e234:	68 36 3e 02 c0       	push   0xc0023e36
c000e239:	6a 01                	push   0x1
c000e23b:	53                   	push   ebx
c000e23c:	e8 6f 88 00 00       	call   c0016ab0 <Process::Process(bool, char const*, Process*, char**)>
c000e241:	83 c4 20             	add    esp,0x20
c000e244:	68 ff 00 00 00       	push   0xff
c000e249:	6a 00                	push   0x0
c000e24b:	68 09 ef 00 c0       	push   0xc000ef09
c000e250:	53                   	push   ebx
c000e251:	e8 9a 8a 00 00       	call   c0016cf0 <Process::createThread(void (*)(void*), void*, int)>
c000e256:	8b 15 58 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea58
c000e25c:	6a 7a                	push   0x7a
c000e25e:	6a 00                	push   0x0
c000e260:	68 74 76 01 c0       	push   0xc0017674
c000e265:	52                   	push   edx
c000e266:	e8 85 8a 00 00       	call   c0016cf0 <Process::createThread(void (*)(void*), void*, int)>
c000e26b:	83 c4 14             	add    esp,0x14
c000e26e:	a3 10 ea 02 c0       	mov    ds:0xc002ea10,eax
c000e273:	68 68 3d 02 c0       	push   0xc0023d68
c000e278:	e8 16 f0 ff ff       	call   c000d293 <KeSetBootMessage(char const*)>
c000e27d:	c6 05 d5 c0 02 c0 01 	mov    BYTE PTR ds:0xc002c0d5,0x1
c000e284:	e8 e9 27 00 00       	call   c0010a72 <KeInitRand()>
c000e289:	e8 b4 97 00 00       	call   c0017a42 <Vm::initialise8086()>
c000e28e:	e8 5d 9b ff ff       	call   c0007df0 <Fs::initVFS()>
c000e293:	c7 04 24 dc 3a 02 c0 	mov    DWORD PTR [esp],0xc0023adc
c000e29a:	e8 f4 ef ff ff       	call   c000d293 <KeSetBootMessage(char const*)>
c000e29f:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e2a4:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e2aa:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2ac:	6a 00                	push   0x0
c000e2ae:	6a 00                	push   0x0
c000e2b0:	6a 00                	push   0x0
c000e2b2:	50                   	push   eax
c000e2b3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e2b6:	83 c4 14             	add    esp,0x14
c000e2b9:	68 68 3d 02 c0       	push   0xc0023d68
c000e2be:	e8 d0 ef ff ff       	call   c000d293 <KeSetBootMessage(char const*)>
c000e2c3:	e8 0d 93 ff ff       	call   c00075d5 <KeInitialiseSymlinks()>
c000e2c8:	e8 f5 05 00 00       	call   c000e8c2 <KeLoadSystemEnv()>
c000e2cd:	e8 ac 26 00 00       	call   c001097e <KeSetupPowerManager()>
c000e2d2:	c7 04 24 8c 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d8c
c000e2d9:	e8 b5 ef ff ff       	call   c000d293 <KeSetBootMessage(char const*)>
c000e2de:	59                   	pop    ecx
c000e2df:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e2e4:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000e2ea:	53                   	push   ebx
c000e2eb:	e8 28 b8 ff ff       	call   c0009b18 <Device::loadDriversForAll()>
c000e2f0:	c7 04 24 43 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e43
c000e2f7:	e8 97 ef ff ff       	call   c000d293 <KeSetBootMessage(char const*)>
c000e2fc:	58                   	pop    eax
c000e2fd:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c000e303:	5a                   	pop    edx
c000e304:	6a 01                	push   0x1
c000e306:	68 54 3e 02 c0       	push   0xc0023e54
c000e30b:	e8 e3 80 00 00       	call   c00163f3 <Thr::loadDLL(char const*, bool)>
c000e310:	59                   	pop    ecx
c000e311:	5a                   	pop    edx
c000e312:	53                   	push   ebx
c000e313:	50                   	push   eax
c000e314:	e8 2c 83 00 00       	call   c0016645 <Thr::executeDLL(unsigned long, void*)>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	83 ec 0c             	sub    esp,0xc
c000e31f:	6a 02                	push   0x2
c000e321:	e8 22 8d 00 00       	call   c0017048 <blockTask(TaskState)>
c000e326:	83 c4 10             	add    esp,0x10
c000e329:	eb f1                	jmp    c000e31c <KeFirstTask()+0x112>
c000e32b:	90                   	nop

c000e32c <Computer::Computer()>:
c000e32c:	83 ec 0c             	sub    esp,0xc
c000e32f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e333:	83 ec 08             	sub    esp,0x8
c000e336:	68 70 3e 02 c0       	push   0xc0023e70
c000e33b:	50                   	push   eax
c000e33c:	e8 1d b8 ff ff       	call   c0009b5e <Device::Device(char const*)>
c000e341:	83 c4 10             	add    esp,0x10
c000e344:	ba 84 3e 02 c0       	mov    edx,0xc0023e84
c000e349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34d:	89 10                	mov    DWORD PTR [eax],edx
c000e34f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e353:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e35d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e361:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e36b:	90                   	nop
c000e36c:	83 c4 0c             	add    esp,0xc
c000e36f:	c3                   	ret    

c000e370 <KePrepareShutdown()>:
c000e370:	83 ec 0c             	sub    esp,0xc
c000e373:	e8 89 ee ff ff       	call   c000d201 <KeExecuteAtexit()>
c000e378:	83 ec 0c             	sub    esp,0xc
c000e37b:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e380:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e386:	50                   	push   eax
c000e387:	e8 d8 b8 ff ff       	call   c0009c64 <Device::closeAll()>
c000e38c:	83 c4 1c             	add    esp,0x1c
c000e38f:	c3                   	ret    

c000e390 <KeShutdown()>:
c000e390:	83 ec 0c             	sub    esp,0xc
c000e393:	e8 d8 ff ff ff       	call   c000e370 <KePrepareShutdown()>
c000e398:	a1 cc c0 02 c0       	mov    eax,ds:0xc002c0cc
c000e39d:	85 c0                	test   eax,eax
c000e39f:	74 02                	je     c000e3a3 <KeShutdown()+0x13>
c000e3a1:	ff d0                	call   eax
c000e3a3:	83 ec 0c             	sub    esp,0xc
c000e3a6:	68 ac 3d 02 c0       	push   0xc0023dac
c000e3ab:	e8 62 1c 00 00       	call   c0010012 <KePanic(char const*)>
c000e3b0:	83 c4 1c             	add    esp,0x1c
c000e3b3:	c3                   	ret    

c000e3b4 <KeSleep()>:
c000e3b4:	a1 c4 c0 02 c0       	mov    eax,ds:0xc002c0c4
c000e3b9:	85 c0                	test   eax,eax
c000e3bb:	74 02                	je     c000e3bf <KeSleep()+0xb>
c000e3bd:	ff e0                	jmp    eax
c000e3bf:	c3                   	ret    

c000e3c0 <KeRestart()>:
c000e3c0:	83 ec 0c             	sub    esp,0xc
c000e3c3:	e8 a8 ff ff ff       	call   c000e370 <KePrepareShutdown()>
c000e3c8:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c000e3cd:	85 c0                	test   eax,eax
c000e3cf:	74 02                	je     c000e3d3 <KeRestart()+0x13>
c000e3d1:	ff d0                	call   eax
c000e3d3:	e4 64                	in     al,0x64
c000e3d5:	a8 02                	test   al,0x2
c000e3d7:	75 fa                	jne    c000e3d3 <KeRestart()+0x13>
c000e3d9:	b0 fe                	mov    al,0xfe
c000e3db:	e6 64                	out    0x64,al
c000e3dd:	83 c4 0c             	add    esp,0xc
c000e3e0:	c3                   	ret    

c000e3e1 <KeCalculateCRC32(unsigned char*, int)>:
c000e3e1:	53                   	push   ebx
c000e3e2:	83 c8 ff             	or     eax,0xffffffff
c000e3e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e3e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e3ed:	01 cb                	add    ebx,ecx
c000e3ef:	39 d9                	cmp    ecx,ebx
c000e3f1:	74 15                	je     c000e408 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e3f3:	41                   	inc    ecx
c000e3f4:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e3f7:	31 c2                	xor    edx,eax
c000e3f9:	c1 e8 08             	shr    eax,0x8
c000e3fc:	0f b6 d2             	movzx  edx,dl
c000e3ff:	33 04 95 20 62 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffd9de0]
c000e406:	eb e7                	jmp    c000e3ef <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e408:	f7 d0                	not    eax
c000e40a:	5b                   	pop    ebx
c000e40b:	c3                   	ret    

c000e40c <EnvVarContainer::getEnv(char const*)>:
c000e40c:	57                   	push   edi
c000e40d:	56                   	push   esi
c000e40e:	53                   	push   ebx
c000e40f:	31 db                	xor    ebx,ebx
c000e411:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e415:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e417:	7e 2b                	jle    c000e444 <EnvVarContainer::getEnv(char const*)+0x38>
c000e419:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e420:	50                   	push   eax
c000e421:	50                   	push   eax
c000e422:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e425:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e428:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e42c:	e8 1f 23 ff ff       	call   c0000750 <strcmp>
c000e431:	83 c4 10             	add    esp,0x10
c000e434:	85 c0                	test   eax,eax
c000e436:	75 09                	jne    c000e441 <EnvVarContainer::getEnv(char const*)+0x35>
c000e438:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e43b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e43f:	eb 05                	jmp    c000e446 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e441:	43                   	inc    ebx
c000e442:	eb d1                	jmp    c000e415 <EnvVarContainer::getEnv(char const*)+0x9>
c000e444:	31 c0                	xor    eax,eax
c000e446:	5b                   	pop    ebx
c000e447:	5e                   	pop    esi
c000e448:	5f                   	pop    edi
c000e449:	c3                   	ret    

c000e44a <EnvVarContainer::setEnv(char const*, char const*)>:
c000e44a:	55                   	push   ebp
c000e44b:	57                   	push   edi
c000e44c:	56                   	push   esi
c000e44d:	53                   	push   ebx
c000e44e:	83 ec 28             	sub    esp,0x28
c000e451:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e455:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e459:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e45d:	56                   	push   esi
c000e45e:	e8 0d 21 ff ff       	call   c0000570 <strlen>
c000e463:	40                   	inc    eax
c000e464:	89 04 24             	mov    DWORD PTR [esp],eax
c000e467:	e8 5f 18 00 00       	call   c000fccb <malloc>
c000e46c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e46f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e473:	e8 f8 20 ff ff       	call   c0000570 <strlen>
c000e478:	40                   	inc    eax
c000e479:	89 04 24             	mov    DWORD PTR [esp],eax
c000e47c:	e8 4a 18 00 00       	call   c000fccb <malloc>
c000e481:	89 34 24             	mov    DWORD PTR [esp],esi
c000e484:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e488:	e8 e3 20 ff ff       	call   c0000570 <strlen>
c000e48d:	83 c4 0c             	add    esp,0xc
c000e490:	40                   	inc    eax
c000e491:	50                   	push   eax
c000e492:	6a 00                	push   0x0
c000e494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e498:	e8 53 20 ff ff       	call   c00004f0 <memset>
c000e49d:	89 34 24             	mov    DWORD PTR [esp],esi
c000e4a0:	e8 cb 20 ff ff       	call   c0000570 <strlen>
c000e4a5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e4a9:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4b1:	89 de                	mov    esi,ebx
c000e4b3:	e8 b8 20 ff ff       	call   c0000570 <strlen>
c000e4b8:	83 c4 0c             	add    esp,0xc
c000e4bb:	40                   	inc    eax
c000e4bc:	50                   	push   eax
c000e4bd:	6a 00                	push   0x0
c000e4bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e4c3:	e8 28 20 ff ff       	call   c00004f0 <memset>
c000e4c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4cb:	e8 a0 20 ff ff       	call   c0000570 <strlen>
c000e4d0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e4d4:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e4dc:	40                   	inc    eax
c000e4dd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e4e0:	c1 e0 03             	shl    eax,0x3
c000e4e3:	5a                   	pop    edx
c000e4e4:	59                   	pop    ecx
c000e4e5:	50                   	push   eax
c000e4e6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e4e9:	e8 c9 17 00 00       	call   c000fcb7 <realloc>
c000e4ee:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e4f2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e4f5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e4f8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e4fc:	b9 08 00 00 00       	mov    ecx,0x8
c000e501:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e503:	83 c4 2c             	add    esp,0x2c
c000e506:	5b                   	pop    ebx
c000e507:	5e                   	pop    esi
c000e508:	5f                   	pop    edi
c000e509:	5d                   	pop    ebp
c000e50a:	c3                   	ret    
c000e50b:	90                   	nop

c000e50c <EnvVarContainer::deleteEnv(char const*)>:
c000e50c:	c3                   	ret    
c000e50d:	90                   	nop

c000e50e <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e50e:	55                   	push   ebp
c000e50f:	57                   	push   edi
c000e510:	56                   	push   esi
c000e511:	53                   	push   ebx
c000e512:	81 ec 38 01 00 00    	sub    esp,0x138
c000e518:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e51f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e526:	68 14 01 00 00       	push   0x114
c000e52b:	e8 9b 17 00 00       	call   c000fccb <malloc>
c000e530:	83 c4 0c             	add    esp,0xc
c000e533:	89 c3                	mov    ebx,eax
c000e535:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e538:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e53f:	50                   	push   eax
c000e540:	e8 ed 9b ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000e545:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e548:	e8 c7 9e ff ff       	call   c0008414 <File::exists()>
c000e54d:	83 c4 10             	add    esp,0x10
c000e550:	84 c0                	test   al,al
c000e552:	75 31                	jne    c000e585 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e554:	50                   	push   eax
c000e555:	50                   	push   eax
c000e556:	6a 12                	push   0x12
c000e558:	53                   	push   ebx
c000e559:	e8 f2 9b ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000e55e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e560:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e563:	89 34 24             	mov    DWORD PTR [esp],esi
c000e566:	e8 05 20 ff ff       	call   c0000570 <strlen>
c000e56b:	5a                   	pop    edx
c000e56c:	31 d2                	xor    edx,edx
c000e56e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e572:	51                   	push   ecx
c000e573:	56                   	push   esi
c000e574:	52                   	push   edx
c000e575:	50                   	push   eax
c000e576:	53                   	push   ebx
c000e577:	ff d7                	call   edi
c000e579:	83 c4 14             	add    esp,0x14
c000e57c:	53                   	push   ebx
c000e57d:	e8 2c 9c ff ff       	call   c00081ae <File::close()>
c000e582:	83 c4 10             	add    esp,0x10
c000e585:	56                   	push   esi
c000e586:	31 f6                	xor    esi,esi
c000e588:	68 00 01 00 00       	push   0x100
c000e58d:	6a 00                	push   0x0
c000e58f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e593:	50                   	push   eax
c000e594:	e8 57 1f ff ff       	call   c00004f0 <memset>
c000e599:	5f                   	pop    edi
c000e59a:	58                   	pop    eax
c000e59b:	6a 01                	push   0x1
c000e59d:	53                   	push   ebx
c000e59e:	e8 ad 9b ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000e5a3:	83 c4 10             	add    esp,0x10
c000e5a6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e5ae:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e5b6:	83 ec 0c             	sub    esp,0xc
c000e5b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e5bb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e5bf:	51                   	push   ecx
c000e5c0:	8d 54 24 23          	lea    edx,[esp+0x23]
c000e5c4:	52                   	push   edx
c000e5c5:	6a 00                	push   0x0
c000e5c7:	6a 01                	push   0x1
c000e5c9:	53                   	push   ebx
c000e5ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e5cd:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e5d2:	83 c4 20             	add    esp,0x20
c000e5d5:	89 c2                	mov    edx,eax
c000e5d7:	85 c0                	test   eax,eax
c000e5d9:	0f 84 36 01 00 00    	je     c000e715 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e5df:	83 f8 0d             	cmp    eax,0xd
c000e5e2:	0f 84 22 01 00 00    	je     c000e70a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e5e8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e5ed:	0f 84 f0 00 00 00    	je     c000e6e3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e5f3:	83 f8 0a             	cmp    eax,0xa
c000e5f6:	74 13                	je     c000e60b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e5f8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e5fd:	74 0c                	je     c000e60b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e5ff:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e605:	0f 8e f6 00 00 00    	jle    c000e701 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e60b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e60f:	83 ec 0c             	sub    esp,0xc
c000e612:	8d 78 01             	lea    edi,[eax+0x1]
c000e615:	57                   	push   edi
c000e616:	e8 b0 16 00 00       	call   c000fccb <malloc>
c000e61b:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e61f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e623:	8d 56 04             	lea    edx,[esi+0x4]
c000e626:	89 14 24             	mov    DWORD PTR [esp],edx
c000e629:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e62d:	e8 99 16 00 00       	call   c000fccb <malloc>
c000e632:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e636:	83 c4 0c             	add    esp,0xc
c000e639:	57                   	push   edi
c000e63a:	6a 00                	push   0x0
c000e63c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e640:	e8 ab 1e ff ff       	call   c00004f0 <memset>
c000e645:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e649:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e64d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e651:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e653:	83 c4 0c             	add    esp,0xc
c000e656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e65a:	52                   	push   edx
c000e65b:	6a 00                	push   0x0
c000e65d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e661:	e8 8a 1e ff ff       	call   c00004f0 <memset>
c000e666:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e66a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e66e:	89 34 24             	mov    DWORD PTR [esp],esi
c000e671:	e8 fa 1e ff ff       	call   c0000570 <strlen>
c000e676:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e67a:	89 c1                	mov    ecx,eax
c000e67c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e67e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e681:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e684:	40                   	inc    eax
c000e685:	83 c4 10             	add    esp,0x10
c000e688:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e68b:	85 d2                	test   edx,edx
c000e68d:	75 0c                	jne    c000e69b <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e68f:	83 ec 0c             	sub    esp,0xc
c000e692:	6a 08                	push   0x8
c000e694:	e8 32 16 00 00       	call   c000fccb <malloc>
c000e699:	eb 0c                	jmp    c000e6a7 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e69b:	c1 e0 03             	shl    eax,0x3
c000e69e:	51                   	push   ecx
c000e69f:	51                   	push   ecx
c000e6a0:	50                   	push   eax
c000e6a1:	52                   	push   edx
c000e6a2:	e8 10 16 00 00       	call   c000fcb7 <realloc>
c000e6a7:	83 c4 10             	add    esp,0x10
c000e6aa:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e6ad:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e6b0:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e6b3:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e6b7:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e6bb:	b9 08 00 00 00       	mov    ecx,0x8
c000e6c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e6c2:	31 f6                	xor    esi,esi
c000e6c4:	50                   	push   eax
c000e6c5:	68 00 01 00 00       	push   0x100
c000e6ca:	6a 00                	push   0x0
c000e6cc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e6d0:	50                   	push   eax
c000e6d1:	e8 1a 1e ff ff       	call   c00004f0 <memset>
c000e6d6:	83 c4 10             	add    esp,0x10
c000e6d9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e6e1:	eb 27                	jmp    c000e70a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e6e3:	83 f8 3d             	cmp    eax,0x3d
c000e6e6:	74 1e                	je     c000e706 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e6e8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e6ee:	7f 07                	jg     c000e6f7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e6f0:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000e6f4:	46                   	inc    esi
c000e6f5:	eb 13                	jmp    c000e70a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e6f7:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e6ff:	eb 09                	jmp    c000e70a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e701:	83 f8 3d             	cmp    eax,0x3d
c000e704:	75 ea                	jne    c000e6f0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e706:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e70a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e70f:	0f 85 99 fe ff ff    	jne    c000e5ae <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e715:	83 ec 0c             	sub    esp,0xc
c000e718:	53                   	push   ebx
c000e719:	e8 90 9a ff ff       	call   c00081ae <File::close()>
c000e71e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e720:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e723:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e726:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e72c:	5b                   	pop    ebx
c000e72d:	5e                   	pop    esi
c000e72e:	5f                   	pop    edi
c000e72f:	5d                   	pop    ebp
c000e730:	c3                   	ret    
c000e731:	90                   	nop

c000e732 <EnvVarContainer::__loadSystem()>:
c000e732:	83 ec 10             	sub    esp,0x10
c000e735:	68 20 66 02 c0       	push   0xc0026620
c000e73a:	68 a8 3e 02 c0       	push   0xc0023ea8
c000e73f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e743:	e8 c6 fd ff ff       	call   c000e50e <EnvVarContainer::loadFrom(char const*, char const*)>
c000e748:	83 c4 1c             	add    esp,0x1c
c000e74b:	c3                   	ret    

c000e74c <EnvVarContainer::__loadUser()>:
c000e74c:	c3                   	ret    
c000e74d:	90                   	nop

c000e74e <EnvVarContainer::EnvVarContainer(Process*)>:
c000e74e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e752:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e75c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e760:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e763:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e767:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e76e:	90                   	nop
c000e76f:	c3                   	ret    

c000e770 <EnvVarContainer::~EnvVarContainer()>:
c000e770:	83 ec 0c             	sub    esp,0xc
c000e773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e777:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e77a:	85 c0                	test   eax,eax
c000e77c:	74 1d                	je     c000e79b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e77e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e782:	8b 00                	mov    eax,DWORD PTR [eax]
c000e784:	85 c0                	test   eax,eax
c000e786:	74 13                	je     c000e79b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e78f:	83 ec 0c             	sub    esp,0xc
c000e792:	50                   	push   eax
c000e793:	e8 43 15 00 00       	call   c000fcdb <free>
c000e798:	83 c4 10             	add    esp,0x10
c000e79b:	90                   	nop
c000e79c:	83 c4 0c             	add    esp,0xc
c000e79f:	c3                   	ret    

c000e7a0 <KeGetEnv(Process*, char const*)>:
c000e7a0:	53                   	push   ebx
c000e7a1:	83 ec 08             	sub    esp,0x8
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e7ac:	39 05 58 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea58,eax
c000e7b2:	74 04                	je     c000e7b8 <KeGetEnv(Process*, char const*)+0x18>
c000e7b4:	85 c0                	test   eax,eax
c000e7b6:	75 0b                	jne    c000e7c3 <KeGetEnv(Process*, char const*)+0x23>
c000e7b8:	a1 d8 c0 02 c0       	mov    eax,ds:0xc002c0d8
c000e7bd:	85 c0                	test   eax,eax
c000e7bf:	75 19                	jne    c000e7da <KeGetEnv(Process*, char const*)+0x3a>
c000e7c1:	eb 27                	jmp    c000e7ea <KeGetEnv(Process*, char const*)+0x4a>
c000e7c3:	52                   	push   edx
c000e7c4:	52                   	push   edx
c000e7c5:	53                   	push   ebx
c000e7c6:	ff b0 7a 07 00 00    	push   DWORD PTR [eax+0x77a]
c000e7cc:	e8 3b fc ff ff       	call   c000e40c <EnvVarContainer::getEnv(char const*)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	85 c0                	test   eax,eax
c000e7d6:	75 28                	jne    c000e800 <KeGetEnv(Process*, char const*)+0x60>
c000e7d8:	eb de                	jmp    c000e7b8 <KeGetEnv(Process*, char const*)+0x18>
c000e7da:	52                   	push   edx
c000e7db:	52                   	push   edx
c000e7dc:	53                   	push   ebx
c000e7dd:	50                   	push   eax
c000e7de:	e8 29 fc ff ff       	call   c000e40c <EnvVarContainer::getEnv(char const*)>
c000e7e3:	83 c4 10             	add    esp,0x10
c000e7e6:	85 c0                	test   eax,eax
c000e7e8:	75 16                	jne    c000e800 <KeGetEnv(Process*, char const*)+0x60>
c000e7ea:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e7ee:	a1 dc c0 02 c0       	mov    eax,ds:0xc002c0dc
c000e7f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e7f7:	83 c4 08             	add    esp,0x8
c000e7fa:	5b                   	pop    ebx
c000e7fb:	e9 0c fc ff ff       	jmp    c000e40c <EnvVarContainer::getEnv(char const*)>
c000e800:	83 c4 08             	add    esp,0x8
c000e803:	5b                   	pop    ebx
c000e804:	c3                   	ret    

c000e805 <KeSetEnvSystem(char const*, char const*)>:
c000e805:	83 ec 10             	sub    esp,0x10
c000e808:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e80c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e810:	ff 35 dc c0 02 c0    	push   DWORD PTR ds:0xc002c0dc
c000e816:	e8 2f fc ff ff       	call   c000e44a <EnvVarContainer::setEnv(char const*, char const*)>
c000e81b:	83 c4 1c             	add    esp,0x1c
c000e81e:	c3                   	ret    

c000e81f <KeSetEnvUser(char const*, char const*)>:
c000e81f:	a1 d8 c0 02 c0       	mov    eax,ds:0xc002c0d8
c000e824:	85 c0                	test   eax,eax
c000e826:	74 15                	je     c000e83d <KeSetEnvUser(char const*, char const*)+0x1e>
c000e828:	83 ec 10             	sub    esp,0x10
c000e82b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e82f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e833:	50                   	push   eax
c000e834:	e8 11 fc ff ff       	call   c000e44a <EnvVarContainer::setEnv(char const*, char const*)>
c000e839:	83 c4 1c             	add    esp,0x1c
c000e83c:	c3                   	ret    
c000e83d:	c3                   	ret    

c000e83e <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e83e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e842:	8b 80 7a 07 00 00    	mov    eax,DWORD PTR [eax+0x77a]
c000e848:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e84c:	e9 f9 fb ff ff       	jmp    c000e44a <EnvVarContainer::setEnv(char const*, char const*)>

c000e851 <KeDeleteEnvSystem(char const*)>:
c000e851:	c3                   	ret    

c000e852 <KeDeleteEnvUser(char const*)>:
c000e852:	c3                   	ret    

c000e853 <KeDeleteEnvProcess(Process*, char const*)>:
c000e853:	c3                   	ret    

c000e854 <KeNewProcessEnv(Process*)>:
c000e854:	83 ec 28             	sub    esp,0x28
c000e857:	6a 0c                	push   0xc
c000e859:	e8 6d 14 00 00       	call   c000fccb <malloc>
c000e85e:	5a                   	pop    edx
c000e85f:	59                   	pop    ecx
c000e860:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e864:	50                   	push   eax
c000e865:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e869:	e8 e0 fe ff ff       	call   c000e74e <EnvVarContainer::EnvVarContainer(Process*)>
c000e86e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e872:	83 c4 2c             	add    esp,0x2c
c000e875:	c3                   	ret    

c000e876 <KeCopyProcessEnv(Process*, Process*)>:
c000e876:	57                   	push   edi
c000e877:	56                   	push   esi
c000e878:	53                   	push   ebx
c000e879:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87d:	83 ec 0c             	sub    esp,0xc
c000e880:	8b b8 7a 07 00 00    	mov    edi,DWORD PTR [eax+0x77a]
c000e886:	6a 0c                	push   0xc
c000e888:	e8 3e 14 00 00       	call   c000fccb <malloc>
c000e88d:	89 c3                	mov    ebx,eax
c000e88f:	58                   	pop    eax
c000e890:	5a                   	pop    edx
c000e891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e895:	53                   	push   ebx
c000e896:	e8 b3 fe ff ff       	call   c000e74e <EnvVarContainer::EnvVarContainer(Process*)>
c000e89b:	8b 07                	mov    eax,DWORD PTR [edi]
c000e89d:	89 03                	mov    DWORD PTR [ebx],eax
c000e89f:	c1 e0 03             	shl    eax,0x3
c000e8a2:	89 04 24             	mov    DWORD PTR [esp],eax
c000e8a5:	e8 21 14 00 00       	call   c000fccb <malloc>
c000e8aa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e8ad:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e8af:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e8b2:	c1 e1 03             	shl    ecx,0x3
c000e8b5:	89 c7                	mov    edi,eax
c000e8b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8b9:	83 c4 10             	add    esp,0x10
c000e8bc:	89 d8                	mov    eax,ebx
c000e8be:	5b                   	pop    ebx
c000e8bf:	5e                   	pop    esi
c000e8c0:	5f                   	pop    edi
c000e8c1:	c3                   	ret    

c000e8c2 <KeLoadSystemEnv()>:
c000e8c2:	53                   	push   ebx
c000e8c3:	83 ec 14             	sub    esp,0x14
c000e8c6:	6a 0c                	push   0xc
c000e8c8:	e8 fe 13 00 00       	call   c000fccb <malloc>
c000e8cd:	89 c3                	mov    ebx,eax
c000e8cf:	58                   	pop    eax
c000e8d0:	5a                   	pop    edx
c000e8d1:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000e8d7:	53                   	push   ebx
c000e8d8:	e8 71 fe ff ff       	call   c000e74e <EnvVarContainer::EnvVarContainer(Process*)>
c000e8dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e8e0:	89 1d dc c0 02 c0    	mov    DWORD PTR ds:0xc002c0dc,ebx
c000e8e6:	e8 47 fe ff ff       	call   c000e732 <EnvVarContainer::__loadSystem()>
c000e8eb:	83 c4 18             	add    esp,0x18
c000e8ee:	5b                   	pop    ebx
c000e8ef:	c3                   	ret    

c000e8f0 <KeLoadUserEnv()>:
c000e8f0:	53                   	push   ebx
c000e8f1:	83 ec 14             	sub    esp,0x14
c000e8f4:	6a 0c                	push   0xc
c000e8f6:	e8 d0 13 00 00       	call   c000fccb <malloc>
c000e8fb:	89 c3                	mov    ebx,eax
c000e8fd:	58                   	pop    eax
c000e8fe:	5a                   	pop    edx
c000e8ff:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000e905:	53                   	push   ebx
c000e906:	e8 43 fe ff ff       	call   c000e74e <EnvVarContainer::EnvVarContainer(Process*)>
c000e90b:	89 1d d8 c0 02 c0    	mov    DWORD PTR ds:0xc002c0d8,ebx
c000e911:	83 c4 18             	add    esp,0x18
c000e914:	5b                   	pop    ebx
c000e915:	c3                   	ret    

c000e916 <KeFlushEnv()>:
c000e916:	c3                   	ret    

c000e917 <KeGetProcessTotalEnvCount(Process*)>:
c000e917:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e91b:	8b 15 d8 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c0d8
c000e921:	8b 88 7a 07 00 00    	mov    ecx,DWORD PTR [eax+0x77a]
c000e927:	a1 dc c0 02 c0       	mov    eax,ds:0xc002c0dc
c000e92c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e92e:	03 01                	add    eax,DWORD PTR [ecx]
c000e930:	85 d2                	test   edx,edx
c000e932:	74 02                	je     c000e936 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e934:	03 02                	add    eax,DWORD PTR [edx]
c000e936:	c3                   	ret    

c000e937 <KeGetProcessEnvPair(Process*, int)>:
c000e937:	57                   	push   edi
c000e938:	56                   	push   esi
c000e939:	8b 35 d8 c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c0d8
c000e93f:	53                   	push   ebx
c000e940:	85 f6                	test   esi,esi
c000e942:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e946:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e94a:	8b 88 7a 07 00 00    	mov    ecx,DWORD PTR [eax+0x77a]
c000e950:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e954:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e956:	75 16                	jne    c000e96e <KeGetProcessEnvPair(Process*, int)+0x37>
c000e958:	39 c2                	cmp    edx,eax
c000e95a:	7c 16                	jl     c000e972 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e95c:	8b 0d dc c0 02 c0    	mov    ecx,DWORD PTR ds:0xc002c0dc
c000e962:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e964:	01 c6                	add    esi,eax
c000e966:	39 d6                	cmp    esi,edx
c000e968:	7e 3c                	jle    c000e9a6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e96a:	29 c2                	sub    edx,eax
c000e96c:	eb 04                	jmp    c000e972 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e96e:	39 c2                	cmp    edx,eax
c000e970:	7d 05                	jge    c000e977 <KeGetProcessEnvPair(Process*, int)+0x40>
c000e972:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e975:	eb 20                	jmp    c000e997 <KeGetProcessEnvPair(Process*, int)+0x60>
c000e977:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e979:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e97c:	39 d1                	cmp    ecx,edx
c000e97e:	7e 04                	jle    c000e984 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e980:	29 c2                	sub    edx,eax
c000e982:	eb 10                	jmp    c000e994 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e984:	8b 35 dc c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c0dc
c000e98a:	03 0e                	add    ecx,DWORD PTR [esi]
c000e98c:	39 d1                	cmp    ecx,edx
c000e98e:	7e 16                	jle    c000e9a6 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e990:	29 c2                	sub    edx,eax
c000e992:	29 fa                	sub    edx,edi
c000e994:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e997:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e99a:	8b 02                	mov    eax,DWORD PTR [edx]
c000e99c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e99f:	89 03                	mov    DWORD PTR [ebx],eax
c000e9a1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e9a4:	eb 1d                	jmp    c000e9c3 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e9a6:	83 ec 0c             	sub    esp,0xc
c000e9a9:	68 ca 3e 02 c0       	push   0xc0023eca
c000e9ae:	e8 5f 16 00 00       	call   c0010012 <KePanic(char const*)>
c000e9b3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e9b9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e9c0:	83 c4 10             	add    esp,0x10
c000e9c3:	89 d8                	mov    eax,ebx
c000e9c5:	5b                   	pop    ebx
c000e9c6:	5e                   	pop    esi
c000e9c7:	5f                   	pop    edi
c000e9c8:	c2 04 00             	ret    0x4
c000e9cb:	90                   	nop

c000e9cc <KeSetupInterrupts()>:
c000e9cc:	83 ec 10             	sub    esp,0x10
c000e9cf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e9d7:	90                   	nop
c000e9d8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e9e0:	7f 5a                	jg     c000ea3c <KeSetupInterrupts()+0x70>
c000e9e2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e9ea:	66 90                	xchg   ax,ax
c000e9ec:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e9f1:	7f 41                	jg     c000ea34 <KeSetupInterrupts()+0x68>
c000e9f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9f7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e9fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea02:	01 d0                	add    eax,edx
c000ea04:	c7 04 85 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd2f20],0x0
c000ea0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea13:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ea1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea1e:	01 d0                	add    eax,edx
c000ea20:	c7 04 85 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd3f20],0x0
c000ea2b:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000ea30:	eb ba                	jmp    c000e9ec <KeSetupInterrupts()+0x20>
c000ea32:	66 90                	xchg   ax,ax
c000ea34:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000ea39:	eb 9d                	jmp    c000e9d8 <KeSetupInterrupts()+0xc>
c000ea3b:	90                   	nop
c000ea3c:	90                   	nop
c000ea3d:	83 c4 10             	add    esp,0x10
c000ea40:	c3                   	ret    
c000ea41:	8d 76 00             	lea    esi,[esi+0x0]

c000ea44 <int_handler>:
c000ea44:	83 ec 2c             	sub    esp,0x2c
c000ea47:	90                   	nop
c000ea48:	a0 28 e1 02 c0       	mov    al,ds:0xc002e128
c000ea4d:	0f b6 c0             	movzx  eax,al
c000ea50:	85 c0                	test   eax,eax
c000ea52:	74 04                	je     c000ea58 <int_handler+0x14>
c000ea54:	fa                   	cli    
c000ea55:	f4                   	hlt    
c000ea56:	eb f0                	jmp    c000ea48 <int_handler+0x4>
c000ea58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea5c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000ea5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ea63:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000ea68:	7e 1a                	jle    c000ea84 <int_handler+0x40>
c000ea6a:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000ea6f:	7f 13                	jg     c000ea84 <int_handler+0x40>
c000ea71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea75:	83 e8 20             	sub    eax,0x20
c000ea78:	83 ec 0c             	sub    esp,0xc
c000ea7b:	50                   	push   eax
c000ea7c:	e8 db b7 00 00       	call   c001a25c <HalEndOfInterrupt(int)>
c000ea81:	83 c4 10             	add    esp,0x10
c000ea84:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea88:	c1 e0 04             	shl    eax,0x4
c000ea8b:	05 e0 d0 02 c0       	add    eax,0xc002d0e0
c000ea90:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ea94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea98:	c1 e0 04             	shl    eax,0x4
c000ea9b:	05 e0 c0 02 c0       	add    eax,0xc002c0e0
c000eaa0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eaa4:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000eaac:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000eab1:	0f 8f ad 00 00 00    	jg     c000eb64 <int_handler+0x120>
c000eab7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eabb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000eac2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eac6:	01 d0                	add    eax,edx
c000eac8:	8b 00                	mov    eax,DWORD PTR [eax]
c000eaca:	85 c0                	test   eax,eax
c000eacc:	0f 84 86 00 00 00    	je     c000eb58 <int_handler+0x114>
c000ead2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ead6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000ead9:	83 f8 60             	cmp    eax,0x60
c000eadc:	75 46                	jne    c000eb24 <int_handler+0xe0>
c000eade:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eae2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000eae9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eaed:	01 d0                	add    eax,edx
c000eaef:	8b 00                	mov    eax,DWORD PTR [eax]
c000eaf1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eaf5:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eafc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eb00:	01 ca                	add    edx,ecx
c000eb02:	8b 12                	mov    edx,DWORD PTR [edx]
c000eb04:	83 ec 08             	sub    esp,0x8
c000eb07:	52                   	push   edx
c000eb08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eb0c:	ff d0                	call   eax
c000eb0e:	83 c4 10             	add    esp,0x10
c000eb11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eb15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eb19:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb21:	eb 4d                	jmp    c000eb70 <int_handler+0x12c>
c000eb23:	90                   	nop
c000eb24:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eb28:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000eb2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb33:	01 d0                	add    eax,edx
c000eb35:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eb3b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000eb42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eb46:	01 ca                	add    edx,ecx
c000eb48:	8b 12                	mov    edx,DWORD PTR [edx]
c000eb4a:	83 ec 08             	sub    esp,0x8
c000eb4d:	52                   	push   edx
c000eb4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eb52:	ff d0                	call   eax
c000eb54:	83 c4 10             	add    esp,0x10
c000eb57:	90                   	nop
c000eb58:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000eb5d:	e9 4a ff ff ff       	jmp    c000eaac <int_handler+0x68>
c000eb62:	66 90                	xchg   ax,ax
c000eb64:	b8 00 00 00 00       	mov    eax,0x0
c000eb69:	ba 00 00 00 00       	mov    edx,0x0
c000eb6e:	66 90                	xchg   ax,ax
c000eb70:	83 c4 2c             	add    esp,0x2c
c000eb73:	c3                   	ret    

c000eb74 <KeDisplayProgramFault(char const*)>:
c000eb74:	83 ec 0c             	sub    esp,0xc
c000eb77:	83 ec 0c             	sub    esp,0xc
c000eb7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb7e:	e8 e1 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000eb83:	83 c4 10             	add    esp,0x10
c000eb86:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eb8b:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb8d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb90:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c000eb96:	85 c0                	test   eax,eax
c000eb98:	74 22                	je     c000ebbc <KeDisplayProgramFault(char const*)+0x48>
c000eb9a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eb9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000eba1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eba4:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c000ebaa:	6a 04                	push   0x4
c000ebac:	6a 0f                	push   0xf
c000ebae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ebb2:	50                   	push   eax
c000ebb3:	e8 80 3d 00 00       	call   c0012938 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000ebb8:	83 c4 10             	add    esp,0x10
c000ebbb:	90                   	nop
c000ebbc:	90                   	nop
c000ebbd:	83 c4 0c             	add    esp,0xc
c000ebc0:	c3                   	ret    
c000ebc1:	8d 76 00             	lea    esi,[esi+0x0]

c000ebc4 <KeGeneralProtectionFault(void*, void*)>:
c000ebc4:	83 ec 0c             	sub    esp,0xc
c000ebc7:	83 ec 08             	sub    esp,0x8
c000ebca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebd2:	e8 27 ac 00 00       	call   c00197fe <HalHandleGeneralProtectionFault(void*, void*)>
c000ebd7:	83 c4 10             	add    esp,0x10
c000ebda:	0f b6 c0             	movzx  eax,al
c000ebdd:	85 c0                	test   eax,eax
c000ebdf:	75 2f                	jne    c000ec10 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000ebe1:	83 ec 0c             	sub    esp,0xc
c000ebe4:	68 e4 3e 02 c0       	push   0xc0023ee4
c000ebe9:	e8 86 ff ff ff       	call   c000eb74 <KeDisplayProgramFault(char const*)>
c000ebee:	83 c4 10             	add    esp,0x10
c000ebf1:	83 ec 0c             	sub    esp,0xc
c000ebf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebf8:	e8 9b ad 00 00       	call   c0019998 <HalDisplayDebugInfo(void*)>
c000ebfd:	83 c4 10             	add    esp,0x10
c000ec00:	83 ec 0c             	sub    esp,0xc
c000ec03:	6a 00                	push   0x0
c000ec05:	e8 92 8c 00 00       	call   c001789c <Thr::terminateFromIRQ(int)>
c000ec0a:	83 c4 10             	add    esp,0x10
c000ec0d:	eb 05                	jmp    c000ec14 <KeGeneralProtectionFault(void*, void*)+0x50>
c000ec0f:	90                   	nop
c000ec10:	90                   	nop
c000ec11:	8d 76 00             	lea    esi,[esi+0x0]
c000ec14:	83 c4 0c             	add    esp,0xc
c000ec17:	c3                   	ret    

c000ec18 <KePageFault(void*, void*)>:
c000ec18:	83 ec 0c             	sub    esp,0xc
c000ec1b:	83 ec 0c             	sub    esp,0xc
c000ec1e:	68 fd 3e 02 c0       	push   0xc0023efd
c000ec23:	e8 3c 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec28:	83 c4 10             	add    esp,0x10
c000ec2b:	83 ec 08             	sub    esp,0x8
c000ec2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec36:	e8 6e ac 00 00       	call   c00198a9 <HalHandlePageFault(void*, void*)>
c000ec3b:	83 c4 10             	add    esp,0x10
c000ec3e:	0f b6 c0             	movzx  eax,al
c000ec41:	85 c0                	test   eax,eax
c000ec43:	75 2f                	jne    c000ec74 <KePageFault(void*, void*)+0x5c>
c000ec45:	83 ec 0c             	sub    esp,0xc
c000ec48:	68 0a 3f 02 c0       	push   0xc0023f0a
c000ec4d:	e8 22 ff ff ff       	call   c000eb74 <KeDisplayProgramFault(char const*)>
c000ec52:	83 c4 10             	add    esp,0x10
c000ec55:	83 ec 0c             	sub    esp,0xc
c000ec58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec5c:	e8 37 ad 00 00       	call   c0019998 <HalDisplayDebugInfo(void*)>
c000ec61:	83 c4 10             	add    esp,0x10
c000ec64:	83 ec 0c             	sub    esp,0xc
c000ec67:	6a 00                	push   0x0
c000ec69:	e8 2e 8c 00 00       	call   c001789c <Thr::terminateFromIRQ(int)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	eb 05                	jmp    c000ec78 <KePageFault(void*, void*)+0x60>
c000ec73:	90                   	nop
c000ec74:	90                   	nop
c000ec75:	8d 76 00             	lea    esi,[esi+0x0]
c000ec78:	83 c4 0c             	add    esp,0xc
c000ec7b:	c3                   	ret    

c000ec7c <KeNonMaskableInterrupt(void*, void*)>:
c000ec7c:	83 ec 0c             	sub    esp,0xc
c000ec7f:	e8 a2 b0 00 00       	call   c0019d26 <HalReceivedNMI()>
c000ec84:	90                   	nop
c000ec85:	83 c4 0c             	add    esp,0xc
c000ec88:	c3                   	ret    
c000ec89:	8d 76 00             	lea    esi,[esi+0x0]

c000ec8c <KeOtherFault(void*, void*)>:
c000ec8c:	83 ec 0c             	sub    esp,0xc
c000ec8f:	83 ec 0c             	sub    esp,0xc
c000ec92:	68 18 3f 02 c0       	push   0xc0023f18
c000ec97:	e8 d8 fe ff ff       	call   c000eb74 <KeDisplayProgramFault(char const*)>
c000ec9c:	83 c4 10             	add    esp,0x10
c000ec9f:	83 ec 0c             	sub    esp,0xc
c000eca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eca6:	e8 ed ac 00 00       	call   c0019998 <HalDisplayDebugInfo(void*)>
c000ecab:	83 c4 10             	add    esp,0x10
c000ecae:	83 ec 0c             	sub    esp,0xc
c000ecb1:	6a 00                	push   0x0
c000ecb3:	e8 e4 8b 00 00       	call   c001789c <Thr::terminateFromIRQ(int)>
c000ecb8:	83 c4 10             	add    esp,0x10
c000ecbb:	90                   	nop
c000ecbc:	83 c4 0c             	add    esp,0xc
c000ecbf:	c3                   	ret    

c000ecc0 <KeOpcodeFault(void*, void*)>:
c000ecc0:	55                   	push   ebp
c000ecc1:	89 e5                	mov    ebp,esp
c000ecc3:	83 ec 08             	sub    esp,0x8
c000ecc6:	83 ec 08             	sub    esp,0x8
c000ecc9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000eccc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000eccf:	e8 82 ac 00 00       	call   c0019956 <HalHandleOpcodeFault(void*, void*)>
c000ecd4:	83 c4 10             	add    esp,0x10
c000ecd7:	0f b6 c0             	movzx  eax,al
c000ecda:	85 c0                	test   eax,eax
c000ecdc:	75 2e                	jne    c000ed0c <KeOpcodeFault(void*, void*)+0x4c>
c000ecde:	83 ec 0c             	sub    esp,0xc
c000ece1:	68 40 3f 02 c0       	push   0xc0023f40
c000ece6:	e8 89 fe ff ff       	call   c000eb74 <KeDisplayProgramFault(char const*)>
c000eceb:	83 c4 10             	add    esp,0x10
c000ecee:	83 ec 0c             	sub    esp,0xc
c000ecf1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ecf4:	e8 9f ac 00 00       	call   c0019998 <HalDisplayDebugInfo(void*)>
c000ecf9:	83 c4 10             	add    esp,0x10
c000ecfc:	83 ec 0c             	sub    esp,0xc
c000ecff:	6a 00                	push   0x0
c000ed01:	e8 96 8b 00 00       	call   c001789c <Thr::terminateFromIRQ(int)>
c000ed06:	83 c4 10             	add    esp,0x10
c000ed09:	eb 05                	jmp    c000ed10 <KeOpcodeFault(void*, void*)+0x50>
c000ed0b:	90                   	nop
c000ed0c:	90                   	nop
c000ed0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed10:	c9                   	leave  
c000ed11:	c3                   	ret    
c000ed12:	66 90                	xchg   ax,ax

c000ed14 <KeDoubleFault(void*, void*)>:
c000ed14:	55                   	push   ebp
c000ed15:	89 e5                	mov    ebp,esp
c000ed17:	83 ec 08             	sub    esp,0x8
c000ed1a:	83 ec 0c             	sub    esp,0xc
c000ed1d:	68 4d 3f 02 c0       	push   0xc0023f4d
c000ed22:	e8 eb 12 00 00       	call   c0010012 <KePanic(char const*)>
c000ed27:	83 c4 10             	add    esp,0x10
c000ed2a:	90                   	nop
c000ed2b:	c9                   	leave  
c000ed2c:	c3                   	ret    
c000ed2d:	90                   	nop

c000ed2e <GDTEntry::setBase(unsigned int)>:
c000ed2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed32:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed36:	89 c1                	mov    ecx,eax
c000ed38:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ed3c:	c1 e9 10             	shr    ecx,0x10
c000ed3f:	c1 e8 18             	shr    eax,0x18
c000ed42:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ed45:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ed48:	c3                   	ret    
c000ed49:	90                   	nop

c000ed4a <GDTEntry::setLimit(unsigned int)>:
c000ed4a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ed4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed52:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ed55:	66 89 01             	mov    WORD PTR [ecx],ax
c000ed58:	83 e2 f0             	and    edx,0xfffffff0
c000ed5b:	c1 e8 10             	shr    eax,0x10
c000ed5e:	83 e0 0f             	and    eax,0xf
c000ed61:	09 d0                	or     eax,edx
c000ed63:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ed66:	c3                   	ret    
c000ed67:	90                   	nop

c000ed68 <GDT::GDT()>:
c000ed68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed76:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed7c:	90                   	nop
c000ed7d:	c3                   	ret    

c000ed7e <GDT::addEntry(GDTEntry)>:
c000ed7e:	53                   	push   ebx
c000ed7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed83:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed87:	8b 02                	mov    eax,DWORD PTR [edx]
c000ed89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ed8d:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000ed91:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000ed95:	8d 48 01             	lea    ecx,[eax+0x1]
c000ed98:	c1 e0 03             	shl    eax,0x3
c000ed9b:	89 0a                	mov    DWORD PTR [edx],ecx
c000ed9d:	5b                   	pop    ebx
c000ed9e:	c3                   	ret    
c000ed9f:	90                   	nop

c000eda0 <GDT::getNumberOfEntries()>:
c000eda0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eda4:	8b 00                	mov    eax,DWORD PTR [eax]
c000eda6:	c3                   	ret    
c000eda7:	90                   	nop

c000eda8 <GDT::flush()>:
c000eda8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edac:	8b 10                	mov    edx,DWORD PTR [eax]
c000edae:	83 c0 04             	add    eax,0x4
c000edb1:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000edb8:	a3 e2 e0 02 c0       	mov    ds:0xc002e0e2,eax
c000edbd:	66 89 15 e0 e0 02 c0 	mov    WORD PTR ds:0xc002e0e0,dx
c000edc4:	e9 91 15 ff ff       	jmp    c000035a <loadGDT>
c000edc9:	90                   	nop

c000edca <GDT::setup()>:
c000edca:	57                   	push   edi
c000edcb:	56                   	push   esi
c000edcc:	53                   	push   ebx
c000edcd:	83 ec 30             	sub    esp,0x30
c000edd0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000edd4:	6a 00                	push   0x0
c000edd6:	8d 74 24 14          	lea    esi,[esp+0x14]
c000edda:	56                   	push   esi
c000eddb:	e8 4e ff ff ff       	call   c000ed2e <GDTEntry::setBase(unsigned int)>
c000ede0:	6a 00                	push   0x0
c000ede2:	56                   	push   esi
c000ede3:	e8 62 ff ff ff       	call   c000ed4a <GDTEntry::setLimit(unsigned int)>
c000ede8:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000edf0:	6a 00                	push   0x0
c000edf2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000edf6:	56                   	push   esi
c000edf7:	e8 32 ff ff ff       	call   c000ed2e <GDTEntry::setBase(unsigned int)>
c000edfc:	68 ff ff ff 00       	push   0xffffff
c000ee01:	56                   	push   esi
c000ee02:	e8 43 ff ff ff       	call   c000ed4a <GDTEntry::setLimit(unsigned int)>
c000ee07:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ee0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee0f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000ee13:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000ee17:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee1c:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee21:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ee25:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ee29:	89 f8                	mov    eax,edi
c000ee2b:	89 fa                	mov    edx,edi
c000ee2d:	80 e4 f7             	and    ah,0xf7
c000ee30:	80 ce 60             	or     dh,0x60
c000ee33:	89 c7                	mov    edi,eax
c000ee35:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ee39:	80 cc 60             	or     ah,0x60
c000ee3c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ee40:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ee44:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ee48:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee4c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ee50:	83 c4 20             	add    esp,0x20
c000ee53:	6a 00                	push   0x0
c000ee55:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ee59:	50                   	push   eax
c000ee5a:	e8 cf fe ff ff       	call   c000ed2e <GDTEntry::setBase(unsigned int)>
c000ee5f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000ee63:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000ee67:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000ee6b:	83 e0 3f             	and    eax,0x3f
c000ee6e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ee72:	6a 00                	push   0x0
c000ee74:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ee78:	50                   	push   eax
c000ee79:	e8 b0 fe ff ff       	call   c000ed2e <GDTEntry::setBase(unsigned int)>
c000ee7e:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ee82:	83 e0 3f             	and    eax,0x3f
c000ee85:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ee89:	83 c4 0c             	add    esp,0xc
c000ee8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ee90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ee94:	53                   	push   ebx
c000ee95:	e8 e4 fe ff ff       	call   c000ed7e <GDT::addEntry(GDTEntry)>
c000ee9a:	83 c4 0c             	add    esp,0xc
c000ee9d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eea1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eea5:	53                   	push   ebx
c000eea6:	e8 d3 fe ff ff       	call   c000ed7e <GDT::addEntry(GDTEntry)>
c000eeab:	83 c4 0c             	add    esp,0xc
c000eeae:	57                   	push   edi
c000eeaf:	56                   	push   esi
c000eeb0:	53                   	push   ebx
c000eeb1:	e8 c8 fe ff ff       	call   c000ed7e <GDT::addEntry(GDTEntry)>
c000eeb6:	83 c4 0c             	add    esp,0xc
c000eeb9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000eebd:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000eec1:	53                   	push   ebx
c000eec2:	e8 b7 fe ff ff       	call   c000ed7e <GDT::addEntry(GDTEntry)>
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eece:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eed2:	53                   	push   ebx
c000eed3:	e8 a6 fe ff ff       	call   c000ed7e <GDT::addEntry(GDTEntry)>
c000eed8:	83 c4 0c             	add    esp,0xc
c000eedb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eedf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee3:	53                   	push   ebx
c000eee4:	e8 95 fe ff ff       	call   c000ed7e <GDT::addEntry(GDTEntry)>
c000eee9:	83 c4 0c             	add    esp,0xc
c000eeec:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef4:	53                   	push   ebx
c000eef5:	e8 84 fe ff ff       	call   c000ed7e <GDT::addEntry(GDTEntry)>
c000eefa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eefd:	e8 a6 fe ff ff       	call   c000eda8 <GDT::flush()>
c000ef02:	83 c4 40             	add    esp,0x40
c000ef05:	5b                   	pop    ebx
c000ef06:	5e                   	pop    esi
c000ef07:	5f                   	pop    edi
c000ef08:	c3                   	ret    

c000ef09 <idleFunction(void*)>:
c000ef09:	83 ec 0c             	sub    esp,0xc
c000ef0c:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000ef13:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000ef1a:	75 01                	jne    c000ef1d <idleFunction(void*)+0x14>
c000ef1c:	fb                   	sti    
c000ef1d:	e8 9f ae 00 00       	call   c0019dc1 <HalSystemIdle()>
c000ef22:	e8 8f 30 01 00       	call   c0021fb6 <idleCommon()>
c000ef27:	eb f4                	jmp    c000ef1d <idleFunction(void*)+0x14>
c000ef29:	66 90                	xchg   ax,ax
c000ef2b:	90                   	nop

c000ef2c <IDTEntry::IDTEntry(bool)>:
c000ef2c:	53                   	push   ebx
c000ef2d:	83 ec 04             	sub    esp,0x4
c000ef30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef34:	88 04 24             	mov    BYTE PTR [esp],al
c000ef37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef3b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000ef41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef45:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000ef49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef4d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef50:	83 e2 f0             	and    edx,0xfffffff0
c000ef53:	83 ca 0e             	or     edx,0xe
c000ef56:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef5d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef60:	83 e2 ef             	and    edx,0xffffffef
c000ef63:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef66:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ef6a:	85 c0                	test   eax,eax
c000ef6c:	74 06                	je     c000ef74 <IDTEntry::IDTEntry(bool)+0x48>
c000ef6e:	b2 03                	mov    dl,0x3
c000ef70:	eb 06                	jmp    c000ef78 <IDTEntry::IDTEntry(bool)+0x4c>
c000ef72:	66 90                	xchg   ax,ax
c000ef74:	b2 00                	mov    dl,0x0
c000ef76:	66 90                	xchg   ax,ax
c000ef78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef7c:	83 e2 03             	and    edx,0x3
c000ef7f:	89 d3                	mov    ebx,edx
c000ef81:	c1 e3 05             	shl    ebx,0x5
c000ef84:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef87:	83 e2 9f             	and    edx,0xffffff9f
c000ef8a:	88 d1                	mov    cl,dl
c000ef8c:	88 da                	mov    dl,bl
c000ef8e:	09 ca                	or     edx,ecx
c000ef90:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef97:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef9a:	83 ca 80             	or     edx,0xffffff80
c000ef9d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efa0:	90                   	nop
c000efa1:	83 c4 04             	add    esp,0x4
c000efa4:	5b                   	pop    ebx
c000efa5:	c3                   	ret    

c000efa6 <IDTEntry::setOffset(unsigned int)>:
c000efa6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000efaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efae:	66 89 02             	mov    WORD PTR [edx],ax
c000efb1:	c1 e8 10             	shr    eax,0x10
c000efb4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000efb8:	c3                   	ret    
c000efb9:	90                   	nop
c000efba:	66 90                	xchg   ax,ax

c000efbc <IDT::IDT()>:
c000efbc:	90                   	nop
c000efbd:	c3                   	ret    

c000efbe <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000efbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efc2:	83 c0 30             	add    eax,0x30
c000efc5:	c3                   	ret    

c000efc6 <IDT::addEntry(IDTEntry, int)>:
c000efc6:	53                   	push   ebx
c000efc7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efcb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000efcf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000efd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000efd7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000efda:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000efde:	5b                   	pop    ebx
c000efdf:	c3                   	ret    

c000efe0 <IDT::addEntry(int, void (*)(), bool)>:
c000efe0:	53                   	push   ebx
c000efe1:	83 ec 10             	sub    esp,0x10
c000efe4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000efe9:	50                   	push   eax
c000efea:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000efee:	53                   	push   ebx
c000efef:	e8 38 ff ff ff       	call   c000ef2c <IDTEntry::IDTEntry(bool)>
c000eff4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eff8:	53                   	push   ebx
c000eff9:	e8 a8 ff ff ff       	call   c000efa6 <IDTEntry::setOffset(unsigned int)>
c000effe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f002:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f006:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f00a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f00e:	e8 b3 ff ff ff       	call   c000efc6 <IDT::addEntry(IDTEntry, int)>
c000f013:	83 c4 30             	add    esp,0x30
c000f016:	5b                   	pop    ebx
c000f017:	c3                   	ret    

c000f018 <IDT::flush()>:
c000f018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f01c:	66 c7 05 e8 e0 02 c0 ff 07 	mov    WORD PTR ds:0xc002e0e8,0x7ff
c000f025:	a3 ea e0 02 c0       	mov    ds:0xc002e0ea,eax
c000f02a:	0f 01 1d e8 e0 02 c0 	lidtd  ds:0xc002e0e8
c000f031:	c3                   	ret    

c000f032 <IDT::setup()>:
c000f032:	57                   	push   edi
c000f033:	56                   	push   esi
c000f034:	53                   	push   ebx
c000f035:	83 ec 10             	sub    esp,0x10
c000f038:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f03c:	6a 00                	push   0x0
c000f03e:	68 90 12 02 c0       	push   0xc0021290
c000f043:	6a 00                	push   0x0
c000f045:	53                   	push   ebx
c000f046:	e8 95 ff ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f04b:	6a 00                	push   0x0
c000f04d:	68 a0 12 02 c0       	push   0xc00212a0
c000f052:	6a 01                	push   0x1
c000f054:	53                   	push   ebx
c000f055:	e8 86 ff ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f05a:	83 c4 20             	add    esp,0x20
c000f05d:	6a 00                	push   0x0
c000f05f:	68 aa 12 02 c0       	push   0xc00212aa
c000f064:	6a 02                	push   0x2
c000f066:	53                   	push   ebx
c000f067:	e8 74 ff ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f06c:	6a 00                	push   0x0
c000f06e:	68 b4 12 02 c0       	push   0xc00212b4
c000f073:	6a 03                	push   0x3
c000f075:	53                   	push   ebx
c000f076:	e8 65 ff ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f07b:	83 c4 20             	add    esp,0x20
c000f07e:	6a 00                	push   0x0
c000f080:	68 be 12 02 c0       	push   0xc00212be
c000f085:	6a 04                	push   0x4
c000f087:	53                   	push   ebx
c000f088:	e8 53 ff ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f08d:	6a 00                	push   0x0
c000f08f:	68 c8 12 02 c0       	push   0xc00212c8
c000f094:	6a 05                	push   0x5
c000f096:	53                   	push   ebx
c000f097:	e8 44 ff ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f09c:	83 c4 20             	add    esp,0x20
c000f09f:	6a 00                	push   0x0
c000f0a1:	68 d2 12 02 c0       	push   0xc00212d2
c000f0a6:	6a 06                	push   0x6
c000f0a8:	53                   	push   ebx
c000f0a9:	e8 32 ff ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f0ae:	6a 00                	push   0x0
c000f0b0:	68 dc 12 02 c0       	push   0xc00212dc
c000f0b5:	6a 07                	push   0x7
c000f0b7:	53                   	push   ebx
c000f0b8:	e8 23 ff ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f0bd:	83 c4 20             	add    esp,0x20
c000f0c0:	6a 00                	push   0x0
c000f0c2:	68 e6 12 02 c0       	push   0xc00212e6
c000f0c7:	6a 08                	push   0x8
c000f0c9:	53                   	push   ebx
c000f0ca:	e8 11 ff ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f0cf:	6a 00                	push   0x0
c000f0d1:	68 ee 12 02 c0       	push   0xc00212ee
c000f0d6:	6a 09                	push   0x9
c000f0d8:	53                   	push   ebx
c000f0d9:	e8 02 ff ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f0de:	83 c4 20             	add    esp,0x20
c000f0e1:	6a 00                	push   0x0
c000f0e3:	68 f8 12 02 c0       	push   0xc00212f8
c000f0e8:	6a 0a                	push   0xa
c000f0ea:	53                   	push   ebx
c000f0eb:	e8 f0 fe ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f0f0:	6a 00                	push   0x0
c000f0f2:	68 00 13 02 c0       	push   0xc0021300
c000f0f7:	6a 0b                	push   0xb
c000f0f9:	53                   	push   ebx
c000f0fa:	e8 e1 fe ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f0ff:	83 c4 20             	add    esp,0x20
c000f102:	6a 00                	push   0x0
c000f104:	68 08 13 02 c0       	push   0xc0021308
c000f109:	6a 0c                	push   0xc
c000f10b:	53                   	push   ebx
c000f10c:	e8 cf fe ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f111:	6a 00                	push   0x0
c000f113:	68 10 13 02 c0       	push   0xc0021310
c000f118:	6a 0d                	push   0xd
c000f11a:	53                   	push   ebx
c000f11b:	e8 c0 fe ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f120:	83 c4 20             	add    esp,0x20
c000f123:	6a 00                	push   0x0
c000f125:	68 2a 13 02 c0       	push   0xc002132a
c000f12a:	6a 0e                	push   0xe
c000f12c:	53                   	push   ebx
c000f12d:	e8 ae fe ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f132:	6a 00                	push   0x0
c000f134:	68 32 13 02 c0       	push   0xc0021332
c000f139:	6a 0f                	push   0xf
c000f13b:	53                   	push   ebx
c000f13c:	e8 9f fe ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f141:	83 c4 20             	add    esp,0x20
c000f144:	6a 00                	push   0x0
c000f146:	68 3c 13 02 c0       	push   0xc002133c
c000f14b:	6a 10                	push   0x10
c000f14d:	53                   	push   ebx
c000f14e:	e8 8d fe ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f153:	6a 00                	push   0x0
c000f155:	68 46 13 02 c0       	push   0xc0021346
c000f15a:	6a 11                	push   0x11
c000f15c:	53                   	push   ebx
c000f15d:	e8 7e fe ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f162:	83 c4 20             	add    esp,0x20
c000f165:	6a 00                	push   0x0
c000f167:	68 50 13 02 c0       	push   0xc0021350
c000f16c:	6a 12                	push   0x12
c000f16e:	53                   	push   ebx
c000f16f:	e8 6c fe ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f174:	6a 01                	push   0x1
c000f176:	68 ea 13 02 c0       	push   0xc00213ea
c000f17b:	6a 60                	push   0x60
c000f17d:	53                   	push   ebx
c000f17e:	e8 5d fe ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f183:	83 c4 20             	add    esp,0x20
c000f186:	6a 00                	push   0x0
c000f188:	68 f1 13 02 c0       	push   0xc00213f1
c000f18d:	6a 20                	push   0x20
c000f18f:	53                   	push   ebx
c000f190:	e8 4b fe ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f195:	6a 00                	push   0x0
c000f197:	68 dc 13 02 c0       	push   0xc00213dc
c000f19c:	6a 21                	push   0x21
c000f19e:	53                   	push   ebx
c000f19f:	e8 3c fe ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f1a4:	83 c4 20             	add    esp,0x20
c000f1a7:	6a 00                	push   0x0
c000f1a9:	68 e3 13 02 c0       	push   0xc00213e3
c000f1ae:	6a 22                	push   0x22
c000f1b0:	53                   	push   ebx
c000f1b1:	e8 2a fe ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f1b6:	6a 00                	push   0x0
c000f1b8:	68 5a 13 02 c0       	push   0xc002135a
c000f1bd:	6a 23                	push   0x23
c000f1bf:	53                   	push   ebx
c000f1c0:	e8 1b fe ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f1c5:	83 c4 20             	add    esp,0x20
c000f1c8:	6a 00                	push   0x0
c000f1ca:	68 64 13 02 c0       	push   0xc0021364
c000f1cf:	6a 24                	push   0x24
c000f1d1:	53                   	push   ebx
c000f1d2:	e8 09 fe ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f1d7:	6a 00                	push   0x0
c000f1d9:	68 6e 13 02 c0       	push   0xc002136e
c000f1de:	6a 25                	push   0x25
c000f1e0:	53                   	push   ebx
c000f1e1:	e8 fa fd ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f1e6:	83 c4 20             	add    esp,0x20
c000f1e9:	6a 00                	push   0x0
c000f1eb:	68 78 13 02 c0       	push   0xc0021378
c000f1f0:	6a 26                	push   0x26
c000f1f2:	53                   	push   ebx
c000f1f3:	e8 e8 fd ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f1f8:	6a 00                	push   0x0
c000f1fa:	68 82 13 02 c0       	push   0xc0021382
c000f1ff:	6a 27                	push   0x27
c000f201:	53                   	push   ebx
c000f202:	e8 d9 fd ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f207:	83 c4 20             	add    esp,0x20
c000f20a:	6a 00                	push   0x0
c000f20c:	68 8c 13 02 c0       	push   0xc002138c
c000f211:	6a 28                	push   0x28
c000f213:	53                   	push   ebx
c000f214:	e8 c7 fd ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f219:	6a 00                	push   0x0
c000f21b:	68 96 13 02 c0       	push   0xc0021396
c000f220:	6a 29                	push   0x29
c000f222:	53                   	push   ebx
c000f223:	e8 b8 fd ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f228:	83 c4 20             	add    esp,0x20
c000f22b:	6a 00                	push   0x0
c000f22d:	68 a0 13 02 c0       	push   0xc00213a0
c000f232:	6a 2a                	push   0x2a
c000f234:	53                   	push   ebx
c000f235:	e8 a6 fd ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f23a:	6a 00                	push   0x0
c000f23c:	68 aa 13 02 c0       	push   0xc00213aa
c000f241:	6a 2b                	push   0x2b
c000f243:	53                   	push   ebx
c000f244:	e8 97 fd ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f249:	83 c4 20             	add    esp,0x20
c000f24c:	6a 00                	push   0x0
c000f24e:	68 b4 13 02 c0       	push   0xc00213b4
c000f253:	6a 2c                	push   0x2c
c000f255:	53                   	push   ebx
c000f256:	e8 85 fd ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f25b:	6a 00                	push   0x0
c000f25d:	68 be 13 02 c0       	push   0xc00213be
c000f262:	6a 2d                	push   0x2d
c000f264:	53                   	push   ebx
c000f265:	e8 76 fd ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f26a:	83 c4 20             	add    esp,0x20
c000f26d:	6a 00                	push   0x0
c000f26f:	68 c8 13 02 c0       	push   0xc00213c8
c000f274:	6a 2e                	push   0x2e
c000f276:	53                   	push   ebx
c000f277:	e8 64 fd ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f27c:	6a 00                	push   0x0
c000f27e:	68 d2 13 02 c0       	push   0xc00213d2
c000f283:	6a 2f                	push   0x2f
c000f285:	53                   	push   ebx
c000f286:	e8 55 fd ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f28b:	83 c4 20             	add    esp,0x20
c000f28e:	6a 00                	push   0x0
c000f290:	68 f4 14 02 c0       	push   0xc00214f4
c000f295:	6a 30                	push   0x30
c000f297:	53                   	push   ebx
c000f298:	e8 43 fd ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f29d:	6a 00                	push   0x0
c000f29f:	68 fe 14 02 c0       	push   0xc00214fe
c000f2a4:	6a 31                	push   0x31
c000f2a6:	53                   	push   ebx
c000f2a7:	e8 34 fd ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f2ac:	83 c4 20             	add    esp,0x20
c000f2af:	6a 00                	push   0x0
c000f2b1:	68 08 15 02 c0       	push   0xc0021508
c000f2b6:	6a 32                	push   0x32
c000f2b8:	53                   	push   ebx
c000f2b9:	e8 22 fd ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f2be:	6a 00                	push   0x0
c000f2c0:	68 12 15 02 c0       	push   0xc0021512
c000f2c5:	6a 33                	push   0x33
c000f2c7:	53                   	push   ebx
c000f2c8:	e8 13 fd ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f2cd:	83 c4 20             	add    esp,0x20
c000f2d0:	6a 00                	push   0x0
c000f2d2:	68 1c 15 02 c0       	push   0xc002151c
c000f2d7:	6a 34                	push   0x34
c000f2d9:	53                   	push   ebx
c000f2da:	e8 01 fd ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f2df:	6a 00                	push   0x0
c000f2e1:	68 26 15 02 c0       	push   0xc0021526
c000f2e6:	6a 35                	push   0x35
c000f2e8:	53                   	push   ebx
c000f2e9:	e8 f2 fc ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f2ee:	83 c4 20             	add    esp,0x20
c000f2f1:	6a 00                	push   0x0
c000f2f3:	68 30 15 02 c0       	push   0xc0021530
c000f2f8:	6a 36                	push   0x36
c000f2fa:	53                   	push   ebx
c000f2fb:	e8 e0 fc ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f300:	6a 00                	push   0x0
c000f302:	68 3a 15 02 c0       	push   0xc002153a
c000f307:	6a 37                	push   0x37
c000f309:	53                   	push   ebx
c000f30a:	e8 d1 fc ff ff       	call   c000efe0 <IDT::addEntry(int, void (*)(), bool)>
c000f30f:	83 c4 1c             	add    esp,0x1c
c000f312:	6a 03                	push   0x3
c000f314:	6a 02                	push   0x2
c000f316:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000f31c:	e8 c3 49 00 00       	call   c0013ce4 <VAS::allocatePages(int, int)>
c000f321:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f328:	89 c6                	mov    esi,eax
c000f32a:	e8 9c 09 00 00       	call   c000fccb <malloc>
c000f32f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f335:	89 04 24             	mov    DWORD PTR [esp],eax
c000f338:	89 c7                	mov    edi,eax
c000f33a:	e8 61 3a 00 00       	call   c0012da0 <TSS::TSS()>
c000f33f:	83 c4 0c             	add    esp,0xc
c000f342:	68 e6 12 02 c0       	push   0xc00212e6
c000f347:	56                   	push   esi
c000f348:	57                   	push   edi
c000f349:	e8 96 3a 00 00       	call   c0012de4 <TSS::setup(unsigned long, unsigned long)>
c000f34e:	89 c6                	mov    esi,eax
c000f350:	58                   	pop    eax
c000f351:	5a                   	pop    edx
c000f352:	6a 00                	push   0x0
c000f354:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f358:	50                   	push   eax
c000f359:	e8 ce fb ff ff       	call   c000ef2c <IDTEntry::IDTEntry(bool)>
c000f35e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f362:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f367:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f36e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f374:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f378:	80 ce 05             	or     dh,0x5
c000f37b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f37e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f382:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f386:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f389:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f38c:	e8 87 fc ff ff       	call   c000f018 <IDT::flush()>
c000f391:	83 c4 20             	add    esp,0x20
c000f394:	5b                   	pop    ebx
c000f395:	5e                   	pop    esi
c000f396:	5f                   	pop    edi
c000f397:	c3                   	ret    

c000f398 <CPU::current()>:
c000f398:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000f39d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f3a3:	c3                   	ret    

c000f3a4 <operator new(unsigned long)>:
c000f3a4:	e9 22 09 00 00       	jmp    c000fccb <malloc>

c000f3a9 <operator delete(void*)>:
c000f3a9:	e9 3d 09 00 00       	jmp    c000fceb <rfree>

c000f3ae <disableIRQs()>:
c000f3ae:	fa                   	cli    
c000f3af:	c3                   	ret    

c000f3b0 <enableIRQs()>:
c000f3b0:	fb                   	sti    
c000f3b1:	c3                   	ret    

c000f3b2 <lockScheduler()>:
c000f3b2:	fa                   	cli    
c000f3b3:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000f3b9:	c3                   	ret    

c000f3ba <unlockScheduler()>:
c000f3ba:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000f3c1:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000f3c8:	75 01                	jne    c000f3cb <unlockScheduler()+0x11>
c000f3ca:	fb                   	sti    
c000f3cb:	c3                   	ret    

c000f3cc <lockStuff()>:
c000f3cc:	fa                   	cli    
c000f3cd:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000f3d3:	ff 05 2c ea 02 c0    	inc    DWORD PTR ds:0xc002ea2c
c000f3d9:	c3                   	ret    

c000f3da <unlockStuff()>:
c000f3da:	83 ec 0c             	sub    esp,0xc
c000f3dd:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000f3e2:	48                   	dec    eax
c000f3e3:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c000f3e8:	75 18                	jne    c000f402 <unlockStuff()+0x28>
c000f3ea:	83 3d 28 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea28,0x0
c000f3f1:	74 0f                	je     c000f402 <unlockStuff()+0x28>
c000f3f3:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c000f3fd:	e8 86 7b 00 00       	call   c0016f88 <schedule()>
c000f402:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000f409:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000f410:	75 01                	jne    c000f413 <unlockStuff()+0x39>
c000f412:	fb                   	sti    
c000f413:	83 c4 0c             	add    esp,0xc
c000f416:	c3                   	ret    

c000f417 <Virt::getAKernelVAS()>:
c000f417:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c000f41c:	c3                   	ret    

c000f41d <__not_memcpy>:
c000f41d:	57                   	push   edi
c000f41e:	56                   	push   esi
c000f41f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f423:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f427:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f42b:	89 c7                	mov    edi,eax
c000f42d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f42f:	5e                   	pop    esi
c000f430:	5f                   	pop    edi
c000f431:	c3                   	ret    

c000f432 <KeFormatDate(char*, int, int, int, int, bool)>:
c000f432:	55                   	push   ebp
c000f433:	b9 0a 00 00 00       	mov    ecx,0xa
c000f438:	57                   	push   edi
c000f439:	56                   	push   esi
c000f43a:	53                   	push   ebx
c000f43b:	bb e8 03 00 00       	mov    ebx,0x3e8
c000f440:	81 ec ac 00 00 00    	sub    esp,0xac
c000f446:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f44d:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f452:	99                   	cdq    
c000f453:	f7 f9                	idiv   ecx
c000f455:	89 d5                	mov    ebp,edx
c000f457:	99                   	cdq    
c000f458:	f7 f9                	idiv   ecx
c000f45a:	8d 42 30             	lea    eax,[edx+0x30]
c000f45d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f461:	8d 45 30             	lea    eax,[ebp+0x30]
c000f464:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f468:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f46f:	99                   	cdq    
c000f470:	f7 fb                	idiv   ebx
c000f472:	bb 64 00 00 00       	mov    ebx,0x64
c000f477:	99                   	cdq    
c000f478:	f7 f9                	idiv   ecx
c000f47a:	8d 42 30             	lea    eax,[edx+0x30]
c000f47d:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f481:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f488:	99                   	cdq    
c000f489:	f7 fb                	idiv   ebx
c000f48b:	31 db                	xor    ebx,ebx
c000f48d:	99                   	cdq    
c000f48e:	f7 f9                	idiv   ecx
c000f490:	8d 42 30             	lea    eax,[edx+0x30]
c000f493:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f497:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000f49f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f4a3:	0f be 8b 04 e1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd1efc]
c000f4aa:	83 f9 59             	cmp    ecx,0x59
c000f4ad:	74 1c                	je     c000f4cb <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000f4af:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000f4b6:	83 f9 4d             	cmp    ecx,0x4d
c000f4b9:	0f 84 e3 00 00 00    	je     c000f5a2 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f4bf:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000f4c6:	e9 d7 00 00 00       	jmp    c000f5a2 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f4cb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f4d0:	74 27                	je     c000f4f9 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f4d2:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f4d6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f4db:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f4df:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f4e3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f4e7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f4eb:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f4ef:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f4f3:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f4f7:	eb 15                	jmp    c000f50e <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f4f9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f4fd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f501:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f505:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f509:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f50e:	50                   	push   eax
c000f50f:	50                   	push   eax
c000f510:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f514:	57                   	push   edi
c000f515:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f519:	56                   	push   esi
c000f51a:	e8 21 13 ff ff       	call   c0000840 <strcat>
c000f51f:	83 c4 10             	add    esp,0x10
c000f522:	83 fb 02             	cmp    ebx,0x2
c000f525:	74 1a                	je     c000f541 <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000f527:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f52c:	a1 08 e1 02 c0       	mov    eax,ds:0xc002e108
c000f531:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f535:	55                   	push   ebp
c000f536:	55                   	push   ebp
c000f537:	57                   	push   edi
c000f538:	56                   	push   esi
c000f539:	e8 02 13 ff ff       	call   c0000840 <strcat>
c000f53e:	83 c4 10             	add    esp,0x10
c000f541:	43                   	inc    ebx
c000f542:	83 fb 03             	cmp    ebx,0x3
c000f545:	0f 85 58 ff ff ff    	jne    c000f4a3 <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000f54b:	51                   	push   ecx
c000f54c:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f553:	6a 00                	push   0x0
c000f555:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f55c:	e8 8f 0f ff ff       	call   c00004f0 <memset>
c000f561:	89 34 24             	mov    DWORD PTR [esp],esi
c000f564:	e8 07 10 ff ff       	call   c0000570 <strlen>
c000f569:	83 c4 10             	add    esp,0x10
c000f56c:	40                   	inc    eax
c000f56d:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f574:	72 17                	jb     c000f58d <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000f576:	52                   	push   edx
c000f577:	52                   	push   edx
c000f578:	56                   	push   esi
c000f579:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f580:	e8 bb 10 ff ff       	call   c0000640 <strcpy>
c000f585:	83 c4 10             	add    esp,0x10
c000f588:	e9 8a 00 00 00       	jmp    c000f617 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f58d:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f594:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f59b:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f59e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f5a0:	eb 75                	jmp    c000f617 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f5a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f5a6:	89 ef                	mov    edi,ebp
c000f5a8:	50                   	push   eax
c000f5a9:	c1 ff 1f             	sar    edi,0x1f
c000f5ac:	50                   	push   eax
c000f5ad:	57                   	push   edi
c000f5ae:	55                   	push   ebp
c000f5af:	e8 70 04 00 00       	call   c000fa24 <KeGetDigitsInNumber(long long)>
c000f5b4:	83 c4 10             	add    esp,0x10
c000f5b7:	48                   	dec    eax
c000f5b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f5bc:	75 1c                	jne    c000f5da <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000f5be:	83 f9 44             	cmp    ecx,0x44
c000f5c1:	75 09                	jne    c000f5cc <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000f5c3:	80 3d 20 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e120,0x0
c000f5ca:	eb 0c                	jmp    c000f5d8 <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000f5cc:	83 f9 4d             	cmp    ecx,0x4d
c000f5cf:	75 2b                	jne    c000f5fc <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f5d1:	80 3d 21 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e121,0x0
c000f5d8:	74 22                	je     c000f5fc <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f5da:	89 e8                	mov    eax,ebp
c000f5dc:	b9 0a 00 00 00       	mov    ecx,0xa
c000f5e1:	99                   	cdq    
c000f5e2:	f7 f9                	idiv   ecx
c000f5e4:	89 d5                	mov    ebp,edx
c000f5e6:	99                   	cdq    
c000f5e7:	f7 f9                	idiv   ecx
c000f5e9:	83 c2 30             	add    edx,0x30
c000f5ec:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f5f0:	8d 55 30             	lea    edx,[ebp+0x30]
c000f5f3:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f5f7:	e9 0d ff ff ff       	jmp    c000f509 <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000f5fc:	89 e8                	mov    eax,ebp
c000f5fe:	b9 0a 00 00 00       	mov    ecx,0xa
c000f603:	99                   	cdq    
c000f604:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f609:	f7 f9                	idiv   ecx
c000f60b:	83 c2 30             	add    edx,0x30
c000f60e:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f612:	e9 f7 fe ff ff       	jmp    c000f50e <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f617:	81 c4 ac 00 00 00    	add    esp,0xac
c000f61d:	5b                   	pop    ebx
c000f61e:	5e                   	pop    esi
c000f61f:	5f                   	pop    edi
c000f620:	5d                   	pop    ebp
c000f621:	c3                   	ret    

c000f622 <KeFormatShortDate(char*, int, int, int, int)>:
c000f622:	83 ec 14             	sub    esp,0x14
c000f625:	6a 00                	push   0x0
c000f627:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f633:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f637:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f63b:	e8 f2 fd ff ff       	call   c000f432 <KeFormatDate(char*, int, int, int, int, bool)>
c000f640:	83 c4 2c             	add    esp,0x2c
c000f643:	c3                   	ret    

c000f644 <KeFormatLongDate(char*, int, int, int, int)>:
c000f644:	83 ec 14             	sub    esp,0x14
c000f647:	6a 01                	push   0x1
c000f649:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f64d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f651:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f655:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f659:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f65d:	e8 d0 fd ff ff       	call   c000f432 <KeFormatDate(char*, int, int, int, int, bool)>
c000f662:	83 c4 2c             	add    esp,0x2c
c000f665:	c3                   	ret    

c000f666 <KeSetLocale(klocale_t)>:
c000f666:	57                   	push   edi
c000f667:	b9 09 00 00 00       	mov    ecx,0x9
c000f66c:	56                   	push   esi
c000f66d:	bf 00 e1 02 c0       	mov    edi,0xc002e100
c000f672:	fc                   	cld    
c000f673:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f677:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f679:	5e                   	pop    esi
c000f67a:	5f                   	pop    edi
c000f67b:	c3                   	ret    

c000f67c <KeInitialiseLocale()>:
c000f67c:	57                   	push   edi
c000f67d:	56                   	push   esi
c000f67e:	83 ec 3c             	sub    esp,0x3c
c000f681:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f689:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f691:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f699:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f6a1:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f6a8:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f6b0:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f6b8:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f6bf:	68 5a 3f 02 c0       	push   0xc0023f5a
c000f6c4:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f6c8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f6cc:	50                   	push   eax
c000f6cd:	e8 6e 0f ff ff       	call   c0000640 <strcpy>
c000f6d2:	83 ec 20             	sub    esp,0x20
c000f6d5:	b9 09 00 00 00       	mov    ecx,0x9
c000f6da:	fc                   	cld    
c000f6db:	89 e7                	mov    edi,esp
c000f6dd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f6df:	e8 82 ff ff ff       	call   c000f666 <KeSetLocale(klocale_t)>
c000f6e4:	83 c4 64             	add    esp,0x64
c000f6e7:	5e                   	pop    esi
c000f6e8:	5f                   	pop    edi
c000f6e9:	c3                   	ret    

c000f6ea <KeFormatCurrency(char*, int, long long, long long)>:
c000f6ea:	c3                   	ret    

c000f6eb <KeFormatCurrency(char*, int, double)>:
c000f6eb:	c3                   	ret    

c000f6ec <KeFormatNumber(char*, long long, long long)>:
c000f6ec:	c3                   	ret    

c000f6ed <KeFormatNumber(char*, double)>:
c000f6ed:	c3                   	ret    
c000f6ee:	66 90                	xchg   ax,ax

c000f6f0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f6f0:	55                   	push   ebp
c000f6f1:	57                   	push   edi
c000f6f2:	56                   	push   esi
c000f6f3:	53                   	push   ebx
c000f6f4:	83 ec 5c             	sub    esp,0x5c
c000f6f7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f6fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f6ff:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f703:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f707:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f70b:	bb af 2c 02 c0       	mov    ebx,0xc0022caf
c000f710:	bd 11 00 00 00       	mov    ebp,0x11
c000f715:	89 d0                	mov    eax,edx
c000f717:	83 e0 01             	and    eax,0x1
c000f71a:	74 10                	je     c000f72c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000f71c:	8a 03                	mov    al,BYTE PTR [ebx]
c000f71e:	88 02                	mov    BYTE PTR [edx],al
c000f720:	8d 52 01             	lea    edx,[edx+0x1]
c000f723:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f726:	83 ed 01             	sub    ebp,0x1
c000f729:	8d 76 00             	lea    esi,[esi+0x0]
c000f72c:	89 d0                	mov    eax,edx
c000f72e:	83 e0 02             	and    eax,0x2
c000f731:	74 11                	je     c000f744 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f733:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f736:	66 89 02             	mov    WORD PTR [edx],ax
c000f739:	8d 52 02             	lea    edx,[edx+0x2]
c000f73c:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f73f:	83 ed 02             	sub    ebp,0x2
c000f742:	66 90                	xchg   ax,ax
c000f744:	89 e8                	mov    eax,ebp
c000f746:	c1 e8 02             	shr    eax,0x2
c000f749:	fc                   	cld    
c000f74a:	89 d7                	mov    edi,edx
c000f74c:	89 de                	mov    esi,ebx
c000f74e:	89 c1                	mov    ecx,eax
c000f750:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f752:	89 f3                	mov    ebx,esi
c000f754:	89 fa                	mov    edx,edi
c000f756:	b9 00 00 00 00       	mov    ecx,0x0
c000f75b:	89 e8                	mov    eax,ebp
c000f75d:	83 e0 02             	and    eax,0x2
c000f760:	74 0e                	je     c000f770 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000f762:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f766:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f76a:	8d 41 02             	lea    eax,[ecx+0x2]
c000f76d:	89 c1                	mov    ecx,eax
c000f76f:	90                   	nop
c000f770:	89 e8                	mov    eax,ebp
c000f772:	83 e0 01             	and    eax,0x1
c000f775:	74 09                	je     c000f780 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000f777:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f77a:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f77d:	8d 76 00             	lea    esi,[esi+0x0]
c000f780:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f784:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f788:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f78c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f790:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f794:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f798:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f79d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f7a1:	89 c2                	mov    edx,eax
c000f7a3:	c1 fa 1f             	sar    edx,0x1f
c000f7a6:	52                   	push   edx
c000f7a7:	50                   	push   eax
c000f7a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f7ac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f7b0:	e8 2f 21 01 00       	call   c00218e4 <__udivdi3>
c000f7b5:	83 c4 10             	add    esp,0x10
c000f7b8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f7bc:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f7c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f7c4:	80 f4 00             	xor    ah,0x0
c000f7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f7cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f7cf:	80 f4 00             	xor    ah,0x0
c000f7d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f7d6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f7da:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f7de:	89 f8                	mov    eax,edi
c000f7e0:	09 f0                	or     eax,esi
c000f7e2:	74 04                	je     c000f7e8 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000f7e4:	eb b2                	jmp    c000f798 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000f7e6:	66 90                	xchg   ax,ax
c000f7e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f7ec:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f7ef:	90                   	nop
c000f7f0:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f7f4:	89 c1                	mov    ecx,eax
c000f7f6:	89 c3                	mov    ebx,eax
c000f7f8:	c1 fb 1f             	sar    ebx,0x1f
c000f7fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f7ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f803:	53                   	push   ebx
c000f804:	51                   	push   ecx
c000f805:	52                   	push   edx
c000f806:	50                   	push   eax
c000f807:	e8 d8 21 01 00       	call   c00219e4 <__umoddi3>
c000f80c:	83 c4 10             	add    esp,0x10
c000f80f:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f814:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f818:	01 c8                	add    eax,ecx
c000f81a:	8a 10                	mov    dl,BYTE PTR [eax]
c000f81c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f820:	88 10                	mov    BYTE PTR [eax],dl
c000f822:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f826:	89 c2                	mov    edx,eax
c000f828:	c1 fa 1f             	sar    edx,0x1f
c000f82b:	52                   	push   edx
c000f82c:	50                   	push   eax
c000f82d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f831:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f835:	e8 aa 20 01 00       	call   c00218e4 <__udivdi3>
c000f83a:	83 c4 10             	add    esp,0x10
c000f83d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f841:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f845:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f849:	80 f4 00             	xor    ah,0x0
c000f84c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f854:	80 f4 00             	xor    ah,0x0
c000f857:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f85b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f85f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f863:	89 f8                	mov    eax,edi
c000f865:	09 f0                	or     eax,esi
c000f867:	74 03                	je     c000f86c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000f869:	eb 85                	jmp    c000f7f0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000f86b:	90                   	nop
c000f86c:	90                   	nop
c000f86d:	83 c4 5c             	add    esp,0x5c
c000f870:	5b                   	pop    ebx
c000f871:	5e                   	pop    esi
c000f872:	5f                   	pop    edi
c000f873:	5d                   	pop    ebp
c000f874:	c3                   	ret    
c000f875:	8d 76 00             	lea    esi,[esi+0x0]

c000f878 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f878:	55                   	push   ebp
c000f879:	57                   	push   edi
c000f87a:	56                   	push   esi
c000f87b:	53                   	push   ebx
c000f87c:	83 ec 5c             	sub    esp,0x5c
c000f87f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f883:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f887:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f88b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f88f:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f893:	bb af 2c 02 c0       	mov    ebx,0xc0022caf
c000f898:	bd 11 00 00 00       	mov    ebp,0x11
c000f89d:	89 d0                	mov    eax,edx
c000f89f:	83 e0 01             	and    eax,0x1
c000f8a2:	74 10                	je     c000f8b4 <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000f8a4:	8a 03                	mov    al,BYTE PTR [ebx]
c000f8a6:	88 02                	mov    BYTE PTR [edx],al
c000f8a8:	8d 52 01             	lea    edx,[edx+0x1]
c000f8ab:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f8ae:	83 ed 01             	sub    ebp,0x1
c000f8b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8b4:	89 d0                	mov    eax,edx
c000f8b6:	83 e0 02             	and    eax,0x2
c000f8b9:	74 11                	je     c000f8cc <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000f8bb:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f8be:	66 89 02             	mov    WORD PTR [edx],ax
c000f8c1:	8d 52 02             	lea    edx,[edx+0x2]
c000f8c4:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f8c7:	83 ed 02             	sub    ebp,0x2
c000f8ca:	66 90                	xchg   ax,ax
c000f8cc:	89 e8                	mov    eax,ebp
c000f8ce:	c1 e8 02             	shr    eax,0x2
c000f8d1:	fc                   	cld    
c000f8d2:	89 d7                	mov    edi,edx
c000f8d4:	89 de                	mov    esi,ebx
c000f8d6:	89 c1                	mov    ecx,eax
c000f8d8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f8da:	89 f3                	mov    ebx,esi
c000f8dc:	89 fa                	mov    edx,edi
c000f8de:	b9 00 00 00 00       	mov    ecx,0x0
c000f8e3:	89 e8                	mov    eax,ebp
c000f8e5:	83 e0 02             	and    eax,0x2
c000f8e8:	74 0e                	je     c000f8f8 <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000f8ea:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f8ee:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f8f2:	8d 41 02             	lea    eax,[ecx+0x2]
c000f8f5:	89 c1                	mov    ecx,eax
c000f8f7:	90                   	nop
c000f8f8:	89 e8                	mov    eax,ebp
c000f8fa:	83 e0 01             	and    eax,0x1
c000f8fd:	74 09                	je     c000f908 <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000f8ff:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f902:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f905:	8d 76 00             	lea    esi,[esi+0x0]
c000f908:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f90c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f910:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f915:	79 1d                	jns    c000f934 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f917:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000f91b:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000f920:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000f924:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f928:	8d 50 01             	lea    edx,[eax+0x1]
c000f92b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000f92f:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f932:	66 90                	xchg   ax,ax
c000f934:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f938:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f93c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f940:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f944:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f949:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f94d:	89 c2                	mov    edx,eax
c000f94f:	c1 fa 1f             	sar    edx,0x1f
c000f952:	52                   	push   edx
c000f953:	50                   	push   eax
c000f954:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f958:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f95c:	e8 83 1f 01 00       	call   c00218e4 <__udivdi3>
c000f961:	83 c4 10             	add    esp,0x10
c000f964:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f968:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f96c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f970:	80 f4 00             	xor    ah,0x0
c000f973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f977:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f97b:	80 f4 00             	xor    ah,0x0
c000f97e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f982:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f986:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f98a:	89 f8                	mov    eax,edi
c000f98c:	09 f0                	or     eax,esi
c000f98e:	74 04                	je     c000f994 <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000f990:	eb b2                	jmp    c000f944 <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000f992:	66 90                	xchg   ax,ax
c000f994:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f998:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f99b:	90                   	nop
c000f99c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f9a0:	89 c1                	mov    ecx,eax
c000f9a2:	89 c3                	mov    ebx,eax
c000f9a4:	c1 fb 1f             	sar    ebx,0x1f
c000f9a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f9ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f9af:	53                   	push   ebx
c000f9b0:	51                   	push   ecx
c000f9b1:	52                   	push   edx
c000f9b2:	50                   	push   eax
c000f9b3:	e8 ac 1d 01 00       	call   c0021764 <__moddi3>
c000f9b8:	83 c4 10             	add    esp,0x10
c000f9bb:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f9c0:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f9c4:	01 c8                	add    eax,ecx
c000f9c6:	8a 10                	mov    dl,BYTE PTR [eax]
c000f9c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f9cc:	88 10                	mov    BYTE PTR [eax],dl
c000f9ce:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f9d2:	89 c2                	mov    edx,eax
c000f9d4:	c1 fa 1f             	sar    edx,0x1f
c000f9d7:	52                   	push   edx
c000f9d8:	50                   	push   eax
c000f9d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f9dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f9e1:	e8 32 1c 01 00       	call   c0021618 <__divdi3>
c000f9e6:	83 c4 10             	add    esp,0x10
c000f9e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f9ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f9f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f9f5:	80 f4 00             	xor    ah,0x0
c000f9f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f9fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fa00:	80 f4 00             	xor    ah,0x0
c000fa03:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000fa07:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa0b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fa0f:	89 f8                	mov    eax,edi
c000fa11:	09 f0                	or     eax,esi
c000fa13:	74 03                	je     c000fa18 <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c000fa15:	eb 85                	jmp    c000f99c <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c000fa17:	90                   	nop
c000fa18:	90                   	nop
c000fa19:	83 c4 5c             	add    esp,0x5c
c000fa1c:	5b                   	pop    ebx
c000fa1d:	5e                   	pop    esi
c000fa1e:	5f                   	pop    edi
c000fa1f:	5d                   	pop    ebp
c000fa20:	c3                   	ret    
c000fa21:	8d 76 00             	lea    esi,[esi+0x0]

c000fa24 <KeGetDigitsInNumber(long long)>:
c000fa24:	56                   	push   esi
c000fa25:	53                   	push   ebx
c000fa26:	83 ec 24             	sub    esp,0x24
c000fa29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000fa41:	8d 76 00             	lea    esi,[esi+0x0]
c000fa44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa48:	80 f4 00             	xor    ah,0x0
c000fa4b:	89 c3                	mov    ebx,eax
c000fa4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa51:	80 f4 00             	xor    ah,0x0
c000fa54:	89 c6                	mov    esi,eax
c000fa56:	89 f0                	mov    eax,esi
c000fa58:	09 d8                	or     eax,ebx
c000fa5a:	74 28                	je     c000fa84 <KeGetDigitsInNumber(long long)+0x60>
c000fa5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fa64:	6a 00                	push   0x0
c000fa66:	6a 0a                	push   0xa
c000fa68:	52                   	push   edx
c000fa69:	50                   	push   eax
c000fa6a:	e8 a9 1b 01 00       	call   c0021618 <__divdi3>
c000fa6f:	83 c4 10             	add    esp,0x10
c000fa72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fa7a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000fa7f:	eb c3                	jmp    c000fa44 <KeGetDigitsInNumber(long long)+0x20>
c000fa81:	8d 76 00             	lea    esi,[esi+0x0]
c000fa84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fa88:	83 c4 24             	add    esp,0x24
c000fa8b:	5b                   	pop    ebx
c000fa8c:	5e                   	pop    esi
c000fa8d:	c3                   	ret    
c000fa8e:	66 90                	xchg   ax,ax

c000fa90 <KeItoa(unsigned long long, char*)>:
c000fa90:	83 ec 1c             	sub    esp,0x1c
c000fa93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000faa3:	6a 0a                	push   0xa
c000faa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000faa9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000faad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fab1:	e8 3a fc ff ff       	call   c000f6f0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000fab6:	83 c4 10             	add    esp,0x10
c000fab9:	90                   	nop
c000faba:	83 c4 1c             	add    esp,0x1c
c000fabd:	c3                   	ret    
c000fabe:	66 90                	xchg   ax,ax

c000fac0 <KeItoa(long long, char*)>:
c000fac0:	83 ec 1c             	sub    esp,0x1c
c000fac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fac7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000facb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000facf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fad3:	6a 0a                	push   0xa
c000fad5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fad9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fadd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fae1:	e8 92 fd ff ff       	call   c000f878 <KeBasedSignedIntegerToString(long long, char*, int)>
c000fae6:	83 c4 10             	add    esp,0x10
c000fae9:	90                   	nop
c000faea:	83 c4 1c             	add    esp,0x1c
c000faed:	c3                   	ret    
c000faee:	66 90                	xchg   ax,ax

c000faf0 <KeXtoa(unsigned long long, char*)>:
c000faf0:	83 ec 1c             	sub    esp,0x1c
c000faf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fafb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000faff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb03:	6a 10                	push   0x10
c000fb05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fb09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb11:	e8 da fb ff ff       	call   c000f6f0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000fb16:	83 c4 10             	add    esp,0x10
c000fb19:	90                   	nop
c000fb1a:	83 c4 1c             	add    esp,0x1c
c000fb1d:	c3                   	ret    

c000fb1e <sbrk>:
c000fb1e:	55                   	push   ebp
c000fb1f:	57                   	push   edi
c000fb20:	56                   	push   esi
c000fb21:	53                   	push   ebx
c000fb22:	83 ec 1c             	sub    esp,0x1c
c000fb25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fb29:	85 c0                	test   eax,eax
c000fb2b:	74 61                	je     c000fb8e <sbrk+0x70>
c000fb2d:	78 66                	js     c000fb95 <sbrk+0x77>
c000fb2f:	8b 15 70 66 02 c0    	mov    edx,DWORD PTR ds:0xc0026670
c000fb35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fb39:	05 ff 0f 00 00       	add    eax,0xfff
c000fb3e:	89 c5                	mov    ebp,eax
c000fb40:	78 6b                	js     c000fbad <sbrk+0x8f>
c000fb42:	c1 fd 0c             	sar    ebp,0xc
c000fb45:	bb 00 00 00 00       	mov    ebx,0x0
c000fb4a:	8b 35 50 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e250
c000fb50:	8b 3d 70 66 02 c0    	mov    edi,DWORD PTR ds:0xc0026670
c000fb56:	e8 ab 06 00 00       	call   c0010206 <Phys::allocatePage()>
c000fb5b:	68 01 04 00 00       	push   0x401
c000fb60:	57                   	push   edi
c000fb61:	50                   	push   eax
c000fb62:	56                   	push   esi
c000fb63:	e8 78 40 00 00       	call   c0013be0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000fb68:	81 05 70 66 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026670,0x1000
c000fb72:	83 c3 01             	add    ebx,0x1
c000fb75:	83 c4 10             	add    esp,0x10
c000fb78:	39 dd                	cmp    ebp,ebx
c000fb7a:	75 ce                	jne    c000fb4a <sbrk+0x2c>
c000fb7c:	0f 20 d8             	mov    eax,cr3
c000fb7f:	0f 22 d8             	mov    cr3,eax
c000fb82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb86:	83 c4 1c             	add    esp,0x1c
c000fb89:	5b                   	pop    ebx
c000fb8a:	5e                   	pop    esi
c000fb8b:	5f                   	pop    edi
c000fb8c:	5d                   	pop    ebp
c000fb8d:	c3                   	ret    
c000fb8e:	a1 70 66 02 c0       	mov    eax,ds:0xc0026670
c000fb93:	eb f1                	jmp    c000fb86 <sbrk+0x68>
c000fb95:	83 ec 08             	sub    esp,0x8
c000fb98:	50                   	push   eax
c000fb99:	68 60 3f 02 c0       	push   0xc0023f60
c000fb9e:	e8 c1 73 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fba3:	83 c4 10             	add    esp,0x10
c000fba6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fbab:	eb d9                	jmp    c000fb86 <sbrk+0x68>
c000fbad:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000fbb3:	eb 8d                	jmp    c000fb42 <sbrk+0x24>

c000fbb5 <sbrk_thunk>:
c000fbb5:	83 ec 0c             	sub    esp,0xc
c000fbb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbbc:	3d ff bf 00 00       	cmp    eax,0xbfff
c000fbc1:	7f 10                	jg     c000fbd3 <sbrk_thunk+0x1e>
c000fbc3:	83 ec 0c             	sub    esp,0xc
c000fbc6:	50                   	push   eax
c000fbc7:	e8 52 ff ff ff       	call   c000fb1e <sbrk>
c000fbcc:	83 c4 10             	add    esp,0x10
c000fbcf:	83 c4 0c             	add    esp,0xc
c000fbd2:	c3                   	ret    
c000fbd3:	83 ec 08             	sub    esp,0x8
c000fbd6:	50                   	push   eax
c000fbd7:	68 90 3f 02 c0       	push   0xc0023f90
c000fbdc:	e8 83 73 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fbe1:	83 c4 10             	add    esp,0x10
c000fbe4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fbe9:	eb e4                	jmp    c000fbcf <sbrk_thunk+0x1a>

c000fbeb <mmap>:
c000fbeb:	55                   	push   ebp
c000fbec:	57                   	push   edi
c000fbed:	56                   	push   esi
c000fbee:	53                   	push   ebx
c000fbef:	83 ec 18             	sub    esp,0x18
c000fbf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fbf6:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fbfc:	89 fb                	mov    ebx,edi
c000fbfe:	c1 eb 0c             	shr    ebx,0xc
c000fc01:	53                   	push   ebx
c000fc02:	e8 f6 38 00 00       	call   c00134fd <Virt::allocateKernelVirtualPages(int)>
c000fc07:	89 c5                	mov    ebp,eax
c000fc09:	83 c4 10             	add    esp,0x10
c000fc0c:	85 db                	test   ebx,ebx
c000fc0e:	7e 2f                	jle    c000fc3f <mmap+0x54>
c000fc10:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000fc16:	01 c7                	add    edi,eax
c000fc18:	89 c3                	mov    ebx,eax
c000fc1a:	8b 35 50 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e250
c000fc20:	e8 e1 05 00 00       	call   c0010206 <Phys::allocatePage()>
c000fc25:	68 01 04 00 00       	push   0x401
c000fc2a:	53                   	push   ebx
c000fc2b:	50                   	push   eax
c000fc2c:	56                   	push   esi
c000fc2d:	e8 ae 3f 00 00       	call   c0013be0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000fc32:	81 c3 00 10 00 00    	add    ebx,0x1000
c000fc38:	83 c4 10             	add    esp,0x10
c000fc3b:	39 fb                	cmp    ebx,edi
c000fc3d:	75 db                	jne    c000fc1a <mmap+0x2f>
c000fc3f:	89 e8                	mov    eax,ebp
c000fc41:	83 c4 0c             	add    esp,0xc
c000fc44:	5b                   	pop    ebx
c000fc45:	5e                   	pop    esi
c000fc46:	5f                   	pop    edi
c000fc47:	5d                   	pop    ebp
c000fc48:	c3                   	ret    

c000fc49 <munmap>:
c000fc49:	83 ec 18             	sub    esp,0x18
c000fc4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc50:	e8 b0 3b 00 00       	call   c0013805 <Virt::freeKernelVirtualPages(unsigned long)>
c000fc55:	b8 00 00 00 00       	mov    eax,0x0
c000fc5a:	83 c4 1c             	add    esp,0x1c
c000fc5d:	c3                   	ret    

c000fc5e <liballoc_lock()>:
c000fc5e:	fa                   	cli    
c000fc5f:	83 05 30 ea 02 c0 01 	add    DWORD PTR ds:0xc002ea30,0x1
c000fc66:	b8 00 00 00 00       	mov    eax,0x0
c000fc6b:	c3                   	ret    

c000fc6c <liballoc_unlock()>:
c000fc6c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fc74:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000fc7b:	75 01                	jne    c000fc7e <liballoc_unlock()+0x12>
c000fc7d:	fb                   	sti    
c000fc7e:	b8 00 00 00 00       	mov    eax,0x0
c000fc83:	c3                   	ret    

c000fc84 <liballoc_alloc(int)>:
c000fc84:	83 ec 10             	sub    esp,0x10
c000fc87:	6a 01                	push   0x1
c000fc89:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc8d:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000fc93:	e8 4c 40 00 00       	call   c0013ce4 <VAS::allocatePages(int, int)>
c000fc98:	83 c4 1c             	add    esp,0x1c
c000fc9b:	c3                   	ret    

c000fc9c <liballoc_free(void*, int)>:
c000fc9c:	83 ec 14             	sub    esp,0x14
c000fc9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fca3:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000fca9:	e8 94 3c 00 00       	call   c0013942 <VAS::freeAllocatedPages(unsigned long)>
c000fcae:	b8 00 00 00 00       	mov    eax,0x0
c000fcb3:	83 c4 1c             	add    esp,0x1c
c000fcb6:	c3                   	ret    

c000fcb7 <realloc>:
c000fcb7:	83 ec 14             	sub    esp,0x14
c000fcba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcc2:	e8 90 1a ff ff       	call   c0001757 <dlrealloc>
c000fcc7:	83 c4 1c             	add    esp,0x1c
c000fcca:	c3                   	ret    

c000fccb <malloc>:
c000fccb:	83 ec 18             	sub    esp,0x18
c000fcce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcd2:	e8 43 15 ff ff       	call   c000121a <dlmalloc>
c000fcd7:	83 c4 1c             	add    esp,0x1c
c000fcda:	c3                   	ret    

c000fcdb <free>:
c000fcdb:	83 ec 18             	sub    esp,0x18
c000fcde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fce2:	e8 6c 10 ff ff       	call   c0000d53 <dlfree>
c000fce7:	83 c4 1c             	add    esp,0x1c
c000fcea:	c3                   	ret    

c000fceb <rfree>:
c000fceb:	83 ec 18             	sub    esp,0x18
c000fcee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcf2:	e8 5c 10 ff ff       	call   c0000d53 <dlfree>
c000fcf7:	83 c4 1c             	add    esp,0x1c
c000fcfa:	c3                   	ret    

c000fcfb <calloc>:
c000fcfb:	56                   	push   esi
c000fcfc:	53                   	push   ebx
c000fcfd:	83 ec 10             	sub    esp,0x10
c000fd00:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fd04:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000fd09:	53                   	push   ebx
c000fd0a:	e8 bc ff ff ff       	call   c000fccb <malloc>
c000fd0f:	89 c6                	mov    esi,eax
c000fd11:	83 c4 0c             	add    esp,0xc
c000fd14:	53                   	push   ebx
c000fd15:	6a 00                	push   0x0
c000fd17:	50                   	push   eax
c000fd18:	e8 d3 07 ff ff       	call   c00004f0 <memset>
c000fd1d:	89 f0                	mov    eax,esi
c000fd1f:	83 c4 14             	add    esp,0x14
c000fd22:	5b                   	pop    ebx
c000fd23:	5e                   	pop    esi
c000fd24:	c3                   	ret    
c000fd25:	66 90                	xchg   ax,ax
c000fd27:	90                   	nop

c000fd28 <KeMailboxTryPost(Mailbox*, void*)>:
c000fd28:	83 ec 10             	sub    esp,0x10
c000fd2b:	fa                   	cli    
c000fd2c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fd31:	83 c0 01             	add    eax,0x1
c000fd34:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fd39:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fd3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd45:	85 c0                	test   eax,eax
c000fd47:	75 23                	jne    c000fd6c <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000fd49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd4d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fd51:	89 10                	mov    DWORD PTR [eax],edx
c000fd53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd5a:	8d 50 01             	lea    edx,[eax+0x1]
c000fd5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd61:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fd64:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fd69:	8d 76 00             	lea    esi,[esi+0x0]
c000fd6c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fd74:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fd79:	85 c0                	test   eax,eax
c000fd7b:	75 03                	jne    c000fd80 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000fd7d:	fb                   	sti    
c000fd7e:	66 90                	xchg   ax,ax
c000fd80:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fd84:	83 c4 10             	add    esp,0x10
c000fd87:	c3                   	ret    

c000fd88 <KeMailboxTryGet(Mailbox*, void**)>:
c000fd88:	83 ec 10             	sub    esp,0x10
c000fd8b:	fa                   	cli    
c000fd8c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fd91:	83 c0 01             	add    eax,0x1
c000fd94:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fd99:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fd9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fda2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fda5:	83 f8 01             	cmp    eax,0x1
c000fda8:	75 22                	jne    c000fdcc <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000fdaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdae:	8b 10                	mov    edx,DWORD PTR [eax]
c000fdb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fdb4:	89 10                	mov    DWORD PTR [eax],edx
c000fdb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdbd:	8d 50 ff             	lea    edx,[eax-0x1]
c000fdc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fdc4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fdc7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fdcc:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fdd4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fdd9:	85 c0                	test   eax,eax
c000fddb:	75 03                	jne    c000fde0 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000fddd:	fb                   	sti    
c000fdde:	66 90                	xchg   ax,ax
c000fde0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fde4:	83 c4 10             	add    esp,0x10
c000fde7:	c3                   	ret    

c000fde8 <KeMailboxCreate()>:
c000fde8:	83 ec 1c             	sub    esp,0x1c
c000fdeb:	83 ec 0c             	sub    esp,0xc
c000fdee:	6a 08                	push   0x8
c000fdf0:	e8 d6 fe ff ff       	call   c000fccb <malloc>
c000fdf5:	83 c4 10             	add    esp,0x10
c000fdf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fdfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe00:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fe06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe0a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe15:	83 c4 1c             	add    esp,0x1c
c000fe18:	c3                   	ret    
c000fe19:	8d 76 00             	lea    esi,[esi+0x0]

c000fe1c <KeMailboxPost(Mailbox*, void*)>:
c000fe1c:	83 ec 1c             	sub    esp,0x1c
c000fe1f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fe24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe2c:	e8 f7 fe ff ff       	call   c000fd28 <KeMailboxTryPost(Mailbox*, void*)>
c000fe31:	83 c4 08             	add    esp,0x8
c000fe34:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fe38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fe3c:	83 f0 01             	xor    eax,0x1
c000fe3f:	0f b6 c0             	movzx  eax,al
c000fe42:	85 c0                	test   eax,eax
c000fe44:	74 26                	je     c000fe6c <KeMailboxPost(Mailbox*, void*)+0x50>
c000fe46:	fa                   	cli    
c000fe47:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fe4c:	83 c0 01             	add    eax,0x1
c000fe4f:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fe54:	e8 2f 71 00 00       	call   c0016f88 <schedule()>
c000fe59:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fe61:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fe66:	85 c0                	test   eax,eax
c000fe68:	75 02                	jne    c000fe6c <KeMailboxPost(Mailbox*, void*)+0x50>
c000fe6a:	fb                   	sti    
c000fe6b:	90                   	nop
c000fe6c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fe71:	85 c0                	test   eax,eax
c000fe73:	75 03                	jne    c000fe78 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fe75:	eb ad                	jmp    c000fe24 <KeMailboxPost(Mailbox*, void*)+0x8>
c000fe77:	90                   	nop
c000fe78:	90                   	nop
c000fe79:	83 c4 1c             	add    esp,0x1c
c000fe7c:	c3                   	ret    
c000fe7d:	8d 76 00             	lea    esi,[esi+0x0]

c000fe80 <KeMailboxGet(Mailbox*, void**)>:
c000fe80:	83 ec 1c             	sub    esp,0x1c
c000fe83:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fe88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe8c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe90:	e8 f3 fe ff ff       	call   c000fd88 <KeMailboxTryGet(Mailbox*, void**)>
c000fe95:	83 c4 08             	add    esp,0x8
c000fe98:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fe9c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fea0:	83 f0 01             	xor    eax,0x1
c000fea3:	0f b6 c0             	movzx  eax,al
c000fea6:	85 c0                	test   eax,eax
c000fea8:	74 26                	je     c000fed0 <KeMailboxGet(Mailbox*, void**)+0x50>
c000feaa:	fa                   	cli    
c000feab:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000feb0:	83 c0 01             	add    eax,0x1
c000feb3:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000feb8:	e8 cb 70 00 00       	call   c0016f88 <schedule()>
c000febd:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fec5:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000feca:	85 c0                	test   eax,eax
c000fecc:	75 02                	jne    c000fed0 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fece:	fb                   	sti    
c000fecf:	90                   	nop
c000fed0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fed5:	85 c0                	test   eax,eax
c000fed7:	75 03                	jne    c000fedc <KeMailboxGet(Mailbox*, void**)+0x5c>
c000fed9:	eb ad                	jmp    c000fe88 <KeMailboxGet(Mailbox*, void**)+0x8>
c000fedb:	90                   	nop
c000fedc:	90                   	nop
c000fedd:	83 c4 1c             	add    esp,0x1c
c000fee0:	c3                   	ret    
c000fee1:	8d 76 00             	lea    esi,[esi+0x0]

c000fee4 <KeMailboxDestroy(Mailbox*)>:
c000fee4:	83 ec 0c             	sub    esp,0xc
c000fee7:	83 ec 0c             	sub    esp,0xc
c000feea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feee:	e8 e8 fd ff ff       	call   c000fcdb <free>
c000fef3:	83 c4 10             	add    esp,0x10
c000fef6:	90                   	nop
c000fef7:	83 c4 0c             	add    esp,0xc
c000fefa:	c3                   	ret    

c000fefb <KeEntryPoint>:
c000fefb:	57                   	push   edi
c000fefc:	bf f9 03 00 00       	mov    edi,0x3f9
c000ff01:	56                   	push   esi
c000ff02:	89 fa                	mov    edx,edi
c000ff04:	53                   	push   ebx
c000ff05:	31 f6                	xor    esi,esi
c000ff07:	83 ec 2c             	sub    esp,0x2c
c000ff0a:	a1 00 05 00 00       	mov    eax,ds:0x500
c000ff0f:	a3 24 e1 02 c0       	mov    ds:0xc002e124,eax
c000ff14:	89 f0                	mov    eax,esi
c000ff16:	ee                   	out    dx,al
c000ff17:	bb fb 03 00 00       	mov    ebx,0x3fb
c000ff1c:	b0 80                	mov    al,0x80
c000ff1e:	89 da                	mov    edx,ebx
c000ff20:	ee                   	out    dx,al
c000ff21:	b1 03                	mov    cl,0x3
c000ff23:	ba f8 03 00 00       	mov    edx,0x3f8
c000ff28:	88 c8                	mov    al,cl
c000ff2a:	ee                   	out    dx,al
c000ff2b:	89 f0                	mov    eax,esi
c000ff2d:	89 fa                	mov    edx,edi
c000ff2f:	ee                   	out    dx,al
c000ff30:	88 c8                	mov    al,cl
c000ff32:	89 da                	mov    edx,ebx
c000ff34:	ee                   	out    dx,al
c000ff35:	b0 c7                	mov    al,0xc7
c000ff37:	ba fa 03 00 00       	mov    edx,0x3fa
c000ff3c:	ee                   	out    dx,al
c000ff3d:	b0 0b                	mov    al,0xb
c000ff3f:	ba fc 03 00 00       	mov    edx,0x3fc
c000ff44:	ee                   	out    dx,al
c000ff45:	68 9f 3f 02 c0       	push   0xc0023f9f
c000ff4a:	e8 15 70 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff4f:	e8 10 d3 ff ff       	call   c000d264 <KeDisplaySplashScreen()>
c000ff54:	a1 24 05 00 00       	mov    eax,ds:0x524
c000ff59:	05 ff 0f 00 00       	add    eax,0xfff
c000ff5e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ff63:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff66:	e8 2c 04 00 00       	call   c0010397 <Phys::physicalMemorySetup(unsigned int)>
c000ff6b:	e8 6b 37 00 00       	call   c00136db <Virt::virtualMemorySetup()>
c000ff70:	e8 39 d2 ff ff       	call   c000d1ae <KeInitialiseAtexit()>
c000ff75:	c7 04 24 b6 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fb6
c000ff7c:	e8 e3 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff81:	58                   	pop    eax
c000ff82:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ff86:	53                   	push   ebx
c000ff87:	e8 36 3a 00 00       	call   c00139c2 <VAS::VAS()>
c000ff8c:	c7 04 24 c6 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fc6
c000ff93:	89 1d 50 e2 02 c0    	mov    DWORD PTR ds:0xc002e250,ebx
c000ff99:	e8 c6 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff9e:	e8 5b 1b 01 00       	call   c0021afe <_init>
c000ffa3:	c7 04 24 da 3f 02 c0 	mov    DWORD PTR [esp],0xc0023fda
c000ffaa:	e8 b5 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ffaf:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ffb6:	e8 10 fd ff ff       	call   c000fccb <malloc>
c000ffbb:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffbe:	89 c6                	mov    esi,eax
c000ffc0:	e8 67 e3 ff ff       	call   c000e32c <Computer::Computer()>
c000ffc5:	5a                   	pop    edx
c000ffc6:	89 35 d0 c0 02 c0    	mov    DWORD PTR ds:0xc002c0d0,esi
c000ffcc:	59                   	pop    ecx
c000ffcd:	56                   	push   esi
c000ffce:	68 e9 3f 02 c0       	push   0xc0023fe9
c000ffd3:	e8 8c 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ffd8:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000ffdd:	8b 10                	mov    edx,DWORD PTR [eax]
c000ffdf:	53                   	push   ebx
c000ffe0:	6a 00                	push   0x0
c000ffe2:	6a 00                	push   0x0
c000ffe4:	50                   	push   eax
c000ffe5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ffe8:	83 c4 14             	add    esp,0x14
c000ffeb:	53                   	push   ebx
c000ffec:	e8 87 3a 00 00       	call   c0013a78 <VAS::~VAS()>
c000fff1:	83 c4 30             	add    esp,0x30
c000fff4:	5b                   	pop    ebx
c000fff5:	5e                   	pop    esi
c000fff6:	5f                   	pop    edi
c000fff7:	c3                   	ret    

c000fff8 <Mutex::Mutex()>:
c000fff8:	83 ec 0c             	sub    esp,0xc
c000fffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffff:	83 ec 08             	sub    esp,0x8
c0010002:	6a 01                	push   0x1
c0010004:	50                   	push   eax
c0010005:	e8 56 0c 00 00       	call   c0010c60 <Semaphore::Semaphore(int)>
c001000a:	83 c4 10             	add    esp,0x10
c001000d:	90                   	nop
c001000e:	83 c4 0c             	add    esp,0xc
c0010011:	c3                   	ret    

c0010012 <KePanic(char const*)>:
c0010012:	c6 05 28 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e128,0x1
c0010019:	e9 4b 9f 00 00       	jmp    c0019f69 <HalPanic(char const*)>

c001001e <Phys::allocateDMA(unsigned long)>:
c001001e:	55                   	push   ebp
c001001f:	31 ed                	xor    ebp,ebp
c0010021:	57                   	push   edi
c0010022:	56                   	push   esi
c0010023:	53                   	push   ebx
c0010024:	31 db                	xor    ebx,ebx
c0010026:	83 ec 1c             	sub    esp,0x1c
c0010029:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001002d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010035:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c001003b:	31 c0                	xor    eax,eax
c001003d:	c1 ef 0c             	shr    edi,0xc
c0010040:	eb 1b                	jmp    c001005d <Phys::allocateDMA(unsigned long)+0x3f>
c0010042:	85 c0                	test   eax,eax
c0010044:	75 06                	jne    c001004c <Phys::allocateDMA(unsigned long)+0x2e>
c0010046:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001004a:	89 dd                	mov    ebp,ebx
c001004c:	8d 70 01             	lea    esi,[eax+0x1]
c001004f:	39 f7                	cmp    edi,esi
c0010051:	74 37                	je     c001008a <Phys::allocateDMA(unsigned long)+0x6c>
c0010053:	89 f0                	mov    eax,esi
c0010055:	83 c3 01             	add    ebx,0x1
c0010058:	83 fb 0f             	cmp    ebx,0xf
c001005b:	7f 13                	jg     c0010070 <Phys::allocateDMA(unsigned long)+0x52>
c001005d:	80 bb 44 e1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd1ebc],0x0
c0010064:	74 dc                	je     c0010042 <Phys::allocateDMA(unsigned long)+0x24>
c0010066:	31 c0                	xor    eax,eax
c0010068:	83 c3 01             	add    ebx,0x1
c001006b:	83 fb 0f             	cmp    ebx,0xf
c001006e:	7e ed                	jle    c001005d <Phys::allocateDMA(unsigned long)+0x3f>
c0010070:	83 ec 0c             	sub    esp,0xc
c0010073:	68 00 40 02 c0       	push   0xc0024000
c0010078:	e8 95 ff ff ff       	call   c0010012 <KePanic(char const*)>
c001007d:	83 c4 10             	add    esp,0x10
c0010080:	31 c0                	xor    eax,eax
c0010082:	83 c4 1c             	add    esp,0x1c
c0010085:	5b                   	pop    ebx
c0010086:	5e                   	pop    esi
c0010087:	5f                   	pop    edi
c0010088:	5d                   	pop    ebp
c0010089:	c3                   	ret    
c001008a:	89 e9                	mov    ecx,ebp
c001008c:	c1 f9 04             	sar    ecx,0x4
c001008f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010093:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0010097:	89 ca                	mov    edx,ecx
c0010099:	83 ea 01             	sub    edx,0x1
c001009c:	79 03                	jns    c00100a1 <Phys::allocateDMA(unsigned long)+0x83>
c001009e:	8d 51 0e             	lea    edx,[ecx+0xe]
c00100a1:	c1 fa 04             	sar    edx,0x4
c00100a4:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00100a8:	74 08                	je     c00100b2 <Phys::allocateDMA(unsigned long)+0x94>
c00100aa:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00100ae:	31 c0                	xor    eax,eax
c00100b0:	eb b6                	jmp    c0010068 <Phys::allocateDMA(unsigned long)+0x4a>
c00100b2:	85 f6                	test   esi,esi
c00100b4:	74 17                	je     c00100cd <Phys::allocateDMA(unsigned long)+0xaf>
c00100b6:	8d 95 44 e1 02 c0    	lea    edx,[ebp-0x3ffd1ebc]
c00100bc:	8d 84 05 45 e1 02 c0 	lea    eax,[ebp+eax*1-0x3ffd1ebb]
c00100c3:	c6 02 01             	mov    BYTE PTR [edx],0x1
c00100c6:	83 c2 01             	add    edx,0x1
c00100c9:	39 d0                	cmp    eax,edx
c00100cb:	75 f6                	jne    c00100c3 <Phys::allocateDMA(unsigned long)+0xa5>
c00100cd:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c00100d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100d6:	01 f8                	add    eax,edi
c00100d8:	85 d2                	test   edx,edx
c00100da:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c00100df:	74 17                	je     c00100f8 <Phys::allocateDMA(unsigned long)+0xda>
c00100e1:	83 ec 0c             	sub    esp,0xc
c00100e4:	68 00 40 02 c0       	push   0xc0024000
c00100e9:	e8 24 ff ff ff       	call   c0010012 <KePanic(char const*)>
c00100ee:	83 c4 10             	add    esp,0x10
c00100f1:	89 f0                	mov    eax,esi
c00100f3:	e9 5d ff ff ff       	jmp    c0010055 <Phys::allocateDMA(unsigned long)+0x37>
c00100f8:	c1 e5 0c             	shl    ebp,0xc
c00100fb:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0010101:	e9 7c ff ff ff       	jmp    c0010082 <Phys::allocateDMA(unsigned long)+0x64>

c0010106 <Phys::freeDMA(unsigned long, unsigned long)>:
c0010106:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001010a:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0010110:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c0010115:	c1 ea 0c             	shr    edx,0xc
c0010118:	29 d0                	sub    eax,edx
c001011a:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c001011f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010123:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0010128:	c1 e8 0c             	shr    eax,0xc
c001012b:	85 d2                	test   edx,edx
c001012d:	74 11                	je     c0010140 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c001012f:	05 44 e1 02 c0       	add    eax,0xc002e144
c0010134:	01 c2                	add    edx,eax
c0010136:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0010139:	83 c0 01             	add    eax,0x1
c001013c:	39 d0                	cmp    eax,edx
c001013e:	75 f6                	jne    c0010136 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0010140:	c3                   	ret    

c0010141 <Phys::setPageState(unsigned long, bool)>:
c0010141:	57                   	push   edi
c0010142:	56                   	push   esi
c0010143:	8b 35 74 66 02 c0    	mov    esi,DWORD PTR ds:0xc0026674
c0010149:	53                   	push   ebx
c001014a:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c001014f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010153:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010157:	0f b6 c0             	movzx  eax,al
c001015a:	89 ca                	mov    edx,ecx
c001015c:	83 e1 07             	and    ecx,0x7
c001015f:	c1 ea 03             	shr    edx,0x3
c0010162:	d3 c3                	rol    ebx,cl
c0010164:	01 d6                	add    esi,edx
c0010166:	d3 e0                	shl    eax,cl
c0010168:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c001016b:	21 fb                	and    ebx,edi
c001016d:	88 1e                	mov    BYTE PTR [esi],bl
c001016f:	8b 1d 74 66 02 c0    	mov    ebx,DWORD PTR ds:0xc0026674
c0010175:	01 da                	add    edx,ebx
c0010177:	8a 0a                	mov    cl,BYTE PTR [edx]
c0010179:	09 c8                	or     eax,ecx
c001017b:	88 02                	mov    BYTE PTR [edx],al
c001017d:	5b                   	pop    ebx
c001017e:	5e                   	pop    esi
c001017f:	5f                   	pop    edi
c0010180:	c3                   	ret    

c0010181 <Phys::getPageState(unsigned long)>:
c0010181:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010185:	8b 15 74 66 02 c0    	mov    edx,DWORD PTR ds:0xc0026674
c001018b:	89 c8                	mov    eax,ecx
c001018d:	83 e1 07             	and    ecx,0x7
c0010190:	c1 e8 03             	shr    eax,0x3
c0010193:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0010197:	d3 f8                	sar    eax,cl
c0010199:	83 e0 01             	and    eax,0x1
c001019c:	c3                   	ret    

c001019d <Phys::freePage(unsigned long)>:
c001019d:	53                   	push   ebx
c001019e:	83 ec 08             	sub    esp,0x8
c00101a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101a5:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00101ab:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00101b1:	76 41                	jbe    c00101f4 <Phys::freePage(unsigned long)+0x57>
c00101b3:	c1 e8 0c             	shr    eax,0xc
c00101b6:	50                   	push   eax
c00101b7:	89 c3                	mov    ebx,eax
c00101b9:	e8 c3 ff ff ff       	call   c0010181 <Phys::getPageState(unsigned long)>
c00101be:	5a                   	pop    edx
c00101bf:	84 c0                	test   al,al
c00101c1:	74 20                	je     c00101e3 <Phys::freePage(unsigned long)+0x46>
c00101c3:	83 ec 08             	sub    esp,0x8
c00101c6:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c00101cb:	6a 00                	push   0x0
c00101cd:	83 e8 01             	sub    eax,0x1
c00101d0:	53                   	push   ebx
c00101d1:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c00101d6:	e8 66 ff ff ff       	call   c0010141 <Phys::setPageState(unsigned long, bool)>
c00101db:	83 c4 10             	add    esp,0x10
c00101de:	83 c4 08             	add    esp,0x8
c00101e1:	5b                   	pop    ebx
c00101e2:	c3                   	ret    
c00101e3:	c7 44 24 10 05 41 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024105
c00101eb:	83 c4 08             	add    esp,0x8
c00101ee:	5b                   	pop    ebx
c00101ef:	e9 1e fe ff ff       	jmp    c0010012 <KePanic(char const*)>
c00101f4:	68 00 10 00 00       	push   0x1000
c00101f9:	50                   	push   eax
c00101fa:	e8 07 ff ff ff       	call   c0010106 <Phys::freeDMA(unsigned long, unsigned long)>
c00101ff:	59                   	pop    ecx
c0010200:	5b                   	pop    ebx
c0010201:	83 c4 08             	add    esp,0x8
c0010204:	5b                   	pop    ebx
c0010205:	c3                   	ret    

c0010206 <Phys::allocatePage()>:
c0010206:	56                   	push   esi
c0010207:	53                   	push   ebx
c0010208:	83 ec 14             	sub    esp,0x14
c001020b:	8b 35 30 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e130
c0010211:	89 f3                	mov    ebx,esi
c0010213:	eb 0a                	jmp    c001021f <Phys::allocatePage()+0x19>
c0010215:	89 1d 30 e1 02 c0    	mov    DWORD PTR ds:0xc002e130,ebx
c001021b:	39 de                	cmp    esi,ebx
c001021d:	74 26                	je     c0010245 <Phys::allocatePage()+0x3f>
c001021f:	53                   	push   ebx
c0010220:	e8 5c ff ff ff       	call   c0010181 <Phys::getPageState(unsigned long)>
c0010225:	59                   	pop    ecx
c0010226:	84 c0                	test   al,al
c0010228:	74 67                	je     c0010291 <Phys::allocatePage()+0x8b>
c001022a:	83 c3 01             	add    ebx,0x1
c001022d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010233:	75 e0                	jne    c0010215 <Phys::allocatePage()+0xf>
c0010235:	31 db                	xor    ebx,ebx
c0010237:	c7 05 30 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e130,0x0
c0010241:	39 de                	cmp    esi,ebx
c0010243:	75 da                	jne    c001021f <Phys::allocatePage()+0x19>
c0010245:	83 ec 0c             	sub    esp,0xc
c0010248:	a0 54 e1 02 c0       	mov    al,ds:0xc002e154
c001024d:	83 f0 01             	xor    eax,0x1
c0010250:	a2 54 e1 02 c0       	mov    ds:0xc002e154,al
c0010255:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001025a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001025d:	8b 88 72 05 00 00    	mov    ecx,DWORD PTR [eax+0x572]
c0010263:	51                   	push   ecx
c0010264:	e8 bf 44 00 00       	call   c0014728 <VAS::scanForEviction()>
c0010269:	83 c4 10             	add    esp,0x10
c001026c:	85 c0                	test   eax,eax
c001026e:	75 48                	jne    c00102b8 <Phys::allocatePage()+0xb2>
c0010270:	83 ec 0c             	sub    esp,0xc
c0010273:	68 28 40 02 c0       	push   0xc0024028
c0010278:	e8 95 fd ff ff       	call   c0010012 <KePanic(char const*)>
c001027d:	83 c4 10             	add    esp,0x10
c0010280:	8b 1d 30 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e130
c0010286:	53                   	push   ebx
c0010287:	e8 f5 fe ff ff       	call   c0010181 <Phys::getPageState(unsigned long)>
c001028c:	59                   	pop    ecx
c001028d:	84 c0                	test   al,al
c001028f:	75 99                	jne    c001022a <Phys::allocatePage()+0x24>
c0010291:	6a 01                	push   0x1
c0010293:	53                   	push   ebx
c0010294:	e8 a8 fe ff ff       	call   c0010141 <Phys::setPageState(unsigned long, bool)>
c0010299:	8b 1d 3c e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e13c
c001029f:	a1 30 e1 02 c0       	mov    eax,ds:0xc002e130
c00102a4:	83 c3 01             	add    ebx,0x1
c00102a7:	5e                   	pop    esi
c00102a8:	89 1d 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,ebx
c00102ae:	c1 e0 0c             	shl    eax,0xc
c00102b1:	5a                   	pop    edx
c00102b2:	83 c4 14             	add    esp,0x14
c00102b5:	5b                   	pop    ebx
c00102b6:	5e                   	pop    esi
c00102b7:	c3                   	ret    
c00102b8:	83 ec 08             	sub    esp,0x8
c00102bb:	8b 15 3c e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e13c
c00102c1:	6a 01                	push   0x1
c00102c3:	83 c2 01             	add    edx,0x1
c00102c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102ca:	89 15 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,edx
c00102d0:	89 c2                	mov    edx,eax
c00102d2:	c1 ea 0c             	shr    edx,0xc
c00102d5:	52                   	push   edx
c00102d6:	e8 66 fe ff ff       	call   c0010141 <Phys::setPageState(unsigned long, bool)>
c00102db:	83 c4 10             	add    esp,0x10
c00102de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102e2:	eb ce                	jmp    c00102b2 <Phys::allocatePage()+0xac>

c00102e4 <Phys::allocateContiguousPages(int)>:
c00102e4:	57                   	push   edi
c00102e5:	56                   	push   esi
c00102e6:	53                   	push   ebx
c00102e7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00102eb:	fa                   	cli    
c00102ec:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00102f2:	83 ec 0c             	sub    esp,0xc
c00102f5:	83 c2 01             	add    edx,0x1
c00102f8:	68 58 40 02 c0       	push   0xc0024058
c00102fd:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c0010303:	31 db                	xor    ebx,ebx
c0010305:	e8 5a 6c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001030a:	83 c4 10             	add    esp,0x10
c001030d:	85 db                	test   ebx,ebx
c001030f:	75 11                	jne    c0010322 <Phys::allocateContiguousPages(int)+0x3e>
c0010311:	e8 f0 fe ff ff       	call   c0010206 <Phys::allocatePage()>
c0010316:	83 ff 01             	cmp    edi,0x1
c0010319:	89 c6                	mov    esi,eax
c001031b:	74 21                	je     c001033e <Phys::allocateContiguousPages(int)+0x5a>
c001031d:	bb 01 00 00 00       	mov    ebx,0x1
c0010322:	e8 df fe ff ff       	call   c0010206 <Phys::allocatePage()>
c0010327:	89 da                	mov    edx,ebx
c0010329:	c1 e2 0c             	shl    edx,0xc
c001032c:	01 f2                	add    edx,esi
c001032e:	39 c2                	cmp    edx,eax
c0010330:	74 24                	je     c0010356 <Phys::allocateContiguousPages(int)+0x72>
c0010332:	bb 01 00 00 00       	mov    ebx,0x1
c0010337:	89 c6                	mov    esi,eax
c0010339:	83 ff 01             	cmp    edi,0x1
c001033c:	75 e4                	jne    c0010322 <Phys::allocateContiguousPages(int)+0x3e>
c001033e:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010346:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001034b:	85 c0                	test   eax,eax
c001034d:	75 01                	jne    c0010350 <Phys::allocateContiguousPages(int)+0x6c>
c001034f:	fb                   	sti    
c0010350:	89 f0                	mov    eax,esi
c0010352:	5b                   	pop    ebx
c0010353:	5e                   	pop    esi
c0010354:	5f                   	pop    edi
c0010355:	c3                   	ret    
c0010356:	83 c3 01             	add    ebx,0x1
c0010359:	39 fb                	cmp    ebx,edi
c001035b:	75 b0                	jne    c001030d <Phys::allocateContiguousPages(int)+0x29>
c001035d:	eb df                	jmp    c001033e <Phys::allocateContiguousPages(int)+0x5a>

c001035f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001035f:	56                   	push   esi
c0010360:	53                   	push   ebx
c0010361:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010365:	39 1d 34 e1 02 c0    	cmp    DWORD PTR ds:0xc002e134,ebx
c001036b:	73 06                	jae    c0010373 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001036d:	89 1d 34 e1 02 c0    	mov    DWORD PTR ds:0xc002e134,ebx
c0010373:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010377:	c1 eb 0c             	shr    ebx,0xc
c001037a:	c1 e8 0c             	shr    eax,0xc
c001037d:	39 d8                	cmp    eax,ebx
c001037f:	73 13                	jae    c0010394 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010381:	6a 00                	push   0x0
c0010383:	8d 70 01             	lea    esi,[eax+0x1]
c0010386:	50                   	push   eax
c0010387:	e8 b5 fd ff ff       	call   c0010141 <Phys::setPageState(unsigned long, bool)>
c001038c:	5a                   	pop    edx
c001038d:	89 f0                	mov    eax,esi
c001038f:	59                   	pop    ecx
c0010390:	39 f3                	cmp    ebx,esi
c0010392:	75 ed                	jne    c0010381 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010394:	5b                   	pop    ebx
c0010395:	5e                   	pop    esi
c0010396:	c3                   	ret    

c0010397 <Phys::physicalMemorySetup(unsigned int)>:
c0010397:	55                   	push   ebp
c0010398:	57                   	push   edi
c0010399:	56                   	push   esi
c001039a:	53                   	push   ebx
c001039b:	83 ec 40             	sub    esp,0x40
c001039e:	6a 10                	push   0x10
c00103a0:	6a 00                	push   0x0
c00103a2:	68 44 e1 02 c0       	push   0xc002e144
c00103a7:	e8 44 01 ff ff       	call   c00004f0 <memset>
c00103ac:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00103b0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00103b5:	05 00 10 00 00       	add    eax,0x1000
c00103ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00103be:	5b                   	pop    ebx
c00103bf:	31 db                	xor    ebx,ebx
c00103c1:	5e                   	pop    esi
c00103c2:	50                   	push   eax
c00103c3:	68 1b 41 02 c0       	push   0xc002411b
c00103c8:	e8 97 6b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00103cd:	83 c4 10             	add    esp,0x10
c00103d0:	83 ec 08             	sub    esp,0x8
c00103d3:	6a 01                	push   0x1
c00103d5:	53                   	push   ebx
c00103d6:	83 c3 01             	add    ebx,0x1
c00103d9:	e8 63 fd ff ff       	call   c0010141 <Phys::setPageState(unsigned long, bool)>
c00103de:	83 c4 10             	add    esp,0x10
c00103e1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00103e7:	75 e7                	jne    c00103d0 <Phys::physicalMemorySetup(unsigned int)+0x39>
c00103e9:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c00103f0:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c00103f7:	c1 e0 08             	shl    eax,0x8
c00103fa:	09 c2                	or     edx,eax
c00103fc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0010400:	0f 84 98 01 00 00    	je     c001059e <Phys::physicalMemorySetup(unsigned int)+0x207>
c0010406:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001040a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010412:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010417:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001041b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010423:	eb 1c                	jmp    c0010441 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0010425:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010429:	83 c3 18             	add    ebx,0x18
c001042c:	83 c6 01             	add    esi,0x1
c001042f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010433:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010437:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001043b:	0f 84 6d 01 00 00    	je     c00105ae <Phys::physicalMemorySetup(unsigned int)+0x217>
c0010441:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010444:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010447:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001044a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001044e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010452:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010454:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010457:	01 f0                	add    eax,esi
c0010459:	55                   	push   ebp
c001045a:	11 fa                	adc    edx,edi
c001045c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010460:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010464:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010468:	51                   	push   ecx
c0010469:	56                   	push   esi
c001046a:	68 b8 40 02 c0       	push   0xc00240b8
c001046f:	e8 f0 6a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010474:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010478:	83 c4 10             	add    esp,0x10
c001047b:	09 f8                	or     eax,edi
c001047d:	0f 85 2b 01 00 00    	jne    c00105ae <Phys::physicalMemorySetup(unsigned int)+0x217>
c0010483:	83 fd 01             	cmp    ebp,0x1
c0010486:	75 9d                	jne    c0010425 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010488:	ba 00 00 08 00       	mov    edx,0x80000
c001048d:	89 c1                	mov    ecx,eax
c001048f:	39 f2                	cmp    edx,esi
c0010491:	19 f9                	sbb    ecx,edi
c0010493:	0f 82 ab 00 00 00    	jb     c0010544 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0010499:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001049d:	89 c1                	mov    ecx,eax
c001049f:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00104a3:	0f 83 9b 00 00 00    	jae    c0010544 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c00104a9:	ba 00 00 0a 00       	mov    edx,0xa0000
c00104ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00104b2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00104b6:	39 fa                	cmp    edx,edi
c00104b8:	19 e8                	sbb    eax,ebp
c00104ba:	0f 82 b0 01 00 00    	jb     c0010670 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c00104c0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00104c4:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00104c8:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00104ce:	ba ff 1f 00 00       	mov    edx,0x1fff
c00104d3:	83 d5 ff             	adc    ebp,0xffffffff
c00104d6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00104da:	31 c0                	xor    eax,eax
c00104dc:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00104e0:	39 fa                	cmp    edx,edi
c00104e2:	89 c1                	mov    ecx,eax
c00104e4:	19 e9                	sbb    ecx,ebp
c00104e6:	0f 83 39 ff ff ff    	jae    c0010425 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00104ec:	be 00 00 08 00       	mov    esi,0x80000
c00104f1:	83 ec 04             	sub    esp,0x4
c00104f4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00104f8:	57                   	push   edi
c00104f9:	56                   	push   esi
c00104fa:	68 dc 40 02 c0       	push   0xc00240dc
c00104ff:	e8 60 6a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010504:	5d                   	pop    ebp
c0010505:	58                   	pop    eax
c0010506:	57                   	push   edi
c0010507:	56                   	push   esi
c0010508:	e8 52 fe ff ff       	call   c001035f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001050d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010511:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010515:	83 c4 0c             	add    esp,0xc
c0010518:	0f ac d0 0c          	shrd   eax,edx,0xc
c001051c:	8b 15 40 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e140
c0010522:	01 d0                	add    eax,edx
c0010524:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001052b:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c0010530:	52                   	push   edx
c0010531:	50                   	push   eax
c0010532:	68 41 41 02 c0       	push   0xc0024141
c0010537:	e8 28 6a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001053c:	83 c4 10             	add    esp,0x10
c001053f:	e9 e1 fe ff ff       	jmp    c0010425 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010544:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010548:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001054c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010550:	39 ea                	cmp    edx,ebp
c0010552:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010556:	0f 82 c9 fe ff ff    	jb     c0010425 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001055c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010561:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010565:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010569:	0f 83 b6 fe ff ff    	jae    c0010425 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001056f:	39 ee                	cmp    esi,ebp
c0010571:	89 f8                	mov    eax,edi
c0010573:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010577:	0f 83 74 ff ff ff    	jae    c00104f1 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c001057d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010581:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010585:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010589:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001058d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010591:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010595:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010599:	e9 53 ff ff ff       	jmp    c00104f1 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c001059e:	83 ec 0c             	sub    esp,0xc
c00105a1:	68 33 41 02 c0       	push   0xc0024133
c00105a6:	e8 67 fa ff ff       	call   c0010012 <KePanic(char const*)>
c00105ab:	83 c4 10             	add    esp,0x10
c00105ae:	83 ec 08             	sub    esp,0x8
c00105b1:	bb 60 00 00 00       	mov    ebx,0x60
c00105b6:	6a 00                	push   0x0
c00105b8:	6a 06                	push   0x6
c00105ba:	e8 82 fb ff ff       	call   c0010141 <Phys::setPageState(unsigned long, bool)>
c00105bf:	58                   	pop    eax
c00105c0:	5a                   	pop    edx
c00105c1:	6a 00                	push   0x0
c00105c3:	6a 07                	push   0x7
c00105c5:	e8 77 fb ff ff       	call   c0010141 <Phys::setPageState(unsigned long, bool)>
c00105ca:	8b 0d 40 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e140
c00105d0:	83 c4 10             	add    esp,0x10
c00105d3:	83 c1 02             	add    ecx,0x2
c00105d6:	89 0d 40 e1 02 c0    	mov    DWORD PTR ds:0xc002e140,ecx
c00105dc:	83 ec 08             	sub    esp,0x8
c00105df:	6a 00                	push   0x0
c00105e1:	53                   	push   ebx
c00105e2:	83 c3 01             	add    ebx,0x1
c00105e5:	e8 57 fb ff ff       	call   c0010141 <Phys::setPageState(unsigned long, bool)>
c00105ea:	83 c4 10             	add    esp,0x10
c00105ed:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00105f3:	75 e7                	jne    c00105dc <Phys::physicalMemorySetup(unsigned int)+0x245>
c00105f5:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c00105fa:	bb 40 01 00 00       	mov    ebx,0x140
c00105ff:	83 c0 20             	add    eax,0x20
c0010602:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c0010607:	eb 26                	jmp    c001062f <Phys::physicalMemorySetup(unsigned int)+0x298>
c0010609:	83 ec 08             	sub    esp,0x8
c001060c:	6a 00                	push   0x0
c001060e:	53                   	push   ebx
c001060f:	83 c3 01             	add    ebx,0x1
c0010612:	e8 2a fb ff ff       	call   c0010141 <Phys::setPageState(unsigned long, bool)>
c0010617:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c001061c:	83 c4 10             	add    esp,0x10
c001061f:	83 c0 01             	add    eax,0x1
c0010622:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0010628:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c001062d:	74 07                	je     c0010636 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c001062f:	3d ff 03 00 00       	cmp    eax,0x3ff
c0010634:	7e d3                	jle    c0010609 <Phys::physicalMemorySetup(unsigned int)+0x272>
c0010636:	bb d0 01 00 00       	mov    ebx,0x1d0
c001063b:	3d ff 07 00 00       	cmp    eax,0x7ff
c0010640:	7f 26                	jg     c0010668 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0010642:	83 ec 08             	sub    esp,0x8
c0010645:	6a 00                	push   0x0
c0010647:	53                   	push   ebx
c0010648:	83 c3 01             	add    ebx,0x1
c001064b:	e8 f1 fa ff ff       	call   c0010141 <Phys::setPageState(unsigned long, bool)>
c0010650:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c0010655:	83 c4 10             	add    esp,0x10
c0010658:	83 c0 01             	add    eax,0x1
c001065b:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0010661:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c0010666:	75 d3                	jne    c001063b <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c0010668:	83 c4 3c             	add    esp,0x3c
c001066b:	5b                   	pop    ebx
c001066c:	5e                   	pop    esi
c001066d:	5f                   	pop    edi
c001066e:	5d                   	pop    ebp
c001066f:	c3                   	ret    
c0010670:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010678:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010680:	e9 3b fe ff ff       	jmp    c00104c0 <Phys::physicalMemorySetup(unsigned int)+0x129>
c0010685:	90                   	nop

c0010686 <Pipe::isAtty()>:
c0010686:	31 c0                	xor    eax,eax
c0010688:	c3                   	ret    
c0010689:	90                   	nop

c001068a <Pipe::~Pipe()>:
c001068a:	83 ec 0c             	sub    esp,0xc
c001068d:	ba a0 41 02 c0       	mov    edx,0xc00241a0
c0010692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010696:	89 10                	mov    DWORD PTR [eax],edx
c0010698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001069c:	83 ec 0c             	sub    esp,0xc
c001069f:	50                   	push   eax
c00106a0:	e8 dd 2b 00 00       	call   c0013282 <UnixFile::~UnixFile()>
c00106a5:	83 c4 10             	add    esp,0x10
c00106a8:	90                   	nop
c00106a9:	83 c4 0c             	add    esp,0xc
c00106ac:	c3                   	ret    
c00106ad:	90                   	nop

c00106ae <Pipe::~Pipe()>:
c00106ae:	83 ec 0c             	sub    esp,0xc
c00106b1:	83 ec 0c             	sub    esp,0xc
c00106b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106b8:	e8 cd ff ff ff       	call   c001068a <Pipe::~Pipe()>
c00106bd:	83 c4 10             	add    esp,0x10
c00106c0:	83 ec 08             	sub    esp,0x8
c00106c3:	6a 20                	push   0x20
c00106c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106c9:	e8 85 cc ff ff       	call   c000d353 <operator delete(void*, unsigned long)>
c00106ce:	83 c4 10             	add    esp,0x10
c00106d1:	83 c4 0c             	add    esp,0xc
c00106d4:	c3                   	ret    
c00106d5:	90                   	nop

c00106d6 <Pipe::write(unsigned long long, void*, int*)>:
c00106d6:	55                   	push   ebp
c00106d7:	57                   	push   edi
c00106d8:	56                   	push   esi
c00106d9:	53                   	push   ebx
c00106da:	83 ec 1c             	sub    esp,0x1c
c00106dd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00106e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00106e5:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00106e8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00106ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00106ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00106f3:	89 d8                	mov    eax,ebx
c00106f5:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00106f8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00106fc:	89 d6                	mov    esi,edx
c00106fe:	89 d7                	mov    edi,edx
c0010700:	c1 ff 1f             	sar    edi,0x1f
c0010703:	03 34 24             	add    esi,DWORD PTR [esp]
c0010706:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c001070a:	c1 f8 1f             	sar    eax,0x1f
c001070d:	39 f3                	cmp    ebx,esi
c001070f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010713:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010717:	19 f8                	sbb    eax,edi
c0010719:	b8 01 00 00 00       	mov    eax,0x1
c001071e:	72 6e                	jb     c001078e <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0010720:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010723:	01 d0                	add    eax,edx
c0010725:	99                   	cdq    
c0010726:	f7 fb                	idiv   ebx
c0010728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001072c:	29 d3                	sub    ebx,edx
c001072e:	89 d7                	mov    edi,edx
c0010730:	89 de                	mov    esi,ebx
c0010732:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010735:	c1 fb 1f             	sar    ebx,0x1f
c0010738:	39 f2                	cmp    edx,esi
c001073a:	19 d8                	sbb    eax,ebx
c001073c:	b8 00 00 00 00       	mov    eax,0x0
c0010741:	72 04                	jb     c0010747 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0010743:	89 d0                	mov    eax,edx
c0010745:	29 f0                	sub    eax,esi
c0010747:	89 d3                	mov    ebx,edx
c0010749:	29 c3                	sub    ebx,eax
c001074b:	74 0b                	je     c0010758 <Pipe::write(unsigned long long, void*, int*)+0x82>
c001074d:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010750:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010754:	89 d9                	mov    ecx,ebx
c0010756:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010758:	85 c0                	test   eax,eax
c001075a:	74 0d                	je     c0010769 <Pipe::write(unsigned long long, void*, int*)+0x93>
c001075c:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010760:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0010763:	89 de                	mov    esi,ebx
c0010765:	89 c1                	mov    ecx,eax
c0010767:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010769:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c001076c:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010771:	75 10                	jne    c0010783 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010773:	83 ec 0c             	sub    esp,0xc
c0010776:	68 5d 41 02 c0       	push   0xc002415d
c001077b:	e8 92 f8 ff ff       	call   c0010012 <KePanic(char const*)>
c0010780:	83 c4 10             	add    esp,0x10
c0010783:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010787:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001078a:	89 08                	mov    DWORD PTR [eax],ecx
c001078c:	31 c0                	xor    eax,eax
c001078e:	83 c4 1c             	add    esp,0x1c
c0010791:	5b                   	pop    ebx
c0010792:	5e                   	pop    esi
c0010793:	5f                   	pop    edi
c0010794:	5d                   	pop    ebp
c0010795:	c3                   	ret    

c0010796 <Pipe::read(unsigned long long, void*, int*)>:
c0010796:	55                   	push   ebp
c0010797:	57                   	push   edi
c0010798:	56                   	push   esi
c0010799:	53                   	push   ebx
c001079a:	83 ec 1c             	sub    esp,0x1c
c001079d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00107a1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00107a5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00107a9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00107ac:	89 c8                	mov    eax,ecx
c00107ae:	99                   	cdq    
c00107af:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00107b3:	74 27                	je     c00107dc <Pipe::read(unsigned long long, void*, int*)+0x46>
c00107b5:	39 f9                	cmp    ecx,edi
c00107b7:	89 d1                	mov    ecx,edx
c00107b9:	19 f1                	sbb    ecx,esi
c00107bb:	73 1f                	jae    c00107dc <Pipe::read(unsigned long long, void*, int*)+0x46>
c00107bd:	fa                   	cli    
c00107be:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00107c4:	e8 bf 67 00 00       	call   c0016f88 <schedule()>
c00107c9:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00107d0:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00107d7:	75 d0                	jne    c00107a9 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00107d9:	fb                   	sti    
c00107da:	eb cd                	jmp    c00107a9 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00107dc:	39 f8                	cmp    eax,edi
c00107de:	89 d1                	mov    ecx,edx
c00107e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00107e3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00107e7:	19 f1                	sbb    ecx,esi
c00107e9:	73 07                	jae    c00107f2 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c00107eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00107ee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00107f2:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00107f5:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00107f8:	29 f7                	sub    edi,esi
c00107fa:	89 f8                	mov    eax,edi
c00107fc:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010800:	99                   	cdq    
c0010801:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0010804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010808:	19 d0                	sbb    eax,edx
c001080a:	73 07                	jae    c0010813 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c001080c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001080f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010813:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0010816:	89 ea                	mov    edx,ebp
c0010818:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c001081c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010821:	74 0d                	je     c0010830 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c0010823:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010826:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001082a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001082e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010830:	85 d2                	test   edx,edx
c0010832:	74 11                	je     c0010845 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c0010834:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010838:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001083b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001083f:	89 d1                	mov    ecx,edx
c0010841:	89 c7                	mov    edi,eax
c0010843:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010845:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010848:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c001084b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001084e:	99                   	cdq    
c001084f:	89 f7                	mov    edi,esi
c0010851:	03 04 24             	add    eax,DWORD PTR [esp]
c0010854:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0010858:	c1 ff 1f             	sar    edi,0x1f
c001085b:	57                   	push   edi
c001085c:	56                   	push   esi
c001085d:	52                   	push   edx
c001085e:	50                   	push   eax
c001085f:	e8 80 11 01 00       	call   c00219e4 <__umoddi3>
c0010864:	83 c4 10             	add    esp,0x10
c0010867:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001086a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001086f:	75 10                	jne    c0010881 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c0010871:	83 ec 0c             	sub    esp,0xc
c0010874:	68 7a 41 02 c0       	push   0xc002417a
c0010879:	e8 94 f7 ff ff       	call   c0010012 <KePanic(char const*)>
c001087e:	83 c4 10             	add    esp,0x10
c0010881:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010885:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010888:	89 10                	mov    DWORD PTR [eax],edx
c001088a:	83 c4 1c             	add    esp,0x1c
c001088d:	31 c0                	xor    eax,eax
c001088f:	5b                   	pop    ebx
c0010890:	5e                   	pop    esi
c0010891:	5f                   	pop    edi
c0010892:	5d                   	pop    ebp
c0010893:	c3                   	ret    

c0010894 <Pipe::Pipe(int)>:
c0010894:	83 ec 0c             	sub    esp,0xc
c0010897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001089b:	83 ec 08             	sub    esp,0x8
c001089e:	6a 00                	push   0x0
c00108a0:	50                   	push   eax
c00108a1:	e8 f6 27 00 00       	call   c001309c <UnixFile::UnixFile(int)>
c00108a6:	83 c4 10             	add    esp,0x10
c00108a9:	ba a0 41 02 c0       	mov    edx,0xc00241a0
c00108ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b2:	89 10                	mov    DWORD PTR [eax],edx
c00108b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00108bc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00108bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00108ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ce:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00108d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108d9:	83 ec 0c             	sub    esp,0xc
c00108dc:	50                   	push   eax
c00108dd:	e8 e9 f3 ff ff       	call   c000fccb <malloc>
c00108e2:	83 c4 10             	add    esp,0x10
c00108e5:	89 c2                	mov    edx,eax
c00108e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108eb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00108ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00108f6:	90                   	nop
c00108f7:	83 c4 0c             	add    esp,0xc
c00108fa:	c3                   	ret    

c00108fb <KePowerThread(void*)>:
c00108fb:	83 ec 0c             	sub    esp,0xc
c00108fe:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0010905:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001090c:	75 01                	jne    c001090f <KePowerThread(void*)+0x14>
c001090e:	fb                   	sti    
c001090f:	c6 05 60 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e160,0x0
c0010916:	50                   	push   eax
c0010917:	50                   	push   eax
c0010918:	6a 00                	push   0x0
c001091a:	6a 0a                	push   0xa
c001091c:	e8 73 68 00 00       	call   c0017194 <sleep(unsigned long long)>
c0010921:	83 05 a4 e1 02 c0 0a 	add    DWORD PTR ds:0xc002e1a4,0xa
c0010928:	83 c4 10             	add    esp,0x10
c001092b:	eb e2                	jmp    c001090f <KePowerThread(void*)+0x14>

c001092d <KeChangePowerSettings(PowerSettings)>:
c001092d:	57                   	push   edi
c001092e:	b9 09 00 00 00       	mov    ecx,0x9
c0010933:	56                   	push   esi
c0010934:	bf 80 e1 02 c0       	mov    edi,0xc002e180
c0010939:	fc                   	cld    
c001093a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001093e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010940:	5e                   	pop    esi
c0010941:	5f                   	pop    edi
c0010942:	c3                   	ret    

c0010943 <KeUserIOReceived()>:
c0010943:	c7 05 a4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1a4,0x0
c001094d:	c3                   	ret    

c001094e <KeHandlePowerButton()>:
c001094e:	a1 80 e1 02 c0       	mov    eax,ds:0xc002e180
c0010953:	83 f8 02             	cmp    eax,0x2
c0010956:	75 05                	jne    c001095d <KeHandlePowerButton()+0xf>
c0010958:	e9 33 da ff ff       	jmp    c000e390 <KeShutdown()>
c001095d:	48                   	dec    eax
c001095e:	75 05                	jne    c0010965 <KeHandlePowerButton()+0x17>
c0010960:	e9 4f da ff ff       	jmp    c000e3b4 <KeSleep()>
c0010965:	c3                   	ret    

c0010966 <KeHandleSleepButton()>:
c0010966:	a1 84 e1 02 c0       	mov    eax,ds:0xc002e184
c001096b:	83 f8 02             	cmp    eax,0x2
c001096e:	75 05                	jne    c0010975 <KeHandleSleepButton()+0xf>
c0010970:	e9 1b da ff ff       	jmp    c000e390 <KeShutdown()>
c0010975:	48                   	dec    eax
c0010976:	75 05                	jne    c001097d <KeHandleSleepButton()+0x17>
c0010978:	e9 37 da ff ff       	jmp    c000e3b4 <KeSleep()>
c001097d:	c3                   	ret    

c001097e <KeSetupPowerManager()>:
c001097e:	83 ec 0c             	sub    esp,0xc
c0010981:	c7 05 a4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1a4,0x0
c001098b:	68 f0 00 00 00       	push   0xf0
c0010990:	c6 05 60 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e160,0x0
c0010997:	6a 00                	push   0x0
c0010999:	68 fb 08 01 c0       	push   0xc00108fb
c001099e:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00109a4:	e8 47 63 00 00       	call   c0016cf0 <Process::createThread(void (*)(void*), void*, int)>
c00109a9:	c7 05 80 e1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002e180,0x2
c00109b3:	c7 05 84 e1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e184,0x1
c00109bd:	c7 05 88 e1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002e188,0x3
c00109c7:	c7 05 8c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e18c,0x0
c00109d1:	c7 05 98 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e198,0x0
c00109db:	c7 05 90 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e190,0x0
c00109e5:	c7 05 9c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e19c,0x0
c00109ef:	c7 05 94 e1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002e194,0x3c
c00109f9:	c7 05 a0 e1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002e1a0,0x3c
c0010a03:	83 c4 1c             	add    esp,0x1c
c0010a06:	c3                   	ret    

c0010a07 <KeRand()>:
c0010a07:	69 05 a8 e1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002e1a8,0x2875
c0010a11:	69 0d ac e1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002e1ac,0xa2e7b175
c0010a1b:	53                   	push   ebx
c0010a1c:	01 c1                	add    ecx,eax
c0010a1e:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010a23:	f7 25 a8 e1 02 c0    	mul    DWORD PTR ds:0xc002e1a8
c0010a29:	01 ca                	add    edx,ecx
c0010a2b:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010a30:	83 d2 00             	adc    edx,0x0
c0010a33:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c0010a38:	0f b7 da             	movzx  ebx,dx
c0010a3b:	89 da                	mov    edx,ebx
c0010a3d:	89 1d ac e1 02 c0    	mov    DWORD PTR ds:0xc002e1ac,ebx
c0010a43:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010a47:	5b                   	pop    ebx
c0010a48:	c3                   	ret    

c0010a49 <KeSeedRand(unsigned int)>:
c0010a49:	53                   	push   ebx
c0010a4a:	83 ec 08             	sub    esp,0x8
c0010a4d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a51:	e8 03 98 00 00       	call   c001a259 <HalGetRand()>
c0010a56:	c7 05 ac e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1ac,0x0
c0010a60:	31 d8                	xor    eax,ebx
c0010a62:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c0010a67:	e8 9b ff ff ff       	call   c0010a07 <KeRand()>
c0010a6c:	83 c4 08             	add    esp,0x8
c0010a6f:	5b                   	pop    ebx
c0010a70:	eb 95                	jmp    c0010a07 <KeRand()>

c0010a72 <KeInitRand()>:
c0010a72:	83 ec 0c             	sub    esp,0xc
c0010a75:	e8 03 96 00 00       	call   c001a07d <HalQueryPerformanceCounter()>
c0010a7a:	0f 20 da             	mov    edx,cr3
c0010a7d:	0f 22 da             	mov    cr3,edx
c0010a80:	0f 20 da             	mov    edx,cr3
c0010a83:	0f 22 da             	mov    cr3,edx
c0010a86:	0f 20 da             	mov    edx,cr3
c0010a89:	0f 22 da             	mov    cr3,edx
c0010a8c:	0f 20 da             	mov    edx,cr3
c0010a8f:	0f 22 da             	mov    cr3,edx
c0010a92:	83 ec 0c             	sub    esp,0xc
c0010a95:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010a9a:	50                   	push   eax
c0010a9b:	e8 a9 ff ff ff       	call   c0010a49 <KeSeedRand(unsigned int)>
c0010aa0:	83 c4 1c             	add    esp,0x1c
c0010aa3:	c3                   	ret    

c0010aa4 <KeResolveCompatibilitySymbol(char*)>:
c0010aa4:	83 ec 0c             	sub    esp,0xc
c0010aa7:	83 ec 08             	sub    esp,0x8
c0010aaa:	68 b4 41 02 c0       	push   0xc00241b4
c0010aaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ab3:	e8 98 fc fe ff       	call   c0000750 <strcmp>
c0010ab8:	83 c4 10             	add    esp,0x10
c0010abb:	85 c0                	test   eax,eax
c0010abd:	0f 94 c0             	sete   al
c0010ac0:	0f b6 c0             	movzx  eax,al
c0010ac3:	85 c0                	test   eax,eax
c0010ac5:	74 0d                	je     c0010ad4 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010ac7:	b8 d0 c0 02 c0       	mov    eax,0xc002c0d0
c0010acc:	e9 8b 01 00 00       	jmp    c0010c5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0010ad4:	83 ec 08             	sub    esp,0x8
c0010ad7:	68 bd 41 02 c0       	push   0xc00241bd
c0010adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ae0:	e8 6b fc fe ff       	call   c0000750 <strcmp>
c0010ae5:	83 c4 10             	add    esp,0x10
c0010ae8:	85 c0                	test   eax,eax
c0010aea:	0f 94 c0             	sete   al
c0010aed:	0f b6 c0             	movzx  eax,al
c0010af0:	85 c0                	test   eax,eax
c0010af2:	74 0c                	je     c0010b00 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010af4:	b8 e4 18 02 c0       	mov    eax,0xc00218e4
c0010af9:	e9 5e 01 00 00       	jmp    c0010c5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010afe:	66 90                	xchg   ax,ax
c0010b00:	83 ec 08             	sub    esp,0x8
c0010b03:	68 c7 41 02 c0       	push   0xc00241c7
c0010b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b0c:	e8 3f fc fe ff       	call   c0000750 <strcmp>
c0010b11:	83 c4 10             	add    esp,0x10
c0010b14:	85 c0                	test   eax,eax
c0010b16:	0f 94 c0             	sete   al
c0010b19:	0f b6 c0             	movzx  eax,al
c0010b1c:	85 c0                	test   eax,eax
c0010b1e:	74 0c                	je     c0010b2c <KeResolveCompatibilitySymbol(char*)+0x88>
c0010b20:	b8 18 16 02 c0       	mov    eax,0xc0021618
c0010b25:	e9 32 01 00 00       	jmp    c0010c5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b2a:	66 90                	xchg   ax,ax
c0010b2c:	83 ec 08             	sub    esp,0x8
c0010b2f:	68 d0 41 02 c0       	push   0xc00241d0
c0010b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b38:	e8 13 fc fe ff       	call   c0000750 <strcmp>
c0010b3d:	83 c4 10             	add    esp,0x10
c0010b40:	85 c0                	test   eax,eax
c0010b42:	0f 94 c0             	sete   al
c0010b45:	0f b6 c0             	movzx  eax,al
c0010b48:	85 c0                	test   eax,eax
c0010b4a:	74 0c                	je     c0010b58 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010b4c:	b8 12 00 01 c0       	mov    eax,0xc0010012
c0010b51:	e9 06 01 00 00       	jmp    c0010c5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b56:	66 90                	xchg   ax,ax
c0010b58:	83 ec 08             	sub    esp,0x8
c0010b5b:	68 e3 41 02 c0       	push   0xc00241e3
c0010b60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b64:	e8 e7 fb fe ff       	call   c0000750 <strcmp>
c0010b69:	83 c4 10             	add    esp,0x10
c0010b6c:	85 c0                	test   eax,eax
c0010b6e:	0f 94 c0             	sete   al
c0010b71:	0f b6 c0             	movzx  eax,al
c0010b74:	85 c0                	test   eax,eax
c0010b76:	74 0c                	je     c0010b84 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010b78:	b8 93 d2 00 c0       	mov    eax,0xc000d293
c0010b7d:	e9 da 00 00 00       	jmp    c0010c5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b82:	66 90                	xchg   ax,ax
c0010b84:	83 ec 08             	sub    esp,0x8
c0010b87:	68 00 42 02 c0       	push   0xc0024200
c0010b8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b90:	e8 bb fb fe ff       	call   c0000750 <strcmp>
c0010b95:	83 c4 10             	add    esp,0x10
c0010b98:	85 c0                	test   eax,eax
c0010b9a:	0f 94 c0             	sete   al
c0010b9d:	0f b6 c0             	movzx  eax,al
c0010ba0:	85 c0                	test   eax,eax
c0010ba2:	74 0c                	je     c0010bb0 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010ba4:	b8 e4 19 02 c0       	mov    eax,0xc00219e4
c0010ba9:	e9 ae 00 00 00       	jmp    c0010c5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bae:	66 90                	xchg   ax,ax
c0010bb0:	83 ec 08             	sub    esp,0x8
c0010bb3:	68 0a 42 02 c0       	push   0xc002420a
c0010bb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bbc:	e8 8f fb fe ff       	call   c0000750 <strcmp>
c0010bc1:	83 c4 10             	add    esp,0x10
c0010bc4:	85 c0                	test   eax,eax
c0010bc6:	0f 94 c0             	sete   al
c0010bc9:	0f b6 c0             	movzx  eax,al
c0010bcc:	85 c0                	test   eax,eax
c0010bce:	74 0c                	je     c0010bdc <KeResolveCompatibilitySymbol(char*)+0x138>
c0010bd0:	b8 64 17 02 c0       	mov    eax,0xc0021764
c0010bd5:	e9 82 00 00 00       	jmp    c0010c5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bda:	66 90                	xchg   ax,ax
c0010bdc:	83 ec 08             	sub    esp,0x8
c0010bdf:	68 13 42 02 c0       	push   0xc0024213
c0010be4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010be8:	e8 63 fb fe ff       	call   c0000750 <strcmp>
c0010bed:	83 c4 10             	add    esp,0x10
c0010bf0:	85 c0                	test   eax,eax
c0010bf2:	0f 94 c0             	sete   al
c0010bf5:	0f b6 c0             	movzx  eax,al
c0010bf8:	85 c0                	test   eax,eax
c0010bfa:	74 08                	je     c0010c04 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010bfc:	b8 d4 c0 02 c0       	mov    eax,0xc002c0d4
c0010c01:	eb 59                	jmp    c0010c5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c03:	90                   	nop
c0010c04:	83 ec 08             	sub    esp,0x8
c0010c07:	68 2b 42 02 c0       	push   0xc002422b
c0010c0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c10:	e8 3b fb fe ff       	call   c0000750 <strcmp>
c0010c15:	83 c4 10             	add    esp,0x10
c0010c18:	85 c0                	test   eax,eax
c0010c1a:	0f 94 c0             	sete   al
c0010c1d:	0f b6 c0             	movzx  eax,al
c0010c20:	85 c0                	test   eax,eax
c0010c22:	74 08                	je     c0010c2c <KeResolveCompatibilitySymbol(char*)+0x188>
c0010c24:	b8 d4 c0 02 c0       	mov    eax,0xc002c0d4
c0010c29:	eb 31                	jmp    c0010c5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c2b:	90                   	nop
c0010c2c:	83 ec 08             	sub    esp,0x8
c0010c2f:	68 38 42 02 c0       	push   0xc0024238
c0010c34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c38:	e8 13 fb fe ff       	call   c0000750 <strcmp>
c0010c3d:	83 c4 10             	add    esp,0x10
c0010c40:	85 c0                	test   eax,eax
c0010c42:	0f 94 c0             	sete   al
c0010c45:	0f b6 c0             	movzx  eax,al
c0010c48:	85 c0                	test   eax,eax
c0010c4a:	74 08                	je     c0010c54 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010c4c:	b8 d5 c0 02 c0       	mov    eax,0xc002c0d5
c0010c51:	eb 09                	jmp    c0010c5c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010c53:	90                   	nop
c0010c54:	b8 00 00 00 00       	mov    eax,0x0
c0010c59:	8d 76 00             	lea    esi,[esi+0x0]
c0010c5c:	83 c4 0c             	add    esp,0xc
c0010c5f:	c3                   	ret    

c0010c60 <Semaphore::Semaphore(int)>:
c0010c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c68:	89 10                	mov    DWORD PTR [eax],edx
c0010c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c6e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010c75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c84:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010c8b:	90                   	nop
c0010c8c:	c3                   	ret    
c0010c8d:	90                   	nop
c0010c8e:	66 90                	xchg   ax,ax

c0010c90 <Semaphore::tryAcquire()>:
c0010c90:	83 ec 0c             	sub    esp,0xc
c0010c93:	fa                   	cli    
c0010c94:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010c99:	83 c0 01             	add    eax,0x1
c0010c9c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010ca1:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ca6:	83 c0 01             	add    eax,0x1
c0010ca9:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cb2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010cb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010cbb:	39 c2                	cmp    edx,eax
c0010cbd:	7d 59                	jge    c0010d18 <Semaphore::tryAcquire()+0x88>
c0010cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010cc6:	8d 50 01             	lea    edx,[eax+0x1]
c0010cc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ccd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010cd0:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010cd5:	83 e8 01             	sub    eax,0x1
c0010cd8:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010cdd:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ce2:	85 c0                	test   eax,eax
c0010ce4:	75 1a                	jne    c0010d00 <Semaphore::tryAcquire()+0x70>
c0010ce6:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010ceb:	85 c0                	test   eax,eax
c0010ced:	74 11                	je     c0010d00 <Semaphore::tryAcquire()+0x70>
c0010cef:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010cf9:	e8 8a 62 00 00       	call   c0016f88 <schedule()>
c0010cfe:	66 90                	xchg   ax,ax
c0010d00:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010d08:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010d0d:	85 c0                	test   eax,eax
c0010d0f:	75 03                	jne    c0010d14 <Semaphore::tryAcquire()+0x84>
c0010d11:	fb                   	sti    
c0010d12:	66 90                	xchg   ax,ax
c0010d14:	b0 01                	mov    al,0x1
c0010d16:	eb 48                	jmp    c0010d60 <Semaphore::tryAcquire()+0xd0>
c0010d18:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010d1d:	83 e8 01             	sub    eax,0x1
c0010d20:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010d25:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010d2a:	85 c0                	test   eax,eax
c0010d2c:	75 1a                	jne    c0010d48 <Semaphore::tryAcquire()+0xb8>
c0010d2e:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010d33:	85 c0                	test   eax,eax
c0010d35:	74 11                	je     c0010d48 <Semaphore::tryAcquire()+0xb8>
c0010d37:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010d41:	e8 42 62 00 00       	call   c0016f88 <schedule()>
c0010d46:	66 90                	xchg   ax,ax
c0010d48:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010d50:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010d55:	85 c0                	test   eax,eax
c0010d57:	75 03                	jne    c0010d5c <Semaphore::tryAcquire()+0xcc>
c0010d59:	fb                   	sti    
c0010d5a:	66 90                	xchg   ax,ax
c0010d5c:	b0 00                	mov    al,0x0
c0010d5e:	66 90                	xchg   ax,ax
c0010d60:	83 c4 0c             	add    esp,0xc
c0010d63:	c3                   	ret    

c0010d64 <Semaphore::assertLocked(char const*)>:
c0010d64:	83 ec 0c             	sub    esp,0xc
c0010d67:	fa                   	cli    
c0010d68:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010d6d:	83 c0 01             	add    eax,0x1
c0010d70:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010d75:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010d7a:	83 c0 01             	add    eax,0x1
c0010d7d:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d86:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d8f:	39 c2                	cmp    edx,eax
c0010d91:	7d 11                	jge    c0010da4 <Semaphore::assertLocked(char const*)+0x40>
c0010d93:	83 ec 0c             	sub    esp,0xc
c0010d96:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010d9a:	e8 73 f2 ff ff       	call   c0010012 <KePanic(char const*)>
c0010d9f:	83 c4 10             	add    esp,0x10
c0010da2:	66 90                	xchg   ax,ax
c0010da4:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010da9:	83 e8 01             	sub    eax,0x1
c0010dac:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010db1:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010db6:	85 c0                	test   eax,eax
c0010db8:	75 1a                	jne    c0010dd4 <Semaphore::assertLocked(char const*)+0x70>
c0010dba:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010dbf:	85 c0                	test   eax,eax
c0010dc1:	74 11                	je     c0010dd4 <Semaphore::assertLocked(char const*)+0x70>
c0010dc3:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010dcd:	e8 b6 61 00 00       	call   c0016f88 <schedule()>
c0010dd2:	66 90                	xchg   ax,ax
c0010dd4:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010ddc:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010de1:	85 c0                	test   eax,eax
c0010de3:	75 03                	jne    c0010de8 <Semaphore::assertLocked(char const*)+0x84>
c0010de5:	fb                   	sti    
c0010de6:	66 90                	xchg   ax,ax
c0010de8:	90                   	nop
c0010de9:	83 c4 0c             	add    esp,0xc
c0010dec:	c3                   	ret    
c0010ded:	90                   	nop
c0010dee:	66 90                	xchg   ax,ax

c0010df0 <Semaphore::acquire(int)>:
c0010df0:	83 ec 1c             	sub    esp,0x1c
c0010df3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010df8:	0f 84 ae 00 00 00    	je     c0010eac <Semaphore::acquire(int)+0xbc>
c0010dfe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010e06:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010e0b:	90                   	nop
c0010e0c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010e11:	85 c0                	test   eax,eax
c0010e13:	0f 84 87 00 00 00    	je     c0010ea0 <Semaphore::acquire(int)+0xb0>
c0010e19:	83 ec 0c             	sub    esp,0xc
c0010e1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e20:	e8 6b fe ff ff       	call   c0010c90 <Semaphore::tryAcquire()>
c0010e25:	83 c4 10             	add    esp,0x10
c0010e28:	83 f0 01             	xor    eax,0x1
c0010e2b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010e2f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010e33:	83 f0 01             	xor    eax,0x1
c0010e36:	0f b6 c0             	movzx  eax,al
c0010e39:	85 c0                	test   eax,eax
c0010e3b:	75 5f                	jne    c0010e9c <Semaphore::acquire(int)+0xac>
c0010e3d:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010e42:	7f 34                	jg     c0010e78 <Semaphore::acquire(int)+0x88>
c0010e44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010e48:	89 d0                	mov    eax,edx
c0010e4a:	c1 e0 02             	shl    eax,0x2
c0010e4d:	01 d0                	add    eax,edx
c0010e4f:	01 c0                	add    eax,eax
c0010e51:	89 c2                	mov    edx,eax
c0010e53:	c1 fa 1f             	sar    edx,0x1f
c0010e56:	83 ec 08             	sub    esp,0x8
c0010e59:	52                   	push   edx
c0010e5a:	50                   	push   eax
c0010e5b:	e8 1c 63 00 00       	call   c001717c <milliTenthSleep(unsigned long long)>
c0010e60:	83 c4 10             	add    esp,0x10
c0010e63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e67:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010e6b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010e73:	eb 97                	jmp    c0010e0c <Semaphore::acquire(int)+0x1c>
c0010e75:	8d 76 00             	lea    esi,[esi+0x0]
c0010e78:	83 ec 08             	sub    esp,0x8
c0010e7b:	6a 00                	push   0x0
c0010e7d:	68 90 01 00 00       	push   0x190
c0010e82:	e8 f5 62 00 00       	call   c001717c <milliTenthSleep(unsigned long long)>
c0010e87:	83 c4 10             	add    esp,0x10
c0010e8a:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010e8f:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010e94:	e9 73 ff ff ff       	jmp    c0010e0c <Semaphore::acquire(int)+0x1c>
c0010e99:	8d 76 00             	lea    esi,[esi+0x0]
c0010e9c:	90                   	nop
c0010e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0010ea0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ea4:	e9 fb 00 00 00       	jmp    c0010fa4 <Semaphore::acquire(int)+0x1b4>
c0010ea9:	8d 76 00             	lea    esi,[esi+0x0]
c0010eac:	fa                   	cli    
c0010ead:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010eb2:	83 c0 01             	add    eax,0x1
c0010eb5:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010eba:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ebf:	83 c0 01             	add    eax,0x1
c0010ec2:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010ec7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ecb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010ece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ed2:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ed4:	39 c2                	cmp    edx,eax
c0010ed6:	7d 14                	jge    c0010eec <Semaphore::acquire(int)+0xfc>
c0010ed8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010edc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010edf:	8d 50 01             	lea    edx,[eax+0x1]
c0010ee2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ee6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010ee9:	eb 6d                	jmp    c0010f58 <Semaphore::acquire(int)+0x168>
c0010eeb:	90                   	nop
c0010eec:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ef3:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010efa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010efe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f01:	85 c0                	test   eax,eax
c0010f03:	75 13                	jne    c0010f18 <Semaphore::acquire(int)+0x128>
c0010f05:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010f0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f10:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f13:	eb 17                	jmp    c0010f2c <Semaphore::acquire(int)+0x13c>
c0010f15:	8d 76 00             	lea    esi,[esi+0x0]
c0010f18:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010f1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010f24:	8b 12                	mov    edx,DWORD PTR [edx]
c0010f26:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010f29:	8d 76 00             	lea    esi,[esi+0x0]
c0010f2c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010f31:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f37:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010f3a:	83 ec 0c             	sub    esp,0xc
c0010f3d:	68 48 42 02 c0       	push   0xc0024248
c0010f42:	e8 1d 60 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010f47:	83 c4 10             	add    esp,0x10
c0010f4a:	83 ec 0c             	sub    esp,0xc
c0010f4d:	6a 05                	push   0x5
c0010f4f:	e8 f4 60 00 00       	call   c0017048 <blockTask(TaskState)>
c0010f54:	83 c4 10             	add    esp,0x10
c0010f57:	90                   	nop
c0010f58:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010f5d:	83 e8 01             	sub    eax,0x1
c0010f60:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010f65:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010f6a:	85 c0                	test   eax,eax
c0010f6c:	75 1a                	jne    c0010f88 <Semaphore::acquire(int)+0x198>
c0010f6e:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010f73:	85 c0                	test   eax,eax
c0010f75:	74 11                	je     c0010f88 <Semaphore::acquire(int)+0x198>
c0010f77:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010f81:	e8 02 60 00 00       	call   c0016f88 <schedule()>
c0010f86:	66 90                	xchg   ax,ax
c0010f88:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010f90:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010f95:	85 c0                	test   eax,eax
c0010f97:	75 03                	jne    c0010f9c <Semaphore::acquire(int)+0x1ac>
c0010f99:	fb                   	sti    
c0010f9a:	66 90                	xchg   ax,ax
c0010f9c:	b8 00 00 00 00       	mov    eax,0x0
c0010fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0010fa4:	83 c4 1c             	add    esp,0x1c
c0010fa7:	c3                   	ret    

c0010fa8 <Semaphore::acquire()>:
c0010fa8:	83 ec 0c             	sub    esp,0xc
c0010fab:	83 ec 08             	sub    esp,0x8
c0010fae:	6a 00                	push   0x0
c0010fb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fb4:	e8 37 fe ff ff       	call   c0010df0 <Semaphore::acquire(int)>
c0010fb9:	83 c4 10             	add    esp,0x10
c0010fbc:	90                   	nop
c0010fbd:	83 c4 0c             	add    esp,0xc
c0010fc0:	c3                   	ret    
c0010fc1:	90                   	nop
c0010fc2:	66 90                	xchg   ax,ax

c0010fc4 <Semaphore::release()>:
c0010fc4:	83 ec 1c             	sub    esp,0x1c
c0010fc7:	fa                   	cli    
c0010fc8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010fcd:	83 c0 01             	add    eax,0x1
c0010fd0:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010fd5:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010fda:	83 c0 01             	add    eax,0x1
c0010fdd:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010fe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fe6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fe9:	85 c0                	test   eax,eax
c0010feb:	74 2b                	je     c0011018 <Semaphore::release()+0x54>
c0010fed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ff1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ff4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ff8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ffc:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010fff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011003:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011006:	83 ec 0c             	sub    esp,0xc
c0011009:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001100d:	e8 d2 62 00 00       	call   c00172e4 <unblockTask(ThreadControlBlock*)>
c0011012:	83 c4 10             	add    esp,0x10
c0011015:	eb 15                	jmp    c001102c <Semaphore::release()+0x68>
c0011017:	90                   	nop
c0011018:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001101c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001101f:	8d 50 ff             	lea    edx,[eax-0x1]
c0011022:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011026:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011029:	8d 76 00             	lea    esi,[esi+0x0]
c001102c:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0011031:	83 e8 01             	sub    eax,0x1
c0011034:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0011039:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c001103e:	85 c0                	test   eax,eax
c0011040:	75 1a                	jne    c001105c <Semaphore::release()+0x98>
c0011042:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0011047:	85 c0                	test   eax,eax
c0011049:	74 11                	je     c001105c <Semaphore::release()+0x98>
c001104b:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0011055:	e8 2e 5f 00 00       	call   c0016f88 <schedule()>
c001105a:	66 90                	xchg   ax,ax
c001105c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0011064:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0011069:	85 c0                	test   eax,eax
c001106b:	75 03                	jne    c0011070 <Semaphore::release()+0xac>
c001106d:	fb                   	sti    
c001106e:	66 90                	xchg   ax,ax
c0011070:	90                   	nop
c0011071:	83 c4 1c             	add    esp,0x1c
c0011074:	c3                   	ret    

c0011075 <KiSigKill(int)>:
c0011075:	83 ec 0c             	sub    esp,0xc
c0011078:	6a 00                	push   0x0
c001107a:	6a 00                	push   0x0
c001107c:	6a ff                	push   0xffffffff
c001107e:	6a 01                	push   0x1
c0011080:	e8 cd 5f 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011085:	83 c4 1c             	add    esp,0x1c
c0011088:	c3                   	ret    

c0011089 <KiDefaultSignalHandlerIgnore(int)>:
c0011089:	c3                   	ret    

c001108a <KiDefaultSignalHandlerPause(int)>:
c001108a:	57                   	push   edi
c001108b:	b9 07 00 00 00       	mov    ecx,0x7
c0011090:	56                   	push   esi
c0011091:	be a3 42 02 c0       	mov    esi,0xc00242a3
c0011096:	83 ec 24             	sub    esp,0x24
c0011099:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001109d:	fc                   	cld    
c001109e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00110a0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00110a4:	50                   	push   eax
c00110a5:	6a 00                	push   0x0
c00110a7:	6a 00                	push   0x0
c00110a9:	6a 27                	push   0x27
c00110ab:	e8 a2 5f 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00110b0:	83 c4 34             	add    esp,0x34
c00110b3:	5e                   	pop    esi
c00110b4:	5f                   	pop    edi
c00110b5:	c3                   	ret    

c00110b6 <KiDefaultSignalHandlerResume(int)>:
c00110b6:	57                   	push   edi
c00110b7:	b9 1d 00 00 00       	mov    ecx,0x1d
c00110bc:	56                   	push   esi
c00110bd:	be bf 42 02 c0       	mov    esi,0xc00242bf
c00110c2:	83 ec 24             	sub    esp,0x24
c00110c5:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00110c9:	fc                   	cld    
c00110ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110cc:	8d 44 24 03          	lea    eax,[esp+0x3]
c00110d0:	50                   	push   eax
c00110d1:	6a 00                	push   0x0
c00110d3:	6a 00                	push   0x0
c00110d5:	6a 27                	push   0x27
c00110d7:	e8 76 5f 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00110dc:	83 c4 34             	add    esp,0x34
c00110df:	5e                   	pop    esi
c00110e0:	5f                   	pop    edi
c00110e1:	c3                   	ret    

c00110e2 <KeDeinitSignals(SigHandlerBlock*)>:
c00110e2:	e9 f4 eb ff ff       	jmp    c000fcdb <free>

c00110e7 <KeInitSignals()>:
c00110e7:	53                   	push   ebx
c00110e8:	83 ec 14             	sub    esp,0x14
c00110eb:	68 c8 00 00 00       	push   0xc8
c00110f0:	e8 d6 eb ff ff       	call   c000fccb <malloc>
c00110f5:	83 c4 0c             	add    esp,0xc
c00110f8:	89 c3                	mov    ebx,eax
c00110fa:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011104:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001110e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011115:	6a 20                	push   0x20
c0011117:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001111d:	6a 00                	push   0x0
c001111f:	50                   	push   eax
c0011120:	e8 cb f3 fe ff       	call   c00004f0 <memset>
c0011125:	83 c4 0c             	add    esp,0xc
c0011128:	6a 44                	push   0x44
c001112a:	6a 00                	push   0x0
c001112c:	53                   	push   ebx
c001112d:	e8 be f3 fe ff       	call   c00004f0 <memset>
c0011132:	83 c4 0c             	add    esp,0xc
c0011135:	8d 83 88 00 00 00    	lea    eax,[ebx+0x88]
c001113b:	6a 11                	push   0x11
c001113d:	6a 00                	push   0x0
c001113f:	50                   	push   eax
c0011140:	e8 ab f3 fe ff       	call   c00004f0 <memset>
c0011145:	89 d8                	mov    eax,ebx
c0011147:	83 c4 18             	add    esp,0x18
c001114a:	5b                   	pop    ebx
c001114b:	c3                   	ret    

c001114c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c001114c:	53                   	push   ebx
c001114d:	b8 01 00 00 00       	mov    eax,0x1
c0011152:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011156:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001115a:	83 f9 10             	cmp    ecx,0x10
c001115d:	7f 21                	jg     c0011180 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001115f:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011166:	89 03                	mov    DWORD PTR [ebx],eax
c0011168:	b8 01 00 00 00       	mov    eax,0x1
c001116d:	d3 e0                	shl    eax,cl
c001116f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011173:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011176:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001117e:	31 c0                	xor    eax,eax
c0011180:	5b                   	pop    ebx
c0011181:	c3                   	ret    

c0011182 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011182:	55                   	push   ebp
c0011183:	57                   	push   edi
c0011184:	bf 08 00 00 00       	mov    edi,0x8
c0011189:	56                   	push   esi
c001118a:	53                   	push   ebx
c001118b:	83 ec 14             	sub    esp,0x14
c001118e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011192:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011196:	68 dc 42 02 c0       	push   0xc00242dc
c001119b:	e8 c4 5d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00111a0:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00111a7:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00111ad:	83 c4 10             	add    esp,0x10
c00111b0:	31 c9                	xor    ecx,ecx
c00111b2:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00111b6:	99                   	cdq    
c00111b7:	f7 ff                	idiv   edi
c00111b9:	8d 42 24             	lea    eax,[edx+0x24]
c00111bc:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00111c0:	85 f6                	test   esi,esi
c00111c2:	75 1a                	jne    c00111de <KeRaiseSignal(SigHandlerBlock*, int)+0x5c>
c00111c4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00111c8:	89 7c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],edi
c00111cc:	50                   	push   eax
c00111cd:	50                   	push   eax
c00111ce:	52                   	push   edx
c00111cf:	68 f2 42 02 c0       	push   0xc00242f2
c00111d4:	e8 8b 5d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00111d9:	83 c4 10             	add    esp,0x10
c00111dc:	eb 1b                	jmp    c00111f9 <KeRaiseSignal(SigHandlerBlock*, int)+0x77>
c00111de:	41                   	inc    ecx
c00111df:	83 f9 08             	cmp    ecx,0x8
c00111e2:	75 ce                	jne    c00111b2 <KeRaiseSignal(SigHandlerBlock*, int)+0x30>
c00111e4:	83 ec 0c             	sub    esp,0xc
c00111e7:	be 01 00 00 00       	mov    esi,0x1
c00111ec:	68 13 43 02 c0       	push   0xc0024313
c00111f1:	e8 6e 5d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00111f6:	83 c4 10             	add    esp,0x10
c00111f9:	83 c4 0c             	add    esp,0xc
c00111fc:	89 f0                	mov    eax,esi
c00111fe:	5b                   	pop    ebx
c00111ff:	5e                   	pop    esi
c0011200:	5f                   	pop    edi
c0011201:	5d                   	pop    ebp
c0011202:	c3                   	ret    

c0011203 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011203:	55                   	push   ebp
c0011204:	57                   	push   edi
c0011205:	56                   	push   esi
c0011206:	53                   	push   ebx
c0011207:	83 ec 28             	sub    esp,0x28
c001120a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001120e:	68 24 43 02 c0       	push   0xc0024324
c0011213:	e8 4c 5d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011218:	83 c4 10             	add    esp,0x10
c001121b:	85 db                	test   ebx,ebx
c001121d:	0f 84 38 01 00 00    	je     c001135b <KeCheckSignal(SigHandlerBlock*, int*)+0x158>
c0011223:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c001122a:	75 0d                	jne    c0011239 <KeCheckSignal(SigHandlerBlock*, int*)+0x36>
c001122c:	83 ec 0c             	sub    esp,0xc
c001122f:	68 33 43 02 c0       	push   0xc0024333
c0011234:	e9 83 00 00 00       	jmp    c00112bc <KeCheckSignal(SigHandlerBlock*, int*)+0xb9>
c0011239:	83 ec 0c             	sub    esp,0xc
c001123c:	31 ff                	xor    edi,edi
c001123e:	68 4f 43 02 c0       	push   0xc002434f
c0011243:	e8 1c 5d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011248:	83 c4 10             	add    esp,0x10
c001124b:	8b 83 bc 00 00 00    	mov    eax,DWORD PTR [ebx+0xbc]
c0011251:	bd 08 00 00 00       	mov    ebp,0x8
c0011256:	01 f8                	add    eax,edi
c0011258:	99                   	cdq    
c0011259:	51                   	push   ecx
c001125a:	f7 fd                	idiv   ebp
c001125c:	ff b4 93 9c 00 00 00 	push   DWORD PTR [ebx+edx*4+0x9c]
c0011263:	52                   	push   edx
c0011264:	68 63 43 02 c0       	push   0xc0024363
c0011269:	e8 f6 5c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001126e:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011274:	83 c4 10             	add    esp,0x10
c0011277:	8d 04 3e             	lea    eax,[esi+edi*1]
c001127a:	99                   	cdq    
c001127b:	f7 fd                	idiv   ebp
c001127d:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011284:	85 ed                	test   ebp,ebp
c0011286:	0f 84 f0 00 00 00    	je     c001137c <KeCheckSignal(SigHandlerBlock*, int*)+0x179>
c001128c:	89 e9                	mov    ecx,ebp
c001128e:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011294:	bf 01 00 00 00       	mov    edi,0x1
c0011299:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001129d:	d3 e7                	shl    edi,cl
c001129f:	31 c9                	xor    ecx,ecx
c00112a1:	b8 01 00 00 00       	mov    eax,0x1
c00112a6:	d3 e0                	shl    eax,cl
c00112a8:	85 44 24 0c          	test   DWORD PTR [esp+0xc],eax
c00112ac:	74 18                	je     c00112c6 <KeCheckSignal(SigHandlerBlock*, int*)+0xc3>
c00112ae:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00112b2:	74 12                	je     c00112c6 <KeCheckSignal(SigHandlerBlock*, int*)+0xc3>
c00112b4:	83 ec 0c             	sub    esp,0xc
c00112b7:	68 77 43 02 c0       	push   0xc0024377
c00112bc:	e8 a3 5c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00112c1:	e9 92 00 00 00       	jmp    c0011358 <KeCheckSignal(SigHandlerBlock*, int*)+0x155>
c00112c6:	41                   	inc    ecx
c00112c7:	83 f9 11             	cmp    ecx,0x11
c00112ca:	75 d5                	jne    c00112a1 <KeCheckSignal(SigHandlerBlock*, int*)+0x9e>
c00112cc:	46                   	inc    esi
c00112cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112d1:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00112d7:	09 f8                	or     eax,edi
c00112d9:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00112e4:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00112ea:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00112f1:	31 c0                	xor    eax,eax
c00112f3:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00112fb:	74 09                	je     c0011306 <KeCheckSignal(SigHandlerBlock*, int*)+0x103>
c00112fd:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011304:	eb 06                	jmp    c001130c <KeCheckSignal(SigHandlerBlock*, int*)+0x109>
c0011306:	40                   	inc    eax
c0011307:	83 f8 08             	cmp    eax,0x8
c001130a:	75 e7                	jne    c00112f3 <KeCheckSignal(SigHandlerBlock*, int*)+0xf0>
c001130c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011310:	8b 34 ab             	mov    esi,DWORD PTR [ebx+ebp*4]
c0011313:	89 28                	mov    DWORD PTR [eax],ebp
c0011315:	50                   	push   eax
c0011316:	50                   	push   eax
c0011317:	56                   	push   esi
c0011318:	68 8b 43 02 c0       	push   0xc002438b
c001131d:	e8 42 5c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011322:	83 c4 10             	add    esp,0x10
c0011325:	83 fd 09             	cmp    ebp,0x9
c0011328:	75 14                	jne    c001133e <KeCheckSignal(SigHandlerBlock*, int*)+0x13b>
c001132a:	83 ec 0c             	sub    esp,0xc
c001132d:	be 75 10 01 c0       	mov    esi,0xc0011075
c0011332:	68 9b 43 02 c0       	push   0xc002439b
c0011337:	e8 28 5c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001133c:	eb 39                	jmp    c0011377 <KeCheckSignal(SigHandlerBlock*, int*)+0x174>
c001133e:	83 fe 01             	cmp    esi,0x1
c0011341:	75 1c                	jne    c001135f <KeCheckSignal(SigHandlerBlock*, int*)+0x15c>
c0011343:	83 ec 0c             	sub    esp,0xc
c0011346:	f7 d7                	not    edi
c0011348:	68 a5 43 02 c0       	push   0xc00243a5
c001134d:	e8 12 5c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011352:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011358:	83 c4 10             	add    esp,0x10
c001135b:	31 f6                	xor    esi,esi
c001135d:	eb 30                	jmp    c001138f <KeCheckSignal(SigHandlerBlock*, int*)+0x18c>
c001135f:	85 f6                	test   esi,esi
c0011361:	75 2c                	jne    c001138f <KeCheckSignal(SigHandlerBlock*, int*)+0x18c>
c0011363:	83 ec 0c             	sub    esp,0xc
c0011366:	68 b2 43 02 c0       	push   0xc00243b2
c001136b:	e8 f4 5b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011370:	8b 34 ad 80 66 02 c0 	mov    esi,DWORD PTR [ebp*4-0x3ffd9980]
c0011377:	83 c4 10             	add    esp,0x10
c001137a:	eb 13                	jmp    c001138f <KeCheckSignal(SigHandlerBlock*, int*)+0x18c>
c001137c:	46                   	inc    esi
c001137d:	47                   	inc    edi
c001137e:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011384:	83 ff 08             	cmp    edi,0x8
c0011387:	0f 85 be fe ff ff    	jne    c001124b <KeCheckSignal(SigHandlerBlock*, int*)+0x48>
c001138d:	eb cc                	jmp    c001135b <KeCheckSignal(SigHandlerBlock*, int*)+0x158>
c001138f:	83 c4 1c             	add    esp,0x1c
c0011392:	89 f0                	mov    eax,esi
c0011394:	5b                   	pop    ebx
c0011395:	5e                   	pop    esi
c0011396:	5f                   	pop    edi
c0011397:	5d                   	pop    ebp
c0011398:	c3                   	ret    

c0011399 <KiCheckSignalZ>:
c0011399:	53                   	push   ebx
c001139a:	31 db                	xor    ebx,ebx
c001139c:	83 ec 20             	sub    esp,0x20
c001139f:	8d 44 24 14          	lea    eax,[esp+0x14]
c00113a3:	50                   	push   eax
c00113a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113a9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113ac:	ff b0 80 07 00 00    	push   DWORD PTR [eax+0x780]
c00113b2:	e8 4c fe ff ff       	call   c0011203 <KeCheckSignal(SigHandlerBlock*, int*)>
c00113b7:	83 c4 10             	add    esp,0x10
c00113ba:	85 c0                	test   eax,eax
c00113bc:	74 2a                	je     c00113e8 <KiCheckSignalZ+0x4f>
c00113be:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00113c4:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c00113c7:	89 03                	mov    DWORD PTR [ebx],eax
c00113c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00113d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00113d4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00113d7:	52                   	push   edx
c00113d8:	6a 00                	push   0x0
c00113da:	50                   	push   eax
c00113db:	68 d5 43 02 c0       	push   0xc00243d5
c00113e0:	e8 7f 5b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00113e5:	83 c4 10             	add    esp,0x10
c00113e8:	89 d8                	mov    eax,ebx
c00113ea:	83 c4 18             	add    esp,0x18
c00113ed:	5b                   	pop    ebx
c00113ee:	c3                   	ret    

c00113ef <KeCompleteSignal(SigHandlerBlock*, int)>:
c00113ef:	56                   	push   esi
c00113f0:	53                   	push   ebx
c00113f1:	bb 01 00 00 00       	mov    ebx,0x1
c00113f6:	52                   	push   edx
c00113f7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00113fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00113ff:	d3 e3                	shl    ebx,cl
c0011401:	83 f9 10             	cmp    ecx,0x10
c0011404:	7f 08                	jg     c001140e <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011406:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c001140c:	75 10                	jne    c001141e <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c001140e:	83 ec 0c             	sub    esp,0xc
c0011411:	68 f1 43 02 c0       	push   0xc00243f1
c0011416:	e8 f7 eb ff ff       	call   c0010012 <KePanic(char const*)>
c001141b:	83 c4 10             	add    esp,0x10
c001141e:	f7 d3                	not    ebx
c0011420:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011426:	58                   	pop    eax
c0011427:	5b                   	pop    ebx
c0011428:	5e                   	pop    esi
c0011429:	c3                   	ret    

c001142a <KiFinishSignalZ>:
c001142a:	53                   	push   ebx
c001142b:	83 ec 08             	sub    esp,0x8
c001142e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011433:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011437:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001143a:	83 fa 08             	cmp    edx,0x8
c001143d:	75 0c                	jne    c001144b <KiFinishSignalZ+0x21>
c001143f:	83 ec 0c             	sub    esp,0xc
c0011442:	50                   	push   eax
c0011443:	e8 9c 5e 00 00       	call   c00172e4 <unblockTask(ThreadControlBlock*)>
c0011448:	83 c4 10             	add    esp,0x10
c001144b:	50                   	push   eax
c001144c:	50                   	push   eax
c001144d:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011450:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011455:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011458:	ff b0 80 07 00 00    	push   DWORD PTR [eax+0x780]
c001145e:	e8 8c ff ff ff       	call   c00113ef <KeCompleteSignal(SigHandlerBlock*, int)>
c0011463:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011469:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011470:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011477:	83 c4 18             	add    esp,0x18
c001147a:	5b                   	pop    ebx
c001147b:	c3                   	ret    

c001147c <SysSeekDir(regs*)>:
c001147c:	31 c0                	xor    eax,eax
c001147e:	31 d2                	xor    edx,edx
c0011480:	c3                   	ret    

c0011481 <SysTellDir(regs*)>:
c0011481:	31 c0                	xor    eax,eax
c0011483:	31 d2                	xor    edx,edx
c0011485:	c3                   	ret    

c0011486 <SysVerify(regs*)>:
c0011486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001148a:	31 d2                	xor    edx,edx
c001148c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001148f:	c3                   	ret    

c0011490 <SysGetArgc(regs*)>:
c0011490:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011495:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011498:	8b 80 76 05 00 00    	mov    eax,DWORD PTR [eax+0x576]
c001149e:	89 c2                	mov    edx,eax
c00114a0:	c1 fa 1f             	sar    edx,0x1f
c00114a3:	c3                   	ret    

c00114a4 <SysTTYName(regs*)>:
c00114a4:	b8 01 00 00 00       	mov    eax,0x1
c00114a9:	31 d2                	xor    edx,edx
c00114ab:	c3                   	ret    

c00114ac <SysFormatDisk(regs*)>:
c00114ac:	56                   	push   esi
c00114ad:	53                   	push   ebx
c00114ae:	83 ec 04             	sub    esp,0x4
c00114b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00114b5:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c00114bb:	eb 28                	jmp    c00114e5 <SysFormatDisk(regs*)+0x39>
c00114bd:	83 ec 0c             	sub    esp,0xc
c00114c0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00114c3:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00114c6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00114c8:	51                   	push   ecx
c00114c9:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00114cc:	51                   	push   ecx
c00114cd:	50                   	push   eax
c00114ce:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00114d5:	50                   	push   eax
c00114d6:	53                   	push   ebx
c00114d7:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00114da:	83 c4 20             	add    esp,0x20
c00114dd:	83 f8 08             	cmp    eax,0x8
c00114e0:	75 14                	jne    c00114f6 <SysFormatDisk(regs*)+0x4a>
c00114e2:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00114e5:	85 db                	test   ebx,ebx
c00114e7:	75 d4                	jne    c00114bd <SysFormatDisk(regs*)+0x11>
c00114e9:	83 c4 04             	add    esp,0x4
c00114ec:	b8 03 00 00 00       	mov    eax,0x3
c00114f1:	31 d2                	xor    edx,edx
c00114f3:	5b                   	pop    ebx
c00114f4:	5e                   	pop    esi
c00114f5:	c3                   	ret    
c00114f6:	85 c0                	test   eax,eax
c00114f8:	74 1f                	je     c0011519 <SysFormatDisk(regs*)+0x6d>
c00114fa:	83 f8 09             	cmp    eax,0x9
c00114fd:	74 0d                	je     c001150c <SysFormatDisk(regs*)+0x60>
c00114ff:	83 c4 04             	add    esp,0x4
c0011502:	b8 02 00 00 00       	mov    eax,0x2
c0011507:	31 d2                	xor    edx,edx
c0011509:	5b                   	pop    ebx
c001150a:	5e                   	pop    esi
c001150b:	c3                   	ret    
c001150c:	83 c4 04             	add    esp,0x4
c001150f:	b8 01 00 00 00       	mov    eax,0x1
c0011514:	31 d2                	xor    edx,edx
c0011516:	5b                   	pop    ebx
c0011517:	5e                   	pop    esi
c0011518:	c3                   	ret    
c0011519:	83 c4 04             	add    esp,0x4
c001151c:	31 c0                	xor    eax,eax
c001151e:	31 d2                	xor    edx,edx
c0011520:	5b                   	pop    ebx
c0011521:	5e                   	pop    esi
c0011522:	c3                   	ret    

c0011523 <SysSetDiskVolumeLabel(regs*)>:
c0011523:	56                   	push   esi
c0011524:	53                   	push   ebx
c0011525:	83 ec 04             	sub    esp,0x4
c0011528:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001152c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001152f:	83 f8 19             	cmp    eax,0x19
c0011532:	77 33                	ja     c0011567 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011534:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001153b:	85 c9                	test   ecx,ecx
c001153d:	74 28                	je     c0011567 <SysSetDiskVolumeLabel(regs*)+0x44>
c001153f:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011542:	85 db                	test   ebx,ebx
c0011544:	74 21                	je     c0011567 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011546:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c001154c:	85 d2                	test   edx,edx
c001154e:	74 17                	je     c0011567 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011550:	8b 32                	mov    esi,DWORD PTR [edx]
c0011552:	53                   	push   ebx
c0011553:	50                   	push   eax
c0011554:	51                   	push   ecx
c0011555:	52                   	push   edx
c0011556:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011559:	83 c4 10             	add    esp,0x10
c001155c:	89 c2                	mov    edx,eax
c001155e:	83 c4 04             	add    esp,0x4
c0011561:	c1 fa 1f             	sar    edx,0x1f
c0011564:	5b                   	pop    ebx
c0011565:	5e                   	pop    esi
c0011566:	c3                   	ret    
c0011567:	83 c4 04             	add    esp,0x4
c001156a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001156f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011574:	5b                   	pop    ebx
c0011575:	5e                   	pop    esi
c0011576:	c3                   	ret    

c0011577 <SysGetDiskVolumeLabel(regs*)>:
c0011577:	57                   	push   edi
c0011578:	56                   	push   esi
c0011579:	53                   	push   ebx
c001157a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001157e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011581:	83 fa 19             	cmp    edx,0x19
c0011584:	77 3c                	ja     c00115c2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011586:	8b 0c 95 e0 ba 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4520]
c001158d:	85 c9                	test   ecx,ecx
c001158f:	74 31                	je     c00115c2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011591:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011594:	85 db                	test   ebx,ebx
c0011596:	74 2a                	je     c00115c2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011598:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001159b:	85 f6                	test   esi,esi
c001159d:	74 23                	je     c00115c2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001159f:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00115a5:	85 c0                	test   eax,eax
c00115a7:	74 19                	je     c00115c2 <SysGetDiskVolumeLabel(regs*)+0x4b>
c00115a9:	83 ec 0c             	sub    esp,0xc
c00115ac:	8b 38                	mov    edi,DWORD PTR [eax]
c00115ae:	56                   	push   esi
c00115af:	53                   	push   ebx
c00115b0:	52                   	push   edx
c00115b1:	51                   	push   ecx
c00115b2:	50                   	push   eax
c00115b3:	ff 57 58             	call   DWORD PTR [edi+0x58]
c00115b6:	83 c4 20             	add    esp,0x20
c00115b9:	89 c2                	mov    edx,eax
c00115bb:	5b                   	pop    ebx
c00115bc:	c1 fa 1f             	sar    edx,0x1f
c00115bf:	5e                   	pop    esi
c00115c0:	5f                   	pop    edi
c00115c1:	c3                   	ret    
c00115c2:	5b                   	pop    ebx
c00115c3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00115c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115cd:	5e                   	pop    esi
c00115ce:	5f                   	pop    edi
c00115cf:	c3                   	ret    

c00115d0 <SysRealpath(regs*)>:
c00115d0:	83 ec 0c             	sub    esp,0xc
c00115d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115d7:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00115da:	85 d2                	test   edx,edx
c00115dc:	74 07                	je     c00115e5 <SysRealpath(regs*)+0x15>
c00115de:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00115e1:	85 c0                	test   eax,eax
c00115e3:	75 0b                	jne    c00115f0 <SysRealpath(regs*)+0x20>
c00115e5:	b8 01 00 00 00       	mov    eax,0x1
c00115ea:	31 d2                	xor    edx,edx
c00115ec:	83 c4 0c             	add    esp,0xc
c00115ef:	c3                   	ret    
c00115f0:	6a 00                	push   0x0
c00115f2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00115f8:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00115fb:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011601:	51                   	push   ecx
c0011602:	52                   	push   edx
c0011603:	50                   	push   eax
c0011604:	e8 11 68 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011609:	83 c4 10             	add    esp,0x10
c001160c:	31 c0                	xor    eax,eax
c001160e:	31 d2                	xor    edx,edx
c0011610:	83 c4 0c             	add    esp,0xc
c0011613:	c3                   	ret    

c0011614 <SysReadDir(regs*)>:
c0011614:	53                   	push   ebx
c0011615:	83 ec 18             	sub    esp,0x18
c0011618:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001161c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001161f:	83 f8 02             	cmp    eax,0x2
c0011622:	76 61                	jbe    c0011685 <SysReadDir(regs*)+0x71>
c0011624:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001162b:	77 49                	ja     c0011676 <SysReadDir(regs*)+0x62>
c001162d:	83 ec 0c             	sub    esp,0xc
c0011630:	50                   	push   eax
c0011631:	e8 5b 1d 00 00       	call   c0013391 <KeGetFileFromDescriptor(int)>
c0011636:	83 c4 10             	add    esp,0x10
c0011639:	85 c0                	test   eax,eax
c001163b:	74 39                	je     c0011676 <SysReadDir(regs*)+0x62>
c001163d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011645:	83 ec 0c             	sub    esp,0xc
c0011648:	8b 10                	mov    edx,DWORD PTR [eax]
c001164a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001164e:	51                   	push   ecx
c001164f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011652:	51                   	push   ecx
c0011653:	6a 00                	push   0x0
c0011655:	68 10 01 00 00       	push   0x110
c001165a:	50                   	push   eax
c001165b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001165e:	83 c4 20             	add    esp,0x20
c0011661:	85 c0                	test   eax,eax
c0011663:	74 29                	je     c001168e <SysReadDir(regs*)+0x7a>
c0011665:	83 f8 07             	cmp    eax,0x7
c0011668:	74 1b                	je     c0011685 <SysReadDir(regs*)+0x71>
c001166a:	b8 02 00 00 00       	mov    eax,0x2
c001166f:	31 d2                	xor    edx,edx
c0011671:	83 c4 18             	add    esp,0x18
c0011674:	5b                   	pop    ebx
c0011675:	c3                   	ret    
c0011676:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001167b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011680:	83 c4 18             	add    esp,0x18
c0011683:	5b                   	pop    ebx
c0011684:	c3                   	ret    
c0011685:	b8 01 00 00 00       	mov    eax,0x1
c001168a:	31 d2                	xor    edx,edx
c001168c:	eb e3                	jmp    c0011671 <SysReadDir(regs*)+0x5d>
c001168e:	31 c0                	xor    eax,eax
c0011690:	31 d2                	xor    edx,edx
c0011692:	eb dd                	jmp    c0011671 <SysReadDir(regs*)+0x5d>

c0011694 <SysIsATTY(regs*)>:
c0011694:	83 ec 0c             	sub    esp,0xc
c0011697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001169b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001169e:	83 f8 02             	cmp    eax,0x2
c00116a1:	76 07                	jbe    c00116aa <SysIsATTY(regs*)+0x16>
c00116a3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116a8:	75 26                	jne    c00116d0 <SysIsATTY(regs*)+0x3c>
c00116aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00116b2:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c00116b8:	85 c0                	test   eax,eax
c00116ba:	74 24                	je     c00116e0 <SysIsATTY(regs*)+0x4c>
c00116bc:	83 ec 0c             	sub    esp,0xc
c00116bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00116c1:	50                   	push   eax
c00116c2:	ff 12                	call   DWORD PTR [edx]
c00116c4:	31 d2                	xor    edx,edx
c00116c6:	0f b6 c0             	movzx  eax,al
c00116c9:	83 c4 10             	add    esp,0x10
c00116cc:	83 c4 0c             	add    esp,0xc
c00116cf:	c3                   	ret    
c00116d0:	83 ec 0c             	sub    esp,0xc
c00116d3:	50                   	push   eax
c00116d4:	e8 b8 1c 00 00       	call   c0013391 <KeGetFileFromDescriptor(int)>
c00116d9:	83 c4 10             	add    esp,0x10
c00116dc:	85 c0                	test   eax,eax
c00116de:	75 dc                	jne    c00116bc <SysIsATTY(regs*)+0x28>
c00116e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116e5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116ea:	83 c4 0c             	add    esp,0xc
c00116ed:	c3                   	ret    

c00116ee <SysSeek(regs*)>:
c00116ee:	53                   	push   ebx
c00116ef:	83 ec 08             	sub    esp,0x8
c00116f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00116f6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00116f9:	8d 50 fd             	lea    edx,[eax-0x3]
c00116fc:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011702:	77 39                	ja     c001173d <SysSeek(regs*)+0x4f>
c0011704:	83 ec 0c             	sub    esp,0xc
c0011707:	50                   	push   eax
c0011708:	e8 84 1c 00 00       	call   c0013391 <KeGetFileFromDescriptor(int)>
c001170d:	83 c4 10             	add    esp,0x10
c0011710:	85 c0                	test   eax,eax
c0011712:	74 29                	je     c001173d <SysSeek(regs*)+0x4f>
c0011714:	83 ec 04             	sub    esp,0x4
c0011717:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001171a:	31 db                	xor    ebx,ebx
c001171c:	53                   	push   ebx
c001171d:	51                   	push   ecx
c001171e:	50                   	push   eax
c001171f:	e8 ea 6a ff ff       	call   c000820e <File::seek(unsigned long long)>
c0011724:	83 c4 10             	add    esp,0x10
c0011727:	85 c0                	test   eax,eax
c0011729:	0f 95 c0             	setne  al
c001172c:	31 d2                	xor    edx,edx
c001172e:	0f b6 c0             	movzx  eax,al
c0011731:	f7 d8                	neg    eax
c0011733:	83 d2 00             	adc    edx,0x0
c0011736:	83 c4 08             	add    esp,0x8
c0011739:	f7 da                	neg    edx
c001173b:	5b                   	pop    ebx
c001173c:	c3                   	ret    
c001173d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011742:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011747:	83 c4 08             	add    esp,0x8
c001174a:	5b                   	pop    ebx
c001174b:	c3                   	ret    

c001174c <SysTell(regs*)>:
c001174c:	53                   	push   ebx
c001174d:	83 ec 08             	sub    esp,0x8
c0011750:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011754:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011757:	83 f8 02             	cmp    eax,0x2
c001175a:	76 56                	jbe    c00117b2 <SysTell(regs*)+0x66>
c001175c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011761:	76 19                	jbe    c001177c <SysTell(regs*)+0x30>
c0011763:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011766:	31 d2                	xor    edx,edx
c0011768:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001176e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011775:	31 c0                	xor    eax,eax
c0011777:	83 c4 08             	add    esp,0x8
c001177a:	5b                   	pop    ebx
c001177b:	c3                   	ret    
c001177c:	83 ec 0c             	sub    esp,0xc
c001177f:	50                   	push   eax
c0011780:	e8 0c 1c 00 00       	call   c0013391 <KeGetFileFromDescriptor(int)>
c0011785:	83 c4 10             	add    esp,0x10
c0011788:	85 c0                	test   eax,eax
c001178a:	74 26                	je     c00117b2 <SysTell(regs*)+0x66>
c001178c:	83 ec 08             	sub    esp,0x8
c001178f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011792:	52                   	push   edx
c0011793:	50                   	push   eax
c0011794:	e8 21 6b ff ff       	call   c00082ba <File::tell(unsigned long long*)>
c0011799:	83 c4 10             	add    esp,0x10
c001179c:	85 c0                	test   eax,eax
c001179e:	0f 95 c0             	setne  al
c00117a1:	31 d2                	xor    edx,edx
c00117a3:	0f b6 c0             	movzx  eax,al
c00117a6:	f7 d8                	neg    eax
c00117a8:	83 d2 00             	adc    edx,0x0
c00117ab:	83 c4 08             	add    esp,0x8
c00117ae:	f7 da                	neg    edx
c00117b0:	5b                   	pop    ebx
c00117b1:	c3                   	ret    
c00117b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00117b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00117bc:	83 c4 08             	add    esp,0x8
c00117bf:	5b                   	pop    ebx
c00117c0:	c3                   	ret    

c00117c1 <SysSize(regs*)>:
c00117c1:	53                   	push   ebx
c00117c2:	83 ec 18             	sub    esp,0x18
c00117c5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00117c9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00117cc:	83 f8 02             	cmp    eax,0x2
c00117cf:	76 5b                	jbe    c001182c <SysSize(regs*)+0x6b>
c00117d1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00117d6:	76 19                	jbe    c00117f1 <SysSize(regs*)+0x30>
c00117d8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00117db:	31 d2                	xor    edx,edx
c00117dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00117e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00117ea:	31 c0                	xor    eax,eax
c00117ec:	83 c4 18             	add    esp,0x18
c00117ef:	5b                   	pop    ebx
c00117f0:	c3                   	ret    
c00117f1:	83 ec 0c             	sub    esp,0xc
c00117f4:	50                   	push   eax
c00117f5:	e8 97 1b 00 00       	call   c0013391 <KeGetFileFromDescriptor(int)>
c00117fa:	83 c4 10             	add    esp,0x10
c00117fd:	85 c0                	test   eax,eax
c00117ff:	74 2b                	je     c001182c <SysSize(regs*)+0x6b>
c0011801:	83 ec 04             	sub    esp,0x4
c0011804:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011808:	52                   	push   edx
c0011809:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001180c:	52                   	push   edx
c001180d:	50                   	push   eax
c001180e:	e8 3f 6c ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0011813:	83 c4 10             	add    esp,0x10
c0011816:	85 c0                	test   eax,eax
c0011818:	0f 95 c0             	setne  al
c001181b:	31 d2                	xor    edx,edx
c001181d:	0f b6 c0             	movzx  eax,al
c0011820:	f7 d8                	neg    eax
c0011822:	83 d2 00             	adc    edx,0x0
c0011825:	83 c4 18             	add    esp,0x18
c0011828:	f7 da                	neg    edx
c001182a:	5b                   	pop    ebx
c001182b:	c3                   	ret    
c001182c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011831:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011836:	83 c4 18             	add    esp,0x18
c0011839:	5b                   	pop    ebx
c001183a:	c3                   	ret    

c001183b <SysSizeFromFilename(regs*)>:
c001183b:	55                   	push   ebp
c001183c:	57                   	push   edi
c001183d:	56                   	push   esi
c001183e:	53                   	push   ebx
c001183f:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011845:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001184c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001184f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011852:	85 f6                	test   esi,esi
c0011854:	74 34                	je     c001188a <SysSizeFromFilename(regs*)+0x4f>
c0011856:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001185c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001185f:	83 f8 02             	cmp    eax,0x2
c0011862:	76 2d                	jbe    c0011891 <SysSizeFromFilename(regs*)+0x56>
c0011864:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011869:	76 3b                	jbe    c00118a6 <SysSizeFromFilename(regs*)+0x6b>
c001186b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001186e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011874:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001187b:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011881:	31 c0                	xor    eax,eax
c0011883:	5b                   	pop    ebx
c0011884:	31 d2                	xor    edx,edx
c0011886:	5e                   	pop    esi
c0011887:	5f                   	pop    edi
c0011888:	5d                   	pop    ebp
c0011889:	c3                   	ret    
c001188a:	89 f8                	mov    eax,edi
c001188c:	83 f8 02             	cmp    eax,0x2
c001188f:	77 d3                	ja     c0011864 <SysSizeFromFilename(regs*)+0x29>
c0011891:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011897:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001189c:	5b                   	pop    ebx
c001189d:	ba ff ff ff ff       	mov    edx,0xffffffff
c00118a2:	5e                   	pop    esi
c00118a3:	5f                   	pop    edi
c00118a4:	5d                   	pop    ebp
c00118a5:	c3                   	ret    
c00118a6:	83 ec 0c             	sub    esp,0xc
c00118a9:	68 14 01 00 00       	push   0x114
c00118ae:	e8 18 e4 ff ff       	call   c000fccb <malloc>
c00118b3:	6a 01                	push   0x1
c00118b5:	89 c5                	mov    ebp,eax
c00118b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118bc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118bf:	50                   	push   eax
c00118c0:	57                   	push   edi
c00118c1:	55                   	push   ebp
c00118c2:	e8 6d 67 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c00118c7:	83 c4 20             	add    esp,0x20
c00118ca:	85 ed                	test   ebp,ebp
c00118cc:	74 c3                	je     c0011891 <SysSizeFromFilename(regs*)+0x56>
c00118ce:	83 ec 04             	sub    esp,0x4
c00118d1:	8d 44 24 13          	lea    eax,[esp+0x13]
c00118d5:	50                   	push   eax
c00118d6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00118d9:	51                   	push   ecx
c00118da:	55                   	push   ebp
c00118db:	e8 72 6b ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c00118e0:	89 c3                	mov    ebx,eax
c00118e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00118e5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00118e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118eb:	83 c4 10             	add    esp,0x10
c00118ee:	85 db                	test   ebx,ebx
c00118f0:	75 9f                	jne    c0011891 <SysSizeFromFilename(regs*)+0x56>
c00118f2:	6a 00                	push   0x0
c00118f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118f9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118fc:	05 0c 01 00 00       	add    eax,0x10c
c0011901:	50                   	push   eax
c0011902:	57                   	push   edi
c0011903:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c001190a:	53                   	push   ebx
c001190b:	e8 0a 65 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011910:	58                   	pop    eax
c0011911:	5a                   	pop    edx
c0011912:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011916:	50                   	push   eax
c0011917:	53                   	push   ebx
c0011918:	e8 84 5f ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c001191d:	83 c4 10             	add    esp,0x10
c0011920:	83 f8 01             	cmp    eax,0x1
c0011923:	74 1a                	je     c001193f <SysSizeFromFilename(regs*)+0x104>
c0011925:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001192a:	74 26                	je     c0011952 <SysSizeFromFilename(regs*)+0x117>
c001192c:	85 f6                	test   esi,esi
c001192e:	0f 84 47 ff ff ff    	je     c001187b <SysSizeFromFilename(regs*)+0x40>
c0011934:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001193a:	e9 3c ff ff ff       	jmp    c001187b <SysSizeFromFilename(regs*)+0x40>
c001193f:	85 f6                	test   esi,esi
c0011941:	0f 84 34 ff ff ff    	je     c001187b <SysSizeFromFilename(regs*)+0x40>
c0011947:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001194d:	e9 29 ff ff ff       	jmp    c001187b <SysSizeFromFilename(regs*)+0x40>
c0011952:	85 f6                	test   esi,esi
c0011954:	0f 84 21 ff ff ff    	je     c001187b <SysSizeFromFilename(regs*)+0x40>
c001195a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011960:	e9 16 ff ff ff       	jmp    c001187b <SysSizeFromFilename(regs*)+0x40>

c0011965 <SysSizeFromFilenameNoSymlink(regs*)>:
c0011965:	55                   	push   ebp
c0011966:	57                   	push   edi
c0011967:	56                   	push   esi
c0011968:	53                   	push   ebx
c0011969:	81 ec 4c 02 00 00    	sub    esp,0x24c
c001196f:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0011976:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011979:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001197c:	85 f6                	test   esi,esi
c001197e:	74 34                	je     c00119b4 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0011980:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011986:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011989:	83 f8 02             	cmp    eax,0x2
c001198c:	76 2d                	jbe    c00119bb <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001198e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011993:	76 3b                	jbe    c00119d0 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0011995:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011998:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001199e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119a5:	81 c4 4c 02 00 00    	add    esp,0x24c
c00119ab:	31 c0                	xor    eax,eax
c00119ad:	5b                   	pop    ebx
c00119ae:	31 d2                	xor    edx,edx
c00119b0:	5e                   	pop    esi
c00119b1:	5f                   	pop    edi
c00119b2:	5d                   	pop    ebp
c00119b3:	c3                   	ret    
c00119b4:	89 f8                	mov    eax,edi
c00119b6:	83 f8 02             	cmp    eax,0x2
c00119b9:	77 d3                	ja     c001198e <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c00119bb:	81 c4 4c 02 00 00    	add    esp,0x24c
c00119c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119c6:	5b                   	pop    ebx
c00119c7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119cc:	5e                   	pop    esi
c00119cd:	5f                   	pop    edi
c00119ce:	5d                   	pop    ebp
c00119cf:	c3                   	ret    
c00119d0:	83 ec 0c             	sub    esp,0xc
c00119d3:	68 14 01 00 00       	push   0x114
c00119d8:	e8 ee e2 ff ff       	call   c000fccb <malloc>
c00119dd:	6a 00                	push   0x0
c00119df:	89 c5                	mov    ebp,eax
c00119e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119e9:	50                   	push   eax
c00119ea:	57                   	push   edi
c00119eb:	55                   	push   ebp
c00119ec:	e8 43 66 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c00119f1:	83 c4 20             	add    esp,0x20
c00119f4:	85 ed                	test   ebp,ebp
c00119f6:	74 c3                	je     c00119bb <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00119f8:	83 ec 04             	sub    esp,0x4
c00119fb:	8d 44 24 13          	lea    eax,[esp+0x13]
c00119ff:	50                   	push   eax
c0011a00:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011a03:	51                   	push   ecx
c0011a04:	55                   	push   ebp
c0011a05:	e8 48 6a ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0011a0a:	89 c3                	mov    ebx,eax
c0011a0c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011a0f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0011a12:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a15:	83 c4 10             	add    esp,0x10
c0011a18:	85 db                	test   ebx,ebx
c0011a1a:	75 9f                	jne    c00119bb <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011a1c:	6a 00                	push   0x0
c0011a1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a23:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a26:	05 0c 01 00 00       	add    eax,0x10c
c0011a2b:	50                   	push   eax
c0011a2c:	57                   	push   edi
c0011a2d:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0011a34:	53                   	push   ebx
c0011a35:	e8 e0 63 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011a3a:	58                   	pop    eax
c0011a3b:	5a                   	pop    edx
c0011a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011a40:	50                   	push   eax
c0011a41:	53                   	push   ebx
c0011a42:	e8 5a 5e ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0011a47:	83 c4 10             	add    esp,0x10
c0011a4a:	83 f8 01             	cmp    eax,0x1
c0011a4d:	74 1a                	je     c0011a69 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c0011a4f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a54:	74 26                	je     c0011a7c <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c0011a56:	85 f6                	test   esi,esi
c0011a58:	0f 84 47 ff ff ff    	je     c00119a5 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a5e:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0011a64:	e9 3c ff ff ff       	jmp    c00119a5 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a69:	85 f6                	test   esi,esi
c0011a6b:	0f 84 34 ff ff ff    	je     c00119a5 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a71:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0011a77:	e9 29 ff ff ff       	jmp    c00119a5 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a7c:	85 f6                	test   esi,esi
c0011a7e:	0f 84 21 ff ff ff    	je     c00119a5 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011a84:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011a8a:	e9 16 ff ff ff       	jmp    c00119a5 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0011a8f <SysClose(regs*)>:
c0011a8f:	53                   	push   ebx
c0011a90:	83 ec 08             	sub    esp,0x8
c0011a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a97:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a9a:	83 f8 02             	cmp    eax,0x2
c0011a9d:	76 41                	jbe    c0011ae0 <SysClose(regs*)+0x51>
c0011a9f:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011aa5:	83 fa 01             	cmp    edx,0x1
c0011aa8:	76 2d                	jbe    c0011ad7 <SysClose(regs*)+0x48>
c0011aaa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011aaf:	77 2f                	ja     c0011ae0 <SysClose(regs*)+0x51>
c0011ab1:	83 ec 0c             	sub    esp,0xc
c0011ab4:	50                   	push   eax
c0011ab5:	e8 d7 18 00 00       	call   c0013391 <KeGetFileFromDescriptor(int)>
c0011aba:	83 c4 10             	add    esp,0x10
c0011abd:	89 c3                	mov    ebx,eax
c0011abf:	85 c0                	test   eax,eax
c0011ac1:	74 1d                	je     c0011ae0 <SysClose(regs*)+0x51>
c0011ac3:	83 ec 0c             	sub    esp,0xc
c0011ac6:	50                   	push   eax
c0011ac7:	e8 e2 66 ff ff       	call   c00081ae <File::close()>
c0011acc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ace:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ad1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ad4:	83 c4 10             	add    esp,0x10
c0011ad7:	31 c0                	xor    eax,eax
c0011ad9:	31 d2                	xor    edx,edx
c0011adb:	83 c4 08             	add    esp,0x8
c0011ade:	5b                   	pop    ebx
c0011adf:	c3                   	ret    
c0011ae0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ae5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011aea:	83 c4 08             	add    esp,0x8
c0011aed:	5b                   	pop    ebx
c0011aee:	c3                   	ret    

c0011aef <SysOpenDir(regs*)>:
c0011aef:	56                   	push   esi
c0011af0:	53                   	push   ebx
c0011af1:	83 ec 04             	sub    esp,0x4
c0011af4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011af8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011afb:	85 c9                	test   ecx,ecx
c0011afd:	74 5d                	je     c0011b5c <SysOpenDir(regs*)+0x6d>
c0011aff:	83 ec 0c             	sub    esp,0xc
c0011b02:	68 14 01 00 00       	push   0x114
c0011b07:	e8 bf e1 ff ff       	call   c000fccb <malloc>
c0011b0c:	83 c4 0c             	add    esp,0xc
c0011b0f:	89 c6                	mov    esi,eax
c0011b11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b19:	50                   	push   eax
c0011b1a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011b1d:	52                   	push   edx
c0011b1e:	56                   	push   esi
c0011b1f:	e8 ee 6a ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c0011b24:	83 c4 10             	add    esp,0x10
c0011b27:	85 f6                	test   esi,esi
c0011b29:	74 31                	je     c0011b5c <SysOpenDir(regs*)+0x6d>
c0011b2b:	83 ec 0c             	sub    esp,0xc
c0011b2e:	56                   	push   esi
c0011b2f:	e8 a6 6b ff ff       	call   c00086da <Directory::open()>
c0011b34:	83 c4 10             	add    esp,0x10
c0011b37:	85 c0                	test   eax,eax
c0011b39:	75 21                	jne    c0011b5c <SysOpenDir(regs*)+0x6d>
c0011b3b:	83 ec 0c             	sub    esp,0xc
c0011b3e:	56                   	push   esi
c0011b3f:	e8 50 15 00 00       	call   c0013094 <UnixFile::getFileDescriptor()>
c0011b44:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011b47:	83 c4 10             	add    esp,0x10
c0011b4a:	89 02                	mov    DWORD PTR [edx],eax
c0011b4c:	c1 f8 1f             	sar    eax,0x1f
c0011b4f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b52:	83 c4 04             	add    esp,0x4
c0011b55:	31 c0                	xor    eax,eax
c0011b57:	31 d2                	xor    edx,edx
c0011b59:	5b                   	pop    ebx
c0011b5a:	5e                   	pop    esi
c0011b5b:	c3                   	ret    
c0011b5c:	83 c4 04             	add    esp,0x4
c0011b5f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b64:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b69:	5b                   	pop    ebx
c0011b6a:	5e                   	pop    esi
c0011b6b:	c3                   	ret    

c0011b6c <SysMakeDir(regs*)>:
c0011b6c:	56                   	push   esi
c0011b6d:	53                   	push   ebx
c0011b6e:	83 ec 10             	sub    esp,0x10
c0011b71:	68 14 01 00 00       	push   0x114
c0011b76:	e8 50 e1 ff ff       	call   c000fccb <malloc>
c0011b7b:	83 c4 0c             	add    esp,0xc
c0011b7e:	89 c3                	mov    ebx,eax
c0011b80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b85:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b88:	50                   	push   eax
c0011b89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011b8d:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011b90:	52                   	push   edx
c0011b91:	53                   	push   ebx
c0011b92:	e8 7b 6a ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c0011b97:	83 c4 10             	add    esp,0x10
c0011b9a:	85 db                	test   ebx,ebx
c0011b9c:	74 2c                	je     c0011bca <SysMakeDir(regs*)+0x5e>
c0011b9e:	83 ec 0c             	sub    esp,0xc
c0011ba1:	53                   	push   ebx
c0011ba2:	e8 13 6d ff ff       	call   c00088ba <Directory::create()>
c0011ba7:	89 c6                	mov    esi,eax
c0011ba9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011bab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011bae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011bb1:	83 c4 10             	add    esp,0x10
c0011bb4:	31 c0                	xor    eax,eax
c0011bb6:	85 f6                	test   esi,esi
c0011bb8:	0f 95 c0             	setne  al
c0011bbb:	31 d2                	xor    edx,edx
c0011bbd:	f7 d8                	neg    eax
c0011bbf:	83 d2 00             	adc    edx,0x0
c0011bc2:	83 c4 04             	add    esp,0x4
c0011bc5:	f7 da                	neg    edx
c0011bc7:	5b                   	pop    ebx
c0011bc8:	5e                   	pop    esi
c0011bc9:	c3                   	ret    
c0011bca:	83 c4 04             	add    esp,0x4
c0011bcd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bd2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bd7:	5b                   	pop    ebx
c0011bd8:	5e                   	pop    esi
c0011bd9:	c3                   	ret    

c0011bda <SysCloseDir(regs*)>:
c0011bda:	53                   	push   ebx
c0011bdb:	83 ec 08             	sub    esp,0x8
c0011bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011be2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011be5:	8d 50 fd             	lea    edx,[eax-0x3]
c0011be8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011bee:	77 2f                	ja     c0011c1f <SysCloseDir(regs*)+0x45>
c0011bf0:	83 ec 0c             	sub    esp,0xc
c0011bf3:	50                   	push   eax
c0011bf4:	e8 98 17 00 00       	call   c0013391 <KeGetFileFromDescriptor(int)>
c0011bf9:	83 c4 10             	add    esp,0x10
c0011bfc:	89 c3                	mov    ebx,eax
c0011bfe:	85 c0                	test   eax,eax
c0011c00:	74 1d                	je     c0011c1f <SysCloseDir(regs*)+0x45>
c0011c02:	83 ec 0c             	sub    esp,0xc
c0011c05:	50                   	push   eax
c0011c06:	e8 2b 6b ff ff       	call   c0008736 <Directory::close()>
c0011c0b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011c0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011c10:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011c13:	83 c4 10             	add    esp,0x10
c0011c16:	31 c0                	xor    eax,eax
c0011c18:	31 d2                	xor    edx,edx
c0011c1a:	83 c4 08             	add    esp,0x8
c0011c1d:	5b                   	pop    ebx
c0011c1e:	c3                   	ret    
c0011c1f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c24:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c29:	83 c4 08             	add    esp,0x8
c0011c2c:	5b                   	pop    ebx
c0011c2d:	c3                   	ret    

c0011c2e <SysWait(regs*)>:
c0011c2e:	83 ec 10             	sub    esp,0x10
c0011c31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c35:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011c38:	52                   	push   edx
c0011c39:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011c3c:	51                   	push   ecx
c0011c3d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c40:	50                   	push   eax
c0011c41:	e8 3e 54 00 00       	call   c0017084 <waitTask(int, int*, int)>
c0011c46:	83 c4 1c             	add    esp,0x1c
c0011c49:	89 c2                	mov    edx,eax
c0011c4b:	c1 fa 1f             	sar    edx,0x1f
c0011c4e:	c3                   	ret    

c0011c4f <SysNotImpl(regs*)>:
c0011c4f:	83 ec 18             	sub    esp,0x18
c0011c52:	68 02 44 02 c0       	push   0xc0024402
c0011c57:	e8 b6 e3 ff ff       	call   c0010012 <KePanic(char const*)>
c0011c5c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c61:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c66:	83 c4 1c             	add    esp,0x1c
c0011c69:	c3                   	ret    

c0011c6a <SysPanic(regs*)>:
c0011c6a:	83 ec 18             	sub    esp,0x18
c0011c6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c71:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011c74:	50                   	push   eax
c0011c75:	e8 98 e3 ff ff       	call   c0010012 <KePanic(char const*)>
c0011c7a:	b8 01 00 00 00       	mov    eax,0x1
c0011c7f:	31 d2                	xor    edx,edx
c0011c81:	83 c4 1c             	add    esp,0x1c
c0011c84:	c3                   	ret    

c0011c85 <SysRmdir(regs*)>:
c0011c85:	56                   	push   esi
c0011c86:	53                   	push   ebx
c0011c87:	83 ec 20             	sub    esp,0x20
c0011c8a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c8e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011c91:	68 14 01 00 00       	push   0x114
c0011c96:	e8 30 e0 ff ff       	call   c000fccb <malloc>
c0011c9b:	6a 00                	push   0x0
c0011c9d:	89 c3                	mov    ebx,eax
c0011c9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ca4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ca7:	50                   	push   eax
c0011ca8:	56                   	push   esi
c0011ca9:	53                   	push   ebx
c0011caa:	e8 85 63 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0011caf:	83 c4 14             	add    esp,0x14
c0011cb2:	53                   	push   ebx
c0011cb3:	e8 66 66 ff ff       	call   c000831e <File::unlink()>
c0011cb8:	83 c4 10             	add    esp,0x10
c0011cbb:	85 db                	test   ebx,ebx
c0011cbd:	74 14                	je     c0011cd3 <SysRmdir(regs*)+0x4e>
c0011cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cc3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011cc5:	83 ec 0c             	sub    esp,0xc
c0011cc8:	53                   	push   ebx
c0011cc9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011ccc:	83 c4 10             	add    esp,0x10
c0011ccf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011cd3:	85 c0                	test   eax,eax
c0011cd5:	0f 95 c0             	setne  al
c0011cd8:	31 d2                	xor    edx,edx
c0011cda:	0f b6 c0             	movzx  eax,al
c0011cdd:	f7 d8                	neg    eax
c0011cdf:	83 d2 00             	adc    edx,0x0
c0011ce2:	83 c4 14             	add    esp,0x14
c0011ce5:	f7 da                	neg    edx
c0011ce7:	5b                   	pop    ebx
c0011ce8:	5e                   	pop    esi
c0011ce9:	c3                   	ret    

c0011cea <SysUnlink(regs*)>:
c0011cea:	56                   	push   esi
c0011ceb:	53                   	push   ebx
c0011cec:	83 ec 20             	sub    esp,0x20
c0011cef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cf3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011cf6:	68 14 01 00 00       	push   0x114
c0011cfb:	e8 cb df ff ff       	call   c000fccb <malloc>
c0011d00:	6a 00                	push   0x0
c0011d02:	89 c3                	mov    ebx,eax
c0011d04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d09:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d0c:	50                   	push   eax
c0011d0d:	56                   	push   esi
c0011d0e:	53                   	push   ebx
c0011d0f:	e8 20 63 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0011d14:	83 c4 14             	add    esp,0x14
c0011d17:	53                   	push   ebx
c0011d18:	e8 01 66 ff ff       	call   c000831e <File::unlink()>
c0011d1d:	83 c4 10             	add    esp,0x10
c0011d20:	85 db                	test   ebx,ebx
c0011d22:	74 14                	je     c0011d38 <SysUnlink(regs*)+0x4e>
c0011d24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d28:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d2a:	83 ec 0c             	sub    esp,0xc
c0011d2d:	53                   	push   ebx
c0011d2e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011d31:	83 c4 10             	add    esp,0x10
c0011d34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d38:	85 c0                	test   eax,eax
c0011d3a:	0f 95 c0             	setne  al
c0011d3d:	31 d2                	xor    edx,edx
c0011d3f:	0f b6 c0             	movzx  eax,al
c0011d42:	f7 d8                	neg    eax
c0011d44:	83 d2 00             	adc    edx,0x0
c0011d47:	83 c4 14             	add    esp,0x14
c0011d4a:	f7 da                	neg    edx
c0011d4c:	5b                   	pop    ebx
c0011d4d:	5e                   	pop    esi
c0011d4e:	c3                   	ret    

c0011d4f <SysGetArgv(regs*)>:
c0011d4f:	83 ec 0c             	sub    esp,0xc
c0011d52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d56:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011d59:	85 c0                	test   eax,eax
c0011d5b:	78 2c                	js     c0011d89 <SysGetArgv(regs*)+0x3a>
c0011d5d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011d63:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0011d66:	3b 81 76 05 00 00    	cmp    eax,DWORD PTR [ecx+0x576]
c0011d6c:	7d 1b                	jge    c0011d89 <SysGetArgv(regs*)+0x3a>
c0011d6e:	8b 84 81 7a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x57a]
c0011d75:	85 c0                	test   eax,eax
c0011d77:	74 18                	je     c0011d91 <SysGetArgv(regs*)+0x42>
c0011d79:	83 ec 08             	sub    esp,0x8
c0011d7c:	50                   	push   eax
c0011d7d:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011d80:	50                   	push   eax
c0011d81:	e8 ba e8 fe ff       	call   c0000640 <strcpy>
c0011d86:	83 c4 10             	add    esp,0x10
c0011d89:	31 c0                	xor    eax,eax
c0011d8b:	31 d2                	xor    edx,edx
c0011d8d:	83 c4 0c             	add    esp,0xc
c0011d90:	c3                   	ret    
c0011d91:	b8 01 00 00 00       	mov    eax,0x1
c0011d96:	31 d2                	xor    edx,edx
c0011d98:	83 c4 0c             	add    esp,0xc
c0011d9b:	c3                   	ret    

c0011d9c <SysUSleep(regs*)>:
c0011d9c:	83 ec 1c             	sub    esp,0x1c
c0011d9f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011da3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011da6:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011da9:	6a 00                	push   0x0
c0011dab:	6a 64                	push   0x64
c0011dad:	52                   	push   edx
c0011dae:	50                   	push   eax
c0011daf:	e8 30 fb 00 00       	call   c00218e4 <__udivdi3>
c0011db4:	83 c4 18             	add    esp,0x18
c0011db7:	52                   	push   edx
c0011db8:	50                   	push   eax
c0011db9:	e8 be 53 00 00       	call   c001717c <milliTenthSleep(unsigned long long)>
c0011dbe:	31 c0                	xor    eax,eax
c0011dc0:	31 d2                	xor    edx,edx
c0011dc2:	83 c4 1c             	add    esp,0x1c
c0011dc5:	c3                   	ret    

c0011dc6 <SysSpawn(regs*)>:
c0011dc6:	56                   	push   esi
c0011dc7:	53                   	push   ebx
c0011dc8:	83 ec 04             	sub    esp,0x4
c0011dcb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011dcf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011dd2:	85 f6                	test   esi,esi
c0011dd4:	75 0a                	jne    c0011de0 <SysSpawn(regs*)+0x1a>
c0011dd6:	83 c4 04             	add    esp,0x4
c0011dd9:	31 c0                	xor    eax,eax
c0011ddb:	31 d2                	xor    edx,edx
c0011ddd:	5b                   	pop    ebx
c0011dde:	5e                   	pop    esi
c0011ddf:	c3                   	ret    
c0011de0:	83 ec 0c             	sub    esp,0xc
c0011de3:	68 84 07 00 00       	push   0x784
c0011de8:	e8 de de ff ff       	call   c000fccb <malloc>
c0011ded:	83 c4 10             	add    esp,0x10
c0011df0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011df3:	89 c6                	mov    esi,eax
c0011df5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011df8:	85 c9                	test   ecx,ecx
c0011dfa:	74 39                	je     c0011e35 <SysSpawn(regs*)+0x6f>
c0011dfc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e01:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e04:	52                   	push   edx
c0011e05:	50                   	push   eax
c0011e06:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011e09:	50                   	push   eax
c0011e0a:	56                   	push   esi
c0011e0b:	e8 78 4a 00 00       	call   c0016888 <Process::Process(char const*, Process*, char**)>
c0011e10:	83 c4 10             	add    esp,0x10
c0011e13:	80 be 7e 07 00 00 00 	cmp    BYTE PTR [esi+0x77e],0x0
c0011e1a:	75 ba                	jne    c0011dd6 <SysSpawn(regs*)+0x10>
c0011e1c:	83 ec 0c             	sub    esp,0xc
c0011e1f:	56                   	push   esi
c0011e20:	e8 0b 50 00 00       	call   c0016e30 <Process::createUserThread()>
c0011e25:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e27:	83 c4 10             	add    esp,0x10
c0011e2a:	89 c2                	mov    edx,eax
c0011e2c:	83 c4 04             	add    esp,0x4
c0011e2f:	c1 fa 1f             	sar    edx,0x1f
c0011e32:	5b                   	pop    ebx
c0011e33:	5e                   	pop    esi
c0011e34:	c3                   	ret    
c0011e35:	31 c0                	xor    eax,eax
c0011e37:	eb cb                	jmp    c0011e04 <SysSpawn(regs*)+0x3e>

c0011e39 <SysGetEnv(regs*)>:
c0011e39:	57                   	push   edi
c0011e3a:	56                   	push   esi
c0011e3b:	53                   	push   ebx
c0011e3c:	83 ec 1c             	sub    esp,0x1c
c0011e3f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011e43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e48:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011e4b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011e4e:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0011e51:	51                   	push   ecx
c0011e52:	e8 c0 ca ff ff       	call   c000e917 <KeGetProcessTotalEnvCount(Process*)>
c0011e57:	83 c4 10             	add    esp,0x10
c0011e5a:	39 c7                	cmp    edi,eax
c0011e5c:	7c 14                	jl     c0011e72 <SysGetEnv(regs*)+0x39>
c0011e5e:	85 f6                	test   esi,esi
c0011e60:	75 0b                	jne    c0011e6d <SysGetEnv(regs*)+0x34>
c0011e62:	83 c4 10             	add    esp,0x10
c0011e65:	31 c0                	xor    eax,eax
c0011e67:	5b                   	pop    ebx
c0011e68:	31 d2                	xor    edx,edx
c0011e6a:	5e                   	pop    esi
c0011e6b:	5f                   	pop    edi
c0011e6c:	c3                   	ret    
c0011e6d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011e70:	eb f0                	jmp    c0011e62 <SysGetEnv(regs*)+0x29>
c0011e72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011e76:	83 ec 04             	sub    esp,0x4
c0011e79:	57                   	push   edi
c0011e7a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011e80:	8b 7a 40             	mov    edi,DWORD PTR [edx+0x40]
c0011e83:	57                   	push   edi
c0011e84:	50                   	push   eax
c0011e85:	e8 ad ca ff ff       	call   c000e937 <KeGetProcessEnvPair(Process*, int)>
c0011e8a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011e8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011e91:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011e95:	83 c4 0c             	add    esp,0xc
c0011e98:	85 d2                	test   edx,edx
c0011e9a:	75 23                	jne    c0011ebf <SysGetEnv(regs*)+0x86>
c0011e9c:	83 ec 0c             	sub    esp,0xc
c0011e9f:	50                   	push   eax
c0011ea0:	e8 cb e6 fe ff       	call   c0000570 <strlen>
c0011ea5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ea8:	89 c3                	mov    ebx,eax
c0011eaa:	e8 c1 e6 fe ff       	call   c0000570 <strlen>
c0011eaf:	83 c4 10             	add    esp,0x10
c0011eb2:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011eb6:	83 c4 10             	add    esp,0x10
c0011eb9:	31 d2                	xor    edx,edx
c0011ebb:	5b                   	pop    ebx
c0011ebc:	5e                   	pop    esi
c0011ebd:	5f                   	pop    edi
c0011ebe:	c3                   	ret    
c0011ebf:	83 ec 08             	sub    esp,0x8
c0011ec2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011ec5:	50                   	push   eax
c0011ec6:	56                   	push   esi
c0011ec7:	e8 74 e7 fe ff       	call   c0000640 <strcpy>
c0011ecc:	58                   	pop    eax
c0011ecd:	5a                   	pop    edx
c0011ece:	68 1c 44 02 c0       	push   0xc002441c
c0011ed3:	56                   	push   esi
c0011ed4:	e8 67 e9 fe ff       	call   c0000840 <strcat>
c0011ed9:	59                   	pop    ecx
c0011eda:	5b                   	pop    ebx
c0011edb:	57                   	push   edi
c0011edc:	56                   	push   esi
c0011edd:	e8 5e e9 fe ff       	call   c0000840 <strcat>
c0011ee2:	83 c4 10             	add    esp,0x10
c0011ee5:	e9 78 ff ff ff       	jmp    c0011e62 <SysGetEnv(regs*)+0x29>

c0011eea <SysSetFatAttrib(regs*)>:
c0011eea:	57                   	push   edi
c0011eeb:	56                   	push   esi
c0011eec:	53                   	push   ebx
c0011eed:	83 ec 1c             	sub    esp,0x1c
c0011ef0:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011ef4:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011ef7:	68 14 01 00 00       	push   0x114
c0011efc:	e8 ca dd ff ff       	call   c000fccb <malloc>
c0011f01:	83 c4 0c             	add    esp,0xc
c0011f04:	89 c3                	mov    ebx,eax
c0011f06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f0b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011f0e:	50                   	push   eax
c0011f0f:	57                   	push   edi
c0011f10:	53                   	push   ebx
c0011f11:	e8 1c 62 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0011f16:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011f19:	83 c4 0c             	add    esp,0xc
c0011f1c:	0f b6 d4             	movzx  edx,ah
c0011f1f:	0f b6 c0             	movzx  eax,al
c0011f22:	52                   	push   edx
c0011f23:	50                   	push   eax
c0011f24:	53                   	push   ebx
c0011f25:	e8 8e 64 ff ff       	call   c00083b8 <File::chfatattr(unsigned char, unsigned char)>
c0011f2a:	83 c4 10             	add    esp,0x10
c0011f2d:	85 db                	test   ebx,ebx
c0011f2f:	74 14                	je     c0011f45 <SysSetFatAttrib(regs*)+0x5b>
c0011f31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011f35:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011f37:	83 ec 0c             	sub    esp,0xc
c0011f3a:	53                   	push   ebx
c0011f3b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011f3e:	83 c4 10             	add    esp,0x10
c0011f41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f45:	85 c0                	test   eax,eax
c0011f47:	0f 95 c0             	setne  al
c0011f4a:	31 d2                	xor    edx,edx
c0011f4c:	0f b6 c0             	movzx  eax,al
c0011f4f:	f7 d8                	neg    eax
c0011f51:	83 d2 00             	adc    edx,0x0
c0011f54:	83 c4 10             	add    esp,0x10
c0011f57:	f7 da                	neg    edx
c0011f59:	5b                   	pop    ebx
c0011f5a:	5e                   	pop    esi
c0011f5b:	5f                   	pop    edi
c0011f5c:	c3                   	ret    

c0011f5d <SysShutdown(regs*)>:
c0011f5d:	83 ec 1c             	sub    esp,0x1c
c0011f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f64:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011f67:	85 c9                	test   ecx,ecx
c0011f69:	74 18                	je     c0011f83 <SysShutdown(regs*)+0x26>
c0011f6b:	83 f9 01             	cmp    ecx,0x1
c0011f6e:	74 26                	je     c0011f96 <SysShutdown(regs*)+0x39>
c0011f70:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f75:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f7a:	83 f9 02             	cmp    ecx,0x2
c0011f7d:	74 24                	je     c0011fa3 <SysShutdown(regs*)+0x46>
c0011f7f:	83 c4 1c             	add    esp,0x1c
c0011f82:	c3                   	ret    
c0011f83:	e8 08 c4 ff ff       	call   c000e390 <KeShutdown()>
c0011f88:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f8d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f92:	83 c4 1c             	add    esp,0x1c
c0011f95:	c3                   	ret    
c0011f96:	e8 19 c4 ff ff       	call   c000e3b4 <KeSleep()>
c0011f9b:	31 c0                	xor    eax,eax
c0011f9d:	31 d2                	xor    edx,edx
c0011f9f:	83 c4 1c             	add    esp,0x1c
c0011fa2:	c3                   	ret    
c0011fa3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011fa7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011fab:	e8 10 c4 ff ff       	call   c000e3c0 <KeRestart()>
c0011fb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011fb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011fb8:	eb c5                	jmp    c0011f7f <SysShutdown(regs*)+0x22>

c0011fba <SysPipe(regs*)>:
c0011fba:	57                   	push   edi
c0011fbb:	56                   	push   esi
c0011fbc:	53                   	push   ebx
c0011fbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fc1:	83 ec 0c             	sub    esp,0xc
c0011fc4:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011fc7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011fca:	6a 20                	push   0x20
c0011fcc:	e8 fa dc ff ff       	call   c000fccb <malloc>
c0011fd1:	89 c3                	mov    ebx,eax
c0011fd3:	58                   	pop    eax
c0011fd4:	5a                   	pop    edx
c0011fd5:	68 00 50 00 00       	push   0x5000
c0011fda:	53                   	push   ebx
c0011fdb:	e8 b4 e8 ff ff       	call   c0010894 <Pipe::Pipe(int)>
c0011fe0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fe3:	e8 ac 10 00 00       	call   c0013094 <UnixFile::getFileDescriptor()>
c0011fe8:	89 07                	mov    DWORD PTR [edi],eax
c0011fea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011fed:	e8 a2 10 00 00       	call   c0013094 <UnixFile::getFileDescriptor()>
c0011ff2:	83 c4 10             	add    esp,0x10
c0011ff5:	89 06                	mov    DWORD PTR [esi],eax
c0011ff7:	31 d2                	xor    edx,edx
c0011ff9:	5b                   	pop    ebx
c0011ffa:	31 c0                	xor    eax,eax
c0011ffc:	5e                   	pop    esi
c0011ffd:	5f                   	pop    edi
c0011ffe:	c3                   	ret    

c0011fff <SysGetUnixTime(regs*)>:
c0011fff:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012004:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001200a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001200e:	e9 cf 70 ff ff       	jmp    c00090e2 <Clock::timeInSecondsLocal()>

c0012013 <string_ends_with(char const*, char const*)>:
c0012013:	57                   	push   edi
c0012014:	56                   	push   esi
c0012015:	53                   	push   ebx
c0012016:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001201a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001201e:	83 ec 0c             	sub    esp,0xc
c0012021:	53                   	push   ebx
c0012022:	e8 49 e5 fe ff       	call   c0000570 <strlen>
c0012027:	89 3c 24             	mov    DWORD PTR [esp],edi
c001202a:	89 c6                	mov    esi,eax
c001202c:	e8 3f e5 fe ff       	call   c0000570 <strlen>
c0012031:	83 c4 10             	add    esp,0x10
c0012034:	39 c6                	cmp    esi,eax
c0012036:	7d 06                	jge    c001203e <string_ends_with(char const*, char const*)+0x2b>
c0012038:	5b                   	pop    ebx
c0012039:	31 c0                	xor    eax,eax
c001203b:	5e                   	pop    esi
c001203c:	5f                   	pop    edi
c001203d:	c3                   	ret    
c001203e:	83 ec 08             	sub    esp,0x8
c0012041:	29 c6                	sub    esi,eax
c0012043:	57                   	push   edi
c0012044:	01 f3                	add    ebx,esi
c0012046:	53                   	push   ebx
c0012047:	e8 04 e7 fe ff       	call   c0000750 <strcmp>
c001204c:	83 c4 10             	add    esp,0x10
c001204f:	85 c0                	test   eax,eax
c0012051:	5b                   	pop    ebx
c0012052:	0f 94 c0             	sete   al
c0012055:	5e                   	pop    esi
c0012056:	0f b6 c0             	movzx  eax,al
c0012059:	5f                   	pop    edi
c001205a:	c3                   	ret    

c001205b <SysOpen(regs*)>:
c001205b:	56                   	push   esi
c001205c:	53                   	push   ebx
c001205d:	81 ec 04 01 00 00    	sub    esp,0x104
c0012063:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001206a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001206d:	85 c0                	test   eax,eax
c001206f:	0f 84 bc 01 00 00    	je     c0012231 <SysOpen(regs*)+0x1d6>
c0012075:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012078:	85 c0                	test   eax,eax
c001207a:	0f 84 b1 01 00 00    	je     c0012231 <SysOpen(regs*)+0x1d6>
c0012080:	6a 00                	push   0x0
c0012082:	68 1e 44 02 c0       	push   0xc002441e
c0012087:	50                   	push   eax
c0012088:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001208c:	56                   	push   esi
c001208d:	e8 88 5d ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0012092:	89 34 24             	mov    DWORD PTR [esp],esi
c0012095:	e8 d6 e4 fe ff       	call   c0000570 <strlen>
c001209a:	83 c4 10             	add    esp,0x10
c001209d:	83 e8 01             	sub    eax,0x1
c00120a0:	74 21                	je     c00120c3 <SysOpen(regs*)+0x68>
c00120a2:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00120a6:	eb 12                	jmp    c00120ba <SysOpen(regs*)+0x5f>
c00120a8:	83 fa 3a             	cmp    edx,0x3a
c00120ab:	74 12                	je     c00120bf <SysOpen(regs*)+0x64>
c00120ad:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00120b1:	83 e8 01             	sub    eax,0x1
c00120b4:	74 0d                	je     c00120c3 <SysOpen(regs*)+0x68>
c00120b6:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00120ba:	83 fa 2e             	cmp    edx,0x2e
c00120bd:	75 e9                	jne    c00120a8 <SysOpen(regs*)+0x4d>
c00120bf:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00120c3:	83 ec 08             	sub    esp,0x8
c00120c6:	68 22 44 02 c0       	push   0xc0024422
c00120cb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00120ce:	50                   	push   eax
c00120cf:	e8 3f ff ff ff       	call   c0012013 <string_ends_with(char const*, char const*)>
c00120d4:	83 c4 10             	add    esp,0x10
c00120d7:	85 c0                	test   eax,eax
c00120d9:	74 1d                	je     c00120f8 <SysOpen(regs*)+0x9d>
c00120db:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120de:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00120e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120eb:	81 c4 04 01 00 00    	add    esp,0x104
c00120f1:	31 c0                	xor    eax,eax
c00120f3:	31 d2                	xor    edx,edx
c00120f5:	5b                   	pop    ebx
c00120f6:	5e                   	pop    esi
c00120f7:	c3                   	ret    
c00120f8:	83 ec 08             	sub    esp,0x8
c00120fb:	68 27 44 02 c0       	push   0xc0024427
c0012100:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012103:	50                   	push   eax
c0012104:	e8 0a ff ff ff       	call   c0012013 <string_ends_with(char const*, char const*)>
c0012109:	83 c4 10             	add    esp,0x10
c001210c:	85 c0                	test   eax,eax
c001210e:	75 cb                	jne    c00120db <SysOpen(regs*)+0x80>
c0012110:	83 ec 08             	sub    esp,0x8
c0012113:	68 23 44 02 c0       	push   0xc0024423
c0012118:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001211b:	50                   	push   eax
c001211c:	e8 2f e6 fe ff       	call   c0000750 <strcmp>
c0012121:	83 c4 10             	add    esp,0x10
c0012124:	85 c0                	test   eax,eax
c0012126:	74 b3                	je     c00120db <SysOpen(regs*)+0x80>
c0012128:	83 ec 08             	sub    esp,0x8
c001212b:	68 22 44 02 c0       	push   0xc0024422
c0012130:	56                   	push   esi
c0012131:	e8 dd fe ff ff       	call   c0012013 <string_ends_with(char const*, char const*)>
c0012136:	83 c4 10             	add    esp,0x10
c0012139:	85 c0                	test   eax,eax
c001213b:	75 9e                	jne    c00120db <SysOpen(regs*)+0x80>
c001213d:	83 ec 08             	sub    esp,0x8
c0012140:	68 2c 44 02 c0       	push   0xc002442c
c0012145:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012148:	50                   	push   eax
c0012149:	e8 c5 fe ff ff       	call   c0012013 <string_ends_with(char const*, char const*)>
c001214e:	83 c4 10             	add    esp,0x10
c0012151:	85 c0                	test   eax,eax
c0012153:	0f 85 eb 00 00 00    	jne    c0012244 <SysOpen(regs*)+0x1e9>
c0012159:	83 ec 08             	sub    esp,0x8
c001215c:	68 31 44 02 c0       	push   0xc0024431
c0012161:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012164:	50                   	push   eax
c0012165:	e8 a9 fe ff ff       	call   c0012013 <string_ends_with(char const*, char const*)>
c001216a:	83 c4 10             	add    esp,0x10
c001216d:	85 c0                	test   eax,eax
c001216f:	0f 85 cf 00 00 00    	jne    c0012244 <SysOpen(regs*)+0x1e9>
c0012175:	83 ec 08             	sub    esp,0x8
c0012178:	68 2d 44 02 c0       	push   0xc002442d
c001217d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012180:	51                   	push   ecx
c0012181:	e8 ca e5 fe ff       	call   c0000750 <strcmp>
c0012186:	83 c4 10             	add    esp,0x10
c0012189:	85 c0                	test   eax,eax
c001218b:	0f 84 b3 00 00 00    	je     c0012244 <SysOpen(regs*)+0x1e9>
c0012191:	83 ec 08             	sub    esp,0x8
c0012194:	68 2c 44 02 c0       	push   0xc002442c
c0012199:	56                   	push   esi
c001219a:	e8 74 fe ff ff       	call   c0012013 <string_ends_with(char const*, char const*)>
c001219f:	83 c4 10             	add    esp,0x10
c00121a2:	85 c0                	test   eax,eax
c00121a4:	0f 85 9a 00 00 00    	jne    c0012244 <SysOpen(regs*)+0x1e9>
c00121aa:	83 ec 0c             	sub    esp,0xc
c00121ad:	68 14 01 00 00       	push   0x114
c00121b2:	e8 14 db ff ff       	call   c000fccb <malloc>
c00121b7:	83 c4 0c             	add    esp,0xc
c00121ba:	89 c6                	mov    esi,eax
c00121bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121c4:	50                   	push   eax
c00121c5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00121c8:	52                   	push   edx
c00121c9:	56                   	push   esi
c00121ca:	e8 63 5f ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00121cf:	83 c4 10             	add    esp,0x10
c00121d2:	85 f6                	test   esi,esi
c00121d4:	74 5b                	je     c0012231 <SysOpen(regs*)+0x1d6>
c00121d6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00121d9:	0f b6 c2             	movzx  eax,dl
c00121dc:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00121df:	89 d0                	mov    eax,edx
c00121e1:	83 e0 01             	and    eax,0x1
c00121e4:	f6 c2 02             	test   dl,0x2
c00121e7:	74 03                	je     c00121ec <SysOpen(regs*)+0x191>
c00121e9:	83 c8 02             	or     eax,0x2
c00121ec:	f6 c2 04             	test   dl,0x4
c00121ef:	74 03                	je     c00121f4 <SysOpen(regs*)+0x199>
c00121f1:	83 c8 04             	or     eax,0x4
c00121f4:	f6 c2 08             	test   dl,0x8
c00121f7:	74 03                	je     c00121fc <SysOpen(regs*)+0x1a1>
c00121f9:	83 c8 0a             	or     eax,0xa
c00121fc:	80 e2 10             	and    dl,0x10
c00121ff:	74 03                	je     c0012204 <SysOpen(regs*)+0x1a9>
c0012201:	83 c8 12             	or     eax,0x12
c0012204:	83 ec 08             	sub    esp,0x8
c0012207:	50                   	push   eax
c0012208:	56                   	push   esi
c0012209:	e8 42 5f ff ff       	call   c0008150 <File::open(FileOpenMode)>
c001220e:	83 c4 10             	add    esp,0x10
c0012211:	85 c0                	test   eax,eax
c0012213:	75 1c                	jne    c0012231 <SysOpen(regs*)+0x1d6>
c0012215:	83 ec 0c             	sub    esp,0xc
c0012218:	56                   	push   esi
c0012219:	e8 76 0e 00 00       	call   c0013094 <UnixFile::getFileDescriptor()>
c001221e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012221:	83 c4 10             	add    esp,0x10
c0012224:	89 02                	mov    DWORD PTR [edx],eax
c0012226:	c1 f8 1f             	sar    eax,0x1f
c0012229:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001222c:	e9 ba fe ff ff       	jmp    c00120eb <SysOpen(regs*)+0x90>
c0012231:	81 c4 04 01 00 00    	add    esp,0x104
c0012237:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001223c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012241:	5b                   	pop    ebx
c0012242:	5e                   	pop    esi
c0012243:	c3                   	ret    
c0012244:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012247:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001224d:	e9 92 fe ff ff       	jmp    c00120e4 <SysOpen(regs*)+0x89>

c0012252 <KeSystemCall(regs*, void*)>:
c0012252:	53                   	push   ebx
c0012253:	83 ec 08             	sub    esp,0x8
c0012256:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001225a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001225d:	83 f8 42             	cmp    eax,0x42
c0012260:	77 16                	ja     c0012278 <KeSystemCall(regs*, void*)+0x26>
c0012262:	8b 14 85 e0 66 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9920]
c0012269:	85 d2                	test   edx,edx
c001226b:	74 0b                	je     c0012278 <KeSystemCall(regs*, void*)+0x26>
c001226d:	83 ec 0c             	sub    esp,0xc
c0012270:	53                   	push   ebx
c0012271:	ff d2                	call   edx
c0012273:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012276:	eb 0d                	jmp    c0012285 <KeSystemCall(regs*, void*)+0x33>
c0012278:	52                   	push   edx
c0012279:	52                   	push   edx
c001227a:	50                   	push   eax
c001227b:	68 36 44 02 c0       	push   0xc0024436
c0012280:	e8 df 4c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012285:	83 c4 10             	add    esp,0x10
c0012288:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001228d:	31 d2                	xor    edx,edx
c001228f:	83 c4 08             	add    esp,0x8
c0012292:	5b                   	pop    ebx
c0012293:	c3                   	ret    

c0012294 <VgaText::isAtty()>:
c0012294:	b0 01                	mov    al,0x1
c0012296:	c3                   	ret    
c0012297:	90                   	nop

c0012298 <VgaText::~VgaText()>:
c0012298:	83 ec 0c             	sub    esp,0xc
c001229b:	ba a0 44 02 c0       	mov    edx,0xc00244a0
c00122a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122a4:	89 10                	mov    DWORD PTR [eax],edx
c00122a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122aa:	83 ec 0c             	sub    esp,0xc
c00122ad:	50                   	push   eax
c00122ae:	e8 cf 0f 00 00       	call   c0013282 <UnixFile::~UnixFile()>
c00122b3:	83 c4 10             	add    esp,0x10
c00122b6:	90                   	nop
c00122b7:	83 c4 0c             	add    esp,0xc
c00122ba:	c3                   	ret    
c00122bb:	90                   	nop

c00122bc <VgaText::~VgaText()>:
c00122bc:	83 ec 0c             	sub    esp,0xc
c00122bf:	83 ec 0c             	sub    esp,0xc
c00122c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122c6:	e8 cd ff ff ff       	call   c0012298 <VgaText::~VgaText()>
c00122cb:	83 c4 10             	add    esp,0x10
c00122ce:	83 ec 08             	sub    esp,0x8
c00122d1:	68 84 01 00 00       	push   0x184
c00122d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122da:	e8 74 b0 ff ff       	call   c000d353 <operator delete(void*, unsigned long)>
c00122df:	83 c4 10             	add    esp,0x10
c00122e2:	83 c4 0c             	add    esp,0xc
c00122e5:	c3                   	ret    

c00122e6 <VgaText::read(unsigned long long, void*, int*)>:
c00122e6:	83 ec 10             	sub    esp,0x10
c00122e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00122f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122f5:	e8 53 82 ff ff       	call   c000a54d <readKeyboard(VgaText*, char*, unsigned long)>
c00122fa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00122fe:	89 02                	mov    DWORD PTR [edx],eax
c0012300:	31 c0                	xor    eax,eax
c0012302:	83 c4 1c             	add    esp,0x1c
c0012305:	c3                   	ret    

c0012306 <setTerminalScrollLock(bool)>:
c0012306:	c3                   	ret    

c0012307 <doTerminalCycle()>:
c0012307:	c3                   	ret    

c0012308 <addToTerminalCycle(VgaText*)>:
c0012308:	c3                   	ret    

c0012309 <scrollTerminalScrollLock(int)>:
c0012309:	c3                   	ret    

c001230a <VgaText::updateTitle()>:
c001230a:	c3                   	ret    
c001230b:	90                   	nop

c001230c <VgaText::load()>:
c001230c:	c3                   	ret    
c001230d:	90                   	nop

c001230e <VgaText::updateCursor()>:
c001230e:	83 ec 14             	sub    esp,0x14
c0012311:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012315:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0012318:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001231b:	e8 e0 8e 00 00       	call   c001b200 <HalConsoleCursorUpdate(int, int)>
c0012320:	83 c4 1c             	add    esp,0x1c
c0012323:	c3                   	ret    

c0012324 <VgaText::doANSI_SGR(int)>:
c0012324:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001232c:	85 d2                	test   edx,edx
c001232e:	75 0b                	jne    c001233b <VgaText::doANSI_SGR(int)+0x17>
c0012330:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0012333:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012336:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0012339:	eb 59                	jmp    c0012394 <VgaText::doANSI_SGR(int)+0x70>
c001233b:	83 fa 07             	cmp    edx,0x7
c001233e:	75 0b                	jne    c001234b <VgaText::doANSI_SGR(int)+0x27>
c0012340:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0012343:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0012346:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0012349:	eb 49                	jmp    c0012394 <VgaText::doANSI_SGR(int)+0x70>
c001234b:	83 fa 1b             	cmp    edx,0x1b
c001234e:	74 e0                	je     c0012330 <VgaText::doANSI_SGR(int)+0xc>
c0012350:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0012353:	83 f9 07             	cmp    ecx,0x7
c0012356:	77 09                	ja     c0012361 <VgaText::doANSI_SGR(int)+0x3d>
c0012358:	8b 14 8d 20 68 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd97e0]
c001235f:	eb 20                	jmp    c0012381 <VgaText::doANSI_SGR(int)+0x5d>
c0012361:	8d 4a d8             	lea    ecx,[edx-0x28]
c0012364:	83 f9 07             	cmp    ecx,0x7
c0012367:	77 09                	ja     c0012372 <VgaText::doANSI_SGR(int)+0x4e>
c0012369:	8b 14 8d 20 68 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd97e0]
c0012370:	eb 22                	jmp    c0012394 <VgaText::doANSI_SGR(int)+0x70>
c0012372:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0012375:	83 f9 07             	cmp    ecx,0x7
c0012378:	77 0b                	ja     c0012385 <VgaText::doANSI_SGR(int)+0x61>
c001237a:	8b 14 95 d8 66 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9928]
c0012381:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0012384:	c3                   	ret    
c0012385:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0012388:	83 f9 07             	cmp    ecx,0x7
c001238b:	77 0a                	ja     c0012397 <VgaText::doANSI_SGR(int)+0x73>
c001238d:	8b 14 95 b0 66 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9950]
c0012394:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0012397:	c3                   	ret    

c0012398 <VgaText::setDefaultBgColour(VgaColour)>:
c0012398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001239c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123a0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00123a3:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00123a6:	c3                   	ret    
c00123a7:	90                   	nop

c00123a8 <VgaText::setDefaultFgColour(VgaColour)>:
c00123a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123b0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00123b3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00123b6:	c3                   	ret    
c00123b7:	90                   	nop

c00123b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00123b8:	53                   	push   ebx
c00123b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00123bd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00123c5:	51                   	push   ecx
c00123c6:	e8 cd ff ff ff       	call   c0012398 <VgaText::setDefaultBgColour(VgaColour)>
c00123cb:	58                   	pop    eax
c00123cc:	5a                   	pop    edx
c00123cd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00123d1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00123d5:	5b                   	pop    ebx
c00123d6:	eb d0                	jmp    c00123a8 <VgaText::setDefaultFgColour(VgaColour)>

c00123d8 <VgaText::setTitleTextColour(VgaColour)>:
c00123d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123e0:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00123e3:	c3                   	ret    

c00123e4 <VgaText::setTitleColour(VgaColour)>:
c00123e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123ec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00123ef:	c3                   	ret    

c00123f0 <VgaText::setTitle(char*)>:
c00123f0:	c3                   	ret    
c00123f1:	90                   	nop

c00123f2 <VgaText::combineColours(unsigned char, unsigned char)>:
c00123f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123f6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00123fb:	83 e0 0f             	and    eax,0xf
c00123fe:	c1 e2 04             	shl    edx,0x4
c0012401:	09 d0                	or     eax,edx
c0012403:	c3                   	ret    

c0012404 <VgaText::scrollScreen()>:
c0012404:	55                   	push   ebp
c0012405:	57                   	push   edi
c0012406:	56                   	push   esi
c0012407:	be 01 00 00 00       	mov    esi,0x1
c001240c:	53                   	push   ebx
c001240d:	83 ec 0c             	sub    esp,0xc
c0012410:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012414:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0012417:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001241d:	31 ff                	xor    edi,edi
c001241f:	01 e9                	add    ecx,ebp
c0012421:	8a 01                	mov    al,BYTE PTR [ecx]
c0012423:	83 fe 18             	cmp    esi,0x18
c0012426:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c001242c:	75 20                	jne    c001244e <VgaText::scrollScreen()+0x4a>
c001242e:	f7 c7 01 00 00 00    	test   edi,0x1
c0012434:	74 15                	je     c001244b <VgaText::scrollScreen()+0x47>
c0012436:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001243a:	50                   	push   eax
c001243b:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001243f:	50                   	push   eax
c0012440:	e8 ad ff ff ff       	call   c00123f2 <VgaText::combineColours(unsigned char, unsigned char)>
c0012445:	5a                   	pop    edx
c0012446:	5a                   	pop    edx
c0012447:	88 01                	mov    BYTE PTR [ecx],al
c0012449:	eb 03                	jmp    c001244e <VgaText::scrollScreen()+0x4a>
c001244b:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c001244e:	47                   	inc    edi
c001244f:	41                   	inc    ecx
c0012450:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0012456:	75 c9                	jne    c0012421 <VgaText::scrollScreen()+0x1d>
c0012458:	46                   	inc    esi
c0012459:	83 fe 19             	cmp    esi,0x19
c001245c:	75 b9                	jne    c0012417 <VgaText::scrollScreen()+0x13>
c001245e:	39 1d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,ebx
c0012464:	75 1f                	jne    c0012485 <VgaText::scrollScreen()+0x81>
c0012466:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001246a:	74 05                	je     c0012471 <VgaText::scrollScreen()+0x6d>
c001246c:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001246f:	eb 14                	jmp    c0012485 <VgaText::scrollScreen()+0x81>
c0012471:	50                   	push   eax
c0012472:	50                   	push   eax
c0012473:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0012477:	50                   	push   eax
c0012478:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001247c:	50                   	push   eax
c001247d:	e8 12 8c 00 00       	call   c001b094 <HalConsoleScroll(int, int)>
c0012482:	83 c4 10             	add    esp,0x10
c0012485:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012489:	83 c4 0c             	add    esp,0xc
c001248c:	5b                   	pop    ebx
c001248d:	5e                   	pop    esi
c001248e:	5f                   	pop    edi
c001248f:	5d                   	pop    ebp
c0012490:	e9 79 fe ff ff       	jmp    c001230e <VgaText::updateCursor()>
c0012495:	90                   	nop

c0012496 <VgaText::combineCharAndColour(char, unsigned char)>:
c0012496:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001249b:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00124a0:	c1 e0 08             	shl    eax,0x8
c00124a3:	09 d0                	or     eax,edx
c00124a5:	c3                   	ret    

c00124a6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00124a6:	55                   	push   ebp
c00124a7:	57                   	push   edi
c00124a8:	56                   	push   esi
c00124a9:	53                   	push   ebx
c00124aa:	83 ec 1c             	sub    esp,0x1c
c00124ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00124b1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00124b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00124b9:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c00124bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00124c0:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00124c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124c8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00124cc:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00124d0:	85 ed                	test   ebp,ebp
c00124d2:	75 14                	jne    c00124e8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c00124d4:	c7 44 24 30 4a 44 02 c0 	mov    DWORD PTR [esp+0x30],0xc002444a
c00124dc:	83 c4 1c             	add    esp,0x1c
c00124df:	5b                   	pop    ebx
c00124e0:	5e                   	pop    esi
c00124e1:	5f                   	pop    edi
c00124e2:	5d                   	pop    ebp
c00124e3:	e9 2a db ff ff       	jmp    c0010012 <KePanic(char const*)>
c00124e8:	50                   	push   eax
c00124e9:	50                   	push   eax
c00124ea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00124ef:	50                   	push   eax
c00124f0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00124f5:	50                   	push   eax
c00124f6:	e8 f7 fe ff ff       	call   c00123f2 <VgaText::combineColours(unsigned char, unsigned char)>
c00124fb:	5a                   	pop    edx
c00124fc:	0f be c9             	movsx  ecx,cl
c00124ff:	5a                   	pop    edx
c0012500:	0f b6 c0             	movzx  eax,al
c0012503:	50                   	push   eax
c0012504:	51                   	push   ecx
c0012505:	e8 8c ff ff ff       	call   c0012496 <VgaText::combineCharAndColour(char, unsigned char)>
c001250a:	6b d6 50             	imul   edx,esi,0x50
c001250d:	83 c4 10             	add    esp,0x10
c0012510:	01 da                	add    edx,ebx
c0012512:	0f b7 d2             	movzx  edx,dx
c0012515:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c001251a:	39 3d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,edi
c0012520:	75 28                	jne    c001254a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0012522:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012526:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001252a:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c001252e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012532:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0012536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001253a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001253e:	83 c4 1c             	add    esp,0x1c
c0012541:	5b                   	pop    ebx
c0012542:	5e                   	pop    esi
c0012543:	5f                   	pop    edi
c0012544:	5d                   	pop    ebp
c0012545:	e9 52 8c 00 00       	jmp    c001b19c <HalConsoleWriteCharacter(char, int, int, int, int)>
c001254a:	83 c4 1c             	add    esp,0x1c
c001254d:	5b                   	pop    ebx
c001254e:	5e                   	pop    esi
c001254f:	5f                   	pop    edi
c0012550:	5d                   	pop    ebp
c0012551:	c3                   	ret    

c0012552 <VgaText::getCursorX()>:
c0012552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012556:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0012559:	c3                   	ret    

c001255a <VgaText::getCursorY()>:
c001255a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001255e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012561:	c3                   	ret    

c0012562 <VgaText::setCursor(int, int)>:
c0012562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012566:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001256a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001256d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012571:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0012574:	e9 95 fd ff ff       	jmp    c001230e <VgaText::updateCursor()>

c0012579 <setActiveTerminal(VgaText*)>:
c0012579:	53                   	push   ebx
c001257a:	83 ec 08             	sub    esp,0x8
c001257d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012581:	85 db                	test   ebx,ebx
c0012583:	75 11                	jne    c0012596 <setActiveTerminal(VgaText*)+0x1d>
c0012585:	c7 44 24 10 5a 44 02 c0 	mov    DWORD PTR [esp+0x10],0xc002445a
c001258d:	83 c4 08             	add    esp,0x8
c0012590:	5b                   	pop    ebx
c0012591:	e9 7c da ff ff       	jmp    c0010012 <KePanic(char const*)>
c0012596:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c001259b:	85 c0                	test   eax,eax
c001259d:	74 0c                	je     c00125ab <setActiveTerminal(VgaText*)+0x32>
c001259f:	83 ec 0c             	sub    esp,0xc
c00125a2:	50                   	push   eax
c00125a3:	e8 66 fd ff ff       	call   c001230e <VgaText::updateCursor()>
c00125a8:	83 c4 10             	add    esp,0x10
c00125ab:	89 1d b4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1b4,ebx
c00125b1:	50                   	push   eax
c00125b2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00125b5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00125b8:	53                   	push   ebx
c00125b9:	e8 a4 ff ff ff       	call   c0012562 <VgaText::setCursor(int, int)>
c00125be:	83 c4 18             	add    esp,0x18
c00125c1:	5b                   	pop    ebx
c00125c2:	c3                   	ret    
c00125c3:	90                   	nop

c00125c4 <VgaText::clearScreen()>:
c00125c4:	57                   	push   edi
c00125c5:	56                   	push   esi
c00125c6:	31 f6                	xor    esi,esi
c00125c8:	53                   	push   ebx
c00125c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125cd:	52                   	push   edx
c00125ce:	6a 00                	push   0x0
c00125d0:	6a 00                	push   0x0
c00125d2:	53                   	push   ebx
c00125d3:	e8 8a ff ff ff       	call   c0012562 <VgaText::setCursor(int, int)>
c00125d8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00125df:	83 c4 10             	add    esp,0x10
c00125e2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00125e5:	7e 20                	jle    c0012607 <VgaText::clearScreen()+0x43>
c00125e7:	31 ff                	xor    edi,edi
c00125e9:	50                   	push   eax
c00125ea:	50                   	push   eax
c00125eb:	56                   	push   esi
c00125ec:	57                   	push   edi
c00125ed:	47                   	inc    edi
c00125ee:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00125f1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00125f4:	6a 20                	push   0x20
c00125f6:	53                   	push   ebx
c00125f7:	e8 aa fe ff ff       	call   c00124a6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00125fc:	83 c4 20             	add    esp,0x20
c00125ff:	83 ff 50             	cmp    edi,0x50
c0012602:	75 e5                	jne    c00125e9 <VgaText::clearScreen()+0x25>
c0012604:	46                   	inc    esi
c0012605:	eb db                	jmp    c00125e2 <VgaText::clearScreen()+0x1e>
c0012607:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001260e:	5b                   	pop    ebx
c001260f:	5e                   	pop    esi
c0012610:	5f                   	pop    edi
c0012611:	c3                   	ret    

c0012612 <VgaText::setCursorX(int)>:
c0012612:	83 ec 10             	sub    esp,0x10
c0012615:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012619:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001261c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012620:	50                   	push   eax
c0012621:	e8 3c ff ff ff       	call   c0012562 <VgaText::setCursor(int, int)>
c0012626:	83 c4 1c             	add    esp,0x1c
c0012629:	c3                   	ret    

c001262a <VgaText::setCursorY(int)>:
c001262a:	83 ec 10             	sub    esp,0x10
c001262d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012631:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012635:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0012638:	50                   	push   eax
c0012639:	e8 24 ff ff ff       	call   c0012562 <VgaText::setCursor(int, int)>
c001263e:	83 c4 1c             	add    esp,0x1c
c0012641:	c3                   	ret    

c0012642 <VgaText::incrementCursor(bool)>:
c0012642:	56                   	push   esi
c0012643:	53                   	push   ebx
c0012644:	51                   	push   ecx
c0012645:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012649:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001264d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012650:	40                   	inc    eax
c0012651:	83 f8 50             	cmp    eax,0x50
c0012654:	74 05                	je     c001265b <VgaText::incrementCursor(bool)+0x19>
c0012656:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0012659:	eb 24                	jmp    c001267f <VgaText::incrementCursor(bool)+0x3d>
c001265b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001265e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012665:	8d 50 01             	lea    edx,[eax+0x1]
c0012668:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001266b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001266e:	75 0f                	jne    c001267f <VgaText::incrementCursor(bool)+0x3d>
c0012670:	83 ec 0c             	sub    esp,0xc
c0012673:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012676:	53                   	push   ebx
c0012677:	e8 88 fd ff ff       	call   c0012404 <VgaText::scrollScreen()>
c001267c:	83 c4 10             	add    esp,0x10
c001267f:	89 f0                	mov    eax,esi
c0012681:	84 c0                	test   al,al
c0012683:	74 0c                	je     c0012691 <VgaText::incrementCursor(bool)+0x4f>
c0012685:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012689:	5a                   	pop    edx
c001268a:	5b                   	pop    ebx
c001268b:	5e                   	pop    esi
c001268c:	e9 7d fc ff ff       	jmp    c001230e <VgaText::updateCursor()>
c0012691:	58                   	pop    eax
c0012692:	5b                   	pop    ebx
c0012693:	5e                   	pop    esi
c0012694:	c3                   	ret    
c0012695:	90                   	nop

c0012696 <VgaText::decrementCursor(bool)>:
c0012696:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001269a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001269e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00126a1:	85 c0                	test   eax,eax
c00126a3:	74 04                	je     c00126a9 <VgaText::decrementCursor(bool)+0x13>
c00126a5:	48                   	dec    eax
c00126a6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00126a9:	84 c9                	test   cl,cl
c00126ab:	74 09                	je     c00126b6 <VgaText::decrementCursor(bool)+0x20>
c00126ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00126b1:	e9 58 fc ff ff       	jmp    c001230e <VgaText::updateCursor()>
c00126b6:	c3                   	ret    
c00126b7:	90                   	nop

c00126b8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00126b8:	53                   	push   ebx
c00126b9:	83 ec 08             	sub    esp,0x8
c00126bc:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00126c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00126c9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00126cd:	83 f8 07             	cmp    eax,0x7
c00126d0:	75 21                	jne    c00126f3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00126d2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00126da:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00126e2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00126ea:	83 c4 08             	add    esp,0x8
c00126ed:	5b                   	pop    ebx
c00126ee:	e9 e0 62 ff ff       	jmp    c00089d3 <KeBeep(int, int, bool)>
c00126f3:	83 f8 0d             	cmp    eax,0xd
c00126f6:	75 09                	jne    c0012701 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00126f8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00126ff:	eb 2d                	jmp    c001272e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012701:	83 f8 0a             	cmp    eax,0xa
c0012704:	75 31                	jne    c0012737 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0012706:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012709:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012710:	8d 50 01             	lea    edx,[eax+0x1]
c0012713:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012716:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012719:	75 0f                	jne    c001272a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c001271b:	83 ec 0c             	sub    esp,0xc
c001271e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0012721:	53                   	push   ebx
c0012722:	e8 dd fc ff ff       	call   c0012404 <VgaText::scrollScreen()>
c0012727:	83 c4 10             	add    esp,0x10
c001272a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001272e:	83 c4 08             	add    esp,0x8
c0012731:	5b                   	pop    ebx
c0012732:	e9 d7 fb ff ff       	jmp    c001230e <VgaText::updateCursor()>
c0012737:	83 f8 08             	cmp    eax,0x8
c001273a:	75 25                	jne    c0012761 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c001273c:	50                   	push   eax
c001273d:	50                   	push   eax
c001273e:	6a 01                	push   0x1
c0012740:	53                   	push   ebx
c0012741:	e8 50 ff ff ff       	call   c0012696 <VgaText::decrementCursor(bool)>
c0012746:	5a                   	pop    edx
c0012747:	59                   	pop    ecx
c0012748:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001274b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001274e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012751:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012754:	6a 20                	push   0x20
c0012756:	53                   	push   ebx
c0012757:	e8 4a fd ff ff       	call   c00124a6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001275c:	83 c4 28             	add    esp,0x28
c001275f:	5b                   	pop    ebx
c0012760:	c3                   	ret    
c0012761:	83 ec 08             	sub    esp,0x8
c0012764:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0012767:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001276a:	51                   	push   ecx
c001276b:	52                   	push   edx
c001276c:	50                   	push   eax
c001276d:	53                   	push   ebx
c001276e:	e8 33 fd ff ff       	call   c00124a6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012773:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0012777:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001277f:	83 c4 28             	add    esp,0x28
c0012782:	5b                   	pop    ebx
c0012783:	e9 ba fe ff ff       	jmp    c0012642 <VgaText::incrementCursor(bool)>

c0012788 <VgaText::putchar(char)>:
c0012788:	57                   	push   edi
c0012789:	56                   	push   esi
c001278a:	53                   	push   ebx
c001278b:	83 ec 10             	sub    esp,0x10
c001278e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012792:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012796:	89 f8                	mov    eax,edi
c0012798:	0f be c0             	movsx  eax,al
c001279b:	83 f8 5b             	cmp    eax,0x5b
c001279e:	75 18                	jne    c00127b8 <VgaText::putchar(char)+0x30>
c00127a0:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00127a4:	74 20                	je     c00127c6 <VgaText::putchar(char)+0x3e>
c00127a6:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00127ac:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00127b3:	e9 c1 00 00 00       	jmp    c0012879 <VgaText::putchar(char)+0xf1>
c00127b8:	83 f8 1b             	cmp    eax,0x1b
c00127bb:	75 09                	jne    c00127c6 <VgaText::putchar(char)+0x3e>
c00127bd:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00127c1:	e9 b3 00 00 00       	jmp    c0012879 <VgaText::putchar(char)+0xf1>
c00127c6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00127c9:	84 c9                	test   cl,cl
c00127cb:	0f 84 98 00 00 00    	je     c0012869 <VgaText::putchar(char)+0xe1>
c00127d1:	8d 77 c0             	lea    esi,[edi-0x40]
c00127d4:	89 f2                	mov    edx,esi
c00127d6:	80 fa 3e             	cmp    dl,0x3e
c00127d9:	77 78                	ja     c0012853 <VgaText::putchar(char)+0xcb>
c00127db:	83 f8 6d             	cmp    eax,0x6d
c00127de:	75 47                	jne    c0012827 <VgaText::putchar(char)+0x9f>
c00127e0:	31 f6                	xor    esi,esi
c00127e2:	31 d2                	xor    edx,edx
c00127e4:	31 c0                	xor    eax,eax
c00127e6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00127e9:	7e 2d                	jle    c0012818 <VgaText::putchar(char)+0x90>
c00127eb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00127f0:	83 fa 3b             	cmp    edx,0x3b
c00127f3:	75 17                	jne    c001280c <VgaText::putchar(char)+0x84>
c00127f5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00127f9:	50                   	push   eax
c00127fa:	53                   	push   ebx
c00127fb:	e8 24 fb ff ff       	call   c0012324 <VgaText::doANSI_SGR(int)>
c0012800:	59                   	pop    ecx
c0012801:	31 d2                	xor    edx,edx
c0012803:	5f                   	pop    edi
c0012804:	31 c0                	xor    eax,eax
c0012806:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001280a:	eb 09                	jmp    c0012815 <VgaText::putchar(char)+0x8d>
c001280c:	6b c0 0a             	imul   eax,eax,0xa
c001280f:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0012813:	88 ca                	mov    dl,cl
c0012815:	46                   	inc    esi
c0012816:	eb ce                	jmp    c00127e6 <VgaText::putchar(char)+0x5e>
c0012818:	84 d2                	test   dl,dl
c001281a:	74 2f                	je     c001284b <VgaText::putchar(char)+0xc3>
c001281c:	50                   	push   eax
c001281d:	53                   	push   ebx
c001281e:	e8 01 fb ff ff       	call   c0012324 <VgaText::doANSI_SGR(int)>
c0012823:	58                   	pop    eax
c0012824:	5a                   	pop    edx
c0012825:	eb 24                	jmp    c001284b <VgaText::putchar(char)+0xc3>
c0012827:	83 f8 4a             	cmp    eax,0x4a
c001282a:	75 1f                	jne    c001284b <VgaText::putchar(char)+0xc3>
c001282c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0012830:	75 19                	jne    c001284b <VgaText::putchar(char)+0xc3>
c0012832:	83 ec 0c             	sub    esp,0xc
c0012835:	53                   	push   ebx
c0012836:	e8 89 fd ff ff       	call   c00125c4 <VgaText::clearScreen()>
c001283b:	83 c4 0c             	add    esp,0xc
c001283e:	6a 00                	push   0x0
c0012840:	6a 00                	push   0x0
c0012842:	53                   	push   ebx
c0012843:	e8 1a fd ff ff       	call   c0012562 <VgaText::setCursor(int, int)>
c0012848:	83 c4 10             	add    esp,0x10
c001284b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0012851:	eb 26                	jmp    c0012879 <VgaText::putchar(char)+0xf1>
c0012853:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0012856:	83 f8 0e             	cmp    eax,0xe
c0012859:	7f 1e                	jg     c0012879 <VgaText::putchar(char)+0xf1>
c001285b:	8d 48 01             	lea    ecx,[eax+0x1]
c001285e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0012861:	89 f9                	mov    ecx,edi
c0012863:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0012867:	eb 10                	jmp    c0012879 <VgaText::putchar(char)+0xf1>
c0012869:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001286c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001286f:	50                   	push   eax
c0012870:	53                   	push   ebx
c0012871:	e8 42 fe ff ff       	call   c00126b8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012876:	83 c4 10             	add    esp,0x10
c0012879:	83 c4 10             	add    esp,0x10
c001287c:	5b                   	pop    ebx
c001287d:	5e                   	pop    esi
c001287e:	5f                   	pop    edi
c001287f:	c3                   	ret    

c0012880 <VgaText::putx(unsigned int)>:
c0012880:	57                   	push   edi
c0012881:	b9 11 00 00 00       	mov    ecx,0x11
c0012886:	56                   	push   esi
c0012887:	be af 2c 02 c0       	mov    esi,0xc0022caf
c001288c:	53                   	push   ebx
c001288d:	83 ec 20             	sub    esp,0x20
c0012890:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012894:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012898:	fc                   	cld    
c0012899:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001289b:	be 08 00 00 00       	mov    esi,0x8
c00128a0:	50                   	push   eax
c00128a1:	50                   	push   eax
c00128a2:	89 d8                	mov    eax,ebx
c00128a4:	c1 e3 04             	shl    ebx,0x4
c00128a7:	c1 e8 1c             	shr    eax,0x1c
c00128aa:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00128af:	50                   	push   eax
c00128b0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128b4:	e8 cf fe ff ff       	call   c0012788 <VgaText::putchar(char)>
c00128b9:	83 c4 10             	add    esp,0x10
c00128bc:	4e                   	dec    esi
c00128bd:	75 e1                	jne    c00128a0 <VgaText::putx(unsigned int)+0x20>
c00128bf:	83 c4 20             	add    esp,0x20
c00128c2:	5b                   	pop    ebx
c00128c3:	5e                   	pop    esi
c00128c4:	5f                   	pop    edi
c00128c5:	c3                   	ret    

c00128c6 <VgaText::puts(char const*)>:
c00128c6:	53                   	push   ebx
c00128c7:	83 ec 08             	sub    esp,0x8
c00128ca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00128ce:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00128d1:	85 c0                	test   eax,eax
c00128d3:	74 12                	je     c00128e7 <VgaText::puts(char const*)+0x21>
c00128d5:	43                   	inc    ebx
c00128d6:	51                   	push   ecx
c00128d7:	51                   	push   ecx
c00128d8:	50                   	push   eax
c00128d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128dd:	e8 a6 fe ff ff       	call   c0012788 <VgaText::putchar(char)>
c00128e2:	83 c4 10             	add    esp,0x10
c00128e5:	eb e7                	jmp    c00128ce <VgaText::puts(char const*)+0x8>
c00128e7:	83 c4 08             	add    esp,0x8
c00128ea:	5b                   	pop    ebx
c00128eb:	c3                   	ret    

c00128ec <VgaText::write(unsigned long long, void*, int*)>:
c00128ec:	55                   	push   ebp
c00128ed:	57                   	push   edi
c00128ee:	56                   	push   esi
c00128ef:	53                   	push   ebx
c00128f0:	83 ec 0c             	sub    esp,0xc
c00128f3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00128f7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00128fb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00128ff:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0012906:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0012909:	39 eb                	cmp    ebx,ebp
c001290b:	74 13                	je     c0012920 <VgaText::write(unsigned long long, void*, int*)+0x34>
c001290d:	43                   	inc    ebx
c001290e:	50                   	push   eax
c001290f:	50                   	push   eax
c0012910:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0012914:	50                   	push   eax
c0012915:	56                   	push   esi
c0012916:	e8 6d fe ff ff       	call   c0012788 <VgaText::putchar(char)>
c001291b:	83 c4 10             	add    esp,0x10
c001291e:	eb e9                	jmp    c0012909 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0012920:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0012927:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001292b:	89 38                	mov    DWORD PTR [eax],edi
c001292d:	83 c4 0c             	add    esp,0xc
c0012930:	31 c0                	xor    eax,eax
c0012932:	5b                   	pop    ebx
c0012933:	5e                   	pop    esi
c0012934:	5f                   	pop    edi
c0012935:	5d                   	pop    ebp
c0012936:	c3                   	ret    
c0012937:	90                   	nop

c0012938 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0012938:	55                   	push   ebp
c0012939:	57                   	push   edi
c001293a:	56                   	push   esi
c001293b:	53                   	push   ebx
c001293c:	83 ec 1c             	sub    esp,0x1c
c001293f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012943:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012947:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001294b:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c001294e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012952:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001295a:	85 db                	test   ebx,ebx
c001295c:	75 14                	jne    c0012972 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c001295e:	c7 44 24 30 68 44 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024468
c0012966:	83 c4 1c             	add    esp,0x1c
c0012969:	5b                   	pop    ebx
c001296a:	5e                   	pop    esi
c001296b:	5f                   	pop    edi
c001296c:	5d                   	pop    ebp
c001296d:	e9 a0 d6 ff ff       	jmp    c0010012 <KePanic(char const*)>
c0012972:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0012979:	50                   	push   eax
c001297a:	50                   	push   eax
c001297b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012980:	50                   	push   eax
c0012981:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012986:	50                   	push   eax
c0012987:	e8 66 fa ff ff       	call   c00123f2 <VgaText::combineColours(unsigned char, unsigned char)>
c001298c:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0012990:	83 c4 10             	add    esp,0x10
c0012993:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0012996:	0f b6 e8             	movzx  ebp,al
c0012999:	0f b7 c9             	movzx  ecx,cx
c001299c:	01 c9                	add    ecx,ecx
c001299e:	01 cb                	add    ebx,ecx
c00129a0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00129a3:	85 c0                	test   eax,eax
c00129a5:	0f 84 ef 00 00 00    	je     c0012a9a <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c00129ab:	83 f8 0d             	cmp    eax,0xd
c00129ae:	75 0c                	jne    c00129bc <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c00129b0:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00129b7:	e9 d8 00 00 00       	jmp    c0012a94 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00129bc:	83 f8 0a             	cmp    eax,0xa
c00129bf:	75 44                	jne    c0012a05 <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c00129c1:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00129c4:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c00129cb:	8d 48 01             	lea    ecx,[eax+0x1]
c00129ce:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c00129d1:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c00129d4:	75 0f                	jne    c00129e5 <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c00129d6:	83 ec 0c             	sub    esp,0xc
c00129d9:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c00129dc:	57                   	push   edi
c00129dd:	e8 22 fa ff ff       	call   c0012404 <VgaText::scrollScreen()>
c00129e2:	83 c4 10             	add    esp,0x10
c00129e5:	83 ec 0c             	sub    esp,0xc
c00129e8:	57                   	push   edi
c00129e9:	e8 20 f9 ff ff       	call   c001230e <VgaText::updateCursor()>
c00129ee:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00129f2:	83 c4 10             	add    esp,0x10
c00129f5:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c00129f8:	0f b7 db             	movzx  ebx,bx
c00129fb:	01 db                	add    ebx,ebx
c00129fd:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012a00:	e9 8f 00 00 00       	jmp    c0012a94 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012a05:	83 f8 08             	cmp    eax,0x8
c0012a08:	75 34                	jne    c0012a3e <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0012a0a:	51                   	push   ecx
c0012a0b:	51                   	push   ecx
c0012a0c:	6a 01                	push   0x1
c0012a0e:	57                   	push   edi
c0012a0f:	e8 82 fc ff ff       	call   c0012696 <VgaText::decrementCursor(bool)>
c0012a14:	5b                   	pop    ebx
c0012a15:	58                   	pop    eax
c0012a16:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012a19:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012a1c:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0012a1f:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0012a22:	6a 20                	push   0x20
c0012a24:	57                   	push   edi
c0012a25:	e8 7c fa ff ff       	call   c00124a6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012a2a:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012a2e:	83 c4 20             	add    esp,0x20
c0012a31:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0012a34:	0f b7 db             	movzx  ebx,bx
c0012a37:	01 db                	add    ebx,ebx
c0012a39:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012a3c:	eb 56                	jmp    c0012a94 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012a3e:	52                   	push   edx
c0012a3f:	52                   	push   edx
c0012a40:	55                   	push   ebp
c0012a41:	50                   	push   eax
c0012a42:	e8 4f fa ff ff       	call   c0012496 <VgaText::combineCharAndColour(char, unsigned char)>
c0012a47:	83 c4 10             	add    esp,0x10
c0012a4a:	66 89 03             	mov    WORD PTR [ebx],ax
c0012a4d:	39 3d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,edi
c0012a53:	75 1d                	jne    c0012a72 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0012a55:	83 ec 0c             	sub    esp,0xc
c0012a58:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0012a5b:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0012a5e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a66:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012a69:	50                   	push   eax
c0012a6a:	e8 2d 87 00 00       	call   c001b19c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012a6f:	83 c4 20             	add    esp,0x20
c0012a72:	83 c3 02             	add    ebx,0x2
c0012a75:	50                   	push   eax
c0012a76:	50                   	push   eax
c0012a77:	6a 00                	push   0x0
c0012a79:	57                   	push   edi
c0012a7a:	e8 c3 fb ff ff       	call   c0012642 <VgaText::incrementCursor(bool)>
c0012a7f:	83 c4 10             	add    esp,0x10
c0012a82:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0012a86:	75 0c                	jne    c0012a94 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012a88:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012a8c:	0f b7 db             	movzx  ebx,bx
c0012a8f:	01 db                	add    ebx,ebx
c0012a91:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012a94:	46                   	inc    esi
c0012a95:	e9 06 ff ff ff       	jmp    c00129a0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0012a9a:	83 ec 0c             	sub    esp,0xc
c0012a9d:	57                   	push   edi
c0012a9e:	e8 6b f8 ff ff       	call   c001230e <VgaText::updateCursor()>
c0012aa3:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0012aaa:	83 c4 2c             	add    esp,0x2c
c0012aad:	5b                   	pop    ebx
c0012aae:	5e                   	pop    esi
c0012aaf:	5f                   	pop    edi
c0012ab0:	5d                   	pop    ebp
c0012ab1:	c3                   	ret    

c0012ab2 <VgaText::VgaText(char const*)>:
c0012ab2:	56                   	push   esi
c0012ab3:	53                   	push   ebx
c0012ab4:	83 ec 04             	sub    esp,0x4
c0012ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012abb:	83 ec 08             	sub    esp,0x8
c0012abe:	6a 00                	push   0x0
c0012ac0:	50                   	push   eax
c0012ac1:	e8 d6 05 00 00       	call   c001309c <UnixFile::UnixFile(int)>
c0012ac6:	83 c4 10             	add    esp,0x10
c0012ac9:	ba a0 44 02 c0       	mov    edx,0xc00244a0
c0012ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ad2:	89 10                	mov    DWORD PTR [eax],edx
c0012ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ad8:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ae3:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aee:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012af6:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012afa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012afe:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0012b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b09:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0012b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b14:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012b1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b1f:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012b26:	83 ec 0c             	sub    esp,0xc
c0012b29:	68 78 44 02 c0       	push   0xc0024478
c0012b2e:	e8 31 44 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012b33:	83 c4 10             	add    esp,0x10
c0012b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b3a:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0012b41:	83 ec 0c             	sub    esp,0xc
c0012b44:	6a 01                	push   0x1
c0012b46:	e8 b2 09 00 00       	call   c00134fd <Virt::allocateKernelVirtualPages(int)>
c0012b4b:	83 c4 10             	add    esp,0x10
c0012b4e:	89 c2                	mov    edx,eax
c0012b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b54:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012b57:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c0012b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b61:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b64:	89 c6                	mov    esi,eax
c0012b66:	e8 9b d6 ff ff       	call   c0010206 <Phys::allocatePage()>
c0012b6b:	68 05 0c 00 00       	push   0xc05
c0012b70:	56                   	push   esi
c0012b71:	50                   	push   eax
c0012b72:	53                   	push   ebx
c0012b73:	e8 68 10 00 00       	call   c0013be0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012b78:	83 c4 10             	add    esp,0x10
c0012b7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b82:	83 ec 04             	sub    esp,0x4
c0012b85:	68 a0 0f 00 00       	push   0xfa0
c0012b8a:	6a 00                	push   0x0
c0012b8c:	50                   	push   eax
c0012b8d:	e8 5e d9 fe ff       	call   c00004f0 <memset>
c0012b92:	83 c4 10             	add    esp,0x10
c0012b95:	83 ec 04             	sub    esp,0x4
c0012b98:	6a 00                	push   0x0
c0012b9a:	6a 07                	push   0x7
c0012b9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ba0:	e8 13 f8 ff ff       	call   c00123b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012ba5:	83 c4 10             	add    esp,0x10
c0012ba8:	83 ec 04             	sub    esp,0x4
c0012bab:	6a 00                	push   0x0
c0012bad:	6a 00                	push   0x0
c0012baf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bb3:	e8 aa f9 ff ff       	call   c0012562 <VgaText::setCursor(int, int)>
c0012bb8:	83 c4 10             	add    esp,0x10
c0012bbb:	83 ec 0c             	sub    esp,0xc
c0012bbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bc2:	e8 fd f9 ff ff       	call   c00125c4 <VgaText::clearScreen()>
c0012bc7:	83 c4 10             	add    esp,0x10
c0012bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bce:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bd6:	05 82 00 00 00       	add    eax,0x82
c0012bdb:	83 ec 04             	sub    esp,0x4
c0012bde:	68 80 00 00 00       	push   0x80
c0012be3:	6a 00                	push   0x0
c0012be5:	50                   	push   eax
c0012be6:	e8 05 d9 fe ff       	call   c00004f0 <memset>
c0012beb:	83 c4 10             	add    esp,0x10
c0012bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bf2:	05 02 01 00 00       	add    eax,0x102
c0012bf7:	83 ec 04             	sub    esp,0x4
c0012bfa:	68 80 00 00 00       	push   0x80
c0012bff:	6a 00                	push   0x0
c0012c01:	50                   	push   eax
c0012c02:	e8 e9 d8 fe ff       	call   c00004f0 <memset>
c0012c07:	83 c4 10             	add    esp,0x10
c0012c0a:	90                   	nop
c0012c0b:	83 c4 04             	add    esp,0x4
c0012c0e:	5b                   	pop    ebx
c0012c0f:	5e                   	pop    esi
c0012c10:	c3                   	ret    
c0012c11:	90                   	nop

c0012c12 <VgaText::receiveKey(unsigned char)>:
c0012c12:	55                   	push   ebp
c0012c13:	57                   	push   edi
c0012c14:	56                   	push   esi
c0012c15:	53                   	push   ebx
c0012c16:	83 ec 2c             	sub    esp,0x2c
c0012c19:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0012c1d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012c21:	89 ef                	mov    edi,ebp
c0012c23:	81 e7 ff 00 00 00    	and    edi,0xff
c0012c29:	0f 84 66 01 00 00    	je     c0012d95 <VgaText::receiveKey(unsigned char)+0x183>
c0012c2f:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012c35:	83 ff 08             	cmp    edi,0x8
c0012c38:	75 73                	jne    c0012cad <VgaText::receiveKey(unsigned char)+0x9b>
c0012c3a:	83 ec 0c             	sub    esp,0xc
c0012c3d:	56                   	push   esi
c0012c3e:	e8 2d d9 fe ff       	call   c0000570 <strlen>
c0012c43:	83 c4 10             	add    esp,0x10
c0012c46:	85 c0                	test   eax,eax
c0012c48:	0f 84 02 01 00 00    	je     c0012d50 <VgaText::receiveKey(unsigned char)+0x13e>
c0012c4e:	50                   	push   eax
c0012c4f:	50                   	push   eax
c0012c50:	6a 08                	push   0x8
c0012c52:	53                   	push   ebx
c0012c53:	e8 30 fb ff ff       	call   c0012788 <VgaText::putchar(char)>
c0012c58:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c5b:	e8 10 d9 fe ff       	call   c0000570 <strlen>
c0012c60:	83 c4 10             	add    esp,0x10
c0012c63:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012c6b:	83 fa 0d             	cmp    edx,0xd
c0012c6e:	89 d0                	mov    eax,edx
c0012c70:	0f 95 c1             	setne  cl
c0012c73:	83 fa 1f             	cmp    edx,0x1f
c0012c76:	0f 9e c2             	setle  dl
c0012c79:	0f b6 d2             	movzx  edx,dl
c0012c7c:	85 ca                	test   edx,ecx
c0012c7e:	74 17                	je     c0012c97 <VgaText::receiveKey(unsigned char)+0x85>
c0012c80:	83 e8 08             	sub    eax,0x8
c0012c83:	3c 02                	cmp    al,0x2
c0012c85:	76 10                	jbe    c0012c97 <VgaText::receiveKey(unsigned char)+0x85>
c0012c87:	55                   	push   ebp
c0012c88:	55                   	push   ebp
c0012c89:	68 8b 44 02 c0       	push   0xc002448b
c0012c8e:	53                   	push   ebx
c0012c8f:	e8 32 fc ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c0012c94:	83 c4 10             	add    esp,0x10
c0012c97:	83 ec 0c             	sub    esp,0xc
c0012c9a:	56                   	push   esi
c0012c9b:	e8 d0 d8 fe ff       	call   c0000570 <strlen>
c0012ca0:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012ca8:	e9 a0 00 00 00       	jmp    c0012d4d <VgaText::receiveKey(unsigned char)+0x13b>
c0012cad:	83 ec 0c             	sub    esp,0xc
c0012cb0:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012cb6:	50                   	push   eax
c0012cb7:	e8 b4 d8 fe ff       	call   c0000570 <strlen>
c0012cbc:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012cc3:	e8 a8 d8 fe ff       	call   c0000570 <strlen>
c0012cc8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012ccc:	83 c4 10             	add    esp,0x10
c0012ccf:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012cd3:	3d 80 00 00 00       	cmp    eax,0x80
c0012cd8:	0f 87 b7 00 00 00    	ja     c0012d95 <VgaText::receiveKey(unsigned char)+0x183>
c0012cde:	8d 45 ff             	lea    eax,[ebp-0x1]
c0012ce1:	8d 55 f7             	lea    edx,[ebp-0x9]
c0012ce4:	3c 1e                	cmp    al,0x1e
c0012ce6:	0f 96 c0             	setbe  al
c0012ce9:	80 fa 01             	cmp    dl,0x1
c0012cec:	0f 97 c2             	seta   dl
c0012cef:	0f b6 d2             	movzx  edx,dl
c0012cf2:	85 c2                	test   edx,eax
c0012cf4:	74 2e                	je     c0012d24 <VgaText::receiveKey(unsigned char)+0x112>
c0012cf6:	83 ff 0d             	cmp    edi,0xd
c0012cf9:	74 29                	je     c0012d24 <VgaText::receiveKey(unsigned char)+0x112>
c0012cfb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012cfe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012d01:	68 91 44 02 c0       	push   0xc0024491
c0012d06:	53                   	push   ebx
c0012d07:	e8 2c fc ff ff       	call   c0012938 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012d0c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012d0f:	8d 45 40             	lea    eax,[ebp+0x40]
c0012d12:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012d15:	0f b6 c0             	movzx  eax,al
c0012d18:	50                   	push   eax
c0012d19:	53                   	push   ebx
c0012d1a:	e8 99 f9 ff ff       	call   c00126b8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012d1f:	83 c4 20             	add    esp,0x20
c0012d22:	eb 11                	jmp    c0012d35 <VgaText::receiveKey(unsigned char)+0x123>
c0012d24:	89 e8                	mov    eax,ebp
c0012d26:	51                   	push   ecx
c0012d27:	0f be c0             	movsx  eax,al
c0012d2a:	51                   	push   ecx
c0012d2b:	50                   	push   eax
c0012d2c:	53                   	push   ebx
c0012d2d:	e8 56 fa ff ff       	call   c0012788 <VgaText::putchar(char)>
c0012d32:	83 c4 10             	add    esp,0x10
c0012d35:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012d3a:	89 e8                	mov    eax,ebp
c0012d3c:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012d40:	52                   	push   edx
c0012d41:	52                   	push   edx
c0012d42:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012d46:	50                   	push   eax
c0012d47:	56                   	push   esi
c0012d48:	e8 f3 da fe ff       	call   c0000840 <strcat>
c0012d4d:	83 c4 10             	add    esp,0x10
c0012d50:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0012d56:	b0 01                	mov    al,0x1
c0012d58:	83 ff 1c             	cmp    edi,0x1c
c0012d5b:	77 0e                	ja     c0012d6b <VgaText::receiveKey(unsigned char)+0x159>
c0012d5d:	b8 08 04 00 10       	mov    eax,0x10000408
c0012d62:	89 f9                	mov    ecx,edi
c0012d64:	d3 e8                	shr    eax,cl
c0012d66:	f7 d0                	not    eax
c0012d68:	83 e0 01             	and    eax,0x1
c0012d6b:	84 c0                	test   al,al
c0012d6d:	74 04                	je     c0012d73 <VgaText::receiveKey(unsigned char)+0x161>
c0012d6f:	84 d2                	test   dl,dl
c0012d71:	74 22                	je     c0012d95 <VgaText::receiveKey(unsigned char)+0x183>
c0012d73:	81 c3 02 01 00 00    	add    ebx,0x102
c0012d79:	50                   	push   eax
c0012d7a:	50                   	push   eax
c0012d7b:	56                   	push   esi
c0012d7c:	53                   	push   ebx
c0012d7d:	e8 be da fe ff       	call   c0000840 <strcat>
c0012d82:	83 c4 0c             	add    esp,0xc
c0012d85:	68 80 00 00 00       	push   0x80
c0012d8a:	6a 00                	push   0x0
c0012d8c:	56                   	push   esi
c0012d8d:	e8 5e d7 fe ff       	call   c00004f0 <memset>
c0012d92:	83 c4 10             	add    esp,0x10
c0012d95:	83 c4 2c             	add    esp,0x2c
c0012d98:	5b                   	pop    ebx
c0012d99:	5e                   	pop    esi
c0012d9a:	5f                   	pop    edi
c0012d9b:	5d                   	pop    ebp
c0012d9c:	c3                   	ret    
c0012d9d:	90                   	nop

c0012d9e <VgaText::doUpdate()>:
c0012d9e:	c3                   	ret    
c0012d9f:	90                   	nop

c0012da0 <TSS::TSS()>:
c0012da0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012da4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012dab:	90                   	nop
c0012dac:	c3                   	ret    
c0012dad:	90                   	nop
c0012dae:	66 90                	xchg   ax,ax

c0012db0 <TSS::setESP(unsigned long)>:
c0012db0:	55                   	push   ebp
c0012db1:	89 e5                	mov    ebp,esp
c0012db3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012db6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012db9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012dbc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012dbf:	90                   	nop
c0012dc0:	5d                   	pop    ebp
c0012dc1:	c3                   	ret    
c0012dc2:	66 90                	xchg   ax,ax

c0012dc4 <TSS::flush()>:
c0012dc4:	55                   	push   ebp
c0012dc5:	89 e5                	mov    ebp,esp
c0012dc7:	83 ec 10             	sub    esp,0x10
c0012dca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dcd:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dcf:	83 c8 03             	or     eax,0x3
c0012dd2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012dd6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012dda:	66 89 d0             	mov    ax,dx
c0012ddd:	0f 00 d8             	ltr    ax
c0012de0:	90                   	nop
c0012de1:	c9                   	leave  
c0012de2:	c3                   	ret    
c0012de3:	90                   	nop

c0012de4 <TSS::setup(unsigned long, unsigned long)>:
c0012de4:	55                   	push   ebp
c0012de5:	89 e5                	mov    ebp,esp
c0012de7:	83 ec 18             	sub    esp,0x18
c0012dea:	83 ec 0c             	sub    esp,0xc
c0012ded:	6a 68                	push   0x68
c0012def:	e8 d7 ce ff ff       	call   c000fccb <malloc>
c0012df4:	83 c4 10             	add    esp,0x10
c0012df7:	89 c2                	mov    edx,eax
c0012df9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012dfc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012dff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e05:	83 ec 08             	sub    esp,0x8
c0012e08:	50                   	push   eax
c0012e09:	68 b4 44 02 c0       	push   0xc00244b4
c0012e0e:	e8 51 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e13:	83 c4 10             	add    esp,0x10
c0012e16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e19:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e1c:	83 ec 04             	sub    esp,0x4
c0012e1f:	6a 68                	push   0x68
c0012e21:	6a 00                	push   0x0
c0012e23:	50                   	push   eax
c0012e24:	e8 c7 d6 fe ff       	call   c00004f0 <memset>
c0012e29:	83 c4 10             	add    esp,0x10
c0012e2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e32:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e3e:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012e44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e4a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012e4d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012e50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e56:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012e5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e62:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012e68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e6e:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012e74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e7a:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012e80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e86:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012e8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e92:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012e98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e9e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012ea1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012ea4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ea7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012eaa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012ead:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012eb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012eb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012eb6:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012ebd:	83 ec 0c             	sub    esp,0xc
c0012ec0:	68 cb 44 02 c0       	push   0xc00244cb
c0012ec5:	e8 9a 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012eca:	83 c4 10             	add    esp,0x10
c0012ecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ed0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ed3:	0f 20 da             	mov    edx,cr3
c0012ed6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012ed9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012edc:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012edf:	83 ec 0c             	sub    esp,0xc
c0012ee2:	68 ce 44 02 c0       	push   0xc00244ce
c0012ee7:	e8 78 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012eec:	83 c4 10             	add    esp,0x10
c0012eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ef2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ef5:	83 ec 08             	sub    esp,0x8
c0012ef8:	50                   	push   eax
c0012ef9:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012efc:	50                   	push   eax
c0012efd:	e8 2c be ff ff       	call   c000ed2e <GDTEntry::setBase(unsigned int)>
c0012f02:	83 c4 10             	add    esp,0x10
c0012f05:	83 ec 08             	sub    esp,0x8
c0012f08:	6a 68                	push   0x68
c0012f0a:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012f0d:	50                   	push   eax
c0012f0e:	e8 37 be ff ff       	call   c000ed4a <GDTEntry::setLimit(unsigned int)>
c0012f13:	83 c4 10             	add    esp,0x10
c0012f16:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012f1a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012f1d:	83 e0 0f             	and    eax,0xf
c0012f20:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012f23:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012f26:	83 c8 40             	or     eax,0x40
c0012f29:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012f2c:	83 ec 0c             	sub    esp,0xc
c0012f2f:	68 d1 44 02 c0       	push   0xc00244d1
c0012f34:	e8 2b 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f39:	83 c4 10             	add    esp,0x10
c0012f3c:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012f41:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012f47:	83 ec 08             	sub    esp,0x8
c0012f4a:	50                   	push   eax
c0012f4b:	68 d4 44 02 c0       	push   0xc00244d4
c0012f50:	e8 0f 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f55:	83 c4 10             	add    esp,0x10
c0012f58:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012f5d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012f63:	05 64 01 00 00       	add    eax,0x164
c0012f68:	83 ec 04             	sub    esp,0x4
c0012f6b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012f6e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012f71:	50                   	push   eax
c0012f72:	e8 07 be ff ff       	call   c000ed7e <GDT::addEntry(GDTEntry)>
c0012f77:	83 c4 10             	add    esp,0x10
c0012f7a:	89 c2                	mov    edx,eax
c0012f7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012f7f:	89 10                	mov    DWORD PTR [eax],edx
c0012f81:	83 ec 0c             	sub    esp,0xc
c0012f84:	68 e9 44 02 c0       	push   0xc00244e9
c0012f89:	e8 d6 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f8e:	83 c4 10             	add    esp,0x10
c0012f91:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012f96:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012f9c:	05 64 01 00 00       	add    eax,0x164
c0012fa1:	83 ec 0c             	sub    esp,0xc
c0012fa4:	50                   	push   eax
c0012fa5:	e8 fe bd ff ff       	call   c000eda8 <GDT::flush()>
c0012faa:	83 c4 10             	add    esp,0x10
c0012fad:	83 ec 0c             	sub    esp,0xc
c0012fb0:	68 ec 44 02 c0       	push   0xc00244ec
c0012fb5:	e8 aa 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012fba:	83 c4 10             	add    esp,0x10
c0012fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012fc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0012fc2:	c9                   	leave  
c0012fc3:	c3                   	ret    

c0012fc4 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012fc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012fc8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012fcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012fcf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012fd4:	75 08                	jne    c0012fde <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012fd6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012fdc:	eb 38                	jmp    c0013016 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012fde:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012fe3:	75 17                	jne    c0012ffc <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012fe5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fea:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012fed:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0012ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ff5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ff9:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012ffc:	89 c1                	mov    ecx,eax
c0012ffe:	83 e1 fd             	and    ecx,0xfffffffd
c0013001:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0013007:	74 cd                	je     c0012fd6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0013009:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001300e:	83 e0 ef             	and    eax,0xffffffef
c0013011:	83 f8 08             	cmp    eax,0x8
c0013014:	76 c0                	jbe    c0012fd6 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0013016:	31 c0                	xor    eax,eax
c0013018:	c3                   	ret    
c0013019:	90                   	nop

c001301a <ReservedFilename::isAtty()>:
c001301a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001301e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013021:	31 c0                	xor    eax,eax
c0013023:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0013029:	74 09                	je     c0013034 <ReservedFilename::isAtty()+0x1a>
c001302b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0013031:	0f 94 c0             	sete   al
c0013034:	c3                   	ret    
c0013035:	90                   	nop

c0013036 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0013036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001303a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001303e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013041:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013045:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001304a:	75 08                	jne    c0013054 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001304c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0013052:	eb 3d                	jmp    c0013091 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0013054:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0013059:	75 17                	jne    c0013072 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001305b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013060:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013063:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0013069:	8b 10                	mov    edx,DWORD PTR [eax]
c001306b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001306f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0013072:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0013077:	75 04                	jne    c001307d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0013079:	89 0a                	mov    DWORD PTR [edx],ecx
c001307b:	eb 14                	jmp    c0013091 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001307d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0013082:	74 c8                	je     c001304c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013084:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0013089:	83 e0 ef             	and    eax,0xffffffef
c001308c:	83 f8 08             	cmp    eax,0x8
c001308f:	76 bb                	jbe    c001304c <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0013091:	31 c0                	xor    eax,eax
c0013093:	c3                   	ret    

c0013094 <UnixFile::getFileDescriptor()>:
c0013094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013098:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001309b:	c3                   	ret    

c001309c <UnixFile::UnixFile(int)>:
c001309c:	53                   	push   ebx
c001309d:	83 ec 28             	sub    esp,0x28
c00130a0:	ba 3c 45 02 c0       	mov    edx,0xc002453c
c00130a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130a9:	89 10                	mov    DWORD PTR [eax],edx
c00130ab:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00130b3:	0f 8f 90 01 00 00    	jg     c0013249 <UnixFile::UnixFile(int)+0x1ad>
c00130b9:	a1 60 68 02 c0       	mov    eax,ds:0xc0026860
c00130be:	8d 50 01             	lea    edx,[eax+0x1]
c00130c1:	89 15 60 68 02 c0    	mov    DWORD PTR ds:0xc0026860,edx
c00130c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00130cb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00130ce:	83 ec 08             	sub    esp,0x8
c00130d1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00130d5:	68 38 e2 02 c0       	push   0xc002e238
c00130da:	e8 3f ef 00 00       	call   c002201e <LinkedList<UnixFile>::addElement(UnixFile*)>
c00130df:	83 c4 10             	add    esp,0x10
c00130e2:	a0 34 e2 02 c0       	mov    al,ds:0xc002e234
c00130e7:	83 f0 01             	xor    eax,0x1
c00130ea:	0f b6 c0             	movzx  eax,al
c00130ed:	85 c0                	test   eax,eax
c00130ef:	0f 84 55 01 00 00    	je     c001324a <UnixFile::UnixFile(int)+0x1ae>
c00130f5:	c6 05 34 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e234,0x1
c00130fc:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0013104:	83 ec 0c             	sub    esp,0xc
c0013107:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001310b:	e8 bb cb ff ff       	call   c000fccb <malloc>
c0013110:	83 c4 10             	add    esp,0x10
c0013113:	89 c3                	mov    ebx,eax
c0013115:	83 ec 08             	sub    esp,0x8
c0013118:	68 03 ff ff 0f       	push   0xfffff03
c001311d:	53                   	push   ebx
c001311e:	e8 2d 01 00 00       	call   c0013250 <ReservedFilename::ReservedFilename(int)>
c0013123:	83 c4 10             	add    esp,0x10
c0013126:	89 1d 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,ebx
c001312c:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0013134:	83 ec 0c             	sub    esp,0xc
c0013137:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313b:	e8 8b cb ff ff       	call   c000fccb <malloc>
c0013140:	83 c4 10             	add    esp,0x10
c0013143:	89 c3                	mov    ebx,eax
c0013145:	83 ec 08             	sub    esp,0x8
c0013148:	68 01 ff ff 0f       	push   0xfffff01
c001314d:	53                   	push   ebx
c001314e:	e8 fd 00 00 00       	call   c0013250 <ReservedFilename::ReservedFilename(int)>
c0013153:	83 c4 10             	add    esp,0x10
c0013156:	89 1d 30 e2 02 c0    	mov    DWORD PTR ds:0xc002e230,ebx
c001315c:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0013164:	83 ec 0c             	sub    esp,0xc
c0013167:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001316b:	e8 5b cb ff ff       	call   c000fccb <malloc>
c0013170:	83 c4 10             	add    esp,0x10
c0013173:	89 c3                	mov    ebx,eax
c0013175:	83 ec 08             	sub    esp,0x8
c0013178:	68 00 ff ff 0f       	push   0xfffff00
c001317d:	53                   	push   ebx
c001317e:	e8 cd 00 00 00       	call   c0013250 <ReservedFilename::ReservedFilename(int)>
c0013183:	83 c4 10             	add    esp,0x10
c0013186:	89 1d 24 e2 02 c0    	mov    DWORD PTR ds:0xc002e224,ebx
c001318c:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0013194:	83 ec 0c             	sub    esp,0xc
c0013197:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001319b:	e8 2b cb ff ff       	call   c000fccb <malloc>
c00131a0:	83 c4 10             	add    esp,0x10
c00131a3:	89 c3                	mov    ebx,eax
c00131a5:	83 ec 08             	sub    esp,0x8
c00131a8:	68 02 ff ff 0f       	push   0xfffff02
c00131ad:	53                   	push   ebx
c00131ae:	e8 9d 00 00 00       	call   c0013250 <ReservedFilename::ReservedFilename(int)>
c00131b3:	83 c4 10             	add    esp,0x10
c00131b6:	89 1d 28 e2 02 c0    	mov    DWORD PTR ds:0xc002e228,ebx
c00131bc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00131c4:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00131c9:	7f 7f                	jg     c001324a <UnixFile::UnixFile(int)+0x1ae>
c00131cb:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00131d3:	83 ec 0c             	sub    esp,0xc
c00131d6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00131da:	e8 ec ca ff ff       	call   c000fccb <malloc>
c00131df:	83 c4 10             	add    esp,0x10
c00131e2:	89 c3                	mov    ebx,eax
c00131e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131e8:	05 10 ff ff 0f       	add    eax,0xfffff10
c00131ed:	83 ec 08             	sub    esp,0x8
c00131f0:	50                   	push   eax
c00131f1:	53                   	push   ebx
c00131f2:	e8 59 00 00 00       	call   c0013250 <ReservedFilename::ReservedFilename(int)>
c00131f7:	83 c4 10             	add    esp,0x10
c00131fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131fe:	89 1c 85 00 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e00],ebx
c0013205:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001320d:	83 ec 0c             	sub    esp,0xc
c0013210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013214:	e8 b2 ca ff ff       	call   c000fccb <malloc>
c0013219:	83 c4 10             	add    esp,0x10
c001321c:	89 c3                	mov    ebx,eax
c001321e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013222:	05 20 ff ff 0f       	add    eax,0xfffff20
c0013227:	83 ec 08             	sub    esp,0x8
c001322a:	50                   	push   eax
c001322b:	53                   	push   ebx
c001322c:	e8 1f 00 00 00       	call   c0013250 <ReservedFilename::ReservedFilename(int)>
c0013231:	83 c4 10             	add    esp,0x10
c0013234:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013238:	89 1c 85 c0 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e40],ebx
c001323f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013244:	e9 7b ff ff ff       	jmp    c00131c4 <UnixFile::UnixFile(int)+0x128>
c0013249:	90                   	nop
c001324a:	83 c4 28             	add    esp,0x28
c001324d:	5b                   	pop    ebx
c001324e:	c3                   	ret    
c001324f:	90                   	nop

c0013250 <ReservedFilename::ReservedFilename(int)>:
c0013250:	83 ec 0c             	sub    esp,0xc
c0013253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013257:	83 ec 08             	sub    esp,0x8
c001325a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001325e:	50                   	push   eax
c001325f:	e8 38 fe ff ff       	call   c001309c <UnixFile::UnixFile(int)>
c0013264:	83 c4 10             	add    esp,0x10
c0013267:	ba 58 45 02 c0       	mov    edx,0xc0024558
c001326c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013270:	89 10                	mov    DWORD PTR [eax],edx
c0013272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013276:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001327a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001327d:	90                   	nop
c001327e:	83 c4 0c             	add    esp,0xc
c0013281:	c3                   	ret    

c0013282 <UnixFile::~UnixFile()>:
c0013282:	83 ec 1c             	sub    esp,0x1c
c0013285:	ba 3c 45 02 c0       	mov    edx,0xc002453c
c001328a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001328e:	89 10                	mov    DWORD PTR [eax],edx
c0013290:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013294:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013297:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001329c:	7f 76                	jg     c0013314 <UnixFile::~UnixFile()+0x92>
c001329e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00132a6:	83 ec 0c             	sub    esp,0xc
c00132a9:	68 38 e2 02 c0       	push   0xc002e238
c00132ae:	e8 3f ee 00 00       	call   c00220f2 <LinkedList<UnixFile>::getFirstElement()>
c00132b3:	83 c4 10             	add    esp,0x10
c00132b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00132ba:	83 ec 0c             	sub    esp,0xc
c00132bd:	68 38 e2 02 c0       	push   0xc002e238
c00132c2:	e8 33 ee 00 00       	call   c00220fa <LinkedList<UnixFile>::removeFirst()>
c00132c7:	83 c4 10             	add    esp,0x10
c00132ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00132ce:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00132d2:	74 43                	je     c0013317 <UnixFile::~UnixFile()+0x95>
c00132d4:	83 ec 08             	sub    esp,0x8
c00132d7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00132db:	68 38 e2 02 c0       	push   0xc002e238
c00132e0:	e8 39 ed 00 00       	call   c002201e <LinkedList<UnixFile>::addElement(UnixFile*)>
c00132e5:	83 c4 10             	add    esp,0x10
c00132e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00132ec:	8d 50 01             	lea    edx,[eax+0x1]
c00132ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00132f3:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00132f8:	0f 94 c0             	sete   al
c00132fb:	0f b6 c0             	movzx  eax,al
c00132fe:	85 c0                	test   eax,eax
c0013300:	74 a4                	je     c00132a6 <UnixFile::~UnixFile()+0x24>
c0013302:	83 ec 0c             	sub    esp,0xc
c0013305:	68 f0 44 02 c0       	push   0xc00244f0
c001330a:	e8 03 cd ff ff       	call   c0010012 <KePanic(char const*)>
c001330f:	83 c4 10             	add    esp,0x10
c0013312:	eb 92                	jmp    c00132a6 <UnixFile::~UnixFile()+0x24>
c0013314:	90                   	nop
c0013315:	eb 01                	jmp    c0013318 <UnixFile::~UnixFile()+0x96>
c0013317:	90                   	nop
c0013318:	90                   	nop
c0013319:	83 c4 1c             	add    esp,0x1c
c001331c:	c3                   	ret    
c001331d:	90                   	nop

c001331e <UnixFile::~UnixFile()>:
c001331e:	83 ec 0c             	sub    esp,0xc
c0013321:	83 ec 0c             	sub    esp,0xc
c0013324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013328:	e8 55 ff ff ff       	call   c0013282 <UnixFile::~UnixFile()>
c001332d:	83 c4 10             	add    esp,0x10
c0013330:	83 ec 08             	sub    esp,0x8
c0013333:	6a 0c                	push   0xc
c0013335:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013339:	e8 15 a0 ff ff       	call   c000d353 <operator delete(void*, unsigned long)>
c001333e:	83 c4 10             	add    esp,0x10
c0013341:	83 c4 0c             	add    esp,0xc
c0013344:	c3                   	ret    
c0013345:	90                   	nop

c0013346 <ReservedFilename::~ReservedFilename()>:
c0013346:	83 ec 0c             	sub    esp,0xc
c0013349:	ba 58 45 02 c0       	mov    edx,0xc0024558
c001334e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013352:	89 10                	mov    DWORD PTR [eax],edx
c0013354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013358:	83 ec 0c             	sub    esp,0xc
c001335b:	50                   	push   eax
c001335c:	e8 21 ff ff ff       	call   c0013282 <UnixFile::~UnixFile()>
c0013361:	83 c4 10             	add    esp,0x10
c0013364:	90                   	nop
c0013365:	83 c4 0c             	add    esp,0xc
c0013368:	c3                   	ret    
c0013369:	90                   	nop

c001336a <ReservedFilename::~ReservedFilename()>:
c001336a:	83 ec 0c             	sub    esp,0xc
c001336d:	83 ec 0c             	sub    esp,0xc
c0013370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013374:	e8 cd ff ff ff       	call   c0013346 <ReservedFilename::~ReservedFilename()>
c0013379:	83 c4 10             	add    esp,0x10
c001337c:	83 ec 08             	sub    esp,0x8
c001337f:	6a 0c                	push   0xc
c0013381:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013385:	e8 c9 9f ff ff       	call   c000d353 <operator delete(void*, unsigned long)>
c001338a:	83 c4 10             	add    esp,0x10
c001338d:	83 c4 0c             	add    esp,0xc
c0013390:	c3                   	ret    

c0013391 <KeGetFileFromDescriptor(int)>:
c0013391:	53                   	push   ebx
c0013392:	83 ec 10             	sub    esp,0x10
c0013395:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013399:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001339f:	53                   	push   ebx
c00133a0:	68 10 45 02 c0       	push   0xc0024510
c00133a5:	e8 ba 3b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00133aa:	83 c4 10             	add    esp,0x10
c00133ad:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00133b3:	7f 30                	jg     c00133e5 <KeGetFileFromDescriptor(int)+0x54>
c00133b5:	83 ec 0c             	sub    esp,0xc
c00133b8:	68 38 e2 02 c0       	push   0xc002e238
c00133bd:	e8 30 ed 00 00       	call   c00220f2 <LinkedList<UnixFile>::getFirstElement()>
c00133c2:	83 c4 10             	add    esp,0x10
c00133c5:	8d 50 ff             	lea    edx,[eax-0x1]
c00133c8:	83 fa fd             	cmp    edx,0xfffffffd
c00133cb:	76 04                	jbe    c00133d1 <KeGetFileFromDescriptor(int)+0x40>
c00133cd:	31 c0                	xor    eax,eax
c00133cf:	eb 6e                	jmp    c001343f <KeGetFileFromDescriptor(int)+0xae>
c00133d1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00133d4:	74 69                	je     c001343f <KeGetFileFromDescriptor(int)+0xae>
c00133d6:	52                   	push   edx
c00133d7:	52                   	push   edx
c00133d8:	50                   	push   eax
c00133d9:	68 38 e2 02 c0       	push   0xc002e238
c00133de:	e8 b9 ed 00 00       	call   c002219c <LinkedList<UnixFile>::getNext(UnixFile*)>
c00133e3:	eb dd                	jmp    c00133c2 <KeGetFileFromDescriptor(int)+0x31>
c00133e5:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c00133ea:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00133f0:	74 4d                	je     c001343f <KeGetFileFromDescriptor(int)+0xae>
c00133f2:	a1 30 e2 02 c0       	mov    eax,ds:0xc002e230
c00133f7:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00133fd:	74 40                	je     c001343f <KeGetFileFromDescriptor(int)+0xae>
c00133ff:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c0013404:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001340a:	74 33                	je     c001343f <KeGetFileFromDescriptor(int)+0xae>
c001340c:	a1 24 e2 02 c0       	mov    eax,ds:0xc002e224
c0013411:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0013417:	74 26                	je     c001343f <KeGetFileFromDescriptor(int)+0xae>
c0013419:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001341f:	83 f8 08             	cmp    eax,0x8
c0013422:	77 09                	ja     c001342d <KeGetFileFromDescriptor(int)+0x9c>
c0013424:	8b 04 85 00 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e00]
c001342b:	eb 12                	jmp    c001343f <KeGetFileFromDescriptor(int)+0xae>
c001342d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0013433:	83 fb 08             	cmp    ebx,0x8
c0013436:	77 95                	ja     c00133cd <KeGetFileFromDescriptor(int)+0x3c>
c0013438:	8b 04 9d c0 e1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1e40]
c001343f:	83 c4 08             	add    esp,0x8
c0013442:	5b                   	pop    ebx
c0013443:	c3                   	ret    

c0013444 <__static_initialization_and_destruction_0(int, int)>:
c0013444:	83 ec 0c             	sub    esp,0xc
c0013447:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001344c:	75 34                	jne    c0013482 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001344e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013456:	75 2a                	jne    c0013482 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0013458:	83 ec 0c             	sub    esp,0xc
c001345b:	68 38 e2 02 c0       	push   0xc002e238
c0013460:	e8 77 eb 00 00       	call   c0021fdc <LinkedList<UnixFile>::LinkedList()>
c0013465:	83 c4 10             	add    esp,0x10
c0013468:	83 ec 04             	sub    esp,0x4
c001346b:	68 d8 60 02 c0       	push   0xc00260d8
c0013470:	68 38 e2 02 c0       	push   0xc002e238
c0013475:	68 da 1f 02 c0       	push   0xc0021fda
c001347a:	e8 84 9e ff ff       	call   c000d303 <__cxa_atexit>
c001347f:	83 c4 10             	add    esp,0x10
c0013482:	90                   	nop
c0013483:	83 c4 0c             	add    esp,0xc
c0013486:	c3                   	ret    

c0013487 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0013487:	83 ec 0c             	sub    esp,0xc
c001348a:	83 ec 08             	sub    esp,0x8
c001348d:	68 ff ff 00 00       	push   0xffff
c0013492:	6a 01                	push   0x1
c0013494:	e8 ab ff ff ff       	call   c0013444 <__static_initialization_and_destruction_0(int, int)>
c0013499:	83 c4 10             	add    esp,0x10
c001349c:	83 c4 0c             	add    esp,0xc
c001349f:	c3                   	ret    

c00134a0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00134a0:	53                   	push   ebx
c00134a1:	8b 15 68 68 02 c0    	mov    edx,DWORD PTR ds:0xc0026868
c00134a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00134ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00134af:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00134b5:	89 d8                	mov    eax,ebx
c00134b7:	d1 e8                	shr    eax,1
c00134b9:	01 d0                	add    eax,edx
c00134bb:	80 e3 01             	and    bl,0x1
c00134be:	8a 10                	mov    dl,BYTE PTR [eax]
c00134c0:	75 09                	jne    c00134cb <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00134c2:	83 e2 f0             	and    edx,0xfffffff0
c00134c5:	09 ca                	or     edx,ecx
c00134c7:	88 10                	mov    BYTE PTR [eax],dl
c00134c9:	5b                   	pop    ebx
c00134ca:	c3                   	ret    
c00134cb:	83 e2 0f             	and    edx,0xf
c00134ce:	0f b6 c9             	movzx  ecx,cl
c00134d1:	c1 e1 04             	shl    ecx,0x4
c00134d4:	09 ca                	or     edx,ecx
c00134d6:	88 10                	mov    BYTE PTR [eax],dl
c00134d8:	5b                   	pop    ebx
c00134d9:	c3                   	ret    

c00134da <Virt::getPageState(unsigned long)>:
c00134da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134de:	8b 0d 68 68 02 c0    	mov    ecx,DWORD PTR ds:0xc0026868
c00134e4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00134ea:	89 d0                	mov    eax,edx
c00134ec:	d1 e8                	shr    eax,1
c00134ee:	80 e2 01             	and    dl,0x1
c00134f1:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00134f4:	74 03                	je     c00134f9 <Virt::getPageState(unsigned long)+0x1f>
c00134f6:	c1 e8 04             	shr    eax,0x4
c00134f9:	83 e0 0f             	and    eax,0xf
c00134fc:	c3                   	ret    

c00134fd <Virt::allocateKernelVirtualPages(int)>:
c00134fd:	55                   	push   ebp
c00134fe:	31 ed                	xor    ebp,ebp
c0013500:	57                   	push   edi
c0013501:	31 ff                	xor    edi,edi
c0013503:	56                   	push   esi
c0013504:	53                   	push   ebx
c0013505:	31 db                	xor    ebx,ebx
c0013507:	83 ec 0c             	sub    esp,0xc
c001350a:	8b 35 64 68 02 c0    	mov    esi,DWORD PTR ds:0xc0026864
c0013510:	56                   	push   esi
c0013511:	e8 c4 ff ff ff       	call   c00134da <Virt::getPageState(unsigned long)>
c0013516:	5a                   	pop    edx
c0013517:	84 c0                	test   al,al
c0013519:	75 41                	jne    c001355c <Virt::allocateKernelVirtualPages(int)+0x5f>
c001351b:	85 db                	test   ebx,ebx
c001351d:	75 02                	jne    c0013521 <Virt::allocateKernelVirtualPages(int)+0x24>
c001351f:	89 f5                	mov    ebp,esi
c0013521:	83 c3 01             	add    ebx,0x1
c0013524:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013528:	74 5f                	je     c0013589 <Virt::allocateKernelVirtualPages(int)+0x8c>
c001352a:	83 c6 01             	add    esi,0x1
c001352d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0013533:	76 34                	jbe    c0013569 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0013535:	c7 05 64 68 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0026864,0xc8000
c001353f:	f7 c7 01 00 00 00    	test   edi,0x1
c0013545:	75 2a                	jne    c0013571 <Virt::allocateKernelVirtualPages(int)+0x74>
c0013547:	be 00 80 0c 00       	mov    esi,0xc8000
c001354c:	bf 01 00 00 00       	mov    edi,0x1
c0013551:	56                   	push   esi
c0013552:	e8 83 ff ff ff       	call   c00134da <Virt::getPageState(unsigned long)>
c0013557:	5a                   	pop    edx
c0013558:	84 c0                	test   al,al
c001355a:	74 bf                	je     c001351b <Virt::allocateKernelVirtualPages(int)+0x1e>
c001355c:	31 db                	xor    ebx,ebx
c001355e:	83 c6 01             	add    esi,0x1
c0013561:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0013567:	77 cc                	ja     c0013535 <Virt::allocateKernelVirtualPages(int)+0x38>
c0013569:	89 35 64 68 02 c0    	mov    DWORD PTR ds:0xc0026864,esi
c001356f:	eb 9f                	jmp    c0013510 <Virt::allocateKernelVirtualPages(int)+0x13>
c0013571:	83 ec 0c             	sub    esp,0xc
c0013574:	68 6c 45 02 c0       	push   0xc002456c
c0013579:	e8 94 ca ff ff       	call   c0010012 <KePanic(char const*)>
c001357e:	8b 35 64 68 02 c0    	mov    esi,DWORD PTR ds:0xc0026864
c0013584:	83 c4 10             	add    esp,0x10
c0013587:	eb 87                	jmp    c0013510 <Virt::allocateKernelVirtualPages(int)+0x13>
c0013589:	89 2d 64 68 02 c0    	mov    DWORD PTR ds:0xc0026864,ebp
c001358f:	83 fb 01             	cmp    ebx,0x1
c0013592:	74 6f                	je     c0013603 <Virt::allocateKernelVirtualPages(int)+0x106>
c0013594:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013598:	85 c9                	test   ecx,ecx
c001359a:	74 49                	je     c00135e5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c001359c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00135a0:	89 e8                	mov    eax,ebp
c00135a2:	31 db                	xor    ebx,ebx
c00135a4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00135a7:	eb 18                	jmp    c00135c1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00135a9:	6a 01                	push   0x1
c00135ab:	83 c3 01             	add    ebx,0x1
c00135ae:	50                   	push   eax
c00135af:	e8 ec fe ff ff       	call   c00134a0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00135b4:	58                   	pop    eax
c00135b5:	5a                   	pop    edx
c00135b6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00135ba:	74 29                	je     c00135e5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00135bc:	a1 64 68 02 c0       	mov    eax,ds:0xc0026864
c00135c1:	8d 50 01             	lea    edx,[eax+0x1]
c00135c4:	85 db                	test   ebx,ebx
c00135c6:	89 15 64 68 02 c0    	mov    DWORD PTR ds:0xc0026864,edx
c00135cc:	74 24                	je     c00135f2 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00135ce:	39 df                	cmp    edi,ebx
c00135d0:	75 d7                	jne    c00135a9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00135d2:	6a 03                	push   0x3
c00135d4:	83 c3 01             	add    ebx,0x1
c00135d7:	50                   	push   eax
c00135d8:	e8 c3 fe ff ff       	call   c00134a0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00135dd:	59                   	pop    ecx
c00135de:	5e                   	pop    esi
c00135df:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00135e3:	75 d7                	jne    c00135bc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00135e5:	83 c4 0c             	add    esp,0xc
c00135e8:	89 e8                	mov    eax,ebp
c00135ea:	5b                   	pop    ebx
c00135eb:	c1 e0 0c             	shl    eax,0xc
c00135ee:	5e                   	pop    esi
c00135ef:	5f                   	pop    edi
c00135f0:	5d                   	pop    ebp
c00135f1:	c3                   	ret    
c00135f2:	6a 02                	push   0x2
c00135f4:	bb 01 00 00 00       	mov    ebx,0x1
c00135f9:	50                   	push   eax
c00135fa:	e8 a1 fe ff ff       	call   c00134a0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00135ff:	58                   	pop    eax
c0013600:	5a                   	pop    edx
c0013601:	eb b9                	jmp    c00135bc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0013603:	6a 04                	push   0x4
c0013605:	8d 45 01             	lea    eax,[ebp+0x1]
c0013608:	55                   	push   ebp
c0013609:	a3 64 68 02 c0       	mov    ds:0xc0026864,eax
c001360e:	e8 8d fe ff ff       	call   c00134a0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013613:	5b                   	pop    ebx
c0013614:	89 e8                	mov    eax,ebp
c0013616:	5e                   	pop    esi
c0013617:	c1 e0 0c             	shl    eax,0xc
c001361a:	83 c4 0c             	add    esp,0xc
c001361d:	5b                   	pop    ebx
c001361e:	5e                   	pop    esi
c001361f:	5f                   	pop    edi
c0013620:	5d                   	pop    ebp
c0013621:	c3                   	ret    

c0013622 <Virt::freeSwapfilePage(unsigned long)>:
c0013622:	53                   	push   ebx
c0013623:	8b 15 4c e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e24c
c0013629:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001362d:	b8 01 00 00 00       	mov    eax,0x1
c0013632:	89 cb                	mov    ebx,ecx
c0013634:	d3 e0                	shl    eax,cl
c0013636:	c1 eb 05             	shr    ebx,0x5
c0013639:	f7 d0                	not    eax
c001363b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001363e:	21 c1                	and    ecx,eax
c0013640:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0013643:	5b                   	pop    ebx
c0013644:	c3                   	ret    

c0013645 <Virt::swapIDToSector(unsigned long)>:
c0013645:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013649:	8b 15 6c 68 02 c0    	mov    edx,DWORD PTR ds:0xc002686c
c001364f:	8b 0d 74 68 02 c0    	mov    ecx,DWORD PTR ds:0xc0026874
c0013655:	0f af c2             	imul   eax,edx
c0013658:	01 c8                	add    eax,ecx
c001365a:	c3                   	ret    

c001365b <Virt::allocateSwapfilePage()>:
c001365b:	55                   	push   ebp
c001365c:	31 d2                	xor    edx,edx
c001365e:	57                   	push   edi
c001365f:	56                   	push   esi
c0013660:	53                   	push   ebx
c0013661:	83 ec 0c             	sub    esp,0xc
c0013664:	8b 0d 6c 68 02 c0    	mov    ecx,DWORD PTR ds:0xc002686c
c001366a:	a1 70 68 02 c0       	mov    eax,ds:0xc0026870
c001366f:	f7 f1                	div    ecx
c0013671:	39 0d 70 68 02 c0    	cmp    DWORD PTR ds:0xc0026870,ecx
c0013677:	72 2f                	jb     c00136a8 <Virt::allocateSwapfilePage()+0x4d>
c0013679:	8b 35 4c e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e24c
c001367f:	8b 16                	mov    edx,DWORD PTR [esi]
c0013681:	f6 c2 01             	test   dl,0x1
c0013684:	74 3e                	je     c00136c4 <Virt::allocateSwapfilePage()+0x69>
c0013686:	31 c9                	xor    ecx,ecx
c0013688:	bf 01 00 00 00       	mov    edi,0x1
c001368d:	eb 12                	jmp    c00136a1 <Virt::allocateSwapfilePage()+0x46>
c001368f:	89 fd                	mov    ebp,edi
c0013691:	89 ca                	mov    edx,ecx
c0013693:	d3 e5                	shl    ebp,cl
c0013695:	c1 ea 05             	shr    edx,0x5
c0013698:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001369b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001369d:	85 ea                	test   edx,ebp
c001369f:	74 2c                	je     c00136cd <Virt::allocateSwapfilePage()+0x72>
c00136a1:	83 c1 01             	add    ecx,0x1
c00136a4:	39 c8                	cmp    eax,ecx
c00136a6:	77 e7                	ja     c001368f <Virt::allocateSwapfilePage()+0x34>
c00136a8:	83 ec 0c             	sub    esp,0xc
c00136ab:	68 ef 4a 02 c0       	push   0xc0024aef
c00136b0:	e8 5d c9 ff ff       	call   c0010012 <KePanic(char const*)>
c00136b5:	83 c4 10             	add    esp,0x10
c00136b8:	31 c9                	xor    ecx,ecx
c00136ba:	83 c4 0c             	add    esp,0xc
c00136bd:	89 c8                	mov    eax,ecx
c00136bf:	5b                   	pop    ebx
c00136c0:	5e                   	pop    esi
c00136c1:	5f                   	pop    edi
c00136c2:	5d                   	pop    ebp
c00136c3:	c3                   	ret    
c00136c4:	89 f3                	mov    ebx,esi
c00136c6:	bd 01 00 00 00       	mov    ebp,0x1
c00136cb:	31 c9                	xor    ecx,ecx
c00136cd:	09 ea                	or     edx,ebp
c00136cf:	89 c8                	mov    eax,ecx
c00136d1:	89 13                	mov    DWORD PTR [ebx],edx
c00136d3:	83 c4 0c             	add    esp,0xc
c00136d6:	5b                   	pop    ebx
c00136d7:	5e                   	pop    esi
c00136d8:	5f                   	pop    edi
c00136d9:	5d                   	pop    ebp
c00136da:	c3                   	ret    

c00136db <Virt::virtualMemorySetup()>:
c00136db:	53                   	push   ebx
c00136dc:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00136e1:	6a 0f                	push   0xf
c00136e3:	53                   	push   ebx
c00136e4:	83 c3 01             	add    ebx,0x1
c00136e7:	e8 b4 fd ff ff       	call   c00134a0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00136ec:	58                   	pop    eax
c00136ed:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00136f3:	5a                   	pop    edx
c00136f4:	75 eb                	jne    c00136e1 <Virt::virtualMemorySetup()+0x6>
c00136f6:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00136fb:	6a 00                	push   0x0
c00136fd:	53                   	push   ebx
c00136fe:	83 c3 01             	add    ebx,0x1
c0013701:	e8 9a fd ff ff       	call   c00134a0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013706:	59                   	pop    ecx
c0013707:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001370d:	58                   	pop    eax
c001370e:	75 eb                	jne    c00136fb <Virt::virtualMemorySetup()+0x20>
c0013710:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0013715:	6a 0f                	push   0xf
c0013717:	53                   	push   ebx
c0013718:	83 c3 01             	add    ebx,0x1
c001371b:	e8 80 fd ff ff       	call   c00134a0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013720:	58                   	pop    eax
c0013721:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0013727:	5a                   	pop    edx
c0013728:	75 eb                	jne    c0013715 <Virt::virtualMemorySetup()+0x3a>
c001372a:	5b                   	pop    ebx
c001372b:	c3                   	ret    

c001372c <Virt::setupPageSwapping(int)>:
c001372c:	53                   	push   ebx
c001372d:	83 ec 0c             	sub    esp,0xc
c0013730:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013734:	a1 e8 ba 02 c0       	mov    eax,ds:0xc002bae8
c0013739:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001373f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013741:	53                   	push   ebx
c0013742:	c1 e3 0b             	shl    ebx,0xb
c0013745:	68 06 4b 02 c0       	push   0xc0024b06
c001374a:	50                   	push   eax
c001374b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c001374e:	89 1d 70 68 02 c0    	mov    DWORD PTR ds:0xc0026870,ebx
c0013754:	c6 05 78 68 02 c0 43 	mov    BYTE PTR ds:0xc0026878,0x43
c001375b:	c1 eb 08             	shr    ebx,0x8
c001375e:	a3 74 68 02 c0       	mov    ds:0xc0026874,eax
c0013763:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013766:	c7 05 6c 68 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002686c,0x8
c0013770:	e8 56 c5 ff ff       	call   c000fccb <malloc>
c0013775:	83 c4 0c             	add    esp,0xc
c0013778:	89 c1                	mov    ecx,eax
c001377a:	a3 4c e2 02 c0       	mov    ds:0xc002e24c,eax
c001377f:	31 d2                	xor    edx,edx
c0013781:	a1 70 68 02 c0       	mov    eax,ds:0xc0026870
c0013786:	f7 35 6c 68 02 c0    	div    DWORD PTR ds:0xc002686c
c001378c:	c1 e8 05             	shr    eax,0x5
c001378f:	50                   	push   eax
c0013790:	6a 00                	push   0x0
c0013792:	51                   	push   ecx
c0013793:	e8 58 cd fe ff       	call   c00004f0 <memset>
c0013798:	83 c4 18             	add    esp,0x18
c001379b:	5b                   	pop    ebx
c001379c:	c3                   	ret    
c001379d:	90                   	nop

c001379e <VAS::setCPUSpecific(unsigned long)>:
c001379e:	c3                   	ret    
c001379f:	90                   	nop

c00137a0 <VAS::VAS(VAS*)>:
c00137a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00137ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00137b6:	90                   	nop
c00137b7:	c3                   	ret    

c00137b8 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00137b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00137bc:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00137c1:	89 c2                	mov    edx,eax
c00137c3:	c1 e8 0a             	shr    eax,0xa
c00137c6:	c1 ea 16             	shr    edx,0x16
c00137c9:	83 f9 01             	cmp    ecx,0x1
c00137cc:	19 c9                	sbb    ecx,ecx
c00137ce:	c1 e2 0c             	shl    edx,0xc
c00137d1:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00137d7:	25 fc 0f 00 00       	and    eax,0xffc
c00137dc:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00137e3:	01 d0                	add    eax,edx
c00137e5:	c3                   	ret    

c00137e6 <VAS::getPageTableEntry(unsigned long)>:
c00137e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00137ea:	89 ca                	mov    edx,ecx
c00137ec:	c1 e9 0a             	shr    ecx,0xa
c00137ef:	c1 ea 16             	shr    edx,0x16
c00137f2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00137f8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00137fe:	c1 e0 0c             	shl    eax,0xc
c0013801:	8d 04 08             	lea    eax,[eax+ecx*1]
c0013804:	c3                   	ret    

c0013805 <Virt::freeKernelVirtualPages(unsigned long)>:
c0013805:	55                   	push   ebp
c0013806:	57                   	push   edi
c0013807:	bf 01 00 00 00       	mov    edi,0x1
c001380c:	56                   	push   esi
c001380d:	53                   	push   ebx
c001380e:	83 ec 1c             	sub    esp,0x1c
c0013811:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013815:	c1 ee 0c             	shr    esi,0xc
c0013818:	eb 48                	jmp    c0013862 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c001381a:	83 ec 08             	sub    esp,0x8
c001381d:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c0013822:	55                   	push   ebp
c0013823:	50                   	push   eax
c0013824:	e8 bd ff ff ff       	call   c00137e6 <VAS::getPageTableEntry(unsigned long)>
c0013829:	83 c4 10             	add    esp,0x10
c001382c:	8b 10                	mov    edx,DWORD PTR [eax]
c001382e:	f6 c6 04             	test   dh,0x4
c0013831:	75 70                	jne    c00138a3 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013833:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013839:	83 fb 04             	cmp    ebx,0x4
c001383c:	0f 84 8a 00 00 00    	je     c00138cc <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0013842:	83 fb 02             	cmp    ebx,0x2
c0013845:	0f 84 9a 00 00 00    	je     c00138e5 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c001384b:	83 fb 03             	cmp    ebx,0x3
c001384e:	0f 84 be 00 00 00    	je     c0013912 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0013854:	83 fb 01             	cmp    ebx,0x1
c0013857:	0f 84 a2 00 00 00    	je     c00138ff <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c001385d:	83 c6 01             	add    esi,0x1
c0013860:	31 ff                	xor    edi,edi
c0013862:	56                   	push   esi
c0013863:	89 f5                	mov    ebp,esi
c0013865:	e8 70 fc ff ff       	call   c00134da <Virt::getPageState(unsigned long)>
c001386a:	c1 e5 0c             	shl    ebp,0xc
c001386d:	0f b6 d8             	movzx  ebx,al
c0013870:	5a                   	pop    edx
c0013871:	85 db                	test   ebx,ebx
c0013873:	75 a5                	jne    c001381a <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0013875:	83 ec 0c             	sub    esp,0xc
c0013878:	68 1d 4b 02 c0       	push   0xc0024b1d
c001387d:	e8 90 c7 ff ff       	call   c0010012 <KePanic(char const*)>
c0013882:	5a                   	pop    edx
c0013883:	59                   	pop    ecx
c0013884:	55                   	push   ebp
c0013885:	8b 2d 50 e2 02 c0    	mov    ebp,DWORD PTR ds:0xc002e250
c001388b:	55                   	push   ebp
c001388c:	e8 55 ff ff ff       	call   c00137e6 <VAS::getPageTableEntry(unsigned long)>
c0013891:	83 c4 10             	add    esp,0x10
c0013894:	8b 10                	mov    edx,DWORD PTR [eax]
c0013896:	f6 c6 04             	test   dh,0x4
c0013899:	75 08                	jne    c00138a3 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c001389b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138a1:	eb ba                	jmp    c001385d <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00138a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00138a7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00138ad:	83 ec 0c             	sub    esp,0xc
c00138b0:	52                   	push   edx
c00138b1:	e8 e7 c8 ff ff       	call   c001019d <Phys::freePage(unsigned long)>
c00138b6:	83 c4 10             	add    esp,0x10
c00138b9:	83 fb 04             	cmp    ebx,0x4
c00138bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138c6:	0f 85 76 ff ff ff    	jne    c0013842 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00138cc:	83 e7 01             	and    edi,0x1
c00138cf:	75 46                	jne    c0013917 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00138d1:	c7 44 24 30 8c 45 02 c0 	mov    DWORD PTR [esp+0x30],0xc002458c
c00138d9:	83 c4 1c             	add    esp,0x1c
c00138dc:	5b                   	pop    ebx
c00138dd:	5e                   	pop    esi
c00138de:	5f                   	pop    edi
c00138df:	5d                   	pop    ebp
c00138e0:	e9 2d c7 ff ff       	jmp    c0010012 <KePanic(char const*)>
c00138e5:	83 e7 01             	and    edi,0x1
c00138e8:	75 15                	jne    c00138ff <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00138ea:	83 ec 0c             	sub    esp,0xc
c00138ed:	68 39 4b 02 c0       	push   0xc0024b39
c00138f2:	e8 1b c7 ff ff       	call   c0010012 <KePanic(char const*)>
c00138f7:	83 c4 10             	add    esp,0x10
c00138fa:	e9 5e ff ff ff       	jmp    c001385d <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00138ff:	83 ec 08             	sub    esp,0x8
c0013902:	6a 00                	push   0x0
c0013904:	56                   	push   esi
c0013905:	e8 96 fb ff ff       	call   c00134a0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001390a:	83 c4 10             	add    esp,0x10
c001390d:	e9 4b ff ff ff       	jmp    c001385d <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013912:	83 e7 01             	and    edi,0x1
c0013915:	75 16                	jne    c001392d <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0013917:	83 ec 08             	sub    esp,0x8
c001391a:	6a 00                	push   0x0
c001391c:	56                   	push   esi
c001391d:	e8 7e fb ff ff       	call   c00134a0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013922:	83 c4 10             	add    esp,0x10
c0013925:	83 c4 1c             	add    esp,0x1c
c0013928:	5b                   	pop    ebx
c0013929:	5e                   	pop    esi
c001392a:	5f                   	pop    edi
c001392b:	5d                   	pop    ebp
c001392c:	c3                   	ret    
c001392d:	c7 44 24 30 55 4b 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024b55
c0013935:	83 c4 1c             	add    esp,0x1c
c0013938:	5b                   	pop    ebx
c0013939:	5e                   	pop    esi
c001393a:	5f                   	pop    edi
c001393b:	5d                   	pop    ebp
c001393c:	e9 d1 c6 ff ff       	jmp    c0010012 <KePanic(char const*)>
c0013941:	90                   	nop

c0013942 <VAS::freeAllocatedPages(unsigned long)>:
c0013942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013946:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001394a:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001394e:	74 09                	je     c0013959 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0013950:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013954:	e9 ac fe ff ff       	jmp    c0013805 <Virt::freeKernelVirtualPages(unsigned long)>
c0013959:	c7 44 24 04 b0 45 02 c0 	mov    DWORD PTR [esp+0x4],0xc00245b0
c0013961:	e9 fe 35 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c0013966 <VAS::virtualToPhysical(unsigned long)>:
c0013966:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001396a:	50                   	push   eax
c001396b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001396f:	52                   	push   edx
c0013970:	e8 71 fe ff ff       	call   c00137e6 <VAS::getPageTableEntry(unsigned long)>
c0013975:	59                   	pop    ecx
c0013976:	8b 00                	mov    eax,DWORD PTR [eax]
c0013978:	5a                   	pop    edx
c0013979:	25 00 f0 ff ff       	and    eax,0xfffff000
c001397e:	c3                   	ret    
c001397f:	90                   	nop

c0013980 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0013980:	55                   	push   ebp
c0013981:	57                   	push   edi
c0013982:	56                   	push   esi
c0013983:	53                   	push   ebx
c0013984:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013988:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001398c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013990:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013994:	85 db                	test   ebx,ebx
c0013996:	7e 24                	jle    c00139bc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0013998:	c1 e3 0c             	shl    ebx,0xc
c001399b:	01 f3                	add    ebx,esi
c001399d:	56                   	push   esi
c001399e:	81 c6 00 10 00 00    	add    esi,0x1000
c00139a4:	55                   	push   ebp
c00139a5:	e8 3c fe ff ff       	call   c00137e6 <VAS::getPageTableEntry(unsigned long)>
c00139aa:	5a                   	pop    edx
c00139ab:	59                   	pop    ecx
c00139ac:	8b 08                	mov    ecx,DWORD PTR [eax]
c00139ae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00139b2:	21 f9                	and    ecx,edi
c00139b4:	09 d1                	or     ecx,edx
c00139b6:	39 f3                	cmp    ebx,esi
c00139b8:	89 08                	mov    DWORD PTR [eax],ecx
c00139ba:	75 e1                	jne    c001399d <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c00139bc:	5b                   	pop    ebx
c00139bd:	5e                   	pop    esi
c00139be:	5f                   	pop    edi
c00139bf:	5d                   	pop    ebp
c00139c0:	c3                   	ret    
c00139c1:	90                   	nop

c00139c2 <VAS::VAS()>:
c00139c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00139cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139d1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00139d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139dc:	a3 50 e2 02 c0       	mov    ds:0xc002e250,eax
c00139e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139e5:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00139e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139ed:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00139f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139f4:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00139fb:	ba 7d 70 02 c0       	mov    edx,0xc002707d
c0013a00:	b8 00 70 02 c0       	mov    eax,0xc0027000
c0013a05:	29 c2                	sub    edx,eax
c0013a07:	89 d0                	mov    eax,edx
c0013a09:	05 ff 0f 00 00       	add    eax,0xfff
c0013a0e:	c1 e8 0c             	shr    eax,0xc
c0013a11:	89 c2                	mov    edx,eax
c0013a13:	b8 00 70 02 c0       	mov    eax,0xc0027000
c0013a18:	6a 04                	push   0x4
c0013a1a:	6a ff                	push   0xffffffff
c0013a1c:	52                   	push   edx
c0013a1d:	50                   	push   eax
c0013a1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013a22:	e8 59 ff ff ff       	call   c0013980 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013a27:	83 c4 14             	add    esp,0x14
c0013a2a:	90                   	nop
c0013a2b:	c3                   	ret    

c0013a2c <VAS::setToWriteCombining(unsigned long, int)>:
c0013a2c:	a1 e4 ea 02 c0       	mov    eax,ds:0xc002eae4
c0013a31:	50                   	push   eax
c0013a32:	6a ff                	push   0xffffffff
c0013a34:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013a38:	52                   	push   edx
c0013a39:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013a3d:	51                   	push   ecx
c0013a3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a42:	50                   	push   eax
c0013a43:	e8 38 ff ff ff       	call   c0013980 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013a48:	83 c4 14             	add    esp,0x14
c0013a4b:	c3                   	ret    

c0013a4c <VAS::mapOtherVASIn(bool, VAS*)>:
c0013a4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a50:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013a53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a57:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0013a5a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013a5f:	83 f8 01             	cmp    eax,0x1
c0013a62:	19 c0                	sbb    eax,eax
c0013a64:	83 ca 03             	or     edx,0x3
c0013a67:	83 e0 fc             	and    eax,0xfffffffc
c0013a6a:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0013a71:	0f 20 d8             	mov    eax,cr3
c0013a74:	0f 22 d8             	mov    cr3,eax
c0013a77:	c3                   	ret    

c0013a78 <VAS::~VAS()>:
c0013a78:	83 ec 2c             	sub    esp,0x2c
c0013a7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013a83:	fa                   	cli    
c0013a84:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013a89:	83 c0 01             	add    eax,0x1
c0013a8c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0013a91:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013a96:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a98:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013a9b:	8b 80 72 05 00 00    	mov    eax,DWORD PTR [eax+0x572]
c0013aa1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013aa5:	6a 01                	push   0x1
c0013aa7:	50                   	push   eax
c0013aa8:	e8 9f ff ff ff       	call   c0013a4c <VAS::mapOtherVASIn(bool, VAS*)>
c0013aad:	83 c4 0c             	add    esp,0xc
c0013ab0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013ab8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0013ac0:	0f 8f d8 00 00 00    	jg     c0013b9e <VAS::~VAS()+0x126>
c0013ac6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013aca:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013acd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ad1:	c1 e2 02             	shl    edx,0x2
c0013ad4:	01 d0                	add    eax,edx
c0013ad6:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ad8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ae0:	83 e0 01             	and    eax,0x1
c0013ae3:	0f 84 ab 00 00 00    	je     c0013b94 <VAS::~VAS()+0x11c>
c0013ae9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013af1:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013af9:	7f 74                	jg     c0013b6f <VAS::~VAS()+0xf7>
c0013afb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013aff:	c1 e0 0a             	shl    eax,0xa
c0013b02:	89 c2                	mov    edx,eax
c0013b04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b08:	01 d0                	add    eax,edx
c0013b0a:	c1 e0 0c             	shl    eax,0xc
c0013b0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b11:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013b16:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b18:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0013b1b:	8b 80 72 05 00 00    	mov    eax,DWORD PTR [eax+0x572]
c0013b21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013b25:	6a 01                	push   0x1
c0013b27:	50                   	push   eax
c0013b28:	e8 8b fc ff ff       	call   c00137b8 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013b2d:	83 c4 0c             	add    esp,0xc
c0013b30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013b34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013b38:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b42:	25 01 04 00 00       	and    eax,0x401
c0013b47:	3d 01 04 00 00       	cmp    eax,0x401
c0013b4c:	75 1a                	jne    c0013b68 <VAS::~VAS()+0xf0>
c0013b4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b52:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b57:	83 ec 0c             	sub    esp,0xc
c0013b5a:	50                   	push   eax
c0013b5b:	e8 3d c6 ff ff       	call   c001019d <Phys::freePage(unsigned long)>
c0013b60:	83 c4 10             	add    esp,0x10
c0013b63:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013b68:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013b6d:	eb 82                	jmp    c0013af1 <VAS::~VAS()+0x79>
c0013b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b73:	25 00 04 00 00       	and    eax,0x400
c0013b78:	74 1a                	je     c0013b94 <VAS::~VAS()+0x11c>
c0013b7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b7e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b83:	83 ec 0c             	sub    esp,0xc
c0013b86:	50                   	push   eax
c0013b87:	e8 11 c6 ff ff       	call   c001019d <Phys::freePage(unsigned long)>
c0013b8c:	83 c4 10             	add    esp,0x10
c0013b8f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013b94:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013b99:	e9 1a ff ff ff       	jmp    c0013ab8 <VAS::~VAS()+0x40>
c0013b9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ba2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013ba5:	83 ec 0c             	sub    esp,0xc
c0013ba8:	50                   	push   eax
c0013ba9:	e8 57 fc ff ff       	call   c0013805 <Virt::freeKernelVirtualPages(unsigned long)>
c0013bae:	83 c4 10             	add    esp,0x10
c0013bb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013bb5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013bb8:	83 ec 0c             	sub    esp,0xc
c0013bbb:	50                   	push   eax
c0013bbc:	e8 dc c5 ff ff       	call   c001019d <Phys::freePage(unsigned long)>
c0013bc1:	83 c4 10             	add    esp,0x10
c0013bc4:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013bc9:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0013bd1:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013bd6:	85 c0                	test   eax,eax
c0013bd8:	75 01                	jne    c0013bdb <VAS::~VAS()+0x163>
c0013bda:	fb                   	sti    
c0013bdb:	90                   	nop
c0013bdc:	83 c4 2c             	add    esp,0x2c
c0013bdf:	c3                   	ret    

c0013be0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013be0:	55                   	push   ebp
c0013be1:	57                   	push   edi
c0013be2:	56                   	push   esi
c0013be3:	53                   	push   ebx
c0013be4:	83 ec 1c             	sub    esp,0x1c
c0013be7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013beb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013bef:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013bf5:	77 08                	ja     c0013bff <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0013bf7:	0f 20 d8             	mov    eax,cr3
c0013bfa:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0013bfd:	75 49                	jne    c0013c48 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0013bff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013c03:	09 d8                	or     eax,ebx
c0013c05:	a9 ff 0f 00 00       	test   eax,0xfff
c0013c0a:	75 59                	jne    c0013c65 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0013c0c:	89 de                	mov    esi,ebx
c0013c0e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013c11:	c1 ee 16             	shr    esi,0x16
c0013c14:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013c1b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013c1f:	74 56                	je     c0013c77 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0013c21:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013c25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013c29:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013c2f:	c1 eb 0a             	shr    ebx,0xa
c0013c32:	c1 e6 0c             	shl    esi,0xc
c0013c35:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013c3b:	09 d0                	or     eax,edx
c0013c3d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0013c40:	83 c4 1c             	add    esp,0x1c
c0013c43:	5b                   	pop    ebx
c0013c44:	5e                   	pop    esi
c0013c45:	5f                   	pop    edi
c0013c46:	5d                   	pop    ebp
c0013c47:	c3                   	ret    
c0013c48:	83 ec 0c             	sub    esp,0xc
c0013c4b:	68 d4 45 02 c0       	push   0xc00245d4
c0013c50:	e8 0f 33 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013c55:	83 c4 10             	add    esp,0x10
c0013c58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013c5c:	09 d8                	or     eax,ebx
c0013c5e:	a9 ff 0f 00 00       	test   eax,0xfff
c0013c63:	74 a7                	je     c0013c0c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013c65:	83 ec 0c             	sub    esp,0xc
c0013c68:	68 3c 46 02 c0       	push   0xc002463c
c0013c6d:	e8 a0 c3 ff ff       	call   c0010012 <KePanic(char const*)>
c0013c72:	83 c4 10             	add    esp,0x10
c0013c75:	eb 95                	jmp    c0013c0c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013c77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013c7b:	e8 86 c5 ff ff       	call   c0010206 <Phys::allocatePage()>
c0013c80:	83 ec 0c             	sub    esp,0xc
c0013c83:	89 c5                	mov    ebp,eax
c0013c85:	8b 0d 50 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e250
c0013c8b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013c8f:	6a 01                	push   0x1
c0013c91:	e8 67 f8 ff ff       	call   c00134fd <Virt::allocateKernelVirtualPages(int)>
c0013c96:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013c9d:	6a 01                	push   0x1
c0013c9f:	50                   	push   eax
c0013ca0:	55                   	push   ebp
c0013ca1:	81 cd 07 04 00 00    	or     ebp,0x407
c0013ca7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013cab:	51                   	push   ecx
c0013cac:	e8 19 01 00 00       	call   c0013dca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013cb1:	83 c4 1c             	add    esp,0x1c
c0013cb4:	68 00 10 00 00       	push   0x1000
c0013cb9:	6a 00                	push   0x0
c0013cbb:	50                   	push   eax
c0013cbc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013cc0:	e8 2b c8 fe ff       	call   c00004f0 <memset>
c0013cc5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013cc9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013ccc:	e8 34 fb ff ff       	call   c0013805 <Virt::freeKernelVirtualPages(unsigned long)>
c0013cd1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013cd5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013cd8:	83 c4 10             	add    esp,0x10
c0013cdb:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0013cde:	e9 3e ff ff ff       	jmp    c0013c21 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0013ce3:	90                   	nop

c0013ce4 <VAS::allocatePages(int, int)>:
c0013ce4:	55                   	push   ebp
c0013ce5:	57                   	push   edi
c0013ce6:	56                   	push   esi
c0013ce7:	53                   	push   ebx
c0013ce8:	83 ec 1c             	sub    esp,0x1c
c0013ceb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013cef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013cf3:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013cf7:	75 71                	jne    c0013d6a <VAS::allocatePages(int, int)+0x86>
c0013cf9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013cfc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d00:	85 c0                	test   eax,eax
c0013d02:	74 4d                	je     c0013d51 <VAS::allocatePages(int, int)+0x6d>
c0013d04:	89 dd                	mov    ebp,ebx
c0013d06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d0a:	c1 e5 0c             	shl    ebp,0xc
c0013d0d:	01 c5                	add    ebp,eax
c0013d0f:	85 db                	test   ebx,ebx
c0013d11:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013d14:	7e 29                	jle    c0013d3f <VAS::allocatePages(int, int)+0x5b>
c0013d16:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013d1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013d1e:	81 cf 00 04 00 00    	or     edi,0x400
c0013d24:	e8 dd c4 ff ff       	call   c0010206 <Phys::allocatePage()>
c0013d29:	57                   	push   edi
c0013d2a:	53                   	push   ebx
c0013d2b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013d31:	50                   	push   eax
c0013d32:	56                   	push   esi
c0013d33:	e8 a8 fe ff ff       	call   c0013be0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013d38:	83 c4 10             	add    esp,0x10
c0013d3b:	39 dd                	cmp    ebp,ebx
c0013d3d:	75 e5                	jne    c0013d24 <VAS::allocatePages(int, int)+0x40>
c0013d3f:	0f 20 d8             	mov    eax,cr3
c0013d42:	0f 22 d8             	mov    cr3,eax
c0013d45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d49:	83 c4 1c             	add    esp,0x1c
c0013d4c:	5b                   	pop    ebx
c0013d4d:	5e                   	pop    esi
c0013d4e:	5f                   	pop    edi
c0013d4f:	5d                   	pop    ebp
c0013d50:	c3                   	ret    
c0013d51:	83 ec 0c             	sub    esp,0xc
c0013d54:	68 60 46 02 c0       	push   0xc0024660
c0013d59:	e8 b4 c2 ff ff       	call   c0010012 <KePanic(char const*)>
c0013d5e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013d61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d65:	83 c4 10             	add    esp,0x10
c0013d68:	eb 9a                	jmp    c0013d04 <VAS::allocatePages(int, int)+0x20>
c0013d6a:	83 ec 0c             	sub    esp,0xc
c0013d6d:	53                   	push   ebx
c0013d6e:	e8 8a f7 ff ff       	call   c00134fd <Virt::allocateKernelVirtualPages(int)>
c0013d73:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d77:	83 c4 10             	add    esp,0x10
c0013d7a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013d7f:	77 37                	ja     c0013db8 <VAS::allocatePages(int, int)+0xd4>
c0013d81:	85 db                	test   ebx,ebx
c0013d83:	7e ba                	jle    c0013d3f <VAS::allocatePages(int, int)+0x5b>
c0013d85:	c1 e3 0c             	shl    ebx,0xc
c0013d88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013d8c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013d90:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0013d93:	81 cf 00 04 00 00    	or     edi,0x400
c0013d99:	89 c3                	mov    ebx,eax
c0013d9b:	e8 66 c4 ff ff       	call   c0010206 <Phys::allocatePage()>
c0013da0:	57                   	push   edi
c0013da1:	53                   	push   ebx
c0013da2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013da8:	50                   	push   eax
c0013da9:	56                   	push   esi
c0013daa:	e8 31 fe ff ff       	call   c0013be0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013daf:	83 c4 10             	add    esp,0x10
c0013db2:	39 dd                	cmp    ebp,ebx
c0013db4:	75 e5                	jne    c0013d9b <VAS::allocatePages(int, int)+0xb7>
c0013db6:	eb 87                	jmp    c0013d3f <VAS::allocatePages(int, int)+0x5b>
c0013db8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013dbc:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013dc1:	09 c2                	or     edx,eax
c0013dc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0013dc7:	eb b8                	jmp    c0013d81 <VAS::allocatePages(int, int)+0x9d>
c0013dc9:	90                   	nop

c0013dca <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013dca:	55                   	push   ebp
c0013dcb:	57                   	push   edi
c0013dcc:	56                   	push   esi
c0013dcd:	53                   	push   ebx
c0013dce:	83 ec 0c             	sub    esp,0xc
c0013dd1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013dd5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013dd9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013ddd:	85 db                	test   ebx,ebx
c0013ddf:	7e 2f                	jle    c0013e10 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0013de1:	c1 e3 0c             	shl    ebx,0xc
c0013de4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013de8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013dec:	01 d3                	add    ebx,edx
c0013dee:	55                   	push   ebp
c0013def:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013df3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013df7:	29 c2                	sub    edx,eax
c0013df9:	01 f2                	add    edx,esi
c0013dfb:	52                   	push   edx
c0013dfc:	56                   	push   esi
c0013dfd:	81 c6 00 10 00 00    	add    esi,0x1000
c0013e03:	57                   	push   edi
c0013e04:	e8 d7 fd ff ff       	call   c0013be0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013e09:	83 c4 10             	add    esp,0x10
c0013e0c:	39 de                	cmp    esi,ebx
c0013e0e:	75 de                	jne    c0013dee <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0013e10:	0f 20 d8             	mov    eax,cr3
c0013e13:	0f 22 d8             	mov    cr3,eax
c0013e16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013e1a:	83 c4 0c             	add    esp,0xc
c0013e1d:	5b                   	pop    ebx
c0013e1e:	5e                   	pop    esi
c0013e1f:	5f                   	pop    edi
c0013e20:	5d                   	pop    ebp
c0013e21:	c3                   	ret    

c0013e22 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013e22:	55                   	push   ebp
c0013e23:	57                   	push   edi
c0013e24:	56                   	push   esi
c0013e25:	53                   	push   ebx
c0013e26:	83 ec 1c             	sub    esp,0x1c
c0013e29:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013e2d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0013e31:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013e35:	09 f8                	or     eax,edi
c0013e37:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013e3b:	a9 ff 0f 00 00       	test   eax,0xfff
c0013e40:	75 4f                	jne    c0013e91 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013e42:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013e46:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013e49:	c1 eb 16             	shr    ebx,0x16
c0013e4c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0013e53:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0013e57:	74 52                	je     c0013eab <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0013e59:	0f b6 f2             	movzx  esi,dl
c0013e5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013e60:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0013e64:	c1 e8 0a             	shr    eax,0xa
c0013e67:	83 fe 01             	cmp    esi,0x1
c0013e6a:	19 d2                	sbb    edx,edx
c0013e6c:	c1 e3 0c             	shl    ebx,0xc
c0013e6f:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0013e75:	25 fc 0f 00 00       	and    eax,0xffc
c0013e7a:	01 d8                	add    eax,ebx
c0013e7c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013e80:	09 d9                	or     ecx,ebx
c0013e82:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0013e89:	83 c4 1c             	add    esp,0x1c
c0013e8c:	5b                   	pop    ebx
c0013e8d:	5e                   	pop    esi
c0013e8e:	5f                   	pop    edi
c0013e8f:	5d                   	pop    ebp
c0013e90:	c3                   	ret    
c0013e91:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0013e95:	83 ec 0c             	sub    esp,0xc
c0013e98:	68 8c 46 02 c0       	push   0xc002468c
c0013e9d:	e8 70 c1 ff ff       	call   c0010012 <KePanic(char const*)>
c0013ea2:	83 c4 10             	add    esp,0x10
c0013ea5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013ea9:	eb 97                	jmp    c0013e42 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0013eab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013eaf:	e8 52 c3 ff ff       	call   c0010206 <Phys::allocatePage()>
c0013eb4:	83 ec 0c             	sub    esp,0xc
c0013eb7:	89 c5                	mov    ebp,eax
c0013eb9:	8b 0d 50 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e250
c0013ebf:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013ec3:	6a 01                	push   0x1
c0013ec5:	e8 33 f6 ff ff       	call   c00134fd <Virt::allocateKernelVirtualPages(int)>
c0013eca:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013ed1:	6a 01                	push   0x1
c0013ed3:	50                   	push   eax
c0013ed4:	55                   	push   ebp
c0013ed5:	81 cd 07 04 00 00    	or     ebp,0x407
c0013edb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013edf:	51                   	push   ecx
c0013ee0:	e8 e5 fe ff ff       	call   c0013dca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013ee5:	83 c4 1c             	add    esp,0x1c
c0013ee8:	68 00 10 00 00       	push   0x1000
c0013eed:	6a 00                	push   0x0
c0013eef:	50                   	push   eax
c0013ef0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ef4:	e8 f7 c5 fe ff       	call   c00004f0 <memset>
c0013ef9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013efd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013f00:	e8 00 f9 ff ff       	call   c0013805 <Virt::freeKernelVirtualPages(unsigned long)>
c0013f05:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013f08:	83 c4 10             	add    esp,0x10
c0013f0b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0013f0e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013f12:	e9 42 ff ff ff       	jmp    c0013e59 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0013f17:	90                   	nop

c0013f18 <VAS::VAS(bool)>:
c0013f18:	53                   	push   ebx
c0013f19:	83 ec 28             	sub    esp,0x28
c0013f1c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f20:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013f24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f28:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f33:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013f3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f3e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013f42:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013f45:	e8 bc c2 ff ff       	call   c0010206 <Phys::allocatePage()>
c0013f4a:	89 c2                	mov    edx,eax
c0013f4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f50:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013f53:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c0013f59:	83 ec 0c             	sub    esp,0xc
c0013f5c:	6a 01                	push   0x1
c0013f5e:	e8 9a f5 ff ff       	call   c00134fd <Virt::allocateKernelVirtualPages(int)>
c0013f63:	83 c4 10             	add    esp,0x10
c0013f66:	89 c2                	mov    edx,eax
c0013f68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f6c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013f6f:	83 ec 0c             	sub    esp,0xc
c0013f72:	6a 03                	push   0x3
c0013f74:	6a 01                	push   0x1
c0013f76:	52                   	push   edx
c0013f77:	50                   	push   eax
c0013f78:	53                   	push   ebx
c0013f79:	e8 4c fe ff ff       	call   c0013dca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013f7e:	83 c4 20             	add    esp,0x20
c0013f81:	89 c2                	mov    edx,eax
c0013f83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f87:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013f8a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013f92:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013f9a:	7f 1d                	jg     c0013fb9 <VAS::VAS(bool)+0xa1>
c0013f9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fa0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013fa3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013fa7:	c1 e2 02             	shl    edx,0x2
c0013faa:	01 d0                	add    eax,edx
c0013fac:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013fb2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013fb7:	eb d9                	jmp    c0013f92 <VAS::VAS(bool)+0x7a>
c0013fb9:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013fc1:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013fc9:	7f 59                	jg     c0014024 <VAS::VAS(bool)+0x10c>
c0013fcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013fcf:	2d 00 02 00 00       	sub    eax,0x200
c0013fd4:	c1 e0 0c             	shl    eax,0xc
c0013fd7:	89 c2                	mov    edx,eax
c0013fd9:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013fde:	89 d1                	mov    ecx,edx
c0013fe0:	09 c1                	or     ecx,eax
c0013fe2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013fe6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013fe9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013fed:	c1 e2 02             	shl    edx,0x2
c0013ff0:	01 d0                	add    eax,edx
c0013ff2:	83 c9 05             	or     ecx,0x5
c0013ff5:	89 ca                	mov    edx,ecx
c0013ff7:	89 10                	mov    DWORD PTR [eax],edx
c0013ff9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ffd:	2d 40 03 00 00       	sub    eax,0x340
c0014002:	83 f8 7f             	cmp    eax,0x7f
c0014005:	77 16                	ja     c001401d <VAS::VAS(bool)+0x105>
c0014007:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001400b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001400e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014012:	c1 e2 02             	shl    edx,0x2
c0014015:	01 d0                	add    eax,edx
c0014017:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001401d:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0014022:	eb 9d                	jmp    c0013fc1 <VAS::VAS(bool)+0xa9>
c0014024:	8b 15 e8 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eae8
c001402a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001402e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014031:	05 20 0c 00 00       	add    eax,0xc20
c0014036:	81 ca 03 40 00 00    	or     edx,0x4003
c001403c:	89 10                	mov    DWORD PTR [eax],edx
c001403e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014042:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014045:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c001404a:	09 c2                	or     edx,eax
c001404c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014050:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014053:	05 fc 0f 00 00       	add    eax,0xffc
c0014058:	83 ca 03             	or     edx,0x3
c001405b:	89 10                	mov    DWORD PTR [eax],edx
c001405d:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0014062:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014068:	83 ec 0c             	sub    esp,0xc
c001406b:	50                   	push   eax
c001406c:	e8 e9 5b ff ff       	call   c0009c5a <Device::getName()>
c0014071:	83 c4 10             	add    esp,0x10
c0014074:	83 ec 08             	sub    esp,0x8
c0014077:	68 6f 4b 02 c0       	push   0xc0024b6f
c001407c:	50                   	push   eax
c001407d:	e8 ce c6 fe ff       	call   c0000750 <strcmp>
c0014082:	83 c4 10             	add    esp,0x10
c0014085:	85 c0                	test   eax,eax
c0014087:	0f 94 c0             	sete   al
c001408a:	0f b6 c0             	movzx  eax,al
c001408d:	85 c0                	test   eax,eax
c001408f:	74 68                	je     c00140f9 <VAS::VAS(bool)+0x1e1>
c0014091:	fa                   	cli    
c0014092:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0014097:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001409d:	05 68 09 00 00       	add    eax,0x968
c00140a2:	83 ec 0c             	sub    esp,0xc
c00140a5:	50                   	push   eax
c00140a6:	e8 13 af ff ff       	call   c000efbe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00140ab:	83 c4 10             	add    esp,0x10
c00140ae:	25 00 f0 ff ff       	and    eax,0xfffff000
c00140b3:	89 c3                	mov    ebx,eax
c00140b5:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c00140ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00140c0:	05 68 09 00 00       	add    eax,0x968
c00140c5:	83 ec 0c             	sub    esp,0xc
c00140c8:	50                   	push   eax
c00140c9:	e8 f0 ae ff ff       	call   c000efbe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00140ce:	83 c4 10             	add    esp,0x10
c00140d1:	83 ec 08             	sub    esp,0x8
c00140d4:	50                   	push   eax
c00140d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00140d9:	e8 08 f7 ff ff       	call   c00137e6 <VAS::getPageTableEntry(unsigned long)>
c00140de:	83 c4 10             	add    esp,0x10
c00140e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00140e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00140e8:	6a 11                	push   0x11
c00140ea:	53                   	push   ebx
c00140eb:	50                   	push   eax
c00140ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00140f0:	e8 eb fa ff ff       	call   c0013be0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00140f5:	83 c4 10             	add    esp,0x10
c00140f8:	fb                   	sti    
c00140f9:	90                   	nop
c00140fa:	83 c4 28             	add    esp,0x28
c00140fd:	5b                   	pop    ebx
c00140fe:	c3                   	ret    
c00140ff:	90                   	nop

c0014100 <VAS::evict(unsigned long)>:
c0014100:	55                   	push   ebp
c0014101:	57                   	push   edi
c0014102:	56                   	push   esi
c0014103:	53                   	push   ebx
c0014104:	83 ec 24             	sub    esp,0x24
c0014107:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001410b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001410f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014113:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014118:	50                   	push   eax
c0014119:	68 7d 4b 02 c0       	push   0xc0024b7d
c001411e:	e8 41 2e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014123:	e8 33 f5 ff ff       	call   c001365b <Virt::allocateSwapfilePage()>
c0014128:	83 c4 10             	add    esp,0x10
c001412b:	89 c7                	mov    edi,eax
c001412d:	a1 6c 68 02 c0       	mov    eax,ds:0xc002686c
c0014132:	85 c0                	test   eax,eax
c0014134:	7e 40                	jle    c0014176 <VAS::evict(unsigned long)+0x76>
c0014136:	89 ee                	mov    esi,ebp
c0014138:	31 db                	xor    ebx,ebx
c001413a:	83 ec 0c             	sub    esp,0xc
c001413d:	57                   	push   edi
c001413e:	e8 02 f5 ff ff       	call   c0013645 <Virt::swapIDToSector(unsigned long)>
c0014143:	89 34 24             	mov    DWORD PTR [esp],esi
c0014146:	01 d8                	add    eax,ebx
c0014148:	6a 01                	push   0x1
c001414a:	31 d2                	xor    edx,edx
c001414c:	83 c3 01             	add    ebx,0x1
c001414f:	52                   	push   edx
c0014150:	81 c6 00 02 00 00    	add    esi,0x200
c0014156:	50                   	push   eax
c0014157:	0f be 05 78 68 02 c0 	movsx  eax,BYTE PTR ds:0xc0026878
c001415e:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c0014165:	50                   	push   eax
c0014166:	e8 51 69 ff ff       	call   c000aabc <LogicalDisk::write(unsigned long long, int, void*)>
c001416b:	83 c4 20             	add    esp,0x20
c001416e:	39 1d 6c 68 02 c0    	cmp    DWORD PTR ds:0xc002686c,ebx
c0014174:	7f c4                	jg     c001413a <VAS::evict(unsigned long)+0x3a>
c0014176:	83 ec 08             	sub    esp,0x8
c0014179:	c1 e7 0c             	shl    edi,0xc
c001417c:	55                   	push   ebp
c001417d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014181:	50                   	push   eax
c0014182:	e8 5f f6 ff ff       	call   c00137e6 <VAS::getPageTableEntry(unsigned long)>
c0014187:	8b 10                	mov    edx,DWORD PTR [eax]
c0014189:	89 d3                	mov    ebx,edx
c001418b:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0014191:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0014197:	09 d7                	or     edi,edx
c0014199:	89 38                	mov    DWORD PTR [eax],edi
c001419b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001419e:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c00141a4:	83 c2 01             	add    edx,0x1
c00141a7:	89 15 48 e2 02 c0    	mov    DWORD PTR ds:0xc002e248,edx
c00141ad:	e8 eb bf ff ff       	call   c001019d <Phys::freePage(unsigned long)>
c00141b2:	0f 20 d8             	mov    eax,cr3
c00141b5:	0f 22 d8             	mov    cr3,eax
c00141b8:	8b 0d 48 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e248
c00141be:	51                   	push   ecx
c00141bf:	55                   	push   ebp
c00141c0:	53                   	push   ebx
c00141c1:	68 b0 46 02 c0       	push   0xc00246b0
c00141c6:	e8 99 2d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00141cb:	83 c4 18             	add    esp,0x18
c00141ce:	a1 44 e2 02 c0       	mov    eax,ds:0xc002e244
c00141d3:	50                   	push   eax
c00141d4:	8d 50 01             	lea    edx,[eax+0x1]
c00141d7:	68 92 4b 02 c0       	push   0xc0024b92
c00141dc:	89 15 44 e2 02 c0    	mov    DWORD PTR ds:0xc002e244,edx
c00141e2:	e8 7d 2d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00141e7:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00141ec:	c7 44 24 40 a4 4b 02 c0 	mov    DWORD PTR [esp+0x40],0xc0024ba4
c00141f4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00141f8:	83 c4 2c             	add    esp,0x2c
c00141fb:	5b                   	pop    ebx
c00141fc:	5e                   	pop    esi
c00141fd:	5f                   	pop    edi
c00141fe:	5d                   	pop    ebp
c00141ff:	e9 60 2d ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c0014204 <VAS::canLockPage(unsigned long)>:
c0014204:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014208:	50                   	push   eax
c0014209:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001420d:	52                   	push   edx
c001420e:	e8 d3 f5 ff ff       	call   c00137e6 <VAS::getPageTableEntry(unsigned long)>
c0014213:	59                   	pop    ecx
c0014214:	8b 00                	mov    eax,DWORD PTR [eax]
c0014216:	5a                   	pop    edx
c0014217:	c1 e8 0b             	shr    eax,0xb
c001421a:	83 e0 01             	and    eax,0x1
c001421d:	c3                   	ret    

c001421e <VAS::unlockPage(unsigned long)>:
c001421e:	83 ec 0c             	sub    esp,0xc
c0014221:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014225:	50                   	push   eax
c0014226:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001422a:	52                   	push   edx
c001422b:	e8 b6 f5 ff ff       	call   c00137e6 <VAS::getPageTableEntry(unsigned long)>
c0014230:	59                   	pop    ecx
c0014231:	5a                   	pop    edx
c0014232:	8b 10                	mov    edx,DWORD PTR [eax]
c0014234:	f6 c6 08             	test   dh,0x8
c0014237:	75 09                	jne    c0014242 <VAS::unlockPage(unsigned long)+0x24>
c0014239:	80 ce 08             	or     dh,0x8
c001423c:	89 10                	mov    DWORD PTR [eax],edx
c001423e:	83 c4 0c             	add    esp,0xc
c0014241:	c3                   	ret    
c0014242:	c7 44 24 10 e4 46 02 c0 	mov    DWORD PTR [esp+0x10],0xc00246e4
c001424a:	83 c4 0c             	add    esp,0xc
c001424d:	e9 c0 bd ff ff       	jmp    c0010012 <KePanic(char const*)>

c0014252 <VAS::canLockPages(unsigned long, int)>:
c0014252:	55                   	push   ebp
c0014253:	57                   	push   edi
c0014254:	56                   	push   esi
c0014255:	53                   	push   ebx
c0014256:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001425a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001425e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014262:	85 ff                	test   edi,edi
c0014264:	7e 23                	jle    c0014289 <VAS::canLockPages(unsigned long, int)+0x37>
c0014266:	31 f6                	xor    esi,esi
c0014268:	eb 0d                	jmp    c0014277 <VAS::canLockPages(unsigned long, int)+0x25>
c001426a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014270:	83 c6 01             	add    esi,0x1
c0014273:	39 f7                	cmp    edi,esi
c0014275:	74 0d                	je     c0014284 <VAS::canLockPages(unsigned long, int)+0x32>
c0014277:	53                   	push   ebx
c0014278:	55                   	push   ebp
c0014279:	e8 86 ff ff ff       	call   c0014204 <VAS::canLockPage(unsigned long)>
c001427e:	5a                   	pop    edx
c001427f:	84 c0                	test   al,al
c0014281:	59                   	pop    ecx
c0014282:	75 e6                	jne    c001426a <VAS::canLockPages(unsigned long, int)+0x18>
c0014284:	5b                   	pop    ebx
c0014285:	5e                   	pop    esi
c0014286:	5f                   	pop    edi
c0014287:	5d                   	pop    ebp
c0014288:	c3                   	ret    
c0014289:	b0 01                	mov    al,0x1
c001428b:	eb f7                	jmp    c0014284 <VAS::canLockPages(unsigned long, int)+0x32>
c001428d:	90                   	nop

c001428e <VAS::unlockPages(unsigned long, int)>:
c001428e:	55                   	push   ebp
c001428f:	57                   	push   edi
c0014290:	56                   	push   esi
c0014291:	53                   	push   ebx
c0014292:	83 ec 0c             	sub    esp,0xc
c0014295:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014299:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001429d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00142a1:	85 ff                	test   edi,edi
c00142a3:	7e 1c                	jle    c00142c1 <VAS::unlockPages(unsigned long, int)+0x33>
c00142a5:	31 f6                	xor    esi,esi
c00142a7:	83 ec 08             	sub    esp,0x8
c00142aa:	83 c6 01             	add    esi,0x1
c00142ad:	53                   	push   ebx
c00142ae:	81 c3 00 10 00 00    	add    ebx,0x1000
c00142b4:	55                   	push   ebp
c00142b5:	e8 64 ff ff ff       	call   c001421e <VAS::unlockPage(unsigned long)>
c00142ba:	83 c4 10             	add    esp,0x10
c00142bd:	39 f7                	cmp    edi,esi
c00142bf:	75 e6                	jne    c00142a7 <VAS::unlockPages(unsigned long, int)+0x19>
c00142c1:	83 c4 0c             	add    esp,0xc
c00142c4:	5b                   	pop    ebx
c00142c5:	5e                   	pop    esi
c00142c6:	5f                   	pop    edi
c00142c7:	5d                   	pop    ebp
c00142c8:	c3                   	ret    
c00142c9:	90                   	nop

c00142ca <VAS::tryLoadBackOffDisk(unsigned long)>:
c00142ca:	55                   	push   ebp
c00142cb:	57                   	push   edi
c00142cc:	56                   	push   esi
c00142cd:	53                   	push   ebx
c00142ce:	81 ec 0c 10 00 00    	sub    esp,0x100c
c00142d4:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c00142db:	89 f3                	mov    ebx,esi
c00142dd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00142e3:	53                   	push   ebx
c00142e4:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c00142eb:	50                   	push   eax
c00142ec:	e8 f5 f4 ff ff       	call   c00137e6 <VAS::getPageTableEntry(unsigned long)>
c00142f1:	5a                   	pop    edx
c00142f2:	89 c5                	mov    ebp,eax
c00142f4:	59                   	pop    ecx
c00142f5:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c00142fb:	0f 87 cb 00 00 00    	ja     c00143cc <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0014301:	83 ec 08             	sub    esp,0x8
c0014304:	56                   	push   esi
c0014305:	68 14 47 02 c0       	push   0xc0024714
c001430a:	e8 55 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001430f:	5e                   	pop    esi
c0014310:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0014315:	5f                   	pop    edi
c0014316:	50                   	push   eax
c0014317:	68 44 47 02 c0       	push   0xc0024744
c001431c:	e8 43 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014321:	58                   	pop    eax
c0014322:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0014328:	5a                   	pop    edx
c0014329:	51                   	push   ecx
c001432a:	68 68 47 02 c0       	push   0xc0024768
c001432f:	e8 30 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014334:	83 c4 10             	add    esp,0x10
c0014337:	85 db                	test   ebx,ebx
c0014339:	74 5b                	je     c0014396 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c001433b:	85 ed                	test   ebp,ebp
c001433d:	74 21                	je     c0014360 <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c001433f:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c0014342:	f7 c6 00 02 00 00    	test   esi,0x200
c0014348:	0f 85 c5 00 00 00    	jne    c0014413 <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c001434e:	89 f0                	mov    eax,esi
c0014350:	25 01 04 00 00       	and    eax,0x401
c0014355:	3d 00 04 00 00       	cmp    eax,0x400
c001435a:	0f 84 39 01 00 00    	je     c0014499 <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c0014360:	83 ec 08             	sub    esp,0x8
c0014363:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0014368:	50                   	push   eax
c0014369:	68 5c 49 02 c0       	push   0xc002495c
c001436e:	e8 f1 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014373:	5a                   	pop    edx
c0014374:	8b 1d 30 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea30
c001437a:	59                   	pop    ecx
c001437b:	53                   	push   ebx
c001437c:	68 80 49 02 c0       	push   0xc0024980
c0014381:	e8 de 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014386:	83 c4 10             	add    esp,0x10
c0014389:	31 c0                	xor    eax,eax
c001438b:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014391:	5b                   	pop    ebx
c0014392:	5e                   	pop    esi
c0014393:	5f                   	pop    edi
c0014394:	5d                   	pop    ebp
c0014395:	c3                   	ret    
c0014396:	83 ec 08             	sub    esp,0x8
c0014399:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c001439e:	50                   	push   eax
c001439f:	68 8c 47 02 c0       	push   0xc002478c
c00143a4:	e8 bb 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00143a9:	58                   	pop    eax
c00143aa:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00143b0:	5a                   	pop    edx
c00143b1:	51                   	push   ecx
c00143b2:	68 b0 47 02 c0       	push   0xc00247b0
c00143b7:	e8 a8 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00143bc:	83 c4 10             	add    esp,0x10
c00143bf:	31 c0                	xor    eax,eax
c00143c1:	81 c4 0c 10 00 00    	add    esp,0x100c
c00143c7:	5b                   	pop    ebx
c00143c8:	5e                   	pop    esi
c00143c9:	5f                   	pop    edi
c00143ca:	5d                   	pop    ebp
c00143cb:	c3                   	ret    
c00143cc:	83 ec 0c             	sub    esp,0xc
c00143cf:	68 b9 4b 02 c0       	push   0xc0024bb9
c00143d4:	e8 39 bc ff ff       	call   c0010012 <KePanic(char const*)>
c00143d9:	5f                   	pop    edi
c00143da:	58                   	pop    eax
c00143db:	56                   	push   esi
c00143dc:	68 14 47 02 c0       	push   0xc0024714
c00143e1:	e8 7e 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00143e6:	58                   	pop    eax
c00143e7:	8b 0d 0c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea0c
c00143ed:	5a                   	pop    edx
c00143ee:	51                   	push   ecx
c00143ef:	68 44 47 02 c0       	push   0xc0024744
c00143f4:	e8 6b 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00143f9:	5e                   	pop    esi
c00143fa:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00143ff:	5f                   	pop    edi
c0014400:	50                   	push   eax
c0014401:	68 68 47 02 c0       	push   0xc0024768
c0014406:	e8 59 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001440b:	83 c4 10             	add    esp,0x10
c001440e:	e9 28 ff ff ff       	jmp    c001433b <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c0014413:	83 ec 0c             	sub    esp,0xc
c0014416:	68 d4 47 02 c0       	push   0xc00247d4
c001441b:	e8 44 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014420:	e8 e1 bd ff ff       	call   c0010206 <Phys::allocatePage()>
c0014425:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014428:	83 ca 01             	or     edx,0x1
c001442b:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c001442e:	0f 20 da             	mov    edx,cr3
c0014431:	0f 22 da             	mov    cr3,edx
c0014434:	ba 00 10 00 00       	mov    edx,0x1000
c0014439:	89 de                	mov    esi,ebx
c001443b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001443f:	89 d1                	mov    ecx,edx
c0014441:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014443:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014446:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c001444c:	09 c8                	or     eax,ecx
c001444e:	83 c8 02             	or     eax,0x2
c0014451:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014454:	0f 20 d8             	mov    eax,cr3
c0014457:	0f 22 d8             	mov    cr3,eax
c001445a:	8d 74 24 10          	lea    esi,[esp+0x10]
c001445e:	89 df                	mov    edi,ebx
c0014460:	89 d1                	mov    ecx,edx
c0014462:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014464:	8b 35 0c ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea0c
c001446a:	59                   	pop    ecx
c001446b:	5b                   	pop    ebx
c001446c:	56                   	push   esi
c001446d:	68 f4 47 02 c0       	push   0xc00247f4
c0014472:	e8 ed 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014477:	5f                   	pop    edi
c0014478:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001447d:	5d                   	pop    ebp
c001447e:	50                   	push   eax
c001447f:	68 18 48 02 c0       	push   0xc0024818
c0014484:	e8 db 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014489:	83 c4 10             	add    esp,0x10
c001448c:	b0 01                	mov    al,0x1
c001448e:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014494:	5b                   	pop    ebx
c0014495:	5e                   	pop    esi
c0014496:	5f                   	pop    edi
c0014497:	5d                   	pop    ebp
c0014498:	c3                   	ret    
c0014499:	83 ec 08             	sub    esp,0x8
c001449c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00144a1:	c1 ee 0c             	shr    esi,0xc
c00144a4:	50                   	push   eax
c00144a5:	68 3c 48 02 c0       	push   0xc002483c
c00144aa:	e8 b5 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00144af:	e8 52 bd ff ff       	call   c0010206 <Phys::allocatePage()>
c00144b4:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00144ba:	89 c7                	mov    edi,eax
c00144bc:	58                   	pop    eax
c00144bd:	5a                   	pop    edx
c00144be:	51                   	push   ecx
c00144bf:	68 60 48 02 c0       	push   0xc0024860
c00144c4:	e8 9b 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00144c9:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00144cc:	83 c4 10             	add    esp,0x10
c00144cf:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00144d5:	09 fa                	or     edx,edi
c00144d7:	81 ca 01 08 00 00    	or     edx,0x801
c00144dd:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00144e0:	8b 3d 6c 68 02 c0    	mov    edi,DWORD PTR ds:0xc002686c
c00144e6:	85 ff                	test   edi,edi
c00144e8:	7e 65                	jle    c001454f <VAS::tryLoadBackOffDisk(unsigned long)+0x285>
c00144ea:	89 dd                	mov    ebp,ebx
c00144ec:	31 ff                	xor    edi,edi
c00144ee:	83 ec 08             	sub    esp,0x8
c00144f1:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00144f6:	50                   	push   eax
c00144f7:	68 14 49 02 c0       	push   0xc0024914
c00144fc:	e8 63 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014501:	89 34 24             	mov    DWORD PTR [esp],esi
c0014504:	e8 3c f1 ff ff       	call   c0013645 <Virt::swapIDToSector(unsigned long)>
c0014509:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001450c:	01 f8                	add    eax,edi
c001450e:	6a 01                	push   0x1
c0014510:	31 d2                	xor    edx,edx
c0014512:	83 c7 01             	add    edi,0x1
c0014515:	52                   	push   edx
c0014516:	81 c5 00 02 00 00    	add    ebp,0x200
c001451c:	50                   	push   eax
c001451d:	0f be 05 78 68 02 c0 	movsx  eax,BYTE PTR ds:0xc0026878
c0014524:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001452b:	50                   	push   eax
c001452c:	e8 1f 65 ff ff       	call   c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>
c0014531:	83 c4 18             	add    esp,0x18
c0014534:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014539:	50                   	push   eax
c001453a:	68 38 49 02 c0       	push   0xc0024938
c001453f:	e8 20 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014544:	83 c4 10             	add    esp,0x10
c0014547:	39 3d 6c 68 02 c0    	cmp    DWORD PTR ds:0xc002686c,edi
c001454d:	7f 9f                	jg     c00144ee <VAS::tryLoadBackOffDisk(unsigned long)+0x224>
c001454f:	83 ec 08             	sub    esp,0x8
c0014552:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014557:	50                   	push   eax
c0014558:	68 84 48 02 c0       	push   0xc0024884
c001455d:	e8 02 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014562:	83 c4 0c             	add    esp,0xc
c0014565:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c001456a:	83 e8 01             	sub    eax,0x1
c001456d:	50                   	push   eax
c001456e:	a3 48 e2 02 c0       	mov    ds:0xc002e248,eax
c0014573:	53                   	push   ebx
c0014574:	68 cb 4b 02 c0       	push   0xc0024bcb
c0014579:	e8 e6 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001457e:	89 34 24             	mov    DWORD PTR [esp],esi
c0014581:	e8 9c f0 ff ff       	call   c0013622 <Virt::freeSwapfilePage(unsigned long)>
c0014586:	58                   	pop    eax
c0014587:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c001458d:	5a                   	pop    edx
c001458e:	51                   	push   ecx
c001458f:	68 a8 48 02 c0       	push   0xc00248a8
c0014594:	e8 cb 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014599:	0f 20 d8             	mov    eax,cr3
c001459c:	0f 22 d8             	mov    cr3,eax
c001459f:	c7 04 24 e0 4b 02 c0 	mov    DWORD PTR [esp],0xc0024be0
c00145a6:	e8 b9 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00145ab:	5b                   	pop    ebx
c00145ac:	8b 3d 0c ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea0c
c00145b2:	5e                   	pop    esi
c00145b3:	57                   	push   edi
c00145b4:	68 cc 48 02 c0       	push   0xc00248cc
c00145b9:	e8 a6 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00145be:	5d                   	pop    ebp
c00145bf:	58                   	pop    eax
c00145c0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00145c5:	50                   	push   eax
c00145c6:	68 f0 48 02 c0       	push   0xc00248f0
c00145cb:	e8 94 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00145d0:	83 c4 10             	add    esp,0x10
c00145d3:	b0 01                	mov    al,0x1
c00145d5:	e9 b1 fd ff ff       	jmp    c001438b <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>

c00145da <VAS::lockPage(unsigned long)>:
c00145da:	56                   	push   esi
c00145db:	53                   	push   ebx
c00145dc:	83 ec 04             	sub    esp,0x4
c00145df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00145e7:	50                   	push   eax
c00145e8:	56                   	push   esi
c00145e9:	e8 f8 f1 ff ff       	call   c00137e6 <VAS::getPageTableEntry(unsigned long)>
c00145ee:	5a                   	pop    edx
c00145ef:	89 c3                	mov    ebx,eax
c00145f1:	59                   	pop    ecx
c00145f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00145f4:	a8 01                	test   al,0x1
c00145f6:	74 10                	je     c0014608 <VAS::lockPage(unsigned long)+0x2e>
c00145f8:	f6 c4 08             	test   ah,0x8
c00145fb:	74 28                	je     c0014625 <VAS::lockPage(unsigned long)+0x4b>
c00145fd:	80 e4 f7             	and    ah,0xf7
c0014600:	89 03                	mov    DWORD PTR [ebx],eax
c0014602:	83 c4 04             	add    esp,0x4
c0014605:	5b                   	pop    ebx
c0014606:	5e                   	pop    esi
c0014607:	c3                   	ret    
c0014608:	83 ec 08             	sub    esp,0x8
c001460b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014610:	50                   	push   eax
c0014611:	56                   	push   esi
c0014612:	e8 b3 fc ff ff       	call   c00142ca <VAS::tryLoadBackOffDisk(unsigned long)>
c0014617:	83 c4 10             	add    esp,0x10
c001461a:	84 c0                	test   al,al
c001461c:	74 19                	je     c0014637 <VAS::lockPage(unsigned long)+0x5d>
c001461e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014620:	f6 c4 08             	test   ah,0x8
c0014623:	75 d8                	jne    c00145fd <VAS::lockPage(unsigned long)+0x23>
c0014625:	c7 44 24 10 e4 46 02 c0 	mov    DWORD PTR [esp+0x10],0xc00246e4
c001462d:	83 c4 04             	add    esp,0x4
c0014630:	5b                   	pop    ebx
c0014631:	5e                   	pop    esi
c0014632:	e9 db b9 ff ff       	jmp    c0010012 <KePanic(char const*)>
c0014637:	83 ec 0c             	sub    esp,0xc
c001463a:	68 a4 49 02 c0       	push   0xc00249a4
c001463f:	e8 ce b9 ff ff       	call   c0010012 <KePanic(char const*)>
c0014644:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014646:	83 c4 10             	add    esp,0x10
c0014649:	eb ad                	jmp    c00145f8 <VAS::lockPage(unsigned long)+0x1e>
c001464b:	90                   	nop

c001464c <VAS::lockPages(unsigned long, int)>:
c001464c:	55                   	push   ebp
c001464d:	57                   	push   edi
c001464e:	56                   	push   esi
c001464f:	53                   	push   ebx
c0014650:	83 ec 0c             	sub    esp,0xc
c0014653:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014657:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001465b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001465f:	85 ff                	test   edi,edi
c0014661:	7e 1c                	jle    c001467f <VAS::lockPages(unsigned long, int)+0x33>
c0014663:	31 f6                	xor    esi,esi
c0014665:	83 ec 08             	sub    esp,0x8
c0014668:	83 c6 01             	add    esi,0x1
c001466b:	53                   	push   ebx
c001466c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014672:	55                   	push   ebp
c0014673:	e8 62 ff ff ff       	call   c00145da <VAS::lockPage(unsigned long)>
c0014678:	83 c4 10             	add    esp,0x10
c001467b:	39 f7                	cmp    edi,esi
c001467d:	75 e6                	jne    c0014665 <VAS::lockPages(unsigned long, int)+0x19>
c001467f:	83 c4 0c             	add    esp,0xc
c0014682:	5b                   	pop    ebx
c0014683:	5e                   	pop    esi
c0014684:	5f                   	pop    edi
c0014685:	5d                   	pop    ebp
c0014686:	c3                   	ret    
c0014687:	90                   	nop

c0014688 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014688:	55                   	push   ebp
c0014689:	57                   	push   edi
c001468a:	56                   	push   esi
c001468b:	53                   	push   ebx
c001468c:	83 ec 28             	sub    esp,0x28
c001468f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0014693:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0014697:	50                   	push   eax
c0014698:	e8 60 ee ff ff       	call   c00134fd <Virt::allocateKernelVirtualPages(int)>
c001469d:	83 c4 0c             	add    esp,0xc
c00146a0:	89 c5                	mov    ebp,eax
c00146a2:	6a 07                	push   0x7
c00146a4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00146a8:	52                   	push   edx
c00146a9:	56                   	push   esi
c00146aa:	e8 35 f6 ff ff       	call   c0013ce4 <VAS::allocatePages(int, int)>
c00146af:	83 c4 10             	add    esp,0x10
c00146b2:	89 c7                	mov    edi,eax
c00146b4:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00146b8:	85 c9                	test   ecx,ecx
c00146ba:	74 2f                	je     c00146eb <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c00146bc:	31 db                	xor    ebx,ebx
c00146be:	e8 43 bb ff ff       	call   c0010206 <Phys::allocatePage()>
c00146c3:	83 c3 01             	add    ebx,0x1
c00146c6:	6a 03                	push   0x3
c00146c8:	55                   	push   ebp
c00146c9:	50                   	push   eax
c00146ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00146ce:	56                   	push   esi
c00146cf:	e8 0c f5 ff ff       	call   c0013be0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00146d4:	6a 07                	push   0x7
c00146d6:	57                   	push   edi
c00146d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146db:	50                   	push   eax
c00146dc:	56                   	push   esi
c00146dd:	e8 fe f4 ff ff       	call   c0013be0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00146e2:	83 c4 20             	add    esp,0x20
c00146e5:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c00146e9:	75 d3                	jne    c00146be <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c00146eb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00146ef:	89 28                	mov    DWORD PTR [eax],ebp
c00146f1:	83 c4 1c             	add    esp,0x1c
c00146f4:	89 f8                	mov    eax,edi
c00146f6:	5b                   	pop    ebx
c00146f7:	5e                   	pop    esi
c00146f8:	5f                   	pop    edi
c00146f9:	5d                   	pop    ebp
c00146fa:	c3                   	ret    
c00146fb:	90                   	nop

c00146fc <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c00146fc:	53                   	push   ebx
c00146fd:	83 ec 14             	sub    esp,0x14
c0014700:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014704:	68 d4 49 02 c0       	push   0xc00249d4
c0014709:	e8 56 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001470e:	c7 04 24 34 4a 02 c0 	mov    DWORD PTR [esp],0xc0024a34
c0014715:	e8 4a 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001471a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001471e:	83 c4 18             	add    esp,0x18
c0014721:	5b                   	pop    ebx
c0014722:	e9 de f0 ff ff       	jmp    c0013805 <Virt::freeKernelVirtualPages(unsigned long)>
c0014727:	90                   	nop

c0014728 <VAS::scanForEviction()>:
c0014728:	57                   	push   edi
c0014729:	56                   	push   esi
c001472a:	31 f6                	xor    esi,esi
c001472c:	53                   	push   ebx
c001472d:	83 ec 18             	sub    esp,0x18
c0014730:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014734:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014739:	50                   	push   eax
c001473a:	68 b0 4a 02 c0       	push   0xc0024ab0
c001473f:	e8 20 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014744:	c7 04 24 e7 4b 02 c0 	mov    DWORD PTR [esp],0xc0024be7
c001474b:	e8 14 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014750:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014753:	83 c4 10             	add    esp,0x10
c0014756:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001475c:	75 0e                	jne    c001476c <VAS::scanForEviction()+0x44>
c001475e:	89 da                	mov    edx,ebx
c0014760:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014763:	c1 ea 16             	shr    edx,0x16
c0014766:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001476a:	74 5b                	je     c00147c7 <VAS::scanForEviction()+0x9f>
c001476c:	83 ec 08             	sub    esp,0x8
c001476f:	53                   	push   ebx
c0014770:	57                   	push   edi
c0014771:	e8 70 f0 ff ff       	call   c00137e6 <VAS::getPageTableEntry(unsigned long)>
c0014776:	83 c4 10             	add    esp,0x10
c0014779:	8b 10                	mov    edx,DWORD PTR [eax]
c001477b:	89 d1                	mov    ecx,edx
c001477d:	c1 e9 0c             	shr    ecx,0xc
c0014780:	74 10                	je     c0014792 <VAS::scanForEviction()+0x6a>
c0014782:	89 d1                	mov    ecx,edx
c0014784:	81 e1 01 08 00 00    	and    ecx,0x801
c001478a:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0014790:	74 40                	je     c00147d2 <VAS::scanForEviction()+0xaa>
c0014792:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014798:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c001479e:	76 2d                	jbe    c00147cd <VAS::scanForEviction()+0xa5>
c00147a0:	83 c6 01             	add    esi,0x1
c00147a3:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c00147aa:	83 fe 03             	cmp    esi,0x3
c00147ad:	74 32                	je     c00147e1 <VAS::scanForEviction()+0xb9>
c00147af:	31 db                	xor    ebx,ebx
c00147b1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00147b7:	75 b3                	jne    c001476c <VAS::scanForEviction()+0x44>
c00147b9:	89 da                	mov    edx,ebx
c00147bb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00147be:	c1 ea 16             	shr    edx,0x16
c00147c1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00147c5:	75 a5                	jne    c001476c <VAS::scanForEviction()+0x44>
c00147c7:	81 c3 00 00 40 00    	add    ebx,0x400000
c00147cd:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c00147d0:	eb 84                	jmp    c0014756 <VAS::scanForEviction()+0x2e>
c00147d2:	f6 c2 20             	test   dl,0x20
c00147d5:	74 13                	je     c00147ea <VAS::scanForEviction()+0xc2>
c00147d7:	83 e2 df             	and    edx,0xffffffdf
c00147da:	89 10                	mov    DWORD PTR [eax],edx
c00147dc:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00147df:	eb b1                	jmp    c0014792 <VAS::scanForEviction()+0x6a>
c00147e1:	83 c4 10             	add    esp,0x10
c00147e4:	31 c0                	xor    eax,eax
c00147e6:	5b                   	pop    ebx
c00147e7:	5e                   	pop    esi
c00147e8:	5f                   	pop    edi
c00147e9:	c3                   	ret    
c00147ea:	83 ec 08             	sub    esp,0x8
c00147ed:	89 d0                	mov    eax,edx
c00147ef:	25 00 f0 ff ff       	and    eax,0xfffff000
c00147f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00147f8:	53                   	push   ebx
c00147f9:	68 03 4c 02 c0       	push   0xc0024c03
c00147fe:	e8 61 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014803:	58                   	pop    eax
c0014804:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014807:	5a                   	pop    edx
c0014808:	51                   	push   ecx
c0014809:	57                   	push   edi
c001480a:	e8 f1 f8 ff ff       	call   c0014100 <VAS::evict(unsigned long)>
c001480f:	5b                   	pop    ebx
c0014810:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014813:	5e                   	pop    esi
c0014814:	50                   	push   eax
c0014815:	68 17 4c 02 c0       	push   0xc0024c17
c001481a:	e8 45 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001481f:	58                   	pop    eax
c0014820:	5a                   	pop    edx
c0014821:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014825:	50                   	push   eax
c0014826:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001482a:	68 2a 4c 02 c0       	push   0xc0024c2a
c001482f:	e8 30 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014834:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0014837:	81 c1 00 10 00 00    	add    ecx,0x1000
c001483d:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0014840:	8b 3d 30 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea30
c0014846:	5b                   	pop    ebx
c0014847:	5e                   	pop    esi
c0014848:	57                   	push   edi
c0014849:	68 d0 4a 02 c0       	push   0xc0024ad0
c001484e:	e8 11 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014853:	83 c4 10             	add    esp,0x10
c0014856:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001485a:	83 c4 10             	add    esp,0x10
c001485d:	5b                   	pop    ebx
c001485e:	5e                   	pop    esi
c001485f:	5f                   	pop    edi
c0014860:	c3                   	ret    

c0014861 <mapVASFirstTime>:
c0014861:	55                   	push   ebp
c0014862:	57                   	push   edi
c0014863:	56                   	push   esi
c0014864:	53                   	push   ebx
c0014865:	83 ec 0c             	sub    esp,0xc
c0014868:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001486d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014870:	83 fa 01             	cmp    edx,0x1
c0014873:	0f 84 cb 00 00 00    	je     c0014944 <mapVASFirstTime+0xe3>
c0014879:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001487c:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001487f:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0014884:	c1 e5 15             	shl    ebp,0x15
c0014887:	bf 00 90 e7 01       	mov    edi,0x1e79000
c001488c:	8b b2 72 05 00 00    	mov    esi,DWORD PTR [edx+0x572]
c0014892:	29 eb                	sub    ebx,ebp
c0014894:	29 ef                	sub    edi,ebp
c0014896:	e8 6b b9 ff ff       	call   c0010206 <Phys::allocatePage()>
c001489b:	83 ec 0c             	sub    esp,0xc
c001489e:	68 03 04 00 00       	push   0x403
c00148a3:	6a 01                	push   0x1
c00148a5:	53                   	push   ebx
c00148a6:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00148ac:	50                   	push   eax
c00148ad:	56                   	push   esi
c00148ae:	e8 17 f5 ff ff       	call   c0013dca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00148b3:	83 c4 20             	add    esp,0x20
c00148b6:	39 fb                	cmp    ebx,edi
c00148b8:	75 dc                	jne    c0014896 <mapVASFirstTime+0x35>
c00148ba:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00148bf:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00148c4:	29 eb                	sub    ebx,ebp
c00148c6:	29 ef                	sub    edi,ebp
c00148c8:	e8 39 b9 ff ff       	call   c0010206 <Phys::allocatePage()>
c00148cd:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c00148d1:	83 fa 01             	cmp    edx,0x1
c00148d4:	19 d2                	sbb    edx,edx
c00148d6:	83 ec 0c             	sub    esp,0xc
c00148d9:	83 e2 04             	and    edx,0x4
c00148dc:	81 c2 03 04 00 00    	add    edx,0x403
c00148e2:	52                   	push   edx
c00148e3:	6a 01                	push   0x1
c00148e5:	53                   	push   ebx
c00148e6:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00148ec:	50                   	push   eax
c00148ed:	56                   	push   esi
c00148ee:	e8 d7 f4 ff ff       	call   c0013dca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00148f3:	83 c4 20             	add    esp,0x20
c00148f6:	39 df                	cmp    edi,ebx
c00148f8:	75 ce                	jne    c00148c8 <mapVASFirstTime+0x67>
c00148fa:	83 ec 0c             	sub    esp,0xc
c00148fd:	bb 7c 80 02 c0       	mov    ebx,0xc002807c
c0014902:	6a 04                	push   0x4
c0014904:	81 eb 00 70 02 c0    	sub    ebx,0xc0027000
c001490a:	6a ff                	push   0xffffffff
c001490c:	c1 eb 0c             	shr    ebx,0xc
c001490f:	53                   	push   ebx
c0014910:	68 00 70 02 c0       	push   0xc0027000
c0014915:	56                   	push   esi
c0014916:	e8 65 f0 ff ff       	call   c0013980 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001491b:	83 c4 14             	add    esp,0x14
c001491e:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c0014923:	6a 04                	push   0x4
c0014925:	6a ff                	push   0xffffffff
c0014927:	53                   	push   ebx
c0014928:	68 00 70 02 c0       	push   0xc0027000
c001492d:	50                   	push   eax
c001492e:	e8 4d f0 ff ff       	call   c0013980 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0014933:	0f 20 d8             	mov    eax,cr3
c0014936:	0f 22 d8             	mov    cr3,eax
c0014939:	83 c4 20             	add    esp,0x20
c001493c:	83 c4 0c             	add    esp,0xc
c001493f:	5b                   	pop    ebx
c0014940:	5e                   	pop    esi
c0014941:	5f                   	pop    edi
c0014942:	5d                   	pop    ebp
c0014943:	c3                   	ret    
c0014944:	83 ec 0c             	sub    esp,0xc
c0014947:	68 37 4c 02 c0       	push   0xc0024c37
c001494c:	e8 13 26 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014951:	83 c4 10             	add    esp,0x10
c0014954:	83 c4 0c             	add    esp,0xc
c0014957:	5b                   	pop    ebx
c0014958:	5e                   	pop    esi
c0014959:	5f                   	pop    edi
c001495a:	5d                   	pop    ebp
c001495b:	c3                   	ret    

c001495c <SysAlarm(regs*)>:
c001495c:	53                   	push   ebx
c001495d:	83 ec 10             	sub    esp,0x10
c0014960:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014964:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014967:	68 50 4c 02 c0       	push   0xc0024c50
c001496c:	e8 f3 25 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014971:	83 c4 0c             	add    esp,0xc
c0014974:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014977:	31 d2                	xor    edx,edx
c0014979:	52                   	push   edx
c001497a:	50                   	push   eax
c001497b:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0014981:	e8 46 09 00 00       	call   c00152cc <KeAlarm(ThreadControlBlock*, unsigned long long)>
c0014986:	83 c4 18             	add    esp,0x18
c0014989:	5b                   	pop    ebx
c001498a:	c3                   	ret    

c001498b <SysEject(regs*)>:
c001498b:	83 ec 0c             	sub    esp,0xc
c001498e:	83 ca ff             	or     edx,0xffffffff
c0014991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014995:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014998:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001499d:	83 e9 41             	sub    ecx,0x41
c00149a0:	83 f9 19             	cmp    ecx,0x19
c00149a3:	77 18                	ja     c00149bd <SysEject(regs*)+0x32>
c00149a5:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00149ac:	85 c9                	test   ecx,ecx
c00149ae:	74 0d                	je     c00149bd <SysEject(regs*)+0x32>
c00149b0:	83 ec 0c             	sub    esp,0xc
c00149b3:	51                   	push   ecx
c00149b4:	e8 2d 60 ff ff       	call   c000a9e6 <LogicalDisk::eject()>
c00149b9:	83 c4 10             	add    esp,0x10
c00149bc:	99                   	cdq    
c00149bd:	83 c4 0c             	add    esp,0xc
c00149c0:	c3                   	ret    

c00149c1 <SysExit(regs*)>:
c00149c1:	83 ec 18             	sub    esp,0x18
c00149c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00149c8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00149cb:	e8 bc 2d 00 00       	call   c001778c <terminateTask(int)>
c00149d0:	83 c8 ff             	or     eax,0xffffffff
c00149d3:	83 c4 1c             	add    esp,0x1c
c00149d6:	89 c2                	mov    edx,eax
c00149d8:	c3                   	ret    

c00149d9 <SysGetCwd(regs*)>:
c00149d9:	83 ec 10             	sub    esp,0x10
c00149dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00149e0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00149e3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00149e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149eb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00149ee:	e8 d3 33 ff ff       	call   c0007dc6 <Fs::getcwd(Process*, char*, int)>
c00149f3:	83 c4 1c             	add    esp,0x1c
c00149f6:	99                   	cdq    
c00149f7:	c3                   	ret    

c00149f8 <SysGetPID(regs*)>:
c00149f8:	83 ec 14             	sub    esp,0x14
c00149fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a00:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a03:	ff 30                	push   DWORD PTR [eax]
c0014a05:	68 65 4c 02 c0       	push   0xc0024c65
c0014a0a:	e8 55 25 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014a0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a14:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a17:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a19:	83 c4 1c             	add    esp,0x1c
c0014a1c:	99                   	cdq    
c0014a1d:	c3                   	ret    

c0014a1e <SysGetRAMData(regs*)>:
c0014a1e:	8b 0d 40 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e140
c0014a24:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0014a29:	03 05 3c e1 02 c0    	add    eax,DWORD PTR ds:0xc002e13c
c0014a2f:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c0014a35:	99                   	cdq    
c0014a36:	f7 f9                	idiv   ecx
c0014a38:	c1 e0 18             	shl    eax,0x18
c0014a3b:	09 c8                	or     eax,ecx
c0014a3d:	99                   	cdq    
c0014a3e:	c3                   	ret    

c0014a3f <SysGetVGAPtr(regs*)>:
c0014a3f:	55                   	push   ebp
c0014a40:	57                   	push   edi
c0014a41:	56                   	push   esi
c0014a42:	53                   	push   ebx
c0014a43:	83 ec 0c             	sub    esp,0xc
c0014a46:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014a4a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014a4d:	83 f8 ff             	cmp    eax,0xffffffff
c0014a50:	74 1b                	je     c0014a6d <SysGetVGAPtr(regs*)+0x2e>
c0014a52:	83 ec 0c             	sub    esp,0xc
c0014a55:	50                   	push   eax
c0014a56:	e8 d9 27 00 00       	call   c0017234 <Thr::processFromPID(int)>
c0014a5b:	83 c4 10             	add    esp,0x10
c0014a5e:	89 c1                	mov    ecx,eax
c0014a60:	31 d2                	xor    edx,edx
c0014a62:	b8 01 00 00 00       	mov    eax,0x1
c0014a67:	85 c9                	test   ecx,ecx
c0014a69:	75 0a                	jne    c0014a75 <SysGetVGAPtr(regs*)+0x36>
c0014a6b:	eb 61                	jmp    c0014ace <SysGetVGAPtr(regs*)+0x8f>
c0014a6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a72:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0014a75:	8b a9 66 05 00 00    	mov    ebp,DWORD PTR [ecx+0x566]
c0014a7b:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0014a7f:	74 0c                	je     c0014a8d <SysGetVGAPtr(regs*)+0x4e>
c0014a81:	83 ec 0c             	sub    esp,0xc
c0014a84:	55                   	push   ebp
c0014a85:	e8 ef da ff ff       	call   c0012579 <setActiveTerminal(VgaText*)>
c0014a8a:	83 c4 10             	add    esp,0x10
c0014a8d:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0014a90:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0014a93:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014a98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a9a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0014a9d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014aa0:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0014aa6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014aa9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0014aac:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0014ab2:	50                   	push   eax
c0014ab3:	50                   	push   eax
c0014ab4:	68 74 4c 02 c0       	push   0xc0024c74
c0014ab9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014abc:	05 a8 0f 00 00       	add    eax,0xfa8
c0014ac1:	50                   	push   eax
c0014ac2:	e8 79 bb fe ff       	call   c0000640 <strcpy>
c0014ac7:	83 c4 10             	add    esp,0x10
c0014aca:	31 c0                	xor    eax,eax
c0014acc:	31 d2                	xor    edx,edx
c0014ace:	83 c4 0c             	add    esp,0xc
c0014ad1:	5b                   	pop    ebx
c0014ad2:	5e                   	pop    esi
c0014ad3:	5f                   	pop    edi
c0014ad4:	5d                   	pop    ebp
c0014ad5:	c3                   	ret    
c0014ad6:	66 90                	xchg   ax,ax

c0014ad8 <SysKill(regs*)>:
c0014ad8:	53                   	push   ebx
c0014ad9:	83 ec 08             	sub    esp,0x8
c0014adc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ae0:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014ae4:	75 16                	jne    c0014afc <SysKill(regs*)+0x24>
c0014ae6:	83 ec 0c             	sub    esp,0xc
c0014ae9:	68 7e 4c 02 c0       	push   0xc0024c7e
c0014aee:	e8 1f b5 ff ff       	call   c0010012 <KePanic(char const*)>
c0014af3:	83 c4 10             	add    esp,0x10
c0014af6:	e9 89 00 00 00       	jmp    c0014b84 <SysKill(regs*)+0xac>
c0014afb:	90                   	nop
c0014afc:	83 ec 0c             	sub    esp,0xc
c0014aff:	68 4c ea 02 c0       	push   0xc002ea4c
c0014b04:	e8 8f d1 00 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014b09:	8d 76 00             	lea    esi,[esi+0x0]
c0014b0c:	83 c4 10             	add    esp,0x10
c0014b0f:	85 c0                	test   eax,eax
c0014b11:	74 19                	je     c0014b2c <SysKill(regs*)+0x54>
c0014b13:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014b16:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014b19:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014b1b:	74 33                	je     c0014b50 <SysKill(regs*)+0x78>
c0014b1d:	52                   	push   edx
c0014b1e:	52                   	push   edx
c0014b1f:	50                   	push   eax
c0014b20:	68 4c ea 02 c0       	push   0xc002ea4c
c0014b25:	e8 7a d6 00 00       	call   c00221a4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014b2a:	eb e0                	jmp    c0014b0c <SysKill(regs*)+0x34>
c0014b2c:	83 ec 0c             	sub    esp,0xc
c0014b2f:	68 40 ea 02 c0       	push   0xc002ea40
c0014b34:	e8 5f d1 00 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014b39:	8d 76 00             	lea    esi,[esi+0x0]
c0014b3c:	83 c4 10             	add    esp,0x10
c0014b3f:	85 c0                	test   eax,eax
c0014b41:	74 41                	je     c0014b84 <SysKill(regs*)+0xac>
c0014b43:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0014b46:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014b49:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014b4b:	75 27                	jne    c0014b74 <SysKill(regs*)+0x9c>
c0014b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0014b50:	51                   	push   ecx
c0014b51:	51                   	push   ecx
c0014b52:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014b55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b5a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b5d:	ff b0 80 07 00 00    	push   DWORD PTR [eax+0x780]
c0014b63:	e8 1a c6 ff ff       	call   c0011182 <KeRaiseSignal(SigHandlerBlock*, int)>
c0014b68:	83 c4 10             	add    esp,0x10
c0014b6b:	31 c0                	xor    eax,eax
c0014b6d:	31 d2                	xor    edx,edx
c0014b6f:	eb 1b                	jmp    c0014b8c <SysKill(regs*)+0xb4>
c0014b71:	8d 76 00             	lea    esi,[esi+0x0]
c0014b74:	52                   	push   edx
c0014b75:	52                   	push   edx
c0014b76:	50                   	push   eax
c0014b77:	68 40 ea 02 c0       	push   0xc002ea40
c0014b7c:	e8 23 d6 00 00       	call   c00221a4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014b81:	eb b9                	jmp    c0014b3c <SysKill(regs*)+0x64>
c0014b83:	90                   	nop
c0014b84:	83 c8 ff             	or     eax,0xffffffff
c0014b87:	89 c2                	mov    edx,eax
c0014b89:	8d 76 00             	lea    esi,[esi+0x0]
c0014b8c:	83 c4 08             	add    esp,0x8
c0014b8f:	5b                   	pop    ebx
c0014b90:	c3                   	ret    

c0014b91 <SysLoadDLL(regs*)>:
c0014b91:	56                   	push   esi
c0014b92:	53                   	push   ebx
c0014b93:	31 d2                	xor    edx,edx
c0014b95:	51                   	push   ecx
c0014b96:	b8 01 00 00 00       	mov    eax,0x1
c0014b9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b9f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014ba3:	0f 84 8c 00 00 00    	je     c0014c35 <SysLoadDLL(regs*)+0xa4>
c0014ba9:	83 ec 0c             	sub    esp,0xc
c0014bac:	68 14 01 00 00       	push   0x114
c0014bb1:	e8 15 b1 ff ff       	call   c000fccb <malloc>
c0014bb6:	83 c4 0c             	add    esp,0xc
c0014bb9:	89 c3                	mov    ebx,eax
c0014bbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bc0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014bc3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014bc6:	53                   	push   ebx
c0014bc7:	e8 66 35 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0014bcc:	83 c4 10             	add    esp,0x10
c0014bcf:	31 d2                	xor    edx,edx
c0014bd1:	b8 02 00 00 00       	mov    eax,0x2
c0014bd6:	85 db                	test   ebx,ebx
c0014bd8:	74 5b                	je     c0014c35 <SysLoadDLL(regs*)+0xa4>
c0014bda:	83 ec 0c             	sub    esp,0xc
c0014bdd:	53                   	push   ebx
c0014bde:	e8 31 38 ff ff       	call   c0008414 <File::exists()>
c0014be3:	83 c4 10             	add    esp,0x10
c0014be6:	84 c0                	test   al,al
c0014be8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014bea:	75 11                	jne    c0014bfd <SysLoadDLL(regs*)+0x6c>
c0014bec:	83 ec 0c             	sub    esp,0xc
c0014bef:	53                   	push   ebx
c0014bf0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014bf3:	83 c4 10             	add    esp,0x10
c0014bf6:	b8 03 00 00 00       	mov    eax,0x3
c0014bfb:	eb 36                	jmp    c0014c33 <SysLoadDLL(regs*)+0xa2>
c0014bfd:	83 ec 0c             	sub    esp,0xc
c0014c00:	53                   	push   ebx
c0014c01:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014c04:	58                   	pop    eax
c0014c05:	5a                   	pop    edx
c0014c06:	6a 00                	push   0x0
c0014c08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014c0b:	e8 e3 17 00 00       	call   c00163f3 <Thr::loadDLL(char const*, bool)>
c0014c10:	83 c4 10             	add    esp,0x10
c0014c13:	89 c1                	mov    ecx,eax
c0014c15:	31 d2                	xor    edx,edx
c0014c17:	b8 04 00 00 00       	mov    eax,0x4
c0014c1c:	85 c9                	test   ecx,ecx
c0014c1e:	74 15                	je     c0014c35 <SysLoadDLL(regs*)+0xa4>
c0014c20:	53                   	push   ebx
c0014c21:	53                   	push   ebx
c0014c22:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c0014c28:	51                   	push   ecx
c0014c29:	e8 17 1a 00 00       	call   c0016645 <Thr::executeDLL(unsigned long, void*)>
c0014c2e:	83 c4 10             	add    esp,0x10
c0014c31:	31 c0                	xor    eax,eax
c0014c33:	31 d2                	xor    edx,edx
c0014c35:	59                   	pop    ecx
c0014c36:	5b                   	pop    ebx
c0014c37:	5e                   	pop    esi
c0014c38:	c3                   	ret    

c0014c39 <SysPause(regs*)>:
c0014c39:	83 ec 18             	sub    esp,0x18
c0014c3c:	6a 08                	push   0x8
c0014c3e:	e8 05 24 00 00       	call   c0017048 <blockTask(TaskState)>
c0014c43:	31 c0                	xor    eax,eax
c0014c45:	31 d2                	xor    edx,edx
c0014c47:	83 c4 1c             	add    esp,0x1c
c0014c4a:	c3                   	ret    

c0014c4b <SysRead(regs*)>:
c0014c4b:	57                   	push   edi
c0014c4c:	56                   	push   esi
c0014c4d:	53                   	push   ebx
c0014c4e:	83 ec 10             	sub    esp,0x10
c0014c51:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014c55:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014c58:	83 f8 02             	cmp    eax,0x2
c0014c5b:	77 10                	ja     c0014c6d <SysRead(regs*)+0x22>
c0014c5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c62:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014c65:	8b 88 66 05 00 00    	mov    ecx,DWORD PTR [eax+0x566]
c0014c6b:	eb 0e                	jmp    c0014c7b <SysRead(regs*)+0x30>
c0014c6d:	83 ec 0c             	sub    esp,0xc
c0014c70:	50                   	push   eax
c0014c71:	e8 1b e7 ff ff       	call   c0013391 <KeGetFileFromDescriptor(int)>
c0014c76:	83 c4 10             	add    esp,0x10
c0014c79:	89 c1                	mov    ecx,eax
c0014c7b:	83 c8 ff             	or     eax,0xffffffff
c0014c7e:	85 c9                	test   ecx,ecx
c0014c80:	89 c2                	mov    edx,eax
c0014c82:	74 28                	je     c0014cac <SysRead(regs*)+0x61>
c0014c84:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c8c:	31 ff                	xor    edi,edi
c0014c8e:	83 ec 0c             	sub    esp,0xc
c0014c91:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014c93:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014c97:	52                   	push   edx
c0014c98:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014c9b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014c9e:	57                   	push   edi
c0014c9f:	56                   	push   esi
c0014ca0:	51                   	push   ecx
c0014ca1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ca4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014ca8:	83 c4 20             	add    esp,0x20
c0014cab:	99                   	cdq    
c0014cac:	83 c4 10             	add    esp,0x10
c0014caf:	5b                   	pop    ebx
c0014cb0:	5e                   	pop    esi
c0014cb1:	5f                   	pop    edi
c0014cb2:	c3                   	ret    

c0014cb3 <SysRegisterSignal(regs*)>:
c0014cb3:	83 ec 18             	sub    esp,0x18
c0014cb6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014cba:	6a 00                	push   0x0
c0014cbc:	6a 00                	push   0x0
c0014cbe:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014cc1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014cc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cc9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014ccc:	ff b0 80 07 00 00    	push   DWORD PTR [eax+0x780]
c0014cd2:	e8 75 c4 ff ff       	call   c001114c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014cd7:	83 c4 2c             	add    esp,0x2c
c0014cda:	99                   	cdq    
c0014cdb:	c3                   	ret    

c0014cdc <SysRegistryGetTypeFromPath(regs*)>:
c0014cdc:	53                   	push   ebx
c0014cdd:	81 ec 40 01 00 00    	sub    esp,0x140
c0014ce3:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014cea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014ced:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014cf0:	e8 b3 92 ff ff       	call   c000dfa8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014cf5:	83 c4 10             	add    esp,0x10
c0014cf8:	89 c1                	mov    ecx,eax
c0014cfa:	85 c0                	test   eax,eax
c0014cfc:	74 15                	je     c0014d13 <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014cfe:	50                   	push   eax
c0014cff:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014d03:	50                   	push   eax
c0014d04:	51                   	push   ecx
c0014d05:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d08:	e8 7f 8e ff ff       	call   c000db8c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014d0d:	83 c4 10             	add    esp,0x10
c0014d10:	99                   	cdq    
c0014d11:	eb 05                	jmp    c0014d18 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014d13:	83 c8 ff             	or     eax,0xffffffff
c0014d16:	89 c2                	mov    edx,eax
c0014d18:	81 c4 38 01 00 00    	add    esp,0x138
c0014d1e:	5b                   	pop    ebx
c0014d1f:	c3                   	ret    

c0014d20 <SysRegistryReadExtent(regs*)>:
c0014d20:	83 ec 1c             	sub    esp,0x1c
c0014d23:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014d27:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014d2a:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014d2d:	85 c0                	test   eax,eax
c0014d2f:	79 1f                	jns    c0014d50 <SysRegistryReadExtent(regs*)+0x30>
c0014d31:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014d36:	52                   	push   edx
c0014d37:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014d3b:	52                   	push   edx
c0014d3c:	50                   	push   eax
c0014d3d:	51                   	push   ecx
c0014d3e:	e8 3b 8d ff ff       	call   c000da7e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014d43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d47:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014d4b:	83 c4 10             	add    esp,0x10
c0014d4e:	eb 14                	jmp    c0014d64 <SysRegistryReadExtent(regs*)+0x44>
c0014d50:	83 ec 04             	sub    esp,0x4
c0014d53:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014d56:	50                   	push   eax
c0014d57:	51                   	push   ecx
c0014d58:	e8 bb 87 ff ff       	call   c000d518 <CmGetString(Reghive_Tag*, int, char*)>
c0014d5d:	83 c4 10             	add    esp,0x10
c0014d60:	31 c0                	xor    eax,eax
c0014d62:	31 d2                	xor    edx,edx
c0014d64:	83 c4 1c             	add    esp,0x1c
c0014d67:	c3                   	ret    

c0014d68 <SysRegistryPathToExtentLookup(regs*)>:
c0014d68:	83 ec 14             	sub    esp,0x14
c0014d6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d6f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014d72:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d75:	e8 2e 92 ff ff       	call   c000dfa8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014d7a:	83 c4 1c             	add    esp,0x1c
c0014d7d:	99                   	cdq    
c0014d7e:	c3                   	ret    

c0014d7f <SysRegistryEnterDirectory(regs*)>:
c0014d7f:	83 ec 14             	sub    esp,0x14
c0014d82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d86:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014d89:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d8c:	e8 fe 87 ff ff       	call   c000d58f <CmEnterDirectory(Reghive_Tag*, int)>
c0014d91:	83 c4 1c             	add    esp,0x1c
c0014d94:	99                   	cdq    
c0014d95:	c3                   	ret    

c0014d96 <SysRegistryGetNext(regs*)>:
c0014d96:	83 ec 14             	sub    esp,0x14
c0014d99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d9d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014da0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014da3:	e8 26 88 ff ff       	call   c000d5ce <CmGetNext(Reghive_Tag*, int)>
c0014da8:	83 c4 1c             	add    esp,0x1c
c0014dab:	99                   	cdq    
c0014dac:	c3                   	ret    

c0014dad <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014dad:	57                   	push   edi
c0014dae:	56                   	push   esi
c0014daf:	53                   	push   ebx
c0014db0:	81 ec 34 01 00 00    	sub    esp,0x134
c0014db6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014dbd:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014dc1:	57                   	push   edi
c0014dc2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014dc5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014dc8:	e8 bf 8d ff ff       	call   c000db8c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014dcd:	89 c3                	mov    ebx,eax
c0014dcf:	58                   	pop    eax
c0014dd0:	5a                   	pop    edx
c0014dd1:	57                   	push   edi
c0014dd2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014dd5:	e8 66 b8 fe ff       	call   c0000640 <strcpy>
c0014dda:	89 d8                	mov    eax,ebx
c0014ddc:	81 c4 40 01 00 00    	add    esp,0x140
c0014de2:	99                   	cdq    
c0014de3:	5b                   	pop    ebx
c0014de4:	5e                   	pop    esi
c0014de5:	5f                   	pop    edi
c0014de6:	c3                   	ret    

c0014de7 <SysRegistryOpen(regs*)>:
c0014de7:	83 ec 18             	sub    esp,0x18
c0014dea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014dee:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014df1:	e8 b2 85 ff ff       	call   c000d3a8 <CmOpen(char const*)>
c0014df6:	83 c4 1c             	add    esp,0x1c
c0014df9:	99                   	cdq    
c0014dfa:	c3                   	ret    

c0014dfb <SysRegistryClose(regs*)>:
c0014dfb:	83 ec 18             	sub    esp,0x18
c0014dfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014e02:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014e05:	e8 bc 86 ff ff       	call   c000d4c6 <CmClose(Reghive_Tag*)>
c0014e0a:	31 c0                	xor    eax,eax
c0014e0c:	31 d2                	xor    edx,edx
c0014e0e:	83 c4 1c             	add    esp,0x1c
c0014e11:	c3                   	ret    

c0014e12 <SysRegistryEasyReadString(regs*)>:
c0014e12:	57                   	push   edi
c0014e13:	56                   	push   esi
c0014e14:	53                   	push   ebx
c0014e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014e19:	83 ec 0c             	sub    esp,0xc
c0014e1c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014e1f:	e8 84 85 ff ff       	call   c000d3a8 <CmOpen(char const*)>
c0014e24:	5a                   	pop    edx
c0014e25:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014e28:	59                   	pop    ecx
c0014e29:	89 c3                	mov    ebx,eax
c0014e2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014e2e:	50                   	push   eax
c0014e2f:	e8 74 91 ff ff       	call   c000dfa8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014e34:	83 c4 10             	add    esp,0x10
c0014e37:	89 c1                	mov    ecx,eax
c0014e39:	b8 01 00 00 00       	mov    eax,0x1
c0014e3e:	85 c9                	test   ecx,ecx
c0014e40:	7e 16                	jle    c0014e58 <SysRegistryEasyReadString(regs*)+0x46>
c0014e42:	50                   	push   eax
c0014e43:	57                   	push   edi
c0014e44:	51                   	push   ecx
c0014e45:	53                   	push   ebx
c0014e46:	e8 cd 86 ff ff       	call   c000d518 <CmGetString(Reghive_Tag*, int, char*)>
c0014e4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e4e:	e8 73 86 ff ff       	call   c000d4c6 <CmClose(Reghive_Tag*)>
c0014e53:	83 c4 10             	add    esp,0x10
c0014e56:	31 c0                	xor    eax,eax
c0014e58:	5b                   	pop    ebx
c0014e59:	31 d2                	xor    edx,edx
c0014e5b:	5e                   	pop    esi
c0014e5c:	5f                   	pop    edi
c0014e5d:	c3                   	ret    

c0014e5e <SysRegistryEasyReadInteger(regs*)>:
c0014e5e:	56                   	push   esi
c0014e5f:	53                   	push   ebx
c0014e60:	83 ec 10             	sub    esp,0x10
c0014e63:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014e67:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014e6a:	e8 39 85 ff ff       	call   c000d3a8 <CmOpen(char const*)>
c0014e6f:	5a                   	pop    edx
c0014e70:	89 c3                	mov    ebx,eax
c0014e72:	59                   	pop    ecx
c0014e73:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014e76:	50                   	push   eax
c0014e77:	e8 2c 91 ff ff       	call   c000dfa8 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014e7c:	83 c4 10             	add    esp,0x10
c0014e7f:	89 c1                	mov    ecx,eax
c0014e81:	b8 01 00 00 00       	mov    eax,0x1
c0014e86:	85 c9                	test   ecx,ecx
c0014e88:	7e 18                	jle    c0014ea2 <SysRegistryEasyReadInteger(regs*)+0x44>
c0014e8a:	50                   	push   eax
c0014e8b:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014e8e:	51                   	push   ecx
c0014e8f:	53                   	push   ebx
c0014e90:	e8 e9 8b ff ff       	call   c000da7e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014e95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e98:	e8 29 86 ff ff       	call   c000d4c6 <CmClose(Reghive_Tag*)>
c0014e9d:	83 c4 10             	add    esp,0x10
c0014ea0:	31 c0                	xor    eax,eax
c0014ea2:	59                   	pop    ecx
c0014ea3:	31 d2                	xor    edx,edx
c0014ea5:	5b                   	pop    ebx
c0014ea6:	5e                   	pop    esi
c0014ea7:	c3                   	ret    

c0014ea8 <SysSbrk(regs*)>:
c0014ea8:	56                   	push   esi
c0014ea9:	53                   	push   ebx
c0014eaa:	50                   	push   eax
c0014eab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014eb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014eb4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014eb7:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014eba:	8b 88 72 05 00 00    	mov    ecx,DWORD PTR [eax+0x572]
c0014ec0:	85 db                	test   ebx,ebx
c0014ec2:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014ec5:	74 02                	je     c0014ec9 <SysSbrk(regs*)+0x21>
c0014ec7:	79 06                	jns    c0014ecf <SysSbrk(regs*)+0x27>
c0014ec9:	89 f0                	mov    eax,esi
c0014ecb:	31 d2                	xor    edx,edx
c0014ecd:	eb 2a                	jmp    c0014ef9 <SysSbrk(regs*)+0x51>
c0014ecf:	83 c8 ff             	or     eax,0xffffffff
c0014ed2:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014ed8:	89 c2                	mov    edx,eax
c0014eda:	77 1d                	ja     c0014ef9 <SysSbrk(regs*)+0x51>
c0014edc:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014ee2:	50                   	push   eax
c0014ee3:	c1 ea 0c             	shr    edx,0xc
c0014ee6:	68 07 0c 00 00       	push   0xc07
c0014eeb:	52                   	push   edx
c0014eec:	51                   	push   ecx
c0014eed:	e8 f2 ed ff ff       	call   c0013ce4 <VAS::allocatePages(int, int)>
c0014ef2:	89 f0                	mov    eax,esi
c0014ef4:	31 d2                	xor    edx,edx
c0014ef6:	83 c4 10             	add    esp,0x10
c0014ef9:	59                   	pop    ecx
c0014efa:	5b                   	pop    ebx
c0014efb:	5e                   	pop    esi
c0014efc:	c3                   	ret    

c0014efd <SysSetCwd(regs*)>:
c0014efd:	83 ec 14             	sub    esp,0x14
c0014f00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f04:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014f07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f0c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0014f0f:	e8 9f 35 ff ff       	call   c00084b3 <Fs::setcwd(Process*, char*)>
c0014f14:	83 c4 1c             	add    esp,0x1c
c0014f17:	99                   	cdq    
c0014f18:	c3                   	ret    

c0014f19 <SysSetTime(regs*)>:
c0014f19:	55                   	push   ebp
c0014f1a:	31 d2                	xor    edx,edx
c0014f1c:	57                   	push   edi
c0014f1d:	56                   	push   esi
c0014f1e:	be 18 00 00 00       	mov    esi,0x18
c0014f23:	53                   	push   ebx
c0014f24:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014f29:	83 ec 20             	sub    esp,0x20
c0014f2c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014f30:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014f33:	f7 f3                	div    ebx
c0014f35:	89 d7                	mov    edi,edx
c0014f37:	31 d2                	xor    edx,edx
c0014f39:	f7 f3                	div    ebx
c0014f3b:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014f3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014f42:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014f47:	31 d2                	xor    edx,edx
c0014f49:	f7 f3                	div    ebx
c0014f4b:	31 d2                	xor    edx,edx
c0014f4d:	f7 f6                	div    esi
c0014f4f:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014f52:	89 d5                	mov    ebp,edx
c0014f54:	89 c3                	mov    ebx,eax
c0014f56:	be 0c 00 00 00       	mov    esi,0xc
c0014f5b:	83 e3 1f             	and    ebx,0x1f
c0014f5e:	c1 e8 05             	shr    eax,0x5
c0014f61:	43                   	inc    ebx
c0014f62:	31 d2                	xor    edx,edx
c0014f64:	f7 f6                	div    esi
c0014f66:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014f6a:	57                   	push   edi
c0014f6b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f6f:	55                   	push   ebp
c0014f70:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c0014f74:	56                   	push   esi
c0014f75:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f79:	53                   	push   ebx
c0014f7a:	68 9f 4c 02 c0       	push   0xc0024c9f
c0014f7f:	e8 e0 1f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014f84:	83 c4 1c             	add    esp,0x1c
c0014f87:	57                   	push   edi
c0014f88:	c1 e7 10             	shl    edi,0x10
c0014f8b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f8f:	55                   	push   ebp
c0014f90:	56                   	push   esi
c0014f91:	c1 e6 10             	shl    esi,0x10
c0014f94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f98:	53                   	push   ebx
c0014f99:	68 c1 4c 02 c0       	push   0xc0024cc1
c0014f9e:	e8 c1 1f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014fa3:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0014fa8:	31 d2                	xor    edx,edx
c0014faa:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0014fb0:	31 c0                	xor    eax,eax
c0014fb2:	88 d8                	mov    al,bl
c0014fb4:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c0014fb8:	0f b7 d8             	movzx  ebx,ax
c0014fbb:	09 f3                	or     ebx,esi
c0014fbd:	89 d8                	mov    eax,ebx
c0014fbf:	89 eb                	mov    ebx,ebp
c0014fc1:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c0014fc5:	88 da                	mov    dl,bl
c0014fc7:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c0014fcb:	83 c4 1c             	add    esp,0x1c
c0014fce:	89 d6                	mov    esi,edx
c0014fd0:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0014fd6:	09 fe                	or     esi,edi
c0014fd8:	56                   	push   esi
c0014fd9:	50                   	push   eax
c0014fda:	51                   	push   ecx
c0014fdb:	e8 44 45 ff ff       	call   c0009524 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014fe0:	83 c4 2c             	add    esp,0x2c
c0014fe3:	83 f0 01             	xor    eax,0x1
c0014fe6:	5b                   	pop    ebx
c0014fe7:	0f b6 c0             	movzx  eax,al
c0014fea:	5e                   	pop    esi
c0014feb:	31 d2                	xor    edx,edx
c0014fed:	5f                   	pop    edi
c0014fee:	5d                   	pop    ebp
c0014fef:	c3                   	ret    

c0014ff0 <SysSymlink(regs*)>:
c0014ff0:	56                   	push   esi
c0014ff1:	83 c8 ff             	or     eax,0xffffffff
c0014ff4:	53                   	push   ebx
c0014ff5:	89 c2                	mov    edx,eax
c0014ff7:	81 ec 34 02 00 00    	sub    esp,0x234
c0014ffd:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0015004:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015008:	74 50                	je     c001505a <SysSymlink(regs*)+0x6a>
c001500a:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001500d:	85 c9                	test   ecx,ecx
c001500f:	74 49                	je     c001505a <SysSymlink(regs*)+0x6a>
c0015011:	6a 01                	push   0x1
c0015013:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015018:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001501b:	05 0c 01 00 00       	add    eax,0x10c
c0015020:	50                   	push   eax
c0015021:	51                   	push   ecx
c0015022:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0015026:	56                   	push   esi
c0015027:	e8 ee 2d ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001502c:	6a 01                	push   0x1
c001502e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015033:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015036:	05 0c 01 00 00       	add    eax,0x10c
c001503b:	50                   	push   eax
c001503c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001503f:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0015046:	53                   	push   ebx
c0015047:	e8 ce 2d ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001504c:	83 c4 18             	add    esp,0x18
c001504f:	56                   	push   esi
c0015050:	53                   	push   ebx
c0015051:	e8 f2 29 ff ff       	call   c0007a48 <KeCreateSymlink(char const*, char const*)>
c0015056:	83 c4 10             	add    esp,0x10
c0015059:	99                   	cdq    
c001505a:	81 c4 34 02 00 00    	add    esp,0x234
c0015060:	5b                   	pop    ebx
c0015061:	5e                   	pop    esi
c0015062:	c3                   	ret    

c0015063 <SysTimezone(regs*)>:
c0015063:	83 ec 0c             	sub    esp,0xc
c0015066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001506a:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c001506e:	75 17                	jne    c0015087 <SysTimezone(regs*)+0x24>
c0015070:	83 ec 0c             	sub    esp,0xc
c0015073:	68 e3 4c 02 c0       	push   0xc0024ce3
c0015078:	e8 e7 1e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001507d:	83 c8 ff             	or     eax,0xffffffff
c0015080:	83 c4 10             	add    esp,0x10
c0015083:	89 c2                	mov    edx,eax
c0015085:	eb 16                	jmp    c001509d <SysTimezone(regs*)+0x3a>
c0015087:	83 ec 0c             	sub    esp,0xc
c001508a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001508d:	e8 1f 3f ff ff       	call   c0008fb1 <KeSetTimezone(int)>
c0015092:	31 d2                	xor    edx,edx
c0015094:	83 f0 01             	xor    eax,0x1
c0015097:	83 c4 10             	add    esp,0x10
c001509a:	0f b6 c0             	movzx  eax,al
c001509d:	83 c4 0c             	add    esp,0xc
c00150a0:	c3                   	ret    

c00150a1 <SysTruncate(regs*)>:
c00150a1:	55                   	push   ebp
c00150a2:	57                   	push   edi
c00150a3:	31 ff                	xor    edi,edi
c00150a5:	56                   	push   esi
c00150a6:	53                   	push   ebx
c00150a7:	83 ec 0c             	sub    esp,0xc
c00150aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150ae:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00150b1:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00150b4:	89 ce                	mov    esi,ecx
c00150b6:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00150ba:	0f 84 9a 00 00 00    	je     c001515a <SysTruncate(regs*)+0xb9>
c00150c0:	83 ec 0c             	sub    esp,0xc
c00150c3:	68 14 01 00 00       	push   0x114
c00150c8:	e8 fe ab ff ff       	call   c000fccb <malloc>
c00150cd:	83 c4 0c             	add    esp,0xc
c00150d0:	89 c3                	mov    ebx,eax
c00150d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150d7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00150da:	55                   	push   ebp
c00150db:	53                   	push   ebx
c00150dc:	e8 51 30 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00150e1:	83 c4 10             	add    esp,0x10
c00150e4:	31 d2                	xor    edx,edx
c00150e6:	b8 03 00 00 00       	mov    eax,0x3
c00150eb:	85 db                	test   ebx,ebx
c00150ed:	0f 84 a2 00 00 00    	je     c0015195 <SysTruncate(regs*)+0xf4>
c00150f3:	51                   	push   ecx
c00150f4:	51                   	push   ecx
c00150f5:	6a 02                	push   0x2
c00150f7:	53                   	push   ebx
c00150f8:	e8 53 30 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00150fd:	83 c4 10             	add    esp,0x10
c0015100:	85 c0                	test   eax,eax
c0015102:	74 13                	je     c0015117 <SysTruncate(regs*)+0x76>
c0015104:	83 ec 0c             	sub    esp,0xc
c0015107:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015109:	53                   	push   ebx
c001510a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001510d:	83 c4 10             	add    esp,0x10
c0015110:	b8 04 00 00 00       	mov    eax,0x4
c0015115:	eb 7c                	jmp    c0015193 <SysTruncate(regs*)+0xf2>
c0015117:	52                   	push   edx
c0015118:	57                   	push   edi
c0015119:	56                   	push   esi
c001511a:	53                   	push   ebx
c001511b:	e8 44 31 ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c0015120:	83 c4 10             	add    esp,0x10
c0015123:	85 c0                	test   eax,eax
c0015125:	74 1b                	je     c0015142 <SysTruncate(regs*)+0xa1>
c0015127:	83 ec 0c             	sub    esp,0xc
c001512a:	53                   	push   ebx
c001512b:	e8 7e 30 ff ff       	call   c00081ae <File::close()>
c0015130:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015132:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015135:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015138:	83 c4 10             	add    esp,0x10
c001513b:	b8 05 00 00 00       	mov    eax,0x5
c0015140:	eb 51                	jmp    c0015193 <SysTruncate(regs*)+0xf2>
c0015142:	83 ec 0c             	sub    esp,0xc
c0015145:	53                   	push   ebx
c0015146:	e8 63 30 ff ff       	call   c00081ae <File::close()>
c001514b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001514d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015150:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015153:	83 c4 10             	add    esp,0x10
c0015156:	31 c0                	xor    eax,eax
c0015158:	eb 39                	jmp    c0015193 <SysTruncate(regs*)+0xf2>
c001515a:	31 d2                	xor    edx,edx
c001515c:	b8 01 00 00 00       	mov    eax,0x1
c0015161:	83 fd 02             	cmp    ebp,0x2
c0015164:	7e 2f                	jle    c0015195 <SysTruncate(regs*)+0xf4>
c0015166:	83 ec 0c             	sub    esp,0xc
c0015169:	51                   	push   ecx
c001516a:	e8 22 e2 ff ff       	call   c0013391 <KeGetFileFromDescriptor(int)>
c001516f:	83 c4 10             	add    esp,0x10
c0015172:	89 c1                	mov    ecx,eax
c0015174:	31 d2                	xor    edx,edx
c0015176:	b8 02 00 00 00       	mov    eax,0x2
c001517b:	85 c9                	test   ecx,ecx
c001517d:	74 16                	je     c0015195 <SysTruncate(regs*)+0xf4>
c001517f:	50                   	push   eax
c0015180:	57                   	push   edi
c0015181:	56                   	push   esi
c0015182:	51                   	push   ecx
c0015183:	e8 dc 30 ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c0015188:	83 c4 10             	add    esp,0x10
c001518b:	85 c0                	test   eax,eax
c001518d:	0f 95 c0             	setne  al
c0015190:	0f b6 c0             	movzx  eax,al
c0015193:	31 d2                	xor    edx,edx
c0015195:	83 c4 0c             	add    esp,0xc
c0015198:	5b                   	pop    ebx
c0015199:	5e                   	pop    esi
c001519a:	5f                   	pop    edi
c001519b:	5d                   	pop    ebp
c001519c:	c3                   	ret    

c001519d <SysWrite(regs*)>:
c001519d:	57                   	push   edi
c001519e:	56                   	push   esi
c001519f:	53                   	push   ebx
c00151a0:	83 ec 10             	sub    esp,0x10
c00151a3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00151a7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00151aa:	83 f8 02             	cmp    eax,0x2
c00151ad:	77 10                	ja     c00151bf <SysWrite(regs*)+0x22>
c00151af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151b4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151b7:	8b 88 66 05 00 00    	mov    ecx,DWORD PTR [eax+0x566]
c00151bd:	eb 0e                	jmp    c00151cd <SysWrite(regs*)+0x30>
c00151bf:	83 ec 0c             	sub    esp,0xc
c00151c2:	50                   	push   eax
c00151c3:	e8 c9 e1 ff ff       	call   c0013391 <KeGetFileFromDescriptor(int)>
c00151c8:	83 c4 10             	add    esp,0x10
c00151cb:	89 c1                	mov    ecx,eax
c00151cd:	83 c8 ff             	or     eax,0xffffffff
c00151d0:	85 c9                	test   ecx,ecx
c00151d2:	89 c2                	mov    edx,eax
c00151d4:	74 28                	je     c00151fe <SysWrite(regs*)+0x61>
c00151d6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00151de:	31 ff                	xor    edi,edi
c00151e0:	83 ec 0c             	sub    esp,0xc
c00151e3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00151e5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00151e9:	52                   	push   edx
c00151ea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00151ed:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00151f0:	57                   	push   edi
c00151f1:	56                   	push   esi
c00151f2:	51                   	push   ecx
c00151f3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00151f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00151fa:	83 c4 20             	add    esp,0x20
c00151fd:	99                   	cdq    
c00151fe:	83 c4 10             	add    esp,0x10
c0015201:	5b                   	pop    ebx
c0015202:	5e                   	pop    esi
c0015203:	5f                   	pop    edi
c0015204:	c3                   	ret    

c0015205 <SysWsbe(regs*)>:
c0015205:	55                   	push   ebp
c0015206:	57                   	push   edi
c0015207:	56                   	push   esi
c0015208:	53                   	push   ebx
c0015209:	83 ec 3c             	sub    esp,0x3c
c001520c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015210:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0015217:	75 2d                	jne    c0015246 <SysWsbe(regs*)+0x41>
c0015219:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0015220:	75 24                	jne    c0015246 <SysWsbe(regs*)+0x41>
c0015222:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0015229:	75 1b                	jne    c0015246 <SysWsbe(regs*)+0x41>
c001522b:	6a 01                	push   0x1
c001522d:	6a 00                	push   0x0
c001522f:	68 21 9f 00 c0       	push   0xc0009f21
c0015234:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001523a:	e8 b1 1a 00 00       	call   c0016cf0 <Process::createThread(void (*)(void*), void*, int)>
c001523f:	83 c4 10             	add    esp,0x10
c0015242:	31 c0                	xor    eax,eax
c0015244:	eb 52                	jmp    c0015298 <SysWsbe(regs*)+0x93>
c0015246:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001524a:	be f8 4c 02 c0       	mov    esi,0xc0024cf8
c001524f:	b9 0b 00 00 00       	mov    ecx,0xb
c0015254:	fc                   	cld    
c0015255:	83 ec 0c             	sub    esp,0xc
c0015258:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001525a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001525e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015263:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015266:	8b b0 66 05 00 00    	mov    esi,DWORD PTR [eax+0x566]
c001526c:	8b 06                	mov    eax,DWORD PTR [esi]
c001526e:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0015271:	57                   	push   edi
c0015272:	e8 f9 b2 fe ff       	call   c0000570 <strlen>
c0015277:	5a                   	pop    edx
c0015278:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001527c:	52                   	push   edx
c001527d:	31 d2                	xor    edx,edx
c001527f:	57                   	push   edi
c0015280:	52                   	push   edx
c0015281:	50                   	push   eax
c0015282:	56                   	push   esi
c0015283:	ff d5                	call   ebp
c0015285:	83 c4 14             	add    esp,0x14
c0015288:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001528b:	e8 fc 24 00 00       	call   c001778c <terminateTask(int)>
c0015290:	83 c4 10             	add    esp,0x10
c0015293:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015298:	83 c4 3c             	add    esp,0x3c
c001529b:	31 d2                	xor    edx,edx
c001529d:	5b                   	pop    ebx
c001529e:	5e                   	pop    esi
c001529f:	5f                   	pop    edi
c00152a0:	5d                   	pop    ebp
c00152a1:	c3                   	ret    

c00152a2 <SysYield(regs*)>:
c00152a2:	83 ec 0c             	sub    esp,0xc
c00152a5:	fa                   	cli    
c00152a6:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00152ac:	e8 d7 1c 00 00       	call   c0016f88 <schedule()>
c00152b1:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00152b8:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00152bf:	75 01                	jne    c00152c2 <SysYield(regs*)+0x20>
c00152c1:	fb                   	sti    
c00152c2:	31 c0                	xor    eax,eax
c00152c4:	31 d2                	xor    edx,edx
c00152c6:	83 c4 0c             	add    esp,0xc
c00152c9:	c3                   	ret    
c00152ca:	66 90                	xchg   ax,ax

c00152cc <KeAlarm(ThreadControlBlock*, unsigned long long)>:
c00152cc:	55                   	push   ebp
c00152cd:	57                   	push   edi
c00152ce:	56                   	push   esi
c00152cf:	53                   	push   ebx
c00152d0:	83 ec 2c             	sub    esp,0x2c
c00152d3:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00152d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00152db:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00152df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00152e7:	83 ec 08             	sub    esp,0x8
c00152ea:	50                   	push   eax
c00152eb:	68 24 4d 02 c0       	push   0xc0024d24
c00152f0:	e8 6f 1c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00152f5:	83 c4 10             	add    esp,0x10
c00152f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152fc:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c00152ff:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c0015302:	89 c1                	mov    ecx,eax
c0015304:	80 f5 00             	xor    ch,0x0
c0015307:	89 cf                	mov    edi,ecx
c0015309:	89 d0                	mov    eax,edx
c001530b:	80 f4 00             	xor    ah,0x0
c001530e:	89 c5                	mov    ebp,eax
c0015310:	89 e8                	mov    eax,ebp
c0015312:	09 f8                	or     eax,edi
c0015314:	74 22                	je     c0015338 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x6c>
c0015316:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001531a:	8b 78 63             	mov    edi,DWORD PTR [eax+0x63]
c001531d:	8b 68 67             	mov    ebp,DWORD PTR [eax+0x67]
c0015320:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c0015325:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c001532b:	29 c7                	sub    edi,eax
c001532d:	19 d5                	sbb    ebp,edx
c001532f:	89 f8                	mov    eax,edi
c0015331:	89 ea                	mov    edx,ebp
c0015333:	eb 0f                	jmp    c0015344 <KeAlarm(ThreadControlBlock*, unsigned long long)+0x78>
c0015335:	8d 76 00             	lea    esi,[esi+0x0]
c0015338:	b8 00 00 00 00       	mov    eax,0x0
c001533d:	ba 00 00 00 00       	mov    edx,0x0
c0015342:	66 90                	xchg   ax,ax
c0015344:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015348:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001534c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015350:	80 f4 00             	xor    ah,0x0
c0015353:	89 c3                	mov    ebx,eax
c0015355:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015359:	80 f4 00             	xor    ah,0x0
c001535c:	89 c6                	mov    esi,eax
c001535e:	89 f0                	mov    eax,esi
c0015360:	09 d8                	or     eax,ebx
c0015362:	74 1c                	je     c0015380 <KeAlarm(ThreadControlBlock*, unsigned long long)+0xb4>
c0015364:	8b 0d 50 bb 02 c0    	mov    ecx,DWORD PTR ds:0xc002bb50
c001536a:	8b 1d 54 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb54
c0015370:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015374:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015378:	01 c8                	add    eax,ecx
c001537a:	11 da                	adc    edx,ebx
c001537c:	eb 0e                	jmp    c001538c <KeAlarm(ThreadControlBlock*, unsigned long long)+0xc0>
c001537e:	66 90                	xchg   ax,ax
c0015380:	b8 00 00 00 00       	mov    eax,0x0
c0015385:	ba 00 00 00 00       	mov    edx,0x0
c001538a:	66 90                	xchg   ax,ax
c001538c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0015390:	89 41 63             	mov    DWORD PTR [ecx+0x63],eax
c0015393:	89 51 67             	mov    DWORD PTR [ecx+0x67],edx
c0015396:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001539a:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c001539d:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c00153a0:	83 ec 08             	sub    esp,0x8
c00153a3:	50                   	push   eax
c00153a4:	68 38 4d 02 c0       	push   0xc0024d38
c00153a9:	e8 b6 1b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00153ae:	83 c4 10             	add    esp,0x10
c00153b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153b5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00153b9:	83 c4 2c             	add    esp,0x2c
c00153bc:	5b                   	pop    ebx
c00153bd:	5e                   	pop    esi
c00153be:	5f                   	pop    edi
c00153bf:	5d                   	pop    ebp
c00153c0:	c3                   	ret    
c00153c1:	8d 76 00             	lea    esi,[esi+0x0]

c00153c4 <KeCheckAlarm(ThreadControlBlock*)>:
c00153c4:	56                   	push   esi
c00153c5:	53                   	push   ebx
c00153c6:	83 ec 04             	sub    esp,0x4
c00153c9:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c00153ce:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c00153d4:	89 c1                	mov    ecx,eax
c00153d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153da:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c00153dd:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c00153e0:	83 ec 04             	sub    esp,0x4
c00153e3:	51                   	push   ecx
c00153e4:	50                   	push   eax
c00153e5:	68 44 4d 02 c0       	push   0xc0024d44
c00153ea:	e8 75 1b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00153ef:	83 c4 10             	add    esp,0x10
c00153f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153f6:	8b 50 67             	mov    edx,DWORD PTR [eax+0x67]
c00153f9:	8b 40 63             	mov    eax,DWORD PTR [eax+0x63]
c00153fc:	89 c1                	mov    ecx,eax
c00153fe:	80 f5 00             	xor    ch,0x0
c0015401:	89 cb                	mov    ebx,ecx
c0015403:	89 d0                	mov    eax,edx
c0015405:	80 f4 00             	xor    ah,0x0
c0015408:	89 c6                	mov    esi,eax
c001540a:	89 f0                	mov    eax,esi
c001540c:	09 d8                	or     eax,ebx
c001540e:	74 5c                	je     c001546c <KeCheckAlarm(ThreadControlBlock*)+0xa8>
c0015410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015414:	8b 48 63             	mov    ecx,DWORD PTR [eax+0x63]
c0015417:	8b 58 67             	mov    ebx,DWORD PTR [eax+0x67]
c001541a:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c001541f:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c0015425:	39 c8                	cmp    eax,ecx
c0015427:	89 d0                	mov    eax,edx
c0015429:	19 d8                	sbb    eax,ebx
c001542b:	72 3f                	jb     c001546c <KeCheckAlarm(ThreadControlBlock*)+0xa8>
c001542d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015431:	c7 40 63 00 00 00 00 	mov    DWORD PTR [eax+0x63],0x0
c0015438:	c7 40 67 00 00 00 00 	mov    DWORD PTR [eax+0x67],0x0
c001543f:	83 ec 0c             	sub    esp,0xc
c0015442:	68 60 4d 02 c0       	push   0xc0024d60
c0015447:	e8 18 1b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001544c:	83 c4 10             	add    esp,0x10
c001544f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015453:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015456:	8b 80 80 07 00 00    	mov    eax,DWORD PTR [eax+0x780]
c001545c:	83 ec 08             	sub    esp,0x8
c001545f:	6a 0e                	push   0xe
c0015461:	50                   	push   eax
c0015462:	e8 1b bd ff ff       	call   c0011182 <KeRaiseSignal(SigHandlerBlock*, int)>
c0015467:	83 c4 10             	add    esp,0x10
c001546a:	66 90                	xchg   ax,ax
c001546c:	90                   	nop
c001546d:	83 c4 04             	add    esp,0x4
c0015470:	5b                   	pop    ebx
c0015471:	5e                   	pop    esi
c0015472:	c3                   	ret    

c0015473 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015473:	55                   	push   ebp
c0015474:	57                   	push   edi
c0015475:	56                   	push   esi
c0015476:	53                   	push   ebx
c0015477:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001547d:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015485:	0f 95 c0             	setne  al
c0015488:	31 d2                	xor    edx,edx
c001548a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0015492:	0f 94 c2             	sete   dl
c0015495:	85 c2                	test   edx,eax
c0015497:	74 34                	je     c00154cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015499:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00154a4:	74 27                	je     c00154cd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00154a6:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00154ad:	05 00 10 00 00       	add    eax,0x1000
c00154b2:	89 c1                	mov    ecx,eax
c00154b4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00154b9:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00154bf:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00154c6:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00154cd:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00154d4:	83 ec 0c             	sub    esp,0xc
c00154d7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00154dd:	6a 01                	push   0x1
c00154df:	e8 19 e0 ff ff       	call   c00134fd <Virt::allocateKernelVirtualPages(int)>
c00154e4:	83 c4 10             	add    esp,0x10
c00154e7:	89 c3                	mov    ebx,eax
c00154e9:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00154ef:	0f 86 26 01 00 00    	jbe    c001561b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00154f5:	c1 ee 0c             	shr    esi,0xc
c00154f8:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00154ff:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0015503:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001550b:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015512:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015516:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001551d:	29 ef                	sub    edi,ebp
c001551f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0015523:	0f 83 f9 00 00 00    	jae    c0015622 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c0015529:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001552f:	76 05                	jbe    c0015536 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0015531:	bf 00 10 00 00       	mov    edi,0x1000
c0015536:	83 ec 0c             	sub    esp,0xc
c0015539:	31 d2                	xor    edx,edx
c001553b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015542:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015544:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015548:	50                   	push   eax
c0015549:	8d 74 24 30          	lea    esi,[esp+0x30]
c001554d:	56                   	push   esi
c001554e:	52                   	push   edx
c001554f:	57                   	push   edi
c0015550:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015557:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001555a:	83 c4 20             	add    esp,0x20
c001555d:	85 c0                	test   eax,eax
c001555f:	75 06                	jne    c0015567 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0015561:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015565:	74 13                	je     c001557a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0015567:	83 ec 0c             	sub    esp,0xc
c001556a:	53                   	push   ebx
c001556b:	e8 95 e2 ff ff       	call   c0013805 <Virt::freeKernelVirtualPages(unsigned long)>
c0015570:	83 c4 10             	add    esp,0x10
c0015573:	31 c0                	xor    eax,eax
c0015575:	e9 80 01 00 00       	jmp    c00156fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001557a:	fa                   	cli    
c001557b:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0015581:	e8 80 ac ff ff       	call   c0010206 <Phys::allocatePage()>
c0015586:	6a 07                	push   0x7
c0015588:	89 c7                	mov    edi,eax
c001558a:	53                   	push   ebx
c001558b:	50                   	push   eax
c001558c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015591:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015594:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c001559a:	e8 41 e6 ff ff       	call   c0013be0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001559f:	83 c4 0c             	add    esp,0xc
c00155a2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00155a9:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c00155af:	6a 00                	push   0x0
c00155b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155b9:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c00155bf:	e8 88 e4 ff ff       	call   c0013a4c <VAS::mapOtherVASIn(bool, VAS*)>
c00155c4:	58                   	pop    eax
c00155c5:	5a                   	pop    edx
c00155c6:	68 07 0c 00 00       	push   0xc07
c00155cb:	55                   	push   ebp
c00155cc:	57                   	push   edi
c00155cd:	89 df                	mov    edi,ebx
c00155cf:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00155d6:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c00155dc:	6a 00                	push   0x0
c00155de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00155e6:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c00155ec:	e8 31 e8 ff ff       	call   c0013e22 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00155f1:	b9 00 10 00 00       	mov    ecx,0x1000
c00155f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00155f8:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00155ff:	83 c4 20             	add    esp,0x20
c0015602:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0015609:	75 01                	jne    c001560c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c001560b:	fb                   	sti    
c001560c:	81 c5 00 10 00 00    	add    ebp,0x1000
c0015612:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015616:	e9 f0 fe ff ff       	jmp    c001550b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c001561b:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0015622:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015629:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001562f:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0015635:	0f 86 b1 00 00 00    	jbe    c00156ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001563b:	fa                   	cli    
c001563c:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0015642:	c1 ee 0c             	shr    esi,0xc
c0015645:	51                   	push   ecx
c0015646:	31 ff                	xor    edi,edi
c0015648:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001564f:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c0015655:	6a 00                	push   0x0
c0015657:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001565c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001565f:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c0015665:	e8 e2 e3 ff ff       	call   c0013a4c <VAS::mapOtherVASIn(bool, VAS*)>
c001566a:	83 c4 10             	add    esp,0x10
c001566d:	e8 94 ab ff ff       	call   c0010206 <Phys::allocatePage()>
c0015672:	47                   	inc    edi
c0015673:	6a 07                	push   0x7
c0015675:	53                   	push   ebx
c0015676:	50                   	push   eax
c0015677:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001567b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015681:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0015684:	ff b2 72 05 00 00    	push   DWORD PTR [edx+0x572]
c001568a:	e8 51 e5 ff ff       	call   c0013be0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001568f:	58                   	pop    eax
c0015690:	5a                   	pop    edx
c0015691:	68 07 0c 00 00       	push   0xc07
c0015696:	55                   	push   ebp
c0015697:	81 c5 00 10 00 00    	add    ebp,0x1000
c001569d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00156a1:	50                   	push   eax
c00156a2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00156a9:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c00156af:	6a 00                	push   0x0
c00156b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156b9:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c00156bf:	e8 5e e7 ff ff       	call   c0013e22 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00156c4:	83 c4 1c             	add    esp,0x1c
c00156c7:	68 00 10 00 00       	push   0x1000
c00156cc:	6a 00                	push   0x0
c00156ce:	53                   	push   ebx
c00156cf:	e8 1c ae fe ff       	call   c00004f0 <memset>
c00156d4:	83 c4 10             	add    esp,0x10
c00156d7:	39 fe                	cmp    esi,edi
c00156d9:	77 92                	ja     c001566d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c00156db:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00156e2:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00156e9:	75 01                	jne    c00156ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c00156eb:	fb                   	sti    
c00156ec:	83 ec 0c             	sub    esp,0xc
c00156ef:	53                   	push   ebx
c00156f0:	e8 10 e1 ff ff       	call   c0013805 <Virt::freeKernelVirtualPages(unsigned long)>
c00156f5:	83 c4 10             	add    esp,0x10
c00156f8:	b0 01                	mov    al,0x1
c00156fa:	81 c4 2c 10 00 00    	add    esp,0x102c
c0015700:	5b                   	pop    ebx
c0015701:	5e                   	pop    esi
c0015702:	5f                   	pop    edi
c0015703:	5d                   	pop    ebp
c0015704:	c3                   	ret    

c0015705 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0015705:	55                   	push   ebp
c0015706:	57                   	push   edi
c0015707:	56                   	push   esi
c0015708:	53                   	push   ebx
c0015709:	83 ec 48             	sub    esp,0x48
c001570c:	68 14 01 00 00       	push   0x114
c0015711:	e8 b5 a5 ff ff       	call   c000fccb <malloc>
c0015716:	83 c4 0c             	add    esp,0xc
c0015719:	89 c6                	mov    esi,eax
c001571b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001571f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0015723:	50                   	push   eax
c0015724:	e8 09 2a ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0015729:	58                   	pop    eax
c001572a:	5a                   	pop    edx
c001572b:	6a 01                	push   0x1
c001572d:	56                   	push   esi
c001572e:	e8 1d 2a ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0015733:	83 c4 10             	add    esp,0x10
c0015736:	85 c0                	test   eax,eax
c0015738:	0f 85 43 01 00 00    	jne    c0015881 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001573e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0015746:	83 ec 0c             	sub    esp,0xc
c0015749:	6a 34                	push   0x34
c001574b:	e8 7b a5 ff ff       	call   c000fccb <malloc>
c0015750:	89 c3                	mov    ebx,eax
c0015752:	58                   	pop    eax
c0015753:	8b 06                	mov    eax,DWORD PTR [esi]
c0015755:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0015759:	57                   	push   edi
c001575a:	53                   	push   ebx
c001575b:	6a 00                	push   0x0
c001575d:	6a 34                	push   0x34
c001575f:	56                   	push   esi
c0015760:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015763:	83 c4 20             	add    esp,0x20
c0015766:	85 c0                	test   eax,eax
c0015768:	0f 85 13 01 00 00    	jne    c0015881 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001576e:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0015774:	0f 85 07 01 00 00    	jne    c0015881 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001577a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001577d:	85 c0                	test   eax,eax
c001577f:	0f 84 fc 00 00 00    	je     c0015881 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0015785:	31 d2                	xor    edx,edx
c0015787:	55                   	push   ebp
c0015788:	52                   	push   edx
c0015789:	50                   	push   eax
c001578a:	56                   	push   esi
c001578b:	e8 7e 2a ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015790:	83 c4 10             	add    esp,0x10
c0015793:	85 c0                	test   eax,eax
c0015795:	0f 85 e6 00 00 00    	jne    c0015881 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001579b:	83 ec 0c             	sub    esp,0xc
c001579e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00157a1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00157a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00157a9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00157ad:	0f af c2             	imul   eax,edx
c00157b0:	50                   	push   eax
c00157b1:	e8 15 a5 ff ff       	call   c000fccb <malloc>
c00157b6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00157b8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00157bc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00157bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00157c3:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00157c7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00157cb:	0f af c2             	imul   eax,edx
c00157ce:	99                   	cdq    
c00157cf:	52                   	push   edx
c00157d0:	50                   	push   eax
c00157d1:	56                   	push   esi
c00157d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00157d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00157d8:	83 c4 20             	add    esp,0x20
c00157db:	85 c0                	test   eax,eax
c00157dd:	0f 84 9e 00 00 00    	je     c0015881 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00157e3:	31 d2                	xor    edx,edx
c00157e5:	51                   	push   ecx
c00157e6:	52                   	push   edx
c00157e7:	50                   	push   eax
c00157e8:	56                   	push   esi
c00157e9:	e8 20 2a ff ff       	call   c000820e <File::seek(unsigned long long)>
c00157ee:	83 c4 10             	add    esp,0x10
c00157f1:	85 c0                	test   eax,eax
c00157f3:	0f 85 88 00 00 00    	jne    c0015881 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00157f9:	83 ec 0c             	sub    esp,0xc
c00157fc:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015800:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015804:	31 ed                	xor    ebp,ebp
c0015806:	0f af c2             	imul   eax,edx
c0015809:	50                   	push   eax
c001580a:	e8 bc a4 ff ff       	call   c000fccb <malloc>
c001580f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015811:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015815:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001581c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015820:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015824:	0f af c2             	imul   eax,edx
c0015827:	99                   	cdq    
c0015828:	52                   	push   edx
c0015829:	50                   	push   eax
c001582a:	56                   	push   esi
c001582b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001582e:	83 c4 20             	add    esp,0x20
c0015831:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015839:	0f b7 fd             	movzx  edi,bp
c001583c:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0015840:	73 7d                	jae    c00158bf <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0015842:	c1 e7 05             	shl    edi,0x5
c0015845:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0015849:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001584c:	75 6b                	jne    c00158b9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c001584e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0015851:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015855:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015858:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001585c:	52                   	push   edx
c001585d:	31 d2                	xor    edx,edx
c001585f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015862:	52                   	push   edx
c0015863:	50                   	push   eax
c0015864:	56                   	push   esi
c0015865:	e8 a4 29 ff ff       	call   c000820e <File::seek(unsigned long long)>
c001586a:	83 c4 10             	add    esp,0x10
c001586d:	85 c0                	test   eax,eax
c001586f:	74 17                	je     c0015888 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0015871:	83 ec 0c             	sub    esp,0xc
c0015874:	68 71 4d 02 c0       	push   0xc0024d71
c0015879:	e8 e6 16 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001587e:	83 c4 10             	add    esp,0x10
c0015881:	31 c0                	xor    eax,eax
c0015883:	e9 87 00 00 00       	jmp    c001590f <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0015888:	83 ec 0c             	sub    esp,0xc
c001588b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001588e:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015891:	50                   	push   eax
c0015892:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015896:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001589a:	56                   	push   esi
c001589b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001589f:	e8 cf fb ff ff       	call   c0015473 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00158a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00158a8:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00158ac:	83 c4 20             	add    esp,0x20
c00158af:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00158b3:	73 04                	jae    c00158b9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c00158b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00158b9:	45                   	inc    ebp
c00158ba:	e9 7a ff ff ff       	jmp    c0015839 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00158bf:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00158c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00158c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00158cb:	89 91 6e 05 00 00    	mov    DWORD PTR [ecx+0x56e],edx
c00158d1:	83 ec 0c             	sub    esp,0xc
c00158d4:	8b 91 72 05 00 00    	mov    edx,DWORD PTR [ecx+0x572]
c00158da:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158df:	05 00 10 00 00       	add    eax,0x1000
c00158e4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00158e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00158eb:	e8 eb a3 ff ff       	call   c000fcdb <free>
c00158f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00158f3:	e8 e3 a3 ff ff       	call   c000fcdb <free>
c00158f8:	58                   	pop    eax
c00158f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158fd:	e8 d9 a3 ff ff       	call   c000fcdb <free>
c0015902:	89 34 24             	mov    DWORD PTR [esp],esi
c0015905:	e8 a4 28 ff ff       	call   c00081ae <File::close()>
c001590a:	83 c4 10             	add    esp,0x10
c001590d:	b0 01                	mov    al,0x1
c001590f:	83 c4 3c             	add    esp,0x3c
c0015912:	5b                   	pop    ebx
c0015913:	5e                   	pop    esi
c0015914:	5f                   	pop    edi
c0015915:	5d                   	pop    ebp
c0015916:	c3                   	ret    

c0015917 <Thr::runtimeReferenceHelper()>:
c0015917:	83 ec 18             	sub    esp,0x18
c001591a:	68 79 4d 02 c0       	push   0xc0024d79
c001591f:	e8 40 16 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015924:	fa                   	cli    
c0015925:	83 c4 10             	add    esp,0x10
c0015928:	eb fe                	jmp    c0015928 <Thr::runtimeReferenceHelper()+0x11>

c001592a <Thr::getAddressOfKernelSymbol(char const*)>:
c001592a:	57                   	push   edi
c001592b:	56                   	push   esi
c001592c:	53                   	push   ebx
c001592d:	31 db                	xor    ebx,ebx
c001592f:	39 1d 00 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea00,ebx
c0015935:	7e 3c                	jle    c0015973 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0015937:	8b 34 9d 80 e9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd1680]
c001593e:	31 ff                	xor    edi,edi
c0015940:	39 3c 9d 80 e8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd1780],edi
c0015947:	7e 27                	jle    c0015970 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0015949:	50                   	push   eax
c001594a:	50                   	push   eax
c001594b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001594f:	8b 06                	mov    eax,DWORD PTR [esi]
c0015951:	03 04 9d 00 e9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd1700]
c0015958:	50                   	push   eax
c0015959:	e8 f2 ad fe ff       	call   c0000750 <strcmp>
c001595e:	83 c4 10             	add    esp,0x10
c0015961:	85 c0                	test   eax,eax
c0015963:	75 05                	jne    c001596a <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0015965:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015968:	eb 0b                	jmp    c0015975 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001596a:	83 c6 10             	add    esi,0x10
c001596d:	47                   	inc    edi
c001596e:	eb d0                	jmp    c0015940 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0015970:	43                   	inc    ebx
c0015971:	eb bc                	jmp    c001592f <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0015973:	31 c0                	xor    eax,eax
c0015975:	5b                   	pop    ebx
c0015976:	5e                   	pop    esi
c0015977:	5f                   	pop    edi
c0015978:	c3                   	ret    

c0015979 <Thr::loadKernelSymbolTable(char const*)>:
c0015979:	55                   	push   ebp
c001597a:	57                   	push   edi
c001597b:	56                   	push   esi
c001597c:	53                   	push   ebx
c001597d:	83 ec 68             	sub    esp,0x68
c0015980:	8b 35 58 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea58
c0015986:	68 14 01 00 00       	push   0x114
c001598b:	e8 3b a3 ff ff       	call   c000fccb <malloc>
c0015990:	83 c4 0c             	add    esp,0xc
c0015993:	89 c3                	mov    ebx,eax
c0015995:	56                   	push   esi
c0015996:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001599a:	50                   	push   eax
c001599b:	e8 92 27 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00159a0:	5e                   	pop    esi
c00159a1:	5f                   	pop    edi
c00159a2:	6a 01                	push   0x1
c00159a4:	53                   	push   ebx
c00159a5:	e8 a6 27 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00159aa:	83 c4 10             	add    esp,0x10
c00159ad:	85 c0                	test   eax,eax
c00159af:	74 0a                	je     c00159bb <Thr::loadKernelSymbolTable(char const*)+0x42>
c00159b1:	83 ec 0c             	sub    esp,0xc
c00159b4:	68 9b 4d 02 c0       	push   0xc0024d9b
c00159b9:	eb 34                	jmp    c00159ef <Thr::loadKernelSymbolTable(char const*)+0x76>
c00159bb:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00159c3:	83 ec 0c             	sub    esp,0xc
c00159c6:	6a 34                	push   0x34
c00159c8:	e8 fe a2 ff ff       	call   c000fccb <malloc>
c00159cd:	59                   	pop    ecx
c00159ce:	89 c7                	mov    edi,eax
c00159d0:	8d 74 24 34          	lea    esi,[esp+0x34]
c00159d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159d6:	56                   	push   esi
c00159d7:	57                   	push   edi
c00159d8:	6a 00                	push   0x0
c00159da:	6a 34                	push   0x34
c00159dc:	53                   	push   ebx
c00159dd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00159e0:	83 c4 20             	add    esp,0x20
c00159e3:	85 c0                	test   eax,eax
c00159e5:	74 17                	je     c00159fe <Thr::loadKernelSymbolTable(char const*)+0x85>
c00159e7:	83 ec 0c             	sub    esp,0xc
c00159ea:	68 b2 4d 02 c0       	push   0xc0024db2
c00159ef:	e8 1e a6 ff ff       	call   c0010012 <KePanic(char const*)>
c00159f4:	83 c4 10             	add    esp,0x10
c00159f7:	31 c0                	xor    eax,eax
c00159f9:	e9 31 02 00 00       	jmp    c0015c2f <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00159fe:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015a04:	75 e1                	jne    c00159e7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015a06:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015a09:	85 c0                	test   eax,eax
c0015a0b:	74 da                	je     c00159e7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015a0d:	52                   	push   edx
c0015a0e:	31 d2                	xor    edx,edx
c0015a10:	52                   	push   edx
c0015a11:	50                   	push   eax
c0015a12:	53                   	push   ebx
c0015a13:	e8 f6 27 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015a18:	83 c4 10             	add    esp,0x10
c0015a1b:	85 c0                	test   eax,eax
c0015a1d:	75 c8                	jne    c00159e7 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0015a1f:	83 ec 0c             	sub    esp,0xc
c0015a22:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015a26:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015a2a:	31 ed                	xor    ebp,ebp
c0015a2c:	0f af c2             	imul   eax,edx
c0015a2f:	50                   	push   eax
c0015a30:	e8 96 a2 ff ff       	call   c000fccb <malloc>
c0015a35:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015a3b:	89 34 24             	mov    DWORD PTR [esp],esi
c0015a3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a42:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015a46:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015a4a:	0f af c2             	imul   eax,edx
c0015a4d:	99                   	cdq    
c0015a4e:	52                   	push   edx
c0015a4f:	50                   	push   eax
c0015a50:	53                   	push   ebx
c0015a51:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015a54:	83 c4 20             	add    esp,0x20
c0015a57:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015a67:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015a6f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015a77:	0f b7 f5             	movzx  esi,bp
c0015a7a:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0015a7e:	0f 83 a7 00 00 00    	jae    c0015b2b <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0015a84:	6b f6 28             	imul   esi,esi,0x28
c0015a87:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015a8b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015a8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015a92:	50                   	push   eax
c0015a93:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a97:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015a9b:	8b 16                	mov    edx,DWORD PTR [esi]
c0015a9d:	6b c0 28             	imul   eax,eax,0x28
c0015aa0:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015aa4:	89 d0                	mov    eax,edx
c0015aa6:	31 d2                	xor    edx,edx
c0015aa8:	52                   	push   edx
c0015aa9:	50                   	push   eax
c0015aaa:	53                   	push   ebx
c0015aab:	e8 5e 27 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015ab0:	83 c4 0c             	add    esp,0xc
c0015ab3:	6a 20                	push   0x20
c0015ab5:	6a 00                	push   0x0
c0015ab7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015abb:	52                   	push   edx
c0015abc:	e8 2f aa fe ff       	call   c00004f0 <memset>
c0015ac1:	58                   	pop    eax
c0015ac2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ac4:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015ac8:	51                   	push   ecx
c0015ac9:	8d 54 24 40          	lea    edx,[esp+0x40]
c0015acd:	52                   	push   edx
c0015ace:	6a 00                	push   0x0
c0015ad0:	6a 1f                	push   0x1f
c0015ad2:	53                   	push   ebx
c0015ad3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ad6:	83 c4 18             	add    esp,0x18
c0015ad9:	68 c9 4d 02 c0       	push   0xc0024dc9
c0015ade:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015ae2:	52                   	push   edx
c0015ae3:	e8 68 ac fe ff       	call   c0000750 <strcmp>
c0015ae8:	83 c4 10             	add    esp,0x10
c0015aeb:	85 c0                	test   eax,eax
c0015aed:	75 0f                	jne    c0015afe <Thr::loadKernelSymbolTable(char const*)+0x185>
c0015aef:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015af2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015af6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015afa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015afe:	50                   	push   eax
c0015aff:	50                   	push   eax
c0015b00:	68 d1 4d 02 c0       	push   0xc0024dd1
c0015b05:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0015b09:	50                   	push   eax
c0015b0a:	e8 41 ac fe ff       	call   c0000750 <strcmp>
c0015b0f:	83 c4 10             	add    esp,0x10
c0015b12:	85 c0                	test   eax,eax
c0015b14:	75 0f                	jne    c0015b25 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0015b16:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015b19:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015b1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015b21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015b25:	45                   	inc    ebp
c0015b26:	e9 4c ff ff ff       	jmp    c0015a77 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0015b2b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015b30:	75 10                	jne    c0015b42 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0015b32:	83 ec 0c             	sub    esp,0xc
c0015b35:	68 d9 4d 02 c0       	push   0xc0024dd9
c0015b3a:	e8 d3 a4 ff ff       	call   c0010012 <KePanic(char const*)>
c0015b3f:	83 c4 10             	add    esp,0x10
c0015b42:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015b47:	75 10                	jne    c0015b59 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0015b49:	83 ec 0c             	sub    esp,0xc
c0015b4c:	68 d9 4d 02 c0       	push   0xc0024dd9
c0015b51:	e8 bc a4 ff ff       	call   c0010012 <KePanic(char const*)>
c0015b56:	83 c4 10             	add    esp,0x10
c0015b59:	31 d2                	xor    edx,edx
c0015b5b:	50                   	push   eax
c0015b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b60:	52                   	push   edx
c0015b61:	50                   	push   eax
c0015b62:	53                   	push   ebx
c0015b63:	e8 a6 26 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015b68:	5a                   	pop    edx
c0015b69:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015b6d:	e8 59 a1 ff ff       	call   c000fccb <malloc>
c0015b72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015b76:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015b7a:	31 c9                	xor    ecx,ecx
c0015b7c:	5e                   	pop    esi
c0015b7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b7f:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015b83:	55                   	push   ebp
c0015b84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b88:	51                   	push   ecx
c0015b89:	52                   	push   edx
c0015b8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015b8e:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0015b92:	53                   	push   ebx
c0015b93:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b96:	83 c4 14             	add    esp,0x14
c0015b99:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015b9d:	e8 29 a1 ff ff       	call   c000fccb <malloc>
c0015ba2:	89 c6                	mov    esi,eax
c0015ba4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ba6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015ba9:	56                   	push   esi
c0015baa:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0015bae:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015bb2:	51                   	push   ecx
c0015bb3:	52                   	push   edx
c0015bb4:	53                   	push   ebx
c0015bb5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015bb8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015bbc:	8b 15 00 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea00
c0015bc2:	83 c4 1c             	add    esp,0x1c
c0015bc5:	c1 e8 04             	shr    eax,0x4
c0015bc8:	89 04 95 80 e8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1780],eax
c0015bcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015bd3:	31 d2                	xor    edx,edx
c0015bd5:	52                   	push   edx
c0015bd6:	50                   	push   eax
c0015bd7:	53                   	push   ebx
c0015bd8:	e8 31 26 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015bdd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0015bdf:	31 d2                	xor    edx,edx
c0015be1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015be4:	56                   	push   esi
c0015be5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015be9:	52                   	push   edx
c0015bea:	50                   	push   eax
c0015beb:	53                   	push   ebx
c0015bec:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015bef:	83 c4 14             	add    esp,0x14
c0015bf2:	53                   	push   ebx
c0015bf3:	e8 b6 25 ff ff       	call   c00081ae <File::close()>
c0015bf8:	5d                   	pop    ebp
c0015bf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015bfd:	e8 d9 a0 ff ff       	call   c000fcdb <free>
c0015c02:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015c05:	e8 d1 a0 ff ff       	call   c000fcdb <free>
c0015c0a:	a1 00 ea 02 c0       	mov    eax,ds:0xc002ea00
c0015c0f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015c13:	8d 50 01             	lea    edx,[eax+0x1]
c0015c16:	89 0c 85 80 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1680],ecx
c0015c1d:	89 34 85 00 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1700],esi
c0015c24:	89 15 00 ea 02 c0    	mov    DWORD PTR ds:0xc002ea00,edx
c0015c2a:	83 c4 10             	add    esp,0x10
c0015c2d:	b0 01                	mov    al,0x1
c0015c2f:	83 c4 5c             	add    esp,0x5c
c0015c32:	5b                   	pop    ebx
c0015c33:	5e                   	pop    esi
c0015c34:	5f                   	pop    edi
c0015c35:	5d                   	pop    ebp
c0015c36:	c3                   	ret    

c0015c37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0015c37:	55                   	push   ebp
c0015c38:	57                   	push   edi
c0015c39:	56                   	push   esi
c0015c3a:	53                   	push   ebx
c0015c3b:	81 ec 68 03 00 00    	sub    esp,0x368
c0015c41:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0015c48:	8b 1d 58 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea58
c0015c4e:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015c52:	68 14 01 00 00       	push   0x114
c0015c57:	e8 6f a0 ff ff       	call   c000fccb <malloc>
c0015c5c:	83 c4 0c             	add    esp,0xc
c0015c5f:	89 c5                	mov    ebp,eax
c0015c61:	53                   	push   ebx
c0015c62:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0015c69:	50                   	push   eax
c0015c6a:	e8 c3 24 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0015c6f:	5e                   	pop    esi
c0015c70:	5f                   	pop    edi
c0015c71:	6a 01                	push   0x1
c0015c73:	55                   	push   ebp
c0015c74:	e8 d7 24 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0015c79:	83 c4 10             	add    esp,0x10
c0015c7c:	85 c0                	test   eax,eax
c0015c7e:	0f 85 aa 06 00 00    	jne    c001632e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015c84:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0015c8c:	83 ec 0c             	sub    esp,0xc
c0015c8f:	6a 34                	push   0x34
c0015c91:	e8 35 a0 ff ff       	call   c000fccb <malloc>
c0015c96:	5b                   	pop    ebx
c0015c97:	89 c7                	mov    edi,eax
c0015c99:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015c9d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015ca0:	53                   	push   ebx
c0015ca1:	57                   	push   edi
c0015ca2:	6a 00                	push   0x0
c0015ca4:	6a 34                	push   0x34
c0015ca6:	55                   	push   ebp
c0015ca7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015caa:	83 c4 20             	add    esp,0x20
c0015cad:	85 c0                	test   eax,eax
c0015caf:	0f 85 79 06 00 00    	jne    c001632e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015cb5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015cbb:	0f 85 6d 06 00 00    	jne    c001632e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015cc1:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015cc4:	85 c0                	test   eax,eax
c0015cc6:	0f 84 62 06 00 00    	je     c001632e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015ccc:	31 d2                	xor    edx,edx
c0015cce:	51                   	push   ecx
c0015ccf:	52                   	push   edx
c0015cd0:	50                   	push   eax
c0015cd1:	55                   	push   ebp
c0015cd2:	e8 37 25 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015cd7:	83 c4 10             	add    esp,0x10
c0015cda:	85 c0                	test   eax,eax
c0015cdc:	0f 85 4c 06 00 00    	jne    c001632e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015ce2:	83 ec 0c             	sub    esp,0xc
c0015ce5:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015ce8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015cec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015cf0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015cf4:	0f af c2             	imul   eax,edx
c0015cf7:	50                   	push   eax
c0015cf8:	e8 ce 9f ff ff       	call   c000fccb <malloc>
c0015cfd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015d00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015d0b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015d0f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015d13:	0f af c2             	imul   eax,edx
c0015d16:	99                   	cdq    
c0015d17:	52                   	push   edx
c0015d18:	50                   	push   eax
c0015d19:	55                   	push   ebp
c0015d1a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015d1d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015d20:	83 c4 20             	add    esp,0x20
c0015d23:	85 c0                	test   eax,eax
c0015d25:	0f 84 03 06 00 00    	je     c001632e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015d2b:	52                   	push   edx
c0015d2c:	31 d2                	xor    edx,edx
c0015d2e:	52                   	push   edx
c0015d2f:	50                   	push   eax
c0015d30:	55                   	push   ebp
c0015d31:	e8 d8 24 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015d36:	83 c4 10             	add    esp,0x10
c0015d39:	85 c0                	test   eax,eax
c0015d3b:	0f 85 ed 05 00 00    	jne    c001632e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015d41:	83 ec 0c             	sub    esp,0xc
c0015d44:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015d48:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015d4c:	31 f6                	xor    esi,esi
c0015d4e:	0f af c2             	imul   eax,edx
c0015d51:	50                   	push   eax
c0015d52:	e8 74 9f ff ff       	call   c000fccb <malloc>
c0015d57:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015d5a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015d5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d61:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015d65:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015d69:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015d6d:	0f af c2             	imul   eax,edx
c0015d70:	99                   	cdq    
c0015d71:	52                   	push   edx
c0015d72:	50                   	push   eax
c0015d73:	55                   	push   ebp
c0015d74:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015d77:	83 c4 20             	add    esp,0x20
c0015d7a:	0f b7 de             	movzx  ebx,si
c0015d7d:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0015d81:	0f 83 87 00 00 00    	jae    c0015e0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0015d87:	c1 e3 05             	shl    ebx,0x5
c0015d8a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0015d8e:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0015d91:	75 75                	jne    c0015e08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0015d93:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015d96:	31 d2                	xor    edx,edx
c0015d98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d9c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015d9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015da3:	50                   	push   eax
c0015da4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015da7:	52                   	push   edx
c0015da8:	50                   	push   eax
c0015da9:	55                   	push   ebp
c0015daa:	e8 5f 24 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015daf:	83 c4 10             	add    esp,0x10
c0015db2:	85 c0                	test   eax,eax
c0015db4:	0f 85 74 05 00 00    	jne    c001632e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015dba:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015dc1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015dc4:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0015dc8:	31 d2                	xor    edx,edx
c0015dca:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0015dce:	83 ec 0c             	sub    esp,0xc
c0015dd1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015dd5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015ddc:	50                   	push   eax
c0015ddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015de1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015de5:	52                   	push   edx
c0015de6:	50                   	push   eax
c0015de7:	55                   	push   ebp
c0015de8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015deb:	83 c4 1c             	add    esp,0x1c
c0015dee:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015df1:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015df4:	50                   	push   eax
c0015df5:	6a 00                	push   0x0
c0015df7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dfb:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0015dff:	50                   	push   eax
c0015e00:	e8 eb a6 fe ff       	call   c00004f0 <memset>
c0015e05:	83 c4 10             	add    esp,0x10
c0015e08:	46                   	inc    esi
c0015e09:	e9 6c ff ff ff       	jmp    c0015d7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015e0e:	53                   	push   ebx
c0015e0f:	31 db                	xor    ebx,ebx
c0015e11:	68 00 01 00 00       	push   0x100
c0015e16:	6a 00                	push   0x0
c0015e18:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015e1c:	50                   	push   eax
c0015e1d:	e8 ce a6 fe ff       	call   c00004f0 <memset>
c0015e22:	83 c4 0c             	add    esp,0xc
c0015e25:	68 00 01 00 00       	push   0x100
c0015e2a:	6a 00                	push   0x0
c0015e2c:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015e33:	50                   	push   eax
c0015e34:	e8 b7 a6 fe ff       	call   c00004f0 <memset>
c0015e39:	83 c4 10             	add    esp,0x10
c0015e3c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015e44:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015e4c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015e54:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015e5c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015e64:	0f b7 f3             	movzx  esi,bx
c0015e67:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0015e6b:	0f 83 2d 01 00 00    	jae    c0015f9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0015e71:	6b f6 28             	imul   esi,esi,0x28
c0015e74:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015e78:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015e7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015e7f:	52                   	push   edx
c0015e80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e84:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0015e88:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e8a:	6b d2 28             	imul   edx,edx,0x28
c0015e8d:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015e91:	31 d2                	xor    edx,edx
c0015e93:	52                   	push   edx
c0015e94:	50                   	push   eax
c0015e95:	55                   	push   ebp
c0015e96:	e8 73 23 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015e9b:	83 c4 0c             	add    esp,0xc
c0015e9e:	6a 20                	push   0x20
c0015ea0:	6a 00                	push   0x0
c0015ea2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015ea9:	51                   	push   ecx
c0015eaa:	e8 41 a6 fe ff       	call   c00004f0 <memset>
c0015eaf:	59                   	pop    ecx
c0015eb0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015eb3:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015eb7:	52                   	push   edx
c0015eb8:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015ebf:	51                   	push   ecx
c0015ec0:	6a 00                	push   0x0
c0015ec2:	6a 1f                	push   0x1f
c0015ec4:	55                   	push   ebp
c0015ec5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ec8:	83 c4 1c             	add    esp,0x1c
c0015ecb:	6a 09                	push   0x9
c0015ecd:	68 f3 4d 02 c0       	push   0xc0024df3
c0015ed2:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015ed9:	51                   	push   ecx
c0015eda:	e8 a1 a4 fe ff       	call   c0000380 <memcmp>
c0015edf:	83 c4 10             	add    esp,0x10
c0015ee2:	85 c0                	test   eax,eax
c0015ee4:	75 21                	jne    c0015f07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0015ee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015eea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015eee:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015ef2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ef6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015ef9:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015f00:	89 d0                	mov    eax,edx
c0015f02:	40                   	inc    eax
c0015f03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f07:	50                   	push   eax
c0015f08:	6a 09                	push   0x9
c0015f0a:	68 fd 4d 02 c0       	push   0xc0024dfd
c0015f0f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015f16:	50                   	push   eax
c0015f17:	e8 64 a4 fe ff       	call   c0000380 <memcmp>
c0015f1c:	83 c4 10             	add    esp,0x10
c0015f1f:	85 c0                	test   eax,eax
c0015f21:	75 21                	jne    c0015f44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0015f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f27:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015f2b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015f2f:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0015f33:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015f36:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015f3d:	89 d0                	mov    eax,edx
c0015f3f:	40                   	inc    eax
c0015f40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f44:	50                   	push   eax
c0015f45:	50                   	push   eax
c0015f46:	68 c9 4d 02 c0       	push   0xc0024dc9
c0015f4b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015f52:	50                   	push   eax
c0015f53:	e8 f8 a7 fe ff       	call   c0000750 <strcmp>
c0015f58:	83 c4 10             	add    esp,0x10
c0015f5b:	85 c0                	test   eax,eax
c0015f5d:	75 0f                	jne    c0015f6e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0015f5f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015f62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015f66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015f6e:	50                   	push   eax
c0015f6f:	50                   	push   eax
c0015f70:	68 d1 4d 02 c0       	push   0xc0024dd1
c0015f75:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015f7c:	50                   	push   eax
c0015f7d:	e8 ce a7 fe ff       	call   c0000750 <strcmp>
c0015f82:	83 c4 10             	add    esp,0x10
c0015f85:	85 c0                	test   eax,eax
c0015f87:	75 0f                	jne    c0015f98 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0015f89:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015f8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015f90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f94:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015f98:	43                   	inc    ebx
c0015f99:	e9 c6 fe ff ff       	jmp    c0015e64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0015f9e:	31 d2                	xor    edx,edx
c0015fa0:	50                   	push   eax
c0015fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fa5:	52                   	push   edx
c0015fa6:	50                   	push   eax
c0015fa7:	55                   	push   ebp
c0015fa8:	e8 61 22 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015fad:	58                   	pop    eax
c0015fae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fb2:	e8 14 9d ff ff       	call   c000fccb <malloc>
c0015fb7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015fba:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015fbe:	31 d2                	xor    edx,edx
c0015fc0:	58                   	pop    eax
c0015fc1:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015fc5:	53                   	push   ebx
c0015fc6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015fca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015fce:	52                   	push   edx
c0015fcf:	50                   	push   eax
c0015fd0:	55                   	push   ebp
c0015fd1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015fd4:	83 c4 14             	add    esp,0x14
c0015fd7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015fdb:	e8 eb 9c ff ff       	call   c000fccb <malloc>
c0015fe0:	31 d2                	xor    edx,edx
c0015fe2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015fe6:	83 c4 0c             	add    esp,0xc
c0015fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015fed:	52                   	push   edx
c0015fee:	50                   	push   eax
c0015fef:	55                   	push   ebp
c0015ff0:	e8 19 22 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015ff5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015ff8:	31 d2                	xor    edx,edx
c0015ffa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ffd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016001:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016005:	52                   	push   edx
c0016006:	50                   	push   eax
c0016007:	55                   	push   ebp
c0016008:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001600b:	83 c4 20             	add    esp,0x20
c001600e:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0016013:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001601b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001601f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016023:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0016027:	0f 84 05 03 00 00    	je     c0016332 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c001602d:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0016034:	31 d2                	xor    edx,edx
c0016036:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001603a:	c1 e8 03             	shr    eax,0x3
c001603d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016041:	51                   	push   ecx
c0016042:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016046:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001604a:	52                   	push   edx
c001604b:	50                   	push   eax
c001604c:	55                   	push   ebp
c001604d:	e8 bc 21 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0016052:	5b                   	pop    ebx
c0016053:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016057:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001605e:	e8 68 9c ff ff       	call   c000fccb <malloc>
c0016063:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016066:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001606a:	31 d2                	xor    edx,edx
c001606c:	5e                   	pop    esi
c001606d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0016071:	50                   	push   eax
c0016072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016076:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001607a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0016081:	52                   	push   edx
c0016082:	50                   	push   eax
c0016083:	55                   	push   ebp
c0016084:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016087:	83 c4 20             	add    esp,0x20
c001608a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016092:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016096:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c001609a:	0f 8d 76 02 00 00    	jge    c0016316 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c00160a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00160a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160a8:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c00160ad:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00160b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00160b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160b8:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00160bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00160c0:	c1 e8 08             	shr    eax,0x8
c00160c3:	89 c6                	mov    esi,eax
c00160c5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00160c9:	c1 e6 04             	shl    esi,0x4
c00160cc:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00160d0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00160d3:	85 db                	test   ebx,ebx
c00160d5:	0f 85 b3 00 00 00    	jne    c001618e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00160db:	83 ec 0c             	sub    esp,0xc
c00160de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160e2:	03 06                	add    eax,DWORD PTR [esi]
c00160e4:	50                   	push   eax
c00160e5:	e8 40 f8 ff ff       	call   c001592a <Thr::getAddressOfKernelSymbol(char const*)>
c00160ea:	83 c4 10             	add    esp,0x10
c00160ed:	89 c3                	mov    ebx,eax
c00160ef:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c00160f4:	85 c0                	test   eax,eax
c00160f6:	0f 85 92 00 00 00    	jne    c001618e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00160fc:	83 ec 0c             	sub    esp,0xc
c00160ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016103:	03 06                	add    eax,DWORD PTR [esi]
c0016105:	50                   	push   eax
c0016106:	e8 99 a9 ff ff       	call   c0010aa4 <KeResolveCompatibilitySymbol(char*)>
c001610b:	83 c4 10             	add    esp,0x10
c001610e:	89 c3                	mov    ebx,eax
c0016110:	85 c0                	test   eax,eax
c0016112:	75 7a                	jne    c001618e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0016114:	51                   	push   ecx
c0016115:	51                   	push   ecx
c0016116:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001611a:	03 06                	add    eax,DWORD PTR [esi]
c001611c:	50                   	push   eax
c001611d:	68 07 4e 02 c0       	push   0xc0024e07
c0016122:	e8 3d 0e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016127:	58                   	pop    eax
c0016128:	5a                   	pop    edx
c0016129:	68 21 4e 02 c0       	push   0xc0024e21
c001612e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016135:	50                   	push   eax
c0016136:	e8 05 a5 fe ff       	call   c0000640 <strcpy>
c001613b:	59                   	pop    ecx
c001613c:	58                   	pop    eax
c001613d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016141:	03 06                	add    eax,DWORD PTR [esi]
c0016143:	50                   	push   eax
c0016144:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001614b:	50                   	push   eax
c001614c:	e8 ef a6 fe ff       	call   c0000840 <strcat>
c0016151:	58                   	pop    eax
c0016152:	5a                   	pop    edx
c0016153:	68 bb 4e 02 c0       	push   0xc0024ebb
c0016158:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001615f:	50                   	push   eax
c0016160:	e8 db a6 fe ff       	call   c0000840 <strcat>
c0016165:	83 c4 10             	add    esp,0x10
c0016168:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001616d:	0f 84 5d 01 00 00    	je     c00162d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0016173:	83 ec 0c             	sub    esp,0xc
c0016176:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001617d:	50                   	push   eax
c001617e:	e8 8f 9e ff ff       	call   c0010012 <KePanic(char const*)>
c0016183:	83 c4 10             	add    esp,0x10
c0016186:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001618a:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c001618e:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0016193:	83 f8 01             	cmp    eax,0x1
c0016196:	0f 85 8f 00 00 00    	jne    c001622b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c001619c:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00161a3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00161a7:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00161ab:	01 ce                	add    esi,ecx
c00161ad:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00161b5:	0f 94 c0             	sete   al
c00161b8:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00161c0:	0f 94 c2             	sete   dl
c00161c3:	09 c2                	or     edx,eax
c00161c5:	8b 06                	mov    eax,DWORD PTR [esi]
c00161c7:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00161cc:	0f b6 d2             	movzx  edx,dl
c00161cf:	74 41                	je     c0016212 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c00161d1:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c00161d4:	85 d2                	test   edx,edx
c00161d6:	75 15                	jne    c00161ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00161d8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00161dc:	66 83 f8 0c          	cmp    ax,0xc
c00161e0:	76 05                	jbe    c00161e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c00161e2:	b8 0c 00 00 00       	mov    eax,0xc
c00161e7:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00161eb:	76 37                	jbe    c0016224 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00161ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00161f1:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00161f6:	0f 84 d4 00 00 00    	je     c00162d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00161fc:	83 ec 0c             	sub    esp,0xc
c00161ff:	68 38 4e 02 c0       	push   0xc0024e38
c0016204:	e8 09 9e ff ff       	call   c0010012 <KePanic(char const*)>
c0016209:	83 c4 10             	add    esp,0x10
c001620c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016210:	eb 12                	jmp    c0016224 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0016212:	01 c1                	add    ecx,eax
c0016214:	85 d2                	test   edx,edx
c0016216:	75 0c                	jne    c0016224 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0016218:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001621c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016220:	77 02                	ja     c0016224 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0016222:	01 d9                	add    ecx,ebx
c0016224:	89 0e                	mov    DWORD PTR [esi],ecx
c0016226:	e9 e2 00 00 00       	jmp    c001630d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001622b:	83 f8 02             	cmp    eax,0x2
c001622e:	75 77                	jne    c00162a7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0016230:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0016237:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c001623b:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c001623f:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0016247:	74 21                	je     c001626a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0016249:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0016251:	74 17                	je     c001626a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0016253:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0016257:	b8 0a 00 00 00       	mov    eax,0xa
c001625c:	83 fa 0e             	cmp    edx,0xe
c001625f:	77 03                	ja     c0016264 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0016261:	8d 42 fc             	lea    eax,[edx-0x4]
c0016264:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016268:	76 17                	jbe    c0016281 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001626a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001626f:	74 5f                	je     c00162d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0016271:	83 ec 0c             	sub    esp,0xc
c0016274:	68 54 4e 02 c0       	push   0xc0024e54
c0016279:	e8 94 9d ff ff       	call   c0010012 <KePanic(char const*)>
c001627e:	83 c4 10             	add    esp,0x10
c0016281:	8b 06                	mov    eax,DWORD PTR [esi]
c0016283:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0016288:	74 13                	je     c001629d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c001628a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001628e:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0016295:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0016299:	01 d0                	add    eax,edx
c001629b:	eb 04                	jmp    c00162a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001629d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00162a1:	01 c3                	add    ebx,eax
c00162a3:	89 1e                	mov    DWORD PTR [esi],ebx
c00162a5:	eb 66                	jmp    c001630d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00162a7:	52                   	push   edx
c00162a8:	52                   	push   edx
c00162a9:	50                   	push   eax
c00162aa:	68 70 4e 02 c0       	push   0xc0024e70
c00162af:	e8 b0 0c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00162b4:	83 c4 10             	add    esp,0x10
c00162b7:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00162bc:	74 12                	je     c00162d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00162be:	83 ec 0c             	sub    esp,0xc
c00162c1:	68 7b 4e 02 c0       	push   0xc0024e7b
c00162c6:	e8 47 9d ff ff       	call   c0010012 <KePanic(char const*)>
c00162cb:	83 c4 10             	add    esp,0x10
c00162ce:	eb 3d                	jmp    c001630d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00162d0:	83 ec 0c             	sub    esp,0xc
c00162d3:	55                   	push   ebp
c00162d4:	e8 d5 1e ff ff       	call   c00081ae <File::close()>
c00162d9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00162dc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00162df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162e2:	59                   	pop    ecx
c00162e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162e7:	e8 ef 99 ff ff       	call   c000fcdb <free>
c00162ec:	5b                   	pop    ebx
c00162ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00162f1:	e8 e5 99 ff ff       	call   c000fcdb <free>
c00162f6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00162f9:	e8 dd 99 ff ff       	call   c000fcdb <free>
c00162fe:	5e                   	pop    esi
c00162ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016303:	e8 d3 99 ff ff       	call   c000fcdb <free>
c0016308:	83 c4 10             	add    esp,0x10
c001630b:	eb 21                	jmp    c001632e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001630d:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0016311:	e9 7c fd ff ff       	jmp    c0016092 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0016316:	83 ec 0c             	sub    esp,0xc
c0016319:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001631d:	e8 b9 99 ff ff       	call   c000fcdb <free>
c0016322:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0016326:	83 c4 10             	add    esp,0x10
c0016329:	e9 f1 fc ff ff       	jmp    c001601f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c001632e:	31 c0                	xor    eax,eax
c0016330:	eb 33                	jmp    c0016365 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0016332:	83 ec 0c             	sub    esp,0xc
c0016335:	55                   	push   ebp
c0016336:	e8 73 1e ff ff       	call   c00081ae <File::close()>
c001633b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001633e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016341:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016344:	58                   	pop    eax
c0016345:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016349:	e8 8d 99 ff ff       	call   c000fcdb <free>
c001634e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016351:	e8 85 99 ff ff       	call   c000fcdb <free>
c0016356:	5a                   	pop    edx
c0016357:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001635b:	e8 7b 99 ff ff       	call   c000fcdb <free>
c0016360:	83 c4 10             	add    esp,0x10
c0016363:	b0 01                	mov    al,0x1
c0016365:	81 c4 5c 03 00 00    	add    esp,0x35c
c001636b:	5b                   	pop    ebx
c001636c:	5e                   	pop    esi
c001636d:	5f                   	pop    edi
c001636e:	5d                   	pop    ebp
c001636f:	c3                   	ret    

c0016370 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0016370:	56                   	push   esi
c0016371:	31 d2                	xor    edx,edx
c0016373:	53                   	push   ebx
c0016374:	8b 1d 60 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e260
c001637a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001637e:	39 d3                	cmp    ebx,edx
c0016380:	7e 1b                	jle    c001639d <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0016382:	8b 04 95 80 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1b80]
c0016389:	39 c8                	cmp    eax,ecx
c001638b:	77 0d                	ja     c001639a <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001638d:	8b 34 95 80 e2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd1d80]
c0016394:	01 c6                	add    esi,eax
c0016396:	39 ce                	cmp    esi,ecx
c0016398:	77 05                	ja     c001639f <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001639a:	42                   	inc    edx
c001639b:	eb e1                	jmp    c001637e <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001639d:	31 c0                	xor    eax,eax
c001639f:	5b                   	pop    ebx
c00163a0:	5e                   	pop    esi
c00163a1:	c3                   	ret    

c00163a2 <Thr::getDriverNameFromAddress(unsigned long)>:
c00163a2:	53                   	push   ebx
c00163a3:	31 c0                	xor    eax,eax
c00163a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00163a9:	8b 1d 60 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e260
c00163af:	39 c3                	cmp    ebx,eax
c00163b1:	7e 22                	jle    c00163d5 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00163b3:	8b 14 85 80 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1b80]
c00163ba:	39 ca                	cmp    edx,ecx
c00163bc:	77 14                	ja     c00163d2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00163be:	03 14 85 80 e2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd1d80]
c00163c5:	39 ca                	cmp    edx,ecx
c00163c7:	76 09                	jbe    c00163d2 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00163c9:	8b 04 85 80 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1980]
c00163d0:	eb 05                	jmp    c00163d7 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00163d2:	40                   	inc    eax
c00163d3:	eb da                	jmp    c00163af <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00163d5:	31 c0                	xor    eax,eax
c00163d7:	5b                   	pop    ebx
c00163d8:	c3                   	ret    

c00163d9 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00163d9:	53                   	push   ebx
c00163da:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00163de:	53                   	push   ebx
c00163df:	e8 8c ff ff ff       	call   c0016370 <Thr::getDriverBaseFromAddress(unsigned long)>
c00163e4:	5a                   	pop    edx
c00163e5:	31 d2                	xor    edx,edx
c00163e7:	85 c0                	test   eax,eax
c00163e9:	74 04                	je     c00163ef <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00163eb:	89 da                	mov    edx,ebx
c00163ed:	29 c2                	sub    edx,eax
c00163ef:	89 d0                	mov    eax,edx
c00163f1:	5b                   	pop    ebx
c00163f2:	c3                   	ret    

c00163f3 <Thr::loadDLL(char const*, bool)>:
c00163f3:	55                   	push   ebp
c00163f4:	57                   	push   edi
c00163f5:	56                   	push   esi
c00163f6:	53                   	push   ebx
c00163f7:	81 ec 34 01 00 00    	sub    esp,0x134
c00163fd:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016404:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001640b:	56                   	push   esi
c001640c:	68 93 4e 02 c0       	push   0xc0024e93
c0016411:	e8 4e 0b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016416:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001641d:	e8 a9 98 ff ff       	call   c000fccb <malloc>
c0016422:	83 c4 0c             	add    esp,0xc
c0016425:	89 c3                	mov    ebx,eax
c0016427:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001642d:	56                   	push   esi
c001642e:	50                   	push   eax
c001642f:	e8 fe 1c ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0016434:	83 c4 10             	add    esp,0x10
c0016437:	85 db                	test   ebx,ebx
c0016439:	75 3c                	jne    c0016477 <Thr::loadDLL(char const*, bool)+0x84>
c001643b:	89 f8                	mov    eax,edi
c001643d:	84 c0                	test   al,al
c001643f:	0f 84 f3 01 00 00    	je     c0016638 <Thr::loadDLL(char const*, bool)+0x245>
c0016445:	55                   	push   ebp
c0016446:	55                   	push   ebp
c0016447:	68 a4 4e 02 c0       	push   0xc0024ea4
c001644c:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0016450:	55                   	push   ebp
c0016451:	e8 ea a1 fe ff       	call   c0000640 <strcpy>
c0016456:	58                   	pop    eax
c0016457:	5a                   	pop    edx
c0016458:	56                   	push   esi
c0016459:	55                   	push   ebp
c001645a:	e8 e1 a3 fe ff       	call   c0000840 <strcat>
c001645f:	59                   	pop    ecx
c0016460:	58                   	pop    eax
c0016461:	68 bb 4e 02 c0       	push   0xc0024ebb
c0016466:	55                   	push   ebp
c0016467:	e8 d4 a3 fe ff       	call   c0000840 <strcat>
c001646c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001646f:	e8 9e 9b ff ff       	call   c0010012 <KePanic(char const*)>
c0016474:	83 c4 10             	add    esp,0x10
c0016477:	51                   	push   ecx
c0016478:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001647c:	50                   	push   eax
c001647d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016481:	50                   	push   eax
c0016482:	53                   	push   ebx
c0016483:	e8 ca 1f ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0016488:	83 c4 10             	add    esp,0x10
c001648b:	89 c5                	mov    ebp,eax
c001648d:	85 db                	test   ebx,ebx
c001648f:	74 0c                	je     c001649d <Thr::loadDLL(char const*, bool)+0xaa>
c0016491:	83 ec 0c             	sub    esp,0xc
c0016494:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016496:	53                   	push   ebx
c0016497:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001649a:	83 c4 10             	add    esp,0x10
c001649d:	83 ec 0c             	sub    esp,0xc
c00164a0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c00164a5:	50                   	push   eax
c00164a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00164ae:	55                   	push   ebp
c00164af:	68 bd 4e 02 c0       	push   0xc0024ebd
c00164b4:	e8 ab 0a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00164b9:	83 c4 20             	add    esp,0x20
c00164bc:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00164c1:	75 0a                	jne    c00164cd <Thr::loadDLL(char const*, bool)+0xda>
c00164c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00164c7:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00164cb:	75 3c                	jne    c0016509 <Thr::loadDLL(char const*, bool)+0x116>
c00164cd:	89 f8                	mov    eax,edi
c00164cf:	84 c0                	test   al,al
c00164d1:	0f 84 49 01 00 00    	je     c0016620 <Thr::loadDLL(char const*, bool)+0x22d>
c00164d7:	51                   	push   ecx
c00164d8:	51                   	push   ecx
c00164d9:	68 de 4e 02 c0       	push   0xc0024ede
c00164de:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00164e2:	53                   	push   ebx
c00164e3:	e8 58 a1 fe ff       	call   c0000640 <strcpy>
c00164e8:	5d                   	pop    ebp
c00164e9:	58                   	pop    eax
c00164ea:	56                   	push   esi
c00164eb:	53                   	push   ebx
c00164ec:	e8 4f a3 fe ff       	call   c0000840 <strcat>
c00164f1:	58                   	pop    eax
c00164f2:	5a                   	pop    edx
c00164f3:	68 bb 4e 02 c0       	push   0xc0024ebb
c00164f8:	53                   	push   ebx
c00164f9:	e8 42 a3 fe ff       	call   c0000840 <strcat>
c00164fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016501:	e8 0c 9b ff ff       	call   c0010012 <KePanic(char const*)>
c0016506:	83 c4 10             	add    esp,0x10
c0016509:	52                   	push   edx
c001650a:	6a 03                	push   0x3
c001650c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016510:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016514:	05 ff 0f 00 00       	add    eax,0xfff
c0016519:	83 d2 00             	adc    edx,0x0
c001651c:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016520:	50                   	push   eax
c0016521:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c0016527:	e8 b8 d7 ff ff       	call   c0013ce4 <VAS::allocatePages(int, int)>
c001652c:	59                   	pop    ecx
c001652d:	89 c3                	mov    ebx,eax
c001652f:	5d                   	pop    ebp
c0016530:	50                   	push   eax
c0016531:	68 26 41 02 c0       	push   0xc0024126
c0016536:	e8 29 0a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001653b:	89 34 24             	mov    DWORD PTR [esp],esi
c001653e:	e8 2d a0 fe ff       	call   c0000570 <strlen>
c0016543:	8b 2d 60 e2 02 c0    	mov    ebp,DWORD PTR ds:0xc002e260
c0016549:	40                   	inc    eax
c001654a:	89 04 24             	mov    DWORD PTR [esp],eax
c001654d:	e8 79 97 ff ff       	call   c000fccb <malloc>
c0016552:	89 04 ad 80 e6 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd1980],eax
c0016559:	58                   	pop    eax
c001655a:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c001655f:	5a                   	pop    edx
c0016560:	56                   	push   esi
c0016561:	ff 34 85 80 e6 02 c0 	push   DWORD PTR [eax*4-0x3ffd1980]
c0016568:	e8 d3 a0 fe ff       	call   c0000640 <strcpy>
c001656d:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c0016572:	8d 50 01             	lea    edx,[eax+0x1]
c0016575:	89 1c 85 80 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b80],ebx
c001657c:	89 15 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,edx
c0016582:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016586:	83 c4 0c             	add    esp,0xc
c0016589:	89 14 85 80 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d80],edx
c0016590:	6a 01                	push   0x1
c0016592:	53                   	push   ebx
c0016593:	56                   	push   esi
c0016594:	e8 9e f6 ff ff       	call   c0015c37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0016599:	83 c4 10             	add    esp,0x10
c001659c:	0f b6 c0             	movzx  eax,al
c001659f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165a3:	85 c0                	test   eax,eax
c00165a5:	0f 85 89 00 00 00    	jne    c0016634 <Thr::loadDLL(char const*, bool)+0x241>
c00165ab:	89 f8                	mov    eax,edi
c00165ad:	84 c0                	test   al,al
c00165af:	74 73                	je     c0016624 <Thr::loadDLL(char const*, bool)+0x231>
c00165b1:	83 ec 0c             	sub    esp,0xc
c00165b4:	68 f7 4e 02 c0       	push   0xc0024ef7
c00165b9:	e8 54 9a ff ff       	call   c0010012 <KePanic(char const*)>
c00165be:	83 c4 10             	add    esp,0x10
c00165c1:	eb 61                	jmp    c0016624 <Thr::loadDLL(char const*, bool)+0x231>
c00165c3:	50                   	push   eax
c00165c4:	50                   	push   eax
c00165c5:	89 e8                	mov    eax,ebp
c00165c7:	c1 e0 0c             	shl    eax,0xc
c00165ca:	01 d8                	add    eax,ebx
c00165cc:	50                   	push   eax
c00165cd:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c00165d3:	e8 0e d2 ff ff       	call   c00137e6 <VAS::getPageTableEntry(unsigned long)>
c00165d8:	83 c4 10             	add    esp,0x10
c00165db:	8b 00                	mov    eax,DWORD PTR [eax]
c00165dd:	a8 60                	test   al,0x60
c00165df:	75 11                	jne    c00165f2 <Thr::loadDLL(char const*, bool)+0x1ff>
c00165e1:	83 ec 0c             	sub    esp,0xc
c00165e4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00165e9:	50                   	push   eax
c00165ea:	e8 ae 9b ff ff       	call   c001019d <Phys::freePage(unsigned long)>
c00165ef:	83 c4 10             	add    esp,0x10
c00165f2:	45                   	inc    ebp
c00165f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00165f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00165fb:	05 ff 0f 00 00       	add    eax,0xfff
c0016600:	bf 00 00 00 00       	mov    edi,0x0
c0016605:	83 d2 00             	adc    edx,0x0
c0016608:	0f ac d0 0c          	shrd   eax,edx,0xc
c001660c:	c1 ea 0c             	shr    edx,0xc
c001660f:	39 c5                	cmp    ebp,eax
c0016611:	89 d1                	mov    ecx,edx
c0016613:	89 f8                	mov    eax,edi
c0016615:	19 c8                	sbb    eax,ecx
c0016617:	72 aa                	jb     c00165c3 <Thr::loadDLL(char const*, bool)+0x1d0>
c0016619:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001661e:	75 18                	jne    c0016638 <Thr::loadDLL(char const*, bool)+0x245>
c0016620:	31 db                	xor    ebx,ebx
c0016622:	eb 14                	jmp    c0016638 <Thr::loadDLL(char const*, bool)+0x245>
c0016624:	83 ec 0c             	sub    esp,0xc
c0016627:	68 16 4f 02 c0       	push   0xc0024f16
c001662c:	e8 e1 99 ff ff       	call   c0010012 <KePanic(char const*)>
c0016631:	83 c4 10             	add    esp,0x10
c0016634:	31 ed                	xor    ebp,ebp
c0016636:	eb bb                	jmp    c00165f3 <Thr::loadDLL(char const*, bool)+0x200>
c0016638:	81 c4 2c 01 00 00    	add    esp,0x12c
c001663e:	89 d8                	mov    eax,ebx
c0016640:	5b                   	pop    ebx
c0016641:	5e                   	pop    esi
c0016642:	5f                   	pop    edi
c0016643:	5d                   	pop    ebp
c0016644:	c3                   	ret    

c0016645 <Thr::executeDLL(unsigned long, void*)>:
c0016645:	56                   	push   esi
c0016646:	53                   	push   ebx
c0016647:	52                   	push   edx
c0016648:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001664c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016650:	85 db                	test   ebx,ebx
c0016652:	75 10                	jne    c0016664 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0016654:	83 ec 0c             	sub    esp,0xc
c0016657:	68 32 4f 02 c0       	push   0xc0024f32
c001665c:	e8 b1 99 ff ff       	call   c0010012 <KePanic(char const*)>
c0016661:	83 c4 10             	add    esp,0x10
c0016664:	50                   	push   eax
c0016665:	50                   	push   eax
c0016666:	53                   	push   ebx
c0016667:	68 5c 4f 02 c0       	push   0xc0024f5c
c001666c:	e8 f3 08 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016671:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016675:	89 d8                	mov    eax,ebx
c0016677:	83 c4 14             	add    esp,0x14
c001667a:	5b                   	pop    ebx
c001667b:	5e                   	pop    esi
c001667c:	ff e0                	jmp    eax

c001667e <KeProcessExec(Process*, char const*)>:
c001667e:	56                   	push   esi
c001667f:	53                   	push   ebx
c0016680:	83 ec 04             	sub    esp,0x4
c0016683:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016687:	8b b3 72 05 00 00    	mov    esi,DWORD PTR [ebx+0x572]
c001668d:	85 f6                	test   esi,esi
c001668f:	74 16                	je     c00166a7 <KeProcessExec(Process*, char const*)+0x29>
c0016691:	83 ec 0c             	sub    esp,0xc
c0016694:	56                   	push   esi
c0016695:	e8 de d3 ff ff       	call   c0013a78 <VAS::~VAS()>
c001669a:	58                   	pop    eax
c001669b:	5a                   	pop    edx
c001669c:	6a 14                	push   0x14
c001669e:	56                   	push   esi
c001669f:	e8 af 6c ff ff       	call   c000d353 <operator delete(void*, unsigned long)>
c00166a4:	83 c4 10             	add    esp,0x10
c00166a7:	83 ec 0c             	sub    esp,0xc
c00166aa:	6a 14                	push   0x14
c00166ac:	e8 1a 96 ff ff       	call   c000fccb <malloc>
c00166b1:	89 c6                	mov    esi,eax
c00166b3:	58                   	pop    eax
c00166b4:	5a                   	pop    edx
c00166b5:	6a 00                	push   0x0
c00166b7:	56                   	push   esi
c00166b8:	e8 5b d8 ff ff       	call   c0013f18 <VAS::VAS(bool)>
c00166bd:	89 b3 72 05 00 00    	mov    DWORD PTR [ebx+0x572],esi
c00166c3:	59                   	pop    ecx
c00166c4:	5e                   	pop    esi
c00166c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166c9:	50                   	push   eax
c00166ca:	53                   	push   ebx
c00166cb:	e8 35 f0 ff ff       	call   c0015705 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00166d0:	83 c4 14             	add    esp,0x14
c00166d3:	31 c0                	xor    eax,eax
c00166d5:	5b                   	pop    ebx
c00166d6:	5e                   	pop    esi
c00166d7:	c3                   	ret    

c00166d8 <userModeEntryPoint(void*)>:
c00166d8:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00166e0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00166e5:	85 c0                	test   eax,eax
c00166e7:	75 03                	jne    c00166ec <userModeEntryPoint(void*)+0x14>
c00166e9:	fb                   	sti    
c00166ea:	66 90                	xchg   ax,ax
c00166ec:	fb                   	sti    
c00166ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166f5:	8b 80 6e 05 00 00    	mov    eax,DWORD PTR [eax+0x56e]
c00166fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00166ff:	e9 3b 9b fe ff       	jmp    c000023f <goToUsermode>

c0016704 <changeTSS>:
c0016704:	83 ec 14             	sub    esp,0x14
c0016707:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001670c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001670f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0016714:	c1 e2 15             	shl    edx,0x15
c0016717:	29 d0                	sub    eax,edx
c0016719:	50                   	push   eax
c001671a:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001671f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016725:	05 68 11 00 00       	add    eax,0x1168
c001672a:	50                   	push   eax
c001672b:	e8 80 c6 ff ff       	call   c0012db0 <TSS::setESP(unsigned long)>
c0016730:	83 c4 1c             	add    esp,0x1c
c0016733:	c3                   	ret    

c0016734 <switchToThread(ThreadControlBlock*)>:
c0016734:	57                   	push   edi
c0016735:	8b 0d 2c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea2c
c001673b:	56                   	push   esi
c001673c:	85 c9                	test   ecx,ecx
c001673e:	53                   	push   ebx
c001673f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016743:	0f 85 c3 00 00 00    	jne    c001680c <switchToThread(ThreadControlBlock*)+0xd8>
c0016749:	0f b6 43 44          	movzx  eax,BYTE PTR [ebx+0x44]
c001674d:	3d ff 00 00 00       	cmp    eax,0xff
c0016752:	0f 85 88 00 00 00    	jne    c00167e0 <switchToThread(ThreadControlBlock*)+0xac>
c0016758:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c001675f:	90                   	nop
c0016760:	e8 18 39 00 00       	call   c001a07d <HalQueryPerformanceCounter()>
c0016765:	a3 70 ea 02 c0       	mov    ds:0xc002ea70,eax
c001676a:	89 15 74 ea 02 c0    	mov    DWORD PTR ds:0xc002ea74,edx
c0016770:	89 c6                	mov    esi,eax
c0016772:	89 d7                	mov    edi,edx
c0016774:	2b 35 60 ea 02 c0    	sub    esi,DWORD PTR ds:0xc002ea60
c001677a:	a3 60 ea 02 c0       	mov    ds:0xc002ea60,eax
c001677f:	1b 3d 64 ea 02 c0    	sbb    edi,DWORD PTR ds:0xc002ea64
c0016785:	89 35 68 ea 02 c0    	mov    DWORD PTR ds:0xc002ea68,esi
c001678b:	89 3d 6c ea 02 c0    	mov    DWORD PTR ds:0xc002ea6c,edi
c0016791:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016797:	89 15 64 ea 02 c0    	mov    DWORD PTR ds:0xc002ea64,edx
c001679d:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00167a0:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00167a3:	01 c6                	add    esi,eax
c00167a5:	11 d7                	adc    edi,edx
c00167a7:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00167aa:	83 ec 0c             	sub    esp,0xc
c00167ad:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00167b0:	53                   	push   ebx
c00167b1:	e8 c1 9a fe ff       	call   c0000277 <switchToThreadASM>
c00167b6:	c7 04 24 89 4f 02 c0 	mov    DWORD PTR [esp],0xc0024f89
c00167bd:	e8 a2 07 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00167c2:	0f 20 c0             	mov    eax,cr0
c00167c5:	83 c8 08             	or     eax,0x8
c00167c8:	0f 22 c0             	mov    cr0,eax
c00167cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167d0:	83 c4 10             	add    esp,0x10
c00167d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167d7:	5b                   	pop    ebx
c00167d8:	5e                   	pop    esi
c00167d9:	5f                   	pop    edi
c00167da:	e9 e5 eb ff ff       	jmp    c00153c4 <KeCheckAlarm(ThreadControlBlock*)>
c00167df:	90                   	nop
c00167e0:	83 ec 08             	sub    esp,0x8
c00167e3:	50                   	push   eax
c00167e4:	68 7b 4f 02 c0       	push   0xc0024f7b
c00167e9:	e8 76 07 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00167ee:	0f b6 53 44          	movzx  edx,BYTE PTR [ebx+0x44]
c00167f2:	b8 00 04 00 00       	mov    eax,0x400
c00167f7:	83 c4 10             	add    esp,0x10
c00167fa:	29 d0                	sub    eax,edx
c00167fc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00167ff:	d1 f8                	sar    eax,1
c0016801:	01 c2                	add    edx,eax
c0016803:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016806:	e9 55 ff ff ff       	jmp    c0016760 <switchToThread(ThreadControlBlock*)+0x2c>
c001680b:	90                   	nop
c001680c:	5b                   	pop    ebx
c001680d:	c7 05 28 ea 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x1
c0016817:	5e                   	pop    esi
c0016818:	5f                   	pop    edi
c0016819:	c3                   	ret    
c001681a:	66 90                	xchg   ax,ax

c001681c <Process::addArgs(char**)>:
c001681c:	57                   	push   edi
c001681d:	56                   	push   esi
c001681e:	53                   	push   ebx
c001681f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016823:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016827:	c7 86 76 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x576],0x0
c0016831:	85 ff                	test   edi,edi
c0016833:	74 4f                	je     c0016884 <Process::addArgs(char**)+0x68>
c0016835:	8b 07                	mov    eax,DWORD PTR [edi]
c0016837:	85 c0                	test   eax,eax
c0016839:	74 49                	je     c0016884 <Process::addArgs(char**)+0x68>
c001683b:	31 db                	xor    ebx,ebx
c001683d:	8d 76 00             	lea    esi,[esi+0x0]
c0016840:	83 ec 0c             	sub    esp,0xc
c0016843:	50                   	push   eax
c0016844:	e8 27 9d fe ff       	call   c0000570 <strlen>
c0016849:	83 c0 01             	add    eax,0x1
c001684c:	89 04 24             	mov    DWORD PTR [esp],eax
c001684f:	e8 77 94 ff ff       	call   c000fccb <malloc>
c0016854:	89 84 9e 7a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x57a],eax
c001685b:	5a                   	pop    edx
c001685c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001685f:	59                   	pop    ecx
c0016860:	83 c3 01             	add    ebx,0x1
c0016863:	52                   	push   edx
c0016864:	50                   	push   eax
c0016865:	e8 d6 9d fe ff       	call   c0000640 <strcpy>
c001686a:	8b 8e 76 05 00 00    	mov    ecx,DWORD PTR [esi+0x576]
c0016870:	83 c4 10             	add    esp,0x10
c0016873:	83 c1 01             	add    ecx,0x1
c0016876:	89 8e 76 05 00 00    	mov    DWORD PTR [esi+0x576],ecx
c001687c:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001687f:	85 c0                	test   eax,eax
c0016881:	75 bd                	jne    c0016840 <Process::addArgs(char**)+0x24>
c0016883:	90                   	nop
c0016884:	5b                   	pop    ebx
c0016885:	5e                   	pop    esi
c0016886:	5f                   	pop    edi
c0016887:	c3                   	ret    

c0016888 <Process::Process(char const*, Process*, char**)>:
c0016888:	56                   	push   esi
c0016889:	53                   	push   ebx
c001688a:	83 ec 14             	sub    esp,0x14
c001688d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016891:	05 0c 02 00 00       	add    eax,0x20c
c0016896:	bb 07 00 00 00       	mov    ebx,0x7
c001689b:	89 c6                	mov    esi,eax
c001689d:	8d 76 00             	lea    esi,[esi+0x0]
c00168a0:	85 db                	test   ebx,ebx
c00168a2:	78 14                	js     c00168b8 <Process::Process(char const*, Process*, char**)+0x30>
c00168a4:	83 ec 0c             	sub    esp,0xc
c00168a7:	56                   	push   esi
c00168a8:	e8 03 b9 00 00       	call   c00221b0 <ThreadControlBlock::ThreadControlBlock()>
c00168ad:	83 c4 10             	add    esp,0x10
c00168b0:	83 c6 6b             	add    esi,0x6b
c00168b3:	83 eb 01             	sub    ebx,0x1
c00168b6:	eb e8                	jmp    c00168a0 <Process::Process(char const*, Process*, char**)+0x18>
c00168b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168bc:	c6 80 7e 07 00 00 00 	mov    BYTE PTR [eax+0x77e],0x0
c00168c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168c7:	c6 80 7f 07 00 00 00 	mov    BYTE PTR [eax+0x77f],0x0
c00168ce:	83 ec 0c             	sub    esp,0xc
c00168d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168d5:	e8 7a 7f ff ff       	call   c000e854 <KeNewProcessEnv(Process*)>
c00168da:	83 c4 10             	add    esp,0x10
c00168dd:	89 c2                	mov    edx,eax
c00168df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e3:	89 90 7a 07 00 00    	mov    DWORD PTR [eax+0x77a],edx
c00168e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168ed:	66 c7 80 64 05 00 00 00 00 	mov    WORD PTR [eax+0x564],0x0
c00168f6:	a1 7c 68 02 c0       	mov    eax,ds:0xc002687c
c00168fb:	8d 50 01             	lea    edx,[eax+0x1]
c00168fe:	89 15 7c 68 02 c0    	mov    DWORD PTR ds:0xc002687c,edx
c0016904:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016908:	89 02                	mov    DWORD PTR [edx],eax
c001690a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0016912:	83 ec 0c             	sub    esp,0xc
c0016915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016919:	e8 ad 93 ff ff       	call   c000fccb <malloc>
c001691e:	83 c4 10             	add    esp,0x10
c0016921:	89 c3                	mov    ebx,eax
c0016923:	83 ec 08             	sub    esp,0x8
c0016926:	6a 00                	push   0x0
c0016928:	53                   	push   ebx
c0016929:	e8 ea d5 ff ff       	call   c0013f18 <VAS::VAS(bool)>
c001692e:	83 c4 10             	add    esp,0x10
c0016931:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016935:	89 98 72 05 00 00    	mov    DWORD PTR [eax+0x572],ebx
c001693b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001693f:	c7 80 76 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x576],0x0
c0016949:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001694d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016951:	89 90 6a 05 00 00    	mov    DWORD PTR [eax+0x56a],edx
c0016957:	e8 8b a7 ff ff       	call   c00110e7 <KeInitSignals()>
c001695c:	89 c2                	mov    edx,eax
c001695e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016962:	89 90 80 07 00 00    	mov    DWORD PTR [eax+0x780],edx
c0016968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001696c:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c0016972:	85 c0                	test   eax,eax
c0016974:	74 42                	je     c00169b8 <Process::Process(char const*, Process*, char**)+0x130>
c0016976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001697a:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c0016980:	8b 90 66 05 00 00    	mov    edx,DWORD PTR [eax+0x566]
c0016986:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001698a:	89 90 66 05 00 00    	mov    DWORD PTR [eax+0x566],edx
c0016990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016994:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c001699a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00169a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169a4:	05 0c 01 00 00       	add    eax,0x10c
c00169a9:	83 ec 08             	sub    esp,0x8
c00169ac:	52                   	push   edx
c00169ad:	50                   	push   eax
c00169ae:	e8 8d 9c fe ff       	call   c0000640 <strcpy>
c00169b3:	83 c4 10             	add    esp,0x10
c00169b6:	eb 7c                	jmp    c0016a34 <Process::Process(char const*, Process*, char**)+0x1ac>
c00169b8:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00169c0:	83 ec 0c             	sub    esp,0xc
c00169c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169c7:	e8 ff 92 ff ff       	call   c000fccb <malloc>
c00169cc:	83 c4 10             	add    esp,0x10
c00169cf:	89 c3                	mov    ebx,eax
c00169d1:	83 ec 08             	sub    esp,0x8
c00169d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169d8:	53                   	push   ebx
c00169d9:	e8 d4 c0 ff ff       	call   c0012ab2 <VgaText::VgaText(char const*)>
c00169de:	83 c4 10             	add    esp,0x10
c00169e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169e5:	89 98 66 05 00 00    	mov    DWORD PTR [eax+0x566],ebx
c00169eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169ef:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c00169f5:	83 ec 0c             	sub    esp,0xc
c00169f8:	50                   	push   eax
c00169f9:	e8 0a b9 ff ff       	call   c0012308 <addToTerminalCycle(VgaText*)>
c00169fe:	83 c4 10             	add    esp,0x10
c0016a01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a05:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0016a0b:	83 ec 0c             	sub    esp,0xc
c0016a0e:	50                   	push   eax
c0016a0f:	e8 65 bb ff ff       	call   c0012579 <setActiveTerminal(VgaText*)>
c0016a14:	83 c4 10             	add    esp,0x10
c0016a17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a1b:	05 0c 01 00 00       	add    eax,0x10c
c0016a20:	83 ec 08             	sub    esp,0x8
c0016a23:	68 92 4f 02 c0       	push   0xc0024f92
c0016a28:	50                   	push   eax
c0016a29:	e8 12 9c fe ff       	call   c0000640 <strcpy>
c0016a2e:	83 c4 10             	add    esp,0x10
c0016a31:	8d 76 00             	lea    esi,[esi+0x0]
c0016a34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a38:	83 c0 0c             	add    eax,0xc
c0016a3b:	83 ec 08             	sub    esp,0x8
c0016a3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a42:	50                   	push   eax
c0016a43:	e8 f8 9b fe ff       	call   c0000640 <strcpy>
c0016a48:	83 c4 10             	add    esp,0x10
c0016a4b:	83 ec 08             	sub    esp,0x8
c0016a4e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016a52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a56:	e8 c1 fd ff ff       	call   c001681c <Process::addArgs(char**)>
c0016a5b:	83 c4 10             	add    esp,0x10
c0016a5e:	83 ec 08             	sub    esp,0x8
c0016a61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a69:	e8 97 ec ff ff       	call   c0015705 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0016a6e:	83 c4 10             	add    esp,0x10
c0016a71:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016a75:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016a79:	83 f0 01             	xor    eax,0x1
c0016a7c:	88 c2                	mov    dl,al
c0016a7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a82:	88 90 7e 07 00 00    	mov    BYTE PTR [eax+0x77e],dl
c0016a88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a8c:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a8e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016a93:	52                   	push   edx
c0016a94:	50                   	push   eax
c0016a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a99:	68 ec 4f 02 c0       	push   0xc0024fec
c0016a9e:	e8 c1 04 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	90                   	nop
c0016aa7:	83 c4 14             	add    esp,0x14
c0016aaa:	5b                   	pop    ebx
c0016aab:	5e                   	pop    esi
c0016aac:	c3                   	ret    
c0016aad:	90                   	nop
c0016aae:	66 90                	xchg   ax,ax

c0016ab0 <Process::Process(bool, char const*, Process*, char**)>:
c0016ab0:	56                   	push   esi
c0016ab1:	53                   	push   ebx
c0016ab2:	83 ec 24             	sub    esp,0x24
c0016ab5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ab9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016abd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ac1:	05 0c 02 00 00       	add    eax,0x20c
c0016ac6:	bb 07 00 00 00       	mov    ebx,0x7
c0016acb:	89 c6                	mov    esi,eax
c0016acd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ad0:	85 db                	test   ebx,ebx
c0016ad2:	78 14                	js     c0016ae8 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0016ad4:	83 ec 0c             	sub    esp,0xc
c0016ad7:	56                   	push   esi
c0016ad8:	e8 d3 b6 00 00       	call   c00221b0 <ThreadControlBlock::ThreadControlBlock()>
c0016add:	83 c4 10             	add    esp,0x10
c0016ae0:	83 c6 6b             	add    esi,0x6b
c0016ae3:	83 eb 01             	sub    ebx,0x1
c0016ae6:	eb e8                	jmp    c0016ad0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016ae8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016aec:	c6 80 7e 07 00 00 00 	mov    BYTE PTR [eax+0x77e],0x0
c0016af3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016af7:	c6 80 7f 07 00 00 00 	mov    BYTE PTR [eax+0x77f],0x0
c0016afe:	83 ec 0c             	sub    esp,0xc
c0016b01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b05:	e8 4a 7d ff ff       	call   c000e854 <KeNewProcessEnv(Process*)>
c0016b0a:	83 c4 10             	add    esp,0x10
c0016b0d:	89 c2                	mov    edx,eax
c0016b0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b13:	89 90 7a 07 00 00    	mov    DWORD PTR [eax+0x77a],edx
c0016b19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b1d:	66 c7 80 64 05 00 00 00 00 	mov    WORD PTR [eax+0x564],0x0
c0016b26:	a1 7c 68 02 c0       	mov    eax,ds:0xc002687c
c0016b2b:	8d 50 01             	lea    edx,[eax+0x1]
c0016b2e:	89 15 7c 68 02 c0    	mov    DWORD PTR ds:0xc002687c,edx
c0016b34:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016b38:	89 02                	mov    DWORD PTR [edx],eax
c0016b3a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0016b42:	83 ec 0c             	sub    esp,0xc
c0016b45:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016b49:	e8 7d 91 ff ff       	call   c000fccb <malloc>
c0016b4e:	83 c4 10             	add    esp,0x10
c0016b51:	89 c3                	mov    ebx,eax
c0016b53:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016b58:	83 ec 08             	sub    esp,0x8
c0016b5b:	50                   	push   eax
c0016b5c:	53                   	push   ebx
c0016b5d:	e8 b6 d3 ff ff       	call   c0013f18 <VAS::VAS(bool)>
c0016b62:	83 c4 10             	add    esp,0x10
c0016b65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b69:	89 98 72 05 00 00    	mov    DWORD PTR [eax+0x572],ebx
c0016b6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b73:	c7 80 76 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x576],0x0
c0016b7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016b85:	89 90 6a 05 00 00    	mov    DWORD PTR [eax+0x56a],edx
c0016b8b:	e8 57 a5 ff ff       	call   c00110e7 <KeInitSignals()>
c0016b90:	89 c2                	mov    edx,eax
c0016b92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b96:	89 90 80 07 00 00    	mov    DWORD PTR [eax+0x780],edx
c0016b9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ba0:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c0016ba6:	85 c0                	test   eax,eax
c0016ba8:	74 42                	je     c0016bec <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016baa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bae:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c0016bb4:	8b 90 66 05 00 00    	mov    edx,DWORD PTR [eax+0x566]
c0016bba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bbe:	89 90 66 05 00 00    	mov    DWORD PTR [eax+0x566],edx
c0016bc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bc8:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c0016bce:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016bd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bd8:	05 0c 01 00 00       	add    eax,0x10c
c0016bdd:	83 ec 08             	sub    esp,0x8
c0016be0:	52                   	push   edx
c0016be1:	50                   	push   eax
c0016be2:	e8 59 9a fe ff       	call   c0000640 <strcpy>
c0016be7:	83 c4 10             	add    esp,0x10
c0016bea:	eb 7c                	jmp    c0016c68 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016bec:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0016bf4:	83 ec 0c             	sub    esp,0xc
c0016bf7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016bfb:	e8 cb 90 ff ff       	call   c000fccb <malloc>
c0016c00:	83 c4 10             	add    esp,0x10
c0016c03:	89 c3                	mov    ebx,eax
c0016c05:	83 ec 08             	sub    esp,0x8
c0016c08:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c0c:	53                   	push   ebx
c0016c0d:	e8 a0 be ff ff       	call   c0012ab2 <VgaText::VgaText(char const*)>
c0016c12:	83 c4 10             	add    esp,0x10
c0016c15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c19:	89 98 66 05 00 00    	mov    DWORD PTR [eax+0x566],ebx
c0016c1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c23:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0016c29:	83 ec 0c             	sub    esp,0xc
c0016c2c:	50                   	push   eax
c0016c2d:	e8 d6 b6 ff ff       	call   c0012308 <addToTerminalCycle(VgaText*)>
c0016c32:	83 c4 10             	add    esp,0x10
c0016c35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c39:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0016c3f:	83 ec 0c             	sub    esp,0xc
c0016c42:	50                   	push   eax
c0016c43:	e8 31 b9 ff ff       	call   c0012579 <setActiveTerminal(VgaText*)>
c0016c48:	83 c4 10             	add    esp,0x10
c0016c4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c4f:	05 0c 01 00 00       	add    eax,0x10c
c0016c54:	83 ec 08             	sub    esp,0x8
c0016c57:	68 92 4f 02 c0       	push   0xc0024f92
c0016c5c:	50                   	push   eax
c0016c5d:	e8 de 99 fe ff       	call   c0000640 <strcpy>
c0016c62:	83 c4 10             	add    esp,0x10
c0016c65:	8d 76 00             	lea    esi,[esi+0x0]
c0016c68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c6c:	83 c0 0c             	add    eax,0xc
c0016c6f:	83 ec 08             	sub    esp,0x8
c0016c72:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016c76:	50                   	push   eax
c0016c77:	e8 c4 99 fe ff       	call   c0000640 <strcpy>
c0016c7c:	83 c4 10             	add    esp,0x10
c0016c7f:	83 ec 08             	sub    esp,0x8
c0016c82:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016c86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016c8a:	e8 8d fb ff ff       	call   c001681c <Process::addArgs(char**)>
c0016c8f:	83 c4 10             	add    esp,0x10
c0016c92:	90                   	nop
c0016c93:	83 c4 24             	add    esp,0x24
c0016c96:	5b                   	pop    ebx
c0016c97:	5e                   	pop    esi
c0016c98:	c3                   	ret    
c0016c99:	8d 76 00             	lea    esi,[esi+0x0]

c0016c9c <taskStartupFunction>:
c0016c9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ca1:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016ca4:	c3                   	ret    
c0016ca5:	8d 76 00             	lea    esi,[esi+0x0]

c0016ca8 <KeDisablePreemption()>:
c0016ca8:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0016cad:	85 c0                	test   eax,eax
c0016caf:	75 13                	jne    c0016cc4 <KeDisablePreemption()+0x1c>
c0016cb1:	8a 15 d4 c0 02 c0    	mov    dl,BYTE PTR ds:0xc002c0d4
c0016cb7:	c6 05 d4 c0 02 c0 00 	mov    BYTE PTR ds:0xc002c0d4,0x0
c0016cbe:	88 15 08 ea 02 c0    	mov    BYTE PTR ds:0xc002ea08,dl
c0016cc4:	83 c0 01             	add    eax,0x1
c0016cc7:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c0016ccc:	c3                   	ret    
c0016ccd:	8d 76 00             	lea    esi,[esi+0x0]

c0016cd0 <KeRestorePreemption()>:
c0016cd0:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0016cd5:	83 e8 01             	sub    eax,0x1
c0016cd8:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c0016cdd:	75 0d                	jne    c0016cec <KeRestorePreemption()+0x1c>
c0016cdf:	a0 08 ea 02 c0       	mov    al,ds:0xc002ea08
c0016ce4:	a2 d4 c0 02 c0       	mov    ds:0xc002c0d4,al
c0016ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0016cec:	c3                   	ret    
c0016ced:	90                   	nop
c0016cee:	66 90                	xchg   ax,ax

c0016cf0 <Process::createThread(void (*)(void*), void*, int)>:
c0016cf0:	55                   	push   ebp
c0016cf1:	31 c9                	xor    ecx,ecx
c0016cf3:	57                   	push   edi
c0016cf4:	56                   	push   esi
c0016cf5:	53                   	push   ebx
c0016cf6:	83 ec 0c             	sub    esp,0xc
c0016cf9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016cfd:	66 8b b3 64 05 00 00 	mov    si,WORD PTR [ebx+0x564]
c0016d04:	89 f2                	mov    edx,esi
c0016d06:	66 90                	xchg   ax,ax
c0016d08:	0f b7 c2             	movzx  eax,dx
c0016d0b:	80 e2 01             	and    dl,0x1
c0016d0e:	74 18                	je     c0016d28 <Process::createThread(void (*)(void*), void*, int)+0x38>
c0016d10:	d1 f8                	sar    eax,1
c0016d12:	83 c1 01             	add    ecx,0x1
c0016d15:	89 c2                	mov    edx,eax
c0016d17:	83 f9 10             	cmp    ecx,0x10
c0016d1a:	75 ec                	jne    c0016d08 <Process::createThread(void (*)(void*), void*, int)+0x18>
c0016d1c:	83 c4 0c             	add    esp,0xc
c0016d1f:	31 db                	xor    ebx,ebx
c0016d21:	89 d8                	mov    eax,ebx
c0016d23:	5b                   	pop    ebx
c0016d24:	5e                   	pop    esi
c0016d25:	5f                   	pop    edi
c0016d26:	5d                   	pop    ebp
c0016d27:	c3                   	ret    
c0016d28:	b8 01 00 00 00       	mov    eax,0x1
c0016d2d:	8d 14 09             	lea    edx,[ecx+ecx*1]
c0016d30:	d3 e0                	shl    eax,cl
c0016d32:	09 c6                	or     esi,eax
c0016d34:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0016d37:	66 89 b3 64 05 00 00 	mov    WORD PTR [ebx+0x564],si
c0016d3e:	8d 04 81             	lea    eax,[ecx+eax*4]
c0016d41:	8d 04 81             	lea    eax,[ecx+eax*4]
c0016d44:	01 c0                	add    eax,eax
c0016d46:	01 c8                	add    eax,ecx
c0016d48:	01 d8                	add    eax,ebx
c0016d4a:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c0016d51:	75 0d                	jne    c0016d60 <Process::createThread(void (*)(void*), void*, int)+0x70>
c0016d53:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c0016d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d60:	8b 83 72 05 00 00    	mov    eax,DWORD PTR [ebx+0x572]
c0016d66:	83 ec 0c             	sub    esp,0xc
c0016d69:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016d6c:	01 ca                	add    edx,ecx
c0016d6e:	8d 14 91             	lea    edx,[ecx+edx*4]
c0016d71:	8d 34 91             	lea    esi,[ecx+edx*4]
c0016d74:	01 f6                	add    esi,esi
c0016d76:	01 ce                	add    esi,ecx
c0016d78:	8d 14 33             	lea    edx,[ebx+esi*1]
c0016d7b:	89 82 0c 02 00 00    	mov    DWORD PTR [edx+0x20c],eax
c0016d81:	8d ba 00 02 00 00    	lea    edi,[edx+0x200]
c0016d87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016d8b:	89 8a 48 02 00 00    	mov    DWORD PTR [edx+0x248],ecx
c0016d91:	89 82 51 02 00 00    	mov    DWORD PTR [edx+0x251],eax
c0016d97:	89 9a 4c 02 00 00    	mov    DWORD PTR [edx+0x24c],ebx
c0016d9d:	c7 82 44 02 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x244],0x0
c0016da7:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c0016dae:	c7 82 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x26f],0x0
c0016db8:	c7 82 73 02 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x273],0x0
c0016dc2:	89 c8                	mov    eax,ecx
c0016dc4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016dc8:	f7 d8                	neg    eax
c0016dca:	c1 e0 15             	shl    eax,0x15
c0016dcd:	05 e0 ff ff 01       	add    eax,0x1ffffe0
c0016dd2:	89 82 10 02 00 00    	mov    DWORD PTR [edx+0x210],eax
c0016dd8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ddc:	c7 82 24 02 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x224],0x0
c0016de6:	88 82 50 02 00 00    	mov    BYTE PTR [edx+0x250],al
c0016dec:	89 8a 18 02 00 00    	mov    DWORD PTR [edx+0x218],ecx
c0016df2:	c7 82 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x21c],0x0
c0016dfc:	c7 82 20 02 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x220],0x0
c0016e06:	68 00 01 00 00       	push   0x100
c0016e0b:	e8 bb 8e ff ff       	call   c000fccb <malloc>
c0016e10:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0016e13:	58                   	pop    eax
c0016e14:	5a                   	pop    edx
c0016e15:	53                   	push   ebx
c0016e16:	68 4c ea 02 c0       	push   0xc002ea4c
c0016e1b:	e8 3c af 00 00       	call   c0021d5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e20:	89 d8                	mov    eax,ebx
c0016e22:	83 c4 10             	add    esp,0x10
c0016e25:	83 c4 0c             	add    esp,0xc
c0016e28:	5b                   	pop    ebx
c0016e29:	5e                   	pop    esi
c0016e2a:	5f                   	pop    edi
c0016e2b:	5d                   	pop    ebp
c0016e2c:	c3                   	ret    
c0016e2d:	90                   	nop
c0016e2e:	66 90                	xchg   ax,ax

c0016e30 <Process::createUserThread()>:
c0016e30:	83 ec 0c             	sub    esp,0xc
c0016e33:	68 80 00 00 00       	push   0x80
c0016e38:	6a 00                	push   0x0
c0016e3a:	68 d8 66 01 c0       	push   0xc00166d8
c0016e3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016e43:	50                   	push   eax
c0016e44:	e8 a7 fe ff ff       	call   c0016cf0 <Process::createThread(void (*)(void*), void*, int)>
c0016e49:	83 c4 1c             	add    esp,0x1c
c0016e4c:	c3                   	ret    
c0016e4d:	8d 76 00             	lea    esi,[esi+0x0]

c0016e50 <setupMultitasking(void (*)())>:
c0016e50:	56                   	push   esi
c0016e51:	53                   	push   ebx
c0016e52:	83 ec 04             	sub    esp,0x4
c0016e55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e59:	eb 11                	jmp    c0016e6c <setupMultitasking(void (*)())+0x1c>
c0016e5b:	90                   	nop
c0016e5c:	83 ec 0c             	sub    esp,0xc
c0016e5f:	68 4c ea 02 c0       	push   0xc002ea4c
c0016e64:	e8 37 ae 00 00       	call   c0021ca0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e69:	83 c4 10             	add    esp,0x10
c0016e6c:	83 ec 0c             	sub    esp,0xc
c0016e6f:	68 4c ea 02 c0       	push   0xc002ea4c
c0016e74:	e8 03 ae 00 00       	call   c0021c7c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e79:	83 c4 10             	add    esp,0x10
c0016e7c:	84 c0                	test   al,al
c0016e7e:	74 dc                	je     c0016e5c <setupMultitasking(void (*)())+0xc>
c0016e80:	83 ec 0c             	sub    esp,0xc
c0016e83:	68 84 07 00 00       	push   0x784
c0016e88:	e8 3e 8e ff ff       	call   c000fccb <malloc>
c0016e8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016e94:	89 c3                	mov    ebx,eax
c0016e96:	6a 00                	push   0x0
c0016e98:	68 96 4f 02 c0       	push   0xc0024f96
c0016e9d:	6a 01                	push   0x1
c0016e9f:	50                   	push   eax
c0016ea0:	e8 0b fc ff ff       	call   c0016ab0 <Process::Process(bool, char const*, Process*, char**)>
c0016ea5:	83 c4 14             	add    esp,0x14
c0016ea8:	8b 83 66 05 00 00    	mov    eax,DWORD PTR [ebx+0x566]
c0016eae:	89 1d 58 ea 02 c0    	mov    DWORD PTR ds:0xc002ea58,ebx
c0016eb4:	50                   	push   eax
c0016eb5:	e8 bf b6 ff ff       	call   c0012579 <setActiveTerminal(VgaText*)>
c0016eba:	66 8b 83 64 05 00 00 	mov    ax,WORD PTR [ebx+0x564]
c0016ec1:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c0016ecb:	83 c8 01             	or     eax,0x1
c0016ece:	66 89 83 64 05 00 00 	mov    WORD PTR [ebx+0x564],ax
c0016ed5:	8b 83 72 05 00 00    	mov    eax,DWORD PTR [ebx+0x572]
c0016edb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016ede:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0016ee8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016eee:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0016ef4:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016efe:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0016f08:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016f12:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016f18:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016f22:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016f28:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016f32:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016f39:	e8 8d 8d ff ff       	call   c000fccb <malloc>
c0016f3e:	c7 83 6f 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x26f],0x0
c0016f48:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016f4e:	c7 83 73 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x273],0x0
c0016f58:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016f5e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016f64:	5a                   	pop    edx
c0016f65:	59                   	pop    ecx
c0016f66:	68 92 4f 02 c0       	push   0xc0024f92
c0016f6b:	50                   	push   eax
c0016f6c:	e8 cf 96 fe ff       	call   c0000640 <strcpy>
c0016f71:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0016f78:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016f7c:	83 c4 14             	add    esp,0x14
c0016f7f:	5b                   	pop    ebx
c0016f80:	5e                   	pop    esi
c0016f81:	e9 e3 92 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0016f86:	66 90                	xchg   ax,ax

c0016f88 <schedule()>:
c0016f88:	8b 15 2c ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea2c
c0016f8e:	85 d2                	test   edx,edx
c0016f90:	74 0e                	je     c0016fa0 <schedule()+0x18>
c0016f92:	c7 05 28 ea 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x1
c0016f9c:	c3                   	ret    
c0016f9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016fa0:	53                   	push   ebx
c0016fa1:	83 ec 14             	sub    esp,0x14
c0016fa4:	68 4c ea 02 c0       	push   0xc002ea4c
c0016fa9:	e8 ce ac 00 00       	call   c0021c7c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016fae:	83 c4 10             	add    esp,0x10
c0016fb1:	84 c0                	test   al,al
c0016fb3:	75 3f                	jne    c0016ff4 <schedule()+0x6c>
c0016fb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016fba:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016fbd:	83 fa 01             	cmp    edx,0x1
c0016fc0:	74 3a                	je     c0016ffc <schedule()+0x74>
c0016fc2:	66 90                	xchg   ax,ax
c0016fc4:	83 ec 0c             	sub    esp,0xc
c0016fc7:	68 4c ea 02 c0       	push   0xc002ea4c
c0016fcc:	e8 c7 ac 00 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016fd1:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0016fd8:	89 c3                	mov    ebx,eax
c0016fda:	e8 c1 ac 00 00       	call   c0021ca0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016fdf:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016fe6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016fe9:	e8 46 f7 ff ff       	call   c0016734 <switchToThread(ThreadControlBlock*)>
c0016fee:	83 c4 10             	add    esp,0x10
c0016ff1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ff4:	83 c4 08             	add    esp,0x8
c0016ff7:	5b                   	pop    ebx
c0016ff8:	c3                   	ret    
c0016ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0016ffc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017003:	83 ec 08             	sub    esp,0x8
c0017006:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001700b:	50                   	push   eax
c001700c:	68 4c ea 02 c0       	push   0xc002ea4c
c0017011:	e8 46 ad 00 00       	call   c0021d5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017016:	83 c4 10             	add    esp,0x10
c0017019:	eb a9                	jmp    c0016fc4 <schedule()+0x3c>
c001701b:	90                   	nop

c001701c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001701c:	83 ec 0c             	sub    esp,0xc
c001701f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017024:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017028:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001702b:	e8 58 ff ff ff       	call   c0016f88 <schedule()>
c0017030:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017038:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001703d:	85 c0                	test   eax,eax
c001703f:	75 03                	jne    c0017044 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0017041:	fb                   	sti    
c0017042:	66 90                	xchg   ax,ax
c0017044:	83 c4 0c             	add    esp,0xc
c0017047:	c3                   	ret    

c0017048 <blockTask(TaskState)>:
c0017048:	83 ec 0c             	sub    esp,0xc
c001704b:	fa                   	cli    
c001704c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017051:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017055:	83 c0 01             	add    eax,0x1
c0017058:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001705d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017062:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017065:	e8 1e ff ff ff       	call   c0016f88 <schedule()>
c001706a:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017072:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0017078:	85 d2                	test   edx,edx
c001707a:	75 04                	jne    c0017080 <blockTask(TaskState)+0x38>
c001707c:	fb                   	sti    
c001707d:	8d 76 00             	lea    esi,[esi+0x0]
c0017080:	83 c4 0c             	add    esp,0xc
c0017083:	c3                   	ret    

c0017084 <waitTask(int, int*, int)>:
c0017084:	83 ec 18             	sub    esp,0x18
c0017087:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001708c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017090:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0017093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017097:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001709c:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001709f:	6a 07                	push   0x7
c00170a1:	e8 a2 ff ff ff       	call   c0017048 <blockTask(TaskState)>
c00170a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170ab:	83 c4 10             	add    esp,0x10
c00170ae:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c00170b1:	85 d2                	test   edx,edx
c00170b3:	74 0b                	je     c00170c0 <waitTask(int, int*, int)+0x3c>
c00170b5:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c00170b8:	89 02                	mov    DWORD PTR [edx],eax
c00170ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170bf:	90                   	nop
c00170c0:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c00170c3:	83 c4 0c             	add    esp,0xc
c00170c6:	c3                   	ret    
c00170c7:	90                   	nop

c00170c8 <milliTenthSleepUntil(unsigned long long)>:
c00170c8:	83 ec 0c             	sub    esp,0xc
c00170cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00170d3:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c00170d9:	89 d1                	mov    ecx,edx
c00170db:	1b 0d 54 bb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002bb54
c00170e1:	73 05                	jae    c00170e8 <milliTenthSleepUntil(unsigned long long)+0x20>
c00170e3:	90                   	nop
c00170e4:	83 c4 0c             	add    esp,0xc
c00170e7:	c3                   	ret    
c00170e8:	fa                   	cli    
c00170e9:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00170ef:	83 ec 08             	sub    esp,0x8
c00170f2:	83 c1 01             	add    ecx,0x1
c00170f5:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c00170fb:	8b 0d 2c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea2c
c0017101:	83 c1 01             	add    ecx,0x1
c0017104:	89 0d 2c ea 02 c0    	mov    DWORD PTR ds:0xc002ea2c,ecx
c001710a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017110:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0017113:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0017116:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001711b:	50                   	push   eax
c001711c:	68 40 ea 02 c0       	push   0xc002ea40
c0017121:	e8 36 ac 00 00       	call   c0021d5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017126:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001712d:	e8 16 ff ff ff       	call   c0017048 <blockTask(TaskState)>
c0017132:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0017137:	83 c4 10             	add    esp,0x10
c001713a:	83 e8 01             	sub    eax,0x1
c001713d:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0017142:	85 c0                	test   eax,eax
c0017144:	75 0a                	jne    c0017150 <milliTenthSleepUntil(unsigned long long)+0x88>
c0017146:	8b 15 28 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea28
c001714c:	85 d2                	test   edx,edx
c001714e:	75 18                	jne    c0017168 <milliTenthSleepUntil(unsigned long long)+0xa0>
c0017150:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017158:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001715d:	85 c0                	test   eax,eax
c001715f:	75 83                	jne    c00170e4 <milliTenthSleepUntil(unsigned long long)+0x1c>
c0017161:	fb                   	sti    
c0017162:	83 c4 0c             	add    esp,0xc
c0017165:	c3                   	ret    
c0017166:	66 90                	xchg   ax,ax
c0017168:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0017172:	e8 11 fe ff ff       	call   c0016f88 <schedule()>
c0017177:	eb d7                	jmp    c0017150 <milliTenthSleepUntil(unsigned long long)+0x88>
c0017179:	8d 76 00             	lea    esi,[esi+0x0]

c001717c <milliTenthSleep(unsigned long long)>:
c001717c:	a1 50 bb 02 c0       	mov    eax,ds:0xc002bb50
c0017181:	8b 15 54 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bb54
c0017187:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001718b:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001718f:	e9 34 ff ff ff       	jmp    c00170c8 <milliTenthSleepUntil(unsigned long long)>

c0017194 <sleep(unsigned long long)>:
c0017194:	69 4c 24 08 10 27 00 00 	imul   ecx,DWORD PTR [esp+0x8],0x2710
c001719c:	b8 10 27 00 00       	mov    eax,0x2710
c00171a1:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c00171a5:	01 ca                	add    edx,ecx
c00171a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00171ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00171af:	eb cb                	jmp    c001717c <milliTenthSleep(unsigned long long)>
c00171b1:	8d 76 00             	lea    esi,[esi+0x0]

c00171b4 <sleep(unsigned int)>:
c00171b4:	83 ec 14             	sub    esp,0x14
c00171b7:	b8 10 27 00 00       	mov    eax,0x2710
c00171bc:	f7 64 24 18          	mul    DWORD PTR [esp+0x18]
c00171c0:	52                   	push   edx
c00171c1:	50                   	push   eax
c00171c2:	e8 b5 ff ff ff       	call   c001717c <milliTenthSleep(unsigned long long)>
c00171c7:	83 c4 1c             	add    esp,0x1c
c00171ca:	c3                   	ret    
c00171cb:	90                   	nop

c00171cc <milliTenthSleep(unsigned int)>:
c00171cc:	83 ec 14             	sub    esp,0x14
c00171cf:	31 d2                	xor    edx,edx
c00171d1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171d5:	03 05 50 bb 02 c0    	add    eax,DWORD PTR ds:0xc002bb50
c00171db:	13 15 54 bb 02 c0    	adc    edx,DWORD PTR ds:0xc002bb54
c00171e1:	52                   	push   edx
c00171e2:	50                   	push   eax
c00171e3:	e8 e0 fe ff ff       	call   c00170c8 <milliTenthSleepUntil(unsigned long long)>
c00171e8:	83 c4 1c             	add    esp,0x1c
c00171eb:	c3                   	ret    

c00171ec <taskReturned>:
c00171ec:	83 ec 18             	sub    esp,0x18
c00171ef:	68 20 50 02 c0       	push   0xc0025020
c00171f4:	e8 19 8e ff ff       	call   c0010012 <KePanic(char const*)>
c00171f9:	83 c4 10             	add    esp,0x10
c00171fc:	83 ec 0c             	sub    esp,0xc
c00171ff:	6a 02                	push   0x2
c0017201:	e8 42 fe ff ff       	call   c0017048 <blockTask(TaskState)>
c0017206:	fa                   	cli    
c0017207:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001720c:	83 c0 01             	add    eax,0x1
c001720f:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017214:	e8 6f fd ff ff       	call   c0016f88 <schedule()>
c0017219:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017221:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0017227:	83 c4 10             	add    esp,0x10
c001722a:	85 d2                	test   edx,edx
c001722c:	75 ce                	jne    c00171fc <taskReturned+0x10>
c001722e:	fb                   	sti    
c001722f:	eb cb                	jmp    c00171fc <taskReturned+0x10>
c0017231:	8d 76 00             	lea    esi,[esi+0x0]

c0017234 <Thr::processFromPID(int)>:
c0017234:	57                   	push   edi
c0017235:	56                   	push   esi
c0017236:	53                   	push   ebx
c0017237:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001723b:	fa                   	cli    
c001723c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017241:	83 ec 0c             	sub    esp,0xc
c0017244:	83 c0 01             	add    eax,0x1
c0017247:	68 4c ea 02 c0       	push   0xc002ea4c
c001724c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017251:	e8 42 aa 00 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017256:	83 c4 10             	add    esp,0x10
c0017259:	89 c7                	mov    edi,eax
c001725b:	eb 17                	jmp    c0017274 <Thr::processFromPID(int)+0x40>
c001725d:	8d 76 00             	lea    esi,[esi+0x0]
c0017260:	83 ec 0c             	sub    esp,0xc
c0017263:	68 4c ea 02 c0       	push   0xc002ea4c
c0017268:	e8 2b aa 00 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001726d:	83 c4 10             	add    esp,0x10
c0017270:	39 f8                	cmp    eax,edi
c0017272:	74 50                	je     c00172c4 <Thr::processFromPID(int)+0x90>
c0017274:	83 ec 0c             	sub    esp,0xc
c0017277:	68 4c ea 02 c0       	push   0xc002ea4c
c001727c:	e8 17 aa 00 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017281:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0017288:	89 c3                	mov    ebx,eax
c001728a:	e8 11 aa 00 00       	call   c0021ca0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001728f:	59                   	pop    ecx
c0017290:	58                   	pop    eax
c0017291:	53                   	push   ebx
c0017292:	68 4c ea 02 c0       	push   0xc002ea4c
c0017297:	e8 c0 aa 00 00       	call   c0021d5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001729c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001729f:	83 c4 10             	add    esp,0x10
c00172a2:	39 30                	cmp    DWORD PTR [eax],esi
c00172a4:	75 ba                	jne    c0017260 <Thr::processFromPID(int)+0x2c>
c00172a6:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00172ae:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00172b4:	85 d2                	test   edx,edx
c00172b6:	74 08                	je     c00172c0 <Thr::processFromPID(int)+0x8c>
c00172b8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00172bb:	5b                   	pop    ebx
c00172bc:	5e                   	pop    esi
c00172bd:	5f                   	pop    edi
c00172be:	c3                   	ret    
c00172bf:	90                   	nop
c00172c0:	fb                   	sti    
c00172c1:	eb f5                	jmp    c00172b8 <Thr::processFromPID(int)+0x84>
c00172c3:	90                   	nop
c00172c4:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00172cc:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00172d1:	85 c0                	test   eax,eax
c00172d3:	75 07                	jne    c00172dc <Thr::processFromPID(int)+0xa8>
c00172d5:	fb                   	sti    
c00172d6:	31 c0                	xor    eax,eax
c00172d8:	5b                   	pop    ebx
c00172d9:	5e                   	pop    esi
c00172da:	5f                   	pop    edi
c00172db:	c3                   	ret    
c00172dc:	5b                   	pop    ebx
c00172dd:	31 c0                	xor    eax,eax
c00172df:	5e                   	pop    esi
c00172e0:	5f                   	pop    edi
c00172e1:	c3                   	ret    
c00172e2:	66 90                	xchg   ax,ax

c00172e4 <unblockTask(ThreadControlBlock*)>:
c00172e4:	53                   	push   ebx
c00172e5:	83 ec 08             	sub    esp,0x8
c00172e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00172ec:	fa                   	cli    
c00172ed:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c00172f3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00172f6:	83 c2 01             	add    edx,0x1
c00172f9:	85 c0                	test   eax,eax
c00172fb:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c0017301:	74 6d                	je     c0017370 <unblockTask(ThreadControlBlock*)+0x8c>
c0017303:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017306:	83 f8 01             	cmp    eax,0x1
c0017309:	74 39                	je     c0017344 <unblockTask(ThreadControlBlock*)+0x60>
c001730b:	83 ec 0c             	sub    esp,0xc
c001730e:	68 4c ea 02 c0       	push   0xc002ea4c
c0017313:	e8 80 a9 00 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017318:	83 c4 10             	add    esp,0x10
c001731b:	85 c0                	test   eax,eax
c001731d:	75 1d                	jne    c001733c <unblockTask(ThreadControlBlock*)+0x58>
c001731f:	eb 63                	jmp    c0017384 <unblockTask(ThreadControlBlock*)+0xa0>
c0017321:	8d 76 00             	lea    esi,[esi+0x0]
c0017324:	83 ec 08             	sub    esp,0x8
c0017327:	50                   	push   eax
c0017328:	68 4c ea 02 c0       	push   0xc002ea4c
c001732d:	e8 72 ae 00 00       	call   c00221a4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0017332:	83 c4 10             	add    esp,0x10
c0017335:	85 c0                	test   eax,eax
c0017337:	74 4b                	je     c0017384 <unblockTask(ThreadControlBlock*)+0xa0>
c0017339:	8d 76 00             	lea    esi,[esi+0x0]
c001733c:	39 c3                	cmp    ebx,eax
c001733e:	75 e4                	jne    c0017324 <unblockTask(ThreadControlBlock*)+0x40>
c0017340:	eb 12                	jmp    c0017354 <unblockTask(ThreadControlBlock*)+0x70>
c0017342:	66 90                	xchg   ax,ax
c0017344:	83 ec 0c             	sub    esp,0xc
c0017347:	68 b4 4f 02 c0       	push   0xc0024fb4
c001734c:	e8 13 fc fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017351:	83 c4 10             	add    esp,0x10
c0017354:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001735c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017361:	85 c0                	test   eax,eax
c0017363:	75 03                	jne    c0017368 <unblockTask(ThreadControlBlock*)+0x84>
c0017365:	fb                   	sti    
c0017366:	66 90                	xchg   ax,ax
c0017368:	83 c4 08             	add    esp,0x8
c001736b:	5b                   	pop    ebx
c001736c:	c3                   	ret    
c001736d:	8d 76 00             	lea    esi,[esi+0x0]
c0017370:	83 ec 0c             	sub    esp,0xc
c0017373:	68 9d 4f 02 c0       	push   0xc0024f9d
c0017378:	e8 e7 fb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001737d:	83 c4 10             	add    esp,0x10
c0017380:	eb d2                	jmp    c0017354 <unblockTask(ThreadControlBlock*)+0x70>
c0017382:	66 90                	xchg   ax,ax
c0017384:	83 ec 08             	sub    esp,0x8
c0017387:	53                   	push   ebx
c0017388:	68 4c ea 02 c0       	push   0xc002ea4c
c001738d:	e8 ca a9 00 00       	call   c0021d5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017392:	83 c4 10             	add    esp,0x10
c0017395:	eb bd                	jmp    c0017354 <unblockTask(ThreadControlBlock*)+0x70>
c0017397:	90                   	nop

c0017398 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017398:	55                   	push   ebp
c0017399:	57                   	push   edi
c001739a:	56                   	push   esi
c001739b:	53                   	push   ebx
c001739c:	83 ec 1c             	sub    esp,0x1c
c001739f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00173a3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173a6:	8b a8 76 05 00 00    	mov    ebp,DWORD PTR [eax+0x576]
c00173ac:	85 ed                	test   ebp,ebp
c00173ae:	7e 28                	jle    c00173d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00173b0:	31 f6                	xor    esi,esi
c00173b2:	66 90                	xchg   ax,ax
c00173b4:	83 ec 0c             	sub    esp,0xc
c00173b7:	8b bc b0 7a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x57a]
c00173be:	83 c6 01             	add    esi,0x1
c00173c1:	57                   	push   edi
c00173c2:	e8 14 89 ff ff       	call   c000fcdb <free>
c00173c7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173ca:	83 c4 10             	add    esp,0x10
c00173cd:	39 b0 76 05 00 00    	cmp    DWORD PTR [eax+0x576],esi
c00173d3:	7f df                	jg     c00173b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00173d5:	8d 76 00             	lea    esi,[esi+0x0]
c00173d8:	c7 80 76 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x576],0x0
c00173e2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00173e7:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c00173ea:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00173ed:	d3 c0                	rol    eax,cl
c00173ef:	66 8b 8a 64 05 00 00 	mov    cx,WORD PTR [edx+0x564]
c00173f6:	21 c8                	and    eax,ecx
c00173f8:	66 89 82 64 05 00 00 	mov    WORD PTR [edx+0x564],ax
c00173ff:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017402:	89 f7                	mov    edi,esi
c0017404:	66 83 be 64 05 00 00 00 	cmp    WORD PTR [esi+0x564],0x0
c001740c:	0f 85 7a 01 00 00    	jne    c001758c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0017412:	8b ae 7a 07 00 00    	mov    ebp,DWORD PTR [esi+0x77a]
c0017418:	85 ed                	test   ebp,ebp
c001741a:	74 1c                	je     c0017438 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c001741c:	83 ec 0c             	sub    esp,0xc
c001741f:	55                   	push   ebp
c0017420:	e8 4b 73 ff ff       	call   c000e770 <EnvVarContainer::~EnvVarContainer()>
c0017425:	59                   	pop    ecx
c0017426:	5e                   	pop    esi
c0017427:	6a 0c                	push   0xc
c0017429:	55                   	push   ebp
c001742a:	e8 24 5f ff ff       	call   c000d353 <operator delete(void*, unsigned long)>
c001742f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017432:	83 c4 10             	add    esp,0x10
c0017435:	89 f7                	mov    edi,esi
c0017437:	90                   	nop
c0017438:	8b 86 6a 05 00 00    	mov    eax,DWORD PTR [esi+0x56a]
c001743e:	85 c0                	test   eax,eax
c0017440:	0f 84 ba 00 00 00    	je     c0017500 <cleanupTerminatedTask(ThreadControlBlock*)+0x168>
c0017446:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0017449:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001744d:	31 c9                	xor    ecx,ecx
c001744f:	eb 17                	jmp    c0017468 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0017451:	8d 76 00             	lea    esi,[esi+0x0]
c0017454:	83 c1 01             	add    ecx,0x1
c0017457:	83 f9 10             	cmp    ecx,0x10
c001745a:	0f 84 a0 00 00 00    	je     c0017500 <cleanupTerminatedTask(ThreadControlBlock*)+0x168>
c0017460:	8b 86 6a 05 00 00    	mov    eax,DWORD PTR [esi+0x56a]
c0017466:	66 90                	xchg   ax,ax
c0017468:	0f b7 90 64 05 00 00 	movzx  edx,WORD PTR [eax+0x564]
c001746f:	d3 fa                	sar    edx,cl
c0017471:	80 e2 01             	and    dl,0x1
c0017474:	74 de                	je     c0017454 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017476:	8d 14 09             	lea    edx,[ecx+ecx*1]
c0017479:	01 ca                	add    edx,ecx
c001747b:	8d 14 91             	lea    edx,[ecx+edx*4]
c001747e:	8d 14 91             	lea    edx,[ecx+edx*4]
c0017481:	01 d2                	add    edx,edx
c0017483:	01 ca                	add    edx,ecx
c0017485:	01 d0                	add    eax,edx
c0017487:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001748d:	83 fd 07             	cmp    ebp,0x7
c0017490:	75 c2                	jne    c0017454 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017492:	05 40 02 00 00       	add    eax,0x240
c0017497:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001749a:	83 fd ff             	cmp    ebp,0xffffffff
c001749d:	0f 8c f1 00 00 00    	jl     c0017594 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c00174a3:	0f 84 af 01 00 00    	je     c0017658 <cleanupTerminatedTask(ThreadControlBlock*)+0x2c0>
c00174a9:	85 ed                	test   ebp,ebp
c00174ab:	0f 84 93 01 00 00    	je     c0017644 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c00174b1:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00174b3:	75 9f                	jne    c0017454 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00174b5:	8b 86 6a 05 00 00    	mov    eax,DWORD PTR [esi+0x56a]
c00174bb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00174bf:	01 d0                	add    eax,edx
c00174c1:	8d 76 00             	lea    esi,[esi+0x0]
c00174c4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00174c8:	83 ec 0c             	sub    esp,0xc
c00174cb:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c00174d1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00174d4:	8b 80 6a 05 00 00    	mov    eax,DWORD PTR [eax+0x56a]
c00174da:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00174e1:	50                   	push   eax
c00174e2:	e8 fd fd ff ff       	call   c00172e4 <unblockTask(ThreadControlBlock*)>
c00174e7:	83 c4 10             	add    esp,0x10
c00174ea:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00174ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174f1:	89 f7                	mov    edi,esi
c00174f3:	83 c1 01             	add    ecx,0x1
c00174f6:	83 f9 10             	cmp    ecx,0x10
c00174f9:	0f 85 61 ff ff ff    	jne    c0017460 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00174ff:	90                   	nop
c0017500:	8b 86 66 05 00 00    	mov    eax,DWORD PTR [esi+0x566]
c0017506:	85 c0                	test   eax,eax
c0017508:	74 62                	je     c001756c <cleanupTerminatedTask(ThreadControlBlock*)+0x1d4>
c001750a:	8b 96 6a 05 00 00    	mov    edx,DWORD PTR [esi+0x56a]
c0017510:	3b 82 66 05 00 00    	cmp    eax,DWORD PTR [edx+0x566]
c0017516:	74 54                	je     c001756c <cleanupTerminatedTask(ThreadControlBlock*)+0x1d4>
c0017518:	83 ec 0c             	sub    esp,0xc
c001751b:	68 4c ea 02 c0       	push   0xc002ea4c
c0017520:	e8 73 a7 00 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017525:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c001752c:	89 c7                	mov    edi,eax
c001752e:	e8 49 a7 00 00       	call   c0021c7c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017533:	83 c4 10             	add    esp,0x10
c0017536:	84 c0                	test   al,al
c0017538:	0f 84 ce 00 00 00    	je     c001760c <cleanupTerminatedTask(ThreadControlBlock*)+0x274>
c001753e:	66 90                	xchg   ax,ax
c0017540:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017543:	8b 90 66 05 00 00    	mov    edx,DWORD PTR [eax+0x566]
c0017549:	85 d2                	test   edx,edx
c001754b:	74 0f                	je     c001755c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c001754d:	83 ec 0c             	sub    esp,0xc
c0017550:	8b 02                	mov    eax,DWORD PTR [edx]
c0017552:	52                   	push   edx
c0017553:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017556:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017559:	83 c4 10             	add    esp,0x10
c001755c:	c7 80 66 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x566],0x0
c0017566:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0017569:	8d 76 00             	lea    esi,[esi+0x0]
c001756c:	8b 9f 72 05 00 00    	mov    ebx,DWORD PTR [edi+0x572]
c0017572:	85 db                	test   ebx,ebx
c0017574:	74 16                	je     c001758c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0017576:	83 ec 0c             	sub    esp,0xc
c0017579:	53                   	push   ebx
c001757a:	e8 f9 c4 ff ff       	call   c0013a78 <VAS::~VAS()>
c001757f:	58                   	pop    eax
c0017580:	5a                   	pop    edx
c0017581:	6a 14                	push   0x14
c0017583:	53                   	push   ebx
c0017584:	e8 ca 5d ff ff       	call   c000d353 <operator delete(void*, unsigned long)>
c0017589:	83 c4 10             	add    esp,0x10
c001758c:	83 c4 1c             	add    esp,0x1c
c001758f:	5b                   	pop    ebx
c0017590:	5e                   	pop    esi
c0017591:	5f                   	pop    edi
c0017592:	5d                   	pop    ebp
c0017593:	c3                   	ret    
c0017594:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017598:	83 ec 0c             	sub    esp,0xc
c001759b:	68 54 50 02 c0       	push   0xc0025054
c00175a0:	e8 6d 8a ff ff       	call   c0010012 <KePanic(char const*)>
c00175a5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00175a8:	83 c4 10             	add    esp,0x10
c00175ab:	89 f7                	mov    edi,esi
c00175ad:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00175b1:	e9 9e fe ff ff       	jmp    c0017454 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00175b6:	66 90                	xchg   ax,ax
c00175b8:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c00175be:	39 82 66 05 00 00    	cmp    DWORD PTR [edx+0x566],eax
c00175c4:	75 1e                	jne    c00175e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x24c>
c00175c6:	83 ec 0c             	sub    esp,0xc
c00175c9:	68 bc 50 02 c0       	push   0xc00250bc
c00175ce:	e8 91 f9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00175d3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00175da:	e8 69 fa ff ff       	call   c0017048 <blockTask(TaskState)>
c00175df:	83 c4 10             	add    esp,0x10
c00175e2:	66 90                	xchg   ax,ax
c00175e4:	83 ec 08             	sub    esp,0x8
c00175e7:	56                   	push   esi
c00175e8:	68 4c ea 02 c0       	push   0xc002ea4c
c00175ed:	e8 6a a7 00 00       	call   c0021d5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00175f2:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c00175f9:	e8 9a a6 00 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00175fe:	83 c4 10             	add    esp,0x10
c0017601:	39 f8                	cmp    eax,edi
c0017603:	0f 84 37 ff ff ff    	je     c0017540 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c0017609:	8d 76 00             	lea    esi,[esi+0x0]
c001760c:	83 ec 0c             	sub    esp,0xc
c001760f:	68 4c ea 02 c0       	push   0xc002ea4c
c0017614:	e8 7f a6 00 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017619:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0017620:	89 c6                	mov    esi,eax
c0017622:	e8 79 a6 00 00       	call   c0021ca0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017627:	83 c4 10             	add    esp,0x10
c001762a:	39 f3                	cmp    ebx,esi
c001762c:	74 b6                	je     c00175e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x24c>
c001762e:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0017631:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017634:	39 82 6a 05 00 00    	cmp    DWORD PTR [edx+0x56a],eax
c001763a:	75 a8                	jne    c00175e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x24c>
c001763c:	e9 77 ff ff ff       	jmp    c00175b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x220>
c0017641:	8d 76 00             	lea    esi,[esi+0x0]
c0017644:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017648:	83 ec 0c             	sub    esp,0xc
c001764b:	68 88 50 02 c0       	push   0xc0025088
c0017650:	e9 4b ff ff ff       	jmp    c00175a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x208>
c0017655:	8d 76 00             	lea    esi,[esi+0x0]
c0017658:	8b 36                	mov    esi,DWORD PTR [esi]
c001765a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001765e:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0017661:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017664:	8b b8 6a 05 00 00    	mov    edi,DWORD PTR [eax+0x56a]
c001766a:	01 d7                	add    edi,edx
c001766c:	89 f8                	mov    eax,edi
c001766e:	e9 51 fe ff ff       	jmp    c00174c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x12c>
c0017673:	90                   	nop

c0017674 <cleanerTaskFunction(void*)>:
c0017674:	53                   	push   ebx
c0017675:	83 ec 08             	sub    esp,0x8
c0017678:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017680:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017685:	85 c0                	test   eax,eax
c0017687:	75 03                	jne    c001768c <cleanerTaskFunction(void*)+0x18>
c0017689:	fb                   	sti    
c001768a:	66 90                	xchg   ax,ax
c001768c:	fa                   	cli    
c001768d:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017692:	83 c0 01             	add    eax,0x1
c0017695:	80 3d 14 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea14,0x0
c001769c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00176a1:	0f 85 c9 00 00 00    	jne    c0017770 <cleanerTaskFunction(void*)+0xfc>
c00176a7:	83 ec 0c             	sub    esp,0xc
c00176aa:	6a 02                	push   0x2
c00176ac:	e8 6b f9 ff ff       	call   c001701c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00176b1:	83 c4 10             	add    esp,0x10
c00176b4:	c6 05 14 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea14,0x0
c00176bb:	fa                   	cli    
c00176bc:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00176c2:	8b 1d 2c ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea2c
c00176c8:	83 c1 01             	add    ecx,0x1
c00176cb:	83 c3 01             	add    ebx,0x1
c00176ce:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c00176d4:	89 1d 2c ea 02 c0    	mov    DWORD PTR ds:0xc002ea2c,ebx
c00176da:	fa                   	cli    
c00176db:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00176e0:	83 c0 01             	add    eax,0x1
c00176e3:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00176e8:	eb 2a                	jmp    c0017714 <cleanerTaskFunction(void*)+0xa0>
c00176ea:	66 90                	xchg   ax,ax
c00176ec:	83 ec 0c             	sub    esp,0xc
c00176ef:	68 34 ea 02 c0       	push   0xc002ea34
c00176f4:	e8 9f a5 00 00       	call   c0021c98 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00176f9:	c7 04 24 34 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea34
c0017700:	89 c3                	mov    ebx,eax
c0017702:	e8 99 a5 00 00       	call   c0021ca0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017707:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001770a:	e8 89 fc ff ff       	call   c0017398 <cleanupTerminatedTask(ThreadControlBlock*)>
c001770f:	83 c4 10             	add    esp,0x10
c0017712:	66 90                	xchg   ax,ax
c0017714:	83 ec 0c             	sub    esp,0xc
c0017717:	68 34 ea 02 c0       	push   0xc002ea34
c001771c:	e8 5b a5 00 00       	call   c0021c7c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017721:	83 c4 10             	add    esp,0x10
c0017724:	84 c0                	test   al,al
c0017726:	74 c4                	je     c00176ec <cleanerTaskFunction(void*)+0x78>
c0017728:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017730:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0017736:	85 d2                	test   edx,edx
c0017738:	75 02                	jne    c001773c <cleanerTaskFunction(void*)+0xc8>
c001773a:	fb                   	sti    
c001773b:	90                   	nop
c001773c:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0017741:	83 e8 01             	sub    eax,0x1
c0017744:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0017749:	0f 85 29 ff ff ff    	jne    c0017678 <cleanerTaskFunction(void*)+0x4>
c001774f:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0017754:	85 c0                	test   eax,eax
c0017756:	0f 84 1c ff ff ff    	je     c0017678 <cleanerTaskFunction(void*)+0x4>
c001775c:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0017766:	e8 1d f8 ff ff       	call   c0016f88 <schedule()>
c001776b:	e9 08 ff ff ff       	jmp    c0017678 <cleanerTaskFunction(void*)+0x4>
c0017770:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017778:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001777d:	85 c0                	test   eax,eax
c001777f:	0f 85 2f ff ff ff    	jne    c00176b4 <cleanerTaskFunction(void*)+0x40>
c0017785:	fb                   	sti    
c0017786:	e9 29 ff ff ff       	jmp    c00176b4 <cleanerTaskFunction(void*)+0x40>
c001778b:	90                   	nop

c001778c <terminateTask(int)>:
c001778c:	83 ec 14             	sub    esp,0x14
c001778f:	fa                   	cli    
c0017790:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017795:	83 c0 01             	add    eax,0x1
c0017798:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001779d:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c00177a2:	83 c0 01             	add    eax,0x1
c00177a5:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c00177aa:	fa                   	cli    
c00177ab:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00177b0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00177b4:	83 c0 01             	add    eax,0x1
c00177b7:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00177bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177c1:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00177c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177c9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00177cc:	50                   	push   eax
c00177cd:	68 34 ea 02 c0       	push   0xc002ea34
c00177d2:	e8 85 a5 00 00       	call   c0021d5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00177d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177dc:	83 c4 10             	add    esp,0x10
c00177df:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00177e6:	a1 10 ea 02 c0       	mov    eax,ds:0xc002ea10
c00177eb:	85 c0                	test   eax,eax
c00177ed:	0f 84 81 00 00 00    	je     c0017874 <terminateTask(int)+0xe8>
c00177f3:	83 ec 0c             	sub    esp,0xc
c00177f6:	c6 05 14 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea14,0x1
c00177fd:	50                   	push   eax
c00177fe:	e8 e1 fa ff ff       	call   c00172e4 <unblockTask(ThreadControlBlock*)>
c0017803:	83 c4 10             	add    esp,0x10
c0017806:	66 90                	xchg   ax,ax
c0017808:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017810:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017815:	85 c0                	test   eax,eax
c0017817:	75 03                	jne    c001781c <terminateTask(int)+0x90>
c0017819:	fb                   	sti    
c001781a:	66 90                	xchg   ax,ax
c001781c:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0017821:	83 e8 01             	sub    eax,0x1
c0017824:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0017829:	75 09                	jne    c0017834 <terminateTask(int)+0xa8>
c001782b:	83 3d 28 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea28,0x0
c0017832:	75 54                	jne    c0017888 <terminateTask(int)+0xfc>
c0017834:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001783c:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0017842:	85 c9                	test   ecx,ecx
c0017844:	75 06                	jne    c001784c <terminateTask(int)+0xc0>
c0017846:	66 90                	xchg   ax,ax
c0017848:	fb                   	sti    
c0017849:	8d 76 00             	lea    esi,[esi+0x0]
c001784c:	fa                   	cli    
c001784d:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017852:	83 c0 01             	add    eax,0x1
c0017855:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001785a:	e8 29 f7 ff ff       	call   c0016f88 <schedule()>
c001785f:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017867:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c001786d:	85 d2                	test   edx,edx
c001786f:	75 db                	jne    c001784c <terminateTask(int)+0xc0>
c0017871:	eb d5                	jmp    c0017848 <terminateTask(int)+0xbc>
c0017873:	90                   	nop
c0017874:	83 ec 0c             	sub    esp,0xc
c0017877:	68 cb 4f 02 c0       	push   0xc0024fcb
c001787c:	e8 e3 f6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017881:	83 c4 10             	add    esp,0x10
c0017884:	eb 82                	jmp    c0017808 <terminateTask(int)+0x7c>
c0017886:	66 90                	xchg   ax,ax
c0017888:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0017892:	e8 f1 f6 ff ff       	call   c0016f88 <schedule()>
c0017897:	eb 9b                	jmp    c0017834 <terminateTask(int)+0xa8>
c0017899:	8d 76 00             	lea    esi,[esi+0x0]

c001789c <Thr::terminateFromIRQ(int)>:
c001789c:	83 ec 18             	sub    esp,0x18
c001789f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00178a3:	50                   	push   eax
c00178a4:	e8 e3 fe ff ff       	call   c001778c <terminateTask(int)>
c00178a9:	8d 76 00             	lea    esi,[esi+0x0]

c00178ac <__static_initialization_and_destruction_0(int, int)>:
c00178ac:	83 ec 0c             	sub    esp,0xc
c00178af:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00178b4:	0f 85 8e 00 00 00    	jne    c0017948 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00178ba:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00178c2:	0f 85 80 00 00 00    	jne    c0017948 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00178c8:	83 ec 0c             	sub    esp,0xc
c00178cb:	68 4c ea 02 c0       	push   0xc002ea4c
c00178d0:	e8 27 a9 00 00       	call   c00221fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00178d5:	83 c4 10             	add    esp,0x10
c00178d8:	83 ec 04             	sub    esp,0x4
c00178db:	68 d8 60 02 c0       	push   0xc00260d8
c00178e0:	68 4c ea 02 c0       	push   0xc002ea4c
c00178e5:	68 ac 21 02 c0       	push   0xc00221ac
c00178ea:	e8 14 5a ff ff       	call   c000d303 <__cxa_atexit>
c00178ef:	83 c4 10             	add    esp,0x10
c00178f2:	83 ec 0c             	sub    esp,0xc
c00178f5:	68 40 ea 02 c0       	push   0xc002ea40
c00178fa:	e8 fd a8 00 00       	call   c00221fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00178ff:	83 c4 10             	add    esp,0x10
c0017902:	83 ec 04             	sub    esp,0x4
c0017905:	68 d8 60 02 c0       	push   0xc00260d8
c001790a:	68 40 ea 02 c0       	push   0xc002ea40
c001790f:	68 ac 21 02 c0       	push   0xc00221ac
c0017914:	e8 ea 59 ff ff       	call   c000d303 <__cxa_atexit>
c0017919:	83 c4 10             	add    esp,0x10
c001791c:	83 ec 0c             	sub    esp,0xc
c001791f:	68 34 ea 02 c0       	push   0xc002ea34
c0017924:	e8 d3 a8 00 00       	call   c00221fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017929:	83 c4 10             	add    esp,0x10
c001792c:	83 ec 04             	sub    esp,0x4
c001792f:	68 d8 60 02 c0       	push   0xc00260d8
c0017934:	68 34 ea 02 c0       	push   0xc002ea34
c0017939:	68 ac 21 02 c0       	push   0xc00221ac
c001793e:	e8 c0 59 ff ff       	call   c000d303 <__cxa_atexit>
c0017943:	83 c4 10             	add    esp,0x10
c0017946:	66 90                	xchg   ax,ax
c0017948:	90                   	nop
c0017949:	83 c4 0c             	add    esp,0xc
c001794c:	c3                   	ret    
c001794d:	8d 76 00             	lea    esi,[esi+0x0]

c0017950 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0017950:	83 ec 0c             	sub    esp,0xc
c0017953:	83 ec 08             	sub    esp,0x8
c0017956:	68 ff ff 00 00       	push   0xffff
c001795b:	6a 01                	push   0x1
c001795d:	e8 4a ff ff ff       	call   c00178ac <__static_initialization_and_destruction_0(int, int)>
c0017962:	83 c4 10             	add    esp,0x10
c0017965:	83 c4 0c             	add    esp,0xc
c0017968:	c3                   	ret    

c0017969 <Vm::inbv(unsigned short)>:
c0017969:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001796d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017972:	75 06                	jne    c001797a <Vm::inbv(unsigned short)+0x11>
c0017974:	a0 90 ea 02 c0       	mov    al,ds:0xc002ea90
c0017979:	c3                   	ret    
c001797a:	ec                   	in     al,dx
c001797b:	c3                   	ret    

c001797c <Vm::outbv(unsigned short, unsigned char)>:
c001797c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017980:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017984:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017989:	75 25                	jne    c00179b0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001798b:	8b 0d 90 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea90
c0017991:	8d 51 01             	lea    edx,[ecx+0x1]
c0017994:	88 81 a0 ea 02 c0    	mov    BYTE PTR [ecx-0x3ffd1560],al
c001799a:	89 15 90 ea 02 c0    	mov    DWORD PTR ds:0xc002ea90,edx
c00179a0:	83 fa 20             	cmp    edx,0x20
c00179a3:	75 0c                	jne    c00179b1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00179a5:	c7 05 90 ea 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x1f
c00179af:	c3                   	ret    
c00179b0:	ee                   	out    dx,al
c00179b1:	c3                   	ret    

c00179b2 <Vm::realToLinear(unsigned short, unsigned short)>:
c00179b2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00179b7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00179bc:	c1 e0 04             	shl    eax,0x4
c00179bf:	01 d0                	add    eax,edx
c00179c1:	c3                   	ret    

c00179c2 <Vm::getSegment(unsigned int)>:
c00179c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179c6:	c1 e8 10             	shr    eax,0x10
c00179c9:	c3                   	ret    

c00179ca <Vm::getOffset(unsigned int)>:
c00179ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179ce:	c3                   	ret    

c00179cf <Vm::mainloop2()>:
c00179cf:	83 ec 18             	sub    esp,0x18
c00179d2:	fa                   	cli    
c00179d3:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00179d9:	6a 02                	push   0x2
c00179db:	c6 05 89 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea89,0x1
c00179e2:	e8 35 f6 ff ff       	call   c001701c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00179e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00179ec:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c00179f0:	52                   	push   edx
c00179f1:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c00179f5:	52                   	push   edx
c00179f6:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00179fa:	52                   	push   edx
c00179fb:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c00179ff:	50                   	push   eax
c0017a00:	e8 0a 88 fe ff       	call   c000020f <goToVM86>
c0017a05:	83 c4 2c             	add    esp,0x2c
c0017a08:	c3                   	ret    

c0017a09 <Vm::mainVm8086Loop(void*)>:
c0017a09:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017a10:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017a17:	75 01                	jne    c0017a1a <Vm::mainVm8086Loop(void*)+0x11>
c0017a19:	fb                   	sti    
c0017a1a:	eb b3                	jmp    c00179cf <Vm::mainloop2()>

c0017a1c <Vm::mainloop3(unsigned long)>:
c0017a1c:	83 ec 18             	sub    esp,0x18
c0017a1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a23:	fa                   	cli    
c0017a24:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017a2a:	6a 02                	push   0x2
c0017a2c:	c6 05 88 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea88,0x1
c0017a33:	a3 84 ea 02 c0       	mov    ds:0xc002ea84,eax
c0017a38:	e8 df f5 ff ff       	call   c001701c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017a3d:	83 c4 1c             	add    esp,0x1c
c0017a40:	eb 8d                	jmp    c00179cf <Vm::mainloop2()>

c0017a42 <Vm::initialise8086()>:
c0017a42:	83 ec 0c             	sub    esp,0xc
c0017a45:	68 80 00 00 00       	push   0x80
c0017a4a:	6a 00                	push   0x0
c0017a4c:	68 09 7a 01 c0       	push   0xc0017a09
c0017a51:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0017a57:	e8 94 f2 ff ff       	call   c0016cf0 <Process::createThread(void (*)(void*), void*, int)>
c0017a5c:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0017a63:	a3 8c ea 02 c0       	mov    ds:0xc002ea8c,eax
c0017a68:	68 10 01 00 00       	push   0x110
c0017a6d:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0017a72:	6a 00                	push   0x0
c0017a74:	6a 00                	push   0x0
c0017a76:	ff b0 72 05 00 00    	push   DWORD PTR [eax+0x572]
c0017a7c:	e8 49 c3 ff ff       	call   c0013dca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017a81:	83 c4 2c             	add    esp,0x2c
c0017a84:	c3                   	ret    

c0017a85 <Vm::resetConventionalMemory8086()>:
c0017a85:	c3                   	ret    

c0017a86 <Vm::finish8086()>:
c0017a86:	53                   	push   ebx
c0017a87:	83 ec 08             	sub    esp,0x8
c0017a8a:	fa                   	cli    
c0017a8b:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017a91:	80 3d 88 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea88,0x0
c0017a98:	75 18                	jne    c0017ab2 <Vm::finish8086()+0x2c>
c0017a9a:	e8 e9 f4 ff ff       	call   c0016f88 <schedule()>
c0017a9f:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017aa6:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017aad:	75 db                	jne    c0017a8a <Vm::finish8086()+0x4>
c0017aaf:	fb                   	sti    
c0017ab0:	eb d8                	jmp    c0017a8a <Vm::finish8086()+0x4>
c0017ab2:	83 ec 0c             	sub    esp,0xc
c0017ab5:	8b 1d 84 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea84
c0017abb:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c0017ac1:	c6 05 88 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea88,0x0
c0017ac8:	e8 17 f8 ff ff       	call   c00172e4 <unblockTask(ThreadControlBlock*)>
c0017acd:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017ad4:	83 c4 10             	add    esp,0x10
c0017ad7:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017ade:	75 01                	jne    c0017ae1 <Vm::finish8086()+0x5b>
c0017ae0:	fb                   	sti    
c0017ae1:	89 d8                	mov    eax,ebx
c0017ae3:	83 c4 08             	add    esp,0x8
c0017ae6:	5b                   	pop    ebx
c0017ae7:	c3                   	ret    

c0017ae8 <Vm::getOutput8086(unsigned char*)>:
c0017ae8:	57                   	push   edi
c0017ae9:	8b 0d 90 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea90
c0017aef:	56                   	push   esi
c0017af0:	be a0 ea 02 c0       	mov    esi,0xc002eaa0
c0017af5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0017af9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017afb:	a1 90 ea 02 c0       	mov    eax,ds:0xc002ea90
c0017b00:	5e                   	pop    esi
c0017b01:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c0017b0b:	5f                   	pop    edi
c0017b0c:	c3                   	ret    

c0017b0d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017b0d:	55                   	push   ebp
c0017b0e:	57                   	push   edi
c0017b0f:	56                   	push   esi
c0017b10:	53                   	push   ebx
c0017b11:	83 ec 2c             	sub    esp,0x2c
c0017b14:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017b18:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017b1c:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017b20:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0017b24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b28:	80 3d 80 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea80,0x0
c0017b2f:	75 5d                	jne    c0017b8e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017b31:	83 ec 0c             	sub    esp,0xc
c0017b34:	68 14 01 00 00       	push   0x114
c0017b39:	e8 8d 81 ff ff       	call   c000fccb <malloc>
c0017b3e:	83 c4 0c             	add    esp,0xc
c0017b41:	89 c7                	mov    edi,eax
c0017b43:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0017b49:	68 e4 50 02 c0       	push   0xc00250e4
c0017b4e:	50                   	push   eax
c0017b4f:	e8 de 05 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0017b54:	58                   	pop    eax
c0017b55:	5a                   	pop    edx
c0017b56:	6a 12                	push   0x12
c0017b58:	57                   	push   edi
c0017b59:	e8 f2 05 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0017b5e:	59                   	pop    ecx
c0017b5f:	8b 07                	mov    eax,DWORD PTR [edi]
c0017b61:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017b65:	51                   	push   ecx
c0017b66:	6a 00                	push   0x0
c0017b68:	6a 00                	push   0x0
c0017b6a:	68 00 00 11 00       	push   0x110000
c0017b6f:	57                   	push   edi
c0017b70:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017b73:	83 c4 14             	add    esp,0x14
c0017b76:	57                   	push   edi
c0017b77:	e8 32 06 ff ff       	call   c00081ae <File::close()>
c0017b7c:	8b 07                	mov    eax,DWORD PTR [edi]
c0017b7e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017b81:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017b84:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c0017b8b:	83 c4 10             	add    esp,0x10
c0017b8e:	fa                   	cli    
c0017b8f:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017b95:	80 3d 89 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea89,0x0
c0017b9c:	75 18                	jne    c0017bb6 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0017b9e:	e8 e5 f3 ff ff       	call   c0016f88 <schedule()>
c0017ba3:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017baa:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017bb1:	75 db                	jne    c0017b8e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017bb3:	fb                   	sti    
c0017bb4:	eb d8                	jmp    c0017b8e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017bb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bba:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0017bbf:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c0017bc9:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c0017bcd:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0017bd1:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c0017bd5:	66 89 50 5f          	mov    WORD PTR [eax+0x5f],dx
c0017bd9:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017bdd:	0f b7 f6             	movzx  esi,si
c0017be0:	0f b7 db             	movzx  ebx,bx
c0017be3:	50                   	push   eax
c0017be4:	6a 20                	push   0x20
c0017be6:	6a 00                	push   0x0
c0017be8:	68 a0 ea 02 c0       	push   0xc002eaa0
c0017bed:	e8 fe 88 fe ff       	call   c00004f0 <memset>
c0017bf2:	5a                   	pop    edx
c0017bf3:	59                   	pop    ecx
c0017bf4:	56                   	push   esi
c0017bf5:	53                   	push   ebx
c0017bf6:	e8 b7 fd ff ff       	call   c00179b2 <Vm::realToLinear(unsigned short, unsigned short)>
c0017bfb:	83 c4 10             	add    esp,0x10
c0017bfe:	89 c7                	mov    edi,eax
c0017c00:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017c04:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0017c08:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017c0a:	c6 05 89 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea89,0x0
c0017c11:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017c18:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017c1f:	75 01                	jne    c0017c22 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c0017c21:	fb                   	sti    
c0017c22:	83 ec 0c             	sub    esp,0xc
c0017c25:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c0017c2b:	e8 b4 f6 ff ff       	call   c00172e4 <unblockTask(ThreadControlBlock*)>
c0017c30:	83 c4 3c             	add    esp,0x3c
c0017c33:	b0 01                	mov    al,0x1
c0017c35:	5b                   	pop    ebx
c0017c36:	5e                   	pop    esi
c0017c37:	5f                   	pop    edi
c0017c38:	5d                   	pop    ebp
c0017c39:	c3                   	ret    

c0017c3a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0017c3a:	55                   	push   ebp
c0017c3b:	57                   	push   edi
c0017c3c:	56                   	push   esi
c0017c3d:	53                   	push   ebx
c0017c3e:	83 ec 2c             	sub    esp,0x2c
c0017c41:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017c45:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017c49:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017c4d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017c51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c55:	80 3d 80 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea80,0x0
c0017c5c:	75 5d                	jne    c0017cbb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017c5e:	83 ec 0c             	sub    esp,0xc
c0017c61:	68 14 01 00 00       	push   0x114
c0017c66:	e8 60 80 ff ff       	call   c000fccb <malloc>
c0017c6b:	83 c4 0c             	add    esp,0xc
c0017c6e:	89 c6                	mov    esi,eax
c0017c70:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0017c76:	68 e4 50 02 c0       	push   0xc00250e4
c0017c7b:	50                   	push   eax
c0017c7c:	e8 b1 04 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0017c81:	58                   	pop    eax
c0017c82:	5a                   	pop    edx
c0017c83:	6a 12                	push   0x12
c0017c85:	56                   	push   esi
c0017c86:	e8 c5 04 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0017c8b:	59                   	pop    ecx
c0017c8c:	8b 06                	mov    eax,DWORD PTR [esi]
c0017c8e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017c92:	52                   	push   edx
c0017c93:	6a 00                	push   0x0
c0017c95:	6a 00                	push   0x0
c0017c97:	68 00 00 11 00       	push   0x110000
c0017c9c:	56                   	push   esi
c0017c9d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017ca0:	83 c4 14             	add    esp,0x14
c0017ca3:	56                   	push   esi
c0017ca4:	e8 05 05 ff ff       	call   c00081ae <File::close()>
c0017ca9:	8b 06                	mov    eax,DWORD PTR [esi]
c0017cab:	89 34 24             	mov    DWORD PTR [esp],esi
c0017cae:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017cb1:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c0017cb8:	83 c4 10             	add    esp,0x10
c0017cbb:	50                   	push   eax
c0017cbc:	50                   	push   eax
c0017cbd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017cc1:	68 ff 50 02 c0       	push   0xc00250ff
c0017cc6:	e8 99 f2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017ccb:	83 c4 10             	add    esp,0x10
c0017cce:	fa                   	cli    
c0017ccf:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017cd5:	0f b6 35 89 ea 02 c0 	movzx  esi,BYTE PTR ds:0xc002ea89
c0017cdc:	89 f0                	mov    eax,esi
c0017cde:	84 c0                	test   al,al
c0017ce0:	75 18                	jne    c0017cfa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c0017ce2:	e8 a1 f2 ff ff       	call   c0016f88 <schedule()>
c0017ce7:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017cee:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017cf5:	75 d7                	jne    c0017cce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0017cf7:	fb                   	sti    
c0017cf8:	eb d4                	jmp    c0017cce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0017cfa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017cfe:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c0017d03:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c0017d0d:	66 89 48 5f          	mov    WORD PTR [eax+0x5f],cx
c0017d11:	66 89 58 5d          	mov    WORD PTR [eax+0x5d],bx
c0017d15:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c0017d19:	66 89 68 5b          	mov    WORD PTR [eax+0x5b],bp
c0017d1d:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0017d21:	50                   	push   eax
c0017d22:	6a 20                	push   0x20
c0017d24:	6a 00                	push   0x0
c0017d26:	68 a0 ea 02 c0       	push   0xc002eaa0
c0017d2b:	e8 c0 87 fe ff       	call   c00004f0 <memset>
c0017d30:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017d37:	e8 8f 7f ff ff       	call   c000fccb <malloc>
c0017d3c:	83 c4 0c             	add    esp,0xc
c0017d3f:	89 c3                	mov    ebx,eax
c0017d41:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0017d47:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017d4b:	50                   	push   eax
c0017d4c:	e8 e1 03 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0017d51:	83 c4 10             	add    esp,0x10
c0017d54:	85 db                	test   ebx,ebx
c0017d56:	75 0a                	jne    c0017d62 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x128>
c0017d58:	83 ec 0c             	sub    esp,0xc
c0017d5b:	68 21 51 02 c0       	push   0xc0025121
c0017d60:	eb 2b                	jmp    c0017d8d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x153>
c0017d62:	50                   	push   eax
c0017d63:	8d 44 24 17          	lea    eax,[esp+0x17]
c0017d67:	50                   	push   eax
c0017d68:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017d6c:	50                   	push   eax
c0017d6d:	53                   	push   ebx
c0017d6e:	e8 df 06 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0017d73:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017d77:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017d7b:	83 c4 10             	add    esp,0x10
c0017d7e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0017d83:	74 28                	je     c0017dad <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x173>
c0017d85:	83 ec 0c             	sub    esp,0xc
c0017d88:	68 35 51 02 c0       	push   0xc0025135
c0017d8d:	e8 80 82 ff ff       	call   c0010012 <KePanic(char const*)>
c0017d92:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017d99:	83 c4 10             	add    esp,0x10
c0017d9c:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017da3:	75 01                	jne    c0017da6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0017da5:	fb                   	sti    
c0017da6:	31 f6                	xor    esi,esi
c0017da8:	e9 91 00 00 00       	jmp    c0017e3e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c0017dad:	51                   	push   ecx
c0017dae:	51                   	push   ecx
c0017daf:	6a 01                	push   0x1
c0017db1:	53                   	push   ebx
c0017db2:	e8 99 03 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0017db7:	83 c4 10             	add    esp,0x10
c0017dba:	85 c0                	test   eax,eax
c0017dbc:	74 27                	je     c0017de5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ab>
c0017dbe:	83 ec 0c             	sub    esp,0xc
c0017dc1:	68 4e 51 02 c0       	push   0xc002514e
c0017dc6:	e8 47 82 ff ff       	call   c0010012 <KePanic(char const*)>
c0017dcb:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017dd2:	83 c4 10             	add    esp,0x10
c0017dd5:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017ddc:	75 c8                	jne    c0017da6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0017dde:	fb                   	sti    
c0017ddf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0017de3:	eb 59                	jmp    c0017e3e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c0017de5:	0f b7 ff             	movzx  edi,di
c0017de8:	50                   	push   eax
c0017de9:	50                   	push   eax
c0017dea:	0f b7 c5             	movzx  eax,bp
c0017ded:	57                   	push   edi
c0017dee:	50                   	push   eax
c0017def:	e8 be fb ff ff       	call   c00179b2 <Vm::realToLinear(unsigned short, unsigned short)>
c0017df4:	5a                   	pop    edx
c0017df5:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017df7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0017dfb:	51                   	push   ecx
c0017dfc:	50                   	push   eax
c0017dfd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017e01:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017e05:	53                   	push   ebx
c0017e06:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0017e09:	83 c4 14             	add    esp,0x14
c0017e0c:	53                   	push   ebx
c0017e0d:	e8 9c 03 ff ff       	call   c00081ae <File::close()>
c0017e12:	c6 05 89 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea89,0x0
c0017e19:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017e20:	83 c4 10             	add    esp,0x10
c0017e23:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017e2a:	75 01                	jne    c0017e2d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f3>
c0017e2c:	fb                   	sti    
c0017e2d:	83 ec 0c             	sub    esp,0xc
c0017e30:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c0017e36:	e8 a9 f4 ff ff       	call   c00172e4 <unblockTask(ThreadControlBlock*)>
c0017e3b:	83 c4 10             	add    esp,0x10
c0017e3e:	83 c4 2c             	add    esp,0x2c
c0017e41:	89 f0                	mov    eax,esi
c0017e43:	5b                   	pop    ebx
c0017e44:	5e                   	pop    esi
c0017e45:	5f                   	pop    edi
c0017e46:	5d                   	pop    ebp
c0017e47:	c3                   	ret    

c0017e48 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017e48:	57                   	push   edi
c0017e49:	56                   	push   esi
c0017e4a:	53                   	push   ebx
c0017e4b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017e4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e57:	83 e8 06             	sub    eax,0x6
c0017e5a:	0f b7 c0             	movzx  eax,ax
c0017e5d:	50                   	push   eax
c0017e5e:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017e63:	50                   	push   eax
c0017e64:	e8 49 fb ff ff       	call   c00179b2 <Vm::realToLinear(unsigned short, unsigned short)>
c0017e69:	5a                   	pop    edx
c0017e6a:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017e6d:	59                   	pop    ecx
c0017e6e:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017e71:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017e74:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017e7a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017e7d:	8d 56 02             	lea    edx,[esi+0x2]
c0017e80:	66 89 10             	mov    WORD PTR [eax],dx
c0017e83:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0017e87:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017e8b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017e8e:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0017e92:	0f b6 f1             	movzx  esi,cl
c0017e95:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017e99:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017e9f:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c0017ea3:	0f b6 d5             	movzx  edx,ch
c0017ea6:	74 0a                	je     c0017eb2 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0017ea8:	c1 e2 08             	shl    edx,0x8
c0017eab:	09 f2                	or     edx,esi
c0017ead:	80 ce 02             	or     dh,0x2
c0017eb0:	eb 08                	jmp    c0017eba <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0017eb2:	c1 e2 08             	shl    edx,0x8
c0017eb5:	09 f2                	or     edx,esi
c0017eb7:	80 e6 fd             	and    dh,0xfd
c0017eba:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017ebe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ec3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0017ec7:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017ecf:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017ed2:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017eda:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017edd:	5b                   	pop    ebx
c0017ede:	5e                   	pop    esi
c0017edf:	5f                   	pop    edi
c0017ee0:	c3                   	ret    

c0017ee1 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017ee1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017ee6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017eeb:	c1 e0 04             	shl    eax,0x4
c0017eee:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017ef1:	c3                   	ret    

c0017ef2 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017ef2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017ef7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017efc:	c1 e0 04             	shl    eax,0x4
c0017eff:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017f03:	c3                   	ret    

c0017f04 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017f04:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017f09:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017f0e:	c1 e0 04             	shl    eax,0x4
c0017f11:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017f14:	c3                   	ret    

c0017f15 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017f15:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017f1a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017f1f:	c1 e0 04             	shl    eax,0x4
c0017f22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017f26:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017f29:	c3                   	ret    

c0017f2a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017f2a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017f2f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017f34:	c1 e0 04             	shl    eax,0x4
c0017f37:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017f3b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017f3f:	c3                   	ret    

c0017f40 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017f40:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017f45:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017f4a:	c1 e0 04             	shl    eax,0x4
c0017f4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017f51:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017f54:	c3                   	ret    

c0017f55 <Vm::faultHandler(regs*)>:
c0017f55:	55                   	push   ebp
c0017f56:	57                   	push   edi
c0017f57:	56                   	push   esi
c0017f58:	53                   	push   ebx
c0017f59:	83 ec 2c             	sub    esp,0x2c
c0017f5c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017f60:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017f63:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017f67:	0f b7 f8             	movzx  edi,ax
c0017f6a:	52                   	push   edx
c0017f6b:	0f b7 c0             	movzx  eax,ax
c0017f6e:	50                   	push   eax
c0017f6f:	e8 3e fa ff ff       	call   c00179b2 <Vm::realToLinear(unsigned short, unsigned short)>
c0017f74:	5a                   	pop    edx
c0017f75:	59                   	pop    ecx
c0017f76:	89 c1                	mov    ecx,eax
c0017f78:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017f7b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f7f:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0017f84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f88:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017f8b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017f8f:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0017f94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017f98:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017f9c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017fa0:	e8 0d fa ff ff       	call   c00179b2 <Vm::realToLinear(unsigned short, unsigned short)>
c0017fa5:	5e                   	pop    esi
c0017fa6:	be 06 00 00 00       	mov    esi,0x6
c0017fab:	5d                   	pop    ebp
c0017fac:	31 ed                	xor    ebp,ebp
c0017fae:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017fb3:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017fb6:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017fbc:	0f 84 74 02 00 00    	je     c0018236 <Vm::faultHandler(regs*)+0x2e1>
c0017fc2:	0f 87 94 00 00 00    	ja     c001805c <Vm::faultHandler(regs*)+0x107>
c0017fc8:	83 fa 66             	cmp    edx,0x66
c0017fcb:	0f 84 e2 01 00 00    	je     c00181b3 <Vm::faultHandler(regs*)+0x25e>
c0017fd1:	77 47                	ja     c001801a <Vm::faultHandler(regs*)+0xc5>
c0017fd3:	83 fa 36             	cmp    edx,0x36
c0017fd6:	0f 84 ca 01 00 00    	je     c00181a6 <Vm::faultHandler(regs*)+0x251>
c0017fdc:	77 1a                	ja     c0017ff8 <Vm::faultHandler(regs*)+0xa3>
c0017fde:	83 fa 26             	cmp    edx,0x26
c0017fe1:	0f 84 98 01 00 00    	je     c001817f <Vm::faultHandler(regs*)+0x22a>
c0017fe7:	83 fa 2e             	cmp    edx,0x2e
c0017fea:	0f 85 21 06 00 00    	jne    c0018611 <Vm::faultHandler(regs*)+0x6bc>
c0017ff0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017ff3:	31 f6                	xor    esi,esi
c0017ff5:	41                   	inc    ecx
c0017ff6:	eb bb                	jmp    c0017fb3 <Vm::faultHandler(regs*)+0x5e>
c0017ff8:	83 fa 64             	cmp    edx,0x64
c0017ffb:	0f 84 8b 01 00 00    	je     c001818c <Vm::faultHandler(regs*)+0x237>
c0018001:	0f 87 92 01 00 00    	ja     c0018199 <Vm::faultHandler(regs*)+0x244>
c0018007:	83 fa 3e             	cmp    edx,0x3e
c001800a:	0f 85 01 06 00 00    	jne    c0018611 <Vm::faultHandler(regs*)+0x6bc>
c0018010:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018013:	be 01 00 00 00       	mov    esi,0x1
c0018018:	eb db                	jmp    c0017ff5 <Vm::faultHandler(regs*)+0xa0>
c001801a:	83 fa 6d             	cmp    edx,0x6d
c001801d:	0f 84 34 03 00 00    	je     c0018357 <Vm::faultHandler(regs*)+0x402>
c0018023:	77 17                	ja     c001803c <Vm::faultHandler(regs*)+0xe7>
c0018025:	83 fa 67             	cmp    edx,0x67
c0018028:	0f 84 92 01 00 00    	je     c00181c0 <Vm::faultHandler(regs*)+0x26b>
c001802e:	83 fa 6c             	cmp    edx,0x6c
c0018031:	0f 84 b1 02 00 00    	je     c00182e8 <Vm::faultHandler(regs*)+0x393>
c0018037:	e9 d5 05 00 00       	jmp    c0018611 <Vm::faultHandler(regs*)+0x6bc>
c001803c:	83 fa 6f             	cmp    edx,0x6f
c001803f:	0f 84 3d 04 00 00    	je     c0018482 <Vm::faultHandler(regs*)+0x52d>
c0018045:	0f 82 9f 03 00 00    	jb     c00183ea <Vm::faultHandler(regs*)+0x495>
c001804b:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0018051:	0f 84 76 01 00 00    	je     c00181cd <Vm::faultHandler(regs*)+0x278>
c0018057:	e9 b5 05 00 00       	jmp    c0018611 <Vm::faultHandler(regs*)+0x6bc>
c001805c:	81 fa ec 00 00 00    	cmp    edx,0xec
c0018062:	0f 84 51 05 00 00    	je     c00185b9 <Vm::faultHandler(regs*)+0x664>
c0018068:	0f 87 a9 00 00 00    	ja     c0018117 <Vm::faultHandler(regs*)+0x1c2>
c001806e:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0018074:	0f 84 d0 04 00 00    	je     c001854a <Vm::faultHandler(regs*)+0x5f5>
c001807a:	77 78                	ja     c00180f4 <Vm::faultHandler(regs*)+0x19f>
c001807c:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0018082:	0f 84 0e 02 00 00    	je     c0018296 <Vm::faultHandler(regs*)+0x341>
c0018088:	81 fa cf 00 00 00    	cmp    edx,0xcf
c001808e:	0f 85 7d 05 00 00    	jne    c0018611 <Vm::faultHandler(regs*)+0x6bc>
c0018094:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0018098:	89 d1                	mov    ecx,edx
c001809a:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c001809d:	c1 e1 08             	shl    ecx,0x8
c00180a0:	09 ca                	or     edx,ecx
c00180a2:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00180a5:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00180a9:	89 d1                	mov    ecx,edx
c00180ab:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00180af:	c1 e1 08             	shl    ecx,0x8
c00180b2:	09 ca                	or     edx,ecx
c00180b4:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00180b7:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00180bb:	89 d1                	mov    ecx,edx
c00180bd:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00180c1:	c1 e1 08             	shl    ecx,0x8
c00180c4:	09 ca                	or     edx,ecx
c00180c6:	81 ca 00 02 02 00    	or     edx,0x20200
c00180cc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00180cf:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00180d3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00180d9:	d1 e8                	shr    eax,1
c00180db:	83 e0 01             	and    eax,0x1
c00180de:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00180e1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00180e4:	83 c0 06             	add    eax,0x6
c00180e7:	25 ff ff 00 00       	and    eax,0xffff
c00180ec:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00180ef:	e9 19 05 00 00       	jmp    c001860d <Vm::faultHandler(regs*)+0x6b8>
c00180f4:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00180fa:	0f 84 8f 04 00 00    	je     c001858f <Vm::faultHandler(regs*)+0x63a>
c0018100:	0f 82 60 04 00 00    	jb     c0018566 <Vm::faultHandler(regs*)+0x611>
c0018106:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001810c:	0f 84 94 04 00 00    	je     c00185a6 <Vm::faultHandler(regs*)+0x651>
c0018112:	e9 fa 04 00 00       	jmp    c0018611 <Vm::faultHandler(regs*)+0x6bc>
c0018117:	81 fa ef 00 00 00    	cmp    edx,0xef
c001811d:	0f 84 d7 04 00 00    	je     c00185fa <Vm::faultHandler(regs*)+0x6a5>
c0018123:	77 2e                	ja     c0018153 <Vm::faultHandler(regs*)+0x1fe>
c0018125:	81 fa ed 00 00 00    	cmp    edx,0xed
c001812b:	0f 84 a4 04 00 00    	je     c00185d5 <Vm::faultHandler(regs*)+0x680>
c0018131:	81 fa ee 00 00 00    	cmp    edx,0xee
c0018137:	0f 85 d4 04 00 00    	jne    c0018611 <Vm::faultHandler(regs*)+0x6bc>
c001813d:	50                   	push   eax
c001813e:	50                   	push   eax
c001813f:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018143:	50                   	push   eax
c0018144:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018148:	50                   	push   eax
c0018149:	e8 2e f8 ff ff       	call   c001797c <Vm::outbv(unsigned short, unsigned char)>
c001814e:	e9 9f 04 00 00       	jmp    c00185f2 <Vm::faultHandler(regs*)+0x69d>
c0018153:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0018159:	0f 84 6d 01 00 00    	je     c00182cc <Vm::faultHandler(regs*)+0x377>
c001815f:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0018165:	0f 84 6f 01 00 00    	je     c00182da <Vm::faultHandler(regs*)+0x385>
c001816b:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0018171:	0f 85 9a 04 00 00    	jne    c0018611 <Vm::faultHandler(regs*)+0x6bc>
c0018177:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001817a:	e9 76 fe ff ff       	jmp    c0017ff5 <Vm::faultHandler(regs*)+0xa0>
c001817f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018182:	be 02 00 00 00       	mov    esi,0x2
c0018187:	e9 69 fe ff ff       	jmp    c0017ff5 <Vm::faultHandler(regs*)+0xa0>
c001818c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001818f:	be 03 00 00 00       	mov    esi,0x3
c0018194:	e9 5c fe ff ff       	jmp    c0017ff5 <Vm::faultHandler(regs*)+0xa0>
c0018199:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001819c:	be 04 00 00 00       	mov    esi,0x4
c00181a1:	e9 4f fe ff ff       	jmp    c0017ff5 <Vm::faultHandler(regs*)+0xa0>
c00181a6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00181a9:	be 05 00 00 00       	mov    esi,0x5
c00181ae:	e9 42 fe ff ff       	jmp    c0017ff5 <Vm::faultHandler(regs*)+0xa0>
c00181b3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00181b6:	bd 01 00 00 00       	mov    ebp,0x1
c00181bb:	e9 35 fe ff ff       	jmp    c0017ff5 <Vm::faultHandler(regs*)+0xa0>
c00181c0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00181c3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00181c8:	e9 28 fe ff ff       	jmp    c0017ff5 <Vm::faultHandler(regs*)+0xa0>
c00181cd:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00181d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00181d4:	83 e5 01             	and    ebp,0x1
c00181d7:	74 30                	je     c0018209 <Vm::faultHandler(regs*)+0x2b4>
c00181d9:	83 e9 04             	sub    ecx,0x4
c00181dc:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00181e2:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00181e8:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00181eb:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00181ee:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00181f4:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00181f8:	0f 84 0c 04 00 00    	je     c001860a <Vm::faultHandler(regs*)+0x6b5>
c00181fe:	80 ce 02             	or     dh,0x2
c0018201:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018204:	e9 01 04 00 00       	jmp    c001860a <Vm::faultHandler(regs*)+0x6b5>
c0018209:	83 e9 02             	sub    ecx,0x2
c001820c:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018212:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018215:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018219:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001821f:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018223:	74 05                	je     c001822a <Vm::faultHandler(regs*)+0x2d5>
c0018225:	80 ce 02             	or     dh,0x2
c0018228:	eb 03                	jmp    c001822d <Vm::faultHandler(regs*)+0x2d8>
c001822a:	80 e6 fd             	and    dh,0xfd
c001822d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018231:	e9 d4 03 00 00       	jmp    c001860a <Vm::faultHandler(regs*)+0x6b5>
c0018236:	83 e5 01             	and    ebp,0x1
c0018239:	74 2a                	je     c0018265 <Vm::faultHandler(regs*)+0x310>
c001823b:	8b 10                	mov    edx,DWORD PTR [eax]
c001823d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018243:	81 ca 00 02 02 00    	or     edx,0x20200
c0018249:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001824c:	8b 00                	mov    eax,DWORD PTR [eax]
c001824e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018254:	c1 e8 09             	shr    eax,0x9
c0018257:	83 e0 01             	and    eax,0x1
c001825a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001825d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018260:	83 c0 04             	add    eax,0x4
c0018263:	eb 24                	jmp    c0018289 <Vm::faultHandler(regs*)+0x334>
c0018265:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018268:	81 ca 00 02 02 00    	or     edx,0x20200
c001826e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018271:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0018274:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001827a:	c1 e8 09             	shr    eax,0x9
c001827d:	83 e0 01             	and    eax,0x1
c0018280:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018283:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018286:	83 c0 02             	add    eax,0x2
c0018289:	25 ff ff 00 00       	and    eax,0xffff
c001828e:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018291:	e9 74 03 00 00       	jmp    c001860a <Vm::faultHandler(regs*)+0x6b5>
c0018296:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001829a:	3d ee 00 00 00       	cmp    eax,0xee
c001829f:	75 10                	jne    c00182b1 <Vm::faultHandler(regs*)+0x35c>
c00182a1:	83 ec 0c             	sub    esp,0xc
c00182a4:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00182a7:	e8 70 f7 ff ff       	call   c0017a1c <Vm::mainloop3(unsigned long)>
c00182ac:	e9 44 03 00 00       	jmp    c00185f5 <Vm::faultHandler(regs*)+0x6a0>
c00182b1:	83 ec 0c             	sub    esp,0xc
c00182b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00182b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182bc:	51                   	push   ecx
c00182bd:	50                   	push   eax
c00182be:	53                   	push   ebx
c00182bf:	e8 84 fb ff ff       	call   c0017e48 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00182c4:	83 c4 20             	add    esp,0x20
c00182c7:	e9 41 03 00 00       	jmp    c001860d <Vm::faultHandler(regs*)+0x6b8>
c00182cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182d1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00182d5:	e9 30 03 00 00       	jmp    c001860a <Vm::faultHandler(regs*)+0x6b5>
c00182da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182df:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c00182e3:	e9 22 03 00 00       	jmp    c001860a <Vm::faultHandler(regs*)+0x6b5>
c00182e8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00182eb:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00182f0:	74 2b                	je     c001831d <Vm::faultHandler(regs*)+0x3c8>
c00182f2:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00182f9:	76 22                	jbe    c001831d <Vm::faultHandler(regs*)+0x3c8>
c00182fb:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00182ff:	50                   	push   eax
c0018300:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018304:	50                   	push   eax
c0018305:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018309:	50                   	push   eax
c001830a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001830e:	50                   	push   eax
c001830f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018313:	50                   	push   eax
c0018314:	6a 6c                	push   0x6c
c0018316:	6a 6c                	push   0x6c
c0018318:	e9 bd 01 00 00       	jmp    c00184da <Vm::faultHandler(regs*)+0x585>
c001831d:	83 ec 0c             	sub    esp,0xc
c0018320:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018324:	0f b7 f6             	movzx  esi,si
c0018327:	50                   	push   eax
c0018328:	e8 3c f6 ff ff       	call   c0017969 <Vm::inbv(unsigned short)>
c001832d:	83 c4 0c             	add    esp,0xc
c0018330:	0f b6 c0             	movzx  eax,al
c0018333:	50                   	push   eax
c0018334:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018338:	50                   	push   eax
c0018339:	56                   	push   esi
c001833a:	e8 d6 fb ff ff       	call   c0017f15 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001833f:	83 c4 10             	add    esp,0x10
c0018342:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018345:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018349:	74 03                	je     c001834e <Vm::faultHandler(regs*)+0x3f9>
c001834b:	48                   	dec    eax
c001834c:	eb 01                	jmp    c001834f <Vm::faultHandler(regs*)+0x3fa>
c001834e:	40                   	inc    eax
c001834f:	0f b7 c0             	movzx  eax,ax
c0018352:	e9 8b 00 00 00       	jmp    c00183e2 <Vm::faultHandler(regs*)+0x48d>
c0018357:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001835a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001835d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0018362:	74 29                	je     c001838d <Vm::faultHandler(regs*)+0x438>
c0018364:	3d ff ff 00 00       	cmp    eax,0xffff
c0018369:	76 22                	jbe    c001838d <Vm::faultHandler(regs*)+0x438>
c001836b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001836f:	50                   	push   eax
c0018370:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018374:	50                   	push   eax
c0018375:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018379:	50                   	push   eax
c001837a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001837e:	50                   	push   eax
c001837f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018383:	50                   	push   eax
c0018384:	6a 6d                	push   0x6d
c0018386:	6a 6d                	push   0x6d
c0018388:	e9 4d 01 00 00       	jmp    c00184da <Vm::faultHandler(regs*)+0x585>
c001838d:	0f b7 c8             	movzx  ecx,ax
c0018390:	0f b7 f6             	movzx  esi,si
c0018393:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018396:	83 e5 01             	and    ebp,0x1
c0018399:	74 20                	je     c00183bb <Vm::faultHandler(regs*)+0x466>
c001839b:	ed                   	in     eax,dx
c001839c:	55                   	push   ebp
c001839d:	50                   	push   eax
c001839e:	51                   	push   ecx
c001839f:	56                   	push   esi
c00183a0:	e8 9b fb ff ff       	call   c0017f40 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00183a5:	83 c4 10             	add    esp,0x10
c00183a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00183ab:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00183af:	74 05                	je     c00183b6 <Vm::faultHandler(regs*)+0x461>
c00183b1:	83 e8 04             	sub    eax,0x4
c00183b4:	eb 27                	jmp    c00183dd <Vm::faultHandler(regs*)+0x488>
c00183b6:	83 c0 04             	add    eax,0x4
c00183b9:	eb 22                	jmp    c00183dd <Vm::faultHandler(regs*)+0x488>
c00183bb:	66 ed                	in     ax,dx
c00183bd:	0f b7 c0             	movzx  eax,ax
c00183c0:	57                   	push   edi
c00183c1:	50                   	push   eax
c00183c2:	51                   	push   ecx
c00183c3:	56                   	push   esi
c00183c4:	e8 61 fb ff ff       	call   c0017f2a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00183c9:	83 c4 10             	add    esp,0x10
c00183cc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00183cf:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00183d3:	74 05                	je     c00183da <Vm::faultHandler(regs*)+0x485>
c00183d5:	83 e8 02             	sub    eax,0x2
c00183d8:	eb 03                	jmp    c00183dd <Vm::faultHandler(regs*)+0x488>
c00183da:	83 c0 02             	add    eax,0x2
c00183dd:	25 ff ff 00 00       	and    eax,0xffff
c00183e2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00183e5:	e9 20 02 00 00       	jmp    c001860a <Vm::faultHandler(regs*)+0x6b5>
c00183ea:	8d 46 ff             	lea    eax,[esi-0x1]
c00183ed:	0f b6 f0             	movzx  esi,al
c00183f0:	83 fe 05             	cmp    esi,0x5
c00183f3:	77 23                	ja     c0018418 <Vm::faultHandler(regs*)+0x4c3>
c00183f5:	ff 24 b5 c4 51 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdae3c]
c00183fc:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0018401:	eb 15                	jmp    c0018418 <Vm::faultHandler(regs*)+0x4c3>
c0018403:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0018407:	eb 0f                	jmp    c0018418 <Vm::faultHandler(regs*)+0x4c3>
c0018409:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001840d:	eb 09                	jmp    c0018418 <Vm::faultHandler(regs*)+0x4c3>
c001840f:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0018413:	eb 03                	jmp    c0018418 <Vm::faultHandler(regs*)+0x4c3>
c0018415:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0018418:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001841b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0018420:	74 29                	je     c001844b <Vm::faultHandler(regs*)+0x4f6>
c0018422:	3d ff ff 00 00       	cmp    eax,0xffff
c0018427:	76 22                	jbe    c001844b <Vm::faultHandler(regs*)+0x4f6>
c0018429:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001842d:	50                   	push   eax
c001842e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018432:	50                   	push   eax
c0018433:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018437:	50                   	push   eax
c0018438:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001843c:	50                   	push   eax
c001843d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018441:	50                   	push   eax
c0018442:	6a 6e                	push   0x6e
c0018444:	6a 6e                	push   0x6e
c0018446:	e9 8f 00 00 00       	jmp    c00184da <Vm::faultHandler(regs*)+0x585>
c001844b:	0f b7 c0             	movzx  eax,ax
c001844e:	52                   	push   edx
c001844f:	52                   	push   edx
c0018450:	50                   	push   eax
c0018451:	57                   	push   edi
c0018452:	e8 8a fa ff ff       	call   c0017ee1 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0018457:	59                   	pop    ecx
c0018458:	0f b6 c0             	movzx  eax,al
c001845b:	5e                   	pop    esi
c001845c:	50                   	push   eax
c001845d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018461:	50                   	push   eax
c0018462:	e8 15 f5 ff ff       	call   c001797c <Vm::outbv(unsigned short, unsigned char)>
c0018467:	83 c4 10             	add    esp,0x10
c001846a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001846d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018471:	74 03                	je     c0018476 <Vm::faultHandler(regs*)+0x521>
c0018473:	48                   	dec    eax
c0018474:	eb 01                	jmp    c0018477 <Vm::faultHandler(regs*)+0x522>
c0018476:	40                   	inc    eax
c0018477:	0f b7 c0             	movzx  eax,ax
c001847a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001847d:	e9 88 01 00 00       	jmp    c001860a <Vm::faultHandler(regs*)+0x6b5>
c0018482:	8d 46 ff             	lea    eax,[esi-0x1]
c0018485:	0f b6 f0             	movzx  esi,al
c0018488:	83 fe 05             	cmp    esi,0x5
c001848b:	77 1e                	ja     c00184ab <Vm::faultHandler(regs*)+0x556>
c001848d:	ff 24 b5 dc 51 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdae24]
c0018494:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018498:	eb 11                	jmp    c00184ab <Vm::faultHandler(regs*)+0x556>
c001849a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001849d:	eb 0c                	jmp    c00184ab <Vm::faultHandler(regs*)+0x556>
c001849f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00184a2:	eb 07                	jmp    c00184ab <Vm::faultHandler(regs*)+0x556>
c00184a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00184a7:	eb 02                	jmp    c00184ab <Vm::faultHandler(regs*)+0x556>
c00184a9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00184ab:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00184ae:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00184b3:	74 37                	je     c00184ec <Vm::faultHandler(regs*)+0x597>
c00184b5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00184bb:	76 2f                	jbe    c00184ec <Vm::faultHandler(regs*)+0x597>
c00184bd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00184c1:	50                   	push   eax
c00184c2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00184c6:	50                   	push   eax
c00184c7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00184cb:	50                   	push   eax
c00184cc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00184d0:	50                   	push   eax
c00184d1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00184d5:	50                   	push   eax
c00184d6:	6a 6f                	push   0x6f
c00184d8:	6a 6f                	push   0x6f
c00184da:	68 67 51 02 c0       	push   0xc0025167
c00184df:	e8 80 ea fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00184e4:	83 c4 20             	add    esp,0x20
c00184e7:	e9 83 01 00 00       	jmp    c001866f <Vm::faultHandler(regs*)+0x71a>
c00184ec:	0f b7 d7             	movzx  edx,di
c00184ef:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00184f2:	0f b7 c6             	movzx  eax,si
c00184f5:	81 e1 00 04 00 00    	and    ecx,0x400
c00184fb:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00184fe:	83 e5 01             	and    ebp,0x1
c0018501:	74 1d                	je     c0018520 <Vm::faultHandler(regs*)+0x5cb>
c0018503:	55                   	push   ebp
c0018504:	55                   	push   ebp
c0018505:	50                   	push   eax
c0018506:	52                   	push   edx
c0018507:	e8 f8 f9 ff ff       	call   c0017f04 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001850c:	83 c4 10             	add    esp,0x10
c001850f:	89 fa                	mov    edx,edi
c0018511:	ef                   	out    dx,eax
c0018512:	85 c9                	test   ecx,ecx
c0018514:	74 05                	je     c001851b <Vm::faultHandler(regs*)+0x5c6>
c0018516:	83 ee 04             	sub    esi,0x4
c0018519:	eb 21                	jmp    c001853c <Vm::faultHandler(regs*)+0x5e7>
c001851b:	83 c6 04             	add    esi,0x4
c001851e:	eb 1c                	jmp    c001853c <Vm::faultHandler(regs*)+0x5e7>
c0018520:	55                   	push   ebp
c0018521:	55                   	push   ebp
c0018522:	50                   	push   eax
c0018523:	52                   	push   edx
c0018524:	e8 c9 f9 ff ff       	call   c0017ef2 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0018529:	83 c4 10             	add    esp,0x10
c001852c:	89 fa                	mov    edx,edi
c001852e:	66 ef                	out    dx,ax
c0018530:	85 c9                	test   ecx,ecx
c0018532:	74 05                	je     c0018539 <Vm::faultHandler(regs*)+0x5e4>
c0018534:	83 ee 02             	sub    esi,0x2
c0018537:	eb 03                	jmp    c001853c <Vm::faultHandler(regs*)+0x5e7>
c0018539:	83 c6 02             	add    esi,0x2
c001853c:	81 e6 ff ff 00 00    	and    esi,0xffff
c0018542:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0018545:	e9 c0 00 00 00       	jmp    c001860a <Vm::faultHandler(regs*)+0x6b5>
c001854a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018551:	83 ec 0c             	sub    esp,0xc
c0018554:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018558:	50                   	push   eax
c0018559:	e8 0b f4 ff ff       	call   c0017969 <Vm::inbv(unsigned short)>
c001855e:	0f b6 c0             	movzx  eax,al
c0018561:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018564:	eb 3a                	jmp    c00185a0 <Vm::faultHandler(regs*)+0x64b>
c0018566:	83 e5 01             	and    ebp,0x1
c0018569:	74 07                	je     c0018572 <Vm::faultHandler(regs*)+0x61d>
c001856b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001856f:	ed                   	in     eax,dx
c0018570:	eb 14                	jmp    c0018586 <Vm::faultHandler(regs*)+0x631>
c0018572:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0018575:	66 31 f6             	xor    si,si
c0018578:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001857b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001857f:	66 ed                	in     ax,dx
c0018581:	0f b7 c0             	movzx  eax,ax
c0018584:	09 f0                	or     eax,esi
c0018586:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018589:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001858d:	eb 7e                	jmp    c001860d <Vm::faultHandler(regs*)+0x6b8>
c001858f:	52                   	push   edx
c0018590:	52                   	push   edx
c0018591:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018595:	50                   	push   eax
c0018596:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001859a:	50                   	push   eax
c001859b:	e8 dc f3 ff ff       	call   c001797c <Vm::outbv(unsigned short, unsigned char)>
c00185a0:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00185a4:	eb 4f                	jmp    c00185f5 <Vm::faultHandler(regs*)+0x6a0>
c00185a6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00185a9:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00185ad:	83 e5 01             	and    ebp,0x1
c00185b0:	74 03                	je     c00185b5 <Vm::faultHandler(regs*)+0x660>
c00185b2:	ef                   	out    dx,eax
c00185b3:	eb d4                	jmp    c0018589 <Vm::faultHandler(regs*)+0x634>
c00185b5:	66 ef                	out    dx,ax
c00185b7:	eb d0                	jmp    c0018589 <Vm::faultHandler(regs*)+0x634>
c00185b9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00185c0:	83 ec 0c             	sub    esp,0xc
c00185c3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00185c7:	50                   	push   eax
c00185c8:	e8 9c f3 ff ff       	call   c0017969 <Vm::inbv(unsigned short)>
c00185cd:	0f b6 c0             	movzx  eax,al
c00185d0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00185d3:	eb 1d                	jmp    c00185f2 <Vm::faultHandler(regs*)+0x69d>
c00185d5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00185d8:	83 e5 01             	and    ebp,0x1
c00185db:	74 03                	je     c00185e0 <Vm::faultHandler(regs*)+0x68b>
c00185dd:	ed                   	in     eax,dx
c00185de:	eb 0d                	jmp    c00185ed <Vm::faultHandler(regs*)+0x698>
c00185e0:	66 ed                	in     ax,dx
c00185e2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00185e5:	0f b7 c0             	movzx  eax,ax
c00185e8:	66 31 d2             	xor    dx,dx
c00185eb:	09 d0                	or     eax,edx
c00185ed:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00185f0:	eb 18                	jmp    c001860a <Vm::faultHandler(regs*)+0x6b5>
c00185f2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00185f5:	83 c4 10             	add    esp,0x10
c00185f8:	eb 13                	jmp    c001860d <Vm::faultHandler(regs*)+0x6b8>
c00185fa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00185fd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018600:	83 e5 01             	and    ebp,0x1
c0018603:	74 03                	je     c0018608 <Vm::faultHandler(regs*)+0x6b3>
c0018605:	ef                   	out    dx,eax
c0018606:	eb 02                	jmp    c001860a <Vm::faultHandler(regs*)+0x6b5>
c0018608:	66 ef                	out    dx,ax
c001860a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001860d:	b0 01                	mov    al,0x1
c001860f:	eb 60                	jmp    c0018671 <Vm::faultHandler(regs*)+0x71c>
c0018611:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018615:	50                   	push   eax
c0018616:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001861a:	50                   	push   eax
c001861b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001861f:	50                   	push   eax
c0018620:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018624:	50                   	push   eax
c0018625:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018629:	50                   	push   eax
c001862a:	52                   	push   edx
c001862b:	52                   	push   edx
c001862c:	68 94 51 02 c0       	push   0xc0025194
c0018631:	e8 2e e9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018636:	83 c4 20             	add    esp,0x20
c0018639:	83 ec 0c             	sub    esp,0xc
c001863c:	6a 60                	push   0x60
c001863e:	e8 26 f3 ff ff       	call   c0017969 <Vm::inbv(unsigned short)>
c0018643:	83 c4 10             	add    esp,0x10
c0018646:	0f b6 d0             	movzx  edx,al
c0018649:	83 fa 1c             	cmp    edx,0x1c
c001864c:	74 05                	je     c0018653 <Vm::faultHandler(regs*)+0x6fe>
c001864e:	83 fa 5a             	cmp    edx,0x5a
c0018651:	75 e6                	jne    c0018639 <Vm::faultHandler(regs*)+0x6e4>
c0018653:	0f b6 c0             	movzx  eax,al
c0018656:	83 f8 1c             	cmp    eax,0x1c
c0018659:	74 05                	je     c0018660 <Vm::faultHandler(regs*)+0x70b>
c001865b:	83 f8 5a             	cmp    eax,0x5a
c001865e:	75 0f                	jne    c001866f <Vm::faultHandler(regs*)+0x71a>
c0018660:	83 ec 0c             	sub    esp,0xc
c0018663:	6a 60                	push   0x60
c0018665:	e8 ff f2 ff ff       	call   c0017969 <Vm::inbv(unsigned short)>
c001866a:	83 c4 10             	add    esp,0x10
c001866d:	eb e4                	jmp    c0018653 <Vm::faultHandler(regs*)+0x6fe>
c001866f:	31 c0                	xor    eax,eax
c0018671:	83 c4 2c             	add    esp,0x2c
c0018674:	5b                   	pop    ebx
c0018675:	5e                   	pop    esi
c0018676:	5f                   	pop    edi
c0018677:	5d                   	pop    ebp
c0018678:	c3                   	ret    
c0018679:	90                   	nop

c001867a <noCopro(unsigned long)>:
c001867a:	c3                   	ret    
c001867b:	90                   	nop

c001867c <CPU::close(int, int, void*)>:
c001867c:	31 c0                	xor    eax,eax
c001867e:	c3                   	ret    

c001867f <x86ReadCMOS(unsigned char)>:
c001867f:	83 ec 14             	sub    esp,0x14
c0018682:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018686:	88 04 24             	mov    BYTE PTR [esp],al
c0018689:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c001868e:	0f b6 c0             	movzx  eax,al
c0018691:	85 c0                	test   eax,eax
c0018693:	74 04                	je     c0018699 <x86ReadCMOS(unsigned char)+0x1a>
c0018695:	b2 00                	mov    dl,0x0
c0018697:	eb 02                	jmp    c001869b <x86ReadCMOS(unsigned char)+0x1c>
c0018699:	b2 80                	mov    dl,0x80
c001869b:	8a 04 24             	mov    al,BYTE PTR [esp]
c001869e:	09 d0                	or     eax,edx
c00186a0:	0f b6 c0             	movzx  eax,al
c00186a3:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c00186aa:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00186ae:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00186b2:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00186b7:	ee                   	out    dx,al
c00186b8:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c00186bf:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00186c4:	89 c2                	mov    edx,eax
c00186c6:	ec                   	in     al,dx
c00186c7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00186cb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00186cf:	83 c4 14             	add    esp,0x14
c00186d2:	c3                   	ret    

c00186d3 <x86WriteCMOS(unsigned char, unsigned char)>:
c00186d3:	83 ec 18             	sub    esp,0x18
c00186d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00186da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186de:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c00186e2:	88 04 24             	mov    BYTE PTR [esp],al
c00186e5:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c00186ea:	0f b6 c0             	movzx  eax,al
c00186ed:	85 c0                	test   eax,eax
c00186ef:	74 04                	je     c00186f5 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c00186f1:	b2 00                	mov    dl,0x0
c00186f3:	eb 02                	jmp    c00186f7 <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c00186f5:	b2 80                	mov    dl,0x80
c00186f7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00186fb:	09 d0                	or     eax,edx
c00186fd:	0f b6 c0             	movzx  eax,al
c0018700:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0018707:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001870b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001870f:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0018714:	ee                   	out    dx,al
c0018715:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0018719:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0018720:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0018724:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0018728:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c001872d:	ee                   	out    dx,al
c001872e:	90                   	nop
c001872f:	83 c4 18             	add    esp,0x18
c0018732:	c3                   	ret    

c0018733 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0018733:	60                   	pusha  
c0018734:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018738:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001873c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018740:	9c                   	pushf  
c0018741:	fa                   	cli    
c0018742:	0f 09                	wbinvd 
c0018744:	0f 30                	wrmsr  
c0018746:	9d                   	popf   
c0018747:	89 c2                	mov    edx,eax
c0018749:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001874d:	89 10                	mov    DWORD PTR [eax],edx
c001874f:	61                   	popa   
c0018750:	90                   	nop
c0018751:	c3                   	ret    

c0018752 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0018752:	60                   	pusha  
c0018753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018757:	89 c1                	mov    ecx,eax
c0018759:	9c                   	pushf  
c001875a:	fa                   	cli    
c001875b:	0f 09                	wbinvd 
c001875d:	31 c0                	xor    eax,eax
c001875f:	31 d2                	xor    edx,edx
c0018761:	0f 32                	rdmsr  
c0018763:	9d                   	popf   
c0018764:	89 c2                	mov    edx,eax
c0018766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001876a:	89 10                	mov    DWORD PTR [eax],edx
c001876c:	61                   	popa   
c001876d:	90                   	nop
c001876e:	c3                   	ret    

c001876f <AMD_K6_writeback(int, int, int)>:
c001876f:	83 ec 20             	sub    esp,0x20
c0018772:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c0018777:	c1 e8 14             	shr    eax,0x14
c001877a:	c1 e8 02             	shr    eax,0x2
c001877d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018781:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0018786:	0f 85 9e 00 00 00    	jne    c001882a <AMD_K6_writeback(int, int, int)+0xbb>
c001878c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018790:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018794:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0018799:	75 19                	jne    c00187b4 <AMD_K6_writeback(int, int, int)+0x45>
c001879b:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c00187a0:	7f 0a                	jg     c00187ac <AMD_K6_writeback(int, int, int)+0x3d>
c00187a2:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c00187aa:	eb 08                	jmp    c00187b4 <AMD_K6_writeback(int, int, int)+0x45>
c00187ac:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c00187b4:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c00187b9:	7c 6e                	jl     c0018829 <AMD_K6_writeback(int, int, int)+0xba>
c00187bb:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c00187c0:	7e 09                	jle    c00187cb <AMD_K6_writeback(int, int, int)+0x5c>
c00187c2:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c00187c7:	74 36                	je     c00187ff <AMD_K6_writeback(int, int, int)+0x90>
c00187c9:	eb 5e                	jmp    c0018829 <AMD_K6_writeback(int, int, int)+0xba>
c00187cb:	8d 44 24 08          	lea    eax,[esp+0x8]
c00187cf:	50                   	push   eax
c00187d0:	68 82 00 00 c0       	push   0xc0000082
c00187d5:	e8 78 ff ff ff       	call   c0018752 <AMD_K6_read_msr(unsigned int, REGS*)>
c00187da:	83 c4 08             	add    esp,0x8
c00187dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00187e1:	01 c0                	add    eax,eax
c00187e3:	83 e0 7f             	and    eax,0x7f
c00187e6:	89 c2                	mov    edx,eax
c00187e8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00187ec:	50                   	push   eax
c00187ed:	6a 00                	push   0x0
c00187ef:	52                   	push   edx
c00187f0:	68 82 00 00 c0       	push   0xc0000082
c00187f5:	e8 39 ff ff ff       	call   c0018733 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00187fa:	83 c4 10             	add    esp,0x10
c00187fd:	eb 2b                	jmp    c001882a <AMD_K6_writeback(int, int, int)+0xbb>
c00187ff:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018803:	50                   	push   eax
c0018804:	68 82 00 00 c0       	push   0xc0000082
c0018809:	e8 44 ff ff ff       	call   c0018752 <AMD_K6_read_msr(unsigned int, REGS*)>
c001880e:	83 c4 08             	add    esp,0x8
c0018811:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018815:	50                   	push   eax
c0018816:	6a 00                	push   0x0
c0018818:	6a 00                	push   0x0
c001881a:	68 82 00 00 c0       	push   0xc0000082
c001881f:	e8 0f ff ff ff       	call   c0018733 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018824:	83 c4 10             	add    esp,0x10
c0018827:	eb 01                	jmp    c001882a <AMD_K6_writeback(int, int, int)+0xbb>
c0018829:	90                   	nop
c001882a:	90                   	nop
c001882b:	83 c4 20             	add    esp,0x20
c001882e:	c3                   	ret    

c001882f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001882f:	56                   	push   esi
c0018830:	53                   	push   ebx
c0018831:	a1 20 6b 02 c0       	mov    eax,ds:0xc0026b20
c0018836:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001883a:	75 32                	jne    c001886e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001883c:	8b 15 e0 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eae0
c0018842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018846:	89 10                	mov    DWORD PTR [eax],edx
c0018848:	8b 15 dc ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eadc
c001884e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018852:	89 10                	mov    DWORD PTR [eax],edx
c0018854:	8b 15 d8 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ead8
c001885a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001885e:	89 10                	mov    DWORD PTR [eax],edx
c0018860:	8b 15 d4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ead4
c0018866:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001886a:	89 10                	mov    DWORD PTR [eax],edx
c001886c:	eb 5c                	jmp    c00188ca <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c001886e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018872:	ba 00 00 00 00       	mov    edx,0x0
c0018877:	89 d1                	mov    ecx,edx
c0018879:	0f a2                	cpuid  
c001887b:	89 c6                	mov    esi,eax
c001887d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018881:	89 30                	mov    DWORD PTR [eax],esi
c0018883:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018887:	89 18                	mov    DWORD PTR [eax],ebx
c0018889:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001888d:	89 08                	mov    DWORD PTR [eax],ecx
c001888f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018893:	89 10                	mov    DWORD PTR [eax],edx
c0018895:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018899:	a3 20 6b 02 c0       	mov    ds:0xc0026b20,eax
c001889e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00188a4:	a3 e0 ea 02 c0       	mov    ds:0xc002eae0,eax
c00188a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00188ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00188af:	a3 dc ea 02 c0       	mov    ds:0xc002eadc,eax
c00188b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00188b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00188ba:	a3 d8 ea 02 c0       	mov    ds:0xc002ead8,eax
c00188bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00188c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00188c5:	a3 d4 ea 02 c0       	mov    ds:0xc002ead4,eax
c00188ca:	5b                   	pop    ebx
c00188cb:	5e                   	pop    esi
c00188cc:	c3                   	ret    

c00188cd <cpuidCheckEDX(unsigned int)>:
c00188cd:	83 ec 10             	sub    esp,0x10
c00188d0:	89 e0                	mov    eax,esp
c00188d2:	50                   	push   eax
c00188d3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00188d7:	50                   	push   eax
c00188d8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00188dc:	50                   	push   eax
c00188dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00188e1:	50                   	push   eax
c00188e2:	6a 01                	push   0x1
c00188e4:	e8 46 ff ff ff       	call   c001882f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188e9:	83 c4 14             	add    esp,0x14
c00188ec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00188ef:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00188f3:	0f 95 c0             	setne  al
c00188f6:	83 c4 10             	add    esp,0x10
c00188f9:	c3                   	ret    

c00188fa <cpuidCheckECX(unsigned int)>:
c00188fa:	83 ec 10             	sub    esp,0x10
c00188fd:	89 e0                	mov    eax,esp
c00188ff:	50                   	push   eax
c0018900:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018904:	50                   	push   eax
c0018905:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018909:	50                   	push   eax
c001890a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001890e:	50                   	push   eax
c001890f:	6a 01                	push   0x1
c0018911:	e8 19 ff ff ff       	call   c001882f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018916:	83 c4 14             	add    esp,0x14
c0018919:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001891d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018921:	0f 95 c0             	setne  al
c0018924:	83 c4 10             	add    esp,0x10
c0018927:	c3                   	ret    

c0018928 <cpuidCheckExtendedEBX(unsigned int)>:
c0018928:	83 ec 10             	sub    esp,0x10
c001892b:	89 e0                	mov    eax,esp
c001892d:	50                   	push   eax
c001892e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018932:	50                   	push   eax
c0018933:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018937:	50                   	push   eax
c0018938:	8d 44 24 18          	lea    eax,[esp+0x18]
c001893c:	50                   	push   eax
c001893d:	6a 07                	push   0x7
c001893f:	e8 eb fe ff ff       	call   c001882f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018944:	83 c4 14             	add    esp,0x14
c0018947:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001894b:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001894f:	0f 95 c0             	setne  al
c0018952:	83 c4 10             	add    esp,0x10
c0018955:	c3                   	ret    

c0018956 <cpuidCheckExtendedECX(unsigned int)>:
c0018956:	83 ec 10             	sub    esp,0x10
c0018959:	89 e0                	mov    eax,esp
c001895b:	50                   	push   eax
c001895c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018960:	50                   	push   eax
c0018961:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018965:	50                   	push   eax
c0018966:	8d 44 24 18          	lea    eax,[esp+0x18]
c001896a:	50                   	push   eax
c001896b:	6a 07                	push   0x7
c001896d:	e8 bd fe ff ff       	call   c001882f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018972:	83 c4 14             	add    esp,0x14
c0018975:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018979:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001897d:	0f 95 c0             	setne  al
c0018980:	83 c4 10             	add    esp,0x10
c0018983:	c3                   	ret    

c0018984 <HalDetectFeatures()>:
c0018984:	57                   	push   edi
c0018985:	56                   	push   esi
c0018986:	53                   	push   ebx
c0018987:	81 ec 90 00 00 00    	sub    esp,0x90
c001898d:	83 ec 04             	sub    esp,0x4
c0018990:	6a 08                	push   0x8
c0018992:	6a 00                	push   0x0
c0018994:	68 0c eb 02 c0       	push   0xc002eb0c
c0018999:	e8 52 7b fe ff       	call   c00004f0 <memset>
c001899e:	83 c4 10             	add    esp,0x10
c00189a1:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00189a6:	83 c8 04             	or     eax,0x4
c00189a9:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00189ae:	e8 46 78 fe ff       	call   c00001f9 <detectCPUID>
c00189b3:	85 c0                	test   eax,eax
c00189b5:	0f 95 c0             	setne  al
c00189b8:	83 e0 01             	and    eax,0x1
c00189bb:	83 e0 01             	and    eax,0x1
c00189be:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00189c1:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00189c6:	83 e0 fd             	and    eax,0xfffffffd
c00189c9:	88 c2                	mov    dl,al
c00189cb:	88 c8                	mov    al,cl
c00189cd:	09 d0                	or     eax,edx
c00189cf:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00189d4:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00189d9:	83 e0 02             	and    eax,0x2
c00189dc:	0f b6 c0             	movzx  eax,al
c00189df:	85 c0                	test   eax,eax
c00189e1:	0f 84 7f 02 00 00    	je     c0018c66 <HalDetectFeatures()+0x2e2>
c00189e7:	83 ec 0c             	sub    esp,0xc
c00189ea:	6a 20                	push   0x20
c00189ec:	e8 dc fe ff ff       	call   c00188cd <cpuidCheckEDX(unsigned int)>
c00189f1:	83 c4 10             	add    esp,0x10
c00189f4:	83 e0 01             	and    eax,0x1
c00189f7:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00189fe:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a03:	83 e0 f7             	and    eax,0xfffffff7
c0018a06:	88 c2                	mov    dl,al
c0018a08:	88 c8                	mov    al,cl
c0018a0a:	09 d0                	or     eax,edx
c0018a0c:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018a11:	83 ec 0c             	sub    esp,0xc
c0018a14:	68 00 00 00 04       	push   0x4000000
c0018a19:	e8 af fe ff ff       	call   c00188cd <cpuidCheckEDX(unsigned int)>
c0018a1e:	83 c4 10             	add    esp,0x10
c0018a21:	89 c1                	mov    ecx,eax
c0018a23:	83 e1 01             	and    ecx,0x1
c0018a26:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018a2b:	83 e0 fe             	and    eax,0xfffffffe
c0018a2e:	88 c2                	mov    dl,al
c0018a30:	88 c8                	mov    al,cl
c0018a32:	09 d0                	or     eax,edx
c0018a34:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018a39:	83 ec 0c             	sub    esp,0xc
c0018a3c:	68 80 00 00 00       	push   0x80
c0018a41:	e8 87 fe ff ff       	call   c00188cd <cpuidCheckEDX(unsigned int)>
c0018a46:	83 c4 10             	add    esp,0x10
c0018a49:	89 c1                	mov    ecx,eax
c0018a4b:	c1 e1 07             	shl    ecx,0x7
c0018a4e:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018a53:	83 e0 7f             	and    eax,0x7f
c0018a56:	88 c2                	mov    dl,al
c0018a58:	88 c8                	mov    al,cl
c0018a5a:	09 d0                	or     eax,edx
c0018a5c:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018a61:	83 ec 0c             	sub    esp,0xc
c0018a64:	68 00 00 80 00       	push   0x800000
c0018a69:	e8 5f fe ff ff       	call   c00188cd <cpuidCheckEDX(unsigned int)>
c0018a6e:	83 c4 10             	add    esp,0x10
c0018a71:	83 e0 01             	and    eax,0x1
c0018a74:	89 c1                	mov    ecx,eax
c0018a76:	c1 e1 05             	shl    ecx,0x5
c0018a79:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018a7e:	83 e0 df             	and    eax,0xffffffdf
c0018a81:	88 c2                	mov    dl,al
c0018a83:	88 c8                	mov    al,cl
c0018a85:	09 d0                	or     eax,edx
c0018a87:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018a8c:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018a91:	83 e0 01             	and    eax,0x1
c0018a94:	75 0c                	jne    c0018aa2 <HalDetectFeatures()+0x11e>
c0018a96:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018a9b:	25 00 04 00 00       	and    eax,0x400
c0018aa0:	74 0f                	je     c0018ab1 <HalDetectFeatures()+0x12d>
c0018aa2:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018aa7:	83 e0 fe             	and    eax,0xfffffffe
c0018aaa:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018aaf:	eb 28                	jmp    c0018ad9 <HalDetectFeatures()+0x155>
c0018ab1:	83 ec 0c             	sub    esp,0xc
c0018ab4:	68 00 02 00 00       	push   0x200
c0018ab9:	e8 0f fe ff ff       	call   c00188cd <cpuidCheckEDX(unsigned int)>
c0018abe:	83 c4 10             	add    esp,0x10
c0018ac1:	89 c1                	mov    ecx,eax
c0018ac3:	83 e1 01             	and    ecx,0x1
c0018ac6:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018acb:	83 e0 fe             	and    eax,0xfffffffe
c0018ace:	88 c2                	mov    dl,al
c0018ad0:	88 c8                	mov    al,cl
c0018ad2:	09 d0                	or     eax,edx
c0018ad4:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018ad9:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018ade:	83 e0 01             	and    eax,0x1
c0018ae1:	0f b6 c0             	movzx  eax,al
c0018ae4:	85 c0                	test   eax,eax
c0018ae6:	74 1c                	je     c0018b04 <HalDetectFeatures()+0x180>
c0018ae8:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018aed:	83 e0 08             	and    eax,0x8
c0018af0:	0f b6 c0             	movzx  eax,al
c0018af3:	85 c0                	test   eax,eax
c0018af5:	75 0d                	jne    c0018b04 <HalDetectFeatures()+0x180>
c0018af7:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018afc:	83 e0 fe             	and    eax,0xfffffffe
c0018aff:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018b04:	83 ec 0c             	sub    esp,0xc
c0018b07:	68 f4 51 02 c0       	push   0xc00251f4
c0018b0c:	e8 53 e4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018b11:	83 c4 10             	add    esp,0x10
c0018b14:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018b19:	83 e0 fe             	and    eax,0xfffffffe
c0018b1c:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018b21:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0018b29:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0018b31:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0018b39:	85 c0                	test   eax,eax
c0018b3b:	0f 84 ab 00 00 00    	je     c0018bec <HalDetectFeatures()+0x268>
c0018b41:	83 ec 0c             	sub    esp,0xc
c0018b44:	6a 01                	push   0x1
c0018b46:	e8 af fd ff ff       	call   c00188fa <cpuidCheckECX(unsigned int)>
c0018b4b:	83 c4 10             	add    esp,0x10
c0018b4e:	83 e0 01             	and    eax,0x1
c0018b51:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018b54:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018b59:	83 e0 fd             	and    eax,0xfffffffd
c0018b5c:	88 c2                	mov    dl,al
c0018b5e:	88 c8                	mov    al,cl
c0018b60:	09 d0                	or     eax,edx
c0018b62:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018b67:	83 ec 0c             	sub    esp,0xc
c0018b6a:	68 00 02 00 00       	push   0x200
c0018b6f:	e8 86 fd ff ff       	call   c00188fa <cpuidCheckECX(unsigned int)>
c0018b74:	83 c4 10             	add    esp,0x10
c0018b77:	83 e0 01             	and    eax,0x1
c0018b7a:	89 c1                	mov    ecx,eax
c0018b7c:	c1 e1 04             	shl    ecx,0x4
c0018b7f:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018b84:	83 e0 ef             	and    eax,0xffffffef
c0018b87:	88 c2                	mov    dl,al
c0018b89:	88 c8                	mov    al,cl
c0018b8b:	09 d0                	or     eax,edx
c0018b8d:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018b92:	83 ec 0c             	sub    esp,0xc
c0018b95:	68 00 00 08 00       	push   0x80000
c0018b9a:	e8 5b fd ff ff       	call   c00188fa <cpuidCheckECX(unsigned int)>
c0018b9f:	83 c4 10             	add    esp,0x10
c0018ba2:	83 e0 01             	and    eax,0x1
c0018ba5:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0018bac:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018bb1:	83 e0 fb             	and    eax,0xfffffffb
c0018bb4:	88 c2                	mov    dl,al
c0018bb6:	88 c8                	mov    al,cl
c0018bb8:	09 d0                	or     eax,edx
c0018bba:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018bbf:	83 ec 0c             	sub    esp,0xc
c0018bc2:	68 00 00 10 00       	push   0x100000
c0018bc7:	e8 2e fd ff ff       	call   c00188fa <cpuidCheckECX(unsigned int)>
c0018bcc:	83 c4 10             	add    esp,0x10
c0018bcf:	83 e0 01             	and    eax,0x1
c0018bd2:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018bd9:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018bde:	83 e0 f7             	and    eax,0xfffffff7
c0018be1:	88 c2                	mov    dl,al
c0018be3:	88 c8                	mov    al,cl
c0018be5:	09 d0                	or     eax,edx
c0018be7:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018bec:	83 ec 0c             	sub    esp,0xc
c0018bef:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018bf3:	50                   	push   eax
c0018bf4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018bf8:	50                   	push   eax
c0018bf9:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018bfd:	50                   	push   eax
c0018bfe:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018c02:	50                   	push   eax
c0018c03:	68 00 00 00 80       	push   0x80000000
c0018c08:	e8 22 fc ff ff       	call   c001882f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c0d:	83 c4 20             	add    esp,0x20
c0018c10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018c14:	3d 00 00 00 80       	cmp    eax,0x80000000
c0018c19:	76 4b                	jbe    c0018c66 <HalDetectFeatures()+0x2e2>
c0018c1b:	83 ec 0c             	sub    esp,0xc
c0018c1e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018c22:	50                   	push   eax
c0018c23:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018c27:	50                   	push   eax
c0018c28:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018c2c:	50                   	push   eax
c0018c2d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018c31:	50                   	push   eax
c0018c32:	68 01 00 00 80       	push   0x80000001
c0018c37:	e8 f3 fb ff ff       	call   c001882f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c3c:	83 c4 20             	add    esp,0x20
c0018c3f:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018c44:	83 e0 bf             	and    eax,0xffffffbf
c0018c47:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018c4c:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018c51:	83 e0 fd             	and    eax,0xfffffffd
c0018c54:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018c59:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018c5e:	83 e0 fe             	and    eax,0xfffffffe
c0018c61:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018c66:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018c6b:	25 00 04 00 00       	and    eax,0x400
c0018c70:	74 0d                	je     c0018c7f <HalDetectFeatures()+0x2fb>
c0018c72:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018c77:	83 e0 fb             	and    eax,0xfffffffb
c0018c7a:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018c7f:	c6 05 08 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb08,0x1
c0018c86:	83 ec 04             	sub    esp,0x4
c0018c89:	6a 0d                	push   0xd
c0018c8b:	6a 00                	push   0x0
c0018c8d:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018c92:	e8 59 78 fe ff       	call   c00004f0 <memset>
c0018c97:	83 c4 10             	add    esp,0x10
c0018c9a:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018c9f:	83 e0 02             	and    eax,0x2
c0018ca2:	0f b6 c0             	movzx  eax,al
c0018ca5:	85 c0                	test   eax,eax
c0018ca7:	0f 84 16 08 00 00    	je     c00194c3 <HalDetectFeatures()+0xb3f>
c0018cad:	83 ec 0c             	sub    esp,0xc
c0018cb0:	6a 10                	push   0x10
c0018cb2:	e8 16 fc ff ff       	call   c00188cd <cpuidCheckEDX(unsigned int)>
c0018cb7:	83 c4 10             	add    esp,0x10
c0018cba:	83 e0 01             	and    eax,0x1
c0018cbd:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018cc4:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018cc9:	83 e0 f7             	and    eax,0xfffffff7
c0018ccc:	88 c2                	mov    dl,al
c0018cce:	88 c8                	mov    al,cl
c0018cd0:	09 d0                	or     eax,edx
c0018cd2:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018cd7:	83 ec 0c             	sub    esp,0xc
c0018cda:	6a 40                	push   0x40
c0018cdc:	e8 ec fb ff ff       	call   c00188cd <cpuidCheckEDX(unsigned int)>
c0018ce1:	83 c4 10             	add    esp,0x10
c0018ce4:	83 e0 01             	and    eax,0x1
c0018ce7:	89 c1                	mov    ecx,eax
c0018ce9:	c1 e1 04             	shl    ecx,0x4
c0018cec:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018cf1:	83 e0 ef             	and    eax,0xffffffef
c0018cf4:	88 c2                	mov    dl,al
c0018cf6:	88 c8                	mov    al,cl
c0018cf8:	09 d0                	or     eax,edx
c0018cfa:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018cff:	83 ec 0c             	sub    esp,0xc
c0018d02:	6a 08                	push   0x8
c0018d04:	e8 c4 fb ff ff       	call   c00188cd <cpuidCheckEDX(unsigned int)>
c0018d09:	83 c4 10             	add    esp,0x10
c0018d0c:	83 e0 01             	and    eax,0x1
c0018d0f:	89 c1                	mov    ecx,eax
c0018d11:	c1 e1 05             	shl    ecx,0x5
c0018d14:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018d19:	83 e0 df             	and    eax,0xffffffdf
c0018d1c:	88 c2                	mov    dl,al
c0018d1e:	88 c8                	mov    al,cl
c0018d20:	09 d0                	or     eax,edx
c0018d22:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018d27:	83 ec 0c             	sub    esp,0xc
c0018d2a:	68 00 20 00 00       	push   0x2000
c0018d2f:	e8 99 fb ff ff       	call   c00188cd <cpuidCheckEDX(unsigned int)>
c0018d34:	83 c4 10             	add    esp,0x10
c0018d37:	83 e0 01             	and    eax,0x1
c0018d3a:	89 c1                	mov    ecx,eax
c0018d3c:	c1 e1 06             	shl    ecx,0x6
c0018d3f:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018d44:	83 e0 bf             	and    eax,0xffffffbf
c0018d47:	88 c2                	mov    dl,al
c0018d49:	88 c8                	mov    al,cl
c0018d4b:	09 d0                	or     eax,edx
c0018d4d:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018d52:	83 ec 0c             	sub    esp,0xc
c0018d55:	68 00 00 01 00       	push   0x10000
c0018d5a:	e8 6e fb ff ff       	call   c00188cd <cpuidCheckEDX(unsigned int)>
c0018d5f:	83 c4 10             	add    esp,0x10
c0018d62:	89 c1                	mov    ecx,eax
c0018d64:	c1 e1 07             	shl    ecx,0x7
c0018d67:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018d6c:	83 e0 7f             	and    eax,0x7f
c0018d6f:	88 c2                	mov    dl,al
c0018d71:	88 c8                	mov    al,cl
c0018d73:	09 d0                	or     eax,edx
c0018d75:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018d7a:	83 ec 0c             	sub    esp,0xc
c0018d7d:	6a 01                	push   0x1
c0018d7f:	e8 49 fb ff ff       	call   c00188cd <cpuidCheckEDX(unsigned int)>
c0018d84:	83 c4 10             	add    esp,0x10
c0018d87:	83 e0 01             	and    eax,0x1
c0018d8a:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018d91:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018d96:	83 e0 f7             	and    eax,0xfffffff7
c0018d99:	88 c2                	mov    dl,al
c0018d9b:	88 c8                	mov    al,cl
c0018d9d:	09 d0                	or     eax,edx
c0018d9f:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018da4:	83 ec 0c             	sub    esp,0xc
c0018da7:	68 00 08 00 00       	push   0x800
c0018dac:	e8 1c fb ff ff       	call   c00188cd <cpuidCheckEDX(unsigned int)>
c0018db1:	83 c4 10             	add    esp,0x10
c0018db4:	89 c1                	mov    ecx,eax
c0018db6:	83 e1 01             	and    ecx,0x1
c0018db9:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018dbe:	83 e0 fe             	and    eax,0xfffffffe
c0018dc1:	88 c2                	mov    dl,al
c0018dc3:	88 c8                	mov    al,cl
c0018dc5:	09 d0                	or     eax,edx
c0018dc7:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018dcc:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018dd1:	83 e0 40             	and    eax,0x40
c0018dd4:	0f b6 c0             	movzx  eax,al
c0018dd7:	85 c0                	test   eax,eax
c0018dd9:	74 0a                	je     c0018de5 <HalDetectFeatures()+0x461>
c0018ddb:	c7 05 e8 ea 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002eae8,0x100
c0018de5:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018dea:	83 e0 80             	and    eax,0xffffff80
c0018ded:	0f b6 c0             	movzx  eax,al
c0018df0:	85 c0                	test   eax,eax
c0018df2:	74 0a                	je     c0018dfe <HalDetectFeatures()+0x47a>
c0018df4:	c7 05 e4 ea 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002eae4,0x80
c0018dfe:	83 ec 0c             	sub    esp,0xc
c0018e01:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e05:	50                   	push   eax
c0018e06:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018e0a:	50                   	push   eax
c0018e0b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018e0f:	50                   	push   eax
c0018e10:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018e14:	50                   	push   eax
c0018e15:	6a 00                	push   0x0
c0018e17:	e8 13 fa ff ff       	call   c001882f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e1c:	83 c4 20             	add    esp,0x20
c0018e1f:	c7 44 24 48 f0 ea 02 c0 	mov    DWORD PTR [esp+0x48],0xc002eaf0
c0018e27:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018e2b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018e2f:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0018e37:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018e3b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018e3f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0018e43:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0018e47:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0018e4b:	89 c6                	mov    esi,eax
c0018e4d:	89 d7                	mov    edi,edx
c0018e4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e51:	89 c8                	mov    eax,ecx
c0018e53:	89 fa                	mov    edx,edi
c0018e55:	89 f3                	mov    ebx,esi
c0018e57:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0018e5b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018e5f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018e63:	b8 f4 ea 02 c0       	mov    eax,0xc002eaf4
c0018e68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0018e6c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018e70:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0018e74:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0018e7c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0018e80:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0018e84:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0018e88:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0018e8c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0018e90:	89 c6                	mov    esi,eax
c0018e92:	89 d7                	mov    edi,edx
c0018e94:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e96:	89 c8                	mov    eax,ecx
c0018e98:	89 fa                	mov    edx,edi
c0018e9a:	89 f3                	mov    ebx,esi
c0018e9c:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0018ea0:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0018ea4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018ea8:	b8 f8 ea 02 c0       	mov    eax,0xc002eaf8
c0018ead:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0018eb4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018eb8:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0018ebc:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0018ec4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018ecb:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0018ecf:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0018ed3:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0018eda:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0018ede:	89 c6                	mov    esi,eax
c0018ee0:	89 d7                	mov    edi,edx
c0018ee2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ee4:	89 c8                	mov    eax,ecx
c0018ee6:	89 fa                	mov    edx,edi
c0018ee8:	89 f3                	mov    ebx,esi
c0018eea:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0018eee:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0018ef2:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0018ef6:	83 ec 08             	sub    esp,0x8
c0018ef9:	68 06 52 02 c0       	push   0xc0025206
c0018efe:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f03:	e8 48 78 fe ff       	call   c0000750 <strcmp>
c0018f08:	83 c4 10             	add    esp,0x10
c0018f0b:	85 c0                	test   eax,eax
c0018f0d:	74 19                	je     c0018f28 <HalDetectFeatures()+0x5a4>
c0018f0f:	83 ec 08             	sub    esp,0x8
c0018f12:	68 13 52 02 c0       	push   0xc0025213
c0018f17:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f1c:	e8 2f 78 fe ff       	call   c0000750 <strcmp>
c0018f21:	83 c4 10             	add    esp,0x10
c0018f24:	85 c0                	test   eax,eax
c0018f26:	75 04                	jne    c0018f2c <HalDetectFeatures()+0x5a8>
c0018f28:	b0 01                	mov    al,0x1
c0018f2a:	eb 02                	jmp    c0018f2e <HalDetectFeatures()+0x5aa>
c0018f2c:	b0 00                	mov    al,0x0
c0018f2e:	0f b6 c0             	movzx  eax,al
c0018f31:	85 c0                	test   eax,eax
c0018f33:	74 0f                	je     c0018f44 <HalDetectFeatures()+0x5c0>
c0018f35:	c7 05 04 eb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x2
c0018f3f:	e9 0d 03 00 00       	jmp    c0019251 <HalDetectFeatures()+0x8cd>
c0018f44:	83 ec 08             	sub    esp,0x8
c0018f47:	68 20 52 02 c0       	push   0xc0025220
c0018f4c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f51:	e8 fa 77 fe ff       	call   c0000750 <strcmp>
c0018f56:	83 c4 10             	add    esp,0x10
c0018f59:	85 c0                	test   eax,eax
c0018f5b:	74 19                	je     c0018f76 <HalDetectFeatures()+0x5f2>
c0018f5d:	83 ec 08             	sub    esp,0x8
c0018f60:	68 2d 52 02 c0       	push   0xc002522d
c0018f65:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f6a:	e8 e1 77 fe ff       	call   c0000750 <strcmp>
c0018f6f:	83 c4 10             	add    esp,0x10
c0018f72:	85 c0                	test   eax,eax
c0018f74:	75 04                	jne    c0018f7a <HalDetectFeatures()+0x5f6>
c0018f76:	b0 01                	mov    al,0x1
c0018f78:	eb 02                	jmp    c0018f7c <HalDetectFeatures()+0x5f8>
c0018f7a:	b0 00                	mov    al,0x0
c0018f7c:	0f b6 c0             	movzx  eax,al
c0018f7f:	85 c0                	test   eax,eax
c0018f81:	74 0f                	je     c0018f92 <HalDetectFeatures()+0x60e>
c0018f83:	c7 05 04 eb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x4
c0018f8d:	e9 bf 02 00 00       	jmp    c0019251 <HalDetectFeatures()+0x8cd>
c0018f92:	83 ec 08             	sub    esp,0x8
c0018f95:	68 3a 52 02 c0       	push   0xc002523a
c0018f9a:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018f9f:	e8 ac 77 fe ff       	call   c0000750 <strcmp>
c0018fa4:	83 c4 10             	add    esp,0x10
c0018fa7:	85 c0                	test   eax,eax
c0018fa9:	74 19                	je     c0018fc4 <HalDetectFeatures()+0x640>
c0018fab:	83 ec 08             	sub    esp,0x8
c0018fae:	68 47 52 02 c0       	push   0xc0025247
c0018fb3:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018fb8:	e8 93 77 fe ff       	call   c0000750 <strcmp>
c0018fbd:	83 c4 10             	add    esp,0x10
c0018fc0:	85 c0                	test   eax,eax
c0018fc2:	75 04                	jne    c0018fc8 <HalDetectFeatures()+0x644>
c0018fc4:	b0 01                	mov    al,0x1
c0018fc6:	eb 02                	jmp    c0018fca <HalDetectFeatures()+0x646>
c0018fc8:	b0 00                	mov    al,0x0
c0018fca:	0f b6 c0             	movzx  eax,al
c0018fcd:	85 c0                	test   eax,eax
c0018fcf:	74 0f                	je     c0018fe0 <HalDetectFeatures()+0x65c>
c0018fd1:	c7 05 04 eb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x5
c0018fdb:	e9 71 02 00 00       	jmp    c0019251 <HalDetectFeatures()+0x8cd>
c0018fe0:	83 ec 08             	sub    esp,0x8
c0018fe3:	68 54 52 02 c0       	push   0xc0025254
c0018fe8:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018fed:	e8 5e 77 fe ff       	call   c0000750 <strcmp>
c0018ff2:	83 c4 10             	add    esp,0x10
c0018ff5:	85 c0                	test   eax,eax
c0018ff7:	0f 94 c0             	sete   al
c0018ffa:	0f b6 c0             	movzx  eax,al
c0018ffd:	85 c0                	test   eax,eax
c0018fff:	74 0f                	je     c0019010 <HalDetectFeatures()+0x68c>
c0019001:	c7 05 04 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x1
c001900b:	e9 41 02 00 00       	jmp    c0019251 <HalDetectFeatures()+0x8cd>
c0019010:	83 ec 08             	sub    esp,0x8
c0019013:	68 61 52 02 c0       	push   0xc0025261
c0019018:	68 f0 ea 02 c0       	push   0xc002eaf0
c001901d:	e8 2e 77 fe ff       	call   c0000750 <strcmp>
c0019022:	83 c4 10             	add    esp,0x10
c0019025:	85 c0                	test   eax,eax
c0019027:	0f 94 c0             	sete   al
c001902a:	0f b6 c0             	movzx  eax,al
c001902d:	85 c0                	test   eax,eax
c001902f:	74 0f                	je     c0019040 <HalDetectFeatures()+0x6bc>
c0019031:	c7 05 04 eb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x3
c001903b:	e9 11 02 00 00       	jmp    c0019251 <HalDetectFeatures()+0x8cd>
c0019040:	83 ec 08             	sub    esp,0x8
c0019043:	68 20 52 02 c0       	push   0xc0025220
c0019048:	68 f0 ea 02 c0       	push   0xc002eaf0
c001904d:	e8 fe 76 fe ff       	call   c0000750 <strcmp>
c0019052:	83 c4 10             	add    esp,0x10
c0019055:	85 c0                	test   eax,eax
c0019057:	0f 94 c0             	sete   al
c001905a:	0f b6 c0             	movzx  eax,al
c001905d:	85 c0                	test   eax,eax
c001905f:	74 0f                	je     c0019070 <HalDetectFeatures()+0x6ec>
c0019061:	c7 05 04 eb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x6
c001906b:	e9 e1 01 00 00       	jmp    c0019251 <HalDetectFeatures()+0x8cd>
c0019070:	83 ec 08             	sub    esp,0x8
c0019073:	68 6e 52 02 c0       	push   0xc002526e
c0019078:	68 f0 ea 02 c0       	push   0xc002eaf0
c001907d:	e8 ce 76 fe ff       	call   c0000750 <strcmp>
c0019082:	83 c4 10             	add    esp,0x10
c0019085:	85 c0                	test   eax,eax
c0019087:	0f 94 c0             	sete   al
c001908a:	0f b6 c0             	movzx  eax,al
c001908d:	85 c0                	test   eax,eax
c001908f:	74 0f                	je     c00190a0 <HalDetectFeatures()+0x71c>
c0019091:	c7 05 04 eb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x7
c001909b:	e9 b1 01 00 00       	jmp    c0019251 <HalDetectFeatures()+0x8cd>
c00190a0:	83 ec 08             	sub    esp,0x8
c00190a3:	68 7b 52 02 c0       	push   0xc002527b
c00190a8:	68 f0 ea 02 c0       	push   0xc002eaf0
c00190ad:	e8 9e 76 fe ff       	call   c0000750 <strcmp>
c00190b2:	83 c4 10             	add    esp,0x10
c00190b5:	85 c0                	test   eax,eax
c00190b7:	0f 94 c0             	sete   al
c00190ba:	0f b6 c0             	movzx  eax,al
c00190bd:	85 c0                	test   eax,eax
c00190bf:	74 0f                	je     c00190d0 <HalDetectFeatures()+0x74c>
c00190c1:	c7 05 04 eb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x8
c00190cb:	e9 81 01 00 00       	jmp    c0019251 <HalDetectFeatures()+0x8cd>
c00190d0:	83 ec 08             	sub    esp,0x8
c00190d3:	68 88 52 02 c0       	push   0xc0025288
c00190d8:	68 f0 ea 02 c0       	push   0xc002eaf0
c00190dd:	e8 6e 76 fe ff       	call   c0000750 <strcmp>
c00190e2:	83 c4 10             	add    esp,0x10
c00190e5:	85 c0                	test   eax,eax
c00190e7:	0f 94 c0             	sete   al
c00190ea:	0f b6 c0             	movzx  eax,al
c00190ed:	85 c0                	test   eax,eax
c00190ef:	74 0f                	je     c0019100 <HalDetectFeatures()+0x77c>
c00190f1:	c7 05 04 eb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x9
c00190fb:	e9 51 01 00 00       	jmp    c0019251 <HalDetectFeatures()+0x8cd>
c0019100:	83 ec 08             	sub    esp,0x8
c0019103:	68 95 52 02 c0       	push   0xc0025295
c0019108:	68 f0 ea 02 c0       	push   0xc002eaf0
c001910d:	e8 3e 76 fe ff       	call   c0000750 <strcmp>
c0019112:	83 c4 10             	add    esp,0x10
c0019115:	85 c0                	test   eax,eax
c0019117:	0f 94 c0             	sete   al
c001911a:	0f b6 c0             	movzx  eax,al
c001911d:	85 c0                	test   eax,eax
c001911f:	74 0f                	je     c0019130 <HalDetectFeatures()+0x7ac>
c0019121:	c7 05 04 eb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xa
c001912b:	e9 21 01 00 00       	jmp    c0019251 <HalDetectFeatures()+0x8cd>
c0019130:	83 ec 08             	sub    esp,0x8
c0019133:	68 a2 52 02 c0       	push   0xc00252a2
c0019138:	68 f0 ea 02 c0       	push   0xc002eaf0
c001913d:	e8 0e 76 fe ff       	call   c0000750 <strcmp>
c0019142:	83 c4 10             	add    esp,0x10
c0019145:	85 c0                	test   eax,eax
c0019147:	0f 94 c0             	sete   al
c001914a:	0f b6 c0             	movzx  eax,al
c001914d:	85 c0                	test   eax,eax
c001914f:	74 0f                	je     c0019160 <HalDetectFeatures()+0x7dc>
c0019151:	c7 05 04 eb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xb
c001915b:	e9 f1 00 00 00       	jmp    c0019251 <HalDetectFeatures()+0x8cd>
c0019160:	83 ec 08             	sub    esp,0x8
c0019163:	68 af 52 02 c0       	push   0xc00252af
c0019168:	68 f0 ea 02 c0       	push   0xc002eaf0
c001916d:	e8 de 75 fe ff       	call   c0000750 <strcmp>
c0019172:	83 c4 10             	add    esp,0x10
c0019175:	85 c0                	test   eax,eax
c0019177:	0f 94 c0             	sete   al
c001917a:	0f b6 c0             	movzx  eax,al
c001917d:	85 c0                	test   eax,eax
c001917f:	74 0f                	je     c0019190 <HalDetectFeatures()+0x80c>
c0019181:	c7 05 04 eb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xc
c001918b:	e9 c1 00 00 00       	jmp    c0019251 <HalDetectFeatures()+0x8cd>
c0019190:	83 ec 08             	sub    esp,0x8
c0019193:	68 bc 52 02 c0       	push   0xc00252bc
c0019198:	68 f0 ea 02 c0       	push   0xc002eaf0
c001919d:	e8 ae 75 fe ff       	call   c0000750 <strcmp>
c00191a2:	83 c4 10             	add    esp,0x10
c00191a5:	85 c0                	test   eax,eax
c00191a7:	0f 94 c0             	sete   al
c00191aa:	0f b6 c0             	movzx  eax,al
c00191ad:	85 c0                	test   eax,eax
c00191af:	74 0f                	je     c00191c0 <HalDetectFeatures()+0x83c>
c00191b1:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c00191bb:	e9 91 00 00 00       	jmp    c0019251 <HalDetectFeatures()+0x8cd>
c00191c0:	83 ec 08             	sub    esp,0x8
c00191c3:	68 c9 52 02 c0       	push   0xc00252c9
c00191c8:	68 f0 ea 02 c0       	push   0xc002eaf0
c00191cd:	e8 7e 75 fe ff       	call   c0000750 <strcmp>
c00191d2:	83 c4 10             	add    esp,0x10
c00191d5:	85 c0                	test   eax,eax
c00191d7:	0f 94 c0             	sete   al
c00191da:	0f b6 c0             	movzx  eax,al
c00191dd:	85 c0                	test   eax,eax
c00191df:	74 0c                	je     c00191ed <HalDetectFeatures()+0x869>
c00191e1:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c00191eb:	eb 64                	jmp    c0019251 <HalDetectFeatures()+0x8cd>
c00191ed:	83 ec 08             	sub    esp,0x8
c00191f0:	68 d6 52 02 c0       	push   0xc00252d6
c00191f5:	68 f0 ea 02 c0       	push   0xc002eaf0
c00191fa:	e8 51 75 fe ff       	call   c0000750 <strcmp>
c00191ff:	83 c4 10             	add    esp,0x10
c0019202:	85 c0                	test   eax,eax
c0019204:	0f 94 c0             	sete   al
c0019207:	0f b6 c0             	movzx  eax,al
c001920a:	85 c0                	test   eax,eax
c001920c:	74 0c                	je     c001921a <HalDetectFeatures()+0x896>
c001920e:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c0019218:	eb 37                	jmp    c0019251 <HalDetectFeatures()+0x8cd>
c001921a:	83 ec 08             	sub    esp,0x8
c001921d:	68 e3 52 02 c0       	push   0xc00252e3
c0019222:	68 f0 ea 02 c0       	push   0xc002eaf0
c0019227:	e8 24 75 fe ff       	call   c0000750 <strcmp>
c001922c:	83 c4 10             	add    esp,0x10
c001922f:	85 c0                	test   eax,eax
c0019231:	0f 94 c0             	sete   al
c0019234:	0f b6 c0             	movzx  eax,al
c0019237:	85 c0                	test   eax,eax
c0019239:	74 0c                	je     c0019247 <HalDetectFeatures()+0x8c3>
c001923b:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c0019245:	eb 0a                	jmp    c0019251 <HalDetectFeatures()+0x8cd>
c0019247:	c7 05 04 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x0
c0019251:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019255:	83 f8 06             	cmp    eax,0x6
c0019258:	0f 86 cc 00 00 00    	jbe    c001932a <HalDetectFeatures()+0x9a6>
c001925e:	83 ec 0c             	sub    esp,0xc
c0019261:	68 80 00 00 00       	push   0x80
c0019266:	e8 bd f6 ff ff       	call   c0018928 <cpuidCheckExtendedEBX(unsigned int)>
c001926b:	83 c4 10             	add    esp,0x10
c001926e:	89 c1                	mov    ecx,eax
c0019270:	83 e1 01             	and    ecx,0x1
c0019273:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019278:	83 e0 fe             	and    eax,0xfffffffe
c001927b:	88 c2                	mov    dl,al
c001927d:	88 c8                	mov    al,cl
c001927f:	09 d0                	or     eax,edx
c0019281:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019286:	83 ec 0c             	sub    esp,0xc
c0019289:	68 00 00 10 00       	push   0x100000
c001928e:	e8 95 f6 ff ff       	call   c0018928 <cpuidCheckExtendedEBX(unsigned int)>
c0019293:	83 c4 10             	add    esp,0x10
c0019296:	83 e0 01             	and    eax,0x1
c0019299:	89 c1                	mov    ecx,eax
c001929b:	c1 e1 06             	shl    ecx,0x6
c001929e:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00192a3:	83 e0 bf             	and    eax,0xffffffbf
c00192a6:	88 c2                	mov    dl,al
c00192a8:	88 c8                	mov    al,cl
c00192aa:	09 d0                	or     eax,edx
c00192ac:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00192b1:	83 ec 0c             	sub    esp,0xc
c00192b4:	68 00 00 04 00       	push   0x40000
c00192b9:	e8 6a f6 ff ff       	call   c0018928 <cpuidCheckExtendedEBX(unsigned int)>
c00192be:	83 c4 10             	add    esp,0x10
c00192c1:	83 e0 01             	and    eax,0x1
c00192c4:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00192c7:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00192cc:	83 e0 fd             	and    eax,0xfffffffd
c00192cf:	88 c2                	mov    dl,al
c00192d1:	88 c8                	mov    al,cl
c00192d3:	09 d0                	or     eax,edx
c00192d5:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00192da:	83 ec 0c             	sub    esp,0xc
c00192dd:	6a 04                	push   0x4
c00192df:	e8 72 f6 ff ff       	call   c0018956 <cpuidCheckExtendedECX(unsigned int)>
c00192e4:	83 c4 10             	add    esp,0x10
c00192e7:	83 e0 01             	and    eax,0x1
c00192ea:	89 c1                	mov    ecx,eax
c00192ec:	c1 e1 05             	shl    ecx,0x5
c00192ef:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00192f4:	83 e0 df             	and    eax,0xffffffdf
c00192f7:	88 c2                	mov    dl,al
c00192f9:	88 c8                	mov    al,cl
c00192fb:	09 d0                	or     eax,edx
c00192fd:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019302:	83 ec 0c             	sub    esp,0xc
c0019305:	6a 20                	push   0x20
c0019307:	e8 4a f6 ff ff       	call   c0018956 <cpuidCheckExtendedECX(unsigned int)>
c001930c:	83 c4 10             	add    esp,0x10
c001930f:	83 e0 01             	and    eax,0x1
c0019312:	89 c1                	mov    ecx,eax
c0019314:	c1 e1 04             	shl    ecx,0x4
c0019317:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001931c:	83 e0 ef             	and    eax,0xffffffef
c001931f:	88 c2                	mov    dl,al
c0019321:	88 c8                	mov    al,cl
c0019323:	09 d0                	or     eax,edx
c0019325:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c001932a:	83 ec 0c             	sub    esp,0xc
c001932d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019331:	50                   	push   eax
c0019332:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019336:	50                   	push   eax
c0019337:	8d 44 24 24          	lea    eax,[esp+0x24]
c001933b:	50                   	push   eax
c001933c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019340:	50                   	push   eax
c0019341:	6a 01                	push   0x1
c0019343:	e8 e7 f4 ff ff       	call   c001882f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019348:	83 c4 20             	add    esp,0x20
c001934b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001934f:	83 e0 0f             	and    eax,0xf
c0019352:	a2 00 eb 02 c0       	mov    ds:0xc002eb00,al
c0019357:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001935b:	c1 e8 04             	shr    eax,0x4
c001935e:	83 e0 0f             	and    eax,0xf
c0019361:	a2 fe ea 02 c0       	mov    ds:0xc002eafe,al
c0019366:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001936a:	c1 e8 08             	shr    eax,0x8
c001936d:	83 e0 0f             	and    eax,0xf
c0019370:	a2 fd ea 02 c0       	mov    ds:0xc002eafd,al
c0019375:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019379:	c1 e8 0c             	shr    eax,0xc
c001937c:	83 e0 03             	and    eax,0x3
c001937f:	a2 ff ea 02 c0       	mov    ds:0xc002eaff,al
c0019384:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c0019389:	0f b6 c0             	movzx  eax,al
c001938c:	83 f8 06             	cmp    eax,0x6
c001938f:	74 0d                	je     c001939e <HalDetectFeatures()+0xa1a>
c0019391:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c0019396:	0f b6 c0             	movzx  eax,al
c0019399:	83 f8 0f             	cmp    eax,0xf
c001939c:	75 18                	jne    c00193b6 <HalDetectFeatures()+0xa32>
c001939e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00193a2:	c1 e8 10             	shr    eax,0x10
c00193a5:	c1 e0 04             	shl    eax,0x4
c00193a8:	88 c2                	mov    dl,al
c00193aa:	a0 fe ea 02 c0       	mov    al,ds:0xc002eafe
c00193af:	09 d0                	or     eax,edx
c00193b1:	a2 fe ea 02 c0       	mov    ds:0xc002eafe,al
c00193b6:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c00193bb:	0f b6 c0             	movzx  eax,al
c00193be:	83 f8 0f             	cmp    eax,0xf
c00193c1:	75 15                	jne    c00193d8 <HalDetectFeatures()+0xa54>
c00193c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00193c7:	c1 e8 14             	shr    eax,0x14
c00193ca:	88 c2                	mov    dl,al
c00193cc:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c00193d1:	01 d0                	add    eax,edx
c00193d3:	a2 fd ea 02 c0       	mov    ds:0xc002eafd,al
c00193d8:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c00193e0:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c00193e8:	85 c0                	test   eax,eax
c00193ea:	74 2d                	je     c0019419 <HalDetectFeatures()+0xa95>
c00193ec:	83 ec 0c             	sub    esp,0xc
c00193ef:	68 00 00 00 40       	push   0x40000000
c00193f4:	e8 01 f5 ff ff       	call   c00188fa <cpuidCheckECX(unsigned int)>
c00193f9:	83 c4 10             	add    esp,0x10
c00193fc:	83 e0 01             	and    eax,0x1
c00193ff:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019406:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c001940b:	83 e0 fb             	and    eax,0xfffffffb
c001940e:	88 c2                	mov    dl,al
c0019410:	88 c8                	mov    al,cl
c0019412:	09 d0                	or     eax,edx
c0019414:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0019419:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001941e:	83 c8 04             	or     eax,0x4
c0019421:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019426:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001942b:	83 c8 08             	or     eax,0x8
c001942e:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019433:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019438:	83 c8 10             	or     eax,0x10
c001943b:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019440:	83 ec 0c             	sub    esp,0xc
c0019443:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019447:	50                   	push   eax
c0019448:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001944c:	50                   	push   eax
c001944d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019451:	50                   	push   eax
c0019452:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019456:	50                   	push   eax
c0019457:	68 00 00 00 80       	push   0x80000000
c001945c:	e8 ce f3 ff ff       	call   c001882f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019461:	83 c4 20             	add    esp,0x20
c0019464:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019468:	3d 00 00 00 80       	cmp    eax,0x80000000
c001946d:	0f 86 96 01 00 00    	jbe    c0019609 <HalDetectFeatures()+0xc85>
c0019473:	83 ec 0c             	sub    esp,0xc
c0019476:	8d 44 24 14          	lea    eax,[esp+0x14]
c001947a:	50                   	push   eax
c001947b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001947f:	50                   	push   eax
c0019480:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019484:	50                   	push   eax
c0019485:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019489:	50                   	push   eax
c001948a:	68 01 00 00 80       	push   0x80000001
c001948f:	e8 9b f3 ff ff       	call   c001882f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019494:	83 c4 20             	add    esp,0x20
c0019497:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001949c:	83 e0 7f             	and    eax,0x7f
c001949f:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00194a4:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00194a9:	83 e0 fb             	and    eax,0xfffffffb
c00194ac:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00194b1:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00194b6:	83 e0 fd             	and    eax,0xfffffffd
c00194b9:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00194be:	e9 46 01 00 00       	jmp    c0019609 <HalDetectFeatures()+0xc85>
c00194c3:	83 ec 08             	sub    esp,0x8
c00194c6:	68 54 52 02 c0       	push   0xc0025254
c00194cb:	68 f0 ea 02 c0       	push   0xc002eaf0
c00194d0:	e8 6b 71 fe ff       	call   c0000640 <strcpy>
c00194d5:	83 c4 10             	add    esp,0x10
c00194d8:	c7 05 04 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x1
c00194e2:	e8 dc 6c fe ff       	call   c00001c3 <is486>
c00194e7:	85 c0                	test   eax,eax
c00194e9:	0f 95 c0             	setne  al
c00194ec:	0f b6 c0             	movzx  eax,al
c00194ef:	85 c0                	test   eax,eax
c00194f1:	0f 84 8d 00 00 00    	je     c0019584 <HalDetectFeatures()+0xc00>
c00194f7:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00194fc:	83 c8 04             	or     eax,0x4
c00194ff:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019504:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019509:	83 c8 08             	or     eax,0x8
c001950c:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019511:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019516:	83 c8 10             	or     eax,0x10
c0019519:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c001951e:	0f 20 c0             	mov    eax,cr0
c0019521:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019525:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019529:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0019530:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019537:	83 e0 04             	and    eax,0x4
c001953a:	74 1e                	je     c001955a <HalDetectFeatures()+0xbd6>
c001953c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019543:	83 e0 10             	and    eax,0x10
c0019546:	75 12                	jne    c001955a <HalDetectFeatures()+0xbd6>
c0019548:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001954d:	83 e0 f7             	and    eax,0xfffffff7
c0019550:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019555:	e9 af 00 00 00       	jmp    c0019609 <HalDetectFeatures()+0xc85>
c001955a:	e8 3f 6c fe ff       	call   c000019e <hasLegacyFPU>
c001955f:	83 e0 01             	and    eax,0x1
c0019562:	83 e0 01             	and    eax,0x1
c0019565:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001956c:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019571:	83 e0 f7             	and    eax,0xfffffff7
c0019574:	88 c2                	mov    dl,al
c0019576:	88 c8                	mov    al,cl
c0019578:	09 d0                	or     eax,edx
c001957a:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c001957f:	e9 85 00 00 00       	jmp    c0019609 <HalDetectFeatures()+0xc85>
c0019584:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019589:	83 e0 fb             	and    eax,0xfffffffb
c001958c:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019591:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019596:	83 e0 f7             	and    eax,0xfffffff7
c0019599:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c001959e:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00195a3:	83 e0 ef             	and    eax,0xffffffef
c00195a6:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00195ab:	0f 20 c0             	mov    eax,cr0
c00195ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00195b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00195b6:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00195bd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00195c4:	83 e0 04             	and    eax,0x4
c00195c7:	74 1b                	je     c00195e4 <HalDetectFeatures()+0xc60>
c00195c9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00195d0:	83 e0 10             	and    eax,0x10
c00195d3:	75 0f                	jne    c00195e4 <HalDetectFeatures()+0xc60>
c00195d5:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00195da:	83 e0 f7             	and    eax,0xfffffff7
c00195dd:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00195e2:	eb 25                	jmp    c0019609 <HalDetectFeatures()+0xc85>
c00195e4:	e8 b5 6b fe ff       	call   c000019e <hasLegacyFPU>
c00195e9:	83 e0 01             	and    eax,0x1
c00195ec:	83 e0 01             	and    eax,0x1
c00195ef:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00195f6:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00195fb:	83 e0 f7             	and    eax,0xfffffff7
c00195fe:	88 c2                	mov    dl,al
c0019600:	88 c8                	mov    al,cl
c0019602:	09 d0                	or     eax,edx
c0019604:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019609:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001960e:	83 e0 08             	and    eax,0x8
c0019611:	0f b6 c0             	movzx  eax,al
c0019614:	85 c0                	test   eax,eax
c0019616:	75 25                	jne    c001963d <HalDetectFeatures()+0xcb9>
c0019618:	e8 81 6b fe ff       	call   c000019e <hasLegacyFPU>
c001961d:	83 e0 01             	and    eax,0x1
c0019620:	83 e0 01             	and    eax,0x1
c0019623:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001962a:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001962f:	83 e0 f7             	and    eax,0xfffffff7
c0019632:	88 c2                	mov    dl,al
c0019634:	88 c8                	mov    al,cl
c0019636:	09 d0                	or     eax,edx
c0019638:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c001963d:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019642:	83 e0 08             	and    eax,0x8
c0019645:	0f b6 c0             	movzx  eax,al
c0019648:	85 c0                	test   eax,eax
c001964a:	74 0d                	je     c0019659 <HalDetectFeatures()+0xcd5>
c001964c:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019651:	83 c8 10             	or     eax,0x10
c0019654:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019659:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001965e:	83 e0 10             	and    eax,0x10
c0019661:	0f b6 c0             	movzx  eax,al
c0019664:	85 c0                	test   eax,eax
c0019666:	75 23                	jne    c001968b <HalDetectFeatures()+0xd07>
c0019668:	e8 39 7f 00 00       	call   c00215a6 <x87Detect>
c001966d:	83 e0 01             	and    eax,0x1
c0019670:	83 e0 01             	and    eax,0x1
c0019673:	89 c1                	mov    ecx,eax
c0019675:	c1 e1 04             	shl    ecx,0x4
c0019678:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001967d:	83 e0 ef             	and    eax,0xffffffef
c0019680:	88 c2                	mov    dl,al
c0019682:	88 c8                	mov    al,cl
c0019684:	09 d0                	or     eax,edx
c0019686:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001968b:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019690:	83 e0 01             	and    eax,0x1
c0019693:	0f b6 c0             	movzx  eax,al
c0019696:	85 c0                	test   eax,eax
c0019698:	75 2d                	jne    c00196c7 <HalDetectFeatures()+0xd43>
c001969a:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c001969f:	83 e0 02             	and    eax,0x2
c00196a2:	0f b6 c0             	movzx  eax,al
c00196a5:	85 c0                	test   eax,eax
c00196a7:	75 1e                	jne    c00196c7 <HalDetectFeatures()+0xd43>
c00196a9:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00196ae:	83 e0 04             	and    eax,0x4
c00196b1:	0f b6 c0             	movzx  eax,al
c00196b4:	85 c0                	test   eax,eax
c00196b6:	75 0f                	jne    c00196c7 <HalDetectFeatures()+0xd43>
c00196b8:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00196bd:	83 e0 08             	and    eax,0x8
c00196c0:	0f b6 c0             	movzx  eax,al
c00196c3:	85 c0                	test   eax,eax
c00196c5:	74 0d                	je     c00196d4 <HalDetectFeatures()+0xd50>
c00196c7:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00196cc:	83 c8 80             	or     eax,0xffffff80
c00196cf:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00196d4:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00196d9:	83 e0 10             	and    eax,0x10
c00196dc:	0f b6 c0             	movzx  eax,al
c00196df:	85 c0                	test   eax,eax
c00196e1:	74 2f                	je     c0019712 <HalDetectFeatures()+0xd8e>
c00196e3:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00196e8:	83 e0 80             	and    eax,0xffffff80
c00196eb:	0f b6 c0             	movzx  eax,al
c00196ee:	85 c0                	test   eax,eax
c00196f0:	75 20                	jne    c0019712 <HalDetectFeatures()+0xd8e>
c00196f2:	e8 69 7e 00 00       	call   c0021560 <sseDetect>
c00196f7:	83 e0 01             	and    eax,0x1
c00196fa:	89 c1                	mov    ecx,eax
c00196fc:	c1 e1 07             	shl    ecx,0x7
c00196ff:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019704:	83 e0 7f             	and    eax,0x7f
c0019707:	88 c2                	mov    dl,al
c0019709:	88 c8                	mov    al,cl
c001970b:	09 d0                	or     eax,edx
c001970d:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019712:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019717:	83 e0 80             	and    eax,0xffffff80
c001971a:	0f b6 c0             	movzx  eax,al
c001971d:	85 c0                	test   eax,eax
c001971f:	74 1c                	je     c001973d <HalDetectFeatures()+0xdb9>
c0019721:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019726:	83 e0 20             	and    eax,0x20
c0019729:	0f b6 c0             	movzx  eax,al
c001972c:	85 c0                	test   eax,eax
c001972e:	75 0d                	jne    c001973d <HalDetectFeatures()+0xdb9>
c0019730:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019735:	83 e0 df             	and    eax,0xffffffdf
c0019738:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c001973d:	c6 05 08 eb 02 c0 00 	mov    BYTE PTR ds:0xc002eb08,0x0
c0019744:	90                   	nop
c0019745:	81 c4 90 00 00 00    	add    esp,0x90
c001974b:	5b                   	pop    ebx
c001974c:	5e                   	pop    esi
c001974d:	5f                   	pop    edi
c001974e:	c3                   	ret    

c001974f <HalEnableNMI()>:
c001974f:	c6 05 ec ea 02 c0 01 	mov    BYTE PTR ds:0xc002eaec,0x1
c0019756:	6a 10                	push   0x10
c0019758:	e8 22 ef ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001975d:	83 c4 04             	add    esp,0x4
c0019760:	90                   	nop
c0019761:	c3                   	ret    

c0019762 <HalDisableNMI()>:
c0019762:	c6 05 ec ea 02 c0 00 	mov    BYTE PTR ds:0xc002eaec,0x0
c0019769:	6a 10                	push   0x10
c001976b:	e8 0f ef ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c0019770:	83 c4 04             	add    esp,0x4
c0019773:	90                   	nop
c0019774:	c3                   	ret    

c0019775 <HalGetNMIState()>:
c0019775:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c001977a:	c3                   	ret    

c001977b <x86rdmsr(unsigned int)>:
c001977b:	83 ec 1c             	sub    esp,0x1c
c001977e:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019783:	83 e0 08             	and    eax,0x8
c0019786:	0f b6 c0             	movzx  eax,al
c0019789:	85 c0                	test   eax,eax
c001978b:	75 10                	jne    c001979d <x86rdmsr(unsigned int)+0x22>
c001978d:	83 ec 0c             	sub    esp,0xc
c0019790:	68 ef 52 02 c0       	push   0xc00252ef
c0019795:	e8 78 68 ff ff       	call   c0010012 <KePanic(char const*)>
c001979a:	83 c4 10             	add    esp,0x10
c001979d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197a1:	89 c1                	mov    ecx,eax
c00197a3:	0f 32                	rdmsr  
c00197a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00197a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00197ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00197b5:	83 c4 1c             	add    esp,0x1c
c00197b8:	c3                   	ret    

c00197b9 <x86wrmsr(unsigned int, unsigned long long)>:
c00197b9:	83 ec 1c             	sub    esp,0x1c
c00197bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00197c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00197c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00197c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197cc:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00197d1:	83 e0 08             	and    eax,0x8
c00197d4:	0f b6 c0             	movzx  eax,al
c00197d7:	85 c0                	test   eax,eax
c00197d9:	75 10                	jne    c00197eb <x86wrmsr(unsigned int, unsigned long long)+0x32>
c00197db:	83 ec 0c             	sub    esp,0xc
c00197de:	68 f5 52 02 c0       	push   0xc00252f5
c00197e3:	e8 2a 68 ff ff       	call   c0010012 <KePanic(char const*)>
c00197e8:	83 c4 10             	add    esp,0x10
c00197eb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00197ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00197f7:	0f 30                	wrmsr  
c00197f9:	90                   	nop
c00197fa:	83 c4 1c             	add    esp,0x1c
c00197fd:	c3                   	ret    

c00197fe <HalHandleGeneralProtectionFault(void*, void*)>:
c00197fe:	83 ec 0c             	sub    esp,0xc
c0019801:	83 ec 0c             	sub    esp,0xc
c0019804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019808:	e8 48 e7 ff ff       	call   c0017f55 <Vm::faultHandler(regs*)>
c001980d:	83 c4 10             	add    esp,0x10
c0019810:	83 c4 0c             	add    esp,0xc
c0019813:	c3                   	ret    

c0019814 <HalFindRSDP()>:
c0019814:	83 ec 1c             	sub    esp,0x1c
c0019817:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c001981c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0019821:	7e 0c                	jle    c001982f <HalFindRSDP()+0x1b>
c0019823:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0019828:	25 00 04 00 00       	and    eax,0x400
c001982d:	74 0d                	je     c001983c <HalFindRSDP()+0x28>
c001982f:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019834:	83 e0 fb             	and    eax,0xfffffffb
c0019837:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001983c:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019841:	83 e0 04             	and    eax,0x4
c0019844:	0f b6 c0             	movzx  eax,al
c0019847:	85 c0                	test   eax,eax
c0019849:	75 07                	jne    c0019852 <HalFindRSDP()+0x3e>
c001984b:	b8 00 00 00 00       	mov    eax,0x0
c0019850:	eb 53                	jmp    c00198a5 <HalFindRSDP()+0x91>
c0019852:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001985a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0019862:	77 2f                	ja     c0019893 <HalFindRSDP()+0x7f>
c0019864:	83 ec 04             	sub    esp,0x4
c0019867:	6a 08                	push   0x8
c0019869:	68 fb 52 02 c0       	push   0xc00252fb
c001986e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019872:	e8 09 6b fe ff       	call   c0000380 <memcmp>
c0019877:	83 c4 10             	add    esp,0x10
c001987a:	85 c0                	test   eax,eax
c001987c:	0f 94 c0             	sete   al
c001987f:	0f b6 c0             	movzx  eax,al
c0019882:	85 c0                	test   eax,eax
c0019884:	74 06                	je     c001988c <HalFindRSDP()+0x78>
c0019886:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001988a:	eb 19                	jmp    c00198a5 <HalFindRSDP()+0x91>
c001988c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0019891:	eb c7                	jmp    c001985a <HalFindRSDP()+0x46>
c0019893:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019898:	83 e0 fb             	and    eax,0xfffffffb
c001989b:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00198a0:	b8 00 00 00 00       	mov    eax,0x0
c00198a5:	83 c4 1c             	add    esp,0x1c
c00198a8:	c3                   	ret    

c00198a9 <HalHandlePageFault(void*, void*)>:
c00198a9:	83 ec 1c             	sub    esp,0x1c
c00198ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198b0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00198b3:	83 ec 08             	sub    esp,0x8
c00198b6:	50                   	push   eax
c00198b7:	68 40 55 02 c0       	push   0xc0025540
c00198bc:	e8 a3 d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00198c1:	83 c4 10             	add    esp,0x10
c00198c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00198c8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00198cb:	83 ec 08             	sub    esp,0x8
c00198ce:	50                   	push   eax
c00198cf:	68 04 53 02 c0       	push   0xc0025304
c00198d4:	e8 8b d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00198d9:	83 c4 10             	add    esp,0x10
c00198dc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00198e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00198e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00198e6:	8b 80 72 05 00 00    	mov    eax,DWORD PTR [eax+0x572]
c00198ec:	0f 20 d2             	mov    edx,cr2
c00198ef:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00198f3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00198f7:	83 ec 08             	sub    esp,0x8
c00198fa:	52                   	push   edx
c00198fb:	50                   	push   eax
c00198fc:	e8 c9 a9 ff ff       	call   c00142ca <VAS::tryLoadBackOffDisk(unsigned long)>
c0019901:	83 c4 10             	add    esp,0x10
c0019904:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019908:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001990c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001990f:	83 ec 08             	sub    esp,0x8
c0019912:	50                   	push   eax
c0019913:	68 19 53 02 c0       	push   0xc0025319
c0019918:	e8 47 d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001991d:	83 c4 10             	add    esp,0x10
c0019920:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019924:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019927:	83 ec 08             	sub    esp,0x8
c001992a:	50                   	push   eax
c001992b:	68 33 53 02 c0       	push   0xc0025333
c0019930:	e8 2f d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019935:	83 c4 10             	add    esp,0x10
c0019938:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001993d:	83 ec 08             	sub    esp,0x8
c0019940:	50                   	push   eax
c0019941:	68 48 53 02 c0       	push   0xc0025348
c0019946:	e8 19 d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001994b:	83 c4 10             	add    esp,0x10
c001994e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019952:	83 c4 1c             	add    esp,0x1c
c0019955:	c3                   	ret    

c0019956 <HalHandleOpcodeFault(void*, void*)>:
c0019956:	83 ec 1c             	sub    esp,0x1c
c0019959:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001995d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019961:	a0 08 eb 02 c0       	mov    al,ds:0xc002eb08
c0019966:	0f b6 c0             	movzx  eax,al
c0019969:	85 c0                	test   eax,eax
c001996b:	74 25                	je     c0019992 <HalHandleOpcodeFault(void*, void*)+0x3c>
c001996d:	83 ec 0c             	sub    esp,0xc
c0019970:	68 74 55 02 c0       	push   0xc0025574
c0019975:	e8 ea d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001997a:	83 c4 10             	add    esp,0x10
c001997d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019981:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019984:	8d 50 19             	lea    edx,[eax+0x19]
c0019987:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001998b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001998e:	b0 01                	mov    al,0x1
c0019990:	eb 02                	jmp    c0019994 <HalHandleOpcodeFault(void*, void*)+0x3e>
c0019992:	b0 00                	mov    al,0x0
c0019994:	83 c4 1c             	add    esp,0x1c
c0019997:	c3                   	ret    

c0019998 <HalDisplayDebugInfo(void*)>:
c0019998:	83 ec 2c             	sub    esp,0x2c
c001999b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001999f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00199a3:	0f 20 c0             	mov    eax,cr0
c00199a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00199aa:	0f 20 d0             	mov    eax,cr2
c00199ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00199b1:	0f 20 d8             	mov    eax,cr3
c00199b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00199b8:	0f 20 e0             	mov    eax,cr4
c00199bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199c3:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00199c6:	83 ec 08             	sub    esp,0x8
c00199c9:	50                   	push   eax
c00199ca:	68 63 53 02 c0       	push   0xc0025363
c00199cf:	e8 90 d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00199d4:	83 c4 10             	add    esp,0x10
c00199d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00199de:	83 ec 08             	sub    esp,0x8
c00199e1:	50                   	push   eax
c00199e2:	68 54 53 02 c0       	push   0xc0025354
c00199e7:	e8 78 d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00199ec:	83 c4 10             	add    esp,0x10
c00199ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199f3:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00199f6:	83 ec 08             	sub    esp,0x8
c00199f9:	50                   	push   eax
c00199fa:	68 5f 53 02 c0       	push   0xc002535f
c00199ff:	e8 60 d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019a04:	83 c4 10             	add    esp,0x10
c0019a07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a0b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019a0e:	83 ec 08             	sub    esp,0x8
c0019a11:	50                   	push   eax
c0019a12:	68 6e 53 02 c0       	push   0xc002536e
c0019a17:	e8 48 d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019a1c:	83 c4 10             	add    esp,0x10
c0019a1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a23:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0019a26:	83 ec 08             	sub    esp,0x8
c0019a29:	50                   	push   eax
c0019a2a:	68 79 53 02 c0       	push   0xc0025379
c0019a2f:	e8 30 d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019a34:	83 c4 10             	add    esp,0x10
c0019a37:	83 ec 08             	sub    esp,0x8
c0019a3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a3e:	68 84 53 02 c0       	push   0xc0025384
c0019a43:	e8 1c d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019a48:	83 c4 10             	add    esp,0x10
c0019a4b:	83 ec 08             	sub    esp,0x8
c0019a4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019a52:	68 8f 53 02 c0       	push   0xc002538f
c0019a57:	e8 08 d5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019a5c:	83 c4 10             	add    esp,0x10
c0019a5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a63:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019a66:	c1 e0 05             	shl    eax,0x5
c0019a69:	8d 90 80 68 02 c0    	lea    edx,[eax-0x3ffd9780]
c0019a6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a73:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0019a76:	83 ec 04             	sub    esp,0x4
c0019a79:	52                   	push   edx
c0019a7a:	50                   	push   eax
c0019a7b:	68 9a 53 02 c0       	push   0xc002539a
c0019a80:	e8 df d4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019a85:	83 c4 10             	add    esp,0x10
c0019a88:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019a8d:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019a93:	83 ec 0c             	sub    esp,0xc
c0019a96:	50                   	push   eax
c0019a97:	e8 dd 8a ff ff       	call   c0012579 <setActiveTerminal(VgaText*)>
c0019a9c:	83 c4 10             	add    esp,0x10
c0019a9f:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019aa4:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019aaa:	83 ec 08             	sub    esp,0x8
c0019aad:	68 a9 53 02 c0       	push   0xc00253a9
c0019ab2:	50                   	push   eax
c0019ab3:	e8 0e 8e ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c0019ab8:	83 c4 10             	add    esp,0x10
c0019abb:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019ac0:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019ac6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019aca:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0019acd:	83 ec 08             	sub    esp,0x8
c0019ad0:	52                   	push   edx
c0019ad1:	50                   	push   eax
c0019ad2:	e8 a9 8d ff ff       	call   c0012880 <VgaText::putx(unsigned int)>
c0019ad7:	83 c4 10             	add    esp,0x10
c0019ada:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019adf:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019ae5:	83 ec 08             	sub    esp,0x8
c0019ae8:	68 b7 53 02 c0       	push   0xc00253b7
c0019aed:	50                   	push   eax
c0019aee:	e8 d3 8d ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c0019af3:	83 c4 10             	add    esp,0x10
c0019af6:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019afb:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019b01:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0019b06:	8b 12                	mov    edx,DWORD PTR [edx]
c0019b08:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019b0b:	83 c2 0c             	add    edx,0xc
c0019b0e:	83 ec 08             	sub    esp,0x8
c0019b11:	52                   	push   edx
c0019b12:	50                   	push   eax
c0019b13:	e8 ae 8d ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c0019b18:	83 c4 10             	add    esp,0x10
c0019b1b:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019b20:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019b26:	83 ec 08             	sub    esp,0x8
c0019b29:	68 c0 53 02 c0       	push   0xc00253c0
c0019b2e:	50                   	push   eax
c0019b2f:	e8 92 8d ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c0019b34:	83 c4 10             	add    esp,0x10
c0019b37:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019b3c:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019b42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b46:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0019b49:	83 ec 08             	sub    esp,0x8
c0019b4c:	52                   	push   edx
c0019b4d:	50                   	push   eax
c0019b4e:	e8 2d 8d ff ff       	call   c0012880 <VgaText::putx(unsigned int)>
c0019b53:	83 c4 10             	add    esp,0x10
c0019b56:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019b5b:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019b61:	83 ec 08             	sub    esp,0x8
c0019b64:	68 c8 53 02 c0       	push   0xc00253c8
c0019b69:	50                   	push   eax
c0019b6a:	e8 57 8d ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c0019b6f:	83 c4 10             	add    esp,0x10
c0019b72:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019b77:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019b7d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b81:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0019b84:	83 ec 08             	sub    esp,0x8
c0019b87:	52                   	push   edx
c0019b88:	50                   	push   eax
c0019b89:	e8 f2 8c ff ff       	call   c0012880 <VgaText::putx(unsigned int)>
c0019b8e:	83 c4 10             	add    esp,0x10
c0019b91:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019b96:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019b9c:	83 ec 08             	sub    esp,0x8
c0019b9f:	68 d0 53 02 c0       	push   0xc00253d0
c0019ba4:	50                   	push   eax
c0019ba5:	e8 1c 8d ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c0019baa:	83 c4 10             	add    esp,0x10
c0019bad:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019bb2:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019bb8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019bbc:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0019bbf:	83 ec 08             	sub    esp,0x8
c0019bc2:	52                   	push   edx
c0019bc3:	50                   	push   eax
c0019bc4:	e8 b7 8c ff ff       	call   c0012880 <VgaText::putx(unsigned int)>
c0019bc9:	83 c4 10             	add    esp,0x10
c0019bcc:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019bd1:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019bd7:	83 ec 08             	sub    esp,0x8
c0019bda:	68 d8 53 02 c0       	push   0xc00253d8
c0019bdf:	50                   	push   eax
c0019be0:	e8 e1 8c ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c0019be5:	83 c4 10             	add    esp,0x10
c0019be8:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019bed:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019bf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019bf7:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0019bfa:	83 ec 08             	sub    esp,0x8
c0019bfd:	52                   	push   edx
c0019bfe:	50                   	push   eax
c0019bff:	e8 7c 8c ff ff       	call   c0012880 <VgaText::putx(unsigned int)>
c0019c04:	83 c4 10             	add    esp,0x10
c0019c07:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c0c:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019c12:	83 ec 08             	sub    esp,0x8
c0019c15:	68 e0 53 02 c0       	push   0xc00253e0
c0019c1a:	50                   	push   eax
c0019c1b:	e8 a6 8c ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c0019c20:	83 c4 10             	add    esp,0x10
c0019c23:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c28:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019c2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c32:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0019c35:	83 ec 08             	sub    esp,0x8
c0019c38:	52                   	push   edx
c0019c39:	50                   	push   eax
c0019c3a:	e8 41 8c ff ff       	call   c0012880 <VgaText::putx(unsigned int)>
c0019c3f:	83 c4 10             	add    esp,0x10
c0019c42:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c47:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019c4d:	83 ec 08             	sub    esp,0x8
c0019c50:	68 e8 53 02 c0       	push   0xc00253e8
c0019c55:	50                   	push   eax
c0019c56:	e8 6b 8c ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c0019c5b:	83 c4 10             	add    esp,0x10
c0019c5e:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c63:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019c69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c6d:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019c70:	83 ec 08             	sub    esp,0x8
c0019c73:	52                   	push   edx
c0019c74:	50                   	push   eax
c0019c75:	e8 06 8c ff ff       	call   c0012880 <VgaText::putx(unsigned int)>
c0019c7a:	83 c4 10             	add    esp,0x10
c0019c7d:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c82:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019c88:	83 ec 08             	sub    esp,0x8
c0019c8b:	68 f0 53 02 c0       	push   0xc00253f0
c0019c90:	50                   	push   eax
c0019c91:	e8 30 8c ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c0019c96:	83 c4 10             	add    esp,0x10
c0019c99:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019c9e:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019ca4:	83 ec 08             	sub    esp,0x8
c0019ca7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019cab:	50                   	push   eax
c0019cac:	e8 cf 8b ff ff       	call   c0012880 <VgaText::putx(unsigned int)>
c0019cb1:	83 c4 10             	add    esp,0x10
c0019cb4:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019cb9:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019cbf:	83 ec 08             	sub    esp,0x8
c0019cc2:	68 f9 53 02 c0       	push   0xc00253f9
c0019cc7:	50                   	push   eax
c0019cc8:	e8 f9 8b ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c0019ccd:	83 c4 10             	add    esp,0x10
c0019cd0:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019cd5:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019cdb:	83 ec 08             	sub    esp,0x8
c0019cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ce2:	50                   	push   eax
c0019ce3:	e8 98 8b ff ff       	call   c0012880 <VgaText::putx(unsigned int)>
c0019ce8:	83 c4 10             	add    esp,0x10
c0019ceb:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019cf0:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019cf6:	83 ec 08             	sub    esp,0x8
c0019cf9:	68 01 54 02 c0       	push   0xc0025401
c0019cfe:	50                   	push   eax
c0019cff:	e8 c2 8b ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c0019d04:	83 c4 10             	add    esp,0x10
c0019d07:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019d0c:	8b 80 66 05 00 00    	mov    eax,DWORD PTR [eax+0x566]
c0019d12:	83 ec 08             	sub    esp,0x8
c0019d15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d19:	50                   	push   eax
c0019d1a:	e8 61 8b ff ff       	call   c0012880 <VgaText::putx(unsigned int)>
c0019d1f:	83 c4 10             	add    esp,0x10
c0019d22:	fa                   	cli    
c0019d23:	f4                   	hlt    
c0019d24:	eb fe                	jmp    c0019d24 <HalDisplayDebugInfo(void*)+0x38c>

c0019d26 <HalReceivedNMI()>:
c0019d26:	83 ec 1c             	sub    esp,0x1c
c0019d29:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c0019d30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019d34:	89 c2                	mov    edx,eax
c0019d36:	ec                   	in     al,dx
c0019d37:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0019d3b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0019d3f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019d43:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c0019d4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d4e:	89 c2                	mov    edx,eax
c0019d50:	ec                   	in     al,dx
c0019d51:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019d55:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0019d59:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019d5d:	83 ec 0c             	sub    esp,0xc
c0019d60:	68 09 54 02 c0       	push   0xc0025409
c0019d65:	e8 fa d1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019d6a:	83 c4 10             	add    esp,0x10
c0019d6d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019d72:	83 e0 10             	and    eax,0x10
c0019d75:	74 10                	je     c0019d87 <HalReceivedNMI()+0x61>
c0019d77:	83 ec 0c             	sub    esp,0xc
c0019d7a:	68 1a 54 02 c0       	push   0xc002541a
c0019d7f:	e8 8e 62 ff ff       	call   c0010012 <KePanic(char const*)>
c0019d84:	83 c4 10             	add    esp,0x10
c0019d87:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0019d8c:	83 e0 40             	and    eax,0x40
c0019d8f:	74 10                	je     c0019da1 <HalReceivedNMI()+0x7b>
c0019d91:	83 ec 0c             	sub    esp,0xc
c0019d94:	68 27 54 02 c0       	push   0xc0025427
c0019d99:	e8 74 62 ff ff       	call   c0010012 <KePanic(char const*)>
c0019d9e:	83 c4 10             	add    esp,0x10
c0019da1:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0019da5:	0f be c0             	movsx  eax,al
c0019da8:	85 c0                	test   eax,eax
c0019daa:	79 10                	jns    c0019dbc <HalReceivedNMI()+0x96>
c0019dac:	83 ec 0c             	sub    esp,0xc
c0019daf:	68 31 54 02 c0       	push   0xc0025431
c0019db4:	e8 59 62 ff ff       	call   c0010012 <KePanic(char const*)>
c0019db9:	83 c4 10             	add    esp,0x10
c0019dbc:	90                   	nop
c0019dbd:	83 c4 1c             	add    esp,0x1c
c0019dc0:	c3                   	ret    

c0019dc1 <HalSystemIdle()>:
c0019dc1:	56                   	push   esi
c0019dc2:	53                   	push   ebx
c0019dc3:	83 ec 14             	sub    esp,0x14
c0019dc6:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019dcb:	83 e0 10             	and    eax,0x10
c0019dce:	0f b6 c0             	movzx  eax,al
c0019dd1:	85 c0                	test   eax,eax
c0019dd3:	74 43                	je     c0019e18 <HalSystemIdle()+0x57>
c0019dd5:	83 ec 0c             	sub    esp,0xc
c0019dd8:	68 e1 00 00 00       	push   0xe1
c0019ddd:	e8 99 f9 ff ff       	call   c001977b <x86rdmsr(unsigned int)>
c0019de2:	83 c4 10             	add    esp,0x10
c0019de5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019de9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019ded:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019df1:	83 e0 02             	and    eax,0x2
c0019df4:	89 c3                	mov    ebx,eax
c0019df6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019dfa:	83 e0 00             	and    eax,0x0
c0019dfd:	89 c6                	mov    esi,eax
c0019dff:	83 ec 04             	sub    esp,0x4
c0019e02:	56                   	push   esi
c0019e03:	53                   	push   ebx
c0019e04:	68 e1 00 00 00       	push   0xe1
c0019e09:	e8 ab f9 ff ff       	call   c00197b9 <x86wrmsr(unsigned int, unsigned long long)>
c0019e0e:	83 c4 10             	add    esp,0x10
c0019e11:	e8 7e 63 fe ff       	call   c0000194 <doTPAUSE>
c0019e16:	eb 01                	jmp    c0019e19 <HalSystemIdle()+0x58>
c0019e18:	f4                   	hlt    
c0019e19:	90                   	nop
c0019e1a:	83 c4 14             	add    esp,0x14
c0019e1d:	5b                   	pop    ebx
c0019e1e:	5e                   	pop    esi
c0019e1f:	c3                   	ret    

c0019e20 <i386SaveCoprocessor(void*)>:
c0019e20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e24:	83 c0 3f             	add    eax,0x3f
c0019e27:	83 e0 c0             	and    eax,0xffffffc0
c0019e2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019e2e:	ff 25 d0 ea 02 c0    	jmp    DWORD PTR ds:0xc002ead0

c0019e34 <i386LoadCoprocessor(void*)>:
c0019e34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e38:	83 c0 3f             	add    eax,0x3f
c0019e3b:	83 e0 c0             	and    eax,0xffffffc0
c0019e3e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019e42:	ff 25 cc ea 02 c0    	jmp    DWORD PTR ds:0xc002eacc

c0019e48 <x87EmulHandler(regs*, void*)>:
c0019e48:	53                   	push   ebx
c0019e49:	83 ec 08             	sub    esp,0x8
c0019e4c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e51:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0019e55:	74 10                	je     c0019e67 <x87EmulHandler(regs*, void*)+0x1f>
c0019e57:	83 ec 0c             	sub    esp,0xc
c0019e5a:	68 3e 54 02 c0       	push   0xc002543e
c0019e5f:	e8 ae 61 ff ff       	call   c0010012 <KePanic(char const*)>
c0019e64:	83 c4 10             	add    esp,0x10
c0019e67:	0f 20 c0             	mov    eax,cr0
c0019e6a:	a8 08                	test   al,0x8
c0019e6c:	74 59                	je     c0019ec7 <x87EmulHandler(regs*, void*)+0x7f>
c0019e6e:	0f 06                	clts   
c0019e70:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c0019e75:	85 c0                	test   eax,eax
c0019e77:	74 0e                	je     c0019e87 <x87EmulHandler(regs*, void*)+0x3f>
c0019e79:	83 ec 0c             	sub    esp,0xc
c0019e7c:	ff 70 59             	push   DWORD PTR [eax+0x59]
c0019e7f:	e8 9c ff ff ff       	call   c0019e20 <i386SaveCoprocessor(void*)>
c0019e84:	83 c4 10             	add    esp,0x10
c0019e87:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0019e8d:	83 7b 59 00          	cmp    DWORD PTR [ebx+0x59],0x0
c0019e91:	75 12                	jne    c0019ea5 <x87EmulHandler(regs*, void*)+0x5d>
c0019e93:	83 ec 0c             	sub    esp,0xc
c0019e96:	68 40 02 00 00       	push   0x240
c0019e9b:	e8 2b 5e ff ff       	call   c000fccb <malloc>
c0019ea0:	89 43 59             	mov    DWORD PTR [ebx+0x59],eax
c0019ea3:	eb 10                	jmp    c0019eb5 <x87EmulHandler(regs*, void*)+0x6d>
c0019ea5:	83 ec 0c             	sub    esp,0xc
c0019ea8:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c0019ead:	ff 70 59             	push   DWORD PTR [eax+0x59]
c0019eb0:	e8 7f ff ff ff       	call   c0019e34 <i386LoadCoprocessor(void*)>
c0019eb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019eba:	83 c4 10             	add    esp,0x10
c0019ebd:	a3 c8 ea 02 c0       	mov    ds:0xc002eac8,eax
c0019ec2:	83 c4 08             	add    esp,0x8
c0019ec5:	5b                   	pop    ebx
c0019ec6:	c3                   	ret    
c0019ec7:	83 ec 0c             	sub    esp,0xc
c0019eca:	68 52 54 02 c0       	push   0xc0025452
c0019ecf:	e8 90 d0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019ed4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0019edc:	83 c4 18             	add    esp,0x18
c0019edf:	5b                   	pop    ebx
c0019ee0:	e9 b7 d9 ff ff       	jmp    c001789c <Thr::terminateFromIRQ(int)>

c0019ee5 <HalInitialiseCoprocessor()>:
c0019ee5:	83 ec 10             	sub    esp,0x10
c0019ee8:	c7 05 c8 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eac8,0x0
c0019ef2:	6a 00                	push   0x0
c0019ef4:	68 48 9e 01 c0       	push   0xc0019e48
c0019ef9:	6a 07                	push   0x7
c0019efb:	e8 9d 06 00 00       	call   c001a59d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019f00:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019f05:	83 c4 10             	add    esp,0x10
c0019f08:	a8 80                	test   al,0x80
c0019f0a:	74 1c                	je     c0019f28 <HalInitialiseCoprocessor()+0x43>
c0019f0c:	c7 05 d0 ea 02 c0 78 15 02 c0 	mov    DWORD PTR ds:0xc002ead0,0xc0021578
c0019f16:	c7 05 cc ea 02 c0 80 15 02 c0 	mov    DWORD PTR ds:0xc002eacc,0xc0021580
c0019f20:	83 c4 0c             	add    esp,0xc
c0019f23:	e9 60 76 00 00       	jmp    c0021588 <sseInit>
c0019f28:	a8 10                	test   al,0x10
c0019f2a:	74 1c                	je     c0019f48 <HalInitialiseCoprocessor()+0x63>
c0019f2c:	c7 05 d0 ea 02 c0 c7 15 02 c0 	mov    DWORD PTR ds:0xc002ead0,0xc00215c7
c0019f36:	c7 05 cc ea 02 c0 ce 15 02 c0 	mov    DWORD PTR ds:0xc002eacc,0xc00215ce
c0019f40:	83 c4 0c             	add    esp,0xc
c0019f43:	e9 8d 76 00 00       	jmp    c00215d5 <x87Init>
c0019f48:	c7 05 d0 ea 02 c0 7a 86 01 c0 	mov    DWORD PTR ds:0xc002ead0,0xc001867a
c0019f52:	c7 05 cc ea 02 c0 7a 86 01 c0 	mov    DWORD PTR ds:0xc002eacc,0xc001867a
c0019f5c:	0f 20 c0             	mov    eax,cr0
c0019f5f:	83 c8 04             	or     eax,0x4
c0019f62:	0f 22 c0             	mov    cr0,eax
c0019f65:	83 c4 0c             	add    esp,0xc
c0019f68:	c3                   	ret    

c0019f69 <HalPanic(char const*)>:
c0019f69:	53                   	push   ebx
c0019f6a:	83 ec 10             	sub    esp,0x10
c0019f6d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f71:	fa                   	cli    
c0019f72:	53                   	push   ebx
c0019f73:	68 68 54 02 c0       	push   0xc0025468
c0019f78:	e8 e7 cf fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019f7d:	a1 c4 ea 02 c0       	mov    eax,ds:0xc002eac4
c0019f82:	83 c4 10             	add    esp,0x10
c0019f85:	85 c0                	test   eax,eax
c0019f87:	74 09                	je     c0019f92 <HalPanic(char const*)+0x29>
c0019f89:	83 ec 0c             	sub    esp,0xc
c0019f8c:	53                   	push   ebx
c0019f8d:	ff d0                	call   eax
c0019f8f:	83 c4 10             	add    esp,0x10
c0019f92:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0019f97:	85 c0                	test   eax,eax
c0019f99:	0f 84 dc 00 00 00    	je     c001a07b <HalPanic(char const*)+0x112>
c0019f9f:	52                   	push   edx
c0019fa0:	6a 01                	push   0x1
c0019fa2:	6a 0f                	push   0xf
c0019fa4:	50                   	push   eax
c0019fa5:	e8 0e 84 ff ff       	call   c00123b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019faa:	59                   	pop    ecx
c0019fab:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019fb1:	e8 0e 86 ff ff       	call   c00125c4 <VgaText::clearScreen()>
c0019fb6:	58                   	pop    eax
c0019fb7:	5a                   	pop    edx
c0019fb8:	68 90 44 02 c0       	push   0xc0024490
c0019fbd:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019fc3:	e8 28 84 ff ff       	call   c00123f0 <VgaText::setTitle(char*)>
c0019fc8:	83 c4 0c             	add    esp,0xc
c0019fcb:	6a 01                	push   0x1
c0019fcd:	6a 0f                	push   0xf
c0019fcf:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019fd5:	e8 de 83 ff ff       	call   c00123b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019fda:	59                   	pop    ecx
c0019fdb:	58                   	pop    eax
c0019fdc:	68 81 54 02 c0       	push   0xc0025481
c0019fe1:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019fe7:	e8 da 88 ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c0019fec:	83 c4 0c             	add    esp,0xc
c0019fef:	6a 0f                	push   0xf
c0019ff1:	6a 01                	push   0x1
c0019ff3:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019ff9:	e8 ba 83 ff ff       	call   c00123b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019ffe:	58                   	pop    eax
c0019fff:	5a                   	pop    edx
c001a000:	68 8a 54 02 c0       	push   0xc002548a
c001a005:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a00b:	e8 b6 88 ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c001a010:	83 c4 0c             	add    esp,0xc
c001a013:	6a 01                	push   0x1
c001a015:	6a 0f                	push   0xf
c001a017:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a01d:	e8 96 83 ff ff       	call   c00123b8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a022:	59                   	pop    ecx
c001a023:	58                   	pop    eax
c001a024:	68 ce 54 02 c0       	push   0xc00254ce
c001a029:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a02f:	e8 92 88 ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c001a034:	58                   	pop    eax
c001a035:	5a                   	pop    edx
c001a036:	68 97 54 02 c0       	push   0xc0025497
c001a03b:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a041:	e8 80 88 ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c001a046:	59                   	pop    ecx
c001a047:	58                   	pop    eax
c001a048:	68 d1 54 02 c0       	push   0xc00254d1
c001a04d:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a053:	e8 6e 88 ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c001a058:	58                   	pop    eax
c001a059:	5a                   	pop    edx
c001a05a:	53                   	push   ebx
c001a05b:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a061:	e8 60 88 ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c001a066:	59                   	pop    ecx
c001a067:	5b                   	pop    ebx
c001a068:	68 ce 54 02 c0       	push   0xc00254ce
c001a06d:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c001a073:	e8 4e 88 ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c001a078:	83 c4 10             	add    esp,0x10
c001a07b:	eb fe                	jmp    c001a07b <HalPanic(char const*)+0x112>

c001a07d <HalQueryPerformanceCounter()>:
c001a07d:	31 c0                	xor    eax,eax
c001a07f:	31 d2                	xor    edx,edx
c001a081:	f6 05 0e eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0e,0x8
c001a088:	75 02                	jne    c001a08c <HalQueryPerformanceCounter()+0xf>
c001a08a:	0f 31                	rdtsc  
c001a08c:	c3                   	ret    

c001a08d <HalInitialise()>:
c001a08d:	53                   	push   ebx
c001a08e:	83 ec 08             	sub    esp,0x8
c001a091:	c6 05 c0 ea 02 c0 00 	mov    BYTE PTR ds:0xc002eac0,0x0
c001a098:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001a09d:	83 e0 fe             	and    eax,0xfffffffe
c001a0a0:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001a0a5:	e8 d2 07 00 00       	call   c001a87c <picOpen()>
c001a0aa:	80 3d c0 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002eac0,0x0
c001a0b1:	74 0a                	je     c001a0bd <HalInitialise()+0x30>
c001a0b3:	e8 14 07 00 00       	call   c001a7cc <picDisable()>
c001a0b8:	e8 c5 6a 00 00       	call   c0020b82 <apicOpen()>
c001a0bd:	bb 0f 00 00 00       	mov    ebx,0xf
c001a0c2:	50                   	push   eax
c001a0c3:	6a 00                	push   0x0
c001a0c5:	68 8c ec 00 c0       	push   0xc000ec8c
c001a0ca:	6a 00                	push   0x0
c001a0cc:	e8 cc 04 00 00       	call   c001a59d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a0d1:	83 c4 0c             	add    esp,0xc
c001a0d4:	6a 00                	push   0x0
c001a0d6:	68 8c ec 00 c0       	push   0xc000ec8c
c001a0db:	6a 01                	push   0x1
c001a0dd:	e8 bb 04 00 00       	call   c001a59d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a0e2:	83 c4 0c             	add    esp,0xc
c001a0e5:	6a 00                	push   0x0
c001a0e7:	68 7c ec 00 c0       	push   0xc000ec7c
c001a0ec:	6a 02                	push   0x2
c001a0ee:	e8 aa 04 00 00       	call   c001a59d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a0f3:	83 c4 0c             	add    esp,0xc
c001a0f6:	6a 00                	push   0x0
c001a0f8:	68 8c ec 00 c0       	push   0xc000ec8c
c001a0fd:	6a 03                	push   0x3
c001a0ff:	e8 99 04 00 00       	call   c001a59d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a104:	83 c4 0c             	add    esp,0xc
c001a107:	6a 00                	push   0x0
c001a109:	68 8c ec 00 c0       	push   0xc000ec8c
c001a10e:	6a 04                	push   0x4
c001a110:	e8 88 04 00 00       	call   c001a59d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a115:	83 c4 0c             	add    esp,0xc
c001a118:	6a 00                	push   0x0
c001a11a:	68 8c ec 00 c0       	push   0xc000ec8c
c001a11f:	6a 05                	push   0x5
c001a121:	e8 77 04 00 00       	call   c001a59d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a126:	83 c4 0c             	add    esp,0xc
c001a129:	6a 00                	push   0x0
c001a12b:	68 c0 ec 00 c0       	push   0xc000ecc0
c001a130:	6a 06                	push   0x6
c001a132:	e8 66 04 00 00       	call   c001a59d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a137:	83 c4 0c             	add    esp,0xc
c001a13a:	6a 00                	push   0x0
c001a13c:	68 14 ed 00 c0       	push   0xc000ed14
c001a141:	6a 08                	push   0x8
c001a143:	e8 55 04 00 00       	call   c001a59d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a148:	83 c4 0c             	add    esp,0xc
c001a14b:	6a 00                	push   0x0
c001a14d:	68 8c ec 00 c0       	push   0xc000ec8c
c001a152:	6a 09                	push   0x9
c001a154:	e8 44 04 00 00       	call   c001a59d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a159:	83 c4 0c             	add    esp,0xc
c001a15c:	6a 00                	push   0x0
c001a15e:	68 8c ec 00 c0       	push   0xc000ec8c
c001a163:	6a 0a                	push   0xa
c001a165:	e8 33 04 00 00       	call   c001a59d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a16a:	83 c4 0c             	add    esp,0xc
c001a16d:	6a 00                	push   0x0
c001a16f:	68 8c ec 00 c0       	push   0xc000ec8c
c001a174:	6a 0b                	push   0xb
c001a176:	e8 22 04 00 00       	call   c001a59d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a17b:	83 c4 0c             	add    esp,0xc
c001a17e:	6a 00                	push   0x0
c001a180:	68 c4 eb 00 c0       	push   0xc000ebc4
c001a185:	6a 0d                	push   0xd
c001a187:	e8 11 04 00 00       	call   c001a59d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a18c:	83 c4 0c             	add    esp,0xc
c001a18f:	6a 00                	push   0x0
c001a191:	68 18 ec 00 c0       	push   0xc000ec18
c001a196:	6a 0e                	push   0xe
c001a198:	e8 00 04 00 00       	call   c001a59d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a19d:	83 c4 10             	add    esp,0x10
c001a1a0:	50                   	push   eax
c001a1a1:	6a 00                	push   0x0
c001a1a3:	68 8c ec 00 c0       	push   0xc000ec8c
c001a1a8:	53                   	push   ebx
c001a1a9:	43                   	inc    ebx
c001a1aa:	e8 ee 03 00 00       	call   c001a59d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a1af:	83 c4 10             	add    esp,0x10
c001a1b2:	83 fb 1e             	cmp    ebx,0x1e
c001a1b5:	75 e9                	jne    c001a1a0 <HalInitialise()+0x113>
c001a1b7:	50                   	push   eax
c001a1b8:	6a 00                	push   0x0
c001a1ba:	68 52 22 01 c0       	push   0xc0012252
c001a1bf:	6a 60                	push   0x60
c001a1c1:	e8 d7 03 00 00       	call   c001a59d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001a1c6:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001a1cb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001a1d5:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001a1dc:	e8 ea 5a ff ff       	call   c000fccb <malloc>
c001a1e1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1e4:	89 c3                	mov    ebx,eax
c001a1e6:	e8 ff 0d 00 00       	call   c001afea <RTC::RTC()>
c001a1eb:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001a1f5:	5a                   	pop    edx
c001a1f6:	59                   	pop    ecx
c001a1f7:	53                   	push   ebx
c001a1f8:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c001a1fe:	e8 f9 f7 fe ff       	call   c00099fc <Device::addChild(Device*)>
c001a203:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a205:	6a 00                	push   0x0
c001a207:	6a 00                	push   0x0
c001a209:	6a 00                	push   0x0
c001a20b:	53                   	push   ebx
c001a20c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a20f:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001a214:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001a21a:	83 c4 28             	add    esp,0x28
c001a21d:	5b                   	pop    ebx
c001a21e:	c3                   	ret    

c001a21f <HalMakeBeep(int)>:
c001a21f:	53                   	push   ebx
c001a220:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001a224:	85 db                	test   ebx,ebx
c001a226:	75 07                	jne    c001a22f <HalMakeBeep(int)+0x10>
c001a228:	e4 61                	in     al,0x61
c001a22a:	83 e0 fc             	and    eax,0xfffffffc
c001a22d:	eb 26                	jmp    c001a255 <HalMakeBeep(int)+0x36>
c001a22f:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001a234:	99                   	cdq    
c001a235:	f7 fb                	idiv   ebx
c001a237:	89 c1                	mov    ecx,eax
c001a239:	b0 b6                	mov    al,0xb6
c001a23b:	e6 43                	out    0x43,al
c001a23d:	88 c8                	mov    al,cl
c001a23f:	e6 42                	out    0x42,al
c001a241:	89 c8                	mov    eax,ecx
c001a243:	c1 e8 08             	shr    eax,0x8
c001a246:	e6 42                	out    0x42,al
c001a248:	e4 61                	in     al,0x61
c001a24a:	89 c2                	mov    edx,eax
c001a24c:	83 ca 03             	or     edx,0x3
c001a24f:	38 d0                	cmp    al,dl
c001a251:	74 04                	je     c001a257 <HalMakeBeep(int)+0x38>
c001a253:	88 d0                	mov    al,dl
c001a255:	e6 61                	out    0x61,al
c001a257:	5b                   	pop    ebx
c001a258:	c3                   	ret    

c001a259 <HalGetRand()>:
c001a259:	31 c0                	xor    eax,eax
c001a25b:	c3                   	ret    

c001a25c <HalEndOfInterrupt(int)>:
c001a25c:	80 3d c0 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002eac0,0x0
c001a263:	74 1d                	je     c001a282 <HalEndOfInterrupt(int)+0x26>
c001a265:	83 ec 18             	sub    esp,0x18
c001a268:	6a 1b                	push   0x1b
c001a26a:	e8 0c f5 ff ff       	call   c001977b <x86rdmsr(unsigned int)>
c001a26f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a274:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001a27e:	83 c4 1c             	add    esp,0x1c
c001a281:	c3                   	ret    
c001a282:	e9 79 07 00 00       	jmp    c001aa00 <picEOI(int)>

c001a287 <HalRestart()>:
c001a287:	c3                   	ret    

c001a288 <HalShutdown()>:
c001a288:	c3                   	ret    

c001a289 <HalSleep()>:
c001a289:	c3                   	ret    

c001a28a <CPU::CPU()>:
c001a28a:	83 ec 0c             	sub    esp,0xc
c001a28d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a291:	83 ec 08             	sub    esp,0x8
c001a294:	68 43 52 02 c0       	push   0xc0025243
c001a299:	50                   	push   eax
c001a29a:	e8 bf f8 fe ff       	call   c0009b5e <Device::Device(char const*)>
c001a29f:	83 c4 10             	add    esp,0x10
c001a2a2:	ba a0 55 02 c0       	mov    edx,0xc00255a0
c001a2a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2ab:	89 10                	mov    DWORD PTR [eax],edx
c001a2ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2b1:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001a2bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2bf:	05 64 01 00 00       	add    eax,0x164
c001a2c4:	83 ec 0c             	sub    esp,0xc
c001a2c7:	50                   	push   eax
c001a2c8:	e8 9b 4a ff ff       	call   c000ed68 <GDT::GDT()>
c001a2cd:	83 c4 10             	add    esp,0x10
c001a2d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2d4:	05 68 09 00 00       	add    eax,0x968
c001a2d9:	83 ec 0c             	sub    esp,0xc
c001a2dc:	50                   	push   eax
c001a2dd:	e8 da 4c ff ff       	call   c000efbc <IDT::IDT()>
c001a2e2:	83 c4 10             	add    esp,0x10
c001a2e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2e9:	05 68 11 00 00       	add    eax,0x1168
c001a2ee:	83 ec 0c             	sub    esp,0xc
c001a2f1:	50                   	push   eax
c001a2f2:	e8 a9 8a ff ff       	call   c0012da0 <TSS::TSS()>
c001a2f7:	83 c4 10             	add    esp,0x10
c001a2fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2fe:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001a308:	90                   	nop
c001a309:	83 c4 0c             	add    esp,0xc
c001a30c:	c3                   	ret    
c001a30d:	90                   	nop

c001a30e <CPU::setupSMEP()>:
c001a30e:	0f 20 e0             	mov    eax,cr4
c001a311:	0d 00 00 10 00       	or     eax,0x100000
c001a316:	0f 22 e0             	mov    cr4,eax
c001a319:	c3                   	ret    

c001a31a <CPU::setupUMIP()>:
c001a31a:	0f 20 e0             	mov    eax,cr4
c001a31d:	80 cc 08             	or     ah,0x8
c001a320:	0f 22 e0             	mov    cr4,eax
c001a323:	c3                   	ret    

c001a324 <CPU::setupTSC()>:
c001a324:	0f 20 e0             	mov    eax,cr4
c001a327:	83 c8 04             	or     eax,0x4
c001a32a:	0f 22 e0             	mov    cr4,eax
c001a32d:	c3                   	ret    

c001a32e <CPU::setupLargePages()>:
c001a32e:	0f 20 e0             	mov    eax,cr4
c001a331:	83 c8 10             	or     eax,0x10
c001a334:	0f 22 e0             	mov    cr4,eax
c001a337:	c3                   	ret    

c001a338 <CPU::setupPAT()>:
c001a338:	f6 05 0c eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0c,0x8
c001a33f:	74 28                	je     c001a369 <CPU::setupPAT()+0x31>
c001a341:	53                   	push   ebx
c001a342:	83 ec 14             	sub    esp,0x14
c001a345:	68 77 02 00 00       	push   0x277
c001a34a:	e8 2c f4 ff ff       	call   c001977b <x86rdmsr(unsigned int)>
c001a34f:	83 c4 0c             	add    esp,0xc
c001a352:	83 e2 f8             	and    edx,0xfffffff8
c001a355:	83 ca 01             	or     edx,0x1
c001a358:	52                   	push   edx
c001a359:	50                   	push   eax
c001a35a:	68 77 02 00 00       	push   0x277
c001a35f:	e8 55 f4 ff ff       	call   c00197b9 <x86wrmsr(unsigned int, unsigned long long)>
c001a364:	83 c4 18             	add    esp,0x18
c001a367:	5b                   	pop    ebx
c001a368:	c3                   	ret    
c001a369:	c3                   	ret    

c001a36a <CPU::setupMTRR()>:
c001a36a:	c3                   	ret    
c001a36b:	90                   	nop

c001a36c <CPU::setupGlobalPages()>:
c001a36c:	0f 20 e0             	mov    eax,cr4
c001a36f:	0c 80                	or     al,0x80
c001a371:	0f 22 e0             	mov    cr4,eax
c001a374:	c3                   	ret    
c001a375:	90                   	nop

c001a376 <CPU::allowUsermodeDataAccess()>:
c001a376:	f6 05 0f eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0f,0x40
c001a37d:	74 03                	je     c001a382 <CPU::allowUsermodeDataAccess()+0xc>
c001a37f:	0f 01 cb             	stac   
c001a382:	c3                   	ret    
c001a383:	90                   	nop

c001a384 <CPU::prohibitUsermodeDataAccess()>:
c001a384:	f6 05 0f eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0f,0x40
c001a38b:	74 03                	je     c001a390 <CPU::prohibitUsermodeDataAccess()+0xc>
c001a38d:	0f 01 ca             	clac   
c001a390:	c3                   	ret    
c001a391:	90                   	nop

c001a392 <CPU::setupSMAP()>:
c001a392:	0f 20 e0             	mov    eax,cr4
c001a395:	0d 00 00 20 00       	or     eax,0x200000
c001a39a:	0f 22 e0             	mov    cr4,eax
c001a39d:	eb e5                	jmp    c001a384 <CPU::prohibitUsermodeDataAccess()>
c001a39f:	90                   	nop

c001a3a0 <CPU::setupFeatures()>:
c001a3a0:	53                   	push   ebx
c001a3a1:	83 ec 08             	sub    esp,0x8
c001a3a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3a8:	f6 05 0f eb 02 c0 20 	test   BYTE PTR ds:0xc002eb0f,0x20
c001a3af:	74 18                	je     c001a3c9 <CPU::setupFeatures()+0x29>
c001a3b1:	83 ec 0c             	sub    esp,0xc
c001a3b4:	68 dc 54 02 c0       	push   0xc00254dc
c001a3b9:	e8 a6 cb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a3be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3c1:	e8 54 ff ff ff       	call   c001a31a <CPU::setupUMIP()>
c001a3c6:	83 c4 10             	add    esp,0x10
c001a3c9:	f6 05 0e eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0e,0x8
c001a3d0:	74 18                	je     c001a3ea <CPU::setupFeatures()+0x4a>
c001a3d2:	83 ec 0c             	sub    esp,0xc
c001a3d5:	68 e6 54 02 c0       	push   0xc00254e6
c001a3da:	e8 85 cb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a3df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3e2:	e8 3d ff ff ff       	call   c001a324 <CPU::setupTSC()>
c001a3e7:	83 c4 10             	add    esp,0x10
c001a3ea:	f6 05 0e eb 02 c0 20 	test   BYTE PTR ds:0xc002eb0e,0x20
c001a3f1:	74 18                	je     c001a40b <CPU::setupFeatures()+0x6b>
c001a3f3:	83 ec 0c             	sub    esp,0xc
c001a3f6:	68 ef 54 02 c0       	push   0xc00254ef
c001a3fb:	e8 64 cb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a400:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a403:	e8 26 ff ff ff       	call   c001a32e <CPU::setupLargePages()>
c001a408:	83 c4 10             	add    esp,0x10
c001a40b:	f6 05 0e eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0e,0x40
c001a412:	74 18                	je     c001a42c <CPU::setupFeatures()+0x8c>
c001a414:	83 ec 0c             	sub    esp,0xc
c001a417:	68 f8 54 02 c0       	push   0xc00254f8
c001a41c:	e8 43 cb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a421:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a424:	e8 43 ff ff ff       	call   c001a36c <CPU::setupGlobalPages()>
c001a429:	83 c4 10             	add    esp,0x10
c001a42c:	f6 05 0e eb 02 c0 80 	test   BYTE PTR ds:0xc002eb0e,0x80
c001a433:	74 18                	je     c001a44d <CPU::setupFeatures()+0xad>
c001a435:	83 ec 0c             	sub    esp,0xc
c001a438:	68 0a 55 02 c0       	push   0xc002550a
c001a43d:	e8 22 cb fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a442:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a445:	e8 ee fe ff ff       	call   c001a338 <CPU::setupPAT()>
c001a44a:	83 c4 10             	add    esp,0x10
c001a44d:	f6 05 10 eb 02 c0 04 	test   BYTE PTR ds:0xc002eb10,0x4
c001a454:	74 11                	je     c001a467 <CPU::setupFeatures()+0xc7>
c001a456:	c7 44 24 10 13 55 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025513
c001a45e:	83 c4 08             	add    esp,0x8
c001a461:	5b                   	pop    ebx
c001a462:	e9 fd ca fe ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c001a467:	83 c4 08             	add    esp,0x8
c001a46a:	5b                   	pop    ebx
c001a46b:	c3                   	ret    

c001a46c <CPU::open(int, int, void*)>:
c001a46c:	55                   	push   ebp
c001a46d:	57                   	push   edi
c001a46e:	56                   	push   esi
c001a46f:	53                   	push   ebx
c001a470:	83 ec 18             	sub    esp,0x18
c001a473:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a477:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a47b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a47f:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001a485:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001a48b:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001a491:	50                   	push   eax
c001a492:	e8 33 49 ff ff       	call   c000edca <GDT::setup()>
c001a497:	83 c4 0c             	add    esp,0xc
c001a49a:	6a 00                	push   0x0
c001a49c:	68 ef be ad de       	push   0xdeadbeef
c001a4a1:	55                   	push   ebp
c001a4a2:	e8 3d 89 ff ff       	call   c0012de4 <TSS::setup(unsigned long, unsigned long)>
c001a4a7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a4aa:	e8 15 89 ff ff       	call   c0012dc4 <TSS::flush()>
c001a4af:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001a4b5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4b8:	e8 75 4b ff ff       	call   c000f032 <IDT::setup()>
c001a4bd:	b8 00 04 00 00       	mov    eax,0x400
c001a4c2:	0f 23 f8             	mov    dr7,eax
c001a4c5:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001a4cf:	e8 32 5d ff ff       	call   c0010206 <Phys::allocatePage()>
c001a4d4:	83 c4 10             	add    esp,0x10
c001a4d7:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001a4dd:	85 f6                	test   esi,esi
c001a4df:	89 38                	mov    DWORD PTR [eax],edi
c001a4e1:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a4e7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001a4ea:	74 10                	je     c001a4fc <CPU::open(int, int, void*)+0x90>
c001a4ec:	50                   	push   eax
c001a4ed:	50                   	push   eax
c001a4ee:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a4f4:	56                   	push   esi
c001a4f5:	e8 a4 92 ff ff       	call   c001379e <VAS::setCPUSpecific(unsigned long)>
c001a4fa:	eb 0d                	jmp    c001a509 <CPU::open(int, int, void*)+0x9d>
c001a4fc:	83 ec 0c             	sub    esp,0xc
c001a4ff:	68 1d 55 02 c0       	push   0xc002551d
c001a504:	e8 09 5b ff ff       	call   c0010012 <KePanic(char const*)>
c001a509:	83 c4 10             	add    esp,0x10
c001a50c:	83 ec 0c             	sub    esp,0xc
c001a50f:	68 2b 55 02 c0       	push   0xc002552b
c001a514:	e8 7a 2d ff ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001a519:	e8 6f fb ff ff       	call   c001a08d <HalInitialise()>
c001a51e:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c001a523:	83 e0 10             	and    eax,0x10
c001a526:	83 f8 01             	cmp    eax,0x1
c001a529:	19 c0                	sbb    eax,eax
c001a52b:	83 e0 46             	and    eax,0x46
c001a52e:	83 c0 1e             	add    eax,0x1e
c001a531:	89 04 24             	mov    DWORD PTR [esp],eax
c001a534:	e8 5c 0b ff ff       	call   c000b095 <setupTimer(int)>
c001a539:	83 c4 10             	add    esp,0x10
c001a53c:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001a542:	f6 05 24 e1 02 c0 20 	test   BYTE PTR ds:0xc002e124,0x20
c001a549:	74 0c                	je     c001a557 <CPU::open(int, int, void*)+0xeb>
c001a54b:	83 ec 0c             	sub    esp,0xc
c001a54e:	53                   	push   ebx
c001a54f:	e8 4c fe ff ff       	call   c001a3a0 <CPU::setupFeatures()>
c001a554:	83 c4 10             	add    esp,0x10
c001a557:	83 c4 0c             	add    esp,0xc
c001a55a:	31 c0                	xor    eax,eax
c001a55c:	5b                   	pop    ebx
c001a55d:	5e                   	pop    esi
c001a55e:	5f                   	pop    edi
c001a55f:	5d                   	pop    ebp
c001a560:	c3                   	ret    

c001a561 <convertLegacyIRQNumber(int)>:
c001a561:	83 ec 0c             	sub    esp,0xc
c001a564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a568:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a56f:	74 0c                	je     c001a57d <convertLegacyIRQNumber(int)+0x1c>
c001a571:	83 f8 0f             	cmp    eax,0xf
c001a574:	7f 0b                	jg     c001a581 <convertLegacyIRQNumber(int)+0x20>
c001a576:	0f b6 80 08 61 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9ef8]
c001a57d:	83 c4 0c             	add    esp,0xc
c001a580:	c3                   	ret    
c001a581:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a585:	83 ec 0c             	sub    esp,0xc
c001a588:	68 c4 55 02 c0       	push   0xc00255c4
c001a58d:	e8 80 5a ff ff       	call   c0010012 <KePanic(char const*)>
c001a592:	83 c4 10             	add    esp,0x10
c001a595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a599:	83 c4 0c             	add    esp,0xc
c001a59c:	c3                   	ret    

c001a59d <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001a59d:	56                   	push   esi
c001a59e:	31 c0                	xor    eax,eax
c001a5a0:	53                   	push   ebx
c001a5a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a5a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a5a9:	89 ca                	mov    edx,ecx
c001a5ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a5af:	c1 e2 04             	shl    edx,0x4
c001a5b2:	83 bc 82 e0 d0 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd2f20],0x0
c001a5ba:	74 17                	je     c001a5d3 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001a5bc:	83 c0 01             	add    eax,0x1
c001a5bf:	83 f8 04             	cmp    eax,0x4
c001a5c2:	75 ee                	jne    c001a5b2 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001a5c4:	c7 44 24 0c 25 56 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025625
c001a5cc:	5b                   	pop    ebx
c001a5cd:	5e                   	pop    esi
c001a5ce:	e9 3f 5a ff ff       	jmp    c0010012 <KePanic(char const*)>
c001a5d3:	8d 04 88             	lea    eax,[eax+ecx*4]
c001a5d6:	89 1c 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],ebx
c001a5dd:	89 34 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],esi
c001a5e4:	5b                   	pop    ebx
c001a5e5:	5e                   	pop    esi
c001a5e6:	c3                   	ret    

c001a5e7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001a5e7:	57                   	push   edi
c001a5e8:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a5ef:	56                   	push   esi
c001a5f0:	53                   	push   ebx
c001a5f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a5f9:	74 54                	je     c001a64f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c001a5fb:	89 c7                	mov    edi,eax
c001a5fd:	84 c0                	test   al,al
c001a5ff:	74 1d                	je     c001a61e <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001a601:	83 fe 0f             	cmp    esi,0xf
c001a604:	0f 8f d5 00 00 00    	jg     c001a6df <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c001a60a:	0f b6 b6 08 61 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd9ef8]
c001a611:	0f b7 bc 36 20 be 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd41e0]
c001a619:	d1 ef                	shr    edi,1
c001a61b:	83 e7 01             	and    edi,0x1
c001a61e:	83 ec 08             	sub    esp,0x8
c001a621:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c001a626:	31 db                	xor    ebx,ebx
c001a628:	50                   	push   eax
c001a629:	68 32 56 02 c0       	push   0xc0025632
c001a62e:	e8 31 c9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a633:	83 c4 10             	add    esp,0x10
c001a636:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c001a63b:	85 c0                	test   eax,eax
c001a63d:	7f 55                	jg     c001a694 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001a63f:	83 ec 0c             	sub    esp,0xc
c001a642:	68 49 56 02 c0       	push   0xc0025649
c001a647:	e8 c6 59 ff ff       	call   c0010012 <KePanic(char const*)>
c001a64c:	83 c4 10             	add    esp,0x10
c001a64f:	8d 7e 20             	lea    edi,[esi+0x20]
c001a652:	89 f8                	mov    eax,edi
c001a654:	31 d2                	xor    edx,edx
c001a656:	c1 e0 04             	shl    eax,0x4
c001a659:	8b 8c 90 e0 d0 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd2f20]
c001a660:	85 c9                	test   ecx,ecx
c001a662:	0f 84 8e 00 00 00    	je     c001a6f6 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001a668:	83 c2 01             	add    edx,0x1
c001a66b:	83 fa 04             	cmp    edx,0x4
c001a66e:	75 e9                	jne    c001a659 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001a670:	83 ec 0c             	sub    esp,0xc
c001a673:	68 00 56 02 c0       	push   0xc0025600
c001a678:	e8 95 59 ff ff       	call   c0010012 <KePanic(char const*)>
c001a67d:	83 c4 10             	add    esp,0x10
c001a680:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a685:	5b                   	pop    ebx
c001a686:	5e                   	pop    esi
c001a687:	5f                   	pop    edi
c001a688:	c3                   	ret    
c001a689:	83 c3 01             	add    ebx,0x1
c001a68c:	39 1d 60 f4 02 c0    	cmp    DWORD PTR ds:0xc002f460,ebx
c001a692:	7e ab                	jle    c001a63f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001a694:	83 ec 08             	sub    esp,0x8
c001a697:	8b 04 9d 80 f4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0b80]
c001a69e:	56                   	push   esi
c001a69f:	50                   	push   eax
c001a6a0:	e8 69 66 00 00       	call   c0020d0e <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001a6a5:	83 c4 10             	add    esp,0x10
c001a6a8:	84 c0                	test   al,al
c001a6aa:	74 dd                	je     c001a689 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c001a6ac:	83 ec 04             	sub    esp,0x4
c001a6af:	89 f8                	mov    eax,edi
c001a6b1:	8b 1c 9d 80 f4 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0b80]
c001a6b8:	0f b6 f8             	movzx  edi,al
c001a6bb:	57                   	push   edi
c001a6bc:	8d 7e 20             	lea    edi,[esi+0x20]
c001a6bf:	6a 00                	push   0x0
c001a6c1:	89 f8                	mov    eax,edi
c001a6c3:	0f b6 c0             	movzx  eax,al
c001a6c6:	50                   	push   eax
c001a6c7:	89 f0                	mov    eax,esi
c001a6c9:	6a 00                	push   0x0
c001a6cb:	0f b6 c0             	movzx  eax,al
c001a6ce:	6a 00                	push   0x0
c001a6d0:	50                   	push   eax
c001a6d1:	53                   	push   ebx
c001a6d2:	e8 a3 67 00 00       	call   c0020e7a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001a6d7:	83 c4 20             	add    esp,0x20
c001a6da:	e9 73 ff ff ff       	jmp    c001a652 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c001a6df:	83 ec 0c             	sub    esp,0xc
c001a6e2:	31 ff                	xor    edi,edi
c001a6e4:	68 c4 55 02 c0       	push   0xc00255c4
c001a6e9:	e8 24 59 ff ff       	call   c0010012 <KePanic(char const*)>
c001a6ee:	83 c4 10             	add    esp,0x10
c001a6f1:	e9 28 ff ff ff       	jmp    c001a61e <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001a6f6:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a6f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a6fd:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001a704:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a708:	5b                   	pop    ebx
c001a709:	89 14 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],edx
c001a710:	89 f0                	mov    eax,esi
c001a712:	5e                   	pop    esi
c001a713:	5f                   	pop    edi
c001a714:	c3                   	ret    

c001a715 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001a715:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a719:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a71d:	c1 e0 04             	shl    eax,0x4
c001a720:	8d 50 10             	lea    edx,[eax+0x10]
c001a723:	39 88 e0 d0 02 c0    	cmp    DWORD PTR [eax-0x3ffd2f20],ecx
c001a729:	74 08                	je     c001a733 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001a72b:	83 c0 04             	add    eax,0x4
c001a72e:	39 d0                	cmp    eax,edx
c001a730:	75 f1                	jne    c001a723 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001a732:	c3                   	ret    
c001a733:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001a73d:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c001a747:	eb e2                	jmp    c001a72b <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001a749 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001a749:	53                   	push   ebx
c001a74a:	83 ec 08             	sub    esp,0x8
c001a74d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a751:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a756:	74 09                	je     c001a761 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001a758:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a75f:	75 37                	jne    c001a798 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c001a761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a765:	83 c0 20             	add    eax,0x20
c001a768:	c1 e0 04             	shl    eax,0x4
c001a76b:	8d 50 10             	lea    edx,[eax+0x10]
c001a76e:	39 98 e0 d0 02 c0    	cmp    DWORD PTR [eax-0x3ffd2f20],ebx
c001a774:	74 0c                	je     c001a782 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001a776:	83 c0 04             	add    eax,0x4
c001a779:	39 d0                	cmp    eax,edx
c001a77b:	75 f1                	jne    c001a76e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c001a77d:	83 c4 08             	add    esp,0x8
c001a780:	5b                   	pop    ebx
c001a781:	c3                   	ret    
c001a782:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001a78c:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c001a796:	eb de                	jmp    c001a776 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001a798:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001a79d:	7f 11                	jg     c001a7b0 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c001a79f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7a3:	0f b6 80 08 61 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9ef8]
c001a7aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a7ae:	eb b1                	jmp    c001a761 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001a7b0:	83 ec 0c             	sub    esp,0xc
c001a7b3:	68 56 56 02 c0       	push   0xc0025656
c001a7b8:	e8 55 58 ff ff       	call   c0010012 <KePanic(char const*)>
c001a7bd:	83 c4 10             	add    esp,0x10
c001a7c0:	eb 9f                	jmp    c001a761 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001a7c2:	66 90                	xchg   ax,ax

c001a7c4 <picIoWait()>:
c001a7c4:	eb 00                	jmp    c001a7c6 <picIoWait()+0x2>
c001a7c6:	eb 00                	jmp    c001a7c8 <picIoWait()+0x4>
c001a7c8:	90                   	nop
c001a7c9:	c3                   	ret    
c001a7ca:	66 90                	xchg   ax,ax

c001a7cc <picDisable()>:
c001a7cc:	83 ec 10             	sub    esp,0x10
c001a7cf:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001a7d6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001a7db:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a7df:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001a7e4:	ee                   	out    dx,al
c001a7e5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001a7ec:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001a7f1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a7f5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001a7fa:	ee                   	out    dx,al
c001a7fb:	90                   	nop
c001a7fc:	83 c4 10             	add    esp,0x10
c001a7ff:	c3                   	ret    

c001a800 <picGetIRQReg(int)>:
c001a800:	83 ec 10             	sub    esp,0x10
c001a803:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a807:	0f b6 c0             	movzx  eax,al
c001a80a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001a811:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001a815:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001a819:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001a81e:	ee                   	out    dx,al
c001a81f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a823:	0f b6 c0             	movzx  eax,al
c001a826:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001a82d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001a831:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001a835:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001a83a:	ee                   	out    dx,al
c001a83b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001a842:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001a847:	89 c2                	mov    edx,eax
c001a849:	ec                   	in     al,dx
c001a84a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a84e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a852:	0f b6 c0             	movzx  eax,al
c001a855:	c1 e0 08             	shl    eax,0x8
c001a858:	89 c1                	mov    ecx,eax
c001a85a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001a861:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001a866:	89 c2                	mov    edx,eax
c001a868:	ec                   	in     al,dx
c001a869:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a86d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a871:	0f b6 c0             	movzx  eax,al
c001a874:	09 c8                	or     eax,ecx
c001a876:	83 c4 10             	add    esp,0x10
c001a879:	c3                   	ret    
c001a87a:	66 90                	xchg   ax,ax

c001a87c <picOpen()>:
c001a87c:	83 ec 50             	sub    esp,0x50
c001a87f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001a886:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001a88b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a88f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a893:	ee                   	out    dx,al
c001a894:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001a89b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a8a0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001a8a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a8a8:	ee                   	out    dx,al
c001a8a9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001a8b1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001a8b9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001a8c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a8c4:	89 c2                	mov    edx,eax
c001a8c6:	ec                   	in     al,dx
c001a8c7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001a8cb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001a8cf:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001a8d3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001a8da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a8de:	89 c2                	mov    edx,eax
c001a8e0:	ec                   	in     al,dx
c001a8e1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a8e5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001a8e9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001a8ed:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001a8f4:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001a8f9:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001a8fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a901:	ee                   	out    dx,al
c001a902:	e8 bd fe ff ff       	call   c001a7c4 <picIoWait()>
c001a907:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001a90e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001a913:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001a917:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a91b:	ee                   	out    dx,al
c001a91c:	e8 a3 fe ff ff       	call   c001a7c4 <picIoWait()>
c001a921:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a925:	0f b6 c0             	movzx  eax,al
c001a928:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001a92f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001a933:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001a937:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a93b:	ee                   	out    dx,al
c001a93c:	e8 83 fe ff ff       	call   c001a7c4 <picIoWait()>
c001a941:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a945:	0f b6 c0             	movzx  eax,al
c001a948:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001a94f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a953:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001a957:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a95b:	ee                   	out    dx,al
c001a95c:	e8 63 fe ff ff       	call   c001a7c4 <picIoWait()>
c001a961:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001a968:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001a96d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001a971:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a975:	ee                   	out    dx,al
c001a976:	e8 49 fe ff ff       	call   c001a7c4 <picIoWait()>
c001a97b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001a982:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001a987:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a98b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a98f:	ee                   	out    dx,al
c001a990:	e8 2f fe ff ff       	call   c001a7c4 <picIoWait()>
c001a995:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001a99c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001a9a1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001a9a5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a9a9:	ee                   	out    dx,al
c001a9aa:	e8 15 fe ff ff       	call   c001a7c4 <picIoWait()>
c001a9af:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001a9b6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001a9bb:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001a9bf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001a9c3:	ee                   	out    dx,al
c001a9c4:	e8 fb fd ff ff       	call   c001a7c4 <picIoWait()>
c001a9c9:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001a9ce:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001a9d5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001a9d9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001a9dd:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001a9e1:	ee                   	out    dx,al
c001a9e2:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001a9e7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001a9ee:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001a9f2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001a9f6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001a9fa:	ee                   	out    dx,al
c001a9fb:	90                   	nop
c001a9fc:	83 c4 50             	add    esp,0x50
c001a9ff:	c3                   	ret    

c001aa00 <picEOI(int)>:
c001aa00:	83 ec 10             	sub    esp,0x10
c001aa03:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001aa08:	75 1e                	jne    c001aa28 <picEOI(int)+0x28>
c001aa0a:	6a 0b                	push   0xb
c001aa0c:	e8 ef fd ff ff       	call   c001a800 <picGetIRQReg(int)>
c001aa11:	83 c4 04             	add    esp,0x4
c001aa14:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001aa19:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001aa1e:	25 80 00 00 00       	and    eax,0x80
c001aa23:	74 73                	je     c001aa98 <picEOI(int)+0x98>
c001aa25:	8d 76 00             	lea    esi,[esi+0x0]
c001aa28:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001aa2d:	75 31                	jne    c001aa60 <picEOI(int)+0x60>
c001aa2f:	6a 0b                	push   0xb
c001aa31:	e8 ca fd ff ff       	call   c001a800 <picGetIRQReg(int)>
c001aa36:	83 c4 04             	add    esp,0x4
c001aa39:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001aa3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa42:	98                   	cwde   
c001aa43:	85 c0                	test   eax,eax
c001aa45:	78 19                	js     c001aa60 <picEOI(int)+0x60>
c001aa47:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001aa4e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001aa53:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001aa57:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001aa5c:	ee                   	out    dx,al
c001aa5d:	eb 3d                	jmp    c001aa9c <picEOI(int)+0x9c>
c001aa5f:	90                   	nop
c001aa60:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001aa65:	7e 19                	jle    c001aa80 <picEOI(int)+0x80>
c001aa67:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001aa6e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001aa73:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001aa77:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001aa7c:	ee                   	out    dx,al
c001aa7d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa80:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001aa87:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001aa8c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001aa90:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001aa95:	ee                   	out    dx,al
c001aa96:	eb 04                	jmp    c001aa9c <picEOI(int)+0x9c>
c001aa98:	90                   	nop
c001aa99:	8d 76 00             	lea    esi,[esi+0x0]
c001aa9c:	83 c4 10             	add    esp,0x10
c001aa9f:	c3                   	ret    

c001aaa0 <RTC::open(int, int, void*)>:
c001aaa0:	31 c0                	xor    eax,eax
c001aaa2:	c3                   	ret    
c001aaa3:	90                   	nop

c001aaa4 <RTC::close(int, int, void*)>:
c001aaa4:	31 c0                	xor    eax,eax
c001aaa6:	c3                   	ret    
c001aaa7:	90                   	nop

c001aaa8 <RTC::timeInSecondsUTC()>:
c001aaa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaac:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001aab2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aab8:	c3                   	ret    
c001aab9:	90                   	nop

c001aaba <RTC::timeInDatetimeUTC()>:
c001aaba:	53                   	push   ebx
c001aabb:	83 ec 14             	sub    esp,0x14
c001aabe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001aac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aac6:	8b 10                	mov    edx,DWORD PTR [eax]
c001aac8:	50                   	push   eax
c001aac9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001aacc:	83 c4 0c             	add    esp,0xc
c001aacf:	52                   	push   edx
c001aad0:	50                   	push   eax
c001aad1:	53                   	push   ebx
c001aad2:	e8 1b eb fe ff       	call   c00095f2 <KeSecondsToDatetime(unsigned long long)>
c001aad7:	89 d8                	mov    eax,ebx
c001aad9:	83 c4 14             	add    esp,0x14
c001aadc:	5b                   	pop    ebx
c001aadd:	c2 04 00             	ret    0x4

c001aae0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001aae0:	56                   	push   esi
c001aae1:	53                   	push   ebx
c001aae2:	83 ec 14             	sub    esp,0x14
c001aae5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aae9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aaeb:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001aaee:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aaf2:	52                   	push   edx
c001aaf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aaf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aafb:	50                   	push   eax
c001aafc:	e8 f1 ea fe ff       	call   c00095f2 <KeSecondsToDatetime(unsigned long long)>
c001ab01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab05:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ab0d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001ab11:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ab15:	89 f0                	mov    eax,esi
c001ab17:	83 c4 20             	add    esp,0x20
c001ab1a:	5b                   	pop    ebx
c001ab1b:	5e                   	pop    esi
c001ab1c:	ff e0                	jmp    eax

c001ab1e <RTC::~RTC()>:
c001ab1e:	83 ec 0c             	sub    esp,0xc
c001ab21:	ba 80 56 02 c0       	mov    edx,0xc0025680
c001ab26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab2a:	89 10                	mov    DWORD PTR [eax],edx
c001ab2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab30:	83 ec 0c             	sub    esp,0xc
c001ab33:	50                   	push   eax
c001ab34:	e8 5b e5 fe ff       	call   c0009094 <Clock::~Clock()>
c001ab39:	83 c4 10             	add    esp,0x10
c001ab3c:	90                   	nop
c001ab3d:	83 c4 0c             	add    esp,0xc
c001ab40:	c3                   	ret    
c001ab41:	90                   	nop

c001ab42 <RTC::~RTC()>:
c001ab42:	83 ec 0c             	sub    esp,0xc
c001ab45:	83 ec 0c             	sub    esp,0xc
c001ab48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab4c:	e8 cd ff ff ff       	call   c001ab1e <RTC::~RTC()>
c001ab51:	83 c4 10             	add    esp,0x10
c001ab54:	83 ec 08             	sub    esp,0x8
c001ab57:	68 60 01 00 00       	push   0x160
c001ab5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab60:	e8 ee 27 ff ff       	call   c000d353 <operator delete(void*, unsigned long)>
c001ab65:	83 c4 10             	add    esp,0x10
c001ab68:	83 c4 0c             	add    esp,0xc
c001ab6b:	c3                   	ret    

c001ab6c <RTC::get_update_in_progress_flag()>:
c001ab6c:	83 ec 18             	sub    esp,0x18
c001ab6f:	6a 0a                	push   0xa
c001ab71:	e8 09 db ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001ab76:	83 c4 1c             	add    esp,0x1c
c001ab79:	0f b6 c0             	movzx  eax,al
c001ab7c:	c1 e8 07             	shr    eax,0x7
c001ab7f:	c3                   	ret    

c001ab80 <RTC::completeRTCRefresh()>:
c001ab80:	55                   	push   ebp
c001ab81:	57                   	push   edi
c001ab82:	56                   	push   esi
c001ab83:	53                   	push   ebx
c001ab84:	83 ec 3c             	sub    esp,0x3c
c001ab87:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001ab8d:	83 ec 0c             	sub    esp,0xc
c001ab90:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ab94:	e8 d3 ff ff ff       	call   c001ab6c <RTC::get_update_in_progress_flag()>
c001ab99:	83 c4 10             	add    esp,0x10
c001ab9c:	84 c0                	test   al,al
c001ab9e:	74 0e                	je     c001abae <RTC::completeRTCRefresh()+0x2e>
c001aba0:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001aba6:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001abac:	73 df                	jae    c001ab8d <RTC::completeRTCRefresh()+0xd>
c001abae:	83 ec 0c             	sub    esp,0xc
c001abb1:	6a 00                	push   0x0
c001abb3:	e8 c7 da ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001abb8:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001abbf:	89 c5                	mov    ebp,eax
c001abc1:	e8 b9 da ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001abc6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001abcd:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001abd1:	e8 a9 da ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001abd6:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001abdd:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001abe1:	e8 99 da ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001abe6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001abed:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001abf1:	e8 89 da ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001abf6:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001abfd:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ac01:	e8 79 da ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001ac06:	0f b6 c0             	movzx  eax,al
c001ac09:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ac0d:	83 c4 10             	add    esp,0x10
c001ac10:	8b 1d 50 bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb50
c001ac16:	83 ec 0c             	sub    esp,0xc
c001ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ac1d:	e8 4a ff ff ff       	call   c001ab6c <RTC::get_update_in_progress_flag()>
c001ac22:	83 c4 10             	add    esp,0x10
c001ac25:	84 c0                	test   al,al
c001ac27:	74 0e                	je     c001ac37 <RTC::completeRTCRefresh()+0xb7>
c001ac29:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001ac2f:	3b 05 50 bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb50
c001ac35:	73 df                	jae    c001ac16 <RTC::completeRTCRefresh()+0x96>
c001ac37:	83 ec 0c             	sub    esp,0xc
c001ac3a:	6a 00                	push   0x0
c001ac3c:	e8 3e da ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001ac41:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001ac48:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ac4c:	e8 2e da ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001ac51:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ac58:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ac5c:	e8 1e da ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001ac61:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ac68:	88 c3                	mov    bl,al
c001ac6a:	e8 10 da ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001ac6f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001ac76:	89 c6                	mov    esi,eax
c001ac78:	e8 02 da ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001ac7d:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001ac84:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001ac88:	e8 f2 d9 ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001ac8d:	89 e9                	mov    ecx,ebp
c001ac8f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001ac93:	0f b6 f8             	movzx  edi,al
c001ac96:	83 c4 10             	add    esp,0x10
c001ac99:	0f b6 eb             	movzx  ebp,bl
c001ac9c:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001aca0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aca5:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001acaa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001acae:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001acb2:	0f 94 c0             	sete   al
c001acb5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001acb9:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001acbd:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001acc2:	0f 94 c2             	sete   dl
c001acc5:	21 d0                	and    eax,edx
c001acc7:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001accb:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001accf:	0f 94 c2             	sete   dl
c001acd2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001acd6:	21 c2                	and    edx,eax
c001acd8:	89 f0                	mov    eax,esi
c001acda:	0f b6 c0             	movzx  eax,al
c001acdd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ace1:	89 f0                	mov    eax,esi
c001ace3:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001ace7:	0f 94 c0             	sete   al
c001acea:	21 d0                	and    eax,edx
c001acec:	31 d2                	xor    edx,edx
c001acee:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001acf2:	0f 94 c2             	sete   dl
c001acf5:	85 c2                	test   edx,eax
c001acf7:	75 27                	jne    c001ad20 <RTC::completeRTCRefresh()+0x1a0>
c001acf9:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001acfd:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001ad01:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001ad05:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001ad09:	89 f0                	mov    eax,esi
c001ad0b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001ad0f:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001ad13:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ad17:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ad1b:	e9 f0 fe ff ff       	jmp    c001ac10 <RTC::completeRTCRefresh()+0x90>
c001ad20:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001ad24:	75 d3                	jne    c001acf9 <RTC::completeRTCRefresh()+0x179>
c001ad26:	83 ec 0c             	sub    esp,0xc
c001ad29:	6a 0b                	push   0xb
c001ad2b:	e8 4f d9 ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001ad30:	83 c4 10             	add    esp,0x10
c001ad33:	a8 04                	test   al,0x4
c001ad35:	75 7a                	jne    c001adb1 <RTC::completeRTCRefresh()+0x231>
c001ad37:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ad3b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ad3f:	83 e1 0f             	and    ecx,0xf
c001ad42:	c1 ea 04             	shr    edx,0x4
c001ad45:	83 e6 0f             	and    esi,0xf
c001ad48:	6b d2 0a             	imul   edx,edx,0xa
c001ad4b:	c1 ef 04             	shr    edi,0x4
c001ad4e:	01 d1                	add    ecx,edx
c001ad50:	6b ff 0a             	imul   edi,edi,0xa
c001ad53:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001ad57:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ad5b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ad5f:	c1 ea 04             	shr    edx,0x4
c001ad62:	83 e1 0f             	and    ecx,0xf
c001ad65:	6b d2 0a             	imul   edx,edx,0xa
c001ad68:	01 d1                	add    ecx,edx
c001ad6a:	89 ea                	mov    edx,ebp
c001ad6c:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001ad70:	c1 ea 04             	shr    edx,0x4
c001ad73:	89 d9                	mov    ecx,ebx
c001ad75:	83 e2 07             	and    edx,0x7
c001ad78:	83 e1 0f             	and    ecx,0xf
c001ad7b:	6b d2 0a             	imul   edx,edx,0xa
c001ad7e:	83 e3 80             	and    ebx,0xffffff80
c001ad81:	01 d1                	add    ecx,edx
c001ad83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad87:	09 cb                	or     ebx,ecx
c001ad89:	c1 ea 04             	shr    edx,0x4
c001ad8c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad90:	6b d2 0a             	imul   edx,edx,0xa
c001ad93:	83 e1 0f             	and    ecx,0xf
c001ad96:	01 d6                	add    esi,edx
c001ad98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad9c:	c1 ea 04             	shr    edx,0x4
c001ad9f:	6b d2 0a             	imul   edx,edx,0xa
c001ada2:	01 d1                	add    ecx,edx
c001ada4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ada8:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001adac:	83 e2 0f             	and    edx,0xf
c001adaf:	01 d7                	add    edi,edx
c001adb1:	a8 02                	test   al,0x2
c001adb3:	75 15                	jne    c001adca <RTC::completeRTCRefresh()+0x24a>
c001adb5:	f6 c3 80             	test   bl,0x80
c001adb8:	74 10                	je     c001adca <RTC::completeRTCRefresh()+0x24a>
c001adba:	83 e3 7f             	and    ebx,0x7f
c001adbd:	b9 18 00 00 00       	mov    ecx,0x18
c001adc2:	8d 43 0c             	lea    eax,[ebx+0xc]
c001adc5:	99                   	cdq    
c001adc6:	f7 f9                	idiv   ecx
c001adc8:	88 d3                	mov    bl,dl
c001adca:	8d af 6c 07 00 00    	lea    ebp,[edi+0x76c]
c001add0:	81 fd b1 07 00 00    	cmp    ebp,0x7b1
c001add6:	77 06                	ja     c001adde <RTC::completeRTCRefresh()+0x25e>
c001add8:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001adde:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ade3:	31 c9                	xor    ecx,ecx
c001ade5:	c1 e0 10             	shl    eax,0x10
c001ade8:	89 cf                	mov    edi,ecx
c001adea:	c1 e5 10             	shl    ebp,0x10
c001aded:	31 d2                	xor    edx,edx
c001adef:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001adf5:	09 c7                	or     edi,eax
c001adf7:	89 f0                	mov    eax,esi
c001adf9:	89 f9                	mov    ecx,edi
c001adfb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001adff:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001ae03:	88 c2                	mov    dl,al
c001ae05:	88 d9                	mov    cl,bl
c001ae07:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001ae0b:	0f b7 c2             	movzx  eax,dx
c001ae0e:	09 e8                	or     eax,ebp
c001ae10:	89 c2                	mov    edx,eax
c001ae12:	50                   	push   eax
c001ae13:	50                   	push   eax
c001ae14:	51                   	push   ecx
c001ae15:	52                   	push   edx
c001ae16:	e8 c9 e3 fe ff       	call   c00091e4 <KeDatetimeToSeconds(datetime_t)>
c001ae1b:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001ae1f:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001ae25:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001ae2b:	83 c4 4c             	add    esp,0x4c
c001ae2e:	5b                   	pop    ebx
c001ae2f:	5e                   	pop    esi
c001ae30:	5f                   	pop    edi
c001ae31:	5d                   	pop    ebp
c001ae32:	c3                   	ret    
c001ae33:	90                   	nop

c001ae34 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001ae34:	55                   	push   ebp
c001ae35:	57                   	push   edi
c001ae36:	56                   	push   esi
c001ae37:	53                   	push   ebx
c001ae38:	83 ec 34             	sub    esp,0x34
c001ae3b:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001ae3f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ae43:	6a 00                	push   0x0
c001ae45:	89 fb                	mov    ebx,edi
c001ae47:	6a 00                	push   0x0
c001ae49:	e8 85 d8 ff ff       	call   c00186d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001ae4e:	5d                   	pop    ebp
c001ae4f:	58                   	pop    eax
c001ae50:	6a 00                	push   0x0
c001ae52:	6a 02                	push   0x2
c001ae54:	e8 7a d8 ff ff       	call   c00186d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001ae59:	31 d2                	xor    edx,edx
c001ae5b:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001ae62:	89 f9                	mov    ecx,edi
c001ae64:	89 f8                	mov    eax,edi
c001ae66:	c1 e9 10             	shr    ecx,0x10
c001ae69:	0f b6 c4             	movzx  eax,ah
c001ae6c:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001ae70:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001ae74:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae78:	b9 64 00 00 00       	mov    ecx,0x64
c001ae7d:	89 f0                	mov    eax,esi
c001ae7f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001ae83:	89 f0                	mov    eax,esi
c001ae85:	0f b6 c4             	movzx  eax,ah
c001ae88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ae8c:	89 f0                	mov    eax,esi
c001ae8e:	c1 e8 10             	shr    eax,0x10
c001ae91:	f7 f1                	div    ecx
c001ae93:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ae97:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001ae9b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001ae9f:	e8 db d7 ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001aea4:	83 c4 10             	add    esp,0x10
c001aea7:	89 c5                	mov    ebp,eax
c001aea9:	a8 04                	test   al,0x4
c001aeab:	75 6e                	jne    c001af1b <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001aead:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aeb1:	31 d2                	xor    edx,edx
c001aeb3:	0f b6 c1             	movzx  eax,cl
c001aeb6:	b9 0a 00 00 00       	mov    ecx,0xa
c001aebb:	f7 f1                	div    ecx
c001aebd:	c1 e0 04             	shl    eax,0x4
c001aec0:	09 d0                	or     eax,edx
c001aec2:	31 d2                	xor    edx,edx
c001aec4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aec8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001aecd:	f7 f1                	div    ecx
c001aecf:	c1 e0 04             	shl    eax,0x4
c001aed2:	09 d0                	or     eax,edx
c001aed4:	31 d2                	xor    edx,edx
c001aed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aeda:	0f b6 c3             	movzx  eax,bl
c001aedd:	f7 f1                	div    ecx
c001aedf:	c1 e0 04             	shl    eax,0x4
c001aee2:	09 d0                	or     eax,edx
c001aee4:	31 d2                	xor    edx,edx
c001aee6:	89 c3                	mov    ebx,eax
c001aee8:	89 f0                	mov    eax,esi
c001aeea:	0f b6 c0             	movzx  eax,al
c001aeed:	f7 f1                	div    ecx
c001aeef:	c1 e0 04             	shl    eax,0x4
c001aef2:	09 d0                	or     eax,edx
c001aef4:	31 d2                	xor    edx,edx
c001aef6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aefa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aeff:	f7 f1                	div    ecx
c001af01:	c1 e0 04             	shl    eax,0x4
c001af04:	09 d0                	or     eax,edx
c001af06:	31 d2                	xor    edx,edx
c001af08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001af10:	f7 f1                	div    ecx
c001af12:	c1 e0 04             	shl    eax,0x4
c001af15:	09 d0                	or     eax,edx
c001af17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af1b:	83 e5 02             	and    ebp,0x2
c001af1e:	75 1e                	jne    c001af3e <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001af20:	0f b6 c3             	movzx  eax,bl
c001af23:	83 f8 0b             	cmp    eax,0xb
c001af26:	76 10                	jbe    c001af38 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001af28:	8d 53 f4             	lea    edx,[ebx-0xc]
c001af2b:	88 d3                	mov    bl,dl
c001af2d:	84 d2                	test   dl,dl
c001af2f:	75 02                	jne    c001af33 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001af31:	b3 0c                	mov    bl,0xc
c001af33:	83 cb 80             	or     ebx,0xffffff80
c001af36:	eb 06                	jmp    c001af3e <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001af38:	85 c0                	test   eax,eax
c001af3a:	75 02                	jne    c001af3e <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001af3c:	b3 0c                	mov    bl,0xc
c001af3e:	0f b6 db             	movzx  ebx,bl
c001af41:	50                   	push   eax
c001af42:	50                   	push   eax
c001af43:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001af48:	52                   	push   edx
c001af49:	6a 00                	push   0x0
c001af4b:	e8 83 d7 ff ff       	call   c00186d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001af50:	5a                   	pop    edx
c001af51:	59                   	pop    ecx
c001af52:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001af57:	50                   	push   eax
c001af58:	6a 02                	push   0x2
c001af5a:	e8 74 d7 ff ff       	call   c00186d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001af5f:	5e                   	pop    esi
c001af60:	5f                   	pop    edi
c001af61:	53                   	push   ebx
c001af62:	6a 04                	push   0x4
c001af64:	e8 6a d7 ff ff       	call   c00186d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001af69:	5d                   	pop    ebp
c001af6a:	58                   	pop    eax
c001af6b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001af70:	52                   	push   edx
c001af71:	6a 07                	push   0x7
c001af73:	e8 5b d7 ff ff       	call   c00186d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001af78:	58                   	pop    eax
c001af79:	5a                   	pop    edx
c001af7a:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001af7f:	50                   	push   eax
c001af80:	6a 08                	push   0x8
c001af82:	e8 4c d7 ff ff       	call   c00186d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001af87:	59                   	pop    ecx
c001af88:	5b                   	pop    ebx
c001af89:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001af8e:	55                   	push   ebp
c001af8f:	6a 09                	push   0x9
c001af91:	e8 3d d7 ff ff       	call   c00186d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001af96:	5e                   	pop    esi
c001af97:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af9b:	e8 e0 fb ff ff       	call   c001ab80 <RTC::completeRTCRefresh()>
c001afa0:	83 c4 3c             	add    esp,0x3c
c001afa3:	b0 01                	mov    al,0x1
c001afa5:	5b                   	pop    ebx
c001afa6:	5e                   	pop    esi
c001afa7:	5f                   	pop    edi
c001afa8:	5d                   	pop    ebp
c001afa9:	c3                   	ret    

c001afaa <rtcIRQHandler(regs*, void*)>:
c001afaa:	53                   	push   ebx
c001afab:	83 ec 14             	sub    esp,0x14
c001afae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001afb2:	6a 0c                	push   0xc
c001afb4:	e8 c6 d6 ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001afb9:	83 c4 10             	add    esp,0x10
c001afbc:	a8 80                	test   al,0x80
c001afbe:	74 24                	je     c001afe4 <rtcIRQHandler(regs*, void*)+0x3a>
c001afc0:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001afc7:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001afce:	66 ff 05 14 eb 02 c0 	inc    WORD PTR ds:0xc002eb14
c001afd5:	75 0d                	jne    c001afe4 <rtcIRQHandler(regs*, void*)+0x3a>
c001afd7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001afdb:	83 c4 08             	add    esp,0x8
c001afde:	5b                   	pop    ebx
c001afdf:	e9 9c fb ff ff       	jmp    c001ab80 <RTC::completeRTCRefresh()>
c001afe4:	83 c4 08             	add    esp,0x8
c001afe7:	5b                   	pop    ebx
c001afe8:	c3                   	ret    
c001afe9:	90                   	nop

c001afea <RTC::RTC()>:
c001afea:	83 ec 1c             	sub    esp,0x1c
c001afed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aff1:	83 ec 08             	sub    esp,0x8
c001aff4:	68 63 56 02 c0       	push   0xc0025663
c001aff9:	50                   	push   eax
c001affa:	e8 5f e0 fe ff       	call   c000905e <Clock::Clock(char const*)>
c001afff:	83 c4 10             	add    esp,0x10
c001b002:	ba 80 56 02 c0       	mov    edx,0xc0025680
c001b007:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b00b:	89 10                	mov    DWORD PTR [eax],edx
c001b00d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b011:	83 ec 0c             	sub    esp,0xc
c001b014:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b018:	6a 01                	push   0x1
c001b01a:	68 aa af 01 c0       	push   0xc001afaa
c001b01f:	6a 08                	push   0x8
c001b021:	50                   	push   eax
c001b022:	e8 81 e9 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b027:	83 c4 20             	add    esp,0x20
c001b02a:	89 c2                	mov    edx,eax
c001b02c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b030:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b036:	fa                   	cli    
c001b037:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001b03c:	83 c0 01             	add    eax,0x1
c001b03f:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001b044:	83 ec 0c             	sub    esp,0xc
c001b047:	6a 0b                	push   0xb
c001b049:	e8 31 d6 ff ff       	call   c001867f <x86ReadCMOS(unsigned char)>
c001b04e:	83 c4 10             	add    esp,0x10
c001b051:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b055:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b059:	83 c8 10             	or     eax,0x10
c001b05c:	0f b6 c0             	movzx  eax,al
c001b05f:	83 ec 08             	sub    esp,0x8
c001b062:	50                   	push   eax
c001b063:	6a 0b                	push   0xb
c001b065:	e8 69 d6 ff ff       	call   c00186d3 <x86WriteCMOS(unsigned char, unsigned char)>
c001b06a:	83 c4 10             	add    esp,0x10
c001b06d:	83 ec 0c             	sub    esp,0xc
c001b070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b074:	e8 07 fb ff ff       	call   c001ab80 <RTC::completeRTCRefresh()>
c001b079:	83 c4 10             	add    esp,0x10
c001b07c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001b084:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001b089:	85 c0                	test   eax,eax
c001b08b:	75 01                	jne    c001b08e <RTC::RTC()+0xa4>
c001b08d:	fb                   	sti    
c001b08e:	90                   	nop
c001b08f:	83 c4 1c             	add    esp,0x1c
c001b092:	c3                   	ret    
c001b093:	90                   	nop

c001b094 <HalConsoleScroll(int, int)>:
c001b094:	83 ec 10             	sub    esp,0x10
c001b097:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001b09f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001b0a7:	90                   	nop
c001b0a8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b0ad:	0f 8f e1 00 00 00    	jg     c001b194 <HalConsoleScroll(int, int)+0x100>
c001b0b3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b0bb:	90                   	nop
c001b0bc:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001b0c4:	0f 8f be 00 00 00    	jg     c001b188 <HalConsoleScroll(int, int)+0xf4>
c001b0ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b0ce:	89 d0                	mov    eax,edx
c001b0d0:	c1 e0 02             	shl    eax,0x2
c001b0d3:	01 d0                	add    eax,edx
c001b0d5:	c1 e0 05             	shl    eax,0x5
c001b0d8:	89 c2                	mov    edx,eax
c001b0da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0de:	01 d0                	add    eax,edx
c001b0e0:	89 c2                	mov    edx,eax
c001b0e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0e6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001b0e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b0ed:	89 d0                	mov    eax,edx
c001b0ef:	c1 e0 02             	shl    eax,0x2
c001b0f2:	01 d0                	add    eax,edx
c001b0f4:	c1 e0 05             	shl    eax,0x5
c001b0f7:	89 c2                	mov    edx,eax
c001b0f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b0fd:	01 d0                	add    eax,edx
c001b0ff:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001b105:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b109:	01 c2                	add    edx,eax
c001b10b:	8a 01                	mov    al,BYTE PTR [ecx]
c001b10d:	88 02                	mov    BYTE PTR [edx],al
c001b10f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001b114:	75 66                	jne    c001b17c <HalConsoleScroll(int, int)+0xe8>
c001b116:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b11a:	83 e0 01             	and    eax,0x1
c001b11d:	74 39                	je     c001b158 <HalConsoleScroll(int, int)+0xc4>
c001b11f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b123:	83 e0 0f             	and    eax,0xf
c001b126:	88 c2                	mov    dl,al
c001b128:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b12c:	c1 e0 04             	shl    eax,0x4
c001b12f:	09 d0                	or     eax,edx
c001b131:	88 c1                	mov    cl,al
c001b133:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b137:	89 d0                	mov    eax,edx
c001b139:	c1 e0 02             	shl    eax,0x2
c001b13c:	01 d0                	add    eax,edx
c001b13e:	c1 e0 05             	shl    eax,0x5
c001b141:	89 c2                	mov    edx,eax
c001b143:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b147:	01 d0                	add    eax,edx
c001b149:	89 c2                	mov    edx,eax
c001b14b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b14f:	01 d0                	add    eax,edx
c001b151:	88 ca                	mov    dl,cl
c001b153:	88 10                	mov    BYTE PTR [eax],dl
c001b155:	eb 25                	jmp    c001b17c <HalConsoleScroll(int, int)+0xe8>
c001b157:	90                   	nop
c001b158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b15c:	89 d0                	mov    eax,edx
c001b15e:	c1 e0 02             	shl    eax,0x2
c001b161:	01 d0                	add    eax,edx
c001b163:	c1 e0 05             	shl    eax,0x5
c001b166:	89 c2                	mov    edx,eax
c001b168:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b16c:	01 d0                	add    eax,edx
c001b16e:	89 c2                	mov    edx,eax
c001b170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b174:	01 d0                	add    eax,edx
c001b176:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001b179:	8d 76 00             	lea    esi,[esi+0x0]
c001b17c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001b181:	e9 36 ff ff ff       	jmp    c001b0bc <HalConsoleScroll(int, int)+0x28>
c001b186:	66 90                	xchg   ax,ax
c001b188:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b18d:	e9 16 ff ff ff       	jmp    c001b0a8 <HalConsoleScroll(int, int)+0x14>
c001b192:	66 90                	xchg   ax,ax
c001b194:	90                   	nop
c001b195:	83 c4 10             	add    esp,0x10
c001b198:	c3                   	ret    
c001b199:	8d 76 00             	lea    esi,[esi+0x0]

c001b19c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001b19c:	83 ec 14             	sub    esp,0x14
c001b19f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1a3:	88 04 24             	mov    BYTE PTR [esp],al
c001b1a6:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b1a9:	0f b6 c0             	movzx  eax,al
c001b1ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b1b0:	89 d1                	mov    ecx,edx
c001b1b2:	83 e1 0f             	and    ecx,0xf
c001b1b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b1b9:	c1 e2 04             	shl    edx,0x4
c001b1bc:	0f b6 d2             	movzx  edx,dl
c001b1bf:	09 ca                	or     edx,ecx
c001b1c1:	c1 e2 08             	shl    edx,0x8
c001b1c4:	09 d0                	or     eax,edx
c001b1c6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001b1cb:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001b1d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b1d7:	89 d0                	mov    eax,edx
c001b1d9:	c1 e0 02             	shl    eax,0x2
c001b1dc:	01 d0                	add    eax,edx
c001b1de:	c1 e0 04             	shl    eax,0x4
c001b1e1:	89 c2                	mov    edx,eax
c001b1e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b1e7:	01 d0                	add    eax,edx
c001b1e9:	01 c0                	add    eax,eax
c001b1eb:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001b1ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b1f3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001b1f8:	66 89 02             	mov    WORD PTR [edx],ax
c001b1fb:	90                   	nop
c001b1fc:	83 c4 14             	add    esp,0x14
c001b1ff:	c3                   	ret    

c001b200 <HalConsoleCursorUpdate(int, int)>:
c001b200:	83 ec 20             	sub    esp,0x20
c001b203:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b207:	89 c2                	mov    edx,eax
c001b209:	c1 e2 02             	shl    edx,0x2
c001b20c:	01 d0                	add    eax,edx
c001b20e:	c1 e0 04             	shl    eax,0x4
c001b211:	89 c2                	mov    edx,eax
c001b213:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b217:	01 d0                	add    eax,edx
c001b219:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001b21e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001b225:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001b22a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b22e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b232:	ee                   	out    dx,al
c001b233:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b238:	0f b6 c0             	movzx  eax,al
c001b23b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001b242:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001b246:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001b24a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b24e:	ee                   	out    dx,al
c001b24f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001b256:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001b25b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001b25f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b263:	ee                   	out    dx,al
c001b264:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001b269:	c1 e8 08             	shr    eax,0x8
c001b26c:	0f b6 c0             	movzx  eax,al
c001b26f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001b276:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b27a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001b27e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b282:	ee                   	out    dx,al
c001b283:	90                   	nop
c001b284:	83 c4 20             	add    esp,0x20
c001b287:	c3                   	ret    

c001b288 <FAT::getName()>:
c001b288:	b8 b4 56 02 c0       	mov    eax,0xc00256b4
c001b28d:	c3                   	ret    
c001b28e:	66 90                	xchg   ax,ax

c001b290 <FAT::tell(void*, unsigned long long*)>:
c001b290:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b295:	75 09                	jne    c001b2a0 <FAT::tell(void*, unsigned long long*)+0x10>
c001b297:	b8 04 00 00 00       	mov    eax,0x4
c001b29c:	c3                   	ret    
c001b29d:	8d 76 00             	lea    esi,[esi+0x0]
c001b2a0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b2a5:	75 09                	jne    c001b2b0 <FAT::tell(void*, unsigned long long*)+0x20>
c001b2a7:	b8 04 00 00 00       	mov    eax,0x4
c001b2ac:	c3                   	ret    
c001b2ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b2b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b2b7:	ba 00 00 00 00       	mov    edx,0x0
c001b2bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b2c0:	89 01                	mov    DWORD PTR [ecx],eax
c001b2c2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b2c5:	b8 00 00 00 00       	mov    eax,0x0
c001b2ca:	c3                   	ret    
c001b2cb:	90                   	nop

c001b2cc <FAT::stat(void*, unsigned long long*)>:
c001b2cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b2d1:	75 09                	jne    c001b2dc <FAT::stat(void*, unsigned long long*)+0x10>
c001b2d3:	b8 04 00 00 00       	mov    eax,0x4
c001b2d8:	c3                   	ret    
c001b2d9:	8d 76 00             	lea    esi,[esi+0x0]
c001b2dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b2e1:	75 09                	jne    c001b2ec <FAT::stat(void*, unsigned long long*)+0x20>
c001b2e3:	b8 04 00 00 00       	mov    eax,0x4
c001b2e8:	c3                   	ret    
c001b2e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b2ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b2f3:	ba 00 00 00 00       	mov    edx,0x0
c001b2f8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b2fc:	89 01                	mov    DWORD PTR [ecx],eax
c001b2fe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b301:	b8 00 00 00 00       	mov    eax,0x0
c001b306:	c3                   	ret    
c001b307:	90                   	nop

c001b308 <FAT::~FAT()>:
c001b308:	83 ec 0c             	sub    esp,0xc
c001b30b:	ba 00 57 02 c0       	mov    edx,0xc0025700
c001b310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b314:	89 10                	mov    DWORD PTR [eax],edx
c001b316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b31a:	83 ec 0c             	sub    esp,0xc
c001b31d:	50                   	push   eax
c001b31e:	e8 71 ca fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001b323:	83 c4 10             	add    esp,0x10
c001b326:	90                   	nop
c001b327:	83 c4 0c             	add    esp,0xc
c001b32a:	c3                   	ret    
c001b32b:	90                   	nop

c001b32c <FAT::~FAT()>:
c001b32c:	83 ec 0c             	sub    esp,0xc
c001b32f:	83 ec 0c             	sub    esp,0xc
c001b332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b336:	e8 cd ff ff ff       	call   c001b308 <FAT::~FAT()>
c001b33b:	83 c4 10             	add    esp,0x10
c001b33e:	83 ec 08             	sub    esp,0x8
c001b341:	6a 08                	push   0x8
c001b343:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b347:	e8 07 20 ff ff       	call   c000d353 <operator delete(void*, unsigned long)>
c001b34c:	83 c4 10             	add    esp,0x10
c001b34f:	83 c4 0c             	add    esp,0xc
c001b352:	c3                   	ret    
c001b353:	90                   	nop

c001b354 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b354:	83 ec 1c             	sub    esp,0x1c
c001b357:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b35e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b363:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b367:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b36e:	83 f8 ff             	cmp    eax,0xffffffff
c001b371:	75 35                	jne    c001b3a8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b373:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b377:	88 c2                	mov    dl,al
c001b379:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b37e:	01 d0                	add    eax,edx
c001b380:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b384:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b38a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b38e:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b395:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b39a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b39e:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b3a5:	eb 19                	jmp    c001b3c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b3a7:	90                   	nop
c001b3a8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b3ac:	88 c2                	mov    dl,al
c001b3ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b3b2:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b3b9:	01 d0                	add    eax,edx
c001b3bb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b3bf:	90                   	nop
c001b3c0:	83 ec 04             	sub    esp,0x4
c001b3c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b3c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b3cb:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b3cf:	50                   	push   eax
c001b3d0:	e8 e3 9d fe ff       	call   c00051b8 <f_getlabel>
c001b3d5:	83 c4 10             	add    esp,0x10
c001b3d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b3dc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b3e1:	75 09                	jne    c001b3ec <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b3e3:	b8 00 00 00 00       	mov    eax,0x0
c001b3e8:	eb 0a                	jmp    c001b3f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b3ea:	66 90                	xchg   ax,ax
c001b3ec:	b8 01 00 00 00       	mov    eax,0x1
c001b3f1:	8d 76 00             	lea    esi,[esi+0x0]
c001b3f4:	83 c4 1c             	add    esp,0x1c
c001b3f7:	c3                   	ret    

c001b3f8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b3f8:	57                   	push   edi
c001b3f9:	83 ec 58             	sub    esp,0x58
c001b3fc:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b404:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b408:	b8 00 00 00 00       	mov    eax,0x0
c001b40d:	b9 0f 00 00 00       	mov    ecx,0xf
c001b412:	fc                   	cld    
c001b413:	89 d7                	mov    edi,edx
c001b415:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b417:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b41b:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b422:	83 f8 ff             	cmp    eax,0xffffffff
c001b425:	75 35                	jne    c001b45c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b427:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b42b:	88 c2                	mov    dl,al
c001b42d:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b432:	01 d0                	add    eax,edx
c001b434:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b438:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b43e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b442:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b449:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b44e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b452:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b459:	eb 19                	jmp    c001b474 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b45b:	90                   	nop
c001b45c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b460:	88 c2                	mov    dl,al
c001b462:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b466:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b46d:	01 d0                	add    eax,edx
c001b46f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b473:	90                   	nop
c001b474:	83 ec 08             	sub    esp,0x8
c001b477:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b47b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b47f:	50                   	push   eax
c001b480:	e8 bb 53 fe ff       	call   c0000840 <strcat>
c001b485:	83 c4 10             	add    esp,0x10
c001b488:	83 ec 0c             	sub    esp,0xc
c001b48b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b48f:	50                   	push   eax
c001b490:	e8 74 9e fe ff       	call   c0005309 <f_setlabel>
c001b495:	83 c4 10             	add    esp,0x10
c001b498:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b49c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b4a1:	75 09                	jne    c001b4ac <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b4a3:	b8 00 00 00 00       	mov    eax,0x0
c001b4a8:	eb 0a                	jmp    c001b4b4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b4aa:	66 90                	xchg   ax,ax
c001b4ac:	b8 01 00 00 00       	mov    eax,0x1
c001b4b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b4b4:	83 c4 58             	add    esp,0x58
c001b4b7:	5f                   	pop    edi
c001b4b8:	c3                   	ret    
c001b4b9:	90                   	nop
c001b4ba:	66 90                	xchg   ax,ax

c001b4bc <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b4bc:	83 ec 2c             	sub    esp,0x2c
c001b4bf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b4c7:	83 ec 08             	sub    esp,0x8
c001b4ca:	68 d8 56 02 c0       	push   0xc00256d8
c001b4cf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b4d3:	e8 78 52 fe ff       	call   c0000750 <strcmp>
c001b4d8:	83 c4 10             	add    esp,0x10
c001b4db:	85 c0                	test   eax,eax
c001b4dd:	0f 94 c0             	sete   al
c001b4e0:	0f b6 c0             	movzx  eax,al
c001b4e3:	85 c0                	test   eax,eax
c001b4e5:	74 0d                	je     c001b4f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b4e7:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b4ef:	e9 c0 00 00 00       	jmp    c001b5b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b4f4:	83 ec 08             	sub    esp,0x8
c001b4f7:	68 ca 56 02 c0       	push   0xc00256ca
c001b4fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b500:	e8 4b 52 fe ff       	call   c0000750 <strcmp>
c001b505:	83 c4 10             	add    esp,0x10
c001b508:	85 c0                	test   eax,eax
c001b50a:	0f 94 c0             	sete   al
c001b50d:	0f b6 c0             	movzx  eax,al
c001b510:	85 c0                	test   eax,eax
c001b512:	74 10                	je     c001b524 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001b514:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b51c:	e9 93 00 00 00       	jmp    c001b5b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b521:	8d 76 00             	lea    esi,[esi+0x0]
c001b524:	83 ec 08             	sub    esp,0x8
c001b527:	68 d0 56 02 c0       	push   0xc00256d0
c001b52c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b530:	e8 1b 52 fe ff       	call   c0000750 <strcmp>
c001b535:	83 c4 10             	add    esp,0x10
c001b538:	85 c0                	test   eax,eax
c001b53a:	0f 94 c0             	sete   al
c001b53d:	0f b6 c0             	movzx  eax,al
c001b540:	85 c0                	test   eax,eax
c001b542:	74 0c                	je     c001b550 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001b544:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b54c:	eb 66                	jmp    c001b5b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b54e:	66 90                	xchg   ax,ax
c001b550:	83 ec 08             	sub    esp,0x8
c001b553:	68 dc 26 02 c0       	push   0xc00226dc
c001b558:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b55c:	e8 ef 51 fe ff       	call   c0000750 <strcmp>
c001b561:	83 c4 10             	add    esp,0x10
c001b564:	85 c0                	test   eax,eax
c001b566:	0f 94 c0             	sete   al
c001b569:	0f b6 c0             	movzx  eax,al
c001b56c:	85 c0                	test   eax,eax
c001b56e:	74 0c                	je     c001b57c <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001b570:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b578:	eb 3a                	jmp    c001b5b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b57a:	66 90                	xchg   ax,ax
c001b57c:	83 ec 08             	sub    esp,0x8
c001b57f:	68 d6 56 02 c0       	push   0xc00256d6
c001b584:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b588:	e8 c3 51 fe ff       	call   c0000750 <strcmp>
c001b58d:	83 c4 10             	add    esp,0x10
c001b590:	85 c0                	test   eax,eax
c001b592:	0f 94 c0             	sete   al
c001b595:	0f b6 c0             	movzx  eax,al
c001b598:	85 c0                	test   eax,eax
c001b59a:	74 0c                	je     c001b5a8 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001b59c:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b5a4:	eb 0e                	jmp    c001b5b4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b5a6:	66 90                	xchg   ax,ax
c001b5a8:	b8 08 00 00 00       	mov    eax,0x8
c001b5ad:	e9 ea 00 00 00       	jmp    c001b69c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b5b2:	66 90                	xchg   ax,ax
c001b5b4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b5bb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b5c0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b5c4:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b5cb:	83 f8 ff             	cmp    eax,0xffffffff
c001b5ce:	75 34                	jne    c001b604 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001b5d0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b5d4:	88 c2                	mov    dl,al
c001b5d6:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b5db:	01 d0                	add    eax,edx
c001b5dd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b5e1:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b5e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b5eb:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b5f2:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b5f7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b5fb:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b602:	eb 18                	jmp    c001b61c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001b604:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b608:	88 c2                	mov    dl,al
c001b60a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b60e:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b615:	01 d0                	add    eax,edx
c001b617:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b61b:	90                   	nop
c001b61c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b620:	88 04 24             	mov    BYTE PTR [esp],al
c001b623:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b627:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b62b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b633:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b638:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b640:	83 ec 0c             	sub    esp,0xc
c001b643:	68 00 20 00 00       	push   0x2000
c001b648:	e8 7e 46 ff ff       	call   c000fccb <malloc>
c001b64d:	83 c4 10             	add    esp,0x10
c001b650:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b654:	68 00 20 00 00       	push   0x2000
c001b659:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b65d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b661:	50                   	push   eax
c001b662:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b666:	50                   	push   eax
c001b667:	e8 9a 9f fe ff       	call   c0005606 <f_mkfs>
c001b66c:	83 c4 10             	add    esp,0x10
c001b66f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b673:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b678:	75 0a                	jne    c001b684 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b67a:	b8 00 00 00 00       	mov    eax,0x0
c001b67f:	eb 1b                	jmp    c001b69c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b681:	8d 76 00             	lea    esi,[esi+0x0]
c001b684:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b689:	75 09                	jne    c001b694 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001b68b:	b8 09 00 00 00       	mov    eax,0x9
c001b690:	eb 0a                	jmp    c001b69c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b692:	66 90                	xchg   ax,ax
c001b694:	b8 01 00 00 00       	mov    eax,0x1
c001b699:	8d 76 00             	lea    esi,[esi+0x0]
c001b69c:	83 c4 2c             	add    esp,0x2c
c001b69f:	c3                   	ret    

c001b6a0 <FAT::tryMount(LogicalDisk*, int)>:
c001b6a0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001b6a6:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b6ab:	83 f8 14             	cmp    eax,0x14
c001b6ae:	75 18                	jne    c001b6c8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b6b0:	83 ec 0c             	sub    esp,0xc
c001b6b3:	68 dc 56 02 c0       	push   0xc00256dc
c001b6b8:	e8 55 49 ff ff       	call   c0010012 <KePanic(char const*)>
c001b6bd:	83 c4 10             	add    esp,0x10
c001b6c0:	b0 00                	mov    al,0x0
c001b6c2:	e9 ed 01 00 00       	jmp    c001b8b4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b6c7:	90                   	nop
c001b6c8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b6cf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b6d5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b6db:	3d 00 02 00 00       	cmp    eax,0x200
c001b6e0:	74 0a                	je     c001b6ec <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b6e2:	b0 00                	mov    al,0x0
c001b6e4:	e9 cb 01 00 00       	jmp    c001b8b4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b6e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b6ec:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001b6f4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001b6fb:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b702:	83 f8 ff             	cmp    eax,0xffffffff
c001b705:	74 09                	je     c001b710 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b707:	b0 01                	mov    al,0x1
c001b709:	e9 a6 01 00 00       	jmp    c001b8b4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b70e:	66 90                	xchg   ax,ax
c001b710:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001b71a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001b722:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001b729:	88 c2                	mov    dl,al
c001b72b:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b730:	01 d0                	add    eax,edx
c001b732:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001b739:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b73f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001b746:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b74d:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b752:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001b759:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b760:	83 ec 0c             	sub    esp,0xc
c001b763:	68 34 02 00 00       	push   0x234
c001b768:	e8 5e 45 ff ff       	call   c000fccb <malloc>
c001b76d:	83 c4 10             	add    esp,0x10
c001b770:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001b777:	83 ec 04             	sub    esp,0x4
c001b77a:	6a 00                	push   0x0
c001b77c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b783:	50                   	push   eax
c001b784:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b78b:	e8 51 86 fe ff       	call   c0003de1 <f_mount>
c001b790:	83 c4 10             	add    esp,0x10
c001b793:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001b79a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001b7a2:	74 1c                	je     c001b7c0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b7a4:	83 ec 0c             	sub    esp,0xc
c001b7a7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b7ae:	e8 38 45 ff ff       	call   c000fceb <rfree>
c001b7b3:	83 c4 10             	add    esp,0x10
c001b7b6:	b0 00                	mov    al,0x0
c001b7b8:	e9 f7 00 00 00       	jmp    c001b8b4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b7bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b7c0:	83 ec 04             	sub    esp,0x4
c001b7c3:	68 00 01 00 00       	push   0x100
c001b7c8:	6a 00                	push   0x0
c001b7ca:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b7d1:	50                   	push   eax
c001b7d2:	e8 19 4d fe ff       	call   c00004f0 <memset>
c001b7d7:	83 c4 10             	add    esp,0x10
c001b7da:	83 ec 08             	sub    esp,0x8
c001b7dd:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b7e4:	50                   	push   eax
c001b7e5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b7ec:	50                   	push   eax
c001b7ed:	e8 4e 50 fe ff       	call   c0000840 <strcat>
c001b7f2:	83 c4 10             	add    esp,0x10
c001b7f5:	83 ec 08             	sub    esp,0x8
c001b7f8:	68 ea 56 02 c0       	push   0xc00256ea
c001b7fd:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b804:	50                   	push   eax
c001b805:	e8 36 50 fe ff       	call   c0000840 <strcat>
c001b80a:	83 c4 10             	add    esp,0x10
c001b80d:	83 ec 04             	sub    esp,0x4
c001b810:	6a 01                	push   0x1
c001b812:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001b819:	50                   	push   eax
c001b81a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b81e:	50                   	push   eax
c001b81f:	e8 1f 86 fe ff       	call   c0003e43 <f_open>
c001b824:	83 c4 10             	add    esp,0x10
c001b827:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001b82e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001b835:	85 c0                	test   eax,eax
c001b837:	74 0b                	je     c001b844 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b839:	78 31                	js     c001b86c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b83b:	83 e8 04             	sub    eax,0x4
c001b83e:	83 f8 01             	cmp    eax,0x1
c001b841:	77 29                	ja     c001b86c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b843:	90                   	nop
c001b844:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001b84c:	83 ec 0c             	sub    esp,0xc
c001b84f:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b853:	50                   	push   eax
c001b854:	e8 b9 8d fe ff       	call   c0004612 <f_close>
c001b859:	83 c4 10             	add    esp,0x10
c001b85c:	90                   	nop
c001b85d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001b865:	85 c0                	test   eax,eax
c001b867:	74 43                	je     c001b8ac <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001b869:	eb 31                	jmp    c001b89c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b86b:	90                   	nop
c001b86c:	83 ec 0c             	sub    esp,0xc
c001b86f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b876:	e8 70 44 ff ff       	call   c000fceb <rfree>
c001b87b:	83 c4 10             	add    esp,0x10
c001b87e:	83 ec 04             	sub    esp,0x4
c001b881:	6a 00                	push   0x0
c001b883:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b88a:	50                   	push   eax
c001b88b:	6a 00                	push   0x0
c001b88d:	e8 4f 85 fe ff       	call   c0003de1 <f_mount>
c001b892:	83 c4 10             	add    esp,0x10
c001b895:	b0 00                	mov    al,0x0
c001b897:	eb 1b                	jmp    c001b8b4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b899:	8d 76 00             	lea    esi,[esi+0x0]
c001b89c:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b8a1:	83 c0 01             	add    eax,0x1
c001b8a4:	a3 20 eb 02 c0       	mov    ds:0xc002eb20,eax
c001b8a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b8ac:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001b8b3:	90                   	nop
c001b8b4:	81 c4 4c 03 00 00    	add    esp,0x34c
c001b8ba:	c3                   	ret    
c001b8bb:	90                   	nop

c001b8bc <FAT::allocateSwapfile(char const*, int)>:
c001b8bc:	55                   	push   ebp
c001b8bd:	57                   	push   edi
c001b8be:	56                   	push   esi
c001b8bf:	53                   	push   ebx
c001b8c0:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b8c6:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b8d1:	83 ec 0c             	sub    esp,0xc
c001b8d4:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b8db:	e8 eb 43 ff ff       	call   c000fccb <malloc>
c001b8e0:	83 c4 10             	add    esp,0x10
c001b8e3:	89 c7                	mov    edi,eax
c001b8e5:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001b8ea:	83 ec 04             	sub    esp,0x4
c001b8ed:	50                   	push   eax
c001b8ee:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b8f5:	57                   	push   edi
c001b8f6:	e8 37 c8 fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001b8fb:	83 c4 10             	add    esp,0x10
c001b8fe:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b905:	83 ec 04             	sub    esp,0x4
c001b908:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b90c:	50                   	push   eax
c001b90d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b911:	50                   	push   eax
c001b912:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b919:	e8 34 cb fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001b91e:	83 c4 10             	add    esp,0x10
c001b921:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b928:	c1 e0 14             	shl    eax,0x14
c001b92b:	89 c7                	mov    edi,eax
c001b92d:	89 c5                	mov    ebp,eax
c001b92f:	c1 fd 1f             	sar    ebp,0x1f
c001b932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b936:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b93a:	89 f9                	mov    ecx,edi
c001b93c:	31 c1                	xor    ecx,eax
c001b93e:	89 cb                	mov    ebx,ecx
c001b940:	89 e9                	mov    ecx,ebp
c001b942:	31 d1                	xor    ecx,edx
c001b944:	89 ce                	mov    esi,ecx
c001b946:	89 f0                	mov    eax,esi
c001b948:	09 d8                	or     eax,ebx
c001b94a:	0f 84 9c 00 00 00    	je     c001b9ec <FAT::allocateSwapfile(char const*, int)+0x130>
c001b950:	83 ec 0c             	sub    esp,0xc
c001b953:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b95a:	e8 bf c9 fe ff       	call   c000831e <File::unlink()>
c001b95f:	83 c4 10             	add    esp,0x10
c001b962:	83 ec 08             	sub    esp,0x8
c001b965:	6a 12                	push   0x12
c001b967:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b96e:	e8 dd c7 fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001b973:	83 c4 10             	add    esp,0x10
c001b976:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b97d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b983:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b98a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b991:	c1 e0 14             	shl    eax,0x14
c001b994:	83 ec 04             	sub    esp,0x4
c001b997:	6a 01                	push   0x1
c001b999:	50                   	push   eax
c001b99a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b9a1:	e8 f3 9a fe ff       	call   c0005499 <f_expand>
c001b9a6:	83 c4 10             	add    esp,0x10
c001b9a9:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b9b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9b2:	83 c0 10             	add    eax,0x10
c001b9b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9b7:	83 ec 0c             	sub    esp,0xc
c001b9ba:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b9be:	52                   	push   edx
c001b9bf:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b9c3:	52                   	push   edx
c001b9c4:	6a 00                	push   0x0
c001b9c6:	68 00 04 00 00       	push   0x400
c001b9cb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b9d2:	ff d0                	call   eax
c001b9d4:	83 c4 20             	add    esp,0x20
c001b9d7:	83 ec 0c             	sub    esp,0xc
c001b9da:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b9e1:	e8 c8 c7 fe ff       	call   c00081ae <File::close()>
c001b9e6:	83 c4 10             	add    esp,0x10
c001b9e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b9ec:	83 ec 08             	sub    esp,0x8
c001b9ef:	6a 01                	push   0x1
c001b9f1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b9f8:	e8 53 c7 fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001b9fd:	83 c4 10             	add    esp,0x10
c001ba00:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ba07:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba09:	83 c0 0c             	add    eax,0xc
c001ba0c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba0e:	83 ec 0c             	sub    esp,0xc
c001ba11:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ba15:	52                   	push   edx
c001ba16:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001ba1a:	52                   	push   edx
c001ba1b:	6a 00                	push   0x0
c001ba1d:	6a 04                	push   0x4
c001ba1f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ba26:	ff d0                	call   eax
c001ba28:	83 c4 20             	add    esp,0x20
c001ba2b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ba32:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ba38:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ba3f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001ba46:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001ba49:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001ba50:	83 ec 0c             	sub    esp,0xc
c001ba53:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ba5a:	e8 4f c7 fe ff       	call   c00081ae <File::close()>
c001ba5f:	83 c4 10             	add    esp,0x10
c001ba62:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001ba69:	ba 00 00 00 00       	mov    edx,0x0
c001ba6e:	81 c4 3c 04 00 00    	add    esp,0x43c
c001ba74:	5b                   	pop    ebx
c001ba75:	5e                   	pop    esi
c001ba76:	5f                   	pop    edi
c001ba77:	5d                   	pop    ebp
c001ba78:	c3                   	ret    
c001ba79:	90                   	nop
c001ba7a:	66 90                	xchg   ax,ax

c001ba7c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ba7c:	57                   	push   edi
c001ba7d:	56                   	push   esi
c001ba7e:	53                   	push   ebx
c001ba7f:	81 ec 50 02 00 00    	sub    esp,0x250
c001ba85:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001ba8d:	74 0d                	je     c001ba9c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001ba8f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001ba97:	75 0f                	jne    c001baa8 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001ba99:	8d 76 00             	lea    esi,[esi+0x0]
c001ba9c:	b8 04 00 00 00       	mov    eax,0x4
c001baa1:	e9 3a 01 00 00       	jmp    c001bbe0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001baa6:	66 90                	xchg   ax,ax
c001baa8:	83 ec 08             	sub    esp,0x8
c001baab:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001bab2:	50                   	push   eax
c001bab3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001baba:	e8 20 8e fe ff       	call   c00048df <f_readdir>
c001babf:	83 c4 10             	add    esp,0x10
c001bac2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001bac9:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001bad0:	83 ec 0c             	sub    esp,0xc
c001bad3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bada:	83 c0 16             	add    eax,0x16
c001badd:	50                   	push   eax
c001bade:	e8 8d 4a fe ff       	call   c0000570 <strlen>
c001bae3:	83 c4 10             	add    esp,0x10
c001bae6:	ba 00 00 00 00       	mov    edx,0x0
c001baeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001baef:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001baf3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001bafa:	0f b6 c0             	movzx  eax,al
c001bafd:	83 e0 10             	and    eax,0x10
c001bb00:	74 0a                	je     c001bb0c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001bb02:	b8 02 00 00 00       	mov    eax,0x2
c001bb07:	eb 0b                	jmp    c001bb14 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001bb09:	8d 76 00             	lea    esi,[esi+0x0]
c001bb0c:	b8 01 00 00 00       	mov    eax,0x1
c001bb11:	8d 76 00             	lea    esi,[esi+0x0]
c001bb14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bb18:	83 ec 08             	sub    esp,0x8
c001bb1b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001bb22:	83 c0 16             	add    eax,0x16
c001bb25:	50                   	push   eax
c001bb26:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bb2a:	83 c0 10             	add    eax,0x10
c001bb2d:	50                   	push   eax
c001bb2e:	e8 0d 4b fe ff       	call   c0000640 <strcpy>
c001bb33:	83 c4 10             	add    esp,0x10
c001bb36:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001bb3d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001bb44:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bb48:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001bb4f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001bb56:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001bb5d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001bb64:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001bb6b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001bb72:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001bb79:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001bb80:	89 c6                	mov    esi,eax
c001bb82:	89 d7                	mov    edi,edx
c001bb84:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bb86:	89 c8                	mov    eax,ecx
c001bb88:	89 fa                	mov    edx,edi
c001bb8a:	89 f3                	mov    ebx,esi
c001bb8c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001bb93:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001bb9a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001bba1:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001bba8:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bbae:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001bbb5:	0f be c0             	movsx  eax,al
c001bbb8:	85 c0                	test   eax,eax
c001bbba:	75 08                	jne    c001bbc4 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001bbbc:	b8 07 00 00 00       	mov    eax,0x7
c001bbc1:	eb 1d                	jmp    c001bbe0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001bbc3:	90                   	nop
c001bbc4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001bbcb:	85 c0                	test   eax,eax
c001bbcd:	75 09                	jne    c001bbd8 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001bbcf:	b8 00 00 00 00       	mov    eax,0x0
c001bbd4:	eb 0a                	jmp    c001bbe0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001bbd6:	66 90                	xchg   ax,ax
c001bbd8:	b8 01 00 00 00       	mov    eax,0x1
c001bbdd:	8d 76 00             	lea    esi,[esi+0x0]
c001bbe0:	81 c4 50 02 00 00    	add    esp,0x250
c001bbe6:	5b                   	pop    ebx
c001bbe7:	5e                   	pop    esi
c001bbe8:	5f                   	pop    edi
c001bbe9:	c3                   	ret    
c001bbea:	66 90                	xchg   ax,ax

c001bbec <FAT::read(void*, unsigned long, void*, int*)>:
c001bbec:	83 ec 1c             	sub    esp,0x1c
c001bbef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bbf4:	74 0a                	je     c001bc00 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001bbf6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bbfb:	75 0b                	jne    c001bc08 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001bbfd:	8d 76 00             	lea    esi,[esi+0x0]
c001bc00:	b8 04 00 00 00       	mov    eax,0x4
c001bc05:	eb 41                	jmp    c001bc48 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bc07:	90                   	nop
c001bc08:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bc0c:	50                   	push   eax
c001bc0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bc15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bc19:	e8 e8 84 fe ff       	call   c0004106 <f_read>
c001bc1e:	83 c4 10             	add    esp,0x10
c001bc21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc29:	89 c2                	mov    edx,eax
c001bc2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bc2f:	89 10                	mov    DWORD PTR [eax],edx
c001bc31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc35:	85 c0                	test   eax,eax
c001bc37:	75 07                	jne    c001bc40 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001bc39:	b8 00 00 00 00       	mov    eax,0x0
c001bc3e:	eb 08                	jmp    c001bc48 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bc40:	b8 01 00 00 00       	mov    eax,0x1
c001bc45:	8d 76 00             	lea    esi,[esi+0x0]
c001bc48:	83 c4 1c             	add    esp,0x1c
c001bc4b:	c3                   	ret    

c001bc4c <FAT::write(void*, unsigned long, void*, int*)>:
c001bc4c:	83 ec 1c             	sub    esp,0x1c
c001bc4f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bc54:	74 0a                	je     c001bc60 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001bc56:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bc5b:	75 0b                	jne    c001bc68 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001bc5d:	8d 76 00             	lea    esi,[esi+0x0]
c001bc60:	b8 04 00 00 00       	mov    eax,0x4
c001bc65:	eb 41                	jmp    c001bca8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bc67:	90                   	nop
c001bc68:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bc6c:	50                   	push   eax
c001bc6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bc75:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bc79:	e8 87 86 fe ff       	call   c0004305 <f_write>
c001bc7e:	83 c4 10             	add    esp,0x10
c001bc81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc89:	89 c2                	mov    edx,eax
c001bc8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bc8f:	89 10                	mov    DWORD PTR [eax],edx
c001bc91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc95:	85 c0                	test   eax,eax
c001bc97:	75 07                	jne    c001bca0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001bc99:	b8 00 00 00 00       	mov    eax,0x0
c001bc9e:	eb 08                	jmp    c001bca8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bca0:	b8 01 00 00 00       	mov    eax,0x1
c001bca5:	8d 76 00             	lea    esi,[esi+0x0]
c001bca8:	83 c4 1c             	add    esp,0x1c
c001bcab:	c3                   	ret    

c001bcac <FAT::close(void*)>:
c001bcac:	83 ec 1c             	sub    esp,0x1c
c001bcaf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bcb4:	75 0a                	jne    c001bcc0 <FAT::close(void*)+0x14>
c001bcb6:	b8 04 00 00 00       	mov    eax,0x4
c001bcbb:	eb 3f                	jmp    c001bcfc <FAT::close(void*)+0x50>
c001bcbd:	8d 76 00             	lea    esi,[esi+0x0]
c001bcc0:	83 ec 0c             	sub    esp,0xc
c001bcc3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bcc7:	e8 46 89 fe ff       	call   c0004612 <f_close>
c001bccc:	83 c4 10             	add    esp,0x10
c001bccf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bcd3:	83 ec 0c             	sub    esp,0xc
c001bcd6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bcda:	e8 fc 3f ff ff       	call   c000fcdb <free>
c001bcdf:	83 c4 10             	add    esp,0x10
c001bce2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bce6:	85 c0                	test   eax,eax
c001bce8:	75 0a                	jne    c001bcf4 <FAT::close(void*)+0x48>
c001bcea:	b8 00 00 00 00       	mov    eax,0x0
c001bcef:	eb 0b                	jmp    c001bcfc <FAT::close(void*)+0x50>
c001bcf1:	8d 76 00             	lea    esi,[esi+0x0]
c001bcf4:	b8 01 00 00 00       	mov    eax,0x1
c001bcf9:	8d 76 00             	lea    esi,[esi+0x0]
c001bcfc:	83 c4 1c             	add    esp,0x1c
c001bcff:	c3                   	ret    

c001bd00 <FAT::closeDir(void*)>:
c001bd00:	83 ec 1c             	sub    esp,0x1c
c001bd03:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bd08:	75 0a                	jne    c001bd14 <FAT::closeDir(void*)+0x14>
c001bd0a:	b8 04 00 00 00       	mov    eax,0x4
c001bd0f:	eb 3f                	jmp    c001bd50 <FAT::closeDir(void*)+0x50>
c001bd11:	8d 76 00             	lea    esi,[esi+0x0]
c001bd14:	83 ec 0c             	sub    esp,0xc
c001bd17:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bd1b:	e8 9d 8b fe ff       	call   c00048bd <f_closedir>
c001bd20:	83 c4 10             	add    esp,0x10
c001bd23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd27:	83 ec 0c             	sub    esp,0xc
c001bd2a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bd2e:	e8 a8 3f ff ff       	call   c000fcdb <free>
c001bd33:	83 c4 10             	add    esp,0x10
c001bd36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd3a:	85 c0                	test   eax,eax
c001bd3c:	75 0a                	jne    c001bd48 <FAT::closeDir(void*)+0x48>
c001bd3e:	b8 00 00 00 00       	mov    eax,0x0
c001bd43:	eb 0b                	jmp    c001bd50 <FAT::closeDir(void*)+0x50>
c001bd45:	8d 76 00             	lea    esi,[esi+0x0]
c001bd48:	b8 01 00 00 00       	mov    eax,0x1
c001bd4d:	8d 76 00             	lea    esi,[esi+0x0]
c001bd50:	83 c4 1c             	add    esp,0x1c
c001bd53:	c3                   	ret    

c001bd54 <FAT::truncate(void*, unsigned long long)>:
c001bd54:	83 ec 2c             	sub    esp,0x2c
c001bd57:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bd5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bd5f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd67:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001bd6c:	75 0a                	jne    c001bd78 <FAT::truncate(void*, unsigned long long)+0x24>
c001bd6e:	b8 04 00 00 00       	mov    eax,0x4
c001bd73:	eb 47                	jmp    c001bdbc <FAT::truncate(void*, unsigned long long)+0x68>
c001bd75:	8d 76 00             	lea    esi,[esi+0x0]
c001bd78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bd7c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bd7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd83:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001bd8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bd8f:	83 ec 08             	sub    esp,0x8
c001bd92:	50                   	push   eax
c001bd93:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bd97:	e8 a5 88 fe ff       	call   c0004641 <f_lseek>
c001bd9c:	83 c4 10             	add    esp,0x10
c001bd9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bda3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bda7:	85 c0                	test   eax,eax
c001bda9:	75 09                	jne    c001bdb4 <FAT::truncate(void*, unsigned long long)+0x60>
c001bdab:	b8 00 00 00 00       	mov    eax,0x0
c001bdb0:	eb 0a                	jmp    c001bdbc <FAT::truncate(void*, unsigned long long)+0x68>
c001bdb2:	66 90                	xchg   ax,ax
c001bdb4:	b8 01 00 00 00       	mov    eax,0x1
c001bdb9:	8d 76 00             	lea    esi,[esi+0x0]
c001bdbc:	83 c4 2c             	add    esp,0x2c
c001bdbf:	c3                   	ret    

c001bdc0 <FAT::seek(void*, unsigned long long)>:
c001bdc0:	83 ec 2c             	sub    esp,0x2c
c001bdc3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bdc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bdcb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bdcf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdd3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001bdd8:	75 0a                	jne    c001bde4 <FAT::seek(void*, unsigned long long)+0x24>
c001bdda:	b8 04 00 00 00       	mov    eax,0x4
c001bddf:	eb 33                	jmp    c001be14 <FAT::seek(void*, unsigned long long)+0x54>
c001bde1:	8d 76 00             	lea    esi,[esi+0x0]
c001bde4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bde8:	83 ec 08             	sub    esp,0x8
c001bdeb:	50                   	push   eax
c001bdec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001bdf0:	e8 4c 88 fe ff       	call   c0004641 <f_lseek>
c001bdf5:	83 c4 10             	add    esp,0x10
c001bdf8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bdfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be00:	85 c0                	test   eax,eax
c001be02:	75 08                	jne    c001be0c <FAT::seek(void*, unsigned long long)+0x4c>
c001be04:	b8 00 00 00 00       	mov    eax,0x0
c001be09:	eb 09                	jmp    c001be14 <FAT::seek(void*, unsigned long long)+0x54>
c001be0b:	90                   	nop
c001be0c:	b8 01 00 00 00       	mov    eax,0x1
c001be11:	8d 76 00             	lea    esi,[esi+0x0]
c001be14:	83 c4 2c             	add    esp,0x2c
c001be17:	c3                   	ret    

c001be18 <fatWrapperReadDisk>:
c001be18:	53                   	push   ebx
c001be19:	83 ec 18             	sub    esp,0x18
c001be1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be20:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001be24:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be29:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001be30:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001be34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001be38:	ba 00 00 00 00       	mov    edx,0x0
c001be3d:	83 ec 0c             	sub    esp,0xc
c001be40:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001be44:	53                   	push   ebx
c001be45:	52                   	push   edx
c001be46:	50                   	push   eax
c001be47:	51                   	push   ecx
c001be48:	e8 03 ec fe ff       	call   c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>
c001be4d:	83 c4 20             	add    esp,0x20
c001be50:	83 c4 18             	add    esp,0x18
c001be53:	5b                   	pop    ebx
c001be54:	c3                   	ret    
c001be55:	8d 76 00             	lea    esi,[esi+0x0]

c001be58 <fatWrapperWriteDisk>:
c001be58:	53                   	push   ebx
c001be59:	83 ec 18             	sub    esp,0x18
c001be5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be60:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001be64:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001be69:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001be70:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001be74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001be78:	ba 00 00 00 00       	mov    edx,0x0
c001be7d:	83 ec 0c             	sub    esp,0xc
c001be80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001be84:	53                   	push   ebx
c001be85:	52                   	push   edx
c001be86:	50                   	push   eax
c001be87:	51                   	push   ecx
c001be88:	e8 2f ec fe ff       	call   c000aabc <LogicalDisk::write(unsigned long long, int, void*)>
c001be8d:	83 c4 20             	add    esp,0x20
c001be90:	83 c4 18             	add    esp,0x18
c001be93:	5b                   	pop    ebx
c001be94:	c3                   	ret    
c001be95:	8d 76 00             	lea    esi,[esi+0x0]

c001be98 <fatWrapperIoctl>:
c001be98:	53                   	push   ebx
c001be99:	83 ec 28             	sub    esp,0x28
c001be9c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bea0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bea4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bea8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001beac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001beb1:	83 f8 02             	cmp    eax,0x2
c001beb4:	75 32                	jne    c001bee8 <fatWrapperIoctl+0x50>
c001beb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001beba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bebe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bec3:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001beca:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bed0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bed6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001beda:	66 89 02             	mov    WORD PTR [edx],ax
c001bedd:	b8 00 00 00 00       	mov    eax,0x0
c001bee2:	e9 c5 00 00 00       	jmp    c001bfac <fatWrapperIoctl+0x114>
c001bee7:	90                   	nop
c001bee8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001beed:	83 f8 01             	cmp    eax,0x1
c001bef0:	75 6a                	jne    c001bf5c <fatWrapperIoctl+0xc4>
c001bef2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bef6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001befa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001beff:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001bf06:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bf0c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001bf12:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001bf18:	89 c8                	mov    eax,ecx
c001bf1a:	89 da                	mov    edx,ebx
c001bf1c:	0f a4 c2 0a          	shld   edx,eax,0xa
c001bf20:	c1 e0 0a             	shl    eax,0xa
c001bf23:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001bf28:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c001bf2f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001bf35:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001bf3b:	89 cb                	mov    ebx,ecx
c001bf3d:	c1 fb 1f             	sar    ebx,0x1f
c001bf40:	53                   	push   ebx
c001bf41:	51                   	push   ecx
c001bf42:	52                   	push   edx
c001bf43:	50                   	push   eax
c001bf44:	e8 9b 59 00 00       	call   c00218e4 <__udivdi3>
c001bf49:	83 c4 10             	add    esp,0x10
c001bf4c:	89 c2                	mov    edx,eax
c001bf4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf52:	89 10                	mov    DWORD PTR [eax],edx
c001bf54:	b8 00 00 00 00       	mov    eax,0x0
c001bf59:	eb 51                	jmp    c001bfac <fatWrapperIoctl+0x114>
c001bf5b:	90                   	nop
c001bf5c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bf61:	85 c0                	test   eax,eax
c001bf63:	75 07                	jne    c001bf6c <fatWrapperIoctl+0xd4>
c001bf65:	b8 00 00 00 00       	mov    eax,0x0
c001bf6a:	eb 40                	jmp    c001bfac <fatWrapperIoctl+0x114>
c001bf6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bf71:	83 f8 03             	cmp    eax,0x3
c001bf74:	75 1a                	jne    c001bf90 <fatWrapperIoctl+0xf8>
c001bf76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf7a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bf7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bf82:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001bf88:	b8 00 00 00 00       	mov    eax,0x0
c001bf8d:	eb 1d                	jmp    c001bfac <fatWrapperIoctl+0x114>
c001bf8f:	90                   	nop
c001bf90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bf95:	83 f8 04             	cmp    eax,0x4
c001bf98:	75 0a                	jne    c001bfa4 <fatWrapperIoctl+0x10c>
c001bf9a:	b8 00 00 00 00       	mov    eax,0x0
c001bf9f:	eb 0b                	jmp    c001bfac <fatWrapperIoctl+0x114>
c001bfa1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfa4:	b8 04 00 00 00       	mov    eax,0x4
c001bfa9:	8d 76 00             	lea    esi,[esi+0x0]
c001bfac:	83 c4 28             	add    esp,0x28
c001bfaf:	5b                   	pop    ebx
c001bfb0:	c3                   	ret    
c001bfb1:	90                   	nop
c001bfb2:	66 90                	xchg   ax,ax

c001bfb4 <FAT::FAT()>:
c001bfb4:	83 ec 1c             	sub    esp,0x1c
c001bfb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bfbb:	83 ec 0c             	sub    esp,0xc
c001bfbe:	50                   	push   eax
c001bfbf:	e8 ac bd fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001bfc4:	83 c4 10             	add    esp,0x10
c001bfc7:	ba 00 57 02 c0       	mov    edx,0xc0025700
c001bfcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bfd0:	89 10                	mov    DWORD PTR [eax],edx
c001bfd2:	c7 05 20 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb20,0x0
c001bfdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bfe4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001bfe9:	7f 19                	jg     c001c004 <FAT::FAT()+0x50>
c001bfeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfef:	c7 04 85 40 eb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd14c0],0xffffffff
c001bffa:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001bfff:	eb e3                	jmp    c001bfe4 <FAT::FAT()+0x30>
c001c001:	8d 76 00             	lea    esi,[esi+0x0]
c001c004:	90                   	nop
c001c005:	83 c4 1c             	add    esp,0x1c
c001c008:	c3                   	ret    
c001c009:	90                   	nop
c001c00a:	66 90                	xchg   ax,ax

c001c00c <FAT::fixFilepath(char*)>:
c001c00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c010:	8a 00                	mov    al,BYTE PTR [eax]
c001c012:	0f be c0             	movsx  eax,al
c001c015:	83 f8 40             	cmp    eax,0x40
c001c018:	7e 2e                	jle    c001c048 <FAT::fixFilepath(char*)+0x3c>
c001c01a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c01e:	8a 00                	mov    al,BYTE PTR [eax]
c001c020:	83 e8 41             	sub    eax,0x41
c001c023:	88 c2                	mov    dl,al
c001c025:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c029:	88 10                	mov    BYTE PTR [eax],dl
c001c02b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c02f:	8a 00                	mov    al,BYTE PTR [eax]
c001c031:	0f be c0             	movsx  eax,al
c001c034:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001c03b:	83 c0 30             	add    eax,0x30
c001c03e:	88 c2                	mov    dl,al
c001c040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c044:	88 10                	mov    BYTE PTR [eax],dl
c001c046:	66 90                	xchg   ax,ax
c001c048:	90                   	nop
c001c049:	c3                   	ret    
c001c04a:	66 90                	xchg   ax,ax

c001c04c <FAT::open(char const*, void**, FileOpenMode)>:
c001c04c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c052:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c05a:	74 0c                	je     c001c068 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c05c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c064:	75 0e                	jne    c001c074 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c066:	66 90                	xchg   ax,ax
c001c068:	b8 04 00 00 00       	mov    eax,0x4
c001c06d:	e9 46 01 00 00       	jmp    c001c1b8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c072:	66 90                	xchg   ax,ax
c001c074:	83 ec 08             	sub    esp,0x8
c001c077:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c07e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c082:	50                   	push   eax
c001c083:	e8 b8 45 fe ff       	call   c0000640 <strcpy>
c001c088:	83 c4 10             	add    esp,0x10
c001c08b:	83 ec 08             	sub    esp,0x8
c001c08e:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c092:	50                   	push   eax
c001c093:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c09a:	e8 6d ff ff ff       	call   c001c00c <FAT::fixFilepath(char*)>
c001c09f:	83 c4 10             	add    esp,0x10
c001c0a2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c0aa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c0b1:	83 e0 01             	and    eax,0x1
c001c0b4:	74 12                	je     c001c0c8 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001c0b6:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c0bd:	83 c8 01             	or     eax,0x1
c001c0c0:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c0c7:	90                   	nop
c001c0c8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c0cf:	83 e0 04             	and    eax,0x4
c001c0d2:	74 24                	je     c001c0f8 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001c0d4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c0db:	83 c8 30             	or     eax,0x30
c001c0de:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c0e5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c0ec:	83 c8 02             	or     eax,0x2
c001c0ef:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c0f6:	66 90                	xchg   ax,ax
c001c0f8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c0ff:	83 e0 02             	and    eax,0x2
c001c102:	74 14                	je     c001c118 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c104:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c10b:	83 c8 02             	or     eax,0x2
c001c10e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c115:	8d 76 00             	lea    esi,[esi+0x0]
c001c118:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c11f:	83 e0 08             	and    eax,0x8
c001c122:	74 14                	je     c001c138 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001c124:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c12b:	83 c8 04             	or     eax,0x4
c001c12e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c135:	8d 76 00             	lea    esi,[esi+0x0]
c001c138:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c13f:	83 e0 10             	and    eax,0x10
c001c142:	74 14                	je     c001c158 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001c144:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001c14b:	83 c8 08             	or     eax,0x8
c001c14e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001c155:	8d 76 00             	lea    esi,[esi+0x0]
c001c158:	83 ec 0c             	sub    esp,0xc
c001c15b:	68 28 02 00 00       	push   0x228
c001c160:	e8 66 3b ff ff       	call   c000fccb <malloc>
c001c165:	83 c4 10             	add    esp,0x10
c001c168:	89 c2                	mov    edx,eax
c001c16a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c171:	89 10                	mov    DWORD PTR [eax],edx
c001c173:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c17b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c182:	8b 00                	mov    eax,DWORD PTR [eax]
c001c184:	83 ec 04             	sub    esp,0x4
c001c187:	52                   	push   edx
c001c188:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c18c:	52                   	push   edx
c001c18d:	50                   	push   eax
c001c18e:	e8 b0 7c fe ff       	call   c0003e43 <f_open>
c001c193:	83 c4 10             	add    esp,0x10
c001c196:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c19d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c1a5:	74 09                	je     c001c1b0 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001c1a7:	b8 01 00 00 00       	mov    eax,0x1
c001c1ac:	eb 0a                	jmp    c001c1b8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001c1ae:	66 90                	xchg   ax,ax
c001c1b0:	b8 00 00 00 00       	mov    eax,0x0
c001c1b5:	8d 76 00             	lea    esi,[esi+0x0]
c001c1b8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c1be:	c3                   	ret    
c001c1bf:	90                   	nop

c001c1c0 <FAT::openDir(char const*, void**)>:
c001c1c0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c1c6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c1ce:	74 0c                	je     c001c1dc <FAT::openDir(char const*, void**)+0x1c>
c001c1d0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c1d8:	75 0e                	jne    c001c1e8 <FAT::openDir(char const*, void**)+0x28>
c001c1da:	66 90                	xchg   ax,ax
c001c1dc:	b8 04 00 00 00       	mov    eax,0x4
c001c1e1:	e9 82 00 00 00       	jmp    c001c268 <FAT::openDir(char const*, void**)+0xa8>
c001c1e6:	66 90                	xchg   ax,ax
c001c1e8:	83 ec 08             	sub    esp,0x8
c001c1eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c1f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c1f6:	50                   	push   eax
c001c1f7:	e8 44 44 fe ff       	call   c0000640 <strcpy>
c001c1fc:	83 c4 10             	add    esp,0x10
c001c1ff:	83 ec 08             	sub    esp,0x8
c001c202:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c206:	50                   	push   eax
c001c207:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c20e:	e8 f9 fd ff ff       	call   c001c00c <FAT::fixFilepath(char*)>
c001c213:	83 c4 10             	add    esp,0x10
c001c216:	83 ec 0c             	sub    esp,0xc
c001c219:	6a 30                	push   0x30
c001c21b:	e8 ab 3a ff ff       	call   c000fccb <malloc>
c001c220:	83 c4 10             	add    esp,0x10
c001c223:	89 c2                	mov    edx,eax
c001c225:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c22c:	89 10                	mov    DWORD PTR [eax],edx
c001c22e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c235:	8b 00                	mov    eax,DWORD PTR [eax]
c001c237:	83 ec 08             	sub    esp,0x8
c001c23a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c23e:	52                   	push   edx
c001c23f:	50                   	push   eax
c001c240:	e8 ad 85 fe ff       	call   c00047f2 <f_opendir>
c001c245:	83 c4 10             	add    esp,0x10
c001c248:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c24f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c257:	74 07                	je     c001c260 <FAT::openDir(char const*, void**)+0xa0>
c001c259:	b8 01 00 00 00       	mov    eax,0x1
c001c25e:	eb 08                	jmp    c001c268 <FAT::openDir(char const*, void**)+0xa8>
c001c260:	b8 00 00 00 00       	mov    eax,0x0
c001c265:	8d 76 00             	lea    esi,[esi+0x0]
c001c268:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c26e:	c3                   	ret    
c001c26f:	90                   	nop

c001c270 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c270:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c276:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c27e:	75 0c                	jne    c001c28c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c280:	b8 04 00 00 00       	mov    eax,0x4
c001c285:	e9 d6 00 00 00       	jmp    c001c360 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c28a:	66 90                	xchg   ax,ax
c001c28c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c294:	75 0a                	jne    c001c2a0 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c296:	b8 04 00 00 00       	mov    eax,0x4
c001c29b:	e9 c0 00 00 00       	jmp    c001c360 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c2a0:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c2a8:	75 0a                	jne    c001c2b4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c2aa:	b8 04 00 00 00       	mov    eax,0x4
c001c2af:	e9 ac 00 00 00       	jmp    c001c360 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c2b4:	83 ec 08             	sub    esp,0x8
c001c2b7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c2be:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c2c5:	50                   	push   eax
c001c2c6:	e8 75 43 fe ff       	call   c0000640 <strcpy>
c001c2cb:	83 c4 10             	add    esp,0x10
c001c2ce:	83 ec 08             	sub    esp,0x8
c001c2d1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c2d8:	50                   	push   eax
c001c2d9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c2e0:	e8 27 fd ff ff       	call   c001c00c <FAT::fixFilepath(char*)>
c001c2e5:	83 c4 10             	add    esp,0x10
c001c2e8:	83 ec 08             	sub    esp,0x8
c001c2eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c2ef:	50                   	push   eax
c001c2f0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c2f7:	50                   	push   eax
c001c2f8:	e8 74 86 fe ff       	call   c0004971 <f_stat>
c001c2fd:	83 c4 10             	add    esp,0x10
c001c300:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c307:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c30e:	85 c0                	test   eax,eax
c001c310:	74 0a                	je     c001c31c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c312:	83 f8 04             	cmp    eax,0x4
c001c315:	74 39                	je     c001c350 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001c317:	eb 3f                	jmp    c001c358 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001c319:	8d 76 00             	lea    esi,[esi+0x0]
c001c31c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c320:	0f b6 c0             	movzx  eax,al
c001c323:	83 e0 10             	and    eax,0x10
c001c326:	0f 95 c2             	setne  dl
c001c329:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c330:	88 10                	mov    BYTE PTR [eax],dl
c001c332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c336:	ba 00 00 00 00       	mov    edx,0x0
c001c33b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c342:	89 01                	mov    DWORD PTR [ecx],eax
c001c344:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c347:	b8 00 00 00 00       	mov    eax,0x0
c001c34c:	eb 12                	jmp    c001c360 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c34e:	66 90                	xchg   ax,ax
c001c350:	b8 02 00 00 00       	mov    eax,0x2
c001c355:	eb 09                	jmp    c001c360 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001c357:	90                   	nop
c001c358:	b8 01 00 00 00       	mov    eax,0x1
c001c35d:	8d 76 00             	lea    esi,[esi+0x0]
c001c360:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c366:	c3                   	ret    
c001c367:	90                   	nop

c001c368 <FAT::unlink(char const*)>:
c001c368:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c36e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c376:	75 08                	jne    c001c380 <FAT::unlink(char const*)+0x18>
c001c378:	b8 04 00 00 00       	mov    eax,0x4
c001c37d:	eb 61                	jmp    c001c3e0 <FAT::unlink(char const*)+0x78>
c001c37f:	90                   	nop
c001c380:	83 ec 08             	sub    esp,0x8
c001c383:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c38a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c38e:	50                   	push   eax
c001c38f:	e8 ac 42 fe ff       	call   c0000640 <strcpy>
c001c394:	83 c4 10             	add    esp,0x10
c001c397:	83 ec 08             	sub    esp,0x8
c001c39a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c39e:	50                   	push   eax
c001c39f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c3a6:	e8 61 fc ff ff       	call   c001c00c <FAT::fixFilepath(char*)>
c001c3ab:	83 c4 10             	add    esp,0x10
c001c3ae:	83 ec 0c             	sub    esp,0xc
c001c3b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c3b5:	50                   	push   eax
c001c3b6:	e8 28 88 fe ff       	call   c0004be3 <f_unlink>
c001c3bb:	83 c4 10             	add    esp,0x10
c001c3be:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c3c5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c3cc:	85 c0                	test   eax,eax
c001c3ce:	75 08                	jne    c001c3d8 <FAT::unlink(char const*)+0x70>
c001c3d0:	b8 00 00 00 00       	mov    eax,0x0
c001c3d5:	eb 09                	jmp    c001c3e0 <FAT::unlink(char const*)+0x78>
c001c3d7:	90                   	nop
c001c3d8:	b8 01 00 00 00       	mov    eax,0x1
c001c3dd:	8d 76 00             	lea    esi,[esi+0x0]
c001c3e0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c3e6:	c3                   	ret    
c001c3e7:	90                   	nop

c001c3e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c3e8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c3ee:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c3f5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c3fc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c400:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c404:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c40c:	75 0a                	jne    c001c418 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c40e:	b8 04 00 00 00       	mov    eax,0x4
c001c413:	e9 7c 01 00 00       	jmp    c001c594 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001c418:	83 ec 08             	sub    esp,0x8
c001c41b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c422:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c426:	50                   	push   eax
c001c427:	e8 14 42 fe ff       	call   c0000640 <strcpy>
c001c42c:	83 c4 10             	add    esp,0x10
c001c42f:	83 ec 08             	sub    esp,0x8
c001c432:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c436:	50                   	push   eax
c001c437:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c43e:	e8 c9 fb ff ff       	call   c001c00c <FAT::fixFilepath(char*)>
c001c443:	83 c4 10             	add    esp,0x10
c001c446:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c44e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c456:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c45b:	83 e0 01             	and    eax,0x1
c001c45e:	74 14                	je     c001c474 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001c460:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c467:	83 c8 01             	or     eax,0x1
c001c46a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c471:	8d 76 00             	lea    esi,[esi+0x0]
c001c474:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c479:	83 e0 02             	and    eax,0x2
c001c47c:	74 12                	je     c001c490 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c47e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c485:	83 c8 20             	or     eax,0x20
c001c488:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c48f:	90                   	nop
c001c490:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c495:	83 e0 04             	and    eax,0x4
c001c498:	74 12                	je     c001c4ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001c49a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c4a1:	83 c8 04             	or     eax,0x4
c001c4a4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c4ab:	90                   	nop
c001c4ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c4b1:	83 e0 08             	and    eax,0x8
c001c4b4:	74 12                	je     c001c4c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001c4b6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c4bd:	83 c8 02             	or     eax,0x2
c001c4c0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c4c7:	90                   	nop
c001c4c8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c4cd:	83 e0 01             	and    eax,0x1
c001c4d0:	74 12                	je     c001c4e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001c4d2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c4d9:	83 c8 01             	or     eax,0x1
c001c4dc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c4e3:	90                   	nop
c001c4e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c4e9:	83 e0 02             	and    eax,0x2
c001c4ec:	74 12                	je     c001c500 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001c4ee:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c4f5:	83 c8 20             	or     eax,0x20
c001c4f8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c4ff:	90                   	nop
c001c500:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c505:	83 e0 04             	and    eax,0x4
c001c508:	74 12                	je     c001c51c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001c50a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c511:	83 c8 04             	or     eax,0x4
c001c514:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c51b:	90                   	nop
c001c51c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c521:	83 e0 08             	and    eax,0x8
c001c524:	74 12                	je     c001c538 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001c526:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c52d:	83 c8 02             	or     eax,0x2
c001c530:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c537:	90                   	nop
c001c538:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001c53f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c546:	09 d0                	or     eax,edx
c001c548:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c54f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c557:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c55f:	83 ec 04             	sub    esp,0x4
c001c562:	52                   	push   edx
c001c563:	50                   	push   eax
c001c564:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c568:	50                   	push   eax
c001c569:	e8 ea 8a fe ff       	call   c0005058 <f_chmod>
c001c56e:	83 c4 10             	add    esp,0x10
c001c571:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c578:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c57f:	85 c0                	test   eax,eax
c001c581:	75 09                	jne    c001c58c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001c583:	b8 00 00 00 00       	mov    eax,0x0
c001c588:	eb 0a                	jmp    c001c594 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001c58a:	66 90                	xchg   ax,ax
c001c58c:	b8 01 00 00 00       	mov    eax,0x1
c001c591:	8d 76 00             	lea    esi,[esi+0x0]
c001c594:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c59a:	c3                   	ret    
c001c59b:	90                   	nop

c001c59c <FAT::rename(char const*, char const*)>:
c001c59c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c5a2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c5aa:	74 0c                	je     c001c5b8 <FAT::rename(char const*, char const*)+0x1c>
c001c5ac:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c5b4:	75 0e                	jne    c001c5c4 <FAT::rename(char const*, char const*)+0x28>
c001c5b6:	66 90                	xchg   ax,ax
c001c5b8:	b8 04 00 00 00       	mov    eax,0x4
c001c5bd:	e9 9e 00 00 00       	jmp    c001c660 <FAT::rename(char const*, char const*)+0xc4>
c001c5c2:	66 90                	xchg   ax,ax
c001c5c4:	83 ec 08             	sub    esp,0x8
c001c5c7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c5ce:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c5d5:	50                   	push   eax
c001c5d6:	e8 65 40 fe ff       	call   c0000640 <strcpy>
c001c5db:	83 c4 10             	add    esp,0x10
c001c5de:	83 ec 08             	sub    esp,0x8
c001c5e1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c5e8:	50                   	push   eax
c001c5e9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c5f0:	e8 17 fa ff ff       	call   c001c00c <FAT::fixFilepath(char*)>
c001c5f5:	83 c4 10             	add    esp,0x10
c001c5f8:	83 ec 08             	sub    esp,0x8
c001c5fb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c602:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c606:	50                   	push   eax
c001c607:	e8 34 40 fe ff       	call   c0000640 <strcpy>
c001c60c:	83 c4 10             	add    esp,0x10
c001c60f:	83 ec 08             	sub    esp,0x8
c001c612:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c616:	50                   	push   eax
c001c617:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c61e:	e8 e9 f9 ff ff       	call   c001c00c <FAT::fixFilepath(char*)>
c001c623:	83 c4 10             	add    esp,0x10
c001c626:	83 ec 08             	sub    esp,0x8
c001c629:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c62d:	50                   	push   eax
c001c62e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c635:	50                   	push   eax
c001c636:	e8 65 88 fe ff       	call   c0004ea0 <f_rename>
c001c63b:	83 c4 10             	add    esp,0x10
c001c63e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c645:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c64c:	85 c0                	test   eax,eax
c001c64e:	75 08                	jne    c001c658 <FAT::rename(char const*, char const*)+0xbc>
c001c650:	b8 00 00 00 00       	mov    eax,0x0
c001c655:	eb 09                	jmp    c001c660 <FAT::rename(char const*, char const*)+0xc4>
c001c657:	90                   	nop
c001c658:	b8 01 00 00 00       	mov    eax,0x1
c001c65d:	8d 76 00             	lea    esi,[esi+0x0]
c001c660:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c666:	c3                   	ret    
c001c667:	90                   	nop

c001c668 <FAT::mkdir(char const*)>:
c001c668:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c66e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c676:	75 08                	jne    c001c680 <FAT::mkdir(char const*)+0x18>
c001c678:	b8 04 00 00 00       	mov    eax,0x4
c001c67d:	eb 61                	jmp    c001c6e0 <FAT::mkdir(char const*)+0x78>
c001c67f:	90                   	nop
c001c680:	83 ec 08             	sub    esp,0x8
c001c683:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c68a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c68e:	50                   	push   eax
c001c68f:	e8 ac 3f fe ff       	call   c0000640 <strcpy>
c001c694:	83 c4 10             	add    esp,0x10
c001c697:	83 ec 08             	sub    esp,0x8
c001c69a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c69e:	50                   	push   eax
c001c69f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c6a6:	e8 61 f9 ff ff       	call   c001c00c <FAT::fixFilepath(char*)>
c001c6ab:	83 c4 10             	add    esp,0x10
c001c6ae:	83 ec 0c             	sub    esp,0xc
c001c6b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c6b5:	50                   	push   eax
c001c6b6:	e8 4a 86 fe ff       	call   c0004d05 <f_mkdir>
c001c6bb:	83 c4 10             	add    esp,0x10
c001c6be:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c6c5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c6cc:	85 c0                	test   eax,eax
c001c6ce:	75 08                	jne    c001c6d8 <FAT::mkdir(char const*)+0x70>
c001c6d0:	b8 00 00 00 00       	mov    eax,0x0
c001c6d5:	eb 09                	jmp    c001c6e0 <FAT::mkdir(char const*)+0x78>
c001c6d7:	90                   	nop
c001c6d8:	b8 01 00 00 00       	mov    eax,0x1
c001c6dd:	8d 76 00             	lea    esi,[esi+0x0]
c001c6e0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c6e6:	c3                   	ret    
c001c6e7:	90                   	nop

c001c6e8 <FAT::exists(char const*)>:
c001c6e8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c6ee:	83 ec 08             	sub    esp,0x8
c001c6f1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c6f8:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c6fc:	50                   	push   eax
c001c6fd:	e8 3e 3f fe ff       	call   c0000640 <strcpy>
c001c702:	83 c4 10             	add    esp,0x10
c001c705:	83 ec 08             	sub    esp,0x8
c001c708:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c70c:	50                   	push   eax
c001c70d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c714:	e8 f3 f8 ff ff       	call   c001c00c <FAT::fixFilepath(char*)>
c001c719:	83 c4 10             	add    esp,0x10
c001c71c:	83 ec 08             	sub    esp,0x8
c001c71f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001c726:	50                   	push   eax
c001c727:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c72b:	50                   	push   eax
c001c72c:	e8 40 82 fe ff       	call   c0004971 <f_stat>
c001c731:	83 c4 10             	add    esp,0x10
c001c734:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c73b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c742:	85 c0                	test   eax,eax
c001c744:	75 06                	jne    c001c74c <FAT::exists(char const*)+0x64>
c001c746:	b0 01                	mov    al,0x1
c001c748:	eb 06                	jmp    c001c750 <FAT::exists(char const*)+0x68>
c001c74a:	66 90                	xchg   ax,ax
c001c74c:	b0 00                	mov    al,0x0
c001c74e:	66 90                	xchg   ax,ax
c001c750:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c756:	c3                   	ret    
c001c757:	90                   	nop

c001c758 <isoReadDiscSectorHelper>:
c001c758:	83 ec 2c             	sub    esp,0x2c
c001c75b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c75f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c763:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c768:	83 e8 41             	sub    eax,0x41
c001c76b:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001c772:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c776:	ba 00 00 00 00       	mov    edx,0x0
c001c77b:	83 ec 0c             	sub    esp,0xc
c001c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c782:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c786:	52                   	push   edx
c001c787:	50                   	push   eax
c001c788:	51                   	push   ecx
c001c789:	e8 c2 e2 fe ff       	call   c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>
c001c78e:	83 c4 20             	add    esp,0x20
c001c791:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c795:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c79a:	74 0c                	je     c001c7a8 <isoReadDiscSectorHelper+0x50>
c001c79c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c7a0:	c1 e0 0b             	shl    eax,0xb
c001c7a3:	eb 0b                	jmp    c001c7b0 <isoReadDiscSectorHelper+0x58>
c001c7a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c7a8:	b8 00 00 00 00       	mov    eax,0x0
c001c7ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c7b0:	83 c4 2c             	add    esp,0x2c
c001c7b3:	c3                   	ret    

c001c7b4 <iso_kprintf>:
c001c7b4:	83 ec 0c             	sub    esp,0xc
c001c7b7:	83 ec 08             	sub    esp,0x8
c001c7ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c7be:	68 a5 53 02 c0       	push   0xc00253a5
c001c7c3:	e8 9c a7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c7c8:	83 c4 10             	add    esp,0x10
c001c7cb:	90                   	nop
c001c7cc:	83 c4 0c             	add    esp,0xc
c001c7cf:	c3                   	ret    

c001c7d0 <iso_kprintfd>:
c001c7d0:	83 ec 0c             	sub    esp,0xc
c001c7d3:	83 ec 08             	sub    esp,0x8
c001c7d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c7da:	68 eb 43 02 c0       	push   0xc00243eb
c001c7df:	e8 80 a7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c7e4:	83 c4 10             	add    esp,0x10
c001c7e7:	90                   	nop
c001c7e8:	83 c4 0c             	add    esp,0xc
c001c7eb:	c3                   	ret    

c001c7ec <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c7ec:	b8 08 00 00 00       	mov    eax,0x8
c001c7f1:	c3                   	ret    

c001c7f2 <ISO9660::truncate(void*, unsigned long long)>:
c001c7f2:	b8 01 00 00 00       	mov    eax,0x1
c001c7f7:	c3                   	ret    

c001c7f8 <ISO9660::getName()>:
c001c7f8:	b8 64 57 02 c0       	mov    eax,0xc0025764
c001c7fd:	c3                   	ret    

c001c7fe <ISO9660::closeDir(void*)>:
c001c7fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c802:	8b 00                	mov    eax,DWORD PTR [eax]
c001c804:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001c807:	90                   	nop

c001c808 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c808:	b8 01 00 00 00       	mov    eax,0x1
c001c80d:	c3                   	ret    

c001c80e <ISO9660::unlink(char const*)>:
c001c80e:	b8 01 00 00 00       	mov    eax,0x1
c001c813:	c3                   	ret    

c001c814 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c814:	b8 03 00 00 00       	mov    eax,0x3
c001c819:	c3                   	ret    

c001c81a <ISO9660::rename(char const*, char const*)>:
c001c81a:	b8 01 00 00 00       	mov    eax,0x1
c001c81f:	c3                   	ret    

c001c820 <ISO9660::mkdir(char const*)>:
c001c820:	b8 01 00 00 00       	mov    eax,0x1
c001c825:	c3                   	ret    

c001c826 <ISO9660::~ISO9660()>:
c001c826:	83 ec 0c             	sub    esp,0xc
c001c829:	ba a4 58 02 c0       	mov    edx,0xc00258a4
c001c82e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c832:	89 10                	mov    DWORD PTR [eax],edx
c001c834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c838:	83 ec 0c             	sub    esp,0xc
c001c83b:	50                   	push   eax
c001c83c:	e8 53 b5 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001c841:	83 c4 10             	add    esp,0x10
c001c844:	90                   	nop
c001c845:	83 c4 0c             	add    esp,0xc
c001c848:	c3                   	ret    
c001c849:	90                   	nop

c001c84a <ISO9660::~ISO9660()>:
c001c84a:	83 ec 0c             	sub    esp,0xc
c001c84d:	83 ec 0c             	sub    esp,0xc
c001c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c854:	e8 cd ff ff ff       	call   c001c826 <ISO9660::~ISO9660()>
c001c859:	83 c4 10             	add    esp,0x10
c001c85c:	83 ec 08             	sub    esp,0x8
c001c85f:	6a 08                	push   0x8
c001c861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c865:	e8 e9 0a ff ff       	call   c000d353 <operator delete(void*, unsigned long)>
c001c86a:	83 c4 10             	add    esp,0x10
c001c86d:	83 c4 0c             	add    esp,0xc
c001c870:	c3                   	ret    
c001c871:	90                   	nop

c001c872 <ISO9660::exists(char const*)>:
c001c872:	83 ec 18             	sub    esp,0x18
c001c875:	68 7f 57 02 c0       	push   0xc002577f
c001c87a:	e8 93 37 ff ff       	call   c0010012 <KePanic(char const*)>
c001c87f:	31 c0                	xor    eax,eax
c001c881:	83 c4 1c             	add    esp,0x1c
c001c884:	c3                   	ret    
c001c885:	90                   	nop

c001c886 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c886:	56                   	push   esi
c001c887:	53                   	push   ebx
c001c888:	53                   	push   ebx
c001c889:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c88d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c891:	85 db                	test   ebx,ebx
c001c893:	0f 84 ca 00 00 00    	je     c001c963 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001c899:	85 f6                	test   esi,esi
c001c89b:	0f 84 c2 00 00 00    	je     c001c963 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001c8a1:	b8 03 00 00 00       	mov    eax,0x3
c001c8a6:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001c8ab:	0f 85 b7 00 00 00    	jne    c001c968 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c8b1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001c8b3:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c8ba:	38 0d 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,cl
c001c8c0:	74 1b                	je     c001c8dd <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001c8c2:	85 c0                	test   eax,eax
c001c8c4:	74 10                	je     c001c8d6 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001c8c6:	83 ec 0c             	sub    esp,0xc
c001c8c9:	68 9d 57 02 c0       	push   0xc002579d
c001c8ce:	e8 3f 37 ff ff       	call   c0010012 <KePanic(char const*)>
c001c8d3:	83 c4 10             	add    esp,0x10
c001c8d6:	8a 03                	mov    al,BYTE PTR [ebx]
c001c8d8:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001c8dd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c8e0:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c8e7:	85 c0                	test   eax,eax
c001c8e9:	74 09                	je     c001c8f4 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001c8eb:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001c8f2:	74 48                	je     c001c93c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001c8f4:	83 ec 0c             	sub    esp,0xc
c001c8f7:	68 ad 57 02 c0       	push   0xc00257ad
c001c8fc:	e8 63 a6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c901:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c904:	83 c4 10             	add    esp,0x10
c001c907:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c90e:	85 c0                	test   eax,eax
c001c910:	74 17                	je     c001c929 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001c912:	83 ec 0c             	sub    esp,0xc
c001c915:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c91c:	68 cd 57 02 c0       	push   0xc00257cd
c001c921:	e8 3e a6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c926:	83 c4 10             	add    esp,0x10
c001c929:	83 ec 0c             	sub    esp,0xc
c001c92c:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c933:	50                   	push   eax
c001c934:	e8 f5 a2 fe ff       	call   c0006c2e <init_percd>
c001c939:	83 c4 10             	add    esp,0x10
c001c93c:	83 c3 03             	add    ebx,0x3
c001c93f:	51                   	push   ecx
c001c940:	51                   	push   ecx
c001c941:	6a 00                	push   0x0
c001c943:	53                   	push   ebx
c001c944:	e8 ac 9d fe ff       	call   c00066f5 <iso_open>
c001c949:	83 c4 10             	add    esp,0x10
c001c94c:	89 c2                	mov    edx,eax
c001c94e:	b8 01 00 00 00       	mov    eax,0x1
c001c953:	83 fa ff             	cmp    edx,0xffffffff
c001c956:	74 10                	je     c001c968 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c958:	83 c2 32             	add    edx,0x32
c001c95b:	31 c0                	xor    eax,eax
c001c95d:	01 d2                	add    edx,edx
c001c95f:	89 16                	mov    DWORD PTR [esi],edx
c001c961:	eb 05                	jmp    c001c968 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c963:	b8 04 00 00 00       	mov    eax,0x4
c001c968:	5a                   	pop    edx
c001c969:	5b                   	pop    ebx
c001c96a:	5e                   	pop    esi
c001c96b:	c3                   	ret    

c001c96c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c96c:	53                   	push   ebx
c001c96d:	83 ec 08             	sub    esp,0x8
c001c970:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c974:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c978:	85 c0                	test   eax,eax
c001c97a:	74 2d                	je     c001c9a9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001c97c:	85 db                	test   ebx,ebx
c001c97e:	74 29                	je     c001c9a9 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001c980:	b9 02 00 00 00       	mov    ecx,0x2
c001c985:	52                   	push   edx
c001c986:	99                   	cdq    
c001c987:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c98b:	f7 f9                	idiv   ecx
c001c98d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c991:	83 e8 32             	sub    eax,0x32
c001c994:	50                   	push   eax
c001c995:	e8 03 9e fe ff       	call   c000679d <iso_read>
c001c99a:	83 c4 10             	add    esp,0x10
c001c99d:	89 03                	mov    DWORD PTR [ebx],eax
c001c99f:	09 d0                	or     eax,edx
c001c9a1:	0f 94 c0             	sete   al
c001c9a4:	0f b6 c0             	movzx  eax,al
c001c9a7:	eb 05                	jmp    c001c9ae <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001c9a9:	b8 04 00 00 00       	mov    eax,0x4
c001c9ae:	83 c4 08             	add    esp,0x8
c001c9b1:	5b                   	pop    ebx
c001c9b2:	c3                   	ret    
c001c9b3:	90                   	nop

c001c9b4 <ISO9660::seek(void*, unsigned long long)>:
c001c9b4:	57                   	push   edi
c001c9b5:	56                   	push   esi
c001c9b6:	b8 04 00 00 00       	mov    eax,0x4
c001c9bb:	51                   	push   ecx
c001c9bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c9c0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c9c4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c9c8:	85 d2                	test   edx,edx
c001c9ca:	74 26                	je     c001c9f2 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001c9cc:	6a 00                	push   0x0
c001c9ce:	b9 02 00 00 00       	mov    ecx,0x2
c001c9d3:	57                   	push   edi
c001c9d4:	89 d0                	mov    eax,edx
c001c9d6:	56                   	push   esi
c001c9d7:	99                   	cdq    
c001c9d8:	f7 f9                	idiv   ecx
c001c9da:	83 e8 32             	sub    eax,0x32
c001c9dd:	50                   	push   eax
c001c9de:	e8 d0 9e fe ff       	call   c00068b3 <iso_seek>
c001c9e3:	83 c4 10             	add    esp,0x10
c001c9e6:	31 f0                	xor    eax,esi
c001c9e8:	31 fa                	xor    edx,edi
c001c9ea:	09 d0                	or     eax,edx
c001c9ec:	0f 95 c0             	setne  al
c001c9ef:	0f b6 c0             	movzx  eax,al
c001c9f2:	5a                   	pop    edx
c001c9f3:	5e                   	pop    esi
c001c9f4:	5f                   	pop    edi
c001c9f5:	c3                   	ret    

c001c9f6 <ISO9660::tell(void*, unsigned long long*)>:
c001c9f6:	53                   	push   ebx
c001c9f7:	83 ec 08             	sub    esp,0x8
c001c9fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c9fe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ca02:	85 c0                	test   eax,eax
c001ca04:	74 24                	je     c001ca2a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001ca06:	85 db                	test   ebx,ebx
c001ca08:	74 20                	je     c001ca2a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001ca0a:	83 ec 0c             	sub    esp,0xc
c001ca0d:	b9 02 00 00 00       	mov    ecx,0x2
c001ca12:	99                   	cdq    
c001ca13:	f7 f9                	idiv   ecx
c001ca15:	83 e8 32             	sub    eax,0x32
c001ca18:	50                   	push   eax
c001ca19:	e8 19 9f fe ff       	call   c0006937 <iso_tell>
c001ca1e:	83 c4 10             	add    esp,0x10
c001ca21:	89 03                	mov    DWORD PTR [ebx],eax
c001ca23:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001ca26:	31 c0                	xor    eax,eax
c001ca28:	eb 05                	jmp    c001ca2f <ISO9660::tell(void*, unsigned long long*)+0x39>
c001ca2a:	b8 04 00 00 00       	mov    eax,0x4
c001ca2f:	83 c4 08             	add    esp,0x8
c001ca32:	5b                   	pop    ebx
c001ca33:	c3                   	ret    

c001ca34 <ISO9660::stat(void*, unsigned long long*)>:
c001ca34:	53                   	push   ebx
c001ca35:	83 ec 14             	sub    esp,0x14
c001ca38:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ca3c:	68 f1 57 02 c0       	push   0xc00257f1
c001ca41:	e8 1e a5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ca46:	83 c4 10             	add    esp,0x10
c001ca49:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ca4e:	74 2c                	je     c001ca7c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001ca50:	85 db                	test   ebx,ebx
c001ca52:	74 28                	je     c001ca7c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001ca54:	83 ec 0c             	sub    esp,0xc
c001ca57:	b9 02 00 00 00       	mov    ecx,0x2
c001ca5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca60:	99                   	cdq    
c001ca61:	f7 f9                	idiv   ecx
c001ca63:	83 e8 32             	sub    eax,0x32
c001ca66:	50                   	push   eax
c001ca67:	e8 fc 9e fe ff       	call   c0006968 <iso_total>
c001ca6c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca73:	89 03                	mov    DWORD PTR [ebx],eax
c001ca75:	83 c4 10             	add    esp,0x10
c001ca78:	31 c0                	xor    eax,eax
c001ca7a:	eb 05                	jmp    c001ca81 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001ca7c:	b8 04 00 00 00       	mov    eax,0x4
c001ca81:	83 c4 08             	add    esp,0x8
c001ca84:	5b                   	pop    ebx
c001ca85:	c3                   	ret    

c001ca86 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001ca86:	55                   	push   ebp
c001ca87:	57                   	push   edi
c001ca88:	56                   	push   esi
c001ca89:	53                   	push   ebx
c001ca8a:	83 ec 18             	sub    esp,0x18
c001ca8d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ca91:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ca95:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ca99:	68 f9 57 02 c0       	push   0xc00257f9
c001ca9e:	e8 c1 a4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001caa3:	83 c4 10             	add    esp,0x10
c001caa6:	85 ff                	test   edi,edi
c001caa8:	0f 94 c0             	sete   al
c001caab:	85 f6                	test   esi,esi
c001caad:	0f 94 c2             	sete   dl
c001cab0:	09 d0                	or     eax,edx
c001cab2:	a8 01                	test   al,0x1
c001cab4:	0f 85 dd 00 00 00    	jne    c001cb97 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001caba:	85 db                	test   ebx,ebx
c001cabc:	0f 84 d5 00 00 00    	je     c001cb97 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001cac2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001cac5:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001cacb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001cad2:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001cad9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001cadb:	38 0d 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,cl
c001cae1:	74 1b                	je     c001cafe <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001cae3:	85 c0                	test   eax,eax
c001cae5:	74 10                	je     c001caf7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001cae7:	83 ec 0c             	sub    esp,0xc
c001caea:	68 9d 57 02 c0       	push   0xc002579d
c001caef:	e8 1e 35 ff ff       	call   c0010012 <KePanic(char const*)>
c001caf4:	83 c4 10             	add    esp,0x10
c001caf7:	8a 03                	mov    al,BYTE PTR [ebx]
c001caf9:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001cafe:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cb01:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001cb08:	85 c0                	test   eax,eax
c001cb0a:	74 09                	je     c001cb15 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001cb0c:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001cb13:	74 51                	je     c001cb66 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001cb15:	83 ec 0c             	sub    esp,0xc
c001cb18:	68 01 58 02 c0       	push   0xc0025801
c001cb1d:	e8 42 a4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001cb22:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cb25:	83 c4 10             	add    esp,0x10
c001cb28:	83 3c 85 dc b9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4624],0x0
c001cb30:	74 21                	je     c001cb53 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001cb32:	83 ec 0c             	sub    esp,0xc
c001cb35:	68 21 58 02 c0       	push   0xc0025821
c001cb3a:	e8 25 a4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001cb3f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cb42:	83 c4 10             	add    esp,0x10
c001cb45:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001cb4c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001cb53:	83 ec 0c             	sub    esp,0xc
c001cb56:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001cb5d:	50                   	push   eax
c001cb5e:	e8 cb a0 fe ff       	call   c0006c2e <init_percd>
c001cb63:	83 c4 10             	add    esp,0x10
c001cb66:	83 c3 03             	add    ebx,0x3
c001cb69:	52                   	push   edx
c001cb6a:	52                   	push   edx
c001cb6b:	6a 00                	push   0x0
c001cb6d:	53                   	push   ebx
c001cb6e:	e8 82 9b fe ff       	call   c00066f5 <iso_open>
c001cb73:	83 c4 10             	add    esp,0x10
c001cb76:	89 c5                	mov    ebp,eax
c001cb78:	83 f8 ff             	cmp    eax,0xffffffff
c001cb7b:	75 21                	jne    c001cb9e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001cb7d:	50                   	push   eax
c001cb7e:	50                   	push   eax
c001cb7f:	6a 01                	push   0x1
c001cb81:	53                   	push   ebx
c001cb82:	e8 6e 9b fe ff       	call   c00066f5 <iso_open>
c001cb87:	83 c4 10             	add    esp,0x10
c001cb8a:	ba 02 00 00 00       	mov    edx,0x2
c001cb8f:	40                   	inc    eax
c001cb90:	74 2b                	je     c001cbbd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001cb92:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001cb95:	eb 24                	jmp    c001cbbb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001cb97:	ba 04 00 00 00       	mov    edx,0x4
c001cb9c:	eb 1f                	jmp    c001cbbd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001cb9e:	83 ec 0c             	sub    esp,0xc
c001cba1:	50                   	push   eax
c001cba2:	e8 c1 9d fe ff       	call   c0006968 <iso_total>
c001cba7:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001cbae:	89 07                	mov    DWORD PTR [edi],eax
c001cbb0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cbb3:	e8 c7 9b fe ff       	call   c000677f <iso_close>
c001cbb8:	83 c4 10             	add    esp,0x10
c001cbbb:	31 d2                	xor    edx,edx
c001cbbd:	83 c4 0c             	add    esp,0xc
c001cbc0:	89 d0                	mov    eax,edx
c001cbc2:	5b                   	pop    ebx
c001cbc3:	5e                   	pop    esi
c001cbc4:	5f                   	pop    edi
c001cbc5:	5d                   	pop    ebp
c001cbc6:	c3                   	ret    
c001cbc7:	90                   	nop

c001cbc8 <ISO9660::close(void*)>:
c001cbc8:	83 ec 0c             	sub    esp,0xc
c001cbcb:	b8 04 00 00 00       	mov    eax,0x4
c001cbd0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cbd4:	85 d2                	test   edx,edx
c001cbd6:	74 1b                	je     c001cbf3 <ISO9660::close(void*)+0x2b>
c001cbd8:	83 ec 0c             	sub    esp,0xc
c001cbdb:	b9 02 00 00 00       	mov    ecx,0x2
c001cbe0:	89 d0                	mov    eax,edx
c001cbe2:	99                   	cdq    
c001cbe3:	f7 f9                	idiv   ecx
c001cbe5:	83 e8 32             	sub    eax,0x32
c001cbe8:	50                   	push   eax
c001cbe9:	e8 91 9b fe ff       	call   c000677f <iso_close>
c001cbee:	83 c4 10             	add    esp,0x10
c001cbf1:	31 c0                	xor    eax,eax
c001cbf3:	83 c4 0c             	add    esp,0xc
c001cbf6:	c3                   	ret    
c001cbf7:	90                   	nop

c001cbf8 <ISO9660::openDir(char const*, void**)>:
c001cbf8:	56                   	push   esi
c001cbf9:	53                   	push   ebx
c001cbfa:	50                   	push   eax
c001cbfb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cbff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cc03:	85 db                	test   ebx,ebx
c001cc05:	0f 84 bd 00 00 00    	je     c001ccc8 <ISO9660::openDir(char const*, void**)+0xd0>
c001cc0b:	85 f6                	test   esi,esi
c001cc0d:	0f 84 b5 00 00 00    	je     c001ccc8 <ISO9660::openDir(char const*, void**)+0xd0>
c001cc13:	8a 13                	mov    dl,BYTE PTR [ebx]
c001cc15:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001cc1c:	38 15 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,dl
c001cc22:	74 1b                	je     c001cc3f <ISO9660::openDir(char const*, void**)+0x47>
c001cc24:	85 c0                	test   eax,eax
c001cc26:	74 10                	je     c001cc38 <ISO9660::openDir(char const*, void**)+0x40>
c001cc28:	83 ec 0c             	sub    esp,0xc
c001cc2b:	68 9d 57 02 c0       	push   0xc002579d
c001cc30:	e8 dd 33 ff ff       	call   c0010012 <KePanic(char const*)>
c001cc35:	83 c4 10             	add    esp,0x10
c001cc38:	8a 03                	mov    al,BYTE PTR [ebx]
c001cc3a:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001cc3f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001cc42:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001cc49:	85 c0                	test   eax,eax
c001cc4b:	74 10                	je     c001cc5d <ISO9660::openDir(char const*, void**)+0x65>
c001cc4d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001cc54:	74 1a                	je     c001cc70 <ISO9660::openDir(char const*, void**)+0x78>
c001cc56:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001cc5d:	83 ec 0c             	sub    esp,0xc
c001cc60:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001cc67:	50                   	push   eax
c001cc68:	e8 c1 9f fe ff       	call   c0006c2e <init_percd>
c001cc6d:	83 c4 10             	add    esp,0x10
c001cc70:	83 c3 03             	add    ebx,0x3
c001cc73:	50                   	push   eax
c001cc74:	50                   	push   eax
c001cc75:	6a 01                	push   0x1
c001cc77:	53                   	push   ebx
c001cc78:	e8 78 9a fe ff       	call   c00066f5 <iso_open>
c001cc7d:	83 c4 10             	add    esp,0x10
c001cc80:	89 c3                	mov    ebx,eax
c001cc82:	83 f8 ff             	cmp    eax,0xffffffff
c001cc85:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001cc8a:	75 1c                	jne    c001cca8 <ISO9660::openDir(char const*, void**)+0xb0>
c001cc8c:	53                   	push   ebx
c001cc8d:	53                   	push   ebx
c001cc8e:	68 45 58 02 c0       	push   0xc0025845
c001cc93:	ff b0 66 05 00 00    	push   DWORD PTR [eax+0x566]
c001cc99:	e8 28 5c ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c001cc9e:	83 c4 10             	add    esp,0x10
c001cca1:	b8 01 00 00 00       	mov    eax,0x1
c001cca6:	eb 25                	jmp    c001cccd <ISO9660::openDir(char const*, void**)+0xd5>
c001cca8:	01 db                	add    ebx,ebx
c001ccaa:	51                   	push   ecx
c001ccab:	83 c3 65             	add    ebx,0x65
c001ccae:	51                   	push   ecx
c001ccaf:	68 58 58 02 c0       	push   0xc0025858
c001ccb4:	ff b0 66 05 00 00    	push   DWORD PTR [eax+0x566]
c001ccba:	e8 07 5c ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c001ccbf:	89 1e                	mov    DWORD PTR [esi],ebx
c001ccc1:	83 c4 10             	add    esp,0x10
c001ccc4:	31 c0                	xor    eax,eax
c001ccc6:	eb 05                	jmp    c001cccd <ISO9660::openDir(char const*, void**)+0xd5>
c001ccc8:	b8 04 00 00 00       	mov    eax,0x4
c001cccd:	5a                   	pop    edx
c001ccce:	5b                   	pop    ebx
c001cccf:	5e                   	pop    esi
c001ccd0:	c3                   	ret    
c001ccd1:	90                   	nop

c001ccd2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001ccd2:	55                   	push   ebp
c001ccd3:	57                   	push   edi
c001ccd4:	56                   	push   esi
c001ccd5:	53                   	push   ebx
c001ccd6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ccdc:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001cce3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ccea:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ccf2:	0f 84 e7 00 00 00    	je     c001cddf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001ccf8:	85 db                	test   ebx,ebx
c001ccfa:	0f 84 df 00 00 00    	je     c001cddf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001cd00:	83 ec 0c             	sub    esp,0xc
c001cd03:	68 6b 58 02 c0       	push   0xc002586b
c001cd08:	e8 57 a2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001cd0d:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001cd14:	b9 02 00 00 00       	mov    ecx,0x2
c001cd19:	99                   	cdq    
c001cd1a:	f7 f9                	idiv   ecx
c001cd1c:	83 e8 32             	sub    eax,0x32
c001cd1f:	89 04 24             	mov    DWORD PTR [esp],eax
c001cd22:	e8 93 9c fe ff       	call   c00069ba <iso_readdir>
c001cd27:	83 c4 10             	add    esp,0x10
c001cd2a:	89 c6                	mov    esi,eax
c001cd2c:	85 c0                	test   eax,eax
c001cd2e:	75 37                	jne    c001cd67 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001cd30:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001cd35:	56                   	push   esi
c001cd36:	56                   	push   esi
c001cd37:	68 76 58 02 c0       	push   0xc0025876
c001cd3c:	ff b0 66 05 00 00    	push   DWORD PTR [eax+0x566]
c001cd42:	e8 7f 5b ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c001cd47:	83 c4 0c             	add    esp,0xc
c001cd4a:	68 10 01 00 00       	push   0x110
c001cd4f:	6a 00                	push   0x0
c001cd51:	57                   	push   edi
c001cd52:	e8 99 37 fe ff       	call   c00004f0 <memset>
c001cd57:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cd5d:	83 c4 10             	add    esp,0x10
c001cd60:	b8 01 00 00 00       	mov    eax,0x1
c001cd65:	eb 7d                	jmp    c001cde4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001cd67:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001cd6d:	8d 68 08             	lea    ebp,[eax+0x8]
c001cd70:	83 ec 0c             	sub    esp,0xc
c001cd73:	55                   	push   ebp
c001cd74:	e8 f7 37 fe ff       	call   c0000570 <strlen>
c001cd79:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cd81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cd85:	83 c4 10             	add    esp,0x10
c001cd88:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001cd8c:	75 0a                	jne    c001cd98 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001cd8e:	b8 02 00 00 00       	mov    eax,0x2
c001cd93:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001cd96:	74 05                	je     c001cd9d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001cd98:	b8 01 00 00 00       	mov    eax,0x1
c001cd9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cda1:	50                   	push   eax
c001cda2:	50                   	push   eax
c001cda3:	55                   	push   ebp
c001cda4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cda8:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001cdac:	50                   	push   eax
c001cdad:	e8 8e 38 fe ff       	call   c0000640 <strcpy>
c001cdb2:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001cdb9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cdbb:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001cdc1:	5a                   	pop    edx
c001cdc2:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001cdc7:	59                   	pop    ecx
c001cdc8:	68 89 58 02 c0       	push   0xc0025889
c001cdcd:	ff b0 66 05 00 00    	push   DWORD PTR [eax+0x566]
c001cdd3:	e8 ee 5a ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c001cdd8:	83 c4 10             	add    esp,0x10
c001cddb:	31 c0                	xor    eax,eax
c001cddd:	eb 05                	jmp    c001cde4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001cddf:	b8 04 00 00 00       	mov    eax,0x4
c001cde4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cdea:	5b                   	pop    ebx
c001cdeb:	5e                   	pop    esi
c001cdec:	5f                   	pop    edi
c001cded:	5d                   	pop    ebp
c001cdee:	c3                   	ret    

c001cdef <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001cdef:	57                   	push   edi
c001cdf0:	56                   	push   esi
c001cdf1:	53                   	push   ebx
c001cdf2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cdf6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cdfa:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cdfe:	39 35 24 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec24,esi
c001ce04:	0f be cb             	movsx  ecx,bl
c001ce07:	75 0b                	jne    c001ce14 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001ce09:	0f be 05 24 6b 02 c0 	movsx  eax,BYTE PTR ds:0xc0026b24
c001ce10:	39 c8                	cmp    eax,ecx
c001ce12:	74 47                	je     c001ce5b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ce14:	83 ec 0c             	sub    esp,0xc
c001ce17:	31 d2                	xor    edx,edx
c001ce19:	68 40 ec 02 c0       	push   0xc002ec40
c001ce1e:	6a 01                	push   0x1
c001ce20:	52                   	push   edx
c001ce21:	56                   	push   esi
c001ce22:	ff 34 8d dc b9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4624]
c001ce29:	e8 22 dc fe ff       	call   c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>
c001ce2e:	83 c4 20             	add    esp,0x20
c001ce31:	85 c0                	test   eax,eax
c001ce33:	75 0e                	jne    c001ce43 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001ce35:	89 35 24 ec 02 c0    	mov    DWORD PTR ds:0xc002ec24,esi
c001ce3b:	88 1d 24 6b 02 c0    	mov    BYTE PTR ds:0xc0026b24,bl
c001ce41:	eb 18                	jmp    c001ce5b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ce43:	50                   	push   eax
c001ce44:	68 00 08 00 00       	push   0x800
c001ce49:	6a 00                	push   0x0
c001ce4b:	57                   	push   edi
c001ce4c:	e8 9f 36 fe ff       	call   c00004f0 <memset>
c001ce51:	83 c4 10             	add    esp,0x10
c001ce54:	b8 01 00 00 00       	mov    eax,0x1
c001ce59:	eb 0e                	jmp    c001ce69 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001ce5b:	be 40 ec 02 c0       	mov    esi,0xc002ec40
c001ce60:	b9 00 08 00 00       	mov    ecx,0x800
c001ce65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ce67:	31 c0                	xor    eax,eax
c001ce69:	5b                   	pop    ebx
c001ce6a:	5e                   	pop    esi
c001ce6b:	5f                   	pop    edi
c001ce6c:	c3                   	ret    
c001ce6d:	90                   	nop

c001ce6e <ISO9660::tryMount(LogicalDisk*, int)>:
c001ce6e:	53                   	push   ebx
c001ce6f:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001ce75:	c7 05 24 ec 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002ec24,0xdeadbeef
c001ce7f:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001ce86:	8d 58 41             	lea    ebx,[eax+0x41]
c001ce89:	0f be db             	movsx  ebx,bl
c001ce8c:	53                   	push   ebx
c001ce8d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ce91:	50                   	push   eax
c001ce92:	6a 10                	push   0x10
c001ce94:	e8 56 ff ff ff       	call   c001cdef <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ce99:	83 c4 10             	add    esp,0x10
c001ce9c:	31 d2                	xor    edx,edx
c001ce9e:	85 c0                	test   eax,eax
c001cea0:	75 33                	jne    c001ced5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001cea2:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001cea7:	75 2c                	jne    c001ced5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001cea9:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ceae:	75 25                	jne    c001ced5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ceb0:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ceb5:	75 1e                	jne    c001ced5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ceb7:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001cebc:	75 17                	jne    c001ced5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001cebe:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001cec3:	75 10                	jne    c001ced5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001cec5:	83 ec 0c             	sub    esp,0xc
c001cec8:	53                   	push   ebx
c001cec9:	e8 60 9d fe ff       	call   c0006c2e <init_percd>
c001cece:	83 c4 10             	add    esp,0x10
c001ced1:	40                   	inc    eax
c001ced2:	0f 95 c2             	setne  dl
c001ced5:	88 d0                	mov    al,dl
c001ced7:	81 c4 08 08 00 00    	add    esp,0x808
c001cedd:	5b                   	pop    ebx
c001cede:	c3                   	ret    
c001cedf:	90                   	nop

c001cee0 <ISO9660::ISO9660()>:
c001cee0:	83 ec 0c             	sub    esp,0xc
c001cee3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cee7:	83 ec 0c             	sub    esp,0xc
c001ceea:	50                   	push   eax
c001ceeb:	e8 80 ae fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001cef0:	83 c4 10             	add    esp,0x10
c001cef3:	ba a4 58 02 c0       	mov    edx,0xc00258a4
c001cef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cefc:	89 10                	mov    DWORD PTR [eax],edx
c001cefe:	e8 3d 9e fe ff       	call   c0006d40 <fs_iso9660_init>
c001cf03:	90                   	nop
c001cf04:	83 c4 0c             	add    esp,0xc
c001cf07:	c3                   	ret    

c001cf08 <SoundCard::beginPlayback()>:
c001cf08:	c7 44 24 04 08 59 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025908
c001cf10:	e9 fd 30 ff ff       	jmp    c0010012 <KePanic(char const*)>
c001cf15:	90                   	nop

c001cf16 <SoundCard::stopPlayback()>:
c001cf16:	c7 44 24 04 08 59 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025908
c001cf1e:	e9 ef 30 ff ff       	jmp    c0010012 <KePanic(char const*)>
c001cf23:	90                   	nop

c001cf24 <SoundCard::SoundCard(char const*)>:
c001cf24:	83 ec 1c             	sub    esp,0x1c
c001cf27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf2b:	83 ec 08             	sub    esp,0x8
c001cf2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf32:	50                   	push   eax
c001cf33:	e8 26 cc fe ff       	call   c0009b5e <Device::Device(char const*)>
c001cf38:	83 c4 10             	add    esp,0x10
c001cf3b:	ba 54 59 02 c0       	mov    edx,0xc0025954
c001cf40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf44:	89 10                	mov    DWORD PTR [eax],edx
c001cf46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf4a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cf51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf55:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001cf5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf63:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cf6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf71:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001cf7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf7f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001cf89:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cf91:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001cf96:	7f 1a                	jg     c001cfb2 <SoundCard::SoundCard(char const*)+0x8e>
c001cf98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cfa0:	83 c2 54             	add    edx,0x54
c001cfa3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001cfab:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001cfb0:	eb df                	jmp    c001cf91 <SoundCard::SoundCard(char const*)+0x6d>
c001cfb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfb6:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cfbd:	90                   	nop
c001cfbe:	83 c4 1c             	add    esp,0x1c
c001cfc1:	c3                   	ret    

c001cfc2 <SoundCard::~SoundCard()>:
c001cfc2:	83 ec 0c             	sub    esp,0xc
c001cfc5:	ba 54 59 02 c0       	mov    edx,0xc0025954
c001cfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfce:	89 10                	mov    DWORD PTR [eax],edx
c001cfd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfd4:	83 ec 0c             	sub    esp,0xc
c001cfd7:	50                   	push   eax
c001cfd8:	e8 21 c9 fe ff       	call   c00098fe <Device::~Device()>
c001cfdd:	83 c4 10             	add    esp,0x10
c001cfe0:	90                   	nop
c001cfe1:	83 c4 0c             	add    esp,0xc
c001cfe4:	c3                   	ret    
c001cfe5:	90                   	nop

c001cfe6 <SoundCard::~SoundCard()>:
c001cfe6:	83 ec 0c             	sub    esp,0xc
c001cfe9:	83 ec 0c             	sub    esp,0xc
c001cfec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cff0:	e8 cd ff ff ff       	call   c001cfc2 <SoundCard::~SoundCard()>
c001cff5:	83 c4 10             	add    esp,0x10
c001cff8:	83 ec 08             	sub    esp,0x8
c001cffb:	68 e8 01 00 00       	push   0x1e8
c001d000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d004:	e8 4a 03 ff ff       	call   c000d353 <operator delete(void*, unsigned long)>
c001d009:	83 c4 10             	add    esp,0x10
c001d00c:	83 c4 0c             	add    esp,0xc
c001d00f:	c3                   	ret    

c001d010 <SoundCard::configureRates(int, int, int)>:
c001d010:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d014:	31 c0                	xor    eax,eax
c001d016:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d01d:	75 20                	jne    c001d03f <SoundCard::configureRates(int, int, int)+0x2f>
c001d01f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d023:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d029:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d02d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d037:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d03d:	b0 01                	mov    al,0x1
c001d03f:	c3                   	ret    

c001d040 <SoundCard::getSamples16(int, short*)>:
c001d040:	55                   	push   ebp
c001d041:	57                   	push   edi
c001d042:	31 ff                	xor    edi,edi
c001d044:	56                   	push   esi
c001d045:	53                   	push   ebx
c001d046:	31 db                	xor    ebx,ebx
c001d048:	83 ec 10             	sub    esp,0x10
c001d04b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d04f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d053:	8d 04 36             	lea    eax,[esi+esi*1]
c001d056:	50                   	push   eax
c001d057:	6a 00                	push   0x0
c001d059:	55                   	push   ebp
c001d05a:	e8 91 34 fe ff       	call   c00004f0 <memset>
c001d05f:	83 c4 10             	add    esp,0x10
c001d062:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d066:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d06d:	85 c0                	test   eax,eax
c001d06f:	74 1b                	je     c001d08c <SoundCard::getSamples16(int, short*)+0x4c>
c001d071:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d075:	75 15                	jne    c001d08c <SoundCard::getSamples16(int, short*)+0x4c>
c001d077:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d07b:	55                   	push   ebp
c001d07c:	56                   	push   esi
c001d07d:	50                   	push   eax
c001d07e:	e8 8d 03 00 00       	call   c001d410 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d083:	83 c4 10             	add    esp,0x10
c001d086:	39 c7                	cmp    edi,eax
c001d088:	7d 02                	jge    c001d08c <SoundCard::getSamples16(int, short*)+0x4c>
c001d08a:	89 c7                	mov    edi,eax
c001d08c:	43                   	inc    ebx
c001d08d:	83 fb 20             	cmp    ebx,0x20
c001d090:	75 d0                	jne    c001d062 <SoundCard::getSamples16(int, short*)+0x22>
c001d092:	83 c4 0c             	add    esp,0xc
c001d095:	89 f8                	mov    eax,edi
c001d097:	5b                   	pop    ebx
c001d098:	5e                   	pop    esi
c001d099:	5f                   	pop    edi
c001d09a:	5d                   	pop    ebp
c001d09b:	c3                   	ret    

c001d09c <SoundCard::getSamples32(int, int*)>:
c001d09c:	55                   	push   ebp
c001d09d:	57                   	push   edi
c001d09e:	31 ff                	xor    edi,edi
c001d0a0:	56                   	push   esi
c001d0a1:	31 f6                	xor    esi,esi
c001d0a3:	53                   	push   ebx
c001d0a4:	83 ec 10             	sub    esp,0x10
c001d0a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d0ab:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d0af:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d0b3:	c1 e0 02             	shl    eax,0x2
c001d0b6:	50                   	push   eax
c001d0b7:	6a 00                	push   0x0
c001d0b9:	55                   	push   ebp
c001d0ba:	e8 31 34 fe ff       	call   c00004f0 <memset>
c001d0bf:	83 c4 10             	add    esp,0x10
c001d0c2:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d0c9:	85 c0                	test   eax,eax
c001d0cb:	74 1b                	je     c001d0e8 <SoundCard::getSamples32(int, int*)+0x4c>
c001d0cd:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d0d1:	75 15                	jne    c001d0e8 <SoundCard::getSamples32(int, int*)+0x4c>
c001d0d3:	53                   	push   ebx
c001d0d4:	55                   	push   ebp
c001d0d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d0d9:	50                   	push   eax
c001d0da:	e8 fd 03 00 00       	call   c001d4dc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d0df:	83 c4 10             	add    esp,0x10
c001d0e2:	39 c6                	cmp    esi,eax
c001d0e4:	7d 02                	jge    c001d0e8 <SoundCard::getSamples32(int, int*)+0x4c>
c001d0e6:	89 c6                	mov    esi,eax
c001d0e8:	47                   	inc    edi
c001d0e9:	83 ff 20             	cmp    edi,0x20
c001d0ec:	75 d4                	jne    c001d0c2 <SoundCard::getSamples32(int, int*)+0x26>
c001d0ee:	85 f6                	test   esi,esi
c001d0f0:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001d0f7:	75 0f                	jne    c001d108 <SoundCard::getSamples32(int, int*)+0x6c>
c001d0f9:	85 c0                	test   eax,eax
c001d0fb:	74 1b                	je     c001d118 <SoundCard::getSamples32(int, int*)+0x7c>
c001d0fd:	83 ec 0c             	sub    esp,0xc
c001d100:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d102:	53                   	push   ebx
c001d103:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d106:	eb 0d                	jmp    c001d115 <SoundCard::getSamples32(int, int*)+0x79>
c001d108:	85 c0                	test   eax,eax
c001d10a:	75 0c                	jne    c001d118 <SoundCard::getSamples32(int, int*)+0x7c>
c001d10c:	83 ec 0c             	sub    esp,0xc
c001d10f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d111:	53                   	push   ebx
c001d112:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d115:	83 c4 10             	add    esp,0x10
c001d118:	83 c4 0c             	add    esp,0xc
c001d11b:	89 f0                	mov    eax,esi
c001d11d:	5b                   	pop    ebx
c001d11e:	5e                   	pop    esi
c001d11f:	5f                   	pop    edi
c001d120:	5d                   	pop    ebp
c001d121:	c3                   	ret    

c001d122 <SoundCard::addChannel(SoundPort*)>:
c001d122:	83 ec 0c             	sub    esp,0xc
c001d125:	31 c0                	xor    eax,eax
c001d127:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d12b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001d133:	74 1b                	je     c001d150 <SoundCard::addChannel(SoundPort*)+0x2e>
c001d135:	40                   	inc    eax
c001d136:	83 f8 20             	cmp    eax,0x20
c001d139:	75 f0                	jne    c001d12b <SoundCard::addChannel(SoundPort*)+0x9>
c001d13b:	83 ec 0c             	sub    esp,0xc
c001d13e:	68 2d 59 02 c0       	push   0xc002592d
c001d143:	e8 ca 2e ff ff       	call   c0010012 <KePanic(char const*)>
c001d148:	83 c4 10             	add    esp,0x10
c001d14b:	83 c8 ff             	or     eax,0xffffffff
c001d14e:	eb 0b                	jmp    c001d15b <SoundCard::addChannel(SoundPort*)+0x39>
c001d150:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d154:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001d15b:	83 c4 0c             	add    esp,0xc
c001d15e:	c3                   	ret    
c001d15f:	90                   	nop

c001d160 <SoundCard::removeChannel(int)>:
c001d160:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d164:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d168:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d173:	c3                   	ret    

c001d174 <SoundPort::SoundPort(int, int, int, int)>:
c001d174:	83 ec 0c             	sub    esp,0xc
c001d177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d17b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d186:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d18e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d192:	89 10                	mov    DWORD PTR [eax],edx
c001d194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d198:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d19c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d19f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1a7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d1aa:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d1af:	75 13                	jne    c001d1c4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d1b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1b7:	05 a0 0f 00 00       	add    eax,0xfa0
c001d1bc:	01 c0                	add    eax,eax
c001d1be:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d1c2:	66 90                	xchg   ax,ax
c001d1c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d1cc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d1cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1d3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d1e1:	c1 e0 02             	shl    eax,0x2
c001d1e4:	83 ec 0c             	sub    esp,0xc
c001d1e7:	50                   	push   eax
c001d1e8:	e8 de 2a ff ff       	call   c000fccb <malloc>
c001d1ed:	83 c4 10             	add    esp,0x10
c001d1f0:	89 c2                	mov    edx,eax
c001d1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1f6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d1f9:	90                   	nop
c001d1fa:	83 c4 0c             	add    esp,0xc
c001d1fd:	c3                   	ret    
c001d1fe:	66 90                	xchg   ax,ax

c001d200 <SoundPort::~SoundPort()>:
c001d200:	83 ec 0c             	sub    esp,0xc
c001d203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d207:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d20a:	85 c0                	test   eax,eax
c001d20c:	74 1e                	je     c001d22c <SoundPort::~SoundPort()+0x2c>
c001d20e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d212:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d215:	83 ec 0c             	sub    esp,0xc
c001d218:	50                   	push   eax
c001d219:	e8 bd 2a ff ff       	call   c000fcdb <free>
c001d21e:	83 c4 10             	add    esp,0x10
c001d221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d225:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d22c:	90                   	nop
c001d22d:	83 c4 0c             	add    esp,0xc
c001d230:	c3                   	ret    
c001d231:	90                   	nop
c001d232:	66 90                	xchg   ax,ax

c001d234 <SoundPort::unpause()>:
c001d234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d238:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d23c:	c3                   	ret    
c001d23d:	90                   	nop
c001d23e:	66 90                	xchg   ax,ax

c001d240 <SoundPort::pause()>:
c001d240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d244:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d248:	c3                   	ret    
c001d249:	90                   	nop
c001d24a:	66 90                	xchg   ax,ax

c001d24c <SoundPort::getBufferUsed()>:
c001d24c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d250:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d253:	c3                   	ret    

c001d254 <SoundPort::getBufferSize()>:
c001d254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d258:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d25b:	c3                   	ret    

c001d25c <SoundPort::buffer8(signed char*, int)>:
c001d25c:	55                   	push   ebp
c001d25d:	57                   	push   edi
c001d25e:	56                   	push   esi
c001d25f:	53                   	push   ebx
c001d260:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d264:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d268:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d26b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d26e:	74 70                	je     c001d2e0 <SoundPort::buffer8(signed char*, int)+0x84>
c001d270:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d274:	85 c9                	test   ecx,ecx
c001d276:	7e 68                	jle    c001d2e0 <SoundPort::buffer8(signed char*, int)+0x84>
c001d278:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001d27c:	8d 48 01             	lea    ecx,[eax+0x1]
c001d27f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d282:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d285:	89 f1                	mov    ecx,esi
c001d287:	c1 e1 18             	shl    ecx,0x18
c001d28a:	29 f1                	sub    ecx,esi
c001d28c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d28f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d292:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d295:	74 51                	je     c001d2e8 <SoundPort::buffer8(signed char*, int)+0x8c>
c001d297:	31 ff                	xor    edi,edi
c001d299:	eb 25                	jmp    c001d2c0 <SoundPort::buffer8(signed char*, int)+0x64>
c001d29b:	90                   	nop
c001d29c:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001d2a1:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d2a4:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d2a7:	89 f3                	mov    ebx,esi
c001d2a9:	c1 e3 18             	shl    ebx,0x18
c001d2ac:	29 f3                	sub    ebx,esi
c001d2ae:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d2b1:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d2b4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d2b7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d2ba:	74 1c                	je     c001d2d8 <SoundPort::buffer8(signed char*, int)+0x7c>
c001d2bc:	89 c7                	mov    edi,eax
c001d2be:	66 90                	xchg   ax,ax
c001d2c0:	8d 47 01             	lea    eax,[edi+0x1]
c001d2c3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d2c7:	75 d3                	jne    c001d29c <SoundPort::buffer8(signed char*, int)+0x40>
c001d2c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d2cd:	8d 76 00             	lea    esi,[esi+0x0]
c001d2d0:	5b                   	pop    ebx
c001d2d1:	5e                   	pop    esi
c001d2d2:	5f                   	pop    edi
c001d2d3:	5d                   	pop    ebp
c001d2d4:	c3                   	ret    
c001d2d5:	8d 76 00             	lea    esi,[esi+0x0]
c001d2d8:	5b                   	pop    ebx
c001d2d9:	8d 47 02             	lea    eax,[edi+0x2]
c001d2dc:	5e                   	pop    esi
c001d2dd:	5f                   	pop    edi
c001d2de:	5d                   	pop    ebp
c001d2df:	c3                   	ret    
c001d2e0:	5b                   	pop    ebx
c001d2e1:	31 c0                	xor    eax,eax
c001d2e3:	5e                   	pop    esi
c001d2e4:	5f                   	pop    edi
c001d2e5:	5d                   	pop    ebp
c001d2e6:	c3                   	ret    
c001d2e7:	90                   	nop
c001d2e8:	b8 01 00 00 00       	mov    eax,0x1
c001d2ed:	eb e1                	jmp    c001d2d0 <SoundPort::buffer8(signed char*, int)+0x74>
c001d2ef:	90                   	nop

c001d2f0 <SoundPort::buffer16(short*, int)>:
c001d2f0:	55                   	push   ebp
c001d2f1:	57                   	push   edi
c001d2f2:	56                   	push   esi
c001d2f3:	53                   	push   ebx
c001d2f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d2f8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001d2fc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d2ff:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d302:	74 70                	je     c001d374 <SoundPort::buffer16(short*, int)+0x84>
c001d304:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d308:	85 c9                	test   ecx,ecx
c001d30a:	7e 68                	jle    c001d374 <SoundPort::buffer16(short*, int)+0x84>
c001d30c:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001d310:	8d 48 01             	lea    ecx,[eax+0x1]
c001d313:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d316:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001d319:	89 f1                	mov    ecx,esi
c001d31b:	c1 e1 10             	shl    ecx,0x10
c001d31e:	29 f1                	sub    ecx,esi
c001d320:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d323:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d326:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d329:	74 51                	je     c001d37c <SoundPort::buffer16(short*, int)+0x8c>
c001d32b:	31 ff                	xor    edi,edi
c001d32d:	eb 25                	jmp    c001d354 <SoundPort::buffer16(short*, int)+0x64>
c001d32f:	90                   	nop
c001d330:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001d335:	8d 59 01             	lea    ebx,[ecx+0x1]
c001d338:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001d33b:	89 f3                	mov    ebx,esi
c001d33d:	c1 e3 10             	shl    ebx,0x10
c001d340:	29 f3                	sub    ebx,esi
c001d342:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001d345:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001d348:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d34b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d34e:	74 1c                	je     c001d36c <SoundPort::buffer16(short*, int)+0x7c>
c001d350:	89 c7                	mov    edi,eax
c001d352:	66 90                	xchg   ax,ax
c001d354:	8d 47 01             	lea    eax,[edi+0x1]
c001d357:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001d35b:	75 d3                	jne    c001d330 <SoundPort::buffer16(short*, int)+0x40>
c001d35d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d361:	8d 76 00             	lea    esi,[esi+0x0]
c001d364:	5b                   	pop    ebx
c001d365:	5e                   	pop    esi
c001d366:	5f                   	pop    edi
c001d367:	5d                   	pop    ebp
c001d368:	c3                   	ret    
c001d369:	8d 76 00             	lea    esi,[esi+0x0]
c001d36c:	5b                   	pop    ebx
c001d36d:	8d 47 02             	lea    eax,[edi+0x2]
c001d370:	5e                   	pop    esi
c001d371:	5f                   	pop    edi
c001d372:	5d                   	pop    ebp
c001d373:	c3                   	ret    
c001d374:	5b                   	pop    ebx
c001d375:	31 c0                	xor    eax,eax
c001d377:	5e                   	pop    esi
c001d378:	5f                   	pop    edi
c001d379:	5d                   	pop    ebp
c001d37a:	c3                   	ret    
c001d37b:	90                   	nop
c001d37c:	b8 01 00 00 00       	mov    eax,0x1
c001d381:	eb e1                	jmp    c001d364 <SoundPort::buffer16(short*, int)+0x74>
c001d383:	90                   	nop

c001d384 <SoundPort::buffer32(int*, int)>:
c001d384:	55                   	push   ebp
c001d385:	57                   	push   edi
c001d386:	56                   	push   esi
c001d387:	53                   	push   ebx
c001d388:	83 ec 04             	sub    esp,0x4
c001d38b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d38f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d393:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d396:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d39a:	89 04 24             	mov    DWORD PTR [esp],eax
c001d39d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d3a0:	74 5a                	je     c001d3fc <SoundPort::buffer32(int*, int)+0x78>
c001d3a2:	85 c0                	test   eax,eax
c001d3a4:	7e 56                	jle    c001d3fc <SoundPort::buffer32(int*, int)+0x78>
c001d3a6:	8d 71 01             	lea    esi,[ecx+0x1]
c001d3a9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d3ac:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d3af:	8b 37                	mov    esi,DWORD PTR [edi]
c001d3b1:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d3b4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d3b7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d3ba:	74 4c                	je     c001d408 <SoundPort::buffer32(int*, int)+0x84>
c001d3bc:	31 f6                	xor    esi,esi
c001d3be:	eb 1c                	jmp    c001d3dc <SoundPort::buffer32(int*, int)+0x58>
c001d3c0:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d3c3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d3c6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d3c9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d3cc:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d3d0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d3d3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d3d6:	74 18                	je     c001d3f0 <SoundPort::buffer32(int*, int)+0x6c>
c001d3d8:	89 de                	mov    esi,ebx
c001d3da:	66 90                	xchg   ax,ax
c001d3dc:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d3df:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001d3e2:	75 dc                	jne    c001d3c0 <SoundPort::buffer32(int*, int)+0x3c>
c001d3e4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d3e7:	90                   	nop
c001d3e8:	83 c4 04             	add    esp,0x4
c001d3eb:	5b                   	pop    ebx
c001d3ec:	5e                   	pop    esi
c001d3ed:	5f                   	pop    edi
c001d3ee:	5d                   	pop    ebp
c001d3ef:	c3                   	ret    
c001d3f0:	83 c4 04             	add    esp,0x4
c001d3f3:	8d 46 02             	lea    eax,[esi+0x2]
c001d3f6:	5b                   	pop    ebx
c001d3f7:	5e                   	pop    esi
c001d3f8:	5f                   	pop    edi
c001d3f9:	5d                   	pop    ebp
c001d3fa:	c3                   	ret    
c001d3fb:	90                   	nop
c001d3fc:	83 c4 04             	add    esp,0x4
c001d3ff:	31 c0                	xor    eax,eax
c001d401:	5b                   	pop    ebx
c001d402:	5e                   	pop    esi
c001d403:	5f                   	pop    edi
c001d404:	5d                   	pop    ebp
c001d405:	c3                   	ret    
c001d406:	66 90                	xchg   ax,ax
c001d408:	b8 01 00 00 00       	mov    eax,0x1
c001d40d:	eb d9                	jmp    c001d3e8 <SoundPort::buffer32(int*, int)+0x64>
c001d40f:	90                   	nop

c001d410 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d410:	57                   	push   edi
c001d411:	56                   	push   esi
c001d412:	53                   	push   ebx
c001d413:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d417:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d41b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d421:	39 03                	cmp    DWORD PTR [ebx],eax
c001d423:	74 13                	je     c001d438 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d425:	83 ec 0c             	sub    esp,0xc
c001d428:	68 80 59 02 c0       	push   0xc0025980
c001d42d:	e8 e0 2b ff ff       	call   c0010012 <KePanic(char const*)>
c001d432:	83 c4 10             	add    esp,0x10
c001d435:	8d 76 00             	lea    esi,[esi+0x0]
c001d438:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d43e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d441:	74 11                	je     c001d454 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d443:	83 ec 0c             	sub    esp,0xc
c001d446:	68 bf 59 02 c0       	push   0xc00259bf
c001d44b:	e8 c2 2b ff ff       	call   c0010012 <KePanic(char const*)>
c001d450:	83 c4 10             	add    esp,0x10
c001d453:	90                   	nop
c001d454:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d45a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d45d:	74 11                	je     c001d470 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d45f:	83 ec 0c             	sub    esp,0xc
c001d462:	68 bf 59 02 c0       	push   0xc00259bf
c001d467:	e8 a6 2b ff ff       	call   c0010012 <KePanic(char const*)>
c001d46c:	83 c4 10             	add    esp,0x10
c001d46f:	90                   	nop
c001d470:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001d473:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001d477:	7e 07                	jle    c001d480 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d479:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d47d:	8d 76 00             	lea    esi,[esi+0x0]
c001d480:	85 f6                	test   esi,esi
c001d482:	7e 2c                	jle    c001d4b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001d484:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d488:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d48b:	31 c9                	xor    ecx,ecx
c001d48d:	01 d7                	add    edi,edx
c001d48f:	90                   	nop
c001d490:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d493:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d496:	85 c0                	test   eax,eax
c001d498:	79 06                	jns    c001d4a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d49a:	05 ff 7f 00 00       	add    eax,0x7fff
c001d49f:	90                   	nop
c001d4a0:	c1 f8 0f             	sar    eax,0xf
c001d4a3:	83 c1 04             	add    ecx,0x4
c001d4a6:	66 01 02             	add    WORD PTR [edx],ax
c001d4a9:	83 c2 02             	add    edx,0x2
c001d4ac:	39 d7                	cmp    edi,edx
c001d4ae:	75 e0                	jne    c001d490 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d4b0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d4b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d4b6:	83 ec 04             	sub    esp,0x4
c001d4b9:	29 f0                	sub    eax,esi
c001d4bb:	c1 e0 02             	shl    eax,0x2
c001d4be:	50                   	push   eax
c001d4bf:	8d 04 b2             	lea    eax,[edx+esi*4]
c001d4c2:	50                   	push   eax
c001d4c3:	52                   	push   edx
c001d4c4:	e8 07 2f fe ff       	call   c00003d0 <memmove>
c001d4c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d4cc:	83 c4 10             	add    esp,0x10
c001d4cf:	29 f0                	sub    eax,esi
c001d4d1:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d4d4:	89 f0                	mov    eax,esi
c001d4d6:	5b                   	pop    ebx
c001d4d7:	5e                   	pop    esi
c001d4d8:	5f                   	pop    edi
c001d4d9:	c3                   	ret    
c001d4da:	66 90                	xchg   ax,ax

c001d4dc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d4dc:	57                   	push   edi
c001d4dd:	56                   	push   esi
c001d4de:	53                   	push   ebx
c001d4df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d4e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d4e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d4eb:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d4f1:	39 06                	cmp    DWORD PTR [esi],eax
c001d4f3:	74 13                	je     c001d508 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d4f5:	83 ec 0c             	sub    esp,0xc
c001d4f8:	68 a0 59 02 c0       	push   0xc00259a0
c001d4fd:	e8 10 2b ff ff       	call   c0010012 <KePanic(char const*)>
c001d502:	83 c4 10             	add    esp,0x10
c001d505:	8d 76 00             	lea    esi,[esi+0x0]
c001d508:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d50e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d511:	74 11                	je     c001d524 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d513:	83 ec 0c             	sub    esp,0xc
c001d516:	68 db 59 02 c0       	push   0xc00259db
c001d51b:	e8 f2 2a ff ff       	call   c0010012 <KePanic(char const*)>
c001d520:	83 c4 10             	add    esp,0x10
c001d523:	90                   	nop
c001d524:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d52a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d52d:	74 11                	je     c001d540 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d52f:	83 ec 0c             	sub    esp,0xc
c001d532:	68 db 59 02 c0       	push   0xc00259db
c001d537:	e8 d6 2a ff ff       	call   c0010012 <KePanic(char const*)>
c001d53c:	83 c4 10             	add    esp,0x10
c001d53f:	90                   	nop
c001d540:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d543:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d547:	7e 07                	jle    c001d550 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d549:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d54d:	8d 76 00             	lea    esi,[esi+0x0]
c001d550:	85 ff                	test   edi,edi
c001d552:	7e 1c                	jle    c001d570 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d554:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d55b:	31 c0                	xor    eax,eax
c001d55d:	8d 76 00             	lea    esi,[esi+0x0]
c001d560:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d563:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d566:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d569:	83 c0 04             	add    eax,0x4
c001d56c:	39 c1                	cmp    ecx,eax
c001d56e:	75 f0                	jne    c001d560 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d570:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d573:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d576:	83 ec 04             	sub    esp,0x4
c001d579:	29 f8                	sub    eax,edi
c001d57b:	c1 e0 02             	shl    eax,0x2
c001d57e:	50                   	push   eax
c001d57f:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d582:	50                   	push   eax
c001d583:	52                   	push   edx
c001d584:	e8 47 2e fe ff       	call   c00003d0 <memmove>
c001d589:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d58c:	83 c4 10             	add    esp,0x10
c001d58f:	29 f8                	sub    eax,edi
c001d591:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001d594:	89 f8                	mov    eax,edi
c001d596:	5b                   	pop    ebx
c001d597:	5e                   	pop    esi
c001d598:	5f                   	pop    edi
c001d599:	c3                   	ret    

c001d59a <PCI::open(int, int, void*)>:
c001d59a:	83 ec 18             	sub    esp,0x18
c001d59d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d5a5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d5ab:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5ad:	50                   	push   eax
c001d5ae:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d5b1:	31 c0                	xor    eax,eax
c001d5b3:	83 c4 1c             	add    esp,0x1c
c001d5b6:	c3                   	ret    
c001d5b7:	90                   	nop

c001d5b8 <PCI::close(int, int, void*)>:
c001d5b8:	31 c0                	xor    eax,eax
c001d5ba:	c3                   	ret    
c001d5bb:	90                   	nop

c001d5bc <PCI::PCI()>:
c001d5bc:	83 ec 0c             	sub    esp,0xc
c001d5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c3:	83 ec 08             	sub    esp,0x8
c001d5c6:	68 f7 59 02 c0       	push   0xc00259f7
c001d5cb:	50                   	push   eax
c001d5cc:	e8 3b b3 fe ff       	call   c000890c <Bus::Bus(char const*)>
c001d5d1:	83 c4 10             	add    esp,0x10
c001d5d4:	ba 04 5b 02 c0       	mov    edx,0xc0025b04
c001d5d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5dd:	89 10                	mov    DWORD PTR [eax],edx
c001d5df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e3:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d5ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5f1:	a3 40 f4 02 c0       	mov    ds:0xc002f440,eax
c001d5f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5fa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d600:	0f b6 d0             	movzx  edx,al
c001d603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d607:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d60e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d612:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d618:	0f b6 d0             	movzx  edx,al
c001d61b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d61f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d628:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d62e:	8d 50 01             	lea    edx,[eax+0x1]
c001d631:	88 d1                	mov    cl,dl
c001d633:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d637:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001d63d:	0f b6 d0             	movzx  edx,al
c001d640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d644:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d648:	83 c9 c0             	or     ecx,0xffffffc0
c001d64b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d64f:	90                   	nop
c001d650:	83 c4 0c             	add    esp,0xc
c001d653:	c3                   	ret    

c001d654 <PCI::readBAR8(unsigned int, int)>:
c001d654:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d658:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d65c:	f6 c2 01             	test   dl,0x1
c001d65f:	74 07                	je     c001d668 <PCI::readBAR8(unsigned int, int)+0x14>
c001d661:	83 e2 fc             	and    edx,0xfffffffc
c001d664:	01 c2                	add    edx,eax
c001d666:	ec                   	in     al,dx
c001d667:	c3                   	ret    
c001d668:	83 e2 f0             	and    edx,0xfffffff0
c001d66b:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d66e:	c3                   	ret    
c001d66f:	90                   	nop

c001d670 <PCI::readBAR16(unsigned int, int)>:
c001d670:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d674:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d678:	f6 c2 01             	test   dl,0x1
c001d67b:	74 08                	je     c001d685 <PCI::readBAR16(unsigned int, int)+0x15>
c001d67d:	83 e2 fc             	and    edx,0xfffffffc
c001d680:	01 c2                	add    edx,eax
c001d682:	66 ed                	in     ax,dx
c001d684:	c3                   	ret    
c001d685:	83 e2 f0             	and    edx,0xfffffff0
c001d688:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d68c:	c3                   	ret    
c001d68d:	90                   	nop

c001d68e <PCI::readBAR32(unsigned int, int)>:
c001d68e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d696:	f6 c2 01             	test   dl,0x1
c001d699:	74 07                	je     c001d6a2 <PCI::readBAR32(unsigned int, int)+0x14>
c001d69b:	83 e2 fc             	and    edx,0xfffffffc
c001d69e:	01 c2                	add    edx,eax
c001d6a0:	ed                   	in     eax,dx
c001d6a1:	c3                   	ret    
c001d6a2:	83 e2 f0             	and    edx,0xfffffff0
c001d6a5:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d6a8:	c3                   	ret    
c001d6a9:	90                   	nop

c001d6aa <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d6aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d6ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d6b6:	f6 c2 01             	test   dl,0x1
c001d6b9:	74 07                	je     c001d6c2 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d6bb:	83 e2 fc             	and    edx,0xfffffffc
c001d6be:	01 ca                	add    edx,ecx
c001d6c0:	ee                   	out    dx,al
c001d6c1:	c3                   	ret    
c001d6c2:	83 e2 f0             	and    edx,0xfffffff0
c001d6c5:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d6c8:	c3                   	ret    
c001d6c9:	90                   	nop

c001d6ca <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d6ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d6ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d6d6:	f6 c2 01             	test   dl,0x1
c001d6d9:	74 08                	je     c001d6e3 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d6db:	83 e2 fc             	and    edx,0xfffffffc
c001d6de:	01 ca                	add    edx,ecx
c001d6e0:	66 ef                	out    dx,ax
c001d6e2:	c3                   	ret    
c001d6e3:	83 e2 f0             	and    edx,0xfffffff0
c001d6e6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d6ea:	c3                   	ret    
c001d6eb:	90                   	nop

c001d6ec <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d6ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d6f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d6f8:	f6 c2 01             	test   dl,0x1
c001d6fb:	74 07                	je     c001d704 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d6fd:	83 e2 fc             	and    edx,0xfffffffc
c001d700:	01 ca                	add    edx,ecx
c001d702:	ef                   	out    dx,eax
c001d703:	c3                   	ret    
c001d704:	83 e2 f0             	and    edx,0xfffffff0
c001d707:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d70a:	c3                   	ret    
c001d70b:	90                   	nop

c001d70c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d70c:	55                   	push   ebp
c001d70d:	57                   	push   edi
c001d70e:	56                   	push   esi
c001d70f:	53                   	push   ebx
c001d710:	83 ec 0c             	sub    esp,0xc
c001d713:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001d718:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d71c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d720:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d724:	83 fe 07             	cmp    esi,0x7
c001d727:	76 10                	jbe    c001d739 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d729:	83 ec 0c             	sub    esp,0xc
c001d72c:	68 ff 59 02 c0       	push   0xc00259ff
c001d731:	e8 dc 28 ff ff       	call   c0010012 <KePanic(char const*)>
c001d736:	83 c4 10             	add    esp,0x10
c001d739:	0f b6 db             	movzx  ebx,bl
c001d73c:	83 fb 0f             	cmp    ebx,0xf
c001d73f:	76 10                	jbe    c001d751 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001d741:	83 ec 0c             	sub    esp,0xc
c001d744:	68 2f 5a 02 c0       	push   0xc0025a2f
c001d749:	e8 c4 28 ff ff       	call   c0010012 <KePanic(char const*)>
c001d74e:	83 c4 10             	add    esp,0x10
c001d751:	8d 04 36             	lea    eax,[esi+esi*1]
c001d754:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d759:	83 c8 f0             	or     eax,0xfffffff0
c001d75c:	ee                   	out    dx,al
c001d75d:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d762:	89 e8                	mov    eax,ebp
c001d764:	ee                   	out    dx,al
c001d765:	83 c4 0c             	add    esp,0xc
c001d768:	89 d8                	mov    eax,ebx
c001d76a:	89 f9                	mov    ecx,edi
c001d76c:	c1 e0 08             	shl    eax,0x8
c001d76f:	0f b6 d9             	movzx  ebx,cl
c001d772:	83 e3 fc             	and    ebx,0xfffffffc
c001d775:	09 d8                	or     eax,ebx
c001d777:	5b                   	pop    ebx
c001d778:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001d77d:	5e                   	pop    esi
c001d77e:	5f                   	pop    edi
c001d77f:	5d                   	pop    ebp
c001d780:	c3                   	ret    
c001d781:	90                   	nop

c001d782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d782:	57                   	push   edi
c001d783:	56                   	push   esi
c001d784:	53                   	push   ebx
c001d785:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d789:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d78d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d793:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d797:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d79b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d79f:	83 ff 01             	cmp    edi,0x1
c001d7a2:	75 3f                	jne    c001d7e3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001d7a4:	89 de                	mov    esi,ebx
c001d7a6:	0f b6 c0             	movzx  eax,al
c001d7a9:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d7af:	c1 e0 10             	shl    eax,0x10
c001d7b2:	0f b6 c9             	movzx  ecx,cl
c001d7b5:	09 f0                	or     eax,esi
c001d7b7:	c1 e1 08             	shl    ecx,0x8
c001d7ba:	0f b6 d2             	movzx  edx,dl
c001d7bd:	09 c8                	or     eax,ecx
c001d7bf:	c1 e2 0b             	shl    edx,0xb
c001d7c2:	09 d0                	or     eax,edx
c001d7c4:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d7c9:	0d 00 00 00 80       	or     eax,0x80000000
c001d7ce:	ef                   	out    dx,eax
c001d7cf:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d7d4:	ed                   	in     eax,dx
c001d7d5:	83 e3 02             	and    ebx,0x2
c001d7d8:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001d7df:	d3 e8                	shr    eax,cl
c001d7e1:	eb 44                	jmp    c001d827 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001d7e3:	83 ff 02             	cmp    edi,0x2
c001d7e6:	75 2d                	jne    c001d815 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001d7e8:	83 ec 0c             	sub    esp,0xc
c001d7eb:	0f b6 c9             	movzx  ecx,cl
c001d7ee:	0f b6 d2             	movzx  edx,dl
c001d7f1:	0f b6 fb             	movzx  edi,bl
c001d7f4:	0f b6 c0             	movzx  eax,al
c001d7f7:	57                   	push   edi
c001d7f8:	51                   	push   ecx
c001d7f9:	52                   	push   edx
c001d7fa:	50                   	push   eax
c001d7fb:	56                   	push   esi
c001d7fc:	e8 0b ff ff ff       	call   c001d70c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d801:	89 c2                	mov    edx,eax
c001d803:	ed                   	in     eax,dx
c001d804:	83 e3 02             	and    ebx,0x2
c001d807:	83 c4 20             	add    esp,0x20
c001d80a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001d811:	d3 e8                	shr    eax,cl
c001d813:	eb 12                	jmp    c001d827 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001d815:	83 ec 0c             	sub    esp,0xc
c001d818:	68 5f 5a 02 c0       	push   0xc0025a5f
c001d81d:	e8 f0 27 ff ff       	call   c0010012 <KePanic(char const*)>
c001d822:	83 c4 10             	add    esp,0x10
c001d825:	31 c0                	xor    eax,eax
c001d827:	5b                   	pop    ebx
c001d828:	5e                   	pop    esi
c001d829:	5f                   	pop    edi
c001d82a:	c3                   	ret    
c001d82b:	90                   	nop

c001d82c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d82c:	83 ec 18             	sub    esp,0x18
c001d82f:	6a 00                	push   0x0
c001d831:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d836:	50                   	push   eax
c001d837:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d83c:	50                   	push   eax
c001d83d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d842:	50                   	push   eax
c001d843:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d847:	e8 36 ff ff ff       	call   c001d782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d84c:	83 c4 2c             	add    esp,0x2c
c001d84f:	c3                   	ret    

c001d850 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d850:	83 ec 18             	sub    esp,0x18
c001d853:	6a 0e                	push   0xe
c001d855:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d85a:	50                   	push   eax
c001d85b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d860:	50                   	push   eax
c001d861:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d866:	50                   	push   eax
c001d867:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d86b:	e8 12 ff ff ff       	call   c001d782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d870:	83 c4 2c             	add    esp,0x2c
c001d873:	0f b6 c0             	movzx  eax,al
c001d876:	c3                   	ret    
c001d877:	90                   	nop

c001d878 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d878:	55                   	push   ebp
c001d879:	57                   	push   edi
c001d87a:	56                   	push   esi
c001d87b:	53                   	push   ebx
c001d87c:	83 ec 18             	sub    esp,0x18
c001d87f:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d884:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d889:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d88e:	6a 0a                	push   0xa
c001d890:	56                   	push   esi
c001d891:	55                   	push   ebp
c001d892:	57                   	push   edi
c001d893:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d897:	e8 e6 fe ff ff       	call   c001d782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d89c:	83 c4 14             	add    esp,0x14
c001d89f:	89 c3                	mov    ebx,eax
c001d8a1:	6a 0a                	push   0xa
c001d8a3:	0f b6 db             	movzx  ebx,bl
c001d8a6:	56                   	push   esi
c001d8a7:	55                   	push   ebp
c001d8a8:	57                   	push   edi
c001d8a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d8ad:	e8 d0 fe ff ff       	call   c001d782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8b2:	83 c4 2c             	add    esp,0x2c
c001d8b5:	25 00 ff 00 00       	and    eax,0xff00
c001d8ba:	09 d8                	or     eax,ebx
c001d8bc:	5b                   	pop    ebx
c001d8bd:	5e                   	pop    esi
c001d8be:	5f                   	pop    edi
c001d8bf:	5d                   	pop    ebp
c001d8c0:	c3                   	ret    
c001d8c1:	90                   	nop

c001d8c2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d8c2:	83 ec 18             	sub    esp,0x18
c001d8c5:	6a 08                	push   0x8
c001d8c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8cc:	50                   	push   eax
c001d8cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8d2:	50                   	push   eax
c001d8d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8d8:	50                   	push   eax
c001d8d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8dd:	e8 a0 fe ff ff       	call   c001d782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8e2:	83 c4 2c             	add    esp,0x2c
c001d8e5:	0f b6 c4             	movzx  eax,ah
c001d8e8:	c3                   	ret    
c001d8e9:	90                   	nop

c001d8ea <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d8ea:	83 ec 18             	sub    esp,0x18
c001d8ed:	6a 08                	push   0x8
c001d8ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8f4:	50                   	push   eax
c001d8f5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d8fa:	50                   	push   eax
c001d8fb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d900:	50                   	push   eax
c001d901:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d905:	e8 78 fe ff ff       	call   c001d782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d90a:	83 c4 2c             	add    esp,0x2c
c001d90d:	c3                   	ret    

c001d90e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d90e:	83 ec 18             	sub    esp,0x18
c001d911:	6a 3c                	push   0x3c
c001d913:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d918:	50                   	push   eax
c001d919:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d91e:	50                   	push   eax
c001d91f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d924:	50                   	push   eax
c001d925:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d929:	e8 54 fe ff ff       	call   c001d782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d92e:	83 c4 2c             	add    esp,0x2c
c001d931:	c3                   	ret    

c001d932 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d932:	83 ec 18             	sub    esp,0x18
c001d935:	6a 18                	push   0x18
c001d937:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d93c:	50                   	push   eax
c001d93d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d942:	50                   	push   eax
c001d943:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d948:	50                   	push   eax
c001d949:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d94d:	e8 30 fe ff ff       	call   c001d782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d952:	83 c4 2c             	add    esp,0x2c
c001d955:	0f b6 c4             	movzx  eax,ah
c001d958:	c3                   	ret    
c001d959:	90                   	nop

c001d95a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d95a:	55                   	push   ebp
c001d95b:	57                   	push   edi
c001d95c:	56                   	push   esi
c001d95d:	53                   	push   ebx
c001d95e:	83 ec 28             	sub    esp,0x28
c001d961:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d965:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d96a:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d96f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d974:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d97b:	8d 43 12             	lea    eax,[ebx+0x12]
c001d97e:	83 c3 10             	add    ebx,0x10
c001d981:	0f b6 c0             	movzx  eax,al
c001d984:	0f b6 db             	movzx  ebx,bl
c001d987:	50                   	push   eax
c001d988:	51                   	push   ecx
c001d989:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d98d:	57                   	push   edi
c001d98e:	55                   	push   ebp
c001d98f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d993:	e8 ea fd ff ff       	call   c001d782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d998:	83 c4 14             	add    esp,0x14
c001d99b:	89 c6                	mov    esi,eax
c001d99d:	53                   	push   ebx
c001d99e:	c1 e6 10             	shl    esi,0x10
c001d9a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d9a5:	51                   	push   ecx
c001d9a6:	57                   	push   edi
c001d9a7:	55                   	push   ebp
c001d9a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d9ac:	e8 d1 fd ff ff       	call   c001d782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d9b1:	83 c4 3c             	add    esp,0x3c
c001d9b4:	0f b7 c0             	movzx  eax,ax
c001d9b7:	5b                   	pop    ebx
c001d9b8:	09 f0                	or     eax,esi
c001d9ba:	5e                   	pop    esi
c001d9bb:	5f                   	pop    edi
c001d9bc:	5d                   	pop    ebp
c001d9bd:	c3                   	ret    

c001d9be <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d9be:	55                   	push   ebp
c001d9bf:	57                   	push   edi
c001d9c0:	56                   	push   esi
c001d9c1:	53                   	push   ebx
c001d9c2:	83 ec 0c             	sub    esp,0xc
c001d9c5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d9c9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d9cd:	89 f5                	mov    ebp,esi
c001d9cf:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d9d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d9d9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d9dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d9e1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d9e5:	83 f9 01             	cmp    ecx,0x1
c001d9e8:	75 5d                	jne    c001da47 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d9ea:	0f b6 c8             	movzx  ecx,al
c001d9ed:	0f b6 d2             	movzx  edx,dl
c001d9f0:	c1 e1 10             	shl    ecx,0x10
c001d9f3:	c1 e2 0b             	shl    edx,0xb
c001d9f6:	89 f0                	mov    eax,esi
c001d9f8:	25 fc 00 00 00       	and    eax,0xfc
c001d9fd:	09 c1                	or     ecx,eax
c001d9ff:	89 e8                	mov    eax,ebp
c001da01:	0f b6 c0             	movzx  eax,al
c001da04:	c1 e0 08             	shl    eax,0x8
c001da07:	09 c1                	or     ecx,eax
c001da09:	09 d1                	or     ecx,edx
c001da0b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001da10:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001da16:	89 c8                	mov    eax,ecx
c001da18:	ef                   	out    dx,eax
c001da19:	ba fc 0c 00 00       	mov    edx,0xcfc
c001da1e:	ed                   	in     eax,dx
c001da1f:	0f b7 db             	movzx  ebx,bx
c001da22:	83 e6 02             	and    esi,0x2
c001da25:	74 0a                	je     c001da31 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001da27:	0f b7 d0             	movzx  edx,ax
c001da2a:	c1 e3 10             	shl    ebx,0x10
c001da2d:	09 d3                	or     ebx,edx
c001da2f:	eb 05                	jmp    c001da36 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001da31:	66 31 c0             	xor    ax,ax
c001da34:	09 c3                	or     ebx,eax
c001da36:	ba f8 0c 00 00       	mov    edx,0xcf8
c001da3b:	89 c8                	mov    eax,ecx
c001da3d:	ef                   	out    dx,eax
c001da3e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001da43:	89 d8                	mov    eax,ebx
c001da45:	eb 41                	jmp    c001da88 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001da47:	83 f9 02             	cmp    ecx,0x2
c001da4a:	75 45                	jne    c001da91 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001da4c:	83 ec 0c             	sub    esp,0xc
c001da4f:	0f b6 d2             	movzx  edx,dl
c001da52:	89 f1                	mov    ecx,esi
c001da54:	0f b6 c0             	movzx  eax,al
c001da57:	0f b6 f1             	movzx  esi,cl
c001da5a:	89 e9                	mov    ecx,ebp
c001da5c:	56                   	push   esi
c001da5d:	0f b6 c9             	movzx  ecx,cl
c001da60:	51                   	push   ecx
c001da61:	52                   	push   edx
c001da62:	50                   	push   eax
c001da63:	57                   	push   edi
c001da64:	e8 a3 fc ff ff       	call   c001d70c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001da69:	89 c2                	mov    edx,eax
c001da6b:	ed                   	in     eax,dx
c001da6c:	83 c4 20             	add    esp,0x20
c001da6f:	0f b7 db             	movzx  ebx,bx
c001da72:	f6 c2 02             	test   dl,0x2
c001da75:	74 0c                	je     c001da83 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001da77:	0f b7 c8             	movzx  ecx,ax
c001da7a:	89 d8                	mov    eax,ebx
c001da7c:	c1 e0 10             	shl    eax,0x10
c001da7f:	09 c8                	or     eax,ecx
c001da81:	eb 05                	jmp    c001da88 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001da83:	66 31 c0             	xor    ax,ax
c001da86:	09 d8                	or     eax,ebx
c001da88:	ef                   	out    dx,eax
c001da89:	83 c4 0c             	add    esp,0xc
c001da8c:	5b                   	pop    ebx
c001da8d:	5e                   	pop    esi
c001da8e:	5f                   	pop    edi
c001da8f:	5d                   	pop    ebp
c001da90:	c3                   	ret    
c001da91:	c7 44 24 20 5f 5a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025a5f
c001da99:	83 c4 0c             	add    esp,0xc
c001da9c:	5b                   	pop    ebx
c001da9d:	5e                   	pop    esi
c001da9e:	5f                   	pop    edi
c001da9f:	5d                   	pop    ebp
c001daa0:	e9 6d 25 ff ff       	jmp    c0010012 <KePanic(char const*)>
c001daa5:	90                   	nop

c001daa6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001daa6:	55                   	push   ebp
c001daa7:	57                   	push   edi
c001daa8:	56                   	push   esi
c001daa9:	53                   	push   ebx
c001daaa:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001dab0:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001dab7:	80 3d 4c f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f44c,0x0
c001dabe:	0f 85 bd 00 00 00    	jne    c001db81 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001dac4:	83 ec 0c             	sub    esp,0xc
c001dac7:	68 14 01 00 00       	push   0x114
c001dacc:	e8 fa 21 ff ff       	call   c000fccb <malloc>
c001dad1:	83 c4 0c             	add    esp,0xc
c001dad4:	89 c3                	mov    ebx,eax
c001dad6:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001dadc:	68 65 5a 02 c0       	push   0xc0025a65
c001dae1:	50                   	push   eax
c001dae2:	e8 4b a6 fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001dae7:	83 c4 10             	add    esp,0x10
c001daea:	85 db                	test   ebx,ebx
c001daec:	0f 84 67 02 00 00    	je     c001dd59 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001daf2:	56                   	push   esi
c001daf3:	56                   	push   esi
c001daf4:	6a 01                	push   0x1
c001daf6:	53                   	push   ebx
c001daf7:	e8 54 a6 fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001dafc:	83 c4 10             	add    esp,0x10
c001daff:	85 c0                	test   eax,eax
c001db01:	0f 85 52 02 00 00    	jne    c001dd59 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001db07:	52                   	push   edx
c001db08:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001db0c:	50                   	push   eax
c001db0d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001db11:	50                   	push   eax
c001db12:	53                   	push   ebx
c001db13:	e8 3a a9 fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001db18:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001db1c:	40                   	inc    eax
c001db1d:	89 04 24             	mov    DWORD PTR [esp],eax
c001db20:	e8 a6 21 ff ff       	call   c000fccb <malloc>
c001db25:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001db29:	a3 48 f4 02 c0       	mov    ds:0xc002f448,eax
c001db2e:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001db32:	59                   	pop    ecx
c001db33:	8b 13                	mov    edx,DWORD PTR [ebx]
c001db35:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001db39:	51                   	push   ecx
c001db3a:	50                   	push   eax
c001db3b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001db3f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001db43:	53                   	push   ebx
c001db44:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001db47:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001db4b:	83 c4 20             	add    esp,0x20
c001db4e:	89 c8                	mov    eax,ecx
c001db50:	99                   	cdq    
c001db51:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001db55:	0f 85 fe 01 00 00    	jne    c001dd59 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001db5b:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001db5f:	0f 85 f4 01 00 00    	jne    c001dd59 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001db65:	83 ec 0c             	sub    esp,0xc
c001db68:	53                   	push   ebx
c001db69:	e8 40 a6 fe ff       	call   c00081ae <File::close()>
c001db6e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001db72:	c6 05 4c f4 02 c0 01 	mov    BYTE PTR ds:0xc002f44c,0x1
c001db79:	a3 44 f4 02 c0       	mov    ds:0xc002f444,eax
c001db7e:	83 c4 10             	add    esp,0x10
c001db81:	a1 44 f4 02 c0       	mov    eax,ds:0xc002f444
c001db86:	8b 1d 48 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f448
c001db8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001db90:	31 f6                	xor    esi,esi
c001db92:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001db9a:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001dba1:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001dba6:	31 c9                	xor    ecx,ecx
c001dba8:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001dbb0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001dbb5:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001dbbd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dbc1:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001dbc9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001dbcd:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001dbd1:	0f 8e 82 01 00 00    	jle    c001dd59 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001dbd7:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001dbda:	d4 40                	aam    0x40
c001dbdc:	d5 39                	aad    0x39
c001dbde:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001dbe2:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001dbe6:	d4 40                	aam    0x40
c001dbe8:	d5 39                	aad    0x39
c001dbea:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001dbee:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001dbf2:	d4 40                	aam    0x40
c001dbf4:	d5 39                	aad    0x39
c001dbf6:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001dbfa:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001dbfe:	d4 40                	aam    0x40
c001dc00:	d5 39                	aad    0x39
c001dc02:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001dc06:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001dc0a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001dc0e:	3c 56                	cmp    al,0x56
c001dc10:	74 43                	je     c001dc55 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001dc12:	d4 40                	aam    0x40
c001dc14:	d5 39                	aad    0x39
c001dc16:	8d 48 d0             	lea    ecx,[eax-0x30]
c001dc19:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001dc1d:	0f b6 c9             	movzx  ecx,cl
c001dc20:	c1 e1 04             	shl    ecx,0x4
c001dc23:	d4 40                	aam    0x40
c001dc25:	d5 39                	aad    0x39
c001dc27:	83 e8 30             	sub    eax,0x30
c001dc2a:	0f b6 c0             	movzx  eax,al
c001dc2d:	09 c1                	or     ecx,eax
c001dc2f:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001dc33:	c1 e1 04             	shl    ecx,0x4
c001dc36:	d4 40                	aam    0x40
c001dc38:	d5 39                	aad    0x39
c001dc3a:	83 e8 30             	sub    eax,0x30
c001dc3d:	0f b6 c0             	movzx  eax,al
c001dc40:	09 c1                	or     ecx,eax
c001dc42:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001dc46:	c1 e1 04             	shl    ecx,0x4
c001dc49:	d4 40                	aam    0x40
c001dc4b:	d5 39                	aad    0x39
c001dc4d:	83 e8 30             	sub    eax,0x30
c001dc50:	0f b6 c0             	movzx  eax,al
c001dc53:	09 c1                	or     ecx,eax
c001dc55:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001dc59:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001dc5d:	3c 58                	cmp    al,0x58
c001dc5f:	74 47                	je     c001dca8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001dc61:	d4 40                	aam    0x40
c001dc63:	d5 39                	aad    0x39
c001dc65:	8d 50 d0             	lea    edx,[eax-0x30]
c001dc68:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001dc6c:	0f b6 d2             	movzx  edx,dl
c001dc6f:	c1 e2 04             	shl    edx,0x4
c001dc72:	d4 40                	aam    0x40
c001dc74:	d5 39                	aad    0x39
c001dc76:	83 e8 30             	sub    eax,0x30
c001dc79:	0f b6 c0             	movzx  eax,al
c001dc7c:	09 c2                	or     edx,eax
c001dc7e:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001dc82:	c1 e2 04             	shl    edx,0x4
c001dc85:	d4 40                	aam    0x40
c001dc87:	d5 39                	aad    0x39
c001dc89:	83 e8 30             	sub    eax,0x30
c001dc8c:	0f b6 c0             	movzx  eax,al
c001dc8f:	09 c2                	or     edx,eax
c001dc91:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001dc95:	c1 e2 04             	shl    edx,0x4
c001dc98:	d4 40                	aam    0x40
c001dc9a:	d5 39                	aad    0x39
c001dc9c:	83 e8 30             	sub    eax,0x30
c001dc9f:	0f b6 c0             	movzx  eax,al
c001dca2:	09 c2                	or     edx,eax
c001dca4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dca8:	83 c6 10             	add    esi,0x10
c001dcab:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001dcaf:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001dcb3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001dcb7:	83 fa 0a             	cmp    edx,0xa
c001dcba:	74 0b                	je     c001dcc7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001dcbc:	47                   	inc    edi
c001dcbd:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001dcc1:	75 19                	jne    c001dcdc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001dcc3:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001dcc7:	31 c0                	xor    eax,eax
c001dcc9:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001dcce:	0f 94 c0             	sete   al
c001dcd1:	01 c6                	add    esi,eax
c001dcd3:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001dcd8:	75 0b                	jne    c001dce5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001dcda:	eb 14                	jmp    c001dcf0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001dcdc:	46                   	inc    esi
c001dcdd:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001dce0:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001dce3:	eb ca                	jmp    c001dcaf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001dce5:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001dcea:	0f 85 dd fe ff ff    	jne    c001dbcd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001dcf0:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001dcf5:	74 10                	je     c001dd07 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001dcf7:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001dcfc:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001dd01:	0f 85 c6 fe ff ff    	jne    c001dbcd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001dd07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dd0b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001dd0f:	83 e8 30             	sub    eax,0x30
c001dd12:	83 ef 30             	sub    edi,0x30
c001dd15:	c1 e0 04             	shl    eax,0x4
c001dd18:	09 f8                	or     eax,edi
c001dd1a:	0f b6 c0             	movzx  eax,al
c001dd1d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001dd21:	0f 85 a6 fe ff ff    	jne    c001dbcd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001dd27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd2b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001dd2f:	83 e8 30             	sub    eax,0x30
c001dd32:	83 ef 30             	sub    edi,0x30
c001dd35:	c1 e0 04             	shl    eax,0x4
c001dd38:	09 f8                	or     eax,edi
c001dd3a:	0f b6 c0             	movzx  eax,al
c001dd3d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001dd41:	0f 85 86 fe ff ff    	jne    c001dbcd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001dd47:	50                   	push   eax
c001dd48:	50                   	push   eax
c001dd49:	8d 44 24 48          	lea    eax,[esp+0x48]
c001dd4d:	50                   	push   eax
c001dd4e:	55                   	push   ebp
c001dd4f:	e8 ec 28 fe ff       	call   c0000640 <strcpy>
c001dd54:	83 c4 10             	add    esp,0x10
c001dd57:	eb 06                	jmp    c001dd5f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001dd59:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001dd5d:	31 ed                	xor    ebp,ebp
c001dd5f:	81 c4 4c 01 00 00    	add    esp,0x14c
c001dd65:	89 e8                	mov    eax,ebp
c001dd67:	5b                   	pop    ebx
c001dd68:	5e                   	pop    esi
c001dd69:	5f                   	pop    edi
c001dd6a:	5d                   	pop    ebp
c001dd6b:	c3                   	ret    

c001dd6c <PCI::checkBus(unsigned char)>:
c001dd6c:	56                   	push   esi
c001dd6d:	53                   	push   ebx
c001dd6e:	31 db                	xor    ebx,ebx
c001dd70:	51                   	push   ecx
c001dd71:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001dd76:	52                   	push   edx
c001dd77:	53                   	push   ebx
c001dd78:	43                   	inc    ebx
c001dd79:	56                   	push   esi
c001dd7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd7e:	e8 6f 03 00 00       	call   c001e0f2 <PCI::checkDevice(unsigned char, unsigned char)>
c001dd83:	83 c4 10             	add    esp,0x10
c001dd86:	83 fb 20             	cmp    ebx,0x20
c001dd89:	75 eb                	jne    c001dd76 <PCI::checkBus(unsigned char)+0xa>
c001dd8b:	58                   	pop    eax
c001dd8c:	5b                   	pop    ebx
c001dd8d:	5e                   	pop    esi
c001dd8e:	c3                   	ret    
c001dd8f:	90                   	nop

c001dd90 <PCI::foundDevice(PCIDeviceInfo)>:
c001dd90:	55                   	push   ebp
c001dd91:	57                   	push   edi
c001dd92:	56                   	push   esi
c001dd93:	53                   	push   ebx
c001dd94:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001dd9a:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001dda2:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001dda9:	3d ff ff 00 00       	cmp    eax,0xffff
c001ddae:	0f 84 b7 01 00 00    	je     c001df6b <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001ddb4:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001ddbc:	66 81 fb 06 04       	cmp    bx,0x406
c001ddc1:	75 32                	jne    c001ddf5 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001ddc3:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001ddcb:	50                   	push   eax
c001ddcc:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001ddd4:	50                   	push   eax
c001ddd5:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001dddd:	50                   	push   eax
c001ddde:	55                   	push   ebp
c001dddf:	e8 4e fb ff ff       	call   c001d932 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001dde4:	59                   	pop    ecx
c001dde5:	0f b6 c0             	movzx  eax,al
c001dde8:	5b                   	pop    ebx
c001dde9:	50                   	push   eax
c001ddea:	55                   	push   ebp
c001ddeb:	e8 7c ff ff ff       	call   c001dd6c <PCI::checkBus(unsigned char)>
c001ddf0:	e9 16 01 00 00       	jmp    c001df0b <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001ddf5:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001ddfc:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001de02:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001de06:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001de0d:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001de15:	85 c0                	test   eax,eax
c001de17:	74 36                	je     c001de4f <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001de19:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001de1c:	85 d2                	test   edx,edx
c001de1e:	74 2b                	je     c001de4b <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001de20:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001de26:	31 f9                	xor    ecx,edi
c001de28:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001de2e:	75 1b                	jne    c001de4b <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001de30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001de34:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001de3a:	75 0f                	jne    c001de4b <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001de3c:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001de43:	39 f2                	cmp    edx,esi
c001de45:	0f 84 20 01 00 00    	je     c001df6b <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001de4b:	8b 00                	mov    eax,DWORD PTR [eax]
c001de4d:	eb c6                	jmp    c001de15 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001de4f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001de53:	be 98 5a 02 c0       	mov    esi,0xc0025a98
c001de58:	b9 07 00 00 00       	mov    ecx,0x7
c001de5d:	fc                   	cld    
c001de5e:	31 d2                	xor    edx,edx
c001de60:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001de62:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001de69:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001de6d:	b9 12 00 00 00       	mov    ecx,0x12
c001de72:	83 ec 0c             	sub    esp,0xc
c001de75:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001de77:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001de7f:	b9 0a 00 00 00       	mov    ecx,0xa
c001de84:	f7 f1                	div    ecx
c001de86:	83 c0 30             	add    eax,0x30
c001de89:	83 c2 30             	add    edx,0x30
c001de8c:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001de90:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001de94:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001de9c:	31 d2                	xor    edx,edx
c001de9e:	f7 f1                	div    ecx
c001dea0:	83 c0 30             	add    eax,0x30
c001dea3:	83 c2 30             	add    edx,0x30
c001dea6:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001deaa:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001deae:	8d 44 24 28          	lea    eax,[esp+0x28]
c001deb2:	50                   	push   eax
c001deb3:	e8 db f3 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001deb8:	83 c4 10             	add    esp,0x10
c001debb:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001dec1:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001dec8:	75 46                	jne    c001df10 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001deca:	83 ec 0c             	sub    esp,0xc
c001decd:	68 64 01 00 00       	push   0x164
c001ded2:	e8 f4 1d ff ff       	call   c000fccb <malloc>
c001ded7:	89 c3                	mov    ebx,eax
c001ded9:	89 04 24             	mov    DWORD PTR [esp],eax
c001dedc:	e8 3b 11 00 00       	call   c001f01c <SATABus::SATABus()>
c001dee1:	58                   	pop    eax
c001dee2:	5a                   	pop    edx
c001dee3:	53                   	push   ebx
c001dee4:	55                   	push   ebp
c001dee5:	e8 12 bb fe ff       	call   c00099fc <Device::addChild(Device*)>
c001deea:	83 ec 1c             	sub    esp,0x1c
c001deed:	b9 09 00 00 00       	mov    ecx,0x9
c001def2:	89 e7                	mov    edi,esp
c001def4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001def6:	53                   	push   ebx
c001def7:	e8 46 ba fe ff       	call   c0009942 <Device::preOpenPCI(PCIDeviceInfo)>
c001defc:	83 c4 30             	add    esp,0x30
c001deff:	8b 03                	mov    eax,DWORD PTR [ebx]
c001df01:	6a 00                	push   0x0
c001df03:	6a 00                	push   0x0
c001df05:	6a 00                	push   0x0
c001df07:	53                   	push   ebx
c001df08:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001df0b:	83 c4 10             	add    esp,0x10
c001df0e:	eb 5b                	jmp    c001df6b <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001df10:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001df16:	75 19                	jne    c001df31 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001df18:	83 ec 0c             	sub    esp,0xc
c001df1b:	68 70 02 00 00       	push   0x270
c001df20:	e8 a6 1d ff ff       	call   c000fccb <malloc>
c001df25:	89 c3                	mov    ebx,eax
c001df27:	89 04 24             	mov    DWORD PTR [esp],eax
c001df2a:	e8 93 02 00 00       	call   c001e1c2 <IDE::IDE()>
c001df2f:	eb b0                	jmp    c001dee1 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001df31:	83 ec 0c             	sub    esp,0xc
c001df34:	68 58 01 00 00       	push   0x158
c001df39:	e8 8d 1d ff ff       	call   c000fccb <malloc>
c001df3e:	89 c3                	mov    ebx,eax
c001df40:	58                   	pop    eax
c001df41:	5a                   	pop    edx
c001df42:	68 7e 5a 02 c0       	push   0xc0025a7e
c001df47:	53                   	push   ebx
c001df48:	e8 63 bd fe ff       	call   c0009cb0 <DriverlessDevice::DriverlessDevice(char const*)>
c001df4d:	59                   	pop    ecx
c001df4e:	5f                   	pop    edi
c001df4f:	53                   	push   ebx
c001df50:	55                   	push   ebp
c001df51:	e8 a6 ba fe ff       	call   c00099fc <Device::addChild(Device*)>
c001df56:	83 ec 1c             	sub    esp,0x1c
c001df59:	b9 09 00 00 00       	mov    ecx,0x9
c001df5e:	89 e7                	mov    edi,esp
c001df60:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001df62:	53                   	push   ebx
c001df63:	e8 da b9 fe ff       	call   c0009942 <Device::preOpenPCI(PCIDeviceInfo)>
c001df68:	83 c4 30             	add    esp,0x30
c001df6b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001df71:	5b                   	pop    ebx
c001df72:	5e                   	pop    esi
c001df73:	5f                   	pop    edi
c001df74:	5d                   	pop    ebp
c001df75:	c3                   	ret    

c001df76 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001df76:	55                   	push   ebp
c001df77:	57                   	push   edi
c001df78:	56                   	push   esi
c001df79:	53                   	push   ebx
c001df7a:	83 ec 68             	sub    esp,0x68
c001df7d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001df81:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001df88:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001df8c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001df93:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001df98:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001df9c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001dfa3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001dfa8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dfac:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001dfb1:	6a 0c                	push   0xc
c001dfb3:	57                   	push   edi
c001dfb4:	53                   	push   ebx
c001dfb5:	56                   	push   esi
c001dfb6:	55                   	push   ebp
c001dfb7:	e8 c6 f7 ff ff       	call   c001d782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfbc:	83 c4 20             	add    esp,0x20
c001dfbf:	57                   	push   edi
c001dfc0:	53                   	push   ebx
c001dfc1:	56                   	push   esi
c001dfc2:	55                   	push   ebp
c001dfc3:	e8 b0 f8 ff ff       	call   c001d878 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001dfc8:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001dfcd:	57                   	push   edi
c001dfce:	53                   	push   ebx
c001dfcf:	56                   	push   esi
c001dfd0:	55                   	push   ebp
c001dfd1:	e8 38 f9 ff ff       	call   c001d90e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001dfd6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001dfda:	83 c4 14             	add    esp,0x14
c001dfdd:	6a 3c                	push   0x3c
c001dfdf:	57                   	push   edi
c001dfe0:	53                   	push   ebx
c001dfe1:	56                   	push   esi
c001dfe2:	55                   	push   ebp
c001dfe3:	e8 9a f7 ff ff       	call   c001d782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfe8:	0f b6 c4             	movzx  eax,ah
c001dfeb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dfef:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001dff3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001dff7:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001dffc:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001e002:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001e008:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e00c:	83 c4 20             	add    esp,0x20
c001e00f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001e014:	74 30                	je     c001e046 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e016:	31 c0                	xor    eax,eax
c001e018:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e01c:	7e 28                	jle    c001e046 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001e01e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001e026:	39 cb                	cmp    ebx,ecx
c001e028:	75 19                	jne    c001e043 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e02a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001e032:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001e036:	75 0b                	jne    c001e043 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001e038:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001e03f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001e043:	40                   	inc    eax
c001e044:	eb d2                	jmp    c001e018 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001e046:	31 d2                	xor    edx,edx
c001e048:	83 ec 0c             	sub    esp,0xc
c001e04b:	57                   	push   edi
c001e04c:	53                   	push   ebx
c001e04d:	56                   	push   esi
c001e04e:	52                   	push   edx
c001e04f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e053:	55                   	push   ebp
c001e054:	e8 01 f9 ff ff       	call   c001d95a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e059:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e05d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001e061:	42                   	inc    edx
c001e062:	83 c4 20             	add    esp,0x20
c001e065:	83 fa 06             	cmp    edx,0x6
c001e068:	75 de                	jne    c001e048 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001e06a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e06e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e072:	c1 e2 08             	shl    edx,0x8
c001e075:	83 ec 0c             	sub    esp,0xc
c001e078:	0f b6 c4             	movzx  eax,ah
c001e07b:	09 d0                	or     eax,edx
c001e07d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001e082:	6a 02                	push   0x2
c001e084:	57                   	push   edi
c001e085:	53                   	push   ebx
c001e086:	56                   	push   esi
c001e087:	55                   	push   ebp
c001e088:	e8 f5 f6 ff ff       	call   c001d782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e08d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001e092:	83 c4 20             	add    esp,0x20
c001e095:	57                   	push   edi
c001e096:	53                   	push   ebx
c001e097:	56                   	push   esi
c001e098:	55                   	push   ebp
c001e099:	e8 24 f8 ff ff       	call   c001d8c2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e09e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e0a2:	57                   	push   edi
c001e0a3:	53                   	push   ebx
c001e0a4:	56                   	push   esi
c001e0a5:	55                   	push   ebp
c001e0a6:	e8 81 f7 ff ff       	call   c001d82c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e0ab:	b9 09 00 00 00       	mov    ecx,0x9
c001e0b0:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001e0b5:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001e0b9:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e0bd:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e0c1:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001e0c5:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e0c9:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001e0cd:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e0d1:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001e0d5:	83 ec 0c             	sub    esp,0xc
c001e0d8:	fc                   	cld    
c001e0d9:	89 e7                	mov    edi,esp
c001e0db:	8d 74 24 58          	lea    esi,[esp+0x58]
c001e0df:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e0e1:	55                   	push   ebp
c001e0e2:	e8 a9 fc ff ff       	call   c001dd90 <PCI::foundDevice(PCIDeviceInfo)>
c001e0e7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001e0ed:	5b                   	pop    ebx
c001e0ee:	5e                   	pop    esi
c001e0ef:	5f                   	pop    edi
c001e0f0:	5d                   	pop    ebp
c001e0f1:	c3                   	ret    

c001e0f2 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e0f2:	55                   	push   ebp
c001e0f3:	57                   	push   edi
c001e0f4:	56                   	push   esi
c001e0f5:	53                   	push   ebx
c001e0f6:	83 ec 0c             	sub    esp,0xc
c001e0f9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e0fd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e102:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e107:	6a 00                	push   0x0
c001e109:	56                   	push   esi
c001e10a:	57                   	push   edi
c001e10b:	55                   	push   ebp
c001e10c:	e8 1b f7 ff ff       	call   c001d82c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e111:	6a 00                	push   0x0
c001e113:	56                   	push   esi
c001e114:	57                   	push   edi
c001e115:	55                   	push   ebp
c001e116:	e8 5b fe ff ff       	call   c001df76 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e11b:	83 c4 20             	add    esp,0x20
c001e11e:	6a 00                	push   0x0
c001e120:	56                   	push   esi
c001e121:	57                   	push   edi
c001e122:	55                   	push   ebp
c001e123:	e8 28 f7 ff ff       	call   c001d850 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e128:	83 c4 10             	add    esp,0x10
c001e12b:	a8 80                	test   al,0x80
c001e12d:	74 2d                	je     c001e15c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001e12f:	bb 01 00 00 00       	mov    ebx,0x1
c001e134:	53                   	push   ebx
c001e135:	56                   	push   esi
c001e136:	57                   	push   edi
c001e137:	55                   	push   ebp
c001e138:	e8 ef f6 ff ff       	call   c001d82c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e13d:	83 c4 10             	add    esp,0x10
c001e140:	0f b7 c0             	movzx  eax,ax
c001e143:	3d ff ff 00 00       	cmp    eax,0xffff
c001e148:	74 0c                	je     c001e156 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e14a:	53                   	push   ebx
c001e14b:	56                   	push   esi
c001e14c:	57                   	push   edi
c001e14d:	55                   	push   ebp
c001e14e:	e8 23 fe ff ff       	call   c001df76 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e153:	83 c4 10             	add    esp,0x10
c001e156:	43                   	inc    ebx
c001e157:	83 fb 08             	cmp    ebx,0x8
c001e15a:	75 d8                	jne    c001e134 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e15c:	83 c4 0c             	add    esp,0xc
c001e15f:	5b                   	pop    ebx
c001e160:	5e                   	pop    esi
c001e161:	5f                   	pop    edi
c001e162:	5d                   	pop    ebp
c001e163:	c3                   	ret    

c001e164 <PCI::detect()>:
c001e164:	56                   	push   esi
c001e165:	53                   	push   ebx
c001e166:	53                   	push   ebx
c001e167:	31 db                	xor    ebx,ebx
c001e169:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e16d:	6a 00                	push   0x0
c001e16f:	6a 00                	push   0x0
c001e171:	6a 00                	push   0x0
c001e173:	56                   	push   esi
c001e174:	e8 d7 f6 ff ff       	call   c001d850 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e179:	83 c4 10             	add    esp,0x10
c001e17c:	a8 80                	test   al,0x80
c001e17e:	75 21                	jne    c001e1a1 <PCI::detect()+0x3d>
c001e180:	51                   	push   ecx
c001e181:	51                   	push   ecx
c001e182:	6a 00                	push   0x0
c001e184:	56                   	push   esi
c001e185:	e8 e2 fb ff ff       	call   c001dd6c <PCI::checkBus(unsigned char)>
c001e18a:	83 c4 10             	add    esp,0x10
c001e18d:	eb 2a                	jmp    c001e1b9 <PCI::detect()+0x55>
c001e18f:	52                   	push   edx
c001e190:	52                   	push   edx
c001e191:	53                   	push   ebx
c001e192:	43                   	inc    ebx
c001e193:	56                   	push   esi
c001e194:	e8 d3 fb ff ff       	call   c001dd6c <PCI::checkBus(unsigned char)>
c001e199:	83 c4 10             	add    esp,0x10
c001e19c:	83 fb 08             	cmp    ebx,0x8
c001e19f:	74 18                	je     c001e1b9 <PCI::detect()+0x55>
c001e1a1:	53                   	push   ebx
c001e1a2:	6a 00                	push   0x0
c001e1a4:	6a 00                	push   0x0
c001e1a6:	56                   	push   esi
c001e1a7:	e8 80 f6 ff ff       	call   c001d82c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e1ac:	83 c4 10             	add    esp,0x10
c001e1af:	0f b7 c0             	movzx  eax,ax
c001e1b2:	3d ff ff 00 00       	cmp    eax,0xffff
c001e1b7:	74 d6                	je     c001e18f <PCI::detect()+0x2b>
c001e1b9:	58                   	pop    eax
c001e1ba:	5b                   	pop    ebx
c001e1bb:	5e                   	pop    esi
c001e1bc:	c3                   	ret    
c001e1bd:	90                   	nop

c001e1be <IDE::close(int, int, void*)>:
c001e1be:	83 c8 ff             	or     eax,0xffffffff
c001e1c1:	c3                   	ret    

c001e1c2 <IDE::IDE()>:
c001e1c2:	83 ec 0c             	sub    esp,0xc
c001e1c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1c9:	83 ec 08             	sub    esp,0x8
c001e1cc:	68 28 5b 02 c0       	push   0xc0025b28
c001e1d1:	50                   	push   eax
c001e1d2:	e8 7d bb fe ff       	call   c0009d54 <HardDiskController::HardDiskController(char const*)>
c001e1d7:	83 c4 10             	add    esp,0x10
c001e1da:	ba 54 5c 02 c0       	mov    edx,0xc0025c54
c001e1df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e3:	89 10                	mov    DWORD PTR [eax],edx
c001e1e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e1f0:	90                   	nop
c001e1f1:	83 c4 0c             	add    esp,0xc
c001e1f4:	c3                   	ret    
c001e1f5:	90                   	nop

c001e1f6 <IDE::prepareInterrupt(unsigned char)>:
c001e1f6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e1fb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e1ff:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e207:	c3                   	ret    

c001e208 <selectDrive(unsigned char, unsigned char)>:
c001e208:	c3                   	ret    
c001e209:	90                   	nop

c001e20a <IDE::getBase(unsigned char)>:
c001e20a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e20f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e213:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e21b:	c3                   	ret    

c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e21c:	55                   	push   ebp
c001e21d:	57                   	push   edi
c001e21e:	56                   	push   esi
c001e21f:	53                   	push   ebx
c001e220:	83 ec 1c             	sub    esp,0x1c
c001e223:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e227:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e22b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e22e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e232:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e236:	80 f9 03             	cmp    cl,0x3
c001e239:	77 4f                	ja     c001e28a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001e23b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e23f:	0f b6 fa             	movzx  edi,dl
c001e242:	0f b6 db             	movzx  ebx,bl
c001e245:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001e248:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001e24d:	80 ca 80             	or     dl,0x80
c001e250:	52                   	push   edx
c001e251:	6a 0c                	push   0xc
c001e253:	57                   	push   edi
c001e254:	56                   	push   esi
c001e255:	e8 c2 ff ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e25a:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001e25f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e263:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e267:	ee                   	out    dx,al
c001e268:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e26d:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001e271:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e275:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e279:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e281:	83 c4 2c             	add    esp,0x2c
c001e284:	5b                   	pop    ebx
c001e285:	5e                   	pop    esi
c001e286:	5f                   	pop    edi
c001e287:	5d                   	pop    ebp
c001e288:	eb 92                	jmp    c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e28a:	0f b6 cb             	movzx  ecx,bl
c001e28d:	83 f9 07             	cmp    ecx,0x7
c001e290:	77 12                	ja     c001e2a4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001e292:	0f b6 d2             	movzx  edx,dl
c001e295:	0f b6 db             	movzx  ebx,bl
c001e298:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001e2a0:	01 da                	add    edx,ebx
c001e2a2:	eb 2f                	jmp    c001e2d3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e2a4:	83 f9 0d             	cmp    ecx,0xd
c001e2a7:	77 13                	ja     c001e2bc <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001e2a9:	0f b6 d2             	movzx  edx,dl
c001e2ac:	0f b6 db             	movzx  ebx,bl
c001e2af:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001e2b6:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e2ba:	eb 17                	jmp    c001e2d3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e2bc:	83 f9 15             	cmp    ecx,0x15
c001e2bf:	77 13                	ja     c001e2d4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001e2c1:	0f b6 d2             	movzx  edx,dl
c001e2c4:	0f b6 db             	movzx  ebx,bl
c001e2c7:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001e2cf:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e2d3:	ee                   	out    dx,al
c001e2d4:	83 c4 1c             	add    esp,0x1c
c001e2d7:	5b                   	pop    ebx
c001e2d8:	5e                   	pop    esi
c001e2d9:	5f                   	pop    edi
c001e2da:	5d                   	pop    ebp
c001e2db:	c3                   	ret    

c001e2dc <IDE::read(unsigned char, unsigned char)>:
c001e2dc:	55                   	push   ebp
c001e2dd:	57                   	push   edi
c001e2de:	56                   	push   esi
c001e2df:	53                   	push   ebx
c001e2e0:	83 ec 1c             	sub    esp,0x1c
c001e2e3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e2e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e2eb:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e2ee:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e2f2:	3c 03                	cmp    al,0x3
c001e2f4:	77 40                	ja     c001e336 <IDE::read(unsigned char, unsigned char)+0x5a>
c001e2f6:	0f b6 f9             	movzx  edi,cl
c001e2f9:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001e2fc:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e301:	0c 80                	or     al,0x80
c001e303:	50                   	push   eax
c001e304:	6a 0c                	push   0xc
c001e306:	57                   	push   edi
c001e307:	56                   	push   esi
c001e308:	e8 0f ff ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e30d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001e312:	0f b6 d3             	movzx  edx,bl
c001e315:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e319:	ec                   	in     al,dx
c001e31a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e31e:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001e323:	52                   	push   edx
c001e324:	6a 0c                	push   0xc
c001e326:	57                   	push   edi
c001e327:	56                   	push   esi
c001e328:	e8 ef fe ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e32d:	83 c4 20             	add    esp,0x20
c001e330:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e334:	eb 4c                	jmp    c001e382 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e336:	0f b6 d3             	movzx  edx,bl
c001e339:	83 fa 07             	cmp    edx,0x7
c001e33c:	77 12                	ja     c001e350 <IDE::read(unsigned char, unsigned char)+0x74>
c001e33e:	0f b6 c9             	movzx  ecx,cl
c001e341:	0f b6 d3             	movzx  edx,bl
c001e344:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001e34c:	01 c2                	add    edx,eax
c001e34e:	eb 31                	jmp    c001e381 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e350:	83 fa 0d             	cmp    edx,0xd
c001e353:	77 13                	ja     c001e368 <IDE::read(unsigned char, unsigned char)+0x8c>
c001e355:	0f b6 c9             	movzx  ecx,cl
c001e358:	0f b6 d3             	movzx  edx,bl
c001e35b:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001e362:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e366:	eb 19                	jmp    c001e381 <IDE::read(unsigned char, unsigned char)+0xa5>
c001e368:	31 c0                	xor    eax,eax
c001e36a:	83 fa 15             	cmp    edx,0x15
c001e36d:	77 13                	ja     c001e382 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e36f:	0f b6 c9             	movzx  ecx,cl
c001e372:	0f b6 d3             	movzx  edx,bl
c001e375:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001e37d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e381:	ec                   	in     al,dx
c001e382:	83 c4 1c             	add    esp,0x1c
c001e385:	5b                   	pop    ebx
c001e386:	5e                   	pop    esi
c001e387:	5f                   	pop    edi
c001e388:	5d                   	pop    ebp
c001e389:	c3                   	ret    

c001e38a <IDE::waitInterrupt(unsigned char)>:
c001e38a:	55                   	push   ebp
c001e38b:	57                   	push   edi
c001e38c:	56                   	push   esi
c001e38d:	53                   	push   ebx
c001e38e:	31 db                	xor    ebx,ebx
c001e390:	83 ec 0c             	sub    esp,0xc
c001e393:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e397:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e39c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e3a4:	89 e8                	mov    eax,ebp
c001e3a6:	84 c0                	test   al,al
c001e3a8:	75 31                	jne    c001e3db <IDE::waitInterrupt(unsigned char)+0x51>
c001e3aa:	52                   	push   edx
c001e3ab:	6a 0c                	push   0xc
c001e3ad:	56                   	push   esi
c001e3ae:	57                   	push   edi
c001e3af:	e8 28 ff ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001e3b4:	83 c4 10             	add    esp,0x10
c001e3b7:	a8 01                	test   al,0x1
c001e3b9:	75 28                	jne    c001e3e3 <IDE::waitInterrupt(unsigned char)+0x59>
c001e3bb:	f6 c3 04             	test   bl,0x4
c001e3be:	75 13                	jne    c001e3d3 <IDE::waitInterrupt(unsigned char)+0x49>
c001e3c0:	83 fb 32             	cmp    ebx,0x32
c001e3c3:	7e 0e                	jle    c001e3d3 <IDE::waitInterrupt(unsigned char)+0x49>
c001e3c5:	50                   	push   eax
c001e3c6:	50                   	push   eax
c001e3c7:	6a 00                	push   0x0
c001e3c9:	6a 64                	push   0x64
c001e3cb:	e8 ac 8d ff ff       	call   c001717c <milliTenthSleep(unsigned long long)>
c001e3d0:	83 c4 10             	add    esp,0x10
c001e3d3:	83 fb 3c             	cmp    ebx,0x3c
c001e3d6:	74 0b                	je     c001e3e3 <IDE::waitInterrupt(unsigned char)+0x59>
c001e3d8:	43                   	inc    ebx
c001e3d9:	eb c1                	jmp    c001e39c <IDE::waitInterrupt(unsigned char)+0x12>
c001e3db:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e3e3:	83 c4 0c             	add    esp,0xc
c001e3e6:	89 e8                	mov    eax,ebp
c001e3e8:	5b                   	pop    ebx
c001e3e9:	5e                   	pop    esi
c001e3ea:	5f                   	pop    edi
c001e3eb:	5d                   	pop    ebp
c001e3ec:	c3                   	ret    

c001e3ed <ideChannel0IRQHandler(regs*, void*)>:
c001e3ed:	83 ec 10             	sub    esp,0x10
c001e3f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e3f4:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e3fb:	6a 07                	push   0x7
c001e3fd:	6a 00                	push   0x0
c001e3ff:	50                   	push   eax
c001e400:	e8 d7 fe ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001e405:	83 c4 1c             	add    esp,0x1c
c001e408:	c3                   	ret    

c001e409 <ideChannel1IRQHandler(regs*, void*)>:
c001e409:	83 ec 10             	sub    esp,0x10
c001e40c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e410:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e417:	6a 07                	push   0x7
c001e419:	6a 01                	push   0x1
c001e41b:	50                   	push   eax
c001e41c:	e8 bb fe ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001e421:	83 c4 1c             	add    esp,0x1c
c001e424:	c3                   	ret    
c001e425:	90                   	nop

c001e426 <IDE::enableIRQs(unsigned char, bool)>:
c001e426:	57                   	push   edi
c001e427:	b8 02 00 00 00       	mov    eax,0x2
c001e42c:	56                   	push   esi
c001e42d:	53                   	push   ebx
c001e42e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e432:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e436:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e43b:	74 02                	je     c001e43f <IDE::enableIRQs(unsigned char, bool)+0x19>
c001e43d:	31 c0                	xor    eax,eax
c001e43f:	0f b6 db             	movzx  ebx,bl
c001e442:	bf 04 00 00 00       	mov    edi,0x4
c001e447:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001e44e:	50                   	push   eax
c001e44f:	6a 0c                	push   0xc
c001e451:	53                   	push   ebx
c001e452:	56                   	push   esi
c001e453:	e8 c4 fd ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e458:	83 c4 10             	add    esp,0x10
c001e45b:	50                   	push   eax
c001e45c:	6a 0c                	push   0xc
c001e45e:	53                   	push   ebx
c001e45f:	56                   	push   esi
c001e460:	e8 77 fe ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001e465:	83 c4 10             	add    esp,0x10
c001e468:	4f                   	dec    edi
c001e469:	75 f0                	jne    c001e45b <IDE::enableIRQs(unsigned char, bool)+0x35>
c001e46b:	5b                   	pop    ebx
c001e46c:	5e                   	pop    esi
c001e46d:	5f                   	pop    edi
c001e46e:	c3                   	ret    
c001e46f:	90                   	nop

c001e470 <IDE::open(int, int, void*)>:
c001e470:	57                   	push   edi
c001e471:	56                   	push   esi
c001e472:	53                   	push   ebx
c001e473:	83 ec 10             	sub    esp,0x10
c001e476:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e47a:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e483:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e48c:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e493:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e49a:	0f 85 84 02 00 00    	jne    c001e724 <IDE::open(int, int, void*)+0x2b4>
c001e4a0:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e4a6:	a8 70                	test   al,0x70
c001e4a8:	75 44                	jne    c001e4ee <IDE::open(int, int, void*)+0x7e>
c001e4aa:	ba 20 84 00 00       	mov    edx,0x8420
c001e4af:	0f a3 c2             	bt     edx,eax
c001e4b2:	73 3a                	jae    c001e4ee <IDE::open(int, int, void*)+0x7e>
c001e4b4:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e4ba:	83 ec 0c             	sub    esp,0xc
c001e4bd:	83 e0 fc             	and    eax,0xfffffffc
c001e4c0:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e4c7:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e4cd:	83 e0 fc             	and    eax,0xfffffffc
c001e4d0:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e4d7:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e4dd:	83 e0 fc             	and    eax,0xfffffffc
c001e4e0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e4e7:	68 95 31 02 c0       	push   0xc0023195
c001e4ec:	eb 60                	jmp    c001e54e <IDE::open(int, int, void*)+0xde>
c001e4ee:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e4f8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e502:	be 64 00 00 00       	mov    esi,0x64
c001e507:	57                   	push   edi
c001e508:	57                   	push   edi
c001e509:	68 40 5b 02 c0       	push   0xc0025b40
c001e50e:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001e512:	57                   	push   edi
c001e513:	e8 28 21 fe ff       	call   c0000640 <strcpy>
c001e518:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001e51f:	31 d2                	xor    edx,edx
c001e521:	89 c8                	mov    eax,ecx
c001e523:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e526:	f7 f6                	div    esi
c001e528:	be 0a 00 00 00       	mov    esi,0xa
c001e52d:	83 c0 30             	add    eax,0x30
c001e530:	31 d2                	xor    edx,edx
c001e532:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e536:	89 c8                	mov    eax,ecx
c001e538:	f7 f6                	div    esi
c001e53a:	89 d1                	mov    ecx,edx
c001e53c:	31 d2                	xor    edx,edx
c001e53e:	83 c1 30             	add    ecx,0x30
c001e541:	f7 f6                	div    esi
c001e543:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001e547:	83 c2 30             	add    edx,0x30
c001e54a:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001e54e:	e8 40 ed fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001e553:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e558:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e55f:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e566:	c1 e1 10             	shl    ecx,0x10
c001e569:	c1 e0 0b             	shl    eax,0xb
c001e56c:	83 c4 10             	add    esp,0x10
c001e56f:	09 c1                	or     ecx,eax
c001e571:	89 fa                	mov    edx,edi
c001e573:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e57a:	c1 e0 08             	shl    eax,0x8
c001e57d:	09 c1                	or     ecx,eax
c001e57f:	89 c8                	mov    eax,ecx
c001e581:	0d 08 00 00 80       	or     eax,0x80000008
c001e586:	ef                   	out    dx,eax
c001e587:	be fc 0c 00 00       	mov    esi,0xcfc
c001e58c:	89 f2                	mov    edx,esi
c001e58e:	ed                   	in     eax,dx
c001e58f:	c1 e8 10             	shr    eax,0x10
c001e592:	3d ff ff 00 00       	cmp    eax,0xffff
c001e597:	0f 84 e5 00 00 00    	je     c001e682 <IDE::open(int, int, void*)+0x212>
c001e59d:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e5a3:	89 fa                	mov    edx,edi
c001e5a5:	89 c8                	mov    eax,ecx
c001e5a7:	ef                   	out    dx,eax
c001e5a8:	b0 fe                	mov    al,0xfe
c001e5aa:	89 f2                	mov    edx,esi
c001e5ac:	ee                   	out    dx,al
c001e5ad:	89 c8                	mov    eax,ecx
c001e5af:	89 fa                	mov    edx,edi
c001e5b1:	ef                   	out    dx,eax
c001e5b2:	89 f2                	mov    edx,esi
c001e5b4:	ed                   	in     eax,dx
c001e5b5:	3c fe                	cmp    al,0xfe
c001e5b7:	0f 85 85 00 00 00    	jne    c001e642 <IDE::open(int, int, void*)+0x1d2>
c001e5bd:	83 ec 0c             	sub    esp,0xc
c001e5c0:	68 cb 31 02 c0       	push   0xc00231cb
c001e5c5:	e8 c9 ec fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001e5ca:	c7 04 24 46 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b46
c001e5d1:	e8 8e 89 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e5d6:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e5e0:	c7 04 24 a8 34 02 c0 	mov    DWORD PTR [esp],0xc00234a8
c001e5e7:	e8 a7 ec fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001e5ec:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e5f3:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e5fa:	c1 e1 10             	shl    ecx,0x10
c001e5fd:	c1 e0 08             	shl    eax,0x8
c001e600:	89 fa                	mov    edx,edi
c001e602:	09 c1                	or     ecx,eax
c001e604:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e60b:	c1 e0 0b             	shl    eax,0xb
c001e60e:	09 c1                	or     ecx,eax
c001e610:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e616:	89 c8                	mov    eax,ecx
c001e618:	ef                   	out    dx,eax
c001e619:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e61f:	89 f2                	mov    edx,esi
c001e621:	ee                   	out    dx,al
c001e622:	89 c8                	mov    eax,ecx
c001e624:	89 fa                	mov    edx,edi
c001e626:	ef                   	out    dx,eax
c001e627:	89 f2                	mov    edx,esi
c001e629:	ed                   	in     eax,dx
c001e62a:	0f b6 c0             	movzx  eax,al
c001e62d:	83 c4 10             	add    esp,0x10
c001e630:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e636:	74 5a                	je     c001e692 <IDE::open(int, int, void*)+0x222>
c001e638:	83 ec 0c             	sub    esp,0xc
c001e63b:	68 5b 5b 02 c0       	push   0xc0025b5b
c001e640:	eb 48                	jmp    c001e68a <IDE::open(int, int, void*)+0x21a>
c001e642:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e64b:	75 2b                	jne    c001e678 <IDE::open(int, int, void*)+0x208>
c001e64d:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001e654:	3d 80 00 00 00       	cmp    eax,0x80
c001e659:	74 07                	je     c001e662 <IDE::open(int, int, void*)+0x1f2>
c001e65b:	3d 8a 00 00 00       	cmp    eax,0x8a
c001e660:	75 16                	jne    c001e678 <IDE::open(int, int, void*)+0x208>
c001e662:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e669:	83 ec 0c             	sub    esp,0xc
c001e66c:	68 be 2c 02 c0       	push   0xc0022cbe
c001e671:	e8 1d ec fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001e676:	eb 17                	jmp    c001e68f <IDE::open(int, int, void*)+0x21f>
c001e678:	83 ec 0c             	sub    esp,0xc
c001e67b:	68 63 5b 02 c0       	push   0xc0025b63
c001e680:	eb 08                	jmp    c001e68a <IDE::open(int, int, void*)+0x21a>
c001e682:	83 ec 0c             	sub    esp,0xc
c001e685:	68 94 5b 02 c0       	push   0xc0025b94
c001e68a:	e8 83 19 ff ff       	call   c0010012 <KePanic(char const*)>
c001e68f:	83 c4 10             	add    esp,0x10
c001e692:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001e699:	0f 84 bf 00 00 00    	je     c001e75e <IDE::open(int, int, void*)+0x2ee>
c001e69f:	83 ec 0c             	sub    esp,0xc
c001e6a2:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e6a8:	83 e0 fc             	and    eax,0xfffffffc
c001e6ab:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e6b2:	83 c0 08             	add    eax,0x8
c001e6b5:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e6bc:	68 be 5b 02 c0       	push   0xc0025bbe
c001e6c1:	e8 9e 88 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e6c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e6cd:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e6d4:	50                   	push   eax
c001e6d5:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e6dc:	50                   	push   eax
c001e6dd:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e6e4:	50                   	push   eax
c001e6e5:	ff 35 40 f4 02 c0    	push   DWORD PTR ds:0xc002f440
c001e6eb:	e8 92 f0 ff ff       	call   c001d782 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e6f0:	83 c4 18             	add    esp,0x18
c001e6f3:	83 c8 07             	or     eax,0x7
c001e6f6:	0f b7 c0             	movzx  eax,ax
c001e6f9:	50                   	push   eax
c001e6fa:	6a 04                	push   0x4
c001e6fc:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e703:	50                   	push   eax
c001e704:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e70b:	50                   	push   eax
c001e70c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e713:	50                   	push   eax
c001e714:	ff 35 40 f4 02 c0    	push   DWORD PTR ds:0xc002f440
c001e71a:	e8 9f f2 ff ff       	call   c001d9be <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001e71f:	83 c4 20             	add    esp,0x20
c001e722:	eb 3a                	jmp    c001e75e <IDE::open(int, int, void*)+0x2ee>
c001e724:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e72a:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e731:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e738:	05 06 02 00 00       	add    eax,0x206
c001e73d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e744:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e74b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e752:	05 06 02 00 00       	add    eax,0x206
c001e757:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e75e:	83 ec 0c             	sub    esp,0xc
c001e761:	68 4b 3a 02 c0       	push   0xc0023a4b
c001e766:	e8 28 eb fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001e76b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e771:	83 c4 10             	add    esp,0x10
c001e774:	89 c2                	mov    edx,eax
c001e776:	83 e2 0f             	and    edx,0xf
c001e779:	83 fa 08             	cmp    edx,0x8
c001e77c:	75 0a                	jne    c001e788 <IDE::open(int, int, void*)+0x318>
c001e77e:	83 e8 02             	sub    eax,0x2
c001e781:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e788:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e78e:	89 c2                	mov    edx,eax
c001e790:	83 e2 0f             	and    edx,0xf
c001e793:	83 fa 08             	cmp    edx,0x8
c001e796:	75 0a                	jne    c001e7a2 <IDE::open(int, int, void*)+0x332>
c001e798:	83 e8 02             	sub    eax,0x2
c001e79b:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e7a2:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e7a9:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e7b0:	89 d0                	mov    eax,edx
c001e7b2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e7b5:	8d 7a 01             	lea    edi,[edx+0x1]
c001e7b8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e7bc:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e7c0:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001e7c4:	83 e1 3f             	and    ecx,0x3f
c001e7c7:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001e7cb:	89 f9                	mov    ecx,edi
c001e7cd:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e7d4:	0f b6 c9             	movzx  ecx,cl
c001e7d7:	8d 78 02             	lea    edi,[eax+0x2]
c001e7da:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e7dd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e7e1:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e7e5:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001e7e9:	83 e2 3f             	and    edx,0x3f
c001e7ec:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001e7f0:	89 f9                	mov    ecx,edi
c001e7f2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e7f8:	0f b6 d1             	movzx  edx,cl
c001e7fb:	8d 78 03             	lea    edi,[eax+0x3]
c001e7fe:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e801:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e805:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e809:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001e80d:	83 e1 3f             	and    ecx,0x3f
c001e810:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001e814:	89 fa                	mov    edx,edi
c001e816:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e81c:	0f b6 ca             	movzx  ecx,dl
c001e81f:	8d 78 04             	lea    edi,[eax+0x4]
c001e822:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e825:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e829:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e82d:	89 fa                	mov    edx,edi
c001e82f:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001e835:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001e839:	83 e2 3f             	and    edx,0x3f
c001e83c:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001e840:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e847:	66 85 f6             	test   si,si
c001e84a:	74 24                	je     c001e870 <IDE::open(int, int, void*)+0x400>
c001e84c:	89 f9                	mov    ecx,edi
c001e84e:	83 c0 05             	add    eax,0x5
c001e851:	0f b6 d1             	movzx  edx,cl
c001e854:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e857:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e85b:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e85f:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e865:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001e869:	83 e0 3f             	and    eax,0x3f
c001e86c:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001e870:	83 ec 0c             	sub    esp,0xc
c001e873:	68 d6 5b 02 c0       	push   0xc0025bd6
c001e878:	e8 16 ea fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001e87d:	58                   	pop    eax
c001e87e:	5a                   	pop    edx
c001e87f:	6a 00                	push   0x0
c001e881:	53                   	push   ebx
c001e882:	e8 6f f9 ff ff       	call   c001e1f6 <IDE::prepareInterrupt(unsigned char)>
c001e887:	59                   	pop    ecx
c001e888:	5e                   	pop    esi
c001e889:	6a 01                	push   0x1
c001e88b:	53                   	push   ebx
c001e88c:	e8 65 f9 ff ff       	call   c001e1f6 <IDE::prepareInterrupt(unsigned char)>
c001e891:	c7 04 24 25 54 02 c0 	mov    DWORD PTR [esp],0xc0025425
c001e898:	e8 f6 e9 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001e89d:	83 c4 0c             	add    esp,0xc
c001e8a0:	6a 00                	push   0x0
c001e8a2:	6a 00                	push   0x0
c001e8a4:	53                   	push   ebx
c001e8a5:	e8 7c fb ff ff       	call   c001e426 <IDE::enableIRQs(unsigned char, bool)>
c001e8aa:	83 c4 0c             	add    esp,0xc
c001e8ad:	6a 00                	push   0x0
c001e8af:	6a 01                	push   0x1
c001e8b1:	53                   	push   ebx
c001e8b2:	e8 6f fb ff ff       	call   c001e426 <IDE::enableIRQs(unsigned char, bool)>
c001e8b7:	c7 04 24 d8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bd8
c001e8be:	e8 d0 e9 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001e8c3:	83 c4 10             	add    esp,0x10
c001e8c6:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001e8cd:	74 3c                	je     c001e90b <IDE::open(int, int, void*)+0x49b>
c001e8cf:	83 ec 0c             	sub    esp,0xc
c001e8d2:	53                   	push   ebx
c001e8d3:	6a 01                	push   0x1
c001e8d5:	68 ed e3 01 c0       	push   0xc001e3ed
c001e8da:	6a 0e                	push   0xe
c001e8dc:	53                   	push   ebx
c001e8dd:	e8 c6 b0 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e8e2:	83 c4 14             	add    esp,0x14
c001e8e5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e8eb:	53                   	push   ebx
c001e8ec:	6a 01                	push   0x1
c001e8ee:	68 09 e4 01 c0       	push   0xc001e409
c001e8f3:	6a 0f                	push   0xf
c001e8f5:	53                   	push   ebx
c001e8f6:	e8 ad b0 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e8fb:	83 c4 14             	add    esp,0x14
c001e8fe:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001e904:	68 ae 36 02 c0       	push   0xc00236ae
c001e909:	eb 40                	jmp    c001e94b <IDE::open(int, int, void*)+0x4db>
c001e90b:	83 ec 0c             	sub    esp,0xc
c001e90e:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001e918:	53                   	push   ebx
c001e919:	6a 00                	push   0x0
c001e91b:	68 ed e3 01 c0       	push   0xc001e3ed
c001e920:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001e926:	53                   	push   ebx
c001e927:	e8 7c b0 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e92c:	83 c4 14             	add    esp,0x14
c001e92f:	53                   	push   ebx
c001e930:	6a 00                	push   0x0
c001e932:	68 09 e4 01 c0       	push   0xc001e409
c001e937:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001e93d:	53                   	push   ebx
c001e93e:	e8 65 b0 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e943:	83 c4 14             	add    esp,0x14
c001e946:	68 66 44 02 c0       	push   0xc0024466
c001e94b:	e8 43 e9 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001e950:	83 c4 10             	add    esp,0x10
c001e953:	83 ec 0c             	sub    esp,0xc
c001e956:	68 da 5b 02 c0       	push   0xc0025bda
c001e95b:	e8 33 e9 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001e960:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e962:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e965:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001e968:	c7 04 24 6d 4b 02 c0 	mov    DWORD PTR [esp],0xc0024b6d
c001e96f:	e8 1f e9 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001e974:	83 c4 0c             	add    esp,0xc
c001e977:	6a 07                	push   0x7
c001e979:	6a 00                	push   0x0
c001e97b:	53                   	push   ebx
c001e97c:	e8 5b f9 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001e981:	83 c4 0c             	add    esp,0xc
c001e984:	6a 07                	push   0x7
c001e986:	6a 01                	push   0x1
c001e988:	53                   	push   ebx
c001e989:	e8 4e f9 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001e98e:	c7 04 24 94 41 02 c0 	mov    DWORD PTR [esp],0xc0024194
c001e995:	e8 f9 e8 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001e99a:	83 c4 0c             	add    esp,0xc
c001e99d:	6a 01                	push   0x1
c001e99f:	6a 00                	push   0x0
c001e9a1:	53                   	push   ebx
c001e9a2:	e8 7f fa ff ff       	call   c001e426 <IDE::enableIRQs(unsigned char, bool)>
c001e9a7:	83 c4 0c             	add    esp,0xc
c001e9aa:	6a 01                	push   0x1
c001e9ac:	6a 01                	push   0x1
c001e9ae:	53                   	push   ebx
c001e9af:	e8 72 fa ff ff       	call   c001e426 <IDE::enableIRQs(unsigned char, bool)>
c001e9b4:	c7 04 24 dd 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bdd
c001e9bb:	e8 d3 e8 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001e9c0:	83 c4 20             	add    esp,0x20
c001e9c3:	31 c0                	xor    eax,eax
c001e9c5:	5b                   	pop    ebx
c001e9c6:	5e                   	pop    esi
c001e9c7:	5f                   	pop    edi
c001e9c8:	c3                   	ret    
c001e9c9:	90                   	nop

c001e9ca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001e9ca:	55                   	push   ebp
c001e9cb:	57                   	push   edi
c001e9cc:	56                   	push   esi
c001e9cd:	53                   	push   ebx
c001e9ce:	83 ec 1c             	sub    esp,0x1c
c001e9d1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e9d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e9d9:	8d 42 f8             	lea    eax,[edx-0x8]
c001e9dc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e9e0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001e9e4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e9e8:	3c 03                	cmp    al,0x3
c001e9ea:	77 5a                	ja     c001ea46 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001e9ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e9f0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e9f4:	0f b6 db             	movzx  ebx,bl
c001e9f7:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001e9fa:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e9ff:	0c 80                	or     al,0x80
c001ea01:	50                   	push   eax
c001ea02:	6a 0c                	push   0xc
c001ea04:	53                   	push   ebx
c001ea05:	56                   	push   esi
c001ea06:	e8 11 f8 ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea0b:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ea10:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ea14:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ea18:	0f b6 d2             	movzx  edx,dl
c001ea1b:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ea1f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ea21:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ea26:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ea2a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ea2e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ea32:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ea3a:	83 c4 2c             	add    esp,0x2c
c001ea3d:	5b                   	pop    ebx
c001ea3e:	5e                   	pop    esi
c001ea3f:	5f                   	pop    edi
c001ea40:	5d                   	pop    ebp
c001ea41:	e9 d6 f7 ff ff       	jmp    c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ea46:	0f b6 c2             	movzx  eax,dl
c001ea49:	83 f8 07             	cmp    eax,0x7
c001ea4c:	77 12                	ja     c001ea60 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001ea4e:	0f b6 c2             	movzx  eax,dl
c001ea51:	0f b6 db             	movzx  ebx,bl
c001ea54:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001ea5c:	01 c2                	add    edx,eax
c001ea5e:	eb 2f                	jmp    c001ea8f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ea60:	83 f8 0d             	cmp    eax,0xd
c001ea63:	77 13                	ja     c001ea78 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001ea65:	0f b6 db             	movzx  ebx,bl
c001ea68:	0f b6 d2             	movzx  edx,dl
c001ea6b:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001ea72:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ea76:	eb 17                	jmp    c001ea8f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001ea78:	83 f8 15             	cmp    eax,0x15
c001ea7b:	77 14                	ja     c001ea91 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001ea7d:	0f b6 db             	movzx  ebx,bl
c001ea80:	0f b6 d2             	movzx  edx,dl
c001ea83:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001ea8b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ea8f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ea91:	83 c4 1c             	add    esp,0x1c
c001ea94:	5b                   	pop    ebx
c001ea95:	5e                   	pop    esi
c001ea96:	5f                   	pop    edi
c001ea97:	5d                   	pop    ebp
c001ea98:	c3                   	ret    
c001ea99:	90                   	nop

c001ea9a <IDE::detect()>:
c001ea9a:	55                   	push   ebp
c001ea9b:	57                   	push   edi
c001ea9c:	56                   	push   esi
c001ea9d:	53                   	push   ebx
c001ea9e:	81 ec 28 02 00 00    	sub    esp,0x228
c001eaa4:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001eaab:	68 df 5b 02 c0       	push   0xc0025bdf
c001eab0:	e8 de e7 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001eab5:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001eabb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001eabf:	83 c4 10             	add    esp,0x10
c001eac2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001eac7:	0f 85 2f 04 00 00    	jne    c001eefc <IDE::detect()+0x462>
c001eacd:	83 ec 0c             	sub    esp,0xc
c001ead0:	31 f6                	xor    esi,esi
c001ead2:	68 e2 5b 02 c0       	push   0xc0025be2
c001ead7:	31 ff                	xor    edi,edi
c001ead9:	e8 b5 e7 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001eade:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001eae5:	83 c4 10             	add    esp,0x10
c001eae8:	83 ec 0c             	sub    esp,0xc
c001eaeb:	68 e5 5b 02 c0       	push   0xc0025be5
c001eaf0:	e8 9e e7 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001eaf5:	83 c4 10             	add    esp,0x10
c001eaf8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eaff:	83 ec 0c             	sub    esp,0xc
c001eb02:	31 ed                	xor    ebp,ebp
c001eb04:	68 e8 5b 02 c0       	push   0xc0025be8
c001eb09:	e8 85 e7 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001eb0e:	89 f8                	mov    eax,edi
c001eb10:	c1 e0 06             	shl    eax,0x6
c001eb13:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001eb1b:	c7 04 24 eb 5b 02 c0 	mov    DWORD PTR [esp],0xc0025beb
c001eb22:	e8 6c e7 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001eb27:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001eb2b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001eb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb33:	c1 e0 04             	shl    eax,0x4
c001eb36:	83 c8 a0             	or     eax,0xffffffa0
c001eb39:	0f b6 c0             	movzx  eax,al
c001eb3c:	50                   	push   eax
c001eb3d:	6a 06                	push   0x6
c001eb3f:	56                   	push   esi
c001eb40:	53                   	push   ebx
c001eb41:	e8 d6 f6 ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb46:	83 c4 1c             	add    esp,0x1c
c001eb49:	6a 0c                	push   0xc
c001eb4b:	56                   	push   esi
c001eb4c:	53                   	push   ebx
c001eb4d:	e8 8a f7 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001eb52:	83 c4 0c             	add    esp,0xc
c001eb55:	6a 0c                	push   0xc
c001eb57:	56                   	push   esi
c001eb58:	53                   	push   ebx
c001eb59:	e8 7e f7 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001eb5e:	83 c4 0c             	add    esp,0xc
c001eb61:	6a 0c                	push   0xc
c001eb63:	56                   	push   esi
c001eb64:	53                   	push   ebx
c001eb65:	e8 72 f7 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001eb6a:	83 c4 0c             	add    esp,0xc
c001eb6d:	6a 0c                	push   0xc
c001eb6f:	56                   	push   esi
c001eb70:	53                   	push   ebx
c001eb71:	e8 66 f7 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001eb76:	c7 04 24 ee 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bee
c001eb7d:	e8 11 e7 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001eb82:	68 ec 00 00 00       	push   0xec
c001eb87:	6a 07                	push   0x7
c001eb89:	56                   	push   esi
c001eb8a:	53                   	push   ebx
c001eb8b:	e8 8c f6 ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb90:	83 c4 1c             	add    esp,0x1c
c001eb93:	6a 0c                	push   0xc
c001eb95:	56                   	push   esi
c001eb96:	53                   	push   ebx
c001eb97:	e8 40 f7 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001eb9c:	83 c4 0c             	add    esp,0xc
c001eb9f:	6a 0c                	push   0xc
c001eba1:	56                   	push   esi
c001eba2:	53                   	push   ebx
c001eba3:	e8 34 f7 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001eba8:	83 c4 0c             	add    esp,0xc
c001ebab:	6a 0c                	push   0xc
c001ebad:	56                   	push   esi
c001ebae:	53                   	push   ebx
c001ebaf:	e8 28 f7 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001ebb4:	83 c4 0c             	add    esp,0xc
c001ebb7:	6a 0c                	push   0xc
c001ebb9:	56                   	push   esi
c001ebba:	53                   	push   ebx
c001ebbb:	e8 1c f7 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001ebc0:	c7 04 24 f1 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bf1
c001ebc7:	e8 c7 e6 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001ebcc:	83 c4 0c             	add    esp,0xc
c001ebcf:	6a 0c                	push   0xc
c001ebd1:	56                   	push   esi
c001ebd2:	53                   	push   ebx
c001ebd3:	e8 04 f7 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001ebd8:	83 c4 10             	add    esp,0x10
c001ebdb:	84 c0                	test   al,al
c001ebdd:	75 1f                	jne    c001ebfe <IDE::detect()+0x164>
c001ebdf:	83 ec 0c             	sub    esp,0xc
c001ebe2:	68 f4 5b 02 c0       	push   0xc0025bf4
c001ebe7:	e8 a7 e6 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001ebec:	e9 e9 02 00 00       	jmp    c001eeda <IDE::detect()+0x440>
c001ebf1:	a8 80                	test   al,0x80
c001ebf3:	74 21                	je     c001ec16 <IDE::detect()+0x17c>
c001ebf5:	45                   	inc    ebp
c001ebf6:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001ebfc:	7f 1e                	jg     c001ec1c <IDE::detect()+0x182>
c001ebfe:	50                   	push   eax
c001ebff:	6a 0c                	push   0xc
c001ec01:	56                   	push   esi
c001ec02:	53                   	push   ebx
c001ec03:	e8 d4 f6 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001ec08:	83 c4 10             	add    esp,0x10
c001ec0b:	a8 01                	test   al,0x1
c001ec0d:	74 e2                	je     c001ebf1 <IDE::detect()+0x157>
c001ec0f:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001ec14:	eb 23                	jmp    c001ec39 <IDE::detect()+0x19f>
c001ec16:	a8 08                	test   al,0x8
c001ec18:	74 db                	je     c001ebf5 <IDE::detect()+0x15b>
c001ec1a:	eb 18                	jmp    c001ec34 <IDE::detect()+0x19a>
c001ec1c:	50                   	push   eax
c001ec1d:	50                   	push   eax
c001ec1e:	6a 00                	push   0x0
c001ec20:	6a 32                	push   0x32
c001ec22:	e8 55 85 ff ff       	call   c001717c <milliTenthSleep(unsigned long long)>
c001ec27:	83 c4 10             	add    esp,0x10
c001ec2a:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001ec30:	75 cc                	jne    c001ebfe <IDE::detect()+0x164>
c001ec32:	eb db                	jmp    c001ec0f <IDE::detect()+0x175>
c001ec34:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001ec39:	83 ec 0c             	sub    esp,0xc
c001ec3c:	68 f7 5b 02 c0       	push   0xc0025bf7
c001ec41:	e8 4d e6 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001ec46:	83 c4 10             	add    esp,0x10
c001ec49:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001ec4e:	74 5f                	je     c001ecaf <IDE::detect()+0x215>
c001ec50:	51                   	push   ecx
c001ec51:	6a 04                	push   0x4
c001ec53:	56                   	push   esi
c001ec54:	53                   	push   ebx
c001ec55:	e8 82 f6 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001ec5a:	83 c4 0c             	add    esp,0xc
c001ec5d:	89 c5                	mov    ebp,eax
c001ec5f:	6a 05                	push   0x5
c001ec61:	56                   	push   esi
c001ec62:	53                   	push   ebx
c001ec63:	e8 74 f6 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001ec68:	83 c4 10             	add    esp,0x10
c001ec6b:	89 e9                	mov    ecx,ebp
c001ec6d:	0f b6 c0             	movzx  eax,al
c001ec70:	0f b6 e9             	movzx  ebp,cl
c001ec73:	83 fd 14             	cmp    ebp,0x14
c001ec76:	75 07                	jne    c001ec7f <IDE::detect()+0x1e5>
c001ec78:	3d eb 00 00 00       	cmp    eax,0xeb
c001ec7d:	eb 0e                	jmp    c001ec8d <IDE::detect()+0x1f3>
c001ec7f:	3d 96 00 00 00       	cmp    eax,0x96
c001ec84:	0f 85 53 02 00 00    	jne    c001eedd <IDE::detect()+0x443>
c001ec8a:	83 fd 69             	cmp    ebp,0x69
c001ec8d:	0f 85 4a 02 00 00    	jne    c001eedd <IDE::detect()+0x443>
c001ec93:	68 a1 00 00 00       	push   0xa1
c001ec98:	6a 07                	push   0x7
c001ec9a:	56                   	push   esi
c001ec9b:	53                   	push   ebx
c001ec9c:	e8 7b f5 ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eca1:	58                   	pop    eax
c001eca2:	5a                   	pop    edx
c001eca3:	6a 00                	push   0x0
c001eca5:	6a 0a                	push   0xa
c001eca7:	e8 d0 84 ff ff       	call   c001717c <milliTenthSleep(unsigned long long)>
c001ecac:	83 c4 10             	add    esp,0x10
c001ecaf:	83 ec 0c             	sub    esp,0xc
c001ecb2:	89 fd                	mov    ebp,edi
c001ecb4:	68 fa 5b 02 c0       	push   0xc0025bfa
c001ecb9:	c1 e5 06             	shl    ebp,0x6
c001ecbc:	e8 d2 e5 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001ecc1:	01 dd                	add    ebp,ebx
c001ecc3:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ecc7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001ecce:	52                   	push   edx
c001eccf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ecd3:	6a 00                	push   0x0
c001ecd5:	56                   	push   esi
c001ecd6:	53                   	push   ebx
c001ecd7:	e8 ee fc ff ff       	call   c001e9ca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ecdc:	83 c4 14             	add    esp,0x14
c001ecdf:	68 fe 5b 02 c0       	push   0xc0025bfe
c001ece4:	e8 aa e5 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001ece9:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001ecee:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001ecf5:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001ecfc:	89 f0                	mov    eax,esi
c001ecfe:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001ed04:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ed08:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001ed0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed12:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001ed19:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001ed21:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001ed28:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001ed30:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001ed36:	c7 04 24 02 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c02
c001ed3d:	e8 51 e5 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001ed42:	83 c4 10             	add    esp,0x10
c001ed45:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001ed4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ed50:	74 09                	je     c001ed5b <IDE::detect()+0x2c1>
c001ed52:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001ed59:	eb 07                	jmp    c001ed62 <IDE::detect()+0x2c8>
c001ed5b:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001ed62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ed66:	89 f8                	mov    eax,edi
c001ed68:	83 ec 0c             	sub    esp,0xc
c001ed6b:	c1 e0 06             	shl    eax,0x6
c001ed6e:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001ed71:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001ed77:	68 06 5c 02 c0       	push   0xc0025c06
c001ed7c:	e8 12 e5 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001ed81:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ed85:	89 e8                	mov    eax,ebp
c001ed87:	83 c4 10             	add    esp,0x10
c001ed8a:	8d 6a 28             	lea    ebp,[edx+0x28]
c001ed8d:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001ed90:	83 c0 02             	add    eax,0x2
c001ed93:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001ed99:	83 c2 02             	add    edx,0x2
c001ed9c:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001ed9f:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001eda5:	39 d5                	cmp    ebp,edx
c001eda7:	75 e4                	jne    c001ed8d <IDE::detect()+0x2f3>
c001eda9:	89 f8                	mov    eax,edi
c001edab:	c1 e0 06             	shl    eax,0x6
c001edae:	01 d8                	add    eax,ebx
c001edb0:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001edb7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001edbe:	c1 ea 09             	shr    edx,0x9
c001edc1:	83 e2 01             	and    edx,0x1
c001edc4:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001edcb:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001edd1:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001edd5:	74 0c                	je     c001ede3 <IDE::detect()+0x349>
c001edd7:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001ede0:	0f 95 c2             	setne  dl
c001ede3:	83 ec 0c             	sub    esp,0xc
c001ede6:	89 fd                	mov    ebp,edi
c001ede8:	c1 e5 06             	shl    ebp,0x6
c001edeb:	01 dd                	add    ebp,ebx
c001eded:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001edf3:	68 0a 5c 02 c0       	push   0xc0025c0a
c001edf8:	e8 96 e4 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001edfd:	83 c4 10             	add    esp,0x10
c001ee00:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001ee05:	75 66                	jne    c001ee6d <IDE::detect()+0x3d3>
c001ee07:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001ee0e:	0f 84 b8 00 00 00    	je     c001eecc <IDE::detect()+0x432>
c001ee14:	83 ec 0c             	sub    esp,0xc
c001ee17:	68 0e 5c 02 c0       	push   0xc0025c0e
c001ee1c:	e8 72 e4 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001ee21:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001ee28:	e8 9e 0e ff ff       	call   c000fccb <malloc>
c001ee2d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee30:	89 c5                	mov    ebp,eax
c001ee32:	e8 43 05 00 00       	call   c001f37a <ATA::ATA()>
c001ee37:	c7 04 24 12 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c12
c001ee3e:	e8 50 e4 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001ee43:	59                   	pop    ecx
c001ee44:	58                   	pop    eax
c001ee45:	55                   	push   ebp
c001ee46:	53                   	push   ebx
c001ee47:	e8 b0 ab fe ff       	call   c00099fc <Device::addChild(Device*)>
c001ee4c:	c7 04 24 17 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c17
c001ee53:	e8 3b e4 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001ee58:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ee5b:	53                   	push   ebx
c001ee5c:	57                   	push   edi
c001ee5d:	6a 00                	push   0x0
c001ee5f:	55                   	push   ebp
c001ee60:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ee63:	83 c4 14             	add    esp,0x14
c001ee66:	68 1c 5c 02 c0       	push   0xc0025c1c
c001ee6b:	eb 57                	jmp    c001eec4 <IDE::detect()+0x42a>
c001ee6d:	83 ec 0c             	sub    esp,0xc
c001ee70:	68 21 5c 02 c0       	push   0xc0025c21
c001ee75:	e8 19 e4 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001ee7a:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ee81:	e8 45 0e ff ff       	call   c000fccb <malloc>
c001ee86:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee89:	89 c5                	mov    ebp,eax
c001ee8b:	e8 98 0c 00 00       	call   c001fb28 <ATAPI::ATAPI()>
c001ee90:	c7 04 24 27 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c27
c001ee97:	e8 f7 e3 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001ee9c:	58                   	pop    eax
c001ee9d:	5a                   	pop    edx
c001ee9e:	55                   	push   ebp
c001ee9f:	53                   	push   ebx
c001eea0:	e8 57 ab fe ff       	call   c00099fc <Device::addChild(Device*)>
c001eea5:	c7 04 24 2e 5c 02 c0 	mov    DWORD PTR [esp],0xc0025c2e
c001eeac:	e8 e2 e3 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001eeb1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001eeb4:	53                   	push   ebx
c001eeb5:	57                   	push   edi
c001eeb6:	6a 00                	push   0x0
c001eeb8:	55                   	push   ebp
c001eeb9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001eebc:	83 c4 14             	add    esp,0x14
c001eebf:	68 35 5c 02 c0       	push   0xc0025c35
c001eec4:	e8 ca e3 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001eec9:	83 c4 10             	add    esp,0x10
c001eecc:	83 ec 0c             	sub    esp,0xc
c001eecf:	47                   	inc    edi
c001eed0:	68 3c 5c 02 c0       	push   0xc0025c3c
c001eed5:	e8 b9 e3 fe ff       	call   c000d293 <KeSetBootMessage(char const*)>
c001eeda:	83 c4 10             	add    esp,0x10
c001eedd:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001eee1:	74 0c                	je     c001eeef <IDE::detect()+0x455>
c001eee3:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001eeea:	e9 10 fc ff ff       	jmp    c001eaff <IDE::detect()+0x65>
c001eeef:	4e                   	dec    esi
c001eef0:	74 0a                	je     c001eefc <IDE::detect()+0x462>
c001eef2:	be 01 00 00 00       	mov    esi,0x1
c001eef7:	e9 ec fb ff ff       	jmp    c001eae8 <IDE::detect()+0x4e>
c001eefc:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ef02:	5b                   	pop    ebx
c001ef03:	5e                   	pop    esi
c001ef04:	5f                   	pop    edi
c001ef05:	5d                   	pop    ebp
c001ef06:	c3                   	ret    
c001ef07:	90                   	nop

c001ef08 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ef08:	55                   	push   ebp
c001ef09:	57                   	push   edi
c001ef0a:	56                   	push   esi
c001ef0b:	53                   	push   ebx
c001ef0c:	83 ec 1c             	sub    esp,0x1c
c001ef0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ef13:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ef17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ef1b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ef1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ef23:	88 c3                	mov    bl,al
c001ef25:	25 ff 00 00 00       	and    eax,0xff
c001ef2a:	0f 84 88 00 00 00    	je     c001efb8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001ef30:	83 ec 0c             	sub    esp,0xc
c001ef33:	89 c7                	mov    edi,eax
c001ef35:	68 40 5c 02 c0       	push   0xc0025c40
c001ef3a:	e8 25 80 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ef3f:	83 c4 10             	add    esp,0x10
c001ef42:	83 ff 01             	cmp    edi,0x1
c001ef45:	74 6b                	je     c001efb2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001ef47:	83 ff 02             	cmp    edi,0x2
c001ef4a:	75 58                	jne    c001efa4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001ef4c:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001ef51:	01 ff                	add    edi,edi
c001ef53:	50                   	push   eax
c001ef54:	09 fe                	or     esi,edi
c001ef56:	6a 01                	push   0x1
c001ef58:	89 f0                	mov    eax,esi
c001ef5a:	0f b6 f0             	movzx  esi,al
c001ef5d:	c1 e6 06             	shl    esi,0x6
c001ef60:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001ef68:	50                   	push   eax
c001ef69:	55                   	push   ebp
c001ef6a:	e8 6d f3 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001ef6f:	83 c4 10             	add    esp,0x10
c001ef72:	a8 01                	test   al,0x1
c001ef74:	74 02                	je     c001ef78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001ef76:	b3 07                	mov    bl,0x7
c001ef78:	a8 02                	test   al,0x2
c001ef7a:	74 02                	je     c001ef7e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001ef7c:	b3 03                	mov    bl,0x3
c001ef7e:	a8 04                	test   al,0x4
c001ef80:	74 02                	je     c001ef84 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001ef82:	b3 14                	mov    bl,0x14
c001ef84:	a8 08                	test   al,0x8
c001ef86:	74 02                	je     c001ef8a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001ef88:	b3 03                	mov    bl,0x3
c001ef8a:	a8 10                	test   al,0x10
c001ef8c:	74 02                	je     c001ef90 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001ef8e:	b3 15                	mov    bl,0x15
c001ef90:	a8 20                	test   al,0x20
c001ef92:	74 02                	je     c001ef96 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001ef94:	b3 03                	mov    bl,0x3
c001ef96:	a8 40                	test   al,0x40
c001ef98:	74 02                	je     c001ef9c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001ef9a:	b3 16                	mov    bl,0x16
c001ef9c:	a8 80                	test   al,0x80
c001ef9e:	74 18                	je     c001efb8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001efa0:	b3 0d                	mov    bl,0xd
c001efa2:	eb 14                	jmp    c001efb8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001efa4:	83 ff 03             	cmp    edi,0x3
c001efa7:	74 0d                	je     c001efb6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001efa9:	83 ff 04             	cmp    edi,0x4
c001efac:	75 0a                	jne    c001efb8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001efae:	b3 08                	mov    bl,0x8
c001efb0:	eb 06                	jmp    c001efb8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001efb2:	b3 13                	mov    bl,0x13
c001efb4:	eb 02                	jmp    c001efb8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001efb6:	b3 17                	mov    bl,0x17
c001efb8:	83 c4 1c             	add    esp,0x1c
c001efbb:	88 d8                	mov    al,bl
c001efbd:	5b                   	pop    ebx
c001efbe:	5e                   	pop    esi
c001efbf:	5f                   	pop    edi
c001efc0:	5d                   	pop    ebp
c001efc1:	c3                   	ret    

c001efc2 <IDE::polling(unsigned char, unsigned int)>:
c001efc2:	57                   	push   edi
c001efc3:	56                   	push   esi
c001efc4:	53                   	push   ebx
c001efc5:	bb 04 00 00 00       	mov    ebx,0x4
c001efca:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001efce:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001efd3:	52                   	push   edx
c001efd4:	6a 0c                	push   0xc
c001efd6:	56                   	push   esi
c001efd7:	57                   	push   edi
c001efd8:	e8 ff f2 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001efdd:	83 c4 10             	add    esp,0x10
c001efe0:	4b                   	dec    ebx
c001efe1:	75 f0                	jne    c001efd3 <IDE::polling(unsigned char, unsigned int)+0x11>
c001efe3:	bb a0 86 01 00       	mov    ebx,0x186a0
c001efe8:	50                   	push   eax
c001efe9:	6a 0c                	push   0xc
c001efeb:	56                   	push   esi
c001efec:	57                   	push   edi
c001efed:	e8 ea f2 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001eff2:	83 c4 10             	add    esp,0x10
c001eff5:	a8 01                	test   al,0x1
c001eff7:	75 17                	jne    c001f010 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001eff9:	a8 20                	test   al,0x20
c001effb:	75 0f                	jne    c001f00c <IDE::polling(unsigned char, unsigned int)+0x4a>
c001effd:	4b                   	dec    ebx
c001effe:	74 10                	je     c001f010 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f000:	a8 80                	test   al,0x80
c001f002:	75 e4                	jne    c001efe8 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f004:	a8 08                	test   al,0x8
c001f006:	74 e0                	je     c001efe8 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f008:	31 c0                	xor    eax,eax
c001f00a:	eb 06                	jmp    c001f012 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f00c:	b0 01                	mov    al,0x1
c001f00e:	eb 02                	jmp    c001f012 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f010:	b0 02                	mov    al,0x2
c001f012:	5b                   	pop    ebx
c001f013:	5e                   	pop    esi
c001f014:	5f                   	pop    edi
c001f015:	c3                   	ret    

c001f016 <SATABus::close(int, int, void*)>:
c001f016:	31 c0                	xor    eax,eax
c001f018:	c3                   	ret    
c001f019:	90                   	nop

c001f01a <SATABus::detect()>:
c001f01a:	c3                   	ret    
c001f01b:	90                   	nop

c001f01c <SATABus::SATABus()>:
c001f01c:	83 ec 0c             	sub    esp,0xc
c001f01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f023:	83 ec 08             	sub    esp,0x8
c001f026:	68 78 5c 02 c0       	push   0xc0025c78
c001f02b:	50                   	push   eax
c001f02c:	e8 23 ad fe ff       	call   c0009d54 <HardDiskController::HardDiskController(char const*)>
c001f031:	83 c4 10             	add    esp,0x10
c001f034:	ba a4 5c 02 c0       	mov    edx,0xc0025ca4
c001f039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f03d:	89 10                	mov    DWORD PTR [eax],edx
c001f03f:	83 ec 0c             	sub    esp,0xc
c001f042:	6a 50                	push   0x50
c001f044:	e8 9b 12 ff ff       	call   c00102e4 <Phys::allocateContiguousPages(int)>
c001f049:	83 c4 10             	add    esp,0x10
c001f04c:	89 c2                	mov    edx,eax
c001f04e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f052:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f058:	83 ec 0c             	sub    esp,0xc
c001f05b:	6a 50                	push   0x50
c001f05d:	e8 9b 44 ff ff       	call   c00134fd <Virt::allocateKernelVirtualPages(int)>
c001f062:	83 c4 10             	add    esp,0x10
c001f065:	89 c2                	mov    edx,eax
c001f067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f06b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f071:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c001f076:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f07a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f080:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f084:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f08a:	83 ec 0c             	sub    esp,0xc
c001f08d:	6a 03                	push   0x3
c001f08f:	6a 50                	push   0x50
c001f091:	51                   	push   ecx
c001f092:	52                   	push   edx
c001f093:	50                   	push   eax
c001f094:	e8 31 4d ff ff       	call   c0013dca <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f099:	83 c4 20             	add    esp,0x20
c001f09c:	90                   	nop
c001f09d:	83 c4 0c             	add    esp,0xc
c001f0a0:	c3                   	ret    
c001f0a1:	90                   	nop

c001f0a2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f0a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0a6:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f0a9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f0ac:	09 c2                	or     edx,eax
c001f0ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f0b8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f0ba:	31 c0                	xor    eax,eax
c001f0bc:	c1 e9 08             	shr    ecx,0x8
c001f0bf:	83 e1 0f             	and    ecx,0xf
c001f0c2:	39 c8                	cmp    eax,ecx
c001f0c4:	74 0a                	je     c001f0d0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f0c6:	f6 c2 01             	test   dl,0x1
c001f0c9:	74 08                	je     c001f0d3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f0cb:	d1 ea                	shr    edx,1
c001f0cd:	40                   	inc    eax
c001f0ce:	eb f2                	jmp    c001f0c2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f0d0:	83 c8 ff             	or     eax,0xffffffff
c001f0d3:	c3                   	ret    

c001f0d4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f0d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f0d8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f0db:	89 c2                	mov    edx,eax
c001f0dd:	c1 ea 08             	shr    edx,0x8
c001f0e0:	83 e2 0f             	and    edx,0xf
c001f0e3:	4a                   	dec    edx
c001f0e4:	75 32                	jne    c001f118 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f0e6:	83 e0 0f             	and    eax,0xf
c001f0e9:	83 f8 03             	cmp    eax,0x3
c001f0ec:	75 2a                	jne    c001f118 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f0ee:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f0f1:	b8 02 00 00 00       	mov    eax,0x2
c001f0f6:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f0fc:	74 1c                	je     c001f11a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f0fe:	b8 04 00 00 00       	mov    eax,0x4
c001f103:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f109:	74 0f                	je     c001f11a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f10b:	31 c0                	xor    eax,eax
c001f10d:	83 fa 03             	cmp    edx,0x3
c001f110:	0f 94 c0             	sete   al
c001f113:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f117:	c3                   	ret    
c001f118:	31 c0                	xor    eax,eax
c001f11a:	c3                   	ret    
c001f11b:	90                   	nop

c001f11c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f11c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f120:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f123:	0f ba e2 0f          	bt     edx,0xf
c001f127:	72 f7                	jb     c001f120 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f129:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f12c:	83 ca 10             	or     edx,0x10
c001f12f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f132:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f135:	83 ca 01             	or     edx,0x1
c001f138:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f13b:	c3                   	ret    

c001f13c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f13c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f143:	83 e2 fe             	and    edx,0xfffffffe
c001f146:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f149:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f14c:	83 e2 ef             	and    edx,0xffffffef
c001f14f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f152:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f155:	0f ba e2 0e          	bt     edx,0xe
c001f159:	72 f7                	jb     c001f152 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f15b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f15e:	0f ba e2 0f          	bt     edx,0xf
c001f162:	72 ee                	jb     c001f152 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f164:	c3                   	ret    
c001f165:	90                   	nop

c001f166 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f166:	55                   	push   ebp
c001f167:	57                   	push   edi
c001f168:	56                   	push   esi
c001f169:	53                   	push   ebx
c001f16a:	83 ec 1c             	sub    esp,0x1c
c001f16d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f171:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f175:	53                   	push   ebx
c001f176:	56                   	push   esi
c001f177:	e8 c0 ff ff ff       	call   c001f13c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f17c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001f180:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f186:	83 ec 0c             	sub    esp,0xc
c001f189:	c1 e5 0a             	shl    ebp,0xa
c001f18c:	01 e8                	add    eax,ebp
c001f18e:	89 03                	mov    DWORD PTR [ebx],eax
c001f190:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f192:	68 00 04 00 00       	push   0x400
c001f197:	6a 00                	push   0x0
c001f199:	50                   	push   eax
c001f19a:	e8 51 13 fe ff       	call   c00004f0 <memset>
c001f19f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f1a5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001f1a9:	01 e8                	add    eax,ebp
c001f1ab:	83 c4 1c             	add    esp,0x1c
c001f1ae:	89 03                	mov    DWORD PTR [ebx],eax
c001f1b0:	c1 e2 08             	shl    edx,0x8
c001f1b3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f1ba:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001f1c0:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f1c6:	01 f8                	add    eax,edi
c001f1c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f1cb:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f1ce:	68 00 01 00 00       	push   0x100
c001f1d3:	6a 00                	push   0x0
c001f1d5:	50                   	push   eax
c001f1d6:	e8 15 13 fe ff       	call   c00004f0 <memset>
c001f1db:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001f1e1:	01 fa                	add    edx,edi
c001f1e3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f1e7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f1ea:	c1 e7 0d             	shl    edi,0xd
c001f1ed:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f1f4:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f1fa:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f200:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f204:	31 ff                	xor    edi,edi
c001f206:	83 c4 10             	add    esp,0x10
c001f209:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f20f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f213:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f219:	83 c5 20             	add    ebp,0x20
c001f21c:	01 f8                	add    eax,edi
c001f21e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f221:	52                   	push   edx
c001f222:	68 00 01 00 00       	push   0x100
c001f227:	6a 00                	push   0x0
c001f229:	50                   	push   eax
c001f22a:	e8 c1 12 fe ff       	call   c00004f0 <memset>
c001f22f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f233:	83 c4 10             	add    esp,0x10
c001f236:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f23c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f243:	01 f8                	add    eax,edi
c001f245:	81 c7 00 01 00 00    	add    edi,0x100
c001f24b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f24e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f254:	75 b3                	jne    c001f209 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001f256:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f25d:	50                   	push   eax
c001f25e:	50                   	push   eax
c001f25f:	53                   	push   ebx
c001f260:	56                   	push   esi
c001f261:	e8 b6 fe ff ff       	call   c001f11c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001f266:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001f26d:	83 c4 2c             	add    esp,0x2c
c001f270:	5b                   	pop    ebx
c001f271:	5e                   	pop    esi
c001f272:	5f                   	pop    edi
c001f273:	5d                   	pop    ebp
c001f274:	c3                   	ret    
c001f275:	90                   	nop

c001f276 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f276:	55                   	push   ebp
c001f277:	57                   	push   edi
c001f278:	56                   	push   esi
c001f279:	53                   	push   ebx
c001f27a:	31 db                	xor    ebx,ebx
c001f27c:	83 ec 0c             	sub    esp,0xc
c001f27f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f283:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f287:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001f28a:	f7 c7 01 00 00 00    	test   edi,0x1
c001f290:	74 7a                	je     c001f30c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f292:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f296:	89 d8                	mov    eax,ebx
c001f298:	c1 e0 07             	shl    eax,0x7
c001f29b:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001f2a2:	55                   	push   ebp
c001f2a3:	56                   	push   esi
c001f2a4:	e8 2b fe ff ff       	call   c001f0d4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f2a9:	5a                   	pop    edx
c001f2aa:	83 f8 01             	cmp    eax,0x1
c001f2ad:	59                   	pop    ecx
c001f2ae:	75 21                	jne    c001f2d1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001f2b0:	50                   	push   eax
c001f2b1:	53                   	push   ebx
c001f2b2:	55                   	push   ebp
c001f2b3:	56                   	push   esi
c001f2b4:	e8 ad fe ff ff       	call   c001f166 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f2b9:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001f2c0:	e8 06 0a ff ff       	call   c000fccb <malloc>
c001f2c5:	89 c5                	mov    ebp,eax
c001f2c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f2ca:	e8 25 0f 00 00       	call   c00201f4 <SATA::SATA()>
c001f2cf:	eb 24                	jmp    c001f2f5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001f2d1:	83 f8 04             	cmp    eax,0x4
c001f2d4:	75 36                	jne    c001f30c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001f2d6:	51                   	push   ecx
c001f2d7:	53                   	push   ebx
c001f2d8:	55                   	push   ebp
c001f2d9:	56                   	push   esi
c001f2da:	e8 87 fe ff ff       	call   c001f166 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f2df:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f2e6:	e8 e0 09 ff ff       	call   c000fccb <malloc>
c001f2eb:	89 c5                	mov    ebp,eax
c001f2ed:	89 04 24             	mov    DWORD PTR [esp],eax
c001f2f0:	e8 97 12 00 00       	call   c002058c <SATAPI::SATAPI()>
c001f2f5:	58                   	pop    eax
c001f2f6:	5a                   	pop    edx
c001f2f7:	55                   	push   ebp
c001f2f8:	56                   	push   esi
c001f2f9:	e8 fe a6 fe ff       	call   c00099fc <Device::addChild(Device*)>
c001f2fe:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001f301:	56                   	push   esi
c001f302:	6a 00                	push   0x0
c001f304:	53                   	push   ebx
c001f305:	55                   	push   ebp
c001f306:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001f309:	83 c4 20             	add    esp,0x20
c001f30c:	d1 ef                	shr    edi,1
c001f30e:	43                   	inc    ebx
c001f30f:	83 fb 20             	cmp    ebx,0x20
c001f312:	0f 85 72 ff ff ff    	jne    c001f28a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001f318:	83 c4 0c             	add    esp,0xc
c001f31b:	5b                   	pop    ebx
c001f31c:	5e                   	pop    esi
c001f31d:	5f                   	pop    edi
c001f31e:	5d                   	pop    ebp
c001f31f:	c3                   	ret    

c001f320 <SATABus::open(int, int, void*)>:
c001f320:	53                   	push   ebx
c001f321:	83 ec 08             	sub    esp,0x8
c001f324:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f328:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f32e:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f334:	e8 6f 79 ff ff       	call   c0016ca8 <KeDisablePreemption()>
c001f339:	52                   	push   edx
c001f33a:	52                   	push   edx
c001f33b:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f341:	53                   	push   ebx
c001f342:	e8 2f ff ff ff       	call   c001f276 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f347:	e8 84 79 ff ff       	call   c0016cd0 <KeRestorePreemption()>
c001f34c:	31 c0                	xor    eax,eax
c001f34e:	83 c4 18             	add    esp,0x18
c001f351:	5b                   	pop    ebx
c001f352:	c3                   	ret    
c001f353:	90                   	nop

c001f354 <ATA::close(int, int, void*)>:
c001f354:	83 ec 0c             	sub    esp,0xc
c001f357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f35b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f361:	85 c0                	test   eax,eax
c001f363:	74 0c                	je     c001f371 <ATA::close(int, int, void*)+0x1d>
c001f365:	83 ec 0c             	sub    esp,0xc
c001f368:	8b 10                	mov    edx,DWORD PTR [eax]
c001f36a:	50                   	push   eax
c001f36b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f36e:	83 c4 10             	add    esp,0x10
c001f371:	31 c0                	xor    eax,eax
c001f373:	83 c4 0c             	add    esp,0xc
c001f376:	c3                   	ret    
c001f377:	90                   	nop

c001f378 <ATA::powerSaving(PowerSavingLevel)>:
c001f378:	c3                   	ret    
c001f379:	90                   	nop

c001f37a <ATA::ATA()>:
c001f37a:	83 ec 0c             	sub    esp,0xc
c001f37d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f381:	83 ec 04             	sub    esp,0x4
c001f384:	68 00 02 00 00       	push   0x200
c001f389:	68 25 5e 02 c0       	push   0xc0025e25
c001f38e:	50                   	push   eax
c001f38f:	e8 4a aa fe ff       	call   c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f394:	83 c4 10             	add    esp,0x10
c001f397:	ba 8c 5d 02 c0       	mov    edx,0xc0025d8c
c001f39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3a0:	89 10                	mov    DWORD PTR [eax],edx
c001f3a2:	90                   	nop
c001f3a3:	83 c4 0c             	add    esp,0xc
c001f3a6:	c3                   	ret    
c001f3a7:	90                   	nop

c001f3a8 <ATA::flush(bool)>:
c001f3a8:	53                   	push   ebx
c001f3a9:	83 ec 08             	sub    esp,0x8
c001f3ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f3b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001f3b5:	83 f8 01             	cmp    eax,0x1
c001f3b8:	19 c0                	sbb    eax,eax
c001f3ba:	83 e0 fd             	and    eax,0xfffffffd
c001f3bd:	05 ea 00 00 00       	add    eax,0xea
c001f3c2:	50                   	push   eax
c001f3c3:	6a 07                	push   0x7
c001f3c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f3cc:	50                   	push   eax
c001f3cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f3d3:	e8 44 ee ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f3d8:	83 c4 0c             	add    esp,0xc
c001f3db:	6a 00                	push   0x0
c001f3dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f3e4:	50                   	push   eax
c001f3e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f3eb:	e8 d2 fb ff ff       	call   c001efc2 <IDE::polling(unsigned char, unsigned int)>
c001f3f0:	83 c4 18             	add    esp,0x18
c001f3f3:	5b                   	pop    ebx
c001f3f4:	c3                   	ret    
c001f3f5:	90                   	nop

c001f3f6 <ATA::readyForCommand()>:
c001f3f6:	56                   	push   esi
c001f3f7:	53                   	push   ebx
c001f3f8:	31 db                	xor    ebx,ebx
c001f3fa:	50                   	push   eax
c001f3fb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f3ff:	50                   	push   eax
c001f400:	6a 0c                	push   0xc
c001f402:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f409:	50                   	push   eax
c001f40a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f410:	e8 c7 ee ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001f415:	83 c4 10             	add    esp,0x10
c001f418:	a8 88                	test   al,0x88
c001f41a:	74 20                	je     c001f43c <ATA::readyForCommand()+0x46>
c001f41c:	43                   	inc    ebx
c001f41d:	83 fb 63             	cmp    ebx,0x63
c001f420:	7e dd                	jle    c001f3ff <ATA::readyForCommand()+0x9>
c001f422:	51                   	push   ecx
c001f423:	51                   	push   ecx
c001f424:	6a 00                	push   0x0
c001f426:	6a 0a                	push   0xa
c001f428:	e8 4f 7d ff ff       	call   c001717c <milliTenthSleep(unsigned long long)>
c001f42d:	83 c4 10             	add    esp,0x10
c001f430:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f436:	75 c7                	jne    c001f3ff <ATA::readyForCommand()+0x9>
c001f438:	31 c0                	xor    eax,eax
c001f43a:	eb 02                	jmp    c001f43e <ATA::readyForCommand()+0x48>
c001f43c:	b0 01                	mov    al,0x1
c001f43e:	5a                   	pop    edx
c001f43f:	5b                   	pop    ebx
c001f440:	5e                   	pop    esi
c001f441:	c3                   	ret    

c001f442 <ATA::access(unsigned long long, int, void*, bool)>:
c001f442:	55                   	push   ebp
c001f443:	57                   	push   edi
c001f444:	56                   	push   esi
c001f445:	53                   	push   ebx
c001f446:	83 ec 2c             	sub    esp,0x2c
c001f449:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f44d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f451:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f455:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f459:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f45d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f461:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001f465:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f46b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f46f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f475:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f479:	c1 e0 06             	shl    eax,0x6
c001f47c:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f484:	74 5d                	je     c001f4e3 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001f486:	89 fa                	mov    edx,edi
c001f488:	89 f0                	mov    eax,esi
c001f48a:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f48e:	c1 ea 1c             	shr    edx,0x1c
c001f491:	89 d1                	mov    ecx,edx
c001f493:	09 c1                	or     ecx,eax
c001f495:	74 25                	je     c001f4bc <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001f497:	31 ed                	xor    ebp,ebp
c001f499:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f4a0:	89 fa                	mov    edx,edi
c001f4a2:	89 f0                	mov    eax,esi
c001f4a4:	0f ad d0             	shrd   eax,edx,cl
c001f4a7:	d3 ea                	shr    edx,cl
c001f4a9:	f6 c1 20             	test   cl,0x20
c001f4ac:	74 02                	je     c001f4b0 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001f4ae:	89 d0                	mov    eax,edx
c001f4b0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f4b4:	45                   	inc    ebp
c001f4b5:	83 fd 06             	cmp    ebp,0x6
c001f4b8:	75 df                	jne    c001f499 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001f4ba:	eb 76                	jmp    c001f532 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001f4bc:	89 f0                	mov    eax,esi
c001f4be:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f4c3:	89 fa                	mov    edx,edi
c001f4c5:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f4cc:	0f ac d0 10          	shrd   eax,edx,0x10
c001f4d0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f4d5:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f4d9:	c1 ee 18             	shr    esi,0x18
c001f4dc:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f4e1:	eb 56                	jmp    c001f539 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001f4e3:	6a 00                	push   0x0
c001f4e5:	6a 3f                	push   0x3f
c001f4e7:	57                   	push   edi
c001f4e8:	56                   	push   esi
c001f4e9:	e8 f6 24 00 00       	call   c00219e4 <__umoddi3>
c001f4ee:	83 c4 10             	add    esp,0x10
c001f4f1:	40                   	inc    eax
c001f4f2:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f4f6:	6a 00                	push   0x0
c001f4f8:	68 f0 03 00 00       	push   0x3f0
c001f4fd:	57                   	push   edi
c001f4fe:	56                   	push   esi
c001f4ff:	e8 e0 23 00 00       	call   c00218e4 <__udivdi3>
c001f504:	83 c4 10             	add    esp,0x10
c001f507:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f50c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f513:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f518:	6a 00                	push   0x0
c001f51a:	6a 3f                	push   0x3f
c001f51c:	57                   	push   edi
c001f51d:	56                   	push   esi
c001f51e:	e8 c1 23 00 00       	call   c00218e4 <__udivdi3>
c001f523:	83 c4 10             	add    esp,0x10
c001f526:	83 e0 0f             	and    eax,0xf
c001f529:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f52e:	89 c6                	mov    esi,eax
c001f530:	eb 07                	jmp    c001f539 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001f532:	31 f6                	xor    esi,esi
c001f534:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f539:	55                   	push   ebp
c001f53a:	6a 00                	push   0x0
c001f53c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f543:	50                   	push   eax
c001f544:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f548:	e8 d9 ee ff ff       	call   c001e426 <IDE::enableIRQs(unsigned char, bool)>
c001f54d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f550:	e8 a1 fe ff ff       	call   c001f3f6 <ATA::readyForCommand()>
c001f555:	83 c4 10             	add    esp,0x10
c001f558:	84 c0                	test   al,al
c001f55a:	75 0a                	jne    c001f566 <ATA::access(unsigned long long, int, void*, bool)+0x124>
c001f55c:	be 01 00 00 00       	mov    esi,0x1
c001f561:	e9 c2 02 00 00       	jmp    c001f828 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001f566:	fa                   	cli    
c001f567:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f56d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001f573:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001f578:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f57e:	75 0a                	jne    c001f58a <ATA::access(unsigned long long, int, void*, bool)+0x148>
c001f580:	c1 e0 04             	shl    eax,0x4
c001f583:	09 c6                	or     esi,eax
c001f585:	83 ce a0             	or     esi,0xffffffa0
c001f588:	eb 08                	jmp    c001f592 <ATA::access(unsigned long long, int, void*, bool)+0x150>
c001f58a:	c1 e0 04             	shl    eax,0x4
c001f58d:	09 c6                	or     esi,eax
c001f58f:	83 ce e0             	or     esi,0xffffffe0
c001f592:	89 f0                	mov    eax,esi
c001f594:	0f b6 d2             	movzx  edx,dl
c001f597:	0f b6 f0             	movzx  esi,al
c001f59a:	56                   	push   esi
c001f59b:	6a 06                	push   0x6
c001f59d:	52                   	push   edx
c001f59e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5a4:	e8 73 ec ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5a9:	83 c4 10             	add    esp,0x10
c001f5ac:	6a 00                	push   0x0
c001f5ae:	6a 01                	push   0x1
c001f5b0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5b7:	50                   	push   eax
c001f5b8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5be:	e8 59 ec ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5c3:	83 c4 10             	add    esp,0x10
c001f5c6:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001f5cb:	83 f8 02             	cmp    eax,0x2
c001f5ce:	75 6e                	jne    c001f63e <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c001f5d0:	6a 00                	push   0x0
c001f5d2:	6a 08                	push   0x8
c001f5d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5db:	50                   	push   eax
c001f5dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5e2:	e8 35 ec ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5e7:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f5ec:	50                   	push   eax
c001f5ed:	6a 09                	push   0x9
c001f5ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5f6:	50                   	push   eax
c001f5f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5fd:	e8 1a ec ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f602:	83 c4 20             	add    esp,0x20
c001f605:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f60a:	50                   	push   eax
c001f60b:	6a 0a                	push   0xa
c001f60d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f614:	50                   	push   eax
c001f615:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f61b:	e8 fc eb ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f620:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f625:	50                   	push   eax
c001f626:	6a 0b                	push   0xb
c001f628:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f62f:	50                   	push   eax
c001f630:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f636:	e8 e1 eb ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f63b:	83 c4 20             	add    esp,0x20
c001f63e:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f643:	50                   	push   eax
c001f644:	6a 02                	push   0x2
c001f646:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f64d:	50                   	push   eax
c001f64e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f654:	e8 c3 eb ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f659:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f65e:	50                   	push   eax
c001f65f:	6a 03                	push   0x3
c001f661:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f668:	50                   	push   eax
c001f669:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f66f:	e8 a8 eb ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f674:	83 c4 20             	add    esp,0x20
c001f677:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f67c:	50                   	push   eax
c001f67d:	6a 04                	push   0x4
c001f67f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f686:	50                   	push   eax
c001f687:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f68d:	e8 8a eb ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f692:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f697:	50                   	push   eax
c001f698:	6a 05                	push   0x5
c001f69a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6a1:	50                   	push   eax
c001f6a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6a8:	e8 6f eb ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6ad:	83 c4 20             	add    esp,0x20
c001f6b0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f6b5:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001f6ba:	74 13                	je     c001f6cf <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001f6bc:	83 f8 02             	cmp    eax,0x2
c001f6bf:	74 20                	je     c001f6e1 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001f6c1:	48                   	dec    eax
c001f6c2:	0f 85 94 fe ff ff    	jne    c001f55c <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001f6c8:	b8 30 00 00 00       	mov    eax,0x30
c001f6cd:	eb 1e                	jmp    c001f6ed <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001f6cf:	83 f8 02             	cmp    eax,0x2
c001f6d2:	74 14                	je     c001f6e8 <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001f6d4:	48                   	dec    eax
c001f6d5:	b8 20 00 00 00       	mov    eax,0x20
c001f6da:	74 11                	je     c001f6ed <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001f6dc:	e9 7b fe ff ff       	jmp    c001f55c <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001f6e1:	b8 34 00 00 00       	mov    eax,0x34
c001f6e6:	eb 05                	jmp    c001f6ed <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001f6e8:	b8 24 00 00 00       	mov    eax,0x24
c001f6ed:	50                   	push   eax
c001f6ee:	6a 07                	push   0x7
c001f6f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6f7:	50                   	push   eax
c001f6f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6fe:	e8 19 eb ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f703:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f70a:	83 c4 10             	add    esp,0x10
c001f70d:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001f714:	75 01                	jne    c001f717 <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c001f716:	fb                   	sti    
c001f717:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001f71b:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001f720:	85 f6                	test   esi,esi
c001f722:	0f 84 dd 00 00 00    	je     c001f805 <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001f728:	57                   	push   edi
c001f729:	6a 01                	push   0x1
c001f72b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f732:	50                   	push   eax
c001f733:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f739:	e8 84 f8 ff ff       	call   c001efc2 <IDE::polling(unsigned char, unsigned int)>
c001f73e:	83 c4 10             	add    esp,0x10
c001f741:	0f b6 c0             	movzx  eax,al
c001f744:	85 c0                	test   eax,eax
c001f746:	74 23                	je     c001f76b <ATA::access(unsigned long long, int, void*, bool)+0x329>
c001f748:	50                   	push   eax
c001f749:	89 c6                	mov    esi,eax
c001f74b:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f752:	50                   	push   eax
c001f753:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f75a:	50                   	push   eax
c001f75b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f761:	e8 a2 f7 ff ff       	call   c001ef08 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f766:	e9 ba 00 00 00       	jmp    c001f825 <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c001f76b:	85 ed                	test   ebp,ebp
c001f76d:	74 49                	je     c001f7b8 <ATA::access(unsigned long long, int, void*, bool)+0x376>
c001f76f:	fa                   	cli    
c001f770:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f776:	31 c9                	xor    ecx,ecx
c001f778:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f77c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f780:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001f784:	51                   	push   ecx
c001f785:	51                   	push   ecx
c001f786:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f78d:	50                   	push   eax
c001f78e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f794:	e8 71 ea ff ff       	call   c001e20a <IDE::getBase(unsigned char)>
c001f799:	89 c2                	mov    edx,eax
c001f79b:	89 f8                	mov    eax,edi
c001f79d:	66 ef                	out    dx,ax
c001f79f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001f7a3:	83 c4 10             	add    esp,0x10
c001f7a6:	41                   	inc    ecx
c001f7a7:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001f7ad:	75 c9                	jne    c001f778 <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001f7af:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f7b6:	eb 35                	jmp    c001f7ed <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c001f7b8:	fa                   	cli    
c001f7b9:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f7bf:	52                   	push   edx
c001f7c0:	52                   	push   edx
c001f7c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7c8:	50                   	push   eax
c001f7c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7cf:	e8 36 ea ff ff       	call   c001e20a <IDE::getBase(unsigned char)>
c001f7d4:	b9 00 01 00 00       	mov    ecx,0x100
c001f7d9:	89 c2                	mov    edx,eax
c001f7db:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f7df:	fc                   	cld    
c001f7e0:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f7e3:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f7ea:	83 c4 10             	add    esp,0x10
c001f7ed:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001f7f4:	75 01                	jne    c001f7f7 <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c001f7f6:	fb                   	sti    
c001f7f7:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f7ff:	4e                   	dec    esi
c001f800:	e9 1b ff ff ff       	jmp    c001f720 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c001f805:	31 f6                	xor    esi,esi
c001f807:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f80c:	74 1a                	je     c001f828 <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001f80e:	50                   	push   eax
c001f80f:	50                   	push   eax
c001f810:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f815:	83 f8 02             	cmp    eax,0x2
c001f818:	0f 94 c0             	sete   al
c001f81b:	0f b6 c0             	movzx  eax,al
c001f81e:	50                   	push   eax
c001f81f:	53                   	push   ebx
c001f820:	e8 83 fb ff ff       	call   c001f3a8 <ATA::flush(bool)>
c001f825:	83 c4 10             	add    esp,0x10
c001f828:	83 c4 2c             	add    esp,0x2c
c001f82b:	89 f0                	mov    eax,esi
c001f82d:	5b                   	pop    ebx
c001f82e:	5e                   	pop    esi
c001f82f:	5f                   	pop    edi
c001f830:	5d                   	pop    ebp
c001f831:	c3                   	ret    

c001f832 <ATA::read(unsigned long long, int, void*)>:
c001f832:	57                   	push   edi
c001f833:	b8 04 00 00 00       	mov    eax,0x4
c001f838:	56                   	push   esi
c001f839:	53                   	push   ebx
c001f83a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f83e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f842:	8d 7a ff             	lea    edi,[edx-0x1]
c001f845:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f849:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f84d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f853:	77 25                	ja     c001f87a <ATA::read(unsigned long long, int, void*)+0x48>
c001f855:	b8 06 00 00 00       	mov    eax,0x6
c001f85a:	85 f6                	test   esi,esi
c001f85c:	74 1c                	je     c001f87a <ATA::read(unsigned long long, int, void*)+0x48>
c001f85e:	50                   	push   eax
c001f85f:	50                   	push   eax
c001f860:	6a 00                	push   0x0
c001f862:	56                   	push   esi
c001f863:	52                   	push   edx
c001f864:	53                   	push   ebx
c001f865:	51                   	push   ecx
c001f866:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f86a:	e8 d3 fb ff ff       	call   c001f442 <ATA::access(unsigned long long, int, void*, bool)>
c001f86f:	83 c4 20             	add    esp,0x20
c001f872:	85 c0                	test   eax,eax
c001f874:	0f 95 c0             	setne  al
c001f877:	0f b6 c0             	movzx  eax,al
c001f87a:	5b                   	pop    ebx
c001f87b:	5e                   	pop    esi
c001f87c:	5f                   	pop    edi
c001f87d:	c3                   	ret    

c001f87e <ATA::write(unsigned long long, int, void*)>:
c001f87e:	57                   	push   edi
c001f87f:	b8 04 00 00 00       	mov    eax,0x4
c001f884:	56                   	push   esi
c001f885:	53                   	push   ebx
c001f886:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f88a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f88e:	8d 7a ff             	lea    edi,[edx-0x1]
c001f891:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f895:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f899:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f89f:	77 25                	ja     c001f8c6 <ATA::write(unsigned long long, int, void*)+0x48>
c001f8a1:	b8 06 00 00 00       	mov    eax,0x6
c001f8a6:	85 f6                	test   esi,esi
c001f8a8:	74 1c                	je     c001f8c6 <ATA::write(unsigned long long, int, void*)+0x48>
c001f8aa:	50                   	push   eax
c001f8ab:	50                   	push   eax
c001f8ac:	6a 01                	push   0x1
c001f8ae:	56                   	push   esi
c001f8af:	52                   	push   edx
c001f8b0:	53                   	push   ebx
c001f8b1:	51                   	push   ecx
c001f8b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f8b6:	e8 87 fb ff ff       	call   c001f442 <ATA::access(unsigned long long, int, void*, bool)>
c001f8bb:	83 c4 20             	add    esp,0x20
c001f8be:	85 c0                	test   eax,eax
c001f8c0:	0f 95 c0             	setne  al
c001f8c3:	0f b6 c0             	movzx  eax,al
c001f8c6:	5b                   	pop    ebx
c001f8c7:	5e                   	pop    esi
c001f8c8:	5f                   	pop    edi
c001f8c9:	c3                   	ret    

c001f8ca <ATA::detectCHS()>:
c001f8ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8ce:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001f8d4:	c1 e0 06             	shl    eax,0x6
c001f8d7:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001f8dd:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001f8e7:	c7 44 24 04 c8 5c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025cc8
c001f8ef:	e9 1e 07 ff ff       	jmp    c0010012 <KePanic(char const*)>

c001f8f4 <ATA::open(int, int, void*)>:
c001f8f4:	53                   	push   ebx
c001f8f5:	83 ec 08             	sub    esp,0x8
c001f8f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f8fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f900:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f904:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f90a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f910:	c1 e0 06             	shl    eax,0x6
c001f913:	01 d0                	add    eax,edx
c001f915:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001f91c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001f922:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001f929:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f933:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001f939:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f940:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001f947:	75 0c                	jne    c001f955 <ATA::open(int, int, void*)+0x61>
c001f949:	83 ec 0c             	sub    esp,0xc
c001f94c:	53                   	push   ebx
c001f94d:	e8 78 ff ff ff       	call   c001f8ca <ATA::detectCHS()>
c001f952:	83 c4 10             	add    esp,0x10
c001f955:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f95b:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f961:	c1 e0 06             	shl    eax,0x6
c001f964:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001f96b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f975:	d1 e8                	shr    eax,1
c001f977:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f97d:	6a 04                	push   0x4
c001f97f:	6a 0c                	push   0xc
c001f981:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f988:	50                   	push   eax
c001f989:	52                   	push   edx
c001f98a:	e8 8d e8 ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f98f:	90                   	nop
c001f990:	90                   	nop
c001f991:	6a 00                	push   0x0
c001f993:	6a 0c                	push   0xc
c001f995:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f99c:	50                   	push   eax
c001f99d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9a3:	e8 74 e8 ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9a8:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f9ae:	83 c4 20             	add    esp,0x20
c001f9b1:	c1 e0 06             	shl    eax,0x6
c001f9b4:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001f9ba:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001f9c1:	0f 84 00 01 00 00    	je     c001fac7 <ATA::open(int, int, void*)+0x1d3>
c001f9c7:	83 ec 0c             	sub    esp,0xc
c001f9ca:	6a 08                	push   0x8
c001f9cc:	e8 13 09 ff ff       	call   c00102e4 <Phys::allocateContiguousPages(int)>
c001f9d1:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f9d7:	c7 04 24 da 5c 02 c0 	mov    DWORD PTR [esp],0xc0025cda
c001f9de:	e8 81 75 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f9e3:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001f9ea:	e8 0e 3b ff ff       	call   c00134fd <Virt::allocateKernelVirtualPages(int)>
c001f9ef:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001f9f5:	6a 03                	push   0x3
c001f9f7:	50                   	push   eax
c001f9f8:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001f9fe:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001fa04:	e8 d7 41 ff ff       	call   c0013be0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001fa09:	83 c4 20             	add    esp,0x20
c001fa0c:	e8 f5 07 ff ff       	call   c0010206 <Phys::allocatePage()>
c001fa11:	83 ec 0c             	sub    esp,0xc
c001fa14:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001fa1a:	6a 01                	push   0x1
c001fa1c:	e8 dc 3a ff ff       	call   c00134fd <Virt::allocateKernelVirtualPages(int)>
c001fa21:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001fa27:	6a 03                	push   0x3
c001fa29:	50                   	push   eax
c001fa2a:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001fa30:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001fa36:	e8 a5 41 ff ff       	call   c0013be0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001fa3b:	83 c4 14             	add    esp,0x14
c001fa3e:	68 13 5d 02 c0       	push   0xc0025d13
c001fa43:	e8 1c 75 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001fa48:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001fa4f:	50                   	push   eax
c001fa50:	6a 12                	push   0x12
c001fa52:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa59:	50                   	push   eax
c001fa5a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa60:	e8 b7 e7 ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa65:	83 c4 20             	add    esp,0x20
c001fa68:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001fa6e:	0f b6 c4             	movzx  eax,ah
c001fa71:	50                   	push   eax
c001fa72:	6a 13                	push   0x13
c001fa74:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa7b:	50                   	push   eax
c001fa7c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa82:	e8 95 e7 ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fa87:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001fa8e:	50                   	push   eax
c001fa8f:	6a 14                	push   0x14
c001fa91:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fa98:	50                   	push   eax
c001fa99:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fa9f:	e8 78 e7 ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001faa4:	83 c4 20             	add    esp,0x20
c001faa7:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001faae:	50                   	push   eax
c001faaf:	6a 15                	push   0x15
c001fab1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fab8:	50                   	push   eax
c001fab9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fabf:	e8 58 e7 ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fac4:	83 c4 10             	add    esp,0x10
c001fac7:	83 ec 0c             	sub    esp,0xc
c001faca:	53                   	push   ebx
c001facb:	e8 76 a3 fe ff       	call   c0009e46 <PhysicalDisk::startCache()>
c001fad0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fad3:	e8 0e b2 fe ff       	call   c000ace6 <createPartitionsForDisk(PhysicalDisk*)>
c001fad8:	31 c0                	xor    eax,eax
c001fada:	83 c4 18             	add    esp,0x18
c001fadd:	5b                   	pop    ebx
c001fade:	c3                   	ret    

c001fadf <combineCharAndColour(char, unsigned char)>:
c001fadf:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001fae4:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001faea:	c1 e0 08             	shl    eax,0x8
c001faed:	09 d0                	or     eax,edx
c001faef:	c3                   	ret    

c001faf0 <combineColours(unsigned char, unsigned char)>:
c001faf0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001faf5:	c1 e0 04             	shl    eax,0x4
c001faf8:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001fafc:	c3                   	ret    
c001fafd:	90                   	nop

c001fafe <ATAPI::write(unsigned long long, int, void*)>:
c001fafe:	b8 03 00 00 00       	mov    eax,0x3
c001fb03:	c3                   	ret    

c001fb04 <ATAPI::close(int, int, void*)>:
c001fb04:	83 ec 0c             	sub    esp,0xc
c001fb07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb0b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fb11:	85 c0                	test   eax,eax
c001fb13:	74 0c                	je     c001fb21 <ATAPI::close(int, int, void*)+0x1d>
c001fb15:	83 ec 0c             	sub    esp,0xc
c001fb18:	8b 10                	mov    edx,DWORD PTR [eax]
c001fb1a:	50                   	push   eax
c001fb1b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fb1e:	83 c4 10             	add    esp,0x10
c001fb21:	31 c0                	xor    eax,eax
c001fb23:	83 c4 0c             	add    esp,0xc
c001fb26:	c3                   	ret    
c001fb27:	90                   	nop

c001fb28 <ATAPI::ATAPI()>:
c001fb28:	83 ec 0c             	sub    esp,0xc
c001fb2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb2f:	83 ec 04             	sub    esp,0x4
c001fb32:	68 00 08 00 00       	push   0x800
c001fb37:	68 c5 5e 02 c0       	push   0xc0025ec5
c001fb3c:	50                   	push   eax
c001fb3d:	e8 9c a2 fe ff       	call   c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fb42:	83 c4 10             	add    esp,0x10
c001fb45:	ba d4 5d 02 c0       	mov    edx,0xc0025dd4
c001fb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4e:	89 10                	mov    DWORD PTR [eax],edx
c001fb50:	90                   	nop
c001fb51:	83 c4 0c             	add    esp,0xc
c001fb54:	c3                   	ret    
c001fb55:	90                   	nop

c001fb56 <ATAPI::readyForCommand()>:
c001fb56:	56                   	push   esi
c001fb57:	53                   	push   ebx
c001fb58:	31 db                	xor    ebx,ebx
c001fb5a:	50                   	push   eax
c001fb5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb5f:	50                   	push   eax
c001fb60:	6a 0c                	push   0xc
c001fb62:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fb69:	50                   	push   eax
c001fb6a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fb70:	e8 67 e7 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001fb75:	83 c4 10             	add    esp,0x10
c001fb78:	a8 88                	test   al,0x88
c001fb7a:	74 26                	je     c001fba2 <ATAPI::readyForCommand()+0x4c>
c001fb7c:	43                   	inc    ebx
c001fb7d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001fb83:	7e da                	jle    c001fb5f <ATAPI::readyForCommand()+0x9>
c001fb85:	51                   	push   ecx
c001fb86:	51                   	push   ecx
c001fb87:	6a 00                	push   0x0
c001fb89:	68 5e 01 00 00       	push   0x15e
c001fb8e:	e8 e9 75 ff ff       	call   c001717c <milliTenthSleep(unsigned long long)>
c001fb93:	83 c4 10             	add    esp,0x10
c001fb96:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001fb9c:	75 c1                	jne    c001fb5f <ATAPI::readyForCommand()+0x9>
c001fb9e:	31 c0                	xor    eax,eax
c001fba0:	eb 02                	jmp    c001fba4 <ATAPI::readyForCommand()+0x4e>
c001fba2:	b0 01                	mov    al,0x1
c001fba4:	5a                   	pop    edx
c001fba5:	5b                   	pop    ebx
c001fba6:	5e                   	pop    esi
c001fba7:	c3                   	ret    

c001fba8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fba8:	55                   	push   ebp
c001fba9:	57                   	push   edi
c001fbaa:	56                   	push   esi
c001fbab:	53                   	push   ebx
c001fbac:	83 ec 20             	sub    esp,0x20
c001fbaf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fbb3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001fbb7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001fbbb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001fbbf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fbc3:	6a 01                	push   0x1
c001fbc5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbcc:	50                   	push   eax
c001fbcd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbd3:	e8 4e e8 ff ff       	call   c001e426 <IDE::enableIRQs(unsigned char, bool)>
c001fbd8:	5e                   	pop    esi
c001fbd9:	58                   	pop    eax
c001fbda:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fbe1:	50                   	push   eax
c001fbe2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbe8:	e8 09 e6 ff ff       	call   c001e1f6 <IDE::prepareInterrupt(unsigned char)>
c001fbed:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fbf0:	e8 61 ff ff ff       	call   c001fb56 <ATAPI::readyForCommand()>
c001fbf5:	83 c4 10             	add    esp,0x10
c001fbf8:	84 c0                	test   al,al
c001fbfa:	75 0a                	jne    c001fc06 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fbfc:	bb 01 00 00 00       	mov    ebx,0x1
c001fc01:	e9 60 02 00 00       	jmp    c001fe66 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001fc06:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001fc0c:	c1 e0 04             	shl    eax,0x4
c001fc0f:	0f b6 c0             	movzx  eax,al
c001fc12:	50                   	push   eax
c001fc13:	6a 06                	push   0x6
c001fc15:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc1c:	50                   	push   eax
c001fc1d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc23:	e8 f4 e5 ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc28:	6a 00                	push   0x0
c001fc2a:	6a 01                	push   0x1
c001fc2c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc33:	50                   	push   eax
c001fc34:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc3a:	e8 dd e5 ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc3f:	83 c4 20             	add    esp,0x20
c001fc42:	0f b6 c3             	movzx  eax,bl
c001fc45:	0f b6 df             	movzx  ebx,bh
c001fc48:	50                   	push   eax
c001fc49:	6a 04                	push   0x4
c001fc4b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc52:	50                   	push   eax
c001fc53:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc59:	e8 be e5 ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc5e:	53                   	push   ebx
c001fc5f:	6a 05                	push   0x5
c001fc61:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc68:	50                   	push   eax
c001fc69:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc6f:	e8 a8 e5 ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc74:	83 c4 20             	add    esp,0x20
c001fc77:	68 a0 00 00 00       	push   0xa0
c001fc7c:	6a 07                	push   0x7
c001fc7e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc85:	50                   	push   eax
c001fc86:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc8c:	e8 8b e5 ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc91:	83 c4 0c             	add    esp,0xc
c001fc94:	6a 01                	push   0x1
c001fc96:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc9d:	50                   	push   eax
c001fc9e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fca4:	e8 19 f3 ff ff       	call   c001efc2 <IDE::polling(unsigned char, unsigned int)>
c001fca9:	83 c4 10             	add    esp,0x10
c001fcac:	0f b6 d8             	movzx  ebx,al
c001fcaf:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001fcb5:	85 db                	test   ebx,ebx
c001fcb7:	74 20                	je     c001fcd9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fcb9:	53                   	push   ebx
c001fcba:	0f b6 c0             	movzx  eax,al
c001fcbd:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001fcc4:	52                   	push   edx
c001fcc5:	50                   	push   eax
c001fcc6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fccc:	e8 37 f2 ff ff       	call   c001ef08 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fcd1:	83 c4 10             	add    esp,0x10
c001fcd4:	e9 8d 01 00 00       	jmp    c001fe66 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001fcd9:	0f b6 c0             	movzx  eax,al
c001fcdc:	53                   	push   ebx
c001fcdd:	53                   	push   ebx
c001fcde:	50                   	push   eax
c001fcdf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fce5:	e8 20 e5 ff ff       	call   c001e20a <IDE::getBase(unsigned char)>
c001fcea:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fcee:	b9 06 00 00 00       	mov    ecx,0x6
c001fcf3:	89 c2                	mov    edx,eax
c001fcf5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fcf8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fcfc:	83 c4 10             	add    esp,0x10
c001fcff:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001fd04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fd08:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fd0e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fd15:	85 db                	test   ebx,ebx
c001fd17:	0f 84 ec 00 00 00    	je     c001fe09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001fd1d:	51                   	push   ecx
c001fd1e:	51                   	push   ecx
c001fd1f:	52                   	push   edx
c001fd20:	50                   	push   eax
c001fd21:	e8 64 e6 ff ff       	call   c001e38a <IDE::waitInterrupt(unsigned char)>
c001fd26:	83 c4 10             	add    esp,0x10
c001fd29:	84 c0                	test   al,al
c001fd2b:	0f 84 cb fe ff ff    	je     c001fbfc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fd31:	56                   	push   esi
c001fd32:	56                   	push   esi
c001fd33:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd3a:	50                   	push   eax
c001fd3b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd41:	e8 b0 e4 ff ff       	call   c001e1f6 <IDE::prepareInterrupt(unsigned char)>
c001fd46:	83 c4 0c             	add    esp,0xc
c001fd49:	6a 04                	push   0x4
c001fd4b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd52:	50                   	push   eax
c001fd53:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd59:	e8 7e e5 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001fd5e:	83 c4 0c             	add    esp,0xc
c001fd61:	89 c6                	mov    esi,eax
c001fd63:	6a 05                	push   0x5
c001fd65:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd6c:	50                   	push   eax
c001fd6d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd73:	e8 64 e5 ff ff       	call   c001e2dc <IDE::read(unsigned char, unsigned char)>
c001fd78:	89 f1                	mov    ecx,esi
c001fd7a:	0f b6 c0             	movzx  eax,al
c001fd7d:	0f b6 f1             	movzx  esi,cl
c001fd80:	c1 e0 08             	shl    eax,0x8
c001fd83:	09 c6                	or     esi,eax
c001fd85:	d1 fe                	sar    esi,1
c001fd87:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001fd8b:	83 c4 10             	add    esp,0x10
c001fd8e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fd93:	74 41                	je     c001fdd6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001fd95:	31 c9                	xor    ecx,ecx
c001fd97:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fd9d:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fda4:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001fda8:	75 0a                	jne    c001fdb4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001fdaa:	01 c9                	add    ecx,ecx
c001fdac:	01 cd                	add    ebp,ecx
c001fdae:	4b                   	dec    ebx
c001fdaf:	e9 54 ff ff ff       	jmp    c001fd08 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001fdb4:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001fdb9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001fdbd:	51                   	push   ecx
c001fdbe:	51                   	push   ecx
c001fdbf:	52                   	push   edx
c001fdc0:	50                   	push   eax
c001fdc1:	e8 44 e4 ff ff       	call   c001e20a <IDE::getBase(unsigned char)>
c001fdc6:	89 c2                	mov    edx,eax
c001fdc8:	89 f0                	mov    eax,esi
c001fdca:	66 ef                	out    dx,ax
c001fdcc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001fdd0:	83 c4 10             	add    esp,0x10
c001fdd3:	41                   	inc    ecx
c001fdd4:	eb c1                	jmp    c001fd97 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001fdd6:	31 f6                	xor    esi,esi
c001fdd8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fdde:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fde5:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001fde9:	75 06                	jne    c001fdf1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001fdeb:	01 f6                	add    esi,esi
c001fded:	01 f5                	add    ebp,esi
c001fdef:	eb bd                	jmp    c001fdae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001fdf1:	51                   	push   ecx
c001fdf2:	51                   	push   ecx
c001fdf3:	52                   	push   edx
c001fdf4:	50                   	push   eax
c001fdf5:	e8 10 e4 ff ff       	call   c001e20a <IDE::getBase(unsigned char)>
c001fdfa:	89 c2                	mov    edx,eax
c001fdfc:	66 ed                	in     ax,dx
c001fdfe:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001fe03:	83 c4 10             	add    esp,0x10
c001fe06:	46                   	inc    esi
c001fe07:	eb cf                	jmp    c001fdd8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001fe09:	51                   	push   ecx
c001fe0a:	51                   	push   ecx
c001fe0b:	52                   	push   edx
c001fe0c:	50                   	push   eax
c001fe0d:	e8 78 e5 ff ff       	call   c001e38a <IDE::waitInterrupt(unsigned char)>
c001fe12:	83 c4 10             	add    esp,0x10
c001fe15:	84 c0                	test   al,al
c001fe17:	0f 84 df fd ff ff    	je     c001fbfc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fe1d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fe22:	52                   	push   edx
c001fe23:	52                   	push   edx
c001fe24:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe2b:	50                   	push   eax
c001fe2c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe32:	e8 bf e3 ff ff       	call   c001e1f6 <IDE::prepareInterrupt(unsigned char)>
c001fe37:	83 c4 10             	add    esp,0x10
c001fe3a:	50                   	push   eax
c001fe3b:	50                   	push   eax
c001fe3c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe43:	50                   	push   eax
c001fe44:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe4a:	e8 bb e3 ff ff       	call   c001e20a <IDE::getBase(unsigned char)>
c001fe4f:	8d 50 07             	lea    edx,[eax+0x7]
c001fe52:	ec                   	in     al,dx
c001fe53:	83 c4 10             	add    esp,0x10
c001fe56:	a8 88                	test   al,0x88
c001fe58:	74 0a                	je     c001fe64 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001fe5a:	4b                   	dec    ebx
c001fe5b:	75 dd                	jne    c001fe3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001fe5d:	bb 02 00 00 00       	mov    ebx,0x2
c001fe62:	eb 02                	jmp    c001fe66 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001fe64:	31 db                	xor    ebx,ebx
c001fe66:	83 c4 1c             	add    esp,0x1c
c001fe69:	89 d8                	mov    eax,ebx
c001fe6b:	5b                   	pop    ebx
c001fe6c:	5e                   	pop    esi
c001fe6d:	5f                   	pop    edi
c001fe6e:	5d                   	pop    ebp
c001fe6f:	c3                   	ret    

c001fe70 <ATAPI::diskRemoved()>:
c001fe70:	53                   	push   ebx
c001fe71:	83 ec 14             	sub    esp,0x14
c001fe74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fe78:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001fe7f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001fe85:	e8 4c ab fe ff       	call   c000a9d6 <LogicalDisk::unmount()>
c001fe8a:	58                   	pop    eax
c001fe8b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001fe91:	e8 52 b5 fe ff       	call   c000b3e8 <VCache::writeWriteBuffer()>
c001fe96:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001fe9c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fea0:	83 c4 18             	add    esp,0x18
c001fea3:	5b                   	pop    ebx
c001fea4:	e9 2f b5 fe ff       	jmp    c000b3d8 <VCache::invalidateReadBuffer()>
c001fea9:	90                   	nop

c001feaa <ATAPI::eject()>:
c001feaa:	57                   	push   edi
c001feab:	b9 03 00 00 00       	mov    ecx,0x3
c001feb0:	53                   	push   ebx
c001feb1:	83 ec 14             	sub    esp,0x14
c001feb4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001feb8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001febc:	fc                   	cld    
c001febd:	31 c0                	xor    eax,eax
c001febf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fec1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001fec6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001fecb:	50                   	push   eax
c001fecc:	50                   	push   eax
c001fecd:	6a 00                	push   0x0
c001fecf:	6a 00                	push   0x0
c001fed1:	6a 00                	push   0x0
c001fed3:	6a 02                	push   0x2
c001fed5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fed9:	50                   	push   eax
c001feda:	53                   	push   ebx
c001fedb:	e8 c8 fc ff ff       	call   c001fba8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fee0:	83 c4 14             	add    esp,0x14
c001fee3:	53                   	push   ebx
c001fee4:	e8 87 ff ff ff       	call   c001fe70 <ATAPI::diskRemoved()>
c001fee9:	83 c4 24             	add    esp,0x24
c001feec:	31 c0                	xor    eax,eax
c001feee:	5b                   	pop    ebx
c001feef:	5f                   	pop    edi
c001fef0:	c3                   	ret    
c001fef1:	90                   	nop

c001fef2 <ATAPI::diskInserted()>:
c001fef2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fef6:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001fefd:	c3                   	ret    

c001fefe <ATAPI::detectMedia()>:
c001fefe:	56                   	push   esi
c001feff:	53                   	push   ebx
c001ff00:	83 ec 28             	sub    esp,0x28
c001ff03:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ff07:	6a 0c                	push   0xc
c001ff09:	6a 00                	push   0x0
c001ff0b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001ff0f:	56                   	push   esi
c001ff10:	e8 db 05 fe ff       	call   c00004f0 <memset>
c001ff15:	58                   	pop    eax
c001ff16:	5a                   	pop    edx
c001ff17:	6a 00                	push   0x0
c001ff19:	6a 00                	push   0x0
c001ff1b:	6a 00                	push   0x0
c001ff1d:	6a 00                	push   0x0
c001ff1f:	56                   	push   esi
c001ff20:	53                   	push   ebx
c001ff21:	e8 82 fc ff ff       	call   c001fba8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ff26:	83 c4 1c             	add    esp,0x1c
c001ff29:	6a 0c                	push   0xc
c001ff2b:	6a 00                	push   0x0
c001ff2d:	56                   	push   esi
c001ff2e:	e8 bd 05 fe ff       	call   c00004f0 <memset>
c001ff33:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001ff38:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001ff3d:	59                   	pop    ecx
c001ff3e:	58                   	pop    eax
c001ff3f:	6a 01                	push   0x1
c001ff41:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001ff45:	50                   	push   eax
c001ff46:	6a 00                	push   0x0
c001ff48:	6a 12                	push   0x12
c001ff4a:	56                   	push   esi
c001ff4b:	53                   	push   ebx
c001ff4c:	e8 57 fc ff ff       	call   c001fba8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ff51:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001ff55:	83 c4 20             	add    esp,0x20
c001ff58:	83 e0 7f             	and    eax,0x7f
c001ff5b:	83 f8 70             	cmp    eax,0x70
c001ff5e:	74 15                	je     c001ff75 <ATAPI::detectMedia()+0x77>
c001ff60:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ff67:	75 0c                	jne    c001ff75 <ATAPI::detectMedia()+0x77>
c001ff69:	83 ec 0c             	sub    esp,0xc
c001ff6c:	53                   	push   ebx
c001ff6d:	e8 80 ff ff ff       	call   c001fef2 <ATAPI::diskInserted()>
c001ff72:	83 c4 10             	add    esp,0x10
c001ff75:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ff79:	83 e0 0f             	and    eax,0xf
c001ff7c:	83 f8 02             	cmp    eax,0x2
c001ff7f:	75 1b                	jne    c001ff9c <ATAPI::detectMedia()+0x9e>
c001ff81:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001ff86:	75 2d                	jne    c001ffb5 <ATAPI::detectMedia()+0xb7>
c001ff88:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ff8f:	74 24                	je     c001ffb5 <ATAPI::detectMedia()+0xb7>
c001ff91:	83 ec 0c             	sub    esp,0xc
c001ff94:	53                   	push   ebx
c001ff95:	e8 d6 fe ff ff       	call   c001fe70 <ATAPI::diskRemoved()>
c001ff9a:	eb 16                	jmp    c001ffb2 <ATAPI::detectMedia()+0xb4>
c001ff9c:	85 c0                	test   eax,eax
c001ff9e:	75 15                	jne    c001ffb5 <ATAPI::detectMedia()+0xb7>
c001ffa0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001ffa7:	75 0c                	jne    c001ffb5 <ATAPI::detectMedia()+0xb7>
c001ffa9:	83 ec 0c             	sub    esp,0xc
c001ffac:	53                   	push   ebx
c001ffad:	e8 40 ff ff ff       	call   c001fef2 <ATAPI::diskInserted()>
c001ffb2:	83 c4 10             	add    esp,0x10
c001ffb5:	83 c4 24             	add    esp,0x24
c001ffb8:	5b                   	pop    ebx
c001ffb9:	5e                   	pop    esi
c001ffba:	c3                   	ret    
c001ffbb:	90                   	nop

c001ffbc <ATAPI::open(int, int, void*)>:
c001ffbc:	56                   	push   esi
c001ffbd:	53                   	push   ebx
c001ffbe:	50                   	push   eax
c001ffbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ffc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ffc7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ffcb:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ffd1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ffd7:	c1 e0 06             	shl    eax,0x6
c001ffda:	01 d0                	add    eax,edx
c001ffdc:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001ffe3:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001ffe9:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001fff0:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001fffa:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020000:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020007:	6a 04                	push   0x4
c0020009:	6a 0c                	push   0xc
c002000b:	51                   	push   ecx
c002000c:	52                   	push   edx
c002000d:	e8 0a e2 ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020012:	90                   	nop
c0020013:	90                   	nop
c0020014:	6a 00                	push   0x0
c0020016:	6a 0c                	push   0xc
c0020018:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002001f:	50                   	push   eax
c0020020:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020026:	e8 f1 e1 ff ff       	call   c001e21c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002002b:	83 c4 14             	add    esp,0x14
c002002e:	68 78 01 00 00       	push   0x178
c0020033:	e8 93 fc fe ff       	call   c000fccb <malloc>
c0020038:	83 c4 0c             	add    esp,0xc
c002003b:	89 c6                	mov    esi,eax
c002003d:	6a 00                	push   0x0
c002003f:	68 ff ff ff 7f       	push   0x7fffffff
c0020044:	6a 00                	push   0x0
c0020046:	6a 00                	push   0x0
c0020048:	53                   	push   ebx
c0020049:	68 77 5f 02 c0       	push   0xc0025f77
c002004e:	50                   	push   eax
c002004f:	e8 c0 a7 fe ff       	call   c000a814 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020054:	83 c4 14             	add    esp,0x14
c0020057:	56                   	push   esi
c0020058:	e8 77 a8 fe ff       	call   c000a8d4 <LogicalDisk::assignDriveLetter()>
c002005d:	5a                   	pop    edx
c002005e:	0f be c0             	movsx  eax,al
c0020061:	59                   	pop    ecx
c0020062:	50                   	push   eax
c0020063:	68 bc 5d 02 c0       	push   0xc0025dbc
c0020068:	e8 f7 6e fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c002006d:	58                   	pop    eax
c002006e:	5a                   	pop    edx
c002006f:	56                   	push   esi
c0020070:	53                   	push   ebx
c0020071:	e8 86 99 fe ff       	call   c00099fc <Device::addChild(Device*)>
c0020076:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002007c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002007f:	e8 c2 9d fe ff       	call   c0009e46 <PhysicalDisk::startCache()>
c0020084:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002008b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002008e:	e8 6b fe ff ff       	call   c001fefe <ATAPI::detectMedia()>
c0020093:	83 c4 14             	add    esp,0x14
c0020096:	31 c0                	xor    eax,eax
c0020098:	5b                   	pop    ebx
c0020099:	5e                   	pop    esi
c002009a:	c3                   	ret    
c002009b:	90                   	nop

c002009c <ATAPI::read(unsigned long long, int, void*)>:
c002009c:	55                   	push   ebp
c002009d:	57                   	push   edi
c002009e:	56                   	push   esi
c002009f:	53                   	push   ebx
c00200a0:	83 ec 1c             	sub    esp,0x1c
c00200a3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00200a7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00200ab:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00200af:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00200b6:	74 3c                	je     c00200f4 <ATAPI::read(unsigned long long, int, void*)+0x58>
c00200b8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00200bc:	b9 03 00 00 00       	mov    ecx,0x3
c00200c1:	fc                   	cld    
c00200c2:	31 c0                	xor    eax,eax
c00200c4:	0f ce                	bswap  esi
c00200c6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00200c8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00200cd:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c00200d1:	89 e8                	mov    eax,ebp
c00200d3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00200d7:	50                   	push   eax
c00200d8:	50                   	push   eax
c00200d9:	55                   	push   ebp
c00200da:	c1 e5 0b             	shl    ebp,0xb
c00200dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00200e1:	6a 00                	push   0x0
c00200e3:	55                   	push   ebp
c00200e4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00200e8:	50                   	push   eax
c00200e9:	53                   	push   ebx
c00200ea:	e8 b9 fa ff ff       	call   c001fba8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00200ef:	83 c4 20             	add    esp,0x20
c00200f2:	eb 1a                	jmp    c002010e <ATAPI::read(unsigned long long, int, void*)+0x72>
c00200f4:	83 ec 0c             	sub    esp,0xc
c00200f7:	53                   	push   ebx
c00200f8:	e8 01 fe ff ff       	call   c001fefe <ATAPI::detectMedia()>
c00200fd:	83 c4 10             	add    esp,0x10
c0020100:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020107:	75 af                	jne    c00200b8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020109:	b8 02 00 00 00       	mov    eax,0x2
c002010e:	83 c4 1c             	add    esp,0x1c
c0020111:	5b                   	pop    ebx
c0020112:	5e                   	pop    esi
c0020113:	5f                   	pop    edi
c0020114:	5d                   	pop    ebp
c0020115:	c3                   	ret    

c0020116 <SATA::close(int, int, void*)>:
c0020116:	83 ec 0c             	sub    esp,0xc
c0020119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002011d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020123:	85 c0                	test   eax,eax
c0020125:	74 0c                	je     c0020133 <SATA::close(int, int, void*)+0x1d>
c0020127:	83 ec 0c             	sub    esp,0xc
c002012a:	8b 10                	mov    edx,DWORD PTR [eax]
c002012c:	50                   	push   eax
c002012d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020130:	83 c4 10             	add    esp,0x10
c0020133:	31 c0                	xor    eax,eax
c0020135:	83 c4 0c             	add    esp,0xc
c0020138:	c3                   	ret    
c0020139:	90                   	nop

c002013a <SATA::powerSaving(PowerSavingLevel)>:
c002013a:	c3                   	ret    
c002013b:	90                   	nop

c002013c <SATA::open(int, int, void*)>:
c002013c:	56                   	push   esi
c002013d:	53                   	push   ebx
c002013e:	83 ec 10             	sub    esp,0x10
c0020141:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020145:	68 04 5e 02 c0       	push   0xc0025e04
c002014a:	e8 15 6e fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c002014f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020153:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002015d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020163:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002016d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020171:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002017b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020181:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020188:	e8 79 00 ff ff       	call   c0010206 <Phys::allocatePage()>
c002018d:	89 c6                	mov    esi,eax
c002018f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020195:	81 c6 00 10 00 00    	add    esi,0x1000
c002019b:	e8 66 00 ff ff       	call   c0010206 <Phys::allocatePage()>
c00201a0:	83 c4 10             	add    esp,0x10
c00201a3:	39 c6                	cmp    esi,eax
c00201a5:	74 10                	je     c00201b7 <SATA::open(int, int, void*)+0x7b>
c00201a7:	83 ec 0c             	sub    esp,0xc
c00201aa:	68 10 5e 02 c0       	push   0xc0025e10
c00201af:	e8 5e fe fe ff       	call   c0010012 <KePanic(char const*)>
c00201b4:	83 c4 10             	add    esp,0x10
c00201b7:	83 ec 0c             	sub    esp,0xc
c00201ba:	6a 02                	push   0x2
c00201bc:	e8 3c 33 ff ff       	call   c00134fd <Virt::allocateKernelVirtualPages(int)>
c00201c1:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00201c7:	6a 03                	push   0x3
c00201c9:	50                   	push   eax
c00201ca:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00201d0:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c00201d6:	e8 05 3a ff ff       	call   c0013be0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00201db:	83 c4 14             	add    esp,0x14
c00201de:	53                   	push   ebx
c00201df:	e8 62 9c fe ff       	call   c0009e46 <PhysicalDisk::startCache()>
c00201e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00201e7:	e8 fa aa fe ff       	call   c000ace6 <createPartitionsForDisk(PhysicalDisk*)>
c00201ec:	83 c4 14             	add    esp,0x14
c00201ef:	31 c0                	xor    eax,eax
c00201f1:	5b                   	pop    ebx
c00201f2:	5e                   	pop    esi
c00201f3:	c3                   	ret    

c00201f4 <SATA::SATA()>:
c00201f4:	83 ec 0c             	sub    esp,0xc
c00201f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201fb:	83 ec 04             	sub    esp,0x4
c00201fe:	68 00 02 00 00       	push   0x200
c0020203:	68 24 5e 02 c0       	push   0xc0025e24
c0020208:	50                   	push   eax
c0020209:	e8 d0 9b fe ff       	call   c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>
c002020e:	83 c4 10             	add    esp,0x10
c0020211:	ba 94 5e 02 c0       	mov    edx,0xc0025e94
c0020216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002021a:	89 10                	mov    DWORD PTR [eax],edx
c002021c:	90                   	nop
c002021d:	83 c4 0c             	add    esp,0xc
c0020220:	c3                   	ret    
c0020221:	90                   	nop

c0020222 <SATA::access(unsigned long long, int, void*, bool)>:
c0020222:	55                   	push   ebp
c0020223:	57                   	push   edi
c0020224:	56                   	push   esi
c0020225:	53                   	push   ebx
c0020226:	83 ec 2c             	sub    esp,0x2c
c0020229:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002022d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020231:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020235:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020239:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002023d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020241:	fa                   	cli    
c0020242:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0020248:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002024d:	7e 10                	jle    c002025f <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c002024f:	83 ec 0c             	sub    esp,0xc
c0020252:	68 34 5e 02 c0       	push   0xc0025e34
c0020257:	e8 b6 fd fe ff       	call   c0010012 <KePanic(char const*)>
c002025c:	83 c4 10             	add    esp,0x10
c002025f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0020265:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002026b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020271:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020275:	89 d0                	mov    eax,edx
c0020277:	c1 e0 07             	shl    eax,0x7
c002027a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002027e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020288:	51                   	push   ecx
c0020289:	8d 42 02             	lea    eax,[edx+0x2]
c002028c:	51                   	push   ecx
c002028d:	c1 e0 07             	shl    eax,0x7
c0020290:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020294:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020298:	50                   	push   eax
c0020299:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002029f:	e8 fe ed ff ff       	call   c001f0a2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00202a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00202a8:	83 c4 10             	add    esp,0x10
c00202ab:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00202b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00202b4:	0f 84 a4 01 00 00    	je     c002045e <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c00202ba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00202be:	c1 e0 09             	shl    eax,0x9
c00202c1:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00202c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00202ca:	74 0e                	je     c00202da <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c00202cc:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00202d2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00202d6:	89 c1                	mov    ecx,eax
c00202d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00202da:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00202e0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00202e4:	8d 42 02             	lea    eax,[edx+0x2]
c00202e7:	c1 e0 07             	shl    eax,0x7
c00202ea:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00202ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00202f0:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00202f6:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00202fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020300:	c1 e1 05             	shl    ecx,0x5
c0020303:	01 c8                	add    eax,ecx
c0020305:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020309:	83 e1 01             	and    ecx,0x1
c002030c:	89 ce                	mov    esi,ecx
c002030e:	8a 08                	mov    cl,BYTE PTR [eax]
c0020310:	c1 e6 06             	shl    esi,0x6
c0020313:	83 e1 bf             	and    ecx,0xffffffbf
c0020316:	09 f1                	or     ecx,esi
c0020318:	88 08                	mov    BYTE PTR [eax],cl
c002031a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002031c:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0020322:	81 c9 05 00 01 00    	or     ecx,0x10005
c0020328:	89 08                	mov    DWORD PTR [eax],ecx
c002032a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0020330:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0020336:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002033c:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002033f:	50                   	push   eax
c0020340:	68 90 00 00 00       	push   0x90
c0020345:	6a 00                	push   0x0
c0020347:	56                   	push   esi
c0020348:	e8 a3 01 fe ff       	call   c00004f0 <memset>
c002034d:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020353:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020359:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002035d:	83 c4 10             	add    esp,0x10
c0020360:	48                   	dec    eax
c0020361:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020366:	89 c1                	mov    ecx,eax
c0020368:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002036e:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020373:	09 c8                	or     eax,ecx
c0020375:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002037b:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c0020381:	83 c8 80             	or     eax,0xffffff80
c0020384:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002038a:	66 8b 06             	mov    ax,WORD PTR [esi]
c002038d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020391:	25 00 7f 00 00       	and    eax,0x7f00
c0020396:	0d 27 80 ff ff       	or     eax,0xffff8027
c002039b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00203a0:	66 89 06             	mov    WORD PTR [esi],ax
c00203a3:	b0 35                	mov    al,0x35
c00203a5:	75 02                	jne    c00203a9 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c00203a7:	b0 25                	mov    al,0x25
c00203a9:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00203ac:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c00203b0:	89 e8                	mov    eax,ebp
c00203b2:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00203b6:	c1 e8 10             	shr    eax,0x10
c00203b9:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00203bc:	89 e8                	mov    eax,ebp
c00203be:	c1 e8 18             	shr    eax,0x18
c00203c1:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00203c4:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00203c8:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00203cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00203cf:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00203d2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00203d6:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00203da:	89 d6                	mov    esi,edx
c00203dc:	31 c0                	xor    eax,eax
c00203de:	c1 e6 07             	shl    esi,0x7
c00203e1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00203e5:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00203eb:	80 e1 88             	and    cl,0x88
c00203ee:	74 0a                	je     c00203fa <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c00203f0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00203f5:	74 0a                	je     c0020401 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00203f7:	40                   	inc    eax
c00203f8:	eb eb                	jmp    c00203e5 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c00203fa:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00203ff:	75 0a                	jne    c002040b <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c0020401:	83 ec 0c             	sub    esp,0xc
c0020404:	68 6d 5e 02 c0       	push   0xc0025e6d
c0020409:	eb 36                	jmp    c0020441 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c002040b:	b8 01 00 00 00       	mov    eax,0x1
c0020410:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020414:	c1 e2 07             	shl    edx,0x7
c0020417:	d3 e0                	shl    eax,cl
c0020419:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002041d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0020423:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0020429:	85 c8                	test   eax,ecx
c002042b:	74 25                	je     c0020452 <SATA::access(unsigned long long, int, void*, bool)+0x230>
c002042d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0020433:	0f ba e1 1e          	bt     ecx,0x1e
c0020437:	73 ea                	jae    c0020423 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c0020439:	83 ec 0c             	sub    esp,0xc
c002043c:	68 7b 5e 02 c0       	push   0xc0025e7b
c0020441:	e8 1e 6b fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020446:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c002044d:	83 c4 10             	add    esp,0x10
c0020450:	eb 13                	jmp    c0020465 <SATA::access(unsigned long long, int, void*, bool)+0x243>
c0020452:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0020458:	0f ba e0 1e          	bt     eax,0x1e
c002045c:	73 18                	jae    c0020476 <SATA::access(unsigned long long, int, void*, bool)+0x254>
c002045e:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0020465:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c002046c:	75 01                	jne    c002046f <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c002046e:	fb                   	sti    
c002046f:	b8 01 00 00 00       	mov    eax,0x1
c0020474:	eb 2c                	jmp    c00204a2 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020476:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002047b:	75 10                	jne    c002048d <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c002047d:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020487:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002048b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002048d:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0020494:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0020499:	85 c0                	test   eax,eax
c002049b:	75 03                	jne    c00204a0 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002049d:	fb                   	sti    
c002049e:	eb 02                	jmp    c00204a2 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c00204a0:	31 c0                	xor    eax,eax
c00204a2:	83 c4 2c             	add    esp,0x2c
c00204a5:	5b                   	pop    ebx
c00204a6:	5e                   	pop    esi
c00204a7:	5f                   	pop    edi
c00204a8:	5d                   	pop    ebp
c00204a9:	c3                   	ret    

c00204aa <SATA::read(unsigned long long, int, void*)>:
c00204aa:	57                   	push   edi
c00204ab:	b8 04 00 00 00       	mov    eax,0x4
c00204b0:	56                   	push   esi
c00204b1:	53                   	push   ebx
c00204b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00204b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00204ba:	8d 7a ff             	lea    edi,[edx-0x1]
c00204bd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00204c1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00204c5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00204cb:	77 25                	ja     c00204f2 <SATA::read(unsigned long long, int, void*)+0x48>
c00204cd:	b8 06 00 00 00       	mov    eax,0x6
c00204d2:	85 f6                	test   esi,esi
c00204d4:	74 1c                	je     c00204f2 <SATA::read(unsigned long long, int, void*)+0x48>
c00204d6:	50                   	push   eax
c00204d7:	50                   	push   eax
c00204d8:	6a 00                	push   0x0
c00204da:	56                   	push   esi
c00204db:	52                   	push   edx
c00204dc:	53                   	push   ebx
c00204dd:	51                   	push   ecx
c00204de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00204e2:	e8 3b fd ff ff       	call   c0020222 <SATA::access(unsigned long long, int, void*, bool)>
c00204e7:	83 c4 20             	add    esp,0x20
c00204ea:	85 c0                	test   eax,eax
c00204ec:	0f 95 c0             	setne  al
c00204ef:	0f b6 c0             	movzx  eax,al
c00204f2:	5b                   	pop    ebx
c00204f3:	5e                   	pop    esi
c00204f4:	5f                   	pop    edi
c00204f5:	c3                   	ret    

c00204f6 <SATA::write(unsigned long long, int, void*)>:
c00204f6:	55                   	push   ebp
c00204f7:	b8 04 00 00 00       	mov    eax,0x4
c00204fc:	57                   	push   edi
c00204fd:	56                   	push   esi
c00204fe:	53                   	push   ebx
c00204ff:	83 ec 0c             	sub    esp,0xc
c0020502:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020506:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002050a:	8d 73 ff             	lea    esi,[ebx-0x1]
c002050d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0020511:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020515:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002051b:	77 3d                	ja     c002055a <SATA::write(unsigned long long, int, void*)+0x64>
c002051d:	b8 06 00 00 00       	mov    eax,0x6
c0020522:	85 ed                	test   ebp,ebp
c0020524:	74 34                	je     c002055a <SATA::write(unsigned long long, int, void*)+0x64>
c0020526:	c1 e3 09             	shl    ebx,0x9
c0020529:	01 eb                	add    ebx,ebp
c002052b:	89 d6                	mov    esi,edx
c002052d:	89 cf                	mov    edi,ecx
c002052f:	83 c6 01             	add    esi,0x1
c0020532:	83 d7 00             	adc    edi,0x0
c0020535:	50                   	push   eax
c0020536:	50                   	push   eax
c0020537:	6a 01                	push   0x1
c0020539:	55                   	push   ebp
c002053a:	81 c5 00 02 00 00    	add    ebp,0x200
c0020540:	6a 01                	push   0x1
c0020542:	51                   	push   ecx
c0020543:	52                   	push   edx
c0020544:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020548:	e8 d5 fc ff ff       	call   c0020222 <SATA::access(unsigned long long, int, void*, bool)>
c002054d:	83 c4 20             	add    esp,0x20
c0020550:	89 f2                	mov    edx,esi
c0020552:	89 f9                	mov    ecx,edi
c0020554:	39 dd                	cmp    ebp,ebx
c0020556:	75 d3                	jne    c002052b <SATA::write(unsigned long long, int, void*)+0x35>
c0020558:	31 c0                	xor    eax,eax
c002055a:	83 c4 0c             	add    esp,0xc
c002055d:	5b                   	pop    ebx
c002055e:	5e                   	pop    esi
c002055f:	5f                   	pop    edi
c0020560:	5d                   	pop    ebp
c0020561:	c3                   	ret    

c0020562 <SATAPI::write(unsigned long long, int, void*)>:
c0020562:	b8 03 00 00 00       	mov    eax,0x3
c0020567:	c3                   	ret    

c0020568 <SATAPI::close(int, int, void*)>:
c0020568:	83 ec 0c             	sub    esp,0xc
c002056b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002056f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020575:	85 c0                	test   eax,eax
c0020577:	74 0c                	je     c0020585 <SATAPI::close(int, int, void*)+0x1d>
c0020579:	83 ec 0c             	sub    esp,0xc
c002057c:	8b 10                	mov    edx,DWORD PTR [eax]
c002057e:	50                   	push   eax
c002057f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020582:	83 c4 10             	add    esp,0x10
c0020585:	31 c0                	xor    eax,eax
c0020587:	83 c4 0c             	add    esp,0xc
c002058a:	c3                   	ret    
c002058b:	90                   	nop

c002058c <SATAPI::SATAPI()>:
c002058c:	83 ec 0c             	sub    esp,0xc
c002058f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020593:	83 ec 04             	sub    esp,0x4
c0020596:	68 00 08 00 00       	push   0x800
c002059b:	68 c4 5e 02 c0       	push   0xc0025ec4
c00205a0:	50                   	push   eax
c00205a1:	e8 38 98 fe ff       	call   c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>
c00205a6:	83 c4 10             	add    esp,0x10
c00205a9:	ba b8 5f 02 c0       	mov    edx,0xc0025fb8
c00205ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b2:	89 10                	mov    DWORD PTR [eax],edx
c00205b4:	90                   	nop
c00205b5:	83 c4 0c             	add    esp,0xc
c00205b8:	c3                   	ret    
c00205b9:	90                   	nop

c00205ba <SATAPI::diskRemoved()>:
c00205ba:	c3                   	ret    
c00205bb:	90                   	nop

c00205bc <SATAPI::diskInserted()>:
c00205bc:	83 ec 18             	sub    esp,0x18
c00205bf:	68 d0 5e 02 c0       	push   0xc0025ed0
c00205c4:	e8 9b 69 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00205c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00205cd:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c00205d4:	83 c4 1c             	add    esp,0x1c
c00205d7:	c3                   	ret    

c00205d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00205d8:	55                   	push   ebp
c00205d9:	57                   	push   edi
c00205da:	56                   	push   esi
c00205db:	53                   	push   ebx
c00205dc:	83 ec 34             	sub    esp,0x34
c00205df:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00205e3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00205e7:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00205eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00205ef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00205f3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00205f9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00205ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020603:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020609:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002060d:	83 c0 02             	add    eax,0x2
c0020610:	c1 e0 07             	shl    eax,0x7
c0020613:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020617:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002061b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002061f:	c1 e0 07             	shl    eax,0x7
c0020622:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020626:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002062a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020634:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020638:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002063e:	e8 5f ea ff ff       	call   c001f0a2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020643:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020647:	83 c4 10             	add    esp,0x10
c002064a:	b8 01 00 00 00       	mov    eax,0x1
c002064f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020654:	0f 84 57 02 00 00    	je     c00208b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c002065a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020664:	8b 00                	mov    eax,DWORD PTR [eax]
c0020666:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002066c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020672:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020676:	c1 e1 05             	shl    ecx,0x5
c0020679:	01 c8                	add    eax,ecx
c002067b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002067d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020683:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020689:	89 08                	mov    DWORD PTR [eax],ecx
c002068b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020691:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020697:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002069d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00206a0:	8d 7b 40             	lea    edi,[ebx+0x40]
c00206a3:	50                   	push   eax
c00206a4:	68 90 00 00 00       	push   0x90
c00206a9:	6a 00                	push   0x0
c00206ab:	53                   	push   ebx
c00206ac:	e8 3f fe fd ff       	call   c00004f0 <memset>
c00206b1:	b9 0c 00 00 00       	mov    ecx,0xc
c00206b6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00206ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00206bc:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c00206c2:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00206c6:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00206cc:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00206d0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00206d4:	48                   	dec    eax
c00206d5:	25 ff ff 3f 00       	and    eax,0x3fffff
c00206da:	89 c1                	mov    ecx,eax
c00206dc:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00206e2:	25 00 00 c0 ff       	and    eax,0xffc00000
c00206e7:	09 c8                	or     eax,ecx
c00206e9:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00206ef:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c00206f5:	83 c8 80             	or     eax,0xffffff80
c00206f8:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c00206fe:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020701:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020705:	25 00 7f 00 00       	and    eax,0x7f00
c002070a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002070e:	0d 27 80 ff ff       	or     eax,0xffff8027
c0020713:	66 89 03             	mov    WORD PTR [ebx],ax
c0020716:	89 d0                	mov    eax,edx
c0020718:	c1 ea 18             	shr    edx,0x18
c002071b:	c1 e8 10             	shr    eax,0x10
c002071e:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020721:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020724:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020728:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002072b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002072f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020732:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020736:	83 c4 10             	add    esp,0x10
c0020739:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002073d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020741:	31 c0                	xor    eax,eax
c0020743:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020749:	80 e1 88             	and    cl,0x88
c002074c:	74 0a                	je     c0020758 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c002074e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020753:	74 0a                	je     c002075f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c0020755:	40                   	inc    eax
c0020756:	eb eb                	jmp    c0020743 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0020758:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002075d:	75 43                	jne    c00207a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002075f:	83 ec 0c             	sub    esp,0xc
c0020762:	68 e8 5e 02 c0       	push   0xc0025ee8
c0020767:	e8 f8 67 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c002076c:	58                   	pop    eax
c002076d:	5a                   	pop    edx
c002076e:	68 fd 5e 02 c0       	push   0xc0025efd
c0020773:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0020779:	e8 48 21 ff ff       	call   c00128c6 <VgaText::puts(char const*)>
c002077e:	59                   	pop    ecx
c002077f:	5b                   	pop    ebx
c0020780:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020784:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002078a:	e8 ad e9 ff ff       	call   c001f13c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002078f:	5e                   	pop    esi
c0020790:	5f                   	pop    edi
c0020791:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020795:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002079b:	e8 7c e9 ff ff       	call   c001f11c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c00207a0:	eb 48                	jmp    c00207ea <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c00207a2:	be 01 00 00 00       	mov    esi,0x1
c00207a7:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00207ab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00207af:	d3 e6                	shl    esi,cl
c00207b1:	c1 e7 07             	shl    edi,0x7
c00207b4:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c00207ba:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c00207bf:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00207c3:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c00207c9:	85 c6                	test   esi,eax
c00207cb:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00207d1:	0f 84 a7 00 00 00    	je     c002087e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a6>
c00207d7:	0f ba e0 1e          	bt     eax,0x1e
c00207db:	73 1a                	jae    c00207f7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c00207dd:	83 ec 0c             	sub    esp,0xc
c00207e0:	68 0f 5f 02 c0       	push   0xc0025f0f
c00207e5:	e8 7a 67 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00207ea:	83 c4 10             	add    esp,0x10
c00207ed:	b8 01 00 00 00       	mov    eax,0x1
c00207f2:	e9 ba 00 00 00       	jmp    c00208b1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d9>
c00207f7:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c00207fd:	83 f8 0d             	cmp    eax,0xd
c0020800:	77 0b                	ja     c002080d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x235>
c0020802:	50                   	push   eax
c0020803:	50                   	push   eax
c0020804:	6a 00                	push   0x0
c0020806:	68 c8 00 00 00       	push   0xc8
c002080b:	eb 2a                	jmp    c0020837 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c002080d:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c0020813:	83 f8 0d             	cmp    eax,0xd
c0020816:	77 0b                	ja     c0020823 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c0020818:	51                   	push   ecx
c0020819:	51                   	push   ecx
c002081a:	6a 00                	push   0x0
c002081c:	68 58 02 00 00       	push   0x258
c0020821:	eb 14                	jmp    c0020837 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25f>
c0020823:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c0020829:	83 f8 06             	cmp    eax,0x6
c002082c:	77 11                	ja     c002083f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x267>
c002082e:	52                   	push   edx
c002082f:	52                   	push   edx
c0020830:	6a 00                	push   0x0
c0020832:	68 dc 05 00 00       	push   0x5dc
c0020837:	e8 40 69 ff ff       	call   c001717c <milliTenthSleep(unsigned long long)>
c002083c:	83 c4 10             	add    esp,0x10
c002083f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020843:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c0020846:	75 06                	jne    c002084e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x276>
c0020848:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002084c:	74 16                	je     c0020864 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c002084e:	83 fb 06             	cmp    ebx,0x6
c0020851:	77 11                	ja     c0020864 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28c>
c0020853:	50                   	push   eax
c0020854:	50                   	push   eax
c0020855:	6a 00                	push   0x0
c0020857:	68 c4 09 00 00       	push   0x9c4
c002085c:	e8 1b 69 ff ff       	call   c001717c <milliTenthSleep(unsigned long long)>
c0020861:	83 c4 10             	add    esp,0x10
c0020864:	43                   	inc    ebx
c0020865:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c002086b:	0f 85 52 ff ff ff    	jne    c00207c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c0020871:	83 ec 0c             	sub    esp,0xc
c0020874:	68 22 5f 02 c0       	push   0xc0025f22
c0020879:	e9 67 ff ff ff       	jmp    c00207e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002087e:	0f ba e0 1e          	bt     eax,0x1e
c0020882:	73 0d                	jae    c0020891 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b9>
c0020884:	83 ec 0c             	sub    esp,0xc
c0020887:	68 36 5f 02 c0       	push   0xc0025f36
c002088c:	e9 54 ff ff ff       	jmp    c00207e5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c0020891:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020896:	74 17                	je     c00208af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c0020898:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002089d:	74 10                	je     c00208af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c002089f:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c00208a5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00208a9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00208ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00208af:	31 c0                	xor    eax,eax
c00208b1:	83 c4 2c             	add    esp,0x2c
c00208b4:	5b                   	pop    ebx
c00208b5:	5e                   	pop    esi
c00208b6:	5f                   	pop    edi
c00208b7:	5d                   	pop    ebp
c00208b8:	c3                   	ret    
c00208b9:	90                   	nop

c00208ba <SATAPI::eject()>:
c00208ba:	57                   	push   edi
c00208bb:	b9 03 00 00 00       	mov    ecx,0x3
c00208c0:	83 ec 18             	sub    esp,0x18
c00208c3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00208c7:	fc                   	cld    
c00208c8:	31 c0                	xor    eax,eax
c00208ca:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00208cc:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00208d1:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00208d6:	50                   	push   eax
c00208d7:	6a 00                	push   0x0
c00208d9:	6a 00                	push   0x0
c00208db:	6a 00                	push   0x0
c00208dd:	6a 00                	push   0x0
c00208df:	6a 02                	push   0x2
c00208e1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00208e5:	50                   	push   eax
c00208e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00208ea:	e8 e9 fc ff ff       	call   c00205d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00208ef:	31 c0                	xor    eax,eax
c00208f1:	83 c4 38             	add    esp,0x38
c00208f4:	5f                   	pop    edi
c00208f5:	c3                   	ret    

c00208f6 <SATAPI::detectMedia()>:
c00208f6:	53                   	push   ebx
c00208f7:	83 ec 14             	sub    esp,0x14
c00208fa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00208fe:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020904:	e8 df aa fe ff       	call   c000b3e8 <VCache::writeWriteBuffer()>
c0020909:	59                   	pop    ecx
c002090a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020910:	e8 c3 aa fe ff       	call   c000b3d8 <VCache::invalidateReadBuffer()>
c0020915:	c7 04 24 4b 5f 02 c0 	mov    DWORD PTR [esp],0xc0025f4b
c002091c:	e8 43 66 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020921:	83 c4 10             	add    esp,0x10
c0020924:	31 c0                	xor    eax,eax
c0020926:	8b 14 85 e0 ba 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4520]
c002092d:	85 d2                	test   edx,edx
c002092f:	74 0f                	je     c0020940 <SATAPI::detectMedia()+0x4a>
c0020931:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c0020937:	75 07                	jne    c0020940 <SATAPI::detectMedia()+0x4a>
c0020939:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c0020940:	40                   	inc    eax
c0020941:	83 f8 1a             	cmp    eax,0x1a
c0020944:	75 e0                	jne    c0020926 <SATAPI::detectMedia()+0x30>
c0020946:	83 c4 08             	add    esp,0x8
c0020949:	5b                   	pop    ebx
c002094a:	c3                   	ret    
c002094b:	90                   	nop

c002094c <SATAPI::open(int, int, void*)>:
c002094c:	56                   	push   esi
c002094d:	53                   	push   ebx
c002094e:	51                   	push   ecx
c002094f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020953:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020957:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020961:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020967:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020971:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020975:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002097f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020985:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002098c:	e8 75 f8 fe ff       	call   c0010206 <Phys::allocatePage()>
c0020991:	89 c6                	mov    esi,eax
c0020993:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020999:	81 c6 00 10 00 00    	add    esi,0x1000
c002099f:	e8 62 f8 fe ff       	call   c0010206 <Phys::allocatePage()>
c00209a4:	39 c6                	cmp    esi,eax
c00209a6:	74 10                	je     c00209b8 <SATAPI::open(int, int, void*)+0x6c>
c00209a8:	83 ec 0c             	sub    esp,0xc
c00209ab:	68 60 5f 02 c0       	push   0xc0025f60
c00209b0:	e8 5d f6 fe ff       	call   c0010012 <KePanic(char const*)>
c00209b5:	83 c4 10             	add    esp,0x10
c00209b8:	83 ec 0c             	sub    esp,0xc
c00209bb:	6a 02                	push   0x2
c00209bd:	e8 3b 2b ff ff       	call   c00134fd <Virt::allocateKernelVirtualPages(int)>
c00209c2:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00209c8:	6a 03                	push   0x3
c00209ca:	50                   	push   eax
c00209cb:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00209d1:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c00209d7:	e8 04 32 ff ff       	call   c0013be0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00209dc:	83 c4 14             	add    esp,0x14
c00209df:	68 78 01 00 00       	push   0x178
c00209e4:	e8 e2 f2 fe ff       	call   c000fccb <malloc>
c00209e9:	83 c4 0c             	add    esp,0xc
c00209ec:	89 c6                	mov    esi,eax
c00209ee:	6a 00                	push   0x0
c00209f0:	68 ff ff ff 7f       	push   0x7fffffff
c00209f5:	6a 00                	push   0x0
c00209f7:	6a 00                	push   0x0
c00209f9:	53                   	push   ebx
c00209fa:	68 76 5f 02 c0       	push   0xc0025f76
c00209ff:	50                   	push   eax
c0020a00:	e8 0f 9e fe ff       	call   c000a814 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020a05:	83 c4 14             	add    esp,0x14
c0020a08:	56                   	push   esi
c0020a09:	e8 c6 9e fe ff       	call   c000a8d4 <LogicalDisk::assignDriveLetter()>
c0020a0e:	5a                   	pop    edx
c0020a0f:	0f be c0             	movsx  eax,al
c0020a12:	59                   	pop    ecx
c0020a13:	50                   	push   eax
c0020a14:	68 bc 5d 02 c0       	push   0xc0025dbc
c0020a19:	e8 46 65 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020a1e:	58                   	pop    eax
c0020a1f:	5a                   	pop    edx
c0020a20:	56                   	push   esi
c0020a21:	53                   	push   ebx
c0020a22:	e8 d5 8f fe ff       	call   c00099fc <Device::addChild(Device*)>
c0020a27:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0020a2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020a30:	e8 11 94 fe ff       	call   c0009e46 <PhysicalDisk::startCache()>
c0020a35:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020a3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020a3f:	e8 b2 fe ff ff       	call   c00208f6 <SATAPI::detectMedia()>
c0020a44:	83 c4 14             	add    esp,0x14
c0020a47:	31 c0                	xor    eax,eax
c0020a49:	5b                   	pop    ebx
c0020a4a:	5e                   	pop    esi
c0020a4b:	c3                   	ret    

c0020a4c <SATAPI::read(unsigned long long, int, void*)>:
c0020a4c:	57                   	push   edi
c0020a4d:	56                   	push   esi
c0020a4e:	53                   	push   ebx
c0020a4f:	83 ec 30             	sub    esp,0x30
c0020a52:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020a56:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0020a5a:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0020a5e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020a62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020a6a:	83 fe 04             	cmp    esi,0x4
c0020a6d:	7e 10                	jle    c0020a7f <SATAPI::read(unsigned long long, int, void*)+0x33>
c0020a6f:	83 ec 0c             	sub    esp,0xc
c0020a72:	68 84 5f 02 c0       	push   0xc0025f84
c0020a77:	e8 96 f5 fe ff       	call   c0010012 <KePanic(char const*)>
c0020a7c:	83 c4 10             	add    esp,0x10
c0020a7f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0020a85:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0020a8b:	51                   	push   ecx
c0020a8c:	50                   	push   eax
c0020a8d:	83 c0 02             	add    eax,0x2
c0020a90:	c1 e0 07             	shl    eax,0x7
c0020a93:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0020a99:	50                   	push   eax
c0020a9a:	52                   	push   edx
c0020a9b:	e8 c6 e6 ff ff       	call   c001f166 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0020aa0:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0020aa4:	b9 03 00 00 00       	mov    ecx,0x3
c0020aa9:	fc                   	cld    
c0020aaa:	31 c0                	xor    eax,eax
c0020aac:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020aae:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c0020ab3:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0020ab8:	83 c4 0c             	add    esp,0xc
c0020abb:	6a 00                	push   0x0
c0020abd:	6a 00                	push   0x0
c0020abf:	6a 00                	push   0x0
c0020ac1:	6a 00                	push   0x0
c0020ac3:	6a 02                	push   0x2
c0020ac5:	8d 44 24 30          	lea    eax,[esp+0x30]
c0020ac9:	50                   	push   eax
c0020aca:	53                   	push   ebx
c0020acb:	e8 08 fb ff ff       	call   c00205d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020ad0:	83 c4 20             	add    esp,0x20
c0020ad3:	85 c0                	test   eax,eax
c0020ad5:	75 44                	jne    c0020b1b <SATAPI::read(unsigned long long, int, void*)+0xcf>
c0020ad7:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020adb:	b9 03 00 00 00       	mov    ecx,0x3
c0020ae0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020ae2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ae6:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c0020aeb:	0f c8                	bswap  eax
c0020aed:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c0020af1:	89 f0                	mov    eax,esi
c0020af3:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020af7:	50                   	push   eax
c0020af8:	56                   	push   esi
c0020af9:	c1 e6 0b             	shl    esi,0xb
c0020afc:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0020b00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020b04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020b08:	56                   	push   esi
c0020b09:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0020b0d:	50                   	push   eax
c0020b0e:	53                   	push   ebx
c0020b0f:	e8 c4 fa ff ff       	call   c00205d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020b14:	83 c4 20             	add    esp,0x20
c0020b17:	85 c0                	test   eax,eax
c0020b19:	74 14                	je     c0020b2f <SATAPI::read(unsigned long long, int, void*)+0xe3>
c0020b1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020b1f:	83 ec 0c             	sub    esp,0xc
c0020b22:	53                   	push   ebx
c0020b23:	e8 ce fd ff ff       	call   c00208f6 <SATAPI::detectMedia()>
c0020b28:	83 c4 10             	add    esp,0x10
c0020b2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020b2f:	83 c4 30             	add    esp,0x30
c0020b32:	5b                   	pop    ebx
c0020b33:	5e                   	pop    esi
c0020b34:	5f                   	pop    edi
c0020b35:	c3                   	ret    

c0020b36 <IOAPIC::close(int, int, void*)>:
c0020b36:	b8 00 00 00 00       	mov    eax,0x0
c0020b3b:	c3                   	ret    

c0020b3c <apicGetBase()>:
c0020b3c:	55                   	push   ebp
c0020b3d:	89 e5                	mov    ebp,esp
c0020b3f:	83 ec 08             	sub    esp,0x8
c0020b42:	83 ec 0c             	sub    esp,0xc
c0020b45:	68 e8 5f 02 c0       	push   0xc0025fe8
c0020b4a:	e8 c3 f4 fe ff       	call   c0010012 <KePanic(char const*)>
c0020b4f:	83 c4 10             	add    esp,0x10
c0020b52:	b8 00 00 00 00       	mov    eax,0x0
c0020b57:	c9                   	leave  
c0020b58:	c3                   	ret    
c0020b59:	90                   	nop

c0020b5a <IOAPIC::IOAPIC()>:
c0020b5a:	83 ec 0c             	sub    esp,0xc
c0020b5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b61:	83 ec 08             	sub    esp,0x8
c0020b64:	68 f7 5f 02 c0       	push   0xc0025ff7
c0020b69:	50                   	push   eax
c0020b6a:	e8 ef 8f fe ff       	call   c0009b5e <Device::Device(char const*)>
c0020b6f:	83 c4 10             	add    esp,0x10
c0020b72:	ba 18 60 02 c0       	mov    edx,0xc0026018
c0020b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b7b:	89 10                	mov    DWORD PTR [eax],edx
c0020b7d:	90                   	nop
c0020b7e:	83 c4 0c             	add    esp,0xc
c0020b81:	c3                   	ret    

c0020b82 <apicOpen()>:
c0020b82:	55                   	push   ebp
c0020b83:	89 e5                	mov    ebp,esp
c0020b85:	53                   	push   ebx
c0020b86:	83 ec 34             	sub    esp,0x34
c0020b89:	83 ec 0c             	sub    esp,0xc
c0020b8c:	68 ff 5f 02 c0       	push   0xc0025fff
c0020b91:	e8 ce 63 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020b96:	83 c4 10             	add    esp,0x10
c0020b99:	a0 a0 f4 02 c0       	mov    al,ds:0xc002f4a0
c0020b9e:	83 f0 01             	xor    eax,0x1
c0020ba1:	0f b6 c0             	movzx  eax,al
c0020ba4:	85 c0                	test   eax,eax
c0020ba6:	0f 84 a3 00 00 00    	je     c0020c4f <apicOpen()+0xcd>
c0020bac:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0020bb0:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c0020bb5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0020bb9:	0f b6 c0             	movzx  eax,al
c0020bbc:	39 c2                	cmp    edx,eax
c0020bbe:	0f 83 84 00 00 00    	jae    c0020c48 <apicOpen()+0xc6>
c0020bc4:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c0020bcb:	83 ec 0c             	sub    esp,0xc
c0020bce:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020bd1:	e8 f5 f0 fe ff       	call   c000fccb <malloc>
c0020bd6:	83 c4 10             	add    esp,0x10
c0020bd9:	89 c3                	mov    ebx,eax
c0020bdb:	83 ec 0c             	sub    esp,0xc
c0020bde:	53                   	push   ebx
c0020bdf:	e8 76 ff ff ff       	call   c0020b5a <IOAPIC::IOAPIC()>
c0020be4:	83 c4 10             	add    esp,0x10
c0020be7:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0020bea:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0020bee:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0020bf1:	89 14 85 80 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b80],edx
c0020bf8:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c0020bfd:	83 c0 01             	add    eax,0x1
c0020c00:	a3 60 f4 02 c0       	mov    ds:0xc002f460,eax
c0020c05:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0020c0a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0020c10:	83 ec 08             	sub    esp,0x8
c0020c13:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020c16:	50                   	push   eax
c0020c17:	e8 e0 8d fe ff       	call   c00099fc <Device::addChild(Device*)>
c0020c1c:	83 c4 10             	add    esp,0x10
c0020c1f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020c22:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c24:	83 c0 08             	add    eax,0x8
c0020c27:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c29:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0020c2d:	6a 00                	push   0x0
c0020c2f:	6a 00                	push   0x0
c0020c31:	52                   	push   edx
c0020c32:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020c35:	ff d0                	call   eax
c0020c37:	83 c4 10             	add    esp,0x10
c0020c3a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0020c3d:	83 c0 01             	add    eax,0x1
c0020c40:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0020c43:	e9 68 ff ff ff       	jmp    c0020bb0 <apicOpen()+0x2e>
c0020c48:	c6 05 a0 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f4a0,0x1
c0020c4f:	e8 e8 fe ff ff       	call   c0020b3c <apicGetBase()>
c0020c54:	05 f0 00 00 00       	add    eax,0xf0
c0020c59:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020c5c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020c5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c61:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0020c64:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0020c6b:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0020c72:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020c75:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0020c78:	89 10                	mov    DWORD PTR [eax],edx
c0020c7a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0020c81:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c0020c86:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0020c89:	7d 7c                	jge    c0020d07 <apicOpen()+0x185>
c0020c8b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020c8e:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020c95:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0020c98:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020c9b:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020ca2:	c1 e8 08             	shr    eax,0x8
c0020ca5:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0020ca9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020cac:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020cb3:	c1 e8 18             	shr    eax,0x18
c0020cb6:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0020cb9:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c0020cbd:	3d ff 00 00 00       	cmp    eax,0xff
c0020cc2:	75 3a                	jne    c0020cfe <apicOpen()+0x17c>
c0020cc4:	e8 73 fe ff ff       	call   c0020b3c <apicGetBase()>
c0020cc9:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c0020ccd:	83 fa 01             	cmp    edx,0x1
c0020cd0:	75 07                	jne    c0020cd9 <apicOpen()+0x157>
c0020cd2:	ba 60 03 00 00       	mov    edx,0x360
c0020cd7:	eb 05                	jmp    c0020cde <apicOpen()+0x15c>
c0020cd9:	ba 50 03 00 00       	mov    edx,0x350
c0020cde:	01 d0                	add    eax,edx
c0020ce0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020ce3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020ce6:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ce8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0020ceb:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0020cf2:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0020cf6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020cf9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0020cfc:	89 10                	mov    DWORD PTR [eax],edx
c0020cfe:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0020d02:	e9 7a ff ff ff       	jmp    c0020c81 <apicOpen()+0xff>
c0020d07:	90                   	nop
c0020d08:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020d0b:	c9                   	leave  
c0020d0c:	c3                   	ret    
c0020d0d:	90                   	nop

c0020d0e <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0020d0e:	55                   	push   ebp
c0020d0f:	89 e5                	mov    ebp,esp
c0020d11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d14:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020d1a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020d1d:	72 1d                	jb     c0020d3c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020d1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d22:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020d28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d2b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0020d31:	01 d0                	add    eax,edx
c0020d33:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020d36:	73 04                	jae    c0020d3c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020d38:	b0 01                	mov    al,0x1
c0020d3a:	eb 02                	jmp    c0020d3e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0020d3c:	b0 00                	mov    al,0x0
c0020d3e:	5d                   	pop    ebp
c0020d3f:	c3                   	ret    

c0020d40 <IOAPIC::read(int)>:
c0020d40:	55                   	push   ebp
c0020d41:	89 e5                	mov    ebp,esp
c0020d43:	83 ec 10             	sub    esp,0x10
c0020d46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d49:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020d4f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020d52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020d55:	0f b6 d0             	movzx  edx,al
c0020d58:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020d5b:	89 10                	mov    DWORD PTR [eax],edx
c0020d5d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020d60:	83 c0 10             	add    eax,0x10
c0020d63:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d65:	c9                   	leave  
c0020d66:	c3                   	ret    
c0020d67:	90                   	nop

c0020d68 <IOAPIC::open(int, int, void*)>:
c0020d68:	55                   	push   ebp
c0020d69:	89 e5                	mov    ebp,esp
c0020d6b:	57                   	push   edi
c0020d6c:	56                   	push   esi
c0020d6d:	53                   	push   ebx
c0020d6e:	83 ec 04             	sub    esp,0x4
c0020d71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d74:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020d77:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020d7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d80:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020d86:	8b 14 85 80 be 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4180]
c0020d8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d90:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020d96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020d99:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020d9f:	8b 14 85 00 bf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4100]
c0020da6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020da9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0020daf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020db2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020db8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020dbb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020dc1:	0f b6 f0             	movzx  esi,al
c0020dc4:	89 d0                	mov    eax,edx
c0020dc6:	ba 00 00 00 00       	mov    edx,0x0
c0020dcb:	89 c7                	mov    edi,eax
c0020dcd:	83 e7 ff             	and    edi,0xffffffff
c0020dd0:	89 f9                	mov    ecx,edi
c0020dd2:	0f b6 da             	movzx  ebx,dl
c0020dd5:	89 c8                	mov    eax,ecx
c0020dd7:	89 da                	mov    edx,ebx
c0020dd9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020ddc:	8d 5e 08             	lea    ebx,[esi+0x8]
c0020ddf:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020de3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020de7:	83 e0 00             	and    eax,0x0
c0020dea:	09 d0                	or     eax,edx
c0020dec:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020df0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020df3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020df9:	8d 50 01             	lea    edx,[eax+0x1]
c0020dfc:	88 d1                	mov    cl,dl
c0020dfe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0020e01:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c0020e07:	0f b6 d0             	movzx  edx,al
c0020e0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020e0d:	83 c2 08             	add    edx,0x8
c0020e10:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020e14:	0f b6 c9             	movzx  ecx,cl
c0020e17:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0020e1d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020e21:	6a 01                	push   0x1
c0020e23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020e26:	e8 15 ff ff ff       	call   c0020d40 <IOAPIC::read(int)>
c0020e2b:	83 c4 08             	add    esp,0x8
c0020e2e:	c1 f8 10             	sar    eax,0x10
c0020e31:	0f b6 c0             	movzx  eax,al
c0020e34:	8d 50 01             	lea    edx,[eax+0x1]
c0020e37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020e3a:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020e40:	b8 00 00 00 00       	mov    eax,0x0
c0020e45:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020e48:	5b                   	pop    ebx
c0020e49:	5e                   	pop    esi
c0020e4a:	5f                   	pop    edi
c0020e4b:	5d                   	pop    ebp
c0020e4c:	c3                   	ret    
c0020e4d:	90                   	nop

c0020e4e <IOAPIC::write(int, int)>:
c0020e4e:	55                   	push   ebp
c0020e4f:	89 e5                	mov    ebp,esp
c0020e51:	83 ec 10             	sub    esp,0x10
c0020e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020e57:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020e5d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020e60:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020e63:	0f b6 d0             	movzx  edx,al
c0020e66:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020e69:	89 10                	mov    DWORD PTR [eax],edx
c0020e6b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020e6e:	8d 50 10             	lea    edx,[eax+0x10]
c0020e71:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020e74:	89 02                	mov    DWORD PTR [edx],eax
c0020e76:	90                   	nop
c0020e77:	c9                   	leave  
c0020e78:	c3                   	ret    
c0020e79:	90                   	nop

c0020e7a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0020e7a:	55                   	push   ebp
c0020e7b:	89 e5                	mov    ebp,esp
c0020e7d:	53                   	push   ebx
c0020e7e:	83 ec 2c             	sub    esp,0x2c
c0020e81:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020e84:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0020e87:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0020e8a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0020e8d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020e90:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020e93:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020e96:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020e99:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0020e9c:	88 d8                	mov    al,bl
c0020e9e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020ea1:	88 c8                	mov    al,cl
c0020ea3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020ea6:	88 d0                	mov    al,dl
c0020ea8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0020eab:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020eaf:	83 c0 08             	add    eax,0x8
c0020eb2:	01 c0                	add    eax,eax
c0020eb4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020eb7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020ebb:	83 c0 08             	add    eax,0x8
c0020ebe:	01 c0                	add    eax,eax
c0020ec0:	83 c0 01             	add    eax,0x1
c0020ec3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020ec6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020ec9:	50                   	push   eax
c0020eca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020ecd:	e8 6e fe ff ff       	call   c0020d40 <IOAPIC::read(int)>
c0020ed2:	83 c4 08             	add    esp,0x8
c0020ed5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020ed8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020edf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020ee2:	c1 e0 18             	shl    eax,0x18
c0020ee5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0020ee8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020eeb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020eee:	52                   	push   edx
c0020eef:	50                   	push   eax
c0020ef0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020ef3:	e8 56 ff ff ff       	call   c0020e4e <IOAPIC::write(int, int)>
c0020ef8:	83 c4 0c             	add    esp,0xc
c0020efb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020efe:	50                   	push   eax
c0020eff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020f02:	e8 39 fe ff ff       	call   c0020d40 <IOAPIC::read(int)>
c0020f07:	83 c4 08             	add    esp,0x8
c0020f0a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0020f0d:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0020f14:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0020f1b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020f22:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0020f26:	85 c0                	test   eax,eax
c0020f28:	74 09                	je     c0020f33 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0020f2a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020f31:	eb 07                	jmp    c0020f3a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0020f33:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0020f3a:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0020f3e:	85 c0                	test   eax,eax
c0020f40:	74 09                	je     c0020f4b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0020f42:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0020f49:	eb 07                	jmp    c0020f52 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0020f4b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0020f52:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0020f59:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0020f5d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0020f60:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020f63:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020f66:	52                   	push   edx
c0020f67:	50                   	push   eax
c0020f68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020f6b:	e8 de fe ff ff       	call   c0020e4e <IOAPIC::write(int, int)>
c0020f70:	83 c4 0c             	add    esp,0xc
c0020f73:	90                   	nop
c0020f74:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020f77:	c9                   	leave  
c0020f78:	c3                   	ret    
c0020f79:	66 90                	xchg   ax,ax
c0020f7b:	90                   	nop

c0020f7c <APICTimer::close(int, int, void*)>:
c0020f7c:	b8 00 00 00 00       	mov    eax,0x0
c0020f81:	c3                   	ret    
c0020f82:	66 90                	xchg   ax,ax

c0020f84 <apicTimerHandler(regs*, void*)>:
c0020f84:	83 ec 0c             	sub    esp,0xc
c0020f87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f8b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020f8d:	b8 10 27 00 00       	mov    eax,0x2710
c0020f92:	ba 00 00 00 00       	mov    edx,0x0
c0020f97:	f7 f1                	div    ecx
c0020f99:	83 ec 0c             	sub    esp,0xc
c0020f9c:	50                   	push   eax
c0020f9d:	e8 2e a1 fe ff       	call   c000b0d0 <timerHandler(unsigned int)>
c0020fa2:	83 c4 10             	add    esp,0x10
c0020fa5:	90                   	nop
c0020fa6:	83 c4 0c             	add    esp,0xc
c0020fa9:	c3                   	ret    
c0020faa:	66 90                	xchg   ax,ax

c0020fac <APICTimer::open(int, int, void*)>:
c0020fac:	83 ec 0c             	sub    esp,0xc
c0020faf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0020fb5:	83 c0 24             	add    eax,0x24
c0020fb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0020fba:	83 ec 08             	sub    esp,0x8
c0020fbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020fc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020fc5:	ff d0                	call   eax
c0020fc7:	83 c4 10             	add    esp,0x10
c0020fca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020fd2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020fd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fdc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020fe0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020fe6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020fea:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020ff0:	83 ec 0c             	sub    esp,0xc
c0020ff3:	51                   	push   ecx
c0020ff4:	6a 01                	push   0x1
c0020ff6:	68 84 0f 02 c0       	push   0xc0020f84
c0020ffb:	52                   	push   edx
c0020ffc:	50                   	push   eax
c0020ffd:	e8 a6 89 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021002:	83 c4 20             	add    esp,0x20
c0021005:	89 c2                	mov    edx,eax
c0021007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002100b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0021011:	b8 00 00 00 00       	mov    eax,0x0
c0021016:	83 c4 0c             	add    esp,0xc
c0021019:	c3                   	ret    
c002101a:	66 90                	xchg   ax,ax

c002101c <APICTimer::write(int)>:
c002101c:	83 ec 0c             	sub    esp,0xc
c002101f:	83 ec 0c             	sub    esp,0xc
c0021022:	68 3c 60 02 c0       	push   0xc002603c
c0021027:	e8 e6 ef fe ff       	call   c0010012 <KePanic(char const*)>
c002102c:	83 c4 10             	add    esp,0x10
c002102f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021033:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021037:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002103d:	90                   	nop
c002103e:	83 c4 0c             	add    esp,0xc
c0021041:	c3                   	ret    
c0021042:	66 90                	xchg   ax,ax

c0021044 <APICTimer::APICTimer()>:
c0021044:	83 ec 0c             	sub    esp,0xc
c0021047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002104b:	83 ec 08             	sub    esp,0x8
c002104e:	68 4c 60 02 c0       	push   0xc002604c
c0021053:	50                   	push   eax
c0021054:	e8 ab 9f fe ff       	call   c000b004 <Timer::Timer(char const*)>
c0021059:	83 c4 10             	add    esp,0x10
c002105c:	ba 60 60 02 c0       	mov    edx,0xc0026060
c0021061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021065:	89 10                	mov    DWORD PTR [eax],edx
c0021067:	90                   	nop
c0021068:	83 c4 0c             	add    esp,0xc
c002106b:	c3                   	ret    

c002106c <PIT::write(int)>:
c002106c:	83 ec 10             	sub    esp,0x10
c002106f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021073:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021077:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002107d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021081:	a3 a4 f4 02 c0       	mov    ds:0xc002f4a4,eax
c0021086:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002108b:	89 c2                	mov    edx,eax
c002108d:	c1 fa 1f             	sar    edx,0x1f
c0021090:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0021094:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021098:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002109f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00210a4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00210a8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00210ad:	ee                   	out    dx,al
c00210ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210b2:	0f b6 c0             	movzx  eax,al
c00210b5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00210bc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00210c0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00210c4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00210c9:	ee                   	out    dx,al
c00210ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00210ce:	c1 f8 08             	sar    eax,0x8
c00210d1:	0f b6 c0             	movzx  eax,al
c00210d4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00210db:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00210df:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00210e3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00210e8:	ee                   	out    dx,al
c00210e9:	90                   	nop
c00210ea:	83 c4 10             	add    esp,0x10
c00210ed:	c3                   	ret    
c00210ee:	66 90                	xchg   ax,ax

c00210f0 <pitHandler(regs*, void*)>:
c00210f0:	83 ec 0c             	sub    esp,0xc
c00210f3:	8b 0d a4 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f4a4
c00210f9:	b8 10 27 00 00       	mov    eax,0x2710
c00210fe:	89 c2                	mov    edx,eax
c0021100:	c1 fa 1f             	sar    edx,0x1f
c0021103:	f7 f9                	idiv   ecx
c0021105:	83 ec 0c             	sub    esp,0xc
c0021108:	50                   	push   eax
c0021109:	e8 c2 9f fe ff       	call   c000b0d0 <timerHandler(unsigned int)>
c002110e:	83 c4 10             	add    esp,0x10
c0021111:	90                   	nop
c0021112:	83 c4 0c             	add    esp,0xc
c0021115:	c3                   	ret    
c0021116:	66 90                	xchg   ax,ax

c0021118 <PIT::open(int, int, void*)>:
c0021118:	83 ec 0c             	sub    esp,0xc
c002111b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002111f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021121:	83 c0 24             	add    eax,0x24
c0021124:	8b 00                	mov    eax,DWORD PTR [eax]
c0021126:	83 ec 08             	sub    esp,0x8
c0021129:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002112d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021131:	ff d0                	call   eax
c0021133:	83 c4 10             	add    esp,0x10
c0021136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002113a:	83 ec 0c             	sub    esp,0xc
c002113d:	6a 00                	push   0x0
c002113f:	6a 01                	push   0x1
c0021141:	68 f0 10 02 c0       	push   0xc00210f0
c0021146:	6a 00                	push   0x0
c0021148:	50                   	push   eax
c0021149:	e8 5a 88 fe ff       	call   c00099a8 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002114e:	83 c4 20             	add    esp,0x20
c0021151:	89 c2                	mov    edx,eax
c0021153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021157:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002115d:	b8 00 00 00 00       	mov    eax,0x0
c0021162:	83 c4 0c             	add    esp,0xc
c0021165:	c3                   	ret    
c0021166:	66 90                	xchg   ax,ax

c0021168 <PIT::close(int, int, void*)>:
c0021168:	83 ec 0c             	sub    esp,0xc
c002116b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002116f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0021179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002117d:	6a 01                	push   0x1
c002117f:	68 f0 10 02 c0       	push   0xc00210f0
c0021184:	6a 00                	push   0x0
c0021186:	50                   	push   eax
c0021187:	e8 52 88 fe ff       	call   c00099de <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002118c:	83 c4 10             	add    esp,0x10
c002118f:	b8 00 00 00 00       	mov    eax,0x0
c0021194:	83 c4 0c             	add    esp,0xc
c0021197:	c3                   	ret    

c0021198 <PIT::PIT()>:
c0021198:	83 ec 0c             	sub    esp,0xc
c002119b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002119f:	83 ec 08             	sub    esp,0x8
c00211a2:	68 88 60 02 c0       	push   0xc0026088
c00211a7:	50                   	push   eax
c00211a8:	e8 57 9e fe ff       	call   c000b004 <Timer::Timer(char const*)>
c00211ad:	83 c4 10             	add    esp,0x10
c00211b0:	ba b0 60 02 c0       	mov    edx,0xc00260b0
c00211b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211b9:	89 10                	mov    DWORD PTR [eax],edx
c00211bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211bf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00211c5:	0f b6 d0             	movzx  edx,al
c00211c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211cc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00211d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211d7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00211dd:	0f b6 d0             	movzx  edx,al
c00211e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211e4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00211e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00211f3:	8d 50 01             	lea    edx,[eax+0x1]
c00211f6:	88 d1                	mov    cl,dl
c00211f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00211fc:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0021202:	0f b6 d0             	movzx  edx,al
c0021205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021209:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002120d:	83 e1 3f             	and    ecx,0x3f
c0021210:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021214:	90                   	nop
c0021215:	83 c4 0c             	add    esp,0xc
c0021218:	c3                   	ret    
c0021219:	66 90                	xchg   ax,ax
c002121b:	66 90                	xchg   ax,ax
c002121d:	66 90                	xchg   ax,ax
c002121f:	90                   	nop

c0021220 <avxDetect>:
c0021220:	b8 01 00 00 00       	mov    eax,0x1
c0021225:	0f a2                	cpuid  
c0021227:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002122d:	74 15                	je     c0021244 <avxDetect.noAVX>
c002122f:	b8 01 00 00 00       	mov    eax,0x1
c0021234:	0f a2                	cpuid  
c0021236:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002123c:	74 06                	je     c0021244 <avxDetect.noAVX>
c002123e:	b8 01 00 00 00       	mov    eax,0x1
c0021243:	c3                   	ret    

c0021244 <avxDetect.noAVX>:
c0021244:	b8 00 00 00 00       	mov    eax,0x0
c0021249:	c3                   	ret    

c002124a <avxSave>:
c002124a:	53                   	push   ebx
c002124b:	52                   	push   edx
c002124c:	31 c0                	xor    eax,eax
c002124e:	48                   	dec    eax
c002124f:	89 c2                	mov    edx,eax
c0021251:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021255:	0f ae 23             	xsave  [ebx]
c0021258:	5a                   	pop    edx
c0021259:	5b                   	pop    ebx
c002125a:	c3                   	ret    

c002125b <avxLoad>:
c002125b:	53                   	push   ebx
c002125c:	52                   	push   edx
c002125d:	31 c0                	xor    eax,eax
c002125f:	48                   	dec    eax
c0021260:	89 c2                	mov    edx,eax
c0021262:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021266:	0f ae 2b             	xrstor [ebx]
c0021269:	5a                   	pop    edx
c002126a:	5b                   	pop    ebx
c002126b:	c3                   	ret    

c002126c <avxInit>:
c002126c:	e8 17 03 00 00       	call   c0021588 <sseInit>
c0021271:	50                   	push   eax
c0021272:	51                   	push   ecx
c0021273:	0f 20 e0             	mov    eax,cr4
c0021276:	0d 00 00 04 00       	or     eax,0x40000
c002127b:	0f 22 e0             	mov    cr4,eax
c002127e:	31 c9                	xor    ecx,ecx
c0021280:	0f 01 d0             	xgetbv 
c0021283:	0d 07 00 00 00       	or     eax,0x7
c0021288:	0f 01 d1             	xsetbv 
c002128b:	59                   	pop    ecx
c002128c:	58                   	pop    eax
c002128d:	c3                   	ret    

c002128e <avxClose>:
c002128e:	c3                   	ret    
c002128f:	90                   	nop

c0021290 <isr0>:
c0021290:	fa                   	cli    
c0021291:	68 00 00 00 00       	push   0x0
c0021296:	68 00 00 00 00       	push   0x0
c002129b:	e9 56 01 00 00       	jmp    c00213f6 <int_common_stub>

c00212a0 <isr1>:
c00212a0:	fa                   	cli    
c00212a1:	6a 00                	push   0x0
c00212a3:	6a 01                	push   0x1
c00212a5:	e9 4c 01 00 00       	jmp    c00213f6 <int_common_stub>

c00212aa <isr2>:
c00212aa:	fa                   	cli    
c00212ab:	6a 00                	push   0x0
c00212ad:	6a 02                	push   0x2
c00212af:	e9 42 01 00 00       	jmp    c00213f6 <int_common_stub>

c00212b4 <isr3>:
c00212b4:	fa                   	cli    
c00212b5:	6a 00                	push   0x0
c00212b7:	6a 03                	push   0x3
c00212b9:	e9 38 01 00 00       	jmp    c00213f6 <int_common_stub>

c00212be <isr4>:
c00212be:	fa                   	cli    
c00212bf:	6a 00                	push   0x0
c00212c1:	6a 04                	push   0x4
c00212c3:	e9 2e 01 00 00       	jmp    c00213f6 <int_common_stub>

c00212c8 <isr5>:
c00212c8:	fa                   	cli    
c00212c9:	6a 00                	push   0x0
c00212cb:	6a 05                	push   0x5
c00212cd:	e9 24 01 00 00       	jmp    c00213f6 <int_common_stub>

c00212d2 <isr6>:
c00212d2:	fa                   	cli    
c00212d3:	6a 00                	push   0x0
c00212d5:	6a 06                	push   0x6
c00212d7:	e9 1a 01 00 00       	jmp    c00213f6 <int_common_stub>

c00212dc <isr7>:
c00212dc:	fa                   	cli    
c00212dd:	6a 00                	push   0x0
c00212df:	6a 07                	push   0x7
c00212e1:	e9 10 01 00 00       	jmp    c00213f6 <int_common_stub>

c00212e6 <isr8>:
c00212e6:	fa                   	cli    
c00212e7:	6a 08                	push   0x8
c00212e9:	e9 08 01 00 00       	jmp    c00213f6 <int_common_stub>

c00212ee <isr9>:
c00212ee:	fa                   	cli    
c00212ef:	6a 00                	push   0x0
c00212f1:	6a 09                	push   0x9
c00212f3:	e9 fe 00 00 00       	jmp    c00213f6 <int_common_stub>

c00212f8 <isr10>:
c00212f8:	fa                   	cli    
c00212f9:	6a 0a                	push   0xa
c00212fb:	e9 f6 00 00 00       	jmp    c00213f6 <int_common_stub>

c0021300 <isr11>:
c0021300:	fa                   	cli    
c0021301:	6a 0b                	push   0xb
c0021303:	e9 ee 00 00 00       	jmp    c00213f6 <int_common_stub>

c0021308 <isr12>:
c0021308:	fa                   	cli    
c0021309:	6a 0c                	push   0xc
c002130b:	e9 e6 00 00 00       	jmp    c00213f6 <int_common_stub>

c0021310 <isr13>:
c0021310:	fa                   	cli    
c0021311:	6a 0d                	push   0xd
c0021313:	53                   	push   ebx
c0021314:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021318:	81 fb b5 14 02 c0    	cmp    ebx,0xc00214b5
c002131e:	5b                   	pop    ebx
c002131f:	0f 84 92 01 00 00    	je     c00214b7 <finishSignal2>
c0021325:	e9 cc 00 00 00       	jmp    c00213f6 <int_common_stub>

c002132a <isr14>:
c002132a:	fa                   	cli    
c002132b:	6a 0e                	push   0xe
c002132d:	e9 c4 00 00 00       	jmp    c00213f6 <int_common_stub>

c0021332 <isr15>:
c0021332:	fa                   	cli    
c0021333:	6a 00                	push   0x0
c0021335:	6a 0f                	push   0xf
c0021337:	e9 ba 00 00 00       	jmp    c00213f6 <int_common_stub>

c002133c <isr16>:
c002133c:	fa                   	cli    
c002133d:	6a 00                	push   0x0
c002133f:	6a 10                	push   0x10
c0021341:	e9 b0 00 00 00       	jmp    c00213f6 <int_common_stub>

c0021346 <isr17>:
c0021346:	fa                   	cli    
c0021347:	6a 00                	push   0x0
c0021349:	6a 11                	push   0x11
c002134b:	e9 a6 00 00 00       	jmp    c00213f6 <int_common_stub>

c0021350 <isr18>:
c0021350:	fa                   	cli    
c0021351:	6a 00                	push   0x0
c0021353:	6a 12                	push   0x12
c0021355:	e9 9c 00 00 00       	jmp    c00213f6 <int_common_stub>

c002135a <irq3>:
c002135a:	fa                   	cli    
c002135b:	6a 00                	push   0x0
c002135d:	6a 23                	push   0x23
c002135f:	e9 92 00 00 00       	jmp    c00213f6 <int_common_stub>

c0021364 <irq4>:
c0021364:	fa                   	cli    
c0021365:	6a 00                	push   0x0
c0021367:	6a 24                	push   0x24
c0021369:	e9 88 00 00 00       	jmp    c00213f6 <int_common_stub>

c002136e <irq5>:
c002136e:	fa                   	cli    
c002136f:	6a 00                	push   0x0
c0021371:	6a 25                	push   0x25
c0021373:	e9 7e 00 00 00       	jmp    c00213f6 <int_common_stub>

c0021378 <irq6>:
c0021378:	fa                   	cli    
c0021379:	6a 00                	push   0x0
c002137b:	6a 26                	push   0x26
c002137d:	e9 74 00 00 00       	jmp    c00213f6 <int_common_stub>

c0021382 <irq7>:
c0021382:	fa                   	cli    
c0021383:	6a 00                	push   0x0
c0021385:	6a 27                	push   0x27
c0021387:	e9 6a 00 00 00       	jmp    c00213f6 <int_common_stub>

c002138c <irq8>:
c002138c:	fa                   	cli    
c002138d:	6a 00                	push   0x0
c002138f:	6a 28                	push   0x28
c0021391:	e9 60 00 00 00       	jmp    c00213f6 <int_common_stub>

c0021396 <irq9>:
c0021396:	fa                   	cli    
c0021397:	6a 00                	push   0x0
c0021399:	6a 29                	push   0x29
c002139b:	e9 56 00 00 00       	jmp    c00213f6 <int_common_stub>

c00213a0 <irq10>:
c00213a0:	fa                   	cli    
c00213a1:	6a 00                	push   0x0
c00213a3:	6a 2a                	push   0x2a
c00213a5:	e9 4c 00 00 00       	jmp    c00213f6 <int_common_stub>

c00213aa <irq11>:
c00213aa:	fa                   	cli    
c00213ab:	6a 00                	push   0x0
c00213ad:	6a 2b                	push   0x2b
c00213af:	e9 42 00 00 00       	jmp    c00213f6 <int_common_stub>

c00213b4 <irq12>:
c00213b4:	fa                   	cli    
c00213b5:	6a 00                	push   0x0
c00213b7:	6a 2c                	push   0x2c
c00213b9:	e9 38 00 00 00       	jmp    c00213f6 <int_common_stub>

c00213be <irq13>:
c00213be:	fa                   	cli    
c00213bf:	6a 00                	push   0x0
c00213c1:	6a 2d                	push   0x2d
c00213c3:	e9 2e 00 00 00       	jmp    c00213f6 <int_common_stub>

c00213c8 <irq14>:
c00213c8:	fa                   	cli    
c00213c9:	6a 00                	push   0x0
c00213cb:	6a 2e                	push   0x2e
c00213cd:	e9 24 00 00 00       	jmp    c00213f6 <int_common_stub>

c00213d2 <irq15>:
c00213d2:	fa                   	cli    
c00213d3:	6a 00                	push   0x0
c00213d5:	6a 2f                	push   0x2f
c00213d7:	e9 1a 00 00 00       	jmp    c00213f6 <int_common_stub>

c00213dc <irq1>:
c00213dc:	fa                   	cli    
c00213dd:	6a 00                	push   0x0
c00213df:	6a 21                	push   0x21
c00213e1:	eb 13                	jmp    c00213f6 <int_common_stub>

c00213e3 <irq2>:
c00213e3:	fa                   	cli    
c00213e4:	6a 00                	push   0x0
c00213e6:	6a 22                	push   0x22
c00213e8:	eb 0c                	jmp    c00213f6 <int_common_stub>

c00213ea <isr96>:
c00213ea:	6a 00                	push   0x0
c00213ec:	6a 60                	push   0x60
c00213ee:	fb                   	sti    
c00213ef:	eb 05                	jmp    c00213f6 <int_common_stub>

c00213f1 <irq0>:
c00213f1:	fa                   	cli    
c00213f2:	6a 00                	push   0x0
c00213f4:	6a 20                	push   0x20

c00213f6 <int_common_stub>:
c00213f6:	60                   	pusha  
c00213f7:	1e                   	push   ds
c00213f8:	06                   	push   es
c00213f9:	0f a0                	push   fs
c00213fb:	0f a8                	push   gs
c00213fd:	66 b8 10 00          	mov    ax,0x10
c0021401:	66 8e d8             	mov    ds,ax
c0021404:	66 8e c0             	mov    es,ax
c0021407:	66 8e e0             	mov    fs,ax
c002140a:	66 8e e8             	mov    gs,ax
c002140d:	54                   	push   esp
c002140e:	fc                   	cld    
c002140f:	e8 30 d6 fe ff       	call   c000ea44 <int_handler>
c0021414:	81 c4 04 00 00 00    	add    esp,0x4
c002141a:	0f a9                	pop    gs
c002141c:	0f a1                	pop    fs
c002141e:	07                   	pop    es
c002141f:	1f                   	pop    ds
c0021420:	e8 74 ff fe ff       	call   c0011399 <KiCheckSignalZ>
c0021425:	85 c0                	test   eax,eax
c0021427:	75 08                	jne    c0021431 <doSignals>
c0021429:	61                   	popa   
c002142a:	81 c4 08 00 00 00    	add    esp,0x8
c0021430:	cf                   	iret   

c0021431 <doSignals>:
c0021431:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0021436:	61                   	popa   
c0021437:	53                   	push   ebx
c0021438:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002143e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021441:	5b                   	pop    ebx
c0021442:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0021447:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002144a:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002144d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021450:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0021453:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0021456:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c0021459:	81 c4 08 00 00 00    	add    esp,0x8
c002145f:	5e                   	pop    esi
c0021460:	5b                   	pop    ebx
c0021461:	59                   	pop    ecx
c0021462:	5a                   	pop    edx
c0021463:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0021466:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c0021469:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002146c:	52                   	push   edx
c002146d:	51                   	push   ecx
c002146e:	53                   	push   ebx
c002146f:	56                   	push   esi
c0021470:	81 ec 08 00 00 00    	sub    esp,0x8
c0021476:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c0021479:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002147c:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002147f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021482:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021485:	60                   	pusha  
c0021486:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002148c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002148f:	89 e3                	mov    ebx,esp
c0021491:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0021494:	52                   	push   edx
c0021495:	68 b5 14 02 c0       	push   0xc00214b5
c002149a:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002149d:	89 dc                	mov    esp,ebx
c002149f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00214a2:	68 23 00 00 00       	push   0x23
c00214a7:	51                   	push   ecx
c00214a8:	68 02 02 00 00       	push   0x202
c00214ad:	68 1b 00 00 00       	push   0x1b
c00214b2:	ff 36                	push   DWORD PTR [esi]
c00214b4:	cf                   	iret   

c00214b5 <finishSignal>:
c00214b5:	cd 0f                	int    0xf

c00214b7 <finishSignal2>:
c00214b7:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c00214bd:	e8 68 ff fe ff       	call   c001142a <KiFinishSignalZ>
c00214c2:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c00214c8:	68 23 00 00 00       	push   0x23
c00214cd:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00214d0:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00214d3:	68 1b 00 00 00       	push   0x1b
c00214d8:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c00214db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00214de:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00214e1:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00214e4:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00214e7:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c00214ea:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00214ed:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c00214f0:	cf                   	iret   
c00214f1:	90                   	nop
c00214f2:	90                   	nop
c00214f3:	90                   	nop

c00214f4 <irq16>:
c00214f4:	fa                   	cli    
c00214f5:	6a 00                	push   0x0
c00214f7:	6a 30                	push   0x30
c00214f9:	e9 f8 fe ff ff       	jmp    c00213f6 <int_common_stub>

c00214fe <irq17>:
c00214fe:	fa                   	cli    
c00214ff:	6a 00                	push   0x0
c0021501:	6a 31                	push   0x31
c0021503:	e9 ee fe ff ff       	jmp    c00213f6 <int_common_stub>

c0021508 <irq18>:
c0021508:	fa                   	cli    
c0021509:	6a 00                	push   0x0
c002150b:	6a 32                	push   0x32
c002150d:	e9 e4 fe ff ff       	jmp    c00213f6 <int_common_stub>

c0021512 <irq19>:
c0021512:	fa                   	cli    
c0021513:	6a 00                	push   0x0
c0021515:	6a 33                	push   0x33
c0021517:	e9 da fe ff ff       	jmp    c00213f6 <int_common_stub>

c002151c <irq20>:
c002151c:	fa                   	cli    
c002151d:	6a 00                	push   0x0
c002151f:	6a 34                	push   0x34
c0021521:	e9 d0 fe ff ff       	jmp    c00213f6 <int_common_stub>

c0021526 <irq21>:
c0021526:	fa                   	cli    
c0021527:	6a 00                	push   0x0
c0021529:	6a 35                	push   0x35
c002152b:	e9 c6 fe ff ff       	jmp    c00213f6 <int_common_stub>

c0021530 <irq22>:
c0021530:	fa                   	cli    
c0021531:	6a 00                	push   0x0
c0021533:	6a 36                	push   0x36
c0021535:	e9 bc fe ff ff       	jmp    c00213f6 <int_common_stub>

c002153a <irq23>:
c002153a:	fa                   	cli    
c002153b:	6a 00                	push   0x0
c002153d:	6a 37                	push   0x37
c002153f:	e9 b2 fe ff ff       	jmp    c00213f6 <int_common_stub>
c0021544:	66 90                	xchg   ax,ax
c0021546:	66 90                	xchg   ax,ax
c0021548:	66 90                	xchg   ax,ax
c002154a:	66 90                	xchg   ax,ax
c002154c:	66 90                	xchg   ax,ax
c002154e:	66 90                	xchg   ax,ax

c0021550 <i386GetRDRAND>:
c0021550:	b9 64 00 00 00       	mov    ecx,0x64

c0021555 <retry>:
c0021555:	0f c7 f0             	rdrand eax
c0021558:	72 05                	jb     c002155f <retry.done>
c002155a:	e2 f9                	loop   c0021555 <retry>

c002155c <retry.fail>:
c002155c:	31 c0                	xor    eax,eax
c002155e:	c3                   	ret    

c002155f <retry.done>:
c002155f:	c3                   	ret    

c0021560 <sseDetect>:
c0021560:	b8 01 00 00 00       	mov    eax,0x1
c0021565:	0f a2                	cpuid  
c0021567:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002156d:	74 06                	je     c0021575 <sseDetect.noSSE>
c002156f:	b8 01 00 00 00       	mov    eax,0x1
c0021574:	c3                   	ret    

c0021575 <sseDetect.noSSE>:
c0021575:	31 c0                	xor    eax,eax
c0021577:	c3                   	ret    

c0021578 <sseSave>:
c0021578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002157c:	0f ae 00             	fxsave [eax]
c002157f:	c3                   	ret    

c0021580 <sseLoad>:
c0021580:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021584:	0f ae 08             	fxrstor [eax]
c0021587:	c3                   	ret    

c0021588 <sseInit>:
c0021588:	e8 48 00 00 00       	call   c00215d5 <x87Init>
c002158d:	0f 20 e0             	mov    eax,cr4
c0021590:	66 0d 00 06          	or     ax,0x600
c0021594:	0f 22 e0             	mov    cr4,eax
c0021597:	c3                   	ret    

c0021598 <sseClose>:
c0021598:	c3                   	ret    
c0021599:	66 90                	xchg   ax,ax
c002159b:	66 90                	xchg   ax,ax
c002159d:	66 90                	xchg   ax,ax
c002159f:	90                   	nop

c00215a0 <value_37F>:
c00215a0:	7f 03                	jg     c00215a5 <value_37A+0x1>

c00215a2 <value_37E>:
c00215a2:	7e 03                	jle    c00215a7 <x87Detect+0x1>

c00215a4 <value_37A>:
c00215a4:	7a 03                	jp     c00215a9 <x87Detect+0x3>

c00215a6 <x87Detect>:
c00215a6:	53                   	push   ebx
c00215a7:	51                   	push   ecx
c00215a8:	52                   	push   edx
c00215a9:	b8 01 00 00 00       	mov    eax,0x1
c00215ae:	0f a2                	cpuid  
c00215b0:	f7 c2 01 00 00 00    	test   edx,0x1
c00215b6:	74 06                	je     c00215be <x87Detect.nox87>
c00215b8:	b8 01 00 00 00       	mov    eax,0x1
c00215bd:	c3                   	ret    

c00215be <x87Detect.nox87>:
c00215be:	b8 00 00 00 00       	mov    eax,0x0
c00215c3:	5a                   	pop    edx
c00215c4:	59                   	pop    ecx
c00215c5:	5b                   	pop    ebx
c00215c6:	c3                   	ret    

c00215c7 <x87Save>:
c00215c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215cb:	dd 30                	fnsave [eax]
c00215cd:	c3                   	ret    

c00215ce <x87Load>:
c00215ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215d2:	dd 20                	frstor [eax]
c00215d4:	c3                   	ret    

c00215d5 <x87Init>:
c00215d5:	0f 20 c0             	mov    eax,cr0
c00215d8:	66 25 fb ff          	and    ax,0xfffb
c00215dc:	66 0d 22 00          	or     ax,0x22
c00215e0:	0f 22 c0             	mov    cr0,eax
c00215e3:	db e3                	fninit 
c00215e5:	0f 06                	clts   
c00215e7:	d9 2d a4 15 02 c0    	fldcw  WORD PTR ds:0xc00215a4
c00215ed:	c3                   	ret    

c00215ee <x87Close>:
c00215ee:	c3                   	ret    
c00215ef:	90                   	nop

c00215f0 <__do_global_ctors_aux>:
c00215f0:	a1 a4 25 02 c0       	mov    eax,ds:0xc00225a4
c00215f5:	83 f8 ff             	cmp    eax,0xffffffff
c00215f8:	74 1a                	je     c0021614 <__do_global_ctors_aux+0x24>
c00215fa:	55                   	push   ebp
c00215fb:	89 e5                	mov    ebp,esp
c00215fd:	53                   	push   ebx
c00215fe:	52                   	push   edx
c00215ff:	bb a4 25 02 c0       	mov    ebx,0xc00225a4
c0021604:	ff d0                	call   eax
c0021606:	83 eb 04             	sub    ebx,0x4
c0021609:	8b 03                	mov    eax,DWORD PTR [ebx]
c002160b:	83 f8 ff             	cmp    eax,0xffffffff
c002160e:	75 f4                	jne    c0021604 <__do_global_ctors_aux+0x14>
c0021610:	58                   	pop    eax
c0021611:	5b                   	pop    ebx
c0021612:	5d                   	pop    ebp
c0021613:	c3                   	ret    
c0021614:	c3                   	ret    
c0021615:	66 90                	xchg   ax,ax
c0021617:	90                   	nop

c0021618 <__divdi3>:
c0021618:	55                   	push   ebp
c0021619:	57                   	push   edi
c002161a:	56                   	push   esi
c002161b:	53                   	push   ebx
c002161c:	83 ec 1c             	sub    esp,0x1c
c002161f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021623:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021627:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002162a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002162e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021632:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021636:	85 db                	test   ebx,ebx
c0021638:	0f 88 8e 00 00 00    	js     c00216cc <__divdi3+0xb4>
c002163e:	89 dd                	mov    ebp,ebx
c0021640:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021648:	89 d3                	mov    ebx,edx
c002164a:	85 d2                	test   edx,edx
c002164c:	79 0d                	jns    c002165b <__divdi3+0x43>
c002164e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021652:	f7 d8                	neg    eax
c0021654:	83 d2 00             	adc    edx,0x0
c0021657:	f7 da                	neg    edx
c0021659:	89 d3                	mov    ebx,edx
c002165b:	89 c7                	mov    edi,eax
c002165d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021660:	85 db                	test   ebx,ebx
c0021662:	75 48                	jne    c00216ac <__divdi3+0x94>
c0021664:	39 ef                	cmp    edi,ebp
c0021666:	76 24                	jbe    c002168c <__divdi3+0x74>
c0021668:	89 ea                	mov    edx,ebp
c002166a:	f7 f7                	div    edi
c002166c:	89 c1                	mov    ecx,eax
c002166e:	31 f6                	xor    esi,esi
c0021670:	89 c8                	mov    eax,ecx
c0021672:	89 f2                	mov    edx,esi
c0021674:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021678:	85 c9                	test   ecx,ecx
c002167a:	74 07                	je     c0021683 <__divdi3+0x6b>
c002167c:	f7 d8                	neg    eax
c002167e:	83 d2 00             	adc    edx,0x0
c0021681:	f7 da                	neg    edx
c0021683:	83 c4 1c             	add    esp,0x1c
c0021686:	5b                   	pop    ebx
c0021687:	5e                   	pop    esi
c0021688:	5f                   	pop    edi
c0021689:	5d                   	pop    ebp
c002168a:	c3                   	ret    
c002168b:	90                   	nop
c002168c:	85 ff                	test   edi,edi
c002168e:	75 0b                	jne    c002169b <__divdi3+0x83>
c0021690:	b8 01 00 00 00       	mov    eax,0x1
c0021695:	31 d2                	xor    edx,edx
c0021697:	f7 f3                	div    ebx
c0021699:	89 c7                	mov    edi,eax
c002169b:	31 d2                	xor    edx,edx
c002169d:	89 e8                	mov    eax,ebp
c002169f:	f7 f7                	div    edi
c00216a1:	89 c6                	mov    esi,eax
c00216a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00216a6:	f7 f7                	div    edi
c00216a8:	89 c1                	mov    ecx,eax
c00216aa:	eb c4                	jmp    c0021670 <__divdi3+0x58>
c00216ac:	39 eb                	cmp    ebx,ebp
c00216ae:	77 3c                	ja     c00216ec <__divdi3+0xd4>
c00216b0:	0f bd f3             	bsr    esi,ebx
c00216b3:	83 f6 1f             	xor    esi,0x1f
c00216b6:	75 40                	jne    c00216f8 <__divdi3+0xe0>
c00216b8:	39 eb                	cmp    ebx,ebp
c00216ba:	72 09                	jb     c00216c5 <__divdi3+0xad>
c00216bc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00216bf:	0f 87 97 00 00 00    	ja     c002175c <__divdi3+0x144>
c00216c5:	b9 01 00 00 00       	mov    ecx,0x1
c00216ca:	eb a4                	jmp    c0021670 <__divdi3+0x58>
c00216cc:	f7 d9                	neg    ecx
c00216ce:	83 d3 00             	adc    ebx,0x0
c00216d1:	f7 db                	neg    ebx
c00216d3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00216d6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00216da:	89 dd                	mov    ebp,ebx
c00216dc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00216e4:	e9 5f ff ff ff       	jmp    c0021648 <__divdi3+0x30>
c00216e9:	8d 76 00             	lea    esi,[esi+0x0]
c00216ec:	31 f6                	xor    esi,esi
c00216ee:	31 c9                	xor    ecx,ecx
c00216f0:	e9 7b ff ff ff       	jmp    c0021670 <__divdi3+0x58>
c00216f5:	8d 76 00             	lea    esi,[esi+0x0]
c00216f8:	b8 20 00 00 00       	mov    eax,0x20
c00216fd:	29 f0                	sub    eax,esi
c00216ff:	89 f1                	mov    ecx,esi
c0021701:	d3 e3                	shl    ebx,cl
c0021703:	89 fa                	mov    edx,edi
c0021705:	88 c1                	mov    cl,al
c0021707:	d3 ea                	shr    edx,cl
c0021709:	09 da                	or     edx,ebx
c002170b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002170f:	89 f1                	mov    ecx,esi
c0021711:	d3 e7                	shl    edi,cl
c0021713:	89 eb                	mov    ebx,ebp
c0021715:	88 c1                	mov    cl,al
c0021717:	d3 eb                	shr    ebx,cl
c0021719:	89 f1                	mov    ecx,esi
c002171b:	d3 e5                	shl    ebp,cl
c002171d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021720:	88 c1                	mov    cl,al
c0021722:	d3 ea                	shr    edx,cl
c0021724:	09 d5                	or     ebp,edx
c0021726:	89 e8                	mov    eax,ebp
c0021728:	89 da                	mov    edx,ebx
c002172a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002172e:	89 d3                	mov    ebx,edx
c0021730:	89 c5                	mov    ebp,eax
c0021732:	f7 e7                	mul    edi
c0021734:	39 d3                	cmp    ebx,edx
c0021736:	72 18                	jb     c0021750 <__divdi3+0x138>
c0021738:	74 0a                	je     c0021744 <__divdi3+0x12c>
c002173a:	89 e9                	mov    ecx,ebp
c002173c:	31 f6                	xor    esi,esi
c002173e:	e9 2d ff ff ff       	jmp    c0021670 <__divdi3+0x58>
c0021743:	90                   	nop
c0021744:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021747:	89 f1                	mov    ecx,esi
c0021749:	d3 e7                	shl    edi,cl
c002174b:	39 c7                	cmp    edi,eax
c002174d:	73 eb                	jae    c002173a <__divdi3+0x122>
c002174f:	90                   	nop
c0021750:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021753:	31 f6                	xor    esi,esi
c0021755:	e9 16 ff ff ff       	jmp    c0021670 <__divdi3+0x58>
c002175a:	66 90                	xchg   ax,ax
c002175c:	31 c9                	xor    ecx,ecx
c002175e:	e9 0d ff ff ff       	jmp    c0021670 <__divdi3+0x58>
c0021763:	90                   	nop

c0021764 <__moddi3>:
c0021764:	55                   	push   ebp
c0021765:	57                   	push   edi
c0021766:	56                   	push   esi
c0021767:	53                   	push   ebx
c0021768:	83 ec 2c             	sub    esp,0x2c
c002176b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002176f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021773:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021777:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002177b:	85 db                	test   ebx,ebx
c002177d:	0f 88 85 00 00 00    	js     c0021808 <__moddi3+0xa4>
c0021783:	89 de                	mov    esi,ebx
c0021785:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002178d:	89 d7                	mov    edi,edx
c002178f:	85 d2                	test   edx,edx
c0021791:	79 09                	jns    c002179c <__moddi3+0x38>
c0021793:	f7 d8                	neg    eax
c0021795:	83 d2 00             	adc    edx,0x0
c0021798:	f7 da                	neg    edx
c002179a:	89 d7                	mov    edi,edx
c002179c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00217a0:	89 cd                	mov    ebp,ecx
c00217a2:	85 ff                	test   edi,edi
c00217a4:	75 52                	jne    c00217f8 <__moddi3+0x94>
c00217a6:	89 c3                	mov    ebx,eax
c00217a8:	39 f0                	cmp    eax,esi
c00217aa:	76 24                	jbe    c00217d0 <__moddi3+0x6c>
c00217ac:	89 c8                	mov    eax,ecx
c00217ae:	89 f2                	mov    edx,esi
c00217b0:	f7 f3                	div    ebx
c00217b2:	89 d6                	mov    esi,edx
c00217b4:	89 f0                	mov    eax,esi
c00217b6:	31 d2                	xor    edx,edx
c00217b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00217bc:	85 c9                	test   ecx,ecx
c00217be:	74 07                	je     c00217c7 <__moddi3+0x63>
c00217c0:	f7 d8                	neg    eax
c00217c2:	83 d2 00             	adc    edx,0x0
c00217c5:	f7 da                	neg    edx
c00217c7:	83 c4 2c             	add    esp,0x2c
c00217ca:	5b                   	pop    ebx
c00217cb:	5e                   	pop    esi
c00217cc:	5f                   	pop    edi
c00217cd:	5d                   	pop    ebp
c00217ce:	c3                   	ret    
c00217cf:	90                   	nop
c00217d0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00217d4:	85 db                	test   ebx,ebx
c00217d6:	75 0d                	jne    c00217e5 <__moddi3+0x81>
c00217d8:	b8 01 00 00 00       	mov    eax,0x1
c00217dd:	31 d2                	xor    edx,edx
c00217df:	f7 f7                	div    edi
c00217e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00217e5:	89 f0                	mov    eax,esi
c00217e7:	31 d2                	xor    edx,edx
c00217e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00217ed:	f7 f7                	div    edi
c00217ef:	89 e8                	mov    eax,ebp
c00217f1:	f7 f7                	div    edi
c00217f3:	89 d6                	mov    esi,edx
c00217f5:	eb bd                	jmp    c00217b4 <__moddi3+0x50>
c00217f7:	90                   	nop
c00217f8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00217fc:	39 f7                	cmp    edi,esi
c00217fe:	76 20                	jbe    c0021820 <__moddi3+0xbc>
c0021800:	89 c8                	mov    eax,ecx
c0021802:	89 f2                	mov    edx,esi
c0021804:	eb b2                	jmp    c00217b8 <__moddi3+0x54>
c0021806:	66 90                	xchg   ax,ax
c0021808:	f7 d9                	neg    ecx
c002180a:	83 d3 00             	adc    ebx,0x0
c002180d:	f7 db                	neg    ebx
c002180f:	89 de                	mov    esi,ebx
c0021811:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021819:	e9 6f ff ff ff       	jmp    c002178d <__moddi3+0x29>
c002181e:	66 90                	xchg   ax,ax
c0021820:	0f bd c7             	bsr    eax,edi
c0021823:	83 f0 1f             	xor    eax,0x1f
c0021826:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002182a:	75 24                	jne    c0021850 <__moddi3+0xec>
c002182c:	39 f7                	cmp    edi,esi
c002182e:	72 06                	jb     c0021836 <__moddi3+0xd2>
c0021830:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021834:	77 0c                	ja     c0021842 <__moddi3+0xde>
c0021836:	89 e9                	mov    ecx,ebp
c0021838:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002183c:	19 fe                	sbb    esi,edi
c002183e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021842:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021846:	89 f2                	mov    edx,esi
c0021848:	e9 6b ff ff ff       	jmp    c00217b8 <__moddi3+0x54>
c002184d:	8d 76 00             	lea    esi,[esi+0x0]
c0021850:	b8 20 00 00 00       	mov    eax,0x20
c0021855:	89 c2                	mov    edx,eax
c0021857:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002185b:	29 da                	sub    edx,ebx
c002185d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021861:	88 d9                	mov    cl,bl
c0021863:	d3 e7                	shl    edi,cl
c0021865:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021869:	88 d1                	mov    cl,dl
c002186b:	d3 e8                	shr    eax,cl
c002186d:	09 c7                	or     edi,eax
c002186f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021873:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021877:	89 d8                	mov    eax,ebx
c0021879:	88 d9                	mov    cl,bl
c002187b:	d3 e7                	shl    edi,cl
c002187d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021881:	89 f3                	mov    ebx,esi
c0021883:	88 d1                	mov    cl,dl
c0021885:	d3 eb                	shr    ebx,cl
c0021887:	89 c7                	mov    edi,eax
c0021889:	88 c1                	mov    cl,al
c002188b:	d3 e6                	shl    esi,cl
c002188d:	89 e8                	mov    eax,ebp
c002188f:	88 d1                	mov    cl,dl
c0021891:	d3 e8                	shr    eax,cl
c0021893:	09 f0                	or     eax,esi
c0021895:	89 f9                	mov    ecx,edi
c0021897:	d3 e5                	shl    ebp,cl
c0021899:	89 da                	mov    edx,ebx
c002189b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002189f:	89 d3                	mov    ebx,edx
c00218a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00218a5:	89 c6                	mov    esi,eax
c00218a7:	89 d1                	mov    ecx,edx
c00218a9:	39 d3                	cmp    ebx,edx
c00218ab:	72 27                	jb     c00218d4 <__moddi3+0x170>
c00218ad:	74 21                	je     c00218d0 <__moddi3+0x16c>
c00218af:	29 f5                	sub    ebp,esi
c00218b1:	19 cb                	sbb    ebx,ecx
c00218b3:	89 de                	mov    esi,ebx
c00218b5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00218b9:	d3 e6                	shl    esi,cl
c00218bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00218bf:	89 f9                	mov    ecx,edi
c00218c1:	d3 ed                	shr    ebp,cl
c00218c3:	09 ee                	or     esi,ebp
c00218c5:	89 f0                	mov    eax,esi
c00218c7:	d3 eb                	shr    ebx,cl
c00218c9:	89 da                	mov    edx,ebx
c00218cb:	e9 e8 fe ff ff       	jmp    c00217b8 <__moddi3+0x54>
c00218d0:	39 c5                	cmp    ebp,eax
c00218d2:	73 db                	jae    c00218af <__moddi3+0x14b>
c00218d4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00218d8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00218dc:	89 d1                	mov    ecx,edx
c00218de:	89 c6                	mov    esi,eax
c00218e0:	eb cd                	jmp    c00218af <__moddi3+0x14b>
c00218e2:	66 90                	xchg   ax,ax

c00218e4 <__udivdi3>:
c00218e4:	55                   	push   ebp
c00218e5:	57                   	push   edi
c00218e6:	56                   	push   esi
c00218e7:	53                   	push   ebx
c00218e8:	83 ec 1c             	sub    esp,0x1c
c00218eb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00218ef:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00218f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00218f7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00218fb:	85 d2                	test   edx,edx
c00218fd:	75 41                	jne    c0021940 <__udivdi3+0x5c>
c00218ff:	39 f7                	cmp    edi,esi
c0021901:	76 15                	jbe    c0021918 <__udivdi3+0x34>
c0021903:	89 e8                	mov    eax,ebp
c0021905:	89 f2                	mov    edx,esi
c0021907:	f7 f7                	div    edi
c0021909:	31 db                	xor    ebx,ebx
c002190b:	89 da                	mov    edx,ebx
c002190d:	83 c4 1c             	add    esp,0x1c
c0021910:	5b                   	pop    ebx
c0021911:	5e                   	pop    esi
c0021912:	5f                   	pop    edi
c0021913:	5d                   	pop    ebp
c0021914:	c3                   	ret    
c0021915:	8d 76 00             	lea    esi,[esi+0x0]
c0021918:	89 f9                	mov    ecx,edi
c002191a:	85 ff                	test   edi,edi
c002191c:	75 0b                	jne    c0021929 <__udivdi3+0x45>
c002191e:	b8 01 00 00 00       	mov    eax,0x1
c0021923:	31 d2                	xor    edx,edx
c0021925:	f7 f7                	div    edi
c0021927:	89 c1                	mov    ecx,eax
c0021929:	31 d2                	xor    edx,edx
c002192b:	89 f0                	mov    eax,esi
c002192d:	f7 f1                	div    ecx
c002192f:	89 c3                	mov    ebx,eax
c0021931:	89 e8                	mov    eax,ebp
c0021933:	f7 f1                	div    ecx
c0021935:	89 da                	mov    edx,ebx
c0021937:	83 c4 1c             	add    esp,0x1c
c002193a:	5b                   	pop    ebx
c002193b:	5e                   	pop    esi
c002193c:	5f                   	pop    edi
c002193d:	5d                   	pop    ebp
c002193e:	c3                   	ret    
c002193f:	90                   	nop
c0021940:	39 f2                	cmp    edx,esi
c0021942:	77 1c                	ja     c0021960 <__udivdi3+0x7c>
c0021944:	0f bd da             	bsr    ebx,edx
c0021947:	83 f3 1f             	xor    ebx,0x1f
c002194a:	75 24                	jne    c0021970 <__udivdi3+0x8c>
c002194c:	39 f2                	cmp    edx,esi
c002194e:	72 08                	jb     c0021958 <__udivdi3+0x74>
c0021950:	39 ef                	cmp    edi,ebp
c0021952:	0f 87 84 00 00 00    	ja     c00219dc <__udivdi3+0xf8>
c0021958:	b8 01 00 00 00       	mov    eax,0x1
c002195d:	eb ac                	jmp    c002190b <__udivdi3+0x27>
c002195f:	90                   	nop
c0021960:	31 db                	xor    ebx,ebx
c0021962:	31 c0                	xor    eax,eax
c0021964:	89 da                	mov    edx,ebx
c0021966:	83 c4 1c             	add    esp,0x1c
c0021969:	5b                   	pop    ebx
c002196a:	5e                   	pop    esi
c002196b:	5f                   	pop    edi
c002196c:	5d                   	pop    ebp
c002196d:	c3                   	ret    
c002196e:	66 90                	xchg   ax,ax
c0021970:	b8 20 00 00 00       	mov    eax,0x20
c0021975:	29 d8                	sub    eax,ebx
c0021977:	88 d9                	mov    cl,bl
c0021979:	d3 e2                	shl    edx,cl
c002197b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002197f:	89 fa                	mov    edx,edi
c0021981:	88 c1                	mov    cl,al
c0021983:	d3 ea                	shr    edx,cl
c0021985:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021989:	09 d1                	or     ecx,edx
c002198b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002198f:	88 d9                	mov    cl,bl
c0021991:	d3 e7                	shl    edi,cl
c0021993:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021997:	89 f7                	mov    edi,esi
c0021999:	88 c1                	mov    cl,al
c002199b:	d3 ef                	shr    edi,cl
c002199d:	88 d9                	mov    cl,bl
c002199f:	d3 e6                	shl    esi,cl
c00219a1:	89 ea                	mov    edx,ebp
c00219a3:	88 c1                	mov    cl,al
c00219a5:	d3 ea                	shr    edx,cl
c00219a7:	09 d6                	or     esi,edx
c00219a9:	89 f0                	mov    eax,esi
c00219ab:	89 fa                	mov    edx,edi
c00219ad:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00219b1:	89 d7                	mov    edi,edx
c00219b3:	89 c6                	mov    esi,eax
c00219b5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00219b9:	39 d7                	cmp    edi,edx
c00219bb:	72 13                	jb     c00219d0 <__udivdi3+0xec>
c00219bd:	74 09                	je     c00219c8 <__udivdi3+0xe4>
c00219bf:	89 f0                	mov    eax,esi
c00219c1:	31 db                	xor    ebx,ebx
c00219c3:	e9 43 ff ff ff       	jmp    c002190b <__udivdi3+0x27>
c00219c8:	88 d9                	mov    cl,bl
c00219ca:	d3 e5                	shl    ebp,cl
c00219cc:	39 c5                	cmp    ebp,eax
c00219ce:	73 ef                	jae    c00219bf <__udivdi3+0xdb>
c00219d0:	8d 46 ff             	lea    eax,[esi-0x1]
c00219d3:	31 db                	xor    ebx,ebx
c00219d5:	e9 31 ff ff ff       	jmp    c002190b <__udivdi3+0x27>
c00219da:	66 90                	xchg   ax,ax
c00219dc:	31 c0                	xor    eax,eax
c00219de:	e9 28 ff ff ff       	jmp    c002190b <__udivdi3+0x27>
c00219e3:	90                   	nop

c00219e4 <__umoddi3>:
c00219e4:	55                   	push   ebp
c00219e5:	57                   	push   edi
c00219e6:	56                   	push   esi
c00219e7:	53                   	push   ebx
c00219e8:	83 ec 1c             	sub    esp,0x1c
c00219eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00219ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00219f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00219f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00219fb:	89 da                	mov    edx,ebx
c00219fd:	85 c0                	test   eax,eax
c00219ff:	75 37                	jne    c0021a38 <__umoddi3+0x54>
c0021a01:	39 df                	cmp    edi,ebx
c0021a03:	76 13                	jbe    c0021a18 <__umoddi3+0x34>
c0021a05:	89 f0                	mov    eax,esi
c0021a07:	f7 f7                	div    edi
c0021a09:	89 d0                	mov    eax,edx
c0021a0b:	31 d2                	xor    edx,edx
c0021a0d:	83 c4 1c             	add    esp,0x1c
c0021a10:	5b                   	pop    ebx
c0021a11:	5e                   	pop    esi
c0021a12:	5f                   	pop    edi
c0021a13:	5d                   	pop    ebp
c0021a14:	c3                   	ret    
c0021a15:	8d 76 00             	lea    esi,[esi+0x0]
c0021a18:	89 fd                	mov    ebp,edi
c0021a1a:	85 ff                	test   edi,edi
c0021a1c:	75 0b                	jne    c0021a29 <__umoddi3+0x45>
c0021a1e:	b8 01 00 00 00       	mov    eax,0x1
c0021a23:	31 d2                	xor    edx,edx
c0021a25:	f7 f7                	div    edi
c0021a27:	89 c5                	mov    ebp,eax
c0021a29:	89 d8                	mov    eax,ebx
c0021a2b:	31 d2                	xor    edx,edx
c0021a2d:	f7 f5                	div    ebp
c0021a2f:	89 f0                	mov    eax,esi
c0021a31:	f7 f5                	div    ebp
c0021a33:	89 d0                	mov    eax,edx
c0021a35:	eb d4                	jmp    c0021a0b <__umoddi3+0x27>
c0021a37:	90                   	nop
c0021a38:	89 f1                	mov    ecx,esi
c0021a3a:	39 d8                	cmp    eax,ebx
c0021a3c:	76 0a                	jbe    c0021a48 <__umoddi3+0x64>
c0021a3e:	89 f0                	mov    eax,esi
c0021a40:	83 c4 1c             	add    esp,0x1c
c0021a43:	5b                   	pop    ebx
c0021a44:	5e                   	pop    esi
c0021a45:	5f                   	pop    edi
c0021a46:	5d                   	pop    ebp
c0021a47:	c3                   	ret    
c0021a48:	0f bd e8             	bsr    ebp,eax
c0021a4b:	83 f5 1f             	xor    ebp,0x1f
c0021a4e:	75 1c                	jne    c0021a6c <__umoddi3+0x88>
c0021a50:	39 d8                	cmp    eax,ebx
c0021a52:	72 04                	jb     c0021a58 <__umoddi3+0x74>
c0021a54:	39 f7                	cmp    edi,esi
c0021a56:	77 08                	ja     c0021a60 <__umoddi3+0x7c>
c0021a58:	89 da                	mov    edx,ebx
c0021a5a:	29 fe                	sub    esi,edi
c0021a5c:	19 c2                	sbb    edx,eax
c0021a5e:	89 f1                	mov    ecx,esi
c0021a60:	89 c8                	mov    eax,ecx
c0021a62:	83 c4 1c             	add    esp,0x1c
c0021a65:	5b                   	pop    ebx
c0021a66:	5e                   	pop    esi
c0021a67:	5f                   	pop    edi
c0021a68:	5d                   	pop    ebp
c0021a69:	c3                   	ret    
c0021a6a:	66 90                	xchg   ax,ax
c0021a6c:	ba 20 00 00 00       	mov    edx,0x20
c0021a71:	29 ea                	sub    edx,ebp
c0021a73:	89 e9                	mov    ecx,ebp
c0021a75:	d3 e0                	shl    eax,cl
c0021a77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a7b:	89 f8                	mov    eax,edi
c0021a7d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a81:	88 d1                	mov    cl,dl
c0021a83:	d3 e8                	shr    eax,cl
c0021a85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021a89:	09 c1                	or     ecx,eax
c0021a8b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021a8f:	89 e9                	mov    ecx,ebp
c0021a91:	d3 e7                	shl    edi,cl
c0021a93:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021a97:	89 d8                	mov    eax,ebx
c0021a99:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021a9d:	88 d1                	mov    cl,dl
c0021a9f:	d3 e8                	shr    eax,cl
c0021aa1:	89 c7                	mov    edi,eax
c0021aa3:	89 e9                	mov    ecx,ebp
c0021aa5:	d3 e3                	shl    ebx,cl
c0021aa7:	89 f0                	mov    eax,esi
c0021aa9:	88 d1                	mov    cl,dl
c0021aab:	d3 e8                	shr    eax,cl
c0021aad:	09 d8                	or     eax,ebx
c0021aaf:	89 e9                	mov    ecx,ebp
c0021ab1:	d3 e6                	shl    esi,cl
c0021ab3:	89 f3                	mov    ebx,esi
c0021ab5:	89 fa                	mov    edx,edi
c0021ab7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021abb:	89 d1                	mov    ecx,edx
c0021abd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021ac1:	89 c6                	mov    esi,eax
c0021ac3:	89 d7                	mov    edi,edx
c0021ac5:	39 d1                	cmp    ecx,edx
c0021ac7:	72 27                	jb     c0021af0 <__umoddi3+0x10c>
c0021ac9:	74 21                	je     c0021aec <__umoddi3+0x108>
c0021acb:	89 ca                	mov    edx,ecx
c0021acd:	29 f3                	sub    ebx,esi
c0021acf:	19 fa                	sbb    edx,edi
c0021ad1:	89 d0                	mov    eax,edx
c0021ad3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021ad7:	d3 e0                	shl    eax,cl
c0021ad9:	89 e9                	mov    ecx,ebp
c0021adb:	d3 eb                	shr    ebx,cl
c0021add:	09 d8                	or     eax,ebx
c0021adf:	d3 ea                	shr    edx,cl
c0021ae1:	83 c4 1c             	add    esp,0x1c
c0021ae4:	5b                   	pop    ebx
c0021ae5:	5e                   	pop    esi
c0021ae6:	5f                   	pop    edi
c0021ae7:	5d                   	pop    ebp
c0021ae8:	c3                   	ret    
c0021ae9:	8d 76 00             	lea    esi,[esi+0x0]
c0021aec:	39 c3                	cmp    ebx,eax
c0021aee:	73 db                	jae    c0021acb <__umoddi3+0xe7>
c0021af0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021af4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021af8:	89 d7                	mov    edi,edx
c0021afa:	89 c6                	mov    esi,eax
c0021afc:	eb cd                	jmp    c0021acb <__umoddi3+0xe7>

Disassembly of section .init:

c0021afe <_init>:
c0021afe:	55                   	push   ebp
c0021aff:	89 e5                	mov    ebp,esp
c0021b01:	e8 ee e5 fd ff       	call   c00000f4 <frame_dummy>
c0021b06:	e8 e5 fa ff ff       	call   c00215f0 <__do_global_ctors_aux>
c0021b0b:	5d                   	pop    ebp
c0021b0c:	c3                   	ret    

Disassembly of section .fini:

c0021b0d <_fini>:
c0021b0d:	55                   	push   ebp
c0021b0e:	89 e5                	mov    ebp,esp
c0021b10:	e8 6f e5 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0021b15:	5d                   	pop    ebp
c0021b16:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021b18 <DriverlessDevice::~DriverlessDevice()>:
c0021b18:	ba 5c 35 02 c0       	mov    edx,0xc002355c
c0021b1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b21:	89 10                	mov    DWORD PTR [eax],edx
c0021b23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b27:	50                   	push   eax
c0021b28:	e8 d1 7d fe ff       	call   c00098fe <Device::~Device()>
c0021b2d:	83 c4 04             	add    esp,0x4
c0021b30:	90                   	nop
c0021b31:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021b32 <DriverlessDevice::~DriverlessDevice()>:
c0021b32:	83 ec 0c             	sub    esp,0xc
c0021b35:	83 ec 0c             	sub    esp,0xc
c0021b38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b3c:	e8 d7 ff ff ff       	call   c0021b18 <DriverlessDevice::~DriverlessDevice()>
c0021b41:	83 c4 10             	add    esp,0x10
c0021b44:	83 ec 08             	sub    esp,0x8
c0021b47:	68 58 01 00 00       	push   0x158
c0021b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b50:	e8 fe b7 fe ff       	call   c000d353 <operator delete(void*, unsigned long)>
c0021b55:	83 c4 10             	add    esp,0x10
c0021b58:	83 c4 0c             	add    esp,0xc
c0021b5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021b5c <LinkedList<Device>::addElement(Device*)>:
c0021b5c:	83 ec 0c             	sub    esp,0xc
c0021b5f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021b64:	75 10                	jne    c0021b76 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021b66:	83 ec 0c             	sub    esp,0xc
c0021b69:	68 f0 34 02 c0       	push   0xc00234f0
c0021b6e:	e8 9f e4 fe ff       	call   c0010012 <KePanic(char const*)>
c0021b73:	83 c4 10             	add    esp,0x10
c0021b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b7c:	85 c0                	test   eax,eax
c0021b7e:	74 3a                	je     c0021bba <LinkedList<Device>::addElement(Device*)+0x5e>
c0021b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b87:	85 c0                	test   eax,eax
c0021b89:	74 2f                	je     c0021bba <LinkedList<Device>::addElement(Device*)+0x5e>
c0021b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021b96:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ba0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ba4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021bae:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021bb8:	eb 68                	jmp    c0021c22 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bc0:	85 c0                	test   eax,eax
c0021bc2:	75 4e                	jne    c0021c12 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021bcb:	85 c0                	test   eax,eax
c0021bcd:	75 43                	jne    c0021c12 <LinkedList<Device>::addElement(Device*)+0xb6>
c0021bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bd3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021bd7:	89 10                	mov    DWORD PTR [eax],edx
c0021bd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bdd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021be1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021be8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021beb:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bf9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021bfc:	85 c0                	test   eax,eax
c0021bfe:	74 22                	je     c0021c22 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021c00:	83 ec 0c             	sub    esp,0xc
c0021c03:	68 12 35 02 c0       	push   0xc0023512
c0021c08:	e8 05 e4 fe ff       	call   c0010012 <KePanic(char const*)>
c0021c0d:	83 c4 10             	add    esp,0x10
c0021c10:	eb 10                	jmp    c0021c22 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021c12:	83 ec 0c             	sub    esp,0xc
c0021c15:	68 1c 35 02 c0       	push   0xc002351c
c0021c1a:	e8 f3 e3 fe ff       	call   c0010012 <KePanic(char const*)>
c0021c1f:	83 c4 10             	add    esp,0x10
c0021c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c26:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021c29:	8d 50 01             	lea    edx,[eax+0x1]
c0021c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c30:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021c33:	90                   	nop
c0021c34:	83 c4 0c             	add    esp,0xc
c0021c37:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021c38 <LinkedList<Device>::LinkedList()>:
c0021c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021c42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021c4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c51:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021c62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021c6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c71:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021c78:	90                   	nop
c0021c79:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021c7c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c80:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c82:	85 c0                	test   eax,eax
c0021c84:	75 0e                	jne    c0021c94 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c8d:	85 c0                	test   eax,eax
c0021c8f:	75 03                	jne    c0021c94 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021c91:	b0 01                	mov    al,0x1
c0021c93:	c3                   	ret    
c0021c94:	b0 00                	mov    al,0x0
c0021c96:	90                   	nop
c0021c97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021c98 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c9e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021ca0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021ca0:	83 ec 0c             	sub    esp,0xc
c0021ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ca9:	85 c0                	test   eax,eax
c0021cab:	75 17                	jne    c0021cc4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021cad:	83 ec 0c             	sub    esp,0xc
c0021cb0:	68 8c 37 02 c0       	push   0xc002378c
c0021cb5:	e8 58 e3 fe ff       	call   c0010012 <KePanic(char const*)>
c0021cba:	83 c4 10             	add    esp,0x10
c0021cbd:	e9 96 00 00 00       	jmp    c0021d58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0021cc2:	66 90                	xchg   ax,ax
c0021cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ccb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021cce:	85 c0                	test   eax,eax
c0021cd0:	0f 95 c0             	setne  al
c0021cd3:	0f b6 c0             	movzx  eax,al
c0021cd6:	85 c0                	test   eax,eax
c0021cd8:	74 12                	je     c0021cec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0021cda:	83 ec 0c             	sub    esp,0xc
c0021cdd:	68 d7 37 02 c0       	push   0xc00237d7
c0021ce2:	e8 2b e3 fe ff       	call   c0010012 <KePanic(char const*)>
c0021ce7:	83 c4 10             	add    esp,0x10
c0021cea:	66 90                	xchg   ax,ax
c0021cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021cf2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021cf5:	85 c0                	test   eax,eax
c0021cf7:	0f 94 c0             	sete   al
c0021cfa:	0f b6 c0             	movzx  eax,al
c0021cfd:	85 c0                	test   eax,eax
c0021cff:	74 33                	je     c0021d34 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0021d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d05:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021d0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d0f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d1d:	83 f8 01             	cmp    eax,0x1
c0021d20:	74 22                	je     c0021d44 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021d22:	83 ec 0c             	sub    esp,0xc
c0021d25:	68 b0 37 02 c0       	push   0xc00237b0
c0021d2a:	e8 e3 e2 fe ff       	call   c0010012 <KePanic(char const*)>
c0021d2f:	83 c4 10             	add    esp,0x10
c0021d32:	eb 10                	jmp    c0021d44 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d38:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d3a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d41:	89 10                	mov    DWORD PTR [eax],edx
c0021d43:	90                   	nop
c0021d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d4b:	8d 50 ff             	lea    edx,[eax-0x1]
c0021d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d52:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021d55:	8d 76 00             	lea    esi,[esi+0x0]
c0021d58:	83 c4 0c             	add    esp,0xc
c0021d5b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021d5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021d5c:	83 ec 0c             	sub    esp,0xc
c0021d5f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021d64:	75 12                	jne    c0021d78 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021d66:	83 ec 0c             	sub    esp,0xc
c0021d69:	68 f0 34 02 c0       	push   0xc00234f0
c0021d6e:	e8 9f e2 fe ff       	call   c0010012 <KePanic(char const*)>
c0021d73:	83 c4 10             	add    esp,0x10
c0021d76:	66 90                	xchg   ax,ax
c0021d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d7e:	85 c0                	test   eax,eax
c0021d80:	74 36                	je     c0021db8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d89:	85 c0                	test   eax,eax
c0021d8b:	74 2b                	je     c0021db8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021d98:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0021d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021da3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021daa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021dad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021db4:	eb 6a                	jmp    c0021e20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021db6:	66 90                	xchg   ax,ax
c0021db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021dbe:	85 c0                	test   eax,eax
c0021dc0:	75 4e                	jne    c0021e10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021dc9:	85 c0                	test   eax,eax
c0021dcb:	75 43                	jne    c0021e10 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dd1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021dd5:	89 10                	mov    DWORD PTR [eax],edx
c0021dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ddb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ddf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021de6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021de9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021df0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021df4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021df7:	85 c0                	test   eax,eax
c0021df9:	74 25                	je     c0021e20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021dfb:	83 ec 0c             	sub    esp,0xc
c0021dfe:	68 12 35 02 c0       	push   0xc0023512
c0021e03:	e8 0a e2 fe ff       	call   c0010012 <KePanic(char const*)>
c0021e08:	83 c4 10             	add    esp,0x10
c0021e0b:	eb 13                	jmp    c0021e20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0021e10:	83 ec 0c             	sub    esp,0xc
c0021e13:	68 1c 35 02 c0       	push   0xc002351c
c0021e18:	e8 f5 e1 fe ff       	call   c0010012 <KePanic(char const*)>
c0021e1d:	83 c4 10             	add    esp,0x10
c0021e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021e27:	8d 50 01             	lea    edx,[eax+0x1]
c0021e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e2e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021e31:	90                   	nop
c0021e32:	83 c4 0c             	add    esp,0xc
c0021e35:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021e38 <ACPI::~ACPI()>:
c0021e38:	83 ec 0c             	sub    esp,0xc
c0021e3b:	ba d4 3b 02 c0       	mov    edx,0xc0023bd4
c0021e40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e44:	89 10                	mov    DWORD PTR [eax],edx
c0021e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e4a:	83 ec 0c             	sub    esp,0xc
c0021e4d:	50                   	push   eax
c0021e4e:	e8 ab 7a fe ff       	call   c00098fe <Device::~Device()>
c0021e53:	83 c4 10             	add    esp,0x10
c0021e56:	90                   	nop
c0021e57:	83 c4 0c             	add    esp,0xc
c0021e5a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021e5c <ACPI::~ACPI()>:
c0021e5c:	83 ec 0c             	sub    esp,0xc
c0021e5f:	83 ec 0c             	sub    esp,0xc
c0021e62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e66:	e8 cd ff ff ff       	call   c0021e38 <ACPI::~ACPI()>
c0021e6b:	83 c4 10             	add    esp,0x10
c0021e6e:	83 ec 08             	sub    esp,0x8
c0021e71:	68 64 12 00 00       	push   0x1264
c0021e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e7a:	e8 d4 b4 fe ff       	call   c000d353 <operator delete(void*, unsigned long)>
c0021e7f:	83 c4 10             	add    esp,0x10
c0021e82:	83 c4 0c             	add    esp,0xc
c0021e85:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021e88 <LinkedList<Device>::~LinkedList()>:
c0021e88:	90                   	nop
c0021e89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021e8c <LinkedList<Device>::isEmpty()>:
c0021e8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e90:	8b 00                	mov    eax,DWORD PTR [eax]
c0021e92:	85 c0                	test   eax,eax
c0021e94:	75 0e                	jne    c0021ea4 <LinkedList<Device>::isEmpty()+0x18>
c0021e96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021e9d:	85 c0                	test   eax,eax
c0021e9f:	75 03                	jne    c0021ea4 <LinkedList<Device>::isEmpty()+0x18>
c0021ea1:	b0 01                	mov    al,0x1
c0021ea3:	c3                   	ret    
c0021ea4:	b0 00                	mov    al,0x0
c0021ea6:	90                   	nop
c0021ea7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021ea8 <LinkedList<Device>::getFirstElement()>:
c0021ea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021eac:	8b 00                	mov    eax,DWORD PTR [eax]
c0021eae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021eb0 <LinkedList<Device>::removeFirst()>:
c0021eb0:	83 ec 0c             	sub    esp,0xc
c0021eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eb7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021eb9:	85 c0                	test   eax,eax
c0021ebb:	75 17                	jne    c0021ed4 <LinkedList<Device>::removeFirst()+0x24>
c0021ebd:	83 ec 0c             	sub    esp,0xc
c0021ec0:	68 8c 37 02 c0       	push   0xc002378c
c0021ec5:	e8 48 e1 fe ff       	call   c0010012 <KePanic(char const*)>
c0021eca:	83 c4 10             	add    esp,0x10
c0021ecd:	e9 92 00 00 00       	jmp    c0021f64 <LinkedList<Device>::removeFirst()+0xb4>
c0021ed2:	66 90                	xchg   ax,ax
c0021ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ed8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021edb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021ee1:	85 c0                	test   eax,eax
c0021ee3:	74 13                	je     c0021ef8 <LinkedList<Device>::removeFirst()+0x48>
c0021ee5:	83 ec 0c             	sub    esp,0xc
c0021ee8:	68 d7 37 02 c0       	push   0xc00237d7
c0021eed:	e8 20 e1 fe ff       	call   c0010012 <KePanic(char const*)>
c0021ef2:	83 c4 10             	add    esp,0x10
c0021ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0021ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021efc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021efe:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021f04:	85 c0                	test   eax,eax
c0021f06:	75 34                	jne    c0021f3c <LinkedList<Device>::removeFirst()+0x8c>
c0021f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021f12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021f1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f24:	83 f8 01             	cmp    eax,0x1
c0021f27:	74 27                	je     c0021f50 <LinkedList<Device>::removeFirst()+0xa0>
c0021f29:	83 ec 0c             	sub    esp,0xc
c0021f2c:	68 b0 37 02 c0       	push   0xc00237b0
c0021f31:	e8 dc e0 fe ff       	call   c0010012 <KePanic(char const*)>
c0021f36:	83 c4 10             	add    esp,0x10
c0021f39:	eb 15                	jmp    c0021f50 <LinkedList<Device>::removeFirst()+0xa0>
c0021f3b:	90                   	nop
c0021f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f40:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f42:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0021f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f4c:	89 10                	mov    DWORD PTR [eax],edx
c0021f4e:	66 90                	xchg   ax,ax
c0021f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021f57:	8d 50 ff             	lea    edx,[eax-0x1]
c0021f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021f61:	8d 76 00             	lea    esi,[esi+0x0]
c0021f64:	83 c4 0c             	add    esp,0xc
c0021f67:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021f68 <Computer::~Computer()>:
c0021f68:	83 ec 0c             	sub    esp,0xc
c0021f6b:	ba 84 3e 02 c0       	mov    edx,0xc0023e84
c0021f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f74:	89 10                	mov    DWORD PTR [eax],edx
c0021f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f7a:	83 ec 0c             	sub    esp,0xc
c0021f7d:	50                   	push   eax
c0021f7e:	e8 7b 79 fe ff       	call   c00098fe <Device::~Device()>
c0021f83:	83 c4 10             	add    esp,0x10
c0021f86:	90                   	nop
c0021f87:	83 c4 0c             	add    esp,0xc
c0021f8a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0021f8c <Computer::~Computer()>:
c0021f8c:	83 ec 0c             	sub    esp,0xc
c0021f8f:	83 ec 0c             	sub    esp,0xc
c0021f92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f96:	e8 cd ff ff ff       	call   c0021f68 <Computer::~Computer()>
c0021f9b:	83 c4 10             	add    esp,0x10
c0021f9e:	83 ec 08             	sub    esp,0x8
c0021fa1:	68 6c 01 00 00       	push   0x16c
c0021fa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021faa:	e8 a4 b3 fe ff       	call   c000d353 <operator delete(void*, unsigned long)>
c0021faf:	83 c4 10             	add    esp,0x10
c0021fb2:	83 c4 0c             	add    esp,0xc
c0021fb5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021fb6 <idleCommon()>:
c0021fb6:	83 ec 0c             	sub    esp,0xc
c0021fb9:	fa                   	cli    
c0021fba:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0021fc0:	e8 c3 4f ff ff       	call   c0016f88 <schedule()>
c0021fc5:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0021fcc:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0021fd3:	75 01                	jne    c0021fd6 <idleCommon()+0x20>
c0021fd5:	fb                   	sti    
c0021fd6:	83 c4 0c             	add    esp,0xc
c0021fd9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021fda <LinkedList<UnixFile>::~LinkedList()>:
c0021fda:	90                   	nop
c0021fdb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0021fdc <LinkedList<UnixFile>::LinkedList()>:
c0021fdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fe0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021fe6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021ff1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ff5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021ffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022000:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002200a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022011:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022015:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002201c:	90                   	nop
c002201d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002201e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002201e:	83 ec 0c             	sub    esp,0xc
c0022021:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022026:	75 10                	jne    c0022038 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022028:	83 ec 0c             	sub    esp,0xc
c002202b:	68 f0 34 02 c0       	push   0xc00234f0
c0022030:	e8 dd df fe ff       	call   c0010012 <KePanic(char const*)>
c0022035:	83 c4 10             	add    esp,0x10
c0022038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002203c:	8b 00                	mov    eax,DWORD PTR [eax]
c002203e:	85 c0                	test   eax,eax
c0022040:	74 34                	je     c0022076 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0022042:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022046:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022049:	85 c0                	test   eax,eax
c002204b:	74 29                	je     c0022076 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002204d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022051:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022054:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022058:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002205b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002205f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022063:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002206a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002206d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022074:	eb 65                	jmp    c00220db <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002207a:	8b 00                	mov    eax,DWORD PTR [eax]
c002207c:	85 c0                	test   eax,eax
c002207e:	75 4b                	jne    c00220cb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022084:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022087:	85 c0                	test   eax,eax
c0022089:	75 40                	jne    c00220cb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002208b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002208f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022093:	89 10                	mov    DWORD PTR [eax],edx
c0022095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022099:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002209d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00220a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00220ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00220b5:	85 c0                	test   eax,eax
c00220b7:	74 22                	je     c00220db <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00220b9:	83 ec 0c             	sub    esp,0xc
c00220bc:	68 12 35 02 c0       	push   0xc0023512
c00220c1:	e8 4c df fe ff       	call   c0010012 <KePanic(char const*)>
c00220c6:	83 c4 10             	add    esp,0x10
c00220c9:	eb 10                	jmp    c00220db <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00220cb:	83 ec 0c             	sub    esp,0xc
c00220ce:	68 1c 35 02 c0       	push   0xc002351c
c00220d3:	e8 3a df fe ff       	call   c0010012 <KePanic(char const*)>
c00220d8:	83 c4 10             	add    esp,0x10
c00220db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00220e2:	8d 50 01             	lea    edx,[eax+0x1]
c00220e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220e9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00220ec:	90                   	nop
c00220ed:	83 c4 0c             	add    esp,0xc
c00220f0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00220f2 <LinkedList<UnixFile>::getFirstElement()>:
c00220f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00220f8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00220fa <LinkedList<UnixFile>::removeFirst()>:
c00220fa:	83 ec 0c             	sub    esp,0xc
c00220fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022101:	8b 00                	mov    eax,DWORD PTR [eax]
c0022103:	85 c0                	test   eax,eax
c0022105:	75 12                	jne    c0022119 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022107:	83 ec 0c             	sub    esp,0xc
c002210a:	68 8c 37 02 c0       	push   0xc002378c
c002210f:	e8 fe de fe ff       	call   c0010012 <KePanic(char const*)>
c0022114:	83 c4 10             	add    esp,0x10
c0022117:	eb 7e                	jmp    c0022197 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002211d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022120:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022123:	85 c0                	test   eax,eax
c0022125:	74 10                	je     c0022137 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022127:	83 ec 0c             	sub    esp,0xc
c002212a:	68 d7 37 02 c0       	push   0xc00237d7
c002212f:	e8 de de fe ff       	call   c0010012 <KePanic(char const*)>
c0022134:	83 c4 10             	add    esp,0x10
c0022137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002213b:	8b 00                	mov    eax,DWORD PTR [eax]
c002213d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022140:	85 c0                	test   eax,eax
c0022142:	75 33                	jne    c0022177 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022148:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002214e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022152:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002215d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022160:	83 f8 01             	cmp    eax,0x1
c0022163:	74 21                	je     c0022186 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022165:	83 ec 0c             	sub    esp,0xc
c0022168:	68 b0 37 02 c0       	push   0xc00237b0
c002216d:	e8 a0 de fe ff       	call   c0010012 <KePanic(char const*)>
c0022172:	83 c4 10             	add    esp,0x10
c0022175:	eb 0f                	jmp    c0022186 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022177:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002217b:	8b 00                	mov    eax,DWORD PTR [eax]
c002217d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022184:	89 10                	mov    DWORD PTR [eax],edx
c0022186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002218a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002218d:	8d 50 ff             	lea    edx,[eax-0x1]
c0022190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022194:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022197:	83 c4 0c             	add    esp,0xc
c002219a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002219c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002219c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00221a3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00221a4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00221a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221a8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00221ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00221ac <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00221ac:	90                   	nop
c00221ad:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00221b0 <ThreadControlBlock::ThreadControlBlock()>:
c00221b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221b4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00221bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221bf:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00221c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ca:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00221d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221d5:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00221dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221e0:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00221e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221eb:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00221ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221f3:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00221f7:	90                   	nop
c00221f8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00221fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00221fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022200:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002220a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022211:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022215:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002221c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022220:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022226:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002222a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022235:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002223c:	90                   	nop
c002223d:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002223e <CPU::~CPU()>:
c002223e:	83 ec 0c             	sub    esp,0xc
c0022241:	ba a0 55 02 c0       	mov    edx,0xc00255a0
c0022246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002224a:	89 10                	mov    DWORD PTR [eax],edx
c002224c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022250:	83 ec 0c             	sub    esp,0xc
c0022253:	50                   	push   eax
c0022254:	e8 a5 76 fe ff       	call   c00098fe <Device::~Device()>
c0022259:	83 c4 10             	add    esp,0x10
c002225c:	90                   	nop
c002225d:	83 c4 0c             	add    esp,0xc
c0022260:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022262 <CPU::~CPU()>:
c0022262:	83 ec 0c             	sub    esp,0xc
c0022265:	83 ec 0c             	sub    esp,0xc
c0022268:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002226c:	e8 cd ff ff ff       	call   c002223e <CPU::~CPU()>
c0022271:	83 c4 10             	add    esp,0x10
c0022274:	83 ec 08             	sub    esp,0x8
c0022277:	68 78 11 00 00       	push   0x1178
c002227c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022280:	e8 ce b0 fe ff       	call   c000d353 <operator delete(void*, unsigned long)>
c0022285:	83 c4 10             	add    esp,0x10
c0022288:	83 c4 0c             	add    esp,0xc
c002228b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002228c <PCI::~PCI()>:
c002228c:	83 ec 0c             	sub    esp,0xc
c002228f:	ba 04 5b 02 c0       	mov    edx,0xc0025b04
c0022294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022298:	89 10                	mov    DWORD PTR [eax],edx
c002229a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002229e:	83 ec 0c             	sub    esp,0xc
c00222a1:	50                   	push   eax
c00222a2:	e8 9d 66 fe ff       	call   c0008944 <Bus::~Bus()>
c00222a7:	83 c4 10             	add    esp,0x10
c00222aa:	90                   	nop
c00222ab:	83 c4 0c             	add    esp,0xc
c00222ae:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00222b0 <PCI::~PCI()>:
c00222b0:	83 ec 0c             	sub    esp,0xc
c00222b3:	83 ec 0c             	sub    esp,0xc
c00222b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222ba:	e8 cd ff ff ff       	call   c002228c <PCI::~PCI()>
c00222bf:	83 c4 10             	add    esp,0x10
c00222c2:	83 ec 08             	sub    esp,0x8
c00222c5:	68 5c 01 00 00       	push   0x15c
c00222ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222ce:	e8 80 b0 fe ff       	call   c000d353 <operator delete(void*, unsigned long)>
c00222d3:	83 c4 10             	add    esp,0x10
c00222d6:	83 c4 0c             	add    esp,0xc
c00222d9:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00222da <IDE::~IDE()>:
c00222da:	83 ec 0c             	sub    esp,0xc
c00222dd:	ba 54 5c 02 c0       	mov    edx,0xc0025c54
c00222e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222e6:	89 10                	mov    DWORD PTR [eax],edx
c00222e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222ec:	83 ec 0c             	sub    esp,0xc
c00222ef:	50                   	push   eax
c00222f0:	e8 97 7a fe ff       	call   c0009d8c <HardDiskController::~HardDiskController()>
c00222f5:	83 c4 10             	add    esp,0x10
c00222f8:	90                   	nop
c00222f9:	83 c4 0c             	add    esp,0xc
c00222fc:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00222fe <IDE::~IDE()>:
c00222fe:	83 ec 0c             	sub    esp,0xc
c0022301:	83 ec 0c             	sub    esp,0xc
c0022304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022308:	e8 cd ff ff ff       	call   c00222da <IDE::~IDE()>
c002230d:	83 c4 10             	add    esp,0x10
c0022310:	83 ec 08             	sub    esp,0x8
c0022313:	68 70 02 00 00       	push   0x270
c0022318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002231c:	e8 32 b0 fe ff       	call   c000d353 <operator delete(void*, unsigned long)>
c0022321:	83 c4 10             	add    esp,0x10
c0022324:	83 c4 0c             	add    esp,0xc
c0022327:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0022328 <SATABus::~SATABus()>:
c0022328:	83 ec 0c             	sub    esp,0xc
c002232b:	ba a4 5c 02 c0       	mov    edx,0xc0025ca4
c0022330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022334:	89 10                	mov    DWORD PTR [eax],edx
c0022336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002233a:	83 ec 0c             	sub    esp,0xc
c002233d:	50                   	push   eax
c002233e:	e8 49 7a fe ff       	call   c0009d8c <HardDiskController::~HardDiskController()>
c0022343:	83 c4 10             	add    esp,0x10
c0022346:	90                   	nop
c0022347:	83 c4 0c             	add    esp,0xc
c002234a:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002234c <SATABus::~SATABus()>:
c002234c:	83 ec 0c             	sub    esp,0xc
c002234f:	83 ec 0c             	sub    esp,0xc
c0022352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022356:	e8 cd ff ff ff       	call   c0022328 <SATABus::~SATABus()>
c002235b:	83 c4 10             	add    esp,0x10
c002235e:	83 ec 08             	sub    esp,0x8
c0022361:	68 64 01 00 00       	push   0x164
c0022366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002236a:	e8 e4 af fe ff       	call   c000d353 <operator delete(void*, unsigned long)>
c002236f:	83 c4 10             	add    esp,0x10
c0022372:	83 c4 0c             	add    esp,0xc
c0022375:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0022376 <ATA::~ATA()>:
c0022376:	83 ec 0c             	sub    esp,0xc
c0022379:	ba 8c 5d 02 c0       	mov    edx,0xc0025d8c
c002237e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022382:	89 10                	mov    DWORD PTR [eax],edx
c0022384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022388:	83 ec 0c             	sub    esp,0xc
c002238b:	50                   	push   eax
c002238c:	e8 dd 7a fe ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c0022391:	83 c4 10             	add    esp,0x10
c0022394:	90                   	nop
c0022395:	83 c4 0c             	add    esp,0xc
c0022398:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002239a <ATA::~ATA()>:
c002239a:	83 ec 0c             	sub    esp,0xc
c002239d:	83 ec 0c             	sub    esp,0xc
c00223a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223a4:	e8 cd ff ff ff       	call   c0022376 <ATA::~ATA()>
c00223a9:	83 c4 10             	add    esp,0x10
c00223ac:	83 ec 08             	sub    esp,0x8
c00223af:	68 8c 01 00 00       	push   0x18c
c00223b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223b8:	e8 96 af fe ff       	call   c000d353 <operator delete(void*, unsigned long)>
c00223bd:	83 c4 10             	add    esp,0x10
c00223c0:	83 c4 0c             	add    esp,0xc
c00223c3:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00223c4 <ATAPI::~ATAPI()>:
c00223c4:	83 ec 0c             	sub    esp,0xc
c00223c7:	ba d4 5d 02 c0       	mov    edx,0xc0025dd4
c00223cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d0:	89 10                	mov    DWORD PTR [eax],edx
c00223d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223d6:	83 ec 0c             	sub    esp,0xc
c00223d9:	50                   	push   eax
c00223da:	e8 8f 7a fe ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c00223df:	83 c4 10             	add    esp,0x10
c00223e2:	90                   	nop
c00223e3:	83 c4 0c             	add    esp,0xc
c00223e6:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00223e8 <ATAPI::~ATAPI()>:
c00223e8:	83 ec 0c             	sub    esp,0xc
c00223eb:	83 ec 0c             	sub    esp,0xc
c00223ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00223f2:	e8 cd ff ff ff       	call   c00223c4 <ATAPI::~ATAPI()>
c00223f7:	83 c4 10             	add    esp,0x10
c00223fa:	83 ec 08             	sub    esp,0x8
c00223fd:	68 84 01 00 00       	push   0x184
c0022402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022406:	e8 48 af fe ff       	call   c000d353 <operator delete(void*, unsigned long)>
c002240b:	83 c4 10             	add    esp,0x10
c002240e:	83 c4 0c             	add    esp,0xc
c0022411:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022412 <SATA::~SATA()>:
c0022412:	83 ec 0c             	sub    esp,0xc
c0022415:	ba 94 5e 02 c0       	mov    edx,0xc0025e94
c002241a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002241e:	89 10                	mov    DWORD PTR [eax],edx
c0022420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022424:	83 ec 0c             	sub    esp,0xc
c0022427:	50                   	push   eax
c0022428:	e8 41 7a fe ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c002242d:	83 c4 10             	add    esp,0x10
c0022430:	90                   	nop
c0022431:	83 c4 0c             	add    esp,0xc
c0022434:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0022436 <SATA::~SATA()>:
c0022436:	83 ec 0c             	sub    esp,0xc
c0022439:	83 ec 0c             	sub    esp,0xc
c002243c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022440:	e8 cd ff ff ff       	call   c0022412 <SATA::~SATA()>
c0022445:	83 c4 10             	add    esp,0x10
c0022448:	83 ec 08             	sub    esp,0x8
c002244b:	68 7c 01 00 00       	push   0x17c
c0022450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022454:	e8 fa ae fe ff       	call   c000d353 <operator delete(void*, unsigned long)>
c0022459:	83 c4 10             	add    esp,0x10
c002245c:	83 c4 0c             	add    esp,0xc
c002245f:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0022460 <SATAPI::~SATAPI()>:
c0022460:	83 ec 0c             	sub    esp,0xc
c0022463:	ba b8 5f 02 c0       	mov    edx,0xc0025fb8
c0022468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002246c:	89 10                	mov    DWORD PTR [eax],edx
c002246e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022472:	83 ec 0c             	sub    esp,0xc
c0022475:	50                   	push   eax
c0022476:	e8 f3 79 fe ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c002247b:	83 c4 10             	add    esp,0x10
c002247e:	90                   	nop
c002247f:	83 c4 0c             	add    esp,0xc
c0022482:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0022484 <SATAPI::~SATAPI()>:
c0022484:	83 ec 0c             	sub    esp,0xc
c0022487:	83 ec 0c             	sub    esp,0xc
c002248a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002248e:	e8 cd ff ff ff       	call   c0022460 <SATAPI::~SATAPI()>
c0022493:	83 c4 10             	add    esp,0x10
c0022496:	83 ec 08             	sub    esp,0x8
c0022499:	68 84 01 00 00       	push   0x184
c002249e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224a2:	e8 ac ae fe ff       	call   c000d353 <operator delete(void*, unsigned long)>
c00224a7:	83 c4 10             	add    esp,0x10
c00224aa:	83 c4 0c             	add    esp,0xc
c00224ad:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00224ae <IOAPIC::~IOAPIC()>:
c00224ae:	83 ec 0c             	sub    esp,0xc
c00224b1:	ba 18 60 02 c0       	mov    edx,0xc0026018
c00224b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ba:	89 10                	mov    DWORD PTR [eax],edx
c00224bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224c0:	83 ec 0c             	sub    esp,0xc
c00224c3:	50                   	push   eax
c00224c4:	e8 35 74 fe ff       	call   c00098fe <Device::~Device()>
c00224c9:	83 c4 10             	add    esp,0x10
c00224cc:	90                   	nop
c00224cd:	83 c4 0c             	add    esp,0xc
c00224d0:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00224d2 <IOAPIC::~IOAPIC()>:
c00224d2:	83 ec 0c             	sub    esp,0xc
c00224d5:	83 ec 0c             	sub    esp,0xc
c00224d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224dc:	e8 cd ff ff ff       	call   c00224ae <IOAPIC::~IOAPIC()>
c00224e1:	83 c4 10             	add    esp,0x10
c00224e4:	83 ec 08             	sub    esp,0x8
c00224e7:	68 68 01 00 00       	push   0x168
c00224ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00224f0:	e8 5e ae fe ff       	call   c000d353 <operator delete(void*, unsigned long)>
c00224f5:	83 c4 10             	add    esp,0x10
c00224f8:	83 c4 0c             	add    esp,0xc
c00224fb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00224fc <APICTimer::~APICTimer()>:
c00224fc:	83 ec 0c             	sub    esp,0xc
c00224ff:	ba 60 60 02 c0       	mov    edx,0xc0026060
c0022504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022508:	89 10                	mov    DWORD PTR [eax],edx
c002250a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002250e:	83 ec 0c             	sub    esp,0xc
c0022511:	50                   	push   eax
c0022512:	e8 25 8b fe ff       	call   c000b03c <Timer::~Timer()>
c0022517:	83 c4 10             	add    esp,0x10
c002251a:	90                   	nop
c002251b:	83 c4 0c             	add    esp,0xc
c002251e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0022520 <APICTimer::~APICTimer()>:
c0022520:	83 ec 0c             	sub    esp,0xc
c0022523:	83 ec 0c             	sub    esp,0xc
c0022526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002252a:	e8 cd ff ff ff       	call   c00224fc <APICTimer::~APICTimer()>
c002252f:	83 c4 10             	add    esp,0x10
c0022532:	83 ec 08             	sub    esp,0x8
c0022535:	68 60 01 00 00       	push   0x160
c002253a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002253e:	e8 10 ae fe ff       	call   c000d353 <operator delete(void*, unsigned long)>
c0022543:	83 c4 10             	add    esp,0x10
c0022546:	83 c4 0c             	add    esp,0xc
c0022549:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002254c <PIT::~PIT()>:
c002254c:	83 ec 0c             	sub    esp,0xc
c002254f:	ba b0 60 02 c0       	mov    edx,0xc00260b0
c0022554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022558:	89 10                	mov    DWORD PTR [eax],edx
c002255a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002255e:	83 ec 0c             	sub    esp,0xc
c0022561:	50                   	push   eax
c0022562:	e8 d5 8a fe ff       	call   c000b03c <Timer::~Timer()>
c0022567:	83 c4 10             	add    esp,0x10
c002256a:	90                   	nop
c002256b:	83 c4 0c             	add    esp,0xc
c002256e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022570 <PIT::~PIT()>:
c0022570:	83 ec 0c             	sub    esp,0xc
c0022573:	83 ec 0c             	sub    esp,0xc
c0022576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002257a:	e8 cd ff ff ff       	call   c002254c <PIT::~PIT()>
c002257f:	83 c4 10             	add    esp,0x10
c0022582:	83 ec 08             	sub    esp,0x8
c0022585:	68 5c 01 00 00       	push   0x15c
c002258a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002258e:	e8 c0 ad fe ff       	call   c000d353 <operator delete(void*, unsigned long)>
c0022593:	83 c4 10             	add    esp,0x10
c0022596:	83 c4 0c             	add    esp,0xc
c0022599:	c3                   	ret    

Disassembly of section userkernel:

c0027000 <KiDefaultSignalHandlerAbort(int)>:
c0027000:	57                   	push   edi
c0027001:	b9 07 00 00 00       	mov    ecx,0x7
c0027006:	56                   	push   esi
c0027007:	be 67 42 02 c0       	mov    esi,0xc0024267
c002700c:	83 ec 24             	sub    esp,0x24
c002700f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0027013:	fc                   	cld    
c0027014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002701a:	50                   	push   eax
c002701b:	6a 00                	push   0x0
c002701d:	6a 38                	push   0x38
c002701f:	6a 01                	push   0x1
c0027021:	e8 2c 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0027026:	83 c4 34             	add    esp,0x34
c0027029:	5e                   	pop    esi
c002702a:	5f                   	pop    edi
c002702b:	c3                   	ret    

c002702c <KiDefaultSignalHandlerTerminate(int)>:
c002702c:	57                   	push   edi
c002702d:	b9 08 00 00 00       	mov    ecx,0x8
c0027032:	56                   	push   esi
c0027033:	be 83 42 02 c0       	mov    esi,0xc0024283
c0027038:	83 ec 24             	sub    esp,0x24
c002703b:	89 e7                	mov    edi,esp
c002703d:	fc                   	cld    
c002703e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027040:	54                   	push   esp
c0027041:	6a 00                	push   0x0
c0027043:	6a 37                	push   0x37
c0027045:	6a 01                	push   0x1
c0027047:	e8 06 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002704c:	83 c4 34             	add    esp,0x34
c002704f:	5e                   	pop    esi
c0027050:	5f                   	pop    edi
c0027051:	c3                   	ret    

c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0027052:	53                   	push   ebx
c0027053:	83 ec 10             	sub    esp,0x10
c0027056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002705a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002705e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027066:	cd 60                	int    0x60
c0027068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002706c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027078:	83 c4 10             	add    esp,0x10
c002707b:	5b                   	pop    ebx
c002707c:	c3                   	ret    

Disassembly of section align_previous:

c0028000 <DO_NOT_DELETE()>:
c0028000:	c3                   	ret    
