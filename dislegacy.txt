
packages/system/32/0002/legacy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	realstart(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <realstart(void*)>:
10000017:	53                   	push   ebx
10000018:	83 ec 14             	sub    esp,0x14
1000001b:	68 58 01 00 00       	push   0x158
10000020:	e8 fc ff ff ff       	call   10000021 <realstart(void*)+0xa>	10000021: R_386_PC32	malloc
10000025:	89 04 24             	mov    DWORD PTR [esp],eax
10000028:	89 c3                	mov    ebx,eax
1000002a:	e8 fc ff ff ff       	call   1000002b <realstart(void*)+0x14>	1000002b: R_386_PC32	ISA::ISA()
1000002f:	58                   	pop    eax
10000030:	5a                   	pop    edx
10000031:	53                   	push   ebx
10000032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000036:	e8 fc ff ff ff       	call   10000037 <realstart(void*)+0x20>	10000037: R_386_PC32	Device::addChild(Device*)
1000003b:	6a 00                	push   0x0
1000003d:	8b 03                	mov    eax,DWORD PTR [ebx]
1000003f:	6a 00                	push   0x0
10000041:	6a 00                	push   0x0
10000043:	53                   	push   ebx
10000044:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000047:	83 c4 28             	add    esp,0x28
1000004a:	5b                   	pop    ebx
1000004b:	c3                   	ret    

1000004c <ISA::ISA()>:
1000004c:	55                   	push   ebp
1000004d:	89 e5                	mov    ebp,esp
1000004f:	83 ec 08             	sub    esp,0x8
10000052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000055:	83 ec 08             	sub    esp,0x8
10000058:	68 7c 2b 00 10       	push   0x10002b7c	10000059: R_386_32	.text
1000005d:	50                   	push   eax
1000005e:	e8 fc ff ff ff       	call   1000005f <ISA::ISA()+0x13>	1000005f: R_386_PC32	Bus::Bus(char const*)
10000063:	83 c4 10             	add    esp,0x10
10000066:	ba 08 00 00 00       	mov    edx,0x8	10000067: R_386_32	vtable for ISA
1000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000006e:	89 10                	mov    DWORD PTR [eax],edx
10000070:	90                   	nop
10000071:	c9                   	leave  
10000072:	c3                   	ret    
10000073:	90                   	nop

10000074 <ISA::open(int, int, void*)>:
10000074:	83 ec 18             	sub    esp,0x18
10000077:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000007b:	8b 10                	mov    edx,DWORD PTR [eax]
1000007d:	50                   	push   eax
1000007e:	ff 52 18             	call   DWORD PTR [edx+0x18]
10000081:	31 c0                	xor    eax,eax
10000083:	83 c4 1c             	add    esp,0x1c
10000086:	c3                   	ret    
10000087:	90                   	nop

10000088 <ISA::close(int, int, void*)>:
10000088:	31 c0                	xor    eax,eax
1000008a:	c3                   	ret    
1000008b:	90                   	nop

1000008c <ISA::doSpeaker()>:
1000008c:	c3                   	ret    
1000008d:	90                   	nop

1000008e <ISA::doSoundblaster()>:
1000008e:	c3                   	ret    
1000008f:	90                   	nop

10000090 <ISA::doSerial()>:
10000090:	c3                   	ret    
10000091:	90                   	nop

10000092 <ISA::doParallel()>:
10000092:	c3                   	ret    
10000093:	90                   	nop

10000094 <ISA::doGameport()>:
10000094:	53                   	push   ebx
10000095:	83 ec 14             	sub    esp,0x14
10000098:	68 60 01 00 00       	push   0x160
1000009d:	e8 fc ff ff ff       	call   1000009e <ISA::doGameport()+0xa>	1000009e: R_386_PC32	malloc
100000a2:	89 04 24             	mov    DWORD PTR [esp],eax
100000a5:	89 c3                	mov    ebx,eax
100000a7:	e8 fc ff ff ff       	call   100000a8 <ISA::doGameport()+0x14>	100000a8: R_386_PC32	Gameport::Gameport()
100000ac:	58                   	pop    eax
100000ad:	5a                   	pop    edx
100000ae:	53                   	push   ebx
100000af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000b3:	e8 fc ff ff ff       	call   100000b4 <ISA::doGameport()+0x20>	100000b4: R_386_PC32	Device::addChild(Device*)
100000b8:	6a 00                	push   0x0
100000ba:	8b 03                	mov    eax,DWORD PTR [ebx]
100000bc:	6a 00                	push   0x0
100000be:	6a 00                	push   0x0
100000c0:	53                   	push   ebx
100000c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
100000c4:	83 c4 28             	add    esp,0x28
100000c7:	5b                   	pop    ebx
100000c8:	c3                   	ret    
100000c9:	90                   	nop

100000ca <ISA::doFloppy()>:
100000ca:	c3                   	ret    
100000cb:	90                   	nop

100000cc <ISA::doATA()>:
100000cc:	c3                   	ret    
100000cd:	90                   	nop

100000ce <ISA::doPS2()>:
100000ce:	53                   	push   ebx
100000cf:	83 ec 14             	sub    esp,0x14
100000d2:	68 00 00 00 00       	push   0x0	100000d3: R_386_32	str_ps2
100000d7:	e8 fc ff ff ff       	call   100000d8 <ISA::doPS2()+0xa>	100000d8: R_386_PC32	Dbg::kprintf(char const*, ...)
100000dc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	100000df: R_386_32	str_ps2
100000e3:	e8 fc ff ff ff       	call   100000e4 <ISA::doPS2()+0x16>	100000e4: R_386_PC32	Dbg::kprintf(char const*, ...)
100000e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	100000eb: R_386_32	str_ps2
100000ef:	e8 fc ff ff ff       	call   100000f0 <ISA::doPS2()+0x22>	100000f0: R_386_PC32	Dbg::kprintf(char const*, ...)
100000f4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	100000f7: R_386_32	str_ps2
100000fb:	e8 fc ff ff ff       	call   100000fc <ISA::doPS2()+0x2e>	100000fc: R_386_PC32	Dbg::kprintf(char const*, ...)
10000100:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
10000107:	e8 fc ff ff ff       	call   10000108 <ISA::doPS2()+0x3a>	10000108: R_386_PC32	malloc
1000010c:	89 04 24             	mov    DWORD PTR [esp],eax
1000010f:	89 c3                	mov    ebx,eax
10000111:	e8 fc ff ff ff       	call   10000112 <ISA::doPS2()+0x44>	10000112: R_386_PC32	PS2::PS2()
10000116:	58                   	pop    eax
10000117:	5a                   	pop    edx
10000118:	53                   	push   ebx
10000119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000011d:	e8 fc ff ff ff       	call   1000011e <ISA::doPS2()+0x50>	1000011e: R_386_PC32	Device::addChild(Device*)
10000122:	6a 00                	push   0x0
10000124:	8b 03                	mov    eax,DWORD PTR [ebx]
10000126:	6a 00                	push   0x0
10000128:	6a 00                	push   0x0
1000012a:	53                   	push   ebx
1000012b:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000012e:	83 c4 28             	add    esp,0x28
10000131:	5b                   	pop    ebx
10000132:	c3                   	ret    
10000133:	90                   	nop

10000134 <ISA::doRTC()>:
10000134:	c3                   	ret    
10000135:	90                   	nop

10000136 <ISA::detect()>:
10000136:	57                   	push   edi
10000137:	56                   	push   esi
10000138:	53                   	push   ebx
10000139:	83 ec 2c             	sub    esp,0x2c
1000013c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
10000140:	68 5c 01 00 00       	push   0x15c
10000145:	e8 fc ff ff ff       	call   10000146 <ISA::detect()+0x10>	10000146: R_386_PC32	malloc
1000014a:	89 04 24             	mov    DWORD PTR [esp],eax
1000014d:	89 c3                	mov    ebx,eax
1000014f:	e8 fc ff ff ff       	call   10000150 <ISA::detect()+0x1a>	10000150: R_386_PC32	DMA::DMA()
10000154:	59                   	pop    ecx
10000155:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000157: R_386_32	isaDMAController
1000015b:	5e                   	pop    esi
1000015c:	53                   	push   ebx
1000015d:	57                   	push   edi
1000015e:	e8 fc ff ff ff       	call   1000015f <ISA::detect()+0x29>	1000015f: R_386_PC32	Device::addChild(Device*)
10000163:	a1 00 00 00 00       	mov    eax,ds:0x0	10000164: R_386_32	isaDMAController
10000168:	8b 10                	mov    edx,DWORD PTR [eax]
1000016a:	6a 00                	push   0x0
1000016c:	6a 00                	push   0x0
1000016e:	6a 00                	push   0x0
10000170:	50                   	push   eax
10000171:	ff 52 08             	call   DWORD PTR [edx+0x8]
10000174:	83 c4 20             	add    esp,0x20
10000177:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	10000179: R_386_32	detectDone
1000017e:	0f 85 db 00 00 00    	jne    1000025f <ISA::detect()+0x129>
10000184:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10000186: R_386_32	detectDone
1000018b:	31 db                	xor    ebx,ebx
1000018d:	52                   	push   edx
1000018e:	6a 01                	push   0x1
10000190:	68 00 00 00 00       	push   0x0	10000191: R_386_32	str_isadonesafe
10000195:	68 00 00 00 00       	push   0x0	10000196: R_386_32	str_isa
1000019a:	e8 fc ff ff ff       	call   1000019b <ISA::detect()+0x65>	1000019b: R_386_PC32	Reg::readBoolWithDefault(char*, char*, bool)
1000019f:	83 c4 10             	add    esp,0x10
100001a2:	50                   	push   eax
100001a3:	50                   	push   eax
100001a4:	68 00 00 00 00       	push   0x0	100001a5: R_386_32	str_devices
100001a9:	8d 74 24 0c          	lea    esi,[esp+0xc]
100001ad:	56                   	push   esi
100001ae:	e8 fc ff ff ff       	call   100001af <ISA::detect()+0x79>	100001af: R_386_PC32	strcpy
100001b3:	83 c4 10             	add    esp,0x10
100001b6:	85 db                	test   ebx,ebx
100001b8:	75 09                	jne    100001c3 <ISA::detect()+0x8d>
100001ba:	50                   	push   eax
100001bb:	50                   	push   eax
100001bc:	68 00 00 00 00       	push   0x0	100001bd: R_386_32	str_spk
100001c1:	eb 52                	jmp    10000215 <ISA::detect()+0xdf>
100001c3:	83 fb 01             	cmp    ebx,0x1
100001c6:	75 09                	jne    100001d1 <ISA::detect()+0x9b>
100001c8:	50                   	push   eax
100001c9:	50                   	push   eax
100001ca:	68 00 00 00 00       	push   0x0	100001cb: R_386_32	str_rtc
100001cf:	eb 44                	jmp    10000215 <ISA::detect()+0xdf>
100001d1:	83 fb 02             	cmp    ebx,0x2
100001d4:	75 09                	jne    100001df <ISA::detect()+0xa9>
100001d6:	50                   	push   eax
100001d7:	50                   	push   eax
100001d8:	68 00 00 00 00       	push   0x0	100001d9: R_386_32	str_ps2
100001dd:	eb 36                	jmp    10000215 <ISA::detect()+0xdf>
100001df:	83 fb 03             	cmp    ebx,0x3
100001e2:	75 09                	jne    100001ed <ISA::detect()+0xb7>
100001e4:	50                   	push   eax
100001e5:	50                   	push   eax
100001e6:	68 00 00 00 00       	push   0x0	100001e7: R_386_32	str_floppy
100001eb:	eb 28                	jmp    10000215 <ISA::detect()+0xdf>
100001ed:	83 fb 04             	cmp    ebx,0x4
100001f0:	75 09                	jne    100001fb <ISA::detect()+0xc5>
100001f2:	50                   	push   eax
100001f3:	50                   	push   eax
100001f4:	68 00 00 00 00       	push   0x0	100001f5: R_386_32	str_sb16
100001f9:	eb 1a                	jmp    10000215 <ISA::detect()+0xdf>
100001fb:	83 fb 05             	cmp    ebx,0x5
100001fe:	75 09                	jne    10000209 <ISA::detect()+0xd3>
10000200:	51                   	push   ecx
10000201:	51                   	push   ecx
10000202:	68 00 00 00 00       	push   0x0	10000203: R_386_32	str_isaata
10000207:	eb 0c                	jmp    10000215 <ISA::detect()+0xdf>
10000209:	83 fb 06             	cmp    ebx,0x6
1000020c:	75 10                	jne    1000021e <ISA::detect()+0xe8>
1000020e:	52                   	push   edx
1000020f:	52                   	push   edx
10000210:	68 00 00 00 00       	push   0x0	10000211: R_386_32	str_gp
10000215:	56                   	push   esi
10000216:	e8 fc ff ff ff       	call   10000217 <ISA::detect()+0xe1>	10000217: R_386_PC32	strcat
1000021b:	83 c4 10             	add    esp,0x10
1000021e:	50                   	push   eax
1000021f:	6a ff                	push   0xffffffff
10000221:	56                   	push   esi
10000222:	68 00 00 00 00       	push   0x0	10000223: R_386_32	str_isa
10000227:	e8 fc ff ff ff       	call   10000228 <ISA::detect()+0xf2>	10000228: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
1000022c:	83 c4 10             	add    esp,0x10
1000022f:	83 f8 fe             	cmp    eax,0xfffffffe
10000232:	74 21                	je     10000255 <ISA::detect()+0x11f>
10000234:	83 fb 02             	cmp    ebx,0x2
10000237:	75 0b                	jne    10000244 <ISA::detect()+0x10e>
10000239:	83 ec 0c             	sub    esp,0xc
1000023c:	57                   	push   edi
1000023d:	e8 fc ff ff ff       	call   1000023e <ISA::detect()+0x108>	1000023e: R_386_PC32	ISA::doPS2()
10000242:	eb 0e                	jmp    10000252 <ISA::detect()+0x11c>
10000244:	83 fb 06             	cmp    ebx,0x6
10000247:	75 0c                	jne    10000255 <ISA::detect()+0x11f>
10000249:	83 ec 0c             	sub    esp,0xc
1000024c:	57                   	push   edi
1000024d:	e8 fc ff ff ff       	call   1000024e <ISA::detect()+0x118>	1000024e: R_386_PC32	ISA::doGameport()
10000252:	83 c4 10             	add    esp,0x10
10000255:	43                   	inc    ebx
10000256:	83 fb 07             	cmp    ebx,0x7
10000259:	0f 85 43 ff ff ff    	jne    100001a2 <ISA::detect()+0x6c>
1000025f:	83 c4 20             	add    esp,0x20
10000262:	5b                   	pop    ebx
10000263:	5e                   	pop    esi
10000264:	5f                   	pop    edi
10000265:	c3                   	ret    

10000266 <Gameport::Gameport()>:
10000266:	55                   	push   ebp
10000267:	89 e5                	mov    ebp,esp
10000269:	83 ec 08             	sub    esp,0x8
1000026c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000026f:	83 ec 08             	sub    esp,0x8
10000272:	68 50 2c 00 10       	push   0x10002c50	10000273: R_386_32	.text
10000277:	50                   	push   eax
10000278:	e8 fc ff ff ff       	call   10000279 <Gameport::Gameport()+0x13>	10000279: R_386_PC32	Device::Device(char const*)
1000027d:	83 c4 10             	add    esp,0x10
10000280:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000283:	05 58 01 00 00       	add    eax,0x158
10000288:	83 ec 0c             	sub    esp,0xc
1000028b:	50                   	push   eax
1000028c:	e8 fc ff ff ff       	call   1000028d <Gameport::Gameport()+0x27>	1000028d: R_386_PC32	JoystickHost::JoystickHost()
10000291:	83 c4 10             	add    esp,0x10
10000294:	ba 08 00 00 00       	mov    edx,0x8	10000295: R_386_32	vtable for Gameport
10000299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000029c:	89 10                	mov    DWORD PTR [eax],edx
1000029e:	ba 38 00 00 00       	mov    edx,0x38	1000029f: R_386_32	vtable for Gameport
100002a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002a6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
100002ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002af:	c7 80 5c 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x15c],0x14a
100002b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002bc:	c7 80 60 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x160],0x14a
100002c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002c9:	c7 80 64 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x164],0x14a
100002d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002d6:	c7 80 68 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x168],0x14a
100002e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e3:	c7 80 6c 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x16c],0x3d4
100002ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002f0:	c7 80 70 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x170],0x3d4
100002fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002fd:	c7 80 74 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x174],0x3d4
10000307:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000030a:	c7 80 78 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x178],0x3d4
10000314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000317:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
1000031e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000321:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10000328:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000032b:	c6 80 7e 01 00 00 00 	mov    BYTE PTR [eax+0x17e],0x0
10000332:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000335:	c6 80 7f 01 00 00 00 	mov    BYTE PTR [eax+0x17f],0x0
1000033c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000033f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
10000346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000349:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10000350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000353:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000359:	0f b6 d0             	movzx  edx,al
1000035c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000035f:	66 c7 44 90 04 01 02 	mov    WORD PTR [eax+edx*4+0x4],0x201
10000366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000369:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000036f:	0f b6 d0             	movzx  edx,al
10000372:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000375:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
1000037a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000037d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000383:	8d 50 01             	lea    edx,[eax+0x1]
10000386:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000389:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000038f:	0f b6 d0             	movzx  edx,al
10000392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000395:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000399:	83 e1 3f             	and    ecx,0x3f
1000039c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100003a0:	90                   	nop
100003a1:	c9                   	leave  
100003a2:	c3                   	ret    
100003a3:	90                   	nop

100003a4 <Gameport::~Gameport()>:
100003a4:	55                   	push   ebp
100003a5:	89 e5                	mov    ebp,esp
100003a7:	83 ec 08             	sub    esp,0x8
100003aa:	ba 08 00 00 00       	mov    edx,0x8	100003ab: R_386_32	vtable for Gameport
100003af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b2:	89 10                	mov    DWORD PTR [eax],edx
100003b4:	ba 38 00 00 00       	mov    edx,0x38	100003b5: R_386_32	vtable for Gameport
100003b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003bc:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
100003c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003c5:	83 ec 0c             	sub    esp,0xc
100003c8:	50                   	push   eax
100003c9:	e8 fc ff ff ff       	call   100003ca <Gameport::~Gameport()+0x26>	100003ca: R_386_PC32	Device::~Device()
100003ce:	83 c4 10             	add    esp,0x10
100003d1:	90                   	nop
100003d2:	c9                   	leave  
100003d3:	c3                   	ret    

100003d4 <Gameport::~Gameport()>:
100003d4:	55                   	push   ebp
100003d5:	89 e5                	mov    ebp,esp
100003d7:	83 ec 08             	sub    esp,0x8
100003da:	83 ec 0c             	sub    esp,0xc
100003dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100003e0:	e8 fc ff ff ff       	call   100003e1 <Gameport::~Gameport()+0xd>	100003e1: R_386_PC32	Gameport::~Gameport()
100003e5:	83 c4 10             	add    esp,0x10
100003e8:	83 ec 08             	sub    esp,0x8
100003eb:	68 80 01 00 00       	push   0x180
100003f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100003f3:	e8 fc ff ff ff       	call   100003f4 <Gameport::~Gameport()+0x20>	100003f4: R_386_PC32	operator delete(void*, unsigned long)
100003f8:	83 c4 10             	add    esp,0x10
100003fb:	c9                   	leave  
100003fc:	c3                   	ret    
100003fd:	90                   	nop

100003fe <Gameport::calibration(int)>:
100003fe:	57                   	push   edi
100003ff:	56                   	push   esi
10000400:	53                   	push   ebx
10000401:	81 ec d0 00 00 00    	sub    esp,0xd0
10000407:	8b 9c 24 e0 00 00 00 	mov    ebx,DWORD PTR [esp+0xe0]
1000040e:	8b b4 24 e4 00 00 00 	mov    esi,DWORD PTR [esp+0xe4]
10000415:	80 bb 7e 01 00 00 00 	cmp    BYTE PTR [ebx+0x17e],0x0
1000041c:	74 0c                	je     1000042a <Gameport::calibration(int)+0x2c>
1000041e:	c6 83 7f 01 00 00 01 	mov    BYTE PTR [ebx+0x17f],0x1
10000425:	e9 09 01 00 00       	jmp    10000533 <Gameport::calibration(int)+0x135>
1000042a:	8d bc 24 9c 00 00 00 	lea    edi,[esp+0x9c]
10000431:	50                   	push   eax
10000432:	56                   	push   esi
10000433:	53                   	push   ebx
10000434:	57                   	push   edi
10000435:	e8 fc ff ff ff       	call   10000436 <Gameport::calibration(int)+0x38>	10000436: R_386_PC32	Gameport::readRaw(int)
1000043a:	83 ec 0c             	sub    esp,0xc
1000043d:	6a 00                	push   0x0
1000043f:	68 40 42 0f 00       	push   0xf4240
10000444:	e8 fc ff ff ff       	call   10000445 <Gameport::calibration(int)+0x47>	10000445: R_386_PC32	nanoSleep(unsigned long long)
10000449:	8d 44 24 20          	lea    eax,[esp+0x20]
1000044d:	83 c4 1c             	add    esp,0x1c
10000450:	56                   	push   esi
10000451:	53                   	push   ebx
10000452:	50                   	push   eax
10000453:	e8 fc ff ff ff       	call   10000454 <Gameport::calibration(int)+0x56>	10000454: R_386_PC32	Gameport::readRaw(int)
10000458:	83 ec 0c             	sub    esp,0xc
1000045b:	6a 00                	push   0x0
1000045d:	68 40 42 0f 00       	push   0xf4240
10000462:	e8 fc ff ff ff       	call   10000463 <Gameport::calibration(int)+0x65>	10000463: R_386_PC32	nanoSleep(unsigned long long)
10000467:	8d 44 24 54          	lea    eax,[esp+0x54]
1000046b:	83 c4 1c             	add    esp,0x1c
1000046e:	56                   	push   esi
1000046f:	53                   	push   ebx
10000470:	50                   	push   eax
10000471:	e8 fc ff ff ff       	call   10000472 <Gameport::calibration(int)+0x74>	10000472: R_386_PC32	Gameport::readRaw(int)
10000476:	83 ec 0c             	sub    esp,0xc
10000479:	6a 00                	push   0x0
1000047b:	68 40 42 0f 00       	push   0xf4240
10000480:	e8 fc ff ff ff       	call   10000481 <Gameport::calibration(int)+0x83>	10000481: R_386_PC32	nanoSleep(unsigned long long)
10000485:	8d 84 24 88 00 00 00 	lea    eax,[esp+0x88]
1000048c:	83 c4 1c             	add    esp,0x1c
1000048f:	56                   	push   esi
10000490:	53                   	push   ebx
10000491:	50                   	push   eax
10000492:	e8 fc ff ff ff       	call   10000493 <Gameport::calibration(int)+0x95>	10000493: R_386_PC32	Gameport::readRaw(int)
10000497:	83 ec 0c             	sub    esp,0xc
1000049a:	6a 00                	push   0x0
1000049c:	68 40 42 0f 00       	push   0xf4240
100004a1:	e8 fc ff ff ff       	call   100004a2 <Gameport::calibration(int)+0xa4>	100004a2: R_386_PC32	nanoSleep(unsigned long long)
100004a6:	83 c4 1c             	add    esp,0x1c
100004a9:	56                   	push   esi
100004aa:	53                   	push   ebx
100004ab:	57                   	push   edi
100004ac:	bf 03 00 00 00       	mov    edi,0x3
100004b1:	e8 fc ff ff ff       	call   100004b2 <Gameport::calibration(int)+0xb4>	100004b2: R_386_PC32	Gameport::readRaw(int)
100004b6:	31 d2                	xor    edx,edx
100004b8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100004bc:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
100004c0:	03 84 24 88 00 00 00 	add    eax,DWORD PTR [esp+0x88]
100004c7:	f7 f7                	div    edi
100004c9:	31 d2                	xor    edx,edx
100004cb:	89 c1                	mov    ecx,eax
100004cd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
100004d1:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
100004d5:	03 84 24 8c 00 00 00 	add    eax,DWORD PTR [esp+0x8c]
100004dc:	83 c4 0c             	add    esp,0xc
100004df:	f7 f7                	div    edi
100004e1:	85 f6                	test   esi,esi
100004e3:	75 0e                	jne    100004f3 <Gameport::calibration(int)+0xf5>
100004e5:	89 8b 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],ecx
100004eb:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
100004f1:	eb 0c                	jmp    100004ff <Gameport::calibration(int)+0x101>
100004f3:	89 8b 64 01 00 00    	mov    DWORD PTR [ebx+0x164],ecx
100004f9:	89 83 68 01 00 00    	mov    DWORD PTR [ebx+0x168],eax
100004ff:	6b 83 5c 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x15c],0x3
10000506:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
1000050c:	6b 83 60 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x160],0x3
10000513:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
10000519:	6b 83 64 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x164],0x3
10000520:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
10000526:	6b 83 68 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x168],0x3
1000052d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
10000533:	81 c4 d0 00 00 00    	add    esp,0xd0
10000539:	5b                   	pop    ebx
1000053a:	5e                   	pop    esi
1000053b:	5f                   	pop    edi
1000053c:	c3                   	ret    
1000053d:	90                   	nop

1000053e <Gameport::detect()>:
1000053e:	53                   	push   ebx
1000053f:	81 ec 88 00 00 00    	sub    esp,0x88
10000545:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
1000054c:	8d 44 24 18          	lea    eax,[esp+0x18]
10000550:	51                   	push   ecx
10000551:	6a 00                	push   0x0
10000553:	53                   	push   ebx
10000554:	50                   	push   eax
10000555:	e8 fc ff ff ff       	call   10000556 <Gameport::detect()+0x18>	10000556: R_386_PC32	Gameport::readRaw(int)
1000055a:	8d 44 24 58          	lea    eax,[esp+0x58]
1000055e:	52                   	push   edx
1000055f:	52                   	push   edx
10000560:	6a 01                	push   0x1
10000562:	53                   	push   ebx
10000563:	50                   	push   eax
10000564:	e8 fc ff ff ff       	call   10000565 <Gameport::detect()+0x27>	10000565: R_386_PC32	Gameport::readRaw(int)
10000569:	83 c4 1c             	add    esp,0x1c
1000056c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10000573:	75 14                	jne    10000589 <Gameport::detect()+0x4b>
10000575:	f6 44 24 18 10       	test   BYTE PTR [esp+0x18],0x10
1000057a:	74 0d                	je     10000589 <Gameport::detect()+0x4b>
1000057c:	52                   	push   edx
1000057d:	52                   	push   edx
1000057e:	6a 00                	push   0x0
10000580:	53                   	push   ebx
10000581:	e8 fc ff ff ff       	call   10000582 <Gameport::detect()+0x44>	10000582: R_386_PC32	Gameport::calibration(int)
10000586:	83 c4 10             	add    esp,0x10
10000589:	8a 54 24 4c          	mov    dl,BYTE PTR [esp+0x4c]
1000058d:	83 e2 10             	and    edx,0x10
10000590:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10000597:	75 19                	jne    100005b2 <Gameport::detect()+0x74>
10000599:	84 d2                	test   dl,dl
1000059b:	74 15                	je     100005b2 <Gameport::detect()+0x74>
1000059d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
100005a1:	50                   	push   eax
100005a2:	50                   	push   eax
100005a3:	6a 01                	push   0x1
100005a5:	53                   	push   ebx
100005a6:	e8 fc ff ff ff       	call   100005a7 <Gameport::detect()+0x69>	100005a7: R_386_PC32	Gameport::calibration(int)
100005ab:	83 c4 10             	add    esp,0x10
100005ae:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
100005b2:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
100005b6:	c0 e8 04             	shr    al,0x4
100005b9:	83 e0 01             	and    eax,0x1
100005bc:	84 d2                	test   dl,dl
100005be:	88 83 7c 01 00 00    	mov    BYTE PTR [ebx+0x17c],al
100005c4:	0f 95 83 7d 01 00 00 	setne  BYTE PTR [ebx+0x17d]
100005cb:	81 c4 88 00 00 00    	add    esp,0x88
100005d1:	5b                   	pop    ebx
100005d2:	c3                   	ret    
100005d3:	90                   	nop

100005d4 <Gameport::read(int)>:
100005d4:	57                   	push   edi
100005d5:	56                   	push   esi
100005d6:	53                   	push   ebx
100005d7:	83 ec 50             	sub    esp,0x50
100005da:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
100005de:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
100005e2:	85 f6                	test   esi,esi
100005e4:	75 09                	jne    100005ef <Gameport::read(int)+0x1b>
100005e6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
100005ed:	eb 0c                	jmp    100005fb <Gameport::read(int)+0x27>
100005ef:	83 fe 01             	cmp    esi,0x1
100005f2:	75 15                	jne    10000609 <Gameport::read(int)+0x35>
100005f4:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
100005fb:	75 0c                	jne    10000609 <Gameport::read(int)+0x35>
100005fd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10000601:	80 20 ef             	and    BYTE PTR [eax],0xef
10000604:	e9 b0 00 00 00       	jmp    100006b9 <Gameport::read(int)+0xe5>
10000609:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000060d:	52                   	push   edx
1000060e:	56                   	push   esi
1000060f:	53                   	push   ebx
10000610:	50                   	push   eax
10000611:	e8 fc ff ff ff       	call   10000612 <Gameport::read(int)+0x3e>	10000612: R_386_PC32	Gameport::readRaw(int)
10000616:	83 c4 0c             	add    esp,0xc
10000619:	4e                   	dec    esi
1000061a:	75 1a                	jne    10000636 <Gameport::read(int)+0x62>
1000061c:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
10000622:	8b b3 68 01 00 00    	mov    esi,DWORD PTR [ebx+0x168]
10000628:	8b 93 74 01 00 00    	mov    edx,DWORD PTR [ebx+0x174]
1000062e:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
10000634:	eb 18                	jmp    1000064e <Gameport::read(int)+0x7a>
10000636:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
1000063c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
10000642:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
10000648:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
1000064e:	85 ff                	test   edi,edi
10000650:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000654:	0f 94 c0             	sete   al
10000657:	85 f6                	test   esi,esi
10000659:	0f 94 c1             	sete   cl
1000065c:	09 c1                	or     ecx,eax
1000065e:	39 d7                	cmp    edi,edx
10000660:	0f 94 c0             	sete   al
10000663:	08 c1                	or     cl,al
10000665:	75 96                	jne    100005fd <Gameport::read(int)+0x29>
10000667:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
1000066b:	74 90                	je     100005fd <Gameport::read(int)+0x29>
1000066d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10000671:	89 d9                	mov    ecx,ebx
10000673:	29 f1                	sub    ecx,esi
10000675:	6b c9 7f             	imul   ecx,ecx,0x7f
10000678:	39 fb                	cmp    ebx,edi
1000067a:	7e 1a                	jle    10000696 <Gameport::read(int)+0xc2>
1000067c:	29 fb                	sub    ebx,edi
1000067e:	29 fa                	sub    edx,edi
10000680:	6b db 7f             	imul   ebx,ebx,0x7f
10000683:	89 d7                	mov    edi,edx
10000685:	89 d8                	mov    eax,ebx
10000687:	99                   	cdq    
10000688:	f7 ff                	idiv   edi
1000068a:	89 c3                	mov    ebx,eax
1000068c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10000690:	29 f0                	sub    eax,esi
10000692:	89 c6                	mov    esi,eax
10000694:	eb 07                	jmp    1000069d <Gameport::read(int)+0xc9>
10000696:	89 c8                	mov    eax,ecx
10000698:	99                   	cdq    
10000699:	f7 ff                	idiv   edi
1000069b:	89 c3                	mov    ebx,eax
1000069d:	89 c8                	mov    eax,ecx
1000069f:	88 5c 24 2d          	mov    BYTE PTR [esp+0x2d],bl
100006a3:	99                   	cdq    
100006a4:	b9 0d 00 00 00       	mov    ecx,0xd
100006a9:	f7 fe                	idiv   esi
100006ab:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
100006af:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
100006b3:	8d 74 24 1c          	lea    esi,[esp+0x1c]
100006b7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100006b9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100006bd:	83 c4 50             	add    esp,0x50
100006c0:	5b                   	pop    ebx
100006c1:	5e                   	pop    esi
100006c2:	5f                   	pop    edi
100006c3:	c2 04 00             	ret    0x4

100006c6 <non-virtual thunk to Gameport::read(int)>:
100006c6:	81 6c 24 08 58 01 00 00 	sub    DWORD PTR [esp+0x8],0x158
100006ce:	e9 01 ff ff ff       	jmp    100005d4 <Gameport::read(int)>
100006d3:	90                   	nop

100006d4 <Gameport::readRaw(int)>:
100006d4:	57                   	push   edi
100006d5:	ba 01 02 00 00       	mov    edx,0x201
100006da:	56                   	push   esi
100006db:	53                   	push   ebx
100006dc:	83 ec 10             	sub    esp,0x10
100006df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
100006e3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
100006e7:	8a 03                	mov    al,BYTE PTR [ebx]
100006e9:	83 e0 e0             	and    eax,0xffffffe0
100006ec:	83 c8 12             	or     eax,0x12
100006ef:	88 03                	mov    BYTE PTR [ebx],al
100006f1:	ec                   	in     al,dx
100006f2:	88 c2                	mov    dl,al
100006f4:	85 f6                	test   esi,esi
100006f6:	75 11                	jne    10000709 <Gameport::readRaw(int)+0x35>
100006f8:	c0 ea 04             	shr    dl,0x4
100006fb:	c0 e8 05             	shr    al,0x5
100006fe:	83 e2 01             	and    edx,0x1
10000701:	83 e0 01             	and    eax,0x1
10000704:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
10000707:	eb 0c                	jmp    10000715 <Gameport::readRaw(int)+0x41>
10000709:	c0 ea 06             	shr    dl,0x6
1000070c:	c0 e8 07             	shr    al,0x7
1000070f:	83 e2 01             	and    edx,0x1
10000712:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
10000715:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
10000718:	ba 01 02 00 00       	mov    edx,0x201
1000071d:	b0 ff                	mov    al,0xff
1000071f:	ee                   	out    dx,al
10000720:	e8 fc ff ff ff       	call   10000721 <Gameport::readRaw(int)+0x4d>	10000721: R_386_PC32	lockScheduler()
10000725:	4e                   	dec    esi
10000726:	c7 44 24 0c ff ff 00 00 	mov    DWORD PTR [esp+0xc],0xffff
1000072e:	0f 94 c1             	sete   cl
10000731:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
10000736:	0f b6 f1             	movzx  esi,cl
10000739:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
1000073e:	0f b6 c9             	movzx  ecx,cl
10000741:	8d 74 76 01          	lea    esi,[esi+esi*2+0x1]
10000745:	49                   	dec    ecx
10000746:	31 ff                	xor    edi,edi
10000748:	83 e1 fa             	and    ecx,0xfffffffa
1000074b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
10000753:	83 c1 08             	add    ecx,0x8
10000756:	ba 01 02 00 00       	mov    edx,0x201
1000075b:	ec                   	in     al,dx
1000075c:	0f b6 c0             	movzx  eax,al
1000075f:	85 f0                	test   eax,esi
10000761:	0f 94 c2             	sete   dl
10000764:	08 54 24 0a          	or     BYTE PTR [esp+0xa],dl
10000768:	80 7c 24 0a 01       	cmp    BYTE PTR [esp+0xa],0x1
1000076d:	83 54 24 04 00       	adc    DWORD PTR [esp+0x4],0x0
10000772:	85 c8                	test   eax,ecx
10000774:	0f 94 c0             	sete   al
10000777:	08 44 24 0b          	or     BYTE PTR [esp+0xb],al
1000077b:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
10000780:	83 d7 00             	adc    edi,0x0
10000783:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
10000787:	75 19                	jne    100007a2 <Gameport::readRaw(int)+0xce>
10000789:	e8 fc ff ff ff       	call   1000078a <Gameport::readRaw(int)+0xb6>	1000078a: R_386_PC32	unlockScheduler()
1000078e:	81 ff ff ff 00 00    	cmp    edi,0xffff
10000794:	74 1c                	je     100007b2 <Gameport::readRaw(int)+0xde>
10000796:	81 7c 24 04 ff ff 00 00 	cmp    DWORD PTR [esp+0x4],0xffff
1000079e:	75 15                	jne    100007b5 <Gameport::readRaw(int)+0xe1>
100007a0:	eb 10                	jmp    100007b2 <Gameport::readRaw(int)+0xde>
100007a2:	80 7c 24 0a 00       	cmp    BYTE PTR [esp+0xa],0x0
100007a7:	74 ad                	je     10000756 <Gameport::readRaw(int)+0x82>
100007a9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
100007ae:	74 a6                	je     10000756 <Gameport::readRaw(int)+0x82>
100007b0:	eb d7                	jmp    10000789 <Gameport::readRaw(int)+0xb5>
100007b2:	80 23 ef             	and    BYTE PTR [ebx],0xef
100007b5:	89 7b 18             	mov    DWORD PTR [ebx+0x18],edi
100007b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100007bc:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
100007bf:	83 c4 10             	add    esp,0x10
100007c2:	89 d8                	mov    eax,ebx
100007c4:	5b                   	pop    ebx
100007c5:	5e                   	pop    esi
100007c6:	5f                   	pop    edi
100007c7:	c2 04 00             	ret    0x4

100007ca <Gameport::open(int, int, void*)>:
100007ca:	31 c0                	xor    eax,eax
100007cc:	c3                   	ret    
100007cd:	90                   	nop

100007ce <Gameport::close(int, int, void*)>:
100007ce:	31 c0                	xor    eax,eax
100007d0:	c3                   	ret    
100007d1:	90                   	nop

100007d2 <DMAChannel::DMAChannel(int)>:
100007d2:	55                   	push   ebp
100007d3:	89 e5                	mov    ebp,esp
100007d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007d8:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
100007df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007e2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
100007e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100007ef:	89 10                	mov    DWORD PTR [eax],edx
100007f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007f4:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
100007fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007fe:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10000805:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000808:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
1000080c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000080f:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
10000813:	83 7d 0c 03          	cmp    DWORD PTR [ebp+0xc],0x3
10000817:	0f 9f c2             	setg   dl
1000081a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000081d:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
10000820:	90                   	nop
10000821:	5d                   	pop    ebp
10000822:	c3                   	ret    
10000823:	90                   	nop

10000824 <DMAChannel::~DMAChannel()>:
10000824:	55                   	push   ebp
10000825:	89 e5                	mov    ebp,esp
10000827:	83 ec 08             	sub    esp,0x8
1000082a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000082d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10000830:	85 c0                	test   eax,eax
10000832:	74 19                	je     1000084d <DMAChannel::~DMAChannel()+0x29>
10000834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000837:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
1000083a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000083d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10000840:	83 ec 08             	sub    esp,0x8
10000843:	52                   	push   edx
10000844:	50                   	push   eax
10000845:	e8 fc ff ff ff       	call   10000846 <DMAChannel::~DMAChannel()+0x22>	10000846: R_386_PC32	Phys::freeDMA(unsigned long, unsigned long)
1000084a:	83 c4 10             	add    esp,0x10
1000084d:	90                   	nop
1000084e:	c9                   	leave  
1000084f:	c3                   	ret    

10000850 <DMAChannel::getAddress()>:
10000850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000854:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10000857:	c3                   	ret    

10000858 <DMAChannel::getChannelNum()>:
10000858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000085c:	8b 00                	mov    eax,DWORD PTR [eax]
1000085e:	c3                   	ret    
1000085f:	90                   	nop

10000860 <DMAChannel::setLength(unsigned int)>:
10000860:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10000864:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10000868:	3d 00 00 01 00       	cmp    eax,0x10000
1000086d:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10000870:	76 0d                	jbe    1000087f <DMAChannel::setLength(unsigned int)+0x1f>
10000872:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	10000876: R_386_32	dmaLong
1000087a:	e9 fc ff ff ff       	jmp    1000087b <DMAChannel::setLength(unsigned int)+0x1b>	1000087b: R_386_PC32	Krnl::panic(char const*)
1000087f:	c3                   	ret    

10000880 <DMAChannel::setAddress(unsigned int)>:
10000880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000884:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000888:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000088b:	c3                   	ret    

1000088c <DMAChannel::allocateAddressAndSet(unsigned short)>:
1000088c:	56                   	push   esi
1000088d:	53                   	push   ebx
1000088e:	83 ec 10             	sub    esp,0x10
10000891:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10000895:	0f b7 74 24 20       	movzx  esi,WORD PTR [esp+0x20]
1000089a:	56                   	push   esi
1000089b:	e8 fc ff ff ff       	call   1000089c <DMAChannel::allocateAddressAndSet(unsigned short)+0x10>	1000089c: R_386_PC32	Phys::allocateDMA(unsigned long)
100008a0:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
100008a3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
100008a6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100008a9:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
100008ac:	83 c4 14             	add    esp,0x14
100008af:	5b                   	pop    ebx
100008b0:	5e                   	pop    esi
100008b1:	c3                   	ret    

100008b2 <DMAChannel::setMode(unsigned char)>:
100008b2:	53                   	push   ebx
100008b3:	83 ec 08             	sub    esp,0x8
100008b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100008ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100008be:	80 7b 0d 00          	cmp    BYTE PTR [ebx+0xd],0x0
100008c2:	88 43 0f             	mov    BYTE PTR [ebx+0xf],al
100008c5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
100008c9:	74 2a                	je     100008f5 <DMAChannel::setMode(unsigned char)+0x43>
100008cb:	51                   	push   ecx
100008cc:	51                   	push   ecx
100008cd:	6a 01                	push   0x1
100008cf:	53                   	push   ebx
100008d0:	e8 fc ff ff ff       	call   100008d1 <DMAChannel::setMode(unsigned char)+0x1f>	100008d1: R_386_PC32	DMAChannel::mask(bool)
100008d5:	80 7b 0e 01          	cmp    BYTE PTR [ebx+0xe],0x1
100008d9:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
100008dc:	19 d2                	sbb    edx,edx
100008de:	80 e2 35             	and    dl,0x35
100008e1:	81 c2 d6 00 00 00    	add    edx,0xd6
100008e7:	ee                   	out    dx,al
100008e8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
100008ec:	83 c4 18             	add    esp,0x18
100008ef:	5b                   	pop    ebx
100008f0:	e9 ff 00 00 00       	jmp    100009f4 <DMAChannel::unmask()>
100008f5:	83 c4 08             	add    esp,0x8
100008f8:	5b                   	pop    ebx
100008f9:	c3                   	ret    

100008fa <DMAChannel::start()>:
100008fa:	57                   	push   edi
100008fb:	56                   	push   esi
100008fc:	53                   	push   ebx
100008fd:	83 ec 10             	sub    esp,0x10
10000900:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10000904:	8b 06                	mov    eax,DWORD PTR [esi]
10000906:	83 f8 07             	cmp    eax,0x7
10000909:	0f 87 96 00 00 00    	ja     100009a5 <DMAChannel::start()+0xab>
1000090f:	8a 98 44 2d 00 10    	mov    bl,BYTE PTR [eax+0x10002d44]	10000911: R_386_32	.text
10000915:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
10000919:	8a 98 4c 2d 00 10    	mov    bl,BYTE PTR [eax+0x10002d4c]	1000091b: R_386_32	.text
1000091f:	8a 80 54 2d 00 10    	mov    al,BYTE PTR [eax+0x10002d54]	10000921: R_386_32	.text
10000925:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
10000929:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
1000092d:	e8 fc ff ff ff       	call   1000092e <DMAChannel::start()+0x34>	1000092e: R_386_PC32	lockScheduler()
10000932:	50                   	push   eax
10000933:	50                   	push   eax
10000934:	6a 01                	push   0x1
10000936:	56                   	push   esi
10000937:	e8 fc ff ff ff       	call   10000938 <DMAChannel::start()+0x3e>	10000938: R_386_PC32	DMAChannel::mask(bool)
1000093c:	8a 5e 0e             	mov    bl,BYTE PTR [esi+0xe]
1000093f:	83 c4 10             	add    esp,0x10
10000942:	80 fb 01             	cmp    bl,0x1
10000945:	19 c9                	sbb    ecx,ecx
10000947:	31 ff                	xor    edi,edi
10000949:	80 e1 34             	and    cl,0x34
1000094c:	89 f8                	mov    eax,edi
1000094e:	81 c1 d8 00 00 00    	add    ecx,0xd8
10000954:	89 ca                	mov    edx,ecx
10000956:	ee                   	out    dx,al
10000957:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
1000095c:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
1000095f:	ee                   	out    dx,al
10000960:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000963:	c1 e8 08             	shr    eax,0x8
10000966:	ee                   	out    dx,al
10000967:	89 f8                	mov    eax,edi
10000969:	89 ca                	mov    edx,ecx
1000096b:	ee                   	out    dx,al
1000096c:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
1000096f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
10000974:	8d 41 ff             	lea    eax,[ecx-0x1]
10000977:	ee                   	out    dx,al
10000978:	8d 41 ff             	lea    eax,[ecx-0x1]
1000097b:	c1 e8 08             	shr    eax,0x8
1000097e:	ee                   	out    dx,al
1000097f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000982:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
10000987:	c1 e8 10             	shr    eax,0x10
1000098a:	ee                   	out    dx,al
1000098b:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
1000098f:	74 27                	je     100009b8 <DMAChannel::start()+0xbe>
10000991:	80 fb 01             	cmp    bl,0x1
10000994:	8a 46 0f             	mov    al,BYTE PTR [esi+0xf]
10000997:	19 d2                	sbb    edx,edx
10000999:	80 e2 35             	and    dl,0x35
1000099c:	81 c2 d6 00 00 00    	add    edx,0xd6
100009a2:	ee                   	out    dx,al
100009a3:	eb 13                	jmp    100009b8 <DMAChannel::start()+0xbe>
100009a5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	100009a9: R_386_32	dmaConfused
100009ad:	83 c4 10             	add    esp,0x10
100009b0:	5b                   	pop    ebx
100009b1:	5e                   	pop    esi
100009b2:	5f                   	pop    edi
100009b3:	e9 fc ff ff ff       	jmp    100009b4 <DMAChannel::start()+0xba>	100009b4: R_386_PC32	Krnl::panic(char const*)
100009b8:	c6 46 0d 01          	mov    BYTE PTR [esi+0xd],0x1
100009bc:	83 ec 0c             	sub    esp,0xc
100009bf:	56                   	push   esi
100009c0:	e8 fc ff ff ff       	call   100009c1 <DMAChannel::start()+0xc7>	100009c1: R_386_PC32	DMAChannel::unmask()
100009c5:	83 c4 20             	add    esp,0x20
100009c8:	5b                   	pop    ebx
100009c9:	5e                   	pop    esi
100009ca:	5f                   	pop    edi
100009cb:	e9 fc ff ff ff       	jmp    100009cc <DMAChannel::start()+0xd2>	100009cc: R_386_PC32	unlockScheduler()

100009d0 <DMAChannel::stop()>:
100009d0:	c3                   	ret    
100009d1:	90                   	nop

100009d2 <DMAChannel::mask(bool)>:
100009d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
100009d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
100009db:	0f 95 c0             	setne  al
100009de:	c1 e0 02             	shl    eax,0x2
100009e1:	0b 02                	or     eax,DWORD PTR [edx]
100009e3:	80 7a 0e 01          	cmp    BYTE PTR [edx+0xe],0x1
100009e7:	19 d2                	sbb    edx,edx
100009e9:	80 e2 36             	and    dl,0x36
100009ec:	81 c2 d4 00 00 00    	add    edx,0xd4
100009f2:	ee                   	out    dx,al
100009f3:	c3                   	ret    

100009f4 <DMAChannel::unmask()>:
100009f4:	6a 00                	push   0x0
100009f6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
100009fa:	e8 fc ff ff ff       	call   100009fb <DMAChannel::unmask()+0x7>	100009fb: R_386_PC32	DMAChannel::mask(bool)
100009ff:	58                   	pop    eax
10000a00:	5a                   	pop    edx
10000a01:	c3                   	ret    

10000a02 <DMA::DMA()>:
10000a02:	55                   	push   ebp
10000a03:	89 e5                	mov    ebp,esp
10000a05:	83 ec 08             	sub    esp,0x8
10000a08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a0b:	83 ec 08             	sub    esp,0x8
10000a0e:	68 00 00 00 00       	push   0x0	10000a0f: R_386_32	dmaCtrlName
10000a13:	50                   	push   eax
10000a14:	e8 fc ff ff ff       	call   10000a15 <DMA::DMA()+0x13>	10000a15: R_386_PC32	Device::Device(char const*)
10000a19:	83 c4 10             	add    esp,0x10
10000a1c:	ba 08 00 00 00       	mov    edx,0x8	10000a1d: R_386_32	vtable for DMA
10000a21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a24:	89 10                	mov    DWORD PTR [eax],edx
10000a26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a29:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
10000a30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a33:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000a39:	0f b6 d0             	movzx  edx,al
10000a3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a3f:	66 c7 44 90 04 00 00 	mov    WORD PTR [eax+edx*4+0x4],0x0
10000a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a49:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000a4f:	0f b6 d0             	movzx  edx,al
10000a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a55:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
10000a5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a5d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000a63:	8d 50 01             	lea    edx,[eax+0x1]
10000a66:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000a69:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000a6f:	0f b6 d0             	movzx  edx,al
10000a72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a75:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000a79:	83 e1 3f             	and    ecx,0x3f
10000a7c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000a80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a83:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000a89:	0f b6 d0             	movzx  edx,al
10000a8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a8f:	66 c7 44 90 04 c0 00 	mov    WORD PTR [eax+edx*4+0x4],0xc0
10000a96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a99:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000a9f:	0f b6 d0             	movzx  edx,al
10000aa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000aa5:	c6 44 90 06 20       	mov    BYTE PTR [eax+edx*4+0x6],0x20
10000aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000aad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000ab3:	8d 50 01             	lea    edx,[eax+0x1]
10000ab6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000ab9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000abf:	0f b6 d0             	movzx  edx,al
10000ac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ac5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000ac9:	83 e1 3f             	and    ecx,0x3f
10000acc:	83 c9 40             	or     ecx,0x40
10000acf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000ad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ad6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000adc:	0f b6 d0             	movzx  edx,al
10000adf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ae2:	66 c7 44 90 04 81 00 	mov    WORD PTR [eax+edx*4+0x4],0x81
10000ae9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000aec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000af2:	0f b6 d0             	movzx  edx,al
10000af5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000af8:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
10000afd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000b06:	8d 50 01             	lea    edx,[eax+0x1]
10000b09:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000b0c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000b12:	0f b6 d0             	movzx  edx,al
10000b15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b18:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000b1c:	83 e1 3f             	and    ecx,0x3f
10000b1f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000b23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000b2c:	0f b6 d0             	movzx  edx,al
10000b2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b32:	66 c7 44 90 04 87 00 	mov    WORD PTR [eax+edx*4+0x4],0x87
10000b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000b42:	0f b6 d0             	movzx  edx,al
10000b45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b48:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b50:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000b56:	8d 50 01             	lea    edx,[eax+0x1]
10000b59:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000b5c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000b62:	0f b6 d0             	movzx  edx,al
10000b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b68:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000b6c:	83 e1 3f             	and    ecx,0x3f
10000b6f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000b73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b76:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000b7c:	0f b6 d0             	movzx  edx,al
10000b7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b82:	66 c7 44 90 04 89 00 	mov    WORD PTR [eax+edx*4+0x4],0x89
10000b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b8c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000b92:	0f b6 d0             	movzx  edx,al
10000b95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b98:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
10000b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ba0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000ba6:	8d 50 01             	lea    edx,[eax+0x1]
10000ba9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000bac:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000bb2:	0f b6 d0             	movzx  edx,al
10000bb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bb8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000bbc:	83 e1 3f             	and    ecx,0x3f
10000bbf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000bc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bc6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000bcc:	0f b6 d0             	movzx  edx,al
10000bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bd2:	66 c7 44 90 04 8f 00 	mov    WORD PTR [eax+edx*4+0x4],0x8f
10000bd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000be2:	0f b6 d0             	movzx  edx,al
10000be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000be8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bf0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000bf6:	8d 50 01             	lea    edx,[eax+0x1]
10000bf9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000bfc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000c02:	0f b6 d0             	movzx  edx,al
10000c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c08:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000c0c:	83 e1 3f             	and    ecx,0x3f
10000c0f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000c13:	90                   	nop
10000c14:	c9                   	leave  
10000c15:	c3                   	ret    

10000c16 <DMA::getAvailable()>:
10000c16:	53                   	push   ebx
10000c17:	31 db                	xor    ebx,ebx
10000c19:	83 ec 08             	sub    esp,0x8
10000c1c:	e8 fc ff ff ff       	call   10000c1d <DMA::getAvailable()+0x7>	10000c1d: R_386_PC32	lockScheduler()
10000c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000c25:	0f b6 80 58 01 00 00 	movzx  eax,BYTE PTR [eax+0x158]
10000c2c:	0f a3 d8             	bt     eax,ebx
10000c2f:	73 07                	jae    10000c38 <DMA::getAvailable()+0x22>
10000c31:	e8 fc ff ff ff       	call   10000c32 <DMA::getAvailable()+0x1c>	10000c32: R_386_PC32	unlockScheduler()
10000c36:	eb 0e                	jmp    10000c46 <DMA::getAvailable()+0x30>
10000c38:	43                   	inc    ebx
10000c39:	83 fb 08             	cmp    ebx,0x8
10000c3c:	75 ee                	jne    10000c2c <DMA::getAvailable()+0x16>
10000c3e:	e8 fc ff ff ff       	call   10000c3f <DMA::getAvailable()+0x29>	10000c3f: R_386_PC32	unlockScheduler()
10000c43:	83 cb ff             	or     ebx,0xffffffff
10000c46:	89 d8                	mov    eax,ebx
10000c48:	83 c4 08             	add    esp,0x8
10000c4b:	5b                   	pop    ebx
10000c4c:	c3                   	ret    
10000c4d:	90                   	nop

10000c4e <DMA::open(int, int, void*)>:
10000c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000c52:	c6 80 58 01 00 00 ee 	mov    BYTE PTR [eax+0x158],0xee
10000c59:	31 c0                	xor    eax,eax
10000c5b:	e6 0d                	out    0xd,al
10000c5d:	e6 da                	out    0xda,al
10000c5f:	31 c0                	xor    eax,eax
10000c61:	c3                   	ret    

10000c62 <DMA::close(int, int, void*)>:
10000c62:	31 c0                	xor    eax,eax
10000c64:	c3                   	ret    
10000c65:	90                   	nop

10000c66 <DMA::tryLockChannelWithBase(int)>:
10000c66:	56                   	push   esi
10000c67:	53                   	push   ebx
10000c68:	83 ec 14             	sub    esp,0x14
10000c6b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10000c6f:	e8 fc ff ff ff       	call   10000c70 <DMA::tryLockChannelWithBase(int)+0xa>	10000c70: R_386_PC32	lockScheduler()
10000c74:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10000c78:	8d 43 03             	lea    eax,[ebx+0x3]
10000c7b:	39 d8                	cmp    eax,ebx
10000c7d:	7c 47                	jl     10000cc6 <DMA::tryLockChannelWithBase(int)+0x60>
10000c7f:	0f b6 8e 58 01 00 00 	movzx  ecx,BYTE PTR [esi+0x158]
10000c86:	89 ca                	mov    edx,ecx
10000c88:	0f a3 d9             	bt     ecx,ebx
10000c8b:	73 36                	jae    10000cc3 <DMA::tryLockChannelWithBase(int)+0x5d>
10000c8d:	83 ec 0c             	sub    esp,0xc
10000c90:	88 d9                	mov    cl,bl
10000c92:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10000c97:	d3 c0                	rol    eax,cl
10000c99:	21 d0                	and    eax,edx
10000c9b:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10000ca1:	6a 18                	push   0x18
10000ca3:	e8 fc ff ff ff       	call   10000ca4 <DMA::tryLockChannelWithBase(int)+0x3e>	10000ca4: R_386_PC32	operator new(unsigned long)
10000ca8:	5a                   	pop    edx
10000ca9:	59                   	pop    ecx
10000caa:	53                   	push   ebx
10000cab:	50                   	push   eax
10000cac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000cb0:	e8 fc ff ff ff       	call   10000cb1 <DMA::tryLockChannelWithBase(int)+0x4b>	10000cb1: R_386_PC32	DMAChannel::DMAChannel(int)
10000cb5:	e8 fc ff ff ff       	call   10000cb6 <DMA::tryLockChannelWithBase(int)+0x50>	10000cb6: R_386_PC32	unlockScheduler()
10000cba:	83 c4 10             	add    esp,0x10
10000cbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10000cc1:	eb 0a                	jmp    10000ccd <DMA::tryLockChannelWithBase(int)+0x67>
10000cc3:	43                   	inc    ebx
10000cc4:	eb b5                	jmp    10000c7b <DMA::tryLockChannelWithBase(int)+0x15>
10000cc6:	e8 fc ff ff ff       	call   10000cc7 <DMA::tryLockChannelWithBase(int)+0x61>	10000cc7: R_386_PC32	unlockScheduler()
10000ccb:	31 c0                	xor    eax,eax
10000ccd:	83 c4 14             	add    esp,0x14
10000cd0:	5b                   	pop    ebx
10000cd1:	5e                   	pop    esi
10000cd2:	c3                   	ret    
10000cd3:	90                   	nop

10000cd4 <DMA::lockChannelWithBase(int)>:
10000cd4:	83 ec 0c             	sub    esp,0xc
10000cd7:	50                   	push   eax
10000cd8:	50                   	push   eax
10000cd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000cdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000ce1:	e8 fc ff ff ff       	call   10000ce2 <DMA::lockChannelWithBase(int)+0xe>	10000ce2: R_386_PC32	DMA::tryLockChannelWithBase(int)
10000ce6:	83 c4 10             	add    esp,0x10
10000ce9:	85 c0                	test   eax,eax
10000ceb:	74 ea                	je     10000cd7 <DMA::lockChannelWithBase(int)+0x3>
10000ced:	83 c4 0c             	add    esp,0xc
10000cf0:	c3                   	ret    
10000cf1:	90                   	nop

10000cf2 <DMA::tryLockChannel8()>:
10000cf2:	83 ec 14             	sub    esp,0x14
10000cf5:	6a 00                	push   0x0
10000cf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000cfb:	e8 fc ff ff ff       	call   10000cfc <DMA::tryLockChannel8()+0xa>	10000cfc: R_386_PC32	DMA::tryLockChannelWithBase(int)
10000d00:	83 c4 1c             	add    esp,0x1c
10000d03:	c3                   	ret    

10000d04 <DMA::tryLockChannel16()>:
10000d04:	83 ec 14             	sub    esp,0x14
10000d07:	6a 04                	push   0x4
10000d09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000d0d:	e8 fc ff ff ff       	call   10000d0e <DMA::tryLockChannel16()+0xa>	10000d0e: R_386_PC32	DMA::tryLockChannelWithBase(int)
10000d12:	83 c4 1c             	add    esp,0x1c
10000d15:	c3                   	ret    

10000d16 <DMA::tryLockChannel(int)>:
10000d16:	56                   	push   esi
10000d17:	53                   	push   ebx
10000d18:	83 ec 14             	sub    esp,0x14
10000d1b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10000d1f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10000d23:	83 fb 07             	cmp    ebx,0x7
10000d26:	76 12                	jbe    10000d3a <DMA::tryLockChannel(int)+0x24>
10000d28:	83 ec 0c             	sub    esp,0xc
10000d2b:	68 5c 2d 00 10       	push   0x10002d5c	10000d2c: R_386_32	.text
10000d30:	e8 fc ff ff ff       	call   10000d31 <DMA::tryLockChannel(int)+0x1b>	10000d31: R_386_PC32	Dbg::kprintf(char const*, ...)
10000d35:	83 c4 10             	add    esp,0x10
10000d38:	eb 4e                	jmp    10000d88 <DMA::tryLockChannel(int)+0x72>
10000d3a:	e8 fc ff ff ff       	call   10000d3b <DMA::tryLockChannel(int)+0x25>	10000d3b: R_386_PC32	lockScheduler()
10000d3f:	0f b6 86 58 01 00 00 	movzx  eax,BYTE PTR [esi+0x158]
10000d46:	89 c2                	mov    edx,eax
10000d48:	0f a3 d8             	bt     eax,ebx
10000d4b:	73 36                	jae    10000d83 <DMA::tryLockChannel(int)+0x6d>
10000d4d:	83 ec 0c             	sub    esp,0xc
10000d50:	88 d9                	mov    cl,bl
10000d52:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10000d57:	d3 c0                	rol    eax,cl
10000d59:	21 d0                	and    eax,edx
10000d5b:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10000d61:	6a 18                	push   0x18
10000d63:	e8 fc ff ff ff       	call   10000d64 <DMA::tryLockChannel(int)+0x4e>	10000d64: R_386_PC32	operator new(unsigned long)
10000d68:	5a                   	pop    edx
10000d69:	59                   	pop    ecx
10000d6a:	53                   	push   ebx
10000d6b:	50                   	push   eax
10000d6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000d70:	e8 fc ff ff ff       	call   10000d71 <DMA::tryLockChannel(int)+0x5b>	10000d71: R_386_PC32	DMAChannel::DMAChannel(int)
10000d75:	e8 fc ff ff ff       	call   10000d76 <DMA::tryLockChannel(int)+0x60>	10000d76: R_386_PC32	unlockScheduler()
10000d7a:	83 c4 10             	add    esp,0x10
10000d7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10000d81:	eb 07                	jmp    10000d8a <DMA::tryLockChannel(int)+0x74>
10000d83:	e8 fc ff ff ff       	call   10000d84 <DMA::tryLockChannel(int)+0x6e>	10000d84: R_386_PC32	unlockScheduler()
10000d88:	31 c0                	xor    eax,eax
10000d8a:	83 c4 14             	add    esp,0x14
10000d8d:	5b                   	pop    ebx
10000d8e:	5e                   	pop    esi
10000d8f:	c3                   	ret    

10000d90 <DMA::lockChannel8()>:
10000d90:	83 ec 14             	sub    esp,0x14
10000d93:	6a 00                	push   0x0
10000d95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000d99:	e8 fc ff ff ff       	call   10000d9a <DMA::lockChannel8()+0xa>	10000d9a: R_386_PC32	DMA::lockChannelWithBase(int)
10000d9e:	83 c4 1c             	add    esp,0x1c
10000da1:	c3                   	ret    

10000da2 <DMA::lockChannel16()>:
10000da2:	83 ec 14             	sub    esp,0x14
10000da5:	6a 04                	push   0x4
10000da7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000dab:	e8 fc ff ff ff       	call   10000dac <DMA::lockChannel16()+0xa>	10000dac: R_386_PC32	DMA::lockChannelWithBase(int)
10000db0:	83 c4 1c             	add    esp,0x1c
10000db3:	c3                   	ret    

10000db4 <DMA::lockChannel(int)>:
10000db4:	83 ec 0c             	sub    esp,0xc
10000db7:	50                   	push   eax
10000db8:	50                   	push   eax
10000db9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000dbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000dc1:	e8 fc ff ff ff       	call   10000dc2 <DMA::lockChannel(int)+0xe>	10000dc2: R_386_PC32	DMA::tryLockChannel(int)
10000dc6:	83 c4 10             	add    esp,0x10
10000dc9:	85 c0                	test   eax,eax
10000dcb:	74 ea                	je     10000db7 <DMA::lockChannel(int)+0x3>
10000dcd:	83 c4 0c             	add    esp,0xc
10000dd0:	c3                   	ret    
10000dd1:	90                   	nop

10000dd2 <DMA::unlockChannel(DMAChannel*)>:
10000dd2:	56                   	push   esi
10000dd3:	53                   	push   ebx
10000dd4:	53                   	push   ebx
10000dd5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10000dd9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10000ddd:	85 db                	test   ebx,ebx
10000ddf:	75 10                	jne    10000df1 <DMA::unlockChannel(DMAChannel*)+0x1f>
10000de1:	83 ec 0c             	sub    esp,0xc
10000de4:	68 00 00 00 00       	push   0x0	10000de5: R_386_32	badDma
10000de9:	e8 fc ff ff ff       	call   10000dea <DMA::unlockChannel(DMAChannel*)+0x18>	10000dea: R_386_PC32	Krnl::panic(char const*)
10000dee:	83 c4 10             	add    esp,0x10
10000df1:	e8 fc ff ff ff       	call   10000df2 <DMA::unlockChannel(DMAChannel*)+0x20>	10000df2: R_386_PC32	lockScheduler()
10000df6:	0f b6 96 58 01 00 00 	movzx  edx,BYTE PTR [esi+0x158]
10000dfd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
10000dff:	89 d0                	mov    eax,edx
10000e01:	0f a3 ca             	bt     edx,ecx
10000e04:	72 24                	jb     10000e2a <DMA::unlockChannel(DMAChannel*)+0x58>
10000e06:	83 ec 0c             	sub    esp,0xc
10000e09:	ba 01 00 00 00       	mov    edx,0x1
10000e0e:	d3 e2                	shl    edx,cl
10000e10:	09 d0                	or     eax,edx
10000e12:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10000e18:	53                   	push   ebx
10000e19:	e8 fc ff ff ff       	call   10000e1a <DMA::unlockChannel(DMAChannel*)+0x48>	10000e1a: R_386_PC32	DMAChannel::~DMAChannel()
10000e1e:	5a                   	pop    edx
10000e1f:	59                   	pop    ecx
10000e20:	6a 18                	push   0x18
10000e22:	53                   	push   ebx
10000e23:	e8 fc ff ff ff       	call   10000e24 <DMA::unlockChannel(DMAChannel*)+0x52>	10000e24: R_386_PC32	operator delete(void*, unsigned long)
10000e28:	eb 0d                	jmp    10000e37 <DMA::unlockChannel(DMAChannel*)+0x65>
10000e2a:	83 ec 0c             	sub    esp,0xc
10000e2d:	68 00 00 00 00       	push   0x0	10000e2e: R_386_32	badBook
10000e32:	e8 fc ff ff ff       	call   10000e33 <DMA::unlockChannel(DMAChannel*)+0x61>	10000e33: R_386_PC32	Krnl::panic(char const*)
10000e37:	83 c4 10             	add    esp,0x10
10000e3a:	58                   	pop    eax
10000e3b:	5b                   	pop    ebx
10000e3c:	5e                   	pop    esi
10000e3d:	e9 fc ff ff ff       	jmp    10000e3e <DMA::unlockChannel(DMAChannel*)+0x6c>	10000e3e: R_386_PC32	unlockScheduler()

10000e42 <PS2::PS2()>:
10000e42:	55                   	push   ebp
10000e43:	89 e5                	mov    ebp,esp
10000e45:	83 ec 08             	sub    esp,0x8
10000e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e4b:	83 ec 08             	sub    esp,0x8
10000e4e:	68 00 00 00 00       	push   0x0	10000e4f: R_386_32	ps2ctrlname
10000e53:	50                   	push   eax
10000e54:	e8 fc ff ff ff       	call   10000e55 <PS2::PS2()+0x13>	10000e55: R_386_PC32	Bus::Bus(char const*)
10000e59:	83 c4 10             	add    esp,0x10
10000e5c:	ba 08 00 00 00       	mov    edx,0x8	10000e5d: R_386_32	vtable for PS2
10000e61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e64:	89 10                	mov    DWORD PTR [eax],edx
10000e66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e69:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000e6f:	0f b6 d0             	movzx  edx,al
10000e72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e75:	66 c7 44 90 04 60 00 	mov    WORD PTR [eax+edx*4+0x4],0x60
10000e7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000e85:	0f b6 d0             	movzx  edx,al
10000e88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e8b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000e90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000e99:	8d 50 01             	lea    edx,[eax+0x1]
10000e9c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000e9f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000ea5:	0f b6 d0             	movzx  edx,al
10000ea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000eab:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000eaf:	83 e1 3f             	and    ecx,0x3f
10000eb2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000eb9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000ebf:	0f b6 d0             	movzx  edx,al
10000ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ec5:	66 c7 44 90 04 64 00 	mov    WORD PTR [eax+edx*4+0x4],0x64
10000ecc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ecf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000ed5:	0f b6 d0             	movzx  edx,al
10000ed8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000edb:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000ee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ee3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000ee9:	8d 50 01             	lea    edx,[eax+0x1]
10000eec:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000eef:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000ef5:	0f b6 d0             	movzx  edx,al
10000ef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000efb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000eff:	83 e1 3f             	and    ecx,0x3f
10000f02:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000f06:	90                   	nop
10000f07:	c9                   	leave  
10000f08:	c3                   	ret    
10000f09:	90                   	nop

10000f0a <PS2::open(int, int, void*)>:
10000f0a:	55                   	push   ebp
10000f0b:	89 e5                	mov    ebp,esp
10000f0d:	53                   	push   ebx
10000f0e:	83 ec 24             	sub    esp,0x24
10000f11:	e8 fc ff ff ff       	call   10000f12 <PS2::open(int, int, void*)+0x8>	10000f12: R_386_PC32	lockScheduler()
10000f16:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000f1d:	83 ec 08             	sub    esp,0x8
10000f20:	68 ad 00 00 00       	push   0xad
10000f25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f28:	e8 fc ff ff ff       	call   10000f29 <PS2::open(int, int, void*)+0x1f>	10000f29: R_386_PC32	PS2::controllerWrite(unsigned char)
10000f2d:	83 c4 10             	add    esp,0x10
10000f30:	83 ec 08             	sub    esp,0x8
10000f33:	68 a7 00 00 00       	push   0xa7
10000f38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f3b:	e8 fc ff ff ff       	call   10000f3c <PS2::open(int, int, void*)+0x32>	10000f3c: R_386_PC32	PS2::controllerWrite(unsigned char)
10000f40:	83 c4 10             	add    esp,0x10
10000f43:	66 c7 45 e4 60 00    	mov    WORD PTR [ebp-0x1c],0x60
10000f49:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000f4c:	89 c2                	mov    edx,eax
10000f4e:	ec                   	in     al,dx
10000f4f:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
10000f52:	66 c7 45 e8 60 00    	mov    WORD PTR [ebp-0x18],0x60
10000f58:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000f5b:	89 c2                	mov    edx,eax
10000f5d:	ec                   	in     al,dx
10000f5e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
10000f61:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10000f67:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000f6a:	89 c2                	mov    edx,eax
10000f6c:	ec                   	in     al,dx
10000f6d:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10000f70:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10000f76:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000f79:	89 c2                	mov    edx,eax
10000f7b:	ec                   	in     al,dx
10000f7c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000f7f:	83 ec 08             	sub    esp,0x8
10000f82:	68 aa 00 00 00       	push   0xaa
10000f87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f8a:	e8 fc ff ff ff       	call   10000f8b <PS2::open(int, int, void*)+0x81>	10000f8b: R_386_PC32	PS2::controllerWrite(unsigned char)
10000f8f:	83 c4 10             	add    esp,0x10
10000f92:	83 ec 0c             	sub    esp,0xc
10000f95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f98:	e8 fc ff ff ff       	call   10000f99 <PS2::open(int, int, void*)+0x8f>	10000f99: R_386_PC32	PS2::controllerRead()
10000f9d:	83 c4 10             	add    esp,0x10
10000fa0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000fa3:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000fa7:	74 65                	je     1000100e <PS2::open(int, int, void*)+0x104>
10000fa9:	83 ec 0c             	sub    esp,0xc
10000fac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000faf:	e8 fc ff ff ff       	call   10000fb0 <PS2::open(int, int, void*)+0xa6>	10000fb0: R_386_PC32	PS2::controllerRead()
10000fb4:	83 c4 10             	add    esp,0x10
10000fb7:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000fba:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000fbe:	74 4e                	je     1000100e <PS2::open(int, int, void*)+0x104>
10000fc0:	83 ec 08             	sub    esp,0x8
10000fc3:	68 aa 00 00 00       	push   0xaa
10000fc8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000fcb:	e8 fc ff ff ff       	call   10000fcc <PS2::open(int, int, void*)+0xc2>	10000fcc: R_386_PC32	PS2::controllerWrite(unsigned char)
10000fd0:	83 c4 10             	add    esp,0x10
10000fd3:	83 ec 08             	sub    esp,0x8
10000fd6:	68 aa 00 00 00       	push   0xaa
10000fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000fde:	e8 fc ff ff ff       	call   10000fdf <PS2::open(int, int, void*)+0xd5>	10000fdf: R_386_PC32	PS2::controllerWrite(unsigned char)
10000fe3:	83 c4 10             	add    esp,0x10
10000fe6:	83 ec 0c             	sub    esp,0xc
10000fe9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000fec:	e8 fc ff ff ff       	call   10000fed <PS2::open(int, int, void*)+0xe3>	10000fed: R_386_PC32	PS2::controllerRead()
10000ff1:	83 c4 10             	add    esp,0x10
10000ff4:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000ff7:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000ffb:	74 11                	je     1000100e <PS2::open(int, int, void*)+0x104>
10000ffd:	83 ec 0c             	sub    esp,0xc
10001000:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001003:	e8 fc ff ff ff       	call   10001004 <PS2::open(int, int, void*)+0xfa>	10001004: R_386_PC32	PS2::controllerRead()
10001008:	83 c4 10             	add    esp,0x10
1000100b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000100e:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
10001015:	83 ec 08             	sub    esp,0x8
10001018:	6a 20                	push   0x20
1000101a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000101d:	e8 fc ff ff ff       	call   1000101e <PS2::open(int, int, void*)+0x114>	1000101e: R_386_PC32	PS2::controllerWrite(unsigned char)
10001022:	83 c4 10             	add    esp,0x10
10001025:	83 ec 0c             	sub    esp,0xc
10001028:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000102b:	e8 fc ff ff ff       	call   1000102c <PS2::open(int, int, void*)+0x122>	1000102c: R_386_PC32	PS2::controllerRead()
10001030:	83 c4 10             	add    esp,0x10
10001033:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10001036:	80 4d f2 01          	or     BYTE PTR [ebp-0xe],0x1
1000103a:	80 4d f2 02          	or     BYTE PTR [ebp-0xe],0x2
1000103e:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
10001042:	83 ec 04             	sub    esp,0x4
10001045:	50                   	push   eax
10001046:	6a 60                	push   0x60
10001048:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000104b:	e8 fc ff ff ff       	call   1000104c <PS2::open(int, int, void*)+0x142>	1000104c: R_386_PC32	PS2::controllerWrite(unsigned char, unsigned char)
10001050:	83 c4 10             	add    esp,0x10
10001053:	83 ec 08             	sub    esp,0x8
10001056:	68 ae 00 00 00       	push   0xae
1000105b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000105e:	e8 fc ff ff ff       	call   1000105f <PS2::open(int, int, void*)+0x155>	1000105f: R_386_PC32	PS2::controllerWrite(unsigned char)
10001063:	83 c4 10             	add    esp,0x10
10001066:	83 ec 08             	sub    esp,0x8
10001069:	68 a8 00 00 00       	push   0xa8
1000106e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001071:	e8 fc ff ff ff       	call   10001072 <PS2::open(int, int, void*)+0x168>	10001072: R_386_PC32	PS2::controllerWrite(unsigned char)
10001076:	83 c4 10             	add    esp,0x10
10001079:	e8 fc ff ff ff       	call   1000107a <PS2::open(int, int, void*)+0x170>	1000107a: R_386_PC32	unlockScheduler()
1000107e:	83 ec 0c             	sub    esp,0xc
10001081:	68 60 01 00 00       	push   0x160
10001086:	e8 fc ff ff ff       	call   10001087 <PS2::open(int, int, void*)+0x17d>	10001087: R_386_PC32	operator new(unsigned long)
1000108b:	83 c4 10             	add    esp,0x10
1000108e:	89 c3                	mov    ebx,eax
10001090:	83 ec 0c             	sub    esp,0xc
10001093:	53                   	push   ebx
10001094:	e8 fc ff ff ff       	call   10001095 <PS2::open(int, int, void*)+0x18b>	10001095: R_386_PC32	PS2Port::PS2Port()
10001099:	83 c4 10             	add    esp,0x10
1000109c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000109f:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
100010a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010a8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100010ab:	8b 92 58 01 00 00    	mov    edx,DWORD PTR [edx+0x158]
100010b1:	83 ec 08             	sub    esp,0x8
100010b4:	52                   	push   edx
100010b5:	50                   	push   eax
100010b6:	e8 fc ff ff ff       	call   100010b7 <PS2::open(int, int, void*)+0x1ad>	100010b7: R_386_PC32	Device::addChild(Device*)
100010bb:	83 c4 10             	add    esp,0x10
100010be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010c1:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
100010c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010ca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100010d0:	8b 00                	mov    eax,DWORD PTR [eax]
100010d2:	83 c0 08             	add    eax,0x8
100010d5:	8b 00                	mov    eax,DWORD PTR [eax]
100010d7:	6a 00                	push   0x0
100010d9:	6a 00                	push   0x0
100010db:	6a 00                	push   0x0
100010dd:	52                   	push   edx
100010de:	ff d0                	call   eax
100010e0:	83 c4 10             	add    esp,0x10
100010e3:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
100010e7:	75 65                	jne    1000114e <PS2::open(int, int, void*)+0x244>
100010e9:	83 ec 0c             	sub    esp,0xc
100010ec:	68 60 01 00 00       	push   0x160
100010f1:	e8 fc ff ff ff       	call   100010f2 <PS2::open(int, int, void*)+0x1e8>	100010f2: R_386_PC32	operator new(unsigned long)
100010f6:	83 c4 10             	add    esp,0x10
100010f9:	89 c3                	mov    ebx,eax
100010fb:	83 ec 0c             	sub    esp,0xc
100010fe:	53                   	push   ebx
100010ff:	e8 fc ff ff ff       	call   10001100 <PS2::open(int, int, void*)+0x1f6>	10001100: R_386_PC32	PS2Port::PS2Port()
10001104:	83 c4 10             	add    esp,0x10
10001107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000110a:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
10001110:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001113:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001116:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
1000111c:	83 ec 08             	sub    esp,0x8
1000111f:	52                   	push   edx
10001120:	50                   	push   eax
10001121:	e8 fc ff ff ff       	call   10001122 <PS2::open(int, int, void*)+0x218>	10001122: R_386_PC32	Device::addChild(Device*)
10001126:	83 c4 10             	add    esp,0x10
10001129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000112c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10001132:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001135:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000113b:	8b 00                	mov    eax,DWORD PTR [eax]
1000113d:	83 c0 08             	add    eax,0x8
10001140:	8b 00                	mov    eax,DWORD PTR [eax]
10001142:	6a 00                	push   0x0
10001144:	6a 00                	push   0x0
10001146:	6a 01                	push   0x1
10001148:	52                   	push   edx
10001149:	ff d0                	call   eax
1000114b:	83 c4 10             	add    esp,0x10
1000114e:	b8 00 00 00 00       	mov    eax,0x0
10001153:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001156:	c9                   	leave  
10001157:	c3                   	ret    

10001158 <PS2::close(int, int, void*)>:
10001158:	b8 00 00 00 00       	mov    eax,0x0
1000115d:	c3                   	ret    

1000115e <PS2::detect()>:
1000115e:	90                   	nop
1000115f:	c3                   	ret    

10001160 <PS2::controllerWrite(unsigned char)>:
10001160:	55                   	push   ebp
10001161:	89 e5                	mov    ebp,esp
10001163:	83 ec 14             	sub    esp,0x14
10001166:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001169:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
1000116c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10001173:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10001179:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000117c:	89 c2                	mov    edx,eax
1000117e:	ec                   	in     al,dx
1000117f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10001182:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10001185:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10001188:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
1000118c:	83 e0 40             	and    eax,0x40
1000118f:	85 c0                	test   eax,eax
10001191:	75 2d                	jne    100011c0 <PS2::controllerWrite(unsigned char)+0x60>
10001193:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10001196:	84 c0                	test   al,al
10001198:	78 26                	js     100011c0 <PS2::controllerWrite(unsigned char)+0x60>
1000119a:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
1000119e:	83 e0 02             	and    eax,0x2
100011a1:	85 c0                	test   eax,eax
100011a3:	74 17                	je     100011bc <PS2::controllerWrite(unsigned char)+0x5c>
100011a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100011a8:	8d 50 01             	lea    edx,[eax+0x1]
100011ab:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100011ae:	3d 20 03 00 00       	cmp    eax,0x320
100011b3:	0f 94 c0             	sete   al
100011b6:	84 c0                	test   al,al
100011b8:	75 05                	jne    100011bf <PS2::controllerWrite(unsigned char)+0x5f>
100011ba:	eb b7                	jmp    10001173 <PS2::controllerWrite(unsigned char)+0x13>
100011bc:	90                   	nop
100011bd:	eb 01                	jmp    100011c0 <PS2::controllerWrite(unsigned char)+0x60>
100011bf:	90                   	nop
100011c0:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
100011c4:	66 c7 45 f4 64 00    	mov    WORD PTR [ebp-0xc],0x64
100011ca:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100011cd:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100011d0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100011d3:	ee                   	out    dx,al
100011d4:	b0 01                	mov    al,0x1
100011d6:	c9                   	leave  
100011d7:	c3                   	ret    

100011d8 <PS2::controllerWrite(unsigned char, unsigned char)>:
100011d8:	55                   	push   ebp
100011d9:	89 e5                	mov    ebp,esp
100011db:	83 ec 28             	sub    esp,0x28
100011de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100011e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100011e4:	88 55 dc             	mov    BYTE PTR [ebp-0x24],dl
100011e7:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
100011ea:	0f b6 45 dc          	movzx  eax,BYTE PTR [ebp-0x24]
100011ee:	50                   	push   eax
100011ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011f2:	e8 fc ff ff ff       	call   100011f3 <PS2::controllerWrite(unsigned char, unsigned char)+0x1b>	100011f3: R_386_PC32	PS2::controllerWrite(unsigned char)
100011f7:	83 c4 08             	add    esp,0x8
100011fa:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10001201:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10001207:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000120a:	89 c2                	mov    edx,eax
1000120c:	ec                   	in     al,dx
1000120d:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10001210:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10001213:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10001216:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
1000121a:	83 e0 40             	and    eax,0x40
1000121d:	85 c0                	test   eax,eax
1000121f:	75 07                	jne    10001228 <PS2::controllerWrite(unsigned char, unsigned char)+0x50>
10001221:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10001224:	84 c0                	test   al,al
10001226:	79 18                	jns    10001240 <PS2::controllerWrite(unsigned char, unsigned char)+0x68>
10001228:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
1000122c:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10001232:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001235:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001238:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000123b:	ee                   	out    dx,al
1000123c:	b0 00                	mov    al,0x0
1000123e:	eb 4f                	jmp    1000128f <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10001240:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10001244:	83 e0 02             	and    eax,0x2
10001247:	85 c0                	test   eax,eax
10001249:	74 2d                	je     10001278 <PS2::controllerWrite(unsigned char, unsigned char)+0xa0>
1000124b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000124e:	8d 50 01             	lea    edx,[eax+0x1]
10001251:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10001254:	3d 20 03 00 00       	cmp    eax,0x320
10001259:	0f 94 c0             	sete   al
1000125c:	84 c0                	test   al,al
1000125e:	74 a1                	je     10001201 <PS2::controllerWrite(unsigned char, unsigned char)+0x29>
10001260:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10001264:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
1000126a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000126d:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10001270:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10001273:	ee                   	out    dx,al
10001274:	b0 00                	mov    al,0x0
10001276:	eb 17                	jmp    1000128f <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10001278:	90                   	nop
10001279:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
1000127d:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10001283:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10001286:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10001289:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
1000128c:	ee                   	out    dx,al
1000128d:	b0 01                	mov    al,0x1
1000128f:	c9                   	leave  
10001290:	c3                   	ret    
10001291:	90                   	nop

10001292 <PS2::controllerRead()>:
10001292:	55                   	push   ebp
10001293:	89 e5                	mov    ebp,esp
10001295:	83 ec 20             	sub    esp,0x20
10001298:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000129f:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
100012a5:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100012a8:	89 c2                	mov    edx,eax
100012aa:	ec                   	in     al,dx
100012ab:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100012ae:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
100012b1:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
100012b4:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
100012b8:	83 e0 40             	and    eax,0x40
100012bb:	85 c0                	test   eax,eax
100012bd:	75 07                	jne    100012c6 <PS2::controllerRead()+0x34>
100012bf:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
100012c2:	84 c0                	test   al,al
100012c4:	79 04                	jns    100012ca <PS2::controllerRead()+0x38>
100012c6:	b0 00                	mov    al,0x0
100012c8:	eb 48                	jmp    10001312 <PS2::controllerRead()+0x80>
100012ca:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
100012ce:	83 e0 01             	and    eax,0x1
100012d1:	85 c0                	test   eax,eax
100012d3:	75 29                	jne    100012fe <PS2::controllerRead()+0x6c>
100012d5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100012d8:	8d 50 01             	lea    edx,[eax+0x1]
100012db:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100012de:	3d 40 06 00 00       	cmp    eax,0x640
100012e3:	0f 94 c0             	sete   al
100012e6:	84 c0                	test   al,al
100012e8:	74 b5                	je     1000129f <PS2::controllerRead()+0xd>
100012ea:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
100012f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100012f3:	89 c2                	mov    edx,eax
100012f5:	ec                   	in     al,dx
100012f6:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100012f9:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100012fc:	eb 14                	jmp    10001312 <PS2::controllerRead()+0x80>
100012fe:	90                   	nop
100012ff:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10001305:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001308:	89 c2                	mov    edx,eax
1000130a:	ec                   	in     al,dx
1000130b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000130e:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10001311:	90                   	nop
10001312:	c9                   	leave  
10001313:	c3                   	ret    

10001314 <PS2Keyboard::PS2Keyboard()>:
10001314:	55                   	push   ebp
10001315:	89 e5                	mov    ebp,esp
10001317:	83 ec 08             	sub    esp,0x8
1000131a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000131d:	83 ec 08             	sub    esp,0x8
10001320:	68 00 00 00 00       	push   0x0	10001321: R_386_32	ps2keyname
10001325:	50                   	push   eax
10001326:	e8 fc ff ff ff       	call   10001327 <PS2Keyboard::PS2Keyboard()+0x13>	10001327: R_386_PC32	Keyboard::Keyboard(char const*)
1000132b:	83 c4 10             	add    esp,0x10
1000132e:	ba 08 00 00 00       	mov    edx,0x8	1000132f: R_386_32	vtable for PS2Keyboard
10001333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001336:	89 10                	mov    DWORD PTR [eax],edx
10001338:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000133b:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10001342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001345:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
1000134c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000134f:	c6 80 66 01 00 00 00 	mov    BYTE PTR [eax+0x166],0x0
10001356:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001359:	c6 80 67 01 00 00 00 	mov    BYTE PTR [eax+0x167],0x0
10001360:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001363:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
1000136a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000136d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
10001374:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001377:	c6 80 6a 01 00 00 00 	mov    BYTE PTR [eax+0x16a],0x0
1000137e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001381:	c6 80 6b 01 00 00 00 	mov    BYTE PTR [eax+0x16b],0x0
10001388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000138b:	c6 80 6c 01 00 00 00 	mov    BYTE PTR [eax+0x16c],0x0
10001392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001395:	c6 80 6d 01 00 00 00 	mov    BYTE PTR [eax+0x16d],0x0
1000139c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000139f:	c6 80 6e 01 00 00 00 	mov    BYTE PTR [eax+0x16e],0x0
100013a6:	90                   	nop
100013a7:	c9                   	leave  
100013a8:	c3                   	ret    
100013a9:	90                   	nop

100013aa <PS2Keyboard::~PS2Keyboard()>:
100013aa:	55                   	push   ebp
100013ab:	89 e5                	mov    ebp,esp
100013ad:	83 ec 08             	sub    esp,0x8
100013b0:	ba 08 00 00 00       	mov    edx,0x8	100013b1: R_386_32	vtable for PS2Keyboard
100013b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013b8:	89 10                	mov    DWORD PTR [eax],edx
100013ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013bd:	83 ec 0c             	sub    esp,0xc
100013c0:	50                   	push   eax
100013c1:	e8 fc ff ff ff       	call   100013c2 <PS2Keyboard::~PS2Keyboard()+0x18>	100013c2: R_386_PC32	Keyboard::~Keyboard()
100013c6:	83 c4 10             	add    esp,0x10
100013c9:	90                   	nop
100013ca:	c9                   	leave  
100013cb:	c3                   	ret    

100013cc <PS2Keyboard::~PS2Keyboard()>:
100013cc:	55                   	push   ebp
100013cd:	89 e5                	mov    ebp,esp
100013cf:	83 ec 08             	sub    esp,0x8
100013d2:	83 ec 0c             	sub    esp,0xc
100013d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013d8:	e8 fc ff ff ff       	call   100013d9 <PS2Keyboard::~PS2Keyboard()+0xd>	100013d9: R_386_PC32	PS2Keyboard::~PS2Keyboard()
100013dd:	83 c4 10             	add    esp,0x10
100013e0:	83 ec 08             	sub    esp,0x8
100013e3:	68 70 01 00 00       	push   0x170
100013e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100013eb:	e8 fc ff ff ff       	call   100013ec <PS2Keyboard::~PS2Keyboard()+0x20>	100013ec: R_386_PC32	operator delete(void*, unsigned long)
100013f0:	83 c4 10             	add    esp,0x10
100013f3:	c9                   	leave  
100013f4:	c3                   	ret    
100013f5:	90                   	nop

100013f6 <PS2Keyboard::setRepeatRate(int)>:
100013f6:	c3                   	ret    
100013f7:	90                   	nop

100013f8 <PS2Keyboard::setRepeatDelay(int)>:
100013f8:	c3                   	ret    
100013f9:	90                   	nop

100013fa <PS2Keyboard::sendKey(unsigned short, bool)>:
100013fa:	83 ec 1c             	sub    esp,0x1c
100013fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10001401:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10001405:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10001409:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
1000140d:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10001412:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10001419:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
1000141f:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10001424:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10001428:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
1000142c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001430:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10001435:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
1000143a:	83 c4 1c             	add    esp,0x1c
1000143d:	e9 fc ff ff ff       	jmp    1000143e <PS2Keyboard::sendKey(unsigned short, bool)+0x44>	1000143e: R_386_PC32	sendKeyboardToken(KeyboardToken)

10001442 <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)>:
10001442:	83 ec 1c             	sub    esp,0x1c
10001445:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10001449:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
1000144d:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10001451:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10001455:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
1000145a:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10001461:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10001467:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
1000146c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10001470:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10001474:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001478:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
1000147d:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10001482:	83 c4 1c             	add    esp,0x1c
10001485:	e9 fc ff ff ff       	jmp    10001486 <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)+0x44>	10001486: R_386_PC32	sendKeyboardToken(KeyboardToken)

1000148a <PS2Keyboard::updateKeyboardLEDs()>:
1000148a:	56                   	push   esi
1000148b:	53                   	push   ebx
1000148c:	83 ec 0c             	sub    esp,0xc
1000148f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10001493:	8a 96 69 01 00 00    	mov    dl,BYTE PTR [esi+0x169]
10001499:	0f b6 9e 6a 01 00 00 	movzx  ebx,BYTE PTR [esi+0x16a]
100014a0:	8d 04 1b             	lea    eax,[ebx+ebx*1]
100014a3:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
100014aa:	09 c3                	or     ebx,eax
100014ac:	0a 9e 6b 01 00 00    	or     bl,BYTE PTR [esi+0x16b]
100014b2:	68 ed 00 00 00       	push   0xed
100014b7:	0f b6 db             	movzx  ebx,bl
100014ba:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
100014c0:	e8 fc ff ff ff       	call   100014c1 <PS2Keyboard::updateKeyboardLEDs()+0x37>	100014c1: R_386_PC32	PS2Port::deviceWrite(unsigned char)
100014c5:	58                   	pop    eax
100014c6:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
100014cc:	e8 fc ff ff ff       	call   100014cd <PS2Keyboard::updateKeyboardLEDs()+0x43>	100014cd: R_386_PC32	PS2Port::deviceRead()
100014d1:	5a                   	pop    edx
100014d2:	59                   	pop    ecx
100014d3:	53                   	push   ebx
100014d4:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
100014da:	e8 fc ff ff ff       	call   100014db <PS2Keyboard::updateKeyboardLEDs()+0x51>	100014db: R_386_PC32	PS2Port::deviceWrite(unsigned char)
100014df:	8b 86 60 01 00 00    	mov    eax,DWORD PTR [esi+0x160]
100014e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100014e9:	83 c4 14             	add    esp,0x14
100014ec:	5b                   	pop    ebx
100014ed:	5e                   	pop    esi
100014ee:	e9 fc ff ff ff       	jmp    100014ef <PS2Keyboard::updateKeyboardLEDs()+0x65>	100014ef: R_386_PC32	PS2Port::deviceRead()

100014f3 <ps2KeyboardHandler(regs*, void*)>:
100014f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100014f7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100014fb:	eb 01                	jmp    100014fe <PS2Keyboard::handler()>
100014fd:	90                   	nop

100014fe <PS2Keyboard::handler()>:
100014fe:	57                   	push   edi
100014ff:	56                   	push   esi
10001500:	53                   	push   ebx
10001501:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10001505:	e4 60                	in     al,0x60
10001507:	80 be 6e 01 00 00 00 	cmp    BYTE PTR [esi+0x16e],0x0
1000150e:	74 29                	je     10001539 <PS2Keyboard::handler()+0x3b>
10001510:	88 c2                	mov    dl,al
10001512:	3c e0                	cmp    al,0xe0
10001514:	75 0c                	jne    10001522 <PS2Keyboard::handler()+0x24>
10001516:	c6 86 64 01 00 00 01 	mov    BYTE PTR [esi+0x164],0x1
1000151d:	e9 17 07 00 00       	jmp    10001c39 <PS2Keyboard::handler()+0x73b>
10001522:	84 c0                	test   al,al
10001524:	0f 89 52 01 00 00    	jns    1000167c <PS2Keyboard::handler()+0x17e>
1000152a:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10001531:	83 e2 7f             	and    edx,0x7f
10001534:	e9 43 01 00 00       	jmp    1000167c <PS2Keyboard::handler()+0x17e>
10001539:	3c e0                	cmp    al,0xe0
1000153b:	74 d9                	je     10001516 <PS2Keyboard::handler()+0x18>
1000153d:	3c f0                	cmp    al,0xf0
1000153f:	75 0c                	jne    1000154d <PS2Keyboard::handler()+0x4f>
10001541:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10001548:	e9 ec 06 00 00       	jmp    10001c39 <PS2Keyboard::handler()+0x73b>
1000154d:	3c 12                	cmp    al,0x12
1000154f:	75 1f                	jne    10001570 <PS2Keyboard::handler()+0x72>
10001551:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10001557:	83 f0 01             	xor    eax,0x1
1000155a:	88 86 67 01 00 00    	mov    BYTE PTR [esi+0x167],al
10001560:	52                   	push   edx
10001561:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001568:	50                   	push   eax
10001569:	68 04 01 00 00       	push   0x104
1000156e:	eb 23                	jmp    10001593 <PS2Keyboard::handler()+0x95>
10001570:	76 3d                	jbe    100015af <PS2Keyboard::handler()+0xb1>
10001572:	3c 14                	cmp    al,0x14
10001574:	75 62                	jne    100015d8 <PS2Keyboard::handler()+0xda>
10001576:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
1000157c:	83 f0 01             	xor    eax,0x1
1000157f:	88 86 68 01 00 00    	mov    BYTE PTR [esi+0x168],al
10001585:	51                   	push   ecx
10001586:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000158d:	50                   	push   eax
1000158e:	68 00 01 00 00       	push   0x100
10001593:	56                   	push   esi
10001594:	e8 fc ff ff ff       	call   10001595 <PS2Keyboard::handler()+0x97>	10001595: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
10001599:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
100015a0:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
100015a7:	83 c4 10             	add    esp,0x10
100015aa:	e9 8a 06 00 00       	jmp    10001c39 <PS2Keyboard::handler()+0x73b>
100015af:	3c 11                	cmp    al,0x11
100015b1:	75 2d                	jne    100015e0 <PS2Keyboard::handler()+0xe2>
100015b3:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
100015b9:	83 f0 01             	xor    eax,0x1
100015bc:	88 86 6d 01 00 00    	mov    BYTE PTR [esi+0x16d],al
100015c2:	88 86 6c 01 00 00    	mov    BYTE PTR [esi+0x16c],al
100015c8:	50                   	push   eax
100015c9:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100015d0:	50                   	push   eax
100015d1:	68 01 01 00 00       	push   0x101
100015d6:	eb bb                	jmp    10001593 <PS2Keyboard::handler()+0x95>
100015d8:	3c 59                	cmp    al,0x59
100015da:	0f 84 71 ff ff ff    	je     10001551 <PS2Keyboard::handler()+0x53>
100015e0:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
100015e7:	0f 84 b1 01 00 00    	je     1000179e <PS2Keyboard::handler()+0x2a0>
100015ed:	3c 6b                	cmp    al,0x6b
100015ef:	0f 84 f2 00 00 00    	je     100016e7 <PS2Keyboard::handler()+0x1e9>
100015f5:	77 50                	ja     10001647 <PS2Keyboard::handler()+0x149>
100015f7:	3c 51                	cmp    al,0x51
100015f9:	0f 84 37 01 00 00    	je     10001736 <PS2Keyboard::handler()+0x238>
100015ff:	77 23                	ja     10001624 <PS2Keyboard::handler()+0x126>
10001601:	3c 49                	cmp    al,0x49
10001603:	0f 84 0d 01 00 00    	je     10001716 <PS2Keyboard::handler()+0x218>
10001609:	3c 4a                	cmp    al,0x4a
1000160b:	0f 85 29 04 00 00    	jne    10001a3a <PS2Keyboard::handler()+0x53c>
10001611:	50                   	push   eax
10001612:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001619:	50                   	push   eax
1000161a:	68 1f 03 00 00       	push   0x31f
1000161f:	e9 c6 03 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
10001624:	3c 5a                	cmp    al,0x5a
10001626:	0f 84 5f 01 00 00    	je     1000178b <PS2Keyboard::handler()+0x28d>
1000162c:	3c 69                	cmp    al,0x69
1000162e:	0f 85 06 04 00 00    	jne    10001a3a <PS2Keyboard::handler()+0x53c>
10001634:	51                   	push   ecx
10001635:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000163c:	50                   	push   eax
1000163d:	68 01 02 00 00       	push   0x201
10001642:	e9 a3 03 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
10001647:	3c 71                	cmp    al,0x71
10001649:	0f 84 16 01 00 00    	je     10001765 <PS2Keyboard::handler()+0x267>
1000164f:	77 15                	ja     10001666 <PS2Keyboard::handler()+0x168>
10001651:	3c 6c                	cmp    al,0x6c
10001653:	0f 84 f0 00 00 00    	je     10001749 <PS2Keyboard::handler()+0x24b>
10001659:	3c 70                	cmp    al,0x70
1000165b:	0f 84 17 01 00 00    	je     10001778 <PS2Keyboard::handler()+0x27a>
10001661:	e9 d4 03 00 00       	jmp    10001a3a <PS2Keyboard::handler()+0x53c>
10001666:	3c 74                	cmp    al,0x74
10001668:	0f 84 8c 00 00 00    	je     100016fa <PS2Keyboard::handler()+0x1fc>
1000166e:	3c 75                	cmp    al,0x75
10001670:	74 4a                	je     100016bc <PS2Keyboard::handler()+0x1be>
10001672:	3c 72                	cmp    al,0x72
10001674:	0f 85 c0 03 00 00    	jne    10001a3a <PS2Keyboard::handler()+0x53c>
1000167a:	eb 58                	jmp    100016d4 <PS2Keyboard::handler()+0x1d6>
1000167c:	80 fa 2a             	cmp    dl,0x2a
1000167f:	0f 84 cc fe ff ff    	je     10001551 <PS2Keyboard::handler()+0x53>
10001685:	0f 87 97 05 00 00    	ja     10001c22 <PS2Keyboard::handler()+0x724>
1000168b:	80 fa 1d             	cmp    dl,0x1d
1000168e:	0f 84 e2 fe ff ff    	je     10001576 <PS2Keyboard::handler()+0x78>
10001694:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
1000169b:	0f 84 ce 03 00 00    	je     10001a6f <PS2Keyboard::handler()+0x571>
100016a1:	80 fa 4b             	cmp    dl,0x4b
100016a4:	74 41                	je     100016e7 <PS2Keyboard::handler()+0x1e9>
100016a6:	77 27                	ja     100016cf <PS2Keyboard::handler()+0x1d1>
100016a8:	80 fa 47             	cmp    dl,0x47
100016ab:	0f 84 98 00 00 00    	je     10001749 <PS2Keyboard::handler()+0x24b>
100016b1:	0f 86 96 03 00 00    	jbe    10001a4d <PS2Keyboard::handler()+0x54f>
100016b7:	80 fa 48             	cmp    dl,0x48
100016ba:	75 51                	jne    1000170d <PS2Keyboard::handler()+0x20f>
100016bc:	50                   	push   eax
100016bd:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100016c4:	50                   	push   eax
100016c5:	68 0b 02 00 00       	push   0x20b
100016ca:	e9 1b 03 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
100016cf:	80 fa 50             	cmp    dl,0x50
100016d2:	75 55                	jne    10001729 <PS2Keyboard::handler()+0x22b>
100016d4:	50                   	push   eax
100016d5:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100016dc:	50                   	push   eax
100016dd:	68 0c 02 00 00       	push   0x20c
100016e2:	e9 03 03 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
100016e7:	50                   	push   eax
100016e8:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100016ef:	50                   	push   eax
100016f0:	68 0d 02 00 00       	push   0x20d
100016f5:	e9 f0 02 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
100016fa:	50                   	push   eax
100016fb:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001702:	50                   	push   eax
10001703:	68 0e 02 00 00       	push   0x20e
10001708:	e9 dd 02 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
1000170d:	80 fa 49             	cmp    dl,0x49
10001710:	0f 85 24 03 00 00    	jne    10001a3a <PS2Keyboard::handler()+0x53c>
10001716:	50                   	push   eax
10001717:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000171e:	50                   	push   eax
1000171f:	68 04 02 00 00       	push   0x204
10001724:	e9 c1 02 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
10001729:	0f 86 2f 03 00 00    	jbe    10001a5e <PS2Keyboard::handler()+0x560>
1000172f:	80 fa 52             	cmp    dl,0x52
10001732:	74 44                	je     10001778 <PS2Keyboard::handler()+0x27a>
10001734:	73 26                	jae    1000175c <PS2Keyboard::handler()+0x25e>
10001736:	57                   	push   edi
10001737:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000173e:	50                   	push   eax
1000173f:	68 05 02 00 00       	push   0x205
10001744:	e9 a1 02 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
10001749:	53                   	push   ebx
1000174a:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001751:	50                   	push   eax
10001752:	68 00 02 00 00       	push   0x200
10001757:	e9 8e 02 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
1000175c:	80 fa 53             	cmp    dl,0x53
1000175f:	0f 85 d5 02 00 00    	jne    10001a3a <PS2Keyboard::handler()+0x53c>
10001765:	52                   	push   edx
10001766:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000176d:	50                   	push   eax
1000176e:	68 03 02 00 00       	push   0x203
10001773:	e9 72 02 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
10001778:	50                   	push   eax
10001779:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001780:	50                   	push   eax
10001781:	68 02 02 00 00       	push   0x202
10001786:	e9 5f 02 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
1000178b:	50                   	push   eax
1000178c:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001793:	50                   	push   eax
10001794:	68 1d 03 00 00       	push   0x31d
10001799:	e9 4c 02 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
1000179e:	0f b6 96 66 01 00 00 	movzx  edx,BYTE PTR [esi+0x166]
100017a5:	3c 66                	cmp    al,0x66
100017a7:	75 09                	jne    100017b2 <PS2Keyboard::handler()+0x2b4>
100017a9:	50                   	push   eax
100017aa:	52                   	push   edx
100017ab:	6a 08                	push   0x8
100017ad:	e9 38 02 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
100017b2:	3c 0d                	cmp    al,0xd
100017b4:	75 09                	jne    100017bf <PS2Keyboard::handler()+0x2c1>
100017b6:	50                   	push   eax
100017b7:	52                   	push   edx
100017b8:	6a 09                	push   0x9
100017ba:	e9 2b 02 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
100017bf:	3c 58                	cmp    al,0x58
100017c1:	75 2a                	jne    100017ed <PS2Keyboard::handler()+0x2ef>
100017c3:	84 d2                	test   dl,dl
100017c5:	75 13                	jne    100017da <PS2Keyboard::handler()+0x2dc>
100017c7:	83 ec 0c             	sub    esp,0xc
100017ca:	80 b6 69 01 00 00 01 	xor    BYTE PTR [esi+0x169],0x1
100017d1:	56                   	push   esi
100017d2:	e8 fc ff ff ff       	call   100017d3 <PS2Keyboard::handler()+0x2d5>	100017d3: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
100017d7:	83 c4 10             	add    esp,0x10
100017da:	50                   	push   eax
100017db:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100017e2:	50                   	push   eax
100017e3:	68 80 02 00 00       	push   0x280
100017e8:	e9 fd 01 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
100017ed:	3c 77                	cmp    al,0x77
100017ef:	75 2a                	jne    1000181b <PS2Keyboard::handler()+0x31d>
100017f1:	84 d2                	test   dl,dl
100017f3:	75 13                	jne    10001808 <PS2Keyboard::handler()+0x30a>
100017f5:	83 ec 0c             	sub    esp,0xc
100017f8:	80 b6 6a 01 00 00 01 	xor    BYTE PTR [esi+0x16a],0x1
100017ff:	56                   	push   esi
10001800:	e8 fc ff ff ff       	call   10001801 <PS2Keyboard::handler()+0x303>	10001801: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
10001805:	83 c4 10             	add    esp,0x10
10001808:	50                   	push   eax
10001809:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001810:	50                   	push   eax
10001811:	68 81 02 00 00       	push   0x281
10001816:	e9 cf 01 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
1000181b:	3c 7e                	cmp    al,0x7e
1000181d:	75 2a                	jne    10001849 <PS2Keyboard::handler()+0x34b>
1000181f:	84 d2                	test   dl,dl
10001821:	75 13                	jne    10001836 <PS2Keyboard::handler()+0x338>
10001823:	83 ec 0c             	sub    esp,0xc
10001826:	80 b6 6b 01 00 00 01 	xor    BYTE PTR [esi+0x16b],0x1
1000182d:	56                   	push   esi
1000182e:	e8 fc ff ff ff       	call   1000182f <PS2Keyboard::handler()+0x331>	1000182f: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
10001833:	83 c4 10             	add    esp,0x10
10001836:	57                   	push   edi
10001837:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000183e:	50                   	push   eax
1000183f:	68 82 02 00 00       	push   0x282
10001844:	e9 a1 01 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
10001849:	3c 05                	cmp    al,0x5
1000184b:	75 0c                	jne    10001859 <PS2Keyboard::handler()+0x35b>
1000184d:	53                   	push   ebx
1000184e:	52                   	push   edx
1000184f:	68 00 03 00 00       	push   0x300
10001854:	e9 91 01 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
10001859:	3c 06                	cmp    al,0x6
1000185b:	75 0c                	jne    10001869 <PS2Keyboard::handler()+0x36b>
1000185d:	51                   	push   ecx
1000185e:	52                   	push   edx
1000185f:	68 01 03 00 00       	push   0x301
10001864:	e9 81 01 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
10001869:	3c 04                	cmp    al,0x4
1000186b:	75 0c                	jne    10001879 <PS2Keyboard::handler()+0x37b>
1000186d:	50                   	push   eax
1000186e:	52                   	push   edx
1000186f:	68 02 03 00 00       	push   0x302
10001874:	e9 71 01 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
10001879:	3c 0c                	cmp    al,0xc
1000187b:	75 0c                	jne    10001889 <PS2Keyboard::handler()+0x38b>
1000187d:	50                   	push   eax
1000187e:	52                   	push   edx
1000187f:	68 03 03 00 00       	push   0x303
10001884:	e9 61 01 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
10001889:	3c 03                	cmp    al,0x3
1000188b:	75 0c                	jne    10001899 <PS2Keyboard::handler()+0x39b>
1000188d:	50                   	push   eax
1000188e:	52                   	push   edx
1000188f:	68 04 03 00 00       	push   0x304
10001894:	e9 51 01 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
10001899:	3c 0b                	cmp    al,0xb
1000189b:	75 0c                	jne    100018a9 <PS2Keyboard::handler()+0x3ab>
1000189d:	50                   	push   eax
1000189e:	52                   	push   edx
1000189f:	68 05 03 00 00       	push   0x305
100018a4:	e9 41 01 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
100018a9:	3c 02                	cmp    al,0x2
100018ab:	74 04                	je     100018b1 <PS2Keyboard::handler()+0x3b3>
100018ad:	3c 83                	cmp    al,0x83
100018af:	75 0c                	jne    100018bd <PS2Keyboard::handler()+0x3bf>
100018b1:	50                   	push   eax
100018b2:	52                   	push   edx
100018b3:	68 06 03 00 00       	push   0x306
100018b8:	e9 2d 01 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
100018bd:	3c 0a                	cmp    al,0xa
100018bf:	75 0c                	jne    100018cd <PS2Keyboard::handler()+0x3cf>
100018c1:	50                   	push   eax
100018c2:	52                   	push   edx
100018c3:	68 07 03 00 00       	push   0x307
100018c8:	e9 1d 01 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
100018cd:	3c 01                	cmp    al,0x1
100018cf:	75 0c                	jne    100018dd <PS2Keyboard::handler()+0x3df>
100018d1:	57                   	push   edi
100018d2:	52                   	push   edx
100018d3:	68 08 03 00 00       	push   0x308
100018d8:	e9 0d 01 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
100018dd:	3c 09                	cmp    al,0x9
100018df:	75 0c                	jne    100018ed <PS2Keyboard::handler()+0x3ef>
100018e1:	53                   	push   ebx
100018e2:	52                   	push   edx
100018e3:	68 09 03 00 00       	push   0x309
100018e8:	e9 fd 00 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
100018ed:	3c 78                	cmp    al,0x78
100018ef:	75 0c                	jne    100018fd <PS2Keyboard::handler()+0x3ff>
100018f1:	51                   	push   ecx
100018f2:	52                   	push   edx
100018f3:	68 0a 03 00 00       	push   0x30a
100018f8:	e9 ed 00 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
100018fd:	3c 07                	cmp    al,0x7
100018ff:	75 0c                	jne    1000190d <PS2Keyboard::handler()+0x40f>
10001901:	50                   	push   eax
10001902:	52                   	push   edx
10001903:	68 0b 03 00 00       	push   0x30b
10001908:	e9 dd 00 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
1000190d:	3c 5a                	cmp    al,0x5a
1000190f:	75 09                	jne    1000191a <PS2Keyboard::handler()+0x41c>
10001911:	50                   	push   eax
10001912:	52                   	push   edx
10001913:	6a 0a                	push   0xa
10001915:	e9 d0 00 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
1000191a:	3c 76                	cmp    al,0x76
1000191c:	75 0c                	jne    1000192a <PS2Keyboard::handler()+0x42c>
1000191e:	50                   	push   eax
1000191f:	52                   	push   edx
10001920:	68 0a 02 00 00       	push   0x20a
10001925:	e9 c0 00 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
1000192a:	3c 70                	cmp    al,0x70
1000192c:	75 0c                	jne    1000193a <PS2Keyboard::handler()+0x43c>
1000192e:	50                   	push   eax
1000192f:	52                   	push   edx
10001930:	68 10 03 00 00       	push   0x310
10001935:	e9 b0 00 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
1000193a:	3c 69                	cmp    al,0x69
1000193c:	75 0c                	jne    1000194a <PS2Keyboard::handler()+0x44c>
1000193e:	50                   	push   eax
1000193f:	52                   	push   edx
10001940:	68 11 03 00 00       	push   0x311
10001945:	e9 a0 00 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
1000194a:	3c 72                	cmp    al,0x72
1000194c:	75 0c                	jne    1000195a <PS2Keyboard::handler()+0x45c>
1000194e:	50                   	push   eax
1000194f:	52                   	push   edx
10001950:	68 12 03 00 00       	push   0x312
10001955:	e9 90 00 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
1000195a:	3c 7a                	cmp    al,0x7a
1000195c:	75 0c                	jne    1000196a <PS2Keyboard::handler()+0x46c>
1000195e:	57                   	push   edi
1000195f:	52                   	push   edx
10001960:	68 13 03 00 00       	push   0x313
10001965:	e9 80 00 00 00       	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
1000196a:	3c 6b                	cmp    al,0x6b
1000196c:	75 09                	jne    10001977 <PS2Keyboard::handler()+0x479>
1000196e:	53                   	push   ebx
1000196f:	52                   	push   edx
10001970:	68 14 03 00 00       	push   0x314
10001975:	eb 73                	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
10001977:	3c 73                	cmp    al,0x73
10001979:	75 09                	jne    10001984 <PS2Keyboard::handler()+0x486>
1000197b:	51                   	push   ecx
1000197c:	52                   	push   edx
1000197d:	68 15 03 00 00       	push   0x315
10001982:	eb 66                	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
10001984:	3c 74                	cmp    al,0x74
10001986:	75 09                	jne    10001991 <PS2Keyboard::handler()+0x493>
10001988:	50                   	push   eax
10001989:	52                   	push   edx
1000198a:	68 16 03 00 00       	push   0x316
1000198f:	eb 59                	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
10001991:	3c 6c                	cmp    al,0x6c
10001993:	75 09                	jne    1000199e <PS2Keyboard::handler()+0x4a0>
10001995:	50                   	push   eax
10001996:	52                   	push   edx
10001997:	68 17 03 00 00       	push   0x317
1000199c:	eb 4c                	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
1000199e:	3c 75                	cmp    al,0x75
100019a0:	75 09                	jne    100019ab <PS2Keyboard::handler()+0x4ad>
100019a2:	50                   	push   eax
100019a3:	52                   	push   edx
100019a4:	68 18 03 00 00       	push   0x318
100019a9:	eb 3f                	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
100019ab:	3c 7d                	cmp    al,0x7d
100019ad:	75 09                	jne    100019b8 <PS2Keyboard::handler()+0x4ba>
100019af:	50                   	push   eax
100019b0:	52                   	push   edx
100019b1:	68 19 03 00 00       	push   0x319
100019b6:	eb 32                	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
100019b8:	3c 71                	cmp    al,0x71
100019ba:	75 09                	jne    100019c5 <PS2Keyboard::handler()+0x4c7>
100019bc:	50                   	push   eax
100019bd:	52                   	push   edx
100019be:	68 1a 03 00 00       	push   0x31a
100019c3:	eb 25                	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
100019c5:	3c 7b                	cmp    al,0x7b
100019c7:	75 09                	jne    100019d2 <PS2Keyboard::handler()+0x4d4>
100019c9:	50                   	push   eax
100019ca:	52                   	push   edx
100019cb:	68 1c 03 00 00       	push   0x31c
100019d0:	eb 18                	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
100019d2:	3c 79                	cmp    al,0x79
100019d4:	75 09                	jne    100019df <PS2Keyboard::handler()+0x4e1>
100019d6:	57                   	push   edi
100019d7:	52                   	push   edx
100019d8:	68 1b 03 00 00       	push   0x31b
100019dd:	eb 0b                	jmp    100019ea <PS2Keyboard::handler()+0x4ec>
100019df:	3c 7c                	cmp    al,0x7c
100019e1:	75 0f                	jne    100019f2 <PS2Keyboard::handler()+0x4f4>
100019e3:	53                   	push   ebx
100019e4:	52                   	push   edx
100019e5:	68 1e 03 00 00       	push   0x31e
100019ea:	56                   	push   esi
100019eb:	e8 fc ff ff ff       	call   100019ec <PS2Keyboard::handler()+0x4ee>	100019ec: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
100019f0:	eb 45                	jmp    10001a37 <PS2Keyboard::handler()+0x539>
100019f2:	0f b6 c0             	movzx  eax,al
100019f5:	8a 8e 69 01 00 00    	mov    cl,BYTE PTR [esi+0x169]
100019fb:	80 be 67 01 00 00 00 	cmp    BYTE PTR [esi+0x167],0x0
10001a02:	74 16                	je     10001a1a <PS2Keyboard::handler()+0x51c>
10001a04:	84 c9                	test   cl,cl
10001a06:	74 09                	je     10001a11 <PS2Keyboard::handler()+0x513>
10001a08:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10001a0b: R_386_32	PS2Keyboard::internalMapCapUpper
10001a0f:	eb 1d                	jmp    10001a2e <PS2Keyboard::handler()+0x530>
10001a11:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10001a14: R_386_32	PS2Keyboard::internalMapperUpper
10001a18:	eb 14                	jmp    10001a2e <PS2Keyboard::handler()+0x530>
10001a1a:	84 c9                	test   cl,cl
10001a1c:	74 09                	je     10001a27 <PS2Keyboard::handler()+0x529>
10001a1e:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10001a21: R_386_32	PS2Keyboard::internalMapCapLower
10001a25:	eb 07                	jmp    10001a2e <PS2Keyboard::handler()+0x530>
10001a27:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10001a2a: R_386_32	PS2Keyboard::internalMapperLower
10001a2e:	51                   	push   ecx
10001a2f:	52                   	push   edx
10001a30:	50                   	push   eax
10001a31:	56                   	push   esi
10001a32:	e8 fc ff ff ff       	call   10001a33 <PS2Keyboard::handler()+0x535>	10001a33: R_386_PC32	PS2Keyboard::sendKey(unsigned short, bool)
10001a37:	83 c4 10             	add    esp,0x10
10001a3a:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10001a41:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10001a48:	e9 ec 01 00 00       	jmp    10001c39 <PS2Keyboard::handler()+0x73b>
10001a4d:	80 fa 1c             	cmp    dl,0x1c
10001a50:	0f 84 35 fd ff ff    	je     1000178b <PS2Keyboard::handler()+0x28d>
10001a56:	80 fa 35             	cmp    dl,0x35
10001a59:	e9 ad fb ff ff       	jmp    1000160b <PS2Keyboard::handler()+0x10d>
10001a5e:	80 fa 4d             	cmp    dl,0x4d
10001a61:	0f 84 93 fc ff ff    	je     100016fa <PS2Keyboard::handler()+0x1fc>
10001a67:	80 fa 4f             	cmp    dl,0x4f
10001a6a:	e9 bf fb ff ff       	jmp    1000162e <PS2Keyboard::handler()+0x130>
10001a6f:	0f b6 8e 66 01 00 00 	movzx  ecx,BYTE PTR [esi+0x166]
10001a76:	80 fa 0e             	cmp    dl,0xe
10001a79:	75 07                	jne    10001a82 <PS2Keyboard::handler()+0x584>
10001a7b:	50                   	push   eax
10001a7c:	51                   	push   ecx
10001a7d:	e9 29 fd ff ff       	jmp    100017ab <PS2Keyboard::handler()+0x2ad>
10001a82:	80 fa 0f             	cmp    dl,0xf
10001a85:	75 07                	jne    10001a8e <PS2Keyboard::handler()+0x590>
10001a87:	57                   	push   edi
10001a88:	51                   	push   ecx
10001a89:	e9 2a fd ff ff       	jmp    100017b8 <PS2Keyboard::handler()+0x2ba>
10001a8e:	80 fa 3a             	cmp    dl,0x3a
10001a91:	75 07                	jne    10001a9a <PS2Keyboard::handler()+0x59c>
10001a93:	84 c9                	test   cl,cl
10001a95:	e9 2b fd ff ff       	jmp    100017c5 <PS2Keyboard::handler()+0x2c7>
10001a9a:	80 fa 45             	cmp    dl,0x45
10001a9d:	75 07                	jne    10001aa6 <PS2Keyboard::handler()+0x5a8>
10001a9f:	84 c9                	test   cl,cl
10001aa1:	e9 4d fd ff ff       	jmp    100017f3 <PS2Keyboard::handler()+0x2f5>
10001aa6:	80 fa 46             	cmp    dl,0x46
10001aa9:	75 07                	jne    10001ab2 <PS2Keyboard::handler()+0x5b4>
10001aab:	84 c9                	test   cl,cl
10001aad:	e9 6f fd ff ff       	jmp    10001821 <PS2Keyboard::handler()+0x323>
10001ab2:	80 fa 3b             	cmp    dl,0x3b
10001ab5:	75 07                	jne    10001abe <PS2Keyboard::handler()+0x5c0>
10001ab7:	53                   	push   ebx
10001ab8:	51                   	push   ecx
10001ab9:	e9 91 fd ff ff       	jmp    1000184f <PS2Keyboard::handler()+0x351>
10001abe:	80 fa 3c             	cmp    dl,0x3c
10001ac1:	75 07                	jne    10001aca <PS2Keyboard::handler()+0x5cc>
10001ac3:	52                   	push   edx
10001ac4:	51                   	push   ecx
10001ac5:	e9 95 fd ff ff       	jmp    1000185f <PS2Keyboard::handler()+0x361>
10001aca:	80 fa 3d             	cmp    dl,0x3d
10001acd:	75 07                	jne    10001ad6 <PS2Keyboard::handler()+0x5d8>
10001acf:	50                   	push   eax
10001ad0:	51                   	push   ecx
10001ad1:	e9 99 fd ff ff       	jmp    1000186f <PS2Keyboard::handler()+0x371>
10001ad6:	80 fa 3e             	cmp    dl,0x3e
10001ad9:	75 07                	jne    10001ae2 <PS2Keyboard::handler()+0x5e4>
10001adb:	50                   	push   eax
10001adc:	51                   	push   ecx
10001add:	e9 9d fd ff ff       	jmp    1000187f <PS2Keyboard::handler()+0x381>
10001ae2:	80 fa 3f             	cmp    dl,0x3f
10001ae5:	75 07                	jne    10001aee <PS2Keyboard::handler()+0x5f0>
10001ae7:	50                   	push   eax
10001ae8:	51                   	push   ecx
10001ae9:	e9 a1 fd ff ff       	jmp    1000188f <PS2Keyboard::handler()+0x391>
10001aee:	80 fa 40             	cmp    dl,0x40
10001af1:	75 07                	jne    10001afa <PS2Keyboard::handler()+0x5fc>
10001af3:	50                   	push   eax
10001af4:	51                   	push   ecx
10001af5:	e9 a5 fd ff ff       	jmp    1000189f <PS2Keyboard::handler()+0x3a1>
10001afa:	80 fa 41             	cmp    dl,0x41
10001afd:	75 07                	jne    10001b06 <PS2Keyboard::handler()+0x608>
10001aff:	50                   	push   eax
10001b00:	51                   	push   ecx
10001b01:	e9 ad fd ff ff       	jmp    100018b3 <PS2Keyboard::handler()+0x3b5>
10001b06:	80 fa 42             	cmp    dl,0x42
10001b09:	75 07                	jne    10001b12 <PS2Keyboard::handler()+0x614>
10001b0b:	50                   	push   eax
10001b0c:	51                   	push   ecx
10001b0d:	e9 b1 fd ff ff       	jmp    100018c3 <PS2Keyboard::handler()+0x3c5>
10001b12:	80 fa 43             	cmp    dl,0x43
10001b15:	75 07                	jne    10001b1e <PS2Keyboard::handler()+0x620>
10001b17:	57                   	push   edi
10001b18:	51                   	push   ecx
10001b19:	e9 b5 fd ff ff       	jmp    100018d3 <PS2Keyboard::handler()+0x3d5>
10001b1e:	80 fa 44             	cmp    dl,0x44
10001b21:	75 07                	jne    10001b2a <PS2Keyboard::handler()+0x62c>
10001b23:	53                   	push   ebx
10001b24:	51                   	push   ecx
10001b25:	e9 b9 fd ff ff       	jmp    100018e3 <PS2Keyboard::handler()+0x3e5>
10001b2a:	84 d2                	test   dl,dl
10001b2c:	75 07                	jne    10001b35 <PS2Keyboard::handler()+0x637>
10001b2e:	52                   	push   edx
10001b2f:	51                   	push   ecx
10001b30:	e9 be fd ff ff       	jmp    100018f3 <PS2Keyboard::handler()+0x3f5>
10001b35:	80 fa 1c             	cmp    dl,0x1c
10001b38:	75 07                	jne    10001b41 <PS2Keyboard::handler()+0x643>
10001b3a:	50                   	push   eax
10001b3b:	51                   	push   ecx
10001b3c:	e9 d2 fd ff ff       	jmp    10001913 <PS2Keyboard::handler()+0x415>
10001b41:	80 fa 01             	cmp    dl,0x1
10001b44:	75 07                	jne    10001b4d <PS2Keyboard::handler()+0x64f>
10001b46:	50                   	push   eax
10001b47:	51                   	push   ecx
10001b48:	e9 d3 fd ff ff       	jmp    10001920 <PS2Keyboard::handler()+0x422>
10001b4d:	80 fa 52             	cmp    dl,0x52
10001b50:	75 07                	jne    10001b59 <PS2Keyboard::handler()+0x65b>
10001b52:	50                   	push   eax
10001b53:	51                   	push   ecx
10001b54:	e9 d7 fd ff ff       	jmp    10001930 <PS2Keyboard::handler()+0x432>
10001b59:	80 fa 4f             	cmp    dl,0x4f
10001b5c:	75 07                	jne    10001b65 <PS2Keyboard::handler()+0x667>
10001b5e:	50                   	push   eax
10001b5f:	51                   	push   ecx
10001b60:	e9 db fd ff ff       	jmp    10001940 <PS2Keyboard::handler()+0x442>
10001b65:	80 fa 50             	cmp    dl,0x50
10001b68:	75 07                	jne    10001b71 <PS2Keyboard::handler()+0x673>
10001b6a:	50                   	push   eax
10001b6b:	51                   	push   ecx
10001b6c:	e9 df fd ff ff       	jmp    10001950 <PS2Keyboard::handler()+0x452>
10001b71:	80 fa 51             	cmp    dl,0x51
10001b74:	75 07                	jne    10001b7d <PS2Keyboard::handler()+0x67f>
10001b76:	50                   	push   eax
10001b77:	51                   	push   ecx
10001b78:	e9 e3 fd ff ff       	jmp    10001960 <PS2Keyboard::handler()+0x462>
10001b7d:	80 fa 4b             	cmp    dl,0x4b
10001b80:	75 07                	jne    10001b89 <PS2Keyboard::handler()+0x68b>
10001b82:	57                   	push   edi
10001b83:	51                   	push   ecx
10001b84:	e9 e7 fd ff ff       	jmp    10001970 <PS2Keyboard::handler()+0x472>
10001b89:	80 fa 4c             	cmp    dl,0x4c
10001b8c:	75 07                	jne    10001b95 <PS2Keyboard::handler()+0x697>
10001b8e:	53                   	push   ebx
10001b8f:	51                   	push   ecx
10001b90:	e9 e8 fd ff ff       	jmp    1000197d <PS2Keyboard::handler()+0x47f>
10001b95:	80 fa 4d             	cmp    dl,0x4d
10001b98:	75 07                	jne    10001ba1 <PS2Keyboard::handler()+0x6a3>
10001b9a:	52                   	push   edx
10001b9b:	51                   	push   ecx
10001b9c:	e9 e9 fd ff ff       	jmp    1000198a <PS2Keyboard::handler()+0x48c>
10001ba1:	80 fa 47             	cmp    dl,0x47
10001ba4:	75 07                	jne    10001bad <PS2Keyboard::handler()+0x6af>
10001ba6:	50                   	push   eax
10001ba7:	51                   	push   ecx
10001ba8:	e9 ea fd ff ff       	jmp    10001997 <PS2Keyboard::handler()+0x499>
10001bad:	80 fa 48             	cmp    dl,0x48
10001bb0:	75 07                	jne    10001bb9 <PS2Keyboard::handler()+0x6bb>
10001bb2:	50                   	push   eax
10001bb3:	51                   	push   ecx
10001bb4:	e9 eb fd ff ff       	jmp    100019a4 <PS2Keyboard::handler()+0x4a6>
10001bb9:	80 fa 49             	cmp    dl,0x49
10001bbc:	75 07                	jne    10001bc5 <PS2Keyboard::handler()+0x6c7>
10001bbe:	50                   	push   eax
10001bbf:	51                   	push   ecx
10001bc0:	e9 ec fd ff ff       	jmp    100019b1 <PS2Keyboard::handler()+0x4b3>
10001bc5:	80 fa 53             	cmp    dl,0x53
10001bc8:	75 07                	jne    10001bd1 <PS2Keyboard::handler()+0x6d3>
10001bca:	50                   	push   eax
10001bcb:	51                   	push   ecx
10001bcc:	e9 ed fd ff ff       	jmp    100019be <PS2Keyboard::handler()+0x4c0>
10001bd1:	80 fa 4a             	cmp    dl,0x4a
10001bd4:	75 07                	jne    10001bdd <PS2Keyboard::handler()+0x6df>
10001bd6:	50                   	push   eax
10001bd7:	51                   	push   ecx
10001bd8:	e9 ee fd ff ff       	jmp    100019cb <PS2Keyboard::handler()+0x4cd>
10001bdd:	80 fa 4e             	cmp    dl,0x4e
10001be0:	75 07                	jne    10001be9 <PS2Keyboard::handler()+0x6eb>
10001be2:	50                   	push   eax
10001be3:	51                   	push   ecx
10001be4:	e9 ef fd ff ff       	jmp    100019d8 <PS2Keyboard::handler()+0x4da>
10001be9:	80 fa 37             	cmp    dl,0x37
10001bec:	75 07                	jne    10001bf5 <PS2Keyboard::handler()+0x6f7>
10001bee:	57                   	push   edi
10001bef:	51                   	push   ecx
10001bf0:	e9 f0 fd ff ff       	jmp    100019e5 <PS2Keyboard::handler()+0x4e7>
10001bf5:	0f b6 be 67 01 00 00 	movzx  edi,BYTE PTR [esi+0x167]
10001bfc:	0f b6 86 69 01 00 00 	movzx  eax,BYTE PTR [esi+0x169]
10001c03:	c1 e7 07             	shl    edi,0x7
10001c06:	c1 e0 08             	shl    eax,0x8
10001c09:	8d bc 07 00 00 00 00 	lea    edi,[edi+eax*1+0x0]	10001c0c: R_386_32	PS2Keyboard::internalMapperLowerBad
10001c10:	88 d0                	mov    al,dl
10001c12:	89 fb                	mov    ebx,edi
10001c14:	d7                   	xlat   BYTE PTR ds:[ebx]
10001c15:	88 c2                	mov    dl,al
10001c17:	0f b6 d2             	movzx  edx,dl
10001c1a:	53                   	push   ebx
10001c1b:	51                   	push   ecx
10001c1c:	52                   	push   edx
10001c1d:	e9 0f fe ff ff       	jmp    10001a31 <PS2Keyboard::handler()+0x533>
10001c22:	80 fa 36             	cmp    dl,0x36
10001c25:	0f 84 26 f9 ff ff    	je     10001551 <PS2Keyboard::handler()+0x53>
10001c2b:	80 fa 38             	cmp    dl,0x38
10001c2e:	0f 84 7f f9 ff ff    	je     100015b3 <PS2Keyboard::handler()+0xb5>
10001c34:	e9 5b fa ff ff       	jmp    10001694 <PS2Keyboard::handler()+0x196>
10001c39:	5b                   	pop    ebx
10001c3a:	5e                   	pop    esi
10001c3b:	5f                   	pop    edi
10001c3c:	c3                   	ret    
10001c3d:	90                   	nop

10001c3e <PS2Keyboard::open(int, int, void*)>:
10001c3e:	53                   	push   ebx
10001c3f:	83 ec 14             	sub    esp,0x14
10001c42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001c46:	8b 83 c8 00 00 00    	mov    eax,DWORD PTR [ebx+0xc8]
10001c4c:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10001c52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001c56:	89 83 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],eax
10001c5c:	53                   	push   ebx
10001c5d:	6a 01                	push   0x1
10001c5f:	68 00 00 00 00       	push   0x0	10001c60: R_386_32	ps2KeyboardHandler(regs*, void*)
10001c64:	6a 01                	push   0x1
10001c66:	53                   	push   ebx
10001c67:	e8 fc ff ff ff       	call   10001c68 <PS2Keyboard::open(int, int, void*)+0x2a>	10001c68: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10001c6c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
10001c72:	a1 00 00 00 00       	mov    eax,ds:0x0	10001c73: R_386_32	sysBootSettings
10001c77:	c1 e8 02             	shr    eax,0x2
10001c7a:	83 f0 01             	xor    eax,0x1
10001c7d:	83 e0 01             	and    eax,0x1
10001c80:	88 83 6e 01 00 00    	mov    BYTE PTR [ebx+0x16e],al
10001c86:	31 c0                	xor    eax,eax
10001c88:	83 c4 28             	add    esp,0x28
10001c8b:	5b                   	pop    ebx
10001c8c:	c3                   	ret    
10001c8d:	90                   	nop

10001c8e <PS2Keyboard::close(int, int, void*)>:
10001c8e:	83 c8 ff             	or     eax,0xffffffff
10001c91:	c3                   	ret    

10001c92 <PS2Mouse::PS2Mouse()>:
10001c92:	55                   	push   ebp
10001c93:	89 e5                	mov    ebp,esp
10001c95:	83 ec 08             	sub    esp,0x8
10001c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c9b:	83 ec 08             	sub    esp,0x8
10001c9e:	68 00 00 00 00       	push   0x0	10001c9f: R_386_32	ps2mousename
10001ca3:	50                   	push   eax
10001ca4:	e8 fc ff ff ff       	call   10001ca5 <PS2Mouse::PS2Mouse()+0x13>	10001ca5: R_386_PC32	Mouse::Mouse(char const*)
10001ca9:	83 c4 10             	add    esp,0x10
10001cac:	ba 08 00 00 00       	mov    edx,0x8	10001cad: R_386_32	vtable for PS2Mouse
10001cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cb4:	89 10                	mov    DWORD PTR [eax],edx
10001cb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cb9:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001cc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cc3:	c7 80 62 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x162],0x0
10001ccd:	90                   	nop
10001cce:	c9                   	leave  
10001ccf:	c3                   	ret    

10001cd0 <ps2MouseHandler(regs*, void*)>:
10001cd0:	55                   	push   ebp
10001cd1:	89 e5                	mov    ebp,esp
10001cd3:	83 ec 08             	sub    esp,0x8
10001cd6:	83 ec 0c             	sub    esp,0xc
10001cd9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001cdc:	e8 fc ff ff ff       	call   10001cdd <ps2MouseHandler(regs*, void*)+0xd>	10001cdd: R_386_PC32	PS2Mouse::handler()
10001ce1:	83 c4 10             	add    esp,0x10
10001ce4:	90                   	nop
10001ce5:	c9                   	leave  
10001ce6:	c3                   	ret    
10001ce7:	90                   	nop

10001ce8 <PS2Mouse::handler()>:
10001ce8:	55                   	push   ebp
10001ce9:	89 e5                	mov    ebp,esp
10001ceb:	83 ec 28             	sub    esp,0x28
10001cee:	66 c7 45 ea 64 00    	mov    WORD PTR [ebp-0x16],0x64
10001cf4:	66 8b 45 ea          	mov    ax,WORD PTR [ebp-0x16]
10001cf8:	89 c2                	mov    edx,eax
10001cfa:	ec                   	in     al,dx
10001cfb:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
10001cfe:	8a 45 e9             	mov    al,BYTE PTR [ebp-0x17]
10001d01:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10001d04:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10001d08:	83 e0 01             	and    eax,0x1
10001d0b:	85 c0                	test   eax,eax
10001d0d:	0f 84 8d 01 00 00    	je     10001ea0 <PS2Mouse::handler()+0x1b8>
10001d13:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10001d17:	83 e0 20             	and    eax,0x20
10001d1a:	85 c0                	test   eax,eax
10001d1c:	0f 84 81 01 00 00    	je     10001ea3 <PS2Mouse::handler()+0x1bb>
10001d22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d25:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10001d2b:	8d 50 01             	lea    edx,[eax+0x1]
10001d2e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10001d31:	88 91 61 01 00 00    	mov    BYTE PTR [ecx+0x161],dl
10001d37:	0f b6 c8             	movzx  ecx,al
10001d3a:	66 c7 45 e6 60 00    	mov    WORD PTR [ebp-0x1a],0x60
10001d40:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10001d44:	89 c2                	mov    edx,eax
10001d46:	ec                   	in     al,dx
10001d47:	88 45 e5             	mov    BYTE PTR [ebp-0x1b],al
10001d4a:	8a 55 e5             	mov    dl,BYTE PTR [ebp-0x1b]
10001d4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d50:	88 94 08 62 01 00 00 	mov    BYTE PTR [eax+ecx*1+0x162],dl
10001d57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d5a:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001d60:	0f b6 c0             	movzx  eax,al
10001d63:	83 e0 08             	and    eax,0x8
10001d66:	85 c0                	test   eax,eax
10001d68:	75 0f                	jne    10001d79 <PS2Mouse::handler()+0x91>
10001d6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d6d:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001d74:	e9 2b 01 00 00       	jmp    10001ea4 <PS2Mouse::handler()+0x1bc>
10001d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d7c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10001d82:	84 c0                	test   al,al
10001d84:	75 0d                	jne    10001d93 <PS2Mouse::handler()+0xab>
10001d86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d89:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10001d8f:	3c 02                	cmp    al,0x2
10001d91:	77 2f                	ja     10001dc2 <PS2Mouse::handler()+0xda>
10001d93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d96:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10001d9c:	3c 03                	cmp    al,0x3
10001d9e:	74 11                	je     10001db1 <PS2Mouse::handler()+0xc9>
10001da0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001da3:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10001da9:	3c 04                	cmp    al,0x4
10001dab:	0f 85 f3 00 00 00    	jne    10001ea4 <PS2Mouse::handler()+0x1bc>
10001db1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001db4:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10001dba:	3c 03                	cmp    al,0x3
10001dbc:	0f 86 e2 00 00 00    	jbe    10001ea4 <PS2Mouse::handler()+0x1bc>
10001dc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dc5:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001dcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dcf:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001dd5:	84 c0                	test   al,al
10001dd7:	78 13                	js     10001dec <PS2Mouse::handler()+0x104>
10001dd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ddc:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001de2:	0f b6 c0             	movzx  eax,al
10001de5:	83 e0 40             	and    eax,0x40
10001de8:	85 c0                	test   eax,eax
10001dea:	74 37                	je     10001e23 <PS2Mouse::handler()+0x13b>
10001dec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001def:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001df6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001df9:	c6 80 62 01 00 00 00 	mov    BYTE PTR [eax+0x162],0x0
10001e00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e03:	c6 80 63 01 00 00 00 	mov    BYTE PTR [eax+0x163],0x0
10001e0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e0d:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10001e14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e17:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10001e1e:	e9 81 00 00 00       	jmp    10001ea4 <PS2Mouse::handler()+0x1bc>
10001e23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e26:	8a 80 63 01 00 00    	mov    al,BYTE PTR [eax+0x163]
10001e2c:	0f b6 d0             	movzx  edx,al
10001e2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e32:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001e38:	0f b6 c0             	movzx  eax,al
10001e3b:	c1 e0 04             	shl    eax,0x4
10001e3e:	25 00 01 00 00       	and    eax,0x100
10001e43:	29 c2                	sub    edx,eax
10001e45:	89 d0                	mov    eax,edx
10001e47:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001e4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e4d:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001e53:	0f b6 c0             	movzx  eax,al
10001e56:	c1 e0 03             	shl    eax,0x3
10001e59:	25 00 01 00 00       	and    eax,0x100
10001e5e:	89 c2                	mov    edx,eax
10001e60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e63:	8a 80 64 01 00 00    	mov    al,BYTE PTR [eax+0x164]
10001e69:	0f b6 c0             	movzx  eax,al
10001e6c:	29 c2                	sub    edx,eax
10001e6e:	89 d0                	mov    eax,edx
10001e70:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001e73:	a1 00 00 00 00       	mov    eax,ds:0x0	10001e74: R_386_32	guiMouseHandler
10001e78:	85 c0                	test   eax,eax
10001e7a:	74 28                	je     10001ea4 <PS2Mouse::handler()+0x1bc>
10001e7c:	a1 00 00 00 00       	mov    eax,ds:0x0	10001e7d: R_386_32	guiMouseHandler
10001e81:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001e84:	8a 92 62 01 00 00    	mov    dl,BYTE PTR [edx+0x162]
10001e8a:	0f b6 d2             	movzx  edx,dl
10001e8d:	83 e2 01             	and    edx,0x1
10001e90:	6a 00                	push   0x0
10001e92:	52                   	push   edx
10001e93:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10001e96:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001e99:	ff d0                	call   eax
10001e9b:	83 c4 10             	add    esp,0x10
10001e9e:	eb 04                	jmp    10001ea4 <PS2Mouse::handler()+0x1bc>
10001ea0:	90                   	nop
10001ea1:	eb 01                	jmp    10001ea4 <PS2Mouse::handler()+0x1bc>
10001ea3:	90                   	nop
10001ea4:	c9                   	leave  
10001ea5:	c3                   	ret    

10001ea6 <PS2Mouse::open(int, int, void*)>:
10001ea6:	55                   	push   ebp
10001ea7:	89 e5                	mov    ebp,esp
10001ea9:	83 ec 08             	sub    esp,0x8
10001eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001eaf:	8b 90 c8 00 00 00    	mov    edx,DWORD PTR [eax+0xc8]
10001eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001eb8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10001ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ec1:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001ec4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10001eca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ecd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001ed3:	83 ec 08             	sub    esp,0x8
10001ed6:	68 f6 00 00 00       	push   0xf6
10001edb:	50                   	push   eax
10001edc:	e8 fc ff ff ff       	call   10001edd <PS2Mouse::open(int, int, void*)+0x37>	10001edd: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10001ee1:	83 c4 10             	add    esp,0x10
10001ee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ee7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001eed:	83 ec 0c             	sub    esp,0xc
10001ef0:	50                   	push   eax
10001ef1:	e8 fc ff ff ff       	call   10001ef2 <PS2Mouse::open(int, int, void*)+0x4c>	10001ef2: R_386_PC32	PS2Port::deviceRead()
10001ef6:	83 c4 10             	add    esp,0x10
10001ef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001efc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001f02:	83 ec 08             	sub    esp,0x8
10001f05:	68 f4 00 00 00       	push   0xf4
10001f0a:	50                   	push   eax
10001f0b:	e8 fc ff ff ff       	call   10001f0c <PS2Mouse::open(int, int, void*)+0x66>	10001f0c: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10001f10:	83 c4 10             	add    esp,0x10
10001f13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f16:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001f1c:	83 ec 0c             	sub    esp,0xc
10001f1f:	50                   	push   eax
10001f20:	e8 fc ff ff ff       	call   10001f21 <PS2Mouse::open(int, int, void*)+0x7b>	10001f21: R_386_PC32	PS2Port::deviceRead()
10001f25:	83 c4 10             	add    esp,0x10
10001f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f2b:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f35:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
10001f3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f3f:	83 ec 0c             	sub    esp,0xc
10001f42:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001f45:	6a 01                	push   0x1
10001f47:	68 00 00 00 00       	push   0x0	10001f48: R_386_32	ps2MouseHandler(regs*, void*)
10001f4c:	6a 0c                	push   0xc
10001f4e:	50                   	push   eax
10001f4f:	e8 fc ff ff ff       	call   10001f50 <PS2Mouse::open(int, int, void*)+0xaa>	10001f50: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10001f54:	83 c4 20             	add    esp,0x20
10001f57:	b8 00 00 00 00       	mov    eax,0x0
10001f5c:	c9                   	leave  
10001f5d:	c3                   	ret    

10001f5e <PS2Mouse::close(int, int, void*)>:
10001f5e:	b8 00 00 00 00       	mov    eax,0x0
10001f63:	c3                   	ret    

10001f64 <PS2Mouse::detect()>:
10001f64:	90                   	nop
10001f65:	c3                   	ret    

10001f66 <PS2Port::PS2Port()>:
10001f66:	55                   	push   ebp
10001f67:	89 e5                	mov    ebp,esp
10001f69:	83 ec 08             	sub    esp,0x8
10001f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f6f:	83 ec 08             	sub    esp,0x8
10001f72:	68 00 00 00 00       	push   0x0	10001f73: R_386_32	ps2portname
10001f77:	50                   	push   eax
10001f78:	e8 fc ff ff ff       	call   10001f79 <PS2Port::PS2Port()+0x13>	10001f79: R_386_PC32	Bus::Bus(char const*)
10001f7d:	83 c4 10             	add    esp,0x10
10001f80:	ba 08 00 00 00       	mov    edx,0x8	10001f81: R_386_32	vtable for PS2Port
10001f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f88:	89 10                	mov    DWORD PTR [eax],edx
10001f8a:	90                   	nop
10001f8b:	c9                   	leave  
10001f8c:	c3                   	ret    
10001f8d:	90                   	nop

10001f8e <PS2Port::open(int, int, void*)>:
10001f8e:	55                   	push   ebp
10001f8f:	89 e5                	mov    ebp,esp
10001f91:	83 ec 08             	sub    esp,0x8
10001f94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f97:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001f9a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10001fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fa3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001fa6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10001fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001faf:	8b 00                	mov    eax,DWORD PTR [eax]
10001fb1:	83 c0 18             	add    eax,0x18
10001fb4:	8b 00                	mov    eax,DWORD PTR [eax]
10001fb6:	83 ec 0c             	sub    esp,0xc
10001fb9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001fbc:	ff d0                	call   eax
10001fbe:	83 c4 10             	add    esp,0x10
10001fc1:	b8 00 00 00 00       	mov    eax,0x0
10001fc6:	c9                   	leave  
10001fc7:	c3                   	ret    

10001fc8 <PS2Port::close(int, int, void*)>:
10001fc8:	b8 00 00 00 00       	mov    eax,0x0
10001fcd:	c3                   	ret    

10001fce <PS2Port::detect()>:
10001fce:	55                   	push   ebp
10001fcf:	89 e5                	mov    ebp,esp
10001fd1:	53                   	push   ebx
10001fd2:	83 ec 14             	sub    esp,0x14
10001fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fd8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10001fde:	85 c0                	test   eax,eax
10001fe0:	75 55                	jne    10002037 <PS2Port::detect()+0x69>
10001fe2:	83 ec 0c             	sub    esp,0xc
10001fe5:	68 70 01 00 00       	push   0x170
10001fea:	e8 fc ff ff ff       	call   10001feb <PS2Port::detect()+0x1d>	10001feb: R_386_PC32	operator new(unsigned long)
10001fef:	83 c4 10             	add    esp,0x10
10001ff2:	89 c3                	mov    ebx,eax
10001ff4:	83 ec 0c             	sub    esp,0xc
10001ff7:	53                   	push   ebx
10001ff8:	e8 fc ff ff ff       	call   10001ff9 <PS2Port::detect()+0x2b>	10001ff9: R_386_PC32	PS2Keyboard::PS2Keyboard()
10001ffd:	83 c4 10             	add    esp,0x10
10002000:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10002003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002006:	83 ec 08             	sub    esp,0x8
10002009:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000200c:	50                   	push   eax
1000200d:	e8 fc ff ff ff       	call   1000200e <PS2Port::detect()+0x40>	1000200e: R_386_PC32	Device::addChild(Device*)
10002012:	83 c4 10             	add    esp,0x10
10002015:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002018:	8b 00                	mov    eax,DWORD PTR [eax]
1000201a:	83 c0 08             	add    eax,0x8
1000201d:	8b 00                	mov    eax,DWORD PTR [eax]
1000201f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10002022:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10002028:	52                   	push   edx
10002029:	6a 00                	push   0x0
1000202b:	6a 00                	push   0x0
1000202d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10002030:	ff d0                	call   eax
10002032:	83 c4 10             	add    esp,0x10
10002035:	eb 61                	jmp    10002098 <PS2Port::detect()+0xca>
10002037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000203a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10002040:	83 f8 01             	cmp    eax,0x1
10002043:	75 53                	jne    10002098 <PS2Port::detect()+0xca>
10002045:	83 ec 0c             	sub    esp,0xc
10002048:	68 68 01 00 00       	push   0x168
1000204d:	e8 fc ff ff ff       	call   1000204e <PS2Port::detect()+0x80>	1000204e: R_386_PC32	operator new(unsigned long)
10002052:	83 c4 10             	add    esp,0x10
10002055:	89 c3                	mov    ebx,eax
10002057:	83 ec 0c             	sub    esp,0xc
1000205a:	53                   	push   ebx
1000205b:	e8 fc ff ff ff       	call   1000205c <PS2Port::detect()+0x8e>	1000205c: R_386_PC32	PS2Mouse::PS2Mouse()
10002060:	83 c4 10             	add    esp,0x10
10002063:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
10002066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002069:	83 ec 08             	sub    esp,0x8
1000206c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000206f:	50                   	push   eax
10002070:	e8 fc ff ff ff       	call   10002071 <PS2Port::detect()+0xa3>	10002071: R_386_PC32	Device::addChild(Device*)
10002075:	83 c4 10             	add    esp,0x10
10002078:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000207b:	8b 00                	mov    eax,DWORD PTR [eax]
1000207d:	83 c0 08             	add    eax,0x8
10002080:	8b 00                	mov    eax,DWORD PTR [eax]
10002082:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10002085:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
1000208b:	52                   	push   edx
1000208c:	6a 00                	push   0x0
1000208e:	6a 01                	push   0x1
10002090:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10002093:	ff d0                	call   eax
10002095:	83 c4 10             	add    esp,0x10
10002098:	90                   	nop
10002099:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000209c:	c9                   	leave  
1000209d:	c3                   	ret    

1000209e <PS2Port::deviceWrite(unsigned char)>:
1000209e:	55                   	push   ebp
1000209f:	89 e5                	mov    ebp,esp
100020a1:	83 ec 28             	sub    esp,0x28
100020a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100020a7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
100020aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100020b3:	83 f8 01             	cmp    eax,0x1
100020b6:	75 1a                	jne    100020d2 <PS2Port::deviceWrite(unsigned char)+0x34>
100020b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020bb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100020c1:	83 ec 08             	sub    esp,0x8
100020c4:	68 d4 00 00 00       	push   0xd4
100020c9:	50                   	push   eax
100020ca:	e8 fc ff ff ff       	call   100020cb <PS2Port::deviceWrite(unsigned char)+0x2d>	100020cb: R_386_PC32	PS2::controllerWrite(unsigned char)
100020cf:	83 c4 10             	add    esp,0x10
100020d2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100020d9:	66 c7 45 f0 64 00    	mov    WORD PTR [ebp-0x10],0x64
100020df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100020e2:	89 c2                	mov    edx,eax
100020e4:	ec                   	in     al,dx
100020e5:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100020e8:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100020eb:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100020ee:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100020f2:	83 e0 02             	and    eax,0x2
100020f5:	85 c0                	test   eax,eax
100020f7:	74 29                	je     10002122 <PS2Port::deviceWrite(unsigned char)+0x84>
100020f9:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100020fd:	83 e0 40             	and    eax,0x40
10002100:	85 c0                	test   eax,eax
10002102:	75 22                	jne    10002126 <PS2Port::deviceWrite(unsigned char)+0x88>
10002104:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10002107:	84 c0                	test   al,al
10002109:	78 1b                	js     10002126 <PS2Port::deviceWrite(unsigned char)+0x88>
1000210b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000210e:	8d 50 01             	lea    edx,[eax+0x1]
10002111:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10002114:	3d 40 06 00 00       	cmp    eax,0x640
10002119:	0f 94 c0             	sete   al
1000211c:	84 c0                	test   al,al
1000211e:	75 05                	jne    10002125 <PS2Port::deviceWrite(unsigned char)+0x87>
10002120:	eb b7                	jmp    100020d9 <PS2Port::deviceWrite(unsigned char)+0x3b>
10002122:	90                   	nop
10002123:	eb 01                	jmp    10002126 <PS2Port::deviceWrite(unsigned char)+0x88>
10002125:	90                   	nop
10002126:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
1000212a:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10002130:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10002133:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10002136:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10002139:	ee                   	out    dx,al
1000213a:	b0 01                	mov    al,0x1
1000213c:	c9                   	leave  
1000213d:	c3                   	ret    

1000213e <PS2Port::deviceRead()>:
1000213e:	55                   	push   ebp
1000213f:	89 e5                	mov    ebp,esp
10002141:	83 ec 08             	sub    esp,0x8
10002144:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002147:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000214d:	83 ec 0c             	sub    esp,0xc
10002150:	50                   	push   eax
10002151:	e8 fc ff ff ff       	call   10002152 <PS2Port::deviceRead()+0x14>	10002152: R_386_PC32	PS2::controllerRead()
10002156:	83 c4 10             	add    esp,0x10
10002159:	c9                   	leave  
1000215a:	c3                   	ret    
1000215b:	90                   	nop

1000215c <sb16Demo(void*)>:
1000215c:	55                   	push   ebp
1000215d:	57                   	push   edi
1000215e:	56                   	push   esi
1000215f:	53                   	push   ebx
10002160:	83 ec 1c             	sub    esp,0x1c
10002163:	e8 fc ff ff ff       	call   10002164 <sb16Demo(void*)+0x8>	10002164: R_386_PC32	unlockScheduler()
10002168:	83 ec 0c             	sub    esp,0xc
1000216b:	6a 2c                	push   0x2c
1000216d:	e8 fc ff ff ff       	call   1000216e <sb16Demo(void*)+0x12>	1000216e: R_386_PC32	malloc
10002172:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
10002179:	89 c3                	mov    ebx,eax
1000217b:	6a 5a                	push   0x5a
1000217d:	6a 08                	push   0x8
1000217f:	68 40 1f 00 00       	push   0x1f40
10002184:	50                   	push   eax
10002185:	e8 fc ff ff ff       	call   10002186 <sb16Demo(void*)+0x2a>	10002186: R_386_PC32	SoundChannel::SoundChannel(int, int, int, int)
1000218a:	83 c4 14             	add    esp,0x14
1000218d:	68 14 01 00 00       	push   0x114
10002192:	e8 fc ff ff ff       	call   10002193 <sb16Demo(void*)+0x37>	10002193: R_386_PC32	malloc
10002197:	83 c4 0c             	add    esp,0xc
1000219a:	89 c6                	mov    esi,eax
1000219c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000219e: R_386_32	kernelProcess
100021a2:	68 00 00 00 00       	push   0x0	100021a3: R_386_32	egFile
100021a7:	50                   	push   eax
100021a8:	e8 fc ff ff ff       	call   100021a9 <sb16Demo(void*)+0x4d>	100021a9: R_386_PC32	File::File(char const*, Process*)
100021ad:	5f                   	pop    edi
100021ae:	5d                   	pop    ebp
100021af:	31 ed                	xor    ebp,ebp
100021b1:	6a 01                	push   0x1
100021b3:	56                   	push   esi
100021b4:	e8 fc ff ff ff       	call   100021b5 <sb16Demo(void*)+0x59>	100021b5: R_386_PC32	File::open(FileOpenMode)
100021b9:	83 c4 10             	add    esp,0x10
100021bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
100021c4:	8b 06                	mov    eax,DWORD PTR [esi]
100021c6:	83 ec 0c             	sub    esp,0xc
100021c9:	8d 54 24 18          	lea    edx,[esp+0x18]
100021cd:	52                   	push   edx
100021ce:	68 00 00 00 00       	push   0x0	100021cf: R_386_32	buf
100021d3:	6a 00                	push   0x0
100021d5:	68 00 10 00 00       	push   0x1000
100021da:	56                   	push   esi
100021db:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100021de:	83 c4 20             	add    esp,0x20
100021e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
100021e6:	74 04                	je     100021ec <sb16Demo(void*)+0x90>
100021e8:	85 c0                	test   eax,eax
100021ea:	74 15                	je     10002201 <sb16Demo(void*)+0xa5>
100021ec:	83 ec 0c             	sub    esp,0xc
100021ef:	68 90 37 00 10       	push   0x10003790	100021f0: R_386_32	.text
100021f4:	e8 fc ff ff ff       	call   100021f5 <sb16Demo(void*)+0x99>	100021f5: R_386_PC32	Dbg::kprintf(char const*, ...)
100021f9:	83 c4 2c             	add    esp,0x2c
100021fc:	5b                   	pop    ebx
100021fd:	5e                   	pop    esi
100021fe:	5f                   	pop    edi
100021ff:	5d                   	pop    ebp
10002200:	c3                   	ret    
10002201:	e8 fc ff ff ff       	call   10002202 <sb16Demo(void*)+0xa6>	10002202: R_386_PC32	lockScheduler()
10002206:	e8 fc ff ff ff       	call   10002207 <sb16Demo(void*)+0xab>	10002207: R_386_PC32	schedule()
1000220b:	e8 fc ff ff ff       	call   1000220c <sb16Demo(void*)+0xb0>	1000220c: R_386_PC32	unlockScheduler()
10002210:	83 ec 0c             	sub    esp,0xc
10002213:	53                   	push   ebx
10002214:	e8 fc ff ff ff       	call   10002215 <sb16Demo(void*)+0xb9>	10002215: R_386_PC32	SoundChannel::getBufferUsed()
10002219:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000221c:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
10002220:	89 c7                	mov    edi,eax
10002222:	e8 fc ff ff ff       	call   10002223 <sb16Demo(void*)+0xc7>	10002223: R_386_PC32	SoundChannel::getBufferSize()
10002227:	83 c4 10             	add    esp,0x10
1000222a:	39 c7                	cmp    edi,eax
1000222c:	7c 10                	jl     1000223e <sb16Demo(void*)+0xe2>
1000222e:	51                   	push   ecx
1000222f:	51                   	push   ecx
10002230:	6a 00                	push   0x0
10002232:	6a 01                	push   0x1
10002234:	e8 fc ff ff ff       	call   10002235 <sb16Demo(void*)+0xd9>	10002235: R_386_PC32	sleep(unsigned long long)
10002239:	83 c4 10             	add    esp,0x10
1000223c:	eb d2                	jmp    10002210 <sb16Demo(void*)+0xb4>
1000223e:	52                   	push   edx
1000223f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10002243:	68 00 00 00 00       	push   0x0	10002244: R_386_32	buf
10002248:	53                   	push   ebx
10002249:	e8 fc ff ff ff       	call   1000224a <sb16Demo(void*)+0xee>	1000224a: R_386_PC32	SoundChannel::buffer8(unsigned char*, int)
1000224e:	83 c4 10             	add    esp,0x10
10002251:	89 e8                	mov    eax,ebp
10002253:	84 c0                	test   al,al
10002255:	75 17                	jne    1000226e <sb16Demo(void*)+0x112>
10002257:	50                   	push   eax
10002258:	50                   	push   eax
10002259:	53                   	push   ebx
1000225a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
1000225e:	e8 fc ff ff ff       	call   1000225f <sb16Demo(void*)+0x103>	1000225f: R_386_PC32	SoundDevice::addChannel(SoundChannel*)
10002263:	89 1c 24             	mov    DWORD PTR [esp],ebx
10002266:	e8 fc ff ff ff       	call   10002267 <sb16Demo(void*)+0x10b>	10002267: R_386_PC32	SoundChannel::play()
1000226b:	83 c4 10             	add    esp,0x10
1000226e:	bd 01 00 00 00       	mov    ebp,0x1
10002273:	e9 44 ff ff ff       	jmp    100021bc <sb16Demo(void*)+0x60>

10002278 <SoundBlaster16::resetDSP()>:
10002278:	53                   	push   ebx
10002279:	b0 01                	mov    al,0x1
1000227b:	83 ec 10             	sub    esp,0x10
1000227e:	bb 26 02 00 00       	mov    ebx,0x226
10002283:	89 da                	mov    edx,ebx
10002285:	ee                   	out    dx,al
10002286:	6a 00                	push   0x0
10002288:	68 c0 c6 2d 00       	push   0x2dc6c0
1000228d:	e8 fc ff ff ff       	call   1000228e <SoundBlaster16::resetDSP()+0x16>	1000228e: R_386_PC32	nanoSleep(unsigned long long)
10002292:	31 c0                	xor    eax,eax
10002294:	89 da                	mov    edx,ebx
10002296:	ee                   	out    dx,al
10002297:	ba 2a 02 00 00       	mov    edx,0x22a
1000229c:	ec                   	in     al,dx
1000229d:	83 c4 10             	add    esp,0x10
100022a0:	3c aa                	cmp    al,0xaa
100022a2:	75 25                	jne    100022c9 <SoundBlaster16::resetDSP()+0x51>
100022a4:	b0 e1                	mov    al,0xe1
100022a6:	ba 2c 02 00 00       	mov    edx,0x22c
100022ab:	ee                   	out    dx,al
100022ac:	ba 2e 02 00 00       	mov    edx,0x22e
100022b1:	ec                   	in     al,dx
100022b2:	84 c0                	test   al,al
100022b4:	79 fb                	jns    100022b1 <SoundBlaster16::resetDSP()+0x39>
100022b6:	ba 2a 02 00 00       	mov    edx,0x22a
100022bb:	ec                   	in     al,dx
100022bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100022c0:	88 81 f8 01 00 00    	mov    BYTE PTR [ecx+0x1f8],al
100022c6:	ec                   	in     al,dx
100022c7:	eb 13                	jmp    100022dc <SoundBlaster16::resetDSP()+0x64>
100022c9:	0f b6 c0             	movzx  eax,al
100022cc:	51                   	push   ecx
100022cd:	51                   	push   ecx
100022ce:	50                   	push   eax
100022cf:	68 00 00 00 00       	push   0x0	100022d0: R_386_32	badVer
100022d4:	e8 fc ff ff ff       	call   100022d5 <SoundBlaster16::resetDSP()+0x5d>	100022d5: R_386_PC32	Dbg::kprintf(char const*, ...)
100022d9:	83 c4 10             	add    esp,0x10
100022dc:	83 c4 08             	add    esp,0x8
100022df:	5b                   	pop    ebx
100022e0:	c3                   	ret    
100022e1:	90                   	nop

100022e2 <SoundBlaster16::DSPOut(unsigned short, unsigned char)>:
100022e2:	53                   	push   ebx
100022e3:	ba 2c 02 00 00       	mov    edx,0x22c
100022e8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
100022ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100022f0:	ec                   	in     al,dx
100022f1:	84 c0                	test   al,al
100022f3:	78 fb                	js     100022f0 <SoundBlaster16::DSPOut(unsigned short, unsigned char)+0xe>
100022f5:	88 c8                	mov    al,cl
100022f7:	89 da                	mov    edx,ebx
100022f9:	ee                   	out    dx,al
100022fa:	5b                   	pop    ebx
100022fb:	c3                   	ret    

100022fc <SoundBlaster16::turnSpeakerOn(bool)>:
100022fc:	53                   	push   ebx
100022fd:	52                   	push   edx
100022fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10002302:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10002306:	80 fa 01             	cmp    dl,0x1
10002309:	89 14 24             	mov    DWORD PTR [esp],edx
1000230c:	19 c0                	sbb    eax,eax
1000230e:	83 e0 02             	and    eax,0x2
10002311:	05 d1 00 00 00       	add    eax,0xd1
10002316:	50                   	push   eax
10002317:	68 2c 02 00 00       	push   0x22c
1000231c:	53                   	push   ebx
1000231d:	e8 fc ff ff ff       	call   1000231e <SoundBlaster16::turnSpeakerOn(bool)+0x22>	1000231e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002322:	83 c4 0c             	add    esp,0xc
10002325:	8b 14 24             	mov    edx,DWORD PTR [esp]
10002328:	84 d2                	test   dl,dl
1000232a:	75 23                	jne    1000234f <SoundBlaster16::turnSpeakerOn(bool)+0x53>
1000232c:	68 d0 00 00 00       	push   0xd0
10002331:	68 2c 02 00 00       	push   0x22c
10002336:	53                   	push   ebx
10002337:	e8 fc ff ff ff       	call   10002338 <SoundBlaster16::turnSpeakerOn(bool)+0x3c>	10002338: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000233c:	68 d3 00 00 00       	push   0xd3
10002341:	68 2c 02 00 00       	push   0x22c
10002346:	53                   	push   ebx
10002347:	e8 fc ff ff ff       	call   10002348 <SoundBlaster16::turnSpeakerOn(bool)+0x4c>	10002348: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000234c:	83 c4 18             	add    esp,0x18
1000234f:	58                   	pop    eax
10002350:	5b                   	pop    ebx
10002351:	c3                   	ret    

10002352 <SoundBlaster16::SoundBlaster16()>:
10002352:	55                   	push   ebp
10002353:	89 e5                	mov    ebp,esp
10002355:	83 ec 08             	sub    esp,0x8
10002358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000235b:	83 ec 08             	sub    esp,0x8
1000235e:	68 00 00 00 00       	push   0x0	1000235f: R_386_32	sb16name
10002363:	50                   	push   eax
10002364:	e8 fc ff ff ff       	call   10002365 <SoundBlaster16::SoundBlaster16()+0x13>	10002365: R_386_PC32	SoundDevice::SoundDevice(char const*)
10002369:	83 c4 10             	add    esp,0x10
1000236c:	ba 08 00 00 00       	mov    edx,0x8	1000236d: R_386_32	vtable for SoundBlaster16
10002371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002374:	89 10                	mov    DWORD PTR [eax],edx
10002376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002379:	c7 80 e8 01 00 00 40 1f 00 00 	mov    DWORD PTR [eax+0x1e8],0x1f40
10002383:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002386:	c7 80 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x1ec],0x8
10002390:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002393:	c6 80 f0 01 00 00 01 	mov    BYTE PTR [eax+0x1f0],0x1
1000239a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000239d:	c6 80 f1 01 00 00 00 	mov    BYTE PTR [eax+0x1f1],0x0
100023a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023a7:	c6 80 f2 01 00 00 00 	mov    BYTE PTR [eax+0x1f2],0x0
100023ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023b1:	c6 80 f8 01 00 00 00 	mov    BYTE PTR [eax+0x1f8],0x0
100023b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023bb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100023c1:	0f b6 d0             	movzx  edx,al
100023c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023c7:	66 c7 44 90 04 20 02 	mov    WORD PTR [eax+edx*4+0x4],0x220
100023ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100023d7:	0f b6 d0             	movzx  edx,al
100023da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023dd:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
100023e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023e5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100023eb:	8d 50 01             	lea    edx,[eax+0x1]
100023ee:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100023f1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100023f7:	0f b6 d0             	movzx  edx,al
100023fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023fd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10002401:	83 e1 3f             	and    ecx,0x3f
10002404:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10002408:	a1 00 00 00 00       	mov    eax,ds:0x0	10002409: R_386_32	tempBuffer
1000240d:	85 c0                	test   eax,eax
1000240f:	75 2a                	jne    1000243b <SoundBlaster16::SoundBlaster16()+0xe9>
10002411:	83 ec 0c             	sub    esp,0xc
10002414:	68 00 80 00 00       	push   0x8000
10002419:	e8 fc ff ff ff       	call   1000241a <SoundBlaster16::SoundBlaster16()+0xc8>	1000241a: R_386_PC32	malloc
1000241e:	83 c4 10             	add    esp,0x10
10002421:	a3 00 00 00 00       	mov    ds:0x0,eax	10002422: R_386_32	tempBuffer
10002426:	83 ec 0c             	sub    esp,0xc
10002429:	68 00 80 00 00       	push   0x8000
1000242e:	e8 fc ff ff ff       	call   1000242f <SoundBlaster16::SoundBlaster16()+0xdd>	1000242f: R_386_PC32	malloc
10002433:	83 c4 10             	add    esp,0x10
10002436:	a3 00 00 00 00       	mov    ds:0x0,eax	10002437: R_386_32	outputBuffer
1000243b:	90                   	nop
1000243c:	c9                   	leave  
1000243d:	c3                   	ret    

1000243e <SoundBlaster16::handleIRQ()>:
1000243e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10002442:	ba 2e 02 00 00       	mov    edx,0x22e
10002447:	83 b9 e0 01 00 00 08 	cmp    DWORD PTR [ecx+0x1e0],0x8
1000244e:	74 17                	je     10002467 <SoundBlaster16::handleIRQ()+0x29>
10002450:	b0 82                	mov    al,0x82
10002452:	ba 24 02 00 00       	mov    edx,0x224
10002457:	ee                   	out    dx,al
10002458:	ba 25 02 00 00       	mov    edx,0x225
1000245d:	ec                   	in     al,dx
1000245e:	a8 02                	test   al,0x2
10002460:	74 06                	je     10002468 <SoundBlaster16::handleIRQ()+0x2a>
10002462:	ba 2f 02 00 00       	mov    edx,0x22f
10002467:	ec                   	in     al,dx
10002468:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
1000246c:	e9 c7 03 00 00       	jmp    10002838 <SoundBlaster16::onInterrupt()>

10002471 <sb16Handler(regs*, void*)>:
10002471:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10002475:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10002479:	eb c3                	jmp    1000243e <SoundBlaster16::handleIRQ()>
1000247b:	90                   	nop

1000247c <SoundBlaster16::getNumHwChannels()>:
1000247c:	b8 01 00 00 00       	mov    eax,0x1
10002481:	c3                   	ret    

10002482 <SoundBlaster16::beginPlayback(int, int)>:
10002482:	53                   	push   ebx
10002483:	50                   	push   eax
10002484:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10002488:	6a 01                	push   0x1
1000248a:	53                   	push   ebx
1000248b:	e8 fc ff ff ff       	call   1000248c <SoundBlaster16::beginPlayback(int, int)+0xa>	1000248c: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10002490:	80 bb f0 01 00 00 01 	cmp    BYTE PTR [ebx+0x1f0],0x1
10002497:	5a                   	pop    edx
10002498:	19 c0                	sbb    eax,eax
1000249a:	59                   	pop    ecx
1000249b:	83 c0 02             	add    eax,0x2
1000249e:	0f af 83 e8 01 00 00 	imul   eax,DWORD PTR [ebx+0x1e8]
100024a5:	89 c1                	mov    ecx,eax
100024a7:	b8 c0 bd f0 ff       	mov    eax,0xfff0bdc0
100024ac:	99                   	cdq    
100024ad:	f7 f9                	idiv   ecx
100024af:	89 04 24             	mov    DWORD PTR [esp],eax
100024b2:	6a 40                	push   0x40
100024b4:	68 2c 02 00 00       	push   0x22c
100024b9:	53                   	push   ebx
100024ba:	e8 fc ff ff ff       	call   100024bb <SoundBlaster16::beginPlayback(int, int)+0x39>	100024bb: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100024bf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
100024c4:	50                   	push   eax
100024c5:	68 2c 02 00 00       	push   0x22c
100024ca:	53                   	push   ebx
100024cb:	e8 fc ff ff ff       	call   100024cc <SoundBlaster16::beginPlayback(int, int)+0x4a>	100024cc: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100024d0:	68 c0 00 00 00       	push   0xc0
100024d5:	68 2c 02 00 00       	push   0x22c
100024da:	53                   	push   ebx
100024db:	e8 fc ff ff ff       	call   100024dc <SoundBlaster16::beginPlayback(int, int)+0x5a>	100024dc: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100024e0:	83 c4 24             	add    esp,0x24
100024e3:	0f b6 83 f0 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1f0]
100024ea:	0f b6 93 f1 01 00 00 	movzx  edx,BYTE PTR [ebx+0x1f1]
100024f1:	c1 e0 05             	shl    eax,0x5
100024f4:	c1 e2 04             	shl    edx,0x4
100024f7:	09 d0                	or     eax,edx
100024f9:	0f be c0             	movsx  eax,al
100024fc:	50                   	push   eax
100024fd:	68 2c 02 00 00       	push   0x22c
10002502:	53                   	push   ebx
10002503:	e8 fc ff ff ff       	call   10002504 <SoundBlaster16::beginPlayback(int, int)+0x82>	10002504: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002508:	68 ff 00 00 00       	push   0xff
1000250d:	68 2c 02 00 00       	push   0x22c
10002512:	53                   	push   ebx
10002513:	e8 fc ff ff ff       	call   10002514 <SoundBlaster16::beginPlayback(int, int)+0x92>	10002514: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002518:	6a 1f                	push   0x1f
1000251a:	68 2c 02 00 00       	push   0x22c
1000251f:	53                   	push   ebx
10002520:	e8 fc ff ff ff       	call   10002521 <SoundBlaster16::beginPlayback(int, int)+0x9f>	10002521: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002525:	83 c4 24             	add    esp,0x24
10002528:	6a 48                	push   0x48
1000252a:	68 2c 02 00 00       	push   0x22c
1000252f:	53                   	push   ebx
10002530:	e8 fc ff ff ff       	call   10002531 <SoundBlaster16::beginPlayback(int, int)+0xaf>	10002531: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002535:	68 ff 00 00 00       	push   0xff
1000253a:	68 2c 02 00 00       	push   0x22c
1000253f:	53                   	push   ebx
10002540:	e8 fc ff ff ff       	call   10002541 <SoundBlaster16::beginPlayback(int, int)+0xbf>	10002541: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002545:	6a 1f                	push   0x1f
10002547:	68 2c 02 00 00       	push   0x22c
1000254c:	53                   	push   ebx
1000254d:	e8 fc ff ff ff       	call   1000254e <SoundBlaster16::beginPlayback(int, int)+0xcc>	1000254e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002552:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
10002556:	c7 44 24 38 1c 00 00 00 	mov    DWORD PTR [esp+0x38],0x1c
1000255e:	c7 44 24 34 2c 02 00 00 	mov    DWORD PTR [esp+0x34],0x22c
10002566:	83 c4 28             	add    esp,0x28
10002569:	5b                   	pop    ebx
1000256a:	e9 73 fd ff ff       	jmp    100022e2 <SoundBlaster16::DSPOut(unsigned short, unsigned char)>
1000256f:	90                   	nop

10002570 <SoundBlaster16::stopPlayback()>:
10002570:	6a 00                	push   0x0
10002572:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10002576:	e8 fc ff ff ff       	call   10002577 <SoundBlaster16::stopPlayback()+0x7>	10002577: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
1000257b:	58                   	pop    eax
1000257c:	5a                   	pop    edx
1000257d:	c3                   	ret    

1000257e <SoundBlaster16::open(int, int, void*)>:
1000257e:	56                   	push   esi
1000257f:	be 25 02 00 00       	mov    esi,0x225
10002584:	53                   	push   ebx
10002585:	83 ec 14             	sub    esp,0x14
10002588:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
1000258c:	c7 83 e8 01 00 00 40 1f 00 00 	mov    DWORD PTR [ebx+0x1e8],0x1f40
10002596:	c7 83 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x1ec],0x8
100025a0:	66 c7 83 f0 01 00 00 00 01 	mov    WORD PTR [ebx+0x1f0],0x100
100025a9:	68 80 00 00 00       	push   0x80
100025ae:	68 24 02 00 00       	push   0x224
100025b3:	53                   	push   ebx
100025b4:	e8 fc ff ff ff       	call   100025b5 <SoundBlaster16::open(int, int, void*)+0x37>	100025b5: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100025b9:	89 f2                	mov    edx,esi
100025bb:	ec                   	in     al,dx
100025bc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
100025c0:	68 80 00 00 00       	push   0x80
100025c5:	68 24 02 00 00       	push   0x224
100025ca:	53                   	push   ebx
100025cb:	e8 fc ff ff ff       	call   100025cc <SoundBlaster16::open(int, int, void*)+0x4e>	100025cc: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100025d0:	83 c4 18             	add    esp,0x18
100025d3:	31 c0                	xor    eax,eax
100025d5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
100025da:	0f 95 c0             	setne  al
100025dd:	40                   	inc    eax
100025de:	50                   	push   eax
100025df:	68 25 02 00 00       	push   0x225
100025e4:	53                   	push   ebx
100025e5:	e8 fc ff ff ff       	call   100025e6 <SoundBlaster16::open(int, int, void*)+0x68>	100025e6: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100025ea:	68 80 00 00 00       	push   0x80
100025ef:	68 24 02 00 00       	push   0x224
100025f4:	53                   	push   ebx
100025f5:	e8 fc ff ff ff       	call   100025f6 <SoundBlaster16::open(int, int, void*)+0x78>	100025f6: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100025fa:	89 f2                	mov    edx,esi
100025fc:	ec                   	in     al,dx
100025fd:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
10002601:	83 c4 18             	add    esp,0x18
10002604:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
10002608:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
1000260c:	75 51                	jne    1000265f <SoundBlaster16::open(int, int, void*)+0xe1>
1000260e:	68 81 00 00 00       	push   0x81
10002613:	68 24 02 00 00       	push   0x224
10002618:	53                   	push   ebx
10002619:	e8 fc ff ff ff       	call   1000261a <SoundBlaster16::open(int, int, void*)+0x9c>	1000261a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000261e:	89 f2                	mov    edx,esi
10002620:	ec                   	in     al,dx
10002621:	83 e0 0a             	and    eax,0xa
10002624:	3c 01                	cmp    al,0x1
10002626:	19 c0                	sbb    eax,eax
10002628:	83 e0 62             	and    eax,0x62
1000262b:	40                   	inc    eax
1000262c:	89 04 24             	mov    DWORD PTR [esp],eax
1000262f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10002631: R_386_32	isaDMAController
10002635:	e8 fc ff ff ff       	call   10002636 <SoundBlaster16::open(int, int, void*)+0xb8>	10002636: R_386_PC32	DMA::tryLockChannel(int)
1000263a:	83 c4 10             	add    esp,0x10
1000263d:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
10002643:	85 c0                	test   eax,eax
10002645:	75 3a                	jne    10002681 <SoundBlaster16::open(int, int, void*)+0x103>
10002647:	83 ec 0c             	sub    esp,0xc
1000264a:	68 00 00 00 00       	push   0x0	1000264b: R_386_32	nodma
1000264f:	e8 fc ff ff ff       	call   10002650 <SoundBlaster16::open(int, int, void*)+0xd2>	10002650: R_386_PC32	Dbg::kprintf(char const*, ...)
10002654:	83 c4 10             	add    esp,0x10
10002657:	83 c8 ff             	or     eax,0xffffffff
1000265a:	e9 d3 01 00 00       	jmp    10002832 <SoundBlaster16::open(int, int, void*)+0x2b4>
1000265f:	56                   	push   esi
10002660:	56                   	push   esi
10002661:	6a 01                	push   0x1
10002663:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10002665: R_386_32	isaDMAController
10002669:	e8 fc ff ff ff       	call   1000266a <SoundBlaster16::open(int, int, void*)+0xec>	1000266a: R_386_PC32	DMA::tryLockChannel(int)
1000266e:	83 c4 10             	add    esp,0x10
10002671:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
10002677:	85 c0                	test   eax,eax
10002679:	75 06                	jne    10002681 <SoundBlaster16::open(int, int, void*)+0x103>
1000267b:	51                   	push   ecx
1000267c:	51                   	push   ecx
1000267d:	6a 03                	push   0x3
1000267f:	eb ae                	jmp    1000262f <SoundBlaster16::open(int, int, void*)+0xb1>
10002681:	50                   	push   eax
10002682:	50                   	push   eax
10002683:	68 00 40 00 00       	push   0x4000
10002688:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
1000268e:	e8 fc ff ff ff       	call   1000268f <SoundBlaster16::open(int, int, void*)+0x111>	1000268f: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
10002693:	58                   	pop    eax
10002694:	5a                   	pop    edx
10002695:	6a 59                	push   0x59
10002697:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
1000269d:	e8 fc ff ff ff       	call   1000269e <SoundBlaster16::open(int, int, void*)+0x120>	1000269e: R_386_PC32	DMAChannel::setMode(unsigned char)
100026a2:	59                   	pop    ecx
100026a3:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100026a9:	e8 fc ff ff ff       	call   100026aa <SoundBlaster16::open(int, int, void*)+0x12c>	100026aa: R_386_PC32	DMAChannel::start()
100026ae:	5e                   	pop    esi
100026af:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100026b5:	e8 fc ff ff ff       	call   100026b6 <SoundBlaster16::open(int, int, void*)+0x138>	100026b6: R_386_PC32	DMAChannel::getAddress()
100026ba:	89 83 f4 01 00 00    	mov    DWORD PTR [ebx+0x1f4],eax
100026c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
100026c3:	e8 fc ff ff ff       	call   100026c4 <SoundBlaster16::open(int, int, void*)+0x146>	100026c4: R_386_PC32	SoundBlaster16::resetDSP()
100026c8:	58                   	pop    eax
100026c9:	5a                   	pop    edx
100026ca:	6a 01                	push   0x1
100026cc:	53                   	push   ebx
100026cd:	e8 fc ff ff ff       	call   100026ce <SoundBlaster16::open(int, int, void*)+0x150>	100026ce: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
100026d2:	83 c4 10             	add    esp,0x10
100026d5:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
100026d9:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
100026dd:	75 6f                	jne    1000274e <SoundBlaster16::open(int, int, void*)+0x1d0>
100026df:	50                   	push   eax
100026e0:	68 80 00 00 00       	push   0x80
100026e5:	68 24 02 00 00       	push   0x224
100026ea:	53                   	push   ebx
100026eb:	e8 fc ff ff ff       	call   100026ec <SoundBlaster16::open(int, int, void*)+0x16e>	100026ec: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100026f0:	ba 25 02 00 00       	mov    edx,0x225
100026f5:	ec                   	in     al,dx
100026f6:	83 c4 10             	add    esp,0x10
100026f9:	3c 01                	cmp    al,0x1
100026fb:	75 0f                	jne    1000270c <SoundBlaster16::open(int, int, void*)+0x18e>
100026fd:	83 ec 0c             	sub    esp,0xc
10002700:	53                   	push   ebx
10002701:	6a 01                	push   0x1
10002703:	68 00 00 00 00       	push   0x0	10002704: R_386_32	sb16Handler(regs*, void*)
10002708:	6a 02                	push   0x2
1000270a:	eb 6f                	jmp    1000277b <SoundBlaster16::open(int, int, void*)+0x1fd>
1000270c:	3c 02                	cmp    al,0x2
1000270e:	75 06                	jne    10002716 <SoundBlaster16::open(int, int, void*)+0x198>
10002710:	83 ec 0c             	sub    esp,0xc
10002713:	53                   	push   ebx
10002714:	eb 5c                	jmp    10002772 <SoundBlaster16::open(int, int, void*)+0x1f4>
10002716:	3c 04                	cmp    al,0x4
10002718:	75 0f                	jne    10002729 <SoundBlaster16::open(int, int, void*)+0x1ab>
1000271a:	83 ec 0c             	sub    esp,0xc
1000271d:	53                   	push   ebx
1000271e:	6a 01                	push   0x1
10002720:	68 00 00 00 00       	push   0x0	10002721: R_386_32	sb16Handler(regs*, void*)
10002725:	6a 07                	push   0x7
10002727:	eb 52                	jmp    1000277b <SoundBlaster16::open(int, int, void*)+0x1fd>
10002729:	3c 08                	cmp    al,0x8
1000272b:	75 0f                	jne    1000273c <SoundBlaster16::open(int, int, void*)+0x1be>
1000272d:	83 ec 0c             	sub    esp,0xc
10002730:	53                   	push   ebx
10002731:	6a 01                	push   0x1
10002733:	68 00 00 00 00       	push   0x0	10002734: R_386_32	sb16Handler(regs*, void*)
10002738:	6a 0a                	push   0xa
1000273a:	eb 3f                	jmp    1000277b <SoundBlaster16::open(int, int, void*)+0x1fd>
1000273c:	83 ec 0c             	sub    esp,0xc
1000273f:	68 00 00 00 00       	push   0x0	10002740: R_386_32	noirq
10002744:	e8 fc ff ff ff       	call   10002745 <SoundBlaster16::open(int, int, void*)+0x1c7>	10002745: R_386_PC32	Krnl::panic(char const*)
10002749:	83 c4 10             	add    esp,0x10
1000274c:	eb 36                	jmp    10002784 <SoundBlaster16::open(int, int, void*)+0x206>
1000274e:	50                   	push   eax
1000274f:	68 80 00 00 00       	push   0x80
10002754:	68 24 02 00 00       	push   0x224
10002759:	53                   	push   ebx
1000275a:	e8 fc ff ff ff       	call   1000275b <SoundBlaster16::open(int, int, void*)+0x1dd>	1000275b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000275f:	83 c4 0c             	add    esp,0xc
10002762:	6a 02                	push   0x2
10002764:	68 25 02 00 00       	push   0x225
10002769:	53                   	push   ebx
1000276a:	e8 fc ff ff ff       	call   1000276b <SoundBlaster16::open(int, int, void*)+0x1ed>	1000276b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000276f:	89 1c 24             	mov    DWORD PTR [esp],ebx
10002772:	6a 01                	push   0x1
10002774:	68 00 00 00 00       	push   0x0	10002775: R_386_32	sb16Handler(regs*, void*)
10002779:	6a 05                	push   0x5
1000277b:	53                   	push   ebx
1000277c:	e8 fc ff ff ff       	call   1000277d <SoundBlaster16::open(int, int, void*)+0x1ff>	1000277d: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10002781:	83 c4 20             	add    esp,0x20
10002784:	56                   	push   esi
10002785:	68 81 00 00 00       	push   0x81
1000278a:	68 24 02 00 00       	push   0x224
1000278f:	53                   	push   ebx
10002790:	e8 fc ff ff ff       	call   10002791 <SoundBlaster16::open(int, int, void*)+0x213>	10002791: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002795:	ba 25 02 00 00       	mov    edx,0x225
1000279a:	ec                   	in     al,dx
1000279b:	83 c4 0c             	add    esp,0xc
1000279e:	89 c6                	mov    esi,eax
100027a0:	68 81 00 00 00       	push   0x81
100027a5:	68 24 02 00 00       	push   0x224
100027aa:	53                   	push   ebx
100027ab:	e8 fc ff ff ff       	call   100027ac <SoundBlaster16::open(int, int, void*)+0x22e>	100027ac: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100027b0:	58                   	pop    eax
100027b1:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100027b7:	e8 fc ff ff ff       	call   100027b8 <SoundBlaster16::open(int, int, void*)+0x23a>	100027b8: R_386_PC32	DMAChannel::getChannelNum()
100027bc:	83 c4 10             	add    esp,0x10
100027bf:	48                   	dec    eax
100027c0:	75 0c                	jne    100027ce <SoundBlaster16::open(int, int, void*)+0x250>
100027c2:	81 e6 f0 00 00 00    	and    esi,0xf0
100027c8:	51                   	push   ecx
100027c9:	83 ce 02             	or     esi,0x2
100027cc:	eb 20                	jmp    100027ee <SoundBlaster16::open(int, int, void*)+0x270>
100027ce:	83 ec 0c             	sub    esp,0xc
100027d1:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100027d7:	e8 fc ff ff ff       	call   100027d8 <SoundBlaster16::open(int, int, void*)+0x25a>	100027d8: R_386_PC32	DMAChannel::getChannelNum()
100027dc:	83 c4 10             	add    esp,0x10
100027df:	83 f8 03             	cmp    eax,0x3
100027e2:	75 18                	jne    100027fc <SoundBlaster16::open(int, int, void*)+0x27e>
100027e4:	81 e6 f0 00 00 00    	and    esi,0xf0
100027ea:	52                   	push   edx
100027eb:	83 ce 08             	or     esi,0x8
100027ee:	56                   	push   esi
100027ef:	68 25 02 00 00       	push   0x225
100027f4:	53                   	push   ebx
100027f5:	e8 fc ff ff ff       	call   100027f6 <SoundBlaster16::open(int, int, void*)+0x278>	100027f6: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100027fa:	eb 0d                	jmp    10002809 <SoundBlaster16::open(int, int, void*)+0x28b>
100027fc:	83 ec 0c             	sub    esp,0xc
100027ff:	68 00 00 00 00       	push   0x0	10002800: R_386_32	baddma
10002804:	e8 fc ff ff ff       	call   10002805 <SoundBlaster16::open(int, int, void*)+0x287>	10002805: R_386_PC32	Krnl::panic(char const*)
10002809:	83 c4 10             	add    esp,0x10
1000280c:	50                   	push   eax
1000280d:	6a 22                	push   0x22
1000280f:	68 24 02 00 00       	push   0x224
10002814:	53                   	push   ebx
10002815:	e8 fc ff ff ff       	call   10002816 <SoundBlaster16::open(int, int, void*)+0x298>	10002816: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000281a:	83 c4 0c             	add    esp,0xc
1000281d:	68 ff 00 00 00       	push   0xff
10002822:	68 24 02 00 00       	push   0x224
10002827:	53                   	push   ebx
10002828:	e8 fc ff ff ff       	call   10002829 <SoundBlaster16::open(int, int, void*)+0x2ab>	10002829: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000282d:	83 c4 10             	add    esp,0x10
10002830:	31 c0                	xor    eax,eax
10002832:	83 c4 14             	add    esp,0x14
10002835:	5b                   	pop    ebx
10002836:	5e                   	pop    esi
10002837:	c3                   	ret    

10002838 <SoundBlaster16::onInterrupt()>:
10002838:	56                   	push   esi
10002839:	53                   	push   ebx
1000283a:	53                   	push   ebx
1000283b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000283f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10002841: R_386_32	outputBuffer
10002845:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10002847: R_386_32	tempBuffer
1000284b:	68 00 20 00 00       	push   0x2000
10002850:	56                   	push   esi
10002851:	e8 fc ff ff ff       	call   10002852 <SoundBlaster16::onInterrupt()+0x1a>	10002852: R_386_PC32	SoundDevice::getAudio(int, float*, float*)
10002856:	83 c4 10             	add    esp,0x10
10002859:	89 c3                	mov    ebx,eax
1000285b:	80 3d bf 39 00 10 01 	cmp    BYTE PTR ds:0x100039bf,0x1	1000285d: R_386_32	.data
10002862:	53                   	push   ebx
10002863:	19 c0                	sbb    eax,eax
10002865:	25 00 20 00 00       	and    eax,0x2000
1000286a:	03 86 f4 01 00 00    	add    eax,DWORD PTR [esi+0x1f4]
10002870:	50                   	push   eax
10002871:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10002873: R_386_32	outputBuffer
10002877:	56                   	push   esi
10002878:	e8 fc ff ff ff       	call   10002879 <SoundBlaster16::onInterrupt()+0x41>	10002879: R_386_PC32	SoundDevice::floatTo8(float*, unsigned char*, int)
1000287d:	83 c4 10             	add    esp,0x10
10002880:	85 db                	test   ebx,ebx
10002882:	75 0c                	jne    10002890 <SoundBlaster16::onInterrupt()+0x58>
10002884:	51                   	push   ecx
10002885:	51                   	push   ecx
10002886:	6a 00                	push   0x0
10002888:	56                   	push   esi
10002889:	e8 fc ff ff ff       	call   1000288a <SoundBlaster16::onInterrupt()+0x52>	1000288a: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
1000288e:	eb 3e                	jmp    100028ce <SoundBlaster16::onInterrupt()+0x96>
10002890:	81 fb ff 1f 00 00    	cmp    ebx,0x1fff
10002896:	7f 39                	jg     100028d1 <SoundBlaster16::onInterrupt()+0x99>
10002898:	52                   	push   edx
10002899:	6a 24                	push   0x24
1000289b:	68 2c 02 00 00       	push   0x22c
100028a0:	56                   	push   esi
100028a1:	e8 fc ff ff ff       	call   100028a2 <SoundBlaster16::onInterrupt()+0x6a>	100028a2: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100028a6:	83 c4 0c             	add    esp,0xc
100028a9:	8d 43 ff             	lea    eax,[ebx-0x1]
100028ac:	4b                   	dec    ebx
100028ad:	0f b6 c0             	movzx  eax,al
100028b0:	0f b6 df             	movzx  ebx,bh
100028b3:	50                   	push   eax
100028b4:	68 2c 02 00 00       	push   0x22c
100028b9:	56                   	push   esi
100028ba:	e8 fc ff ff ff       	call   100028bb <SoundBlaster16::onInterrupt()+0x83>	100028bb: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100028bf:	83 c4 0c             	add    esp,0xc
100028c2:	53                   	push   ebx
100028c3:	68 2c 02 00 00       	push   0x22c
100028c8:	56                   	push   esi
100028c9:	e8 fc ff ff ff       	call   100028ca <SoundBlaster16::onInterrupt()+0x92>	100028ca: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100028ce:	83 c4 10             	add    esp,0x10
100028d1:	80 35 bf 39 00 10 01 	xor    BYTE PTR ds:0x100039bf,0x1	100028d3: R_386_32	.data
100028d8:	58                   	pop    eax
100028d9:	5b                   	pop    ebx
100028da:	5e                   	pop    esi
100028db:	c3                   	ret    

100028dc <SoundBlaster16::close(int, int, void*)>:
100028dc:	83 ec 0c             	sub    esp,0xc
100028df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100028e3:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
100028e9:	85 c0                	test   eax,eax
100028eb:	74 11                	je     100028fe <SoundBlaster16::close(int, int, void*)+0x22>
100028ed:	52                   	push   edx
100028ee:	52                   	push   edx
100028ef:	50                   	push   eax
100028f0:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100028f2: R_386_32	isaDMAController
100028f6:	e8 fc ff ff ff       	call   100028f7 <SoundBlaster16::close(int, int, void*)+0x1b>	100028f7: R_386_PC32	DMA::unlockChannel(DMAChannel*)
100028fb:	83 c4 10             	add    esp,0x10
100028fe:	31 c0                	xor    eax,eax
10002900:	83 c4 0c             	add    esp,0xc
10002903:	c3                   	ret    

10002904 <ISA::~ISA()>:
10002904:	55                   	push   ebp
10002905:	89 e5                	mov    ebp,esp
10002907:	83 ec 08             	sub    esp,0x8
1000290a:	ba 08 00 00 00       	mov    edx,0x8	1000290b: R_386_32	vtable for ISA
1000290f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002912:	89 10                	mov    DWORD PTR [eax],edx
10002914:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002917:	83 ec 0c             	sub    esp,0xc
1000291a:	50                   	push   eax
1000291b:	e8 fc ff ff ff       	call   1000291c <ISA::~ISA()+0x18>	1000291c: R_386_PC32	Bus::~Bus()
10002920:	83 c4 10             	add    esp,0x10
10002923:	90                   	nop
10002924:	c9                   	leave  
10002925:	c3                   	ret    

10002926 <ISA::~ISA()>:
10002926:	55                   	push   ebp
10002927:	89 e5                	mov    ebp,esp
10002929:	83 ec 08             	sub    esp,0x8
1000292c:	83 ec 0c             	sub    esp,0xc
1000292f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002932:	e8 fc ff ff ff       	call   10002933 <ISA::~ISA()+0xd>	10002933: R_386_PC32	ISA::~ISA()
10002937:	83 c4 10             	add    esp,0x10
1000293a:	83 ec 08             	sub    esp,0x8
1000293d:	68 58 01 00 00       	push   0x158
10002942:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002945:	e8 fc ff ff ff       	call   10002946 <ISA::~ISA()+0x20>	10002946: R_386_PC32	operator delete(void*, unsigned long)
1000294a:	83 c4 10             	add    esp,0x10
1000294d:	c9                   	leave  
1000294e:	c3                   	ret    
1000294f:	90                   	nop

10002950 <JoystickHost::JoystickHost()>:
10002950:	55                   	push   ebp
10002951:	89 e5                	mov    ebp,esp
10002953:	ba 08 00 00 00       	mov    edx,0x8	10002954: R_386_32	vtable for JoystickHost
10002958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000295b:	89 10                	mov    DWORD PTR [eax],edx
1000295d:	90                   	nop
1000295e:	5d                   	pop    ebp
1000295f:	c3                   	ret    

10002960 <DMA::~DMA()>:
10002960:	55                   	push   ebp
10002961:	89 e5                	mov    ebp,esp
10002963:	83 ec 08             	sub    esp,0x8
10002966:	ba 08 00 00 00       	mov    edx,0x8	10002967: R_386_32	vtable for DMA
1000296b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000296e:	89 10                	mov    DWORD PTR [eax],edx
10002970:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002973:	83 ec 0c             	sub    esp,0xc
10002976:	50                   	push   eax
10002977:	e8 fc ff ff ff       	call   10002978 <DMA::~DMA()+0x18>	10002978: R_386_PC32	Device::~Device()
1000297c:	83 c4 10             	add    esp,0x10
1000297f:	90                   	nop
10002980:	c9                   	leave  
10002981:	c3                   	ret    

10002982 <DMA::~DMA()>:
10002982:	55                   	push   ebp
10002983:	89 e5                	mov    ebp,esp
10002985:	83 ec 08             	sub    esp,0x8
10002988:	83 ec 0c             	sub    esp,0xc
1000298b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000298e:	e8 fc ff ff ff       	call   1000298f <DMA::~DMA()+0xd>	1000298f: R_386_PC32	DMA::~DMA()
10002993:	83 c4 10             	add    esp,0x10
10002996:	83 ec 08             	sub    esp,0x8
10002999:	68 5c 01 00 00       	push   0x15c
1000299e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100029a1:	e8 fc ff ff ff       	call   100029a2 <DMA::~DMA()+0x20>	100029a2: R_386_PC32	operator delete(void*, unsigned long)
100029a6:	83 c4 10             	add    esp,0x10
100029a9:	c9                   	leave  
100029aa:	c3                   	ret    
100029ab:	90                   	nop

100029ac <PS2::~PS2()>:
100029ac:	55                   	push   ebp
100029ad:	89 e5                	mov    ebp,esp
100029af:	83 ec 08             	sub    esp,0x8
100029b2:	ba 08 00 00 00       	mov    edx,0x8	100029b3: R_386_32	vtable for PS2
100029b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029ba:	89 10                	mov    DWORD PTR [eax],edx
100029bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029bf:	83 ec 0c             	sub    esp,0xc
100029c2:	50                   	push   eax
100029c3:	e8 fc ff ff ff       	call   100029c4 <PS2::~PS2()+0x18>	100029c4: R_386_PC32	Bus::~Bus()
100029c8:	83 c4 10             	add    esp,0x10
100029cb:	90                   	nop
100029cc:	c9                   	leave  
100029cd:	c3                   	ret    

100029ce <PS2::~PS2()>:
100029ce:	55                   	push   ebp
100029cf:	89 e5                	mov    ebp,esp
100029d1:	83 ec 08             	sub    esp,0x8
100029d4:	83 ec 0c             	sub    esp,0xc
100029d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100029da:	e8 fc ff ff ff       	call   100029db <PS2::~PS2()+0xd>	100029db: R_386_PC32	PS2::~PS2()
100029df:	83 c4 10             	add    esp,0x10
100029e2:	83 ec 08             	sub    esp,0x8
100029e5:	68 60 01 00 00       	push   0x160
100029ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100029ed:	e8 fc ff ff ff       	call   100029ee <PS2::~PS2()+0x20>	100029ee: R_386_PC32	operator delete(void*, unsigned long)
100029f2:	83 c4 10             	add    esp,0x10
100029f5:	c9                   	leave  
100029f6:	c3                   	ret    
100029f7:	90                   	nop

100029f8 <PS2Mouse::~PS2Mouse()>:
100029f8:	55                   	push   ebp
100029f9:	89 e5                	mov    ebp,esp
100029fb:	83 ec 08             	sub    esp,0x8
100029fe:	ba 08 00 00 00       	mov    edx,0x8	100029ff: R_386_32	vtable for PS2Mouse
10002a03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a06:	89 10                	mov    DWORD PTR [eax],edx
10002a08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a0b:	83 ec 0c             	sub    esp,0xc
10002a0e:	50                   	push   eax
10002a0f:	e8 fc ff ff ff       	call   10002a10 <PS2Mouse::~PS2Mouse()+0x18>	10002a10: R_386_PC32	Mouse::~Mouse()
10002a14:	83 c4 10             	add    esp,0x10
10002a17:	90                   	nop
10002a18:	c9                   	leave  
10002a19:	c3                   	ret    

10002a1a <PS2Mouse::~PS2Mouse()>:
10002a1a:	55                   	push   ebp
10002a1b:	89 e5                	mov    ebp,esp
10002a1d:	83 ec 08             	sub    esp,0x8
10002a20:	83 ec 0c             	sub    esp,0xc
10002a23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a26:	e8 fc ff ff ff       	call   10002a27 <PS2Mouse::~PS2Mouse()+0xd>	10002a27: R_386_PC32	PS2Mouse::~PS2Mouse()
10002a2b:	83 c4 10             	add    esp,0x10
10002a2e:	83 ec 08             	sub    esp,0x8
10002a31:	68 68 01 00 00       	push   0x168
10002a36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a39:	e8 fc ff ff ff       	call   10002a3a <PS2Mouse::~PS2Mouse()+0x20>	10002a3a: R_386_PC32	operator delete(void*, unsigned long)
10002a3e:	83 c4 10             	add    esp,0x10
10002a41:	c9                   	leave  
10002a42:	c3                   	ret    
10002a43:	90                   	nop

10002a44 <PS2Port::~PS2Port()>:
10002a44:	55                   	push   ebp
10002a45:	89 e5                	mov    ebp,esp
10002a47:	83 ec 08             	sub    esp,0x8
10002a4a:	ba 08 00 00 00       	mov    edx,0x8	10002a4b: R_386_32	vtable for PS2Port
10002a4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a52:	89 10                	mov    DWORD PTR [eax],edx
10002a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a57:	83 ec 0c             	sub    esp,0xc
10002a5a:	50                   	push   eax
10002a5b:	e8 fc ff ff ff       	call   10002a5c <PS2Port::~PS2Port()+0x18>	10002a5c: R_386_PC32	Bus::~Bus()
10002a60:	83 c4 10             	add    esp,0x10
10002a63:	90                   	nop
10002a64:	c9                   	leave  
10002a65:	c3                   	ret    

10002a66 <PS2Port::~PS2Port()>:
10002a66:	55                   	push   ebp
10002a67:	89 e5                	mov    ebp,esp
10002a69:	83 ec 08             	sub    esp,0x8
10002a6c:	83 ec 0c             	sub    esp,0xc
10002a6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a72:	e8 fc ff ff ff       	call   10002a73 <PS2Port::~PS2Port()+0xd>	10002a73: R_386_PC32	PS2Port::~PS2Port()
10002a77:	83 c4 10             	add    esp,0x10
10002a7a:	83 ec 08             	sub    esp,0x8
10002a7d:	68 60 01 00 00       	push   0x160
10002a82:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a85:	e8 fc ff ff ff       	call   10002a86 <PS2Port::~PS2Port()+0x20>	10002a86: R_386_PC32	operator delete(void*, unsigned long)
10002a8a:	83 c4 10             	add    esp,0x10
10002a8d:	c9                   	leave  
10002a8e:	c3                   	ret    
10002a8f:	90                   	nop

10002a90 <SoundBlaster16::~SoundBlaster16()>:
10002a90:	55                   	push   ebp
10002a91:	89 e5                	mov    ebp,esp
10002a93:	83 ec 08             	sub    esp,0x8
10002a96:	ba 08 00 00 00       	mov    edx,0x8	10002a97: R_386_32	vtable for SoundBlaster16
10002a9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a9e:	89 10                	mov    DWORD PTR [eax],edx
10002aa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002aa3:	83 ec 0c             	sub    esp,0xc
10002aa6:	50                   	push   eax
10002aa7:	e8 fc ff ff ff       	call   10002aa8 <SoundBlaster16::~SoundBlaster16()+0x18>	10002aa8: R_386_PC32	SoundDevice::~SoundDevice()
10002aac:	83 c4 10             	add    esp,0x10
10002aaf:	90                   	nop
10002ab0:	c9                   	leave  
10002ab1:	c3                   	ret    

10002ab2 <SoundBlaster16::~SoundBlaster16()>:
10002ab2:	55                   	push   ebp
10002ab3:	89 e5                	mov    ebp,esp
10002ab5:	83 ec 08             	sub    esp,0x8
10002ab8:	83 ec 0c             	sub    esp,0xc
10002abb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002abe:	e8 fc ff ff ff       	call   10002abf <SoundBlaster16::~SoundBlaster16()+0xd>	10002abf: R_386_PC32	SoundBlaster16::~SoundBlaster16()
10002ac3:	83 c4 10             	add    esp,0x10
10002ac6:	83 ec 08             	sub    esp,0x8
10002ac9:	68 fc 01 00 00       	push   0x1fc
10002ace:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002ad1:	e8 fc ff ff ff       	call   10002ad2 <SoundBlaster16::~SoundBlaster16()+0x20>	10002ad2: R_386_PC32	operator delete(void*, unsigned long)
10002ad6:	83 c4 10             	add    esp,0x10
10002ad9:	c9                   	leave  
10002ada:	c3                   	ret    
10002adb:	90                   	nop

10002adc <PHYS_RAM_TABLE_SIZE>:
10002adc:	13 05 00 00                                         ....

10002ae0 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002ae0:	24 05 00 00                                         $...

10002ae4 <PHYS_RAM_TABLE>:
10002ae4:	00 06 00 00                                         ....

10002ae8 <PHYS_DMA_MEMORY_1>:
10002ae8:	00 00 01 00                                         ....

10002aec <PHYS_PHYS_PAGE_BITMAP>:
10002aec:	00 00 02 00                                         ....

10002af0 <PHYS_VIRT_PAGE_BITMAP>:
10002af0:	00 00 04 00                                         ....

10002af4 <PHYS_DMA_MEMORY_2>:
10002af4:	00 00 06 00                                         ....

10002af8 <PHYS_ALLOCED_VIRT_PAGES>:
10002af8:	00 00 10 00                                         ....

10002afc <PHYS_KRNL_PAGE_DIRECTORY>:
10002afc:	00 10 00 00                                         ....

10002b00 <VIRT_KERNEL_BASE>:
10002b00:	00 00 00 c0                                         ....

10002b04 <VIRT_LOW_MEGS>:
10002b04:	00 00 00 c2                                         ....

10002b08 <VIRT_CPU_SPECIFIC>:
10002b08:	00 00 40 c2                                         ..@.

10002b0c <VIRT_RECURSIVE_SPOT_1>:
10002b0c:	00 00 80 c2                                         ....

10002b10 <VIRT_RECURSIVE_SPOT_2>:
10002b10:	00 00 c0 c2                                         ....

10002b14 <VIRT_DMA_MEMORY_1>:
10002b14:	00 00 01 c2                                         ....

10002b18 <SIZE_DMA_MEMORY_1>:
10002b18:	00 00 01 00                                         ....

10002b1c <VIRT_DMA_MEMORY_2>:
10002b1c:	00 00 06 c2                                         ....

10002b20 <SIZE_DMA_MEMORY_2>:
10002b20:	00 00 02 00                                         ....

10002b24 <VIRT_KRNL_PAGE_DIRECTORY>:
10002b24:	00 10 00 c2                                         ....

10002b28 <VIRT_PHYS_PAGE_BITMAP>:
10002b28:	00 00 02 c2                                         ....

10002b2c <SIZE_PHYS_PAGE_BITMAP>:
10002b2c:	00 00 02 00                                         ....

10002b30 <VIRT_VIRT_PAGE_BITMAP>:
10002b30:	00 00 04 c2                                         ....

10002b34 <SIZE_VIRT_PAGE_BITMAP>:
10002b34:	00 80 00 00                                         ....

10002b38 <VIRT_RAM_TABLE>:
10002b38:	00 06 00 c2                                         ....

10002b3c <VIRT_RAM_TABLE_SIZE>:
10002b3c:	13 05 00 c2                                         ....

10002b40 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002b40:	24 05 00 c2                                         $...

10002b44 <SIZE_APP_STACK_USER>:
10002b44:	00 00 18 00                                         ....

10002b48 <SIZE_APP_STACK_KRNL>:
10002b48:	00 00 08 00                                         ....

10002b4c <SIZE_APP_STACK_TOTAL>:
10002b4c:	00 00 20 00                                         .. .

10002b50 <VIRT_APP_DATA>:
10002b50:	00 00 00 10                                         ....

10002b54 <VIRT_APP_STACK_USER_TOP>:
10002b54:	00 00 00 02                                         ....

10002b58 <VIRT_APP_STACK_KRNL_TOP>:
10002b58:	00 00 e8 01                                         ....

10002b5c <VIRT_HEAP_MIN>:
10002b5c:	00 00 00 c8                                         ....

10002b60 <VIRT_HEAP_MAX>:
10002b60:	ff ff ff ef                                         ....

10002b64 <VIRT_SBRK_MIN>:
10002b64:	00 00 00 f0                                         ....

10002b68 <VIRT_SBRK_MAX>:
10002b68:	00 00 c0 ff                                         ....

10002b6c <VIRT_ALLOCED_VIRT_PAGES>:
10002b6c:	00 00 10 c2                                         ....

10002b70 <VIRT_ACPI_DRIVER>:
10002b70:	00 40 48 c2                                         .@H.

10002b74 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002b74:	96 00 00 00                                         ....

10002b78 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002b78:	2c 01 00 00 49 53 41 20 42 75 73 00                 ,...ISA Bus.

10002b84 <vtable for ISA>:
	...
	10002b8c: R_386_32	ISA::~ISA()
	10002b90: R_386_32	ISA::~ISA()
	10002b94: R_386_32	ISA::open(int, int, void*)
	10002b98: R_386_32	ISA::close(int, int, void*)
	10002b9c: R_386_32	Device::hibernate()
	10002ba0: R_386_32	Device::wake()
	10002ba4: R_386_32	ISA::detect()
	10002ba8: R_386_32	Device::disableLegacy()
	10002bac: R_386_32	Device::powerSaving(PowerSavingLevel)

10002bb0 <PHYS_RAM_TABLE_SIZE>:
10002bb0:	13 05 00 00                                         ....

10002bb4 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002bb4:	24 05 00 00                                         $...

10002bb8 <PHYS_RAM_TABLE>:
10002bb8:	00 06 00 00                                         ....

10002bbc <PHYS_DMA_MEMORY_1>:
10002bbc:	00 00 01 00                                         ....

10002bc0 <PHYS_PHYS_PAGE_BITMAP>:
10002bc0:	00 00 02 00                                         ....

10002bc4 <PHYS_VIRT_PAGE_BITMAP>:
10002bc4:	00 00 04 00                                         ....

10002bc8 <PHYS_DMA_MEMORY_2>:
10002bc8:	00 00 06 00                                         ....

10002bcc <PHYS_ALLOCED_VIRT_PAGES>:
10002bcc:	00 00 10 00                                         ....

10002bd0 <PHYS_KRNL_PAGE_DIRECTORY>:
10002bd0:	00 10 00 00                                         ....

10002bd4 <VIRT_KERNEL_BASE>:
10002bd4:	00 00 00 c0                                         ....

10002bd8 <VIRT_LOW_MEGS>:
10002bd8:	00 00 00 c2                                         ....

10002bdc <VIRT_CPU_SPECIFIC>:
10002bdc:	00 00 40 c2                                         ..@.

10002be0 <VIRT_RECURSIVE_SPOT_1>:
10002be0:	00 00 80 c2                                         ....

10002be4 <VIRT_RECURSIVE_SPOT_2>:
10002be4:	00 00 c0 c2                                         ....

10002be8 <VIRT_DMA_MEMORY_1>:
10002be8:	00 00 01 c2                                         ....

10002bec <SIZE_DMA_MEMORY_1>:
10002bec:	00 00 01 00                                         ....

10002bf0 <VIRT_DMA_MEMORY_2>:
10002bf0:	00 00 06 c2                                         ....

10002bf4 <SIZE_DMA_MEMORY_2>:
10002bf4:	00 00 02 00                                         ....

10002bf8 <VIRT_KRNL_PAGE_DIRECTORY>:
10002bf8:	00 10 00 c2                                         ....

10002bfc <VIRT_PHYS_PAGE_BITMAP>:
10002bfc:	00 00 02 c2                                         ....

10002c00 <SIZE_PHYS_PAGE_BITMAP>:
10002c00:	00 00 02 00                                         ....

10002c04 <VIRT_VIRT_PAGE_BITMAP>:
10002c04:	00 00 04 c2                                         ....

10002c08 <SIZE_VIRT_PAGE_BITMAP>:
10002c08:	00 80 00 00                                         ....

10002c0c <VIRT_RAM_TABLE>:
10002c0c:	00 06 00 c2                                         ....

10002c10 <VIRT_RAM_TABLE_SIZE>:
10002c10:	13 05 00 c2                                         ....

10002c14 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002c14:	24 05 00 c2                                         $...

10002c18 <SIZE_APP_STACK_USER>:
10002c18:	00 00 18 00                                         ....

10002c1c <SIZE_APP_STACK_KRNL>:
10002c1c:	00 00 08 00                                         ....

10002c20 <SIZE_APP_STACK_TOTAL>:
10002c20:	00 00 20 00                                         .. .

10002c24 <VIRT_APP_DATA>:
10002c24:	00 00 00 10                                         ....

10002c28 <VIRT_APP_STACK_USER_TOP>:
10002c28:	00 00 00 02                                         ....

10002c2c <VIRT_APP_STACK_KRNL_TOP>:
10002c2c:	00 00 e8 01                                         ....

10002c30 <VIRT_HEAP_MIN>:
10002c30:	00 00 00 c8                                         ....

10002c34 <VIRT_HEAP_MAX>:
10002c34:	ff ff ff ef                                         ....

10002c38 <VIRT_SBRK_MIN>:
10002c38:	00 00 00 f0                                         ....

10002c3c <VIRT_SBRK_MAX>:
10002c3c:	00 00 c0 ff                                         ....

10002c40 <VIRT_ALLOCED_VIRT_PAGES>:
10002c40:	00 00 10 c2                                         ....

10002c44 <VIRT_ACPI_DRIVER>:
10002c44:	00 40 48 c2                                         .@H.

10002c48 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002c48:	96 00 00 00                                         ....

10002c4c <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002c4c:	2c 01 00 00 47 61 6d 65 70 6f 72 74 00 66 90 90     ,...Gameport.f..

10002c5c <vtable for Gameport>:
	...
	10002c64: R_386_32	Gameport::~Gameport()
	10002c68: R_386_32	Gameport::~Gameport()
	10002c6c: R_386_32	Gameport::open(int, int, void*)
	10002c70: R_386_32	Gameport::close(int, int, void*)
	10002c74: R_386_32	Device::hibernate()
	10002c78: R_386_32	Device::wake()
	10002c7c: R_386_32	Gameport::detect()
	10002c80: R_386_32	Device::disableLegacy()
	10002c84: R_386_32	Device::powerSaving(PowerSavingLevel)
	10002c88: R_386_32	Gameport::read(int)
10002c8c:	a8 fe ff ff 00 00 00 00 00 00 00 00                 ............	10002c94: R_386_32	non-virtual thunk to Gameport::read(int)

10002c98 <vtable for JoystickHost>:
	...
	10002ca0: R_386_32	__cxa_pure_virtual

10002ca4 <PHYS_RAM_TABLE_SIZE>:
10002ca4:	13 05 00 00                                         ....

10002ca8 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002ca8:	24 05 00 00                                         $...

10002cac <PHYS_RAM_TABLE>:
10002cac:	00 06 00 00                                         ....

10002cb0 <PHYS_DMA_MEMORY_1>:
10002cb0:	00 00 01 00                                         ....

10002cb4 <PHYS_PHYS_PAGE_BITMAP>:
10002cb4:	00 00 02 00                                         ....

10002cb8 <PHYS_VIRT_PAGE_BITMAP>:
10002cb8:	00 00 04 00                                         ....

10002cbc <PHYS_DMA_MEMORY_2>:
10002cbc:	00 00 06 00                                         ....

10002cc0 <PHYS_ALLOCED_VIRT_PAGES>:
10002cc0:	00 00 10 00                                         ....

10002cc4 <PHYS_KRNL_PAGE_DIRECTORY>:
10002cc4:	00 10 00 00                                         ....

10002cc8 <VIRT_KERNEL_BASE>:
10002cc8:	00 00 00 c0                                         ....

10002ccc <VIRT_LOW_MEGS>:
10002ccc:	00 00 00 c2                                         ....

10002cd0 <VIRT_CPU_SPECIFIC>:
10002cd0:	00 00 40 c2                                         ..@.

10002cd4 <VIRT_RECURSIVE_SPOT_1>:
10002cd4:	00 00 80 c2                                         ....

10002cd8 <VIRT_RECURSIVE_SPOT_2>:
10002cd8:	00 00 c0 c2                                         ....

10002cdc <VIRT_DMA_MEMORY_1>:
10002cdc:	00 00 01 c2                                         ....

10002ce0 <SIZE_DMA_MEMORY_1>:
10002ce0:	00 00 01 00                                         ....

10002ce4 <VIRT_DMA_MEMORY_2>:
10002ce4:	00 00 06 c2                                         ....

10002ce8 <SIZE_DMA_MEMORY_2>:
10002ce8:	00 00 02 00                                         ....

10002cec <VIRT_KRNL_PAGE_DIRECTORY>:
10002cec:	00 10 00 c2                                         ....

10002cf0 <VIRT_PHYS_PAGE_BITMAP>:
10002cf0:	00 00 02 c2                                         ....

10002cf4 <SIZE_PHYS_PAGE_BITMAP>:
10002cf4:	00 00 02 00                                         ....

10002cf8 <VIRT_VIRT_PAGE_BITMAP>:
10002cf8:	00 00 04 c2                                         ....

10002cfc <SIZE_VIRT_PAGE_BITMAP>:
10002cfc:	00 80 00 00                                         ....

10002d00 <VIRT_RAM_TABLE>:
10002d00:	00 06 00 c2                                         ....

10002d04 <VIRT_RAM_TABLE_SIZE>:
10002d04:	13 05 00 c2                                         ....

10002d08 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002d08:	24 05 00 c2                                         $...

10002d0c <SIZE_APP_STACK_USER>:
10002d0c:	00 00 18 00                                         ....

10002d10 <SIZE_APP_STACK_KRNL>:
10002d10:	00 00 08 00                                         ....

10002d14 <SIZE_APP_STACK_TOTAL>:
10002d14:	00 00 20 00                                         .. .

10002d18 <VIRT_APP_DATA>:
10002d18:	00 00 00 10                                         ....

10002d1c <VIRT_APP_STACK_USER_TOP>:
10002d1c:	00 00 00 02                                         ....

10002d20 <VIRT_APP_STACK_KRNL_TOP>:
10002d20:	00 00 e8 01                                         ....

10002d24 <VIRT_HEAP_MIN>:
10002d24:	00 00 00 c8                                         ....

10002d28 <VIRT_HEAP_MAX>:
10002d28:	ff ff ff ef                                         ....

10002d2c <VIRT_SBRK_MIN>:
10002d2c:	00 00 00 f0                                         ....

10002d30 <VIRT_SBRK_MAX>:
10002d30:	00 00 c0 ff                                         ....

10002d34 <VIRT_ALLOCED_VIRT_PAGES>:
10002d34:	00 00 10 c2                                         ....

10002d38 <VIRT_ACPI_DRIVER>:
10002d38:	00 40 48 c2                                         .@H.

10002d3c <TERMINAL_KEYBUFFER_IN_SIZE>:
10002d3c:	96 00 00 00                                         ....

10002d40 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002d40:	2c 01 00 00                                         ,...

10002d44 <CSWTCH.8>:
10002d44:	00 02 04 06 c0 c4 c8 cc                             ........

10002d4c <CSWTCH.9>:
10002d4c:	01 03 05 07 c2 c6 ca ce                             ........

10002d54 <CSWTCH.10>:
10002d54:	87 83 81 82 8f 8b 89 8a 4e 6f 74 20 69 6e 20 72     ........Not in r
10002d64:	61 6e 67 65 2e 0a 00 90                             ange....

10002d6c <vtable for DMA>:
	...
	10002d74: R_386_32	DMA::~DMA()
	10002d78: R_386_32	DMA::~DMA()
	10002d7c: R_386_32	DMA::open(int, int, void*)
	10002d80: R_386_32	DMA::close(int, int, void*)
	10002d84: R_386_32	Device::hibernate()
	10002d88: R_386_32	Device::wake()
	10002d8c: R_386_32	Device::detect()
	10002d90: R_386_32	Device::disableLegacy()
	10002d94: R_386_32	Device::powerSaving(PowerSavingLevel)

10002d98 <PHYS_RAM_TABLE_SIZE>:
10002d98:	13 05 00 00                                         ....

10002d9c <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002d9c:	24 05 00 00                                         $...

10002da0 <PHYS_RAM_TABLE>:
10002da0:	00 06 00 00                                         ....

10002da4 <PHYS_DMA_MEMORY_1>:
10002da4:	00 00 01 00                                         ....

10002da8 <PHYS_PHYS_PAGE_BITMAP>:
10002da8:	00 00 02 00                                         ....

10002dac <PHYS_VIRT_PAGE_BITMAP>:
10002dac:	00 00 04 00                                         ....

10002db0 <PHYS_DMA_MEMORY_2>:
10002db0:	00 00 06 00                                         ....

10002db4 <PHYS_ALLOCED_VIRT_PAGES>:
10002db4:	00 00 10 00                                         ....

10002db8 <PHYS_KRNL_PAGE_DIRECTORY>:
10002db8:	00 10 00 00                                         ....

10002dbc <VIRT_KERNEL_BASE>:
10002dbc:	00 00 00 c0                                         ....

10002dc0 <VIRT_LOW_MEGS>:
10002dc0:	00 00 00 c2                                         ....

10002dc4 <VIRT_CPU_SPECIFIC>:
10002dc4:	00 00 40 c2                                         ..@.

10002dc8 <VIRT_RECURSIVE_SPOT_1>:
10002dc8:	00 00 80 c2                                         ....

10002dcc <VIRT_RECURSIVE_SPOT_2>:
10002dcc:	00 00 c0 c2                                         ....

10002dd0 <VIRT_DMA_MEMORY_1>:
10002dd0:	00 00 01 c2                                         ....

10002dd4 <SIZE_DMA_MEMORY_1>:
10002dd4:	00 00 01 00                                         ....

10002dd8 <VIRT_DMA_MEMORY_2>:
10002dd8:	00 00 06 c2                                         ....

10002ddc <SIZE_DMA_MEMORY_2>:
10002ddc:	00 00 02 00                                         ....

10002de0 <VIRT_KRNL_PAGE_DIRECTORY>:
10002de0:	00 10 00 c2                                         ....

10002de4 <VIRT_PHYS_PAGE_BITMAP>:
10002de4:	00 00 02 c2                                         ....

10002de8 <SIZE_PHYS_PAGE_BITMAP>:
10002de8:	00 00 02 00                                         ....

10002dec <VIRT_VIRT_PAGE_BITMAP>:
10002dec:	00 00 04 c2                                         ....

10002df0 <SIZE_VIRT_PAGE_BITMAP>:
10002df0:	00 80 00 00                                         ....

10002df4 <VIRT_RAM_TABLE>:
10002df4:	00 06 00 c2                                         ....

10002df8 <VIRT_RAM_TABLE_SIZE>:
10002df8:	13 05 00 c2                                         ....

10002dfc <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002dfc:	24 05 00 c2                                         $...

10002e00 <SIZE_APP_STACK_USER>:
10002e00:	00 00 18 00                                         ....

10002e04 <SIZE_APP_STACK_KRNL>:
10002e04:	00 00 08 00                                         ....

10002e08 <SIZE_APP_STACK_TOTAL>:
10002e08:	00 00 20 00                                         .. .

10002e0c <VIRT_APP_DATA>:
10002e0c:	00 00 00 10                                         ....

10002e10 <VIRT_APP_STACK_USER_TOP>:
10002e10:	00 00 00 02                                         ....

10002e14 <VIRT_APP_STACK_KRNL_TOP>:
10002e14:	00 00 e8 01                                         ....

10002e18 <VIRT_HEAP_MIN>:
10002e18:	00 00 00 c8                                         ....

10002e1c <VIRT_HEAP_MAX>:
10002e1c:	ff ff ff ef                                         ....

10002e20 <VIRT_SBRK_MIN>:
10002e20:	00 00 00 f0                                         ....

10002e24 <VIRT_SBRK_MAX>:
10002e24:	00 00 c0 ff                                         ....

10002e28 <VIRT_ALLOCED_VIRT_PAGES>:
10002e28:	00 00 10 c2                                         ....

10002e2c <VIRT_ACPI_DRIVER>:
10002e2c:	00 40 48 c2                                         .@H.

10002e30 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002e30:	96 00 00 00                                         ....

10002e34 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002e34:	2c 01 00 00                                         ,...

10002e38 <vtable for PS2>:
	...
	10002e40: R_386_32	PS2::~PS2()
	10002e44: R_386_32	PS2::~PS2()
	10002e48: R_386_32	PS2::open(int, int, void*)
	10002e4c: R_386_32	PS2::close(int, int, void*)
	10002e50: R_386_32	Device::hibernate()
	10002e54: R_386_32	Device::wake()
	10002e58: R_386_32	PS2::detect()
	10002e5c: R_386_32	Device::disableLegacy()
	10002e60: R_386_32	Device::powerSaving(PowerSavingLevel)
10002e64:	66 90 66 90 66 90 66 90 66 90 66 90 66 90 66 90     f.f.f.f.f.f.f.f.
10002e74:	66 90 66 90 66 90 66 90 66 90 66 90                 f.f.f.f.f.f.

10002e80 <PHYS_RAM_TABLE_SIZE>:
10002e80:	13 05 00 00                                         ....

10002e84 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002e84:	24 05 00 00                                         $...

10002e88 <PHYS_RAM_TABLE>:
10002e88:	00 06 00 00                                         ....

10002e8c <PHYS_DMA_MEMORY_1>:
10002e8c:	00 00 01 00                                         ....

10002e90 <PHYS_PHYS_PAGE_BITMAP>:
10002e90:	00 00 02 00                                         ....

10002e94 <PHYS_VIRT_PAGE_BITMAP>:
10002e94:	00 00 04 00                                         ....

10002e98 <PHYS_DMA_MEMORY_2>:
10002e98:	00 00 06 00                                         ....

10002e9c <PHYS_ALLOCED_VIRT_PAGES>:
10002e9c:	00 00 10 00                                         ....

10002ea0 <PHYS_KRNL_PAGE_DIRECTORY>:
10002ea0:	00 10 00 00                                         ....

10002ea4 <VIRT_KERNEL_BASE>:
10002ea4:	00 00 00 c0                                         ....

10002ea8 <VIRT_LOW_MEGS>:
10002ea8:	00 00 00 c2                                         ....

10002eac <VIRT_CPU_SPECIFIC>:
10002eac:	00 00 40 c2                                         ..@.

10002eb0 <VIRT_RECURSIVE_SPOT_1>:
10002eb0:	00 00 80 c2                                         ....

10002eb4 <VIRT_RECURSIVE_SPOT_2>:
10002eb4:	00 00 c0 c2                                         ....

10002eb8 <VIRT_DMA_MEMORY_1>:
10002eb8:	00 00 01 c2                                         ....

10002ebc <SIZE_DMA_MEMORY_1>:
10002ebc:	00 00 01 00                                         ....

10002ec0 <VIRT_DMA_MEMORY_2>:
10002ec0:	00 00 06 c2                                         ....

10002ec4 <SIZE_DMA_MEMORY_2>:
10002ec4:	00 00 02 00                                         ....

10002ec8 <VIRT_KRNL_PAGE_DIRECTORY>:
10002ec8:	00 10 00 c2                                         ....

10002ecc <VIRT_PHYS_PAGE_BITMAP>:
10002ecc:	00 00 02 c2                                         ....

10002ed0 <SIZE_PHYS_PAGE_BITMAP>:
10002ed0:	00 00 02 00                                         ....

10002ed4 <VIRT_VIRT_PAGE_BITMAP>:
10002ed4:	00 00 04 c2                                         ....

10002ed8 <SIZE_VIRT_PAGE_BITMAP>:
10002ed8:	00 80 00 00                                         ....

10002edc <VIRT_RAM_TABLE>:
10002edc:	00 06 00 c2                                         ....

10002ee0 <VIRT_RAM_TABLE_SIZE>:
10002ee0:	13 05 00 c2                                         ....

10002ee4 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002ee4:	24 05 00 c2                                         $...

10002ee8 <SIZE_APP_STACK_USER>:
10002ee8:	00 00 18 00                                         ....

10002eec <SIZE_APP_STACK_KRNL>:
10002eec:	00 00 08 00                                         ....

10002ef0 <SIZE_APP_STACK_TOTAL>:
10002ef0:	00 00 20 00                                         .. .

10002ef4 <VIRT_APP_DATA>:
10002ef4:	00 00 00 10                                         ....

10002ef8 <VIRT_APP_STACK_USER_TOP>:
10002ef8:	00 00 00 02                                         ....

10002efc <VIRT_APP_STACK_KRNL_TOP>:
10002efc:	00 00 e8 01                                         ....

10002f00 <VIRT_HEAP_MIN>:
10002f00:	00 00 00 c8                                         ....

10002f04 <VIRT_HEAP_MAX>:
10002f04:	ff ff ff ef                                         ....

10002f08 <VIRT_SBRK_MIN>:
10002f08:	00 00 00 f0                                         ....

10002f0c <VIRT_SBRK_MAX>:
10002f0c:	00 00 c0 ff                                         ....

10002f10 <VIRT_ALLOCED_VIRT_PAGES>:
10002f10:	00 00 10 c2                                         ....

10002f14 <VIRT_ACPI_DRIVER>:
10002f14:	00 40 48 c2                                         .@H.

10002f18 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002f18:	96 00 00 00                                         ....

10002f1c <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002f1c:	2c 01 00 00                                         ,...

10002f20 <PS2Keyboard::internalMapperLower>:
10002f20:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10002f30:	20 20 20 20 20 71 31 20 20 20 7a 73 61 77 32 20          q1   zsaw2 
10002f40:	20 63 78 64 65 34 33 20 20 20 76 66 74 72 35 20      cxde43   vftr5 
10002f50:	20 6e 62 68 67 79 36 20 20 20 6d 6a 75 37 38 20      nbhgy6   mju78 
10002f60:	20 2c 6b 69 6f 30 39 20 20 2e 2f 6c 3b 70 2d 20      ,kio09  ./l;p- 
10002f70:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10002f80:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002f90:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002fa0:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10003020 <PS2Keyboard::internalMapperUpper>:
10003020:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10003030:	20 20 20 20 20 51 21 20 20 20 5a 53 41 57 40 20          Q!   ZSAW@ 
10003040:	20 43 58 44 45 24 23 20 20 20 56 46 54 52 25 20      CXDE$#   VFTR% 
10003050:	20 4e 42 48 47 59 5e 20 20 20 4d 4a 55 26 2a 20      NBHGY^   MJU&* 
10003060:	20 3c 4b 49 4f 29 28 20 20 3e 3f 4c 3a 50 5f 20      <KIO)(  >?L:P_ 
10003070:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10003080:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10003090:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
100030a0:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10003120 <PS2Keyboard::internalMapCapLower>:
10003120:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10003130:	20 20 20 20 20 51 31 20 20 20 5a 53 41 57 32 20          Q1   ZSAW2 
10003140:	20 43 58 44 45 34 33 20 20 20 56 46 54 52 35 20      CXDE43   VFTR5 
10003150:	20 4e 42 48 47 59 36 20 20 20 4d 4a 55 37 38 20      NBHGY6   MJU78 
10003160:	20 2c 4b 49 4f 30 39 20 20 2e 2f 4c 3b 50 2d 20      ,KIO09  ./L;P- 
10003170:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10003180:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10003190:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
100031a0:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10003220 <PS2Keyboard::internalMapCapUpper>:
10003220:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10003230:	20 20 20 20 20 51 21 20 20 20 7a 73 61 77 40 20          Q!   zsaw@ 
10003240:	20 63 78 64 65 24 23 20 20 20 76 66 74 72 25 20      cxde$#   vftr% 
10003250:	20 6e 62 68 67 79 5e 20 20 20 6d 6a 75 26 2a 20      nbhgy^   mju&* 
10003260:	20 3c 6b 69 6f 29 28 20 20 3e 3f 6c 3a 70 5f 20      <kio)(  >?l:p_ 
10003270:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10003280:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10003290:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
100032a0:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10003320 <PS2Keyboard::internalMapperLowerBad>:
10003320:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10003330:	71 77 65 72 74 79 75 69 6f 70 5b 5d 20 20 61 73     qwertyuiop[]  as
10003340:	64 66 67 68 6a 6b 6c 3b 27 60 20 5c 7a 78 63 76     dfghjkl;'` \zxcv
10003350:	62 6e 6d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     bnm,./ *        
10003360:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10003370:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10003380:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10003390:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100033a0:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
100033b0:	51 57 45 52 54 59 55 49 4f 50 7b 7d 20 20 41 53     QWERTYUIOP{}  AS
100033c0:	44 46 47 48 4a 4b 4c 3a 22 7e 20 7c 5a 58 43 56     DFGHJKL:"~ |ZXCV
100033d0:	42 4e 4d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     BNM<>? *        
100033e0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
100033f0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10003400:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10003410:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10003420:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10003430:	51 57 45 52 54 59 55 49 4f 50 5b 5d 20 20 41 53     QWERTYUIOP[]  AS
10003440:	44 46 47 48 4a 4b 4c 3b 27 60 20 5c 5a 58 43 56     DFGHJKL;'` \ZXCV
10003450:	42 4e 4d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     BNM,./ *        
10003460:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10003470:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10003480:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10003490:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100034a0:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
100034b0:	71 77 65 72 74 79 75 69 6f 70 7b 7d 20 20 61 73     qwertyuiop{}  as
100034c0:	64 66 67 68 6a 6b 6c 3a 22 7e 20 7c 7a 78 63 76     dfghjkl:"~ |zxcv
100034d0:	62 6e 6d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     bnm<>? *        
100034e0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
100034f0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10003500:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10003510:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10003520:	00 66 90 90                                         .f..

10003524 <vtable for PS2Keyboard>:
	...
	1000352c: R_386_32	PS2Keyboard::~PS2Keyboard()
	10003530: R_386_32	PS2Keyboard::~PS2Keyboard()
	10003534: R_386_32	PS2Keyboard::open(int, int, void*)
	10003538: R_386_32	PS2Keyboard::close(int, int, void*)
	1000353c: R_386_32	Device::hibernate()
	10003540: R_386_32	Device::wake()
	10003544: R_386_32	Device::detect()
	10003548: R_386_32	Device::disableLegacy()
	1000354c: R_386_32	Device::powerSaving(PowerSavingLevel)
	10003550: R_386_32	PS2Keyboard::setRepeatRate(int)
	10003554: R_386_32	PS2Keyboard::setRepeatDelay(int)

10003558 <PHYS_RAM_TABLE_SIZE>:
10003558:	13 05 00 00                                         ....

1000355c <PHYS_HIGHEST_UNUSED_ADDRESS>:
1000355c:	24 05 00 00                                         $...

10003560 <PHYS_RAM_TABLE>:
10003560:	00 06 00 00                                         ....

10003564 <PHYS_DMA_MEMORY_1>:
10003564:	00 00 01 00                                         ....

10003568 <PHYS_PHYS_PAGE_BITMAP>:
10003568:	00 00 02 00                                         ....

1000356c <PHYS_VIRT_PAGE_BITMAP>:
1000356c:	00 00 04 00                                         ....

10003570 <PHYS_DMA_MEMORY_2>:
10003570:	00 00 06 00                                         ....

10003574 <PHYS_ALLOCED_VIRT_PAGES>:
10003574:	00 00 10 00                                         ....

10003578 <PHYS_KRNL_PAGE_DIRECTORY>:
10003578:	00 10 00 00                                         ....

1000357c <VIRT_KERNEL_BASE>:
1000357c:	00 00 00 c0                                         ....

10003580 <VIRT_LOW_MEGS>:
10003580:	00 00 00 c2                                         ....

10003584 <VIRT_CPU_SPECIFIC>:
10003584:	00 00 40 c2                                         ..@.

10003588 <VIRT_RECURSIVE_SPOT_1>:
10003588:	00 00 80 c2                                         ....

1000358c <VIRT_RECURSIVE_SPOT_2>:
1000358c:	00 00 c0 c2                                         ....

10003590 <VIRT_DMA_MEMORY_1>:
10003590:	00 00 01 c2                                         ....

10003594 <SIZE_DMA_MEMORY_1>:
10003594:	00 00 01 00                                         ....

10003598 <VIRT_DMA_MEMORY_2>:
10003598:	00 00 06 c2                                         ....

1000359c <SIZE_DMA_MEMORY_2>:
1000359c:	00 00 02 00                                         ....

100035a0 <VIRT_KRNL_PAGE_DIRECTORY>:
100035a0:	00 10 00 c2                                         ....

100035a4 <VIRT_PHYS_PAGE_BITMAP>:
100035a4:	00 00 02 c2                                         ....

100035a8 <SIZE_PHYS_PAGE_BITMAP>:
100035a8:	00 00 02 00                                         ....

100035ac <VIRT_VIRT_PAGE_BITMAP>:
100035ac:	00 00 04 c2                                         ....

100035b0 <SIZE_VIRT_PAGE_BITMAP>:
100035b0:	00 80 00 00                                         ....

100035b4 <VIRT_RAM_TABLE>:
100035b4:	00 06 00 c2                                         ....

100035b8 <VIRT_RAM_TABLE_SIZE>:
100035b8:	13 05 00 c2                                         ....

100035bc <VIRT_HIGHEST_UNUSED_ADDRESS>:
100035bc:	24 05 00 c2                                         $...

100035c0 <SIZE_APP_STACK_USER>:
100035c0:	00 00 18 00                                         ....

100035c4 <SIZE_APP_STACK_KRNL>:
100035c4:	00 00 08 00                                         ....

100035c8 <SIZE_APP_STACK_TOTAL>:
100035c8:	00 00 20 00                                         .. .

100035cc <VIRT_APP_DATA>:
100035cc:	00 00 00 10                                         ....

100035d0 <VIRT_APP_STACK_USER_TOP>:
100035d0:	00 00 00 02                                         ....

100035d4 <VIRT_APP_STACK_KRNL_TOP>:
100035d4:	00 00 e8 01                                         ....

100035d8 <VIRT_HEAP_MIN>:
100035d8:	00 00 00 c8                                         ....

100035dc <VIRT_HEAP_MAX>:
100035dc:	ff ff ff ef                                         ....

100035e0 <VIRT_SBRK_MIN>:
100035e0:	00 00 00 f0                                         ....

100035e4 <VIRT_SBRK_MAX>:
100035e4:	00 00 c0 ff                                         ....

100035e8 <VIRT_ALLOCED_VIRT_PAGES>:
100035e8:	00 00 10 c2                                         ....

100035ec <VIRT_ACPI_DRIVER>:
100035ec:	00 40 48 c2                                         .@H.

100035f0 <TERMINAL_KEYBUFFER_IN_SIZE>:
100035f0:	96 00 00 00                                         ....

100035f4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100035f4:	2c 01 00 00                                         ,...

100035f8 <vtable for PS2Mouse>:
	...
	10003600: R_386_32	PS2Mouse::~PS2Mouse()
	10003604: R_386_32	PS2Mouse::~PS2Mouse()
	10003608: R_386_32	PS2Mouse::open(int, int, void*)
	1000360c: R_386_32	PS2Mouse::close(int, int, void*)
	10003610: R_386_32	Device::hibernate()
	10003614: R_386_32	Device::wake()
	10003618: R_386_32	PS2Mouse::detect()
	1000361c: R_386_32	Device::disableLegacy()
	10003620: R_386_32	Device::powerSaving(PowerSavingLevel)

10003624 <PHYS_RAM_TABLE_SIZE>:
10003624:	13 05 00 00                                         ....

10003628 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10003628:	24 05 00 00                                         $...

1000362c <PHYS_RAM_TABLE>:
1000362c:	00 06 00 00                                         ....

10003630 <PHYS_DMA_MEMORY_1>:
10003630:	00 00 01 00                                         ....

10003634 <PHYS_PHYS_PAGE_BITMAP>:
10003634:	00 00 02 00                                         ....

10003638 <PHYS_VIRT_PAGE_BITMAP>:
10003638:	00 00 04 00                                         ....

1000363c <PHYS_DMA_MEMORY_2>:
1000363c:	00 00 06 00                                         ....

10003640 <PHYS_ALLOCED_VIRT_PAGES>:
10003640:	00 00 10 00                                         ....

10003644 <PHYS_KRNL_PAGE_DIRECTORY>:
10003644:	00 10 00 00                                         ....

10003648 <VIRT_KERNEL_BASE>:
10003648:	00 00 00 c0                                         ....

1000364c <VIRT_LOW_MEGS>:
1000364c:	00 00 00 c2                                         ....

10003650 <VIRT_CPU_SPECIFIC>:
10003650:	00 00 40 c2                                         ..@.

10003654 <VIRT_RECURSIVE_SPOT_1>:
10003654:	00 00 80 c2                                         ....

10003658 <VIRT_RECURSIVE_SPOT_2>:
10003658:	00 00 c0 c2                                         ....

1000365c <VIRT_DMA_MEMORY_1>:
1000365c:	00 00 01 c2                                         ....

10003660 <SIZE_DMA_MEMORY_1>:
10003660:	00 00 01 00                                         ....

10003664 <VIRT_DMA_MEMORY_2>:
10003664:	00 00 06 c2                                         ....

10003668 <SIZE_DMA_MEMORY_2>:
10003668:	00 00 02 00                                         ....

1000366c <VIRT_KRNL_PAGE_DIRECTORY>:
1000366c:	00 10 00 c2                                         ....

10003670 <VIRT_PHYS_PAGE_BITMAP>:
10003670:	00 00 02 c2                                         ....

10003674 <SIZE_PHYS_PAGE_BITMAP>:
10003674:	00 00 02 00                                         ....

10003678 <VIRT_VIRT_PAGE_BITMAP>:
10003678:	00 00 04 c2                                         ....

1000367c <SIZE_VIRT_PAGE_BITMAP>:
1000367c:	00 80 00 00                                         ....

10003680 <VIRT_RAM_TABLE>:
10003680:	00 06 00 c2                                         ....

10003684 <VIRT_RAM_TABLE_SIZE>:
10003684:	13 05 00 c2                                         ....

10003688 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10003688:	24 05 00 c2                                         $...

1000368c <SIZE_APP_STACK_USER>:
1000368c:	00 00 18 00                                         ....

10003690 <SIZE_APP_STACK_KRNL>:
10003690:	00 00 08 00                                         ....

10003694 <SIZE_APP_STACK_TOTAL>:
10003694:	00 00 20 00                                         .. .

10003698 <VIRT_APP_DATA>:
10003698:	00 00 00 10                                         ....

1000369c <VIRT_APP_STACK_USER_TOP>:
1000369c:	00 00 00 02                                         ....

100036a0 <VIRT_APP_STACK_KRNL_TOP>:
100036a0:	00 00 e8 01                                         ....

100036a4 <VIRT_HEAP_MIN>:
100036a4:	00 00 00 c8                                         ....

100036a8 <VIRT_HEAP_MAX>:
100036a8:	ff ff ff ef                                         ....

100036ac <VIRT_SBRK_MIN>:
100036ac:	00 00 00 f0                                         ....

100036b0 <VIRT_SBRK_MAX>:
100036b0:	00 00 c0 ff                                         ....

100036b4 <VIRT_ALLOCED_VIRT_PAGES>:
100036b4:	00 00 10 c2                                         ....

100036b8 <VIRT_ACPI_DRIVER>:
100036b8:	00 40 48 c2                                         .@H.

100036bc <TERMINAL_KEYBUFFER_IN_SIZE>:
100036bc:	96 00 00 00                                         ....

100036c0 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100036c0:	2c 01 00 00                                         ,...

100036c4 <vtable for PS2Port>:
	...
	100036cc: R_386_32	PS2Port::~PS2Port()
	100036d0: R_386_32	PS2Port::~PS2Port()
	100036d4: R_386_32	PS2Port::open(int, int, void*)
	100036d8: R_386_32	PS2Port::close(int, int, void*)
	100036dc: R_386_32	Device::hibernate()
	100036e0: R_386_32	Device::wake()
	100036e4: R_386_32	PS2Port::detect()
	100036e8: R_386_32	Device::disableLegacy()
	100036ec: R_386_32	Device::powerSaving(PowerSavingLevel)

100036f0 <PHYS_RAM_TABLE_SIZE>:
100036f0:	13 05 00 00                                         ....

100036f4 <PHYS_HIGHEST_UNUSED_ADDRESS>:
100036f4:	24 05 00 00                                         $...

100036f8 <PHYS_RAM_TABLE>:
100036f8:	00 06 00 00                                         ....

100036fc <PHYS_DMA_MEMORY_1>:
100036fc:	00 00 01 00                                         ....

10003700 <PHYS_PHYS_PAGE_BITMAP>:
10003700:	00 00 02 00                                         ....

10003704 <PHYS_VIRT_PAGE_BITMAP>:
10003704:	00 00 04 00                                         ....

10003708 <PHYS_DMA_MEMORY_2>:
10003708:	00 00 06 00                                         ....

1000370c <PHYS_ALLOCED_VIRT_PAGES>:
1000370c:	00 00 10 00                                         ....

10003710 <PHYS_KRNL_PAGE_DIRECTORY>:
10003710:	00 10 00 00                                         ....

10003714 <VIRT_KERNEL_BASE>:
10003714:	00 00 00 c0                                         ....

10003718 <VIRT_LOW_MEGS>:
10003718:	00 00 00 c2                                         ....

1000371c <VIRT_CPU_SPECIFIC>:
1000371c:	00 00 40 c2                                         ..@.

10003720 <VIRT_RECURSIVE_SPOT_1>:
10003720:	00 00 80 c2                                         ....

10003724 <VIRT_RECURSIVE_SPOT_2>:
10003724:	00 00 c0 c2                                         ....

10003728 <VIRT_DMA_MEMORY_1>:
10003728:	00 00 01 c2                                         ....

1000372c <SIZE_DMA_MEMORY_1>:
1000372c:	00 00 01 00                                         ....

10003730 <VIRT_DMA_MEMORY_2>:
10003730:	00 00 06 c2                                         ....

10003734 <SIZE_DMA_MEMORY_2>:
10003734:	00 00 02 00                                         ....

10003738 <VIRT_KRNL_PAGE_DIRECTORY>:
10003738:	00 10 00 c2                                         ....

1000373c <VIRT_PHYS_PAGE_BITMAP>:
1000373c:	00 00 02 c2                                         ....

10003740 <SIZE_PHYS_PAGE_BITMAP>:
10003740:	00 00 02 00                                         ....

10003744 <VIRT_VIRT_PAGE_BITMAP>:
10003744:	00 00 04 c2                                         ....

10003748 <SIZE_VIRT_PAGE_BITMAP>:
10003748:	00 80 00 00                                         ....

1000374c <VIRT_RAM_TABLE>:
1000374c:	00 06 00 c2                                         ....

10003750 <VIRT_RAM_TABLE_SIZE>:
10003750:	13 05 00 c2                                         ....

10003754 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10003754:	24 05 00 c2                                         $...

10003758 <SIZE_APP_STACK_USER>:
10003758:	00 00 18 00                                         ....

1000375c <SIZE_APP_STACK_KRNL>:
1000375c:	00 00 08 00                                         ....

10003760 <SIZE_APP_STACK_TOTAL>:
10003760:	00 00 20 00                                         .. .

10003764 <VIRT_APP_DATA>:
10003764:	00 00 00 10                                         ....

10003768 <VIRT_APP_STACK_USER_TOP>:
10003768:	00 00 00 02                                         ....

1000376c <VIRT_APP_STACK_KRNL_TOP>:
1000376c:	00 00 e8 01                                         ....

10003770 <VIRT_HEAP_MIN>:
10003770:	00 00 00 c8                                         ....

10003774 <VIRT_HEAP_MAX>:
10003774:	ff ff ff ef                                         ....

10003778 <VIRT_SBRK_MIN>:
10003778:	00 00 00 f0                                         ....

1000377c <VIRT_SBRK_MAX>:
1000377c:	00 00 c0 ff                                         ....

10003780 <VIRT_ALLOCED_VIRT_PAGES>:
10003780:	00 00 10 c2                                         ....

10003784 <VIRT_ACPI_DRIVER>:
10003784:	00 40 48 c2                                         .@H.

10003788 <TERMINAL_KEYBUFFER_IN_SIZE>:
10003788:	96 00 00 00                                         ....

1000378c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000378c:	2c 01 00 00 53 4f 4e 47 20 53 48 4f 55 4c 44 20     ,...SONG SHOULD 
1000379c:	42 45 20 44 4f 4e 45 2e 0a 00 66 90                 BE DONE...f.

100037a8 <vtable for SoundBlaster16>:
	...
	100037b0: R_386_32	SoundBlaster16::~SoundBlaster16()
	100037b4: R_386_32	SoundBlaster16::~SoundBlaster16()
	100037b8: R_386_32	SoundBlaster16::open(int, int, void*)
	100037bc: R_386_32	SoundBlaster16::close(int, int, void*)
	100037c0: R_386_32	Device::hibernate()
	100037c4: R_386_32	Device::wake()
	100037c8: R_386_32	Device::detect()
	100037cc: R_386_32	Device::disableLegacy()
	100037d0: R_386_32	Device::powerSaving(PowerSavingLevel)
	100037d4: R_386_32	SoundBlaster16::getNumHwChannels()
	100037d8: R_386_32	SoundBlaster16::beginPlayback(int, int)
	100037dc: R_386_32	SoundBlaster16::stopPlayback()
