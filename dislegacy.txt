
packages/system/32/0002/legacy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	realstart(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <realstart(void*)>:
10000017:	53                   	push   ebx
10000018:	83 ec 14             	sub    esp,0x14
1000001b:	68 58 01 00 00       	push   0x158
10000020:	e8 fc ff ff ff       	call   10000021 <realstart(void*)+0xa>	10000021: R_386_PC32	malloc
10000025:	89 04 24             	mov    DWORD PTR [esp],eax
10000028:	89 c3                	mov    ebx,eax
1000002a:	e8 fc ff ff ff       	call   1000002b <realstart(void*)+0x14>	1000002b: R_386_PC32	ISA::ISA()
1000002f:	58                   	pop    eax
10000030:	5a                   	pop    edx
10000031:	53                   	push   ebx
10000032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000036:	e8 fc ff ff ff       	call   10000037 <realstart(void*)+0x20>	10000037: R_386_PC32	Device::addChild(Device*)
1000003b:	6a 00                	push   0x0
1000003d:	8b 03                	mov    eax,DWORD PTR [ebx]
1000003f:	6a 00                	push   0x0
10000041:	6a 00                	push   0x0
10000043:	53                   	push   ebx
10000044:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000047:	83 c4 28             	add    esp,0x28
1000004a:	5b                   	pop    ebx
1000004b:	c3                   	ret    

1000004c <ISA::ISA()>:
1000004c:	55                   	push   ebp
1000004d:	89 e5                	mov    ebp,esp
1000004f:	83 ec 08             	sub    esp,0x8
10000052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000055:	83 ec 08             	sub    esp,0x8
10000058:	68 ec 56 00 10       	push   0x100056ec	10000059: R_386_32	.text
1000005d:	50                   	push   eax
1000005e:	e8 fc ff ff ff       	call   1000005f <ISA::ISA()+0x13>	1000005f: R_386_PC32	Bus::Bus(char const*)
10000063:	83 c4 10             	add    esp,0x10
10000066:	ba 08 00 00 00       	mov    edx,0x8	10000067: R_386_32	vtable for ISA
1000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000006e:	89 10                	mov    DWORD PTR [eax],edx
10000070:	90                   	nop
10000071:	c9                   	leave  
10000072:	c3                   	ret    
10000073:	90                   	nop

10000074 <ISA::open(int, int, void*)>:
10000074:	83 ec 18             	sub    esp,0x18
10000077:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000007b:	8b 10                	mov    edx,DWORD PTR [eax]
1000007d:	50                   	push   eax
1000007e:	ff 52 18             	call   DWORD PTR [edx+0x18]
10000081:	31 c0                	xor    eax,eax
10000083:	83 c4 1c             	add    esp,0x1c
10000086:	c3                   	ret    
10000087:	90                   	nop

10000088 <ISA::close(int, int, void*)>:
10000088:	31 c0                	xor    eax,eax
1000008a:	c3                   	ret    
1000008b:	90                   	nop

1000008c <ISA::doSpeaker()>:
1000008c:	c3                   	ret    
1000008d:	90                   	nop

1000008e <ISA::doSoundblaster()>:
1000008e:	56                   	push   esi
1000008f:	b0 01                	mov    al,0x1
10000091:	53                   	push   ebx
10000092:	bb 26 02 00 00       	mov    ebx,0x226
10000097:	83 ec 10             	sub    esp,0x10
1000009a:	89 da                	mov    edx,ebx
1000009c:	ee                   	out    dx,al
1000009d:	6a 1e                	push   0x1e
1000009f:	e8 fc ff ff ff       	call   100000a0 <ISA::doSoundblaster()+0x12>	100000a0: R_386_PC32	milliTenthSleep(unsigned int)
100000a4:	31 c0                	xor    eax,eax
100000a6:	89 da                	mov    edx,ebx
100000a8:	ee                   	out    dx,al
100000a9:	ba 2a 02 00 00       	mov    edx,0x22a
100000ae:	ec                   	in     al,dx
100000af:	83 c4 10             	add    esp,0x10
100000b2:	3c aa                	cmp    al,0xaa
100000b4:	75 77                	jne    1000012d <ISA::doSoundblaster()+0x9f>
100000b6:	83 ec 0c             	sub    esp,0xc
100000b9:	68 fc 01 00 00       	push   0x1fc
100000be:	e8 fc ff ff ff       	call   100000bf <ISA::doSoundblaster()+0x31>	100000bf: R_386_PC32	malloc
100000c3:	89 04 24             	mov    DWORD PTR [esp],eax
100000c6:	89 c3                	mov    ebx,eax
100000c8:	e8 fc ff ff ff       	call   100000c9 <ISA::doSoundblaster()+0x3b>	100000c9: R_386_PC32	SoundBlaster16::SoundBlaster16()
100000cd:	5a                   	pop    edx
100000ce:	59                   	pop    ecx
100000cf:	53                   	push   ebx
100000d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000d4:	e8 fc ff ff ff       	call   100000d5 <ISA::doSoundblaster()+0x47>	100000d5: R_386_PC32	Device::addChild(Device*)
100000d9:	6a 00                	push   0x0
100000db:	6a 00                	push   0x0
100000dd:	6a 00                	push   0x0
100000df:	53                   	push   ebx
100000e0:	e8 fc ff ff ff       	call   100000e1 <ISA::doSoundblaster()+0x53>	100000e1: R_386_PC32	SoundBlaster16::_open(int, int, void*)
100000e5:	83 c4 14             	add    esp,0x14
100000e8:	68 14 01 00 00       	push   0x114
100000ed:	e8 fc ff ff ff       	call   100000ee <ISA::doSoundblaster()+0x60>	100000ee: R_386_PC32	malloc
100000f2:	83 c4 0c             	add    esp,0xc
100000f5:	89 c6                	mov    esi,eax
100000f7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000f9: R_386_32	kernelProcess
100000fd:	68 f4 56 00 10       	push   0x100056f4	100000fe: R_386_32	.text
10000102:	50                   	push   eax
10000103:	e8 fc ff ff ff       	call   10000104 <ISA::doSoundblaster()+0x76>	10000104: R_386_PC32	File::File(char const*, Process*)
10000108:	89 34 24             	mov    DWORD PTR [esp],esi
1000010b:	e8 fc ff ff ff       	call   1000010c <ISA::doSoundblaster()+0x7e>	1000010c: R_386_PC32	File::exists()
10000110:	83 c4 10             	add    esp,0x10
10000113:	84 c0                	test   al,al
10000115:	74 16                	je     1000012d <ISA::doSoundblaster()+0x9f>
10000117:	6a 6f                	push   0x6f
10000119:	53                   	push   ebx
1000011a:	68 00 00 00 00       	push   0x0	1000011b: R_386_32	sb16Demo(void*)
1000011f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000121: R_386_32	kernelProcess
10000125:	e8 fc ff ff ff       	call   10000126 <ISA::doSoundblaster()+0x98>	10000126: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
1000012a:	83 c4 10             	add    esp,0x10
1000012d:	58                   	pop    eax
1000012e:	5b                   	pop    ebx
1000012f:	5e                   	pop    esi
10000130:	c3                   	ret    
10000131:	90                   	nop

10000132 <ISA::doSerial()>:
10000132:	c3                   	ret    
10000133:	90                   	nop

10000134 <ISA::doParallel()>:
10000134:	c3                   	ret    
10000135:	90                   	nop

10000136 <ISA::doGameport()>:
10000136:	53                   	push   ebx
10000137:	83 ec 14             	sub    esp,0x14
1000013a:	68 80 01 00 00       	push   0x180
1000013f:	e8 fc ff ff ff       	call   10000140 <ISA::doGameport()+0xa>	10000140: R_386_PC32	malloc
10000144:	89 04 24             	mov    DWORD PTR [esp],eax
10000147:	89 c3                	mov    ebx,eax
10000149:	e8 fc ff ff ff       	call   1000014a <ISA::doGameport()+0x14>	1000014a: R_386_PC32	Gameport::Gameport()
1000014e:	58                   	pop    eax
1000014f:	5a                   	pop    edx
10000150:	53                   	push   ebx
10000151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000155:	e8 fc ff ff ff       	call   10000156 <ISA::doGameport()+0x20>	10000156: R_386_PC32	Device::addChild(Device*)
1000015a:	6a 00                	push   0x0
1000015c:	8b 03                	mov    eax,DWORD PTR [ebx]
1000015e:	6a 00                	push   0x0
10000160:	6a 00                	push   0x0
10000162:	53                   	push   ebx
10000163:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000166:	83 c4 28             	add    esp,0x28
10000169:	5b                   	pop    ebx
1000016a:	c3                   	ret    
1000016b:	90                   	nop

1000016c <ISA::doFloppy()>:
1000016c:	f6 05 10 04 00 00 01 	test   BYTE PTR ds:0x410,0x1
10000173:	74 38                	je     100001ad <ISA::doFloppy()+0x41>
10000175:	53                   	push   ebx
10000176:	83 ec 14             	sub    esp,0x14
10000179:	68 b8 01 00 00       	push   0x1b8
1000017e:	e8 fc ff ff ff       	call   1000017f <ISA::doFloppy()+0x13>	1000017f: R_386_PC32	malloc
10000183:	89 04 24             	mov    DWORD PTR [esp],eax
10000186:	89 c3                	mov    ebx,eax
10000188:	e8 fc ff ff ff       	call   10000189 <ISA::doFloppy()+0x1d>	10000189: R_386_PC32	Floppy::Floppy()
1000018d:	58                   	pop    eax
1000018e:	5a                   	pop    edx
1000018f:	53                   	push   ebx
10000190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000194:	e8 fc ff ff ff       	call   10000195 <ISA::doFloppy()+0x29>	10000195: R_386_PC32	Device::addChild(Device*)
10000199:	6a 00                	push   0x0
1000019b:	6a 00                	push   0x0
1000019d:	68 f0 03 00 00       	push   0x3f0
100001a2:	53                   	push   ebx
100001a3:	e8 fc ff ff ff       	call   100001a4 <ISA::doFloppy()+0x38>	100001a4: R_386_PC32	Floppy::_open(int, int, void*)
100001a8:	83 c4 28             	add    esp,0x28
100001ab:	5b                   	pop    ebx
100001ac:	c3                   	ret    
100001ad:	c3                   	ret    

100001ae <ISA::doATA()>:
100001ae:	c3                   	ret    
100001af:	90                   	nop

100001b0 <ISA::doPS2()>:
100001b0:	53                   	push   ebx
100001b1:	83 ec 14             	sub    esp,0x14
100001b4:	68 00 00 00 00       	push   0x0	100001b5: R_386_32	str_ps2
100001b9:	e8 fc ff ff ff       	call   100001ba <ISA::doPS2()+0xa>	100001ba: R_386_PC32	Dbg::kprintf(char const*, ...)
100001be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	100001c1: R_386_32	str_ps2
100001c5:	e8 fc ff ff ff       	call   100001c6 <ISA::doPS2()+0x16>	100001c6: R_386_PC32	Dbg::kprintf(char const*, ...)
100001ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	100001cd: R_386_32	str_ps2
100001d1:	e8 fc ff ff ff       	call   100001d2 <ISA::doPS2()+0x22>	100001d2: R_386_PC32	Dbg::kprintf(char const*, ...)
100001d6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	100001d9: R_386_32	str_ps2
100001dd:	e8 fc ff ff ff       	call   100001de <ISA::doPS2()+0x2e>	100001de: R_386_PC32	Dbg::kprintf(char const*, ...)
100001e2:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
100001e9:	e8 fc ff ff ff       	call   100001ea <ISA::doPS2()+0x3a>	100001ea: R_386_PC32	malloc
100001ee:	89 04 24             	mov    DWORD PTR [esp],eax
100001f1:	89 c3                	mov    ebx,eax
100001f3:	e8 fc ff ff ff       	call   100001f4 <ISA::doPS2()+0x44>	100001f4: R_386_PC32	PS2::PS2()
100001f8:	58                   	pop    eax
100001f9:	5a                   	pop    edx
100001fa:	53                   	push   ebx
100001fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100001ff:	e8 fc ff ff ff       	call   10000200 <ISA::doPS2()+0x50>	10000200: R_386_PC32	Device::addChild(Device*)
10000204:	6a 00                	push   0x0
10000206:	8b 03                	mov    eax,DWORD PTR [ebx]
10000208:	6a 00                	push   0x0
1000020a:	6a 00                	push   0x0
1000020c:	53                   	push   ebx
1000020d:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000210:	83 c4 28             	add    esp,0x28
10000213:	5b                   	pop    ebx
10000214:	c3                   	ret    
10000215:	90                   	nop

10000216 <ISA::doRTC()>:
10000216:	c3                   	ret    
10000217:	90                   	nop

10000218 <ISA::detect()>:
10000218:	57                   	push   edi
10000219:	56                   	push   esi
1000021a:	53                   	push   ebx
1000021b:	83 ec 2c             	sub    esp,0x2c
1000021e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
10000222:	68 5c 01 00 00       	push   0x15c
10000227:	e8 fc ff ff ff       	call   10000228 <ISA::detect()+0x10>	10000228: R_386_PC32	malloc
1000022c:	89 04 24             	mov    DWORD PTR [esp],eax
1000022f:	89 c3                	mov    ebx,eax
10000231:	e8 fc ff ff ff       	call   10000232 <ISA::detect()+0x1a>	10000232: R_386_PC32	DMA::DMA()
10000236:	59                   	pop    ecx
10000237:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000239: R_386_32	isaDMAController
1000023d:	5e                   	pop    esi
1000023e:	53                   	push   ebx
1000023f:	57                   	push   edi
10000240:	e8 fc ff ff ff       	call   10000241 <ISA::detect()+0x29>	10000241: R_386_PC32	Device::addChild(Device*)
10000245:	a1 00 00 00 00       	mov    eax,ds:0x0	10000246: R_386_32	isaDMAController
1000024a:	8b 10                	mov    edx,DWORD PTR [eax]
1000024c:	6a 00                	push   0x0
1000024e:	6a 00                	push   0x0
10000250:	6a 00                	push   0x0
10000252:	50                   	push   eax
10000253:	ff 52 08             	call   DWORD PTR [edx+0x8]
10000256:	83 c4 20             	add    esp,0x20
10000259:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	1000025b: R_386_32	detectDone
10000260:	0f 85 fb 00 00 00    	jne    10000361 <ISA::detect()+0x149>
10000266:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10000268: R_386_32	detectDone
1000026d:	31 db                	xor    ebx,ebx
1000026f:	52                   	push   edx
10000270:	6a 01                	push   0x1
10000272:	68 00 00 00 00       	push   0x0	10000273: R_386_32	str_isadonesafe
10000277:	68 00 00 00 00       	push   0x0	10000278: R_386_32	str_isa
1000027c:	e8 fc ff ff ff       	call   1000027d <ISA::detect()+0x65>	1000027d: R_386_PC32	Reg::readBoolWithDefault(char*, char*, bool)
10000281:	83 c4 10             	add    esp,0x10
10000284:	50                   	push   eax
10000285:	50                   	push   eax
10000286:	68 00 00 00 00       	push   0x0	10000287: R_386_32	str_devices
1000028b:	8d 74 24 0c          	lea    esi,[esp+0xc]
1000028f:	56                   	push   esi
10000290:	e8 fc ff ff ff       	call   10000291 <ISA::detect()+0x79>	10000291: R_386_PC32	strcpy
10000295:	83 c4 10             	add    esp,0x10
10000298:	85 db                	test   ebx,ebx
1000029a:	75 09                	jne    100002a5 <ISA::detect()+0x8d>
1000029c:	50                   	push   eax
1000029d:	50                   	push   eax
1000029e:	68 00 00 00 00       	push   0x0	1000029f: R_386_32	str_spk
100002a3:	eb 52                	jmp    100002f7 <ISA::detect()+0xdf>
100002a5:	83 fb 01             	cmp    ebx,0x1
100002a8:	75 09                	jne    100002b3 <ISA::detect()+0x9b>
100002aa:	50                   	push   eax
100002ab:	50                   	push   eax
100002ac:	68 00 00 00 00       	push   0x0	100002ad: R_386_32	str_rtc
100002b1:	eb 44                	jmp    100002f7 <ISA::detect()+0xdf>
100002b3:	83 fb 02             	cmp    ebx,0x2
100002b6:	75 09                	jne    100002c1 <ISA::detect()+0xa9>
100002b8:	50                   	push   eax
100002b9:	50                   	push   eax
100002ba:	68 00 00 00 00       	push   0x0	100002bb: R_386_32	str_ps2
100002bf:	eb 36                	jmp    100002f7 <ISA::detect()+0xdf>
100002c1:	83 fb 03             	cmp    ebx,0x3
100002c4:	75 09                	jne    100002cf <ISA::detect()+0xb7>
100002c6:	50                   	push   eax
100002c7:	50                   	push   eax
100002c8:	68 00 00 00 00       	push   0x0	100002c9: R_386_32	str_floppy
100002cd:	eb 28                	jmp    100002f7 <ISA::detect()+0xdf>
100002cf:	83 fb 04             	cmp    ebx,0x4
100002d2:	75 09                	jne    100002dd <ISA::detect()+0xc5>
100002d4:	50                   	push   eax
100002d5:	50                   	push   eax
100002d6:	68 00 00 00 00       	push   0x0	100002d7: R_386_32	str_sb16
100002db:	eb 1a                	jmp    100002f7 <ISA::detect()+0xdf>
100002dd:	83 fb 05             	cmp    ebx,0x5
100002e0:	75 09                	jne    100002eb <ISA::detect()+0xd3>
100002e2:	51                   	push   ecx
100002e3:	51                   	push   ecx
100002e4:	68 00 00 00 00       	push   0x0	100002e5: R_386_32	str_isaata
100002e9:	eb 0c                	jmp    100002f7 <ISA::detect()+0xdf>
100002eb:	83 fb 06             	cmp    ebx,0x6
100002ee:	75 10                	jne    10000300 <ISA::detect()+0xe8>
100002f0:	52                   	push   edx
100002f1:	52                   	push   edx
100002f2:	68 00 00 00 00       	push   0x0	100002f3: R_386_32	str_gp
100002f7:	56                   	push   esi
100002f8:	e8 fc ff ff ff       	call   100002f9 <ISA::detect()+0xe1>	100002f9: R_386_PC32	strcat
100002fd:	83 c4 10             	add    esp,0x10
10000300:	50                   	push   eax
10000301:	6a ff                	push   0xffffffff
10000303:	56                   	push   esi
10000304:	68 00 00 00 00       	push   0x0	10000305: R_386_32	str_isa
10000309:	e8 fc ff ff ff       	call   1000030a <ISA::detect()+0xf2>	1000030a: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
1000030e:	83 c4 10             	add    esp,0x10
10000311:	83 f8 fe             	cmp    eax,0xfffffffe
10000314:	74 41                	je     10000357 <ISA::detect()+0x13f>
10000316:	83 fb 02             	cmp    ebx,0x2
10000319:	75 0b                	jne    10000326 <ISA::detect()+0x10e>
1000031b:	83 ec 0c             	sub    esp,0xc
1000031e:	57                   	push   edi
1000031f:	e8 fc ff ff ff       	call   10000320 <ISA::detect()+0x108>	10000320: R_386_PC32	ISA::doPS2()
10000324:	eb 2e                	jmp    10000354 <ISA::detect()+0x13c>
10000326:	83 fb 03             	cmp    ebx,0x3
10000329:	75 0b                	jne    10000336 <ISA::detect()+0x11e>
1000032b:	83 ec 0c             	sub    esp,0xc
1000032e:	57                   	push   edi
1000032f:	e8 fc ff ff ff       	call   10000330 <ISA::detect()+0x118>	10000330: R_386_PC32	ISA::doFloppy()
10000334:	eb 1e                	jmp    10000354 <ISA::detect()+0x13c>
10000336:	83 fb 04             	cmp    ebx,0x4
10000339:	75 0b                	jne    10000346 <ISA::detect()+0x12e>
1000033b:	83 ec 0c             	sub    esp,0xc
1000033e:	57                   	push   edi
1000033f:	e8 fc ff ff ff       	call   10000340 <ISA::detect()+0x128>	10000340: R_386_PC32	ISA::doSoundblaster()
10000344:	eb 0e                	jmp    10000354 <ISA::detect()+0x13c>
10000346:	83 fb 06             	cmp    ebx,0x6
10000349:	75 0c                	jne    10000357 <ISA::detect()+0x13f>
1000034b:	83 ec 0c             	sub    esp,0xc
1000034e:	57                   	push   edi
1000034f:	e8 fc ff ff ff       	call   10000350 <ISA::detect()+0x138>	10000350: R_386_PC32	ISA::doGameport()
10000354:	83 c4 10             	add    esp,0x10
10000357:	43                   	inc    ebx
10000358:	83 fb 07             	cmp    ebx,0x7
1000035b:	0f 85 23 ff ff ff    	jne    10000284 <ISA::detect()+0x6c>
10000361:	83 c4 20             	add    esp,0x20
10000364:	5b                   	pop    ebx
10000365:	5e                   	pop    esi
10000366:	5f                   	pop    edi
10000367:	c3                   	ret    

10000368 <floppyMotorFunction(void*)>:
10000368:	55                   	push   ebp
10000369:	89 e5                	mov    ebp,esp
1000036b:	83 ec 18             	sub    esp,0x18
1000036e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000371:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000374:	a1 00 00 00 00       	mov    eax,ds:0x0	10000375: R_386_32	irqDisableCounter
10000379:	48                   	dec    eax
1000037a:	a3 00 00 00 00       	mov    ds:0x0,eax	1000037b: R_386_32	irqDisableCounter
1000037f:	a1 00 00 00 00       	mov    eax,ds:0x0	10000380: R_386_32	irqDisableCounter
10000384:	85 c0                	test   eax,eax
10000386:	75 01                	jne    10000389 <floppyMotorFunction(void*)+0x21>
10000388:	fb                   	sti    
10000389:	83 ec 0c             	sub    esp,0xc
1000038c:	68 a0 0f 00 00       	push   0xfa0
10000391:	e8 fc ff ff ff       	call   10000392 <floppyMotorFunction(void*)+0x2a>	10000392: R_386_PC32	milliTenthSleep(unsigned int)
10000396:	83 c4 10             	add    esp,0x10
10000399:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100003a0:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
100003a4:	7f e3                	jg     10000389 <floppyMotorFunction(void*)+0x21>
100003a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100003a9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100003ac:	83 c2 58             	add    edx,0x58
100003af:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100003b3:	83 f8 02             	cmp    eax,0x2
100003b6:	0f 85 b5 00 00 00    	jne    10000471 <floppyMotorFunction(void*)+0x109>
100003bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100003bf:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100003c2:	83 c2 5c             	add    edx,0x5c
100003c5:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100003c9:	8d 88 70 fe ff ff    	lea    ecx,[eax-0x190]
100003cf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100003d2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100003d5:	83 c2 5c             	add    edx,0x5c
100003d8:	89 4c 90 0c          	mov    DWORD PTR [eax+edx*4+0xc],ecx
100003dc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100003df:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100003e2:	83 c2 5c             	add    edx,0x5c
100003e5:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100003e9:	85 c0                	test   eax,eax
100003eb:	0f 8f 80 00 00 00    	jg     10000471 <floppyMotorFunction(void*)+0x109>
100003f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100003f4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100003f7:	83 c2 58             	add    edx,0x58
100003fa:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
10000402:	83 ec 0c             	sub    esp,0xc
10000405:	68 e0 57 00 10       	push   0x100057e0	10000406: R_386_32	.text
1000040a:	e8 fc ff ff ff       	call   1000040b <floppyMotorFunction(void*)+0xa3>	1000040b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000040f:	83 c4 10             	add    esp,0x10
10000412:	fa                   	cli    
10000413:	a1 00 00 00 00       	mov    eax,ds:0x0	10000414: R_386_32	irqDisableCounter
10000418:	40                   	inc    eax
10000419:	a3 00 00 00 00       	mov    ds:0x0,eax	1000041a: R_386_32	irqDisableCounter
1000041e:	83 ec 08             	sub    esp,0x8
10000421:	6a 02                	push   0x2
10000423:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000426:	e8 fc ff ff ff       	call   10000427 <floppyMotorFunction(void*)+0xbf>	10000427: R_386_PC32	Floppy::readPort(FloppyReg)
1000042b:	83 c4 10             	add    esp,0x10
1000042e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000431:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000434:	ba 10 00 00 00       	mov    edx,0x10
10000439:	88 c1                	mov    cl,al
1000043b:	d3 e2                	shl    edx,cl
1000043d:	89 d0                	mov    eax,edx
1000043f:	f7 d0                	not    eax
10000441:	88 c2                	mov    dl,al
10000443:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000446:	21 d0                	and    eax,edx
10000448:	0f b6 c0             	movzx  eax,al
1000044b:	83 ec 04             	sub    esp,0x4
1000044e:	50                   	push   eax
1000044f:	6a 02                	push   0x2
10000451:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000454:	e8 fc ff ff ff       	call   10000455 <floppyMotorFunction(void*)+0xed>	10000455: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000459:	83 c4 10             	add    esp,0x10
1000045c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000045d: R_386_32	irqDisableCounter
10000461:	48                   	dec    eax
10000462:	a3 00 00 00 00       	mov    ds:0x0,eax	10000463: R_386_32	irqDisableCounter
10000467:	a1 00 00 00 00       	mov    eax,ds:0x0	10000468: R_386_32	irqDisableCounter
1000046c:	85 c0                	test   eax,eax
1000046e:	75 01                	jne    10000471 <floppyMotorFunction(void*)+0x109>
10000470:	fb                   	sti    
10000471:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000474:	e9 27 ff ff ff       	jmp    100003a0 <floppyMotorFunction(void*)+0x38>

10000479 <floppyIRQHandler(regs*, void*)>:
10000479:	55                   	push   ebp
1000047a:	89 e5                	mov    ebp,esp
1000047c:	83 ec 10             	sub    esp,0x10
1000047f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000482:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10000485:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000488:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
1000048f:	90                   	nop
10000490:	c9                   	leave  
10000491:	c3                   	ret    

10000492 <Floppy::Floppy()>:
10000492:	55                   	push   ebp
10000493:	89 e5                	mov    ebp,esp
10000495:	83 ec 08             	sub    esp,0x8
10000498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000049b:	83 ec 08             	sub    esp,0x8
1000049e:	68 01 58 00 10       	push   0x10005801	1000049f: R_386_32	.text
100004a3:	50                   	push   eax
100004a4:	e8 fc ff ff ff       	call   100004a5 <Floppy::Floppy()+0x13>	100004a5: R_386_PC32	HardDiskController::HardDiskController(char const*)
100004a9:	83 c4 10             	add    esp,0x10
100004ac:	ba 08 00 00 00       	mov    edx,0x8	100004ad: R_386_32	vtable for Floppy
100004b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004b4:	89 10                	mov    DWORD PTR [eax],edx
100004b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004b9:	66 c7 80 58 01 00 00 f0 03 	mov    WORD PTR [eax+0x158],0x3f0
100004c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004c5:	c6 80 8c 01 00 00 01 	mov    BYTE PTR [eax+0x18c],0x1
100004cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004cf:	c6 80 8d 01 00 00 00 	mov    BYTE PTR [eax+0x18d],0x0
100004d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004d9:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
100004e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004e3:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
100004ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004ed:	c6 80 90 01 00 00 01 	mov    BYTE PTR [eax+0x190],0x1
100004f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004f7:	c6 80 91 01 00 00 01 	mov    BYTE PTR [eax+0x191],0x1
100004fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000501:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000050b:	c7 80 94 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x194],0xffffffff
10000515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000518:	83 ec 0c             	sub    esp,0xc
1000051b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000051e:	6a 01                	push   0x1
10000520:	68 00 00 00 00       	push   0x0	10000521: R_386_32	floppyIRQHandler(regs*, void*)
10000525:	6a 06                	push   0x6
10000527:	50                   	push   eax
10000528:	e8 fc ff ff ff       	call   10000529 <Floppy::Floppy()+0x97>	10000529: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
1000052d:	83 c4 20             	add    esp,0x20
10000530:	89 c2                	mov    edx,eax
10000532:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000535:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
1000053b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000053c: R_386_32	kernelProcess
10000540:	68 d2 00 00 00       	push   0xd2
10000545:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000548:	68 00 00 00 00       	push   0x0	10000549: R_386_32	floppyMotorFunction(void*)
1000054d:	50                   	push   eax
1000054e:	e8 fc ff ff ff       	call   1000054f <Floppy::Floppy()+0xbd>	1000054f: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000553:	83 c4 10             	add    esp,0x10
10000556:	89 c2                	mov    edx,eax
10000558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000055b:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10000561:	a1 00 00 00 00       	mov    eax,ds:0x0	10000562: R_386_32	isaDMAController
10000566:	83 ec 08             	sub    esp,0x8
10000569:	6a 02                	push   0x2
1000056b:	50                   	push   eax
1000056c:	e8 fc ff ff ff       	call   1000056d <Floppy::Floppy()+0xdb>	1000056d: R_386_PC32	DMA::tryLockChannel(int)
10000571:	83 c4 10             	add    esp,0x10
10000574:	89 c2                	mov    edx,eax
10000576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000579:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
1000057f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000582:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000588:	83 ec 08             	sub    esp,0x8
1000058b:	68 00 48 00 00       	push   0x4800
10000590:	50                   	push   eax
10000591:	e8 fc ff ff ff       	call   10000592 <Floppy::Floppy()+0x100>	10000592: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
10000596:	83 c4 10             	add    esp,0x10
10000599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000059c:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
100005a2:	83 ec 0c             	sub    esp,0xc
100005a5:	50                   	push   eax
100005a6:	e8 fc ff ff ff       	call   100005a7 <Floppy::Floppy()+0x115>	100005a7: R_386_PC32	DMAChannel::getAddress()
100005ab:	83 c4 10             	add    esp,0x10
100005ae:	89 c2                	mov    edx,eax
100005b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005b3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
100005b9:	90                   	nop
100005ba:	c9                   	leave  
100005bb:	c3                   	ret    

100005bc <Floppy::wasFailure()>:
100005bc:	55                   	push   ebp
100005bd:	89 e5                	mov    ebp,esp
100005bf:	83 ec 10             	sub    esp,0x10
100005c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005c5:	c6 80 8f 01 00 00 01 	mov    BYTE PTR [eax+0x18f],0x1
100005cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005cf:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
100005d5:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
100005d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005db:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
100005e2:	8a 45 ff             	mov    al,BYTE PTR [ebp-0x1]
100005e5:	c9                   	leave  
100005e6:	c3                   	ret    
100005e7:	90                   	nop

100005e8 <Floppy::writeCommand(unsigned char)>:
100005e8:	55                   	push   ebp
100005e9:	89 e5                	mov    ebp,esp
100005eb:	83 ec 28             	sub    esp,0x28
100005ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100005f1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
100005f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005f7:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
100005fd:	84 c0                	test   al,al
100005ff:	74 10                	je     10000611 <Floppy::writeCommand(unsigned char)+0x29>
10000601:	83 ec 0c             	sub    esp,0xc
10000604:	68 18 58 00 10       	push   0x10005818	10000605: R_386_32	.text
10000609:	e8 fc ff ff ff       	call   1000060a <Floppy::writeCommand(unsigned char)+0x22>	1000060a: R_386_PC32	Krnl::panic(char const*)
1000060e:	83 c4 10             	add    esp,0x10
10000611:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000614:	8a 80 8f 01 00 00    	mov    al,BYTE PTR [eax+0x18f]
1000061a:	83 f0 01             	xor    eax,0x1
1000061d:	84 c0                	test   al,al
1000061f:	74 10                	je     10000631 <Floppy::writeCommand(unsigned char)+0x49>
10000621:	83 ec 0c             	sub    esp,0xc
10000624:	68 48 58 00 10       	push   0x10005848	10000625: R_386_32	.text
10000629:	e8 fc ff ff ff       	call   1000062a <Floppy::writeCommand(unsigned char)+0x42>	1000062a: R_386_PC32	Krnl::panic(char const*)
1000062e:	83 c4 10             	add    esp,0x10
10000631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000634:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
1000063b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000063e:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000645:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000064c:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
10000650:	7f 4e                	jg     100006a0 <Floppy::writeCommand(unsigned char)+0xb8>
10000652:	83 ec 0c             	sub    esp,0xc
10000655:	6a 64                	push   0x64
10000657:	e8 fc ff ff ff       	call   10000658 <Floppy::writeCommand(unsigned char)+0x70>	10000658: R_386_PC32	milliTenthSleep(unsigned int)
1000065c:	83 c4 10             	add    esp,0x10
1000065f:	83 ec 08             	sub    esp,0x8
10000662:	6a 04                	push   0x4
10000664:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000667:	e8 fc ff ff ff       	call   10000668 <Floppy::writeCommand(unsigned char)+0x80>	10000668: R_386_PC32	Floppy::readPort(FloppyReg)
1000066c:	83 c4 10             	add    esp,0x10
1000066f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000672:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000675:	84 c0                	test   al,al
10000677:	79 22                	jns    1000069b <Floppy::writeCommand(unsigned char)+0xb3>
10000679:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
1000067d:	83 e0 40             	and    eax,0x40
10000680:	85 c0                	test   eax,eax
10000682:	75 17                	jne    1000069b <Floppy::writeCommand(unsigned char)+0xb3>
10000684:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10000688:	83 ec 04             	sub    esp,0x4
1000068b:	50                   	push   eax
1000068c:	6a 05                	push   0x5
1000068e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000691:	e8 fc ff ff ff       	call   10000692 <Floppy::writeCommand(unsigned char)+0xaa>	10000692: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000696:	83 c4 10             	add    esp,0x10
10000699:	eb 0f                	jmp    100006aa <Floppy::writeCommand(unsigned char)+0xc2>
1000069b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000069e:	eb ac                	jmp    1000064c <Floppy::writeCommand(unsigned char)+0x64>
100006a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006a3:	c6 80 8e 01 00 00 01 	mov    BYTE PTR [eax+0x18e],0x1
100006aa:	c9                   	leave  
100006ab:	c3                   	ret    

100006ac <Floppy::readData()>:
100006ac:	55                   	push   ebp
100006ad:	89 e5                	mov    ebp,esp
100006af:	83 ec 18             	sub    esp,0x18
100006b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006b5:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
100006bb:	84 c0                	test   al,al
100006bd:	74 10                	je     100006cf <Floppy::readData()+0x23>
100006bf:	83 ec 0c             	sub    esp,0xc
100006c2:	68 18 58 00 10       	push   0x10005818	100006c3: R_386_32	.text
100006c7:	e8 fc ff ff ff       	call   100006c8 <Floppy::readData()+0x1c>	100006c8: R_386_PC32	Krnl::panic(char const*)
100006cc:	83 c4 10             	add    esp,0x10
100006cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006d2:	8a 80 8f 01 00 00    	mov    al,BYTE PTR [eax+0x18f]
100006d8:	83 f0 01             	xor    eax,0x1
100006db:	84 c0                	test   al,al
100006dd:	74 10                	je     100006ef <Floppy::readData()+0x43>
100006df:	83 ec 0c             	sub    esp,0xc
100006e2:	68 48 58 00 10       	push   0x10005848	100006e3: R_386_32	.text
100006e7:	e8 fc ff ff ff       	call   100006e8 <Floppy::readData()+0x3c>	100006e8: R_386_PC32	Krnl::panic(char const*)
100006ec:	83 c4 10             	add    esp,0x10
100006ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006f2:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
100006f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006fc:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000703:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000070a:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
1000070e:	7f 49                	jg     10000759 <Floppy::readData()+0xad>
10000710:	83 ec 0c             	sub    esp,0xc
10000713:	6a 64                	push   0x64
10000715:	e8 fc ff ff ff       	call   10000716 <Floppy::readData()+0x6a>	10000716: R_386_PC32	milliTenthSleep(unsigned int)
1000071a:	83 c4 10             	add    esp,0x10
1000071d:	83 ec 08             	sub    esp,0x8
10000720:	6a 04                	push   0x4
10000722:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000725:	e8 fc ff ff ff       	call   10000726 <Floppy::readData()+0x7a>	10000726: R_386_PC32	Floppy::readPort(FloppyReg)
1000072a:	83 c4 10             	add    esp,0x10
1000072d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000730:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000733:	84 c0                	test   al,al
10000735:	79 1d                	jns    10000754 <Floppy::readData()+0xa8>
10000737:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
1000073b:	83 e0 40             	and    eax,0x40
1000073e:	85 c0                	test   eax,eax
10000740:	74 12                	je     10000754 <Floppy::readData()+0xa8>
10000742:	83 ec 08             	sub    esp,0x8
10000745:	6a 05                	push   0x5
10000747:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000074a:	e8 fc ff ff ff       	call   1000074b <Floppy::readData()+0x9f>	1000074b: R_386_PC32	Floppy::readPort(FloppyReg)
1000074f:	83 c4 10             	add    esp,0x10
10000752:	eb 11                	jmp    10000765 <Floppy::readData()+0xb9>
10000754:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000757:	eb b1                	jmp    1000070a <Floppy::readData()+0x5e>
10000759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000075c:	c6 80 8e 01 00 00 01 	mov    BYTE PTR [eax+0x18e],0x1
10000763:	b0 00                	mov    al,0x0
10000765:	c9                   	leave  
10000766:	c3                   	ret    
10000767:	90                   	nop

10000768 <Floppy::readPort(FloppyReg)>:
10000768:	55                   	push   ebp
10000769:	89 e5                	mov    ebp,esp
1000076b:	83 ec 10             	sub    esp,0x10
1000076e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000771:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000777:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000077a:	01 d0                	add    eax,edx
1000077c:	0f b7 c0             	movzx  eax,ax
1000077f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
10000783:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
10000787:	89 c2                	mov    edx,eax
10000789:	ec                   	in     al,dx
1000078a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
1000078d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
10000790:	90                   	nop
10000791:	c9                   	leave  
10000792:	c3                   	ret    
10000793:	90                   	nop

10000794 <Floppy::writePort(FloppyReg, unsigned char)>:
10000794:	55                   	push   ebp
10000795:	89 e5                	mov    ebp,esp
10000797:	83 ec 14             	sub    esp,0x14
1000079a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000079d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
100007a0:	0f b6 4d ec          	movzx  ecx,BYTE PTR [ebp-0x14]
100007a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007a7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100007ad:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100007b0:	01 d0                	add    eax,edx
100007b2:	0f b7 c0             	movzx  eax,ax
100007b5:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
100007b9:	88 4d fd             	mov    BYTE PTR [ebp-0x3],cl
100007bc:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
100007bf:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
100007c3:	ee                   	out    dx,al
100007c4:	90                   	nop
100007c5:	c9                   	leave  
100007c6:	c3                   	ret    
100007c7:	90                   	nop

100007c8 <Floppy::driveDetection()>:
100007c8:	55                   	push   ebp
100007c9:	89 e5                	mov    ebp,esp
100007cb:	53                   	push   ebx
100007cc:	83 ec 24             	sub    esp,0x24
100007cf:	83 ec 0c             	sub    esp,0xc
100007d2:	68 76 58 00 10       	push   0x10005876	100007d3: R_386_32	.text
100007d7:	e8 fc ff ff ff       	call   100007d8 <Floppy::driveDetection()+0x10>	100007d8: R_386_PC32	Dbg::kprintf(char const*, ...)
100007dc:	83 c4 10             	add    esp,0x10
100007df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100007e8:	66 3d f0 03          	cmp    ax,0x3f0
100007ec:	0f 85 28 01 00 00    	jne    1000091a <Floppy::driveDetection()+0x152>
100007f2:	a1 00 00 00 00       	mov    eax,ds:0x0	100007f3: R_386_32	Krnl::computer
100007f7:	83 ec 08             	sub    esp,0x8
100007fa:	6a 10                	push   0x10
100007fc:	50                   	push   eax
100007fd:	e8 fc ff ff ff       	call   100007fe <Floppy::driveDetection()+0x36>	100007fe: R_386_PC32	Computer::readCMOS(unsigned char)
10000802:	83 c4 10             	add    esp,0x10
10000805:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000808:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000080c:	c1 f8 04             	sar    eax,0x4
1000080f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000812:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000816:	83 e0 0f             	and    eax,0xf
10000819:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000081c:	83 ec 08             	sub    esp,0x8
1000081f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000822:	68 90 58 00 10       	push   0x10005890	10000823: R_386_32	.text
10000827:	e8 fc ff ff ff       	call   10000828 <Floppy::driveDetection()+0x60>	10000828: R_386_PC32	Dbg::kprintf(char const*, ...)
1000082c:	83 c4 10             	add    esp,0x10
1000082f:	83 ec 08             	sub    esp,0x8
10000832:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000835:	68 a4 58 00 10       	push   0x100058a4	10000836: R_386_32	.text
1000083a:	e8 fc ff ff ff       	call   1000083b <Floppy::driveDetection()+0x73>	1000083b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000083f:	83 c4 10             	add    esp,0x10
10000842:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10000846:	74 63                	je     100008ab <Floppy::driveDetection()+0xe3>
10000848:	c7 45 e0 74 01 00 00 	mov    DWORD PTR [ebp-0x20],0x174
1000084f:	83 ec 0c             	sub    esp,0xc
10000852:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10000855:	e8 fc ff ff ff       	call   10000856 <Floppy::driveDetection()+0x8e>	10000856: R_386_PC32	malloc
1000085a:	83 c4 10             	add    esp,0x10
1000085d:	89 c3                	mov    ebx,eax
1000085f:	83 ec 0c             	sub    esp,0xc
10000862:	53                   	push   ebx
10000863:	e8 fc ff ff ff       	call   10000864 <Floppy::driveDetection()+0x9c>	10000864: R_386_PC32	FloppyDrive::FloppyDrive()
10000868:	83 c4 10             	add    esp,0x10
1000086b:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
1000086e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000871:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000874:	89 90 98 01 00 00    	mov    DWORD PTR [eax+0x198],edx
1000087a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000087d:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
10000880:	89 90 a8 01 00 00    	mov    DWORD PTR [eax+0x1a8],edx
10000886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000889:	83 ec 08             	sub    esp,0x8
1000088c:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
1000088f:	50                   	push   eax
10000890:	e8 fc ff ff ff       	call   10000891 <Floppy::driveDetection()+0xc9>	10000891: R_386_PC32	Device::addChild(Device*)
10000895:	83 c4 10             	add    esp,0x10
10000898:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000089b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000089e:	6a 00                	push   0x0
100008a0:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100008a3:	e8 fc ff ff ff       	call   100008a4 <Floppy::driveDetection()+0xdc>	100008a4: R_386_PC32	FloppyDrive::_open(int, int, void*)
100008a8:	83 c4 10             	add    esp,0x10
100008ab:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100008af:	74 69                	je     1000091a <Floppy::driveDetection()+0x152>
100008b1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100008b5:	74 63                	je     1000091a <Floppy::driveDetection()+0x152>
100008b7:	c7 45 dc 74 01 00 00 	mov    DWORD PTR [ebp-0x24],0x174
100008be:	83 ec 0c             	sub    esp,0xc
100008c1:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100008c4:	e8 fc ff ff ff       	call   100008c5 <Floppy::driveDetection()+0xfd>	100008c5: R_386_PC32	malloc
100008c9:	83 c4 10             	add    esp,0x10
100008cc:	89 c3                	mov    ebx,eax
100008ce:	83 ec 0c             	sub    esp,0xc
100008d1:	53                   	push   ebx
100008d2:	e8 fc ff ff ff       	call   100008d3 <Floppy::driveDetection()+0x10b>	100008d3: R_386_PC32	FloppyDrive::FloppyDrive()
100008d7:	83 c4 10             	add    esp,0x10
100008da:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
100008dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008e0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100008e3:	89 90 9c 01 00 00    	mov    DWORD PTR [eax+0x19c],edx
100008e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008ec:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100008ef:	89 90 ac 01 00 00    	mov    DWORD PTR [eax+0x1ac],edx
100008f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008f8:	83 ec 08             	sub    esp,0x8
100008fb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100008fe:	50                   	push   eax
100008ff:	e8 fc ff ff ff       	call   10000900 <Floppy::driveDetection()+0x138>	10000900: R_386_PC32	Device::addChild(Device*)
10000904:	83 c4 10             	add    esp,0x10
10000907:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000090a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000090d:	6a 01                	push   0x1
1000090f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000912:	e8 fc ff ff ff       	call   10000913 <Floppy::driveDetection()+0x14b>	10000913: R_386_PC32	FloppyDrive::_open(int, int, void*)
10000917:	83 c4 10             	add    esp,0x10
1000091a:	90                   	nop
1000091b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000091e:	c9                   	leave  
1000091f:	c3                   	ret    

10000920 <Floppy::close(int, int, void*)>:
10000920:	b8 00 00 00 00       	mov    eax,0x0
10000925:	c3                   	ret    

10000926 <Floppy::open(int, int, void*)>:
10000926:	b8 00 00 00 00       	mov    eax,0x0
1000092b:	c3                   	ret    

1000092c <Floppy::_open(int, int, void*)>:
1000092c:	55                   	push   ebp
1000092d:	89 e5                	mov    ebp,esp
1000092f:	83 ec 18             	sub    esp,0x18
10000932:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000935:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000938:	66 89 82 58 01 00 00 	mov    WORD PTR [edx+0x158],ax
1000093f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000942:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000948:	0f b6 c8             	movzx  ecx,al
1000094b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000094e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000954:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000957:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
1000095c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000095f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000965:	0f b6 d0             	movzx  edx,al
10000968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000096b:	c6 44 90 06 06       	mov    BYTE PTR [eax+edx*4+0x6],0x6
10000970:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000973:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000979:	8d 50 01             	lea    edx,[eax+0x1]
1000097c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000097f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000985:	0f b6 d0             	movzx  edx,al
10000988:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000098b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000098f:	83 e1 3f             	and    ecx,0x3f
10000992:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000996:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000999:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000099f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100009a2:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
100009a8:	0f b6 ca             	movzx  ecx,dl
100009ab:	83 c0 07             	add    eax,0x7
100009ae:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100009b1:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100009b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009bf:	0f b6 d0             	movzx  edx,al
100009c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009c5:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100009ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009cd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009d3:	8d 50 01             	lea    edx,[eax+0x1]
100009d6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100009d9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100009df:	0f b6 d0             	movzx  edx,al
100009e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009e5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100009e9:	83 e1 3f             	and    ecx,0x3f
100009ec:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100009f0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100009f7:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
100009fb:	7f 27                	jg     10000a24 <Floppy::_open(int, int, void*)+0xf8>
100009fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a00:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000a03:	83 c2 68             	add    edx,0x68
10000a06:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
10000a0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a11:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000a14:	83 c2 58             	add    edx,0x58
10000a17:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
10000a1f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000a22:	eb d3                	jmp    100009f7 <Floppy::_open(int, int, void*)+0xcb>
10000a24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a27:	e8 fc ff ff ff       	call   10000a28 <Floppy::_open(int, int, void*)+0xfc>	10000a28: R_386_PC32	Floppy::wasFailure()
10000a2c:	83 c4 04             	add    esp,0x4
10000a2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a32:	c6 80 91 01 00 00 01 	mov    BYTE PTR [eax+0x191],0x1
10000a39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a3c:	c6 80 8d 01 00 00 00 	mov    BYTE PTR [eax+0x18d],0x0
10000a43:	83 ec 0c             	sub    esp,0xc
10000a46:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a49:	e8 fc ff ff ff       	call   10000a4a <Floppy::_open(int, int, void*)+0x11e>	10000a4a: R_386_PC32	Floppy::reset()
10000a4e:	83 c4 10             	add    esp,0x10
10000a51:	83 ec 0c             	sub    esp,0xc
10000a54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a57:	e8 fc ff ff ff       	call   10000a58 <Floppy::_open(int, int, void*)+0x12c>	10000a58: R_386_PC32	Floppy::driveDetection()
10000a5c:	83 c4 10             	add    esp,0x10
10000a5f:	b8 00 00 00 00       	mov    eax,0x0
10000a64:	c9                   	leave  
10000a65:	c3                   	ret    

10000a66 <Floppy::senseInterrupt(int*, int*)>:
10000a66:	55                   	push   ebp
10000a67:	89 e5                	mov    ebp,esp
10000a69:	83 ec 08             	sub    esp,0x8
10000a6c:	83 ec 08             	sub    esp,0x8
10000a6f:	6a 08                	push   0x8
10000a71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a74:	e8 fc ff ff ff       	call   10000a75 <Floppy::senseInterrupt(int*, int*)+0xf>	10000a75: R_386_PC32	Floppy::writeCommand(unsigned char)
10000a79:	83 c4 10             	add    esp,0x10
10000a7c:	83 ec 0c             	sub    esp,0xc
10000a7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a82:	e8 fc ff ff ff       	call   10000a83 <Floppy::senseInterrupt(int*, int*)+0x1d>	10000a83: R_386_PC32	Floppy::wasFailure()
10000a87:	83 c4 10             	add    esp,0x10
10000a8a:	84 c0                	test   al,al
10000a8c:	74 04                	je     10000a92 <Floppy::senseInterrupt(int*, int*)+0x2c>
10000a8e:	b0 00                	mov    al,0x0
10000a90:	eb 5a                	jmp    10000aec <Floppy::senseInterrupt(int*, int*)+0x86>
10000a92:	83 ec 0c             	sub    esp,0xc
10000a95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a98:	e8 fc ff ff ff       	call   10000a99 <Floppy::senseInterrupt(int*, int*)+0x33>	10000a99: R_386_PC32	Floppy::readData()
10000a9d:	83 c4 10             	add    esp,0x10
10000aa0:	0f b6 d0             	movzx  edx,al
10000aa3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000aa6:	89 10                	mov    DWORD PTR [eax],edx
10000aa8:	83 ec 0c             	sub    esp,0xc
10000aab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000aae:	e8 fc ff ff ff       	call   10000aaf <Floppy::senseInterrupt(int*, int*)+0x49>	10000aaf: R_386_PC32	Floppy::wasFailure()
10000ab3:	83 c4 10             	add    esp,0x10
10000ab6:	84 c0                	test   al,al
10000ab8:	74 04                	je     10000abe <Floppy::senseInterrupt(int*, int*)+0x58>
10000aba:	b0 00                	mov    al,0x0
10000abc:	eb 2e                	jmp    10000aec <Floppy::senseInterrupt(int*, int*)+0x86>
10000abe:	83 ec 0c             	sub    esp,0xc
10000ac1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ac4:	e8 fc ff ff ff       	call   10000ac5 <Floppy::senseInterrupt(int*, int*)+0x5f>	10000ac5: R_386_PC32	Floppy::readData()
10000ac9:	83 c4 10             	add    esp,0x10
10000acc:	0f b6 d0             	movzx  edx,al
10000acf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000ad2:	89 10                	mov    DWORD PTR [eax],edx
10000ad4:	83 ec 0c             	sub    esp,0xc
10000ad7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ada:	e8 fc ff ff ff       	call   10000adb <Floppy::senseInterrupt(int*, int*)+0x75>	10000adb: R_386_PC32	Floppy::wasFailure()
10000adf:	83 c4 10             	add    esp,0x10
10000ae2:	84 c0                	test   al,al
10000ae4:	74 04                	je     10000aea <Floppy::senseInterrupt(int*, int*)+0x84>
10000ae6:	b0 00                	mov    al,0x0
10000ae8:	eb 02                	jmp    10000aec <Floppy::senseInterrupt(int*, int*)+0x86>
10000aea:	b0 01                	mov    al,0x1
10000aec:	c9                   	leave  
10000aed:	c3                   	ret    

10000aee <Floppy::lock()>:
10000aee:	55                   	push   ebp
10000aef:	89 e5                	mov    ebp,esp
10000af1:	83 ec 08             	sub    esp,0x8
10000af4:	83 ec 08             	sub    esp,0x8
10000af7:	6a 14                	push   0x14
10000af9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000afc:	e8 fc ff ff ff       	call   10000afd <Floppy::lock()+0xf>	10000afd: R_386_PC32	Floppy::writeCommand(unsigned char)
10000b01:	83 c4 10             	add    esp,0x10
10000b04:	83 ec 0c             	sub    esp,0xc
10000b07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b0a:	e8 fc ff ff ff       	call   10000b0b <Floppy::lock()+0x1d>	10000b0b: R_386_PC32	Floppy::wasFailure()
10000b0f:	83 c4 10             	add    esp,0x10
10000b12:	84 c0                	test   al,al
10000b14:	74 04                	je     10000b1a <Floppy::lock()+0x2c>
10000b16:	b0 00                	mov    al,0x0
10000b18:	eb 26                	jmp    10000b40 <Floppy::lock()+0x52>
10000b1a:	83 ec 0c             	sub    esp,0xc
10000b1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b20:	e8 fc ff ff ff       	call   10000b21 <Floppy::lock()+0x33>	10000b21: R_386_PC32	Floppy::readData()
10000b25:	83 c4 10             	add    esp,0x10
10000b28:	83 ec 0c             	sub    esp,0xc
10000b2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b2e:	e8 fc ff ff ff       	call   10000b2f <Floppy::lock()+0x41>	10000b2f: R_386_PC32	Floppy::wasFailure()
10000b33:	83 c4 10             	add    esp,0x10
10000b36:	84 c0                	test   al,al
10000b38:	74 04                	je     10000b3e <Floppy::lock()+0x50>
10000b3a:	b0 00                	mov    al,0x0
10000b3c:	eb 02                	jmp    10000b40 <Floppy::lock()+0x52>
10000b3e:	b0 01                	mov    al,0x1
10000b40:	c9                   	leave  
10000b41:	c3                   	ret    

10000b42 <Floppy::waitIRQ(int)>:
10000b42:	55                   	push   ebp
10000b43:	89 e5                	mov    ebp,esp
10000b45:	83 ec 18             	sub    esp,0x18
10000b48:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000b4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b52:	8a 80 68 01 00 00    	mov    al,BYTE PTR [eax+0x168]
10000b58:	84 c0                	test   al,al
10000b5a:	75 1f                	jne    10000b7b <Floppy::waitIRQ(int)+0x39>
10000b5c:	83 ec 0c             	sub    esp,0xc
10000b5f:	68 f4 01 00 00       	push   0x1f4
10000b64:	e8 fc ff ff ff       	call   10000b65 <Floppy::waitIRQ(int)+0x23>	10000b65: R_386_PC32	milliTenthSleep(unsigned int)
10000b69:	83 c4 10             	add    esp,0x10
10000b6c:	83 45 f4 32          	add    DWORD PTR [ebp-0xc],0x32
10000b70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000b73:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
10000b76:	7d 02                	jge    10000b7a <Floppy::waitIRQ(int)+0x38>
10000b78:	eb d5                	jmp    10000b4f <Floppy::waitIRQ(int)+0xd>
10000b7a:	90                   	nop
10000b7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b7e:	8a 80 68 01 00 00    	mov    al,BYTE PTR [eax+0x168]
10000b84:	c9                   	leave  
10000b85:	c3                   	ret    

10000b86 <Floppy::reset()>:
10000b86:	55                   	push   ebp
10000b87:	89 e5                	mov    ebp,esp
10000b89:	83 ec 28             	sub    esp,0x28
10000b8c:	83 ec 0c             	sub    esp,0xc
10000b8f:	68 b8 58 00 10       	push   0x100058b8	10000b90: R_386_32	.text
10000b94:	e8 fc ff ff ff       	call   10000b95 <Floppy::reset()+0xf>	10000b95: R_386_PC32	Dbg::kprintf(char const*, ...)
10000b99:	83 c4 10             	add    esp,0x10
10000b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b9f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10000ba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ba9:	c7 80 94 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x194],0xffffffff
10000bb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bb6:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000bbd:	83 ec 08             	sub    esp,0x8
10000bc0:	6a 02                	push   0x2
10000bc2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bc5:	e8 fc ff ff ff       	call   10000bc6 <Floppy::reset()+0x40>	10000bc6: R_386_PC32	Floppy::readPort(FloppyReg)
10000bca:	83 c4 10             	add    esp,0x10
10000bcd:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000bd0:	83 ec 04             	sub    esp,0x4
10000bd3:	6a 00                	push   0x0
10000bd5:	6a 02                	push   0x2
10000bd7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bda:	e8 fc ff ff ff       	call   10000bdb <Floppy::reset()+0x55>	10000bdb: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000bdf:	83 c4 10             	add    esp,0x10
10000be2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000be5:	83 c8 0c             	or     eax,0xc
10000be8:	0f b6 c0             	movzx  eax,al
10000beb:	83 ec 04             	sub    esp,0x4
10000bee:	50                   	push   eax
10000bef:	6a 02                	push   0x2
10000bf1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bf4:	e8 fc ff ff ff       	call   10000bf5 <Floppy::reset()+0x6f>	10000bf5: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000bf9:	83 c4 10             	add    esp,0x10
10000bfc:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
10000c00:	83 e0 08             	and    eax,0x8
10000c03:	85 c0                	test   eax,eax
10000c05:	74 3f                	je     10000c46 <Floppy::reset()+0xc0>
10000c07:	83 ec 08             	sub    esp,0x8
10000c0a:	68 90 01 00 00       	push   0x190
10000c0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c12:	e8 fc ff ff ff       	call   10000c13 <Floppy::reset()+0x8d>	10000c13: R_386_PC32	Floppy::waitIRQ(int)
10000c17:	83 c4 10             	add    esp,0x10
10000c1a:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10000c1d:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
10000c20:	83 f0 01             	xor    eax,0x1
10000c23:	84 c0                	test   al,al
10000c25:	74 3e                	je     10000c65 <Floppy::reset()+0xdf>
10000c27:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000c2a:	83 c8 0c             	or     eax,0xc
10000c2d:	0f b6 c0             	movzx  eax,al
10000c30:	83 ec 04             	sub    esp,0x4
10000c33:	50                   	push   eax
10000c34:	6a 02                	push   0x2
10000c36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c39:	e8 fc ff ff ff       	call   10000c3a <Floppy::reset()+0xb4>	10000c3a: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000c3e:	83 c4 10             	add    esp,0x10
10000c41:	e9 56 ff ff ff       	jmp    10000b9c <Floppy::reset()+0x16>
10000c46:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000c49:	83 c8 0c             	or     eax,0xc
10000c4c:	0f b6 c0             	movzx  eax,al
10000c4f:	83 ec 04             	sub    esp,0x4
10000c52:	50                   	push   eax
10000c53:	6a 02                	push   0x2
10000c55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c58:	e8 fc ff ff ff       	call   10000c59 <Floppy::reset()+0xd3>	10000c59: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000c5d:	83 c4 10             	add    esp,0x10
10000c60:	e9 37 ff ff ff       	jmp    10000b9c <Floppy::reset()+0x16>
10000c65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c68:	8a 80 91 01 00 00    	mov    al,BYTE PTR [eax+0x191]
10000c6e:	84 c0                	test   al,al
10000c70:	0f 84 8f 00 00 00    	je     10000d05 <Floppy::reset()+0x17f>
10000c76:	83 ec 04             	sub    esp,0x4
10000c79:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000c7c:	50                   	push   eax
10000c7d:	8d 45 e8             	lea    eax,[ebp-0x18]
10000c80:	50                   	push   eax
10000c81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c84:	e8 fc ff ff ff       	call   10000c85 <Floppy::reset()+0xff>	10000c85: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000c89:	83 c4 10             	add    esp,0x10
10000c8c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c8f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000c93:	74 19                	je     10000cae <Floppy::reset()+0x128>
10000c95:	83 ec 04             	sub    esp,0x4
10000c98:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000c9b:	50                   	push   eax
10000c9c:	8d 45 e8             	lea    eax,[ebp-0x18]
10000c9f:	50                   	push   eax
10000ca0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ca3:	e8 fc ff ff ff       	call   10000ca4 <Floppy::reset()+0x11e>	10000ca4: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000ca8:	83 c4 10             	add    esp,0x10
10000cab:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000cae:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000cb2:	74 19                	je     10000ccd <Floppy::reset()+0x147>
10000cb4:	83 ec 04             	sub    esp,0x4
10000cb7:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000cba:	50                   	push   eax
10000cbb:	8d 45 e8             	lea    eax,[ebp-0x18]
10000cbe:	50                   	push   eax
10000cbf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000cc2:	e8 fc ff ff ff       	call   10000cc3 <Floppy::reset()+0x13d>	10000cc3: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000cc7:	83 c4 10             	add    esp,0x10
10000cca:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000ccd:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000cd1:	74 19                	je     10000cec <Floppy::reset()+0x166>
10000cd3:	83 ec 04             	sub    esp,0x4
10000cd6:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000cd9:	50                   	push   eax
10000cda:	8d 45 e8             	lea    eax,[ebp-0x18]
10000cdd:	50                   	push   eax
10000cde:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ce1:	e8 fc ff ff ff       	call   10000ce2 <Floppy::reset()+0x15c>	10000ce2: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000ce6:	83 c4 10             	add    esp,0x10
10000ce9:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000cec:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000cef:	83 f0 01             	xor    eax,0x1
10000cf2:	84 c0                	test   al,al
10000cf4:	74 0f                	je     10000d05 <Floppy::reset()+0x17f>
10000cf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cf9:	c6 80 91 01 00 00 00 	mov    BYTE PTR [eax+0x191],0x0
10000d00:	e9 97 fe ff ff       	jmp    10000b9c <Floppy::reset()+0x16>
10000d05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d08:	8a 80 8c 01 00 00    	mov    al,BYTE PTR [eax+0x18c]
10000d0e:	84 c0                	test   al,al
10000d10:	75 14                	jne    10000d26 <Floppy::reset()+0x1a0>
10000d12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d15:	8a 80 8d 01 00 00    	mov    al,BYTE PTR [eax+0x18d]
10000d1b:	83 f0 01             	xor    eax,0x1
10000d1e:	84 c0                	test   al,al
10000d20:	0f 84 91 00 00 00    	je     10000db7 <Floppy::reset()+0x231>
10000d26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d29:	8a 80 90 01 00 00    	mov    al,BYTE PTR [eax+0x190]
10000d2f:	84 c0                	test   al,al
10000d31:	74 3c                	je     10000d6f <Floppy::reset()+0x1e9>
10000d33:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000d3a:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
10000d3e:	7f 2f                	jg     10000d6f <Floppy::reset()+0x1e9>
10000d40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d43:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000d46:	83 c2 68             	add    edx,0x68
10000d49:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000d4d:	85 c0                	test   eax,eax
10000d4f:	74 19                	je     10000d6a <Floppy::reset()+0x1e4>
10000d51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d54:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000d57:	83 c2 68             	add    edx,0x68
10000d5a:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000d5e:	83 ec 0c             	sub    esp,0xc
10000d61:	50                   	push   eax
10000d62:	e8 fc ff ff ff       	call   10000d63 <Floppy::reset()+0x1dd>	10000d63: R_386_PC32	FloppyDrive::floppyConfigure()
10000d67:	83 c4 10             	add    esp,0x10
10000d6a:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10000d6d:	eb cb                	jmp    10000d3a <Floppy::reset()+0x1b4>
10000d6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d72:	8a 80 8d 01 00 00    	mov    al,BYTE PTR [eax+0x18d]
10000d78:	83 f0 01             	xor    eax,0x1
10000d7b:	84 c0                	test   al,al
10000d7d:	74 38                	je     10000db7 <Floppy::reset()+0x231>
10000d7f:	83 ec 0c             	sub    esp,0xc
10000d82:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000d85:	e8 fc ff ff ff       	call   10000d86 <Floppy::reset()+0x200>	10000d86: R_386_PC32	Floppy::lock()
10000d8a:	83 c4 10             	add    esp,0x10
10000d8d:	83 f0 01             	xor    eax,0x1
10000d90:	88 c2                	mov    dl,al
10000d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d95:	88 90 8c 01 00 00    	mov    BYTE PTR [eax+0x18c],dl
10000d9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d9e:	c6 80 8d 01 00 00 01 	mov    BYTE PTR [eax+0x18d],0x1
10000da5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000da8:	8a 80 8c 01 00 00    	mov    al,BYTE PTR [eax+0x18c]
10000dae:	84 c0                	test   al,al
10000db0:	74 05                	je     10000db7 <Floppy::reset()+0x231>
10000db2:	e9 e5 fd ff ff       	jmp    10000b9c <Floppy::reset()+0x16>
10000db7:	90                   	nop
10000db8:	c9                   	leave  
10000db9:	c3                   	ret    

10000dba <Floppy::dmaInit(bool)>:
10000dba:	55                   	push   ebp
10000dbb:	89 e5                	mov    ebp,esp
10000dbd:	83 ec 18             	sub    esp,0x18
10000dc0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000dc3:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10000dc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dc9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000dcf:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
10000dd3:	74 07                	je     10000ddc <Floppy::dmaInit(bool)+0x22>
10000dd5:	ba 4a 00 00 00       	mov    edx,0x4a
10000dda:	eb 05                	jmp    10000de1 <Floppy::dmaInit(bool)+0x27>
10000ddc:	ba 46 00 00 00       	mov    edx,0x46
10000de1:	83 ec 08             	sub    esp,0x8
10000de4:	52                   	push   edx
10000de5:	50                   	push   eax
10000de6:	e8 fc ff ff ff       	call   10000de7 <Floppy::dmaInit(bool)+0x2d>	10000de7: R_386_PC32	DMAChannel::setMode(unsigned char)
10000deb:	83 c4 10             	add    esp,0x10
10000dee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000df1:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000df7:	83 ec 0c             	sub    esp,0xc
10000dfa:	50                   	push   eax
10000dfb:	e8 fc ff ff ff       	call   10000dfc <Floppy::dmaInit(bool)+0x42>	10000dfc: R_386_PC32	DMAChannel::start()
10000e00:	83 c4 10             	add    esp,0x10
10000e03:	90                   	nop
10000e04:	c9                   	leave  
10000e05:	c3                   	ret    

10000e06 <Floppy::specify(int)>:
10000e06:	55                   	push   ebp
10000e07:	89 e5                	mov    ebp,esp
10000e09:	57                   	push   edi
10000e0a:	56                   	push   esi
10000e0b:	53                   	push   ebx
10000e0c:	83 ec 3c             	sub    esp,0x3c
10000e0f:	8d 45 c0             	lea    eax,[ebp-0x40]
10000e12:	bb e4 58 00 10       	mov    ebx,0x100058e4	10000e13: R_386_32	.text
10000e17:	ba 04 00 00 00       	mov    edx,0x4
10000e1c:	89 c7                	mov    edi,eax
10000e1e:	89 de                	mov    esi,ebx
10000e20:	89 d1                	mov    ecx,edx
10000e22:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e27:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000e2a:	83 c2 64             	add    edx,0x64
10000e2d:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10000e31:	89 d0                	mov    eax,edx
10000e33:	c1 e0 02             	shl    eax,0x2
10000e36:	01 d0                	add    eax,edx
10000e38:	c1 e0 02             	shl    eax,0x2
10000e3b:	01 d0                	add    eax,edx
10000e3d:	05 10 00 00 00       	add    eax,0x10	10000e3e: R_386_32	floppyTable
10000e42:	8a 00                	mov    al,BYTE PTR [eax]
10000e44:	0f be c0             	movsx  eax,al
10000e47:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000e4a:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10000e4e:	75 10                	jne    10000e60 <Floppy::specify(int)+0x5a>
10000e50:	83 ec 0c             	sub    esp,0xc
10000e53:	68 ce 58 00 10       	push   0x100058ce	10000e54: R_386_32	.text
10000e58:	e8 fc ff ff ff       	call   10000e59 <Floppy::specify(int)+0x53>	10000e59: R_386_PC32	Krnl::panic(char const*)
10000e5d:	83 c4 10             	add    esp,0x10
10000e60:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000e63:	8b 44 85 c0          	mov    eax,DWORD PTR [ebp+eax*4-0x40]
10000e67:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000e6a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000e6d:	89 c2                	mov    edx,eax
10000e6f:	c1 e0 03             	shl    eax,0x3
10000e72:	89 d1                	mov    ecx,edx
10000e74:	29 c1                	sub    ecx,eax
10000e76:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000e7b:	f7 e9                	imul   ecx
10000e7d:	c1 fa 11             	sar    edx,0x11
10000e80:	89 c8                	mov    eax,ecx
10000e82:	c1 f8 1f             	sar    eax,0x1f
10000e85:	29 c2                	sub    edx,eax
10000e87:	89 d0                	mov    eax,edx
10000e89:	83 c0 10             	add    eax,0x10
10000e8c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000e8f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10000e92:	89 d0                	mov    eax,edx
10000e94:	01 c0                	add    eax,eax
10000e96:	01 d0                	add    eax,edx
10000e98:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10000e9f:	01 d0                	add    eax,edx
10000ea1:	01 c0                	add    eax,eax
10000ea3:	89 c1                	mov    ecx,eax
10000ea5:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000eaa:	f7 e9                	imul   ecx
10000eac:	c1 fa 12             	sar    edx,0x12
10000eaf:	89 c8                	mov    eax,ecx
10000eb1:	c1 f8 1f             	sar    eax,0x1f
10000eb4:	29 c2                	sub    edx,eax
10000eb6:	89 d0                	mov    eax,edx
10000eb8:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000ebb:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10000ec2:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10000ec9:	83 ec 08             	sub    esp,0x8
10000ecc:	6a 03                	push   0x3
10000ece:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ed1:	e8 fc ff ff ff       	call   10000ed2 <Floppy::specify(int)+0xcc>	10000ed2: R_386_PC32	Floppy::writeCommand(unsigned char)
10000ed6:	83 c4 10             	add    esp,0x10
10000ed9:	83 ec 0c             	sub    esp,0xc
10000edc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000edf:	e8 fc ff ff ff       	call   10000ee0 <Floppy::specify(int)+0xda>	10000ee0: R_386_PC32	Floppy::wasFailure()
10000ee4:	83 c4 10             	add    esp,0x10
10000ee7:	84 c0                	test   al,al
10000ee9:	74 04                	je     10000eef <Floppy::specify(int)+0xe9>
10000eeb:	b0 00                	mov    al,0x0
10000eed:	eb 6b                	jmp    10000f5a <Floppy::specify(int)+0x154>
10000eef:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000ef2:	c1 e0 04             	shl    eax,0x4
10000ef5:	88 c2                	mov    dl,al
10000ef7:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000efa:	09 d0                	or     eax,edx
10000efc:	0f b6 c0             	movzx  eax,al
10000eff:	83 ec 08             	sub    esp,0x8
10000f02:	50                   	push   eax
10000f03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f06:	e8 fc ff ff ff       	call   10000f07 <Floppy::specify(int)+0x101>	10000f07: R_386_PC32	Floppy::writeCommand(unsigned char)
10000f0b:	83 c4 10             	add    esp,0x10
10000f0e:	83 ec 0c             	sub    esp,0xc
10000f11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f14:	e8 fc ff ff ff       	call   10000f15 <Floppy::specify(int)+0x10f>	10000f15: R_386_PC32	Floppy::wasFailure()
10000f19:	83 c4 10             	add    esp,0x10
10000f1c:	84 c0                	test   al,al
10000f1e:	74 04                	je     10000f24 <Floppy::specify(int)+0x11e>
10000f20:	b0 00                	mov    al,0x0
10000f22:	eb 36                	jmp    10000f5a <Floppy::specify(int)+0x154>
10000f24:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000f27:	01 c0                	add    eax,eax
10000f29:	88 c2                	mov    dl,al
10000f2b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000f2e:	09 d0                	or     eax,edx
10000f30:	0f b6 c0             	movzx  eax,al
10000f33:	83 ec 08             	sub    esp,0x8
10000f36:	50                   	push   eax
10000f37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f3a:	e8 fc ff ff ff       	call   10000f3b <Floppy::specify(int)+0x135>	10000f3b: R_386_PC32	Floppy::writeCommand(unsigned char)
10000f3f:	83 c4 10             	add    esp,0x10
10000f42:	83 ec 0c             	sub    esp,0xc
10000f45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f48:	e8 fc ff ff ff       	call   10000f49 <Floppy::specify(int)+0x143>	10000f49: R_386_PC32	Floppy::wasFailure()
10000f4d:	83 c4 10             	add    esp,0x10
10000f50:	84 c0                	test   al,al
10000f52:	74 04                	je     10000f58 <Floppy::specify(int)+0x152>
10000f54:	b0 00                	mov    al,0x0
10000f56:	eb 02                	jmp    10000f5a <Floppy::specify(int)+0x154>
10000f58:	b0 01                	mov    al,0x1
10000f5a:	8d 65 f4             	lea    esp,[ebp-0xc]
10000f5d:	5b                   	pop    ebx
10000f5e:	5e                   	pop    esi
10000f5f:	5f                   	pop    edi
10000f60:	5d                   	pop    ebp
10000f61:	c3                   	ret    

10000f62 <Floppy::select(int, bool)>:
10000f62:	55                   	push   ebp
10000f63:	89 e5                	mov    ebp,esp
10000f65:	83 ec 28             	sub    esp,0x28
10000f68:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000f6b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f71:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000f77:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000f7a:	75 27                	jne    10000fa3 <Floppy::select(int, bool)+0x41>
10000f7c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
10000f7f:	83 f0 01             	xor    eax,0x1
10000f82:	84 c0                	test   al,al
10000f84:	74 1d                	je     10000fa3 <Floppy::select(int, bool)+0x41>
10000f86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f89:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000f8f:	83 f8 ff             	cmp    eax,0xffffffff
10000f92:	74 0f                	je     10000fa3 <Floppy::select(int, bool)+0x41>
10000f94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f97:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000f9e:	e9 34 02 00 00       	jmp    100011d7 <Floppy::select(int, bool)+0x275>
10000fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fa6:	8a 80 92 01 00 00    	mov    al,BYTE PTR [eax+0x192]
10000fac:	83 f0 01             	xor    eax,0x1
10000faf:	84 c0                	test   al,al
10000fb1:	75 12                	jne    10000fc5 <Floppy::select(int, bool)+0x63>
10000fb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fb6:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000fbc:	83 f8 ff             	cmp    eax,0xffffffff
10000fbf:	0f 85 12 02 00 00    	jne    100011d7 <Floppy::select(int, bool)+0x275>
10000fc5:	83 ec 08             	sub    esp,0x8
10000fc8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000fcb:	68 f4 58 00 10       	push   0x100058f4	10000fcc: R_386_32	.text
10000fd0:	e8 fc ff ff ff       	call   10000fd1 <Floppy::select(int, bool)+0x6f>	10000fd1: R_386_PC32	Dbg::kprintf(char const*, ...)
10000fd5:	83 c4 10             	add    esp,0x10
10000fd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fdb:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000fe1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000fe4:	0f 84 b5 01 00 00    	je     1000119f <Floppy::select(int, bool)+0x23d>
10000fea:	83 ec 0c             	sub    esp,0xc
10000fed:	68 04 59 00 10       	push   0x10005904	10000fee: R_386_32	.text
10000ff2:	e8 fc ff ff ff       	call   10000ff3 <Floppy::select(int, bool)+0x91>	10000ff3: R_386_PC32	Dbg::kprintf(char const*, ...)
10000ff7:	83 c4 10             	add    esp,0x10
10000ffa:	fa                   	cli    
10000ffb:	a1 00 00 00 00       	mov    eax,ds:0x0	10000ffc: R_386_32	irqDisableCounter
10001000:	40                   	inc    eax
10001001:	a3 00 00 00 00       	mov    ds:0x0,eax	10001002: R_386_32	irqDisableCounter
10001006:	83 ec 0c             	sub    esp,0xc
10001009:	68 11 59 00 10       	push   0x10005911	1000100a: R_386_32	.text
1000100e:	e8 fc ff ff ff       	call   1000100f <Floppy::select(int, bool)+0xad>	1000100f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001013:	83 c4 10             	add    esp,0x10
10001016:	83 ec 08             	sub    esp,0x8
10001019:	6a 02                	push   0x2
1000101b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000101e:	e8 fc ff ff ff       	call   1000101f <Floppy::select(int, bool)+0xbd>	1000101f: R_386_PC32	Floppy::readPort(FloppyReg)
10001023:	83 c4 10             	add    esp,0x10
10001026:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10001029:	80 65 f7 fc          	and    BYTE PTR [ebp-0x9],0xfc
1000102d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001030:	88 c2                	mov    dl,al
10001032:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10001035:	09 d0                	or     eax,edx
10001037:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000103a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000103e:	83 ec 04             	sub    esp,0x4
10001041:	50                   	push   eax
10001042:	6a 02                	push   0x2
10001044:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001047:	e8 fc ff ff ff       	call   10001048 <Floppy::select(int, bool)+0xe6>	10001048: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
1000104c:	83 c4 10             	add    esp,0x10
1000104f:	83 ec 0c             	sub    esp,0xc
10001052:	68 20 03 00 00       	push   0x320
10001057:	e8 fc ff ff ff       	call   10001058 <Floppy::select(int, bool)+0xf6>	10001058: R_386_PC32	milliTenthSleep(unsigned int)
1000105c:	83 c4 10             	add    esp,0x10
1000105f:	83 ec 0c             	sub    esp,0xc
10001062:	68 1e 59 00 10       	push   0x1000591e	10001063: R_386_32	.text
10001067:	e8 fc ff ff ff       	call   10001068 <Floppy::select(int, bool)+0x106>	10001068: R_386_PC32	Dbg::kprintf(char const*, ...)
1000106c:	83 c4 10             	add    esp,0x10
1000106f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001072:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001075:	83 c2 64             	add    edx,0x64
10001078:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
1000107c:	89 d0                	mov    eax,edx
1000107e:	c1 e0 02             	shl    eax,0x2
10001081:	01 d0                	add    eax,edx
10001083:	c1 e0 02             	shl    eax,0x2
10001086:	01 d0                	add    eax,edx
10001088:	05 10 00 00 00       	add    eax,0x10	10001089: R_386_32	floppyTable
1000108d:	8a 00                	mov    al,BYTE PTR [eax]
1000108f:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
10001092:	80 7d f6 ff          	cmp    BYTE PTR [ebp-0xa],0xff
10001096:	75 10                	jne    100010a8 <Floppy::select(int, bool)+0x146>
10001098:	83 ec 0c             	sub    esp,0xc
1000109b:	68 2c 59 00 10       	push   0x1000592c	1000109c: R_386_32	.text
100010a0:	e8 fc ff ff ff       	call   100010a1 <Floppy::select(int, bool)+0x13f>	100010a1: R_386_PC32	Krnl::panic(char const*)
100010a5:	83 c4 10             	add    esp,0x10
100010a8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
100010ab:	0f b6 c0             	movzx  eax,al
100010ae:	83 ec 04             	sub    esp,0x4
100010b1:	50                   	push   eax
100010b2:	6a 07                	push   0x7
100010b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100010b7:	e8 fc ff ff ff       	call   100010b8 <Floppy::select(int, bool)+0x156>	100010b8: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100010bc:	83 c4 10             	add    esp,0x10
100010bf:	a1 00 00 00 00       	mov    eax,ds:0x0	100010c0: R_386_32	irqDisableCounter
100010c4:	48                   	dec    eax
100010c5:	a3 00 00 00 00       	mov    ds:0x0,eax	100010c6: R_386_32	irqDisableCounter
100010ca:	a1 00 00 00 00       	mov    eax,ds:0x0	100010cb: R_386_32	irqDisableCounter
100010cf:	85 c0                	test   eax,eax
100010d1:	75 01                	jne    100010d4 <Floppy::select(int, bool)+0x172>
100010d3:	fb                   	sti    
100010d4:	83 ec 0c             	sub    esp,0xc
100010d7:	68 5b 59 00 10       	push   0x1000595b	100010d8: R_386_32	.text
100010dc:	e8 fc ff ff ff       	call   100010dd <Floppy::select(int, bool)+0x17b>	100010dd: R_386_PC32	Dbg::kprintf(char const*, ...)
100010e1:	83 c4 10             	add    esp,0x10
100010e4:	83 ec 08             	sub    esp,0x8
100010e7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100010ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100010ed:	e8 fc ff ff ff       	call   100010ee <Floppy::select(int, bool)+0x18c>	100010ee: R_386_PC32	Floppy::specify(int)
100010f2:	83 c4 10             	add    esp,0x10
100010f5:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
100010f8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100010fb:	83 f0 01             	xor    eax,0x1
100010fe:	84 c0                	test   al,al
10001100:	74 25                	je     10001127 <Floppy::select(int, bool)+0x1c5>
10001102:	83 ec 0c             	sub    esp,0xc
10001105:	68 68 59 00 10       	push   0x10005968	10001106: R_386_32	.text
1000110a:	e8 fc ff ff ff       	call   1000110b <Floppy::select(int, bool)+0x1a9>	1000110b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000110f:	83 c4 10             	add    esp,0x10
10001112:	83 ec 0c             	sub    esp,0xc
10001115:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001118:	e8 fc ff ff ff       	call   10001119 <Floppy::select(int, bool)+0x1b7>	10001119: R_386_PC32	Floppy::reset()
1000111d:	83 c4 10             	add    esp,0x10
10001120:	b0 00                	mov    al,0x0
10001122:	e9 d2 00 00 00       	jmp    100011f9 <Floppy::select(int, bool)+0x297>
10001127:	83 ec 0c             	sub    esp,0xc
1000112a:	68 79 59 00 10       	push   0x10005979	1000112b: R_386_32	.text
1000112f:	e8 fc ff ff ff       	call   10001130 <Floppy::select(int, bool)+0x1ce>	10001130: R_386_PC32	Dbg::kprintf(char const*, ...)
10001134:	83 c4 10             	add    esp,0x10
10001137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000113a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000113d:	83 c2 68             	add    edx,0x68
10001140:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10001144:	83 ec 0c             	sub    esp,0xc
10001147:	50                   	push   eax
10001148:	e8 fc ff ff ff       	call   10001149 <Floppy::select(int, bool)+0x1e7>	10001149: R_386_PC32	FloppyDrive::calibrate()
1000114d:	83 c4 10             	add    esp,0x10
10001150:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10001153:	83 ec 0c             	sub    esp,0xc
10001156:	68 86 59 00 10       	push   0x10005986	10001157: R_386_32	.text
1000115b:	e8 fc ff ff ff       	call   1000115c <Floppy::select(int, bool)+0x1fa>	1000115c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001160:	83 c4 10             	add    esp,0x10
10001163:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10001166:	83 f0 01             	xor    eax,0x1
10001169:	84 c0                	test   al,al
1000116b:	74 22                	je     1000118f <Floppy::select(int, bool)+0x22d>
1000116d:	83 ec 0c             	sub    esp,0xc
10001170:	68 94 59 00 10       	push   0x10005994	10001171: R_386_32	.text
10001175:	e8 fc ff ff ff       	call   10001176 <Floppy::select(int, bool)+0x214>	10001176: R_386_PC32	Dbg::kprintf(char const*, ...)
1000117a:	83 c4 10             	add    esp,0x10
1000117d:	83 ec 0c             	sub    esp,0xc
10001180:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001183:	e8 fc ff ff ff       	call   10001184 <Floppy::select(int, bool)+0x222>	10001184: R_386_PC32	Floppy::reset()
10001188:	83 c4 10             	add    esp,0x10
1000118b:	b0 00                	mov    al,0x0
1000118d:	eb 6a                	jmp    100011f9 <Floppy::select(int, bool)+0x297>
1000118f:	83 ec 0c             	sub    esp,0xc
10001192:	68 a6 59 00 10       	push   0x100059a6	10001193: R_386_32	.text
10001197:	e8 fc ff ff ff       	call   10001198 <Floppy::select(int, bool)+0x236>	10001198: R_386_PC32	Dbg::kprintf(char const*, ...)
1000119c:	83 c4 10             	add    esp,0x10
1000119f:	83 ec 0c             	sub    esp,0xc
100011a2:	68 b3 59 00 10       	push   0x100059b3	100011a3: R_386_32	.text
100011a7:	e8 fc ff ff ff       	call   100011a8 <Floppy::select(int, bool)+0x246>	100011a8: R_386_PC32	Dbg::kprintf(char const*, ...)
100011ac:	83 c4 10             	add    esp,0x10
100011af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100011b2:	8a 55 e4             	mov    dl,BYTE PTR [ebp-0x1c]
100011b5:	88 90 92 01 00 00    	mov    BYTE PTR [eax+0x192],dl
100011bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100011be:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100011c1:	89 90 94 01 00 00    	mov    DWORD PTR [eax+0x194],edx
100011c7:	83 ec 0c             	sub    esp,0xc
100011ca:	68 c0 59 00 10       	push   0x100059c0	100011cb: R_386_32	.text
100011cf:	e8 fc ff ff ff       	call   100011d0 <Floppy::select(int, bool)+0x26e>	100011d0: R_386_PC32	Dbg::kprintf(char const*, ...)
100011d4:	83 c4 10             	add    esp,0x10
100011d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100011da:	8a 80 92 01 00 00    	mov    al,BYTE PTR [eax+0x192]
100011e0:	84 c0                	test   al,al
100011e2:	74 12                	je     100011f6 <Floppy::select(int, bool)+0x294>
100011e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100011e7:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
100011ed:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
100011f0:	75 04                	jne    100011f6 <Floppy::select(int, bool)+0x294>
100011f2:	b0 01                	mov    al,0x1
100011f4:	eb 02                	jmp    100011f8 <Floppy::select(int, bool)+0x296>
100011f6:	b0 00                	mov    al,0x0
100011f8:	90                   	nop
100011f9:	c9                   	leave  
100011fa:	c3                   	ret    
100011fb:	90                   	nop

100011fc <Floppy::motor(int, bool)>:
100011fc:	55                   	push   ebp
100011fd:	89 e5                	mov    ebp,esp
100011ff:	53                   	push   ebx
10001200:	83 ec 24             	sub    esp,0x24
10001203:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001206:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10001209:	83 ec 0c             	sub    esp,0xc
1000120c:	68 cd 59 00 10       	push   0x100059cd	1000120d: R_386_32	.text
10001211:	e8 fc ff ff ff       	call   10001212 <Floppy::motor(int, bool)+0x16>	10001212: R_386_PC32	Dbg::kprintf(char const*, ...)
10001216:	83 c4 10             	add    esp,0x10
10001219:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
1000121d:	83 ec 04             	sub    esp,0x4
10001220:	50                   	push   eax
10001221:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001224:	68 dc 59 00 10       	push   0x100059dc	10001225: R_386_32	.text
10001229:	e8 fc ff ff ff       	call   1000122a <Floppy::motor(int, bool)+0x2e>	1000122a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000122e:	83 c4 10             	add    esp,0x10
10001231:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
10001235:	0f 84 7b 01 00 00    	je     100013b6 <Floppy::motor(int, bool)+0x1ba>
1000123b:	83 ec 0c             	sub    esp,0xc
1000123e:	68 f2 59 00 10       	push   0x100059f2	1000123f: R_386_32	.text
10001243:	e8 fc ff ff ff       	call   10001244 <Floppy::motor(int, bool)+0x48>	10001244: R_386_PC32	Dbg::kprintf(char const*, ...)
10001248:	83 c4 10             	add    esp,0x10
1000124b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000124e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001251:	83 c2 58             	add    edx,0x58
10001254:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10001258:	85 c0                	test   eax,eax
1000125a:	0f 85 21 01 00 00    	jne    10001381 <Floppy::motor(int, bool)+0x185>
10001260:	83 ec 0c             	sub    esp,0xc
10001263:	68 fa 59 00 10       	push   0x100059fa	10001264: R_386_32	.text
10001268:	e8 fc ff ff ff       	call   10001269 <Floppy::motor(int, bool)+0x6d>	10001269: R_386_PC32	Dbg::kprintf(char const*, ...)
1000126d:	83 c4 10             	add    esp,0x10
10001270:	fa                   	cli    
10001271:	a1 00 00 00 00       	mov    eax,ds:0x0	10001272: R_386_32	irqDisableCounter
10001276:	40                   	inc    eax
10001277:	a3 00 00 00 00       	mov    ds:0x0,eax	10001278: R_386_32	irqDisableCounter
1000127c:	83 ec 08             	sub    esp,0x8
1000127f:	6a 02                	push   0x2
10001281:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001284:	e8 fc ff ff ff       	call   10001285 <Floppy::motor(int, bool)+0x89>	10001285: R_386_PC32	Floppy::readPort(FloppyReg)
10001289:	83 c4 10             	add    esp,0x10
1000128c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000128f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10001293:	83 ec 08             	sub    esp,0x8
10001296:	50                   	push   eax
10001297:	68 0f 5a 00 10       	push   0x10005a0f	10001298: R_386_32	.text
1000129c:	e8 fc ff ff ff       	call   1000129d <Floppy::motor(int, bool)+0xa1>	1000129d: R_386_PC32	Dbg::kprintf(char const*, ...)
100012a1:	83 c4 10             	add    esp,0x10
100012a4:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
100012a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100012ab:	bb 10 00 00 00       	mov    ebx,0x10
100012b0:	88 c1                	mov    cl,al
100012b2:	d3 e3                	shl    ebx,cl
100012b4:	89 d8                	mov    eax,ebx
100012b6:	09 d0                	or     eax,edx
100012b8:	83 ec 08             	sub    esp,0x8
100012bb:	50                   	push   eax
100012bc:	68 1d 5a 00 10       	push   0x10005a1d	100012bd: R_386_32	.text
100012c1:	e8 fc ff ff ff       	call   100012c2 <Floppy::motor(int, bool)+0xc6>	100012c2: R_386_PC32	Dbg::kprintf(char const*, ...)
100012c6:	83 c4 10             	add    esp,0x10
100012c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100012cc:	ba 10 00 00 00       	mov    edx,0x10
100012d1:	88 c1                	mov    cl,al
100012d3:	d3 e2                	shl    edx,cl
100012d5:	89 d0                	mov    eax,edx
100012d7:	88 c2                	mov    dl,al
100012d9:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
100012dc:	09 d0                	or     eax,edx
100012de:	0f b6 c0             	movzx  eax,al
100012e1:	83 ec 04             	sub    esp,0x4
100012e4:	50                   	push   eax
100012e5:	6a 02                	push   0x2
100012e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012ea:	e8 fc ff ff ff       	call   100012eb <Floppy::motor(int, bool)+0xef>	100012eb: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100012ef:	83 c4 10             	add    esp,0x10
100012f2:	a1 00 00 00 00       	mov    eax,ds:0x0	100012f3: R_386_32	irqDisableCounter
100012f7:	48                   	dec    eax
100012f8:	a3 00 00 00 00       	mov    ds:0x0,eax	100012f9: R_386_32	irqDisableCounter
100012fd:	a1 00 00 00 00       	mov    eax,ds:0x0	100012fe: R_386_32	irqDisableCounter
10001302:	85 c0                	test   eax,eax
10001304:	75 01                	jne    10001307 <Floppy::motor(int, bool)+0x10b>
10001306:	fb                   	sti    
10001307:	83 ec 0c             	sub    esp,0xc
1000130a:	68 2b 5a 00 10       	push   0x10005a2b	1000130b: R_386_32	.text
1000130f:	e8 fc ff ff ff       	call   10001310 <Floppy::motor(int, bool)+0x114>	10001310: R_386_PC32	Dbg::kprintf(char const*, ...)
10001314:	83 c4 10             	add    esp,0x10
10001317:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000131a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000131d:	83 c2 64             	add    edx,0x64
10001320:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10001324:	83 f8 04             	cmp    eax,0x4
10001327:	75 12                	jne    1000133b <Floppy::motor(int, bool)+0x13f>
10001329:	83 ec 0c             	sub    esp,0xc
1000132c:	68 b8 0b 00 00       	push   0xbb8
10001331:	e8 fc ff ff ff       	call   10001332 <Floppy::motor(int, bool)+0x136>	10001332: R_386_PC32	milliTenthSleep(unsigned int)
10001336:	83 c4 10             	add    esp,0x10
10001339:	eb 10                	jmp    1000134b <Floppy::motor(int, bool)+0x14f>
1000133b:	83 ec 0c             	sub    esp,0xc
1000133e:	68 88 13 00 00       	push   0x1388
10001343:	e8 fc ff ff ff       	call   10001344 <Floppy::motor(int, bool)+0x148>	10001344: R_386_PC32	milliTenthSleep(unsigned int)
10001348:	83 c4 10             	add    esp,0x10
1000134b:	83 ec 0c             	sub    esp,0xc
1000134e:	68 39 5a 00 10       	push   0x10005a39	1000134f: R_386_32	.text
10001353:	e8 fc ff ff ff       	call   10001354 <Floppy::motor(int, bool)+0x158>	10001354: R_386_PC32	Dbg::kprintf(char const*, ...)
10001358:	83 c4 10             	add    esp,0x10
1000135b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000135e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001361:	83 c2 58             	add    edx,0x58
10001364:	c7 44 90 0c 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x1
1000136c:	83 ec 0c             	sub    esp,0xc
1000136f:	68 49 5a 00 10       	push   0x10005a49	10001370: R_386_32	.text
10001374:	e8 fc ff ff ff       	call   10001375 <Floppy::motor(int, bool)+0x179>	10001375: R_386_PC32	Dbg::kprintf(char const*, ...)
10001379:	83 c4 10             	add    esp,0x10
1000137c:	e9 89 00 00 00       	jmp    1000140a <Floppy::motor(int, bool)+0x20e>
10001381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001384:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001387:	83 c2 58             	add    edx,0x58
1000138a:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
1000138e:	83 f8 02             	cmp    eax,0x2
10001391:	75 77                	jne    1000140a <Floppy::motor(int, bool)+0x20e>
10001393:	83 ec 0c             	sub    esp,0xc
10001396:	68 59 5a 00 10       	push   0x10005a59	10001397: R_386_32	.text
1000139b:	e8 fc ff ff ff       	call   1000139c <Floppy::motor(int, bool)+0x1a0>	1000139c: R_386_PC32	Dbg::kprintf(char const*, ...)
100013a0:	83 c4 10             	add    esp,0x10
100013a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013a6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100013a9:	83 c2 58             	add    edx,0x58
100013ac:	c7 44 90 0c 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x1
100013b4:	eb 54                	jmp    1000140a <Floppy::motor(int, bool)+0x20e>
100013b6:	83 ec 0c             	sub    esp,0xc
100013b9:	68 69 5a 00 10       	push   0x10005a69	100013ba: R_386_32	.text
100013be:	e8 fc ff ff ff       	call   100013bf <Floppy::motor(int, bool)+0x1c3>	100013bf: R_386_PC32	Dbg::kprintf(char const*, ...)
100013c3:	83 c4 10             	add    esp,0x10
100013c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013c9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100013cc:	83 c2 58             	add    edx,0x58
100013cf:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100013d3:	83 f8 01             	cmp    eax,0x1
100013d6:	75 32                	jne    1000140a <Floppy::motor(int, bool)+0x20e>
100013d8:	83 ec 0c             	sub    esp,0xc
100013db:	68 79 5a 00 10       	push   0x10005a79	100013dc: R_386_32	.text
100013e0:	e8 fc ff ff ff       	call   100013e1 <Floppy::motor(int, bool)+0x1e5>	100013e1: R_386_PC32	Dbg::kprintf(char const*, ...)
100013e5:	83 c4 10             	add    esp,0x10
100013e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013eb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100013ee:	83 c2 58             	add    edx,0x58
100013f1:	c7 44 90 0c 02 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x2
100013f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100013ff:	83 c2 5c             	add    edx,0x5c
10001402:	c7 44 90 0c c4 09 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x9c4
1000140a:	83 ec 0c             	sub    esp,0xc
1000140d:	68 89 5a 00 10       	push   0x10005a89	1000140e: R_386_32	.text
10001412:	e8 fc ff ff ff       	call   10001413 <Floppy::motor(int, bool)+0x217>	10001413: R_386_PC32	Dbg::kprintf(char const*, ...)
10001417:	83 c4 10             	add    esp,0x10
1000141a:	90                   	nop
1000141b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000141e:	c9                   	leave  
1000141f:	c3                   	ret    

10001420 <FloppyDrive::FloppyDrive()>:
10001420:	55                   	push   ebp
10001421:	89 e5                	mov    ebp,esp
10001423:	83 ec 08             	sub    esp,0x8
10001426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001429:	83 ec 04             	sub    esp,0x4
1000142c:	68 00 02 00 00       	push   0x200
10001431:	68 9e 5a 00 10       	push   0x10005a9e	10001432: R_386_32	.text
10001436:	50                   	push   eax
10001437:	e8 fc ff ff ff       	call   10001438 <FloppyDrive::FloppyDrive()+0x18>	10001438: R_386_PC32	PhysicalDisk::PhysicalDisk(char const*, int)
1000143c:	83 c4 10             	add    esp,0x10
1000143f:	ba 08 00 00 00       	mov    edx,0x8	10001440: R_386_32	vtable for FloppyDrive
10001444:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001447:	89 10                	mov    DWORD PTR [eax],edx
10001449:	90                   	nop
1000144a:	c9                   	leave  
1000144b:	c3                   	ret    

1000144c <FloppyDrive::motorOn()>:
1000144c:	55                   	push   ebp
1000144d:	89 e5                	mov    ebp,esp
1000144f:	83 ec 08             	sub    esp,0x8
10001452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001455:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
1000145b:	83 ec 08             	sub    esp,0x8
1000145e:	50                   	push   eax
1000145f:	68 b0 5a 00 10       	push   0x10005ab0	10001460: R_386_32	.text
10001464:	e8 fc ff ff ff       	call   10001465 <FloppyDrive::motorOn()+0x19>	10001465: R_386_PC32	Dbg::kprintf(char const*, ...)
10001469:	83 c4 10             	add    esp,0x10
1000146c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000146f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001475:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001478:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
1000147e:	83 ec 04             	sub    esp,0x4
10001481:	6a 01                	push   0x1
10001483:	52                   	push   edx
10001484:	50                   	push   eax
10001485:	e8 fc ff ff ff       	call   10001486 <FloppyDrive::motorOn()+0x3a>	10001486: R_386_PC32	Floppy::motor(int, bool)
1000148a:	83 c4 10             	add    esp,0x10
1000148d:	90                   	nop
1000148e:	c9                   	leave  
1000148f:	c3                   	ret    

10001490 <FloppyDrive::motorOff()>:
10001490:	55                   	push   ebp
10001491:	89 e5                	mov    ebp,esp
10001493:	83 ec 08             	sub    esp,0x8
10001496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001499:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000149f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100014a2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100014a8:	83 ec 04             	sub    esp,0x4
100014ab:	6a 00                	push   0x0
100014ad:	52                   	push   edx
100014ae:	50                   	push   eax
100014af:	e8 fc ff ff ff       	call   100014b0 <FloppyDrive::motorOff()+0x20>	100014b0: R_386_PC32	Floppy::motor(int, bool)
100014b4:	83 c4 10             	add    esp,0x10
100014b7:	90                   	nop
100014b8:	c9                   	leave  
100014b9:	c3                   	ret    

100014ba <FloppyDrive::floppyConfigure()>:
100014ba:	55                   	push   ebp
100014bb:	89 e5                	mov    ebp,esp
100014bd:	83 ec 18             	sub    esp,0x18
100014c0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
100014c4:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
100014c8:	c6 45 f5 01          	mov    BYTE PTR [ebp-0xb],0x1
100014cc:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
100014d3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100014da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014dd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014e3:	83 ec 08             	sub    esp,0x8
100014e6:	6a 13                	push   0x13
100014e8:	50                   	push   eax
100014e9:	e8 fc ff ff ff       	call   100014ea <FloppyDrive::floppyConfigure()+0x30>	100014ea: R_386_PC32	Floppy::writeCommand(unsigned char)
100014ee:	83 c4 10             	add    esp,0x10
100014f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014f4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014fa:	83 ec 0c             	sub    esp,0xc
100014fd:	50                   	push   eax
100014fe:	e8 fc ff ff ff       	call   100014ff <FloppyDrive::floppyConfigure()+0x45>	100014ff: R_386_PC32	Floppy::wasFailure()
10001503:	83 c4 10             	add    esp,0x10
10001506:	84 c0                	test   al,al
10001508:	74 07                	je     10001511 <FloppyDrive::floppyConfigure()+0x57>
1000150a:	b0 00                	mov    al,0x0
1000150c:	e9 de 00 00 00       	jmp    100015ef <FloppyDrive::floppyConfigure()+0x135>
10001511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001514:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000151a:	83 ec 08             	sub    esp,0x8
1000151d:	6a 00                	push   0x0
1000151f:	50                   	push   eax
10001520:	e8 fc ff ff ff       	call   10001521 <FloppyDrive::floppyConfigure()+0x67>	10001521: R_386_PC32	Floppy::writeCommand(unsigned char)
10001525:	83 c4 10             	add    esp,0x10
10001528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000152b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001531:	83 ec 0c             	sub    esp,0xc
10001534:	50                   	push   eax
10001535:	e8 fc ff ff ff       	call   10001536 <FloppyDrive::floppyConfigure()+0x7c>	10001536: R_386_PC32	Floppy::wasFailure()
1000153a:	83 c4 10             	add    esp,0x10
1000153d:	84 c0                	test   al,al
1000153f:	74 07                	je     10001548 <FloppyDrive::floppyConfigure()+0x8e>
10001541:	b0 00                	mov    al,0x0
10001543:	e9 a7 00 00 00       	jmp    100015ef <FloppyDrive::floppyConfigure()+0x135>
10001548:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000154b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001551:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
10001555:	c1 e2 06             	shl    edx,0x6
10001558:	88 d1                	mov    cl,dl
1000155a:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
1000155e:	c1 e2 05             	shl    edx,0x5
10001561:	09 d1                	or     ecx,edx
10001563:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
10001567:	c1 e2 04             	shl    edx,0x4
1000156a:	09 d1                	or     ecx,edx
1000156c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
1000156f:	4a                   	dec    edx
10001570:	09 ca                	or     edx,ecx
10001572:	0f b6 d2             	movzx  edx,dl
10001575:	83 ec 08             	sub    esp,0x8
10001578:	52                   	push   edx
10001579:	50                   	push   eax
1000157a:	e8 fc ff ff ff       	call   1000157b <FloppyDrive::floppyConfigure()+0xc1>	1000157b: R_386_PC32	Floppy::writeCommand(unsigned char)
1000157f:	83 c4 10             	add    esp,0x10
10001582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001585:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000158b:	83 ec 0c             	sub    esp,0xc
1000158e:	50                   	push   eax
1000158f:	e8 fc ff ff ff       	call   10001590 <FloppyDrive::floppyConfigure()+0xd6>	10001590: R_386_PC32	Floppy::wasFailure()
10001594:	83 c4 10             	add    esp,0x10
10001597:	84 c0                	test   al,al
10001599:	74 04                	je     1000159f <FloppyDrive::floppyConfigure()+0xe5>
1000159b:	b0 00                	mov    al,0x0
1000159d:	eb 50                	jmp    100015ef <FloppyDrive::floppyConfigure()+0x135>
1000159f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100015a2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100015a8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100015ab:	0f b6 d2             	movzx  edx,dl
100015ae:	83 ec 08             	sub    esp,0x8
100015b1:	52                   	push   edx
100015b2:	50                   	push   eax
100015b3:	e8 fc ff ff ff       	call   100015b4 <FloppyDrive::floppyConfigure()+0xfa>	100015b4: R_386_PC32	Floppy::writeCommand(unsigned char)
100015b8:	83 c4 10             	add    esp,0x10
100015bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100015be:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100015c4:	83 ec 0c             	sub    esp,0xc
100015c7:	50                   	push   eax
100015c8:	e8 fc ff ff ff       	call   100015c9 <FloppyDrive::floppyConfigure()+0x10f>	100015c9: R_386_PC32	Floppy::wasFailure()
100015cd:	83 c4 10             	add    esp,0x10
100015d0:	84 c0                	test   al,al
100015d2:	74 04                	je     100015d8 <FloppyDrive::floppyConfigure()+0x11e>
100015d4:	b0 00                	mov    al,0x0
100015d6:	eb 17                	jmp    100015ef <FloppyDrive::floppyConfigure()+0x135>
100015d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100015db:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100015e1:	8a 55 f5             	mov    dl,BYTE PTR [ebp-0xb]
100015e4:	83 f2 01             	xor    edx,0x1
100015e7:	88 90 91 01 00 00    	mov    BYTE PTR [eax+0x191],dl
100015ed:	b0 01                	mov    al,0x1
100015ef:	c9                   	leave  
100015f0:	c3                   	ret    
100015f1:	90                   	nop

100015f2 <FloppyDrive::open(int, int, void*)>:
100015f2:	b8 00 00 00 00       	mov    eax,0x0
100015f7:	c3                   	ret    

100015f8 <FloppyDrive::_open(int, int, void*)>:
100015f8:	55                   	push   ebp
100015f9:	89 e5                	mov    ebp,esp
100015fb:	83 ec 08             	sub    esp,0x8
100015fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001601:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001604:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
1000160a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000160d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001610:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
10001616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001619:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
1000161f:	83 ec 08             	sub    esp,0x8
10001622:	50                   	push   eax
10001623:	68 cf 5a 00 10       	push   0x10005acf	10001624: R_386_32	.text
10001628:	e8 fc ff ff ff       	call   10001629 <FloppyDrive::_open(int, int, void*)+0x31>	10001629: R_386_PC32	Dbg::kprintf(char const*, ...)
1000162d:	83 c4 10             	add    esp,0x10
10001630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001633:	c7 80 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x15c],0x200
1000163d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001640:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
10001647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000164a:	c6 80 69 01 00 00 01 	mov    BYTE PTR [eax+0x169],0x1
10001651:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10001654:	89 d0                	mov    eax,edx
10001656:	c1 e0 02             	shl    eax,0x2
10001659:	01 d0                	add    eax,edx
1000165b:	c1 e0 02             	shl    eax,0x2
1000165e:	01 d0                	add    eax,edx
10001660:	05 11 00 00 00       	add    eax,0x11	10001661: R_386_32	floppyTable
10001665:	8a 00                	mov    al,BYTE PTR [eax]
10001667:	0f b6 c8             	movzx  ecx,al
1000166a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000166d:	89 d0                	mov    eax,edx
1000166f:	c1 e0 02             	shl    eax,0x2
10001672:	01 d0                	add    eax,edx
10001674:	c1 e0 02             	shl    eax,0x2
10001677:	01 d0                	add    eax,edx
10001679:	05 13 00 00 00       	add    eax,0x13	1000167a: R_386_32	floppyTable
1000167e:	8a 00                	mov    al,BYTE PTR [eax]
10001680:	0f b6 c0             	movzx  eax,al
10001683:	0f af c8             	imul   ecx,eax
10001686:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10001689:	89 d0                	mov    eax,edx
1000168b:	c1 e0 02             	shl    eax,0x2
1000168e:	01 d0                	add    eax,edx
10001690:	c1 e0 02             	shl    eax,0x2
10001693:	01 d0                	add    eax,edx
10001695:	05 12 00 00 00       	add    eax,0x12	10001696: R_386_32	floppyTable
1000169a:	8a 00                	mov    al,BYTE PTR [eax]
1000169c:	0f b6 c0             	movzx  eax,al
1000169f:	0f af c1             	imul   eax,ecx
100016a2:	89 c2                	mov    edx,eax
100016a4:	c1 ea 1f             	shr    edx,0x1f
100016a7:	01 d0                	add    eax,edx
100016a9:	d1 f8                	sar    eax,1
100016ab:	99                   	cdq    
100016ac:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100016af:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
100016b5:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
100016bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100016be:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
100016c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
100016ca:	83 ec 04             	sub    esp,0x4
100016cd:	52                   	push   edx
100016ce:	50                   	push   eax
100016cf:	68 d9 5a 00 10       	push   0x10005ad9	100016d0: R_386_32	.text
100016d4:	e8 fc ff ff ff       	call   100016d5 <FloppyDrive::_open(int, int, void*)+0xdd>	100016d5: R_386_PC32	Dbg::kprintf(char const*, ...)
100016d9:	83 c4 10             	add    esp,0x10
100016dc:	83 ec 0c             	sub    esp,0xc
100016df:	68 eb 5a 00 10       	push   0x10005aeb	100016e0: R_386_32	.text
100016e4:	e8 fc ff ff ff       	call   100016e5 <FloppyDrive::_open(int, int, void*)+0xed>	100016e5: R_386_PC32	Dbg::kprintf(char const*, ...)
100016e9:	83 c4 10             	add    esp,0x10
100016ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100016ef:	83 ec 0c             	sub    esp,0xc
100016f2:	50                   	push   eax
100016f3:	e8 fc ff ff ff       	call   100016f4 <FloppyDrive::_open(int, int, void*)+0xfc>	100016f4: R_386_PC32	PhysicalDisk::startCache()
100016f8:	83 c4 10             	add    esp,0x10
100016fb:	83 ec 0c             	sub    esp,0xc
100016fe:	68 01 5b 00 10       	push   0x10005b01	100016ff: R_386_32	.text
10001703:	e8 fc ff ff ff       	call   10001704 <FloppyDrive::_open(int, int, void*)+0x10c>	10001704: R_386_PC32	Dbg::kprintf(char const*, ...)
10001708:	83 c4 10             	add    esp,0x10
1000170b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000170e:	83 ec 0c             	sub    esp,0xc
10001711:	50                   	push   eax
10001712:	e8 fc ff ff ff       	call   10001713 <FloppyDrive::_open(int, int, void*)+0x11b>	10001713: R_386_PC32	createPartitionsForDisk(PhysicalDisk*)
10001717:	83 c4 10             	add    esp,0x10
1000171a:	83 ec 0c             	sub    esp,0xc
1000171d:	68 17 5b 00 10       	push   0x10005b17	1000171e: R_386_32	.text
10001722:	e8 fc ff ff ff       	call   10001723 <FloppyDrive::_open(int, int, void*)+0x12b>	10001723: R_386_PC32	Dbg::kprintf(char const*, ...)
10001727:	83 c4 10             	add    esp,0x10
1000172a:	b8 00 00 00 00       	mov    eax,0x0
1000172f:	c9                   	leave  
10001730:	c3                   	ret    
10001731:	90                   	nop

10001732 <FloppyDrive::close(int, int, void*)>:
10001732:	b8 00 00 00 00       	mov    eax,0x0
10001737:	c3                   	ret    

10001738 <FloppyDrive::unselect()>:
10001738:	55                   	push   ebp
10001739:	89 e5                	mov    ebp,esp
1000173b:	83 ec 08             	sub    esp,0x8
1000173e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001741:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001747:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000174a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001750:	83 ec 04             	sub    esp,0x4
10001753:	6a 00                	push   0x0
10001755:	52                   	push   edx
10001756:	50                   	push   eax
10001757:	e8 fc ff ff ff       	call   10001758 <FloppyDrive::unselect()+0x20>	10001758: R_386_PC32	Floppy::select(int, bool)
1000175c:	83 c4 10             	add    esp,0x10
1000175f:	90                   	nop
10001760:	c9                   	leave  
10001761:	c3                   	ret    

10001762 <FloppyDrive::select()>:
10001762:	55                   	push   ebp
10001763:	89 e5                	mov    ebp,esp
10001765:	83 ec 18             	sub    esp,0x18
10001768:	83 ec 0c             	sub    esp,0xc
1000176b:	68 2d 5b 00 10       	push   0x10005b2d	1000176c: R_386_32	.text
10001770:	e8 fc ff ff ff       	call   10001771 <FloppyDrive::select()+0xf>	10001771: R_386_PC32	Dbg::kprintf(char const*, ...)
10001775:	83 c4 10             	add    esp,0x10
10001778:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000177b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001781:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001784:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
1000178a:	83 ec 04             	sub    esp,0x4
1000178d:	6a 01                	push   0x1
1000178f:	52                   	push   edx
10001790:	50                   	push   eax
10001791:	e8 fc ff ff ff       	call   10001792 <FloppyDrive::select()+0x30>	10001792: R_386_PC32	Floppy::select(int, bool)
10001796:	83 c4 10             	add    esp,0x10
10001799:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000179c:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
100017a0:	75 22                	jne    100017c4 <FloppyDrive::select()+0x62>
100017a2:	83 ec 0c             	sub    esp,0xc
100017a5:	68 44 5b 00 10       	push   0x10005b44	100017a6: R_386_32	.text
100017aa:	e8 fc ff ff ff       	call   100017ab <FloppyDrive::select()+0x49>	100017ab: R_386_PC32	Dbg::kprintf(char const*, ...)
100017af:	83 c4 10             	add    esp,0x10
100017b2:	83 ec 0c             	sub    esp,0xc
100017b5:	68 dc 05 00 00       	push   0x5dc
100017ba:	e8 fc ff ff ff       	call   100017bb <FloppyDrive::select()+0x59>	100017bb: R_386_PC32	milliTenthSleep(unsigned int)
100017bf:	83 c4 10             	add    esp,0x10
100017c2:	eb a4                	jmp    10001768 <FloppyDrive::select()+0x6>
100017c4:	90                   	nop
100017c5:	c9                   	leave  
100017c6:	c3                   	ret    
100017c7:	90                   	nop

100017c8 <FloppyDrive::seek(int, int)>:
100017c8:	55                   	push   ebp
100017c9:	89 e5                	mov    ebp,esp
100017cb:	83 ec 18             	sub    esp,0x18
100017ce:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100017d5:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
100017d9:	7e 33                	jle    1000180e <FloppyDrive::seek(int, int)+0x46>
100017db:	83 ec 0c             	sub    esp,0xc
100017de:	68 64 5b 00 10       	push   0x10005b64	100017df: R_386_32	.text
100017e3:	e8 fc ff ff ff       	call   100017e4 <FloppyDrive::seek(int, int)+0x1c>	100017e4: R_386_PC32	Dbg::kprintf(char const*, ...)
100017e8:	83 c4 10             	add    esp,0x10
100017eb:	83 ec 0c             	sub    esp,0xc
100017ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017f1:	e8 fc ff ff ff       	call   100017f2 <FloppyDrive::seek(int, int)+0x2a>	100017f2: R_386_PC32	FloppyDrive::motorOff()
100017f6:	83 c4 10             	add    esp,0x10
100017f9:	83 ec 0c             	sub    esp,0xc
100017fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017ff:	e8 fc ff ff ff       	call   10001800 <FloppyDrive::seek(int, int)+0x38>	10001800: R_386_PC32	FloppyDrive::unselect()
10001804:	83 c4 10             	add    esp,0x10
10001807:	b0 00                	mov    al,0x0
10001809:	e9 da 02 00 00       	jmp    10001ae8 <FloppyDrive::seek(int, int)+0x320>
1000180e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001811:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001817:	83 ec 08             	sub    esp,0x8
1000181a:	50                   	push   eax
1000181b:	68 8b 5b 00 10       	push   0x10005b8b	1000181c: R_386_32	.text
10001820:	e8 fc ff ff ff       	call   10001821 <FloppyDrive::seek(int, int)+0x59>	10001821: R_386_PC32	Dbg::kprintf(char const*, ...)
10001825:	83 c4 10             	add    esp,0x10
10001828:	83 ec 0c             	sub    esp,0xc
1000182b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000182e:	e8 fc ff ff ff       	call   1000182f <FloppyDrive::seek(int, int)+0x67>	1000182f: R_386_PC32	FloppyDrive::select()
10001833:	83 c4 10             	add    esp,0x10
10001836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001839:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
1000183f:	83 ec 08             	sub    esp,0x8
10001842:	50                   	push   eax
10001843:	68 9b 5b 00 10       	push   0x10005b9b	10001844: R_386_32	.text
10001848:	e8 fc ff ff ff       	call   10001849 <FloppyDrive::seek(int, int)+0x81>	10001849: R_386_PC32	Dbg::kprintf(char const*, ...)
1000184d:	83 c4 10             	add    esp,0x10
10001850:	83 ec 0c             	sub    esp,0xc
10001853:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001856:	e8 fc ff ff ff       	call   10001857 <FloppyDrive::seek(int, int)+0x8f>	10001857: R_386_PC32	FloppyDrive::motorOn()
1000185b:	83 c4 10             	add    esp,0x10
1000185e:	83 ec 0c             	sub    esp,0xc
10001861:	68 aa 5b 00 10       	push   0x10005baa	10001862: R_386_32	.text
10001866:	e8 fc ff ff ff       	call   10001867 <FloppyDrive::seek(int, int)+0x9f>	10001867: R_386_PC32	Dbg::kprintf(char const*, ...)
1000186b:	83 c4 10             	add    esp,0x10
1000186e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001871:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001877:	83 ec 08             	sub    esp,0x8
1000187a:	6a 0f                	push   0xf
1000187c:	50                   	push   eax
1000187d:	e8 fc ff ff ff       	call   1000187e <FloppyDrive::seek(int, int)+0xb6>	1000187e: R_386_PC32	Floppy::writeCommand(unsigned char)
10001882:	83 c4 10             	add    esp,0x10
10001885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001888:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000188e:	83 ec 0c             	sub    esp,0xc
10001891:	50                   	push   eax
10001892:	e8 fc ff ff ff       	call   10001893 <FloppyDrive::seek(int, int)+0xcb>	10001893: R_386_PC32	Floppy::wasFailure()
10001897:	83 c4 10             	add    esp,0x10
1000189a:	84 c0                	test   al,al
1000189c:	74 3d                	je     100018db <FloppyDrive::seek(int, int)+0x113>
1000189e:	83 ec 0c             	sub    esp,0xc
100018a1:	68 b5 5b 00 10       	push   0x10005bb5	100018a2: R_386_32	.text
100018a6:	e8 fc ff ff ff       	call   100018a7 <FloppyDrive::seek(int, int)+0xdf>	100018a7: R_386_PC32	Dbg::kprintf(char const*, ...)
100018ab:	83 c4 10             	add    esp,0x10
100018ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018b7:	83 ec 0c             	sub    esp,0xc
100018ba:	50                   	push   eax
100018bb:	e8 fc ff ff ff       	call   100018bc <FloppyDrive::seek(int, int)+0xf4>	100018bc: R_386_PC32	Floppy::reset()
100018c0:	83 c4 10             	add    esp,0x10
100018c3:	83 ec 0c             	sub    esp,0xc
100018c6:	68 c1 5b 00 10       	push   0x10005bc1	100018c7: R_386_32	.text
100018cb:	e8 fc ff ff ff       	call   100018cc <FloppyDrive::seek(int, int)+0x104>	100018cc: R_386_PC32	Dbg::kprintf(char const*, ...)
100018d0:	83 c4 10             	add    esp,0x10
100018d3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100018d6:	e9 fa fe ff ff       	jmp    100017d5 <FloppyDrive::seek(int, int)+0xd>
100018db:	83 ec 0c             	sub    esp,0xc
100018de:	68 cd 5b 00 10       	push   0x10005bcd	100018df: R_386_32	.text
100018e3:	e8 fc ff ff ff       	call   100018e4 <FloppyDrive::seek(int, int)+0x11c>	100018e4: R_386_PC32	Dbg::kprintf(char const*, ...)
100018e8:	83 c4 10             	add    esp,0x10
100018eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018ee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018f4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
100018fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018fe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001904:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001907:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
1000190d:	88 d1                	mov    cl,dl
1000190f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10001912:	c1 e2 02             	shl    edx,0x2
10001915:	09 ca                	or     edx,ecx
10001917:	0f b6 d2             	movzx  edx,dl
1000191a:	83 ec 08             	sub    esp,0x8
1000191d:	52                   	push   edx
1000191e:	50                   	push   eax
1000191f:	e8 fc ff ff ff       	call   10001920 <FloppyDrive::seek(int, int)+0x158>	10001920: R_386_PC32	Floppy::writeCommand(unsigned char)
10001924:	83 c4 10             	add    esp,0x10
10001927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000192a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001930:	83 ec 0c             	sub    esp,0xc
10001933:	50                   	push   eax
10001934:	e8 fc ff ff ff       	call   10001935 <FloppyDrive::seek(int, int)+0x16d>	10001935: R_386_PC32	Floppy::wasFailure()
10001939:	83 c4 10             	add    esp,0x10
1000193c:	84 c0                	test   al,al
1000193e:	74 1d                	je     1000195d <FloppyDrive::seek(int, int)+0x195>
10001940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001943:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001949:	83 ec 0c             	sub    esp,0xc
1000194c:	50                   	push   eax
1000194d:	e8 fc ff ff ff       	call   1000194e <FloppyDrive::seek(int, int)+0x186>	1000194e: R_386_PC32	Floppy::reset()
10001952:	83 c4 10             	add    esp,0x10
10001955:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001958:	e9 78 fe ff ff       	jmp    100017d5 <FloppyDrive::seek(int, int)+0xd>
1000195d:	83 ec 0c             	sub    esp,0xc
10001960:	68 d8 5b 00 10       	push   0x10005bd8	10001961: R_386_32	.text
10001965:	e8 fc ff ff ff       	call   10001966 <FloppyDrive::seek(int, int)+0x19e>	10001966: R_386_PC32	Dbg::kprintf(char const*, ...)
1000196a:	83 c4 10             	add    esp,0x10
1000196d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001970:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001976:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001979:	0f b6 d2             	movzx  edx,dl
1000197c:	83 ec 08             	sub    esp,0x8
1000197f:	52                   	push   edx
10001980:	50                   	push   eax
10001981:	e8 fc ff ff ff       	call   10001982 <FloppyDrive::seek(int, int)+0x1ba>	10001982: R_386_PC32	Floppy::writeCommand(unsigned char)
10001986:	83 c4 10             	add    esp,0x10
10001989:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000198c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001992:	83 ec 0c             	sub    esp,0xc
10001995:	50                   	push   eax
10001996:	e8 fc ff ff ff       	call   10001997 <FloppyDrive::seek(int, int)+0x1cf>	10001997: R_386_PC32	Floppy::wasFailure()
1000199b:	83 c4 10             	add    esp,0x10
1000199e:	84 c0                	test   al,al
100019a0:	74 1d                	je     100019bf <FloppyDrive::seek(int, int)+0x1f7>
100019a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019a5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019ab:	83 ec 0c             	sub    esp,0xc
100019ae:	50                   	push   eax
100019af:	e8 fc ff ff ff       	call   100019b0 <FloppyDrive::seek(int, int)+0x1e8>	100019b0: R_386_PC32	Floppy::reset()
100019b4:	83 c4 10             	add    esp,0x10
100019b7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100019ba:	e9 16 fe ff ff       	jmp    100017d5 <FloppyDrive::seek(int, int)+0xd>
100019bf:	83 ec 0c             	sub    esp,0xc
100019c2:	68 e3 5b 00 10       	push   0x10005be3	100019c3: R_386_32	.text
100019c7:	e8 fc ff ff ff       	call   100019c8 <FloppyDrive::seek(int, int)+0x200>	100019c8: R_386_PC32	Dbg::kprintf(char const*, ...)
100019cc:	83 c4 10             	add    esp,0x10
100019cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019d2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019d8:	83 ec 08             	sub    esp,0x8
100019db:	68 dc 05 00 00       	push   0x5dc
100019e0:	50                   	push   eax
100019e1:	e8 fc ff ff ff       	call   100019e2 <FloppyDrive::seek(int, int)+0x21a>	100019e2: R_386_PC32	Floppy::waitIRQ(int)
100019e6:	83 c4 10             	add    esp,0x10
100019e9:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100019ec:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100019ef:	83 f0 01             	xor    eax,0x1
100019f2:	84 c0                	test   al,al
100019f4:	74 2d                	je     10001a23 <FloppyDrive::seek(int, int)+0x25b>
100019f6:	83 ec 0c             	sub    esp,0xc
100019f9:	68 ee 5b 00 10       	push   0x10005bee	100019fa: R_386_32	.text
100019fe:	e8 fc ff ff ff       	call   100019ff <FloppyDrive::seek(int, int)+0x237>	100019ff: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a03:	83 c4 10             	add    esp,0x10
10001a06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a09:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a0f:	83 ec 0c             	sub    esp,0xc
10001a12:	50                   	push   eax
10001a13:	e8 fc ff ff ff       	call   10001a14 <FloppyDrive::seek(int, int)+0x24c>	10001a14: R_386_PC32	Floppy::reset()
10001a18:	83 c4 10             	add    esp,0x10
10001a1b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001a1e:	e9 b2 fd ff ff       	jmp    100017d5 <FloppyDrive::seek(int, int)+0xd>
10001a23:	83 ec 0c             	sub    esp,0xc
10001a26:	68 fc 5b 00 10       	push   0x10005bfc	10001a27: R_386_32	.text
10001a2b:	e8 fc ff ff ff       	call   10001a2c <FloppyDrive::seek(int, int)+0x264>	10001a2c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a30:	83 c4 10             	add    esp,0x10
10001a33:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
10001a3a:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10001a41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a44:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a4a:	83 ec 04             	sub    esp,0x4
10001a4d:	8d 55 e8             	lea    edx,[ebp-0x18]
10001a50:	52                   	push   edx
10001a51:	8d 55 ec             	lea    edx,[ebp-0x14]
10001a54:	52                   	push   edx
10001a55:	50                   	push   eax
10001a56:	e8 fc ff ff ff       	call   10001a57 <FloppyDrive::seek(int, int)+0x28f>	10001a57: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10001a5b:	83 c4 10             	add    esp,0x10
10001a5e:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10001a61:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001a64:	83 f0 01             	xor    eax,0x1
10001a67:	84 c0                	test   al,al
10001a69:	74 15                	je     10001a80 <FloppyDrive::seek(int, int)+0x2b8>
10001a6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a6e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a74:	83 ec 0c             	sub    esp,0xc
10001a77:	50                   	push   eax
10001a78:	e8 fc ff ff ff       	call   10001a79 <FloppyDrive::seek(int, int)+0x2b1>	10001a79: R_386_PC32	Floppy::reset()
10001a7d:	83 c4 10             	add    esp,0x10
10001a80:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001a83:	83 f0 01             	xor    eax,0x1
10001a86:	84 c0                	test   al,al
10001a88:	75 08                	jne    10001a92 <FloppyDrive::seek(int, int)+0x2ca>
10001a8a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001a8d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10001a90:	74 08                	je     10001a9a <FloppyDrive::seek(int, int)+0x2d2>
10001a92:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001a95:	e9 3b fd ff ff       	jmp    100017d5 <FloppyDrive::seek(int, int)+0xd>
10001a9a:	83 ec 0c             	sub    esp,0xc
10001a9d:	68 07 5c 00 10       	push   0x10005c07	10001a9e: R_386_32	.text
10001aa2:	e8 fc ff ff ff       	call   10001aa3 <FloppyDrive::seek(int, int)+0x2db>	10001aa3: R_386_PC32	Dbg::kprintf(char const*, ...)
10001aa7:	83 c4 10             	add    esp,0x10
10001aaa:	83 ec 0c             	sub    esp,0xc
10001aad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001ab0:	e8 fc ff ff ff       	call   10001ab1 <FloppyDrive::seek(int, int)+0x2e9>	10001ab1: R_386_PC32	FloppyDrive::motorOff()
10001ab5:	83 c4 10             	add    esp,0x10
10001ab8:	83 ec 0c             	sub    esp,0xc
10001abb:	68 14 5c 00 10       	push   0x10005c14	10001abc: R_386_32	.text
10001ac0:	e8 fc ff ff ff       	call   10001ac1 <FloppyDrive::seek(int, int)+0x2f9>	10001ac1: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ac5:	83 c4 10             	add    esp,0x10
10001ac8:	83 ec 0c             	sub    esp,0xc
10001acb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001ace:	e8 fc ff ff ff       	call   10001acf <FloppyDrive::seek(int, int)+0x307>	10001acf: R_386_PC32	FloppyDrive::unselect()
10001ad3:	83 c4 10             	add    esp,0x10
10001ad6:	83 ec 0c             	sub    esp,0xc
10001ad9:	68 21 5c 00 10       	push   0x10005c21	10001ada: R_386_32	.text
10001ade:	e8 fc ff ff ff       	call   10001adf <FloppyDrive::seek(int, int)+0x317>	10001adf: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ae3:	83 c4 10             	add    esp,0x10
10001ae6:	b0 01                	mov    al,0x1
10001ae8:	c9                   	leave  
10001ae9:	c3                   	ret    

10001aea <FloppyDrive::calibrate()>:
10001aea:	55                   	push   ebp
10001aeb:	89 e5                	mov    ebp,esp
10001aed:	83 ec 18             	sub    esp,0x18
10001af0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001af7:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
10001afb:	7e 25                	jle    10001b22 <FloppyDrive::calibrate()+0x38>
10001afd:	83 ec 0c             	sub    esp,0xc
10001b00:	68 30 5c 00 10       	push   0x10005c30	10001b01: R_386_32	.text
10001b05:	e8 fc ff ff ff       	call   10001b06 <FloppyDrive::calibrate()+0x1c>	10001b06: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b0a:	83 c4 10             	add    esp,0x10
10001b0d:	83 ec 0c             	sub    esp,0xc
10001b10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001b13:	e8 fc ff ff ff       	call   10001b14 <FloppyDrive::calibrate()+0x2a>	10001b14: R_386_PC32	FloppyDrive::motorOff()
10001b18:	83 c4 10             	add    esp,0x10
10001b1b:	b0 00                	mov    al,0x0
10001b1d:	e9 01 02 00 00       	jmp    10001d23 <FloppyDrive::calibrate()+0x239>
10001b22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b25:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001b2b:	83 ec 08             	sub    esp,0x8
10001b2e:	50                   	push   eax
10001b2f:	68 5c 5c 00 10       	push   0x10005c5c	10001b30: R_386_32	.text
10001b34:	e8 fc ff ff ff       	call   10001b35 <FloppyDrive::calibrate()+0x4b>	10001b35: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b39:	83 c4 10             	add    esp,0x10
10001b3c:	83 ec 0c             	sub    esp,0xc
10001b3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001b42:	e8 fc ff ff ff       	call   10001b43 <FloppyDrive::calibrate()+0x59>	10001b43: R_386_PC32	FloppyDrive::motorOn()
10001b47:	83 c4 10             	add    esp,0x10
10001b4a:	83 ec 0c             	sub    esp,0xc
10001b4d:	68 6a 5c 00 10       	push   0x10005c6a	10001b4e: R_386_32	.text
10001b52:	e8 fc ff ff ff       	call   10001b53 <FloppyDrive::calibrate()+0x69>	10001b53: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b57:	83 c4 10             	add    esp,0x10
10001b5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b5d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b63:	83 ec 08             	sub    esp,0x8
10001b66:	6a 07                	push   0x7
10001b68:	50                   	push   eax
10001b69:	e8 fc ff ff ff       	call   10001b6a <FloppyDrive::calibrate()+0x80>	10001b6a: R_386_PC32	Floppy::writeCommand(unsigned char)
10001b6e:	83 c4 10             	add    esp,0x10
10001b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b74:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b7a:	83 ec 0c             	sub    esp,0xc
10001b7d:	50                   	push   eax
10001b7e:	e8 fc ff ff ff       	call   10001b7f <FloppyDrive::calibrate()+0x95>	10001b7f: R_386_PC32	Floppy::wasFailure()
10001b83:	83 c4 10             	add    esp,0x10
10001b86:	84 c0                	test   al,al
10001b88:	74 1d                	je     10001ba7 <FloppyDrive::calibrate()+0xbd>
10001b8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b8d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b93:	83 ec 0c             	sub    esp,0xc
10001b96:	50                   	push   eax
10001b97:	e8 fc ff ff ff       	call   10001b98 <FloppyDrive::calibrate()+0xae>	10001b98: R_386_PC32	Floppy::reset()
10001b9c:	83 c4 10             	add    esp,0x10
10001b9f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001ba2:	e9 50 ff ff ff       	jmp    10001af7 <FloppyDrive::calibrate()+0xd>
10001ba7:	83 ec 0c             	sub    esp,0xc
10001baa:	68 73 5c 00 10       	push   0x10005c73	10001bab: R_386_32	.text
10001baf:	e8 fc ff ff ff       	call   10001bb0 <FloppyDrive::calibrate()+0xc6>	10001bb0: R_386_PC32	Dbg::kprintf(char const*, ...)
10001bb4:	83 c4 10             	add    esp,0x10
10001bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bba:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bc0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10001bc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bca:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bd0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001bd3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001bd9:	0f b6 d2             	movzx  edx,dl
10001bdc:	83 ec 08             	sub    esp,0x8
10001bdf:	52                   	push   edx
10001be0:	50                   	push   eax
10001be1:	e8 fc ff ff ff       	call   10001be2 <FloppyDrive::calibrate()+0xf8>	10001be2: R_386_PC32	Floppy::writeCommand(unsigned char)
10001be6:	83 c4 10             	add    esp,0x10
10001be9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bec:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bf2:	83 ec 0c             	sub    esp,0xc
10001bf5:	50                   	push   eax
10001bf6:	e8 fc ff ff ff       	call   10001bf7 <FloppyDrive::calibrate()+0x10d>	10001bf7: R_386_PC32	Floppy::wasFailure()
10001bfb:	83 c4 10             	add    esp,0x10
10001bfe:	84 c0                	test   al,al
10001c00:	74 1d                	je     10001c1f <FloppyDrive::calibrate()+0x135>
10001c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c05:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c0b:	83 ec 0c             	sub    esp,0xc
10001c0e:	50                   	push   eax
10001c0f:	e8 fc ff ff ff       	call   10001c10 <FloppyDrive::calibrate()+0x126>	10001c10: R_386_PC32	Floppy::reset()
10001c14:	83 c4 10             	add    esp,0x10
10001c17:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001c1a:	e9 d8 fe ff ff       	jmp    10001af7 <FloppyDrive::calibrate()+0xd>
10001c1f:	83 ec 0c             	sub    esp,0xc
10001c22:	68 7c 5c 00 10       	push   0x10005c7c	10001c23: R_386_32	.text
10001c27:	e8 fc ff ff ff       	call   10001c28 <FloppyDrive::calibrate()+0x13e>	10001c28: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c2c:	83 c4 10             	add    esp,0x10
10001c2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c32:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c38:	83 ec 08             	sub    esp,0x8
10001c3b:	68 dc 05 00 00       	push   0x5dc
10001c40:	50                   	push   eax
10001c41:	e8 fc ff ff ff       	call   10001c42 <FloppyDrive::calibrate()+0x158>	10001c42: R_386_PC32	Floppy::waitIRQ(int)
10001c46:	83 c4 10             	add    esp,0x10
10001c49:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001c4c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001c4f:	83 f0 01             	xor    eax,0x1
10001c52:	84 c0                	test   al,al
10001c54:	74 1d                	je     10001c73 <FloppyDrive::calibrate()+0x189>
10001c56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c59:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c5f:	83 ec 0c             	sub    esp,0xc
10001c62:	50                   	push   eax
10001c63:	e8 fc ff ff ff       	call   10001c64 <FloppyDrive::calibrate()+0x17a>	10001c64: R_386_PC32	Floppy::reset()
10001c68:	83 c4 10             	add    esp,0x10
10001c6b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001c6e:	e9 84 fe ff ff       	jmp    10001af7 <FloppyDrive::calibrate()+0xd>
10001c73:	83 ec 0c             	sub    esp,0xc
10001c76:	68 85 5c 00 10       	push   0x10005c85	10001c77: R_386_32	.text
10001c7b:	e8 fc ff ff ff       	call   10001c7c <FloppyDrive::calibrate()+0x192>	10001c7c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c80:	83 c4 10             	add    esp,0x10
10001c83:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
10001c8a:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10001c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c94:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c9a:	83 ec 04             	sub    esp,0x4
10001c9d:	8d 55 e8             	lea    edx,[ebp-0x18]
10001ca0:	52                   	push   edx
10001ca1:	8d 55 ec             	lea    edx,[ebp-0x14]
10001ca4:	52                   	push   edx
10001ca5:	50                   	push   eax
10001ca6:	e8 fc ff ff ff       	call   10001ca7 <FloppyDrive::calibrate()+0x1bd>	10001ca7: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10001cab:	83 c4 10             	add    esp,0x10
10001cae:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10001cb1:	83 ec 0c             	sub    esp,0xc
10001cb4:	68 8e 5c 00 10       	push   0x10005c8e	10001cb5: R_386_32	.text
10001cb9:	e8 fc ff ff ff       	call   10001cba <FloppyDrive::calibrate()+0x1d0>	10001cba: R_386_PC32	Dbg::kprintf(char const*, ...)
10001cbe:	83 c4 10             	add    esp,0x10
10001cc1:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001cc4:	83 f0 01             	xor    eax,0x1
10001cc7:	84 c0                	test   al,al
10001cc9:	74 15                	je     10001ce0 <FloppyDrive::calibrate()+0x1f6>
10001ccb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cce:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001cd4:	83 ec 0c             	sub    esp,0xc
10001cd7:	50                   	push   eax
10001cd8:	e8 fc ff ff ff       	call   10001cd9 <FloppyDrive::calibrate()+0x1ef>	10001cd9: R_386_PC32	Floppy::reset()
10001cdd:	83 c4 10             	add    esp,0x10
10001ce0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001ce3:	83 f0 01             	xor    eax,0x1
10001ce6:	84 c0                	test   al,al
10001ce8:	75 11                	jne    10001cfb <FloppyDrive::calibrate()+0x211>
10001cea:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001ced:	85 c0                	test   eax,eax
10001cef:	75 0a                	jne    10001cfb <FloppyDrive::calibrate()+0x211>
10001cf1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10001cf4:	83 e0 20             	and    eax,0x20
10001cf7:	85 c0                	test   eax,eax
10001cf9:	75 08                	jne    10001d03 <FloppyDrive::calibrate()+0x219>
10001cfb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001cfe:	e9 f4 fd ff ff       	jmp    10001af7 <FloppyDrive::calibrate()+0xd>
10001d03:	83 ec 0c             	sub    esp,0xc
10001d06:	68 97 5c 00 10       	push   0x10005c97	10001d07: R_386_32	.text
10001d0b:	e8 fc ff ff ff       	call   10001d0c <FloppyDrive::calibrate()+0x222>	10001d0c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d10:	83 c4 10             	add    esp,0x10
10001d13:	83 ec 0c             	sub    esp,0xc
10001d16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d19:	e8 fc ff ff ff       	call   10001d1a <FloppyDrive::calibrate()+0x230>	10001d1a: R_386_PC32	FloppyDrive::motorOff()
10001d1e:	83 c4 10             	add    esp,0x10
10001d21:	b0 01                	mov    al,0x1
10001d23:	c9                   	leave  
10001d24:	c3                   	ret    
10001d25:	90                   	nop

10001d26 <FloppyDrive::doTrack(int, bool, unsigned char*)>:
10001d26:	55                   	push   ebp
10001d27:	89 e5                	mov    ebp,esp
10001d29:	57                   	push   edi
10001d2a:	56                   	push   esi
10001d2b:	53                   	push   ebx
10001d2c:	83 ec 6c             	sub    esp,0x6c
10001d2f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001d32:	88 45 94             	mov    BYTE PTR [ebp-0x6c],al
10001d35:	80 7d 94 00          	cmp    BYTE PTR [ebp-0x6c],0x0
10001d39:	74 43                	je     10001d7e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x58>
10001d3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d3e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d44:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
10001d4a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001d4d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001d50:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001d53:	c7 45 cc 00 48 00 00 	mov    DWORD PTR [ebp-0x34],0x4800
10001d5a:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10001d5d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001d60:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001d63:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001d66:	8b 4d cc             	mov    ecx,DWORD PTR [ebp-0x34]
10001d69:	89 c6                	mov    esi,eax
10001d6b:	89 d7                	mov    edi,edx
10001d6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10001d6f:	89 c8                	mov    eax,ecx
10001d71:	89 fa                	mov    edx,edi
10001d73:	89 f3                	mov    ebx,esi
10001d75:	89 5d c4             	mov    DWORD PTR [ebp-0x3c],ebx
10001d78:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
10001d7b:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001d7e:	80 7d 94 00          	cmp    BYTE PTR [ebp-0x6c],0x0
10001d82:	74 07                	je     10001d8b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x65>
10001d84:	b8 c5 00 00 00       	mov    eax,0xc5
10001d89:	eb 05                	jmp    10001d90 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6a>
10001d8b:	b8 c6 00 00 00       	mov    eax,0xc6
10001d90:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001d93:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10001d9a:	83 ec 0c             	sub    esp,0xc
10001d9d:	68 a0 5c 00 10       	push   0x10005ca0	10001d9e: R_386_32	.text
10001da2:	e8 fc ff ff ff       	call   10001da3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7d>	10001da3: R_386_PC32	Dbg::kprintf(char const*, ...)
10001da7:	83 c4 10             	add    esp,0x10
10001daa:	83 7d e4 14          	cmp    DWORD PTR [ebp-0x1c],0x14
10001dae:	75 26                	jne    10001dd6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xb0>
10001db0:	83 ec 0c             	sub    esp,0xc
10001db3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001db6:	e8 fc ff ff ff       	call   10001db7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x91>	10001db7: R_386_PC32	FloppyDrive::motorOff()
10001dbb:	83 c4 10             	add    esp,0x10
10001dbe:	83 ec 0c             	sub    esp,0xc
10001dc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001dc4:	e8 fc ff ff ff       	call   10001dc5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x9f>	10001dc5: R_386_PC32	FloppyDrive::unselect()
10001dc9:	83 c4 10             	add    esp,0x10
10001dcc:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10001dd1:	e9 71 07 00 00       	jmp    10002547 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x821>
10001dd6:	83 ec 0c             	sub    esp,0xc
10001dd9:	68 aa 5c 00 10       	push   0x10005caa	10001dda: R_386_32	.text
10001dde:	e8 fc ff ff ff       	call   10001ddf <FloppyDrive::doTrack(int, bool, unsigned char*)+0xb9>	10001ddf: R_386_PC32	Dbg::kprintf(char const*, ...)
10001de3:	83 c4 10             	add    esp,0x10
10001de6:	83 ec 04             	sub    esp,0x4
10001de9:	6a 00                	push   0x0
10001deb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001dee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001df1:	e8 fc ff ff ff       	call   10001df2 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xcc>	10001df2: R_386_PC32	FloppyDrive::seek(int, int)
10001df6:	83 c4 10             	add    esp,0x10
10001df9:	83 f0 01             	xor    eax,0x1
10001dfc:	84 c0                	test   al,al
10001dfe:	74 0a                	je     10001e0a <FloppyDrive::doTrack(int, bool, unsigned char*)+0xe4>
10001e00:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001e05:	e9 3d 07 00 00       	jmp    10002547 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x821>
10001e0a:	83 ec 04             	sub    esp,0x4
10001e0d:	6a 01                	push   0x1
10001e0f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001e12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e15:	e8 fc ff ff ff       	call   10001e16 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xf0>	10001e16: R_386_PC32	FloppyDrive::seek(int, int)
10001e1a:	83 c4 10             	add    esp,0x10
10001e1d:	83 f0 01             	xor    eax,0x1
10001e20:	84 c0                	test   al,al
10001e22:	74 0a                	je     10001e2e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x108>
10001e24:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001e29:	e9 19 07 00 00       	jmp    10002547 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x821>
10001e2e:	83 ec 0c             	sub    esp,0xc
10001e31:	68 ba 5c 00 10       	push   0x10005cba	10001e32: R_386_32	.text
10001e36:	e8 fc ff ff ff       	call   10001e37 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x111>	10001e37: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e3b:	83 c4 10             	add    esp,0x10
10001e3e:	83 ec 0c             	sub    esp,0xc
10001e41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e44:	e8 fc ff ff ff       	call   10001e45 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x11f>	10001e45: R_386_PC32	FloppyDrive::motorOn()
10001e49:	83 c4 10             	add    esp,0x10
10001e4c:	83 ec 0c             	sub    esp,0xc
10001e4f:	68 c6 5c 00 10       	push   0x10005cc6	10001e50: R_386_32	.text
10001e54:	e8 fc ff ff ff       	call   10001e55 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x12f>	10001e55: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e59:	83 c4 10             	add    esp,0x10
10001e5c:	83 ec 0c             	sub    esp,0xc
10001e5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e62:	e8 fc ff ff ff       	call   10001e63 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x13d>	10001e63: R_386_PC32	FloppyDrive::select()
10001e67:	83 c4 10             	add    esp,0x10
10001e6a:	83 ec 0c             	sub    esp,0xc
10001e6d:	68 d1 5c 00 10       	push   0x10005cd1	10001e6e: R_386_32	.text
10001e72:	e8 fc ff ff ff       	call   10001e73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x14d>	10001e73: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e77:	83 c4 10             	add    esp,0x10
10001e7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e7d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e83:	0f b6 55 94          	movzx  edx,BYTE PTR [ebp-0x6c]
10001e87:	83 ec 08             	sub    esp,0x8
10001e8a:	52                   	push   edx
10001e8b:	50                   	push   eax
10001e8c:	e8 fc ff ff ff       	call   10001e8d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x167>	10001e8d: R_386_PC32	Floppy::dmaInit(bool)
10001e91:	83 c4 10             	add    esp,0x10
10001e94:	83 ec 0c             	sub    esp,0xc
10001e97:	68 dc 5c 00 10       	push   0x10005cdc	10001e98: R_386_32	.text
10001e9c:	e8 fc ff ff ff       	call   10001e9d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x177>	10001e9d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ea1:	83 c4 10             	add    esp,0x10
10001ea4:	83 ec 0c             	sub    esp,0xc
10001ea7:	68 e8 03 00 00       	push   0x3e8
10001eac:	e8 fc ff ff ff       	call   10001ead <FloppyDrive::doTrack(int, bool, unsigned char*)+0x187>	10001ead: R_386_PC32	milliTenthSleep(unsigned int)
10001eb1:	83 c4 10             	add    esp,0x10
10001eb4:	83 ec 0c             	sub    esp,0xc
10001eb7:	68 e9 5c 00 10       	push   0x10005ce9	10001eb8: R_386_32	.text
10001ebc:	e8 fc ff ff ff       	call   10001ebd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x197>	10001ebd: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ec1:	83 c4 10             	add    esp,0x10
10001ec4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ec7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ecd:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001ed0:	0f b6 d2             	movzx  edx,dl
10001ed3:	83 ec 08             	sub    esp,0x8
10001ed6:	52                   	push   edx
10001ed7:	50                   	push   eax
10001ed8:	e8 fc ff ff ff       	call   10001ed9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1b3>	10001ed9: R_386_PC32	Floppy::writeCommand(unsigned char)
10001edd:	83 c4 10             	add    esp,0x10
10001ee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ee3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ee9:	83 ec 0c             	sub    esp,0xc
10001eec:	50                   	push   eax
10001eed:	e8 fc ff ff ff       	call   10001eee <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1c8>	10001eee: R_386_PC32	Floppy::wasFailure()
10001ef2:	83 c4 10             	add    esp,0x10
10001ef5:	84 c0                	test   al,al
10001ef7:	74 1d                	je     10001f16 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1f0>
10001ef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001efc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f02:	83 ec 0c             	sub    esp,0xc
10001f05:	50                   	push   eax
10001f06:	e8 fc ff ff ff       	call   10001f07 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1e1>	10001f07: R_386_PC32	Floppy::reset()
10001f0b:	83 c4 10             	add    esp,0x10
10001f0e:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001f11:	e9 84 fe ff ff       	jmp    10001d9a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001f16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f19:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f1f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001f22:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001f28:	0f b6 d2             	movzx  edx,dl
10001f2b:	83 ec 08             	sub    esp,0x8
10001f2e:	52                   	push   edx
10001f2f:	50                   	push   eax
10001f30:	e8 fc ff ff ff       	call   10001f31 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x20b>	10001f31: R_386_PC32	Floppy::writeCommand(unsigned char)
10001f35:	83 c4 10             	add    esp,0x10
10001f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f3b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f41:	83 ec 0c             	sub    esp,0xc
10001f44:	50                   	push   eax
10001f45:	e8 fc ff ff ff       	call   10001f46 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x220>	10001f46: R_386_PC32	Floppy::wasFailure()
10001f4a:	83 c4 10             	add    esp,0x10
10001f4d:	84 c0                	test   al,al
10001f4f:	74 1d                	je     10001f6e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x248>
10001f51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f54:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f5a:	83 ec 0c             	sub    esp,0xc
10001f5d:	50                   	push   eax
10001f5e:	e8 fc ff ff ff       	call   10001f5f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x239>	10001f5f: R_386_PC32	Floppy::reset()
10001f63:	83 c4 10             	add    esp,0x10
10001f66:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001f69:	e9 2c fe ff ff       	jmp    10001d9a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f71:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f77:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001f7a:	0f b6 d2             	movzx  edx,dl
10001f7d:	83 ec 08             	sub    esp,0x8
10001f80:	52                   	push   edx
10001f81:	50                   	push   eax
10001f82:	e8 fc ff ff ff       	call   10001f83 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x25d>	10001f83: R_386_PC32	Floppy::writeCommand(unsigned char)
10001f87:	83 c4 10             	add    esp,0x10
10001f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f8d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f93:	83 ec 0c             	sub    esp,0xc
10001f96:	50                   	push   eax
10001f97:	e8 fc ff ff ff       	call   10001f98 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x272>	10001f98: R_386_PC32	Floppy::wasFailure()
10001f9c:	83 c4 10             	add    esp,0x10
10001f9f:	84 c0                	test   al,al
10001fa1:	74 1d                	je     10001fc0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x29a>
10001fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fa6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fac:	83 ec 0c             	sub    esp,0xc
10001faf:	50                   	push   eax
10001fb0:	e8 fc ff ff ff       	call   10001fb1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x28b>	10001fb1: R_386_PC32	Floppy::reset()
10001fb5:	83 c4 10             	add    esp,0x10
10001fb8:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001fbb:	e9 da fd ff ff       	jmp    10001d9a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001fc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fc3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fc9:	83 ec 08             	sub    esp,0x8
10001fcc:	6a 00                	push   0x0
10001fce:	50                   	push   eax
10001fcf:	e8 fc ff ff ff       	call   10001fd0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2aa>	10001fd0: R_386_PC32	Floppy::writeCommand(unsigned char)
10001fd4:	83 c4 10             	add    esp,0x10
10001fd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fda:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fe0:	83 ec 0c             	sub    esp,0xc
10001fe3:	50                   	push   eax
10001fe4:	e8 fc ff ff ff       	call   10001fe5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2bf>	10001fe5: R_386_PC32	Floppy::wasFailure()
10001fe9:	83 c4 10             	add    esp,0x10
10001fec:	84 c0                	test   al,al
10001fee:	74 1d                	je     1000200d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2e7>
10001ff0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ff3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ff9:	83 ec 0c             	sub    esp,0xc
10001ffc:	50                   	push   eax
10001ffd:	e8 fc ff ff ff       	call   10001ffe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2d8>	10001ffe: R_386_PC32	Floppy::reset()
10002002:	83 c4 10             	add    esp,0x10
10002005:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002008:	e9 8d fd ff ff       	jmp    10001d9a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000200d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002010:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002016:	83 ec 08             	sub    esp,0x8
10002019:	6a 01                	push   0x1
1000201b:	50                   	push   eax
1000201c:	e8 fc ff ff ff       	call   1000201d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2f7>	1000201d: R_386_PC32	Floppy::writeCommand(unsigned char)
10002021:	83 c4 10             	add    esp,0x10
10002024:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002027:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000202d:	83 ec 0c             	sub    esp,0xc
10002030:	50                   	push   eax
10002031:	e8 fc ff ff ff       	call   10002032 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x30c>	10002032: R_386_PC32	Floppy::wasFailure()
10002036:	83 c4 10             	add    esp,0x10
10002039:	84 c0                	test   al,al
1000203b:	74 1d                	je     1000205a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x334>
1000203d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002040:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002046:	83 ec 0c             	sub    esp,0xc
10002049:	50                   	push   eax
1000204a:	e8 fc ff ff ff       	call   1000204b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x325>	1000204b: R_386_PC32	Floppy::reset()
1000204f:	83 c4 10             	add    esp,0x10
10002052:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002055:	e9 40 fd ff ff       	jmp    10001d9a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000205a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000205d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002063:	83 ec 08             	sub    esp,0x8
10002066:	6a 02                	push   0x2
10002068:	50                   	push   eax
10002069:	e8 fc ff ff ff       	call   1000206a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x344>	1000206a: R_386_PC32	Floppy::writeCommand(unsigned char)
1000206e:	83 c4 10             	add    esp,0x10
10002071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002074:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000207a:	83 ec 0c             	sub    esp,0xc
1000207d:	50                   	push   eax
1000207e:	e8 fc ff ff ff       	call   1000207f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x359>	1000207f: R_386_PC32	Floppy::wasFailure()
10002083:	83 c4 10             	add    esp,0x10
10002086:	84 c0                	test   al,al
10002088:	74 1d                	je     100020a7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x381>
1000208a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000208d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002093:	83 ec 0c             	sub    esp,0xc
10002096:	50                   	push   eax
10002097:	e8 fc ff ff ff       	call   10002098 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x372>	10002098: R_386_PC32	Floppy::reset()
1000209c:	83 c4 10             	add    esp,0x10
1000209f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100020a2:	e9 f3 fc ff ff       	jmp    10001d9a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100020a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020aa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020b0:	83 ec 08             	sub    esp,0x8
100020b3:	6a 12                	push   0x12
100020b5:	50                   	push   eax
100020b6:	e8 fc ff ff ff       	call   100020b7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x391>	100020b7: R_386_PC32	Floppy::writeCommand(unsigned char)
100020bb:	83 c4 10             	add    esp,0x10
100020be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020c7:	83 ec 0c             	sub    esp,0xc
100020ca:	50                   	push   eax
100020cb:	e8 fc ff ff ff       	call   100020cc <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3a6>	100020cc: R_386_PC32	Floppy::wasFailure()
100020d0:	83 c4 10             	add    esp,0x10
100020d3:	84 c0                	test   al,al
100020d5:	74 1d                	je     100020f4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3ce>
100020d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020da:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020e0:	83 ec 0c             	sub    esp,0xc
100020e3:	50                   	push   eax
100020e4:	e8 fc ff ff ff       	call   100020e5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3bf>	100020e5: R_386_PC32	Floppy::reset()
100020e9:	83 c4 10             	add    esp,0x10
100020ec:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100020ef:	e9 a6 fc ff ff       	jmp    10001d9a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100020f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020f7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020fd:	83 ec 08             	sub    esp,0x8
10002100:	6a 1b                	push   0x1b
10002102:	50                   	push   eax
10002103:	e8 fc ff ff ff       	call   10002104 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3de>	10002104: R_386_PC32	Floppy::writeCommand(unsigned char)
10002108:	83 c4 10             	add    esp,0x10
1000210b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000210e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002114:	83 ec 0c             	sub    esp,0xc
10002117:	50                   	push   eax
10002118:	e8 fc ff ff ff       	call   10002119 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3f3>	10002119: R_386_PC32	Floppy::wasFailure()
1000211d:	83 c4 10             	add    esp,0x10
10002120:	84 c0                	test   al,al
10002122:	74 1d                	je     10002141 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x41b>
10002124:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002127:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000212d:	83 ec 0c             	sub    esp,0xc
10002130:	50                   	push   eax
10002131:	e8 fc ff ff ff       	call   10002132 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x40c>	10002132: R_386_PC32	Floppy::reset()
10002136:	83 c4 10             	add    esp,0x10
10002139:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000213c:	e9 59 fc ff ff       	jmp    10001d9a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002144:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000214a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10002151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002154:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000215a:	83 ec 08             	sub    esp,0x8
1000215d:	68 ff 00 00 00       	push   0xff
10002162:	50                   	push   eax
10002163:	e8 fc ff ff ff       	call   10002164 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x43e>	10002164: R_386_PC32	Floppy::writeCommand(unsigned char)
10002168:	83 c4 10             	add    esp,0x10
1000216b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000216e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002174:	83 ec 0c             	sub    esp,0xc
10002177:	50                   	push   eax
10002178:	e8 fc ff ff ff       	call   10002179 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x453>	10002179: R_386_PC32	Floppy::wasFailure()
1000217d:	83 c4 10             	add    esp,0x10
10002180:	84 c0                	test   al,al
10002182:	74 1d                	je     100021a1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x47b>
10002184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002187:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000218d:	83 ec 0c             	sub    esp,0xc
10002190:	50                   	push   eax
10002191:	e8 fc ff ff ff       	call   10002192 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x46c>	10002192: R_386_PC32	Floppy::reset()
10002196:	83 c4 10             	add    esp,0x10
10002199:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000219c:	e9 f9 fb ff ff       	jmp    10001d9a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100021a1:	83 ec 0c             	sub    esp,0xc
100021a4:	68 f5 5c 00 10       	push   0x10005cf5	100021a5: R_386_32	.text
100021a9:	e8 fc ff ff ff       	call   100021aa <FloppyDrive::doTrack(int, bool, unsigned char*)+0x484>	100021aa: R_386_PC32	Dbg::kprintf(char const*, ...)
100021ae:	83 c4 10             	add    esp,0x10
100021b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021b4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021ba:	83 ec 08             	sub    esp,0x8
100021bd:	68 e8 03 00 00       	push   0x3e8
100021c2:	50                   	push   eax
100021c3:	e8 fc ff ff ff       	call   100021c4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x49e>	100021c4: R_386_PC32	Floppy::waitIRQ(int)
100021c8:	83 c4 10             	add    esp,0x10
100021cb:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
100021ce:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
100021d1:	83 f0 01             	xor    eax,0x1
100021d4:	84 c0                	test   al,al
100021d6:	74 2d                	je     10002205 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4df>
100021d8:	83 ec 0c             	sub    esp,0xc
100021db:	68 08 5d 00 10       	push   0x10005d08	100021dc: R_386_32	.text
100021e0:	e8 fc ff ff ff       	call   100021e1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4bb>	100021e1: R_386_PC32	Dbg::kprintf(char const*, ...)
100021e5:	83 c4 10             	add    esp,0x10
100021e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021eb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021f1:	83 ec 0c             	sub    esp,0xc
100021f4:	50                   	push   eax
100021f5:	e8 fc ff ff ff       	call   100021f6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4d0>	100021f6: R_386_PC32	Floppy::reset()
100021fa:	83 c4 10             	add    esp,0x10
100021fd:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002200:	e9 95 fb ff ff       	jmp    10001d9a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002205:	83 ec 0c             	sub    esp,0xc
10002208:	68 11 5d 00 10       	push   0x10005d11	10002209: R_386_32	.text
1000220d:	e8 fc ff ff ff       	call   1000220e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4e8>	1000220e: R_386_PC32	Dbg::kprintf(char const*, ...)
10002212:	83 c4 10             	add    esp,0x10
10002215:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002218:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000221e:	83 ec 0c             	sub    esp,0xc
10002221:	50                   	push   eax
10002222:	e8 fc ff ff ff       	call   10002223 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4fd>	10002223: R_386_PC32	Floppy::readData()
10002227:	83 c4 10             	add    esp,0x10
1000222a:	88 45 de             	mov    BYTE PTR [ebp-0x22],al
1000222d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002230:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002236:	83 ec 0c             	sub    esp,0xc
10002239:	50                   	push   eax
1000223a:	e8 fc ff ff ff       	call   1000223b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x515>	1000223b: R_386_PC32	Floppy::wasFailure()
1000223f:	83 c4 10             	add    esp,0x10
10002242:	84 c0                	test   al,al
10002244:	74 2d                	je     10002273 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x54d>
10002246:	83 ec 0c             	sub    esp,0xc
10002249:	68 1b 5d 00 10       	push   0x10005d1b	1000224a: R_386_32	.text
1000224e:	e8 fc ff ff ff       	call   1000224f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x529>	1000224f: R_386_PC32	Dbg::kprintf(char const*, ...)
10002253:	83 c4 10             	add    esp,0x10
10002256:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002259:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000225f:	83 ec 0c             	sub    esp,0xc
10002262:	50                   	push   eax
10002263:	e8 fc ff ff ff       	call   10002264 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x53e>	10002264: R_386_PC32	Floppy::reset()
10002268:	83 c4 10             	add    esp,0x10
1000226b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000226e:	e9 27 fb ff ff       	jmp    10001d9a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002273:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002276:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000227c:	83 ec 0c             	sub    esp,0xc
1000227f:	50                   	push   eax
10002280:	e8 fc ff ff ff       	call   10002281 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x55b>	10002281: R_386_PC32	Floppy::readData()
10002285:	83 c4 10             	add    esp,0x10
10002288:	88 45 dd             	mov    BYTE PTR [ebp-0x23],al
1000228b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000228e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002294:	83 ec 0c             	sub    esp,0xc
10002297:	50                   	push   eax
10002298:	e8 fc ff ff ff       	call   10002299 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x573>	10002299: R_386_PC32	Floppy::wasFailure()
1000229d:	83 c4 10             	add    esp,0x10
100022a0:	84 c0                	test   al,al
100022a2:	74 2d                	je     100022d1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5ab>
100022a4:	83 ec 0c             	sub    esp,0xc
100022a7:	68 1b 5d 00 10       	push   0x10005d1b	100022a8: R_386_32	.text
100022ac:	e8 fc ff ff ff       	call   100022ad <FloppyDrive::doTrack(int, bool, unsigned char*)+0x587>	100022ad: R_386_PC32	Dbg::kprintf(char const*, ...)
100022b1:	83 c4 10             	add    esp,0x10
100022b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022b7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022bd:	83 ec 0c             	sub    esp,0xc
100022c0:	50                   	push   eax
100022c1:	e8 fc ff ff ff       	call   100022c2 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x59c>	100022c2: R_386_PC32	Floppy::reset()
100022c6:	83 c4 10             	add    esp,0x10
100022c9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100022cc:	e9 c9 fa ff ff       	jmp    10001d9a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100022d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022d4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022da:	83 ec 0c             	sub    esp,0xc
100022dd:	50                   	push   eax
100022de:	e8 fc ff ff ff       	call   100022df <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5b9>	100022df: R_386_PC32	Floppy::readData()
100022e3:	83 c4 10             	add    esp,0x10
100022e6:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
100022e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022ec:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022f2:	83 ec 0c             	sub    esp,0xc
100022f5:	50                   	push   eax
100022f6:	e8 fc ff ff ff       	call   100022f7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5d1>	100022f7: R_386_PC32	Floppy::wasFailure()
100022fb:	83 c4 10             	add    esp,0x10
100022fe:	84 c0                	test   al,al
10002300:	74 2d                	je     1000232f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x609>
10002302:	83 ec 0c             	sub    esp,0xc
10002305:	68 1b 5d 00 10       	push   0x10005d1b	10002306: R_386_32	.text
1000230a:	e8 fc ff ff ff       	call   1000230b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5e5>	1000230b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000230f:	83 c4 10             	add    esp,0x10
10002312:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002315:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000231b:	83 ec 0c             	sub    esp,0xc
1000231e:	50                   	push   eax
1000231f:	e8 fc ff ff ff       	call   10002320 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5fa>	10002320: R_386_PC32	Floppy::reset()
10002324:	83 c4 10             	add    esp,0x10
10002327:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000232a:	e9 6b fa ff ff       	jmp    10001d9a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000232f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002332:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002338:	83 ec 0c             	sub    esp,0xc
1000233b:	50                   	push   eax
1000233c:	e8 fc ff ff ff       	call   1000233d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x617>	1000233d: R_386_PC32	Floppy::readData()
10002341:	83 c4 10             	add    esp,0x10
10002344:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
10002347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000234a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002350:	83 ec 0c             	sub    esp,0xc
10002353:	50                   	push   eax
10002354:	e8 fc ff ff ff       	call   10002355 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x62f>	10002355: R_386_PC32	Floppy::wasFailure()
10002359:	83 c4 10             	add    esp,0x10
1000235c:	84 c0                	test   al,al
1000235e:	74 2d                	je     1000238d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x667>
10002360:	83 ec 0c             	sub    esp,0xc
10002363:	68 1b 5d 00 10       	push   0x10005d1b	10002364: R_386_32	.text
10002368:	e8 fc ff ff ff       	call   10002369 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x643>	10002369: R_386_PC32	Dbg::kprintf(char const*, ...)
1000236d:	83 c4 10             	add    esp,0x10
10002370:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002373:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002379:	83 ec 0c             	sub    esp,0xc
1000237c:	50                   	push   eax
1000237d:	e8 fc ff ff ff       	call   1000237e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x658>	1000237e: R_386_PC32	Floppy::reset()
10002382:	83 c4 10             	add    esp,0x10
10002385:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002388:	e9 0d fa ff ff       	jmp    10001d9a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000238d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002390:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002396:	83 ec 0c             	sub    esp,0xc
10002399:	50                   	push   eax
1000239a:	e8 fc ff ff ff       	call   1000239b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x675>	1000239b: R_386_PC32	Floppy::readData()
1000239f:	83 c4 10             	add    esp,0x10
100023a2:	88 45 da             	mov    BYTE PTR [ebp-0x26],al
100023a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023a8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023ae:	83 ec 0c             	sub    esp,0xc
100023b1:	50                   	push   eax
100023b2:	e8 fc ff ff ff       	call   100023b3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x68d>	100023b3: R_386_PC32	Floppy::wasFailure()
100023b7:	83 c4 10             	add    esp,0x10
100023ba:	84 c0                	test   al,al
100023bc:	74 2d                	je     100023eb <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6c5>
100023be:	83 ec 0c             	sub    esp,0xc
100023c1:	68 1b 5d 00 10       	push   0x10005d1b	100023c2: R_386_32	.text
100023c6:	e8 fc ff ff ff       	call   100023c7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6a1>	100023c7: R_386_PC32	Dbg::kprintf(char const*, ...)
100023cb:	83 c4 10             	add    esp,0x10
100023ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023d1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023d7:	83 ec 0c             	sub    esp,0xc
100023da:	50                   	push   eax
100023db:	e8 fc ff ff ff       	call   100023dc <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6b6>	100023dc: R_386_PC32	Floppy::reset()
100023e0:	83 c4 10             	add    esp,0x10
100023e3:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100023e6:	e9 af f9 ff ff       	jmp    10001d9a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100023eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023ee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023f4:	83 ec 0c             	sub    esp,0xc
100023f7:	50                   	push   eax
100023f8:	e8 fc ff ff ff       	call   100023f9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6d3>	100023f9: R_386_PC32	Floppy::readData()
100023fd:	83 c4 10             	add    esp,0x10
10002400:	88 45 d9             	mov    BYTE PTR [ebp-0x27],al
10002403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002406:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000240c:	83 ec 0c             	sub    esp,0xc
1000240f:	50                   	push   eax
10002410:	e8 fc ff ff ff       	call   10002411 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6eb>	10002411: R_386_PC32	Floppy::wasFailure()
10002415:	83 c4 10             	add    esp,0x10
10002418:	84 c0                	test   al,al
1000241a:	74 2d                	je     10002449 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x723>
1000241c:	83 ec 0c             	sub    esp,0xc
1000241f:	68 1b 5d 00 10       	push   0x10005d1b	10002420: R_386_32	.text
10002424:	e8 fc ff ff ff       	call   10002425 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6ff>	10002425: R_386_PC32	Dbg::kprintf(char const*, ...)
10002429:	83 c4 10             	add    esp,0x10
1000242c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000242f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002435:	83 ec 0c             	sub    esp,0xc
10002438:	50                   	push   eax
10002439:	e8 fc ff ff ff       	call   1000243a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x714>	1000243a: R_386_PC32	Floppy::reset()
1000243e:	83 c4 10             	add    esp,0x10
10002441:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002444:	e9 51 f9 ff ff       	jmp    10001d9a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000244c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002452:	83 ec 0c             	sub    esp,0xc
10002455:	50                   	push   eax
10002456:	e8 fc ff ff ff       	call   10002457 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x731>	10002457: R_386_PC32	Floppy::readData()
1000245b:	83 c4 10             	add    esp,0x10
1000245e:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
10002461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002464:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000246a:	83 ec 0c             	sub    esp,0xc
1000246d:	50                   	push   eax
1000246e:	e8 fc ff ff ff       	call   1000246f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x749>	1000246f: R_386_PC32	Floppy::wasFailure()
10002473:	83 c4 10             	add    esp,0x10
10002476:	84 c0                	test   al,al
10002478:	74 2d                	je     100024a7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x781>
1000247a:	83 ec 0c             	sub    esp,0xc
1000247d:	68 1b 5d 00 10       	push   0x10005d1b	1000247e: R_386_32	.text
10002482:	e8 fc ff ff ff       	call   10002483 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x75d>	10002483: R_386_PC32	Dbg::kprintf(char const*, ...)
10002487:	83 c4 10             	add    esp,0x10
1000248a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000248d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002493:	83 ec 0c             	sub    esp,0xc
10002496:	50                   	push   eax
10002497:	e8 fc ff ff ff       	call   10002498 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x772>	10002498: R_386_PC32	Floppy::reset()
1000249c:	83 c4 10             	add    esp,0x10
1000249f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100024a2:	e9 f3 f8 ff ff       	jmp    10001d9a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100024a7:	83 ec 0c             	sub    esp,0xc
100024aa:	68 34 5d 00 10       	push   0x10005d34	100024ab: R_386_32	.text
100024af:	e8 fc ff ff ff       	call   100024b0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x78a>	100024b0: R_386_PC32	Dbg::kprintf(char const*, ...)
100024b4:	83 c4 10             	add    esp,0x10
100024b7:	83 ec 0c             	sub    esp,0xc
100024ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024bd:	e8 fc ff ff ff       	call   100024be <FloppyDrive::doTrack(int, bool, unsigned char*)+0x798>	100024be: R_386_PC32	FloppyDrive::motorOff()
100024c2:	83 c4 10             	add    esp,0x10
100024c5:	83 ec 0c             	sub    esp,0xc
100024c8:	68 48 5d 00 10       	push   0x10005d48	100024c9: R_386_32	.text
100024cd:	e8 fc ff ff ff       	call   100024ce <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7a8>	100024ce: R_386_PC32	Dbg::kprintf(char const*, ...)
100024d2:	83 c4 10             	add    esp,0x10
100024d5:	83 ec 0c             	sub    esp,0xc
100024d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024db:	e8 fc ff ff ff       	call   100024dc <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7b6>	100024dc: R_386_PC32	FloppyDrive::unselect()
100024e0:	83 c4 10             	add    esp,0x10
100024e3:	83 ec 0c             	sub    esp,0xc
100024e6:	68 53 5d 00 10       	push   0x10005d53	100024e7: R_386_32	.text
100024eb:	e8 fc ff ff ff       	call   100024ec <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7c6>	100024ec: R_386_PC32	Dbg::kprintf(char const*, ...)
100024f0:	83 c4 10             	add    esp,0x10
100024f3:	8a 45 94             	mov    al,BYTE PTR [ebp-0x6c]
100024f6:	83 f0 01             	xor    eax,0x1
100024f9:	84 c0                	test   al,al
100024fb:	74 45                	je     10002542 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x81c>
100024fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002500:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002506:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
1000250c:	89 c2                	mov    edx,eax
1000250e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10002511:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002514:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
10002517:	c7 45 b0 00 48 00 00 	mov    DWORD PTR [ebp-0x50],0x4800
1000251e:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002521:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
10002524:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10002527:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
1000252a:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
1000252d:	89 c6                	mov    esi,eax
1000252f:	89 d7                	mov    edi,edx
10002531:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002533:	89 c8                	mov    eax,ecx
10002535:	89 fa                	mov    edx,edi
10002537:	89 f3                	mov    ebx,esi
10002539:	89 5d a8             	mov    DWORD PTR [ebp-0x58],ebx
1000253c:	89 55 a4             	mov    DWORD PTR [ebp-0x5c],edx
1000253f:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10002542:	b8 00 00 00 00       	mov    eax,0x0
10002547:	8d 65 f4             	lea    esp,[ebp-0xc]
1000254a:	5b                   	pop    ebx
1000254b:	5e                   	pop    esi
1000254c:	5f                   	pop    edi
1000254d:	5d                   	pop    ebp
1000254e:	c3                   	ret    
1000254f:	90                   	nop

10002550 <FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)>:
10002550:	55                   	push   ebp
10002551:	89 e5                	mov    ebp,esp
10002553:	83 ec 10             	sub    esp,0x10
10002556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002559:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000255f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10002562:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10002568:	83 c2 64             	add    edx,0x64
1000256b:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
1000256f:	89 d0                	mov    eax,edx
10002571:	c1 e0 02             	shl    eax,0x2
10002574:	01 d0                	add    eax,edx
10002576:	c1 e0 02             	shl    eax,0x2
10002579:	01 d0                	add    eax,edx
1000257b:	05 13 00 00 00       	add    eax,0x13	1000257c: R_386_32	floppyTable
10002580:	8a 00                	mov    al,BYTE PTR [eax]
10002582:	0f b6 c0             	movzx  eax,al
10002585:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
10002588:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000258b:	01 c0                	add    eax,eax
1000258d:	89 c1                	mov    ecx,eax
1000258f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002592:	ba 00 00 00 00       	mov    edx,0x0
10002597:	f7 f1                	div    ecx
10002599:	89 c2                	mov    edx,eax
1000259b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000259e:	89 10                	mov    DWORD PTR [eax],edx
100025a0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100025a3:	01 c0                	add    eax,eax
100025a5:	89 c1                	mov    ecx,eax
100025a7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100025aa:	ba 00 00 00 00       	mov    edx,0x0
100025af:	f7 f1                	div    ecx
100025b1:	89 d0                	mov    eax,edx
100025b3:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
100025b6:	ba 00 00 00 00       	mov    edx,0x0
100025bb:	f7 f1                	div    ecx
100025bd:	89 c2                	mov    edx,eax
100025bf:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100025c2:	89 10                	mov    DWORD PTR [eax],edx
100025c4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100025c7:	01 c0                	add    eax,eax
100025c9:	89 c1                	mov    ecx,eax
100025cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100025ce:	ba 00 00 00 00       	mov    edx,0x0
100025d3:	f7 f1                	div    ecx
100025d5:	89 d0                	mov    eax,edx
100025d7:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
100025da:	ba 00 00 00 00       	mov    edx,0x0
100025df:	f7 f1                	div    ecx
100025e1:	89 d0                	mov    eax,edx
100025e3:	40                   	inc    eax
100025e4:	89 c2                	mov    edx,eax
100025e6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100025e9:	89 10                	mov    DWORD PTR [eax],edx
100025eb:	90                   	nop
100025ec:	c9                   	leave  
100025ed:	c3                   	ret    

100025ee <FloppyDrive::eject()>:
100025ee:	55                   	push   ebp
100025ef:	89 e5                	mov    ebp,esp
100025f1:	57                   	push   edi
100025f2:	56                   	push   esi
100025f3:	53                   	push   ebx
100025f4:	83 ec 2c             	sub    esp,0x2c
100025f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10002600:	83 ec 0c             	sub    esp,0xc
10002603:	50                   	push   eax
10002604:	e8 fc ff ff ff       	call   10002605 <FloppyDrive::eject()+0x17>	10002605: R_386_PC32	VCache::writeWriteBuffer()
10002609:	83 c4 10             	add    esp,0x10
1000260c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000260f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10002615:	83 ec 0c             	sub    esp,0xc
10002618:	50                   	push   eax
10002619:	e8 fc ff ff ff       	call   1000261a <FloppyDrive::eject()+0x2c>	1000261a: R_386_PC32	VCache::invalidateReadBuffer()
1000261e:	83 c4 10             	add    esp,0x10
10002621:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002623: R_386_32	hasCyl0Bf
10002628:	c7 05 00 00 00 00 ff ff ff ff 	mov    DWORD PTR ds:0x0,0xffffffff	1000262a: R_386_32	_TEMP_cyl
10002632:	a1 00 00 00 00       	mov    eax,ds:0x0	10002633: R_386_32	_TEMP_trackBuffer
10002637:	83 ec 04             	sub    esp,0x4
1000263a:	68 00 48 00 00       	push   0x4800
1000263f:	6a 00                	push   0x0
10002641:	50                   	push   eax
10002642:	e8 fc ff ff ff       	call   10002643 <FloppyDrive::eject()+0x55>	10002643: R_386_PC32	memset
10002647:	83 c4 10             	add    esp,0x10
1000264a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000264b: R_386_32	_TEMP_cylinder0_bf
1000264f:	83 ec 04             	sub    esp,0x4
10002652:	68 00 48 00 00       	push   0x4800
10002657:	6a 00                	push   0x0
10002659:	50                   	push   eax
1000265a:	e8 fc ff ff ff       	call   1000265b <FloppyDrive::eject()+0x6d>	1000265b: R_386_PC32	memset
1000265f:	83 c4 10             	add    esp,0x10
10002662:	a1 00 00 00 00       	mov    eax,ds:0x0	10002663: R_386_32	_TEMP_write_bf
10002667:	83 ec 04             	sub    esp,0x4
1000266a:	68 00 48 00 00       	push   0x4800
1000266f:	6a 00                	push   0x0
10002671:	50                   	push   eax
10002672:	e8 fc ff ff ff       	call   10002673 <FloppyDrive::eject()+0x85>	10002673: R_386_PC32	memset
10002677:	83 c4 10             	add    esp,0x10
1000267a:	8d 45 ce             	lea    eax,[ebp-0x32]
1000267d:	bb 5e 5d 00 10       	mov    ebx,0x10005d5e	1000267e: R_386_32	.text
10002682:	ba 1a 00 00 00       	mov    edx,0x1a
10002687:	89 c7                	mov    edi,eax
10002689:	89 de                	mov    esi,ebx
1000268b:	89 d1                	mov    ecx,edx
1000268d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000268f:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002691: R_386_32	activeTerminal
10002695:	a1 00 00 00 00       	mov    eax,ds:0x0	10002696: R_386_32	activeTerminal
1000269a:	8b 00                	mov    eax,DWORD PTR [eax]
1000269c:	83 c0 10             	add    eax,0x10
1000269f:	8b 00                	mov    eax,DWORD PTR [eax]
100026a1:	83 ec 0c             	sub    esp,0xc
100026a4:	8d 4d c8             	lea    ecx,[ebp-0x38]
100026a7:	51                   	push   ecx
100026a8:	8d 4d ce             	lea    ecx,[ebp-0x32]
100026ab:	51                   	push   ecx
100026ac:	6a 00                	push   0x0
100026ae:	6a 1a                	push   0x1a
100026b0:	52                   	push   edx
100026b1:	ff d0                	call   eax
100026b3:	83 c4 20             	add    esp,0x20
100026b6:	b8 00 00 00 00       	mov    eax,0x0
100026bb:	8d 65 f4             	lea    esp,[ebp-0xc]
100026be:	5b                   	pop    ebx
100026bf:	5e                   	pop    esi
100026c0:	5f                   	pop    edi
100026c1:	5d                   	pop    ebp
100026c2:	c3                   	ret    
100026c3:	90                   	nop

100026c4 <FloppyDrive::read(unsigned long long, int, void*)>:
100026c4:	55                   	push   ebp
100026c5:	89 e5                	mov    ebp,esp
100026c7:	57                   	push   edi
100026c8:	56                   	push   esi
100026c9:	53                   	push   ebx
100026ca:	83 ec 6c             	sub    esp,0x6c
100026cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100026d0:	89 45 90             	mov    DWORD PTR [ebp-0x70],eax
100026d3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100026d6:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
100026d9:	a0 00 00 00 00       	mov    al,ds:0x0	100026da: R_386_32	_TEMP_allocated
100026de:	83 f0 01             	xor    eax,0x1
100026e1:	84 c0                	test   al,al
100026e3:	74 46                	je     1000272b <FloppyDrive::read(unsigned long long, int, void*)+0x67>
100026e5:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100026e7: R_386_32	_TEMP_allocated
100026ec:	83 ec 0c             	sub    esp,0xc
100026ef:	68 00 48 00 00       	push   0x4800
100026f4:	e8 fc ff ff ff       	call   100026f5 <FloppyDrive::read(unsigned long long, int, void*)+0x31>	100026f5: R_386_PC32	malloc
100026f9:	83 c4 10             	add    esp,0x10
100026fc:	a3 00 00 00 00       	mov    ds:0x0,eax	100026fd: R_386_32	_TEMP_trackBuffer
10002701:	83 ec 0c             	sub    esp,0xc
10002704:	68 00 48 00 00       	push   0x4800
10002709:	e8 fc ff ff ff       	call   1000270a <FloppyDrive::read(unsigned long long, int, void*)+0x46>	1000270a: R_386_PC32	malloc
1000270e:	83 c4 10             	add    esp,0x10
10002711:	a3 00 00 00 00       	mov    ds:0x0,eax	10002712: R_386_32	_TEMP_cylinder0_bf
10002716:	83 ec 0c             	sub    esp,0xc
10002719:	68 00 48 00 00       	push   0x4800
1000271e:	e8 fc ff ff ff       	call   1000271f <FloppyDrive::read(unsigned long long, int, void*)+0x5b>	1000271f: R_386_PC32	malloc
10002723:	83 c4 10             	add    esp,0x10
10002726:	a3 00 00 00 00       	mov    ds:0x0,eax	10002727: R_386_32	_TEMP_write_bf
1000272b:	83 7d 14 01          	cmp    DWORD PTR [ebp+0x14],0x1
1000272f:	74 10                	je     10002741 <FloppyDrive::read(unsigned long long, int, void*)+0x7d>
10002731:	83 ec 0c             	sub    esp,0xc
10002734:	68 78 5d 00 10       	push   0x10005d78	10002735: R_386_32	.text
10002739:	e8 fc ff ff ff       	call   1000273a <FloppyDrive::read(unsigned long long, int, void*)+0x76>	1000273a: R_386_PC32	Krnl::panic(char const*)
1000273e:	83 c4 10             	add    esp,0x10
10002741:	83 ec 0c             	sub    esp,0xc
10002744:	68 90 5d 00 10       	push   0x10005d90	10002745: R_386_32	.text
10002749:	e8 fc ff ff ff       	call   1000274a <FloppyDrive::read(unsigned long long, int, void*)+0x86>	1000274a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000274e:	83 c4 10             	add    esp,0x10
10002751:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
10002754:	83 ec 0c             	sub    esp,0xc
10002757:	8d 55 a0             	lea    edx,[ebp-0x60]
1000275a:	52                   	push   edx
1000275b:	8d 55 a4             	lea    edx,[ebp-0x5c]
1000275e:	52                   	push   edx
1000275f:	8d 55 a8             	lea    edx,[ebp-0x58]
10002762:	52                   	push   edx
10002763:	50                   	push   eax
10002764:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002767:	e8 fc ff ff ff       	call   10002768 <FloppyDrive::read(unsigned long long, int, void*)+0xa4>	10002768: R_386_PC32	FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)
1000276c:	83 c4 20             	add    esp,0x20
1000276f:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
10002772:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
10002775:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10002778:	51                   	push   ecx
10002779:	52                   	push   edx
1000277a:	50                   	push   eax
1000277b:	68 ab 5d 00 10       	push   0x10005dab	1000277c: R_386_32	.text
10002780:	e8 fc ff ff ff       	call   10002781 <FloppyDrive::read(unsigned long long, int, void*)+0xbd>	10002781: R_386_PC32	Dbg::kprintf(char const*, ...)
10002785:	83 c4 10             	add    esp,0x10
10002788:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
1000278b:	85 c0                	test   eax,eax
1000278d:	75 2a                	jne    100027b9 <FloppyDrive::read(unsigned long long, int, void*)+0xf5>
1000278f:	a0 00 00 00 00       	mov    al,ds:0x0	10002790: R_386_32	hasCyl0Bf
10002794:	83 f0 01             	xor    eax,0x1
10002797:	84 c0                	test   al,al
10002799:	74 5a                	je     100027f5 <FloppyDrive::read(unsigned long long, int, void*)+0x131>
1000279b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000279c: R_386_32	_TEMP_cylinder0_bf
100027a0:	50                   	push   eax
100027a1:	6a 00                	push   0x0
100027a3:	6a 00                	push   0x0
100027a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100027a8:	e8 fc ff ff ff       	call   100027a9 <FloppyDrive::read(unsigned long long, int, void*)+0xe5>	100027a9: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
100027ad:	83 c4 10             	add    esp,0x10
100027b0:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100027b2: R_386_32	hasCyl0Bf
100027b7:	eb 3c                	jmp    100027f5 <FloppyDrive::read(unsigned long long, int, void*)+0x131>
100027b9:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
100027bc:	a1 00 00 00 00       	mov    eax,ds:0x0	100027bd: R_386_32	_TEMP_cyl
100027c1:	39 c2                	cmp    edx,eax
100027c3:	74 30                	je     100027f5 <FloppyDrive::read(unsigned long long, int, void*)+0x131>
100027c5:	83 ec 0c             	sub    esp,0xc
100027c8:	68 c3 5d 00 10       	push   0x10005dc3	100027c9: R_386_32	.text
100027cd:	e8 fc ff ff ff       	call   100027ce <FloppyDrive::read(unsigned long long, int, void*)+0x10a>	100027ce: R_386_PC32	Dbg::kprintf(char const*, ...)
100027d2:	83 c4 10             	add    esp,0x10
100027d5:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100027d7: R_386_32	_TEMP_trackBuffer
100027db:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
100027de:	52                   	push   edx
100027df:	6a 00                	push   0x0
100027e1:	50                   	push   eax
100027e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100027e5:	e8 fc ff ff ff       	call   100027e6 <FloppyDrive::read(unsigned long long, int, void*)+0x122>	100027e6: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
100027ea:	83 c4 10             	add    esp,0x10
100027ed:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
100027f0:	a3 00 00 00 00       	mov    ds:0x0,eax	100027f1: R_386_32	_TEMP_cyl
100027f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100027f8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100027fe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10002801:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10002807:	83 c2 64             	add    edx,0x64
1000280a:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
1000280e:	89 d0                	mov    eax,edx
10002810:	c1 e0 02             	shl    eax,0x2
10002813:	01 d0                	add    eax,edx
10002815:	c1 e0 02             	shl    eax,0x2
10002818:	01 d0                	add    eax,edx
1000281a:	05 13 00 00 00       	add    eax,0x13	1000281b: R_386_32	floppyTable
1000281f:	8a 00                	mov    al,BYTE PTR [eax]
10002821:	0f b6 c0             	movzx  eax,al
10002824:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002827:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
1000282a:	85 c0                	test   eax,eax
1000282c:	75 53                	jne    10002881 <FloppyDrive::read(unsigned long long, int, void*)+0x1bd>
1000282e:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002830: R_386_32	_TEMP_cylinder0_bf
10002834:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10002837:	48                   	dec    eax
10002838:	c1 e0 09             	shl    eax,0x9
1000283b:	89 c1                	mov    ecx,eax
1000283d:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10002840:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
10002844:	c1 e0 09             	shl    eax,0x9
10002847:	01 c8                	add    eax,ecx
10002849:	01 c2                	add    edx,eax
1000284b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000284e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002851:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002854:	c7 45 d8 00 02 00 00 	mov    DWORD PTR [ebp-0x28],0x200
1000285b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
1000285e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10002861:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10002864:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10002867:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
1000286a:	89 c6                	mov    esi,eax
1000286c:	89 d7                	mov    edi,edx
1000286e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002870:	89 c8                	mov    eax,ecx
10002872:	89 fa                	mov    edx,edi
10002874:	89 f3                	mov    ebx,esi
10002876:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
10002879:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
1000287c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000287f:	eb 51                	jmp    100028d2 <FloppyDrive::read(unsigned long long, int, void*)+0x20e>
10002881:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002883: R_386_32	_TEMP_trackBuffer
10002887:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000288a:	48                   	dec    eax
1000288b:	c1 e0 09             	shl    eax,0x9
1000288e:	89 c1                	mov    ecx,eax
10002890:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10002893:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
10002897:	c1 e0 09             	shl    eax,0x9
1000289a:	01 c8                	add    eax,ecx
1000289c:	01 c2                	add    edx,eax
1000289e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100028a1:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
100028a4:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
100028a7:	c7 45 bc 00 02 00 00 	mov    DWORD PTR [ebp-0x44],0x200
100028ae:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100028b1:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100028b4:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100028b7:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
100028ba:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
100028bd:	89 c6                	mov    esi,eax
100028bf:	89 d7                	mov    edi,edx
100028c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100028c3:	89 c8                	mov    eax,ecx
100028c5:	89 fa                	mov    edx,edi
100028c7:	89 f3                	mov    ebx,esi
100028c9:	89 5d b4             	mov    DWORD PTR [ebp-0x4c],ebx
100028cc:	89 55 b0             	mov    DWORD PTR [ebp-0x50],edx
100028cf:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
100028d2:	b8 00 00 00 00       	mov    eax,0x0
100028d7:	8d 65 f4             	lea    esp,[ebp-0xc]
100028da:	5b                   	pop    ebx
100028db:	5e                   	pop    esi
100028dc:	5f                   	pop    edi
100028dd:	5d                   	pop    ebp
100028de:	c3                   	ret    
100028df:	90                   	nop

100028e0 <FloppyDrive::write(unsigned long long, int, void*)>:
100028e0:	55                   	push   ebp
100028e1:	89 e5                	mov    ebp,esp
100028e3:	57                   	push   edi
100028e4:	56                   	push   esi
100028e5:	53                   	push   ebx
100028e6:	81 ec 8c 00 00 00    	sub    esp,0x8c
100028ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100028ef:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
100028f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100028f8:	89 85 74 ff ff ff    	mov    DWORD PTR [ebp-0x8c],eax
100028fe:	a0 00 00 00 00       	mov    al,ds:0x0	100028ff: R_386_32	_TEMP_allocated
10002903:	83 f0 01             	xor    eax,0x1
10002906:	84 c0                	test   al,al
10002908:	74 46                	je     10002950 <FloppyDrive::write(unsigned long long, int, void*)+0x70>
1000290a:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000290c: R_386_32	_TEMP_allocated
10002911:	83 ec 0c             	sub    esp,0xc
10002914:	68 00 48 00 00       	push   0x4800
10002919:	e8 fc ff ff ff       	call   1000291a <FloppyDrive::write(unsigned long long, int, void*)+0x3a>	1000291a: R_386_PC32	malloc
1000291e:	83 c4 10             	add    esp,0x10
10002921:	a3 00 00 00 00       	mov    ds:0x0,eax	10002922: R_386_32	_TEMP_trackBuffer
10002926:	83 ec 0c             	sub    esp,0xc
10002929:	68 00 48 00 00       	push   0x4800
1000292e:	e8 fc ff ff ff       	call   1000292f <FloppyDrive::write(unsigned long long, int, void*)+0x4f>	1000292f: R_386_PC32	malloc
10002933:	83 c4 10             	add    esp,0x10
10002936:	a3 00 00 00 00       	mov    ds:0x0,eax	10002937: R_386_32	_TEMP_cylinder0_bf
1000293b:	83 ec 0c             	sub    esp,0xc
1000293e:	68 00 48 00 00       	push   0x4800
10002943:	e8 fc ff ff ff       	call   10002944 <FloppyDrive::write(unsigned long long, int, void*)+0x64>	10002944: R_386_PC32	malloc
10002948:	83 c4 10             	add    esp,0x10
1000294b:	a3 00 00 00 00       	mov    ds:0x0,eax	1000294c: R_386_32	_TEMP_write_bf
10002950:	83 7d 14 01          	cmp    DWORD PTR [ebp+0x14],0x1
10002954:	74 5b                	je     100029b1 <FloppyDrive::write(unsigned long long, int, void*)+0xd1>
10002956:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
1000295d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10002960:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10002963:	7d 42                	jge    100029a7 <FloppyDrive::write(unsigned long long, int, void*)+0xc7>
10002965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002968:	8b 00                	mov    eax,DWORD PTR [eax]
1000296a:	83 c0 2c             	add    eax,0x2c
1000296d:	8b 30                	mov    esi,DWORD PTR [eax]
1000296f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10002972:	89 c1                	mov    ecx,eax
10002974:	89 c3                	mov    ebx,eax
10002976:	c1 fb 1f             	sar    ebx,0x1f
10002979:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [ebp-0x90]
1000297f:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [ebp-0x8c]
10002985:	01 c8                	add    eax,ecx
10002987:	11 da                	adc    edx,ebx
10002989:	83 ec 0c             	sub    esp,0xc
1000298c:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000298f:	6a 01                	push   0x1
10002991:	52                   	push   edx
10002992:	50                   	push   eax
10002993:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002996:	ff d6                	call   esi
10002998:	83 c4 20             	add    esp,0x20
1000299b:	81 45 18 00 02 00 00 	add    DWORD PTR [ebp+0x18],0x200
100029a2:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100029a5:	eb b6                	jmp    1000295d <FloppyDrive::write(unsigned long long, int, void*)+0x7d>
100029a7:	b8 00 00 00 00       	mov    eax,0x0
100029ac:	e9 d1 01 00 00       	jmp    10002b82 <FloppyDrive::write(unsigned long long, int, void*)+0x2a2>
100029b1:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [ebp-0x90]
100029b7:	83 ec 0c             	sub    esp,0xc
100029ba:	8d 55 80             	lea    edx,[ebp-0x80]
100029bd:	52                   	push   edx
100029be:	8d 55 84             	lea    edx,[ebp-0x7c]
100029c1:	52                   	push   edx
100029c2:	8d 55 88             	lea    edx,[ebp-0x78]
100029c5:	52                   	push   edx
100029c6:	50                   	push   eax
100029c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100029ca:	e8 fc ff ff ff       	call   100029cb <FloppyDrive::write(unsigned long long, int, void*)+0xeb>	100029cb: R_386_PC32	FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)
100029cf:	83 c4 20             	add    esp,0x20
100029d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029d5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100029db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100029de:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100029e4:	83 c2 64             	add    edx,0x64
100029e7:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
100029eb:	89 d0                	mov    eax,edx
100029ed:	c1 e0 02             	shl    eax,0x2
100029f0:	01 d0                	add    eax,edx
100029f2:	c1 e0 02             	shl    eax,0x2
100029f5:	01 d0                	add    eax,edx
100029f7:	05 13 00 00 00       	add    eax,0x13	100029f8: R_386_32	floppyTable
100029fc:	8a 00                	mov    al,BYTE PTR [eax]
100029fe:	0f b6 c0             	movzx  eax,al
10002a01:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002a04:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002a07:	85 c0                	test   eax,eax
10002a09:	75 77                	jne    10002a82 <FloppyDrive::write(unsigned long long, int, void*)+0x1a2>
10002a0b:	a0 00 00 00 00       	mov    al,ds:0x0	10002a0c: R_386_32	hasCyl0Bf
10002a10:	84 c0                	test   al,al
10002a12:	74 6e                	je     10002a82 <FloppyDrive::write(unsigned long long, int, void*)+0x1a2>
10002a14:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002a16: R_386_32	_TEMP_cylinder0_bf
10002a1a:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002a1d:	48                   	dec    eax
10002a1e:	c1 e0 09             	shl    eax,0x9
10002a21:	89 c1                	mov    ecx,eax
10002a23:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
10002a26:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
10002a2a:	c1 e0 09             	shl    eax,0x9
10002a2d:	01 c8                	add    eax,ecx
10002a2f:	01 d0                	add    eax,edx
10002a31:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10002a34:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002a37:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002a3a:	c7 45 d4 00 02 00 00 	mov    DWORD PTR [ebp-0x2c],0x200
10002a41:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10002a44:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10002a47:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002a4a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002a4d:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002a50:	89 c6                	mov    esi,eax
10002a52:	89 d7                	mov    edi,edx
10002a54:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002a56:	89 c8                	mov    eax,ecx
10002a58:	89 fa                	mov    edx,edi
10002a5a:	89 f3                	mov    ebx,esi
10002a5c:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
10002a5f:	89 55 c8             	mov    DWORD PTR [ebp-0x38],edx
10002a62:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10002a65:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002a67: R_386_32	_TEMP_cylinder0_bf
10002a6b:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002a6e:	52                   	push   edx
10002a6f:	6a 01                	push   0x1
10002a71:	50                   	push   eax
10002a72:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a75:	e8 fc ff ff ff       	call   10002a76 <FloppyDrive::write(unsigned long long, int, void*)+0x196>	10002a76: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002a7a:	83 c4 10             	add    esp,0x10
10002a7d:	e9 fb 00 00 00       	jmp    10002b7d <FloppyDrive::write(unsigned long long, int, void*)+0x29d>
10002a82:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
10002a85:	a1 00 00 00 00       	mov    eax,ds:0x0	10002a86: R_386_32	_TEMP_cyl
10002a8a:	39 c2                	cmp    edx,eax
10002a8c:	75 6e                	jne    10002afc <FloppyDrive::write(unsigned long long, int, void*)+0x21c>
10002a8e:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002a90: R_386_32	_TEMP_trackBuffer
10002a94:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002a97:	48                   	dec    eax
10002a98:	c1 e0 09             	shl    eax,0x9
10002a9b:	89 c1                	mov    ecx,eax
10002a9d:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
10002aa0:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
10002aa4:	c1 e0 09             	shl    eax,0x9
10002aa7:	01 c8                	add    eax,ecx
10002aa9:	01 d0                	add    eax,edx
10002aab:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10002aae:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002ab1:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10002ab4:	c7 45 b8 00 02 00 00 	mov    DWORD PTR [ebp-0x48],0x200
10002abb:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002abe:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10002ac1:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10002ac4:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10002ac7:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
10002aca:	89 c6                	mov    esi,eax
10002acc:	89 d7                	mov    edi,edx
10002ace:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002ad0:	89 c8                	mov    eax,ecx
10002ad2:	89 fa                	mov    edx,edi
10002ad4:	89 f3                	mov    ebx,esi
10002ad6:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
10002ad9:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10002adc:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10002adf:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002ae1: R_386_32	_TEMP_trackBuffer
10002ae5:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002ae8:	52                   	push   edx
10002ae9:	6a 01                	push   0x1
10002aeb:	50                   	push   eax
10002aec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002aef:	e8 fc ff ff ff       	call   10002af0 <FloppyDrive::write(unsigned long long, int, void*)+0x210>	10002af0: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002af4:	83 c4 10             	add    esp,0x10
10002af7:	e9 81 00 00 00       	jmp    10002b7d <FloppyDrive::write(unsigned long long, int, void*)+0x29d>
10002afc:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002afe: R_386_32	_TEMP_write_bf
10002b02:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002b05:	52                   	push   edx
10002b06:	6a 00                	push   0x0
10002b08:	50                   	push   eax
10002b09:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002b0c:	e8 fc ff ff ff       	call   10002b0d <FloppyDrive::write(unsigned long long, int, void*)+0x22d>	10002b0d: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002b11:	83 c4 10             	add    esp,0x10
10002b14:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002b16: R_386_32	_TEMP_write_bf
10002b1a:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002b1d:	48                   	dec    eax
10002b1e:	c1 e0 09             	shl    eax,0x9
10002b21:	89 c1                	mov    ecx,eax
10002b23:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
10002b26:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
10002b2a:	c1 e0 09             	shl    eax,0x9
10002b2d:	01 c8                	add    eax,ecx
10002b2f:	01 d0                	add    eax,edx
10002b31:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10002b34:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002b37:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10002b3a:	c7 45 9c 00 02 00 00 	mov    DWORD PTR [ebp-0x64],0x200
10002b41:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10002b44:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10002b47:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10002b4a:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
10002b4d:	8b 4d 9c             	mov    ecx,DWORD PTR [ebp-0x64]
10002b50:	89 c6                	mov    esi,eax
10002b52:	89 d7                	mov    edi,edx
10002b54:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002b56:	89 c8                	mov    eax,ecx
10002b58:	89 fa                	mov    edx,edi
10002b5a:	89 f3                	mov    ebx,esi
10002b5c:	89 5d 94             	mov    DWORD PTR [ebp-0x6c],ebx
10002b5f:	89 55 90             	mov    DWORD PTR [ebp-0x70],edx
10002b62:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
10002b65:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002b67: R_386_32	_TEMP_write_bf
10002b6b:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002b6e:	52                   	push   edx
10002b6f:	6a 01                	push   0x1
10002b71:	50                   	push   eax
10002b72:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002b75:	e8 fc ff ff ff       	call   10002b76 <FloppyDrive::write(unsigned long long, int, void*)+0x296>	10002b76: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002b7a:	83 c4 10             	add    esp,0x10
10002b7d:	b8 00 00 00 00       	mov    eax,0x0
10002b82:	8d 65 f4             	lea    esp,[ebp-0xc]
10002b85:	5b                   	pop    ebx
10002b86:	5e                   	pop    esi
10002b87:	5f                   	pop    edi
10002b88:	5d                   	pop    ebp
10002b89:	c3                   	ret    

10002b8a <FloppyDrive::~FloppyDrive()>:
10002b8a:	55                   	push   ebp
10002b8b:	89 e5                	mov    ebp,esp
10002b8d:	83 ec 08             	sub    esp,0x8
10002b90:	ba 08 00 00 00       	mov    edx,0x8	10002b91: R_386_32	vtable for FloppyDrive
10002b95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b98:	89 10                	mov    DWORD PTR [eax],edx
10002b9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b9d:	83 ec 0c             	sub    esp,0xc
10002ba0:	50                   	push   eax
10002ba1:	e8 fc ff ff ff       	call   10002ba2 <FloppyDrive::~FloppyDrive()+0x18>	10002ba2: R_386_PC32	PhysicalDisk::~PhysicalDisk()
10002ba6:	83 c4 10             	add    esp,0x10
10002ba9:	90                   	nop
10002baa:	c9                   	leave  
10002bab:	c3                   	ret    

10002bac <FloppyDrive::~FloppyDrive()>:
10002bac:	55                   	push   ebp
10002bad:	89 e5                	mov    ebp,esp
10002baf:	83 ec 08             	sub    esp,0x8
10002bb2:	83 ec 0c             	sub    esp,0xc
10002bb5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002bb8:	e8 fc ff ff ff       	call   10002bb9 <FloppyDrive::~FloppyDrive()+0xd>	10002bb9: R_386_PC32	FloppyDrive::~FloppyDrive()
10002bbd:	83 c4 10             	add    esp,0x10
10002bc0:	83 ec 08             	sub    esp,0x8
10002bc3:	68 74 01 00 00       	push   0x174
10002bc8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002bcb:	e8 fc ff ff ff       	call   10002bcc <FloppyDrive::~FloppyDrive()+0x20>	10002bcc: R_386_PC32	operator delete(void*, unsigned long)
10002bd0:	83 c4 10             	add    esp,0x10
10002bd3:	c9                   	leave  
10002bd4:	c3                   	ret    
10002bd5:	90                   	nop

10002bd6 <Gameport::Gameport()>:
10002bd6:	55                   	push   ebp
10002bd7:	89 e5                	mov    ebp,esp
10002bd9:	83 ec 08             	sub    esp,0x8
10002bdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bdf:	83 ec 08             	sub    esp,0x8
10002be2:	68 d8 5e 00 10       	push   0x10005ed8	10002be3: R_386_32	.text
10002be7:	50                   	push   eax
10002be8:	e8 fc ff ff ff       	call   10002be9 <Gameport::Gameport()+0x13>	10002be9: R_386_PC32	Device::Device(char const*)
10002bed:	83 c4 10             	add    esp,0x10
10002bf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bf3:	05 58 01 00 00       	add    eax,0x158
10002bf8:	83 ec 0c             	sub    esp,0xc
10002bfb:	50                   	push   eax
10002bfc:	e8 fc ff ff ff       	call   10002bfd <Gameport::Gameport()+0x27>	10002bfd: R_386_PC32	JoystickHost::JoystickHost()
10002c01:	83 c4 10             	add    esp,0x10
10002c04:	ba 08 00 00 00       	mov    edx,0x8	10002c05: R_386_32	vtable for Gameport
10002c09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c0c:	89 10                	mov    DWORD PTR [eax],edx
10002c0e:	ba 38 00 00 00       	mov    edx,0x38	10002c0f: R_386_32	vtable for Gameport
10002c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c16:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10002c1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c1f:	c7 80 5c 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x15c],0x14a
10002c29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c2c:	c7 80 60 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x160],0x14a
10002c36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c39:	c7 80 64 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x164],0x14a
10002c43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c46:	c7 80 68 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x168],0x14a
10002c50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c53:	c7 80 6c 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x16c],0x3d4
10002c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c60:	c7 80 70 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x170],0x3d4
10002c6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c6d:	c7 80 74 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x174],0x3d4
10002c77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c7a:	c7 80 78 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x178],0x3d4
10002c84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c87:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
10002c8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c91:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10002c98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c9b:	c6 80 7e 01 00 00 00 	mov    BYTE PTR [eax+0x17e],0x0
10002ca2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ca5:	c6 80 7f 01 00 00 00 	mov    BYTE PTR [eax+0x17f],0x0
10002cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002caf:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
10002cb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cb9:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10002cc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cc3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002cc9:	0f b6 d0             	movzx  edx,al
10002ccc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ccf:	66 c7 44 90 04 01 02 	mov    WORD PTR [eax+edx*4+0x4],0x201
10002cd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cd9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002cdf:	0f b6 d0             	movzx  edx,al
10002ce2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ce5:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10002cea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ced:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002cf3:	8d 50 01             	lea    edx,[eax+0x1]
10002cf6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10002cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10002cff:	0f b6 d0             	movzx  edx,al
10002d02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d05:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10002d09:	83 e1 3f             	and    ecx,0x3f
10002d0c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10002d10:	90                   	nop
10002d11:	c9                   	leave  
10002d12:	c3                   	ret    
10002d13:	90                   	nop

10002d14 <Gameport::~Gameport()>:
10002d14:	55                   	push   ebp
10002d15:	89 e5                	mov    ebp,esp
10002d17:	83 ec 08             	sub    esp,0x8
10002d1a:	ba 08 00 00 00       	mov    edx,0x8	10002d1b: R_386_32	vtable for Gameport
10002d1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d22:	89 10                	mov    DWORD PTR [eax],edx
10002d24:	ba 38 00 00 00       	mov    edx,0x38	10002d25: R_386_32	vtable for Gameport
10002d29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d2c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10002d32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d35:	83 ec 0c             	sub    esp,0xc
10002d38:	50                   	push   eax
10002d39:	e8 fc ff ff ff       	call   10002d3a <Gameport::~Gameport()+0x26>	10002d3a: R_386_PC32	Device::~Device()
10002d3e:	83 c4 10             	add    esp,0x10
10002d41:	90                   	nop
10002d42:	c9                   	leave  
10002d43:	c3                   	ret    

10002d44 <Gameport::~Gameport()>:
10002d44:	55                   	push   ebp
10002d45:	89 e5                	mov    ebp,esp
10002d47:	83 ec 08             	sub    esp,0x8
10002d4a:	83 ec 0c             	sub    esp,0xc
10002d4d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002d50:	e8 fc ff ff ff       	call   10002d51 <Gameport::~Gameport()+0xd>	10002d51: R_386_PC32	Gameport::~Gameport()
10002d55:	83 c4 10             	add    esp,0x10
10002d58:	83 ec 08             	sub    esp,0x8
10002d5b:	68 80 01 00 00       	push   0x180
10002d60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002d63:	e8 fc ff ff ff       	call   10002d64 <Gameport::~Gameport()+0x20>	10002d64: R_386_PC32	operator delete(void*, unsigned long)
10002d68:	83 c4 10             	add    esp,0x10
10002d6b:	c9                   	leave  
10002d6c:	c3                   	ret    
10002d6d:	90                   	nop

10002d6e <Gameport::calibration(int)>:
10002d6e:	57                   	push   edi
10002d6f:	56                   	push   esi
10002d70:	53                   	push   ebx
10002d71:	81 ec d0 00 00 00    	sub    esp,0xd0
10002d77:	8b 9c 24 e0 00 00 00 	mov    ebx,DWORD PTR [esp+0xe0]
10002d7e:	8b b4 24 e4 00 00 00 	mov    esi,DWORD PTR [esp+0xe4]
10002d85:	80 bb 7e 01 00 00 00 	cmp    BYTE PTR [ebx+0x17e],0x0
10002d8c:	74 0c                	je     10002d9a <Gameport::calibration(int)+0x2c>
10002d8e:	c6 83 7f 01 00 00 01 	mov    BYTE PTR [ebx+0x17f],0x1
10002d95:	e9 e6 00 00 00       	jmp    10002e80 <Gameport::calibration(int)+0x112>
10002d9a:	8d bc 24 9c 00 00 00 	lea    edi,[esp+0x9c]
10002da1:	50                   	push   eax
10002da2:	56                   	push   esi
10002da3:	53                   	push   ebx
10002da4:	57                   	push   edi
10002da5:	e8 fc ff ff ff       	call   10002da6 <Gameport::calibration(int)+0x38>	10002da6: R_386_PC32	Gameport::readRaw(int)
10002daa:	6a 0a                	push   0xa
10002dac:	e8 fc ff ff ff       	call   10002dad <Gameport::calibration(int)+0x3f>	10002dad: R_386_PC32	milliTenthSleep(unsigned int)
10002db1:	8d 44 24 10          	lea    eax,[esp+0x10]
10002db5:	83 c4 0c             	add    esp,0xc
10002db8:	56                   	push   esi
10002db9:	53                   	push   ebx
10002dba:	50                   	push   eax
10002dbb:	e8 fc ff ff ff       	call   10002dbc <Gameport::calibration(int)+0x4e>	10002dbc: R_386_PC32	Gameport::readRaw(int)
10002dc0:	6a 0a                	push   0xa
10002dc2:	e8 fc ff ff ff       	call   10002dc3 <Gameport::calibration(int)+0x55>	10002dc3: R_386_PC32	milliTenthSleep(unsigned int)
10002dc7:	8d 44 24 44          	lea    eax,[esp+0x44]
10002dcb:	83 c4 0c             	add    esp,0xc
10002dce:	56                   	push   esi
10002dcf:	53                   	push   ebx
10002dd0:	50                   	push   eax
10002dd1:	e8 fc ff ff ff       	call   10002dd2 <Gameport::calibration(int)+0x64>	10002dd2: R_386_PC32	Gameport::readRaw(int)
10002dd6:	6a 0a                	push   0xa
10002dd8:	e8 fc ff ff ff       	call   10002dd9 <Gameport::calibration(int)+0x6b>	10002dd9: R_386_PC32	milliTenthSleep(unsigned int)
10002ddd:	8d 44 24 78          	lea    eax,[esp+0x78]
10002de1:	83 c4 0c             	add    esp,0xc
10002de4:	56                   	push   esi
10002de5:	53                   	push   ebx
10002de6:	50                   	push   eax
10002de7:	e8 fc ff ff ff       	call   10002de8 <Gameport::calibration(int)+0x7a>	10002de8: R_386_PC32	Gameport::readRaw(int)
10002dec:	6a 0a                	push   0xa
10002dee:	e8 fc ff ff ff       	call   10002def <Gameport::calibration(int)+0x81>	10002def: R_386_PC32	milliTenthSleep(unsigned int)
10002df3:	83 c4 0c             	add    esp,0xc
10002df6:	56                   	push   esi
10002df7:	53                   	push   ebx
10002df8:	57                   	push   edi
10002df9:	bf 03 00 00 00       	mov    edi,0x3
10002dfe:	e8 fc ff ff ff       	call   10002dff <Gameport::calibration(int)+0x91>	10002dff: R_386_PC32	Gameport::readRaw(int)
10002e03:	31 d2                	xor    edx,edx
10002e05:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10002e09:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
10002e0d:	03 84 24 88 00 00 00 	add    eax,DWORD PTR [esp+0x88]
10002e14:	f7 f7                	div    edi
10002e16:	31 d2                	xor    edx,edx
10002e18:	89 c1                	mov    ecx,eax
10002e1a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10002e1e:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10002e22:	03 84 24 8c 00 00 00 	add    eax,DWORD PTR [esp+0x8c]
10002e29:	83 c4 0c             	add    esp,0xc
10002e2c:	f7 f7                	div    edi
10002e2e:	85 f6                	test   esi,esi
10002e30:	75 0e                	jne    10002e40 <Gameport::calibration(int)+0xd2>
10002e32:	89 8b 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],ecx
10002e38:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10002e3e:	eb 0c                	jmp    10002e4c <Gameport::calibration(int)+0xde>
10002e40:	89 8b 64 01 00 00    	mov    DWORD PTR [ebx+0x164],ecx
10002e46:	89 83 68 01 00 00    	mov    DWORD PTR [ebx+0x168],eax
10002e4c:	6b 83 5c 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x15c],0x3
10002e53:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
10002e59:	6b 83 60 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x160],0x3
10002e60:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
10002e66:	6b 83 64 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x164],0x3
10002e6d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
10002e73:	6b 83 68 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x168],0x3
10002e7a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
10002e80:	81 c4 d0 00 00 00    	add    esp,0xd0
10002e86:	5b                   	pop    ebx
10002e87:	5e                   	pop    esi
10002e88:	5f                   	pop    edi
10002e89:	c3                   	ret    

10002e8a <Gameport::detect()>:
10002e8a:	53                   	push   ebx
10002e8b:	81 ec 88 00 00 00    	sub    esp,0x88
10002e91:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
10002e98:	8d 44 24 18          	lea    eax,[esp+0x18]
10002e9c:	51                   	push   ecx
10002e9d:	6a 00                	push   0x0
10002e9f:	53                   	push   ebx
10002ea0:	50                   	push   eax
10002ea1:	e8 fc ff ff ff       	call   10002ea2 <Gameport::detect()+0x18>	10002ea2: R_386_PC32	Gameport::readRaw(int)
10002ea6:	8d 44 24 58          	lea    eax,[esp+0x58]
10002eaa:	52                   	push   edx
10002eab:	52                   	push   edx
10002eac:	6a 01                	push   0x1
10002eae:	53                   	push   ebx
10002eaf:	50                   	push   eax
10002eb0:	e8 fc ff ff ff       	call   10002eb1 <Gameport::detect()+0x27>	10002eb1: R_386_PC32	Gameport::readRaw(int)
10002eb5:	83 c4 1c             	add    esp,0x1c
10002eb8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10002ebf:	75 14                	jne    10002ed5 <Gameport::detect()+0x4b>
10002ec1:	f6 44 24 18 10       	test   BYTE PTR [esp+0x18],0x10
10002ec6:	74 0d                	je     10002ed5 <Gameport::detect()+0x4b>
10002ec8:	52                   	push   edx
10002ec9:	52                   	push   edx
10002eca:	6a 00                	push   0x0
10002ecc:	53                   	push   ebx
10002ecd:	e8 fc ff ff ff       	call   10002ece <Gameport::detect()+0x44>	10002ece: R_386_PC32	Gameport::calibration(int)
10002ed2:	83 c4 10             	add    esp,0x10
10002ed5:	8a 54 24 4c          	mov    dl,BYTE PTR [esp+0x4c]
10002ed9:	83 e2 10             	and    edx,0x10
10002edc:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10002ee3:	75 19                	jne    10002efe <Gameport::detect()+0x74>
10002ee5:	84 d2                	test   dl,dl
10002ee7:	74 15                	je     10002efe <Gameport::detect()+0x74>
10002ee9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10002eed:	50                   	push   eax
10002eee:	50                   	push   eax
10002eef:	6a 01                	push   0x1
10002ef1:	53                   	push   ebx
10002ef2:	e8 fc ff ff ff       	call   10002ef3 <Gameport::detect()+0x69>	10002ef3: R_386_PC32	Gameport::calibration(int)
10002ef7:	83 c4 10             	add    esp,0x10
10002efa:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
10002efe:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
10002f02:	c0 e8 04             	shr    al,0x4
10002f05:	83 e0 01             	and    eax,0x1
10002f08:	84 d2                	test   dl,dl
10002f0a:	88 83 7c 01 00 00    	mov    BYTE PTR [ebx+0x17c],al
10002f10:	0f 95 83 7d 01 00 00 	setne  BYTE PTR [ebx+0x17d]
10002f17:	81 c4 88 00 00 00    	add    esp,0x88
10002f1d:	5b                   	pop    ebx
10002f1e:	c3                   	ret    
10002f1f:	90                   	nop

10002f20 <Gameport::read(int)>:
10002f20:	57                   	push   edi
10002f21:	56                   	push   esi
10002f22:	53                   	push   ebx
10002f23:	83 ec 50             	sub    esp,0x50
10002f26:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10002f2a:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002f2e:	85 f6                	test   esi,esi
10002f30:	75 09                	jne    10002f3b <Gameport::read(int)+0x1b>
10002f32:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10002f39:	eb 0c                	jmp    10002f47 <Gameport::read(int)+0x27>
10002f3b:	83 fe 01             	cmp    esi,0x1
10002f3e:	75 15                	jne    10002f55 <Gameport::read(int)+0x35>
10002f40:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10002f47:	75 0c                	jne    10002f55 <Gameport::read(int)+0x35>
10002f49:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002f4d:	80 20 ef             	and    BYTE PTR [eax],0xef
10002f50:	e9 b0 00 00 00       	jmp    10003005 <Gameport::read(int)+0xe5>
10002f55:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10002f59:	52                   	push   edx
10002f5a:	56                   	push   esi
10002f5b:	53                   	push   ebx
10002f5c:	50                   	push   eax
10002f5d:	e8 fc ff ff ff       	call   10002f5e <Gameport::read(int)+0x3e>	10002f5e: R_386_PC32	Gameport::readRaw(int)
10002f62:	83 c4 0c             	add    esp,0xc
10002f65:	4e                   	dec    esi
10002f66:	75 1a                	jne    10002f82 <Gameport::read(int)+0x62>
10002f68:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
10002f6e:	8b b3 68 01 00 00    	mov    esi,DWORD PTR [ebx+0x168]
10002f74:	8b 93 74 01 00 00    	mov    edx,DWORD PTR [ebx+0x174]
10002f7a:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
10002f80:	eb 18                	jmp    10002f9a <Gameport::read(int)+0x7a>
10002f82:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
10002f88:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
10002f8e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
10002f94:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10002f9a:	85 ff                	test   edi,edi
10002f9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002fa0:	0f 94 c0             	sete   al
10002fa3:	85 f6                	test   esi,esi
10002fa5:	0f 94 c1             	sete   cl
10002fa8:	09 c1                	or     ecx,eax
10002faa:	39 d7                	cmp    edi,edx
10002fac:	0f 94 c0             	sete   al
10002faf:	08 c1                	or     cl,al
10002fb1:	75 96                	jne    10002f49 <Gameport::read(int)+0x29>
10002fb3:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
10002fb7:	74 90                	je     10002f49 <Gameport::read(int)+0x29>
10002fb9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002fbd:	89 d9                	mov    ecx,ebx
10002fbf:	29 f1                	sub    ecx,esi
10002fc1:	6b c9 7f             	imul   ecx,ecx,0x7f
10002fc4:	39 fb                	cmp    ebx,edi
10002fc6:	7e 1a                	jle    10002fe2 <Gameport::read(int)+0xc2>
10002fc8:	29 fb                	sub    ebx,edi
10002fca:	29 fa                	sub    edx,edi
10002fcc:	6b db 7f             	imul   ebx,ebx,0x7f
10002fcf:	89 d7                	mov    edi,edx
10002fd1:	89 d8                	mov    eax,ebx
10002fd3:	99                   	cdq    
10002fd4:	f7 ff                	idiv   edi
10002fd6:	89 c3                	mov    ebx,eax
10002fd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002fdc:	29 f0                	sub    eax,esi
10002fde:	89 c6                	mov    esi,eax
10002fe0:	eb 07                	jmp    10002fe9 <Gameport::read(int)+0xc9>
10002fe2:	89 c8                	mov    eax,ecx
10002fe4:	99                   	cdq    
10002fe5:	f7 ff                	idiv   edi
10002fe7:	89 c3                	mov    ebx,eax
10002fe9:	89 c8                	mov    eax,ecx
10002feb:	88 5c 24 2d          	mov    BYTE PTR [esp+0x2d],bl
10002fef:	99                   	cdq    
10002ff0:	b9 0d 00 00 00       	mov    ecx,0xd
10002ff5:	f7 fe                	idiv   esi
10002ff7:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
10002ffb:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
10002fff:	8d 74 24 1c          	lea    esi,[esp+0x1c]
10003003:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10003005:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003009:	83 c4 50             	add    esp,0x50
1000300c:	5b                   	pop    ebx
1000300d:	5e                   	pop    esi
1000300e:	5f                   	pop    edi
1000300f:	c2 04 00             	ret    0x4

10003012 <non-virtual thunk to Gameport::read(int)>:
10003012:	81 6c 24 08 58 01 00 00 	sub    DWORD PTR [esp+0x8],0x158
1000301a:	e9 01 ff ff ff       	jmp    10002f20 <Gameport::read(int)>
1000301f:	90                   	nop

10003020 <Gameport::readRaw(int)>:
10003020:	57                   	push   edi
10003021:	ba 01 02 00 00       	mov    edx,0x201
10003026:	56                   	push   esi
10003027:	53                   	push   ebx
10003028:	83 ec 10             	sub    esp,0x10
1000302b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
1000302f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
10003033:	8a 01                	mov    al,BYTE PTR [ecx]
10003035:	83 e0 e0             	and    eax,0xffffffe0
10003038:	83 c8 12             	or     eax,0x12
1000303b:	88 01                	mov    BYTE PTR [ecx],al
1000303d:	ec                   	in     al,dx
1000303e:	88 c2                	mov    dl,al
10003040:	85 db                	test   ebx,ebx
10003042:	75 11                	jne    10003055 <Gameport::readRaw(int)+0x35>
10003044:	c0 ea 04             	shr    dl,0x4
10003047:	c0 e8 05             	shr    al,0x5
1000304a:	83 e2 01             	and    edx,0x1
1000304d:	83 e0 01             	and    eax,0x1
10003050:	88 51 01             	mov    BYTE PTR [ecx+0x1],dl
10003053:	eb 0c                	jmp    10003061 <Gameport::readRaw(int)+0x41>
10003055:	c0 ea 06             	shr    dl,0x6
10003058:	c0 e8 07             	shr    al,0x7
1000305b:	83 e2 01             	and    edx,0x1
1000305e:	88 51 01             	mov    BYTE PTR [ecx+0x1],dl
10003061:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
10003064:	ba 01 02 00 00       	mov    edx,0x201
10003069:	b0 ff                	mov    al,0xff
1000306b:	ee                   	out    dx,al
1000306c:	fa                   	cli    
1000306d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000306e: R_386_32	irqDisableCounter
10003072:	4b                   	dec    ebx
10003073:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003077:	0f 94 c3             	sete   bl
1000307a:	c7 44 24 0c ff ff 00 00 	mov    DWORD PTR [esp+0xc],0xffff
10003082:	0f b6 f3             	movzx  esi,bl
10003085:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
1000308a:	0f b6 db             	movzx  ebx,bl
1000308d:	8d 74 76 01          	lea    esi,[esi+esi*2+0x1]
10003091:	4b                   	dec    ebx
10003092:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
10003097:	83 e3 fa             	and    ebx,0xfffffffa
1000309a:	31 ff                	xor    edi,edi
1000309c:	83 c3 08             	add    ebx,0x8
1000309f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100030a6:	ba 01 02 00 00       	mov    edx,0x201
100030ab:	ec                   	in     al,dx
100030ac:	0f b6 c0             	movzx  eax,al
100030af:	85 f0                	test   eax,esi
100030b1:	0f 94 c2             	sete   dl
100030b4:	08 54 24 06          	or     BYTE PTR [esp+0x6],dl
100030b8:	80 7c 24 06 01       	cmp    BYTE PTR [esp+0x6],0x1
100030bd:	83 14 24 00          	adc    DWORD PTR [esp],0x0
100030c1:	85 d8                	test   eax,ebx
100030c3:	0f 94 c0             	sete   al
100030c6:	08 44 24 07          	or     BYTE PTR [esp+0x7],al
100030ca:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
100030cf:	83 d7 00             	adc    edi,0x0
100030d2:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
100030d6:	75 0a                	jne    100030e2 <Gameport::readRaw(int)+0xc2>
100030d8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
100030dd:	75 13                	jne    100030f2 <Gameport::readRaw(int)+0xd2>
100030df:	fb                   	sti    
100030e0:	eb 10                	jmp    100030f2 <Gameport::readRaw(int)+0xd2>
100030e2:	80 7c 24 06 00       	cmp    BYTE PTR [esp+0x6],0x0
100030e7:	74 bd                	je     100030a6 <Gameport::readRaw(int)+0x86>
100030e9:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
100030ee:	74 b6                	je     100030a6 <Gameport::readRaw(int)+0x86>
100030f0:	eb e6                	jmp    100030d8 <Gameport::readRaw(int)+0xb8>
100030f2:	81 ff ff ff 00 00    	cmp    edi,0xffff
100030f8:	74 09                	je     10003103 <Gameport::readRaw(int)+0xe3>
100030fa:	81 3c 24 ff ff 00 00 	cmp    DWORD PTR [esp],0xffff
10003101:	75 03                	jne    10003106 <Gameport::readRaw(int)+0xe6>
10003103:	80 21 ef             	and    BYTE PTR [ecx],0xef
10003106:	89 79 18             	mov    DWORD PTR [ecx+0x18],edi
10003109:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000310c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
1000310f:	83 c4 10             	add    esp,0x10
10003112:	89 c8                	mov    eax,ecx
10003114:	5b                   	pop    ebx
10003115:	5e                   	pop    esi
10003116:	5f                   	pop    edi
10003117:	c2 04 00             	ret    0x4

1000311a <Gameport::open(int, int, void*)>:
1000311a:	31 c0                	xor    eax,eax
1000311c:	c3                   	ret    
1000311d:	90                   	nop

1000311e <Gameport::close(int, int, void*)>:
1000311e:	31 c0                	xor    eax,eax
10003120:	c3                   	ret    
10003121:	90                   	nop

10003122 <DMAChannel::DMAChannel(int)>:
10003122:	55                   	push   ebp
10003123:	89 e5                	mov    ebp,esp
10003125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003128:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
1000312f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003132:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10003139:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000313c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000313f:	89 10                	mov    DWORD PTR [eax],edx
10003141:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003144:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
1000314b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000314e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10003155:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003158:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
1000315c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000315f:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
10003163:	83 7d 0c 03          	cmp    DWORD PTR [ebp+0xc],0x3
10003167:	0f 9f c2             	setg   dl
1000316a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000316d:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
10003170:	90                   	nop
10003171:	5d                   	pop    ebp
10003172:	c3                   	ret    
10003173:	90                   	nop

10003174 <DMAChannel::~DMAChannel()>:
10003174:	55                   	push   ebp
10003175:	89 e5                	mov    ebp,esp
10003177:	83 ec 08             	sub    esp,0x8
1000317a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000317d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10003180:	85 c0                	test   eax,eax
10003182:	74 19                	je     1000319d <DMAChannel::~DMAChannel()+0x29>
10003184:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003187:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
1000318a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000318d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10003190:	83 ec 08             	sub    esp,0x8
10003193:	52                   	push   edx
10003194:	50                   	push   eax
10003195:	e8 fc ff ff ff       	call   10003196 <DMAChannel::~DMAChannel()+0x22>	10003196: R_386_PC32	Phys::freeDMA(unsigned long, unsigned long)
1000319a:	83 c4 10             	add    esp,0x10
1000319d:	90                   	nop
1000319e:	c9                   	leave  
1000319f:	c3                   	ret    

100031a0 <DMAChannel::getAddress()>:
100031a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100031a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100031a7:	c3                   	ret    

100031a8 <DMAChannel::getChannelNum()>:
100031a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100031ac:	8b 00                	mov    eax,DWORD PTR [eax]
100031ae:	c3                   	ret    
100031af:	90                   	nop

100031b0 <DMAChannel::setLength(unsigned int)>:
100031b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100031b4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
100031b8:	3d 00 00 01 00       	cmp    eax,0x10000
100031bd:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
100031c0:	76 0d                	jbe    100031cf <DMAChannel::setLength(unsigned int)+0x1f>
100031c2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	100031c6: R_386_32	dmaLong
100031ca:	e9 fc ff ff ff       	jmp    100031cb <DMAChannel::setLength(unsigned int)+0x1b>	100031cb: R_386_PC32	Krnl::panic(char const*)
100031cf:	c3                   	ret    

100031d0 <DMAChannel::setAddress(unsigned int)>:
100031d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100031d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
100031d8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100031db:	c3                   	ret    

100031dc <DMAChannel::allocateAddressAndSet(unsigned short)>:
100031dc:	56                   	push   esi
100031dd:	53                   	push   ebx
100031de:	83 ec 10             	sub    esp,0x10
100031e1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100031e5:	0f b7 74 24 20       	movzx  esi,WORD PTR [esp+0x20]
100031ea:	56                   	push   esi
100031eb:	e8 fc ff ff ff       	call   100031ec <DMAChannel::allocateAddressAndSet(unsigned short)+0x10>	100031ec: R_386_PC32	Phys::allocateDMA(unsigned long)
100031f0:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
100031f3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
100031f6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100031f9:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
100031fc:	83 c4 14             	add    esp,0x14
100031ff:	5b                   	pop    ebx
10003200:	5e                   	pop    esi
10003201:	c3                   	ret    

10003202 <DMAChannel::setMode(unsigned char)>:
10003202:	53                   	push   ebx
10003203:	83 ec 08             	sub    esp,0x8
10003206:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000320a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000320e:	80 7b 0d 00          	cmp    BYTE PTR [ebx+0xd],0x0
10003212:	88 43 0f             	mov    BYTE PTR [ebx+0xf],al
10003215:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
10003219:	74 2a                	je     10003245 <DMAChannel::setMode(unsigned char)+0x43>
1000321b:	51                   	push   ecx
1000321c:	51                   	push   ecx
1000321d:	6a 01                	push   0x1
1000321f:	53                   	push   ebx
10003220:	e8 fc ff ff ff       	call   10003221 <DMAChannel::setMode(unsigned char)+0x1f>	10003221: R_386_PC32	DMAChannel::mask(bool)
10003225:	80 7b 0e 01          	cmp    BYTE PTR [ebx+0xe],0x1
10003229:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
1000322c:	19 d2                	sbb    edx,edx
1000322e:	80 e2 35             	and    dl,0x35
10003231:	81 c2 d6 00 00 00    	add    edx,0xd6
10003237:	ee                   	out    dx,al
10003238:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
1000323c:	83 c4 18             	add    esp,0x18
1000323f:	5b                   	pop    ebx
10003240:	e9 1f 01 00 00       	jmp    10003364 <DMAChannel::unmask()>
10003245:	83 c4 08             	add    esp,0x8
10003248:	5b                   	pop    ebx
10003249:	c3                   	ret    

1000324a <DMAChannel::start()>:
1000324a:	57                   	push   edi
1000324b:	56                   	push   esi
1000324c:	53                   	push   ebx
1000324d:	83 ec 10             	sub    esp,0x10
10003250:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10003254:	8b 06                	mov    eax,DWORD PTR [esi]
10003256:	83 f8 07             	cmp    eax,0x7
10003259:	77 60                	ja     100032bb <DMAChannel::start()+0x71>
1000325b:	8a 98 cc 5f 00 10    	mov    bl,BYTE PTR [eax+0x10005fcc]	1000325d: R_386_32	.text
10003261:	8a 88 d4 5f 00 10    	mov    cl,BYTE PTR [eax+0x10005fd4]	10003263: R_386_32	.text
10003267:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
1000326b:	8a 80 dc 5f 00 10    	mov    al,BYTE PTR [eax+0x10005fdc]	1000326d: R_386_32	.text
10003271:	88 4c 24 0e          	mov    BYTE PTR [esp+0xe],cl
10003275:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10003279:	fa                   	cli    
1000327a:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	1000327c: R_386_32	irqDisableCounter
10003280:	50                   	push   eax
10003281:	50                   	push   eax
10003282:	6a 01                	push   0x1
10003284:	56                   	push   esi
10003285:	e8 fc ff ff ff       	call   10003286 <DMAChannel::start()+0x3c>	10003286: R_386_PC32	DMAChannel::mask(bool)
1000328a:	8a 5e 0e             	mov    bl,BYTE PTR [esi+0xe]
1000328d:	83 c4 10             	add    esp,0x10
10003290:	80 fb 01             	cmp    bl,0x1
10003293:	19 d2                	sbb    edx,edx
10003295:	31 c0                	xor    eax,eax
10003297:	80 e2 34             	and    dl,0x34
1000329a:	81 c2 d8 00 00 00    	add    edx,0xd8
100032a0:	89 d7                	mov    edi,edx
100032a2:	ee                   	out    dx,al
100032a3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
100032a6:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
100032ab:	84 db                	test   bl,bl
100032ad:	74 1f                	je     100032ce <DMAChannel::start()+0x84>
100032af:	89 c8                	mov    eax,ecx
100032b1:	d1 e8                	shr    eax,1
100032b3:	ee                   	out    dx,al
100032b4:	89 c8                	mov    eax,ecx
100032b6:	c1 e8 09             	shr    eax,0x9
100032b9:	eb 1b                	jmp    100032d6 <DMAChannel::start()+0x8c>
100032bb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	100032bf: R_386_32	dmaConfused
100032c3:	83 c4 10             	add    esp,0x10
100032c6:	5b                   	pop    ebx
100032c7:	5e                   	pop    esi
100032c8:	5f                   	pop    edi
100032c9:	e9 fc ff ff ff       	jmp    100032ca <DMAChannel::start()+0x80>	100032ca: R_386_PC32	Krnl::panic(char const*)
100032ce:	88 c8                	mov    al,cl
100032d0:	ee                   	out    dx,al
100032d1:	89 c8                	mov    eax,ecx
100032d3:	c1 e8 08             	shr    eax,0x8
100032d6:	ee                   	out    dx,al
100032d7:	31 c0                	xor    eax,eax
100032d9:	89 fa                	mov    edx,edi
100032db:	ee                   	out    dx,al
100032dc:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
100032df:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
100032e4:	8d 47 ff             	lea    eax,[edi-0x1]
100032e7:	ee                   	out    dx,al
100032e8:	8d 47 ff             	lea    eax,[edi-0x1]
100032eb:	c1 e8 08             	shr    eax,0x8
100032ee:	ee                   	out    dx,al
100032ef:	89 c8                	mov    eax,ecx
100032f1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
100032f6:	c1 e8 10             	shr    eax,0x10
100032f9:	ee                   	out    dx,al
100032fa:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
100032fe:	74 12                	je     10003312 <DMAChannel::start()+0xc8>
10003300:	80 fb 01             	cmp    bl,0x1
10003303:	8a 46 0f             	mov    al,BYTE PTR [esi+0xf]
10003306:	19 d2                	sbb    edx,edx
10003308:	80 e2 35             	and    dl,0x35
1000330b:	81 c2 d6 00 00 00    	add    edx,0xd6
10003311:	ee                   	out    dx,al
10003312:	83 ec 0c             	sub    esp,0xc
10003315:	c6 46 0d 01          	mov    BYTE PTR [esi+0xd],0x1
10003319:	56                   	push   esi
1000331a:	e8 fc ff ff ff       	call   1000331b <DMAChannel::start()+0xd1>	1000331b: R_386_PC32	DMAChannel::unmask()
1000331f:	a1 00 00 00 00       	mov    eax,ds:0x0	10003320: R_386_32	irqDisableCounter
10003324:	83 c4 10             	add    esp,0x10
10003327:	48                   	dec    eax
10003328:	a3 00 00 00 00       	mov    ds:0x0,eax	10003329: R_386_32	irqDisableCounter
1000332d:	85 c0                	test   eax,eax
1000332f:	75 01                	jne    10003332 <DMAChannel::start()+0xe8>
10003331:	fb                   	sti    
10003332:	83 c4 10             	add    esp,0x10
10003335:	5b                   	pop    ebx
10003336:	5e                   	pop    esi
10003337:	5f                   	pop    edi
10003338:	c3                   	ret    
10003339:	90                   	nop

1000333a <DMAChannel::stop()>:
1000333a:	c3                   	ret    
1000333b:	90                   	nop

1000333c <DMAChannel::mask(bool)>:
1000333c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10003340:	8a 01                	mov    al,BYTE PTR [ecx]
10003342:	83 e0 03             	and    eax,0x3
10003345:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
1000334a:	0f 95 c2             	setne  dl
1000334d:	c1 e2 02             	shl    edx,0x2
10003350:	09 d0                	or     eax,edx
10003352:	80 79 0e 01          	cmp    BYTE PTR [ecx+0xe],0x1
10003356:	19 d2                	sbb    edx,edx
10003358:	80 e2 36             	and    dl,0x36
1000335b:	81 c2 d4 00 00 00    	add    edx,0xd4
10003361:	ee                   	out    dx,al
10003362:	c3                   	ret    
10003363:	90                   	nop

10003364 <DMAChannel::unmask()>:
10003364:	6a 00                	push   0x0
10003366:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
1000336a:	e8 fc ff ff ff       	call   1000336b <DMAChannel::unmask()+0x7>	1000336b: R_386_PC32	DMAChannel::mask(bool)
1000336f:	58                   	pop    eax
10003370:	5a                   	pop    edx
10003371:	c3                   	ret    

10003372 <DMA::DMA()>:
10003372:	55                   	push   ebp
10003373:	89 e5                	mov    ebp,esp
10003375:	83 ec 08             	sub    esp,0x8
10003378:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000337b:	83 ec 08             	sub    esp,0x8
1000337e:	68 00 00 00 00       	push   0x0	1000337f: R_386_32	dmaCtrlName
10003383:	50                   	push   eax
10003384:	e8 fc ff ff ff       	call   10003385 <DMA::DMA()+0x13>	10003385: R_386_PC32	Device::Device(char const*)
10003389:	83 c4 10             	add    esp,0x10
1000338c:	ba 08 00 00 00       	mov    edx,0x8	1000338d: R_386_32	vtable for DMA
10003391:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003394:	89 10                	mov    DWORD PTR [eax],edx
10003396:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003399:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
100033a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033a9:	0f b6 d0             	movzx  edx,al
100033ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033af:	66 c7 44 90 04 00 00 	mov    WORD PTR [eax+edx*4+0x4],0x0
100033b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033bf:	0f b6 d0             	movzx  edx,al
100033c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033c5:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
100033ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033cd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033d3:	8d 50 01             	lea    edx,[eax+0x1]
100033d6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100033d9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100033df:	0f b6 d0             	movzx  edx,al
100033e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033e5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100033e9:	83 e1 3f             	and    ecx,0x3f
100033ec:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100033f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033f3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033f9:	0f b6 d0             	movzx  edx,al
100033fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033ff:	66 c7 44 90 04 c0 00 	mov    WORD PTR [eax+edx*4+0x4],0xc0
10003406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003409:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000340f:	0f b6 d0             	movzx  edx,al
10003412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003415:	c6 44 90 06 20       	mov    BYTE PTR [eax+edx*4+0x6],0x20
1000341a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000341d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003423:	8d 50 01             	lea    edx,[eax+0x1]
10003426:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003429:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000342f:	0f b6 d0             	movzx  edx,al
10003432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003435:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003439:	83 e1 3f             	and    ecx,0x3f
1000343c:	83 c9 40             	or     ecx,0x40
1000343f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003443:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003446:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000344c:	0f b6 d0             	movzx  edx,al
1000344f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003452:	66 c7 44 90 04 81 00 	mov    WORD PTR [eax+edx*4+0x4],0x81
10003459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000345c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003462:	0f b6 d0             	movzx  edx,al
10003465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003468:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
1000346d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003470:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003476:	8d 50 01             	lea    edx,[eax+0x1]
10003479:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000347c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003482:	0f b6 d0             	movzx  edx,al
10003485:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003488:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000348c:	83 e1 3f             	and    ecx,0x3f
1000348f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003493:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003496:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000349c:	0f b6 d0             	movzx  edx,al
1000349f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034a2:	66 c7 44 90 04 87 00 	mov    WORD PTR [eax+edx*4+0x4],0x87
100034a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034ac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100034b2:	0f b6 d0             	movzx  edx,al
100034b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034b8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100034bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034c0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100034c6:	8d 50 01             	lea    edx,[eax+0x1]
100034c9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100034cc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100034d2:	0f b6 d0             	movzx  edx,al
100034d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100034dc:	83 e1 3f             	and    ecx,0x3f
100034df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100034e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034e6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100034ec:	0f b6 d0             	movzx  edx,al
100034ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034f2:	66 c7 44 90 04 89 00 	mov    WORD PTR [eax+edx*4+0x4],0x89
100034f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034fc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003502:	0f b6 d0             	movzx  edx,al
10003505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003508:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
1000350d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003510:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003516:	8d 50 01             	lea    edx,[eax+0x1]
10003519:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000351c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003522:	0f b6 d0             	movzx  edx,al
10003525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003528:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000352c:	83 e1 3f             	and    ecx,0x3f
1000352f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003536:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000353c:	0f b6 d0             	movzx  edx,al
1000353f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003542:	66 c7 44 90 04 8f 00 	mov    WORD PTR [eax+edx*4+0x4],0x8f
10003549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000354c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003552:	0f b6 d0             	movzx  edx,al
10003555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003558:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
1000355d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003560:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003566:	8d 50 01             	lea    edx,[eax+0x1]
10003569:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000356c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003572:	0f b6 d0             	movzx  edx,al
10003575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003578:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000357c:	83 e1 3f             	and    ecx,0x3f
1000357f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003583:	90                   	nop
10003584:	c9                   	leave  
10003585:	c3                   	ret    

10003586 <DMA::getAvailable()>:
10003586:	fa                   	cli    
10003587:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003589: R_386_32	irqDisableCounter
1000358d:	8d 42 01             	lea    eax,[edx+0x1]
10003590:	a3 00 00 00 00       	mov    ds:0x0,eax	10003591: R_386_32	irqDisableCounter
10003595:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003599:	0f b6 88 58 01 00 00 	movzx  ecx,BYTE PTR [eax+0x158]
100035a0:	31 c0                	xor    eax,eax
100035a2:	0f a3 c1             	bt     ecx,eax
100035a5:	73 08                	jae    100035af <DMA::getAvailable()+0x29>
100035a7:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100035a9: R_386_32	irqDisableCounter
100035ad:	eb 0f                	jmp    100035be <DMA::getAvailable()+0x38>
100035af:	40                   	inc    eax
100035b0:	83 f8 08             	cmp    eax,0x8
100035b3:	75 ed                	jne    100035a2 <DMA::getAvailable()+0x1c>
100035b5:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100035b7: R_386_32	irqDisableCounter
100035bb:	83 c8 ff             	or     eax,0xffffffff
100035be:	85 d2                	test   edx,edx
100035c0:	75 01                	jne    100035c3 <DMA::getAvailable()+0x3d>
100035c2:	fb                   	sti    
100035c3:	c3                   	ret    

100035c4 <DMA::open(int, int, void*)>:
100035c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100035c8:	c6 80 58 01 00 00 ee 	mov    BYTE PTR [eax+0x158],0xee
100035cf:	31 c0                	xor    eax,eax
100035d1:	e6 0d                	out    0xd,al
100035d3:	e6 da                	out    0xda,al
100035d5:	31 c0                	xor    eax,eax
100035d7:	c3                   	ret    

100035d8 <DMA::close(int, int, void*)>:
100035d8:	31 c0                	xor    eax,eax
100035da:	c3                   	ret    
100035db:	90                   	nop

100035dc <DMA::tryLockChannelWithBase(int)>:
100035dc:	57                   	push   edi
100035dd:	56                   	push   esi
100035de:	53                   	push   ebx
100035df:	83 ec 10             	sub    esp,0x10
100035e2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
100035e6:	fa                   	cli    
100035e7:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100035e9: R_386_32	irqDisableCounter
100035ed:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100035f1:	8d 41 01             	lea    eax,[ecx+0x1]
100035f4:	a3 00 00 00 00       	mov    ds:0x0,eax	100035f5: R_386_32	irqDisableCounter
100035f9:	8d 43 03             	lea    eax,[ebx+0x3]
100035fc:	39 d8                	cmp    eax,ebx
100035fe:	7c 50                	jl     10003650 <DMA::tryLockChannelWithBase(int)+0x74>
10003600:	0f b6 b7 58 01 00 00 	movzx  esi,BYTE PTR [edi+0x158]
10003607:	0f a3 de             	bt     esi,ebx
1000360a:	73 41                	jae    1000364d <DMA::tryLockChannelWithBase(int)+0x71>
1000360c:	83 ec 0c             	sub    esp,0xc
1000360f:	88 d9                	mov    cl,bl
10003611:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10003616:	d3 c0                	rol    eax,cl
10003618:	21 f0                	and    eax,esi
1000361a:	88 87 58 01 00 00    	mov    BYTE PTR [edi+0x158],al
10003620:	6a 18                	push   0x18
10003622:	e8 fc ff ff ff       	call   10003623 <DMA::tryLockChannelWithBase(int)+0x47>	10003623: R_386_PC32	malloc
10003627:	5a                   	pop    edx
10003628:	59                   	pop    ecx
10003629:	53                   	push   ebx
1000362a:	50                   	push   eax
1000362b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000362f:	e8 fc ff ff ff       	call   10003630 <DMA::tryLockChannelWithBase(int)+0x54>	10003630: R_386_PC32	DMAChannel::DMAChannel(int)
10003634:	a1 00 00 00 00       	mov    eax,ds:0x0	10003635: R_386_32	irqDisableCounter
10003639:	83 c4 10             	add    esp,0x10
1000363c:	8d 50 ff             	lea    edx,[eax-0x1]
1000363f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003643:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10003645: R_386_32	irqDisableCounter
10003649:	85 d2                	test   edx,edx
1000364b:	eb 0d                	jmp    1000365a <DMA::tryLockChannelWithBase(int)+0x7e>
1000364d:	43                   	inc    ebx
1000364e:	eb ac                	jmp    100035fc <DMA::tryLockChannelWithBase(int)+0x20>
10003650:	31 c0                	xor    eax,eax
10003652:	89 0d 00 00 00 00    	mov    DWORD PTR ds:0x0,ecx	10003654: R_386_32	irqDisableCounter
10003658:	85 c9                	test   ecx,ecx
1000365a:	75 01                	jne    1000365d <DMA::tryLockChannelWithBase(int)+0x81>
1000365c:	fb                   	sti    
1000365d:	83 c4 10             	add    esp,0x10
10003660:	5b                   	pop    ebx
10003661:	5e                   	pop    esi
10003662:	5f                   	pop    edi
10003663:	c3                   	ret    

10003664 <DMA::lockChannelWithBase(int)>:
10003664:	83 ec 0c             	sub    esp,0xc
10003667:	50                   	push   eax
10003668:	50                   	push   eax
10003669:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000366d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003671:	e8 fc ff ff ff       	call   10003672 <DMA::lockChannelWithBase(int)+0xe>	10003672: R_386_PC32	DMA::tryLockChannelWithBase(int)
10003676:	83 c4 10             	add    esp,0x10
10003679:	85 c0                	test   eax,eax
1000367b:	74 ea                	je     10003667 <DMA::lockChannelWithBase(int)+0x3>
1000367d:	83 c4 0c             	add    esp,0xc
10003680:	c3                   	ret    
10003681:	90                   	nop

10003682 <DMA::tryLockChannel8()>:
10003682:	83 ec 14             	sub    esp,0x14
10003685:	6a 00                	push   0x0
10003687:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000368b:	e8 fc ff ff ff       	call   1000368c <DMA::tryLockChannel8()+0xa>	1000368c: R_386_PC32	DMA::tryLockChannelWithBase(int)
10003690:	83 c4 1c             	add    esp,0x1c
10003693:	c3                   	ret    

10003694 <DMA::tryLockChannel16()>:
10003694:	83 ec 14             	sub    esp,0x14
10003697:	6a 04                	push   0x4
10003699:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000369d:	e8 fc ff ff ff       	call   1000369e <DMA::tryLockChannel16()+0xa>	1000369e: R_386_PC32	DMA::tryLockChannelWithBase(int)
100036a2:	83 c4 1c             	add    esp,0x1c
100036a5:	c3                   	ret    

100036a6 <DMA::tryLockChannel(int)>:
100036a6:	56                   	push   esi
100036a7:	53                   	push   ebx
100036a8:	83 ec 14             	sub    esp,0x14
100036ab:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100036af:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100036b3:	83 fb 07             	cmp    ebx,0x7
100036b6:	76 14                	jbe    100036cc <DMA::tryLockChannel(int)+0x26>
100036b8:	83 ec 0c             	sub    esp,0xc
100036bb:	68 e4 5f 00 10       	push   0x10005fe4	100036bc: R_386_32	.text
100036c0:	e8 fc ff ff ff       	call   100036c1 <DMA::tryLockChannel(int)+0x1b>	100036c1: R_386_PC32	Dbg::kprintf(char const*, ...)
100036c5:	83 c4 10             	add    esp,0x10
100036c8:	31 c0                	xor    eax,eax
100036ca:	eb 6b                	jmp    10003737 <DMA::tryLockChannel(int)+0x91>
100036cc:	fa                   	cli    
100036cd:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100036cf: R_386_32	irqDisableCounter
100036d3:	8d 41 01             	lea    eax,[ecx+0x1]
100036d6:	a3 00 00 00 00       	mov    ds:0x0,eax	100036d7: R_386_32	irqDisableCounter
100036db:	0f b6 86 58 01 00 00 	movzx  eax,BYTE PTR [esi+0x158]
100036e2:	89 c2                	mov    edx,eax
100036e4:	0f a3 d8             	bt     eax,ebx
100036e7:	73 41                	jae    1000372a <DMA::tryLockChannel(int)+0x84>
100036e9:	83 ec 0c             	sub    esp,0xc
100036ec:	88 d9                	mov    cl,bl
100036ee:	b8 fe ff ff ff       	mov    eax,0xfffffffe
100036f3:	d3 c0                	rol    eax,cl
100036f5:	21 d0                	and    eax,edx
100036f7:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
100036fd:	6a 18                	push   0x18
100036ff:	e8 fc ff ff ff       	call   10003700 <DMA::tryLockChannel(int)+0x5a>	10003700: R_386_PC32	malloc
10003704:	5a                   	pop    edx
10003705:	59                   	pop    ecx
10003706:	53                   	push   ebx
10003707:	50                   	push   eax
10003708:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000370c:	e8 fc ff ff ff       	call   1000370d <DMA::tryLockChannel(int)+0x67>	1000370d: R_386_PC32	DMAChannel::DMAChannel(int)
10003711:	a1 00 00 00 00       	mov    eax,ds:0x0	10003712: R_386_32	irqDisableCounter
10003716:	83 c4 10             	add    esp,0x10
10003719:	8d 50 ff             	lea    edx,[eax-0x1]
1000371c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003720:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10003722: R_386_32	irqDisableCounter
10003726:	85 d2                	test   edx,edx
10003728:	eb 0a                	jmp    10003734 <DMA::tryLockChannel(int)+0x8e>
1000372a:	31 c0                	xor    eax,eax
1000372c:	89 0d 00 00 00 00    	mov    DWORD PTR ds:0x0,ecx	1000372e: R_386_32	irqDisableCounter
10003732:	85 c9                	test   ecx,ecx
10003734:	75 01                	jne    10003737 <DMA::tryLockChannel(int)+0x91>
10003736:	fb                   	sti    
10003737:	83 c4 14             	add    esp,0x14
1000373a:	5b                   	pop    ebx
1000373b:	5e                   	pop    esi
1000373c:	c3                   	ret    
1000373d:	90                   	nop

1000373e <DMA::lockChannel8()>:
1000373e:	83 ec 14             	sub    esp,0x14
10003741:	6a 00                	push   0x0
10003743:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003747:	e8 fc ff ff ff       	call   10003748 <DMA::lockChannel8()+0xa>	10003748: R_386_PC32	DMA::lockChannelWithBase(int)
1000374c:	83 c4 1c             	add    esp,0x1c
1000374f:	c3                   	ret    

10003750 <DMA::lockChannel16()>:
10003750:	83 ec 14             	sub    esp,0x14
10003753:	6a 04                	push   0x4
10003755:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003759:	e8 fc ff ff ff       	call   1000375a <DMA::lockChannel16()+0xa>	1000375a: R_386_PC32	DMA::lockChannelWithBase(int)
1000375e:	83 c4 1c             	add    esp,0x1c
10003761:	c3                   	ret    

10003762 <DMA::lockChannel(int)>:
10003762:	83 ec 0c             	sub    esp,0xc
10003765:	50                   	push   eax
10003766:	50                   	push   eax
10003767:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000376b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000376f:	e8 fc ff ff ff       	call   10003770 <DMA::lockChannel(int)+0xe>	10003770: R_386_PC32	DMA::tryLockChannel(int)
10003774:	83 c4 10             	add    esp,0x10
10003777:	85 c0                	test   eax,eax
10003779:	74 ea                	je     10003765 <DMA::lockChannel(int)+0x3>
1000377b:	83 c4 0c             	add    esp,0xc
1000377e:	c3                   	ret    
1000377f:	90                   	nop

10003780 <DMA::unlockChannel(DMAChannel*)>:
10003780:	56                   	push   esi
10003781:	53                   	push   ebx
10003782:	53                   	push   ebx
10003783:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10003787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000378b:	85 db                	test   ebx,ebx
1000378d:	75 10                	jne    1000379f <DMA::unlockChannel(DMAChannel*)+0x1f>
1000378f:	83 ec 0c             	sub    esp,0xc
10003792:	68 00 00 00 00       	push   0x0	10003793: R_386_32	badDma
10003797:	e8 fc ff ff ff       	call   10003798 <DMA::unlockChannel(DMAChannel*)+0x18>	10003798: R_386_PC32	Krnl::panic(char const*)
1000379c:	83 c4 10             	add    esp,0x10
1000379f:	fa                   	cli    
100037a0:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	100037a2: R_386_32	irqDisableCounter
100037a6:	0f b6 96 58 01 00 00 	movzx  edx,BYTE PTR [esi+0x158]
100037ad:	8b 0b                	mov    ecx,DWORD PTR [ebx]
100037af:	89 d0                	mov    eax,edx
100037b1:	0f a3 ca             	bt     edx,ecx
100037b4:	72 24                	jb     100037da <DMA::unlockChannel(DMAChannel*)+0x5a>
100037b6:	83 ec 0c             	sub    esp,0xc
100037b9:	ba 01 00 00 00       	mov    edx,0x1
100037be:	d3 e2                	shl    edx,cl
100037c0:	09 d0                	or     eax,edx
100037c2:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
100037c8:	53                   	push   ebx
100037c9:	e8 fc ff ff ff       	call   100037ca <DMA::unlockChannel(DMAChannel*)+0x4a>	100037ca: R_386_PC32	DMAChannel::~DMAChannel()
100037ce:	5a                   	pop    edx
100037cf:	59                   	pop    ecx
100037d0:	6a 18                	push   0x18
100037d2:	53                   	push   ebx
100037d3:	e8 fc ff ff ff       	call   100037d4 <DMA::unlockChannel(DMAChannel*)+0x54>	100037d4: R_386_PC32	operator delete(void*, unsigned long)
100037d8:	eb 0d                	jmp    100037e7 <DMA::unlockChannel(DMAChannel*)+0x67>
100037da:	83 ec 0c             	sub    esp,0xc
100037dd:	68 00 00 00 00       	push   0x0	100037de: R_386_32	badBook
100037e2:	e8 fc ff ff ff       	call   100037e3 <DMA::unlockChannel(DMAChannel*)+0x63>	100037e3: R_386_PC32	Krnl::panic(char const*)
100037e7:	a1 00 00 00 00       	mov    eax,ds:0x0	100037e8: R_386_32	irqDisableCounter
100037ec:	83 c4 10             	add    esp,0x10
100037ef:	48                   	dec    eax
100037f0:	a3 00 00 00 00       	mov    ds:0x0,eax	100037f1: R_386_32	irqDisableCounter
100037f5:	75 01                	jne    100037f8 <DMA::unlockChannel(DMAChannel*)+0x78>
100037f7:	fb                   	sti    
100037f8:	58                   	pop    eax
100037f9:	5b                   	pop    ebx
100037fa:	5e                   	pop    esi
100037fb:	c3                   	ret    

100037fc <PS2::PS2()>:
100037fc:	55                   	push   ebp
100037fd:	89 e5                	mov    ebp,esp
100037ff:	83 ec 08             	sub    esp,0x8
10003802:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003805:	83 ec 08             	sub    esp,0x8
10003808:	68 00 00 00 00       	push   0x0	10003809: R_386_32	ps2ctrlname
1000380d:	50                   	push   eax
1000380e:	e8 fc ff ff ff       	call   1000380f <PS2::PS2()+0x13>	1000380f: R_386_PC32	Bus::Bus(char const*)
10003813:	83 c4 10             	add    esp,0x10
10003816:	ba 08 00 00 00       	mov    edx,0x8	10003817: R_386_32	vtable for PS2
1000381b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000381e:	89 10                	mov    DWORD PTR [eax],edx
10003820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003823:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003829:	0f b6 d0             	movzx  edx,al
1000382c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000382f:	66 c7 44 90 04 60 00 	mov    WORD PTR [eax+edx*4+0x4],0x60
10003836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003839:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000383f:	0f b6 d0             	movzx  edx,al
10003842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003845:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
1000384a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000384d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003853:	8d 50 01             	lea    edx,[eax+0x1]
10003856:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003859:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000385f:	0f b6 d0             	movzx  edx,al
10003862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003865:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003869:	83 e1 3f             	and    ecx,0x3f
1000386c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003873:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003879:	0f b6 d0             	movzx  edx,al
1000387c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000387f:	66 c7 44 90 04 64 00 	mov    WORD PTR [eax+edx*4+0x4],0x64
10003886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003889:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000388f:	0f b6 d0             	movzx  edx,al
10003892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003895:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
1000389a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000389d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100038a3:	8d 50 01             	lea    edx,[eax+0x1]
100038a6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100038a9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100038af:	0f b6 d0             	movzx  edx,al
100038b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038b5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100038b9:	83 e1 3f             	and    ecx,0x3f
100038bc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100038c0:	90                   	nop
100038c1:	c9                   	leave  
100038c2:	c3                   	ret    
100038c3:	90                   	nop

100038c4 <PS2::open(int, int, void*)>:
100038c4:	55                   	push   ebp
100038c5:	89 e5                	mov    ebp,esp
100038c7:	53                   	push   ebx
100038c8:	83 ec 24             	sub    esp,0x24
100038cb:	e8 fc ff ff ff       	call   100038cc <PS2::open(int, int, void*)+0x8>	100038cc: R_386_PC32	lockScheduler()
100038d0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100038d7:	83 ec 08             	sub    esp,0x8
100038da:	68 ad 00 00 00       	push   0xad
100038df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100038e2:	e8 fc ff ff ff       	call   100038e3 <PS2::open(int, int, void*)+0x1f>	100038e3: R_386_PC32	PS2::controllerWrite(unsigned char)
100038e7:	83 c4 10             	add    esp,0x10
100038ea:	83 ec 08             	sub    esp,0x8
100038ed:	68 a7 00 00 00       	push   0xa7
100038f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100038f5:	e8 fc ff ff ff       	call   100038f6 <PS2::open(int, int, void*)+0x32>	100038f6: R_386_PC32	PS2::controllerWrite(unsigned char)
100038fa:	83 c4 10             	add    esp,0x10
100038fd:	66 c7 45 e4 60 00    	mov    WORD PTR [ebp-0x1c],0x60
10003903:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003906:	89 c2                	mov    edx,eax
10003908:	ec                   	in     al,dx
10003909:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
1000390c:	66 c7 45 e8 60 00    	mov    WORD PTR [ebp-0x18],0x60
10003912:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10003915:	89 c2                	mov    edx,eax
10003917:	ec                   	in     al,dx
10003918:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
1000391b:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10003921:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10003924:	89 c2                	mov    edx,eax
10003926:	ec                   	in     al,dx
10003927:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
1000392a:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003930:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003933:	89 c2                	mov    edx,eax
10003935:	ec                   	in     al,dx
10003936:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003939:	83 ec 08             	sub    esp,0x8
1000393c:	68 aa 00 00 00       	push   0xaa
10003941:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003944:	e8 fc ff ff ff       	call   10003945 <PS2::open(int, int, void*)+0x81>	10003945: R_386_PC32	PS2::controllerWrite(unsigned char)
10003949:	83 c4 10             	add    esp,0x10
1000394c:	83 ec 0c             	sub    esp,0xc
1000394f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003952:	e8 fc ff ff ff       	call   10003953 <PS2::open(int, int, void*)+0x8f>	10003953: R_386_PC32	PS2::controllerRead()
10003957:	83 c4 10             	add    esp,0x10
1000395a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000395d:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10003961:	74 65                	je     100039c8 <PS2::open(int, int, void*)+0x104>
10003963:	83 ec 0c             	sub    esp,0xc
10003966:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003969:	e8 fc ff ff ff       	call   1000396a <PS2::open(int, int, void*)+0xa6>	1000396a: R_386_PC32	PS2::controllerRead()
1000396e:	83 c4 10             	add    esp,0x10
10003971:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003974:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10003978:	74 4e                	je     100039c8 <PS2::open(int, int, void*)+0x104>
1000397a:	83 ec 08             	sub    esp,0x8
1000397d:	68 aa 00 00 00       	push   0xaa
10003982:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003985:	e8 fc ff ff ff       	call   10003986 <PS2::open(int, int, void*)+0xc2>	10003986: R_386_PC32	PS2::controllerWrite(unsigned char)
1000398a:	83 c4 10             	add    esp,0x10
1000398d:	83 ec 08             	sub    esp,0x8
10003990:	68 aa 00 00 00       	push   0xaa
10003995:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003998:	e8 fc ff ff ff       	call   10003999 <PS2::open(int, int, void*)+0xd5>	10003999: R_386_PC32	PS2::controllerWrite(unsigned char)
1000399d:	83 c4 10             	add    esp,0x10
100039a0:	83 ec 0c             	sub    esp,0xc
100039a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039a6:	e8 fc ff ff ff       	call   100039a7 <PS2::open(int, int, void*)+0xe3>	100039a7: R_386_PC32	PS2::controllerRead()
100039ab:	83 c4 10             	add    esp,0x10
100039ae:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100039b1:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
100039b5:	74 11                	je     100039c8 <PS2::open(int, int, void*)+0x104>
100039b7:	83 ec 0c             	sub    esp,0xc
100039ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039bd:	e8 fc ff ff ff       	call   100039be <PS2::open(int, int, void*)+0xfa>	100039be: R_386_PC32	PS2::controllerRead()
100039c2:	83 c4 10             	add    esp,0x10
100039c5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100039c8:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
100039cf:	83 ec 08             	sub    esp,0x8
100039d2:	6a 20                	push   0x20
100039d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039d7:	e8 fc ff ff ff       	call   100039d8 <PS2::open(int, int, void*)+0x114>	100039d8: R_386_PC32	PS2::controllerWrite(unsigned char)
100039dc:	83 c4 10             	add    esp,0x10
100039df:	83 ec 0c             	sub    esp,0xc
100039e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039e5:	e8 fc ff ff ff       	call   100039e6 <PS2::open(int, int, void*)+0x122>	100039e6: R_386_PC32	PS2::controllerRead()
100039ea:	83 c4 10             	add    esp,0x10
100039ed:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
100039f0:	80 4d f2 01          	or     BYTE PTR [ebp-0xe],0x1
100039f4:	80 4d f2 02          	or     BYTE PTR [ebp-0xe],0x2
100039f8:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
100039fc:	83 ec 04             	sub    esp,0x4
100039ff:	50                   	push   eax
10003a00:	6a 60                	push   0x60
10003a02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a05:	e8 fc ff ff ff       	call   10003a06 <PS2::open(int, int, void*)+0x142>	10003a06: R_386_PC32	PS2::controllerWrite(unsigned char, unsigned char)
10003a0a:	83 c4 10             	add    esp,0x10
10003a0d:	83 ec 08             	sub    esp,0x8
10003a10:	68 ae 00 00 00       	push   0xae
10003a15:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a18:	e8 fc ff ff ff       	call   10003a19 <PS2::open(int, int, void*)+0x155>	10003a19: R_386_PC32	PS2::controllerWrite(unsigned char)
10003a1d:	83 c4 10             	add    esp,0x10
10003a20:	83 ec 08             	sub    esp,0x8
10003a23:	68 a8 00 00 00       	push   0xa8
10003a28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a2b:	e8 fc ff ff ff       	call   10003a2c <PS2::open(int, int, void*)+0x168>	10003a2c: R_386_PC32	PS2::controllerWrite(unsigned char)
10003a30:	83 c4 10             	add    esp,0x10
10003a33:	e8 fc ff ff ff       	call   10003a34 <PS2::open(int, int, void*)+0x170>	10003a34: R_386_PC32	unlockScheduler()
10003a38:	c7 45 dc 60 01 00 00 	mov    DWORD PTR [ebp-0x24],0x160
10003a3f:	83 ec 0c             	sub    esp,0xc
10003a42:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10003a45:	e8 fc ff ff ff       	call   10003a46 <PS2::open(int, int, void*)+0x182>	10003a46: R_386_PC32	malloc
10003a4a:	83 c4 10             	add    esp,0x10
10003a4d:	89 c3                	mov    ebx,eax
10003a4f:	83 ec 0c             	sub    esp,0xc
10003a52:	53                   	push   ebx
10003a53:	e8 fc ff ff ff       	call   10003a54 <PS2::open(int, int, void*)+0x190>	10003a54: R_386_PC32	PS2Port::PS2Port()
10003a58:	83 c4 10             	add    esp,0x10
10003a5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003a5e:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
10003a64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003a67:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10003a6a:	8b 92 58 01 00 00    	mov    edx,DWORD PTR [edx+0x158]
10003a70:	83 ec 08             	sub    esp,0x8
10003a73:	52                   	push   edx
10003a74:	50                   	push   eax
10003a75:	e8 fc ff ff ff       	call   10003a76 <PS2::open(int, int, void*)+0x1b2>	10003a76: R_386_PC32	Device::addChild(Device*)
10003a7a:	83 c4 10             	add    esp,0x10
10003a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003a80:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
10003a86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003a89:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10003a8f:	8b 00                	mov    eax,DWORD PTR [eax]
10003a91:	83 c0 08             	add    eax,0x8
10003a94:	8b 00                	mov    eax,DWORD PTR [eax]
10003a96:	6a 00                	push   0x0
10003a98:	6a 00                	push   0x0
10003a9a:	6a 00                	push   0x0
10003a9c:	52                   	push   edx
10003a9d:	ff d0                	call   eax
10003a9f:	83 c4 10             	add    esp,0x10
10003aa2:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10003aa6:	75 6a                	jne    10003b12 <PS2::open(int, int, void*)+0x24e>
10003aa8:	c7 45 d8 60 01 00 00 	mov    DWORD PTR [ebp-0x28],0x160
10003aaf:	83 ec 0c             	sub    esp,0xc
10003ab2:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10003ab5:	e8 fc ff ff ff       	call   10003ab6 <PS2::open(int, int, void*)+0x1f2>	10003ab6: R_386_PC32	malloc
10003aba:	83 c4 10             	add    esp,0x10
10003abd:	89 c3                	mov    ebx,eax
10003abf:	83 ec 0c             	sub    esp,0xc
10003ac2:	53                   	push   ebx
10003ac3:	e8 fc ff ff ff       	call   10003ac4 <PS2::open(int, int, void*)+0x200>	10003ac4: R_386_PC32	PS2Port::PS2Port()
10003ac8:	83 c4 10             	add    esp,0x10
10003acb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003ace:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
10003ad4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003ad7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10003ada:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10003ae0:	83 ec 08             	sub    esp,0x8
10003ae3:	52                   	push   edx
10003ae4:	50                   	push   eax
10003ae5:	e8 fc ff ff ff       	call   10003ae6 <PS2::open(int, int, void*)+0x222>	10003ae6: R_386_PC32	Device::addChild(Device*)
10003aea:	83 c4 10             	add    esp,0x10
10003aed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003af0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10003af6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003af9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10003aff:	8b 00                	mov    eax,DWORD PTR [eax]
10003b01:	83 c0 08             	add    eax,0x8
10003b04:	8b 00                	mov    eax,DWORD PTR [eax]
10003b06:	6a 00                	push   0x0
10003b08:	6a 00                	push   0x0
10003b0a:	6a 01                	push   0x1
10003b0c:	52                   	push   edx
10003b0d:	ff d0                	call   eax
10003b0f:	83 c4 10             	add    esp,0x10
10003b12:	b8 00 00 00 00       	mov    eax,0x0
10003b17:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10003b1a:	c9                   	leave  
10003b1b:	c3                   	ret    

10003b1c <PS2::close(int, int, void*)>:
10003b1c:	b8 00 00 00 00       	mov    eax,0x0
10003b21:	c3                   	ret    

10003b22 <PS2::detect()>:
10003b22:	90                   	nop
10003b23:	c3                   	ret    

10003b24 <PS2::controllerWrite(unsigned char)>:
10003b24:	55                   	push   ebp
10003b25:	89 e5                	mov    ebp,esp
10003b27:	83 ec 14             	sub    esp,0x14
10003b2a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10003b2d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10003b30:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003b37:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003b3d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003b40:	89 c2                	mov    edx,eax
10003b42:	ec                   	in     al,dx
10003b43:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003b46:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003b49:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003b4c:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003b50:	83 e0 40             	and    eax,0x40
10003b53:	85 c0                	test   eax,eax
10003b55:	75 2d                	jne    10003b84 <PS2::controllerWrite(unsigned char)+0x60>
10003b57:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003b5a:	84 c0                	test   al,al
10003b5c:	78 26                	js     10003b84 <PS2::controllerWrite(unsigned char)+0x60>
10003b5e:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003b62:	83 e0 02             	and    eax,0x2
10003b65:	85 c0                	test   eax,eax
10003b67:	74 17                	je     10003b80 <PS2::controllerWrite(unsigned char)+0x5c>
10003b69:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003b6c:	8d 50 01             	lea    edx,[eax+0x1]
10003b6f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003b72:	3d 20 03 00 00       	cmp    eax,0x320
10003b77:	0f 94 c0             	sete   al
10003b7a:	84 c0                	test   al,al
10003b7c:	75 05                	jne    10003b83 <PS2::controllerWrite(unsigned char)+0x5f>
10003b7e:	eb b7                	jmp    10003b37 <PS2::controllerWrite(unsigned char)+0x13>
10003b80:	90                   	nop
10003b81:	eb 01                	jmp    10003b84 <PS2::controllerWrite(unsigned char)+0x60>
10003b83:	90                   	nop
10003b84:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
10003b88:	66 c7 45 f4 64 00    	mov    WORD PTR [ebp-0xc],0x64
10003b8e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003b91:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003b94:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003b97:	ee                   	out    dx,al
10003b98:	b0 01                	mov    al,0x1
10003b9a:	c9                   	leave  
10003b9b:	c3                   	ret    

10003b9c <PS2::controllerWrite(unsigned char, unsigned char)>:
10003b9c:	55                   	push   ebp
10003b9d:	89 e5                	mov    ebp,esp
10003b9f:	83 ec 28             	sub    esp,0x28
10003ba2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10003ba5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10003ba8:	88 55 dc             	mov    BYTE PTR [ebp-0x24],dl
10003bab:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
10003bae:	0f b6 45 dc          	movzx  eax,BYTE PTR [ebp-0x24]
10003bb2:	50                   	push   eax
10003bb3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003bb6:	e8 fc ff ff ff       	call   10003bb7 <PS2::controllerWrite(unsigned char, unsigned char)+0x1b>	10003bb7: R_386_PC32	PS2::controllerWrite(unsigned char)
10003bbb:	83 c4 08             	add    esp,0x8
10003bbe:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003bc5:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003bcb:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003bce:	89 c2                	mov    edx,eax
10003bd0:	ec                   	in     al,dx
10003bd1:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003bd4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003bd7:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003bda:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003bde:	83 e0 40             	and    eax,0x40
10003be1:	85 c0                	test   eax,eax
10003be3:	75 07                	jne    10003bec <PS2::controllerWrite(unsigned char, unsigned char)+0x50>
10003be5:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003be8:	84 c0                	test   al,al
10003bea:	79 18                	jns    10003c04 <PS2::controllerWrite(unsigned char, unsigned char)+0x68>
10003bec:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003bf0:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10003bf6:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003bf9:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003bfc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003bff:	ee                   	out    dx,al
10003c00:	b0 00                	mov    al,0x0
10003c02:	eb 4f                	jmp    10003c53 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10003c04:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003c08:	83 e0 02             	and    eax,0x2
10003c0b:	85 c0                	test   eax,eax
10003c0d:	74 2d                	je     10003c3c <PS2::controllerWrite(unsigned char, unsigned char)+0xa0>
10003c0f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003c12:	8d 50 01             	lea    edx,[eax+0x1]
10003c15:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003c18:	3d 20 03 00 00       	cmp    eax,0x320
10003c1d:	0f 94 c0             	sete   al
10003c20:	84 c0                	test   al,al
10003c22:	74 a1                	je     10003bc5 <PS2::controllerWrite(unsigned char, unsigned char)+0x29>
10003c24:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003c28:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003c2e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003c31:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10003c34:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003c37:	ee                   	out    dx,al
10003c38:	b0 00                	mov    al,0x0
10003c3a:	eb 17                	jmp    10003c53 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10003c3c:	90                   	nop
10003c3d:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003c41:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10003c47:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10003c4a:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10003c4d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10003c50:	ee                   	out    dx,al
10003c51:	b0 01                	mov    al,0x1
10003c53:	c9                   	leave  
10003c54:	c3                   	ret    
10003c55:	90                   	nop

10003c56 <PS2::controllerRead()>:
10003c56:	55                   	push   ebp
10003c57:	89 e5                	mov    ebp,esp
10003c59:	83 ec 20             	sub    esp,0x20
10003c5c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003c63:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003c69:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003c6c:	89 c2                	mov    edx,eax
10003c6e:	ec                   	in     al,dx
10003c6f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003c72:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003c75:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003c78:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003c7c:	83 e0 40             	and    eax,0x40
10003c7f:	85 c0                	test   eax,eax
10003c81:	75 07                	jne    10003c8a <PS2::controllerRead()+0x34>
10003c83:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003c86:	84 c0                	test   al,al
10003c88:	79 04                	jns    10003c8e <PS2::controllerRead()+0x38>
10003c8a:	b0 00                	mov    al,0x0
10003c8c:	eb 48                	jmp    10003cd6 <PS2::controllerRead()+0x80>
10003c8e:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003c92:	83 e0 01             	and    eax,0x1
10003c95:	85 c0                	test   eax,eax
10003c97:	75 29                	jne    10003cc2 <PS2::controllerRead()+0x6c>
10003c99:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003c9c:	8d 50 01             	lea    edx,[eax+0x1]
10003c9f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003ca2:	3d 40 06 00 00       	cmp    eax,0x640
10003ca7:	0f 94 c0             	sete   al
10003caa:	84 c0                	test   al,al
10003cac:	74 b5                	je     10003c63 <PS2::controllerRead()+0xd>
10003cae:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10003cb4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003cb7:	89 c2                	mov    edx,eax
10003cb9:	ec                   	in     al,dx
10003cba:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003cbd:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003cc0:	eb 14                	jmp    10003cd6 <PS2::controllerRead()+0x80>
10003cc2:	90                   	nop
10003cc3:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003cc9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003ccc:	89 c2                	mov    edx,eax
10003cce:	ec                   	in     al,dx
10003ccf:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003cd2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10003cd5:	90                   	nop
10003cd6:	c9                   	leave  
10003cd7:	c3                   	ret    

10003cd8 <PS2Keyboard::PS2Keyboard()>:
10003cd8:	55                   	push   ebp
10003cd9:	89 e5                	mov    ebp,esp
10003cdb:	83 ec 08             	sub    esp,0x8
10003cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003ce1:	83 ec 08             	sub    esp,0x8
10003ce4:	68 00 00 00 00       	push   0x0	10003ce5: R_386_32	ps2keyname
10003ce9:	50                   	push   eax
10003cea:	e8 fc ff ff ff       	call   10003ceb <PS2Keyboard::PS2Keyboard()+0x13>	10003ceb: R_386_PC32	Keyboard::Keyboard(char const*)
10003cef:	83 c4 10             	add    esp,0x10
10003cf2:	ba 08 00 00 00       	mov    edx,0x8	10003cf3: R_386_32	vtable for PS2Keyboard
10003cf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003cfa:	89 10                	mov    DWORD PTR [eax],edx
10003cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003cff:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10003d06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d09:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10003d10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d13:	c6 80 66 01 00 00 00 	mov    BYTE PTR [eax+0x166],0x0
10003d1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d1d:	c6 80 67 01 00 00 00 	mov    BYTE PTR [eax+0x167],0x0
10003d24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d27:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10003d2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d31:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
10003d38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d3b:	c6 80 6a 01 00 00 00 	mov    BYTE PTR [eax+0x16a],0x0
10003d42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d45:	c6 80 6b 01 00 00 00 	mov    BYTE PTR [eax+0x16b],0x0
10003d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d4f:	c6 80 6c 01 00 00 00 	mov    BYTE PTR [eax+0x16c],0x0
10003d56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d59:	c6 80 6d 01 00 00 00 	mov    BYTE PTR [eax+0x16d],0x0
10003d60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d63:	c6 80 6e 01 00 00 00 	mov    BYTE PTR [eax+0x16e],0x0
10003d6a:	90                   	nop
10003d6b:	c9                   	leave  
10003d6c:	c3                   	ret    
10003d6d:	90                   	nop

10003d6e <PS2Keyboard::~PS2Keyboard()>:
10003d6e:	55                   	push   ebp
10003d6f:	89 e5                	mov    ebp,esp
10003d71:	83 ec 08             	sub    esp,0x8
10003d74:	ba 08 00 00 00       	mov    edx,0x8	10003d75: R_386_32	vtable for PS2Keyboard
10003d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d7c:	89 10                	mov    DWORD PTR [eax],edx
10003d7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d81:	83 ec 0c             	sub    esp,0xc
10003d84:	50                   	push   eax
10003d85:	e8 fc ff ff ff       	call   10003d86 <PS2Keyboard::~PS2Keyboard()+0x18>	10003d86: R_386_PC32	Keyboard::~Keyboard()
10003d8a:	83 c4 10             	add    esp,0x10
10003d8d:	90                   	nop
10003d8e:	c9                   	leave  
10003d8f:	c3                   	ret    

10003d90 <PS2Keyboard::~PS2Keyboard()>:
10003d90:	55                   	push   ebp
10003d91:	89 e5                	mov    ebp,esp
10003d93:	83 ec 08             	sub    esp,0x8
10003d96:	83 ec 0c             	sub    esp,0xc
10003d99:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003d9c:	e8 fc ff ff ff       	call   10003d9d <PS2Keyboard::~PS2Keyboard()+0xd>	10003d9d: R_386_PC32	PS2Keyboard::~PS2Keyboard()
10003da1:	83 c4 10             	add    esp,0x10
10003da4:	83 ec 08             	sub    esp,0x8
10003da7:	68 70 01 00 00       	push   0x170
10003dac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003daf:	e8 fc ff ff ff       	call   10003db0 <PS2Keyboard::~PS2Keyboard()+0x20>	10003db0: R_386_PC32	operator delete(void*, unsigned long)
10003db4:	83 c4 10             	add    esp,0x10
10003db7:	c9                   	leave  
10003db8:	c3                   	ret    
10003db9:	90                   	nop

10003dba <PS2Keyboard::setRepeatRate(int)>:
10003dba:	c3                   	ret    
10003dbb:	90                   	nop

10003dbc <PS2Keyboard::setRepeatDelay(int)>:
10003dbc:	c3                   	ret    
10003dbd:	90                   	nop

10003dbe <PS2Keyboard::sendKey(unsigned short, bool)>:
10003dbe:	83 ec 1c             	sub    esp,0x1c
10003dc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003dc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10003dc9:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10003dcd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003dd1:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10003dd6:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10003ddd:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10003de3:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10003de8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10003dec:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10003df0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003df4:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10003df9:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10003dfe:	83 c4 1c             	add    esp,0x1c
10003e01:	e9 fc ff ff ff       	jmp    10003e02 <PS2Keyboard::sendKey(unsigned short, bool)+0x44>	10003e02: R_386_PC32	sendKeyboardToken(KeyboardToken)

10003e06 <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)>:
10003e06:	83 ec 1c             	sub    esp,0x1c
10003e09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003e0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10003e11:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10003e15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003e19:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10003e1e:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10003e25:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10003e2b:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10003e30:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10003e34:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10003e38:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003e3c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10003e41:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10003e46:	83 c4 1c             	add    esp,0x1c
10003e49:	e9 fc ff ff ff       	jmp    10003e4a <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)+0x44>	10003e4a: R_386_PC32	sendKeyboardToken(KeyboardToken)

10003e4e <PS2Keyboard::updateKeyboardLEDs()>:
10003e4e:	56                   	push   esi
10003e4f:	53                   	push   ebx
10003e50:	83 ec 0c             	sub    esp,0xc
10003e53:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10003e57:	8a 96 69 01 00 00    	mov    dl,BYTE PTR [esi+0x169]
10003e5d:	0f b6 9e 6a 01 00 00 	movzx  ebx,BYTE PTR [esi+0x16a]
10003e64:	8d 04 1b             	lea    eax,[ebx+ebx*1]
10003e67:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10003e6e:	09 c3                	or     ebx,eax
10003e70:	0a 9e 6b 01 00 00    	or     bl,BYTE PTR [esi+0x16b]
10003e76:	68 ed 00 00 00       	push   0xed
10003e7b:	0f b6 db             	movzx  ebx,bl
10003e7e:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003e84:	e8 fc ff ff ff       	call   10003e85 <PS2Keyboard::updateKeyboardLEDs()+0x37>	10003e85: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10003e89:	58                   	pop    eax
10003e8a:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003e90:	e8 fc ff ff ff       	call   10003e91 <PS2Keyboard::updateKeyboardLEDs()+0x43>	10003e91: R_386_PC32	PS2Port::deviceRead()
10003e95:	5a                   	pop    edx
10003e96:	59                   	pop    ecx
10003e97:	53                   	push   ebx
10003e98:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003e9e:	e8 fc ff ff ff       	call   10003e9f <PS2Keyboard::updateKeyboardLEDs()+0x51>	10003e9f: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10003ea3:	8b 86 60 01 00 00    	mov    eax,DWORD PTR [esi+0x160]
10003ea9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003ead:	83 c4 14             	add    esp,0x14
10003eb0:	5b                   	pop    ebx
10003eb1:	5e                   	pop    esi
10003eb2:	e9 fc ff ff ff       	jmp    10003eb3 <PS2Keyboard::updateKeyboardLEDs()+0x65>	10003eb3: R_386_PC32	PS2Port::deviceRead()

10003eb7 <ps2KeyboardHandler(regs*, void*)>:
10003eb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003ebb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003ebf:	eb 01                	jmp    10003ec2 <PS2Keyboard::handler()>
10003ec1:	90                   	nop

10003ec2 <PS2Keyboard::handler()>:
10003ec2:	57                   	push   edi
10003ec3:	56                   	push   esi
10003ec4:	53                   	push   ebx
10003ec5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10003ec9:	e4 60                	in     al,0x60
10003ecb:	80 be 6e 01 00 00 00 	cmp    BYTE PTR [esi+0x16e],0x0
10003ed2:	74 29                	je     10003efd <PS2Keyboard::handler()+0x3b>
10003ed4:	88 c2                	mov    dl,al
10003ed6:	3c e0                	cmp    al,0xe0
10003ed8:	75 0c                	jne    10003ee6 <PS2Keyboard::handler()+0x24>
10003eda:	c6 86 64 01 00 00 01 	mov    BYTE PTR [esi+0x164],0x1
10003ee1:	e9 17 07 00 00       	jmp    100045fd <PS2Keyboard::handler()+0x73b>
10003ee6:	84 c0                	test   al,al
10003ee8:	0f 89 52 01 00 00    	jns    10004040 <PS2Keyboard::handler()+0x17e>
10003eee:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10003ef5:	83 e2 7f             	and    edx,0x7f
10003ef8:	e9 43 01 00 00       	jmp    10004040 <PS2Keyboard::handler()+0x17e>
10003efd:	3c e0                	cmp    al,0xe0
10003eff:	74 d9                	je     10003eda <PS2Keyboard::handler()+0x18>
10003f01:	3c f0                	cmp    al,0xf0
10003f03:	75 0c                	jne    10003f11 <PS2Keyboard::handler()+0x4f>
10003f05:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10003f0c:	e9 ec 06 00 00       	jmp    100045fd <PS2Keyboard::handler()+0x73b>
10003f11:	3c 12                	cmp    al,0x12
10003f13:	75 1f                	jne    10003f34 <PS2Keyboard::handler()+0x72>
10003f15:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003f1b:	83 f0 01             	xor    eax,0x1
10003f1e:	88 86 67 01 00 00    	mov    BYTE PTR [esi+0x167],al
10003f24:	52                   	push   edx
10003f25:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f2c:	50                   	push   eax
10003f2d:	68 04 01 00 00       	push   0x104
10003f32:	eb 23                	jmp    10003f57 <PS2Keyboard::handler()+0x95>
10003f34:	76 3d                	jbe    10003f73 <PS2Keyboard::handler()+0xb1>
10003f36:	3c 14                	cmp    al,0x14
10003f38:	75 62                	jne    10003f9c <PS2Keyboard::handler()+0xda>
10003f3a:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003f40:	83 f0 01             	xor    eax,0x1
10003f43:	88 86 68 01 00 00    	mov    BYTE PTR [esi+0x168],al
10003f49:	51                   	push   ecx
10003f4a:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f51:	50                   	push   eax
10003f52:	68 00 01 00 00       	push   0x100
10003f57:	56                   	push   esi
10003f58:	e8 fc ff ff ff       	call   10003f59 <PS2Keyboard::handler()+0x97>	10003f59: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
10003f5d:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10003f64:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10003f6b:	83 c4 10             	add    esp,0x10
10003f6e:	e9 8a 06 00 00       	jmp    100045fd <PS2Keyboard::handler()+0x73b>
10003f73:	3c 11                	cmp    al,0x11
10003f75:	75 2d                	jne    10003fa4 <PS2Keyboard::handler()+0xe2>
10003f77:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003f7d:	83 f0 01             	xor    eax,0x1
10003f80:	88 86 6d 01 00 00    	mov    BYTE PTR [esi+0x16d],al
10003f86:	88 86 6c 01 00 00    	mov    BYTE PTR [esi+0x16c],al
10003f8c:	50                   	push   eax
10003f8d:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f94:	50                   	push   eax
10003f95:	68 01 01 00 00       	push   0x101
10003f9a:	eb bb                	jmp    10003f57 <PS2Keyboard::handler()+0x95>
10003f9c:	3c 59                	cmp    al,0x59
10003f9e:	0f 84 71 ff ff ff    	je     10003f15 <PS2Keyboard::handler()+0x53>
10003fa4:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
10003fab:	0f 84 b1 01 00 00    	je     10004162 <PS2Keyboard::handler()+0x2a0>
10003fb1:	3c 6b                	cmp    al,0x6b
10003fb3:	0f 84 f2 00 00 00    	je     100040ab <PS2Keyboard::handler()+0x1e9>
10003fb9:	77 50                	ja     1000400b <PS2Keyboard::handler()+0x149>
10003fbb:	3c 51                	cmp    al,0x51
10003fbd:	0f 84 37 01 00 00    	je     100040fa <PS2Keyboard::handler()+0x238>
10003fc3:	77 23                	ja     10003fe8 <PS2Keyboard::handler()+0x126>
10003fc5:	3c 49                	cmp    al,0x49
10003fc7:	0f 84 0d 01 00 00    	je     100040da <PS2Keyboard::handler()+0x218>
10003fcd:	3c 4a                	cmp    al,0x4a
10003fcf:	0f 85 29 04 00 00    	jne    100043fe <PS2Keyboard::handler()+0x53c>
10003fd5:	50                   	push   eax
10003fd6:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003fdd:	50                   	push   eax
10003fde:	68 1f 03 00 00       	push   0x31f
10003fe3:	e9 c6 03 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
10003fe8:	3c 5a                	cmp    al,0x5a
10003fea:	0f 84 5f 01 00 00    	je     1000414f <PS2Keyboard::handler()+0x28d>
10003ff0:	3c 69                	cmp    al,0x69
10003ff2:	0f 85 06 04 00 00    	jne    100043fe <PS2Keyboard::handler()+0x53c>
10003ff8:	51                   	push   ecx
10003ff9:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004000:	50                   	push   eax
10004001:	68 01 02 00 00       	push   0x201
10004006:	e9 a3 03 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
1000400b:	3c 71                	cmp    al,0x71
1000400d:	0f 84 16 01 00 00    	je     10004129 <PS2Keyboard::handler()+0x267>
10004013:	77 15                	ja     1000402a <PS2Keyboard::handler()+0x168>
10004015:	3c 6c                	cmp    al,0x6c
10004017:	0f 84 f0 00 00 00    	je     1000410d <PS2Keyboard::handler()+0x24b>
1000401d:	3c 70                	cmp    al,0x70
1000401f:	0f 84 17 01 00 00    	je     1000413c <PS2Keyboard::handler()+0x27a>
10004025:	e9 d4 03 00 00       	jmp    100043fe <PS2Keyboard::handler()+0x53c>
1000402a:	3c 74                	cmp    al,0x74
1000402c:	0f 84 8c 00 00 00    	je     100040be <PS2Keyboard::handler()+0x1fc>
10004032:	3c 75                	cmp    al,0x75
10004034:	74 4a                	je     10004080 <PS2Keyboard::handler()+0x1be>
10004036:	3c 72                	cmp    al,0x72
10004038:	0f 85 c0 03 00 00    	jne    100043fe <PS2Keyboard::handler()+0x53c>
1000403e:	eb 58                	jmp    10004098 <PS2Keyboard::handler()+0x1d6>
10004040:	80 fa 2a             	cmp    dl,0x2a
10004043:	0f 84 cc fe ff ff    	je     10003f15 <PS2Keyboard::handler()+0x53>
10004049:	0f 87 97 05 00 00    	ja     100045e6 <PS2Keyboard::handler()+0x724>
1000404f:	80 fa 1d             	cmp    dl,0x1d
10004052:	0f 84 e2 fe ff ff    	je     10003f3a <PS2Keyboard::handler()+0x78>
10004058:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
1000405f:	0f 84 ce 03 00 00    	je     10004433 <PS2Keyboard::handler()+0x571>
10004065:	80 fa 4b             	cmp    dl,0x4b
10004068:	74 41                	je     100040ab <PS2Keyboard::handler()+0x1e9>
1000406a:	77 27                	ja     10004093 <PS2Keyboard::handler()+0x1d1>
1000406c:	80 fa 47             	cmp    dl,0x47
1000406f:	0f 84 98 00 00 00    	je     1000410d <PS2Keyboard::handler()+0x24b>
10004075:	0f 86 96 03 00 00    	jbe    10004411 <PS2Keyboard::handler()+0x54f>
1000407b:	80 fa 48             	cmp    dl,0x48
1000407e:	75 51                	jne    100040d1 <PS2Keyboard::handler()+0x20f>
10004080:	50                   	push   eax
10004081:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004088:	50                   	push   eax
10004089:	68 0b 02 00 00       	push   0x20b
1000408e:	e9 1b 03 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
10004093:	80 fa 50             	cmp    dl,0x50
10004096:	75 55                	jne    100040ed <PS2Keyboard::handler()+0x22b>
10004098:	50                   	push   eax
10004099:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100040a0:	50                   	push   eax
100040a1:	68 0c 02 00 00       	push   0x20c
100040a6:	e9 03 03 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
100040ab:	50                   	push   eax
100040ac:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100040b3:	50                   	push   eax
100040b4:	68 0d 02 00 00       	push   0x20d
100040b9:	e9 f0 02 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
100040be:	50                   	push   eax
100040bf:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100040c6:	50                   	push   eax
100040c7:	68 0e 02 00 00       	push   0x20e
100040cc:	e9 dd 02 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
100040d1:	80 fa 49             	cmp    dl,0x49
100040d4:	0f 85 24 03 00 00    	jne    100043fe <PS2Keyboard::handler()+0x53c>
100040da:	50                   	push   eax
100040db:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100040e2:	50                   	push   eax
100040e3:	68 04 02 00 00       	push   0x204
100040e8:	e9 c1 02 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
100040ed:	0f 86 2f 03 00 00    	jbe    10004422 <PS2Keyboard::handler()+0x560>
100040f3:	80 fa 52             	cmp    dl,0x52
100040f6:	74 44                	je     1000413c <PS2Keyboard::handler()+0x27a>
100040f8:	73 26                	jae    10004120 <PS2Keyboard::handler()+0x25e>
100040fa:	57                   	push   edi
100040fb:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004102:	50                   	push   eax
10004103:	68 05 02 00 00       	push   0x205
10004108:	e9 a1 02 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
1000410d:	53                   	push   ebx
1000410e:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004115:	50                   	push   eax
10004116:	68 00 02 00 00       	push   0x200
1000411b:	e9 8e 02 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
10004120:	80 fa 53             	cmp    dl,0x53
10004123:	0f 85 d5 02 00 00    	jne    100043fe <PS2Keyboard::handler()+0x53c>
10004129:	52                   	push   edx
1000412a:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004131:	50                   	push   eax
10004132:	68 03 02 00 00       	push   0x203
10004137:	e9 72 02 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
1000413c:	50                   	push   eax
1000413d:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004144:	50                   	push   eax
10004145:	68 02 02 00 00       	push   0x202
1000414a:	e9 5f 02 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
1000414f:	50                   	push   eax
10004150:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004157:	50                   	push   eax
10004158:	68 1d 03 00 00       	push   0x31d
1000415d:	e9 4c 02 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
10004162:	0f b6 96 66 01 00 00 	movzx  edx,BYTE PTR [esi+0x166]
10004169:	3c 66                	cmp    al,0x66
1000416b:	75 09                	jne    10004176 <PS2Keyboard::handler()+0x2b4>
1000416d:	50                   	push   eax
1000416e:	52                   	push   edx
1000416f:	6a 08                	push   0x8
10004171:	e9 38 02 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
10004176:	3c 0d                	cmp    al,0xd
10004178:	75 09                	jne    10004183 <PS2Keyboard::handler()+0x2c1>
1000417a:	50                   	push   eax
1000417b:	52                   	push   edx
1000417c:	6a 09                	push   0x9
1000417e:	e9 2b 02 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
10004183:	3c 58                	cmp    al,0x58
10004185:	75 2a                	jne    100041b1 <PS2Keyboard::handler()+0x2ef>
10004187:	84 d2                	test   dl,dl
10004189:	75 13                	jne    1000419e <PS2Keyboard::handler()+0x2dc>
1000418b:	83 ec 0c             	sub    esp,0xc
1000418e:	80 b6 69 01 00 00 01 	xor    BYTE PTR [esi+0x169],0x1
10004195:	56                   	push   esi
10004196:	e8 fc ff ff ff       	call   10004197 <PS2Keyboard::handler()+0x2d5>	10004197: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
1000419b:	83 c4 10             	add    esp,0x10
1000419e:	50                   	push   eax
1000419f:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100041a6:	50                   	push   eax
100041a7:	68 80 02 00 00       	push   0x280
100041ac:	e9 fd 01 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
100041b1:	3c 77                	cmp    al,0x77
100041b3:	75 2a                	jne    100041df <PS2Keyboard::handler()+0x31d>
100041b5:	84 d2                	test   dl,dl
100041b7:	75 13                	jne    100041cc <PS2Keyboard::handler()+0x30a>
100041b9:	83 ec 0c             	sub    esp,0xc
100041bc:	80 b6 6a 01 00 00 01 	xor    BYTE PTR [esi+0x16a],0x1
100041c3:	56                   	push   esi
100041c4:	e8 fc ff ff ff       	call   100041c5 <PS2Keyboard::handler()+0x303>	100041c5: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
100041c9:	83 c4 10             	add    esp,0x10
100041cc:	50                   	push   eax
100041cd:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100041d4:	50                   	push   eax
100041d5:	68 81 02 00 00       	push   0x281
100041da:	e9 cf 01 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
100041df:	3c 7e                	cmp    al,0x7e
100041e1:	75 2a                	jne    1000420d <PS2Keyboard::handler()+0x34b>
100041e3:	84 d2                	test   dl,dl
100041e5:	75 13                	jne    100041fa <PS2Keyboard::handler()+0x338>
100041e7:	83 ec 0c             	sub    esp,0xc
100041ea:	80 b6 6b 01 00 00 01 	xor    BYTE PTR [esi+0x16b],0x1
100041f1:	56                   	push   esi
100041f2:	e8 fc ff ff ff       	call   100041f3 <PS2Keyboard::handler()+0x331>	100041f3: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
100041f7:	83 c4 10             	add    esp,0x10
100041fa:	57                   	push   edi
100041fb:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004202:	50                   	push   eax
10004203:	68 82 02 00 00       	push   0x282
10004208:	e9 a1 01 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
1000420d:	3c 05                	cmp    al,0x5
1000420f:	75 0c                	jne    1000421d <PS2Keyboard::handler()+0x35b>
10004211:	53                   	push   ebx
10004212:	52                   	push   edx
10004213:	68 00 03 00 00       	push   0x300
10004218:	e9 91 01 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
1000421d:	3c 06                	cmp    al,0x6
1000421f:	75 0c                	jne    1000422d <PS2Keyboard::handler()+0x36b>
10004221:	51                   	push   ecx
10004222:	52                   	push   edx
10004223:	68 01 03 00 00       	push   0x301
10004228:	e9 81 01 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
1000422d:	3c 04                	cmp    al,0x4
1000422f:	75 0c                	jne    1000423d <PS2Keyboard::handler()+0x37b>
10004231:	50                   	push   eax
10004232:	52                   	push   edx
10004233:	68 02 03 00 00       	push   0x302
10004238:	e9 71 01 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
1000423d:	3c 0c                	cmp    al,0xc
1000423f:	75 0c                	jne    1000424d <PS2Keyboard::handler()+0x38b>
10004241:	50                   	push   eax
10004242:	52                   	push   edx
10004243:	68 03 03 00 00       	push   0x303
10004248:	e9 61 01 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
1000424d:	3c 03                	cmp    al,0x3
1000424f:	75 0c                	jne    1000425d <PS2Keyboard::handler()+0x39b>
10004251:	50                   	push   eax
10004252:	52                   	push   edx
10004253:	68 04 03 00 00       	push   0x304
10004258:	e9 51 01 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
1000425d:	3c 0b                	cmp    al,0xb
1000425f:	75 0c                	jne    1000426d <PS2Keyboard::handler()+0x3ab>
10004261:	50                   	push   eax
10004262:	52                   	push   edx
10004263:	68 05 03 00 00       	push   0x305
10004268:	e9 41 01 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
1000426d:	3c 02                	cmp    al,0x2
1000426f:	74 04                	je     10004275 <PS2Keyboard::handler()+0x3b3>
10004271:	3c 83                	cmp    al,0x83
10004273:	75 0c                	jne    10004281 <PS2Keyboard::handler()+0x3bf>
10004275:	50                   	push   eax
10004276:	52                   	push   edx
10004277:	68 06 03 00 00       	push   0x306
1000427c:	e9 2d 01 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
10004281:	3c 0a                	cmp    al,0xa
10004283:	75 0c                	jne    10004291 <PS2Keyboard::handler()+0x3cf>
10004285:	50                   	push   eax
10004286:	52                   	push   edx
10004287:	68 07 03 00 00       	push   0x307
1000428c:	e9 1d 01 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
10004291:	3c 01                	cmp    al,0x1
10004293:	75 0c                	jne    100042a1 <PS2Keyboard::handler()+0x3df>
10004295:	57                   	push   edi
10004296:	52                   	push   edx
10004297:	68 08 03 00 00       	push   0x308
1000429c:	e9 0d 01 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
100042a1:	3c 09                	cmp    al,0x9
100042a3:	75 0c                	jne    100042b1 <PS2Keyboard::handler()+0x3ef>
100042a5:	53                   	push   ebx
100042a6:	52                   	push   edx
100042a7:	68 09 03 00 00       	push   0x309
100042ac:	e9 fd 00 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
100042b1:	3c 78                	cmp    al,0x78
100042b3:	75 0c                	jne    100042c1 <PS2Keyboard::handler()+0x3ff>
100042b5:	51                   	push   ecx
100042b6:	52                   	push   edx
100042b7:	68 0a 03 00 00       	push   0x30a
100042bc:	e9 ed 00 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
100042c1:	3c 07                	cmp    al,0x7
100042c3:	75 0c                	jne    100042d1 <PS2Keyboard::handler()+0x40f>
100042c5:	50                   	push   eax
100042c6:	52                   	push   edx
100042c7:	68 0b 03 00 00       	push   0x30b
100042cc:	e9 dd 00 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
100042d1:	3c 5a                	cmp    al,0x5a
100042d3:	75 09                	jne    100042de <PS2Keyboard::handler()+0x41c>
100042d5:	50                   	push   eax
100042d6:	52                   	push   edx
100042d7:	6a 0a                	push   0xa
100042d9:	e9 d0 00 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
100042de:	3c 76                	cmp    al,0x76
100042e0:	75 0c                	jne    100042ee <PS2Keyboard::handler()+0x42c>
100042e2:	50                   	push   eax
100042e3:	52                   	push   edx
100042e4:	68 0a 02 00 00       	push   0x20a
100042e9:	e9 c0 00 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
100042ee:	3c 70                	cmp    al,0x70
100042f0:	75 0c                	jne    100042fe <PS2Keyboard::handler()+0x43c>
100042f2:	50                   	push   eax
100042f3:	52                   	push   edx
100042f4:	68 10 03 00 00       	push   0x310
100042f9:	e9 b0 00 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
100042fe:	3c 69                	cmp    al,0x69
10004300:	75 0c                	jne    1000430e <PS2Keyboard::handler()+0x44c>
10004302:	50                   	push   eax
10004303:	52                   	push   edx
10004304:	68 11 03 00 00       	push   0x311
10004309:	e9 a0 00 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
1000430e:	3c 72                	cmp    al,0x72
10004310:	75 0c                	jne    1000431e <PS2Keyboard::handler()+0x45c>
10004312:	50                   	push   eax
10004313:	52                   	push   edx
10004314:	68 12 03 00 00       	push   0x312
10004319:	e9 90 00 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
1000431e:	3c 7a                	cmp    al,0x7a
10004320:	75 0c                	jne    1000432e <PS2Keyboard::handler()+0x46c>
10004322:	57                   	push   edi
10004323:	52                   	push   edx
10004324:	68 13 03 00 00       	push   0x313
10004329:	e9 80 00 00 00       	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
1000432e:	3c 6b                	cmp    al,0x6b
10004330:	75 09                	jne    1000433b <PS2Keyboard::handler()+0x479>
10004332:	53                   	push   ebx
10004333:	52                   	push   edx
10004334:	68 14 03 00 00       	push   0x314
10004339:	eb 73                	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
1000433b:	3c 73                	cmp    al,0x73
1000433d:	75 09                	jne    10004348 <PS2Keyboard::handler()+0x486>
1000433f:	51                   	push   ecx
10004340:	52                   	push   edx
10004341:	68 15 03 00 00       	push   0x315
10004346:	eb 66                	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
10004348:	3c 74                	cmp    al,0x74
1000434a:	75 09                	jne    10004355 <PS2Keyboard::handler()+0x493>
1000434c:	50                   	push   eax
1000434d:	52                   	push   edx
1000434e:	68 16 03 00 00       	push   0x316
10004353:	eb 59                	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
10004355:	3c 6c                	cmp    al,0x6c
10004357:	75 09                	jne    10004362 <PS2Keyboard::handler()+0x4a0>
10004359:	50                   	push   eax
1000435a:	52                   	push   edx
1000435b:	68 17 03 00 00       	push   0x317
10004360:	eb 4c                	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
10004362:	3c 75                	cmp    al,0x75
10004364:	75 09                	jne    1000436f <PS2Keyboard::handler()+0x4ad>
10004366:	50                   	push   eax
10004367:	52                   	push   edx
10004368:	68 18 03 00 00       	push   0x318
1000436d:	eb 3f                	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
1000436f:	3c 7d                	cmp    al,0x7d
10004371:	75 09                	jne    1000437c <PS2Keyboard::handler()+0x4ba>
10004373:	50                   	push   eax
10004374:	52                   	push   edx
10004375:	68 19 03 00 00       	push   0x319
1000437a:	eb 32                	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
1000437c:	3c 71                	cmp    al,0x71
1000437e:	75 09                	jne    10004389 <PS2Keyboard::handler()+0x4c7>
10004380:	50                   	push   eax
10004381:	52                   	push   edx
10004382:	68 1a 03 00 00       	push   0x31a
10004387:	eb 25                	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
10004389:	3c 7b                	cmp    al,0x7b
1000438b:	75 09                	jne    10004396 <PS2Keyboard::handler()+0x4d4>
1000438d:	50                   	push   eax
1000438e:	52                   	push   edx
1000438f:	68 1c 03 00 00       	push   0x31c
10004394:	eb 18                	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
10004396:	3c 79                	cmp    al,0x79
10004398:	75 09                	jne    100043a3 <PS2Keyboard::handler()+0x4e1>
1000439a:	57                   	push   edi
1000439b:	52                   	push   edx
1000439c:	68 1b 03 00 00       	push   0x31b
100043a1:	eb 0b                	jmp    100043ae <PS2Keyboard::handler()+0x4ec>
100043a3:	3c 7c                	cmp    al,0x7c
100043a5:	75 0f                	jne    100043b6 <PS2Keyboard::handler()+0x4f4>
100043a7:	53                   	push   ebx
100043a8:	52                   	push   edx
100043a9:	68 1e 03 00 00       	push   0x31e
100043ae:	56                   	push   esi
100043af:	e8 fc ff ff ff       	call   100043b0 <PS2Keyboard::handler()+0x4ee>	100043b0: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
100043b4:	eb 45                	jmp    100043fb <PS2Keyboard::handler()+0x539>
100043b6:	0f b6 c0             	movzx  eax,al
100043b9:	8a 8e 69 01 00 00    	mov    cl,BYTE PTR [esi+0x169]
100043bf:	80 be 67 01 00 00 00 	cmp    BYTE PTR [esi+0x167],0x0
100043c6:	74 16                	je     100043de <PS2Keyboard::handler()+0x51c>
100043c8:	84 c9                	test   cl,cl
100043ca:	74 09                	je     100043d5 <PS2Keyboard::handler()+0x513>
100043cc:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100043cf: R_386_32	PS2Keyboard::internalMapCapUpper
100043d3:	eb 1d                	jmp    100043f2 <PS2Keyboard::handler()+0x530>
100043d5:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100043d8: R_386_32	PS2Keyboard::internalMapperUpper
100043dc:	eb 14                	jmp    100043f2 <PS2Keyboard::handler()+0x530>
100043de:	84 c9                	test   cl,cl
100043e0:	74 09                	je     100043eb <PS2Keyboard::handler()+0x529>
100043e2:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100043e5: R_386_32	PS2Keyboard::internalMapCapLower
100043e9:	eb 07                	jmp    100043f2 <PS2Keyboard::handler()+0x530>
100043eb:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100043ee: R_386_32	PS2Keyboard::internalMapperLower
100043f2:	51                   	push   ecx
100043f3:	52                   	push   edx
100043f4:	50                   	push   eax
100043f5:	56                   	push   esi
100043f6:	e8 fc ff ff ff       	call   100043f7 <PS2Keyboard::handler()+0x535>	100043f7: R_386_PC32	PS2Keyboard::sendKey(unsigned short, bool)
100043fb:	83 c4 10             	add    esp,0x10
100043fe:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10004405:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
1000440c:	e9 ec 01 00 00       	jmp    100045fd <PS2Keyboard::handler()+0x73b>
10004411:	80 fa 1c             	cmp    dl,0x1c
10004414:	0f 84 35 fd ff ff    	je     1000414f <PS2Keyboard::handler()+0x28d>
1000441a:	80 fa 35             	cmp    dl,0x35
1000441d:	e9 ad fb ff ff       	jmp    10003fcf <PS2Keyboard::handler()+0x10d>
10004422:	80 fa 4d             	cmp    dl,0x4d
10004425:	0f 84 93 fc ff ff    	je     100040be <PS2Keyboard::handler()+0x1fc>
1000442b:	80 fa 4f             	cmp    dl,0x4f
1000442e:	e9 bf fb ff ff       	jmp    10003ff2 <PS2Keyboard::handler()+0x130>
10004433:	0f b6 8e 66 01 00 00 	movzx  ecx,BYTE PTR [esi+0x166]
1000443a:	80 fa 0e             	cmp    dl,0xe
1000443d:	75 07                	jne    10004446 <PS2Keyboard::handler()+0x584>
1000443f:	50                   	push   eax
10004440:	51                   	push   ecx
10004441:	e9 29 fd ff ff       	jmp    1000416f <PS2Keyboard::handler()+0x2ad>
10004446:	80 fa 0f             	cmp    dl,0xf
10004449:	75 07                	jne    10004452 <PS2Keyboard::handler()+0x590>
1000444b:	57                   	push   edi
1000444c:	51                   	push   ecx
1000444d:	e9 2a fd ff ff       	jmp    1000417c <PS2Keyboard::handler()+0x2ba>
10004452:	80 fa 3a             	cmp    dl,0x3a
10004455:	75 07                	jne    1000445e <PS2Keyboard::handler()+0x59c>
10004457:	84 c9                	test   cl,cl
10004459:	e9 2b fd ff ff       	jmp    10004189 <PS2Keyboard::handler()+0x2c7>
1000445e:	80 fa 45             	cmp    dl,0x45
10004461:	75 07                	jne    1000446a <PS2Keyboard::handler()+0x5a8>
10004463:	84 c9                	test   cl,cl
10004465:	e9 4d fd ff ff       	jmp    100041b7 <PS2Keyboard::handler()+0x2f5>
1000446a:	80 fa 46             	cmp    dl,0x46
1000446d:	75 07                	jne    10004476 <PS2Keyboard::handler()+0x5b4>
1000446f:	84 c9                	test   cl,cl
10004471:	e9 6f fd ff ff       	jmp    100041e5 <PS2Keyboard::handler()+0x323>
10004476:	80 fa 3b             	cmp    dl,0x3b
10004479:	75 07                	jne    10004482 <PS2Keyboard::handler()+0x5c0>
1000447b:	53                   	push   ebx
1000447c:	51                   	push   ecx
1000447d:	e9 91 fd ff ff       	jmp    10004213 <PS2Keyboard::handler()+0x351>
10004482:	80 fa 3c             	cmp    dl,0x3c
10004485:	75 07                	jne    1000448e <PS2Keyboard::handler()+0x5cc>
10004487:	52                   	push   edx
10004488:	51                   	push   ecx
10004489:	e9 95 fd ff ff       	jmp    10004223 <PS2Keyboard::handler()+0x361>
1000448e:	80 fa 3d             	cmp    dl,0x3d
10004491:	75 07                	jne    1000449a <PS2Keyboard::handler()+0x5d8>
10004493:	50                   	push   eax
10004494:	51                   	push   ecx
10004495:	e9 99 fd ff ff       	jmp    10004233 <PS2Keyboard::handler()+0x371>
1000449a:	80 fa 3e             	cmp    dl,0x3e
1000449d:	75 07                	jne    100044a6 <PS2Keyboard::handler()+0x5e4>
1000449f:	50                   	push   eax
100044a0:	51                   	push   ecx
100044a1:	e9 9d fd ff ff       	jmp    10004243 <PS2Keyboard::handler()+0x381>
100044a6:	80 fa 3f             	cmp    dl,0x3f
100044a9:	75 07                	jne    100044b2 <PS2Keyboard::handler()+0x5f0>
100044ab:	50                   	push   eax
100044ac:	51                   	push   ecx
100044ad:	e9 a1 fd ff ff       	jmp    10004253 <PS2Keyboard::handler()+0x391>
100044b2:	80 fa 40             	cmp    dl,0x40
100044b5:	75 07                	jne    100044be <PS2Keyboard::handler()+0x5fc>
100044b7:	50                   	push   eax
100044b8:	51                   	push   ecx
100044b9:	e9 a5 fd ff ff       	jmp    10004263 <PS2Keyboard::handler()+0x3a1>
100044be:	80 fa 41             	cmp    dl,0x41
100044c1:	75 07                	jne    100044ca <PS2Keyboard::handler()+0x608>
100044c3:	50                   	push   eax
100044c4:	51                   	push   ecx
100044c5:	e9 ad fd ff ff       	jmp    10004277 <PS2Keyboard::handler()+0x3b5>
100044ca:	80 fa 42             	cmp    dl,0x42
100044cd:	75 07                	jne    100044d6 <PS2Keyboard::handler()+0x614>
100044cf:	50                   	push   eax
100044d0:	51                   	push   ecx
100044d1:	e9 b1 fd ff ff       	jmp    10004287 <PS2Keyboard::handler()+0x3c5>
100044d6:	80 fa 43             	cmp    dl,0x43
100044d9:	75 07                	jne    100044e2 <PS2Keyboard::handler()+0x620>
100044db:	57                   	push   edi
100044dc:	51                   	push   ecx
100044dd:	e9 b5 fd ff ff       	jmp    10004297 <PS2Keyboard::handler()+0x3d5>
100044e2:	80 fa 44             	cmp    dl,0x44
100044e5:	75 07                	jne    100044ee <PS2Keyboard::handler()+0x62c>
100044e7:	53                   	push   ebx
100044e8:	51                   	push   ecx
100044e9:	e9 b9 fd ff ff       	jmp    100042a7 <PS2Keyboard::handler()+0x3e5>
100044ee:	84 d2                	test   dl,dl
100044f0:	75 07                	jne    100044f9 <PS2Keyboard::handler()+0x637>
100044f2:	52                   	push   edx
100044f3:	51                   	push   ecx
100044f4:	e9 be fd ff ff       	jmp    100042b7 <PS2Keyboard::handler()+0x3f5>
100044f9:	80 fa 1c             	cmp    dl,0x1c
100044fc:	75 07                	jne    10004505 <PS2Keyboard::handler()+0x643>
100044fe:	50                   	push   eax
100044ff:	51                   	push   ecx
10004500:	e9 d2 fd ff ff       	jmp    100042d7 <PS2Keyboard::handler()+0x415>
10004505:	80 fa 01             	cmp    dl,0x1
10004508:	75 07                	jne    10004511 <PS2Keyboard::handler()+0x64f>
1000450a:	50                   	push   eax
1000450b:	51                   	push   ecx
1000450c:	e9 d3 fd ff ff       	jmp    100042e4 <PS2Keyboard::handler()+0x422>
10004511:	80 fa 52             	cmp    dl,0x52
10004514:	75 07                	jne    1000451d <PS2Keyboard::handler()+0x65b>
10004516:	50                   	push   eax
10004517:	51                   	push   ecx
10004518:	e9 d7 fd ff ff       	jmp    100042f4 <PS2Keyboard::handler()+0x432>
1000451d:	80 fa 4f             	cmp    dl,0x4f
10004520:	75 07                	jne    10004529 <PS2Keyboard::handler()+0x667>
10004522:	50                   	push   eax
10004523:	51                   	push   ecx
10004524:	e9 db fd ff ff       	jmp    10004304 <PS2Keyboard::handler()+0x442>
10004529:	80 fa 50             	cmp    dl,0x50
1000452c:	75 07                	jne    10004535 <PS2Keyboard::handler()+0x673>
1000452e:	50                   	push   eax
1000452f:	51                   	push   ecx
10004530:	e9 df fd ff ff       	jmp    10004314 <PS2Keyboard::handler()+0x452>
10004535:	80 fa 51             	cmp    dl,0x51
10004538:	75 07                	jne    10004541 <PS2Keyboard::handler()+0x67f>
1000453a:	50                   	push   eax
1000453b:	51                   	push   ecx
1000453c:	e9 e3 fd ff ff       	jmp    10004324 <PS2Keyboard::handler()+0x462>
10004541:	80 fa 4b             	cmp    dl,0x4b
10004544:	75 07                	jne    1000454d <PS2Keyboard::handler()+0x68b>
10004546:	57                   	push   edi
10004547:	51                   	push   ecx
10004548:	e9 e7 fd ff ff       	jmp    10004334 <PS2Keyboard::handler()+0x472>
1000454d:	80 fa 4c             	cmp    dl,0x4c
10004550:	75 07                	jne    10004559 <PS2Keyboard::handler()+0x697>
10004552:	53                   	push   ebx
10004553:	51                   	push   ecx
10004554:	e9 e8 fd ff ff       	jmp    10004341 <PS2Keyboard::handler()+0x47f>
10004559:	80 fa 4d             	cmp    dl,0x4d
1000455c:	75 07                	jne    10004565 <PS2Keyboard::handler()+0x6a3>
1000455e:	52                   	push   edx
1000455f:	51                   	push   ecx
10004560:	e9 e9 fd ff ff       	jmp    1000434e <PS2Keyboard::handler()+0x48c>
10004565:	80 fa 47             	cmp    dl,0x47
10004568:	75 07                	jne    10004571 <PS2Keyboard::handler()+0x6af>
1000456a:	50                   	push   eax
1000456b:	51                   	push   ecx
1000456c:	e9 ea fd ff ff       	jmp    1000435b <PS2Keyboard::handler()+0x499>
10004571:	80 fa 48             	cmp    dl,0x48
10004574:	75 07                	jne    1000457d <PS2Keyboard::handler()+0x6bb>
10004576:	50                   	push   eax
10004577:	51                   	push   ecx
10004578:	e9 eb fd ff ff       	jmp    10004368 <PS2Keyboard::handler()+0x4a6>
1000457d:	80 fa 49             	cmp    dl,0x49
10004580:	75 07                	jne    10004589 <PS2Keyboard::handler()+0x6c7>
10004582:	50                   	push   eax
10004583:	51                   	push   ecx
10004584:	e9 ec fd ff ff       	jmp    10004375 <PS2Keyboard::handler()+0x4b3>
10004589:	80 fa 53             	cmp    dl,0x53
1000458c:	75 07                	jne    10004595 <PS2Keyboard::handler()+0x6d3>
1000458e:	50                   	push   eax
1000458f:	51                   	push   ecx
10004590:	e9 ed fd ff ff       	jmp    10004382 <PS2Keyboard::handler()+0x4c0>
10004595:	80 fa 4a             	cmp    dl,0x4a
10004598:	75 07                	jne    100045a1 <PS2Keyboard::handler()+0x6df>
1000459a:	50                   	push   eax
1000459b:	51                   	push   ecx
1000459c:	e9 ee fd ff ff       	jmp    1000438f <PS2Keyboard::handler()+0x4cd>
100045a1:	80 fa 4e             	cmp    dl,0x4e
100045a4:	75 07                	jne    100045ad <PS2Keyboard::handler()+0x6eb>
100045a6:	50                   	push   eax
100045a7:	51                   	push   ecx
100045a8:	e9 ef fd ff ff       	jmp    1000439c <PS2Keyboard::handler()+0x4da>
100045ad:	80 fa 37             	cmp    dl,0x37
100045b0:	75 07                	jne    100045b9 <PS2Keyboard::handler()+0x6f7>
100045b2:	57                   	push   edi
100045b3:	51                   	push   ecx
100045b4:	e9 f0 fd ff ff       	jmp    100043a9 <PS2Keyboard::handler()+0x4e7>
100045b9:	0f b6 be 67 01 00 00 	movzx  edi,BYTE PTR [esi+0x167]
100045c0:	0f b6 86 69 01 00 00 	movzx  eax,BYTE PTR [esi+0x169]
100045c7:	c1 e7 07             	shl    edi,0x7
100045ca:	c1 e0 08             	shl    eax,0x8
100045cd:	8d bc 07 00 00 00 00 	lea    edi,[edi+eax*1+0x0]	100045d0: R_386_32	PS2Keyboard::internalMapperLowerBad
100045d4:	88 d0                	mov    al,dl
100045d6:	89 fb                	mov    ebx,edi
100045d8:	d7                   	xlat   BYTE PTR ds:[ebx]
100045d9:	88 c2                	mov    dl,al
100045db:	0f b6 d2             	movzx  edx,dl
100045de:	53                   	push   ebx
100045df:	51                   	push   ecx
100045e0:	52                   	push   edx
100045e1:	e9 0f fe ff ff       	jmp    100043f5 <PS2Keyboard::handler()+0x533>
100045e6:	80 fa 36             	cmp    dl,0x36
100045e9:	0f 84 26 f9 ff ff    	je     10003f15 <PS2Keyboard::handler()+0x53>
100045ef:	80 fa 38             	cmp    dl,0x38
100045f2:	0f 84 7f f9 ff ff    	je     10003f77 <PS2Keyboard::handler()+0xb5>
100045f8:	e9 5b fa ff ff       	jmp    10004058 <PS2Keyboard::handler()+0x196>
100045fd:	5b                   	pop    ebx
100045fe:	5e                   	pop    esi
100045ff:	5f                   	pop    edi
10004600:	c3                   	ret    
10004601:	90                   	nop

10004602 <PS2Keyboard::open(int, int, void*)>:
10004602:	53                   	push   ebx
10004603:	83 ec 14             	sub    esp,0x14
10004606:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
1000460a:	8b 83 c8 00 00 00    	mov    eax,DWORD PTR [ebx+0xc8]
10004610:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10004616:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000461a:	89 83 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],eax
10004620:	53                   	push   ebx
10004621:	6a 01                	push   0x1
10004623:	68 00 00 00 00       	push   0x0	10004624: R_386_32	ps2KeyboardHandler(regs*, void*)
10004628:	6a 01                	push   0x1
1000462a:	53                   	push   ebx
1000462b:	e8 fc ff ff ff       	call   1000462c <PS2Keyboard::open(int, int, void*)+0x2a>	1000462c: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10004630:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
10004636:	a1 00 00 00 00       	mov    eax,ds:0x0	10004637: R_386_32	sysBootSettings
1000463b:	c1 e8 02             	shr    eax,0x2
1000463e:	83 f0 01             	xor    eax,0x1
10004641:	83 e0 01             	and    eax,0x1
10004644:	88 83 6e 01 00 00    	mov    BYTE PTR [ebx+0x16e],al
1000464a:	31 c0                	xor    eax,eax
1000464c:	83 c4 28             	add    esp,0x28
1000464f:	5b                   	pop    ebx
10004650:	c3                   	ret    
10004651:	90                   	nop

10004652 <PS2Keyboard::close(int, int, void*)>:
10004652:	83 c8 ff             	or     eax,0xffffffff
10004655:	c3                   	ret    

10004656 <PS2Mouse::PS2Mouse()>:
10004656:	55                   	push   ebp
10004657:	89 e5                	mov    ebp,esp
10004659:	83 ec 08             	sub    esp,0x8
1000465c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000465f:	83 ec 08             	sub    esp,0x8
10004662:	68 00 00 00 00       	push   0x0	10004663: R_386_32	ps2mousename
10004667:	50                   	push   eax
10004668:	e8 fc ff ff ff       	call   10004669 <PS2Mouse::PS2Mouse()+0x13>	10004669: R_386_PC32	Mouse::Mouse(char const*)
1000466d:	83 c4 10             	add    esp,0x10
10004670:	ba 08 00 00 00       	mov    edx,0x8	10004671: R_386_32	vtable for PS2Mouse
10004675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004678:	89 10                	mov    DWORD PTR [eax],edx
1000467a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000467d:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10004684:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004687:	c7 80 62 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x162],0x0
10004691:	90                   	nop
10004692:	c9                   	leave  
10004693:	c3                   	ret    

10004694 <ps2MouseHandler(regs*, void*)>:
10004694:	55                   	push   ebp
10004695:	89 e5                	mov    ebp,esp
10004697:	83 ec 08             	sub    esp,0x8
1000469a:	83 ec 0c             	sub    esp,0xc
1000469d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100046a0:	e8 fc ff ff ff       	call   100046a1 <ps2MouseHandler(regs*, void*)+0xd>	100046a1: R_386_PC32	PS2Mouse::handler()
100046a5:	83 c4 10             	add    esp,0x10
100046a8:	90                   	nop
100046a9:	c9                   	leave  
100046aa:	c3                   	ret    
100046ab:	90                   	nop

100046ac <PS2Mouse::handler()>:
100046ac:	55                   	push   ebp
100046ad:	89 e5                	mov    ebp,esp
100046af:	83 ec 28             	sub    esp,0x28
100046b2:	66 c7 45 ea 64 00    	mov    WORD PTR [ebp-0x16],0x64
100046b8:	66 8b 45 ea          	mov    ax,WORD PTR [ebp-0x16]
100046bc:	89 c2                	mov    edx,eax
100046be:	ec                   	in     al,dx
100046bf:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
100046c2:	8a 45 e9             	mov    al,BYTE PTR [ebp-0x17]
100046c5:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100046c8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100046cc:	83 e0 01             	and    eax,0x1
100046cf:	85 c0                	test   eax,eax
100046d1:	0f 84 8d 01 00 00    	je     10004864 <PS2Mouse::handler()+0x1b8>
100046d7:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100046db:	83 e0 20             	and    eax,0x20
100046de:	85 c0                	test   eax,eax
100046e0:	0f 84 81 01 00 00    	je     10004867 <PS2Mouse::handler()+0x1bb>
100046e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046e9:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
100046ef:	8d 50 01             	lea    edx,[eax+0x1]
100046f2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100046f5:	88 91 61 01 00 00    	mov    BYTE PTR [ecx+0x161],dl
100046fb:	0f b6 c8             	movzx  ecx,al
100046fe:	66 c7 45 e6 60 00    	mov    WORD PTR [ebp-0x1a],0x60
10004704:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10004708:	89 c2                	mov    edx,eax
1000470a:	ec                   	in     al,dx
1000470b:	88 45 e5             	mov    BYTE PTR [ebp-0x1b],al
1000470e:	8a 55 e5             	mov    dl,BYTE PTR [ebp-0x1b]
10004711:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004714:	88 94 08 62 01 00 00 	mov    BYTE PTR [eax+ecx*1+0x162],dl
1000471b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000471e:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10004724:	0f b6 c0             	movzx  eax,al
10004727:	83 e0 08             	and    eax,0x8
1000472a:	85 c0                	test   eax,eax
1000472c:	75 0f                	jne    1000473d <PS2Mouse::handler()+0x91>
1000472e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004731:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10004738:	e9 2b 01 00 00       	jmp    10004868 <PS2Mouse::handler()+0x1bc>
1000473d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004740:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10004746:	84 c0                	test   al,al
10004748:	75 0d                	jne    10004757 <PS2Mouse::handler()+0xab>
1000474a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000474d:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10004753:	3c 02                	cmp    al,0x2
10004755:	77 2f                	ja     10004786 <PS2Mouse::handler()+0xda>
10004757:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000475a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10004760:	3c 03                	cmp    al,0x3
10004762:	74 11                	je     10004775 <PS2Mouse::handler()+0xc9>
10004764:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004767:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
1000476d:	3c 04                	cmp    al,0x4
1000476f:	0f 85 f3 00 00 00    	jne    10004868 <PS2Mouse::handler()+0x1bc>
10004775:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004778:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
1000477e:	3c 03                	cmp    al,0x3
10004780:	0f 86 e2 00 00 00    	jbe    10004868 <PS2Mouse::handler()+0x1bc>
10004786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004789:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10004790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004793:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10004799:	84 c0                	test   al,al
1000479b:	78 13                	js     100047b0 <PS2Mouse::handler()+0x104>
1000479d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047a0:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100047a6:	0f b6 c0             	movzx  eax,al
100047a9:	83 e0 40             	and    eax,0x40
100047ac:	85 c0                	test   eax,eax
100047ae:	74 37                	je     100047e7 <PS2Mouse::handler()+0x13b>
100047b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047b3:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100047ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047bd:	c6 80 62 01 00 00 00 	mov    BYTE PTR [eax+0x162],0x0
100047c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047c7:	c6 80 63 01 00 00 00 	mov    BYTE PTR [eax+0x163],0x0
100047ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047d1:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
100047d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047db:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
100047e2:	e9 81 00 00 00       	jmp    10004868 <PS2Mouse::handler()+0x1bc>
100047e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047ea:	8a 80 63 01 00 00    	mov    al,BYTE PTR [eax+0x163]
100047f0:	0f b6 d0             	movzx  edx,al
100047f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047f6:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100047fc:	0f b6 c0             	movzx  eax,al
100047ff:	c1 e0 04             	shl    eax,0x4
10004802:	25 00 01 00 00       	and    eax,0x100
10004807:	29 c2                	sub    edx,eax
10004809:	89 d0                	mov    eax,edx
1000480b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000480e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004811:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10004817:	0f b6 c0             	movzx  eax,al
1000481a:	c1 e0 03             	shl    eax,0x3
1000481d:	25 00 01 00 00       	and    eax,0x100
10004822:	89 c2                	mov    edx,eax
10004824:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004827:	8a 80 64 01 00 00    	mov    al,BYTE PTR [eax+0x164]
1000482d:	0f b6 c0             	movzx  eax,al
10004830:	29 c2                	sub    edx,eax
10004832:	89 d0                	mov    eax,edx
10004834:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10004837:	a1 00 00 00 00       	mov    eax,ds:0x0	10004838: R_386_32	guiMouseHandler
1000483c:	85 c0                	test   eax,eax
1000483e:	74 28                	je     10004868 <PS2Mouse::handler()+0x1bc>
10004840:	a1 00 00 00 00       	mov    eax,ds:0x0	10004841: R_386_32	guiMouseHandler
10004845:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10004848:	8a 92 62 01 00 00    	mov    dl,BYTE PTR [edx+0x162]
1000484e:	0f b6 d2             	movzx  edx,dl
10004851:	83 e2 01             	and    edx,0x1
10004854:	6a 00                	push   0x0
10004856:	52                   	push   edx
10004857:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000485a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000485d:	ff d0                	call   eax
1000485f:	83 c4 10             	add    esp,0x10
10004862:	eb 04                	jmp    10004868 <PS2Mouse::handler()+0x1bc>
10004864:	90                   	nop
10004865:	eb 01                	jmp    10004868 <PS2Mouse::handler()+0x1bc>
10004867:	90                   	nop
10004868:	c9                   	leave  
10004869:	c3                   	ret    

1000486a <PS2Mouse::open(int, int, void*)>:
1000486a:	55                   	push   ebp
1000486b:	89 e5                	mov    ebp,esp
1000486d:	83 ec 08             	sub    esp,0x8
10004870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004873:	8b 90 c8 00 00 00    	mov    edx,DWORD PTR [eax+0xc8]
10004879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000487c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10004882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004885:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10004888:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
1000488e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004891:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004897:	83 ec 08             	sub    esp,0x8
1000489a:	68 f6 00 00 00       	push   0xf6
1000489f:	50                   	push   eax
100048a0:	e8 fc ff ff ff       	call   100048a1 <PS2Mouse::open(int, int, void*)+0x37>	100048a1: R_386_PC32	PS2Port::deviceWrite(unsigned char)
100048a5:	83 c4 10             	add    esp,0x10
100048a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048ab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100048b1:	83 ec 0c             	sub    esp,0xc
100048b4:	50                   	push   eax
100048b5:	e8 fc ff ff ff       	call   100048b6 <PS2Mouse::open(int, int, void*)+0x4c>	100048b6: R_386_PC32	PS2Port::deviceRead()
100048ba:	83 c4 10             	add    esp,0x10
100048bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048c0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100048c6:	83 ec 08             	sub    esp,0x8
100048c9:	68 f4 00 00 00       	push   0xf4
100048ce:	50                   	push   eax
100048cf:	e8 fc ff ff ff       	call   100048d0 <PS2Mouse::open(int, int, void*)+0x66>	100048d0: R_386_PC32	PS2Port::deviceWrite(unsigned char)
100048d4:	83 c4 10             	add    esp,0x10
100048d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048da:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100048e0:	83 ec 0c             	sub    esp,0xc
100048e3:	50                   	push   eax
100048e4:	e8 fc ff ff ff       	call   100048e5 <PS2Mouse::open(int, int, void*)+0x7b>	100048e5: R_386_PC32	PS2Port::deviceRead()
100048e9:	83 c4 10             	add    esp,0x10
100048ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048ef:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100048f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048f9:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
10004900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004903:	83 ec 0c             	sub    esp,0xc
10004906:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004909:	6a 01                	push   0x1
1000490b:	68 00 00 00 00       	push   0x0	1000490c: R_386_32	ps2MouseHandler(regs*, void*)
10004910:	6a 0c                	push   0xc
10004912:	50                   	push   eax
10004913:	e8 fc ff ff ff       	call   10004914 <PS2Mouse::open(int, int, void*)+0xaa>	10004914: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10004918:	83 c4 20             	add    esp,0x20
1000491b:	b8 00 00 00 00       	mov    eax,0x0
10004920:	c9                   	leave  
10004921:	c3                   	ret    

10004922 <PS2Mouse::close(int, int, void*)>:
10004922:	b8 00 00 00 00       	mov    eax,0x0
10004927:	c3                   	ret    

10004928 <PS2Mouse::detect()>:
10004928:	90                   	nop
10004929:	c3                   	ret    

1000492a <PS2Port::PS2Port()>:
1000492a:	55                   	push   ebp
1000492b:	89 e5                	mov    ebp,esp
1000492d:	83 ec 08             	sub    esp,0x8
10004930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004933:	83 ec 08             	sub    esp,0x8
10004936:	68 00 00 00 00       	push   0x0	10004937: R_386_32	ps2portname
1000493b:	50                   	push   eax
1000493c:	e8 fc ff ff ff       	call   1000493d <PS2Port::PS2Port()+0x13>	1000493d: R_386_PC32	Bus::Bus(char const*)
10004941:	83 c4 10             	add    esp,0x10
10004944:	ba 08 00 00 00       	mov    edx,0x8	10004945: R_386_32	vtable for PS2Port
10004949:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000494c:	89 10                	mov    DWORD PTR [eax],edx
1000494e:	90                   	nop
1000494f:	c9                   	leave  
10004950:	c3                   	ret    
10004951:	90                   	nop

10004952 <PS2Port::open(int, int, void*)>:
10004952:	55                   	push   ebp
10004953:	89 e5                	mov    ebp,esp
10004955:	83 ec 08             	sub    esp,0x8
10004958:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000495b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000495e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10004964:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004967:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000496a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10004970:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004973:	8b 00                	mov    eax,DWORD PTR [eax]
10004975:	83 c0 18             	add    eax,0x18
10004978:	8b 00                	mov    eax,DWORD PTR [eax]
1000497a:	83 ec 0c             	sub    esp,0xc
1000497d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004980:	ff d0                	call   eax
10004982:	83 c4 10             	add    esp,0x10
10004985:	b8 00 00 00 00       	mov    eax,0x0
1000498a:	c9                   	leave  
1000498b:	c3                   	ret    

1000498c <PS2Port::close(int, int, void*)>:
1000498c:	b8 00 00 00 00       	mov    eax,0x0
10004991:	c3                   	ret    

10004992 <PS2Port::detect()>:
10004992:	55                   	push   ebp
10004993:	89 e5                	mov    ebp,esp
10004995:	53                   	push   ebx
10004996:	83 ec 14             	sub    esp,0x14
10004999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000499c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100049a2:	85 c0                	test   eax,eax
100049a4:	75 5a                	jne    10004a00 <PS2Port::detect()+0x6e>
100049a6:	c7 45 ec 70 01 00 00 	mov    DWORD PTR [ebp-0x14],0x170
100049ad:	83 ec 0c             	sub    esp,0xc
100049b0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100049b3:	e8 fc ff ff ff       	call   100049b4 <PS2Port::detect()+0x22>	100049b4: R_386_PC32	malloc
100049b8:	83 c4 10             	add    esp,0x10
100049bb:	89 c3                	mov    ebx,eax
100049bd:	83 ec 0c             	sub    esp,0xc
100049c0:	53                   	push   ebx
100049c1:	e8 fc ff ff ff       	call   100049c2 <PS2Port::detect()+0x30>	100049c2: R_386_PC32	PS2Keyboard::PS2Keyboard()
100049c6:	83 c4 10             	add    esp,0x10
100049c9:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100049cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049cf:	83 ec 08             	sub    esp,0x8
100049d2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100049d5:	50                   	push   eax
100049d6:	e8 fc ff ff ff       	call   100049d7 <PS2Port::detect()+0x45>	100049d7: R_386_PC32	Device::addChild(Device*)
100049db:	83 c4 10             	add    esp,0x10
100049de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100049e1:	8b 00                	mov    eax,DWORD PTR [eax]
100049e3:	83 c0 08             	add    eax,0x8
100049e6:	8b 00                	mov    eax,DWORD PTR [eax]
100049e8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100049eb:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
100049f1:	52                   	push   edx
100049f2:	6a 00                	push   0x0
100049f4:	6a 00                	push   0x0
100049f6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100049f9:	ff d0                	call   eax
100049fb:	83 c4 10             	add    esp,0x10
100049fe:	eb 66                	jmp    10004a66 <PS2Port::detect()+0xd4>
10004a00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a03:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10004a09:	83 f8 01             	cmp    eax,0x1
10004a0c:	75 58                	jne    10004a66 <PS2Port::detect()+0xd4>
10004a0e:	c7 45 e8 68 01 00 00 	mov    DWORD PTR [ebp-0x18],0x168
10004a15:	83 ec 0c             	sub    esp,0xc
10004a18:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10004a1b:	e8 fc ff ff ff       	call   10004a1c <PS2Port::detect()+0x8a>	10004a1c: R_386_PC32	malloc
10004a20:	83 c4 10             	add    esp,0x10
10004a23:	89 c3                	mov    ebx,eax
10004a25:	83 ec 0c             	sub    esp,0xc
10004a28:	53                   	push   ebx
10004a29:	e8 fc ff ff ff       	call   10004a2a <PS2Port::detect()+0x98>	10004a2a: R_386_PC32	PS2Mouse::PS2Mouse()
10004a2e:	83 c4 10             	add    esp,0x10
10004a31:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
10004a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a37:	83 ec 08             	sub    esp,0x8
10004a3a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10004a3d:	50                   	push   eax
10004a3e:	e8 fc ff ff ff       	call   10004a3f <PS2Port::detect()+0xad>	10004a3f: R_386_PC32	Device::addChild(Device*)
10004a43:	83 c4 10             	add    esp,0x10
10004a46:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10004a49:	8b 00                	mov    eax,DWORD PTR [eax]
10004a4b:	83 c0 08             	add    eax,0x8
10004a4e:	8b 00                	mov    eax,DWORD PTR [eax]
10004a50:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10004a53:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10004a59:	52                   	push   edx
10004a5a:	6a 00                	push   0x0
10004a5c:	6a 01                	push   0x1
10004a5e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10004a61:	ff d0                	call   eax
10004a63:	83 c4 10             	add    esp,0x10
10004a66:	90                   	nop
10004a67:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10004a6a:	c9                   	leave  
10004a6b:	c3                   	ret    

10004a6c <PS2Port::deviceWrite(unsigned char)>:
10004a6c:	55                   	push   ebp
10004a6d:	89 e5                	mov    ebp,esp
10004a6f:	83 ec 28             	sub    esp,0x28
10004a72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004a75:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10004a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a7b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10004a81:	83 f8 01             	cmp    eax,0x1
10004a84:	75 1a                	jne    10004aa0 <PS2Port::deviceWrite(unsigned char)+0x34>
10004a86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a89:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004a8f:	83 ec 08             	sub    esp,0x8
10004a92:	68 d4 00 00 00       	push   0xd4
10004a97:	50                   	push   eax
10004a98:	e8 fc ff ff ff       	call   10004a99 <PS2Port::deviceWrite(unsigned char)+0x2d>	10004a99: R_386_PC32	PS2::controllerWrite(unsigned char)
10004a9d:	83 c4 10             	add    esp,0x10
10004aa0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10004aa7:	66 c7 45 f0 64 00    	mov    WORD PTR [ebp-0x10],0x64
10004aad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10004ab0:	89 c2                	mov    edx,eax
10004ab2:	ec                   	in     al,dx
10004ab3:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10004ab6:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10004ab9:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10004abc:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10004ac0:	83 e0 02             	and    eax,0x2
10004ac3:	85 c0                	test   eax,eax
10004ac5:	74 29                	je     10004af0 <PS2Port::deviceWrite(unsigned char)+0x84>
10004ac7:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10004acb:	83 e0 40             	and    eax,0x40
10004ace:	85 c0                	test   eax,eax
10004ad0:	75 22                	jne    10004af4 <PS2Port::deviceWrite(unsigned char)+0x88>
10004ad2:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10004ad5:	84 c0                	test   al,al
10004ad7:	78 1b                	js     10004af4 <PS2Port::deviceWrite(unsigned char)+0x88>
10004ad9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004adc:	8d 50 01             	lea    edx,[eax+0x1]
10004adf:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10004ae2:	3d 40 06 00 00       	cmp    eax,0x640
10004ae7:	0f 94 c0             	sete   al
10004aea:	84 c0                	test   al,al
10004aec:	75 05                	jne    10004af3 <PS2Port::deviceWrite(unsigned char)+0x87>
10004aee:	eb b7                	jmp    10004aa7 <PS2Port::deviceWrite(unsigned char)+0x3b>
10004af0:	90                   	nop
10004af1:	eb 01                	jmp    10004af4 <PS2Port::deviceWrite(unsigned char)+0x88>
10004af3:	90                   	nop
10004af4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10004af8:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10004afe:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10004b01:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10004b04:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10004b07:	ee                   	out    dx,al
10004b08:	b0 01                	mov    al,0x1
10004b0a:	c9                   	leave  
10004b0b:	c3                   	ret    

10004b0c <PS2Port::deviceRead()>:
10004b0c:	55                   	push   ebp
10004b0d:	89 e5                	mov    ebp,esp
10004b0f:	83 ec 08             	sub    esp,0x8
10004b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004b15:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004b1b:	83 ec 0c             	sub    esp,0xc
10004b1e:	50                   	push   eax
10004b1f:	e8 fc ff ff ff       	call   10004b20 <PS2Port::deviceRead()+0x14>	10004b20: R_386_PC32	PS2::controllerRead()
10004b24:	83 c4 10             	add    esp,0x10
10004b27:	c9                   	leave  
10004b28:	c3                   	ret    
10004b29:	90                   	nop

10004b2a <sb16Demo(void*)>:
10004b2a:	55                   	push   ebp
10004b2b:	57                   	push   edi
10004b2c:	56                   	push   esi
10004b2d:	53                   	push   ebx
10004b2e:	83 ec 2c             	sub    esp,0x2c
10004b31:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b32: R_386_32	irqDisableCounter
10004b36:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
10004b3a:	48                   	dec    eax
10004b3b:	a3 00 00 00 00       	mov    ds:0x0,eax	10004b3c: R_386_32	irqDisableCounter
10004b40:	75 01                	jne    10004b43 <sb16Demo(void*)+0x19>
10004b42:	fb                   	sti    
10004b43:	83 ec 0c             	sub    esp,0xc
10004b46:	6a 1c                	push   0x1c
10004b48:	e8 fc ff ff ff       	call   10004b49 <sb16Demo(void*)+0x1f>	10004b49: R_386_PC32	malloc
10004b4d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
10004b54:	89 c3                	mov    ebx,eax
10004b56:	6a 02                	push   0x2
10004b58:	6a 10                	push   0x10
10004b5a:	68 22 56 00 00       	push   0x5622
10004b5f:	50                   	push   eax
10004b60:	e8 fc ff ff ff       	call   10004b61 <sb16Demo(void*)+0x37>	10004b61: R_386_PC32	SoundPort::SoundPort(int, int, int, int)
10004b65:	83 c4 14             	add    esp,0x14
10004b68:	68 14 01 00 00       	push   0x114
10004b6d:	e8 fc ff ff ff       	call   10004b6e <sb16Demo(void*)+0x44>	10004b6e: R_386_PC32	malloc
10004b72:	83 c4 0c             	add    esp,0xc
10004b75:	89 c6                	mov    esi,eax
10004b77:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004b79: R_386_32	kernelProcess
10004b7d:	68 10 6a 00 10       	push   0x10006a10	10004b7e: R_386_32	.text
10004b82:	50                   	push   eax
10004b83:	e8 fc ff ff ff       	call   10004b84 <sb16Demo(void*)+0x5a>	10004b84: R_386_PC32	File::File(char const*, Process*)
10004b88:	5d                   	pop    ebp
10004b89:	31 ed                	xor    ebp,ebp
10004b8b:	58                   	pop    eax
10004b8c:	6a 01                	push   0x1
10004b8e:	56                   	push   esi
10004b8f:	e8 fc ff ff ff       	call   10004b90 <sb16Demo(void*)+0x66>	10004b90: R_386_PC32	File::open(FileOpenMode)
10004b94:	83 c4 10             	add    esp,0x10
10004b97:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10004b9f:	8b 06                	mov    eax,DWORD PTR [esi]
10004ba1:	83 ec 0c             	sub    esp,0xc
10004ba4:	8d 54 24 28          	lea    edx,[esp+0x28]
10004ba8:	52                   	push   edx
10004ba9:	68 00 00 00 00       	push   0x0	10004baa: R_386_32	buf
10004bae:	6a 00                	push   0x0
10004bb0:	68 00 20 00 00       	push   0x2000
10004bb5:	56                   	push   esi
10004bb6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10004bb9:	83 c4 20             	add    esp,0x20
10004bbc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
10004bc1:	74 04                	je     10004bc7 <sb16Demo(void*)+0x9d>
10004bc3:	85 c0                	test   eax,eax
10004bc5:	74 60                	je     10004c27 <sb16Demo(void*)+0xfd>
10004bc7:	83 ec 0c             	sub    esp,0xc
10004bca:	68 2d 6a 00 10       	push   0x10006a2d	10004bcb: R_386_32	.text
10004bcf:	e8 fc ff ff ff       	call   10004bd0 <sb16Demo(void*)+0xa6>	10004bd0: R_386_PC32	Dbg::kprintf(char const*, ...)
10004bd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10004bdb:	e8 fc ff ff ff       	call   10004bdc <sb16Demo(void*)+0xb2>	10004bdc: R_386_PC32	terminateTask(int)
10004be0:	83 c4 3c             	add    esp,0x3c
10004be3:	5b                   	pop    ebx
10004be4:	5e                   	pop    esi
10004be5:	5f                   	pop    edi
10004be6:	5d                   	pop    ebp
10004be7:	c3                   	ret    
10004be8:	83 ec 0c             	sub    esp,0xc
10004beb:	53                   	push   ebx
10004bec:	e8 fc ff ff ff       	call   10004bed <sb16Demo(void*)+0xc3>	10004bed: R_386_PC32	SoundPort::getBufferUsed()
10004bf1:	6b 54 24 2c 03       	imul   edx,DWORD PTR [esp+0x2c],0x3
10004bf6:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004bf9:	01 d0                	add    eax,edx
10004bfb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10004bff:	e8 fc ff ff ff       	call   10004c00 <sb16Demo(void*)+0xd6>	10004c00: R_386_PC32	SoundPort::getBufferSize()
10004c04:	83 c4 10             	add    esp,0x10
10004c07:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10004c0b:	7c 20                	jl     10004c2d <sb16Demo(void*)+0x103>
10004c0d:	fa                   	cli    
10004c0e:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	10004c10: R_386_32	irqDisableCounter
10004c14:	e8 fc ff ff ff       	call   10004c15 <sb16Demo(void*)+0xeb>	10004c15: R_386_PC32	schedule()
10004c19:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c1a: R_386_32	irqDisableCounter
10004c1e:	48                   	dec    eax
10004c1f:	a3 00 00 00 00       	mov    ds:0x0,eax	10004c20: R_386_32	irqDisableCounter
10004c24:	75 01                	jne    10004c27 <sb16Demo(void*)+0xfd>
10004c26:	fb                   	sti    
10004c27:	89 e8                	mov    eax,ebp
10004c29:	84 c0                	test   al,al
10004c2b:	75 bb                	jne    10004be8 <sb16Demo(void*)+0xbe>
10004c2d:	51                   	push   ecx
10004c2e:	b9 02 00 00 00       	mov    ecx,0x2
10004c33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004c37:	99                   	cdq    
10004c38:	f7 f9                	idiv   ecx
10004c3a:	50                   	push   eax
10004c3b:	68 00 00 00 00       	push   0x0	10004c3c: R_386_32	buf
10004c40:	53                   	push   ebx
10004c41:	e8 fc ff ff ff       	call   10004c42 <sb16Demo(void*)+0x118>	10004c42: R_386_PC32	SoundPort::buffer16(short*, int)
10004c46:	83 c4 10             	add    esp,0x10
10004c49:	89 e8                	mov    eax,ebp
10004c4b:	84 c0                	test   al,al
10004c4d:	75 2b                	jne    10004c7a <sb16Demo(void*)+0x150>
10004c4f:	6a 02                	push   0x2
10004c51:	6a 10                	push   0x10
10004c53:	68 22 56 00 00       	push   0x5622
10004c58:	57                   	push   edi
10004c59:	e8 fc ff ff ff       	call   10004c5a <sb16Demo(void*)+0x130>	10004c5a: R_386_PC32	SoundCard::configureRates(int, int, int)
10004c5e:	58                   	pop    eax
10004c5f:	5a                   	pop    edx
10004c60:	53                   	push   ebx
10004c61:	57                   	push   edi
10004c62:	e8 fc ff ff ff       	call   10004c63 <sb16Demo(void*)+0x139>	10004c63: R_386_PC32	SoundCard::addChannel(SoundPort*)
10004c67:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004c6a:	e8 fc ff ff ff       	call   10004c6b <sb16Demo(void*)+0x141>	10004c6b: R_386_PC32	SoundPort::unpause()
10004c6f:	8b 07                	mov    eax,DWORD PTR [edi]
10004c71:	89 3c 24             	mov    DWORD PTR [esp],edi
10004c74:	ff 50 24             	call   DWORD PTR [eax+0x24]
10004c77:	83 c4 10             	add    esp,0x10
10004c7a:	bd 01 00 00 00       	mov    ebp,0x1
10004c7f:	e9 13 ff ff ff       	jmp    10004b97 <sb16Demo(void*)+0x6d>

10004c84 <SoundBlaster16::resetDSP()>:
10004c84:	53                   	push   ebx
10004c85:	b0 01                	mov    al,0x1
10004c87:	83 ec 14             	sub    esp,0x14
10004c8a:	bb 26 02 00 00       	mov    ebx,0x226
10004c8f:	89 da                	mov    edx,ebx
10004c91:	ee                   	out    dx,al
10004c92:	6a 1e                	push   0x1e
10004c94:	e8 fc ff ff ff       	call   10004c95 <SoundBlaster16::resetDSP()+0x11>	10004c95: R_386_PC32	milliTenthSleep(unsigned int)
10004c99:	31 c0                	xor    eax,eax
10004c9b:	89 da                	mov    edx,ebx
10004c9d:	ee                   	out    dx,al
10004c9e:	ba 2a 02 00 00       	mov    edx,0x22a
10004ca3:	ec                   	in     al,dx
10004ca4:	83 c4 10             	add    esp,0x10
10004ca7:	3c aa                	cmp    al,0xaa
10004ca9:	75 25                	jne    10004cd0 <SoundBlaster16::resetDSP()+0x4c>
10004cab:	b0 e1                	mov    al,0xe1
10004cad:	ba 2c 02 00 00       	mov    edx,0x22c
10004cb2:	ee                   	out    dx,al
10004cb3:	ba 2e 02 00 00       	mov    edx,0x22e
10004cb8:	ec                   	in     al,dx
10004cb9:	84 c0                	test   al,al
10004cbb:	79 fb                	jns    10004cb8 <SoundBlaster16::resetDSP()+0x34>
10004cbd:	ba 2a 02 00 00       	mov    edx,0x22a
10004cc2:	ec                   	in     al,dx
10004cc3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004cc7:	88 81 f8 01 00 00    	mov    BYTE PTR [ecx+0x1f8],al
10004ccd:	ec                   	in     al,dx
10004cce:	eb 13                	jmp    10004ce3 <SoundBlaster16::resetDSP()+0x5f>
10004cd0:	0f b6 c0             	movzx  eax,al
10004cd3:	51                   	push   ecx
10004cd4:	51                   	push   ecx
10004cd5:	50                   	push   eax
10004cd6:	68 00 00 00 00       	push   0x0	10004cd7: R_386_32	badVer
10004cdb:	e8 fc ff ff ff       	call   10004cdc <SoundBlaster16::resetDSP()+0x58>	10004cdc: R_386_PC32	Dbg::kprintf(char const*, ...)
10004ce0:	83 c4 10             	add    esp,0x10
10004ce3:	83 c4 08             	add    esp,0x8
10004ce6:	5b                   	pop    ebx
10004ce7:	c3                   	ret    

10004ce8 <SoundBlaster16::DSPOut(unsigned short, unsigned char)>:
10004ce8:	53                   	push   ebx
10004ce9:	ba 2c 02 00 00       	mov    edx,0x22c
10004cee:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10004cf2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004cf6:	ec                   	in     al,dx
10004cf7:	84 c0                	test   al,al
10004cf9:	78 fb                	js     10004cf6 <SoundBlaster16::DSPOut(unsigned short, unsigned char)+0xe>
10004cfb:	88 c8                	mov    al,cl
10004cfd:	89 da                	mov    edx,ebx
10004cff:	ee                   	out    dx,al
10004d00:	5b                   	pop    ebx
10004d01:	c3                   	ret    

10004d02 <SoundBlaster16::turnSpeakerOn(bool)>:
10004d02:	53                   	push   ebx
10004d03:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
10004d07:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
10004d0c:	75 34                	jne    10004d42 <SoundBlaster16::turnSpeakerOn(bool)+0x40>
10004d0e:	31 c0                	xor    eax,eax
10004d10:	83 bb dc 01 00 00 10 	cmp    DWORD PTR [ebx+0x1dc],0x10
10004d17:	0f 94 c0             	sete   al
10004d1a:	8d 84 80 d0 00 00 00 	lea    eax,[eax+eax*4+0xd0]
10004d21:	50                   	push   eax
10004d22:	68 2c 02 00 00       	push   0x22c
10004d27:	53                   	push   ebx
10004d28:	e8 fc ff ff ff       	call   10004d29 <SoundBlaster16::turnSpeakerOn(bool)+0x27>	10004d29: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004d2d:	68 d3 00 00 00       	push   0xd3
10004d32:	68 2c 02 00 00       	push   0x22c
10004d37:	53                   	push   ebx
10004d38:	e8 fc ff ff ff       	call   10004d39 <SoundBlaster16::turnSpeakerOn(bool)+0x37>	10004d39: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004d3d:	83 c4 18             	add    esp,0x18
10004d40:	eb 13                	jmp    10004d55 <SoundBlaster16::turnSpeakerOn(bool)+0x53>
10004d42:	68 d1 00 00 00       	push   0xd1
10004d47:	68 2c 02 00 00       	push   0x22c
10004d4c:	53                   	push   ebx
10004d4d:	e8 fc ff ff ff       	call   10004d4e <SoundBlaster16::turnSpeakerOn(bool)+0x4c>	10004d4e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004d52:	83 c4 0c             	add    esp,0xc
10004d55:	5b                   	pop    ebx
10004d56:	c3                   	ret    
10004d57:	90                   	nop

10004d58 <SoundBlaster16::SoundBlaster16()>:
10004d58:	55                   	push   ebp
10004d59:	89 e5                	mov    ebp,esp
10004d5b:	83 ec 08             	sub    esp,0x8
10004d5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004d61:	83 ec 08             	sub    esp,0x8
10004d64:	68 43 6a 00 10       	push   0x10006a43	10004d65: R_386_32	.text
10004d69:	50                   	push   eax
10004d6a:	e8 fc ff ff ff       	call   10004d6b <SoundBlaster16::SoundBlaster16()+0x13>	10004d6b: R_386_PC32	SoundCard::SoundCard(char const*)
10004d6f:	83 c4 10             	add    esp,0x10
10004d72:	ba 08 00 00 00       	mov    edx,0x8	10004d73: R_386_32	vtable for SoundBlaster16
10004d77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004d7a:	89 10                	mov    DWORD PTR [eax],edx
10004d7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004d7f:	c6 80 f8 01 00 00 00 	mov    BYTE PTR [eax+0x1f8],0x0
10004d86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004d89:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10004d8f:	0f b6 d0             	movzx  edx,al
10004d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004d95:	66 c7 44 90 04 20 02 	mov    WORD PTR [eax+edx*4+0x4],0x220
10004d9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004d9f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10004da5:	0f b6 d0             	movzx  edx,al
10004da8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004dab:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
10004db0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004db3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10004db9:	8d 50 01             	lea    edx,[eax+0x1]
10004dbc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10004dbf:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10004dc5:	0f b6 d0             	movzx  edx,al
10004dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004dcb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10004dcf:	83 e1 3f             	and    ecx,0x3f
10004dd2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10004dd6:	90                   	nop
10004dd7:	c9                   	leave  
10004dd8:	c3                   	ret    
10004dd9:	90                   	nop

10004dda <SoundBlaster16::handleIRQ()>:
10004dda:	53                   	push   ebx
10004ddb:	83 ec 14             	sub    esp,0x14
10004dde:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10004de2:	68 53 6a 00 10       	push   0x10006a53	10004de3: R_386_32	.text
10004de7:	e8 fc ff ff ff       	call   10004de8 <SoundBlaster16::handleIRQ()+0xe>	10004de8: R_386_PC32	Dbg::kprintf(char const*, ...)
10004dec:	83 c4 10             	add    esp,0x10
10004def:	ba 2e 02 00 00       	mov    edx,0x22e
10004df4:	83 bb dc 01 00 00 08 	cmp    DWORD PTR [ebx+0x1dc],0x8
10004dfb:	74 17                	je     10004e14 <SoundBlaster16::handleIRQ()+0x3a>
10004dfd:	b0 82                	mov    al,0x82
10004dff:	ba 24 02 00 00       	mov    edx,0x224
10004e04:	ee                   	out    dx,al
10004e05:	ba 25 02 00 00       	mov    edx,0x225
10004e0a:	ec                   	in     al,dx
10004e0b:	a8 02                	test   al,0x2
10004e0d:	74 06                	je     10004e15 <SoundBlaster16::handleIRQ()+0x3b>
10004e0f:	ba 2f 02 00 00       	mov    edx,0x22f
10004e14:	ec                   	in     al,dx
10004e15:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10004e19:	83 c4 08             	add    esp,0x8
10004e1c:	5b                   	pop    ebx
10004e1d:	e9 d2 04 00 00       	jmp    100052f4 <SoundBlaster16::onInterrupt()>

10004e22 <sb16Handler(regs*, void*)>:
10004e22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004e26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10004e2a:	eb ae                	jmp    10004dda <SoundBlaster16::handleIRQ()>

10004e2c <SoundBlaster16::beginPlayback()>:
10004e2c:	57                   	push   edi
10004e2d:	56                   	push   esi
10004e2e:	53                   	push   ebx
10004e2f:	52                   	push   edx
10004e30:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10004e34:	8b bb e4 01 00 00    	mov    edi,DWORD PTR [ebx+0x1e4]
10004e3a:	6a 01                	push   0x1
10004e3c:	53                   	push   ebx
10004e3d:	e8 fc ff ff ff       	call   10004e3e <SoundBlaster16::beginPlayback()+0x12>	10004e3e: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10004e42:	31 c0                	xor    eax,eax
10004e44:	59                   	pop    ecx
10004e45:	83 ff 02             	cmp    edi,0x2
10004e48:	5e                   	pop    esi
10004e49:	0f 94 c0             	sete   al
10004e4c:	c1 e0 05             	shl    eax,0x5
10004e4f:	89 c6                	mov    esi,eax
10004e51:	83 ce 10             	or     esi,0x10
10004e54:	83 bb dc 01 00 00 10 	cmp    DWORD PTR [ebx+0x1dc],0x10
10004e5b:	89 f0                	mov    eax,esi
10004e5d:	0f be f0             	movsx  esi,al
10004e60:	75 7c                	jne    10004ede <SoundBlaster16::beginPlayback()+0xb2>
10004e62:	6a 41                	push   0x41
10004e64:	68 2c 02 00 00       	push   0x22c
10004e69:	53                   	push   ebx
10004e6a:	e8 fc ff ff ff       	call   10004e6b <SoundBlaster16::beginPlayback()+0x3f>	10004e6b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004e6f:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
10004e75:	0f b6 c4             	movzx  eax,ah
10004e78:	50                   	push   eax
10004e79:	68 2c 02 00 00       	push   0x22c
10004e7e:	53                   	push   ebx
10004e7f:	e8 fc ff ff ff       	call   10004e80 <SoundBlaster16::beginPlayback()+0x54>	10004e80: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004e84:	0f b6 83 e0 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1e0]
10004e8b:	50                   	push   eax
10004e8c:	68 2c 02 00 00       	push   0x22c
10004e91:	53                   	push   ebx
10004e92:	e8 fc ff ff ff       	call   10004e93 <SoundBlaster16::beginPlayback()+0x67>	10004e93: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004e97:	83 c4 24             	add    esp,0x24
10004e9a:	68 b6 00 00 00       	push   0xb6
10004e9f:	68 2c 02 00 00       	push   0x22c
10004ea4:	53                   	push   ebx
10004ea5:	e8 fc ff ff ff       	call   10004ea6 <SoundBlaster16::beginPlayback()+0x7a>	10004ea6: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004eaa:	56                   	push   esi
10004eab:	68 2c 02 00 00       	push   0x22c
10004eb0:	53                   	push   ebx
10004eb1:	e8 fc ff ff ff       	call   10004eb2 <SoundBlaster16::beginPlayback()+0x86>	10004eb2: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004eb6:	68 ff 00 00 00       	push   0xff
10004ebb:	68 2c 02 00 00       	push   0x22c
10004ec0:	53                   	push   ebx
10004ec1:	e8 fc ff ff ff       	call   10004ec2 <SoundBlaster16::beginPlayback()+0x96>	10004ec2: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004ec6:	83 c4 24             	add    esp,0x24
10004ec9:	6a 0f                	push   0xf
10004ecb:	68 2c 02 00 00       	push   0x22c
10004ed0:	53                   	push   ebx
10004ed1:	e8 fc ff ff ff       	call   10004ed2 <SoundBlaster16::beginPlayback()+0xa6>	10004ed2: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004ed6:	83 c4 0c             	add    esp,0xc
10004ed9:	e9 c7 00 00 00       	jmp    10004fa5 <SoundBlaster16::beginPlayback()+0x179>
10004ede:	83 ff 02             	cmp    edi,0x2
10004ee1:	74 05                	je     10004ee8 <SoundBlaster16::beginPlayback()+0xbc>
10004ee3:	bf 01 00 00 00       	mov    edi,0x1
10004ee8:	0f af bb e0 01 00 00 	imul   edi,DWORD PTR [ebx+0x1e0]
10004eef:	b8 c0 bd f0 ff       	mov    eax,0xfff0bdc0
10004ef4:	99                   	cdq    
10004ef5:	f7 ff                	idiv   edi
10004ef7:	89 04 24             	mov    DWORD PTR [esp],eax
10004efa:	6a 40                	push   0x40
10004efc:	68 2c 02 00 00       	push   0x22c
10004f01:	53                   	push   ebx
10004f02:	e8 fc ff ff ff       	call   10004f03 <SoundBlaster16::beginPlayback()+0xd7>	10004f03: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f07:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
10004f0c:	50                   	push   eax
10004f0d:	68 2c 02 00 00       	push   0x22c
10004f12:	53                   	push   ebx
10004f13:	e8 fc ff ff ff       	call   10004f14 <SoundBlaster16::beginPlayback()+0xe8>	10004f14: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f18:	83 c4 18             	add    esp,0x18
10004f1b:	31 c0                	xor    eax,eax
10004f1d:	83 bb dc 01 00 00 10 	cmp    DWORD PTR [ebx+0x1dc],0x10
10004f24:	0f 95 c0             	setne  al
10004f27:	48                   	dec    eax
10004f28:	83 e0 f0             	and    eax,0xfffffff0
10004f2b:	05 c0 00 00 00       	add    eax,0xc0
10004f30:	50                   	push   eax
10004f31:	68 2c 02 00 00       	push   0x22c
10004f36:	53                   	push   ebx
10004f37:	e8 fc ff ff ff       	call   10004f38 <SoundBlaster16::beginPlayback()+0x10c>	10004f38: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f3c:	56                   	push   esi
10004f3d:	68 2c 02 00 00       	push   0x22c
10004f42:	53                   	push   ebx
10004f43:	e8 fc ff ff ff       	call   10004f44 <SoundBlaster16::beginPlayback()+0x118>	10004f44: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f48:	68 ff 00 00 00       	push   0xff
10004f4d:	68 2c 02 00 00       	push   0x22c
10004f52:	53                   	push   ebx
10004f53:	e8 fc ff ff ff       	call   10004f54 <SoundBlaster16::beginPlayback()+0x128>	10004f54: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f58:	83 c4 24             	add    esp,0x24
10004f5b:	6a 1f                	push   0x1f
10004f5d:	68 2c 02 00 00       	push   0x22c
10004f62:	53                   	push   ebx
10004f63:	e8 fc ff ff ff       	call   10004f64 <SoundBlaster16::beginPlayback()+0x138>	10004f64: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f68:	6a 48                	push   0x48
10004f6a:	68 2c 02 00 00       	push   0x22c
10004f6f:	53                   	push   ebx
10004f70:	e8 fc ff ff ff       	call   10004f71 <SoundBlaster16::beginPlayback()+0x145>	10004f71: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f75:	68 ff 00 00 00       	push   0xff
10004f7a:	68 2c 02 00 00       	push   0x22c
10004f7f:	53                   	push   ebx
10004f80:	e8 fc ff ff ff       	call   10004f81 <SoundBlaster16::beginPlayback()+0x155>	10004f81: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f85:	83 c4 24             	add    esp,0x24
10004f88:	6a 1f                	push   0x1f
10004f8a:	68 2c 02 00 00       	push   0x22c
10004f8f:	53                   	push   ebx
10004f90:	e8 fc ff ff ff       	call   10004f91 <SoundBlaster16::beginPlayback()+0x165>	10004f91: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f95:	6a 1c                	push   0x1c
10004f97:	68 2c 02 00 00       	push   0x22c
10004f9c:	53                   	push   ebx
10004f9d:	e8 fc ff ff ff       	call   10004f9e <SoundBlaster16::beginPlayback()+0x172>	10004f9e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004fa2:	83 c4 18             	add    esp,0x18
10004fa5:	58                   	pop    eax
10004fa6:	5b                   	pop    ebx
10004fa7:	5e                   	pop    esi
10004fa8:	5f                   	pop    edi
10004fa9:	c3                   	ret    

10004faa <SoundBlaster16::stopPlayback()>:
10004faa:	6a 00                	push   0x0
10004fac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10004fb0:	e8 fc ff ff ff       	call   10004fb1 <SoundBlaster16::stopPlayback()+0x7>	10004fb1: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10004fb5:	58                   	pop    eax
10004fb6:	5a                   	pop    edx
10004fb7:	c3                   	ret    

10004fb8 <SoundBlaster16::open(int, int, void*)>:
10004fb8:	31 c0                	xor    eax,eax
10004fba:	c3                   	ret    
10004fbb:	90                   	nop

10004fbc <SoundBlaster16::_open(int, int, void*)>:
10004fbc:	56                   	push   esi
10004fbd:	be 25 02 00 00       	mov    esi,0x225
10004fc2:	53                   	push   ebx
10004fc3:	83 ec 14             	sub    esp,0x14
10004fc6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10004fca:	68 80 00 00 00       	push   0x80
10004fcf:	68 24 02 00 00       	push   0x224
10004fd4:	53                   	push   ebx
10004fd5:	e8 fc ff ff ff       	call   10004fd6 <SoundBlaster16::_open(int, int, void*)+0x1a>	10004fd6: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004fda:	89 f2                	mov    edx,esi
10004fdc:	ec                   	in     al,dx
10004fdd:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
10004fe1:	68 80 00 00 00       	push   0x80
10004fe6:	68 24 02 00 00       	push   0x224
10004feb:	53                   	push   ebx
10004fec:	e8 fc ff ff ff       	call   10004fed <SoundBlaster16::_open(int, int, void*)+0x31>	10004fed: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004ff1:	83 c4 18             	add    esp,0x18
10004ff4:	31 c0                	xor    eax,eax
10004ff6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
10004ffb:	0f 95 c0             	setne  al
10004ffe:	40                   	inc    eax
10004fff:	50                   	push   eax
10005000:	68 25 02 00 00       	push   0x225
10005005:	53                   	push   ebx
10005006:	e8 fc ff ff ff       	call   10005007 <SoundBlaster16::_open(int, int, void*)+0x4b>	10005007: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000500b:	68 80 00 00 00       	push   0x80
10005010:	68 24 02 00 00       	push   0x224
10005015:	53                   	push   ebx
10005016:	e8 fc ff ff ff       	call   10005017 <SoundBlaster16::_open(int, int, void*)+0x5b>	10005017: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000501b:	89 f2                	mov    edx,esi
1000501d:	ec                   	in     al,dx
1000501e:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
10005022:	83 c4 18             	add    esp,0x18
10005025:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
10005029:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
1000502d:	75 51                	jne    10005080 <SoundBlaster16::_open(int, int, void*)+0xc4>
1000502f:	68 81 00 00 00       	push   0x81
10005034:	68 24 02 00 00       	push   0x224
10005039:	53                   	push   ebx
1000503a:	e8 fc ff ff ff       	call   1000503b <SoundBlaster16::_open(int, int, void*)+0x7f>	1000503b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000503f:	89 f2                	mov    edx,esi
10005041:	ec                   	in     al,dx
10005042:	83 e0 0a             	and    eax,0xa
10005045:	3c 01                	cmp    al,0x1
10005047:	19 c0                	sbb    eax,eax
10005049:	83 e0 62             	and    eax,0x62
1000504c:	40                   	inc    eax
1000504d:	89 04 24             	mov    DWORD PTR [esp],eax
10005050:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005052: R_386_32	isaDMAController
10005056:	e8 fc ff ff ff       	call   10005057 <SoundBlaster16::_open(int, int, void*)+0x9b>	10005057: R_386_PC32	DMA::tryLockChannel(int)
1000505b:	83 c4 10             	add    esp,0x10
1000505e:	89 83 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],eax
10005064:	85 c0                	test   eax,eax
10005066:	75 3a                	jne    100050a2 <SoundBlaster16::_open(int, int, void*)+0xe6>
10005068:	83 ec 0c             	sub    esp,0xc
1000506b:	68 00 00 00 00       	push   0x0	1000506c: R_386_32	nodma
10005070:	e8 fc ff ff ff       	call   10005071 <SoundBlaster16::_open(int, int, void*)+0xb5>	10005071: R_386_PC32	Dbg::kprintf(char const*, ...)
10005075:	83 c4 10             	add    esp,0x10
10005078:	83 c8 ff             	or     eax,0xffffffff
1000507b:	e9 6e 02 00 00       	jmp    100052ee <SoundBlaster16::_open(int, int, void*)+0x332>
10005080:	56                   	push   esi
10005081:	56                   	push   esi
10005082:	6a 01                	push   0x1
10005084:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005086: R_386_32	isaDMAController
1000508a:	e8 fc ff ff ff       	call   1000508b <SoundBlaster16::_open(int, int, void*)+0xcf>	1000508b: R_386_PC32	DMA::tryLockChannel(int)
1000508f:	83 c4 10             	add    esp,0x10
10005092:	89 83 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],eax
10005098:	85 c0                	test   eax,eax
1000509a:	75 06                	jne    100050a2 <SoundBlaster16::_open(int, int, void*)+0xe6>
1000509c:	51                   	push   ecx
1000509d:	51                   	push   ecx
1000509e:	6a 03                	push   0x3
100050a0:	eb ae                	jmp    10005050 <SoundBlaster16::_open(int, int, void*)+0x94>
100050a2:	83 ec 0c             	sub    esp,0xc
100050a5:	68 5e 6a 00 10       	push   0x10006a5e	100050a6: R_386_32	.text
100050aa:	e8 fc ff ff ff       	call   100050ab <SoundBlaster16::_open(int, int, void*)+0xef>	100050ab: R_386_PC32	Dbg::kprintf(char const*, ...)
100050af:	58                   	pop    eax
100050b0:	5a                   	pop    edx
100050b1:	6a 05                	push   0x5
100050b3:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100050b5: R_386_32	isaDMAController
100050b9:	e8 fc ff ff ff       	call   100050ba <SoundBlaster16::_open(int, int, void*)+0xfe>	100050ba: R_386_PC32	DMA::tryLockChannel(int)
100050be:	83 c4 10             	add    esp,0x10
100050c1:	89 83 ec 01 00 00    	mov    DWORD PTR [ebx+0x1ec],eax
100050c7:	85 c0                	test   eax,eax
100050c9:	75 10                	jne    100050db <SoundBlaster16::_open(int, int, void*)+0x11f>
100050cb:	83 ec 0c             	sub    esp,0xc
100050ce:	68 70 6a 00 10       	push   0x10006a70	100050cf: R_386_32	.text
100050d3:	e8 fc ff ff ff       	call   100050d4 <SoundBlaster16::_open(int, int, void*)+0x118>	100050d4: R_386_PC32	Krnl::panic(char const*)
100050d8:	83 c4 10             	add    esp,0x10
100050db:	50                   	push   eax
100050dc:	50                   	push   eax
100050dd:	68 00 20 00 00       	push   0x2000
100050e2:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
100050e8:	e8 fc ff ff ff       	call   100050e9 <SoundBlaster16::_open(int, int, void*)+0x12d>	100050e9: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
100050ed:	58                   	pop    eax
100050ee:	5a                   	pop    edx
100050ef:	6a 59                	push   0x59
100050f1:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
100050f7:	e8 fc ff ff ff       	call   100050f8 <SoundBlaster16::_open(int, int, void*)+0x13c>	100050f8: R_386_PC32	DMAChannel::setMode(unsigned char)
100050fc:	59                   	pop    ecx
100050fd:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
10005103:	e8 fc ff ff ff       	call   10005104 <SoundBlaster16::_open(int, int, void*)+0x148>	10005104: R_386_PC32	DMAChannel::start()
10005108:	5e                   	pop    esi
10005109:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
1000510f:	e8 fc ff ff ff       	call   10005110 <SoundBlaster16::_open(int, int, void*)+0x154>	10005110: R_386_PC32	DMAChannel::getAddress()
10005114:	89 83 f4 01 00 00    	mov    DWORD PTR [ebx+0x1f4],eax
1000511a:	c7 04 24 89 6a 00 10 	mov    DWORD PTR [esp],0x10006a89	1000511d: R_386_32	.text
10005121:	e8 fc ff ff ff       	call   10005122 <SoundBlaster16::_open(int, int, void*)+0x166>	10005122: R_386_PC32	Dbg::kprintf(char const*, ...)
10005126:	58                   	pop    eax
10005127:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
1000512d:	e8 fc ff ff ff       	call   1000512e <SoundBlaster16::_open(int, int, void*)+0x172>	1000512e: R_386_PC32	DMAChannel::getAddress()
10005132:	5a                   	pop    edx
10005133:	59                   	pop    ecx
10005134:	50                   	push   eax
10005135:	68 9f 6a 00 10       	push   0x10006a9f	10005136: R_386_32	.text
1000513a:	e8 fc ff ff ff       	call   1000513b <SoundBlaster16::_open(int, int, void*)+0x17f>	1000513b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000513f:	5e                   	pop    esi
10005140:	58                   	pop    eax
10005141:	ff b3 f4 01 00 00    	push   DWORD PTR [ebx+0x1f4]
10005147:	68 9f 6a 00 10       	push   0x10006a9f	10005148: R_386_32	.text
1000514c:	e8 fc ff ff ff       	call   1000514d <SoundBlaster16::_open(int, int, void*)+0x191>	1000514d: R_386_PC32	Dbg::kprintf(char const*, ...)
10005151:	58                   	pop    eax
10005152:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
10005158:	e8 fc ff ff ff       	call   10005159 <SoundBlaster16::_open(int, int, void*)+0x19d>	10005159: R_386_PC32	DMAChannel::getChannelNum()
1000515d:	5a                   	pop    edx
1000515e:	59                   	pop    ecx
1000515f:	50                   	push   eax
10005160:	68 d0 6a 00 10       	push   0x10006ad0	10005161: R_386_32	.text
10005165:	e8 fc ff ff ff       	call   10005166 <SoundBlaster16::_open(int, int, void*)+0x1aa>	10005166: R_386_PC32	Dbg::kprintf(char const*, ...)
1000516a:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000516d:	e8 fc ff ff ff       	call   1000516e <SoundBlaster16::_open(int, int, void*)+0x1b2>	1000516e: R_386_PC32	SoundBlaster16::resetDSP()
10005172:	5e                   	pop    esi
10005173:	58                   	pop    eax
10005174:	6a 01                	push   0x1
10005176:	53                   	push   ebx
10005177:	e8 fc ff ff ff       	call   10005178 <SoundBlaster16::_open(int, int, void*)+0x1bc>	10005178: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
1000517c:	83 c4 10             	add    esp,0x10
1000517f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
10005183:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
10005187:	75 6f                	jne    100051f8 <SoundBlaster16::_open(int, int, void*)+0x23c>
10005189:	50                   	push   eax
1000518a:	68 80 00 00 00       	push   0x80
1000518f:	68 24 02 00 00       	push   0x224
10005194:	53                   	push   ebx
10005195:	e8 fc ff ff ff       	call   10005196 <SoundBlaster16::_open(int, int, void*)+0x1da>	10005196: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000519a:	ba 25 02 00 00       	mov    edx,0x225
1000519f:	ec                   	in     al,dx
100051a0:	83 c4 10             	add    esp,0x10
100051a3:	3c 01                	cmp    al,0x1
100051a5:	75 0f                	jne    100051b6 <SoundBlaster16::_open(int, int, void*)+0x1fa>
100051a7:	83 ec 0c             	sub    esp,0xc
100051aa:	53                   	push   ebx
100051ab:	6a 01                	push   0x1
100051ad:	68 00 00 00 00       	push   0x0	100051ae: R_386_32	sb16Handler(regs*, void*)
100051b2:	6a 02                	push   0x2
100051b4:	eb 6f                	jmp    10005225 <SoundBlaster16::_open(int, int, void*)+0x269>
100051b6:	3c 02                	cmp    al,0x2
100051b8:	75 06                	jne    100051c0 <SoundBlaster16::_open(int, int, void*)+0x204>
100051ba:	83 ec 0c             	sub    esp,0xc
100051bd:	53                   	push   ebx
100051be:	eb 5c                	jmp    1000521c <SoundBlaster16::_open(int, int, void*)+0x260>
100051c0:	3c 04                	cmp    al,0x4
100051c2:	75 0f                	jne    100051d3 <SoundBlaster16::_open(int, int, void*)+0x217>
100051c4:	83 ec 0c             	sub    esp,0xc
100051c7:	53                   	push   ebx
100051c8:	6a 01                	push   0x1
100051ca:	68 00 00 00 00       	push   0x0	100051cb: R_386_32	sb16Handler(regs*, void*)
100051cf:	6a 07                	push   0x7
100051d1:	eb 52                	jmp    10005225 <SoundBlaster16::_open(int, int, void*)+0x269>
100051d3:	3c 08                	cmp    al,0x8
100051d5:	75 0f                	jne    100051e6 <SoundBlaster16::_open(int, int, void*)+0x22a>
100051d7:	83 ec 0c             	sub    esp,0xc
100051da:	53                   	push   ebx
100051db:	6a 01                	push   0x1
100051dd:	68 00 00 00 00       	push   0x0	100051de: R_386_32	sb16Handler(regs*, void*)
100051e2:	6a 0a                	push   0xa
100051e4:	eb 3f                	jmp    10005225 <SoundBlaster16::_open(int, int, void*)+0x269>
100051e6:	83 ec 0c             	sub    esp,0xc
100051e9:	68 00 00 00 00       	push   0x0	100051ea: R_386_32	noirq
100051ee:	e8 fc ff ff ff       	call   100051ef <SoundBlaster16::_open(int, int, void*)+0x233>	100051ef: R_386_PC32	Krnl::panic(char const*)
100051f3:	83 c4 10             	add    esp,0x10
100051f6:	eb 36                	jmp    1000522e <SoundBlaster16::_open(int, int, void*)+0x272>
100051f8:	56                   	push   esi
100051f9:	68 80 00 00 00       	push   0x80
100051fe:	68 24 02 00 00       	push   0x224
10005203:	53                   	push   ebx
10005204:	e8 fc ff ff ff       	call   10005205 <SoundBlaster16::_open(int, int, void*)+0x249>	10005205: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005209:	83 c4 0c             	add    esp,0xc
1000520c:	6a 02                	push   0x2
1000520e:	68 25 02 00 00       	push   0x225
10005213:	53                   	push   ebx
10005214:	e8 fc ff ff ff       	call   10005215 <SoundBlaster16::_open(int, int, void*)+0x259>	10005215: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005219:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000521c:	6a 01                	push   0x1
1000521e:	68 00 00 00 00       	push   0x0	1000521f: R_386_32	sb16Handler(regs*, void*)
10005223:	6a 05                	push   0x5
10005225:	53                   	push   ebx
10005226:	e8 fc ff ff ff       	call   10005227 <SoundBlaster16::_open(int, int, void*)+0x26b>	10005227: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
1000522b:	83 c4 20             	add    esp,0x20
1000522e:	56                   	push   esi
1000522f:	68 81 00 00 00       	push   0x81
10005234:	68 24 02 00 00       	push   0x224
10005239:	53                   	push   ebx
1000523a:	e8 fc ff ff ff       	call   1000523b <SoundBlaster16::_open(int, int, void*)+0x27f>	1000523b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000523f:	ba 25 02 00 00       	mov    edx,0x225
10005244:	ec                   	in     al,dx
10005245:	89 c6                	mov    esi,eax
10005247:	58                   	pop    eax
10005248:	89 f0                	mov    eax,esi
1000524a:	5a                   	pop    edx
1000524b:	0f b6 c0             	movzx  eax,al
1000524e:	50                   	push   eax
1000524f:	68 02 6b 00 10       	push   0x10006b02	10005250: R_386_32	.text
10005254:	e8 fc ff ff ff       	call   10005255 <SoundBlaster16::_open(int, int, void*)+0x299>	10005255: R_386_PC32	Dbg::kprintf(char const*, ...)
10005259:	83 c4 0c             	add    esp,0xc
1000525c:	68 81 00 00 00       	push   0x81
10005261:	68 24 02 00 00       	push   0x224
10005266:	53                   	push   ebx
10005267:	e8 fc ff ff ff       	call   10005268 <SoundBlaster16::_open(int, int, void*)+0x2ac>	10005268: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000526c:	59                   	pop    ecx
1000526d:	ff b3 e8 01 00 00    	push   DWORD PTR [ebx+0x1e8]
10005273:	e8 fc ff ff ff       	call   10005274 <SoundBlaster16::_open(int, int, void*)+0x2b8>	10005274: R_386_PC32	DMAChannel::getChannelNum()
10005278:	83 c4 10             	add    esp,0x10
1000527b:	48                   	dec    eax
1000527c:	75 0c                	jne    1000528a <SoundBlaster16::_open(int, int, void*)+0x2ce>
1000527e:	81 e6 f0 00 00 00    	and    esi,0xf0
10005284:	51                   	push   ecx
10005285:	83 ce 02             	or     esi,0x2
10005288:	eb 20                	jmp    100052aa <SoundBlaster16::_open(int, int, void*)+0x2ee>
1000528a:	83 ec 0c             	sub    esp,0xc
1000528d:	ff b3 e8 01 00 00    	push   DWORD PTR [ebx+0x1e8]
10005293:	e8 fc ff ff ff       	call   10005294 <SoundBlaster16::_open(int, int, void*)+0x2d8>	10005294: R_386_PC32	DMAChannel::getChannelNum()
10005298:	83 c4 10             	add    esp,0x10
1000529b:	83 f8 03             	cmp    eax,0x3
1000529e:	75 18                	jne    100052b8 <SoundBlaster16::_open(int, int, void*)+0x2fc>
100052a0:	81 e6 f0 00 00 00    	and    esi,0xf0
100052a6:	52                   	push   edx
100052a7:	83 ce 08             	or     esi,0x8
100052aa:	56                   	push   esi
100052ab:	68 25 02 00 00       	push   0x225
100052b0:	53                   	push   ebx
100052b1:	e8 fc ff ff ff       	call   100052b2 <SoundBlaster16::_open(int, int, void*)+0x2f6>	100052b2: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100052b6:	eb 0d                	jmp    100052c5 <SoundBlaster16::_open(int, int, void*)+0x309>
100052b8:	83 ec 0c             	sub    esp,0xc
100052bb:	68 00 00 00 00       	push   0x0	100052bc: R_386_32	baddma
100052c0:	e8 fc ff ff ff       	call   100052c1 <SoundBlaster16::_open(int, int, void*)+0x305>	100052c1: R_386_PC32	Krnl::panic(char const*)
100052c5:	83 c4 10             	add    esp,0x10
100052c8:	50                   	push   eax
100052c9:	6a 22                	push   0x22
100052cb:	68 24 02 00 00       	push   0x224
100052d0:	53                   	push   ebx
100052d1:	e8 fc ff ff ff       	call   100052d2 <SoundBlaster16::_open(int, int, void*)+0x316>	100052d2: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100052d6:	83 c4 0c             	add    esp,0xc
100052d9:	68 ff 00 00 00       	push   0xff
100052de:	68 24 02 00 00       	push   0x224
100052e3:	53                   	push   ebx
100052e4:	e8 fc ff ff ff       	call   100052e5 <SoundBlaster16::_open(int, int, void*)+0x329>	100052e5: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100052e9:	83 c4 10             	add    esp,0x10
100052ec:	31 c0                	xor    eax,eax
100052ee:	83 c4 14             	add    esp,0x14
100052f1:	5b                   	pop    ebx
100052f2:	5e                   	pop    esi
100052f3:	c3                   	ret    

100052f4 <SoundBlaster16::onInterrupt()>:
100052f4:	57                   	push   edi
100052f5:	56                   	push   esi
100052f6:	53                   	push   ebx
100052f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100052fb:	8b bb dc 01 00 00    	mov    edi,DWORD PTR [ebx+0x1dc]
10005301:	83 ff 10             	cmp    edi,0x10
10005304:	0f 85 e8 00 00 00    	jne    100053f2 <SoundBlaster16::onInterrupt()+0xfe>
1000530a:	83 ec 0c             	sub    esp,0xc
1000530d:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
10005313:	e8 fc ff ff ff       	call   10005314 <SoundBlaster16::onInterrupt()+0x20>	10005314: R_386_PC32	DMAChannel::getAddress()
10005318:	83 c4 0c             	add    esp,0xc
1000531b:	50                   	push   eax
1000531c:	ff b3 f4 01 00 00    	push   DWORD PTR [ebx+0x1f4]
10005322:	68 25 6b 00 10       	push   0x10006b25	10005323: R_386_32	.text
10005327:	e8 fc ff ff ff       	call   10005328 <SoundBlaster16::onInterrupt()+0x34>	10005328: R_386_PC32	Dbg::kprintf(char const*, ...)
1000532c:	80 3d 1f 6e 00 10 01 	cmp    BYTE PTR ds:0x10006e1f,0x1	1000532e: R_386_32	.data
10005333:	5e                   	pop    esi
10005334:	58                   	pop    eax
10005335:	19 c0                	sbb    eax,eax
10005337:	25 00 20 00 00       	and    eax,0x2000
1000533c:	03 83 f4 01 00 00    	add    eax,DWORD PTR [ebx+0x1f4]
10005342:	89 c6                	mov    esi,eax
10005344:	50                   	push   eax
10005345:	68 4f 6b 00 10       	push   0x10006b4f	10005346: R_386_32	.text
1000534a:	e8 fc ff ff ff       	call   1000534b <SoundBlaster16::onInterrupt()+0x57>	1000534b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000534f:	83 c4 0c             	add    esp,0xc
10005352:	56                   	push   esi
10005353:	68 00 10 00 00       	push   0x1000
10005358:	53                   	push   ebx
10005359:	e8 fc ff ff ff       	call   1000535a <SoundBlaster16::onInterrupt()+0x66>	1000535a: R_386_PC32	SoundCard::getSamples16(int, short*)
1000535e:	83 c4 10             	add    esp,0x10
10005361:	89 c6                	mov    esi,eax
10005363:	85 c0                	test   eax,eax
10005365:	75 19                	jne    10005380 <SoundBlaster16::onInterrupt()+0x8c>
10005367:	83 ec 0c             	sub    esp,0xc
1000536a:	68 66 6b 00 10       	push   0x10006b66	1000536b: R_386_32	.text
1000536f:	e8 fc ff ff ff       	call   10005370 <SoundBlaster16::onInterrupt()+0x7c>	10005370: R_386_PC32	Dbg::kprintf(char const*, ...)
10005374:	5a                   	pop    edx
10005375:	59                   	pop    ecx
10005376:	6a 00                	push   0x0
10005378:	53                   	push   ebx
10005379:	e8 fc ff ff ff       	call   1000537a <SoundBlaster16::onInterrupt()+0x86>	1000537a: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
1000537e:	eb 6f                	jmp    100053ef <SoundBlaster16::onInterrupt()+0xfb>
10005380:	3d ff 0f 00 00       	cmp    eax,0xfff
10005385:	7f 6b                	jg     100053f2 <SoundBlaster16::onInterrupt()+0xfe>
10005387:	83 ec 0c             	sub    esp,0xc
1000538a:	68 76 6b 00 10       	push   0x10006b76	1000538b: R_386_32	.text
1000538f:	e8 fc ff ff ff       	call   10005390 <SoundBlaster16::onInterrupt()+0x9c>	10005390: R_386_PC32	Dbg::kprintf(char const*, ...)
10005394:	83 c4 0c             	add    esp,0xc
10005397:	68 b0 00 00 00       	push   0xb0
1000539c:	68 2c 02 00 00       	push   0x22c
100053a1:	53                   	push   ebx
100053a2:	e8 fc ff ff ff       	call   100053a3 <SoundBlaster16::onInterrupt()+0xaf>	100053a3: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100053a7:	83 c4 10             	add    esp,0x10
100053aa:	83 bb e4 01 00 00 02 	cmp    DWORD PTR [ebx+0x1e4],0x2
100053b1:	75 05                	jne    100053b8 <SoundBlaster16::onInterrupt()+0xc4>
100053b3:	bf 30 00 00 00       	mov    edi,0x30
100053b8:	50                   	push   eax
100053b9:	57                   	push   edi
100053ba:	68 2c 02 00 00       	push   0x22c
100053bf:	53                   	push   ebx
100053c0:	e8 fc ff ff ff       	call   100053c1 <SoundBlaster16::onInterrupt()+0xcd>	100053c1: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100053c5:	83 c4 0c             	add    esp,0xc
100053c8:	8d 46 ff             	lea    eax,[esi-0x1]
100053cb:	0f b6 c0             	movzx  eax,al
100053ce:	50                   	push   eax
100053cf:	68 2c 02 00 00       	push   0x22c
100053d4:	53                   	push   ebx
100053d5:	e8 fc ff ff ff       	call   100053d6 <SoundBlaster16::onInterrupt()+0xe2>	100053d6: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100053da:	83 c4 0c             	add    esp,0xc
100053dd:	8d 46 ff             	lea    eax,[esi-0x1]
100053e0:	0f b6 f4             	movzx  esi,ah
100053e3:	56                   	push   esi
100053e4:	68 2c 02 00 00       	push   0x22c
100053e9:	53                   	push   ebx
100053ea:	e8 fc ff ff ff       	call   100053eb <SoundBlaster16::onInterrupt()+0xf7>	100053eb: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100053ef:	83 c4 10             	add    esp,0x10
100053f2:	5b                   	pop    ebx
100053f3:	80 35 1f 6e 00 10 01 	xor    BYTE PTR ds:0x10006e1f,0x1	100053f5: R_386_32	.data
100053fa:	5e                   	pop    esi
100053fb:	5f                   	pop    edi
100053fc:	c3                   	ret    
100053fd:	90                   	nop

100053fe <SoundBlaster16::close(int, int, void*)>:
100053fe:	83 ec 0c             	sub    esp,0xc
10005401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10005405:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
1000540b:	85 c0                	test   eax,eax
1000540d:	74 11                	je     10005420 <SoundBlaster16::close(int, int, void*)+0x22>
1000540f:	52                   	push   edx
10005410:	52                   	push   edx
10005411:	50                   	push   eax
10005412:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005414: R_386_32	isaDMAController
10005418:	e8 fc ff ff ff       	call   10005419 <SoundBlaster16::close(int, int, void*)+0x1b>	10005419: R_386_PC32	DMA::unlockChannel(DMAChannel*)
1000541d:	83 c4 10             	add    esp,0x10
10005420:	31 c0                	xor    eax,eax
10005422:	83 c4 0c             	add    esp,0xc
10005425:	c3                   	ret    

10005426 <ISA::~ISA()>:
10005426:	55                   	push   ebp
10005427:	89 e5                	mov    ebp,esp
10005429:	83 ec 08             	sub    esp,0x8
1000542c:	ba 08 00 00 00       	mov    edx,0x8	1000542d: R_386_32	vtable for ISA
10005431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005434:	89 10                	mov    DWORD PTR [eax],edx
10005436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005439:	83 ec 0c             	sub    esp,0xc
1000543c:	50                   	push   eax
1000543d:	e8 fc ff ff ff       	call   1000543e <ISA::~ISA()+0x18>	1000543e: R_386_PC32	Bus::~Bus()
10005442:	83 c4 10             	add    esp,0x10
10005445:	90                   	nop
10005446:	c9                   	leave  
10005447:	c3                   	ret    

10005448 <ISA::~ISA()>:
10005448:	55                   	push   ebp
10005449:	89 e5                	mov    ebp,esp
1000544b:	83 ec 08             	sub    esp,0x8
1000544e:	83 ec 0c             	sub    esp,0xc
10005451:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005454:	e8 fc ff ff ff       	call   10005455 <ISA::~ISA()+0xd>	10005455: R_386_PC32	ISA::~ISA()
10005459:	83 c4 10             	add    esp,0x10
1000545c:	83 ec 08             	sub    esp,0x8
1000545f:	68 58 01 00 00       	push   0x158
10005464:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005467:	e8 fc ff ff ff       	call   10005468 <ISA::~ISA()+0x20>	10005468: R_386_PC32	operator delete(void*, unsigned long)
1000546c:	83 c4 10             	add    esp,0x10
1000546f:	c9                   	leave  
10005470:	c3                   	ret    
10005471:	90                   	nop

10005472 <Floppy::~Floppy()>:
10005472:	55                   	push   ebp
10005473:	89 e5                	mov    ebp,esp
10005475:	83 ec 08             	sub    esp,0x8
10005478:	ba 08 00 00 00       	mov    edx,0x8	10005479: R_386_32	vtable for Floppy
1000547d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005480:	89 10                	mov    DWORD PTR [eax],edx
10005482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005485:	83 ec 0c             	sub    esp,0xc
10005488:	50                   	push   eax
10005489:	e8 fc ff ff ff       	call   1000548a <Floppy::~Floppy()+0x18>	1000548a: R_386_PC32	HardDiskController::~HardDiskController()
1000548e:	83 c4 10             	add    esp,0x10
10005491:	90                   	nop
10005492:	c9                   	leave  
10005493:	c3                   	ret    

10005494 <Floppy::~Floppy()>:
10005494:	55                   	push   ebp
10005495:	89 e5                	mov    ebp,esp
10005497:	83 ec 08             	sub    esp,0x8
1000549a:	83 ec 0c             	sub    esp,0xc
1000549d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100054a0:	e8 fc ff ff ff       	call   100054a1 <Floppy::~Floppy()+0xd>	100054a1: R_386_PC32	Floppy::~Floppy()
100054a5:	83 c4 10             	add    esp,0x10
100054a8:	83 ec 08             	sub    esp,0x8
100054ab:	68 b8 01 00 00       	push   0x1b8
100054b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100054b3:	e8 fc ff ff ff       	call   100054b4 <Floppy::~Floppy()+0x20>	100054b4: R_386_PC32	operator delete(void*, unsigned long)
100054b8:	83 c4 10             	add    esp,0x10
100054bb:	c9                   	leave  
100054bc:	c3                   	ret    
100054bd:	90                   	nop

100054be <JoystickHost::JoystickHost()>:
100054be:	55                   	push   ebp
100054bf:	89 e5                	mov    ebp,esp
100054c1:	ba 08 00 00 00       	mov    edx,0x8	100054c2: R_386_32	vtable for JoystickHost
100054c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100054c9:	89 10                	mov    DWORD PTR [eax],edx
100054cb:	90                   	nop
100054cc:	5d                   	pop    ebp
100054cd:	c3                   	ret    

100054ce <DMA::~DMA()>:
100054ce:	55                   	push   ebp
100054cf:	89 e5                	mov    ebp,esp
100054d1:	83 ec 08             	sub    esp,0x8
100054d4:	ba 08 00 00 00       	mov    edx,0x8	100054d5: R_386_32	vtable for DMA
100054d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100054dc:	89 10                	mov    DWORD PTR [eax],edx
100054de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100054e1:	83 ec 0c             	sub    esp,0xc
100054e4:	50                   	push   eax
100054e5:	e8 fc ff ff ff       	call   100054e6 <DMA::~DMA()+0x18>	100054e6: R_386_PC32	Device::~Device()
100054ea:	83 c4 10             	add    esp,0x10
100054ed:	90                   	nop
100054ee:	c9                   	leave  
100054ef:	c3                   	ret    

100054f0 <DMA::~DMA()>:
100054f0:	55                   	push   ebp
100054f1:	89 e5                	mov    ebp,esp
100054f3:	83 ec 08             	sub    esp,0x8
100054f6:	83 ec 0c             	sub    esp,0xc
100054f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100054fc:	e8 fc ff ff ff       	call   100054fd <DMA::~DMA()+0xd>	100054fd: R_386_PC32	DMA::~DMA()
10005501:	83 c4 10             	add    esp,0x10
10005504:	83 ec 08             	sub    esp,0x8
10005507:	68 5c 01 00 00       	push   0x15c
1000550c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000550f:	e8 fc ff ff ff       	call   10005510 <DMA::~DMA()+0x20>	10005510: R_386_PC32	operator delete(void*, unsigned long)
10005514:	83 c4 10             	add    esp,0x10
10005517:	c9                   	leave  
10005518:	c3                   	ret    
10005519:	90                   	nop

1000551a <PS2::~PS2()>:
1000551a:	55                   	push   ebp
1000551b:	89 e5                	mov    ebp,esp
1000551d:	83 ec 08             	sub    esp,0x8
10005520:	ba 08 00 00 00       	mov    edx,0x8	10005521: R_386_32	vtable for PS2
10005525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005528:	89 10                	mov    DWORD PTR [eax],edx
1000552a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000552d:	83 ec 0c             	sub    esp,0xc
10005530:	50                   	push   eax
10005531:	e8 fc ff ff ff       	call   10005532 <PS2::~PS2()+0x18>	10005532: R_386_PC32	Bus::~Bus()
10005536:	83 c4 10             	add    esp,0x10
10005539:	90                   	nop
1000553a:	c9                   	leave  
1000553b:	c3                   	ret    

1000553c <PS2::~PS2()>:
1000553c:	55                   	push   ebp
1000553d:	89 e5                	mov    ebp,esp
1000553f:	83 ec 08             	sub    esp,0x8
10005542:	83 ec 0c             	sub    esp,0xc
10005545:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005548:	e8 fc ff ff ff       	call   10005549 <PS2::~PS2()+0xd>	10005549: R_386_PC32	PS2::~PS2()
1000554d:	83 c4 10             	add    esp,0x10
10005550:	83 ec 08             	sub    esp,0x8
10005553:	68 60 01 00 00       	push   0x160
10005558:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000555b:	e8 fc ff ff ff       	call   1000555c <PS2::~PS2()+0x20>	1000555c: R_386_PC32	operator delete(void*, unsigned long)
10005560:	83 c4 10             	add    esp,0x10
10005563:	c9                   	leave  
10005564:	c3                   	ret    
10005565:	90                   	nop

10005566 <PS2Mouse::~PS2Mouse()>:
10005566:	55                   	push   ebp
10005567:	89 e5                	mov    ebp,esp
10005569:	83 ec 08             	sub    esp,0x8
1000556c:	ba 08 00 00 00       	mov    edx,0x8	1000556d: R_386_32	vtable for PS2Mouse
10005571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005574:	89 10                	mov    DWORD PTR [eax],edx
10005576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005579:	83 ec 0c             	sub    esp,0xc
1000557c:	50                   	push   eax
1000557d:	e8 fc ff ff ff       	call   1000557e <PS2Mouse::~PS2Mouse()+0x18>	1000557e: R_386_PC32	Mouse::~Mouse()
10005582:	83 c4 10             	add    esp,0x10
10005585:	90                   	nop
10005586:	c9                   	leave  
10005587:	c3                   	ret    

10005588 <PS2Mouse::~PS2Mouse()>:
10005588:	55                   	push   ebp
10005589:	89 e5                	mov    ebp,esp
1000558b:	83 ec 08             	sub    esp,0x8
1000558e:	83 ec 0c             	sub    esp,0xc
10005591:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005594:	e8 fc ff ff ff       	call   10005595 <PS2Mouse::~PS2Mouse()+0xd>	10005595: R_386_PC32	PS2Mouse::~PS2Mouse()
10005599:	83 c4 10             	add    esp,0x10
1000559c:	83 ec 08             	sub    esp,0x8
1000559f:	68 68 01 00 00       	push   0x168
100055a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100055a7:	e8 fc ff ff ff       	call   100055a8 <PS2Mouse::~PS2Mouse()+0x20>	100055a8: R_386_PC32	operator delete(void*, unsigned long)
100055ac:	83 c4 10             	add    esp,0x10
100055af:	c9                   	leave  
100055b0:	c3                   	ret    
100055b1:	90                   	nop

100055b2 <PS2Port::~PS2Port()>:
100055b2:	55                   	push   ebp
100055b3:	89 e5                	mov    ebp,esp
100055b5:	83 ec 08             	sub    esp,0x8
100055b8:	ba 08 00 00 00       	mov    edx,0x8	100055b9: R_386_32	vtable for PS2Port
100055bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100055c0:	89 10                	mov    DWORD PTR [eax],edx
100055c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100055c5:	83 ec 0c             	sub    esp,0xc
100055c8:	50                   	push   eax
100055c9:	e8 fc ff ff ff       	call   100055ca <PS2Port::~PS2Port()+0x18>	100055ca: R_386_PC32	Bus::~Bus()
100055ce:	83 c4 10             	add    esp,0x10
100055d1:	90                   	nop
100055d2:	c9                   	leave  
100055d3:	c3                   	ret    

100055d4 <PS2Port::~PS2Port()>:
100055d4:	55                   	push   ebp
100055d5:	89 e5                	mov    ebp,esp
100055d7:	83 ec 08             	sub    esp,0x8
100055da:	83 ec 0c             	sub    esp,0xc
100055dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100055e0:	e8 fc ff ff ff       	call   100055e1 <PS2Port::~PS2Port()+0xd>	100055e1: R_386_PC32	PS2Port::~PS2Port()
100055e5:	83 c4 10             	add    esp,0x10
100055e8:	83 ec 08             	sub    esp,0x8
100055eb:	68 60 01 00 00       	push   0x160
100055f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100055f3:	e8 fc ff ff ff       	call   100055f4 <PS2Port::~PS2Port()+0x20>	100055f4: R_386_PC32	operator delete(void*, unsigned long)
100055f8:	83 c4 10             	add    esp,0x10
100055fb:	c9                   	leave  
100055fc:	c3                   	ret    
100055fd:	90                   	nop

100055fe <SoundBlaster16::~SoundBlaster16()>:
100055fe:	55                   	push   ebp
100055ff:	89 e5                	mov    ebp,esp
10005601:	83 ec 08             	sub    esp,0x8
10005604:	ba 08 00 00 00       	mov    edx,0x8	10005605: R_386_32	vtable for SoundBlaster16
10005609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000560c:	89 10                	mov    DWORD PTR [eax],edx
1000560e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005611:	83 ec 0c             	sub    esp,0xc
10005614:	50                   	push   eax
10005615:	e8 fc ff ff ff       	call   10005616 <SoundBlaster16::~SoundBlaster16()+0x18>	10005616: R_386_PC32	SoundCard::~SoundCard()
1000561a:	83 c4 10             	add    esp,0x10
1000561d:	90                   	nop
1000561e:	c9                   	leave  
1000561f:	c3                   	ret    

10005620 <SoundBlaster16::~SoundBlaster16()>:
10005620:	55                   	push   ebp
10005621:	89 e5                	mov    ebp,esp
10005623:	83 ec 08             	sub    esp,0x8
10005626:	83 ec 0c             	sub    esp,0xc
10005629:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000562c:	e8 fc ff ff ff       	call   1000562d <SoundBlaster16::~SoundBlaster16()+0xd>	1000562d: R_386_PC32	SoundBlaster16::~SoundBlaster16()
10005631:	83 c4 10             	add    esp,0x10
10005634:	83 ec 08             	sub    esp,0x8
10005637:	68 fc 01 00 00       	push   0x1fc
1000563c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000563f:	e8 fc ff ff ff       	call   10005640 <SoundBlaster16::~SoundBlaster16()+0x20>	10005640: R_386_PC32	operator delete(void*, unsigned long)
10005644:	83 c4 10             	add    esp,0x10
10005647:	c9                   	leave  
10005648:	c3                   	ret    
10005649:	66 90                	xchg   ax,ax
1000564b:	90                   	nop

1000564c <PHYS_RAM_TABLE_SIZE>:
1000564c:	13 05 00 00                                         ....

10005650 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005650:	24 05 00 00                                         $...

10005654 <PHYS_RAM_TABLE>:
10005654:	00 06 00 00                                         ....

10005658 <PHYS_DMA_MEMORY_1>:
10005658:	00 00 01 00                                         ....

1000565c <PHYS_PHYS_PAGE_BITMAP>:
1000565c:	00 00 02 00                                         ....

10005660 <PHYS_VIRT_PAGE_BITMAP>:
10005660:	00 00 04 00                                         ....

10005664 <PHYS_DMA_MEMORY_2>:
10005664:	00 00 06 00                                         ....

10005668 <PHYS_ALLOCED_VIRT_PAGES>:
10005668:	00 00 10 00                                         ....

1000566c <PHYS_KRNL_PAGE_DIRECTORY>:
1000566c:	00 10 00 00                                         ....

10005670 <VIRT_KERNEL_BASE>:
10005670:	00 00 00 c0                                         ....

10005674 <VIRT_LOW_MEGS>:
10005674:	00 00 00 c2                                         ....

10005678 <VIRT_CPU_SPECIFIC>:
10005678:	00 00 40 c2                                         ..@.

1000567c <VIRT_RECURSIVE_SPOT_1>:
1000567c:	00 00 80 c2                                         ....

10005680 <VIRT_RECURSIVE_SPOT_2>:
10005680:	00 00 c0 c2                                         ....

10005684 <VIRT_DMA_MEMORY_1>:
10005684:	00 00 01 c2                                         ....

10005688 <SIZE_DMA_MEMORY_1>:
10005688:	00 00 01 00                                         ....

1000568c <VIRT_DMA_MEMORY_2>:
1000568c:	00 00 06 c2                                         ....

10005690 <SIZE_DMA_MEMORY_2>:
10005690:	00 00 02 00                                         ....

10005694 <VIRT_KRNL_PAGE_DIRECTORY>:
10005694:	00 10 00 c2                                         ....

10005698 <VIRT_PHYS_PAGE_BITMAP>:
10005698:	00 00 02 c2                                         ....

1000569c <SIZE_PHYS_PAGE_BITMAP>:
1000569c:	00 00 02 00                                         ....

100056a0 <VIRT_VIRT_PAGE_BITMAP>:
100056a0:	00 00 04 c2                                         ....

100056a4 <SIZE_VIRT_PAGE_BITMAP>:
100056a4:	00 80 00 00                                         ....

100056a8 <VIRT_RAM_TABLE>:
100056a8:	00 06 00 c2                                         ....

100056ac <VIRT_RAM_TABLE_SIZE>:
100056ac:	13 05 00 c2                                         ....

100056b0 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100056b0:	24 05 00 c2                                         $...

100056b4 <SIZE_APP_STACK_USER>:
100056b4:	00 00 18 00                                         ....

100056b8 <SIZE_APP_STACK_KRNL>:
100056b8:	00 00 08 00                                         ....

100056bc <SIZE_APP_STACK_TOTAL>:
100056bc:	00 00 20 00                                         .. .

100056c0 <VIRT_APP_DATA>:
100056c0:	00 00 00 10                                         ....

100056c4 <VIRT_APP_STACK_USER_TOP>:
100056c4:	00 00 00 02                                         ....

100056c8 <VIRT_APP_STACK_KRNL_TOP>:
100056c8:	00 00 e8 01                                         ....

100056cc <VIRT_HEAP_MIN>:
100056cc:	00 00 00 c8                                         ....

100056d0 <VIRT_HEAP_MAX>:
100056d0:	ff ff ff ef                                         ....

100056d4 <VIRT_SBRK_MIN>:
100056d4:	00 00 00 f0                                         ....

100056d8 <VIRT_SBRK_MAX>:
100056d8:	00 00 c0 ff                                         ....

100056dc <VIRT_ALLOCED_VIRT_PAGES>:
100056dc:	00 00 10 c2                                         ....

100056e0 <VIRT_ACPI_DRIVER>:
100056e0:	00 40 48 c2                                         .@H.

100056e4 <TERMINAL_KEYBUFFER_IN_SIZE>:
100056e4:	96 00 00 00                                         ....

100056e8 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100056e8:	2c 01 00 00 49 53 41 20 42 75 73 00 43 3a 2f 42     ,...ISA Bus.C:/B
100056f8:	61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 73 65 74     anana/System/set
10005708:	75 70 69 73 64 2e 6f 6e 65 00 66 90                 upisd.one.f.

10005714 <vtable for ISA>:
	...
	1000571c: R_386_32	ISA::~ISA()
	10005720: R_386_32	ISA::~ISA()
	10005724: R_386_32	ISA::open(int, int, void*)
	10005728: R_386_32	ISA::close(int, int, void*)
	1000572c: R_386_32	Device::hibernate()
	10005730: R_386_32	Device::wake()
	10005734: R_386_32	ISA::detect()
	10005738: R_386_32	Device::disableLegacy()
	1000573c: R_386_32	Device::powerSaving(PowerSavingLevel)

10005740 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005740:	96 00 00 00                                         ....

10005744 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005744:	2c 01 00 00                                         ,...

10005748 <PHYS_RAM_TABLE_SIZE>:
10005748:	13 05 00 00                                         ....

1000574c <PHYS_HIGHEST_UNUSED_ADDRESS>:
1000574c:	24 05 00 00                                         $...

10005750 <PHYS_RAM_TABLE>:
10005750:	00 06 00 00                                         ....

10005754 <PHYS_DMA_MEMORY_1>:
10005754:	00 00 01 00                                         ....

10005758 <PHYS_PHYS_PAGE_BITMAP>:
10005758:	00 00 02 00                                         ....

1000575c <PHYS_VIRT_PAGE_BITMAP>:
1000575c:	00 00 04 00                                         ....

10005760 <PHYS_DMA_MEMORY_2>:
10005760:	00 00 06 00                                         ....

10005764 <PHYS_ALLOCED_VIRT_PAGES>:
10005764:	00 00 10 00                                         ....

10005768 <PHYS_KRNL_PAGE_DIRECTORY>:
10005768:	00 10 00 00                                         ....

1000576c <VIRT_KERNEL_BASE>:
1000576c:	00 00 00 c0                                         ....

10005770 <VIRT_LOW_MEGS>:
10005770:	00 00 00 c2                                         ....

10005774 <VIRT_CPU_SPECIFIC>:
10005774:	00 00 40 c2                                         ..@.

10005778 <VIRT_RECURSIVE_SPOT_1>:
10005778:	00 00 80 c2                                         ....

1000577c <VIRT_RECURSIVE_SPOT_2>:
1000577c:	00 00 c0 c2                                         ....

10005780 <VIRT_DMA_MEMORY_1>:
10005780:	00 00 01 c2                                         ....

10005784 <SIZE_DMA_MEMORY_1>:
10005784:	00 00 01 00                                         ....

10005788 <VIRT_DMA_MEMORY_2>:
10005788:	00 00 06 c2                                         ....

1000578c <SIZE_DMA_MEMORY_2>:
1000578c:	00 00 02 00                                         ....

10005790 <VIRT_KRNL_PAGE_DIRECTORY>:
10005790:	00 10 00 c2                                         ....

10005794 <VIRT_PHYS_PAGE_BITMAP>:
10005794:	00 00 02 c2                                         ....

10005798 <SIZE_PHYS_PAGE_BITMAP>:
10005798:	00 00 02 00                                         ....

1000579c <VIRT_VIRT_PAGE_BITMAP>:
1000579c:	00 00 04 c2                                         ....

100057a0 <SIZE_VIRT_PAGE_BITMAP>:
100057a0:	00 80 00 00                                         ....

100057a4 <VIRT_RAM_TABLE>:
100057a4:	00 06 00 c2                                         ....

100057a8 <VIRT_RAM_TABLE_SIZE>:
100057a8:	13 05 00 c2                                         ....

100057ac <VIRT_HIGHEST_UNUSED_ADDRESS>:
100057ac:	24 05 00 c2                                         $...

100057b0 <SIZE_APP_STACK_USER>:
100057b0:	00 00 18 00                                         ....

100057b4 <SIZE_APP_STACK_KRNL>:
100057b4:	00 00 08 00                                         ....

100057b8 <SIZE_APP_STACK_TOTAL>:
100057b8:	00 00 20 00                                         .. .

100057bc <VIRT_APP_DATA>:
100057bc:	00 00 00 10                                         ....

100057c0 <VIRT_APP_STACK_USER_TOP>:
100057c0:	00 00 00 02                                         ....

100057c4 <VIRT_APP_STACK_KRNL_TOP>:
100057c4:	00 00 e8 01                                         ....

100057c8 <VIRT_HEAP_MIN>:
100057c8:	00 00 00 c8                                         ....

100057cc <VIRT_HEAP_MAX>:
100057cc:	ff ff ff ef                                         ....

100057d0 <VIRT_SBRK_MIN>:
100057d0:	00 00 00 f0                                         ....

100057d4 <VIRT_SBRK_MAX>:
100057d4:	00 00 c0 ff                                         ....

100057d8 <VIRT_ALLOCED_VIRT_PAGES>:
100057d8:	00 00 10 c2                                         ....

100057dc <VIRT_ACPI_DRIVER>:
100057dc:	00 40 48 c2 54 75 72 6e 69 6e 67 20 6f 66 66 20     .@H.Turning off 
100057ec:	74 68 65 20 66 6c 6f 70 70 79 20 6d 6f 74 6f 72     the floppy motor
100057fc:	2e 2e 2e 0a 00 46 6c 6f 70 70 79 20 44 69 73 6b     .....Floppy Disk
1000580c:	20 43 6f 6e 74 72 6f 6c 6c 65 72 00 50 52 45 56      Controller.PREV
1000581c:	49 4f 55 53 20 43 4f 4d 4d 41 4e 44 20 46 41 49     IOUS COMMAND FAI
1000582c:	4c 45 44 2c 20 43 41 55 47 48 54 20 42 59 20 77     LED, CAUGHT BY w
1000583c:	72 69 74 65 43 6f 6d 6d 61 6e 64 00 44 49 44 20     riteCommand.DID 
1000584c:	4e 4f 54 20 43 48 45 43 4b 20 46 4f 52 20 46 41     NOT CHECK FOR FA
1000585c:	49 4c 55 52 45 20 42 45 46 4f 52 45 20 77 72 69     ILURE BEFORE wri
1000586c:	74 65 43 6f 6d 6d 61 6e 64 00 46 6c 6f 70 70 79     teCommand.Floppy
1000587c:	3a 3a 64 72 69 76 65 44 65 74 65 63 74 69 6f 6e     ::driveDetection
1000588c:	28 29 0a 00 44 72 69 76 65 20 74 79 70 65 20 30     ()..Drive type 0
1000589c:	3a 20 30 78 25 58 0a 00 44 72 69 76 65 20 74 79     : 0x%X..Drive ty
100058ac:	70 65 20 31 3a 20 30 78 25 58 0a 00 76 6f 69 64     pe 1: 0x%X..void
100058bc:	20 46 6c 6f 70 70 79 3a 3a 72 65 73 65 74 28 29      Floppy::reset()
100058cc:	0a 00 53 50 45 43 49 46 59 20 42 41 44 20 44 41     ..SPECIFY BAD DA
100058dc:	54 41 52 41 54 45 00 00 20 a1 07 00 e0 93 04 00     TARATE.. .......
100058ec:	90 d0 03 00 40 42 0f 00 73 65 6c 65 63 74 20 28     ....@B..select (
100058fc:	41 29 2e 20 25 64 0a 00 73 65 6c 65 63 74 20 28     A). %d..select (
1000590c:	42 29 2e 0a 00 73 65 6c 65 63 74 20 28 43 29 2e     B)...select (C).
1000591c:	0a 00 73 65 6c 65 63 74 20 28 44 29 2e 0a 00 00     ..select (D)....
1000592c:	55 4e 53 55 50 50 4f 52 54 45 44 20 46 4c 4f 50     UNSUPPORTED FLOP
1000593c:	50 59 20 46 4f 52 4d 41 54 20 28 44 41 54 41 52     PY FORMAT (DATAR
1000594c:	41 54 45 20 4e 4f 54 20 4b 4e 4f 57 4e 29 00 73     ATE NOT KNOWN).s
1000595c:	65 6c 65 63 74 20 28 45 29 2e 0a 00 73 70 65 63     elect (E)...spec
1000596c:	69 66 69 79 20 72 65 73 65 74 2e 0a 00 73 65 6c     ifiy reset...sel
1000597c:	65 63 74 20 28 46 29 2e 0a 00 73 65 6c 65 63 74     ect (F)...select
1000598c:	20 28 46 32 29 2e 0a 00 63 61 6c 69 62 72 61 74      (F2)...calibrat
1000599c:	65 20 72 65 73 65 74 2e 0a 00 73 65 6c 65 63 74     e reset...select
100059ac:	20 28 47 29 2e 0a 00 73 65 6c 65 63 74 20 28 48      (G)...select (H
100059bc:	29 2e 0a 00 73 65 6c 65 63 74 20 28 49 29 2e 0a     )...select (I)..
100059cc:	00 46 6c 6f 70 70 79 3a 3a 6d 6f 74 6f 72 0a 00     .Floppy::motor..
100059dc:	6e 75 6d 20 3d 20 25 64 2c 20 73 74 61 74 65 20     num = %d, state 
100059ec:	3d 20 25 64 0a 00 73 74 61 74 65 2e 0a 00 73 74     = %d..state...st
100059fc:	61 72 74 69 6e 67 20 74 68 65 20 6d 6f 74 6f 72     arting the motor
10005a0c:	2e 0a 00 64 6f 72 20 31 20 3d 20 30 78 25 58 0a     ...dor 1 = 0x%X.
10005a1c:	00 64 6f 72 20 32 20 3d 20 30 78 25 58 0a 00 6d     .dor 2 = 0x%X..m
10005a2c:	6f 74 6f 72 20 61 67 61 69 6e 2e 0a 00 6d 6f 74     otor again...mot
10005a3c:	6f 72 20 61 67 61 69 6e 20 32 2e 0a 00 6d 6f 74     or again 2...mot
10005a4c:	6f 72 20 61 67 61 69 6e 20 33 2e 0a 00 6d 6f 74     or again 3...mot
10005a5c:	6f 72 20 61 67 61 69 6e 20 34 2e 0a 00 6d 6f 74     or again 4...mot
10005a6c:	6f 72 20 61 67 61 69 6e 20 35 2e 0a 00 6d 6f 74     or again 5...mot
10005a7c:	6f 72 20 61 67 61 69 6e 20 36 2e 0a 00 46 6c 6f     or again 6...Flo
10005a8c:	70 70 79 3a 3a 6d 6f 74 6f 72 20 64 6f 6e 65 2e     ppy::motor done.
10005a9c:	0a 00 46 6c 6f 70 70 79 20 44 69 73 6b 20 44 72     ..Floppy Disk Dr
10005aac:	69 76 65 00 46 6c 6f 70 70 79 44 72 69 76 65 3a     ive.FloppyDrive:
10005abc:	3a 6d 6f 74 6f 72 4f 6e 20 6e 75 6d 20 3d 20 25     :motorOn num = %
10005acc:	64 0a 00 6e 75 6d 20 3d 20 25 64 0a 00 73 69 7a     d..num = %d..siz
10005adc:	65 20 69 6e 20 4b 42 73 20 3d 20 25 64 0a 00 46     e in KBs = %d..F
10005aec:	6c 6f 70 70 79 44 72 69 76 65 3a 3a 5f 6f 70 65     loppyDrive::_ope
10005afc:	6e 20 31 0a 00 46 6c 6f 70 70 79 44 72 69 76 65     n 1..FloppyDrive
10005b0c:	3a 3a 5f 6f 70 65 6e 20 32 0a 00 46 6c 6f 70 70     ::_open 2..Flopp
10005b1c:	79 44 72 69 76 65 3a 3a 5f 6f 70 65 6e 20 33 0a     yDrive::_open 3.
10005b2c:	00 46 6c 6f 70 70 79 44 72 69 76 65 3a 3a 73 65     .FloppyDrive::se
10005b3c:	6c 65 63 74 0a 00 00 00 73 65 6c 65 63 74 69 6f     lect....selectio
10005b4c:	6e 20 6c 6f 63 6b 65 64 20 6f 72 20 66 61 69 6c     n locked or fail
10005b5c:	65 64 2e 2e 2e 0a 00 00 73 65 65 6b 3a 20 35 20     ed......seek: 5 
10005b6c:	72 65 74 72 69 65 73 2c 20 63 6f 75 6c 64 20 6e     retries, could n
10005b7c:	6f 74 20 63 61 6c 69 62 72 61 74 65 2e 0a 00 73     ot calibrate...s
10005b8c:	65 65 6b 20 28 73 65 6c 29 20 25 64 2e 0a 00 73     eek (sel) %d...s
10005b9c:	65 65 6b 20 28 6f 6e 29 20 25 64 2e 0a 00 73 65     eek (on) %d...se
10005bac:	65 6b 20 28 31 29 2e 0a 00 73 65 65 6b 20 28 61     ek (1)...seek (a
10005bbc:	61 29 2e 0a 00 73 65 65 6b 20 28 62 62 29 2e 0a     a)...seek (bb)..
10005bcc:	00 73 65 65 6b 20 28 32 29 2e 0a 00 73 65 65 6b     .seek (2)...seek
10005bdc:	20 28 33 29 2e 0a 00 73 65 65 6b 20 28 34 29 2e      (3)...seek (4).
10005bec:	0a 00 73 65 65 6b 20 28 6e 69 72 71 29 2e 0a 00     ..seek (nirq)...
10005bfc:	73 65 65 6b 20 28 35 29 2e 0a 00 73 65 65 6b 20     seek (5)...seek 
10005c0c:	28 73 69 64 29 2e 0a 00 73 65 65 6b 20 28 6f 66     (sid)...seek (of
10005c1c:	66 29 2e 0a 00 73 65 65 6b 20 28 75 6e 29 2e 0a     f)...seek (un)..
10005c2c:	00 00 00 00 63 61 6c 69 62 72 61 74 65 3a 20 35     ....calibrate: 5
10005c3c:	20 72 65 74 72 69 65 73 2c 20 63 6f 75 6c 64 20      retries, could 
10005c4c:	6e 6f 74 20 63 61 6c 69 62 72 61 74 65 2e 0a 00     not calibrate...
10005c5c:	63 61 6c 20 28 6f 6e 29 2c 20 25 64 0a 00 63 61     cal (on), %d..ca
10005c6c:	6c 20 28 30 29 0a 00 63 61 6c 20 28 31 29 0a 00     l (0)..cal (1)..
10005c7c:	63 61 6c 20 28 32 29 0a 00 63 61 6c 20 28 33 29     cal (2)..cal (3)
10005c8c:	0a 00 63 61 6c 20 28 34 29 0a 00 63 61 6c 20 28     ..cal (4)..cal (
10005c9c:	35 29 0a 00 20 72 65 74 72 79 3a 20 0a 00 41 62     5).. retry: ..Ab
10005cac:	6f 75 74 20 74 6f 20 73 65 65 6b 2e 0a 00 53 65     out to seek...Se
10005cbc:	65 6b 20 64 6f 6e 65 2e 0a 00 4d 6f 74 6f 72 20     ek done...Motor 
10005ccc:	6f 6e 2e 0a 00 53 65 6c 65 63 74 65 64 2e 0a 00     on...Selected...
10005cdc:	44 4d 41 20 69 6e 69 74 27 64 2e 0a 00 73 6c 65     DMA init'd...sle
10005cec:	65 70 20 64 6f 6e 65 0a 00 61 62 6f 75 74 20 74     ep done..about t
10005cfc:	6f 20 77 61 69 74 49 52 51 2e 0a 00 6e 6f 20 49     o waitIRQ...no I
10005d0c:	52 51 2e 0a 00 67 6f 74 20 49 52 51 2e 0a 00 66     RQ...got IRQ...f
10005d1c:	61 69 6c 75 72 65 20 72 65 61 64 69 6e 67 20 73     ailure reading s
10005d2c:	74 61 74 75 73 2e 0a 00 72 65 61 64 20 72 65 73     tatus...read res
10005d3c:	75 6c 74 20 62 79 74 65 73 2e 0a 00 6d 6f 74 6f     ult bytes...moto
10005d4c:	72 20 6f 66 66 0a 00 75 6e 73 65 6c 65 63 74 2e     r off..unselect.
10005d5c:	0a 00 43 61 63 68 65 73 20 68 61 76 65 20 62 65     ..Caches have be
10005d6c:	65 6e 20 70 75 72 67 65 64 2e 0a 00 66 6c 6f 70     en purged...flop
10005d7c:	70 79 20 72 65 61 64 20 63 6f 75 6e 74 20 6e 6f     py read count no
10005d8c:	74 20 31 00 46 6c 6f 70 70 79 44 72 69 76 65 3a     t 1.FloppyDrive:
10005d9c:	3a 72 65 61 64 20 63 61 6c 6c 65 64 2e 0a 00 43     :read called...C
10005dac:	20 30 78 25 58 2c 20 48 20 30 78 25 58 2c 20 53      0x%X, H 0x%X, S
10005dbc:	20 30 78 25 58 0a 00 72 65 61 64 69 6e 67 20 74      0x%X..reading t
10005dcc:	72 61 63 6b 2e 0a 00 90                             rack....

10005dd4 <vtable for FloppyDrive>:
	...
	10005ddc: R_386_32	FloppyDrive::~FloppyDrive()
	10005de0: R_386_32	FloppyDrive::~FloppyDrive()
	10005de4: R_386_32	FloppyDrive::open(int, int, void*)
	10005de8: R_386_32	FloppyDrive::close(int, int, void*)
	10005dec: R_386_32	Device::hibernate()
	10005df0: R_386_32	Device::wake()
	10005df4: R_386_32	Device::detect()
	10005df8: R_386_32	Device::disableLegacy()
	10005dfc: R_386_32	Device::powerSaving(PowerSavingLevel)
	10005e00: R_386_32	FloppyDrive::eject()
	10005e04: R_386_32	FloppyDrive::read(unsigned long long, int, void*)
	10005e08: R_386_32	FloppyDrive::write(unsigned long long, int, void*)

10005e0c <vtable for Floppy>:
	...
	10005e14: R_386_32	Floppy::~Floppy()
	10005e18: R_386_32	Floppy::~Floppy()
	10005e1c: R_386_32	Floppy::open(int, int, void*)
	10005e20: R_386_32	Floppy::close(int, int, void*)
	10005e24: R_386_32	Device::hibernate()
	10005e28: R_386_32	Device::wake()
	10005e2c: R_386_32	Device::detect()
	10005e30: R_386_32	Device::disableLegacy()
	10005e34: R_386_32	Device::powerSaving(PowerSavingLevel)

10005e38 <PHYS_RAM_TABLE_SIZE>:
10005e38:	13 05 00 00                                         ....

10005e3c <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005e3c:	24 05 00 00                                         $...

10005e40 <PHYS_RAM_TABLE>:
10005e40:	00 06 00 00                                         ....

10005e44 <PHYS_DMA_MEMORY_1>:
10005e44:	00 00 01 00                                         ....

10005e48 <PHYS_PHYS_PAGE_BITMAP>:
10005e48:	00 00 02 00                                         ....

10005e4c <PHYS_VIRT_PAGE_BITMAP>:
10005e4c:	00 00 04 00                                         ....

10005e50 <PHYS_DMA_MEMORY_2>:
10005e50:	00 00 06 00                                         ....

10005e54 <PHYS_ALLOCED_VIRT_PAGES>:
10005e54:	00 00 10 00                                         ....

10005e58 <PHYS_KRNL_PAGE_DIRECTORY>:
10005e58:	00 10 00 00                                         ....

10005e5c <VIRT_KERNEL_BASE>:
10005e5c:	00 00 00 c0                                         ....

10005e60 <VIRT_LOW_MEGS>:
10005e60:	00 00 00 c2                                         ....

10005e64 <VIRT_CPU_SPECIFIC>:
10005e64:	00 00 40 c2                                         ..@.

10005e68 <VIRT_RECURSIVE_SPOT_1>:
10005e68:	00 00 80 c2                                         ....

10005e6c <VIRT_RECURSIVE_SPOT_2>:
10005e6c:	00 00 c0 c2                                         ....

10005e70 <VIRT_DMA_MEMORY_1>:
10005e70:	00 00 01 c2                                         ....

10005e74 <SIZE_DMA_MEMORY_1>:
10005e74:	00 00 01 00                                         ....

10005e78 <VIRT_DMA_MEMORY_2>:
10005e78:	00 00 06 c2                                         ....

10005e7c <SIZE_DMA_MEMORY_2>:
10005e7c:	00 00 02 00                                         ....

10005e80 <VIRT_KRNL_PAGE_DIRECTORY>:
10005e80:	00 10 00 c2                                         ....

10005e84 <VIRT_PHYS_PAGE_BITMAP>:
10005e84:	00 00 02 c2                                         ....

10005e88 <SIZE_PHYS_PAGE_BITMAP>:
10005e88:	00 00 02 00                                         ....

10005e8c <VIRT_VIRT_PAGE_BITMAP>:
10005e8c:	00 00 04 c2                                         ....

10005e90 <SIZE_VIRT_PAGE_BITMAP>:
10005e90:	00 80 00 00                                         ....

10005e94 <VIRT_RAM_TABLE>:
10005e94:	00 06 00 c2                                         ....

10005e98 <VIRT_RAM_TABLE_SIZE>:
10005e98:	13 05 00 c2                                         ....

10005e9c <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005e9c:	24 05 00 c2                                         $...

10005ea0 <SIZE_APP_STACK_USER>:
10005ea0:	00 00 18 00                                         ....

10005ea4 <SIZE_APP_STACK_KRNL>:
10005ea4:	00 00 08 00                                         ....

10005ea8 <SIZE_APP_STACK_TOTAL>:
10005ea8:	00 00 20 00                                         .. .

10005eac <VIRT_APP_DATA>:
10005eac:	00 00 00 10                                         ....

10005eb0 <VIRT_APP_STACK_USER_TOP>:
10005eb0:	00 00 00 02                                         ....

10005eb4 <VIRT_APP_STACK_KRNL_TOP>:
10005eb4:	00 00 e8 01                                         ....

10005eb8 <VIRT_HEAP_MIN>:
10005eb8:	00 00 00 c8                                         ....

10005ebc <VIRT_HEAP_MAX>:
10005ebc:	ff ff ff ef                                         ....

10005ec0 <VIRT_SBRK_MIN>:
10005ec0:	00 00 00 f0                                         ....

10005ec4 <VIRT_SBRK_MAX>:
10005ec4:	00 00 c0 ff                                         ....

10005ec8 <VIRT_ALLOCED_VIRT_PAGES>:
10005ec8:	00 00 10 c2                                         ....

10005ecc <VIRT_ACPI_DRIVER>:
10005ecc:	00 40 48 c2                                         .@H.

10005ed0 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005ed0:	96 00 00 00                                         ....

10005ed4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005ed4:	2c 01 00 00 47 61 6d 65 70 6f 72 74 00 66 90 90     ,...Gameport.f..

10005ee4 <vtable for Gameport>:
	...
	10005eec: R_386_32	Gameport::~Gameport()
	10005ef0: R_386_32	Gameport::~Gameport()
	10005ef4: R_386_32	Gameport::open(int, int, void*)
	10005ef8: R_386_32	Gameport::close(int, int, void*)
	10005efc: R_386_32	Device::hibernate()
	10005f00: R_386_32	Device::wake()
	10005f04: R_386_32	Gameport::detect()
	10005f08: R_386_32	Device::disableLegacy()
	10005f0c: R_386_32	Device::powerSaving(PowerSavingLevel)
	10005f10: R_386_32	Gameport::read(int)
10005f14:	a8 fe ff ff 00 00 00 00 00 00 00 00                 ............	10005f1c: R_386_32	non-virtual thunk to Gameport::read(int)

10005f20 <vtable for JoystickHost>:
	...
	10005f28: R_386_32	__cxa_pure_virtual

10005f2c <PHYS_RAM_TABLE_SIZE>:
10005f2c:	13 05 00 00                                         ....

10005f30 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005f30:	24 05 00 00                                         $...

10005f34 <PHYS_RAM_TABLE>:
10005f34:	00 06 00 00                                         ....

10005f38 <PHYS_DMA_MEMORY_1>:
10005f38:	00 00 01 00                                         ....

10005f3c <PHYS_PHYS_PAGE_BITMAP>:
10005f3c:	00 00 02 00                                         ....

10005f40 <PHYS_VIRT_PAGE_BITMAP>:
10005f40:	00 00 04 00                                         ....

10005f44 <PHYS_DMA_MEMORY_2>:
10005f44:	00 00 06 00                                         ....

10005f48 <PHYS_ALLOCED_VIRT_PAGES>:
10005f48:	00 00 10 00                                         ....

10005f4c <PHYS_KRNL_PAGE_DIRECTORY>:
10005f4c:	00 10 00 00                                         ....

10005f50 <VIRT_KERNEL_BASE>:
10005f50:	00 00 00 c0                                         ....

10005f54 <VIRT_LOW_MEGS>:
10005f54:	00 00 00 c2                                         ....

10005f58 <VIRT_CPU_SPECIFIC>:
10005f58:	00 00 40 c2                                         ..@.

10005f5c <VIRT_RECURSIVE_SPOT_1>:
10005f5c:	00 00 80 c2                                         ....

10005f60 <VIRT_RECURSIVE_SPOT_2>:
10005f60:	00 00 c0 c2                                         ....

10005f64 <VIRT_DMA_MEMORY_1>:
10005f64:	00 00 01 c2                                         ....

10005f68 <SIZE_DMA_MEMORY_1>:
10005f68:	00 00 01 00                                         ....

10005f6c <VIRT_DMA_MEMORY_2>:
10005f6c:	00 00 06 c2                                         ....

10005f70 <SIZE_DMA_MEMORY_2>:
10005f70:	00 00 02 00                                         ....

10005f74 <VIRT_KRNL_PAGE_DIRECTORY>:
10005f74:	00 10 00 c2                                         ....

10005f78 <VIRT_PHYS_PAGE_BITMAP>:
10005f78:	00 00 02 c2                                         ....

10005f7c <SIZE_PHYS_PAGE_BITMAP>:
10005f7c:	00 00 02 00                                         ....

10005f80 <VIRT_VIRT_PAGE_BITMAP>:
10005f80:	00 00 04 c2                                         ....

10005f84 <SIZE_VIRT_PAGE_BITMAP>:
10005f84:	00 80 00 00                                         ....

10005f88 <VIRT_RAM_TABLE>:
10005f88:	00 06 00 c2                                         ....

10005f8c <VIRT_RAM_TABLE_SIZE>:
10005f8c:	13 05 00 c2                                         ....

10005f90 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005f90:	24 05 00 c2                                         $...

10005f94 <SIZE_APP_STACK_USER>:
10005f94:	00 00 18 00                                         ....

10005f98 <SIZE_APP_STACK_KRNL>:
10005f98:	00 00 08 00                                         ....

10005f9c <SIZE_APP_STACK_TOTAL>:
10005f9c:	00 00 20 00                                         .. .

10005fa0 <VIRT_APP_DATA>:
10005fa0:	00 00 00 10                                         ....

10005fa4 <VIRT_APP_STACK_USER_TOP>:
10005fa4:	00 00 00 02                                         ....

10005fa8 <VIRT_APP_STACK_KRNL_TOP>:
10005fa8:	00 00 e8 01                                         ....

10005fac <VIRT_HEAP_MIN>:
10005fac:	00 00 00 c8                                         ....

10005fb0 <VIRT_HEAP_MAX>:
10005fb0:	ff ff ff ef                                         ....

10005fb4 <VIRT_SBRK_MIN>:
10005fb4:	00 00 00 f0                                         ....

10005fb8 <VIRT_SBRK_MAX>:
10005fb8:	00 00 c0 ff                                         ....

10005fbc <VIRT_ALLOCED_VIRT_PAGES>:
10005fbc:	00 00 10 c2                                         ....

10005fc0 <VIRT_ACPI_DRIVER>:
10005fc0:	00 40 48 c2                                         .@H.

10005fc4 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005fc4:	96 00 00 00                                         ....

10005fc8 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005fc8:	2c 01 00 00                                         ,...

10005fcc <CSWTCH.11>:
10005fcc:	00 02 04 06 c0 c4 c8 cc                             ........

10005fd4 <CSWTCH.12>:
10005fd4:	01 03 05 07 c2 c6 ca ce                             ........

10005fdc <CSWTCH.13>:
10005fdc:	87 83 81 82 8f 8b 89 8a 4e 6f 74 20 69 6e 20 72     ........Not in r
10005fec:	61 6e 67 65 2e 0a 00 90                             ange....

10005ff4 <vtable for DMA>:
	...
	10005ffc: R_386_32	DMA::~DMA()
	10006000: R_386_32	DMA::~DMA()
	10006004: R_386_32	DMA::open(int, int, void*)
	10006008: R_386_32	DMA::close(int, int, void*)
	1000600c: R_386_32	Device::hibernate()
	10006010: R_386_32	Device::wake()
	10006014: R_386_32	Device::detect()
	10006018: R_386_32	Device::disableLegacy()
	1000601c: R_386_32	Device::powerSaving(PowerSavingLevel)

10006020 <PHYS_RAM_TABLE_SIZE>:
10006020:	13 05 00 00                                         ....

10006024 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10006024:	24 05 00 00                                         $...

10006028 <PHYS_RAM_TABLE>:
10006028:	00 06 00 00                                         ....

1000602c <PHYS_DMA_MEMORY_1>:
1000602c:	00 00 01 00                                         ....

10006030 <PHYS_PHYS_PAGE_BITMAP>:
10006030:	00 00 02 00                                         ....

10006034 <PHYS_VIRT_PAGE_BITMAP>:
10006034:	00 00 04 00                                         ....

10006038 <PHYS_DMA_MEMORY_2>:
10006038:	00 00 06 00                                         ....

1000603c <PHYS_ALLOCED_VIRT_PAGES>:
1000603c:	00 00 10 00                                         ....

10006040 <PHYS_KRNL_PAGE_DIRECTORY>:
10006040:	00 10 00 00                                         ....

10006044 <VIRT_KERNEL_BASE>:
10006044:	00 00 00 c0                                         ....

10006048 <VIRT_LOW_MEGS>:
10006048:	00 00 00 c2                                         ....

1000604c <VIRT_CPU_SPECIFIC>:
1000604c:	00 00 40 c2                                         ..@.

10006050 <VIRT_RECURSIVE_SPOT_1>:
10006050:	00 00 80 c2                                         ....

10006054 <VIRT_RECURSIVE_SPOT_2>:
10006054:	00 00 c0 c2                                         ....

10006058 <VIRT_DMA_MEMORY_1>:
10006058:	00 00 01 c2                                         ....

1000605c <SIZE_DMA_MEMORY_1>:
1000605c:	00 00 01 00                                         ....

10006060 <VIRT_DMA_MEMORY_2>:
10006060:	00 00 06 c2                                         ....

10006064 <SIZE_DMA_MEMORY_2>:
10006064:	00 00 02 00                                         ....

10006068 <VIRT_KRNL_PAGE_DIRECTORY>:
10006068:	00 10 00 c2                                         ....

1000606c <VIRT_PHYS_PAGE_BITMAP>:
1000606c:	00 00 02 c2                                         ....

10006070 <SIZE_PHYS_PAGE_BITMAP>:
10006070:	00 00 02 00                                         ....

10006074 <VIRT_VIRT_PAGE_BITMAP>:
10006074:	00 00 04 c2                                         ....

10006078 <SIZE_VIRT_PAGE_BITMAP>:
10006078:	00 80 00 00                                         ....

1000607c <VIRT_RAM_TABLE>:
1000607c:	00 06 00 c2                                         ....

10006080 <VIRT_RAM_TABLE_SIZE>:
10006080:	13 05 00 c2                                         ....

10006084 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10006084:	24 05 00 c2                                         $...

10006088 <SIZE_APP_STACK_USER>:
10006088:	00 00 18 00                                         ....

1000608c <SIZE_APP_STACK_KRNL>:
1000608c:	00 00 08 00                                         ....

10006090 <SIZE_APP_STACK_TOTAL>:
10006090:	00 00 20 00                                         .. .

10006094 <VIRT_APP_DATA>:
10006094:	00 00 00 10                                         ....

10006098 <VIRT_APP_STACK_USER_TOP>:
10006098:	00 00 00 02                                         ....

1000609c <VIRT_APP_STACK_KRNL_TOP>:
1000609c:	00 00 e8 01                                         ....

100060a0 <VIRT_HEAP_MIN>:
100060a0:	00 00 00 c8                                         ....

100060a4 <VIRT_HEAP_MAX>:
100060a4:	ff ff ff ef                                         ....

100060a8 <VIRT_SBRK_MIN>:
100060a8:	00 00 00 f0                                         ....

100060ac <VIRT_SBRK_MAX>:
100060ac:	00 00 c0 ff                                         ....

100060b0 <VIRT_ALLOCED_VIRT_PAGES>:
100060b0:	00 00 10 c2                                         ....

100060b4 <VIRT_ACPI_DRIVER>:
100060b4:	00 40 48 c2                                         .@H.

100060b8 <TERMINAL_KEYBUFFER_IN_SIZE>:
100060b8:	96 00 00 00                                         ....

100060bc <TERMINAL_KEYBUFFER_OUT_SIZE>:
100060bc:	2c 01 00 00                                         ,...

100060c0 <vtable for PS2>:
	...
	100060c8: R_386_32	PS2::~PS2()
	100060cc: R_386_32	PS2::~PS2()
	100060d0: R_386_32	PS2::open(int, int, void*)
	100060d4: R_386_32	PS2::close(int, int, void*)
	100060d8: R_386_32	Device::hibernate()
	100060dc: R_386_32	Device::wake()
	100060e0: R_386_32	PS2::detect()
	100060e4: R_386_32	Device::disableLegacy()
	100060e8: R_386_32	Device::powerSaving(PowerSavingLevel)
100060ec:	66 90 66 90 66 90 66 90 66 90 66 90 66 90 66 90     f.f.f.f.f.f.f.f.
100060fc:	66 90 66 90                                         f.f.

10006100 <PHYS_RAM_TABLE_SIZE>:
10006100:	13 05 00 00                                         ....

10006104 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10006104:	24 05 00 00                                         $...

10006108 <PHYS_RAM_TABLE>:
10006108:	00 06 00 00                                         ....

1000610c <PHYS_DMA_MEMORY_1>:
1000610c:	00 00 01 00                                         ....

10006110 <PHYS_PHYS_PAGE_BITMAP>:
10006110:	00 00 02 00                                         ....

10006114 <PHYS_VIRT_PAGE_BITMAP>:
10006114:	00 00 04 00                                         ....

10006118 <PHYS_DMA_MEMORY_2>:
10006118:	00 00 06 00                                         ....

1000611c <PHYS_ALLOCED_VIRT_PAGES>:
1000611c:	00 00 10 00                                         ....

10006120 <PHYS_KRNL_PAGE_DIRECTORY>:
10006120:	00 10 00 00                                         ....

10006124 <VIRT_KERNEL_BASE>:
10006124:	00 00 00 c0                                         ....

10006128 <VIRT_LOW_MEGS>:
10006128:	00 00 00 c2                                         ....

1000612c <VIRT_CPU_SPECIFIC>:
1000612c:	00 00 40 c2                                         ..@.

10006130 <VIRT_RECURSIVE_SPOT_1>:
10006130:	00 00 80 c2                                         ....

10006134 <VIRT_RECURSIVE_SPOT_2>:
10006134:	00 00 c0 c2                                         ....

10006138 <VIRT_DMA_MEMORY_1>:
10006138:	00 00 01 c2                                         ....

1000613c <SIZE_DMA_MEMORY_1>:
1000613c:	00 00 01 00                                         ....

10006140 <VIRT_DMA_MEMORY_2>:
10006140:	00 00 06 c2                                         ....

10006144 <SIZE_DMA_MEMORY_2>:
10006144:	00 00 02 00                                         ....

10006148 <VIRT_KRNL_PAGE_DIRECTORY>:
10006148:	00 10 00 c2                                         ....

1000614c <VIRT_PHYS_PAGE_BITMAP>:
1000614c:	00 00 02 c2                                         ....

10006150 <SIZE_PHYS_PAGE_BITMAP>:
10006150:	00 00 02 00                                         ....

10006154 <VIRT_VIRT_PAGE_BITMAP>:
10006154:	00 00 04 c2                                         ....

10006158 <SIZE_VIRT_PAGE_BITMAP>:
10006158:	00 80 00 00                                         ....

1000615c <VIRT_RAM_TABLE>:
1000615c:	00 06 00 c2                                         ....

10006160 <VIRT_RAM_TABLE_SIZE>:
10006160:	13 05 00 c2                                         ....

10006164 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10006164:	24 05 00 c2                                         $...

10006168 <SIZE_APP_STACK_USER>:
10006168:	00 00 18 00                                         ....

1000616c <SIZE_APP_STACK_KRNL>:
1000616c:	00 00 08 00                                         ....

10006170 <SIZE_APP_STACK_TOTAL>:
10006170:	00 00 20 00                                         .. .

10006174 <VIRT_APP_DATA>:
10006174:	00 00 00 10                                         ....

10006178 <VIRT_APP_STACK_USER_TOP>:
10006178:	00 00 00 02                                         ....

1000617c <VIRT_APP_STACK_KRNL_TOP>:
1000617c:	00 00 e8 01                                         ....

10006180 <VIRT_HEAP_MIN>:
10006180:	00 00 00 c8                                         ....

10006184 <VIRT_HEAP_MAX>:
10006184:	ff ff ff ef                                         ....

10006188 <VIRT_SBRK_MIN>:
10006188:	00 00 00 f0                                         ....

1000618c <VIRT_SBRK_MAX>:
1000618c:	00 00 c0 ff                                         ....

10006190 <VIRT_ALLOCED_VIRT_PAGES>:
10006190:	00 00 10 c2                                         ....

10006194 <VIRT_ACPI_DRIVER>:
10006194:	00 40 48 c2                                         .@H.

10006198 <TERMINAL_KEYBUFFER_IN_SIZE>:
10006198:	96 00 00 00                                         ....

1000619c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000619c:	2c 01 00 00                                         ,...

100061a0 <PS2Keyboard::internalMapperLower>:
100061a0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
100061b0:	20 20 20 20 20 71 31 20 20 20 7a 73 61 77 32 20          q1   zsaw2 
100061c0:	20 63 78 64 65 34 33 20 20 20 76 66 74 72 35 20      cxde43   vftr5 
100061d0:	20 6e 62 68 67 79 36 20 20 20 6d 6a 75 37 38 20      nbhgy6   mju78 
100061e0:	20 2c 6b 69 6f 30 39 20 20 2e 2f 6c 3b 70 2d 20      ,kio09  ./l;p- 
100061f0:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10006200:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10006210:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10006220:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

100062a0 <PS2Keyboard::internalMapperUpper>:
100062a0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
100062b0:	20 20 20 20 20 51 21 20 20 20 5a 53 41 57 40 20          Q!   ZSAW@ 
100062c0:	20 43 58 44 45 24 23 20 20 20 56 46 54 52 25 20      CXDE$#   VFTR% 
100062d0:	20 4e 42 48 47 59 5e 20 20 20 4d 4a 55 26 2a 20      NBHGY^   MJU&* 
100062e0:	20 3c 4b 49 4f 29 28 20 20 3e 3f 4c 3a 50 5f 20      <KIO)(  >?L:P_ 
100062f0:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10006300:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10006310:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10006320:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

100063a0 <PS2Keyboard::internalMapCapLower>:
100063a0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
100063b0:	20 20 20 20 20 51 31 20 20 20 5a 53 41 57 32 20          Q1   ZSAW2 
100063c0:	20 43 58 44 45 34 33 20 20 20 56 46 54 52 35 20      CXDE43   VFTR5 
100063d0:	20 4e 42 48 47 59 36 20 20 20 4d 4a 55 37 38 20      NBHGY6   MJU78 
100063e0:	20 2c 4b 49 4f 30 39 20 20 2e 2f 4c 3b 50 2d 20      ,KIO09  ./L;P- 
100063f0:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10006400:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10006410:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10006420:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

100064a0 <PS2Keyboard::internalMapCapUpper>:
100064a0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
100064b0:	20 20 20 20 20 51 21 20 20 20 7a 73 61 77 40 20          Q!   zsaw@ 
100064c0:	20 63 78 64 65 24 23 20 20 20 76 66 74 72 25 20      cxde$#   vftr% 
100064d0:	20 6e 62 68 67 79 5e 20 20 20 6d 6a 75 26 2a 20      nbhgy^   mju&* 
100064e0:	20 3c 6b 69 6f 29 28 20 20 3e 3f 6c 3a 70 5f 20      <kio)(  >?l:p_ 
100064f0:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10006500:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10006510:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10006520:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

100065a0 <PS2Keyboard::internalMapperLowerBad>:
100065a0:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
100065b0:	71 77 65 72 74 79 75 69 6f 70 5b 5d 20 20 61 73     qwertyuiop[]  as
100065c0:	64 66 67 68 6a 6b 6c 3b 27 60 20 5c 7a 78 63 76     dfghjkl;'` \zxcv
100065d0:	62 6e 6d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     bnm,./ *        
100065e0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
100065f0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006600:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006610:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006620:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10006630:	51 57 45 52 54 59 55 49 4f 50 7b 7d 20 20 41 53     QWERTYUIOP{}  AS
10006640:	44 46 47 48 4a 4b 4c 3a 22 7e 20 7c 5a 58 43 56     DFGHJKL:"~ |ZXCV
10006650:	42 4e 4d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     BNM<>? *        
10006660:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10006670:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006680:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006690:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100066a0:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
100066b0:	51 57 45 52 54 59 55 49 4f 50 5b 5d 20 20 41 53     QWERTYUIOP[]  AS
100066c0:	44 46 47 48 4a 4b 4c 3b 27 60 20 5c 5a 58 43 56     DFGHJKL;'` \ZXCV
100066d0:	42 4e 4d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     BNM,./ *        
100066e0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
100066f0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006700:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006710:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006720:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10006730:	71 77 65 72 74 79 75 69 6f 70 7b 7d 20 20 61 73     qwertyuiop{}  as
10006740:	64 66 67 68 6a 6b 6c 3a 22 7e 20 7c 7a 78 63 76     dfghjkl:"~ |zxcv
10006750:	62 6e 6d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     bnm<>? *        
10006760:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10006770:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006780:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006790:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100067a0:	00 66 90 90                                         .f..

100067a4 <vtable for PS2Keyboard>:
	...
	100067ac: R_386_32	PS2Keyboard::~PS2Keyboard()
	100067b0: R_386_32	PS2Keyboard::~PS2Keyboard()
	100067b4: R_386_32	PS2Keyboard::open(int, int, void*)
	100067b8: R_386_32	PS2Keyboard::close(int, int, void*)
	100067bc: R_386_32	Device::hibernate()
	100067c0: R_386_32	Device::wake()
	100067c4: R_386_32	Device::detect()
	100067c8: R_386_32	Device::disableLegacy()
	100067cc: R_386_32	Device::powerSaving(PowerSavingLevel)
	100067d0: R_386_32	PS2Keyboard::setRepeatRate(int)
	100067d4: R_386_32	PS2Keyboard::setRepeatDelay(int)

100067d8 <PHYS_RAM_TABLE_SIZE>:
100067d8:	13 05 00 00                                         ....

100067dc <PHYS_HIGHEST_UNUSED_ADDRESS>:
100067dc:	24 05 00 00                                         $...

100067e0 <PHYS_RAM_TABLE>:
100067e0:	00 06 00 00                                         ....

100067e4 <PHYS_DMA_MEMORY_1>:
100067e4:	00 00 01 00                                         ....

100067e8 <PHYS_PHYS_PAGE_BITMAP>:
100067e8:	00 00 02 00                                         ....

100067ec <PHYS_VIRT_PAGE_BITMAP>:
100067ec:	00 00 04 00                                         ....

100067f0 <PHYS_DMA_MEMORY_2>:
100067f0:	00 00 06 00                                         ....

100067f4 <PHYS_ALLOCED_VIRT_PAGES>:
100067f4:	00 00 10 00                                         ....

100067f8 <PHYS_KRNL_PAGE_DIRECTORY>:
100067f8:	00 10 00 00                                         ....

100067fc <VIRT_KERNEL_BASE>:
100067fc:	00 00 00 c0                                         ....

10006800 <VIRT_LOW_MEGS>:
10006800:	00 00 00 c2                                         ....

10006804 <VIRT_CPU_SPECIFIC>:
10006804:	00 00 40 c2                                         ..@.

10006808 <VIRT_RECURSIVE_SPOT_1>:
10006808:	00 00 80 c2                                         ....

1000680c <VIRT_RECURSIVE_SPOT_2>:
1000680c:	00 00 c0 c2                                         ....

10006810 <VIRT_DMA_MEMORY_1>:
10006810:	00 00 01 c2                                         ....

10006814 <SIZE_DMA_MEMORY_1>:
10006814:	00 00 01 00                                         ....

10006818 <VIRT_DMA_MEMORY_2>:
10006818:	00 00 06 c2                                         ....

1000681c <SIZE_DMA_MEMORY_2>:
1000681c:	00 00 02 00                                         ....

10006820 <VIRT_KRNL_PAGE_DIRECTORY>:
10006820:	00 10 00 c2                                         ....

10006824 <VIRT_PHYS_PAGE_BITMAP>:
10006824:	00 00 02 c2                                         ....

10006828 <SIZE_PHYS_PAGE_BITMAP>:
10006828:	00 00 02 00                                         ....

1000682c <VIRT_VIRT_PAGE_BITMAP>:
1000682c:	00 00 04 c2                                         ....

10006830 <SIZE_VIRT_PAGE_BITMAP>:
10006830:	00 80 00 00                                         ....

10006834 <VIRT_RAM_TABLE>:
10006834:	00 06 00 c2                                         ....

10006838 <VIRT_RAM_TABLE_SIZE>:
10006838:	13 05 00 c2                                         ....

1000683c <VIRT_HIGHEST_UNUSED_ADDRESS>:
1000683c:	24 05 00 c2                                         $...

10006840 <SIZE_APP_STACK_USER>:
10006840:	00 00 18 00                                         ....

10006844 <SIZE_APP_STACK_KRNL>:
10006844:	00 00 08 00                                         ....

10006848 <SIZE_APP_STACK_TOTAL>:
10006848:	00 00 20 00                                         .. .

1000684c <VIRT_APP_DATA>:
1000684c:	00 00 00 10                                         ....

10006850 <VIRT_APP_STACK_USER_TOP>:
10006850:	00 00 00 02                                         ....

10006854 <VIRT_APP_STACK_KRNL_TOP>:
10006854:	00 00 e8 01                                         ....

10006858 <VIRT_HEAP_MIN>:
10006858:	00 00 00 c8                                         ....

1000685c <VIRT_HEAP_MAX>:
1000685c:	ff ff ff ef                                         ....

10006860 <VIRT_SBRK_MIN>:
10006860:	00 00 00 f0                                         ....

10006864 <VIRT_SBRK_MAX>:
10006864:	00 00 c0 ff                                         ....

10006868 <VIRT_ALLOCED_VIRT_PAGES>:
10006868:	00 00 10 c2                                         ....

1000686c <VIRT_ACPI_DRIVER>:
1000686c:	00 40 48 c2                                         .@H.

10006870 <TERMINAL_KEYBUFFER_IN_SIZE>:
10006870:	96 00 00 00                                         ....

10006874 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10006874:	2c 01 00 00                                         ,...

10006878 <vtable for PS2Mouse>:
	...
	10006880: R_386_32	PS2Mouse::~PS2Mouse()
	10006884: R_386_32	PS2Mouse::~PS2Mouse()
	10006888: R_386_32	PS2Mouse::open(int, int, void*)
	1000688c: R_386_32	PS2Mouse::close(int, int, void*)
	10006890: R_386_32	Device::hibernate()
	10006894: R_386_32	Device::wake()
	10006898: R_386_32	PS2Mouse::detect()
	1000689c: R_386_32	Device::disableLegacy()
	100068a0: R_386_32	Device::powerSaving(PowerSavingLevel)

100068a4 <PHYS_RAM_TABLE_SIZE>:
100068a4:	13 05 00 00                                         ....

100068a8 <PHYS_HIGHEST_UNUSED_ADDRESS>:
100068a8:	24 05 00 00                                         $...

100068ac <PHYS_RAM_TABLE>:
100068ac:	00 06 00 00                                         ....

100068b0 <PHYS_DMA_MEMORY_1>:
100068b0:	00 00 01 00                                         ....

100068b4 <PHYS_PHYS_PAGE_BITMAP>:
100068b4:	00 00 02 00                                         ....

100068b8 <PHYS_VIRT_PAGE_BITMAP>:
100068b8:	00 00 04 00                                         ....

100068bc <PHYS_DMA_MEMORY_2>:
100068bc:	00 00 06 00                                         ....

100068c0 <PHYS_ALLOCED_VIRT_PAGES>:
100068c0:	00 00 10 00                                         ....

100068c4 <PHYS_KRNL_PAGE_DIRECTORY>:
100068c4:	00 10 00 00                                         ....

100068c8 <VIRT_KERNEL_BASE>:
100068c8:	00 00 00 c0                                         ....

100068cc <VIRT_LOW_MEGS>:
100068cc:	00 00 00 c2                                         ....

100068d0 <VIRT_CPU_SPECIFIC>:
100068d0:	00 00 40 c2                                         ..@.

100068d4 <VIRT_RECURSIVE_SPOT_1>:
100068d4:	00 00 80 c2                                         ....

100068d8 <VIRT_RECURSIVE_SPOT_2>:
100068d8:	00 00 c0 c2                                         ....

100068dc <VIRT_DMA_MEMORY_1>:
100068dc:	00 00 01 c2                                         ....

100068e0 <SIZE_DMA_MEMORY_1>:
100068e0:	00 00 01 00                                         ....

100068e4 <VIRT_DMA_MEMORY_2>:
100068e4:	00 00 06 c2                                         ....

100068e8 <SIZE_DMA_MEMORY_2>:
100068e8:	00 00 02 00                                         ....

100068ec <VIRT_KRNL_PAGE_DIRECTORY>:
100068ec:	00 10 00 c2                                         ....

100068f0 <VIRT_PHYS_PAGE_BITMAP>:
100068f0:	00 00 02 c2                                         ....

100068f4 <SIZE_PHYS_PAGE_BITMAP>:
100068f4:	00 00 02 00                                         ....

100068f8 <VIRT_VIRT_PAGE_BITMAP>:
100068f8:	00 00 04 c2                                         ....

100068fc <SIZE_VIRT_PAGE_BITMAP>:
100068fc:	00 80 00 00                                         ....

10006900 <VIRT_RAM_TABLE>:
10006900:	00 06 00 c2                                         ....

10006904 <VIRT_RAM_TABLE_SIZE>:
10006904:	13 05 00 c2                                         ....

10006908 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10006908:	24 05 00 c2                                         $...

1000690c <SIZE_APP_STACK_USER>:
1000690c:	00 00 18 00                                         ....

10006910 <SIZE_APP_STACK_KRNL>:
10006910:	00 00 08 00                                         ....

10006914 <SIZE_APP_STACK_TOTAL>:
10006914:	00 00 20 00                                         .. .

10006918 <VIRT_APP_DATA>:
10006918:	00 00 00 10                                         ....

1000691c <VIRT_APP_STACK_USER_TOP>:
1000691c:	00 00 00 02                                         ....

10006920 <VIRT_APP_STACK_KRNL_TOP>:
10006920:	00 00 e8 01                                         ....

10006924 <VIRT_HEAP_MIN>:
10006924:	00 00 00 c8                                         ....

10006928 <VIRT_HEAP_MAX>:
10006928:	ff ff ff ef                                         ....

1000692c <VIRT_SBRK_MIN>:
1000692c:	00 00 00 f0                                         ....

10006930 <VIRT_SBRK_MAX>:
10006930:	00 00 c0 ff                                         ....

10006934 <VIRT_ALLOCED_VIRT_PAGES>:
10006934:	00 00 10 c2                                         ....

10006938 <VIRT_ACPI_DRIVER>:
10006938:	00 40 48 c2                                         .@H.

1000693c <TERMINAL_KEYBUFFER_IN_SIZE>:
1000693c:	96 00 00 00                                         ....

10006940 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10006940:	2c 01 00 00                                         ,...

10006944 <vtable for PS2Port>:
	...
	1000694c: R_386_32	PS2Port::~PS2Port()
	10006950: R_386_32	PS2Port::~PS2Port()
	10006954: R_386_32	PS2Port::open(int, int, void*)
	10006958: R_386_32	PS2Port::close(int, int, void*)
	1000695c: R_386_32	Device::hibernate()
	10006960: R_386_32	Device::wake()
	10006964: R_386_32	PS2Port::detect()
	10006968: R_386_32	Device::disableLegacy()
	1000696c: R_386_32	Device::powerSaving(PowerSavingLevel)

10006970 <PHYS_RAM_TABLE_SIZE>:
10006970:	13 05 00 00                                         ....

10006974 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10006974:	24 05 00 00                                         $...

10006978 <PHYS_RAM_TABLE>:
10006978:	00 06 00 00                                         ....

1000697c <PHYS_DMA_MEMORY_1>:
1000697c:	00 00 01 00                                         ....

10006980 <PHYS_PHYS_PAGE_BITMAP>:
10006980:	00 00 02 00                                         ....

10006984 <PHYS_VIRT_PAGE_BITMAP>:
10006984:	00 00 04 00                                         ....

10006988 <PHYS_DMA_MEMORY_2>:
10006988:	00 00 06 00                                         ....

1000698c <PHYS_ALLOCED_VIRT_PAGES>:
1000698c:	00 00 10 00                                         ....

10006990 <PHYS_KRNL_PAGE_DIRECTORY>:
10006990:	00 10 00 00                                         ....

10006994 <VIRT_KERNEL_BASE>:
10006994:	00 00 00 c0                                         ....

10006998 <VIRT_LOW_MEGS>:
10006998:	00 00 00 c2                                         ....

1000699c <VIRT_CPU_SPECIFIC>:
1000699c:	00 00 40 c2                                         ..@.

100069a0 <VIRT_RECURSIVE_SPOT_1>:
100069a0:	00 00 80 c2                                         ....

100069a4 <VIRT_RECURSIVE_SPOT_2>:
100069a4:	00 00 c0 c2                                         ....

100069a8 <VIRT_DMA_MEMORY_1>:
100069a8:	00 00 01 c2                                         ....

100069ac <SIZE_DMA_MEMORY_1>:
100069ac:	00 00 01 00                                         ....

100069b0 <VIRT_DMA_MEMORY_2>:
100069b0:	00 00 06 c2                                         ....

100069b4 <SIZE_DMA_MEMORY_2>:
100069b4:	00 00 02 00                                         ....

100069b8 <VIRT_KRNL_PAGE_DIRECTORY>:
100069b8:	00 10 00 c2                                         ....

100069bc <VIRT_PHYS_PAGE_BITMAP>:
100069bc:	00 00 02 c2                                         ....

100069c0 <SIZE_PHYS_PAGE_BITMAP>:
100069c0:	00 00 02 00                                         ....

100069c4 <VIRT_VIRT_PAGE_BITMAP>:
100069c4:	00 00 04 c2                                         ....

100069c8 <SIZE_VIRT_PAGE_BITMAP>:
100069c8:	00 80 00 00                                         ....

100069cc <VIRT_RAM_TABLE>:
100069cc:	00 06 00 c2                                         ....

100069d0 <VIRT_RAM_TABLE_SIZE>:
100069d0:	13 05 00 c2                                         ....

100069d4 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100069d4:	24 05 00 c2                                         $...

100069d8 <SIZE_APP_STACK_USER>:
100069d8:	00 00 18 00                                         ....

100069dc <SIZE_APP_STACK_KRNL>:
100069dc:	00 00 08 00                                         ....

100069e0 <SIZE_APP_STACK_TOTAL>:
100069e0:	00 00 20 00                                         .. .

100069e4 <VIRT_APP_DATA>:
100069e4:	00 00 00 10                                         ....

100069e8 <VIRT_APP_STACK_USER_TOP>:
100069e8:	00 00 00 02                                         ....

100069ec <VIRT_APP_STACK_KRNL_TOP>:
100069ec:	00 00 e8 01                                         ....

100069f0 <VIRT_HEAP_MIN>:
100069f0:	00 00 00 c8                                         ....

100069f4 <VIRT_HEAP_MAX>:
100069f4:	ff ff ff ef                                         ....

100069f8 <VIRT_SBRK_MIN>:
100069f8:	00 00 00 f0                                         ....

100069fc <VIRT_SBRK_MAX>:
100069fc:	00 00 c0 ff                                         ....

10006a00 <VIRT_ALLOCED_VIRT_PAGES>:
10006a00:	00 00 10 c2                                         ....

10006a04 <VIRT_ACPI_DRIVER>:
10006a04:	00 40 48 c2                                         .@H.

10006a08 <TERMINAL_KEYBUFFER_IN_SIZE>:
10006a08:	96 00 00 00                                         ....

10006a0c <TERMINAL_KEYBUFFER_OUT_SIZE>:
10006a0c:	2c 01 00 00 43 3a 2f 42 61 6e 61 6e 61 2f 41 75     ,...C:/Banana/Au
10006a1c:	64 69 6f 2f 77 69 6e 39 38 73 6e 64 2e 77 61 76     dio/win98snd.wav
10006a2c:	00 53 4f 4e 47 20 53 48 4f 55 4c 44 20 42 45 20     .SONG SHOULD BE 
10006a3c:	44 4f 4e 45 2e 0a 00 53 6f 75 6e 64 42 6c 61 73     DONE...SoundBlas
10006a4c:	74 65 72 20 31 36 00 53 42 31 36 20 49 52 51 2e     ter 16.SB16 IRQ.
10006a5c:	0a 00 73 6f 75 6e 64 62 6c 61 73 74 65 72 20 31     ..soundblaster 1
10006a6c:	36 2e 0a 00 43 41 4e 27 54 20 47 45 54 20 44 4d     6...CAN'T GET DM
10006a7c:	41 20 43 48 41 4e 4e 45 4c 20 35 21 00 73 6f 75     A CHANNEL 5!.sou
10006a8c:	6e 64 62 6c 61 73 74 65 72 20 31 36 20 2d 20 42     ndblaster 16 - B
10006a9c:	2e 0a 00 73 6f 75 6e 64 62 6c 61 73 74 65 72 3a     ...soundblaster:
10006aac:	20 44 4d 41 20 63 68 61 6e 6e 65 6c 20 35 20 68      DMA channel 5 h
10006abc:	61 73 20 61 64 64 72 65 73 73 20 6f 66 20 30 78     as address of 0x
10006acc:	25 58 0a 00 73 6f 75 6e 64 62 6c 61 73 74 65 72     %X..soundblaster
10006adc:	3a 20 44 4d 41 20 63 68 61 6e 6e 65 6c 20 35 20     : DMA channel 5 
10006aec:	68 61 73 20 63 68 2e 20 6e 75 6d 2e 20 6f 66 20     has ch. num. of 
10006afc:	30 78 25 58 0a 00 53 42 31 36 3a 20 63 75 72 72     0x%X..SB16: curr
10006b0c:	65 6e 74 20 44 4d 41 20 72 65 67 69 73 74 65 72     ent DMA register
10006b1c:	20 3d 20 30 78 25 78 0a 00 6f 6e 20 69 72 71 2c      = 0x%x..on irq,
10006b2c:	20 64 6d 61 31 36 41 64 64 72 20 3d 20 30 78 25      dma16Addr = 0x%
10006b3c:	58 2c 20 35 3a 3a 61 64 64 72 20 3d 20 30 78 25     X, 5::addr = 0x%
10006b4c:	58 0a 00 77 72 69 74 65 20 6c 6f 63 61 74 69 6f     X..write locatio
10006b5c:	6e 20 3d 20 30 78 25 58 0a 00 68 65 6c 6c 6f 20     n = 0x%X..hello 
10006b6c:	77 6f 72 6c 64 20 41 21 0a 00 68 65 6c 6c 6f 20     world A!..hello 
10006b7c:	77 6f 72 6c 64 20 42 21 0a 00 66 90                 world B!..f.

10006b88 <vtable for SoundBlaster16>:
	...
	10006b90: R_386_32	SoundBlaster16::~SoundBlaster16()
	10006b94: R_386_32	SoundBlaster16::~SoundBlaster16()
	10006b98: R_386_32	SoundBlaster16::open(int, int, void*)
	10006b9c: R_386_32	SoundBlaster16::close(int, int, void*)
	10006ba0: R_386_32	Device::hibernate()
	10006ba4: R_386_32	Device::wake()
	10006ba8: R_386_32	Device::detect()
	10006bac: R_386_32	Device::disableLegacy()
	10006bb0: R_386_32	Device::powerSaving(PowerSavingLevel)
	10006bb4: R_386_32	SoundBlaster16::beginPlayback()
	10006bb8: R_386_32	SoundBlaster16::stopPlayback()
