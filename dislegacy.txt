
packages/system/32/0002/legacy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	realstart(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <realstart(void*)>:
10000017:	53                   	push   ebx
10000018:	83 ec 14             	sub    esp,0x14
1000001b:	68 58 01 00 00       	push   0x158
10000020:	e8 fc ff ff ff       	call   10000021 <realstart(void*)+0xa>	10000021: R_386_PC32	malloc
10000025:	89 04 24             	mov    DWORD PTR [esp],eax
10000028:	89 c3                	mov    ebx,eax
1000002a:	e8 fc ff ff ff       	call   1000002b <realstart(void*)+0x14>	1000002b: R_386_PC32	ISA::ISA()
1000002f:	58                   	pop    eax
10000030:	5a                   	pop    edx
10000031:	53                   	push   ebx
10000032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000036:	e8 fc ff ff ff       	call   10000037 <realstart(void*)+0x20>	10000037: R_386_PC32	Device::addChild(Device*)
1000003b:	6a 00                	push   0x0
1000003d:	8b 03                	mov    eax,DWORD PTR [ebx]
1000003f:	6a 00                	push   0x0
10000041:	6a 00                	push   0x0
10000043:	53                   	push   ebx
10000044:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000047:	83 c4 28             	add    esp,0x28
1000004a:	5b                   	pop    ebx
1000004b:	c3                   	ret    

1000004c <ISA::ISA()>:
1000004c:	55                   	push   ebp
1000004d:	89 e5                	mov    ebp,esp
1000004f:	83 ec 08             	sub    esp,0x8
10000052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000055:	83 ec 08             	sub    esp,0x8
10000058:	68 88 4c 00 10       	push   0x10004c88	10000059: R_386_32	.text
1000005d:	50                   	push   eax
1000005e:	e8 fc ff ff ff       	call   1000005f <ISA::ISA()+0x13>	1000005f: R_386_PC32	Bus::Bus(char const*)
10000063:	83 c4 10             	add    esp,0x10
10000066:	ba 08 00 00 00       	mov    edx,0x8	10000067: R_386_32	vtable for ISA
1000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000006e:	89 10                	mov    DWORD PTR [eax],edx
10000070:	90                   	nop
10000071:	c9                   	leave  
10000072:	c3                   	ret    
10000073:	90                   	nop

10000074 <ISA::open(int, int, void*)>:
10000074:	83 ec 18             	sub    esp,0x18
10000077:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000007b:	8b 10                	mov    edx,DWORD PTR [eax]
1000007d:	50                   	push   eax
1000007e:	ff 52 18             	call   DWORD PTR [edx+0x18]
10000081:	31 c0                	xor    eax,eax
10000083:	83 c4 1c             	add    esp,0x1c
10000086:	c3                   	ret    
10000087:	90                   	nop

10000088 <ISA::close(int, int, void*)>:
10000088:	31 c0                	xor    eax,eax
1000008a:	c3                   	ret    
1000008b:	90                   	nop

1000008c <ISA::doSpeaker()>:
1000008c:	c3                   	ret    
1000008d:	90                   	nop

1000008e <ISA::doSoundblaster()>:
1000008e:	c3                   	ret    
1000008f:	90                   	nop

10000090 <ISA::doSerial()>:
10000090:	c3                   	ret    
10000091:	90                   	nop

10000092 <ISA::doParallel()>:
10000092:	c3                   	ret    
10000093:	90                   	nop

10000094 <ISA::doGameport()>:
10000094:	53                   	push   ebx
10000095:	83 ec 14             	sub    esp,0x14
10000098:	68 80 01 00 00       	push   0x180
1000009d:	e8 fc ff ff ff       	call   1000009e <ISA::doGameport()+0xa>	1000009e: R_386_PC32	malloc
100000a2:	89 04 24             	mov    DWORD PTR [esp],eax
100000a5:	89 c3                	mov    ebx,eax
100000a7:	e8 fc ff ff ff       	call   100000a8 <ISA::doGameport()+0x14>	100000a8: R_386_PC32	Gameport::Gameport()
100000ac:	58                   	pop    eax
100000ad:	5a                   	pop    edx
100000ae:	53                   	push   ebx
100000af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000b3:	e8 fc ff ff ff       	call   100000b4 <ISA::doGameport()+0x20>	100000b4: R_386_PC32	Device::addChild(Device*)
100000b8:	6a 00                	push   0x0
100000ba:	8b 03                	mov    eax,DWORD PTR [ebx]
100000bc:	6a 00                	push   0x0
100000be:	6a 00                	push   0x0
100000c0:	53                   	push   ebx
100000c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
100000c4:	83 c4 28             	add    esp,0x28
100000c7:	5b                   	pop    ebx
100000c8:	c3                   	ret    
100000c9:	90                   	nop

100000ca <ISA::doFloppy()>:
100000ca:	f6 05 10 04 00 00 01 	test   BYTE PTR ds:0x410,0x1
100000d1:	74 38                	je     1000010b <ISA::doFloppy()+0x41>
100000d3:	53                   	push   ebx
100000d4:	83 ec 14             	sub    esp,0x14
100000d7:	68 b8 01 00 00       	push   0x1b8
100000dc:	e8 fc ff ff ff       	call   100000dd <ISA::doFloppy()+0x13>	100000dd: R_386_PC32	malloc
100000e1:	89 04 24             	mov    DWORD PTR [esp],eax
100000e4:	89 c3                	mov    ebx,eax
100000e6:	e8 fc ff ff ff       	call   100000e7 <ISA::doFloppy()+0x1d>	100000e7: R_386_PC32	Floppy::Floppy()
100000eb:	58                   	pop    eax
100000ec:	5a                   	pop    edx
100000ed:	53                   	push   ebx
100000ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000f2:	e8 fc ff ff ff       	call   100000f3 <ISA::doFloppy()+0x29>	100000f3: R_386_PC32	Device::addChild(Device*)
100000f7:	6a 00                	push   0x0
100000f9:	6a 00                	push   0x0
100000fb:	68 f0 03 00 00       	push   0x3f0
10000100:	53                   	push   ebx
10000101:	e8 fc ff ff ff       	call   10000102 <ISA::doFloppy()+0x38>	10000102: R_386_PC32	Floppy::_open(int, int, void*)
10000106:	83 c4 28             	add    esp,0x28
10000109:	5b                   	pop    ebx
1000010a:	c3                   	ret    
1000010b:	c3                   	ret    

1000010c <ISA::doATA()>:
1000010c:	c3                   	ret    
1000010d:	90                   	nop

1000010e <ISA::doPS2()>:
1000010e:	53                   	push   ebx
1000010f:	83 ec 14             	sub    esp,0x14
10000112:	68 00 00 00 00       	push   0x0	10000113: R_386_32	str_ps2
10000117:	e8 fc ff ff ff       	call   10000118 <ISA::doPS2()+0xa>	10000118: R_386_PC32	Dbg::kprintf(char const*, ...)
1000011c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	1000011f: R_386_32	str_ps2
10000123:	e8 fc ff ff ff       	call   10000124 <ISA::doPS2()+0x16>	10000124: R_386_PC32	Dbg::kprintf(char const*, ...)
10000128:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	1000012b: R_386_32	str_ps2
1000012f:	e8 fc ff ff ff       	call   10000130 <ISA::doPS2()+0x22>	10000130: R_386_PC32	Dbg::kprintf(char const*, ...)
10000134:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000137: R_386_32	str_ps2
1000013b:	e8 fc ff ff ff       	call   1000013c <ISA::doPS2()+0x2e>	1000013c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000140:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
10000147:	e8 fc ff ff ff       	call   10000148 <ISA::doPS2()+0x3a>	10000148: R_386_PC32	malloc
1000014c:	89 04 24             	mov    DWORD PTR [esp],eax
1000014f:	89 c3                	mov    ebx,eax
10000151:	e8 fc ff ff ff       	call   10000152 <ISA::doPS2()+0x44>	10000152: R_386_PC32	PS2::PS2()
10000156:	58                   	pop    eax
10000157:	5a                   	pop    edx
10000158:	53                   	push   ebx
10000159:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000015d:	e8 fc ff ff ff       	call   1000015e <ISA::doPS2()+0x50>	1000015e: R_386_PC32	Device::addChild(Device*)
10000162:	6a 00                	push   0x0
10000164:	8b 03                	mov    eax,DWORD PTR [ebx]
10000166:	6a 00                	push   0x0
10000168:	6a 00                	push   0x0
1000016a:	53                   	push   ebx
1000016b:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000016e:	83 c4 28             	add    esp,0x28
10000171:	5b                   	pop    ebx
10000172:	c3                   	ret    
10000173:	90                   	nop

10000174 <ISA::doRTC()>:
10000174:	c3                   	ret    
10000175:	90                   	nop

10000176 <ISA::detect()>:
10000176:	57                   	push   edi
10000177:	56                   	push   esi
10000178:	53                   	push   ebx
10000179:	83 ec 2c             	sub    esp,0x2c
1000017c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
10000180:	68 5c 01 00 00       	push   0x15c
10000185:	e8 fc ff ff ff       	call   10000186 <ISA::detect()+0x10>	10000186: R_386_PC32	malloc
1000018a:	89 04 24             	mov    DWORD PTR [esp],eax
1000018d:	89 c3                	mov    ebx,eax
1000018f:	e8 fc ff ff ff       	call   10000190 <ISA::detect()+0x1a>	10000190: R_386_PC32	DMA::DMA()
10000194:	59                   	pop    ecx
10000195:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000197: R_386_32	isaDMAController
1000019b:	5e                   	pop    esi
1000019c:	53                   	push   ebx
1000019d:	57                   	push   edi
1000019e:	e8 fc ff ff ff       	call   1000019f <ISA::detect()+0x29>	1000019f: R_386_PC32	Device::addChild(Device*)
100001a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100001a4: R_386_32	isaDMAController
100001a8:	8b 10                	mov    edx,DWORD PTR [eax]
100001aa:	6a 00                	push   0x0
100001ac:	6a 00                	push   0x0
100001ae:	6a 00                	push   0x0
100001b0:	50                   	push   eax
100001b1:	ff 52 08             	call   DWORD PTR [edx+0x8]
100001b4:	83 c4 20             	add    esp,0x20
100001b7:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100001b9: R_386_32	detectDone
100001be:	0f 85 eb 00 00 00    	jne    100002af <ISA::detect()+0x139>
100001c4:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100001c6: R_386_32	detectDone
100001cb:	31 db                	xor    ebx,ebx
100001cd:	52                   	push   edx
100001ce:	6a 01                	push   0x1
100001d0:	68 00 00 00 00       	push   0x0	100001d1: R_386_32	str_isadonesafe
100001d5:	68 00 00 00 00       	push   0x0	100001d6: R_386_32	str_isa
100001da:	e8 fc ff ff ff       	call   100001db <ISA::detect()+0x65>	100001db: R_386_PC32	Reg::readBoolWithDefault(char*, char*, bool)
100001df:	83 c4 10             	add    esp,0x10
100001e2:	50                   	push   eax
100001e3:	50                   	push   eax
100001e4:	68 00 00 00 00       	push   0x0	100001e5: R_386_32	str_devices
100001e9:	8d 74 24 0c          	lea    esi,[esp+0xc]
100001ed:	56                   	push   esi
100001ee:	e8 fc ff ff ff       	call   100001ef <ISA::detect()+0x79>	100001ef: R_386_PC32	strcpy
100001f3:	83 c4 10             	add    esp,0x10
100001f6:	85 db                	test   ebx,ebx
100001f8:	75 09                	jne    10000203 <ISA::detect()+0x8d>
100001fa:	50                   	push   eax
100001fb:	50                   	push   eax
100001fc:	68 00 00 00 00       	push   0x0	100001fd: R_386_32	str_spk
10000201:	eb 52                	jmp    10000255 <ISA::detect()+0xdf>
10000203:	83 fb 01             	cmp    ebx,0x1
10000206:	75 09                	jne    10000211 <ISA::detect()+0x9b>
10000208:	50                   	push   eax
10000209:	50                   	push   eax
1000020a:	68 00 00 00 00       	push   0x0	1000020b: R_386_32	str_rtc
1000020f:	eb 44                	jmp    10000255 <ISA::detect()+0xdf>
10000211:	83 fb 02             	cmp    ebx,0x2
10000214:	75 09                	jne    1000021f <ISA::detect()+0xa9>
10000216:	50                   	push   eax
10000217:	50                   	push   eax
10000218:	68 00 00 00 00       	push   0x0	10000219: R_386_32	str_ps2
1000021d:	eb 36                	jmp    10000255 <ISA::detect()+0xdf>
1000021f:	83 fb 03             	cmp    ebx,0x3
10000222:	75 09                	jne    1000022d <ISA::detect()+0xb7>
10000224:	50                   	push   eax
10000225:	50                   	push   eax
10000226:	68 00 00 00 00       	push   0x0	10000227: R_386_32	str_floppy
1000022b:	eb 28                	jmp    10000255 <ISA::detect()+0xdf>
1000022d:	83 fb 04             	cmp    ebx,0x4
10000230:	75 09                	jne    1000023b <ISA::detect()+0xc5>
10000232:	50                   	push   eax
10000233:	50                   	push   eax
10000234:	68 00 00 00 00       	push   0x0	10000235: R_386_32	str_sb16
10000239:	eb 1a                	jmp    10000255 <ISA::detect()+0xdf>
1000023b:	83 fb 05             	cmp    ebx,0x5
1000023e:	75 09                	jne    10000249 <ISA::detect()+0xd3>
10000240:	51                   	push   ecx
10000241:	51                   	push   ecx
10000242:	68 00 00 00 00       	push   0x0	10000243: R_386_32	str_isaata
10000247:	eb 0c                	jmp    10000255 <ISA::detect()+0xdf>
10000249:	83 fb 06             	cmp    ebx,0x6
1000024c:	75 10                	jne    1000025e <ISA::detect()+0xe8>
1000024e:	52                   	push   edx
1000024f:	52                   	push   edx
10000250:	68 00 00 00 00       	push   0x0	10000251: R_386_32	str_gp
10000255:	56                   	push   esi
10000256:	e8 fc ff ff ff       	call   10000257 <ISA::detect()+0xe1>	10000257: R_386_PC32	strcat
1000025b:	83 c4 10             	add    esp,0x10
1000025e:	50                   	push   eax
1000025f:	6a ff                	push   0xffffffff
10000261:	56                   	push   esi
10000262:	68 00 00 00 00       	push   0x0	10000263: R_386_32	str_isa
10000267:	e8 fc ff ff ff       	call   10000268 <ISA::detect()+0xf2>	10000268: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
1000026c:	83 c4 10             	add    esp,0x10
1000026f:	83 f8 fe             	cmp    eax,0xfffffffe
10000272:	74 31                	je     100002a5 <ISA::detect()+0x12f>
10000274:	83 fb 02             	cmp    ebx,0x2
10000277:	75 0b                	jne    10000284 <ISA::detect()+0x10e>
10000279:	83 ec 0c             	sub    esp,0xc
1000027c:	57                   	push   edi
1000027d:	e8 fc ff ff ff       	call   1000027e <ISA::detect()+0x108>	1000027e: R_386_PC32	ISA::doPS2()
10000282:	eb 1e                	jmp    100002a2 <ISA::detect()+0x12c>
10000284:	83 fb 03             	cmp    ebx,0x3
10000287:	75 0b                	jne    10000294 <ISA::detect()+0x11e>
10000289:	83 ec 0c             	sub    esp,0xc
1000028c:	57                   	push   edi
1000028d:	e8 fc ff ff ff       	call   1000028e <ISA::detect()+0x118>	1000028e: R_386_PC32	ISA::doFloppy()
10000292:	eb 0e                	jmp    100002a2 <ISA::detect()+0x12c>
10000294:	83 fb 06             	cmp    ebx,0x6
10000297:	75 0c                	jne    100002a5 <ISA::detect()+0x12f>
10000299:	83 ec 0c             	sub    esp,0xc
1000029c:	57                   	push   edi
1000029d:	e8 fc ff ff ff       	call   1000029e <ISA::detect()+0x128>	1000029e: R_386_PC32	ISA::doGameport()
100002a2:	83 c4 10             	add    esp,0x10
100002a5:	43                   	inc    ebx
100002a6:	83 fb 07             	cmp    ebx,0x7
100002a9:	0f 85 33 ff ff ff    	jne    100001e2 <ISA::detect()+0x6c>
100002af:	83 c4 20             	add    esp,0x20
100002b2:	5b                   	pop    ebx
100002b3:	5e                   	pop    esi
100002b4:	5f                   	pop    edi
100002b5:	c3                   	ret    

100002b6 <floppyMotorFunction(void*)>:
100002b6:	55                   	push   ebp
100002b7:	89 e5                	mov    ebp,esp
100002b9:	83 ec 18             	sub    esp,0x18
100002bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002bf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100002c2:	a1 00 00 00 00       	mov    eax,ds:0x0	100002c3: R_386_32	irqDisableCounter
100002c7:	48                   	dec    eax
100002c8:	a3 00 00 00 00       	mov    ds:0x0,eax	100002c9: R_386_32	irqDisableCounter
100002cd:	a1 00 00 00 00       	mov    eax,ds:0x0	100002ce: R_386_32	irqDisableCounter
100002d2:	85 c0                	test   eax,eax
100002d4:	75 01                	jne    100002d7 <floppyMotorFunction(void*)+0x21>
100002d6:	fb                   	sti    
100002d7:	83 ec 0c             	sub    esp,0xc
100002da:	68 a0 0f 00 00       	push   0xfa0
100002df:	e8 fc ff ff ff       	call   100002e0 <floppyMotorFunction(void*)+0x2a>	100002e0: R_386_PC32	milliTenthSleep(unsigned int)
100002e4:	83 c4 10             	add    esp,0x10
100002e7:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100002ee:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
100002f2:	7f e3                	jg     100002d7 <floppyMotorFunction(void*)+0x21>
100002f4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100002f7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100002fa:	83 c2 58             	add    edx,0x58
100002fd:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000301:	83 f8 02             	cmp    eax,0x2
10000304:	0f 85 b5 00 00 00    	jne    100003bf <floppyMotorFunction(void*)+0x109>
1000030a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000030d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000310:	83 c2 5c             	add    edx,0x5c
10000313:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000317:	8d 88 70 fe ff ff    	lea    ecx,[eax-0x190]
1000031d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000320:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000323:	83 c2 5c             	add    edx,0x5c
10000326:	89 4c 90 0c          	mov    DWORD PTR [eax+edx*4+0xc],ecx
1000032a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000032d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000330:	83 c2 5c             	add    edx,0x5c
10000333:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000337:	85 c0                	test   eax,eax
10000339:	0f 8f 80 00 00 00    	jg     100003bf <floppyMotorFunction(void*)+0x109>
1000033f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000342:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000345:	83 c2 58             	add    edx,0x58
10000348:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
10000350:	83 ec 0c             	sub    esp,0xc
10000353:	68 5c 4d 00 10       	push   0x10004d5c	10000354: R_386_32	.text
10000358:	e8 fc ff ff ff       	call   10000359 <floppyMotorFunction(void*)+0xa3>	10000359: R_386_PC32	Dbg::kprintf(char const*, ...)
1000035d:	83 c4 10             	add    esp,0x10
10000360:	fa                   	cli    
10000361:	a1 00 00 00 00       	mov    eax,ds:0x0	10000362: R_386_32	irqDisableCounter
10000366:	40                   	inc    eax
10000367:	a3 00 00 00 00       	mov    ds:0x0,eax	10000368: R_386_32	irqDisableCounter
1000036c:	83 ec 08             	sub    esp,0x8
1000036f:	6a 02                	push   0x2
10000371:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000374:	e8 fc ff ff ff       	call   10000375 <floppyMotorFunction(void*)+0xbf>	10000375: R_386_PC32	Floppy::readPort(FloppyReg)
10000379:	83 c4 10             	add    esp,0x10
1000037c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000037f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000382:	ba 10 00 00 00       	mov    edx,0x10
10000387:	88 c1                	mov    cl,al
10000389:	d3 e2                	shl    edx,cl
1000038b:	89 d0                	mov    eax,edx
1000038d:	f7 d0                	not    eax
1000038f:	88 c2                	mov    dl,al
10000391:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000394:	21 d0                	and    eax,edx
10000396:	0f b6 c0             	movzx  eax,al
10000399:	83 ec 04             	sub    esp,0x4
1000039c:	50                   	push   eax
1000039d:	6a 02                	push   0x2
1000039f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100003a2:	e8 fc ff ff ff       	call   100003a3 <floppyMotorFunction(void*)+0xed>	100003a3: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100003a7:	83 c4 10             	add    esp,0x10
100003aa:	a1 00 00 00 00       	mov    eax,ds:0x0	100003ab: R_386_32	irqDisableCounter
100003af:	48                   	dec    eax
100003b0:	a3 00 00 00 00       	mov    ds:0x0,eax	100003b1: R_386_32	irqDisableCounter
100003b5:	a1 00 00 00 00       	mov    eax,ds:0x0	100003b6: R_386_32	irqDisableCounter
100003ba:	85 c0                	test   eax,eax
100003bc:	75 01                	jne    100003bf <floppyMotorFunction(void*)+0x109>
100003be:	fb                   	sti    
100003bf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100003c2:	e9 27 ff ff ff       	jmp    100002ee <floppyMotorFunction(void*)+0x38>

100003c7 <floppyIRQHandler(regs*, void*)>:
100003c7:	55                   	push   ebp
100003c8:	89 e5                	mov    ebp,esp
100003ca:	83 ec 10             	sub    esp,0x10
100003cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100003d0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003d6:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
100003dd:	90                   	nop
100003de:	c9                   	leave  
100003df:	c3                   	ret    

100003e0 <Floppy::Floppy()>:
100003e0:	55                   	push   ebp
100003e1:	89 e5                	mov    ebp,esp
100003e3:	83 ec 08             	sub    esp,0x8
100003e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003e9:	83 ec 08             	sub    esp,0x8
100003ec:	68 7d 4d 00 10       	push   0x10004d7d	100003ed: R_386_32	.text
100003f1:	50                   	push   eax
100003f2:	e8 fc ff ff ff       	call   100003f3 <Floppy::Floppy()+0x13>	100003f3: R_386_PC32	HardDiskController::HardDiskController(char const*)
100003f7:	83 c4 10             	add    esp,0x10
100003fa:	ba 08 00 00 00       	mov    edx,0x8	100003fb: R_386_32	vtable for Floppy
100003ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000402:	89 10                	mov    DWORD PTR [eax],edx
10000404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000407:	66 c7 80 58 01 00 00 f0 03 	mov    WORD PTR [eax+0x158],0x3f0
10000410:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000413:	c6 80 8c 01 00 00 01 	mov    BYTE PTR [eax+0x18c],0x1
1000041a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041d:	c6 80 8d 01 00 00 00 	mov    BYTE PTR [eax+0x18d],0x0
10000424:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000427:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
1000042e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000431:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
10000438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043b:	c6 80 90 01 00 00 01 	mov    BYTE PTR [eax+0x190],0x1
10000442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000445:	c6 80 91 01 00 00 01 	mov    BYTE PTR [eax+0x191],0x1
1000044c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000044f:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000456:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000459:	c7 80 94 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x194],0xffffffff
10000463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000466:	83 ec 0c             	sub    esp,0xc
10000469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000046c:	6a 01                	push   0x1
1000046e:	68 00 00 00 00       	push   0x0	1000046f: R_386_32	floppyIRQHandler(regs*, void*)
10000473:	6a 06                	push   0x6
10000475:	50                   	push   eax
10000476:	e8 fc ff ff ff       	call   10000477 <Floppy::Floppy()+0x97>	10000477: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
1000047b:	83 c4 20             	add    esp,0x20
1000047e:	89 c2                	mov    edx,eax
10000480:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000483:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
10000489:	a1 00 00 00 00       	mov    eax,ds:0x0	1000048a: R_386_32	kernelProcess
1000048e:	68 d2 00 00 00       	push   0xd2
10000493:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000496:	68 00 00 00 00       	push   0x0	10000497: R_386_32	floppyMotorFunction(void*)
1000049b:	50                   	push   eax
1000049c:	e8 fc ff ff ff       	call   1000049d <Floppy::Floppy()+0xbd>	1000049d: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100004a1:	83 c4 10             	add    esp,0x10
100004a4:	89 c2                	mov    edx,eax
100004a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004a9:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
100004af:	a1 00 00 00 00       	mov    eax,ds:0x0	100004b0: R_386_32	isaDMAController
100004b4:	83 ec 08             	sub    esp,0x8
100004b7:	6a 02                	push   0x2
100004b9:	50                   	push   eax
100004ba:	e8 fc ff ff ff       	call   100004bb <Floppy::Floppy()+0xdb>	100004bb: R_386_PC32	DMA::tryLockChannel(int)
100004bf:	83 c4 10             	add    esp,0x10
100004c2:	89 c2                	mov    edx,eax
100004c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004c7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
100004cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004d0:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
100004d6:	83 ec 08             	sub    esp,0x8
100004d9:	68 00 48 00 00       	push   0x4800
100004de:	50                   	push   eax
100004df:	e8 fc ff ff ff       	call   100004e0 <Floppy::Floppy()+0x100>	100004e0: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
100004e4:	83 c4 10             	add    esp,0x10
100004e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004ea:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
100004f0:	83 ec 0c             	sub    esp,0xc
100004f3:	50                   	push   eax
100004f4:	e8 fc ff ff ff       	call   100004f5 <Floppy::Floppy()+0x115>	100004f5: R_386_PC32	DMAChannel::getAddress()
100004f9:	83 c4 10             	add    esp,0x10
100004fc:	89 c2                	mov    edx,eax
100004fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000501:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
10000507:	90                   	nop
10000508:	c9                   	leave  
10000509:	c3                   	ret    

1000050a <Floppy::wasFailure()>:
1000050a:	55                   	push   ebp
1000050b:	89 e5                	mov    ebp,esp
1000050d:	83 ec 10             	sub    esp,0x10
10000510:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000513:	c6 80 8f 01 00 00 01 	mov    BYTE PTR [eax+0x18f],0x1
1000051a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000051d:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
10000523:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000529:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000530:	8a 45 ff             	mov    al,BYTE PTR [ebp-0x1]
10000533:	c9                   	leave  
10000534:	c3                   	ret    
10000535:	90                   	nop

10000536 <Floppy::writeCommand(unsigned char)>:
10000536:	55                   	push   ebp
10000537:	89 e5                	mov    ebp,esp
10000539:	83 ec 28             	sub    esp,0x28
1000053c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000053f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000542:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000545:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
1000054b:	84 c0                	test   al,al
1000054d:	74 10                	je     1000055f <Floppy::writeCommand(unsigned char)+0x29>
1000054f:	83 ec 0c             	sub    esp,0xc
10000552:	68 94 4d 00 10       	push   0x10004d94	10000553: R_386_32	.text
10000557:	e8 fc ff ff ff       	call   10000558 <Floppy::writeCommand(unsigned char)+0x22>	10000558: R_386_PC32	Krnl::panic(char const*)
1000055c:	83 c4 10             	add    esp,0x10
1000055f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000562:	8a 80 8f 01 00 00    	mov    al,BYTE PTR [eax+0x18f]
10000568:	83 f0 01             	xor    eax,0x1
1000056b:	84 c0                	test   al,al
1000056d:	74 10                	je     1000057f <Floppy::writeCommand(unsigned char)+0x49>
1000056f:	83 ec 0c             	sub    esp,0xc
10000572:	68 c4 4d 00 10       	push   0x10004dc4	10000573: R_386_32	.text
10000577:	e8 fc ff ff ff       	call   10000578 <Floppy::writeCommand(unsigned char)+0x42>	10000578: R_386_PC32	Krnl::panic(char const*)
1000057c:	83 c4 10             	add    esp,0x10
1000057f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000582:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
10000589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000058c:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000593:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000059a:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
1000059e:	7f 4e                	jg     100005ee <Floppy::writeCommand(unsigned char)+0xb8>
100005a0:	83 ec 0c             	sub    esp,0xc
100005a3:	6a 64                	push   0x64
100005a5:	e8 fc ff ff ff       	call   100005a6 <Floppy::writeCommand(unsigned char)+0x70>	100005a6: R_386_PC32	milliTenthSleep(unsigned int)
100005aa:	83 c4 10             	add    esp,0x10
100005ad:	83 ec 08             	sub    esp,0x8
100005b0:	6a 04                	push   0x4
100005b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005b5:	e8 fc ff ff ff       	call   100005b6 <Floppy::writeCommand(unsigned char)+0x80>	100005b6: R_386_PC32	Floppy::readPort(FloppyReg)
100005ba:	83 c4 10             	add    esp,0x10
100005bd:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100005c0:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100005c3:	84 c0                	test   al,al
100005c5:	79 22                	jns    100005e9 <Floppy::writeCommand(unsigned char)+0xb3>
100005c7:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100005cb:	83 e0 40             	and    eax,0x40
100005ce:	85 c0                	test   eax,eax
100005d0:	75 17                	jne    100005e9 <Floppy::writeCommand(unsigned char)+0xb3>
100005d2:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
100005d6:	83 ec 04             	sub    esp,0x4
100005d9:	50                   	push   eax
100005da:	6a 05                	push   0x5
100005dc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005df:	e8 fc ff ff ff       	call   100005e0 <Floppy::writeCommand(unsigned char)+0xaa>	100005e0: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100005e4:	83 c4 10             	add    esp,0x10
100005e7:	eb 0f                	jmp    100005f8 <Floppy::writeCommand(unsigned char)+0xc2>
100005e9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100005ec:	eb ac                	jmp    1000059a <Floppy::writeCommand(unsigned char)+0x64>
100005ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005f1:	c6 80 8e 01 00 00 01 	mov    BYTE PTR [eax+0x18e],0x1
100005f8:	c9                   	leave  
100005f9:	c3                   	ret    

100005fa <Floppy::readData()>:
100005fa:	55                   	push   ebp
100005fb:	89 e5                	mov    ebp,esp
100005fd:	83 ec 18             	sub    esp,0x18
10000600:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000603:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
10000609:	84 c0                	test   al,al
1000060b:	74 10                	je     1000061d <Floppy::readData()+0x23>
1000060d:	83 ec 0c             	sub    esp,0xc
10000610:	68 94 4d 00 10       	push   0x10004d94	10000611: R_386_32	.text
10000615:	e8 fc ff ff ff       	call   10000616 <Floppy::readData()+0x1c>	10000616: R_386_PC32	Krnl::panic(char const*)
1000061a:	83 c4 10             	add    esp,0x10
1000061d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000620:	8a 80 8f 01 00 00    	mov    al,BYTE PTR [eax+0x18f]
10000626:	83 f0 01             	xor    eax,0x1
10000629:	84 c0                	test   al,al
1000062b:	74 10                	je     1000063d <Floppy::readData()+0x43>
1000062d:	83 ec 0c             	sub    esp,0xc
10000630:	68 c4 4d 00 10       	push   0x10004dc4	10000631: R_386_32	.text
10000635:	e8 fc ff ff ff       	call   10000636 <Floppy::readData()+0x3c>	10000636: R_386_PC32	Krnl::panic(char const*)
1000063a:	83 c4 10             	add    esp,0x10
1000063d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000640:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
10000647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000064a:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000651:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000658:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
1000065c:	7f 49                	jg     100006a7 <Floppy::readData()+0xad>
1000065e:	83 ec 0c             	sub    esp,0xc
10000661:	6a 64                	push   0x64
10000663:	e8 fc ff ff ff       	call   10000664 <Floppy::readData()+0x6a>	10000664: R_386_PC32	milliTenthSleep(unsigned int)
10000668:	83 c4 10             	add    esp,0x10
1000066b:	83 ec 08             	sub    esp,0x8
1000066e:	6a 04                	push   0x4
10000670:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000673:	e8 fc ff ff ff       	call   10000674 <Floppy::readData()+0x7a>	10000674: R_386_PC32	Floppy::readPort(FloppyReg)
10000678:	83 c4 10             	add    esp,0x10
1000067b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000067e:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000681:	84 c0                	test   al,al
10000683:	79 1d                	jns    100006a2 <Floppy::readData()+0xa8>
10000685:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10000689:	83 e0 40             	and    eax,0x40
1000068c:	85 c0                	test   eax,eax
1000068e:	74 12                	je     100006a2 <Floppy::readData()+0xa8>
10000690:	83 ec 08             	sub    esp,0x8
10000693:	6a 05                	push   0x5
10000695:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000698:	e8 fc ff ff ff       	call   10000699 <Floppy::readData()+0x9f>	10000699: R_386_PC32	Floppy::readPort(FloppyReg)
1000069d:	83 c4 10             	add    esp,0x10
100006a0:	eb 11                	jmp    100006b3 <Floppy::readData()+0xb9>
100006a2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100006a5:	eb b1                	jmp    10000658 <Floppy::readData()+0x5e>
100006a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006aa:	c6 80 8e 01 00 00 01 	mov    BYTE PTR [eax+0x18e],0x1
100006b1:	b0 00                	mov    al,0x0
100006b3:	c9                   	leave  
100006b4:	c3                   	ret    
100006b5:	90                   	nop

100006b6 <Floppy::readPort(FloppyReg)>:
100006b6:	55                   	push   ebp
100006b7:	89 e5                	mov    ebp,esp
100006b9:	83 ec 10             	sub    esp,0x10
100006bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006bf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100006c5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100006c8:	01 d0                	add    eax,edx
100006ca:	0f b7 c0             	movzx  eax,ax
100006cd:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
100006d1:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
100006d5:	89 c2                	mov    edx,eax
100006d7:	ec                   	in     al,dx
100006d8:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
100006db:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
100006de:	90                   	nop
100006df:	c9                   	leave  
100006e0:	c3                   	ret    
100006e1:	90                   	nop

100006e2 <Floppy::writePort(FloppyReg, unsigned char)>:
100006e2:	55                   	push   ebp
100006e3:	89 e5                	mov    ebp,esp
100006e5:	83 ec 14             	sub    esp,0x14
100006e8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100006eb:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
100006ee:	0f b6 4d ec          	movzx  ecx,BYTE PTR [ebp-0x14]
100006f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006f5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100006fb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100006fe:	01 d0                	add    eax,edx
10000700:	0f b7 c0             	movzx  eax,ax
10000703:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
10000707:	88 4d fd             	mov    BYTE PTR [ebp-0x3],cl
1000070a:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
1000070d:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
10000711:	ee                   	out    dx,al
10000712:	90                   	nop
10000713:	c9                   	leave  
10000714:	c3                   	ret    
10000715:	90                   	nop

10000716 <Floppy::driveDetection()>:
10000716:	55                   	push   ebp
10000717:	89 e5                	mov    ebp,esp
10000719:	53                   	push   ebx
1000071a:	83 ec 24             	sub    esp,0x24
1000071d:	83 ec 0c             	sub    esp,0xc
10000720:	68 f2 4d 00 10       	push   0x10004df2	10000721: R_386_32	.text
10000725:	e8 fc ff ff ff       	call   10000726 <Floppy::driveDetection()+0x10>	10000726: R_386_PC32	Dbg::kprintf(char const*, ...)
1000072a:	83 c4 10             	add    esp,0x10
1000072d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000730:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000736:	66 3d f0 03          	cmp    ax,0x3f0
1000073a:	0f 85 28 01 00 00    	jne    10000868 <Floppy::driveDetection()+0x152>
10000740:	a1 00 00 00 00       	mov    eax,ds:0x0	10000741: R_386_32	Krnl::computer
10000745:	83 ec 08             	sub    esp,0x8
10000748:	6a 10                	push   0x10
1000074a:	50                   	push   eax
1000074b:	e8 fc ff ff ff       	call   1000074c <Floppy::driveDetection()+0x36>	1000074c: R_386_PC32	Computer::readCMOS(unsigned char)
10000750:	83 c4 10             	add    esp,0x10
10000753:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000756:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000075a:	c1 f8 04             	sar    eax,0x4
1000075d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000760:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000764:	83 e0 0f             	and    eax,0xf
10000767:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000076a:	83 ec 08             	sub    esp,0x8
1000076d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000770:	68 0c 4e 00 10       	push   0x10004e0c	10000771: R_386_32	.text
10000775:	e8 fc ff ff ff       	call   10000776 <Floppy::driveDetection()+0x60>	10000776: R_386_PC32	Dbg::kprintf(char const*, ...)
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	83 ec 08             	sub    esp,0x8
10000780:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000783:	68 20 4e 00 10       	push   0x10004e20	10000784: R_386_32	.text
10000788:	e8 fc ff ff ff       	call   10000789 <Floppy::driveDetection()+0x73>	10000789: R_386_PC32	Dbg::kprintf(char const*, ...)
1000078d:	83 c4 10             	add    esp,0x10
10000790:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10000794:	74 63                	je     100007f9 <Floppy::driveDetection()+0xe3>
10000796:	c7 45 e0 74 01 00 00 	mov    DWORD PTR [ebp-0x20],0x174
1000079d:	83 ec 0c             	sub    esp,0xc
100007a0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100007a3:	e8 fc ff ff ff       	call   100007a4 <Floppy::driveDetection()+0x8e>	100007a4: R_386_PC32	malloc
100007a8:	83 c4 10             	add    esp,0x10
100007ab:	89 c3                	mov    ebx,eax
100007ad:	83 ec 0c             	sub    esp,0xc
100007b0:	53                   	push   ebx
100007b1:	e8 fc ff ff ff       	call   100007b2 <Floppy::driveDetection()+0x9c>	100007b2: R_386_PC32	FloppyDrive::FloppyDrive()
100007b6:	83 c4 10             	add    esp,0x10
100007b9:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
100007bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007bf:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100007c2:	89 90 98 01 00 00    	mov    DWORD PTR [eax+0x198],edx
100007c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007cb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
100007ce:	89 90 a8 01 00 00    	mov    DWORD PTR [eax+0x1a8],edx
100007d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007d7:	83 ec 08             	sub    esp,0x8
100007da:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007dd:	50                   	push   eax
100007de:	e8 fc ff ff ff       	call   100007df <Floppy::driveDetection()+0xc9>	100007df: R_386_PC32	Device::addChild(Device*)
100007e3:	83 c4 10             	add    esp,0x10
100007e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100007e9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100007ec:	6a 00                	push   0x0
100007ee:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007f1:	e8 fc ff ff ff       	call   100007f2 <Floppy::driveDetection()+0xdc>	100007f2: R_386_PC32	FloppyDrive::_open(int, int, void*)
100007f6:	83 c4 10             	add    esp,0x10
100007f9:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100007fd:	74 69                	je     10000868 <Floppy::driveDetection()+0x152>
100007ff:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
10000803:	74 63                	je     10000868 <Floppy::driveDetection()+0x152>
10000805:	c7 45 dc 74 01 00 00 	mov    DWORD PTR [ebp-0x24],0x174
1000080c:	83 ec 0c             	sub    esp,0xc
1000080f:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10000812:	e8 fc ff ff ff       	call   10000813 <Floppy::driveDetection()+0xfd>	10000813: R_386_PC32	malloc
10000817:	83 c4 10             	add    esp,0x10
1000081a:	89 c3                	mov    ebx,eax
1000081c:	83 ec 0c             	sub    esp,0xc
1000081f:	53                   	push   ebx
10000820:	e8 fc ff ff ff       	call   10000821 <Floppy::driveDetection()+0x10b>	10000821: R_386_PC32	FloppyDrive::FloppyDrive()
10000825:	83 c4 10             	add    esp,0x10
10000828:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
1000082b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000082e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000831:	89 90 9c 01 00 00    	mov    DWORD PTR [eax+0x19c],edx
10000837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000083a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000083d:	89 90 ac 01 00 00    	mov    DWORD PTR [eax+0x1ac],edx
10000843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000846:	83 ec 08             	sub    esp,0x8
10000849:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000084c:	50                   	push   eax
1000084d:	e8 fc ff ff ff       	call   1000084e <Floppy::driveDetection()+0x138>	1000084e: R_386_PC32	Device::addChild(Device*)
10000852:	83 c4 10             	add    esp,0x10
10000855:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000858:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000085b:	6a 01                	push   0x1
1000085d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000860:	e8 fc ff ff ff       	call   10000861 <Floppy::driveDetection()+0x14b>	10000861: R_386_PC32	FloppyDrive::_open(int, int, void*)
10000865:	83 c4 10             	add    esp,0x10
10000868:	90                   	nop
10000869:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000086c:	c9                   	leave  
1000086d:	c3                   	ret    

1000086e <Floppy::close(int, int, void*)>:
1000086e:	b8 00 00 00 00       	mov    eax,0x0
10000873:	c3                   	ret    

10000874 <Floppy::open(int, int, void*)>:
10000874:	b8 00 00 00 00       	mov    eax,0x0
10000879:	c3                   	ret    

1000087a <Floppy::_open(int, int, void*)>:
1000087a:	55                   	push   ebp
1000087b:	89 e5                	mov    ebp,esp
1000087d:	83 ec 18             	sub    esp,0x18
10000880:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000883:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000886:	66 89 82 58 01 00 00 	mov    WORD PTR [edx+0x158],ax
1000088d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000890:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000896:	0f b6 c8             	movzx  ecx,al
10000899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000089c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100008a2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008a5:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100008aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008ad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100008b3:	0f b6 d0             	movzx  edx,al
100008b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008b9:	c6 44 90 06 06       	mov    BYTE PTR [eax+edx*4+0x6],0x6
100008be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008c1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100008c7:	8d 50 01             	lea    edx,[eax+0x1]
100008ca:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100008cd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100008d3:	0f b6 d0             	movzx  edx,al
100008d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008d9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100008dd:	83 e1 3f             	and    ecx,0x3f
100008e0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100008e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008e7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100008ed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008f0:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
100008f6:	0f b6 ca             	movzx  ecx,dl
100008f9:	83 c0 07             	add    eax,0x7
100008fc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008ff:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
10000904:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000907:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000090d:	0f b6 d0             	movzx  edx,al
10000910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000913:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000918:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000091b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000921:	8d 50 01             	lea    edx,[eax+0x1]
10000924:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000927:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000092d:	0f b6 d0             	movzx  edx,al
10000930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000933:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000937:	83 e1 3f             	and    ecx,0x3f
1000093a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000093e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000945:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
10000949:	7f 27                	jg     10000972 <Floppy::_open(int, int, void*)+0xf8>
1000094b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000094e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000951:	83 c2 68             	add    edx,0x68
10000954:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
1000095c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000095f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000962:	83 c2 58             	add    edx,0x58
10000965:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
1000096d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000970:	eb d3                	jmp    10000945 <Floppy::_open(int, int, void*)+0xcb>
10000972:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000975:	e8 fc ff ff ff       	call   10000976 <Floppy::_open(int, int, void*)+0xfc>	10000976: R_386_PC32	Floppy::wasFailure()
1000097a:	83 c4 04             	add    esp,0x4
1000097d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000980:	c6 80 91 01 00 00 01 	mov    BYTE PTR [eax+0x191],0x1
10000987:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000098a:	c6 80 8d 01 00 00 00 	mov    BYTE PTR [eax+0x18d],0x0
10000991:	83 ec 0c             	sub    esp,0xc
10000994:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000997:	e8 fc ff ff ff       	call   10000998 <Floppy::_open(int, int, void*)+0x11e>	10000998: R_386_PC32	Floppy::reset()
1000099c:	83 c4 10             	add    esp,0x10
1000099f:	83 ec 0c             	sub    esp,0xc
100009a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009a5:	e8 fc ff ff ff       	call   100009a6 <Floppy::_open(int, int, void*)+0x12c>	100009a6: R_386_PC32	Floppy::driveDetection()
100009aa:	83 c4 10             	add    esp,0x10
100009ad:	b8 00 00 00 00       	mov    eax,0x0
100009b2:	c9                   	leave  
100009b3:	c3                   	ret    

100009b4 <Floppy::senseInterrupt(int*, int*)>:
100009b4:	55                   	push   ebp
100009b5:	89 e5                	mov    ebp,esp
100009b7:	83 ec 08             	sub    esp,0x8
100009ba:	83 ec 08             	sub    esp,0x8
100009bd:	6a 08                	push   0x8
100009bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009c2:	e8 fc ff ff ff       	call   100009c3 <Floppy::senseInterrupt(int*, int*)+0xf>	100009c3: R_386_PC32	Floppy::writeCommand(unsigned char)
100009c7:	83 c4 10             	add    esp,0x10
100009ca:	83 ec 0c             	sub    esp,0xc
100009cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009d0:	e8 fc ff ff ff       	call   100009d1 <Floppy::senseInterrupt(int*, int*)+0x1d>	100009d1: R_386_PC32	Floppy::wasFailure()
100009d5:	83 c4 10             	add    esp,0x10
100009d8:	84 c0                	test   al,al
100009da:	74 04                	je     100009e0 <Floppy::senseInterrupt(int*, int*)+0x2c>
100009dc:	b0 00                	mov    al,0x0
100009de:	eb 5a                	jmp    10000a3a <Floppy::senseInterrupt(int*, int*)+0x86>
100009e0:	83 ec 0c             	sub    esp,0xc
100009e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009e6:	e8 fc ff ff ff       	call   100009e7 <Floppy::senseInterrupt(int*, int*)+0x33>	100009e7: R_386_PC32	Floppy::readData()
100009eb:	83 c4 10             	add    esp,0x10
100009ee:	0f b6 d0             	movzx  edx,al
100009f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100009f4:	89 10                	mov    DWORD PTR [eax],edx
100009f6:	83 ec 0c             	sub    esp,0xc
100009f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009fc:	e8 fc ff ff ff       	call   100009fd <Floppy::senseInterrupt(int*, int*)+0x49>	100009fd: R_386_PC32	Floppy::wasFailure()
10000a01:	83 c4 10             	add    esp,0x10
10000a04:	84 c0                	test   al,al
10000a06:	74 04                	je     10000a0c <Floppy::senseInterrupt(int*, int*)+0x58>
10000a08:	b0 00                	mov    al,0x0
10000a0a:	eb 2e                	jmp    10000a3a <Floppy::senseInterrupt(int*, int*)+0x86>
10000a0c:	83 ec 0c             	sub    esp,0xc
10000a0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a12:	e8 fc ff ff ff       	call   10000a13 <Floppy::senseInterrupt(int*, int*)+0x5f>	10000a13: R_386_PC32	Floppy::readData()
10000a17:	83 c4 10             	add    esp,0x10
10000a1a:	0f b6 d0             	movzx  edx,al
10000a1d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000a20:	89 10                	mov    DWORD PTR [eax],edx
10000a22:	83 ec 0c             	sub    esp,0xc
10000a25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a28:	e8 fc ff ff ff       	call   10000a29 <Floppy::senseInterrupt(int*, int*)+0x75>	10000a29: R_386_PC32	Floppy::wasFailure()
10000a2d:	83 c4 10             	add    esp,0x10
10000a30:	84 c0                	test   al,al
10000a32:	74 04                	je     10000a38 <Floppy::senseInterrupt(int*, int*)+0x84>
10000a34:	b0 00                	mov    al,0x0
10000a36:	eb 02                	jmp    10000a3a <Floppy::senseInterrupt(int*, int*)+0x86>
10000a38:	b0 01                	mov    al,0x1
10000a3a:	c9                   	leave  
10000a3b:	c3                   	ret    

10000a3c <Floppy::lock()>:
10000a3c:	55                   	push   ebp
10000a3d:	89 e5                	mov    ebp,esp
10000a3f:	83 ec 08             	sub    esp,0x8
10000a42:	83 ec 08             	sub    esp,0x8
10000a45:	6a 14                	push   0x14
10000a47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a4a:	e8 fc ff ff ff       	call   10000a4b <Floppy::lock()+0xf>	10000a4b: R_386_PC32	Floppy::writeCommand(unsigned char)
10000a4f:	83 c4 10             	add    esp,0x10
10000a52:	83 ec 0c             	sub    esp,0xc
10000a55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a58:	e8 fc ff ff ff       	call   10000a59 <Floppy::lock()+0x1d>	10000a59: R_386_PC32	Floppy::wasFailure()
10000a5d:	83 c4 10             	add    esp,0x10
10000a60:	84 c0                	test   al,al
10000a62:	74 04                	je     10000a68 <Floppy::lock()+0x2c>
10000a64:	b0 00                	mov    al,0x0
10000a66:	eb 26                	jmp    10000a8e <Floppy::lock()+0x52>
10000a68:	83 ec 0c             	sub    esp,0xc
10000a6b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a6e:	e8 fc ff ff ff       	call   10000a6f <Floppy::lock()+0x33>	10000a6f: R_386_PC32	Floppy::readData()
10000a73:	83 c4 10             	add    esp,0x10
10000a76:	83 ec 0c             	sub    esp,0xc
10000a79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a7c:	e8 fc ff ff ff       	call   10000a7d <Floppy::lock()+0x41>	10000a7d: R_386_PC32	Floppy::wasFailure()
10000a81:	83 c4 10             	add    esp,0x10
10000a84:	84 c0                	test   al,al
10000a86:	74 04                	je     10000a8c <Floppy::lock()+0x50>
10000a88:	b0 00                	mov    al,0x0
10000a8a:	eb 02                	jmp    10000a8e <Floppy::lock()+0x52>
10000a8c:	b0 01                	mov    al,0x1
10000a8e:	c9                   	leave  
10000a8f:	c3                   	ret    

10000a90 <Floppy::waitIRQ(int)>:
10000a90:	55                   	push   ebp
10000a91:	89 e5                	mov    ebp,esp
10000a93:	83 ec 18             	sub    esp,0x18
10000a96:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000a9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000aa0:	8a 80 68 01 00 00    	mov    al,BYTE PTR [eax+0x168]
10000aa6:	84 c0                	test   al,al
10000aa8:	75 1f                	jne    10000ac9 <Floppy::waitIRQ(int)+0x39>
10000aaa:	83 ec 0c             	sub    esp,0xc
10000aad:	68 f4 01 00 00       	push   0x1f4
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <Floppy::waitIRQ(int)+0x23>	10000ab3: R_386_PC32	milliTenthSleep(unsigned int)
10000ab7:	83 c4 10             	add    esp,0x10
10000aba:	83 45 f4 32          	add    DWORD PTR [ebp-0xc],0x32
10000abe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000ac1:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
10000ac4:	7d 02                	jge    10000ac8 <Floppy::waitIRQ(int)+0x38>
10000ac6:	eb d5                	jmp    10000a9d <Floppy::waitIRQ(int)+0xd>
10000ac8:	90                   	nop
10000ac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000acc:	8a 80 68 01 00 00    	mov    al,BYTE PTR [eax+0x168]
10000ad2:	c9                   	leave  
10000ad3:	c3                   	ret    

10000ad4 <Floppy::reset()>:
10000ad4:	55                   	push   ebp
10000ad5:	89 e5                	mov    ebp,esp
10000ad7:	83 ec 28             	sub    esp,0x28
10000ada:	83 ec 0c             	sub    esp,0xc
10000add:	68 34 4e 00 10       	push   0x10004e34	10000ade: R_386_32	.text
10000ae2:	e8 fc ff ff ff       	call   10000ae3 <Floppy::reset()+0xf>	10000ae3: R_386_PC32	Dbg::kprintf(char const*, ...)
10000ae7:	83 c4 10             	add    esp,0x10
10000aea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000aed:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10000af4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000af7:	c7 80 94 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x194],0xffffffff
10000b01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b04:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000b0b:	83 ec 08             	sub    esp,0x8
10000b0e:	6a 02                	push   0x2
10000b10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b13:	e8 fc ff ff ff       	call   10000b14 <Floppy::reset()+0x40>	10000b14: R_386_PC32	Floppy::readPort(FloppyReg)
10000b18:	83 c4 10             	add    esp,0x10
10000b1b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000b1e:	83 ec 04             	sub    esp,0x4
10000b21:	6a 00                	push   0x0
10000b23:	6a 02                	push   0x2
10000b25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b28:	e8 fc ff ff ff       	call   10000b29 <Floppy::reset()+0x55>	10000b29: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000b2d:	83 c4 10             	add    esp,0x10
10000b30:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000b33:	83 c8 0c             	or     eax,0xc
10000b36:	0f b6 c0             	movzx  eax,al
10000b39:	83 ec 04             	sub    esp,0x4
10000b3c:	50                   	push   eax
10000b3d:	6a 02                	push   0x2
10000b3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b42:	e8 fc ff ff ff       	call   10000b43 <Floppy::reset()+0x6f>	10000b43: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000b47:	83 c4 10             	add    esp,0x10
10000b4a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
10000b4e:	83 e0 08             	and    eax,0x8
10000b51:	85 c0                	test   eax,eax
10000b53:	74 3f                	je     10000b94 <Floppy::reset()+0xc0>
10000b55:	83 ec 08             	sub    esp,0x8
10000b58:	68 90 01 00 00       	push   0x190
10000b5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b60:	e8 fc ff ff ff       	call   10000b61 <Floppy::reset()+0x8d>	10000b61: R_386_PC32	Floppy::waitIRQ(int)
10000b65:	83 c4 10             	add    esp,0x10
10000b68:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10000b6b:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
10000b6e:	83 f0 01             	xor    eax,0x1
10000b71:	84 c0                	test   al,al
10000b73:	74 3e                	je     10000bb3 <Floppy::reset()+0xdf>
10000b75:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000b78:	83 c8 0c             	or     eax,0xc
10000b7b:	0f b6 c0             	movzx  eax,al
10000b7e:	83 ec 04             	sub    esp,0x4
10000b81:	50                   	push   eax
10000b82:	6a 02                	push   0x2
10000b84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b87:	e8 fc ff ff ff       	call   10000b88 <Floppy::reset()+0xb4>	10000b88: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000b8c:	83 c4 10             	add    esp,0x10
10000b8f:	e9 56 ff ff ff       	jmp    10000aea <Floppy::reset()+0x16>
10000b94:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000b97:	83 c8 0c             	or     eax,0xc
10000b9a:	0f b6 c0             	movzx  eax,al
10000b9d:	83 ec 04             	sub    esp,0x4
10000ba0:	50                   	push   eax
10000ba1:	6a 02                	push   0x2
10000ba3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ba6:	e8 fc ff ff ff       	call   10000ba7 <Floppy::reset()+0xd3>	10000ba7: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000bab:	83 c4 10             	add    esp,0x10
10000bae:	e9 37 ff ff ff       	jmp    10000aea <Floppy::reset()+0x16>
10000bb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bb6:	8a 80 91 01 00 00    	mov    al,BYTE PTR [eax+0x191]
10000bbc:	84 c0                	test   al,al
10000bbe:	0f 84 8f 00 00 00    	je     10000c53 <Floppy::reset()+0x17f>
10000bc4:	83 ec 04             	sub    esp,0x4
10000bc7:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000bca:	50                   	push   eax
10000bcb:	8d 45 e8             	lea    eax,[ebp-0x18]
10000bce:	50                   	push   eax
10000bcf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bd2:	e8 fc ff ff ff       	call   10000bd3 <Floppy::reset()+0xff>	10000bd3: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000bd7:	83 c4 10             	add    esp,0x10
10000bda:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000bdd:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000be1:	74 19                	je     10000bfc <Floppy::reset()+0x128>
10000be3:	83 ec 04             	sub    esp,0x4
10000be6:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000be9:	50                   	push   eax
10000bea:	8d 45 e8             	lea    eax,[ebp-0x18]
10000bed:	50                   	push   eax
10000bee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bf1:	e8 fc ff ff ff       	call   10000bf2 <Floppy::reset()+0x11e>	10000bf2: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000bf6:	83 c4 10             	add    esp,0x10
10000bf9:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000bfc:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000c00:	74 19                	je     10000c1b <Floppy::reset()+0x147>
10000c02:	83 ec 04             	sub    esp,0x4
10000c05:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000c08:	50                   	push   eax
10000c09:	8d 45 e8             	lea    eax,[ebp-0x18]
10000c0c:	50                   	push   eax
10000c0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c10:	e8 fc ff ff ff       	call   10000c11 <Floppy::reset()+0x13d>	10000c11: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000c15:	83 c4 10             	add    esp,0x10
10000c18:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c1b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000c1f:	74 19                	je     10000c3a <Floppy::reset()+0x166>
10000c21:	83 ec 04             	sub    esp,0x4
10000c24:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000c27:	50                   	push   eax
10000c28:	8d 45 e8             	lea    eax,[ebp-0x18]
10000c2b:	50                   	push   eax
10000c2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c2f:	e8 fc ff ff ff       	call   10000c30 <Floppy::reset()+0x15c>	10000c30: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000c34:	83 c4 10             	add    esp,0x10
10000c37:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c3a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000c3d:	83 f0 01             	xor    eax,0x1
10000c40:	84 c0                	test   al,al
10000c42:	74 0f                	je     10000c53 <Floppy::reset()+0x17f>
10000c44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c47:	c6 80 91 01 00 00 00 	mov    BYTE PTR [eax+0x191],0x0
10000c4e:	e9 97 fe ff ff       	jmp    10000aea <Floppy::reset()+0x16>
10000c53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c56:	8a 80 8c 01 00 00    	mov    al,BYTE PTR [eax+0x18c]
10000c5c:	84 c0                	test   al,al
10000c5e:	75 14                	jne    10000c74 <Floppy::reset()+0x1a0>
10000c60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c63:	8a 80 8d 01 00 00    	mov    al,BYTE PTR [eax+0x18d]
10000c69:	83 f0 01             	xor    eax,0x1
10000c6c:	84 c0                	test   al,al
10000c6e:	0f 84 91 00 00 00    	je     10000d05 <Floppy::reset()+0x231>
10000c74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c77:	8a 80 90 01 00 00    	mov    al,BYTE PTR [eax+0x190]
10000c7d:	84 c0                	test   al,al
10000c7f:	74 3c                	je     10000cbd <Floppy::reset()+0x1e9>
10000c81:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000c88:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
10000c8c:	7f 2f                	jg     10000cbd <Floppy::reset()+0x1e9>
10000c8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c91:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000c94:	83 c2 68             	add    edx,0x68
10000c97:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000c9b:	85 c0                	test   eax,eax
10000c9d:	74 19                	je     10000cb8 <Floppy::reset()+0x1e4>
10000c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ca2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000ca5:	83 c2 68             	add    edx,0x68
10000ca8:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000cac:	83 ec 0c             	sub    esp,0xc
10000caf:	50                   	push   eax
10000cb0:	e8 fc ff ff ff       	call   10000cb1 <Floppy::reset()+0x1dd>	10000cb1: R_386_PC32	FloppyDrive::floppyConfigure()
10000cb5:	83 c4 10             	add    esp,0x10
10000cb8:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10000cbb:	eb cb                	jmp    10000c88 <Floppy::reset()+0x1b4>
10000cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cc0:	8a 80 8d 01 00 00    	mov    al,BYTE PTR [eax+0x18d]
10000cc6:	83 f0 01             	xor    eax,0x1
10000cc9:	84 c0                	test   al,al
10000ccb:	74 38                	je     10000d05 <Floppy::reset()+0x231>
10000ccd:	83 ec 0c             	sub    esp,0xc
10000cd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000cd3:	e8 fc ff ff ff       	call   10000cd4 <Floppy::reset()+0x200>	10000cd4: R_386_PC32	Floppy::lock()
10000cd8:	83 c4 10             	add    esp,0x10
10000cdb:	83 f0 01             	xor    eax,0x1
10000cde:	88 c2                	mov    dl,al
10000ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ce3:	88 90 8c 01 00 00    	mov    BYTE PTR [eax+0x18c],dl
10000ce9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cec:	c6 80 8d 01 00 00 01 	mov    BYTE PTR [eax+0x18d],0x1
10000cf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cf6:	8a 80 8c 01 00 00    	mov    al,BYTE PTR [eax+0x18c]
10000cfc:	84 c0                	test   al,al
10000cfe:	74 05                	je     10000d05 <Floppy::reset()+0x231>
10000d00:	e9 e5 fd ff ff       	jmp    10000aea <Floppy::reset()+0x16>
10000d05:	90                   	nop
10000d06:	c9                   	leave  
10000d07:	c3                   	ret    

10000d08 <Floppy::dmaInit(bool)>:
10000d08:	55                   	push   ebp
10000d09:	89 e5                	mov    ebp,esp
10000d0b:	83 ec 18             	sub    esp,0x18
10000d0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000d11:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10000d14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d17:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000d1d:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
10000d21:	74 07                	je     10000d2a <Floppy::dmaInit(bool)+0x22>
10000d23:	ba 4a 00 00 00       	mov    edx,0x4a
10000d28:	eb 05                	jmp    10000d2f <Floppy::dmaInit(bool)+0x27>
10000d2a:	ba 46 00 00 00       	mov    edx,0x46
10000d2f:	83 ec 08             	sub    esp,0x8
10000d32:	52                   	push   edx
10000d33:	50                   	push   eax
10000d34:	e8 fc ff ff ff       	call   10000d35 <Floppy::dmaInit(bool)+0x2d>	10000d35: R_386_PC32	DMAChannel::setMode(unsigned char)
10000d39:	83 c4 10             	add    esp,0x10
10000d3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d3f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000d45:	83 ec 0c             	sub    esp,0xc
10000d48:	50                   	push   eax
10000d49:	e8 fc ff ff ff       	call   10000d4a <Floppy::dmaInit(bool)+0x42>	10000d4a: R_386_PC32	DMAChannel::start()
10000d4e:	83 c4 10             	add    esp,0x10
10000d51:	90                   	nop
10000d52:	c9                   	leave  
10000d53:	c3                   	ret    

10000d54 <Floppy::specify(int)>:
10000d54:	55                   	push   ebp
10000d55:	89 e5                	mov    ebp,esp
10000d57:	57                   	push   edi
10000d58:	56                   	push   esi
10000d59:	53                   	push   ebx
10000d5a:	83 ec 3c             	sub    esp,0x3c
10000d5d:	8d 45 c0             	lea    eax,[ebp-0x40]
10000d60:	bb 60 4e 00 10       	mov    ebx,0x10004e60	10000d61: R_386_32	.text
10000d65:	ba 04 00 00 00       	mov    edx,0x4
10000d6a:	89 c7                	mov    edi,eax
10000d6c:	89 de                	mov    esi,ebx
10000d6e:	89 d1                	mov    ecx,edx
10000d70:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d75:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000d78:	83 c2 64             	add    edx,0x64
10000d7b:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10000d7f:	89 d0                	mov    eax,edx
10000d81:	c1 e0 02             	shl    eax,0x2
10000d84:	01 d0                	add    eax,edx
10000d86:	c1 e0 02             	shl    eax,0x2
10000d89:	01 d0                	add    eax,edx
10000d8b:	05 10 00 00 00       	add    eax,0x10	10000d8c: R_386_32	floppyTable
10000d90:	8a 00                	mov    al,BYTE PTR [eax]
10000d92:	0f be c0             	movsx  eax,al
10000d95:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000d98:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10000d9c:	75 10                	jne    10000dae <Floppy::specify(int)+0x5a>
10000d9e:	83 ec 0c             	sub    esp,0xc
10000da1:	68 4a 4e 00 10       	push   0x10004e4a	10000da2: R_386_32	.text
10000da6:	e8 fc ff ff ff       	call   10000da7 <Floppy::specify(int)+0x53>	10000da7: R_386_PC32	Krnl::panic(char const*)
10000dab:	83 c4 10             	add    esp,0x10
10000dae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000db1:	8b 44 85 c0          	mov    eax,DWORD PTR [ebp+eax*4-0x40]
10000db5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000db8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000dbb:	89 c2                	mov    edx,eax
10000dbd:	c1 e0 03             	shl    eax,0x3
10000dc0:	89 d1                	mov    ecx,edx
10000dc2:	29 c1                	sub    ecx,eax
10000dc4:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000dc9:	f7 e9                	imul   ecx
10000dcb:	c1 fa 11             	sar    edx,0x11
10000dce:	89 c8                	mov    eax,ecx
10000dd0:	c1 f8 1f             	sar    eax,0x1f
10000dd3:	29 c2                	sub    edx,eax
10000dd5:	89 d0                	mov    eax,edx
10000dd7:	83 c0 10             	add    eax,0x10
10000dda:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000ddd:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10000de0:	89 d0                	mov    eax,edx
10000de2:	01 c0                	add    eax,eax
10000de4:	01 d0                	add    eax,edx
10000de6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10000ded:	01 d0                	add    eax,edx
10000def:	01 c0                	add    eax,eax
10000df1:	89 c1                	mov    ecx,eax
10000df3:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000df8:	f7 e9                	imul   ecx
10000dfa:	c1 fa 12             	sar    edx,0x12
10000dfd:	89 c8                	mov    eax,ecx
10000dff:	c1 f8 1f             	sar    eax,0x1f
10000e02:	29 c2                	sub    edx,eax
10000e04:	89 d0                	mov    eax,edx
10000e06:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000e09:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10000e10:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10000e17:	83 ec 08             	sub    esp,0x8
10000e1a:	6a 03                	push   0x3
10000e1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e1f:	e8 fc ff ff ff       	call   10000e20 <Floppy::specify(int)+0xcc>	10000e20: R_386_PC32	Floppy::writeCommand(unsigned char)
10000e24:	83 c4 10             	add    esp,0x10
10000e27:	83 ec 0c             	sub    esp,0xc
10000e2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e2d:	e8 fc ff ff ff       	call   10000e2e <Floppy::specify(int)+0xda>	10000e2e: R_386_PC32	Floppy::wasFailure()
10000e32:	83 c4 10             	add    esp,0x10
10000e35:	84 c0                	test   al,al
10000e37:	74 04                	je     10000e3d <Floppy::specify(int)+0xe9>
10000e39:	b0 00                	mov    al,0x0
10000e3b:	eb 6b                	jmp    10000ea8 <Floppy::specify(int)+0x154>
10000e3d:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e40:	c1 e0 04             	shl    eax,0x4
10000e43:	88 c2                	mov    dl,al
10000e45:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000e48:	09 d0                	or     eax,edx
10000e4a:	0f b6 c0             	movzx  eax,al
10000e4d:	83 ec 08             	sub    esp,0x8
10000e50:	50                   	push   eax
10000e51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e54:	e8 fc ff ff ff       	call   10000e55 <Floppy::specify(int)+0x101>	10000e55: R_386_PC32	Floppy::writeCommand(unsigned char)
10000e59:	83 c4 10             	add    esp,0x10
10000e5c:	83 ec 0c             	sub    esp,0xc
10000e5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e62:	e8 fc ff ff ff       	call   10000e63 <Floppy::specify(int)+0x10f>	10000e63: R_386_PC32	Floppy::wasFailure()
10000e67:	83 c4 10             	add    esp,0x10
10000e6a:	84 c0                	test   al,al
10000e6c:	74 04                	je     10000e72 <Floppy::specify(int)+0x11e>
10000e6e:	b0 00                	mov    al,0x0
10000e70:	eb 36                	jmp    10000ea8 <Floppy::specify(int)+0x154>
10000e72:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000e75:	01 c0                	add    eax,eax
10000e77:	88 c2                	mov    dl,al
10000e79:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000e7c:	09 d0                	or     eax,edx
10000e7e:	0f b6 c0             	movzx  eax,al
10000e81:	83 ec 08             	sub    esp,0x8
10000e84:	50                   	push   eax
10000e85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e88:	e8 fc ff ff ff       	call   10000e89 <Floppy::specify(int)+0x135>	10000e89: R_386_PC32	Floppy::writeCommand(unsigned char)
10000e8d:	83 c4 10             	add    esp,0x10
10000e90:	83 ec 0c             	sub    esp,0xc
10000e93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e96:	e8 fc ff ff ff       	call   10000e97 <Floppy::specify(int)+0x143>	10000e97: R_386_PC32	Floppy::wasFailure()
10000e9b:	83 c4 10             	add    esp,0x10
10000e9e:	84 c0                	test   al,al
10000ea0:	74 04                	je     10000ea6 <Floppy::specify(int)+0x152>
10000ea2:	b0 00                	mov    al,0x0
10000ea4:	eb 02                	jmp    10000ea8 <Floppy::specify(int)+0x154>
10000ea6:	b0 01                	mov    al,0x1
10000ea8:	8d 65 f4             	lea    esp,[ebp-0xc]
10000eab:	5b                   	pop    ebx
10000eac:	5e                   	pop    esi
10000ead:	5f                   	pop    edi
10000eae:	5d                   	pop    ebp
10000eaf:	c3                   	ret    

10000eb0 <Floppy::select(int, bool)>:
10000eb0:	55                   	push   ebp
10000eb1:	89 e5                	mov    ebp,esp
10000eb3:	83 ec 28             	sub    esp,0x28
10000eb6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000eb9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000ebc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ebf:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000ec5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000ec8:	75 27                	jne    10000ef1 <Floppy::select(int, bool)+0x41>
10000eca:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
10000ecd:	83 f0 01             	xor    eax,0x1
10000ed0:	84 c0                	test   al,al
10000ed2:	74 1d                	je     10000ef1 <Floppy::select(int, bool)+0x41>
10000ed4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ed7:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000edd:	83 f8 ff             	cmp    eax,0xffffffff
10000ee0:	74 0f                	je     10000ef1 <Floppy::select(int, bool)+0x41>
10000ee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ee5:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000eec:	e9 34 02 00 00       	jmp    10001125 <Floppy::select(int, bool)+0x275>
10000ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ef4:	8a 80 92 01 00 00    	mov    al,BYTE PTR [eax+0x192]
10000efa:	83 f0 01             	xor    eax,0x1
10000efd:	84 c0                	test   al,al
10000eff:	75 12                	jne    10000f13 <Floppy::select(int, bool)+0x63>
10000f01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f04:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000f0a:	83 f8 ff             	cmp    eax,0xffffffff
10000f0d:	0f 85 12 02 00 00    	jne    10001125 <Floppy::select(int, bool)+0x275>
10000f13:	83 ec 08             	sub    esp,0x8
10000f16:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000f19:	68 70 4e 00 10       	push   0x10004e70	10000f1a: R_386_32	.text
10000f1e:	e8 fc ff ff ff       	call   10000f1f <Floppy::select(int, bool)+0x6f>	10000f1f: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f23:	83 c4 10             	add    esp,0x10
10000f26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f29:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000f2f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000f32:	0f 84 b5 01 00 00    	je     100010ed <Floppy::select(int, bool)+0x23d>
10000f38:	83 ec 0c             	sub    esp,0xc
10000f3b:	68 80 4e 00 10       	push   0x10004e80	10000f3c: R_386_32	.text
10000f40:	e8 fc ff ff ff       	call   10000f41 <Floppy::select(int, bool)+0x91>	10000f41: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f45:	83 c4 10             	add    esp,0x10
10000f48:	fa                   	cli    
10000f49:	a1 00 00 00 00       	mov    eax,ds:0x0	10000f4a: R_386_32	irqDisableCounter
10000f4e:	40                   	inc    eax
10000f4f:	a3 00 00 00 00       	mov    ds:0x0,eax	10000f50: R_386_32	irqDisableCounter
10000f54:	83 ec 0c             	sub    esp,0xc
10000f57:	68 8d 4e 00 10       	push   0x10004e8d	10000f58: R_386_32	.text
10000f5c:	e8 fc ff ff ff       	call   10000f5d <Floppy::select(int, bool)+0xad>	10000f5d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f61:	83 c4 10             	add    esp,0x10
10000f64:	83 ec 08             	sub    esp,0x8
10000f67:	6a 02                	push   0x2
10000f69:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f6c:	e8 fc ff ff ff       	call   10000f6d <Floppy::select(int, bool)+0xbd>	10000f6d: R_386_PC32	Floppy::readPort(FloppyReg)
10000f71:	83 c4 10             	add    esp,0x10
10000f74:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000f77:	80 65 f7 fc          	and    BYTE PTR [ebp-0x9],0xfc
10000f7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000f7e:	88 c2                	mov    dl,al
10000f80:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000f83:	09 d0                	or     eax,edx
10000f85:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000f88:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000f8c:	83 ec 04             	sub    esp,0x4
10000f8f:	50                   	push   eax
10000f90:	6a 02                	push   0x2
10000f92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f95:	e8 fc ff ff ff       	call   10000f96 <Floppy::select(int, bool)+0xe6>	10000f96: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000f9a:	83 c4 10             	add    esp,0x10
10000f9d:	83 ec 0c             	sub    esp,0xc
10000fa0:	68 20 03 00 00       	push   0x320
10000fa5:	e8 fc ff ff ff       	call   10000fa6 <Floppy::select(int, bool)+0xf6>	10000fa6: R_386_PC32	milliTenthSleep(unsigned int)
10000faa:	83 c4 10             	add    esp,0x10
10000fad:	83 ec 0c             	sub    esp,0xc
10000fb0:	68 9a 4e 00 10       	push   0x10004e9a	10000fb1: R_386_32	.text
10000fb5:	e8 fc ff ff ff       	call   10000fb6 <Floppy::select(int, bool)+0x106>	10000fb6: R_386_PC32	Dbg::kprintf(char const*, ...)
10000fba:	83 c4 10             	add    esp,0x10
10000fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fc0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000fc3:	83 c2 64             	add    edx,0x64
10000fc6:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10000fca:	89 d0                	mov    eax,edx
10000fcc:	c1 e0 02             	shl    eax,0x2
10000fcf:	01 d0                	add    eax,edx
10000fd1:	c1 e0 02             	shl    eax,0x2
10000fd4:	01 d0                	add    eax,edx
10000fd6:	05 10 00 00 00       	add    eax,0x10	10000fd7: R_386_32	floppyTable
10000fdb:	8a 00                	mov    al,BYTE PTR [eax]
10000fdd:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
10000fe0:	80 7d f6 ff          	cmp    BYTE PTR [ebp-0xa],0xff
10000fe4:	75 10                	jne    10000ff6 <Floppy::select(int, bool)+0x146>
10000fe6:	83 ec 0c             	sub    esp,0xc
10000fe9:	68 a8 4e 00 10       	push   0x10004ea8	10000fea: R_386_32	.text
10000fee:	e8 fc ff ff ff       	call   10000fef <Floppy::select(int, bool)+0x13f>	10000fef: R_386_PC32	Krnl::panic(char const*)
10000ff3:	83 c4 10             	add    esp,0x10
10000ff6:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
10000ff9:	0f b6 c0             	movzx  eax,al
10000ffc:	83 ec 04             	sub    esp,0x4
10000fff:	50                   	push   eax
10001000:	6a 07                	push   0x7
10001002:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001005:	e8 fc ff ff ff       	call   10001006 <Floppy::select(int, bool)+0x156>	10001006: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
1000100a:	83 c4 10             	add    esp,0x10
1000100d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000100e: R_386_32	irqDisableCounter
10001012:	48                   	dec    eax
10001013:	a3 00 00 00 00       	mov    ds:0x0,eax	10001014: R_386_32	irqDisableCounter
10001018:	a1 00 00 00 00       	mov    eax,ds:0x0	10001019: R_386_32	irqDisableCounter
1000101d:	85 c0                	test   eax,eax
1000101f:	75 01                	jne    10001022 <Floppy::select(int, bool)+0x172>
10001021:	fb                   	sti    
10001022:	83 ec 0c             	sub    esp,0xc
10001025:	68 d7 4e 00 10       	push   0x10004ed7	10001026: R_386_32	.text
1000102a:	e8 fc ff ff ff       	call   1000102b <Floppy::select(int, bool)+0x17b>	1000102b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000102f:	83 c4 10             	add    esp,0x10
10001032:	83 ec 08             	sub    esp,0x8
10001035:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001038:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000103b:	e8 fc ff ff ff       	call   1000103c <Floppy::select(int, bool)+0x18c>	1000103c: R_386_PC32	Floppy::specify(int)
10001040:	83 c4 10             	add    esp,0x10
10001043:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10001046:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10001049:	83 f0 01             	xor    eax,0x1
1000104c:	84 c0                	test   al,al
1000104e:	74 25                	je     10001075 <Floppy::select(int, bool)+0x1c5>
10001050:	83 ec 0c             	sub    esp,0xc
10001053:	68 e4 4e 00 10       	push   0x10004ee4	10001054: R_386_32	.text
10001058:	e8 fc ff ff ff       	call   10001059 <Floppy::select(int, bool)+0x1a9>	10001059: R_386_PC32	Dbg::kprintf(char const*, ...)
1000105d:	83 c4 10             	add    esp,0x10
10001060:	83 ec 0c             	sub    esp,0xc
10001063:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001066:	e8 fc ff ff ff       	call   10001067 <Floppy::select(int, bool)+0x1b7>	10001067: R_386_PC32	Floppy::reset()
1000106b:	83 c4 10             	add    esp,0x10
1000106e:	b0 00                	mov    al,0x0
10001070:	e9 d2 00 00 00       	jmp    10001147 <Floppy::select(int, bool)+0x297>
10001075:	83 ec 0c             	sub    esp,0xc
10001078:	68 f5 4e 00 10       	push   0x10004ef5	10001079: R_386_32	.text
1000107d:	e8 fc ff ff ff       	call   1000107e <Floppy::select(int, bool)+0x1ce>	1000107e: R_386_PC32	Dbg::kprintf(char const*, ...)
10001082:	83 c4 10             	add    esp,0x10
10001085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001088:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000108b:	83 c2 68             	add    edx,0x68
1000108e:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10001092:	83 ec 0c             	sub    esp,0xc
10001095:	50                   	push   eax
10001096:	e8 fc ff ff ff       	call   10001097 <Floppy::select(int, bool)+0x1e7>	10001097: R_386_PC32	FloppyDrive::calibrate()
1000109b:	83 c4 10             	add    esp,0x10
1000109e:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
100010a1:	83 ec 0c             	sub    esp,0xc
100010a4:	68 02 4f 00 10       	push   0x10004f02	100010a5: R_386_32	.text
100010a9:	e8 fc ff ff ff       	call   100010aa <Floppy::select(int, bool)+0x1fa>	100010aa: R_386_PC32	Dbg::kprintf(char const*, ...)
100010ae:	83 c4 10             	add    esp,0x10
100010b1:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100010b4:	83 f0 01             	xor    eax,0x1
100010b7:	84 c0                	test   al,al
100010b9:	74 22                	je     100010dd <Floppy::select(int, bool)+0x22d>
100010bb:	83 ec 0c             	sub    esp,0xc
100010be:	68 10 4f 00 10       	push   0x10004f10	100010bf: R_386_32	.text
100010c3:	e8 fc ff ff ff       	call   100010c4 <Floppy::select(int, bool)+0x214>	100010c4: R_386_PC32	Dbg::kprintf(char const*, ...)
100010c8:	83 c4 10             	add    esp,0x10
100010cb:	83 ec 0c             	sub    esp,0xc
100010ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100010d1:	e8 fc ff ff ff       	call   100010d2 <Floppy::select(int, bool)+0x222>	100010d2: R_386_PC32	Floppy::reset()
100010d6:	83 c4 10             	add    esp,0x10
100010d9:	b0 00                	mov    al,0x0
100010db:	eb 6a                	jmp    10001147 <Floppy::select(int, bool)+0x297>
100010dd:	83 ec 0c             	sub    esp,0xc
100010e0:	68 22 4f 00 10       	push   0x10004f22	100010e1: R_386_32	.text
100010e5:	e8 fc ff ff ff       	call   100010e6 <Floppy::select(int, bool)+0x236>	100010e6: R_386_PC32	Dbg::kprintf(char const*, ...)
100010ea:	83 c4 10             	add    esp,0x10
100010ed:	83 ec 0c             	sub    esp,0xc
100010f0:	68 2f 4f 00 10       	push   0x10004f2f	100010f1: R_386_32	.text
100010f5:	e8 fc ff ff ff       	call   100010f6 <Floppy::select(int, bool)+0x246>	100010f6: R_386_PC32	Dbg::kprintf(char const*, ...)
100010fa:	83 c4 10             	add    esp,0x10
100010fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001100:	8a 55 e4             	mov    dl,BYTE PTR [ebp-0x1c]
10001103:	88 90 92 01 00 00    	mov    BYTE PTR [eax+0x192],dl
10001109:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000110c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000110f:	89 90 94 01 00 00    	mov    DWORD PTR [eax+0x194],edx
10001115:	83 ec 0c             	sub    esp,0xc
10001118:	68 3c 4f 00 10       	push   0x10004f3c	10001119: R_386_32	.text
1000111d:	e8 fc ff ff ff       	call   1000111e <Floppy::select(int, bool)+0x26e>	1000111e: R_386_PC32	Dbg::kprintf(char const*, ...)
10001122:	83 c4 10             	add    esp,0x10
10001125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001128:	8a 80 92 01 00 00    	mov    al,BYTE PTR [eax+0x192]
1000112e:	84 c0                	test   al,al
10001130:	74 12                	je     10001144 <Floppy::select(int, bool)+0x294>
10001132:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001135:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
1000113b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
1000113e:	75 04                	jne    10001144 <Floppy::select(int, bool)+0x294>
10001140:	b0 01                	mov    al,0x1
10001142:	eb 02                	jmp    10001146 <Floppy::select(int, bool)+0x296>
10001144:	b0 00                	mov    al,0x0
10001146:	90                   	nop
10001147:	c9                   	leave  
10001148:	c3                   	ret    
10001149:	90                   	nop

1000114a <Floppy::motor(int, bool)>:
1000114a:	55                   	push   ebp
1000114b:	89 e5                	mov    ebp,esp
1000114d:	53                   	push   ebx
1000114e:	83 ec 24             	sub    esp,0x24
10001151:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001154:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10001157:	83 ec 0c             	sub    esp,0xc
1000115a:	68 49 4f 00 10       	push   0x10004f49	1000115b: R_386_32	.text
1000115f:	e8 fc ff ff ff       	call   10001160 <Floppy::motor(int, bool)+0x16>	10001160: R_386_PC32	Dbg::kprintf(char const*, ...)
10001164:	83 c4 10             	add    esp,0x10
10001167:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
1000116b:	83 ec 04             	sub    esp,0x4
1000116e:	50                   	push   eax
1000116f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001172:	68 58 4f 00 10       	push   0x10004f58	10001173: R_386_32	.text
10001177:	e8 fc ff ff ff       	call   10001178 <Floppy::motor(int, bool)+0x2e>	10001178: R_386_PC32	Dbg::kprintf(char const*, ...)
1000117c:	83 c4 10             	add    esp,0x10
1000117f:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
10001183:	0f 84 7b 01 00 00    	je     10001304 <Floppy::motor(int, bool)+0x1ba>
10001189:	83 ec 0c             	sub    esp,0xc
1000118c:	68 6e 4f 00 10       	push   0x10004f6e	1000118d: R_386_32	.text
10001191:	e8 fc ff ff ff       	call   10001192 <Floppy::motor(int, bool)+0x48>	10001192: R_386_PC32	Dbg::kprintf(char const*, ...)
10001196:	83 c4 10             	add    esp,0x10
10001199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000119c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000119f:	83 c2 58             	add    edx,0x58
100011a2:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100011a6:	85 c0                	test   eax,eax
100011a8:	0f 85 21 01 00 00    	jne    100012cf <Floppy::motor(int, bool)+0x185>
100011ae:	83 ec 0c             	sub    esp,0xc
100011b1:	68 76 4f 00 10       	push   0x10004f76	100011b2: R_386_32	.text
100011b6:	e8 fc ff ff ff       	call   100011b7 <Floppy::motor(int, bool)+0x6d>	100011b7: R_386_PC32	Dbg::kprintf(char const*, ...)
100011bb:	83 c4 10             	add    esp,0x10
100011be:	fa                   	cli    
100011bf:	a1 00 00 00 00       	mov    eax,ds:0x0	100011c0: R_386_32	irqDisableCounter
100011c4:	40                   	inc    eax
100011c5:	a3 00 00 00 00       	mov    ds:0x0,eax	100011c6: R_386_32	irqDisableCounter
100011ca:	83 ec 08             	sub    esp,0x8
100011cd:	6a 02                	push   0x2
100011cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011d2:	e8 fc ff ff ff       	call   100011d3 <Floppy::motor(int, bool)+0x89>	100011d3: R_386_PC32	Floppy::readPort(FloppyReg)
100011d7:	83 c4 10             	add    esp,0x10
100011da:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100011dd:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100011e1:	83 ec 08             	sub    esp,0x8
100011e4:	50                   	push   eax
100011e5:	68 8b 4f 00 10       	push   0x10004f8b	100011e6: R_386_32	.text
100011ea:	e8 fc ff ff ff       	call   100011eb <Floppy::motor(int, bool)+0xa1>	100011eb: R_386_PC32	Dbg::kprintf(char const*, ...)
100011ef:	83 c4 10             	add    esp,0x10
100011f2:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
100011f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100011f9:	bb 10 00 00 00       	mov    ebx,0x10
100011fe:	88 c1                	mov    cl,al
10001200:	d3 e3                	shl    ebx,cl
10001202:	89 d8                	mov    eax,ebx
10001204:	09 d0                	or     eax,edx
10001206:	83 ec 08             	sub    esp,0x8
10001209:	50                   	push   eax
1000120a:	68 99 4f 00 10       	push   0x10004f99	1000120b: R_386_32	.text
1000120f:	e8 fc ff ff ff       	call   10001210 <Floppy::motor(int, bool)+0xc6>	10001210: R_386_PC32	Dbg::kprintf(char const*, ...)
10001214:	83 c4 10             	add    esp,0x10
10001217:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000121a:	ba 10 00 00 00       	mov    edx,0x10
1000121f:	88 c1                	mov    cl,al
10001221:	d3 e2                	shl    edx,cl
10001223:	89 d0                	mov    eax,edx
10001225:	88 c2                	mov    dl,al
10001227:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000122a:	09 d0                	or     eax,edx
1000122c:	0f b6 c0             	movzx  eax,al
1000122f:	83 ec 04             	sub    esp,0x4
10001232:	50                   	push   eax
10001233:	6a 02                	push   0x2
10001235:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001238:	e8 fc ff ff ff       	call   10001239 <Floppy::motor(int, bool)+0xef>	10001239: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
1000123d:	83 c4 10             	add    esp,0x10
10001240:	a1 00 00 00 00       	mov    eax,ds:0x0	10001241: R_386_32	irqDisableCounter
10001245:	48                   	dec    eax
10001246:	a3 00 00 00 00       	mov    ds:0x0,eax	10001247: R_386_32	irqDisableCounter
1000124b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000124c: R_386_32	irqDisableCounter
10001250:	85 c0                	test   eax,eax
10001252:	75 01                	jne    10001255 <Floppy::motor(int, bool)+0x10b>
10001254:	fb                   	sti    
10001255:	83 ec 0c             	sub    esp,0xc
10001258:	68 a7 4f 00 10       	push   0x10004fa7	10001259: R_386_32	.text
1000125d:	e8 fc ff ff ff       	call   1000125e <Floppy::motor(int, bool)+0x114>	1000125e: R_386_PC32	Dbg::kprintf(char const*, ...)
10001262:	83 c4 10             	add    esp,0x10
10001265:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001268:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000126b:	83 c2 64             	add    edx,0x64
1000126e:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10001272:	83 f8 04             	cmp    eax,0x4
10001275:	75 12                	jne    10001289 <Floppy::motor(int, bool)+0x13f>
10001277:	83 ec 0c             	sub    esp,0xc
1000127a:	68 b8 0b 00 00       	push   0xbb8
1000127f:	e8 fc ff ff ff       	call   10001280 <Floppy::motor(int, bool)+0x136>	10001280: R_386_PC32	milliTenthSleep(unsigned int)
10001284:	83 c4 10             	add    esp,0x10
10001287:	eb 10                	jmp    10001299 <Floppy::motor(int, bool)+0x14f>
10001289:	83 ec 0c             	sub    esp,0xc
1000128c:	68 88 13 00 00       	push   0x1388
10001291:	e8 fc ff ff ff       	call   10001292 <Floppy::motor(int, bool)+0x148>	10001292: R_386_PC32	milliTenthSleep(unsigned int)
10001296:	83 c4 10             	add    esp,0x10
10001299:	83 ec 0c             	sub    esp,0xc
1000129c:	68 b5 4f 00 10       	push   0x10004fb5	1000129d: R_386_32	.text
100012a1:	e8 fc ff ff ff       	call   100012a2 <Floppy::motor(int, bool)+0x158>	100012a2: R_386_PC32	Dbg::kprintf(char const*, ...)
100012a6:	83 c4 10             	add    esp,0x10
100012a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012ac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100012af:	83 c2 58             	add    edx,0x58
100012b2:	c7 44 90 0c 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x1
100012ba:	83 ec 0c             	sub    esp,0xc
100012bd:	68 c5 4f 00 10       	push   0x10004fc5	100012be: R_386_32	.text
100012c2:	e8 fc ff ff ff       	call   100012c3 <Floppy::motor(int, bool)+0x179>	100012c3: R_386_PC32	Dbg::kprintf(char const*, ...)
100012c7:	83 c4 10             	add    esp,0x10
100012ca:	e9 89 00 00 00       	jmp    10001358 <Floppy::motor(int, bool)+0x20e>
100012cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012d2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100012d5:	83 c2 58             	add    edx,0x58
100012d8:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100012dc:	83 f8 02             	cmp    eax,0x2
100012df:	75 77                	jne    10001358 <Floppy::motor(int, bool)+0x20e>
100012e1:	83 ec 0c             	sub    esp,0xc
100012e4:	68 d5 4f 00 10       	push   0x10004fd5	100012e5: R_386_32	.text
100012e9:	e8 fc ff ff ff       	call   100012ea <Floppy::motor(int, bool)+0x1a0>	100012ea: R_386_PC32	Dbg::kprintf(char const*, ...)
100012ee:	83 c4 10             	add    esp,0x10
100012f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100012f7:	83 c2 58             	add    edx,0x58
100012fa:	c7 44 90 0c 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x1
10001302:	eb 54                	jmp    10001358 <Floppy::motor(int, bool)+0x20e>
10001304:	83 ec 0c             	sub    esp,0xc
10001307:	68 e5 4f 00 10       	push   0x10004fe5	10001308: R_386_32	.text
1000130c:	e8 fc ff ff ff       	call   1000130d <Floppy::motor(int, bool)+0x1c3>	1000130d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001311:	83 c4 10             	add    esp,0x10
10001314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001317:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000131a:	83 c2 58             	add    edx,0x58
1000131d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10001321:	83 f8 01             	cmp    eax,0x1
10001324:	75 32                	jne    10001358 <Floppy::motor(int, bool)+0x20e>
10001326:	83 ec 0c             	sub    esp,0xc
10001329:	68 f5 4f 00 10       	push   0x10004ff5	1000132a: R_386_32	.text
1000132e:	e8 fc ff ff ff       	call   1000132f <Floppy::motor(int, bool)+0x1e5>	1000132f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001333:	83 c4 10             	add    esp,0x10
10001336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001339:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000133c:	83 c2 58             	add    edx,0x58
1000133f:	c7 44 90 0c 02 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x2
10001347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000134a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000134d:	83 c2 5c             	add    edx,0x5c
10001350:	c7 44 90 0c c4 09 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x9c4
10001358:	83 ec 0c             	sub    esp,0xc
1000135b:	68 05 50 00 10       	push   0x10005005	1000135c: R_386_32	.text
10001360:	e8 fc ff ff ff       	call   10001361 <Floppy::motor(int, bool)+0x217>	10001361: R_386_PC32	Dbg::kprintf(char const*, ...)
10001365:	83 c4 10             	add    esp,0x10
10001368:	90                   	nop
10001369:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000136c:	c9                   	leave  
1000136d:	c3                   	ret    

1000136e <FloppyDrive::FloppyDrive()>:
1000136e:	55                   	push   ebp
1000136f:	89 e5                	mov    ebp,esp
10001371:	83 ec 08             	sub    esp,0x8
10001374:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001377:	83 ec 04             	sub    esp,0x4
1000137a:	68 00 02 00 00       	push   0x200
1000137f:	68 1a 50 00 10       	push   0x1000501a	10001380: R_386_32	.text
10001384:	50                   	push   eax
10001385:	e8 fc ff ff ff       	call   10001386 <FloppyDrive::FloppyDrive()+0x18>	10001386: R_386_PC32	PhysicalDisk::PhysicalDisk(char const*, int)
1000138a:	83 c4 10             	add    esp,0x10
1000138d:	ba 08 00 00 00       	mov    edx,0x8	1000138e: R_386_32	vtable for FloppyDrive
10001392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001395:	89 10                	mov    DWORD PTR [eax],edx
10001397:	90                   	nop
10001398:	c9                   	leave  
10001399:	c3                   	ret    

1000139a <FloppyDrive::motorOn()>:
1000139a:	55                   	push   ebp
1000139b:	89 e5                	mov    ebp,esp
1000139d:	83 ec 08             	sub    esp,0x8
100013a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013a3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
100013a9:	83 ec 08             	sub    esp,0x8
100013ac:	50                   	push   eax
100013ad:	68 2c 50 00 10       	push   0x1000502c	100013ae: R_386_32	.text
100013b2:	e8 fc ff ff ff       	call   100013b3 <FloppyDrive::motorOn()+0x19>	100013b3: R_386_PC32	Dbg::kprintf(char const*, ...)
100013b7:	83 c4 10             	add    esp,0x10
100013ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013bd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100013c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100013c6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100013cc:	83 ec 04             	sub    esp,0x4
100013cf:	6a 01                	push   0x1
100013d1:	52                   	push   edx
100013d2:	50                   	push   eax
100013d3:	e8 fc ff ff ff       	call   100013d4 <FloppyDrive::motorOn()+0x3a>	100013d4: R_386_PC32	Floppy::motor(int, bool)
100013d8:	83 c4 10             	add    esp,0x10
100013db:	90                   	nop
100013dc:	c9                   	leave  
100013dd:	c3                   	ret    

100013de <FloppyDrive::motorOff()>:
100013de:	55                   	push   ebp
100013df:	89 e5                	mov    ebp,esp
100013e1:	83 ec 08             	sub    esp,0x8
100013e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013e7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100013ed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100013f0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100013f6:	83 ec 04             	sub    esp,0x4
100013f9:	6a 00                	push   0x0
100013fb:	52                   	push   edx
100013fc:	50                   	push   eax
100013fd:	e8 fc ff ff ff       	call   100013fe <FloppyDrive::motorOff()+0x20>	100013fe: R_386_PC32	Floppy::motor(int, bool)
10001402:	83 c4 10             	add    esp,0x10
10001405:	90                   	nop
10001406:	c9                   	leave  
10001407:	c3                   	ret    

10001408 <FloppyDrive::floppyConfigure()>:
10001408:	55                   	push   ebp
10001409:	89 e5                	mov    ebp,esp
1000140b:	83 ec 18             	sub    esp,0x18
1000140e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
10001412:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
10001416:	c6 45 f5 01          	mov    BYTE PTR [ebp-0xb],0x1
1000141a:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
10001421:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001428:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000142b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001431:	83 ec 08             	sub    esp,0x8
10001434:	6a 13                	push   0x13
10001436:	50                   	push   eax
10001437:	e8 fc ff ff ff       	call   10001438 <FloppyDrive::floppyConfigure()+0x30>	10001438: R_386_PC32	Floppy::writeCommand(unsigned char)
1000143c:	83 c4 10             	add    esp,0x10
1000143f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001442:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001448:	83 ec 0c             	sub    esp,0xc
1000144b:	50                   	push   eax
1000144c:	e8 fc ff ff ff       	call   1000144d <FloppyDrive::floppyConfigure()+0x45>	1000144d: R_386_PC32	Floppy::wasFailure()
10001451:	83 c4 10             	add    esp,0x10
10001454:	84 c0                	test   al,al
10001456:	74 07                	je     1000145f <FloppyDrive::floppyConfigure()+0x57>
10001458:	b0 00                	mov    al,0x0
1000145a:	e9 de 00 00 00       	jmp    1000153d <FloppyDrive::floppyConfigure()+0x135>
1000145f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001462:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001468:	83 ec 08             	sub    esp,0x8
1000146b:	6a 00                	push   0x0
1000146d:	50                   	push   eax
1000146e:	e8 fc ff ff ff       	call   1000146f <FloppyDrive::floppyConfigure()+0x67>	1000146f: R_386_PC32	Floppy::writeCommand(unsigned char)
10001473:	83 c4 10             	add    esp,0x10
10001476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001479:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000147f:	83 ec 0c             	sub    esp,0xc
10001482:	50                   	push   eax
10001483:	e8 fc ff ff ff       	call   10001484 <FloppyDrive::floppyConfigure()+0x7c>	10001484: R_386_PC32	Floppy::wasFailure()
10001488:	83 c4 10             	add    esp,0x10
1000148b:	84 c0                	test   al,al
1000148d:	74 07                	je     10001496 <FloppyDrive::floppyConfigure()+0x8e>
1000148f:	b0 00                	mov    al,0x0
10001491:	e9 a7 00 00 00       	jmp    1000153d <FloppyDrive::floppyConfigure()+0x135>
10001496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001499:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000149f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
100014a3:	c1 e2 06             	shl    edx,0x6
100014a6:	88 d1                	mov    cl,dl
100014a8:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
100014ac:	c1 e2 05             	shl    edx,0x5
100014af:	09 d1                	or     ecx,edx
100014b1:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
100014b5:	c1 e2 04             	shl    edx,0x4
100014b8:	09 d1                	or     ecx,edx
100014ba:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100014bd:	4a                   	dec    edx
100014be:	09 ca                	or     edx,ecx
100014c0:	0f b6 d2             	movzx  edx,dl
100014c3:	83 ec 08             	sub    esp,0x8
100014c6:	52                   	push   edx
100014c7:	50                   	push   eax
100014c8:	e8 fc ff ff ff       	call   100014c9 <FloppyDrive::floppyConfigure()+0xc1>	100014c9: R_386_PC32	Floppy::writeCommand(unsigned char)
100014cd:	83 c4 10             	add    esp,0x10
100014d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014d3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014d9:	83 ec 0c             	sub    esp,0xc
100014dc:	50                   	push   eax
100014dd:	e8 fc ff ff ff       	call   100014de <FloppyDrive::floppyConfigure()+0xd6>	100014de: R_386_PC32	Floppy::wasFailure()
100014e2:	83 c4 10             	add    esp,0x10
100014e5:	84 c0                	test   al,al
100014e7:	74 04                	je     100014ed <FloppyDrive::floppyConfigure()+0xe5>
100014e9:	b0 00                	mov    al,0x0
100014eb:	eb 50                	jmp    1000153d <FloppyDrive::floppyConfigure()+0x135>
100014ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014f0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014f6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100014f9:	0f b6 d2             	movzx  edx,dl
100014fc:	83 ec 08             	sub    esp,0x8
100014ff:	52                   	push   edx
10001500:	50                   	push   eax
10001501:	e8 fc ff ff ff       	call   10001502 <FloppyDrive::floppyConfigure()+0xfa>	10001502: R_386_PC32	Floppy::writeCommand(unsigned char)
10001506:	83 c4 10             	add    esp,0x10
10001509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000150c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001512:	83 ec 0c             	sub    esp,0xc
10001515:	50                   	push   eax
10001516:	e8 fc ff ff ff       	call   10001517 <FloppyDrive::floppyConfigure()+0x10f>	10001517: R_386_PC32	Floppy::wasFailure()
1000151b:	83 c4 10             	add    esp,0x10
1000151e:	84 c0                	test   al,al
10001520:	74 04                	je     10001526 <FloppyDrive::floppyConfigure()+0x11e>
10001522:	b0 00                	mov    al,0x0
10001524:	eb 17                	jmp    1000153d <FloppyDrive::floppyConfigure()+0x135>
10001526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001529:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000152f:	8a 55 f5             	mov    dl,BYTE PTR [ebp-0xb]
10001532:	83 f2 01             	xor    edx,0x1
10001535:	88 90 91 01 00 00    	mov    BYTE PTR [eax+0x191],dl
1000153b:	b0 01                	mov    al,0x1
1000153d:	c9                   	leave  
1000153e:	c3                   	ret    
1000153f:	90                   	nop

10001540 <FloppyDrive::open(int, int, void*)>:
10001540:	b8 00 00 00 00       	mov    eax,0x0
10001545:	c3                   	ret    

10001546 <FloppyDrive::_open(int, int, void*)>:
10001546:	55                   	push   ebp
10001547:	89 e5                	mov    ebp,esp
10001549:	83 ec 08             	sub    esp,0x8
1000154c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000154f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001552:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
10001558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000155b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000155e:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
10001564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001567:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
1000156d:	83 ec 08             	sub    esp,0x8
10001570:	50                   	push   eax
10001571:	68 4b 50 00 10       	push   0x1000504b	10001572: R_386_32	.text
10001576:	e8 fc ff ff ff       	call   10001577 <FloppyDrive::_open(int, int, void*)+0x31>	10001577: R_386_PC32	Dbg::kprintf(char const*, ...)
1000157b:	83 c4 10             	add    esp,0x10
1000157e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001581:	c7 80 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x15c],0x200
1000158b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000158e:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
10001595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001598:	c6 80 69 01 00 00 01 	mov    BYTE PTR [eax+0x169],0x1
1000159f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100015a2:	89 d0                	mov    eax,edx
100015a4:	c1 e0 02             	shl    eax,0x2
100015a7:	01 d0                	add    eax,edx
100015a9:	c1 e0 02             	shl    eax,0x2
100015ac:	01 d0                	add    eax,edx
100015ae:	05 11 00 00 00       	add    eax,0x11	100015af: R_386_32	floppyTable
100015b3:	8a 00                	mov    al,BYTE PTR [eax]
100015b5:	0f b6 c8             	movzx  ecx,al
100015b8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100015bb:	89 d0                	mov    eax,edx
100015bd:	c1 e0 02             	shl    eax,0x2
100015c0:	01 d0                	add    eax,edx
100015c2:	c1 e0 02             	shl    eax,0x2
100015c5:	01 d0                	add    eax,edx
100015c7:	05 13 00 00 00       	add    eax,0x13	100015c8: R_386_32	floppyTable
100015cc:	8a 00                	mov    al,BYTE PTR [eax]
100015ce:	0f b6 c0             	movzx  eax,al
100015d1:	0f af c8             	imul   ecx,eax
100015d4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100015d7:	89 d0                	mov    eax,edx
100015d9:	c1 e0 02             	shl    eax,0x2
100015dc:	01 d0                	add    eax,edx
100015de:	c1 e0 02             	shl    eax,0x2
100015e1:	01 d0                	add    eax,edx
100015e3:	05 12 00 00 00       	add    eax,0x12	100015e4: R_386_32	floppyTable
100015e8:	8a 00                	mov    al,BYTE PTR [eax]
100015ea:	0f b6 c0             	movzx  eax,al
100015ed:	0f af c1             	imul   eax,ecx
100015f0:	89 c2                	mov    edx,eax
100015f2:	c1 ea 1f             	shr    edx,0x1f
100015f5:	01 d0                	add    eax,edx
100015f7:	d1 f8                	sar    eax,1
100015f9:	99                   	cdq    
100015fa:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100015fd:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
10001603:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
10001609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000160c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
10001612:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
10001618:	83 ec 04             	sub    esp,0x4
1000161b:	52                   	push   edx
1000161c:	50                   	push   eax
1000161d:	68 55 50 00 10       	push   0x10005055	1000161e: R_386_32	.text
10001622:	e8 fc ff ff ff       	call   10001623 <FloppyDrive::_open(int, int, void*)+0xdd>	10001623: R_386_PC32	Dbg::kprintf(char const*, ...)
10001627:	83 c4 10             	add    esp,0x10
1000162a:	83 ec 0c             	sub    esp,0xc
1000162d:	68 67 50 00 10       	push   0x10005067	1000162e: R_386_32	.text
10001632:	e8 fc ff ff ff       	call   10001633 <FloppyDrive::_open(int, int, void*)+0xed>	10001633: R_386_PC32	Dbg::kprintf(char const*, ...)
10001637:	83 c4 10             	add    esp,0x10
1000163a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000163d:	83 ec 0c             	sub    esp,0xc
10001640:	50                   	push   eax
10001641:	e8 fc ff ff ff       	call   10001642 <FloppyDrive::_open(int, int, void*)+0xfc>	10001642: R_386_PC32	PhysicalDisk::startCache()
10001646:	83 c4 10             	add    esp,0x10
10001649:	83 ec 0c             	sub    esp,0xc
1000164c:	68 7d 50 00 10       	push   0x1000507d	1000164d: R_386_32	.text
10001651:	e8 fc ff ff ff       	call   10001652 <FloppyDrive::_open(int, int, void*)+0x10c>	10001652: R_386_PC32	Dbg::kprintf(char const*, ...)
10001656:	83 c4 10             	add    esp,0x10
10001659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000165c:	83 ec 0c             	sub    esp,0xc
1000165f:	50                   	push   eax
10001660:	e8 fc ff ff ff       	call   10001661 <FloppyDrive::_open(int, int, void*)+0x11b>	10001661: R_386_PC32	createPartitionsForDisk(PhysicalDisk*)
10001665:	83 c4 10             	add    esp,0x10
10001668:	83 ec 0c             	sub    esp,0xc
1000166b:	68 93 50 00 10       	push   0x10005093	1000166c: R_386_32	.text
10001670:	e8 fc ff ff ff       	call   10001671 <FloppyDrive::_open(int, int, void*)+0x12b>	10001671: R_386_PC32	Dbg::kprintf(char const*, ...)
10001675:	83 c4 10             	add    esp,0x10
10001678:	b8 00 00 00 00       	mov    eax,0x0
1000167d:	c9                   	leave  
1000167e:	c3                   	ret    
1000167f:	90                   	nop

10001680 <FloppyDrive::close(int, int, void*)>:
10001680:	b8 00 00 00 00       	mov    eax,0x0
10001685:	c3                   	ret    

10001686 <FloppyDrive::unselect()>:
10001686:	55                   	push   ebp
10001687:	89 e5                	mov    ebp,esp
10001689:	83 ec 08             	sub    esp,0x8
1000168c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000168f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001695:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001698:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
1000169e:	83 ec 04             	sub    esp,0x4
100016a1:	6a 00                	push   0x0
100016a3:	52                   	push   edx
100016a4:	50                   	push   eax
100016a5:	e8 fc ff ff ff       	call   100016a6 <FloppyDrive::unselect()+0x20>	100016a6: R_386_PC32	Floppy::select(int, bool)
100016aa:	83 c4 10             	add    esp,0x10
100016ad:	90                   	nop
100016ae:	c9                   	leave  
100016af:	c3                   	ret    

100016b0 <FloppyDrive::select()>:
100016b0:	55                   	push   ebp
100016b1:	89 e5                	mov    ebp,esp
100016b3:	83 ec 18             	sub    esp,0x18
100016b6:	83 ec 0c             	sub    esp,0xc
100016b9:	68 a9 50 00 10       	push   0x100050a9	100016ba: R_386_32	.text
100016be:	e8 fc ff ff ff       	call   100016bf <FloppyDrive::select()+0xf>	100016bf: R_386_PC32	Dbg::kprintf(char const*, ...)
100016c3:	83 c4 10             	add    esp,0x10
100016c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100016c9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100016cf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100016d2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100016d8:	83 ec 04             	sub    esp,0x4
100016db:	6a 01                	push   0x1
100016dd:	52                   	push   edx
100016de:	50                   	push   eax
100016df:	e8 fc ff ff ff       	call   100016e0 <FloppyDrive::select()+0x30>	100016e0: R_386_PC32	Floppy::select(int, bool)
100016e4:	83 c4 10             	add    esp,0x10
100016e7:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100016ea:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
100016ee:	75 22                	jne    10001712 <FloppyDrive::select()+0x62>
100016f0:	83 ec 0c             	sub    esp,0xc
100016f3:	68 c0 50 00 10       	push   0x100050c0	100016f4: R_386_32	.text
100016f8:	e8 fc ff ff ff       	call   100016f9 <FloppyDrive::select()+0x49>	100016f9: R_386_PC32	Dbg::kprintf(char const*, ...)
100016fd:	83 c4 10             	add    esp,0x10
10001700:	83 ec 0c             	sub    esp,0xc
10001703:	68 dc 05 00 00       	push   0x5dc
10001708:	e8 fc ff ff ff       	call   10001709 <FloppyDrive::select()+0x59>	10001709: R_386_PC32	milliTenthSleep(unsigned int)
1000170d:	83 c4 10             	add    esp,0x10
10001710:	eb a4                	jmp    100016b6 <FloppyDrive::select()+0x6>
10001712:	90                   	nop
10001713:	c9                   	leave  
10001714:	c3                   	ret    
10001715:	90                   	nop

10001716 <FloppyDrive::seek(int, int)>:
10001716:	55                   	push   ebp
10001717:	89 e5                	mov    ebp,esp
10001719:	83 ec 18             	sub    esp,0x18
1000171c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001723:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
10001727:	7e 33                	jle    1000175c <FloppyDrive::seek(int, int)+0x46>
10001729:	83 ec 0c             	sub    esp,0xc
1000172c:	68 e0 50 00 10       	push   0x100050e0	1000172d: R_386_32	.text
10001731:	e8 fc ff ff ff       	call   10001732 <FloppyDrive::seek(int, int)+0x1c>	10001732: R_386_PC32	Dbg::kprintf(char const*, ...)
10001736:	83 c4 10             	add    esp,0x10
10001739:	83 ec 0c             	sub    esp,0xc
1000173c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000173f:	e8 fc ff ff ff       	call   10001740 <FloppyDrive::seek(int, int)+0x2a>	10001740: R_386_PC32	FloppyDrive::motorOff()
10001744:	83 c4 10             	add    esp,0x10
10001747:	83 ec 0c             	sub    esp,0xc
1000174a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000174d:	e8 fc ff ff ff       	call   1000174e <FloppyDrive::seek(int, int)+0x38>	1000174e: R_386_PC32	FloppyDrive::unselect()
10001752:	83 c4 10             	add    esp,0x10
10001755:	b0 00                	mov    al,0x0
10001757:	e9 da 02 00 00       	jmp    10001a36 <FloppyDrive::seek(int, int)+0x320>
1000175c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000175f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001765:	83 ec 08             	sub    esp,0x8
10001768:	50                   	push   eax
10001769:	68 07 51 00 10       	push   0x10005107	1000176a: R_386_32	.text
1000176e:	e8 fc ff ff ff       	call   1000176f <FloppyDrive::seek(int, int)+0x59>	1000176f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001773:	83 c4 10             	add    esp,0x10
10001776:	83 ec 0c             	sub    esp,0xc
10001779:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000177c:	e8 fc ff ff ff       	call   1000177d <FloppyDrive::seek(int, int)+0x67>	1000177d: R_386_PC32	FloppyDrive::select()
10001781:	83 c4 10             	add    esp,0x10
10001784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001787:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
1000178d:	83 ec 08             	sub    esp,0x8
10001790:	50                   	push   eax
10001791:	68 17 51 00 10       	push   0x10005117	10001792: R_386_32	.text
10001796:	e8 fc ff ff ff       	call   10001797 <FloppyDrive::seek(int, int)+0x81>	10001797: R_386_PC32	Dbg::kprintf(char const*, ...)
1000179b:	83 c4 10             	add    esp,0x10
1000179e:	83 ec 0c             	sub    esp,0xc
100017a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017a4:	e8 fc ff ff ff       	call   100017a5 <FloppyDrive::seek(int, int)+0x8f>	100017a5: R_386_PC32	FloppyDrive::motorOn()
100017a9:	83 c4 10             	add    esp,0x10
100017ac:	83 ec 0c             	sub    esp,0xc
100017af:	68 26 51 00 10       	push   0x10005126	100017b0: R_386_32	.text
100017b4:	e8 fc ff ff ff       	call   100017b5 <FloppyDrive::seek(int, int)+0x9f>	100017b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100017b9:	83 c4 10             	add    esp,0x10
100017bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017bf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100017c5:	83 ec 08             	sub    esp,0x8
100017c8:	6a 0f                	push   0xf
100017ca:	50                   	push   eax
100017cb:	e8 fc ff ff ff       	call   100017cc <FloppyDrive::seek(int, int)+0xb6>	100017cc: R_386_PC32	Floppy::writeCommand(unsigned char)
100017d0:	83 c4 10             	add    esp,0x10
100017d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017d6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100017dc:	83 ec 0c             	sub    esp,0xc
100017df:	50                   	push   eax
100017e0:	e8 fc ff ff ff       	call   100017e1 <FloppyDrive::seek(int, int)+0xcb>	100017e1: R_386_PC32	Floppy::wasFailure()
100017e5:	83 c4 10             	add    esp,0x10
100017e8:	84 c0                	test   al,al
100017ea:	74 3d                	je     10001829 <FloppyDrive::seek(int, int)+0x113>
100017ec:	83 ec 0c             	sub    esp,0xc
100017ef:	68 31 51 00 10       	push   0x10005131	100017f0: R_386_32	.text
100017f4:	e8 fc ff ff ff       	call   100017f5 <FloppyDrive::seek(int, int)+0xdf>	100017f5: R_386_PC32	Dbg::kprintf(char const*, ...)
100017f9:	83 c4 10             	add    esp,0x10
100017fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017ff:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001805:	83 ec 0c             	sub    esp,0xc
10001808:	50                   	push   eax
10001809:	e8 fc ff ff ff       	call   1000180a <FloppyDrive::seek(int, int)+0xf4>	1000180a: R_386_PC32	Floppy::reset()
1000180e:	83 c4 10             	add    esp,0x10
10001811:	83 ec 0c             	sub    esp,0xc
10001814:	68 3d 51 00 10       	push   0x1000513d	10001815: R_386_32	.text
10001819:	e8 fc ff ff ff       	call   1000181a <FloppyDrive::seek(int, int)+0x104>	1000181a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000181e:	83 c4 10             	add    esp,0x10
10001821:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001824:	e9 fa fe ff ff       	jmp    10001723 <FloppyDrive::seek(int, int)+0xd>
10001829:	83 ec 0c             	sub    esp,0xc
1000182c:	68 49 51 00 10       	push   0x10005149	1000182d: R_386_32	.text
10001831:	e8 fc ff ff ff       	call   10001832 <FloppyDrive::seek(int, int)+0x11c>	10001832: R_386_PC32	Dbg::kprintf(char const*, ...)
10001836:	83 c4 10             	add    esp,0x10
10001839:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000183c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001842:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10001849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000184c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001852:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001855:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
1000185b:	88 d1                	mov    cl,dl
1000185d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10001860:	c1 e2 02             	shl    edx,0x2
10001863:	09 ca                	or     edx,ecx
10001865:	0f b6 d2             	movzx  edx,dl
10001868:	83 ec 08             	sub    esp,0x8
1000186b:	52                   	push   edx
1000186c:	50                   	push   eax
1000186d:	e8 fc ff ff ff       	call   1000186e <FloppyDrive::seek(int, int)+0x158>	1000186e: R_386_PC32	Floppy::writeCommand(unsigned char)
10001872:	83 c4 10             	add    esp,0x10
10001875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001878:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000187e:	83 ec 0c             	sub    esp,0xc
10001881:	50                   	push   eax
10001882:	e8 fc ff ff ff       	call   10001883 <FloppyDrive::seek(int, int)+0x16d>	10001883: R_386_PC32	Floppy::wasFailure()
10001887:	83 c4 10             	add    esp,0x10
1000188a:	84 c0                	test   al,al
1000188c:	74 1d                	je     100018ab <FloppyDrive::seek(int, int)+0x195>
1000188e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001891:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001897:	83 ec 0c             	sub    esp,0xc
1000189a:	50                   	push   eax
1000189b:	e8 fc ff ff ff       	call   1000189c <FloppyDrive::seek(int, int)+0x186>	1000189c: R_386_PC32	Floppy::reset()
100018a0:	83 c4 10             	add    esp,0x10
100018a3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100018a6:	e9 78 fe ff ff       	jmp    10001723 <FloppyDrive::seek(int, int)+0xd>
100018ab:	83 ec 0c             	sub    esp,0xc
100018ae:	68 54 51 00 10       	push   0x10005154	100018af: R_386_32	.text
100018b3:	e8 fc ff ff ff       	call   100018b4 <FloppyDrive::seek(int, int)+0x19e>	100018b4: R_386_PC32	Dbg::kprintf(char const*, ...)
100018b8:	83 c4 10             	add    esp,0x10
100018bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018be:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018c4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100018c7:	0f b6 d2             	movzx  edx,dl
100018ca:	83 ec 08             	sub    esp,0x8
100018cd:	52                   	push   edx
100018ce:	50                   	push   eax
100018cf:	e8 fc ff ff ff       	call   100018d0 <FloppyDrive::seek(int, int)+0x1ba>	100018d0: R_386_PC32	Floppy::writeCommand(unsigned char)
100018d4:	83 c4 10             	add    esp,0x10
100018d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018da:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018e0:	83 ec 0c             	sub    esp,0xc
100018e3:	50                   	push   eax
100018e4:	e8 fc ff ff ff       	call   100018e5 <FloppyDrive::seek(int, int)+0x1cf>	100018e5: R_386_PC32	Floppy::wasFailure()
100018e9:	83 c4 10             	add    esp,0x10
100018ec:	84 c0                	test   al,al
100018ee:	74 1d                	je     1000190d <FloppyDrive::seek(int, int)+0x1f7>
100018f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018f3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018f9:	83 ec 0c             	sub    esp,0xc
100018fc:	50                   	push   eax
100018fd:	e8 fc ff ff ff       	call   100018fe <FloppyDrive::seek(int, int)+0x1e8>	100018fe: R_386_PC32	Floppy::reset()
10001902:	83 c4 10             	add    esp,0x10
10001905:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001908:	e9 16 fe ff ff       	jmp    10001723 <FloppyDrive::seek(int, int)+0xd>
1000190d:	83 ec 0c             	sub    esp,0xc
10001910:	68 5f 51 00 10       	push   0x1000515f	10001911: R_386_32	.text
10001915:	e8 fc ff ff ff       	call   10001916 <FloppyDrive::seek(int, int)+0x200>	10001916: R_386_PC32	Dbg::kprintf(char const*, ...)
1000191a:	83 c4 10             	add    esp,0x10
1000191d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001920:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001926:	83 ec 08             	sub    esp,0x8
10001929:	68 dc 05 00 00       	push   0x5dc
1000192e:	50                   	push   eax
1000192f:	e8 fc ff ff ff       	call   10001930 <FloppyDrive::seek(int, int)+0x21a>	10001930: R_386_PC32	Floppy::waitIRQ(int)
10001934:	83 c4 10             	add    esp,0x10
10001937:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000193a:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000193d:	83 f0 01             	xor    eax,0x1
10001940:	84 c0                	test   al,al
10001942:	74 2d                	je     10001971 <FloppyDrive::seek(int, int)+0x25b>
10001944:	83 ec 0c             	sub    esp,0xc
10001947:	68 6a 51 00 10       	push   0x1000516a	10001948: R_386_32	.text
1000194c:	e8 fc ff ff ff       	call   1000194d <FloppyDrive::seek(int, int)+0x237>	1000194d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001951:	83 c4 10             	add    esp,0x10
10001954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001957:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000195d:	83 ec 0c             	sub    esp,0xc
10001960:	50                   	push   eax
10001961:	e8 fc ff ff ff       	call   10001962 <FloppyDrive::seek(int, int)+0x24c>	10001962: R_386_PC32	Floppy::reset()
10001966:	83 c4 10             	add    esp,0x10
10001969:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000196c:	e9 b2 fd ff ff       	jmp    10001723 <FloppyDrive::seek(int, int)+0xd>
10001971:	83 ec 0c             	sub    esp,0xc
10001974:	68 78 51 00 10       	push   0x10005178	10001975: R_386_32	.text
10001979:	e8 fc ff ff ff       	call   1000197a <FloppyDrive::seek(int, int)+0x264>	1000197a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000197e:	83 c4 10             	add    esp,0x10
10001981:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
10001988:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
1000198f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001992:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001998:	83 ec 04             	sub    esp,0x4
1000199b:	8d 55 e8             	lea    edx,[ebp-0x18]
1000199e:	52                   	push   edx
1000199f:	8d 55 ec             	lea    edx,[ebp-0x14]
100019a2:	52                   	push   edx
100019a3:	50                   	push   eax
100019a4:	e8 fc ff ff ff       	call   100019a5 <FloppyDrive::seek(int, int)+0x28f>	100019a5: R_386_PC32	Floppy::senseInterrupt(int*, int*)
100019a9:	83 c4 10             	add    esp,0x10
100019ac:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
100019af:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
100019b2:	83 f0 01             	xor    eax,0x1
100019b5:	84 c0                	test   al,al
100019b7:	74 15                	je     100019ce <FloppyDrive::seek(int, int)+0x2b8>
100019b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019bc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019c2:	83 ec 0c             	sub    esp,0xc
100019c5:	50                   	push   eax
100019c6:	e8 fc ff ff ff       	call   100019c7 <FloppyDrive::seek(int, int)+0x2b1>	100019c7: R_386_PC32	Floppy::reset()
100019cb:	83 c4 10             	add    esp,0x10
100019ce:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
100019d1:	83 f0 01             	xor    eax,0x1
100019d4:	84 c0                	test   al,al
100019d6:	75 08                	jne    100019e0 <FloppyDrive::seek(int, int)+0x2ca>
100019d8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100019db:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
100019de:	74 08                	je     100019e8 <FloppyDrive::seek(int, int)+0x2d2>
100019e0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100019e3:	e9 3b fd ff ff       	jmp    10001723 <FloppyDrive::seek(int, int)+0xd>
100019e8:	83 ec 0c             	sub    esp,0xc
100019eb:	68 83 51 00 10       	push   0x10005183	100019ec: R_386_32	.text
100019f0:	e8 fc ff ff ff       	call   100019f1 <FloppyDrive::seek(int, int)+0x2db>	100019f1: R_386_PC32	Dbg::kprintf(char const*, ...)
100019f5:	83 c4 10             	add    esp,0x10
100019f8:	83 ec 0c             	sub    esp,0xc
100019fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100019fe:	e8 fc ff ff ff       	call   100019ff <FloppyDrive::seek(int, int)+0x2e9>	100019ff: R_386_PC32	FloppyDrive::motorOff()
10001a03:	83 c4 10             	add    esp,0x10
10001a06:	83 ec 0c             	sub    esp,0xc
10001a09:	68 90 51 00 10       	push   0x10005190	10001a0a: R_386_32	.text
10001a0e:	e8 fc ff ff ff       	call   10001a0f <FloppyDrive::seek(int, int)+0x2f9>	10001a0f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a13:	83 c4 10             	add    esp,0x10
10001a16:	83 ec 0c             	sub    esp,0xc
10001a19:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a1c:	e8 fc ff ff ff       	call   10001a1d <FloppyDrive::seek(int, int)+0x307>	10001a1d: R_386_PC32	FloppyDrive::unselect()
10001a21:	83 c4 10             	add    esp,0x10
10001a24:	83 ec 0c             	sub    esp,0xc
10001a27:	68 9d 51 00 10       	push   0x1000519d	10001a28: R_386_32	.text
10001a2c:	e8 fc ff ff ff       	call   10001a2d <FloppyDrive::seek(int, int)+0x317>	10001a2d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a31:	83 c4 10             	add    esp,0x10
10001a34:	b0 01                	mov    al,0x1
10001a36:	c9                   	leave  
10001a37:	c3                   	ret    

10001a38 <FloppyDrive::calibrate()>:
10001a38:	55                   	push   ebp
10001a39:	89 e5                	mov    ebp,esp
10001a3b:	83 ec 18             	sub    esp,0x18
10001a3e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001a45:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
10001a49:	7e 25                	jle    10001a70 <FloppyDrive::calibrate()+0x38>
10001a4b:	83 ec 0c             	sub    esp,0xc
10001a4e:	68 ac 51 00 10       	push   0x100051ac	10001a4f: R_386_32	.text
10001a53:	e8 fc ff ff ff       	call   10001a54 <FloppyDrive::calibrate()+0x1c>	10001a54: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a58:	83 c4 10             	add    esp,0x10
10001a5b:	83 ec 0c             	sub    esp,0xc
10001a5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a61:	e8 fc ff ff ff       	call   10001a62 <FloppyDrive::calibrate()+0x2a>	10001a62: R_386_PC32	FloppyDrive::motorOff()
10001a66:	83 c4 10             	add    esp,0x10
10001a69:	b0 00                	mov    al,0x0
10001a6b:	e9 01 02 00 00       	jmp    10001c71 <FloppyDrive::calibrate()+0x239>
10001a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a73:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001a79:	83 ec 08             	sub    esp,0x8
10001a7c:	50                   	push   eax
10001a7d:	68 d8 51 00 10       	push   0x100051d8	10001a7e: R_386_32	.text
10001a82:	e8 fc ff ff ff       	call   10001a83 <FloppyDrive::calibrate()+0x4b>	10001a83: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a87:	83 c4 10             	add    esp,0x10
10001a8a:	83 ec 0c             	sub    esp,0xc
10001a8d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a90:	e8 fc ff ff ff       	call   10001a91 <FloppyDrive::calibrate()+0x59>	10001a91: R_386_PC32	FloppyDrive::motorOn()
10001a95:	83 c4 10             	add    esp,0x10
10001a98:	83 ec 0c             	sub    esp,0xc
10001a9b:	68 e6 51 00 10       	push   0x100051e6	10001a9c: R_386_32	.text
10001aa0:	e8 fc ff ff ff       	call   10001aa1 <FloppyDrive::calibrate()+0x69>	10001aa1: R_386_PC32	Dbg::kprintf(char const*, ...)
10001aa5:	83 c4 10             	add    esp,0x10
10001aa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001aab:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ab1:	83 ec 08             	sub    esp,0x8
10001ab4:	6a 07                	push   0x7
10001ab6:	50                   	push   eax
10001ab7:	e8 fc ff ff ff       	call   10001ab8 <FloppyDrive::calibrate()+0x80>	10001ab8: R_386_PC32	Floppy::writeCommand(unsigned char)
10001abc:	83 c4 10             	add    esp,0x10
10001abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ac2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ac8:	83 ec 0c             	sub    esp,0xc
10001acb:	50                   	push   eax
10001acc:	e8 fc ff ff ff       	call   10001acd <FloppyDrive::calibrate()+0x95>	10001acd: R_386_PC32	Floppy::wasFailure()
10001ad1:	83 c4 10             	add    esp,0x10
10001ad4:	84 c0                	test   al,al
10001ad6:	74 1d                	je     10001af5 <FloppyDrive::calibrate()+0xbd>
10001ad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001adb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ae1:	83 ec 0c             	sub    esp,0xc
10001ae4:	50                   	push   eax
10001ae5:	e8 fc ff ff ff       	call   10001ae6 <FloppyDrive::calibrate()+0xae>	10001ae6: R_386_PC32	Floppy::reset()
10001aea:	83 c4 10             	add    esp,0x10
10001aed:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001af0:	e9 50 ff ff ff       	jmp    10001a45 <FloppyDrive::calibrate()+0xd>
10001af5:	83 ec 0c             	sub    esp,0xc
10001af8:	68 ef 51 00 10       	push   0x100051ef	10001af9: R_386_32	.text
10001afd:	e8 fc ff ff ff       	call   10001afe <FloppyDrive::calibrate()+0xc6>	10001afe: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b02:	83 c4 10             	add    esp,0x10
10001b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b08:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b0e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10001b15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b18:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b1e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001b21:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001b27:	0f b6 d2             	movzx  edx,dl
10001b2a:	83 ec 08             	sub    esp,0x8
10001b2d:	52                   	push   edx
10001b2e:	50                   	push   eax
10001b2f:	e8 fc ff ff ff       	call   10001b30 <FloppyDrive::calibrate()+0xf8>	10001b30: R_386_PC32	Floppy::writeCommand(unsigned char)
10001b34:	83 c4 10             	add    esp,0x10
10001b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b3a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b40:	83 ec 0c             	sub    esp,0xc
10001b43:	50                   	push   eax
10001b44:	e8 fc ff ff ff       	call   10001b45 <FloppyDrive::calibrate()+0x10d>	10001b45: R_386_PC32	Floppy::wasFailure()
10001b49:	83 c4 10             	add    esp,0x10
10001b4c:	84 c0                	test   al,al
10001b4e:	74 1d                	je     10001b6d <FloppyDrive::calibrate()+0x135>
10001b50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b53:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b59:	83 ec 0c             	sub    esp,0xc
10001b5c:	50                   	push   eax
10001b5d:	e8 fc ff ff ff       	call   10001b5e <FloppyDrive::calibrate()+0x126>	10001b5e: R_386_PC32	Floppy::reset()
10001b62:	83 c4 10             	add    esp,0x10
10001b65:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001b68:	e9 d8 fe ff ff       	jmp    10001a45 <FloppyDrive::calibrate()+0xd>
10001b6d:	83 ec 0c             	sub    esp,0xc
10001b70:	68 f8 51 00 10       	push   0x100051f8	10001b71: R_386_32	.text
10001b75:	e8 fc ff ff ff       	call   10001b76 <FloppyDrive::calibrate()+0x13e>	10001b76: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b7a:	83 c4 10             	add    esp,0x10
10001b7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b80:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b86:	83 ec 08             	sub    esp,0x8
10001b89:	68 dc 05 00 00       	push   0x5dc
10001b8e:	50                   	push   eax
10001b8f:	e8 fc ff ff ff       	call   10001b90 <FloppyDrive::calibrate()+0x158>	10001b90: R_386_PC32	Floppy::waitIRQ(int)
10001b94:	83 c4 10             	add    esp,0x10
10001b97:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001b9a:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001b9d:	83 f0 01             	xor    eax,0x1
10001ba0:	84 c0                	test   al,al
10001ba2:	74 1d                	je     10001bc1 <FloppyDrive::calibrate()+0x189>
10001ba4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ba7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bad:	83 ec 0c             	sub    esp,0xc
10001bb0:	50                   	push   eax
10001bb1:	e8 fc ff ff ff       	call   10001bb2 <FloppyDrive::calibrate()+0x17a>	10001bb2: R_386_PC32	Floppy::reset()
10001bb6:	83 c4 10             	add    esp,0x10
10001bb9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001bbc:	e9 84 fe ff ff       	jmp    10001a45 <FloppyDrive::calibrate()+0xd>
10001bc1:	83 ec 0c             	sub    esp,0xc
10001bc4:	68 01 52 00 10       	push   0x10005201	10001bc5: R_386_32	.text
10001bc9:	e8 fc ff ff ff       	call   10001bca <FloppyDrive::calibrate()+0x192>	10001bca: R_386_PC32	Dbg::kprintf(char const*, ...)
10001bce:	83 c4 10             	add    esp,0x10
10001bd1:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
10001bd8:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10001bdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001be2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001be8:	83 ec 04             	sub    esp,0x4
10001beb:	8d 55 e8             	lea    edx,[ebp-0x18]
10001bee:	52                   	push   edx
10001bef:	8d 55 ec             	lea    edx,[ebp-0x14]
10001bf2:	52                   	push   edx
10001bf3:	50                   	push   eax
10001bf4:	e8 fc ff ff ff       	call   10001bf5 <FloppyDrive::calibrate()+0x1bd>	10001bf5: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10001bf9:	83 c4 10             	add    esp,0x10
10001bfc:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10001bff:	83 ec 0c             	sub    esp,0xc
10001c02:	68 0a 52 00 10       	push   0x1000520a	10001c03: R_386_32	.text
10001c07:	e8 fc ff ff ff       	call   10001c08 <FloppyDrive::calibrate()+0x1d0>	10001c08: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c0c:	83 c4 10             	add    esp,0x10
10001c0f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001c12:	83 f0 01             	xor    eax,0x1
10001c15:	84 c0                	test   al,al
10001c17:	74 15                	je     10001c2e <FloppyDrive::calibrate()+0x1f6>
10001c19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c1c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c22:	83 ec 0c             	sub    esp,0xc
10001c25:	50                   	push   eax
10001c26:	e8 fc ff ff ff       	call   10001c27 <FloppyDrive::calibrate()+0x1ef>	10001c27: R_386_PC32	Floppy::reset()
10001c2b:	83 c4 10             	add    esp,0x10
10001c2e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001c31:	83 f0 01             	xor    eax,0x1
10001c34:	84 c0                	test   al,al
10001c36:	75 11                	jne    10001c49 <FloppyDrive::calibrate()+0x211>
10001c38:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001c3b:	85 c0                	test   eax,eax
10001c3d:	75 0a                	jne    10001c49 <FloppyDrive::calibrate()+0x211>
10001c3f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10001c42:	83 e0 20             	and    eax,0x20
10001c45:	85 c0                	test   eax,eax
10001c47:	75 08                	jne    10001c51 <FloppyDrive::calibrate()+0x219>
10001c49:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001c4c:	e9 f4 fd ff ff       	jmp    10001a45 <FloppyDrive::calibrate()+0xd>
10001c51:	83 ec 0c             	sub    esp,0xc
10001c54:	68 13 52 00 10       	push   0x10005213	10001c55: R_386_32	.text
10001c59:	e8 fc ff ff ff       	call   10001c5a <FloppyDrive::calibrate()+0x222>	10001c5a: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c5e:	83 c4 10             	add    esp,0x10
10001c61:	83 ec 0c             	sub    esp,0xc
10001c64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001c67:	e8 fc ff ff ff       	call   10001c68 <FloppyDrive::calibrate()+0x230>	10001c68: R_386_PC32	FloppyDrive::motorOff()
10001c6c:	83 c4 10             	add    esp,0x10
10001c6f:	b0 01                	mov    al,0x1
10001c71:	c9                   	leave  
10001c72:	c3                   	ret    
10001c73:	90                   	nop

10001c74 <FloppyDrive::doTrack(int, bool, unsigned char*)>:
10001c74:	55                   	push   ebp
10001c75:	89 e5                	mov    ebp,esp
10001c77:	57                   	push   edi
10001c78:	56                   	push   esi
10001c79:	53                   	push   ebx
10001c7a:	83 ec 6c             	sub    esp,0x6c
10001c7d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001c80:	88 45 94             	mov    BYTE PTR [ebp-0x6c],al
10001c83:	80 7d 94 00          	cmp    BYTE PTR [ebp-0x6c],0x0
10001c87:	74 43                	je     10001ccc <FloppyDrive::doTrack(int, bool, unsigned char*)+0x58>
10001c89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c8c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
10001c98:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001c9b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001c9e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001ca1:	c7 45 cc 00 48 00 00 	mov    DWORD PTR [ebp-0x34],0x4800
10001ca8:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10001cab:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001cae:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001cb1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001cb4:	8b 4d cc             	mov    ecx,DWORD PTR [ebp-0x34]
10001cb7:	89 c6                	mov    esi,eax
10001cb9:	89 d7                	mov    edi,edx
10001cbb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10001cbd:	89 c8                	mov    eax,ecx
10001cbf:	89 fa                	mov    edx,edi
10001cc1:	89 f3                	mov    ebx,esi
10001cc3:	89 5d c4             	mov    DWORD PTR [ebp-0x3c],ebx
10001cc6:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
10001cc9:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001ccc:	80 7d 94 00          	cmp    BYTE PTR [ebp-0x6c],0x0
10001cd0:	74 07                	je     10001cd9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x65>
10001cd2:	b8 c5 00 00 00       	mov    eax,0xc5
10001cd7:	eb 05                	jmp    10001cde <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6a>
10001cd9:	b8 c6 00 00 00       	mov    eax,0xc6
10001cde:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001ce1:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10001ce8:	83 ec 0c             	sub    esp,0xc
10001ceb:	68 1c 52 00 10       	push   0x1000521c	10001cec: R_386_32	.text
10001cf0:	e8 fc ff ff ff       	call   10001cf1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7d>	10001cf1: R_386_PC32	Dbg::kprintf(char const*, ...)
10001cf5:	83 c4 10             	add    esp,0x10
10001cf8:	83 7d e4 14          	cmp    DWORD PTR [ebp-0x1c],0x14
10001cfc:	75 26                	jne    10001d24 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xb0>
10001cfe:	83 ec 0c             	sub    esp,0xc
10001d01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d04:	e8 fc ff ff ff       	call   10001d05 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x91>	10001d05: R_386_PC32	FloppyDrive::motorOff()
10001d09:	83 c4 10             	add    esp,0x10
10001d0c:	83 ec 0c             	sub    esp,0xc
10001d0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d12:	e8 fc ff ff ff       	call   10001d13 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x9f>	10001d13: R_386_PC32	FloppyDrive::unselect()
10001d17:	83 c4 10             	add    esp,0x10
10001d1a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10001d1f:	e9 71 07 00 00       	jmp    10002495 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x821>
10001d24:	83 ec 0c             	sub    esp,0xc
10001d27:	68 26 52 00 10       	push   0x10005226	10001d28: R_386_32	.text
10001d2c:	e8 fc ff ff ff       	call   10001d2d <FloppyDrive::doTrack(int, bool, unsigned char*)+0xb9>	10001d2d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d31:	83 c4 10             	add    esp,0x10
10001d34:	83 ec 04             	sub    esp,0x4
10001d37:	6a 00                	push   0x0
10001d39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001d3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d3f:	e8 fc ff ff ff       	call   10001d40 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xcc>	10001d40: R_386_PC32	FloppyDrive::seek(int, int)
10001d44:	83 c4 10             	add    esp,0x10
10001d47:	83 f0 01             	xor    eax,0x1
10001d4a:	84 c0                	test   al,al
10001d4c:	74 0a                	je     10001d58 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xe4>
10001d4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001d53:	e9 3d 07 00 00       	jmp    10002495 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x821>
10001d58:	83 ec 04             	sub    esp,0x4
10001d5b:	6a 01                	push   0x1
10001d5d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001d60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d63:	e8 fc ff ff ff       	call   10001d64 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xf0>	10001d64: R_386_PC32	FloppyDrive::seek(int, int)
10001d68:	83 c4 10             	add    esp,0x10
10001d6b:	83 f0 01             	xor    eax,0x1
10001d6e:	84 c0                	test   al,al
10001d70:	74 0a                	je     10001d7c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x108>
10001d72:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001d77:	e9 19 07 00 00       	jmp    10002495 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x821>
10001d7c:	83 ec 0c             	sub    esp,0xc
10001d7f:	68 36 52 00 10       	push   0x10005236	10001d80: R_386_32	.text
10001d84:	e8 fc ff ff ff       	call   10001d85 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x111>	10001d85: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d89:	83 c4 10             	add    esp,0x10
10001d8c:	83 ec 0c             	sub    esp,0xc
10001d8f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d92:	e8 fc ff ff ff       	call   10001d93 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x11f>	10001d93: R_386_PC32	FloppyDrive::motorOn()
10001d97:	83 c4 10             	add    esp,0x10
10001d9a:	83 ec 0c             	sub    esp,0xc
10001d9d:	68 42 52 00 10       	push   0x10005242	10001d9e: R_386_32	.text
10001da2:	e8 fc ff ff ff       	call   10001da3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x12f>	10001da3: R_386_PC32	Dbg::kprintf(char const*, ...)
10001da7:	83 c4 10             	add    esp,0x10
10001daa:	83 ec 0c             	sub    esp,0xc
10001dad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001db0:	e8 fc ff ff ff       	call   10001db1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x13d>	10001db1: R_386_PC32	FloppyDrive::select()
10001db5:	83 c4 10             	add    esp,0x10
10001db8:	83 ec 0c             	sub    esp,0xc
10001dbb:	68 4d 52 00 10       	push   0x1000524d	10001dbc: R_386_32	.text
10001dc0:	e8 fc ff ff ff       	call   10001dc1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x14d>	10001dc1: R_386_PC32	Dbg::kprintf(char const*, ...)
10001dc5:	83 c4 10             	add    esp,0x10
10001dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dcb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001dd1:	0f b6 55 94          	movzx  edx,BYTE PTR [ebp-0x6c]
10001dd5:	83 ec 08             	sub    esp,0x8
10001dd8:	52                   	push   edx
10001dd9:	50                   	push   eax
10001dda:	e8 fc ff ff ff       	call   10001ddb <FloppyDrive::doTrack(int, bool, unsigned char*)+0x167>	10001ddb: R_386_PC32	Floppy::dmaInit(bool)
10001ddf:	83 c4 10             	add    esp,0x10
10001de2:	83 ec 0c             	sub    esp,0xc
10001de5:	68 58 52 00 10       	push   0x10005258	10001de6: R_386_32	.text
10001dea:	e8 fc ff ff ff       	call   10001deb <FloppyDrive::doTrack(int, bool, unsigned char*)+0x177>	10001deb: R_386_PC32	Dbg::kprintf(char const*, ...)
10001def:	83 c4 10             	add    esp,0x10
10001df2:	83 ec 0c             	sub    esp,0xc
10001df5:	68 e8 03 00 00       	push   0x3e8
10001dfa:	e8 fc ff ff ff       	call   10001dfb <FloppyDrive::doTrack(int, bool, unsigned char*)+0x187>	10001dfb: R_386_PC32	milliTenthSleep(unsigned int)
10001dff:	83 c4 10             	add    esp,0x10
10001e02:	83 ec 0c             	sub    esp,0xc
10001e05:	68 65 52 00 10       	push   0x10005265	10001e06: R_386_32	.text
10001e0a:	e8 fc ff ff ff       	call   10001e0b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x197>	10001e0b: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e0f:	83 c4 10             	add    esp,0x10
10001e12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e15:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e1b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001e1e:	0f b6 d2             	movzx  edx,dl
10001e21:	83 ec 08             	sub    esp,0x8
10001e24:	52                   	push   edx
10001e25:	50                   	push   eax
10001e26:	e8 fc ff ff ff       	call   10001e27 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1b3>	10001e27: R_386_PC32	Floppy::writeCommand(unsigned char)
10001e2b:	83 c4 10             	add    esp,0x10
10001e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e31:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e37:	83 ec 0c             	sub    esp,0xc
10001e3a:	50                   	push   eax
10001e3b:	e8 fc ff ff ff       	call   10001e3c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1c8>	10001e3c: R_386_PC32	Floppy::wasFailure()
10001e40:	83 c4 10             	add    esp,0x10
10001e43:	84 c0                	test   al,al
10001e45:	74 1d                	je     10001e64 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1f0>
10001e47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e4a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e50:	83 ec 0c             	sub    esp,0xc
10001e53:	50                   	push   eax
10001e54:	e8 fc ff ff ff       	call   10001e55 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1e1>	10001e55: R_386_PC32	Floppy::reset()
10001e59:	83 c4 10             	add    esp,0x10
10001e5c:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001e5f:	e9 84 fe ff ff       	jmp    10001ce8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001e64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e67:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e6d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001e70:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001e76:	0f b6 d2             	movzx  edx,dl
10001e79:	83 ec 08             	sub    esp,0x8
10001e7c:	52                   	push   edx
10001e7d:	50                   	push   eax
10001e7e:	e8 fc ff ff ff       	call   10001e7f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x20b>	10001e7f: R_386_PC32	Floppy::writeCommand(unsigned char)
10001e83:	83 c4 10             	add    esp,0x10
10001e86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e89:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e8f:	83 ec 0c             	sub    esp,0xc
10001e92:	50                   	push   eax
10001e93:	e8 fc ff ff ff       	call   10001e94 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x220>	10001e94: R_386_PC32	Floppy::wasFailure()
10001e98:	83 c4 10             	add    esp,0x10
10001e9b:	84 c0                	test   al,al
10001e9d:	74 1d                	je     10001ebc <FloppyDrive::doTrack(int, bool, unsigned char*)+0x248>
10001e9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ea2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ea8:	83 ec 0c             	sub    esp,0xc
10001eab:	50                   	push   eax
10001eac:	e8 fc ff ff ff       	call   10001ead <FloppyDrive::doTrack(int, bool, unsigned char*)+0x239>	10001ead: R_386_PC32	Floppy::reset()
10001eb1:	83 c4 10             	add    esp,0x10
10001eb4:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001eb7:	e9 2c fe ff ff       	jmp    10001ce8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001ebc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ebf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ec5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001ec8:	0f b6 d2             	movzx  edx,dl
10001ecb:	83 ec 08             	sub    esp,0x8
10001ece:	52                   	push   edx
10001ecf:	50                   	push   eax
10001ed0:	e8 fc ff ff ff       	call   10001ed1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x25d>	10001ed1: R_386_PC32	Floppy::writeCommand(unsigned char)
10001ed5:	83 c4 10             	add    esp,0x10
10001ed8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001edb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ee1:	83 ec 0c             	sub    esp,0xc
10001ee4:	50                   	push   eax
10001ee5:	e8 fc ff ff ff       	call   10001ee6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x272>	10001ee6: R_386_PC32	Floppy::wasFailure()
10001eea:	83 c4 10             	add    esp,0x10
10001eed:	84 c0                	test   al,al
10001eef:	74 1d                	je     10001f0e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x29a>
10001ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ef4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001efa:	83 ec 0c             	sub    esp,0xc
10001efd:	50                   	push   eax
10001efe:	e8 fc ff ff ff       	call   10001eff <FloppyDrive::doTrack(int, bool, unsigned char*)+0x28b>	10001eff: R_386_PC32	Floppy::reset()
10001f03:	83 c4 10             	add    esp,0x10
10001f06:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001f09:	e9 da fd ff ff       	jmp    10001ce8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001f0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f11:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f17:	83 ec 08             	sub    esp,0x8
10001f1a:	6a 00                	push   0x0
10001f1c:	50                   	push   eax
10001f1d:	e8 fc ff ff ff       	call   10001f1e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2aa>	10001f1e: R_386_PC32	Floppy::writeCommand(unsigned char)
10001f22:	83 c4 10             	add    esp,0x10
10001f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f28:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f2e:	83 ec 0c             	sub    esp,0xc
10001f31:	50                   	push   eax
10001f32:	e8 fc ff ff ff       	call   10001f33 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2bf>	10001f33: R_386_PC32	Floppy::wasFailure()
10001f37:	83 c4 10             	add    esp,0x10
10001f3a:	84 c0                	test   al,al
10001f3c:	74 1d                	je     10001f5b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2e7>
10001f3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f41:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f47:	83 ec 0c             	sub    esp,0xc
10001f4a:	50                   	push   eax
10001f4b:	e8 fc ff ff ff       	call   10001f4c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2d8>	10001f4c: R_386_PC32	Floppy::reset()
10001f50:	83 c4 10             	add    esp,0x10
10001f53:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001f56:	e9 8d fd ff ff       	jmp    10001ce8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001f5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f5e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f64:	83 ec 08             	sub    esp,0x8
10001f67:	6a 01                	push   0x1
10001f69:	50                   	push   eax
10001f6a:	e8 fc ff ff ff       	call   10001f6b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2f7>	10001f6b: R_386_PC32	Floppy::writeCommand(unsigned char)
10001f6f:	83 c4 10             	add    esp,0x10
10001f72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f75:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f7b:	83 ec 0c             	sub    esp,0xc
10001f7e:	50                   	push   eax
10001f7f:	e8 fc ff ff ff       	call   10001f80 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x30c>	10001f80: R_386_PC32	Floppy::wasFailure()
10001f84:	83 c4 10             	add    esp,0x10
10001f87:	84 c0                	test   al,al
10001f89:	74 1d                	je     10001fa8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x334>
10001f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f8e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f94:	83 ec 0c             	sub    esp,0xc
10001f97:	50                   	push   eax
10001f98:	e8 fc ff ff ff       	call   10001f99 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x325>	10001f99: R_386_PC32	Floppy::reset()
10001f9d:	83 c4 10             	add    esp,0x10
10001fa0:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001fa3:	e9 40 fd ff ff       	jmp    10001ce8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001fa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fab:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fb1:	83 ec 08             	sub    esp,0x8
10001fb4:	6a 02                	push   0x2
10001fb6:	50                   	push   eax
10001fb7:	e8 fc ff ff ff       	call   10001fb8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x344>	10001fb8: R_386_PC32	Floppy::writeCommand(unsigned char)
10001fbc:	83 c4 10             	add    esp,0x10
10001fbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fc2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fc8:	83 ec 0c             	sub    esp,0xc
10001fcb:	50                   	push   eax
10001fcc:	e8 fc ff ff ff       	call   10001fcd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x359>	10001fcd: R_386_PC32	Floppy::wasFailure()
10001fd1:	83 c4 10             	add    esp,0x10
10001fd4:	84 c0                	test   al,al
10001fd6:	74 1d                	je     10001ff5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x381>
10001fd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fdb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fe1:	83 ec 0c             	sub    esp,0xc
10001fe4:	50                   	push   eax
10001fe5:	e8 fc ff ff ff       	call   10001fe6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x372>	10001fe6: R_386_PC32	Floppy::reset()
10001fea:	83 c4 10             	add    esp,0x10
10001fed:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001ff0:	e9 f3 fc ff ff       	jmp    10001ce8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ff8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ffe:	83 ec 08             	sub    esp,0x8
10002001:	6a 12                	push   0x12
10002003:	50                   	push   eax
10002004:	e8 fc ff ff ff       	call   10002005 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x391>	10002005: R_386_PC32	Floppy::writeCommand(unsigned char)
10002009:	83 c4 10             	add    esp,0x10
1000200c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000200f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002015:	83 ec 0c             	sub    esp,0xc
10002018:	50                   	push   eax
10002019:	e8 fc ff ff ff       	call   1000201a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3a6>	1000201a: R_386_PC32	Floppy::wasFailure()
1000201e:	83 c4 10             	add    esp,0x10
10002021:	84 c0                	test   al,al
10002023:	74 1d                	je     10002042 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3ce>
10002025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002028:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000202e:	83 ec 0c             	sub    esp,0xc
10002031:	50                   	push   eax
10002032:	e8 fc ff ff ff       	call   10002033 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3bf>	10002033: R_386_PC32	Floppy::reset()
10002037:	83 c4 10             	add    esp,0x10
1000203a:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000203d:	e9 a6 fc ff ff       	jmp    10001ce8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002045:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000204b:	83 ec 08             	sub    esp,0x8
1000204e:	6a 1b                	push   0x1b
10002050:	50                   	push   eax
10002051:	e8 fc ff ff ff       	call   10002052 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3de>	10002052: R_386_PC32	Floppy::writeCommand(unsigned char)
10002056:	83 c4 10             	add    esp,0x10
10002059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000205c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002062:	83 ec 0c             	sub    esp,0xc
10002065:	50                   	push   eax
10002066:	e8 fc ff ff ff       	call   10002067 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3f3>	10002067: R_386_PC32	Floppy::wasFailure()
1000206b:	83 c4 10             	add    esp,0x10
1000206e:	84 c0                	test   al,al
10002070:	74 1d                	je     1000208f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x41b>
10002072:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002075:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000207b:	83 ec 0c             	sub    esp,0xc
1000207e:	50                   	push   eax
1000207f:	e8 fc ff ff ff       	call   10002080 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x40c>	10002080: R_386_PC32	Floppy::reset()
10002084:	83 c4 10             	add    esp,0x10
10002087:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000208a:	e9 59 fc ff ff       	jmp    10001ce8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000208f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002092:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002098:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
1000209f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020a2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020a8:	83 ec 08             	sub    esp,0x8
100020ab:	68 ff 00 00 00       	push   0xff
100020b0:	50                   	push   eax
100020b1:	e8 fc ff ff ff       	call   100020b2 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x43e>	100020b2: R_386_PC32	Floppy::writeCommand(unsigned char)
100020b6:	83 c4 10             	add    esp,0x10
100020b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020bc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020c2:	83 ec 0c             	sub    esp,0xc
100020c5:	50                   	push   eax
100020c6:	e8 fc ff ff ff       	call   100020c7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x453>	100020c7: R_386_PC32	Floppy::wasFailure()
100020cb:	83 c4 10             	add    esp,0x10
100020ce:	84 c0                	test   al,al
100020d0:	74 1d                	je     100020ef <FloppyDrive::doTrack(int, bool, unsigned char*)+0x47b>
100020d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020d5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020db:	83 ec 0c             	sub    esp,0xc
100020de:	50                   	push   eax
100020df:	e8 fc ff ff ff       	call   100020e0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x46c>	100020e0: R_386_PC32	Floppy::reset()
100020e4:	83 c4 10             	add    esp,0x10
100020e7:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100020ea:	e9 f9 fb ff ff       	jmp    10001ce8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100020ef:	83 ec 0c             	sub    esp,0xc
100020f2:	68 71 52 00 10       	push   0x10005271	100020f3: R_386_32	.text
100020f7:	e8 fc ff ff ff       	call   100020f8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x484>	100020f8: R_386_PC32	Dbg::kprintf(char const*, ...)
100020fc:	83 c4 10             	add    esp,0x10
100020ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002102:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002108:	83 ec 08             	sub    esp,0x8
1000210b:	68 e8 03 00 00       	push   0x3e8
10002110:	50                   	push   eax
10002111:	e8 fc ff ff ff       	call   10002112 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x49e>	10002112: R_386_PC32	Floppy::waitIRQ(int)
10002116:	83 c4 10             	add    esp,0x10
10002119:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
1000211c:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
1000211f:	83 f0 01             	xor    eax,0x1
10002122:	84 c0                	test   al,al
10002124:	74 2d                	je     10002153 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4df>
10002126:	83 ec 0c             	sub    esp,0xc
10002129:	68 84 52 00 10       	push   0x10005284	1000212a: R_386_32	.text
1000212e:	e8 fc ff ff ff       	call   1000212f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4bb>	1000212f: R_386_PC32	Dbg::kprintf(char const*, ...)
10002133:	83 c4 10             	add    esp,0x10
10002136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002139:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000213f:	83 ec 0c             	sub    esp,0xc
10002142:	50                   	push   eax
10002143:	e8 fc ff ff ff       	call   10002144 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4d0>	10002144: R_386_PC32	Floppy::reset()
10002148:	83 c4 10             	add    esp,0x10
1000214b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000214e:	e9 95 fb ff ff       	jmp    10001ce8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002153:	83 ec 0c             	sub    esp,0xc
10002156:	68 8d 52 00 10       	push   0x1000528d	10002157: R_386_32	.text
1000215b:	e8 fc ff ff ff       	call   1000215c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4e8>	1000215c: R_386_PC32	Dbg::kprintf(char const*, ...)
10002160:	83 c4 10             	add    esp,0x10
10002163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002166:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000216c:	83 ec 0c             	sub    esp,0xc
1000216f:	50                   	push   eax
10002170:	e8 fc ff ff ff       	call   10002171 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4fd>	10002171: R_386_PC32	Floppy::readData()
10002175:	83 c4 10             	add    esp,0x10
10002178:	88 45 de             	mov    BYTE PTR [ebp-0x22],al
1000217b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000217e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002184:	83 ec 0c             	sub    esp,0xc
10002187:	50                   	push   eax
10002188:	e8 fc ff ff ff       	call   10002189 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x515>	10002189: R_386_PC32	Floppy::wasFailure()
1000218d:	83 c4 10             	add    esp,0x10
10002190:	84 c0                	test   al,al
10002192:	74 2d                	je     100021c1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x54d>
10002194:	83 ec 0c             	sub    esp,0xc
10002197:	68 97 52 00 10       	push   0x10005297	10002198: R_386_32	.text
1000219c:	e8 fc ff ff ff       	call   1000219d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x529>	1000219d: R_386_PC32	Dbg::kprintf(char const*, ...)
100021a1:	83 c4 10             	add    esp,0x10
100021a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021a7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021ad:	83 ec 0c             	sub    esp,0xc
100021b0:	50                   	push   eax
100021b1:	e8 fc ff ff ff       	call   100021b2 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x53e>	100021b2: R_386_PC32	Floppy::reset()
100021b6:	83 c4 10             	add    esp,0x10
100021b9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100021bc:	e9 27 fb ff ff       	jmp    10001ce8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100021c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021c4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021ca:	83 ec 0c             	sub    esp,0xc
100021cd:	50                   	push   eax
100021ce:	e8 fc ff ff ff       	call   100021cf <FloppyDrive::doTrack(int, bool, unsigned char*)+0x55b>	100021cf: R_386_PC32	Floppy::readData()
100021d3:	83 c4 10             	add    esp,0x10
100021d6:	88 45 dd             	mov    BYTE PTR [ebp-0x23],al
100021d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021dc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021e2:	83 ec 0c             	sub    esp,0xc
100021e5:	50                   	push   eax
100021e6:	e8 fc ff ff ff       	call   100021e7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x573>	100021e7: R_386_PC32	Floppy::wasFailure()
100021eb:	83 c4 10             	add    esp,0x10
100021ee:	84 c0                	test   al,al
100021f0:	74 2d                	je     1000221f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5ab>
100021f2:	83 ec 0c             	sub    esp,0xc
100021f5:	68 97 52 00 10       	push   0x10005297	100021f6: R_386_32	.text
100021fa:	e8 fc ff ff ff       	call   100021fb <FloppyDrive::doTrack(int, bool, unsigned char*)+0x587>	100021fb: R_386_PC32	Dbg::kprintf(char const*, ...)
100021ff:	83 c4 10             	add    esp,0x10
10002202:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002205:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000220b:	83 ec 0c             	sub    esp,0xc
1000220e:	50                   	push   eax
1000220f:	e8 fc ff ff ff       	call   10002210 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x59c>	10002210: R_386_PC32	Floppy::reset()
10002214:	83 c4 10             	add    esp,0x10
10002217:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000221a:	e9 c9 fa ff ff       	jmp    10001ce8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000221f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002222:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002228:	83 ec 0c             	sub    esp,0xc
1000222b:	50                   	push   eax
1000222c:	e8 fc ff ff ff       	call   1000222d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5b9>	1000222d: R_386_PC32	Floppy::readData()
10002231:	83 c4 10             	add    esp,0x10
10002234:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
10002237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000223a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002240:	83 ec 0c             	sub    esp,0xc
10002243:	50                   	push   eax
10002244:	e8 fc ff ff ff       	call   10002245 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5d1>	10002245: R_386_PC32	Floppy::wasFailure()
10002249:	83 c4 10             	add    esp,0x10
1000224c:	84 c0                	test   al,al
1000224e:	74 2d                	je     1000227d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x609>
10002250:	83 ec 0c             	sub    esp,0xc
10002253:	68 97 52 00 10       	push   0x10005297	10002254: R_386_32	.text
10002258:	e8 fc ff ff ff       	call   10002259 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5e5>	10002259: R_386_PC32	Dbg::kprintf(char const*, ...)
1000225d:	83 c4 10             	add    esp,0x10
10002260:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002263:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002269:	83 ec 0c             	sub    esp,0xc
1000226c:	50                   	push   eax
1000226d:	e8 fc ff ff ff       	call   1000226e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5fa>	1000226e: R_386_PC32	Floppy::reset()
10002272:	83 c4 10             	add    esp,0x10
10002275:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002278:	e9 6b fa ff ff       	jmp    10001ce8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000227d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002280:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002286:	83 ec 0c             	sub    esp,0xc
10002289:	50                   	push   eax
1000228a:	e8 fc ff ff ff       	call   1000228b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x617>	1000228b: R_386_PC32	Floppy::readData()
1000228f:	83 c4 10             	add    esp,0x10
10002292:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
10002295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002298:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000229e:	83 ec 0c             	sub    esp,0xc
100022a1:	50                   	push   eax
100022a2:	e8 fc ff ff ff       	call   100022a3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x62f>	100022a3: R_386_PC32	Floppy::wasFailure()
100022a7:	83 c4 10             	add    esp,0x10
100022aa:	84 c0                	test   al,al
100022ac:	74 2d                	je     100022db <FloppyDrive::doTrack(int, bool, unsigned char*)+0x667>
100022ae:	83 ec 0c             	sub    esp,0xc
100022b1:	68 97 52 00 10       	push   0x10005297	100022b2: R_386_32	.text
100022b6:	e8 fc ff ff ff       	call   100022b7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x643>	100022b7: R_386_PC32	Dbg::kprintf(char const*, ...)
100022bb:	83 c4 10             	add    esp,0x10
100022be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022c1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022c7:	83 ec 0c             	sub    esp,0xc
100022ca:	50                   	push   eax
100022cb:	e8 fc ff ff ff       	call   100022cc <FloppyDrive::doTrack(int, bool, unsigned char*)+0x658>	100022cc: R_386_PC32	Floppy::reset()
100022d0:	83 c4 10             	add    esp,0x10
100022d3:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100022d6:	e9 0d fa ff ff       	jmp    10001ce8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100022db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022de:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022e4:	83 ec 0c             	sub    esp,0xc
100022e7:	50                   	push   eax
100022e8:	e8 fc ff ff ff       	call   100022e9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x675>	100022e9: R_386_PC32	Floppy::readData()
100022ed:	83 c4 10             	add    esp,0x10
100022f0:	88 45 da             	mov    BYTE PTR [ebp-0x26],al
100022f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022f6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022fc:	83 ec 0c             	sub    esp,0xc
100022ff:	50                   	push   eax
10002300:	e8 fc ff ff ff       	call   10002301 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x68d>	10002301: R_386_PC32	Floppy::wasFailure()
10002305:	83 c4 10             	add    esp,0x10
10002308:	84 c0                	test   al,al
1000230a:	74 2d                	je     10002339 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6c5>
1000230c:	83 ec 0c             	sub    esp,0xc
1000230f:	68 97 52 00 10       	push   0x10005297	10002310: R_386_32	.text
10002314:	e8 fc ff ff ff       	call   10002315 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6a1>	10002315: R_386_PC32	Dbg::kprintf(char const*, ...)
10002319:	83 c4 10             	add    esp,0x10
1000231c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000231f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002325:	83 ec 0c             	sub    esp,0xc
10002328:	50                   	push   eax
10002329:	e8 fc ff ff ff       	call   1000232a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6b6>	1000232a: R_386_PC32	Floppy::reset()
1000232e:	83 c4 10             	add    esp,0x10
10002331:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002334:	e9 af f9 ff ff       	jmp    10001ce8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002339:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000233c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002342:	83 ec 0c             	sub    esp,0xc
10002345:	50                   	push   eax
10002346:	e8 fc ff ff ff       	call   10002347 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6d3>	10002347: R_386_PC32	Floppy::readData()
1000234b:	83 c4 10             	add    esp,0x10
1000234e:	88 45 d9             	mov    BYTE PTR [ebp-0x27],al
10002351:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002354:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000235a:	83 ec 0c             	sub    esp,0xc
1000235d:	50                   	push   eax
1000235e:	e8 fc ff ff ff       	call   1000235f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6eb>	1000235f: R_386_PC32	Floppy::wasFailure()
10002363:	83 c4 10             	add    esp,0x10
10002366:	84 c0                	test   al,al
10002368:	74 2d                	je     10002397 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x723>
1000236a:	83 ec 0c             	sub    esp,0xc
1000236d:	68 97 52 00 10       	push   0x10005297	1000236e: R_386_32	.text
10002372:	e8 fc ff ff ff       	call   10002373 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6ff>	10002373: R_386_PC32	Dbg::kprintf(char const*, ...)
10002377:	83 c4 10             	add    esp,0x10
1000237a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000237d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002383:	83 ec 0c             	sub    esp,0xc
10002386:	50                   	push   eax
10002387:	e8 fc ff ff ff       	call   10002388 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x714>	10002388: R_386_PC32	Floppy::reset()
1000238c:	83 c4 10             	add    esp,0x10
1000238f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002392:	e9 51 f9 ff ff       	jmp    10001ce8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002397:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000239a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023a0:	83 ec 0c             	sub    esp,0xc
100023a3:	50                   	push   eax
100023a4:	e8 fc ff ff ff       	call   100023a5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x731>	100023a5: R_386_PC32	Floppy::readData()
100023a9:	83 c4 10             	add    esp,0x10
100023ac:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
100023af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023b2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023b8:	83 ec 0c             	sub    esp,0xc
100023bb:	50                   	push   eax
100023bc:	e8 fc ff ff ff       	call   100023bd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x749>	100023bd: R_386_PC32	Floppy::wasFailure()
100023c1:	83 c4 10             	add    esp,0x10
100023c4:	84 c0                	test   al,al
100023c6:	74 2d                	je     100023f5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x781>
100023c8:	83 ec 0c             	sub    esp,0xc
100023cb:	68 97 52 00 10       	push   0x10005297	100023cc: R_386_32	.text
100023d0:	e8 fc ff ff ff       	call   100023d1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x75d>	100023d1: R_386_PC32	Dbg::kprintf(char const*, ...)
100023d5:	83 c4 10             	add    esp,0x10
100023d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023db:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023e1:	83 ec 0c             	sub    esp,0xc
100023e4:	50                   	push   eax
100023e5:	e8 fc ff ff ff       	call   100023e6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x772>	100023e6: R_386_PC32	Floppy::reset()
100023ea:	83 c4 10             	add    esp,0x10
100023ed:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100023f0:	e9 f3 f8 ff ff       	jmp    10001ce8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100023f5:	83 ec 0c             	sub    esp,0xc
100023f8:	68 b0 52 00 10       	push   0x100052b0	100023f9: R_386_32	.text
100023fd:	e8 fc ff ff ff       	call   100023fe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x78a>	100023fe: R_386_PC32	Dbg::kprintf(char const*, ...)
10002402:	83 c4 10             	add    esp,0x10
10002405:	83 ec 0c             	sub    esp,0xc
10002408:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000240b:	e8 fc ff ff ff       	call   1000240c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x798>	1000240c: R_386_PC32	FloppyDrive::motorOff()
10002410:	83 c4 10             	add    esp,0x10
10002413:	83 ec 0c             	sub    esp,0xc
10002416:	68 c4 52 00 10       	push   0x100052c4	10002417: R_386_32	.text
1000241b:	e8 fc ff ff ff       	call   1000241c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7a8>	1000241c: R_386_PC32	Dbg::kprintf(char const*, ...)
10002420:	83 c4 10             	add    esp,0x10
10002423:	83 ec 0c             	sub    esp,0xc
10002426:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002429:	e8 fc ff ff ff       	call   1000242a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7b6>	1000242a: R_386_PC32	FloppyDrive::unselect()
1000242e:	83 c4 10             	add    esp,0x10
10002431:	83 ec 0c             	sub    esp,0xc
10002434:	68 cf 52 00 10       	push   0x100052cf	10002435: R_386_32	.text
10002439:	e8 fc ff ff ff       	call   1000243a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7c6>	1000243a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000243e:	83 c4 10             	add    esp,0x10
10002441:	8a 45 94             	mov    al,BYTE PTR [ebp-0x6c]
10002444:	83 f0 01             	xor    eax,0x1
10002447:	84 c0                	test   al,al
10002449:	74 45                	je     10002490 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x81c>
1000244b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000244e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002454:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
1000245a:	89 c2                	mov    edx,eax
1000245c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
1000245f:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002462:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
10002465:	c7 45 b0 00 48 00 00 	mov    DWORD PTR [ebp-0x50],0x4800
1000246c:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
1000246f:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
10002472:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10002475:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10002478:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
1000247b:	89 c6                	mov    esi,eax
1000247d:	89 d7                	mov    edi,edx
1000247f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002481:	89 c8                	mov    eax,ecx
10002483:	89 fa                	mov    edx,edi
10002485:	89 f3                	mov    ebx,esi
10002487:	89 5d a8             	mov    DWORD PTR [ebp-0x58],ebx
1000248a:	89 55 a4             	mov    DWORD PTR [ebp-0x5c],edx
1000248d:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10002490:	b8 00 00 00 00       	mov    eax,0x0
10002495:	8d 65 f4             	lea    esp,[ebp-0xc]
10002498:	5b                   	pop    ebx
10002499:	5e                   	pop    esi
1000249a:	5f                   	pop    edi
1000249b:	5d                   	pop    ebp
1000249c:	c3                   	ret    
1000249d:	90                   	nop

1000249e <FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)>:
1000249e:	55                   	push   ebp
1000249f:	89 e5                	mov    ebp,esp
100024a1:	83 ec 10             	sub    esp,0x10
100024a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024a7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100024ad:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100024b0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100024b6:	83 c2 64             	add    edx,0x64
100024b9:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
100024bd:	89 d0                	mov    eax,edx
100024bf:	c1 e0 02             	shl    eax,0x2
100024c2:	01 d0                	add    eax,edx
100024c4:	c1 e0 02             	shl    eax,0x2
100024c7:	01 d0                	add    eax,edx
100024c9:	05 13 00 00 00       	add    eax,0x13	100024ca: R_386_32	floppyTable
100024ce:	8a 00                	mov    al,BYTE PTR [eax]
100024d0:	0f b6 c0             	movzx  eax,al
100024d3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100024d6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100024d9:	01 c0                	add    eax,eax
100024db:	89 c1                	mov    ecx,eax
100024dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100024e0:	ba 00 00 00 00       	mov    edx,0x0
100024e5:	f7 f1                	div    ecx
100024e7:	89 c2                	mov    edx,eax
100024e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100024ec:	89 10                	mov    DWORD PTR [eax],edx
100024ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100024f1:	01 c0                	add    eax,eax
100024f3:	89 c1                	mov    ecx,eax
100024f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100024f8:	ba 00 00 00 00       	mov    edx,0x0
100024fd:	f7 f1                	div    ecx
100024ff:	89 d0                	mov    eax,edx
10002501:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
10002504:	ba 00 00 00 00       	mov    edx,0x0
10002509:	f7 f1                	div    ecx
1000250b:	89 c2                	mov    edx,eax
1000250d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10002510:	89 10                	mov    DWORD PTR [eax],edx
10002512:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10002515:	01 c0                	add    eax,eax
10002517:	89 c1                	mov    ecx,eax
10002519:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000251c:	ba 00 00 00 00       	mov    edx,0x0
10002521:	f7 f1                	div    ecx
10002523:	89 d0                	mov    eax,edx
10002525:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
10002528:	ba 00 00 00 00       	mov    edx,0x0
1000252d:	f7 f1                	div    ecx
1000252f:	89 d0                	mov    eax,edx
10002531:	40                   	inc    eax
10002532:	89 c2                	mov    edx,eax
10002534:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002537:	89 10                	mov    DWORD PTR [eax],edx
10002539:	90                   	nop
1000253a:	c9                   	leave  
1000253b:	c3                   	ret    

1000253c <FloppyDrive::eject()>:
1000253c:	55                   	push   ebp
1000253d:	89 e5                	mov    ebp,esp
1000253f:	57                   	push   edi
10002540:	56                   	push   esi
10002541:	53                   	push   ebx
10002542:	83 ec 2c             	sub    esp,0x2c
10002545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002548:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000254e:	83 ec 0c             	sub    esp,0xc
10002551:	50                   	push   eax
10002552:	e8 fc ff ff ff       	call   10002553 <FloppyDrive::eject()+0x17>	10002553: R_386_PC32	VCache::writeWriteBuffer()
10002557:	83 c4 10             	add    esp,0x10
1000255a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000255d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10002563:	83 ec 0c             	sub    esp,0xc
10002566:	50                   	push   eax
10002567:	e8 fc ff ff ff       	call   10002568 <FloppyDrive::eject()+0x2c>	10002568: R_386_PC32	VCache::invalidateReadBuffer()
1000256c:	83 c4 10             	add    esp,0x10
1000256f:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002571: R_386_32	hasCyl0Bf
10002576:	c7 05 00 00 00 00 ff ff ff ff 	mov    DWORD PTR ds:0x0,0xffffffff	10002578: R_386_32	_TEMP_cyl
10002580:	a1 00 00 00 00       	mov    eax,ds:0x0	10002581: R_386_32	_TEMP_trackBuffer
10002585:	83 ec 04             	sub    esp,0x4
10002588:	68 00 48 00 00       	push   0x4800
1000258d:	6a 00                	push   0x0
1000258f:	50                   	push   eax
10002590:	e8 fc ff ff ff       	call   10002591 <FloppyDrive::eject()+0x55>	10002591: R_386_PC32	memset
10002595:	83 c4 10             	add    esp,0x10
10002598:	a1 00 00 00 00       	mov    eax,ds:0x0	10002599: R_386_32	_TEMP_cylinder0_bf
1000259d:	83 ec 04             	sub    esp,0x4
100025a0:	68 00 48 00 00       	push   0x4800
100025a5:	6a 00                	push   0x0
100025a7:	50                   	push   eax
100025a8:	e8 fc ff ff ff       	call   100025a9 <FloppyDrive::eject()+0x6d>	100025a9: R_386_PC32	memset
100025ad:	83 c4 10             	add    esp,0x10
100025b0:	a1 00 00 00 00       	mov    eax,ds:0x0	100025b1: R_386_32	_TEMP_write_bf
100025b5:	83 ec 04             	sub    esp,0x4
100025b8:	68 00 48 00 00       	push   0x4800
100025bd:	6a 00                	push   0x0
100025bf:	50                   	push   eax
100025c0:	e8 fc ff ff ff       	call   100025c1 <FloppyDrive::eject()+0x85>	100025c1: R_386_PC32	memset
100025c5:	83 c4 10             	add    esp,0x10
100025c8:	8d 45 ce             	lea    eax,[ebp-0x32]
100025cb:	bb da 52 00 10       	mov    ebx,0x100052da	100025cc: R_386_32	.text
100025d0:	ba 1a 00 00 00       	mov    edx,0x1a
100025d5:	89 c7                	mov    edi,eax
100025d7:	89 de                	mov    esi,ebx
100025d9:	89 d1                	mov    ecx,edx
100025db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100025dd:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100025df: R_386_32	activeTerminal
100025e3:	a1 00 00 00 00       	mov    eax,ds:0x0	100025e4: R_386_32	activeTerminal
100025e8:	8b 00                	mov    eax,DWORD PTR [eax]
100025ea:	83 c0 10             	add    eax,0x10
100025ed:	8b 00                	mov    eax,DWORD PTR [eax]
100025ef:	83 ec 0c             	sub    esp,0xc
100025f2:	8d 4d c8             	lea    ecx,[ebp-0x38]
100025f5:	51                   	push   ecx
100025f6:	8d 4d ce             	lea    ecx,[ebp-0x32]
100025f9:	51                   	push   ecx
100025fa:	6a 00                	push   0x0
100025fc:	6a 1a                	push   0x1a
100025fe:	52                   	push   edx
100025ff:	ff d0                	call   eax
10002601:	83 c4 20             	add    esp,0x20
10002604:	b8 00 00 00 00       	mov    eax,0x0
10002609:	8d 65 f4             	lea    esp,[ebp-0xc]
1000260c:	5b                   	pop    ebx
1000260d:	5e                   	pop    esi
1000260e:	5f                   	pop    edi
1000260f:	5d                   	pop    ebp
10002610:	c3                   	ret    
10002611:	90                   	nop

10002612 <FloppyDrive::read(unsigned long long, int, void*)>:
10002612:	55                   	push   ebp
10002613:	89 e5                	mov    ebp,esp
10002615:	57                   	push   edi
10002616:	56                   	push   esi
10002617:	53                   	push   ebx
10002618:	83 ec 6c             	sub    esp,0x6c
1000261b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000261e:	89 45 90             	mov    DWORD PTR [ebp-0x70],eax
10002621:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10002624:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10002627:	a0 00 00 00 00       	mov    al,ds:0x0	10002628: R_386_32	_TEMP_allocated
1000262c:	83 f0 01             	xor    eax,0x1
1000262f:	84 c0                	test   al,al
10002631:	74 46                	je     10002679 <FloppyDrive::read(unsigned long long, int, void*)+0x67>
10002633:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10002635: R_386_32	_TEMP_allocated
1000263a:	83 ec 0c             	sub    esp,0xc
1000263d:	68 00 48 00 00       	push   0x4800
10002642:	e8 fc ff ff ff       	call   10002643 <FloppyDrive::read(unsigned long long, int, void*)+0x31>	10002643: R_386_PC32	malloc
10002647:	83 c4 10             	add    esp,0x10
1000264a:	a3 00 00 00 00       	mov    ds:0x0,eax	1000264b: R_386_32	_TEMP_trackBuffer
1000264f:	83 ec 0c             	sub    esp,0xc
10002652:	68 00 48 00 00       	push   0x4800
10002657:	e8 fc ff ff ff       	call   10002658 <FloppyDrive::read(unsigned long long, int, void*)+0x46>	10002658: R_386_PC32	malloc
1000265c:	83 c4 10             	add    esp,0x10
1000265f:	a3 00 00 00 00       	mov    ds:0x0,eax	10002660: R_386_32	_TEMP_cylinder0_bf
10002664:	83 ec 0c             	sub    esp,0xc
10002667:	68 00 48 00 00       	push   0x4800
1000266c:	e8 fc ff ff ff       	call   1000266d <FloppyDrive::read(unsigned long long, int, void*)+0x5b>	1000266d: R_386_PC32	malloc
10002671:	83 c4 10             	add    esp,0x10
10002674:	a3 00 00 00 00       	mov    ds:0x0,eax	10002675: R_386_32	_TEMP_write_bf
10002679:	83 7d 14 01          	cmp    DWORD PTR [ebp+0x14],0x1
1000267d:	74 10                	je     1000268f <FloppyDrive::read(unsigned long long, int, void*)+0x7d>
1000267f:	83 ec 0c             	sub    esp,0xc
10002682:	68 f4 52 00 10       	push   0x100052f4	10002683: R_386_32	.text
10002687:	e8 fc ff ff ff       	call   10002688 <FloppyDrive::read(unsigned long long, int, void*)+0x76>	10002688: R_386_PC32	Krnl::panic(char const*)
1000268c:	83 c4 10             	add    esp,0x10
1000268f:	83 ec 0c             	sub    esp,0xc
10002692:	68 0c 53 00 10       	push   0x1000530c	10002693: R_386_32	.text
10002697:	e8 fc ff ff ff       	call   10002698 <FloppyDrive::read(unsigned long long, int, void*)+0x86>	10002698: R_386_PC32	Dbg::kprintf(char const*, ...)
1000269c:	83 c4 10             	add    esp,0x10
1000269f:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
100026a2:	83 ec 0c             	sub    esp,0xc
100026a5:	8d 55 a0             	lea    edx,[ebp-0x60]
100026a8:	52                   	push   edx
100026a9:	8d 55 a4             	lea    edx,[ebp-0x5c]
100026ac:	52                   	push   edx
100026ad:	8d 55 a8             	lea    edx,[ebp-0x58]
100026b0:	52                   	push   edx
100026b1:	50                   	push   eax
100026b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100026b5:	e8 fc ff ff ff       	call   100026b6 <FloppyDrive::read(unsigned long long, int, void*)+0xa4>	100026b6: R_386_PC32	FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)
100026ba:	83 c4 20             	add    esp,0x20
100026bd:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
100026c0:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
100026c3:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
100026c6:	51                   	push   ecx
100026c7:	52                   	push   edx
100026c8:	50                   	push   eax
100026c9:	68 27 53 00 10       	push   0x10005327	100026ca: R_386_32	.text
100026ce:	e8 fc ff ff ff       	call   100026cf <FloppyDrive::read(unsigned long long, int, void*)+0xbd>	100026cf: R_386_PC32	Dbg::kprintf(char const*, ...)
100026d3:	83 c4 10             	add    esp,0x10
100026d6:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
100026d9:	85 c0                	test   eax,eax
100026db:	75 2a                	jne    10002707 <FloppyDrive::read(unsigned long long, int, void*)+0xf5>
100026dd:	a0 00 00 00 00       	mov    al,ds:0x0	100026de: R_386_32	hasCyl0Bf
100026e2:	83 f0 01             	xor    eax,0x1
100026e5:	84 c0                	test   al,al
100026e7:	74 5a                	je     10002743 <FloppyDrive::read(unsigned long long, int, void*)+0x131>
100026e9:	a1 00 00 00 00       	mov    eax,ds:0x0	100026ea: R_386_32	_TEMP_cylinder0_bf
100026ee:	50                   	push   eax
100026ef:	6a 00                	push   0x0
100026f1:	6a 00                	push   0x0
100026f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100026f6:	e8 fc ff ff ff       	call   100026f7 <FloppyDrive::read(unsigned long long, int, void*)+0xe5>	100026f7: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
100026fb:	83 c4 10             	add    esp,0x10
100026fe:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10002700: R_386_32	hasCyl0Bf
10002705:	eb 3c                	jmp    10002743 <FloppyDrive::read(unsigned long long, int, void*)+0x131>
10002707:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
1000270a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000270b: R_386_32	_TEMP_cyl
1000270f:	39 c2                	cmp    edx,eax
10002711:	74 30                	je     10002743 <FloppyDrive::read(unsigned long long, int, void*)+0x131>
10002713:	83 ec 0c             	sub    esp,0xc
10002716:	68 3f 53 00 10       	push   0x1000533f	10002717: R_386_32	.text
1000271b:	e8 fc ff ff ff       	call   1000271c <FloppyDrive::read(unsigned long long, int, void*)+0x10a>	1000271c: R_386_PC32	Dbg::kprintf(char const*, ...)
10002720:	83 c4 10             	add    esp,0x10
10002723:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002725: R_386_32	_TEMP_trackBuffer
10002729:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
1000272c:	52                   	push   edx
1000272d:	6a 00                	push   0x0
1000272f:	50                   	push   eax
10002730:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002733:	e8 fc ff ff ff       	call   10002734 <FloppyDrive::read(unsigned long long, int, void*)+0x122>	10002734: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002738:	83 c4 10             	add    esp,0x10
1000273b:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
1000273e:	a3 00 00 00 00       	mov    ds:0x0,eax	1000273f: R_386_32	_TEMP_cyl
10002743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002746:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000274c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000274f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10002755:	83 c2 64             	add    edx,0x64
10002758:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
1000275c:	89 d0                	mov    eax,edx
1000275e:	c1 e0 02             	shl    eax,0x2
10002761:	01 d0                	add    eax,edx
10002763:	c1 e0 02             	shl    eax,0x2
10002766:	01 d0                	add    eax,edx
10002768:	05 13 00 00 00       	add    eax,0x13	10002769: R_386_32	floppyTable
1000276d:	8a 00                	mov    al,BYTE PTR [eax]
1000276f:	0f b6 c0             	movzx  eax,al
10002772:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10002775:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10002778:	85 c0                	test   eax,eax
1000277a:	75 53                	jne    100027cf <FloppyDrive::read(unsigned long long, int, void*)+0x1bd>
1000277c:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000277e: R_386_32	_TEMP_cylinder0_bf
10002782:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10002785:	48                   	dec    eax
10002786:	c1 e0 09             	shl    eax,0x9
10002789:	89 c1                	mov    ecx,eax
1000278b:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
1000278e:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
10002792:	c1 e0 09             	shl    eax,0x9
10002795:	01 c8                	add    eax,ecx
10002797:	01 c2                	add    edx,eax
10002799:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000279c:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
1000279f:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
100027a2:	c7 45 d8 00 02 00 00 	mov    DWORD PTR [ebp-0x28],0x200
100027a9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100027ac:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
100027af:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100027b2:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
100027b5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100027b8:	89 c6                	mov    esi,eax
100027ba:	89 d7                	mov    edi,edx
100027bc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100027be:	89 c8                	mov    eax,ecx
100027c0:	89 fa                	mov    edx,edi
100027c2:	89 f3                	mov    ebx,esi
100027c4:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
100027c7:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100027ca:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100027cd:	eb 51                	jmp    10002820 <FloppyDrive::read(unsigned long long, int, void*)+0x20e>
100027cf:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100027d1: R_386_32	_TEMP_trackBuffer
100027d5:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
100027d8:	48                   	dec    eax
100027d9:	c1 e0 09             	shl    eax,0x9
100027dc:	89 c1                	mov    ecx,eax
100027de:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
100027e1:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
100027e5:	c1 e0 09             	shl    eax,0x9
100027e8:	01 c8                	add    eax,ecx
100027ea:	01 c2                	add    edx,eax
100027ec:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100027ef:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
100027f2:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
100027f5:	c7 45 bc 00 02 00 00 	mov    DWORD PTR [ebp-0x44],0x200
100027fc:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100027ff:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002802:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002805:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002808:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
1000280b:	89 c6                	mov    esi,eax
1000280d:	89 d7                	mov    edi,edx
1000280f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002811:	89 c8                	mov    eax,ecx
10002813:	89 fa                	mov    edx,edi
10002815:	89 f3                	mov    ebx,esi
10002817:	89 5d b4             	mov    DWORD PTR [ebp-0x4c],ebx
1000281a:	89 55 b0             	mov    DWORD PTR [ebp-0x50],edx
1000281d:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
10002820:	b8 00 00 00 00       	mov    eax,0x0
10002825:	8d 65 f4             	lea    esp,[ebp-0xc]
10002828:	5b                   	pop    ebx
10002829:	5e                   	pop    esi
1000282a:	5f                   	pop    edi
1000282b:	5d                   	pop    ebp
1000282c:	c3                   	ret    
1000282d:	90                   	nop

1000282e <FloppyDrive::write(unsigned long long, int, void*)>:
1000282e:	55                   	push   ebp
1000282f:	89 e5                	mov    ebp,esp
10002831:	57                   	push   edi
10002832:	56                   	push   esi
10002833:	53                   	push   ebx
10002834:	81 ec 8c 00 00 00    	sub    esp,0x8c
1000283a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000283d:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
10002843:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10002846:	89 85 74 ff ff ff    	mov    DWORD PTR [ebp-0x8c],eax
1000284c:	a0 00 00 00 00       	mov    al,ds:0x0	1000284d: R_386_32	_TEMP_allocated
10002851:	83 f0 01             	xor    eax,0x1
10002854:	84 c0                	test   al,al
10002856:	74 46                	je     1000289e <FloppyDrive::write(unsigned long long, int, void*)+0x70>
10002858:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000285a: R_386_32	_TEMP_allocated
1000285f:	83 ec 0c             	sub    esp,0xc
10002862:	68 00 48 00 00       	push   0x4800
10002867:	e8 fc ff ff ff       	call   10002868 <FloppyDrive::write(unsigned long long, int, void*)+0x3a>	10002868: R_386_PC32	malloc
1000286c:	83 c4 10             	add    esp,0x10
1000286f:	a3 00 00 00 00       	mov    ds:0x0,eax	10002870: R_386_32	_TEMP_trackBuffer
10002874:	83 ec 0c             	sub    esp,0xc
10002877:	68 00 48 00 00       	push   0x4800
1000287c:	e8 fc ff ff ff       	call   1000287d <FloppyDrive::write(unsigned long long, int, void*)+0x4f>	1000287d: R_386_PC32	malloc
10002881:	83 c4 10             	add    esp,0x10
10002884:	a3 00 00 00 00       	mov    ds:0x0,eax	10002885: R_386_32	_TEMP_cylinder0_bf
10002889:	83 ec 0c             	sub    esp,0xc
1000288c:	68 00 48 00 00       	push   0x4800
10002891:	e8 fc ff ff ff       	call   10002892 <FloppyDrive::write(unsigned long long, int, void*)+0x64>	10002892: R_386_PC32	malloc
10002896:	83 c4 10             	add    esp,0x10
10002899:	a3 00 00 00 00       	mov    ds:0x0,eax	1000289a: R_386_32	_TEMP_write_bf
1000289e:	83 7d 14 01          	cmp    DWORD PTR [ebp+0x14],0x1
100028a2:	74 5b                	je     100028ff <FloppyDrive::write(unsigned long long, int, void*)+0xd1>
100028a4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100028ab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100028ae:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
100028b1:	7d 42                	jge    100028f5 <FloppyDrive::write(unsigned long long, int, void*)+0xc7>
100028b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100028b6:	8b 00                	mov    eax,DWORD PTR [eax]
100028b8:	83 c0 2c             	add    eax,0x2c
100028bb:	8b 30                	mov    esi,DWORD PTR [eax]
100028bd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100028c0:	89 c1                	mov    ecx,eax
100028c2:	89 c3                	mov    ebx,eax
100028c4:	c1 fb 1f             	sar    ebx,0x1f
100028c7:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [ebp-0x90]
100028cd:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [ebp-0x8c]
100028d3:	01 c8                	add    eax,ecx
100028d5:	11 da                	adc    edx,ebx
100028d7:	83 ec 0c             	sub    esp,0xc
100028da:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100028dd:	6a 01                	push   0x1
100028df:	52                   	push   edx
100028e0:	50                   	push   eax
100028e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100028e4:	ff d6                	call   esi
100028e6:	83 c4 20             	add    esp,0x20
100028e9:	81 45 18 00 02 00 00 	add    DWORD PTR [ebp+0x18],0x200
100028f0:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100028f3:	eb b6                	jmp    100028ab <FloppyDrive::write(unsigned long long, int, void*)+0x7d>
100028f5:	b8 00 00 00 00       	mov    eax,0x0
100028fa:	e9 d1 01 00 00       	jmp    10002ad0 <FloppyDrive::write(unsigned long long, int, void*)+0x2a2>
100028ff:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [ebp-0x90]
10002905:	83 ec 0c             	sub    esp,0xc
10002908:	8d 55 80             	lea    edx,[ebp-0x80]
1000290b:	52                   	push   edx
1000290c:	8d 55 84             	lea    edx,[ebp-0x7c]
1000290f:	52                   	push   edx
10002910:	8d 55 88             	lea    edx,[ebp-0x78]
10002913:	52                   	push   edx
10002914:	50                   	push   eax
10002915:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002918:	e8 fc ff ff ff       	call   10002919 <FloppyDrive::write(unsigned long long, int, void*)+0xeb>	10002919: R_386_PC32	FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)
1000291d:	83 c4 20             	add    esp,0x20
10002920:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002923:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002929:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000292c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10002932:	83 c2 64             	add    edx,0x64
10002935:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10002939:	89 d0                	mov    eax,edx
1000293b:	c1 e0 02             	shl    eax,0x2
1000293e:	01 d0                	add    eax,edx
10002940:	c1 e0 02             	shl    eax,0x2
10002943:	01 d0                	add    eax,edx
10002945:	05 13 00 00 00       	add    eax,0x13	10002946: R_386_32	floppyTable
1000294a:	8a 00                	mov    al,BYTE PTR [eax]
1000294c:	0f b6 c0             	movzx  eax,al
1000294f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002952:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002955:	85 c0                	test   eax,eax
10002957:	75 77                	jne    100029d0 <FloppyDrive::write(unsigned long long, int, void*)+0x1a2>
10002959:	a0 00 00 00 00       	mov    al,ds:0x0	1000295a: R_386_32	hasCyl0Bf
1000295e:	84 c0                	test   al,al
10002960:	74 6e                	je     100029d0 <FloppyDrive::write(unsigned long long, int, void*)+0x1a2>
10002962:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002964: R_386_32	_TEMP_cylinder0_bf
10002968:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
1000296b:	48                   	dec    eax
1000296c:	c1 e0 09             	shl    eax,0x9
1000296f:	89 c1                	mov    ecx,eax
10002971:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
10002974:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
10002978:	c1 e0 09             	shl    eax,0x9
1000297b:	01 c8                	add    eax,ecx
1000297d:	01 d0                	add    eax,edx
1000297f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10002982:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002985:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002988:	c7 45 d4 00 02 00 00 	mov    DWORD PTR [ebp-0x2c],0x200
1000298f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10002992:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10002995:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002998:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
1000299b:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
1000299e:	89 c6                	mov    esi,eax
100029a0:	89 d7                	mov    edi,edx
100029a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100029a4:	89 c8                	mov    eax,ecx
100029a6:	89 fa                	mov    edx,edi
100029a8:	89 f3                	mov    ebx,esi
100029aa:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
100029ad:	89 55 c8             	mov    DWORD PTR [ebp-0x38],edx
100029b0:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
100029b3:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100029b5: R_386_32	_TEMP_cylinder0_bf
100029b9:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
100029bc:	52                   	push   edx
100029bd:	6a 01                	push   0x1
100029bf:	50                   	push   eax
100029c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100029c3:	e8 fc ff ff ff       	call   100029c4 <FloppyDrive::write(unsigned long long, int, void*)+0x196>	100029c4: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
100029c8:	83 c4 10             	add    esp,0x10
100029cb:	e9 fb 00 00 00       	jmp    10002acb <FloppyDrive::write(unsigned long long, int, void*)+0x29d>
100029d0:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
100029d3:	a1 00 00 00 00       	mov    eax,ds:0x0	100029d4: R_386_32	_TEMP_cyl
100029d8:	39 c2                	cmp    edx,eax
100029da:	75 6e                	jne    10002a4a <FloppyDrive::write(unsigned long long, int, void*)+0x21c>
100029dc:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100029de: R_386_32	_TEMP_trackBuffer
100029e2:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
100029e5:	48                   	dec    eax
100029e6:	c1 e0 09             	shl    eax,0x9
100029e9:	89 c1                	mov    ecx,eax
100029eb:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
100029ee:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
100029f2:	c1 e0 09             	shl    eax,0x9
100029f5:	01 c8                	add    eax,ecx
100029f7:	01 d0                	add    eax,edx
100029f9:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
100029fc:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100029ff:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10002a02:	c7 45 b8 00 02 00 00 	mov    DWORD PTR [ebp-0x48],0x200
10002a09:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002a0c:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10002a0f:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10002a12:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10002a15:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
10002a18:	89 c6                	mov    esi,eax
10002a1a:	89 d7                	mov    edi,edx
10002a1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002a1e:	89 c8                	mov    eax,ecx
10002a20:	89 fa                	mov    edx,edi
10002a22:	89 f3                	mov    ebx,esi
10002a24:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
10002a27:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10002a2a:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10002a2d:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002a2f: R_386_32	_TEMP_trackBuffer
10002a33:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002a36:	52                   	push   edx
10002a37:	6a 01                	push   0x1
10002a39:	50                   	push   eax
10002a3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a3d:	e8 fc ff ff ff       	call   10002a3e <FloppyDrive::write(unsigned long long, int, void*)+0x210>	10002a3e: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002a42:	83 c4 10             	add    esp,0x10
10002a45:	e9 81 00 00 00       	jmp    10002acb <FloppyDrive::write(unsigned long long, int, void*)+0x29d>
10002a4a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002a4c: R_386_32	_TEMP_write_bf
10002a50:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002a53:	52                   	push   edx
10002a54:	6a 00                	push   0x0
10002a56:	50                   	push   eax
10002a57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a5a:	e8 fc ff ff ff       	call   10002a5b <FloppyDrive::write(unsigned long long, int, void*)+0x22d>	10002a5b: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002a5f:	83 c4 10             	add    esp,0x10
10002a62:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002a64: R_386_32	_TEMP_write_bf
10002a68:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002a6b:	48                   	dec    eax
10002a6c:	c1 e0 09             	shl    eax,0x9
10002a6f:	89 c1                	mov    ecx,eax
10002a71:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
10002a74:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
10002a78:	c1 e0 09             	shl    eax,0x9
10002a7b:	01 c8                	add    eax,ecx
10002a7d:	01 d0                	add    eax,edx
10002a7f:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10002a82:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002a85:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10002a88:	c7 45 9c 00 02 00 00 	mov    DWORD PTR [ebp-0x64],0x200
10002a8f:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10002a92:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10002a95:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10002a98:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
10002a9b:	8b 4d 9c             	mov    ecx,DWORD PTR [ebp-0x64]
10002a9e:	89 c6                	mov    esi,eax
10002aa0:	89 d7                	mov    edi,edx
10002aa2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002aa4:	89 c8                	mov    eax,ecx
10002aa6:	89 fa                	mov    edx,edi
10002aa8:	89 f3                	mov    ebx,esi
10002aaa:	89 5d 94             	mov    DWORD PTR [ebp-0x6c],ebx
10002aad:	89 55 90             	mov    DWORD PTR [ebp-0x70],edx
10002ab0:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
10002ab3:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002ab5: R_386_32	_TEMP_write_bf
10002ab9:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002abc:	52                   	push   edx
10002abd:	6a 01                	push   0x1
10002abf:	50                   	push   eax
10002ac0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002ac3:	e8 fc ff ff ff       	call   10002ac4 <FloppyDrive::write(unsigned long long, int, void*)+0x296>	10002ac4: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002ac8:	83 c4 10             	add    esp,0x10
10002acb:	b8 00 00 00 00       	mov    eax,0x0
10002ad0:	8d 65 f4             	lea    esp,[ebp-0xc]
10002ad3:	5b                   	pop    ebx
10002ad4:	5e                   	pop    esi
10002ad5:	5f                   	pop    edi
10002ad6:	5d                   	pop    ebp
10002ad7:	c3                   	ret    

10002ad8 <FloppyDrive::~FloppyDrive()>:
10002ad8:	55                   	push   ebp
10002ad9:	89 e5                	mov    ebp,esp
10002adb:	83 ec 08             	sub    esp,0x8
10002ade:	ba 08 00 00 00       	mov    edx,0x8	10002adf: R_386_32	vtable for FloppyDrive
10002ae3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ae6:	89 10                	mov    DWORD PTR [eax],edx
10002ae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002aeb:	83 ec 0c             	sub    esp,0xc
10002aee:	50                   	push   eax
10002aef:	e8 fc ff ff ff       	call   10002af0 <FloppyDrive::~FloppyDrive()+0x18>	10002af0: R_386_PC32	PhysicalDisk::~PhysicalDisk()
10002af4:	83 c4 10             	add    esp,0x10
10002af7:	90                   	nop
10002af8:	c9                   	leave  
10002af9:	c3                   	ret    

10002afa <FloppyDrive::~FloppyDrive()>:
10002afa:	55                   	push   ebp
10002afb:	89 e5                	mov    ebp,esp
10002afd:	83 ec 08             	sub    esp,0x8
10002b00:	83 ec 0c             	sub    esp,0xc
10002b03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002b06:	e8 fc ff ff ff       	call   10002b07 <FloppyDrive::~FloppyDrive()+0xd>	10002b07: R_386_PC32	FloppyDrive::~FloppyDrive()
10002b0b:	83 c4 10             	add    esp,0x10
10002b0e:	83 ec 08             	sub    esp,0x8
10002b11:	68 74 01 00 00       	push   0x174
10002b16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002b19:	e8 fc ff ff ff       	call   10002b1a <FloppyDrive::~FloppyDrive()+0x20>	10002b1a: R_386_PC32	operator delete(void*, unsigned long)
10002b1e:	83 c4 10             	add    esp,0x10
10002b21:	c9                   	leave  
10002b22:	c3                   	ret    
10002b23:	90                   	nop

10002b24 <Gameport::Gameport()>:
10002b24:	55                   	push   ebp
10002b25:	89 e5                	mov    ebp,esp
10002b27:	83 ec 08             	sub    esp,0x8
10002b2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b2d:	83 ec 08             	sub    esp,0x8
10002b30:	68 54 54 00 10       	push   0x10005454	10002b31: R_386_32	.text
10002b35:	50                   	push   eax
10002b36:	e8 fc ff ff ff       	call   10002b37 <Gameport::Gameport()+0x13>	10002b37: R_386_PC32	Device::Device(char const*)
10002b3b:	83 c4 10             	add    esp,0x10
10002b3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b41:	05 58 01 00 00       	add    eax,0x158
10002b46:	83 ec 0c             	sub    esp,0xc
10002b49:	50                   	push   eax
10002b4a:	e8 fc ff ff ff       	call   10002b4b <Gameport::Gameport()+0x27>	10002b4b: R_386_PC32	JoystickHost::JoystickHost()
10002b4f:	83 c4 10             	add    esp,0x10
10002b52:	ba 08 00 00 00       	mov    edx,0x8	10002b53: R_386_32	vtable for Gameport
10002b57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b5a:	89 10                	mov    DWORD PTR [eax],edx
10002b5c:	ba 38 00 00 00       	mov    edx,0x38	10002b5d: R_386_32	vtable for Gameport
10002b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b64:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10002b6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b6d:	c7 80 5c 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x15c],0x14a
10002b77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b7a:	c7 80 60 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x160],0x14a
10002b84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b87:	c7 80 64 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x164],0x14a
10002b91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b94:	c7 80 68 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x168],0x14a
10002b9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ba1:	c7 80 6c 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x16c],0x3d4
10002bab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bae:	c7 80 70 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x170],0x3d4
10002bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bbb:	c7 80 74 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x174],0x3d4
10002bc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bc8:	c7 80 78 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x178],0x3d4
10002bd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bd5:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
10002bdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bdf:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10002be6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002be9:	c6 80 7e 01 00 00 00 	mov    BYTE PTR [eax+0x17e],0x0
10002bf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bf3:	c6 80 7f 01 00 00 00 	mov    BYTE PTR [eax+0x17f],0x0
10002bfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bfd:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
10002c04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c07:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10002c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c11:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002c17:	0f b6 d0             	movzx  edx,al
10002c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c1d:	66 c7 44 90 04 01 02 	mov    WORD PTR [eax+edx*4+0x4],0x201
10002c24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c27:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002c2d:	0f b6 d0             	movzx  edx,al
10002c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c33:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10002c38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c3b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002c41:	8d 50 01             	lea    edx,[eax+0x1]
10002c44:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10002c47:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10002c4d:	0f b6 d0             	movzx  edx,al
10002c50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c53:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10002c57:	83 e1 3f             	and    ecx,0x3f
10002c5a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10002c5e:	90                   	nop
10002c5f:	c9                   	leave  
10002c60:	c3                   	ret    
10002c61:	90                   	nop

10002c62 <Gameport::~Gameport()>:
10002c62:	55                   	push   ebp
10002c63:	89 e5                	mov    ebp,esp
10002c65:	83 ec 08             	sub    esp,0x8
10002c68:	ba 08 00 00 00       	mov    edx,0x8	10002c69: R_386_32	vtable for Gameport
10002c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c70:	89 10                	mov    DWORD PTR [eax],edx
10002c72:	ba 38 00 00 00       	mov    edx,0x38	10002c73: R_386_32	vtable for Gameport
10002c77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c7a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10002c80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c83:	83 ec 0c             	sub    esp,0xc
10002c86:	50                   	push   eax
10002c87:	e8 fc ff ff ff       	call   10002c88 <Gameport::~Gameport()+0x26>	10002c88: R_386_PC32	Device::~Device()
10002c8c:	83 c4 10             	add    esp,0x10
10002c8f:	90                   	nop
10002c90:	c9                   	leave  
10002c91:	c3                   	ret    

10002c92 <Gameport::~Gameport()>:
10002c92:	55                   	push   ebp
10002c93:	89 e5                	mov    ebp,esp
10002c95:	83 ec 08             	sub    esp,0x8
10002c98:	83 ec 0c             	sub    esp,0xc
10002c9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002c9e:	e8 fc ff ff ff       	call   10002c9f <Gameport::~Gameport()+0xd>	10002c9f: R_386_PC32	Gameport::~Gameport()
10002ca3:	83 c4 10             	add    esp,0x10
10002ca6:	83 ec 08             	sub    esp,0x8
10002ca9:	68 80 01 00 00       	push   0x180
10002cae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002cb1:	e8 fc ff ff ff       	call   10002cb2 <Gameport::~Gameport()+0x20>	10002cb2: R_386_PC32	operator delete(void*, unsigned long)
10002cb6:	83 c4 10             	add    esp,0x10
10002cb9:	c9                   	leave  
10002cba:	c3                   	ret    
10002cbb:	90                   	nop

10002cbc <Gameport::calibration(int)>:
10002cbc:	57                   	push   edi
10002cbd:	56                   	push   esi
10002cbe:	53                   	push   ebx
10002cbf:	81 ec d0 00 00 00    	sub    esp,0xd0
10002cc5:	8b 9c 24 e0 00 00 00 	mov    ebx,DWORD PTR [esp+0xe0]
10002ccc:	8b b4 24 e4 00 00 00 	mov    esi,DWORD PTR [esp+0xe4]
10002cd3:	80 bb 7e 01 00 00 00 	cmp    BYTE PTR [ebx+0x17e],0x0
10002cda:	74 0c                	je     10002ce8 <Gameport::calibration(int)+0x2c>
10002cdc:	c6 83 7f 01 00 00 01 	mov    BYTE PTR [ebx+0x17f],0x1
10002ce3:	e9 e6 00 00 00       	jmp    10002dce <Gameport::calibration(int)+0x112>
10002ce8:	8d bc 24 9c 00 00 00 	lea    edi,[esp+0x9c]
10002cef:	50                   	push   eax
10002cf0:	56                   	push   esi
10002cf1:	53                   	push   ebx
10002cf2:	57                   	push   edi
10002cf3:	e8 fc ff ff ff       	call   10002cf4 <Gameport::calibration(int)+0x38>	10002cf4: R_386_PC32	Gameport::readRaw(int)
10002cf8:	6a 0a                	push   0xa
10002cfa:	e8 fc ff ff ff       	call   10002cfb <Gameport::calibration(int)+0x3f>	10002cfb: R_386_PC32	milliTenthSleep(unsigned int)
10002cff:	8d 44 24 10          	lea    eax,[esp+0x10]
10002d03:	83 c4 0c             	add    esp,0xc
10002d06:	56                   	push   esi
10002d07:	53                   	push   ebx
10002d08:	50                   	push   eax
10002d09:	e8 fc ff ff ff       	call   10002d0a <Gameport::calibration(int)+0x4e>	10002d0a: R_386_PC32	Gameport::readRaw(int)
10002d0e:	6a 0a                	push   0xa
10002d10:	e8 fc ff ff ff       	call   10002d11 <Gameport::calibration(int)+0x55>	10002d11: R_386_PC32	milliTenthSleep(unsigned int)
10002d15:	8d 44 24 44          	lea    eax,[esp+0x44]
10002d19:	83 c4 0c             	add    esp,0xc
10002d1c:	56                   	push   esi
10002d1d:	53                   	push   ebx
10002d1e:	50                   	push   eax
10002d1f:	e8 fc ff ff ff       	call   10002d20 <Gameport::calibration(int)+0x64>	10002d20: R_386_PC32	Gameport::readRaw(int)
10002d24:	6a 0a                	push   0xa
10002d26:	e8 fc ff ff ff       	call   10002d27 <Gameport::calibration(int)+0x6b>	10002d27: R_386_PC32	milliTenthSleep(unsigned int)
10002d2b:	8d 44 24 78          	lea    eax,[esp+0x78]
10002d2f:	83 c4 0c             	add    esp,0xc
10002d32:	56                   	push   esi
10002d33:	53                   	push   ebx
10002d34:	50                   	push   eax
10002d35:	e8 fc ff ff ff       	call   10002d36 <Gameport::calibration(int)+0x7a>	10002d36: R_386_PC32	Gameport::readRaw(int)
10002d3a:	6a 0a                	push   0xa
10002d3c:	e8 fc ff ff ff       	call   10002d3d <Gameport::calibration(int)+0x81>	10002d3d: R_386_PC32	milliTenthSleep(unsigned int)
10002d41:	83 c4 0c             	add    esp,0xc
10002d44:	56                   	push   esi
10002d45:	53                   	push   ebx
10002d46:	57                   	push   edi
10002d47:	bf 03 00 00 00       	mov    edi,0x3
10002d4c:	e8 fc ff ff ff       	call   10002d4d <Gameport::calibration(int)+0x91>	10002d4d: R_386_PC32	Gameport::readRaw(int)
10002d51:	31 d2                	xor    edx,edx
10002d53:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10002d57:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
10002d5b:	03 84 24 88 00 00 00 	add    eax,DWORD PTR [esp+0x88]
10002d62:	f7 f7                	div    edi
10002d64:	31 d2                	xor    edx,edx
10002d66:	89 c1                	mov    ecx,eax
10002d68:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10002d6c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10002d70:	03 84 24 8c 00 00 00 	add    eax,DWORD PTR [esp+0x8c]
10002d77:	83 c4 0c             	add    esp,0xc
10002d7a:	f7 f7                	div    edi
10002d7c:	85 f6                	test   esi,esi
10002d7e:	75 0e                	jne    10002d8e <Gameport::calibration(int)+0xd2>
10002d80:	89 8b 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],ecx
10002d86:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10002d8c:	eb 0c                	jmp    10002d9a <Gameport::calibration(int)+0xde>
10002d8e:	89 8b 64 01 00 00    	mov    DWORD PTR [ebx+0x164],ecx
10002d94:	89 83 68 01 00 00    	mov    DWORD PTR [ebx+0x168],eax
10002d9a:	6b 83 5c 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x15c],0x3
10002da1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
10002da7:	6b 83 60 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x160],0x3
10002dae:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
10002db4:	6b 83 64 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x164],0x3
10002dbb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
10002dc1:	6b 83 68 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x168],0x3
10002dc8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
10002dce:	81 c4 d0 00 00 00    	add    esp,0xd0
10002dd4:	5b                   	pop    ebx
10002dd5:	5e                   	pop    esi
10002dd6:	5f                   	pop    edi
10002dd7:	c3                   	ret    

10002dd8 <Gameport::detect()>:
10002dd8:	53                   	push   ebx
10002dd9:	81 ec 88 00 00 00    	sub    esp,0x88
10002ddf:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
10002de6:	8d 44 24 18          	lea    eax,[esp+0x18]
10002dea:	51                   	push   ecx
10002deb:	6a 00                	push   0x0
10002ded:	53                   	push   ebx
10002dee:	50                   	push   eax
10002def:	e8 fc ff ff ff       	call   10002df0 <Gameport::detect()+0x18>	10002df0: R_386_PC32	Gameport::readRaw(int)
10002df4:	8d 44 24 58          	lea    eax,[esp+0x58]
10002df8:	52                   	push   edx
10002df9:	52                   	push   edx
10002dfa:	6a 01                	push   0x1
10002dfc:	53                   	push   ebx
10002dfd:	50                   	push   eax
10002dfe:	e8 fc ff ff ff       	call   10002dff <Gameport::detect()+0x27>	10002dff: R_386_PC32	Gameport::readRaw(int)
10002e03:	83 c4 1c             	add    esp,0x1c
10002e06:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10002e0d:	75 14                	jne    10002e23 <Gameport::detect()+0x4b>
10002e0f:	f6 44 24 18 10       	test   BYTE PTR [esp+0x18],0x10
10002e14:	74 0d                	je     10002e23 <Gameport::detect()+0x4b>
10002e16:	52                   	push   edx
10002e17:	52                   	push   edx
10002e18:	6a 00                	push   0x0
10002e1a:	53                   	push   ebx
10002e1b:	e8 fc ff ff ff       	call   10002e1c <Gameport::detect()+0x44>	10002e1c: R_386_PC32	Gameport::calibration(int)
10002e20:	83 c4 10             	add    esp,0x10
10002e23:	8a 54 24 4c          	mov    dl,BYTE PTR [esp+0x4c]
10002e27:	83 e2 10             	and    edx,0x10
10002e2a:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10002e31:	75 19                	jne    10002e4c <Gameport::detect()+0x74>
10002e33:	84 d2                	test   dl,dl
10002e35:	74 15                	je     10002e4c <Gameport::detect()+0x74>
10002e37:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10002e3b:	50                   	push   eax
10002e3c:	50                   	push   eax
10002e3d:	6a 01                	push   0x1
10002e3f:	53                   	push   ebx
10002e40:	e8 fc ff ff ff       	call   10002e41 <Gameport::detect()+0x69>	10002e41: R_386_PC32	Gameport::calibration(int)
10002e45:	83 c4 10             	add    esp,0x10
10002e48:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
10002e4c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
10002e50:	c0 e8 04             	shr    al,0x4
10002e53:	83 e0 01             	and    eax,0x1
10002e56:	84 d2                	test   dl,dl
10002e58:	88 83 7c 01 00 00    	mov    BYTE PTR [ebx+0x17c],al
10002e5e:	0f 95 83 7d 01 00 00 	setne  BYTE PTR [ebx+0x17d]
10002e65:	81 c4 88 00 00 00    	add    esp,0x88
10002e6b:	5b                   	pop    ebx
10002e6c:	c3                   	ret    
10002e6d:	90                   	nop

10002e6e <Gameport::read(int)>:
10002e6e:	57                   	push   edi
10002e6f:	56                   	push   esi
10002e70:	53                   	push   ebx
10002e71:	83 ec 50             	sub    esp,0x50
10002e74:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10002e78:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002e7c:	85 f6                	test   esi,esi
10002e7e:	75 09                	jne    10002e89 <Gameport::read(int)+0x1b>
10002e80:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10002e87:	eb 0c                	jmp    10002e95 <Gameport::read(int)+0x27>
10002e89:	83 fe 01             	cmp    esi,0x1
10002e8c:	75 15                	jne    10002ea3 <Gameport::read(int)+0x35>
10002e8e:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10002e95:	75 0c                	jne    10002ea3 <Gameport::read(int)+0x35>
10002e97:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002e9b:	80 20 ef             	and    BYTE PTR [eax],0xef
10002e9e:	e9 b0 00 00 00       	jmp    10002f53 <Gameport::read(int)+0xe5>
10002ea3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10002ea7:	52                   	push   edx
10002ea8:	56                   	push   esi
10002ea9:	53                   	push   ebx
10002eaa:	50                   	push   eax
10002eab:	e8 fc ff ff ff       	call   10002eac <Gameport::read(int)+0x3e>	10002eac: R_386_PC32	Gameport::readRaw(int)
10002eb0:	83 c4 0c             	add    esp,0xc
10002eb3:	4e                   	dec    esi
10002eb4:	75 1a                	jne    10002ed0 <Gameport::read(int)+0x62>
10002eb6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
10002ebc:	8b b3 68 01 00 00    	mov    esi,DWORD PTR [ebx+0x168]
10002ec2:	8b 93 74 01 00 00    	mov    edx,DWORD PTR [ebx+0x174]
10002ec8:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
10002ece:	eb 18                	jmp    10002ee8 <Gameport::read(int)+0x7a>
10002ed0:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
10002ed6:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
10002edc:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
10002ee2:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10002ee8:	85 ff                	test   edi,edi
10002eea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002eee:	0f 94 c0             	sete   al
10002ef1:	85 f6                	test   esi,esi
10002ef3:	0f 94 c1             	sete   cl
10002ef6:	09 c1                	or     ecx,eax
10002ef8:	39 d7                	cmp    edi,edx
10002efa:	0f 94 c0             	sete   al
10002efd:	08 c1                	or     cl,al
10002eff:	75 96                	jne    10002e97 <Gameport::read(int)+0x29>
10002f01:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
10002f05:	74 90                	je     10002e97 <Gameport::read(int)+0x29>
10002f07:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002f0b:	89 d9                	mov    ecx,ebx
10002f0d:	29 f1                	sub    ecx,esi
10002f0f:	6b c9 7f             	imul   ecx,ecx,0x7f
10002f12:	39 fb                	cmp    ebx,edi
10002f14:	7e 1a                	jle    10002f30 <Gameport::read(int)+0xc2>
10002f16:	29 fb                	sub    ebx,edi
10002f18:	29 fa                	sub    edx,edi
10002f1a:	6b db 7f             	imul   ebx,ebx,0x7f
10002f1d:	89 d7                	mov    edi,edx
10002f1f:	89 d8                	mov    eax,ebx
10002f21:	99                   	cdq    
10002f22:	f7 ff                	idiv   edi
10002f24:	89 c3                	mov    ebx,eax
10002f26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002f2a:	29 f0                	sub    eax,esi
10002f2c:	89 c6                	mov    esi,eax
10002f2e:	eb 07                	jmp    10002f37 <Gameport::read(int)+0xc9>
10002f30:	89 c8                	mov    eax,ecx
10002f32:	99                   	cdq    
10002f33:	f7 ff                	idiv   edi
10002f35:	89 c3                	mov    ebx,eax
10002f37:	89 c8                	mov    eax,ecx
10002f39:	88 5c 24 2d          	mov    BYTE PTR [esp+0x2d],bl
10002f3d:	99                   	cdq    
10002f3e:	b9 0d 00 00 00       	mov    ecx,0xd
10002f43:	f7 fe                	idiv   esi
10002f45:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
10002f49:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
10002f4d:	8d 74 24 1c          	lea    esi,[esp+0x1c]
10002f51:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002f53:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002f57:	83 c4 50             	add    esp,0x50
10002f5a:	5b                   	pop    ebx
10002f5b:	5e                   	pop    esi
10002f5c:	5f                   	pop    edi
10002f5d:	c2 04 00             	ret    0x4

10002f60 <non-virtual thunk to Gameport::read(int)>:
10002f60:	81 6c 24 08 58 01 00 00 	sub    DWORD PTR [esp+0x8],0x158
10002f68:	e9 01 ff ff ff       	jmp    10002e6e <Gameport::read(int)>
10002f6d:	90                   	nop

10002f6e <Gameport::readRaw(int)>:
10002f6e:	57                   	push   edi
10002f6f:	ba 01 02 00 00       	mov    edx,0x201
10002f74:	56                   	push   esi
10002f75:	53                   	push   ebx
10002f76:	83 ec 10             	sub    esp,0x10
10002f79:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
10002f7d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
10002f81:	8a 01                	mov    al,BYTE PTR [ecx]
10002f83:	83 e0 e0             	and    eax,0xffffffe0
10002f86:	83 c8 12             	or     eax,0x12
10002f89:	88 01                	mov    BYTE PTR [ecx],al
10002f8b:	ec                   	in     al,dx
10002f8c:	88 c2                	mov    dl,al
10002f8e:	85 db                	test   ebx,ebx
10002f90:	75 11                	jne    10002fa3 <Gameport::readRaw(int)+0x35>
10002f92:	c0 ea 04             	shr    dl,0x4
10002f95:	c0 e8 05             	shr    al,0x5
10002f98:	83 e2 01             	and    edx,0x1
10002f9b:	83 e0 01             	and    eax,0x1
10002f9e:	88 51 01             	mov    BYTE PTR [ecx+0x1],dl
10002fa1:	eb 0c                	jmp    10002faf <Gameport::readRaw(int)+0x41>
10002fa3:	c0 ea 06             	shr    dl,0x6
10002fa6:	c0 e8 07             	shr    al,0x7
10002fa9:	83 e2 01             	and    edx,0x1
10002fac:	88 51 01             	mov    BYTE PTR [ecx+0x1],dl
10002faf:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
10002fb2:	ba 01 02 00 00       	mov    edx,0x201
10002fb7:	b0 ff                	mov    al,0xff
10002fb9:	ee                   	out    dx,al
10002fba:	fa                   	cli    
10002fbb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002fbc: R_386_32	irqDisableCounter
10002fc0:	4b                   	dec    ebx
10002fc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10002fc5:	0f 94 c3             	sete   bl
10002fc8:	c7 44 24 0c ff ff 00 00 	mov    DWORD PTR [esp+0xc],0xffff
10002fd0:	0f b6 f3             	movzx  esi,bl
10002fd3:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
10002fd8:	0f b6 db             	movzx  ebx,bl
10002fdb:	8d 74 76 01          	lea    esi,[esi+esi*2+0x1]
10002fdf:	4b                   	dec    ebx
10002fe0:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
10002fe5:	83 e3 fa             	and    ebx,0xfffffffa
10002fe8:	31 ff                	xor    edi,edi
10002fea:	83 c3 08             	add    ebx,0x8
10002fed:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10002ff4:	ba 01 02 00 00       	mov    edx,0x201
10002ff9:	ec                   	in     al,dx
10002ffa:	0f b6 c0             	movzx  eax,al
10002ffd:	85 f0                	test   eax,esi
10002fff:	0f 94 c2             	sete   dl
10003002:	08 54 24 06          	or     BYTE PTR [esp+0x6],dl
10003006:	80 7c 24 06 01       	cmp    BYTE PTR [esp+0x6],0x1
1000300b:	83 14 24 00          	adc    DWORD PTR [esp],0x0
1000300f:	85 d8                	test   eax,ebx
10003011:	0f 94 c0             	sete   al
10003014:	08 44 24 07          	or     BYTE PTR [esp+0x7],al
10003018:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
1000301d:	83 d7 00             	adc    edi,0x0
10003020:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
10003024:	75 0a                	jne    10003030 <Gameport::readRaw(int)+0xc2>
10003026:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
1000302b:	75 13                	jne    10003040 <Gameport::readRaw(int)+0xd2>
1000302d:	fb                   	sti    
1000302e:	eb 10                	jmp    10003040 <Gameport::readRaw(int)+0xd2>
10003030:	80 7c 24 06 00       	cmp    BYTE PTR [esp+0x6],0x0
10003035:	74 bd                	je     10002ff4 <Gameport::readRaw(int)+0x86>
10003037:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
1000303c:	74 b6                	je     10002ff4 <Gameport::readRaw(int)+0x86>
1000303e:	eb e6                	jmp    10003026 <Gameport::readRaw(int)+0xb8>
10003040:	81 ff ff ff 00 00    	cmp    edi,0xffff
10003046:	74 09                	je     10003051 <Gameport::readRaw(int)+0xe3>
10003048:	81 3c 24 ff ff 00 00 	cmp    DWORD PTR [esp],0xffff
1000304f:	75 03                	jne    10003054 <Gameport::readRaw(int)+0xe6>
10003051:	80 21 ef             	and    BYTE PTR [ecx],0xef
10003054:	89 79 18             	mov    DWORD PTR [ecx+0x18],edi
10003057:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000305a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
1000305d:	83 c4 10             	add    esp,0x10
10003060:	89 c8                	mov    eax,ecx
10003062:	5b                   	pop    ebx
10003063:	5e                   	pop    esi
10003064:	5f                   	pop    edi
10003065:	c2 04 00             	ret    0x4

10003068 <Gameport::open(int, int, void*)>:
10003068:	31 c0                	xor    eax,eax
1000306a:	c3                   	ret    
1000306b:	90                   	nop

1000306c <Gameport::close(int, int, void*)>:
1000306c:	31 c0                	xor    eax,eax
1000306e:	c3                   	ret    
1000306f:	90                   	nop

10003070 <DMAChannel::DMAChannel(int)>:
10003070:	55                   	push   ebp
10003071:	89 e5                	mov    ebp,esp
10003073:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003076:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
1000307d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003080:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10003087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000308a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000308d:	89 10                	mov    DWORD PTR [eax],edx
1000308f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003092:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10003099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000309c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
100030a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100030a6:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
100030aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100030ad:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
100030b1:	83 7d 0c 03          	cmp    DWORD PTR [ebp+0xc],0x3
100030b5:	0f 9f c2             	setg   dl
100030b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100030bb:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
100030be:	90                   	nop
100030bf:	5d                   	pop    ebp
100030c0:	c3                   	ret    
100030c1:	90                   	nop

100030c2 <DMAChannel::~DMAChannel()>:
100030c2:	55                   	push   ebp
100030c3:	89 e5                	mov    ebp,esp
100030c5:	83 ec 08             	sub    esp,0x8
100030c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100030cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100030ce:	85 c0                	test   eax,eax
100030d0:	74 19                	je     100030eb <DMAChannel::~DMAChannel()+0x29>
100030d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100030d5:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
100030d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100030db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100030de:	83 ec 08             	sub    esp,0x8
100030e1:	52                   	push   edx
100030e2:	50                   	push   eax
100030e3:	e8 fc ff ff ff       	call   100030e4 <DMAChannel::~DMAChannel()+0x22>	100030e4: R_386_PC32	Phys::freeDMA(unsigned long, unsigned long)
100030e8:	83 c4 10             	add    esp,0x10
100030eb:	90                   	nop
100030ec:	c9                   	leave  
100030ed:	c3                   	ret    

100030ee <DMAChannel::getAddress()>:
100030ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100030f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100030f5:	c3                   	ret    

100030f6 <DMAChannel::getChannelNum()>:
100030f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100030fa:	8b 00                	mov    eax,DWORD PTR [eax]
100030fc:	c3                   	ret    
100030fd:	90                   	nop

100030fe <DMAChannel::setLength(unsigned int)>:
100030fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003102:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10003106:	3d 00 00 01 00       	cmp    eax,0x10000
1000310b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
1000310e:	76 0d                	jbe    1000311d <DMAChannel::setLength(unsigned int)+0x1f>
10003110:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	10003114: R_386_32	dmaLong
10003118:	e9 fc ff ff ff       	jmp    10003119 <DMAChannel::setLength(unsigned int)+0x1b>	10003119: R_386_PC32	Krnl::panic(char const*)
1000311d:	c3                   	ret    

1000311e <DMAChannel::setAddress(unsigned int)>:
1000311e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003122:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10003126:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10003129:	c3                   	ret    

1000312a <DMAChannel::allocateAddressAndSet(unsigned short)>:
1000312a:	56                   	push   esi
1000312b:	53                   	push   ebx
1000312c:	83 ec 10             	sub    esp,0x10
1000312f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10003133:	0f b7 74 24 20       	movzx  esi,WORD PTR [esp+0x20]
10003138:	56                   	push   esi
10003139:	e8 fc ff ff ff       	call   1000313a <DMAChannel::allocateAddressAndSet(unsigned short)+0x10>	1000313a: R_386_PC32	Phys::allocateDMA(unsigned long)
1000313e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
10003141:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10003144:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10003147:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
1000314a:	83 c4 14             	add    esp,0x14
1000314d:	5b                   	pop    ebx
1000314e:	5e                   	pop    esi
1000314f:	c3                   	ret    

10003150 <DMAChannel::setMode(unsigned char)>:
10003150:	53                   	push   ebx
10003151:	83 ec 08             	sub    esp,0x8
10003154:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10003158:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000315c:	80 7b 0d 00          	cmp    BYTE PTR [ebx+0xd],0x0
10003160:	88 43 0f             	mov    BYTE PTR [ebx+0xf],al
10003163:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
10003167:	74 2a                	je     10003193 <DMAChannel::setMode(unsigned char)+0x43>
10003169:	51                   	push   ecx
1000316a:	51                   	push   ecx
1000316b:	6a 01                	push   0x1
1000316d:	53                   	push   ebx
1000316e:	e8 fc ff ff ff       	call   1000316f <DMAChannel::setMode(unsigned char)+0x1f>	1000316f: R_386_PC32	DMAChannel::mask(bool)
10003173:	80 7b 0e 01          	cmp    BYTE PTR [ebx+0xe],0x1
10003177:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
1000317a:	19 d2                	sbb    edx,edx
1000317c:	80 e2 35             	and    dl,0x35
1000317f:	81 c2 d6 00 00 00    	add    edx,0xd6
10003185:	ee                   	out    dx,al
10003186:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
1000318a:	83 c4 18             	add    esp,0x18
1000318d:	5b                   	pop    ebx
1000318e:	e9 ff 00 00 00       	jmp    10003292 <DMAChannel::unmask()>
10003193:	83 c4 08             	add    esp,0x8
10003196:	5b                   	pop    ebx
10003197:	c3                   	ret    

10003198 <DMAChannel::start()>:
10003198:	57                   	push   edi
10003199:	56                   	push   esi
1000319a:	53                   	push   ebx
1000319b:	83 ec 10             	sub    esp,0x10
1000319e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100031a2:	8b 06                	mov    eax,DWORD PTR [esi]
100031a4:	83 f8 07             	cmp    eax,0x7
100031a7:	0f 87 96 00 00 00    	ja     10003243 <DMAChannel::start()+0xab>
100031ad:	8a 98 48 55 00 10    	mov    bl,BYTE PTR [eax+0x10005548]	100031af: R_386_32	.text
100031b3:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
100031b7:	8a 98 50 55 00 10    	mov    bl,BYTE PTR [eax+0x10005550]	100031b9: R_386_32	.text
100031bd:	8a 80 58 55 00 10    	mov    al,BYTE PTR [eax+0x10005558]	100031bf: R_386_32	.text
100031c3:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
100031c7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
100031cb:	e8 fc ff ff ff       	call   100031cc <DMAChannel::start()+0x34>	100031cc: R_386_PC32	lockScheduler()
100031d0:	50                   	push   eax
100031d1:	50                   	push   eax
100031d2:	6a 01                	push   0x1
100031d4:	56                   	push   esi
100031d5:	e8 fc ff ff ff       	call   100031d6 <DMAChannel::start()+0x3e>	100031d6: R_386_PC32	DMAChannel::mask(bool)
100031da:	8a 5e 0e             	mov    bl,BYTE PTR [esi+0xe]
100031dd:	83 c4 10             	add    esp,0x10
100031e0:	80 fb 01             	cmp    bl,0x1
100031e3:	19 c9                	sbb    ecx,ecx
100031e5:	31 ff                	xor    edi,edi
100031e7:	80 e1 34             	and    cl,0x34
100031ea:	89 f8                	mov    eax,edi
100031ec:	81 c1 d8 00 00 00    	add    ecx,0xd8
100031f2:	89 ca                	mov    edx,ecx
100031f4:	ee                   	out    dx,al
100031f5:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
100031fa:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
100031fd:	ee                   	out    dx,al
100031fe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10003201:	c1 e8 08             	shr    eax,0x8
10003204:	ee                   	out    dx,al
10003205:	89 f8                	mov    eax,edi
10003207:	89 ca                	mov    edx,ecx
10003209:	ee                   	out    dx,al
1000320a:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
1000320d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
10003212:	8d 41 ff             	lea    eax,[ecx-0x1]
10003215:	ee                   	out    dx,al
10003216:	8d 41 ff             	lea    eax,[ecx-0x1]
10003219:	c1 e8 08             	shr    eax,0x8
1000321c:	ee                   	out    dx,al
1000321d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10003220:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
10003225:	c1 e8 10             	shr    eax,0x10
10003228:	ee                   	out    dx,al
10003229:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
1000322d:	74 27                	je     10003256 <DMAChannel::start()+0xbe>
1000322f:	80 fb 01             	cmp    bl,0x1
10003232:	8a 46 0f             	mov    al,BYTE PTR [esi+0xf]
10003235:	19 d2                	sbb    edx,edx
10003237:	80 e2 35             	and    dl,0x35
1000323a:	81 c2 d6 00 00 00    	add    edx,0xd6
10003240:	ee                   	out    dx,al
10003241:	eb 13                	jmp    10003256 <DMAChannel::start()+0xbe>
10003243:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	10003247: R_386_32	dmaConfused
1000324b:	83 c4 10             	add    esp,0x10
1000324e:	5b                   	pop    ebx
1000324f:	5e                   	pop    esi
10003250:	5f                   	pop    edi
10003251:	e9 fc ff ff ff       	jmp    10003252 <DMAChannel::start()+0xba>	10003252: R_386_PC32	Krnl::panic(char const*)
10003256:	c6 46 0d 01          	mov    BYTE PTR [esi+0xd],0x1
1000325a:	83 ec 0c             	sub    esp,0xc
1000325d:	56                   	push   esi
1000325e:	e8 fc ff ff ff       	call   1000325f <DMAChannel::start()+0xc7>	1000325f: R_386_PC32	DMAChannel::unmask()
10003263:	83 c4 20             	add    esp,0x20
10003266:	5b                   	pop    ebx
10003267:	5e                   	pop    esi
10003268:	5f                   	pop    edi
10003269:	e9 fc ff ff ff       	jmp    1000326a <DMAChannel::start()+0xd2>	1000326a: R_386_PC32	unlockScheduler()

1000326e <DMAChannel::stop()>:
1000326e:	c3                   	ret    
1000326f:	90                   	nop

10003270 <DMAChannel::mask(bool)>:
10003270:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
10003275:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10003279:	0f 95 c0             	setne  al
1000327c:	c1 e0 02             	shl    eax,0x2
1000327f:	0b 02                	or     eax,DWORD PTR [edx]
10003281:	80 7a 0e 01          	cmp    BYTE PTR [edx+0xe],0x1
10003285:	19 d2                	sbb    edx,edx
10003287:	80 e2 36             	and    dl,0x36
1000328a:	81 c2 d4 00 00 00    	add    edx,0xd4
10003290:	ee                   	out    dx,al
10003291:	c3                   	ret    

10003292 <DMAChannel::unmask()>:
10003292:	6a 00                	push   0x0
10003294:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10003298:	e8 fc ff ff ff       	call   10003299 <DMAChannel::unmask()+0x7>	10003299: R_386_PC32	DMAChannel::mask(bool)
1000329d:	58                   	pop    eax
1000329e:	5a                   	pop    edx
1000329f:	c3                   	ret    

100032a0 <DMA::DMA()>:
100032a0:	55                   	push   ebp
100032a1:	89 e5                	mov    ebp,esp
100032a3:	83 ec 08             	sub    esp,0x8
100032a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032a9:	83 ec 08             	sub    esp,0x8
100032ac:	68 00 00 00 00       	push   0x0	100032ad: R_386_32	dmaCtrlName
100032b1:	50                   	push   eax
100032b2:	e8 fc ff ff ff       	call   100032b3 <DMA::DMA()+0x13>	100032b3: R_386_PC32	Device::Device(char const*)
100032b7:	83 c4 10             	add    esp,0x10
100032ba:	ba 08 00 00 00       	mov    edx,0x8	100032bb: R_386_32	vtable for DMA
100032bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032c2:	89 10                	mov    DWORD PTR [eax],edx
100032c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032c7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
100032ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100032d7:	0f b6 d0             	movzx  edx,al
100032da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032dd:	66 c7 44 90 04 00 00 	mov    WORD PTR [eax+edx*4+0x4],0x0
100032e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100032ed:	0f b6 d0             	movzx  edx,al
100032f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032f3:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
100032f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032fb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003301:	8d 50 01             	lea    edx,[eax+0x1]
10003304:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003307:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000330d:	0f b6 d0             	movzx  edx,al
10003310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003313:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003317:	83 e1 3f             	and    ecx,0x3f
1000331a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000331e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003321:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003327:	0f b6 d0             	movzx  edx,al
1000332a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000332d:	66 c7 44 90 04 c0 00 	mov    WORD PTR [eax+edx*4+0x4],0xc0
10003334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003337:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000333d:	0f b6 d0             	movzx  edx,al
10003340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003343:	c6 44 90 06 20       	mov    BYTE PTR [eax+edx*4+0x6],0x20
10003348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000334b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003351:	8d 50 01             	lea    edx,[eax+0x1]
10003354:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003357:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000335d:	0f b6 d0             	movzx  edx,al
10003360:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003363:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003367:	83 e1 3f             	and    ecx,0x3f
1000336a:	83 c9 40             	or     ecx,0x40
1000336d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003374:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000337a:	0f b6 d0             	movzx  edx,al
1000337d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003380:	66 c7 44 90 04 81 00 	mov    WORD PTR [eax+edx*4+0x4],0x81
10003387:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000338a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003390:	0f b6 d0             	movzx  edx,al
10003393:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003396:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
1000339b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000339e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033a4:	8d 50 01             	lea    edx,[eax+0x1]
100033a7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100033aa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100033b0:	0f b6 d0             	movzx  edx,al
100033b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033b6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100033ba:	83 e1 3f             	and    ecx,0x3f
100033bd:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100033c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033c4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033ca:	0f b6 d0             	movzx  edx,al
100033cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033d0:	66 c7 44 90 04 87 00 	mov    WORD PTR [eax+edx*4+0x4],0x87
100033d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033e0:	0f b6 d0             	movzx  edx,al
100033e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033e6:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100033eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033f4:	8d 50 01             	lea    edx,[eax+0x1]
100033f7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100033fa:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003400:	0f b6 d0             	movzx  edx,al
10003403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003406:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000340a:	83 e1 3f             	and    ecx,0x3f
1000340d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003411:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003414:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000341a:	0f b6 d0             	movzx  edx,al
1000341d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003420:	66 c7 44 90 04 89 00 	mov    WORD PTR [eax+edx*4+0x4],0x89
10003427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000342a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003430:	0f b6 d0             	movzx  edx,al
10003433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003436:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
1000343b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000343e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003444:	8d 50 01             	lea    edx,[eax+0x1]
10003447:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000344a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003450:	0f b6 d0             	movzx  edx,al
10003453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003456:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000345a:	83 e1 3f             	and    ecx,0x3f
1000345d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003464:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000346a:	0f b6 d0             	movzx  edx,al
1000346d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003470:	66 c7 44 90 04 8f 00 	mov    WORD PTR [eax+edx*4+0x4],0x8f
10003477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000347a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003480:	0f b6 d0             	movzx  edx,al
10003483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003486:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
1000348b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000348e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003494:	8d 50 01             	lea    edx,[eax+0x1]
10003497:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000349a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100034a0:	0f b6 d0             	movzx  edx,al
100034a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034a6:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100034aa:	83 e1 3f             	and    ecx,0x3f
100034ad:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100034b1:	90                   	nop
100034b2:	c9                   	leave  
100034b3:	c3                   	ret    

100034b4 <DMA::getAvailable()>:
100034b4:	53                   	push   ebx
100034b5:	31 db                	xor    ebx,ebx
100034b7:	83 ec 08             	sub    esp,0x8
100034ba:	e8 fc ff ff ff       	call   100034bb <DMA::getAvailable()+0x7>	100034bb: R_386_PC32	lockScheduler()
100034bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100034c3:	0f b6 80 58 01 00 00 	movzx  eax,BYTE PTR [eax+0x158]
100034ca:	0f a3 d8             	bt     eax,ebx
100034cd:	73 07                	jae    100034d6 <DMA::getAvailable()+0x22>
100034cf:	e8 fc ff ff ff       	call   100034d0 <DMA::getAvailable()+0x1c>	100034d0: R_386_PC32	unlockScheduler()
100034d4:	eb 0e                	jmp    100034e4 <DMA::getAvailable()+0x30>
100034d6:	43                   	inc    ebx
100034d7:	83 fb 08             	cmp    ebx,0x8
100034da:	75 ee                	jne    100034ca <DMA::getAvailable()+0x16>
100034dc:	e8 fc ff ff ff       	call   100034dd <DMA::getAvailable()+0x29>	100034dd: R_386_PC32	unlockScheduler()
100034e1:	83 cb ff             	or     ebx,0xffffffff
100034e4:	89 d8                	mov    eax,ebx
100034e6:	83 c4 08             	add    esp,0x8
100034e9:	5b                   	pop    ebx
100034ea:	c3                   	ret    
100034eb:	90                   	nop

100034ec <DMA::open(int, int, void*)>:
100034ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100034f0:	c6 80 58 01 00 00 ee 	mov    BYTE PTR [eax+0x158],0xee
100034f7:	31 c0                	xor    eax,eax
100034f9:	e6 0d                	out    0xd,al
100034fb:	e6 da                	out    0xda,al
100034fd:	31 c0                	xor    eax,eax
100034ff:	c3                   	ret    

10003500 <DMA::close(int, int, void*)>:
10003500:	31 c0                	xor    eax,eax
10003502:	c3                   	ret    
10003503:	90                   	nop

10003504 <DMA::tryLockChannelWithBase(int)>:
10003504:	56                   	push   esi
10003505:	53                   	push   ebx
10003506:	83 ec 14             	sub    esp,0x14
10003509:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
1000350d:	e8 fc ff ff ff       	call   1000350e <DMA::tryLockChannelWithBase(int)+0xa>	1000350e: R_386_PC32	lockScheduler()
10003512:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10003516:	8d 43 03             	lea    eax,[ebx+0x3]
10003519:	39 d8                	cmp    eax,ebx
1000351b:	7c 47                	jl     10003564 <DMA::tryLockChannelWithBase(int)+0x60>
1000351d:	0f b6 8e 58 01 00 00 	movzx  ecx,BYTE PTR [esi+0x158]
10003524:	89 ca                	mov    edx,ecx
10003526:	0f a3 d9             	bt     ecx,ebx
10003529:	73 36                	jae    10003561 <DMA::tryLockChannelWithBase(int)+0x5d>
1000352b:	83 ec 0c             	sub    esp,0xc
1000352e:	88 d9                	mov    cl,bl
10003530:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10003535:	d3 c0                	rol    eax,cl
10003537:	21 d0                	and    eax,edx
10003539:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
1000353f:	6a 18                	push   0x18
10003541:	e8 fc ff ff ff       	call   10003542 <DMA::tryLockChannelWithBase(int)+0x3e>	10003542: R_386_PC32	malloc
10003546:	5a                   	pop    edx
10003547:	59                   	pop    ecx
10003548:	53                   	push   ebx
10003549:	50                   	push   eax
1000354a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000354e:	e8 fc ff ff ff       	call   1000354f <DMA::tryLockChannelWithBase(int)+0x4b>	1000354f: R_386_PC32	DMAChannel::DMAChannel(int)
10003553:	e8 fc ff ff ff       	call   10003554 <DMA::tryLockChannelWithBase(int)+0x50>	10003554: R_386_PC32	unlockScheduler()
10003558:	83 c4 10             	add    esp,0x10
1000355b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000355f:	eb 0a                	jmp    1000356b <DMA::tryLockChannelWithBase(int)+0x67>
10003561:	43                   	inc    ebx
10003562:	eb b5                	jmp    10003519 <DMA::tryLockChannelWithBase(int)+0x15>
10003564:	e8 fc ff ff ff       	call   10003565 <DMA::tryLockChannelWithBase(int)+0x61>	10003565: R_386_PC32	unlockScheduler()
10003569:	31 c0                	xor    eax,eax
1000356b:	83 c4 14             	add    esp,0x14
1000356e:	5b                   	pop    ebx
1000356f:	5e                   	pop    esi
10003570:	c3                   	ret    
10003571:	90                   	nop

10003572 <DMA::lockChannelWithBase(int)>:
10003572:	83 ec 0c             	sub    esp,0xc
10003575:	50                   	push   eax
10003576:	50                   	push   eax
10003577:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000357b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000357f:	e8 fc ff ff ff       	call   10003580 <DMA::lockChannelWithBase(int)+0xe>	10003580: R_386_PC32	DMA::tryLockChannelWithBase(int)
10003584:	83 c4 10             	add    esp,0x10
10003587:	85 c0                	test   eax,eax
10003589:	74 ea                	je     10003575 <DMA::lockChannelWithBase(int)+0x3>
1000358b:	83 c4 0c             	add    esp,0xc
1000358e:	c3                   	ret    
1000358f:	90                   	nop

10003590 <DMA::tryLockChannel8()>:
10003590:	83 ec 14             	sub    esp,0x14
10003593:	6a 00                	push   0x0
10003595:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003599:	e8 fc ff ff ff       	call   1000359a <DMA::tryLockChannel8()+0xa>	1000359a: R_386_PC32	DMA::tryLockChannelWithBase(int)
1000359e:	83 c4 1c             	add    esp,0x1c
100035a1:	c3                   	ret    

100035a2 <DMA::tryLockChannel16()>:
100035a2:	83 ec 14             	sub    esp,0x14
100035a5:	6a 04                	push   0x4
100035a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100035ab:	e8 fc ff ff ff       	call   100035ac <DMA::tryLockChannel16()+0xa>	100035ac: R_386_PC32	DMA::tryLockChannelWithBase(int)
100035b0:	83 c4 1c             	add    esp,0x1c
100035b3:	c3                   	ret    

100035b4 <DMA::tryLockChannel(int)>:
100035b4:	56                   	push   esi
100035b5:	53                   	push   ebx
100035b6:	83 ec 14             	sub    esp,0x14
100035b9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100035bd:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100035c1:	83 fb 07             	cmp    ebx,0x7
100035c4:	76 12                	jbe    100035d8 <DMA::tryLockChannel(int)+0x24>
100035c6:	83 ec 0c             	sub    esp,0xc
100035c9:	68 60 55 00 10       	push   0x10005560	100035ca: R_386_32	.text
100035ce:	e8 fc ff ff ff       	call   100035cf <DMA::tryLockChannel(int)+0x1b>	100035cf: R_386_PC32	Dbg::kprintf(char const*, ...)
100035d3:	83 c4 10             	add    esp,0x10
100035d6:	eb 4e                	jmp    10003626 <DMA::tryLockChannel(int)+0x72>
100035d8:	e8 fc ff ff ff       	call   100035d9 <DMA::tryLockChannel(int)+0x25>	100035d9: R_386_PC32	lockScheduler()
100035dd:	0f b6 86 58 01 00 00 	movzx  eax,BYTE PTR [esi+0x158]
100035e4:	89 c2                	mov    edx,eax
100035e6:	0f a3 d8             	bt     eax,ebx
100035e9:	73 36                	jae    10003621 <DMA::tryLockChannel(int)+0x6d>
100035eb:	83 ec 0c             	sub    esp,0xc
100035ee:	88 d9                	mov    cl,bl
100035f0:	b8 fe ff ff ff       	mov    eax,0xfffffffe
100035f5:	d3 c0                	rol    eax,cl
100035f7:	21 d0                	and    eax,edx
100035f9:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
100035ff:	6a 18                	push   0x18
10003601:	e8 fc ff ff ff       	call   10003602 <DMA::tryLockChannel(int)+0x4e>	10003602: R_386_PC32	malloc
10003606:	5a                   	pop    edx
10003607:	59                   	pop    ecx
10003608:	53                   	push   ebx
10003609:	50                   	push   eax
1000360a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000360e:	e8 fc ff ff ff       	call   1000360f <DMA::tryLockChannel(int)+0x5b>	1000360f: R_386_PC32	DMAChannel::DMAChannel(int)
10003613:	e8 fc ff ff ff       	call   10003614 <DMA::tryLockChannel(int)+0x60>	10003614: R_386_PC32	unlockScheduler()
10003618:	83 c4 10             	add    esp,0x10
1000361b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000361f:	eb 07                	jmp    10003628 <DMA::tryLockChannel(int)+0x74>
10003621:	e8 fc ff ff ff       	call   10003622 <DMA::tryLockChannel(int)+0x6e>	10003622: R_386_PC32	unlockScheduler()
10003626:	31 c0                	xor    eax,eax
10003628:	83 c4 14             	add    esp,0x14
1000362b:	5b                   	pop    ebx
1000362c:	5e                   	pop    esi
1000362d:	c3                   	ret    

1000362e <DMA::lockChannel8()>:
1000362e:	83 ec 14             	sub    esp,0x14
10003631:	6a 00                	push   0x0
10003633:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003637:	e8 fc ff ff ff       	call   10003638 <DMA::lockChannel8()+0xa>	10003638: R_386_PC32	DMA::lockChannelWithBase(int)
1000363c:	83 c4 1c             	add    esp,0x1c
1000363f:	c3                   	ret    

10003640 <DMA::lockChannel16()>:
10003640:	83 ec 14             	sub    esp,0x14
10003643:	6a 04                	push   0x4
10003645:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003649:	e8 fc ff ff ff       	call   1000364a <DMA::lockChannel16()+0xa>	1000364a: R_386_PC32	DMA::lockChannelWithBase(int)
1000364e:	83 c4 1c             	add    esp,0x1c
10003651:	c3                   	ret    

10003652 <DMA::lockChannel(int)>:
10003652:	83 ec 0c             	sub    esp,0xc
10003655:	50                   	push   eax
10003656:	50                   	push   eax
10003657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000365b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000365f:	e8 fc ff ff ff       	call   10003660 <DMA::lockChannel(int)+0xe>	10003660: R_386_PC32	DMA::tryLockChannel(int)
10003664:	83 c4 10             	add    esp,0x10
10003667:	85 c0                	test   eax,eax
10003669:	74 ea                	je     10003655 <DMA::lockChannel(int)+0x3>
1000366b:	83 c4 0c             	add    esp,0xc
1000366e:	c3                   	ret    
1000366f:	90                   	nop

10003670 <DMA::unlockChannel(DMAChannel*)>:
10003670:	56                   	push   esi
10003671:	53                   	push   ebx
10003672:	53                   	push   ebx
10003673:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10003677:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000367b:	85 db                	test   ebx,ebx
1000367d:	75 10                	jne    1000368f <DMA::unlockChannel(DMAChannel*)+0x1f>
1000367f:	83 ec 0c             	sub    esp,0xc
10003682:	68 00 00 00 00       	push   0x0	10003683: R_386_32	badDma
10003687:	e8 fc ff ff ff       	call   10003688 <DMA::unlockChannel(DMAChannel*)+0x18>	10003688: R_386_PC32	Krnl::panic(char const*)
1000368c:	83 c4 10             	add    esp,0x10
1000368f:	e8 fc ff ff ff       	call   10003690 <DMA::unlockChannel(DMAChannel*)+0x20>	10003690: R_386_PC32	lockScheduler()
10003694:	0f b6 96 58 01 00 00 	movzx  edx,BYTE PTR [esi+0x158]
1000369b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
1000369d:	89 d0                	mov    eax,edx
1000369f:	0f a3 ca             	bt     edx,ecx
100036a2:	72 24                	jb     100036c8 <DMA::unlockChannel(DMAChannel*)+0x58>
100036a4:	83 ec 0c             	sub    esp,0xc
100036a7:	ba 01 00 00 00       	mov    edx,0x1
100036ac:	d3 e2                	shl    edx,cl
100036ae:	09 d0                	or     eax,edx
100036b0:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
100036b6:	53                   	push   ebx
100036b7:	e8 fc ff ff ff       	call   100036b8 <DMA::unlockChannel(DMAChannel*)+0x48>	100036b8: R_386_PC32	DMAChannel::~DMAChannel()
100036bc:	5a                   	pop    edx
100036bd:	59                   	pop    ecx
100036be:	6a 18                	push   0x18
100036c0:	53                   	push   ebx
100036c1:	e8 fc ff ff ff       	call   100036c2 <DMA::unlockChannel(DMAChannel*)+0x52>	100036c2: R_386_PC32	operator delete(void*, unsigned long)
100036c6:	eb 0d                	jmp    100036d5 <DMA::unlockChannel(DMAChannel*)+0x65>
100036c8:	83 ec 0c             	sub    esp,0xc
100036cb:	68 00 00 00 00       	push   0x0	100036cc: R_386_32	badBook
100036d0:	e8 fc ff ff ff       	call   100036d1 <DMA::unlockChannel(DMAChannel*)+0x61>	100036d1: R_386_PC32	Krnl::panic(char const*)
100036d5:	83 c4 10             	add    esp,0x10
100036d8:	58                   	pop    eax
100036d9:	5b                   	pop    ebx
100036da:	5e                   	pop    esi
100036db:	e9 fc ff ff ff       	jmp    100036dc <DMA::unlockChannel(DMAChannel*)+0x6c>	100036dc: R_386_PC32	unlockScheduler()

100036e0 <PS2::PS2()>:
100036e0:	55                   	push   ebp
100036e1:	89 e5                	mov    ebp,esp
100036e3:	83 ec 08             	sub    esp,0x8
100036e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100036e9:	83 ec 08             	sub    esp,0x8
100036ec:	68 00 00 00 00       	push   0x0	100036ed: R_386_32	ps2ctrlname
100036f1:	50                   	push   eax
100036f2:	e8 fc ff ff ff       	call   100036f3 <PS2::PS2()+0x13>	100036f3: R_386_PC32	Bus::Bus(char const*)
100036f7:	83 c4 10             	add    esp,0x10
100036fa:	ba 08 00 00 00       	mov    edx,0x8	100036fb: R_386_32	vtable for PS2
100036ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003702:	89 10                	mov    DWORD PTR [eax],edx
10003704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003707:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000370d:	0f b6 d0             	movzx  edx,al
10003710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003713:	66 c7 44 90 04 60 00 	mov    WORD PTR [eax+edx*4+0x4],0x60
1000371a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000371d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003723:	0f b6 d0             	movzx  edx,al
10003726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003729:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
1000372e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003731:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003737:	8d 50 01             	lea    edx,[eax+0x1]
1000373a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000373d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003743:	0f b6 d0             	movzx  edx,al
10003746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003749:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000374d:	83 e1 3f             	and    ecx,0x3f
10003750:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003757:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000375d:	0f b6 d0             	movzx  edx,al
10003760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003763:	66 c7 44 90 04 64 00 	mov    WORD PTR [eax+edx*4+0x4],0x64
1000376a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000376d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003773:	0f b6 d0             	movzx  edx,al
10003776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003779:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
1000377e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003781:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003787:	8d 50 01             	lea    edx,[eax+0x1]
1000378a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000378d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003793:	0f b6 d0             	movzx  edx,al
10003796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003799:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000379d:	83 e1 3f             	and    ecx,0x3f
100037a0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100037a4:	90                   	nop
100037a5:	c9                   	leave  
100037a6:	c3                   	ret    
100037a7:	90                   	nop

100037a8 <PS2::open(int, int, void*)>:
100037a8:	55                   	push   ebp
100037a9:	89 e5                	mov    ebp,esp
100037ab:	53                   	push   ebx
100037ac:	83 ec 24             	sub    esp,0x24
100037af:	e8 fc ff ff ff       	call   100037b0 <PS2::open(int, int, void*)+0x8>	100037b0: R_386_PC32	lockScheduler()
100037b4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100037bb:	83 ec 08             	sub    esp,0x8
100037be:	68 ad 00 00 00       	push   0xad
100037c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100037c6:	e8 fc ff ff ff       	call   100037c7 <PS2::open(int, int, void*)+0x1f>	100037c7: R_386_PC32	PS2::controllerWrite(unsigned char)
100037cb:	83 c4 10             	add    esp,0x10
100037ce:	83 ec 08             	sub    esp,0x8
100037d1:	68 a7 00 00 00       	push   0xa7
100037d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100037d9:	e8 fc ff ff ff       	call   100037da <PS2::open(int, int, void*)+0x32>	100037da: R_386_PC32	PS2::controllerWrite(unsigned char)
100037de:	83 c4 10             	add    esp,0x10
100037e1:	66 c7 45 e4 60 00    	mov    WORD PTR [ebp-0x1c],0x60
100037e7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100037ea:	89 c2                	mov    edx,eax
100037ec:	ec                   	in     al,dx
100037ed:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
100037f0:	66 c7 45 e8 60 00    	mov    WORD PTR [ebp-0x18],0x60
100037f6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100037f9:	89 c2                	mov    edx,eax
100037fb:	ec                   	in     al,dx
100037fc:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
100037ff:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10003805:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10003808:	89 c2                	mov    edx,eax
1000380a:	ec                   	in     al,dx
1000380b:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
1000380e:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003814:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003817:	89 c2                	mov    edx,eax
10003819:	ec                   	in     al,dx
1000381a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000381d:	83 ec 08             	sub    esp,0x8
10003820:	68 aa 00 00 00       	push   0xaa
10003825:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003828:	e8 fc ff ff ff       	call   10003829 <PS2::open(int, int, void*)+0x81>	10003829: R_386_PC32	PS2::controllerWrite(unsigned char)
1000382d:	83 c4 10             	add    esp,0x10
10003830:	83 ec 0c             	sub    esp,0xc
10003833:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003836:	e8 fc ff ff ff       	call   10003837 <PS2::open(int, int, void*)+0x8f>	10003837: R_386_PC32	PS2::controllerRead()
1000383b:	83 c4 10             	add    esp,0x10
1000383e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003841:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10003845:	74 65                	je     100038ac <PS2::open(int, int, void*)+0x104>
10003847:	83 ec 0c             	sub    esp,0xc
1000384a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000384d:	e8 fc ff ff ff       	call   1000384e <PS2::open(int, int, void*)+0xa6>	1000384e: R_386_PC32	PS2::controllerRead()
10003852:	83 c4 10             	add    esp,0x10
10003855:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003858:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
1000385c:	74 4e                	je     100038ac <PS2::open(int, int, void*)+0x104>
1000385e:	83 ec 08             	sub    esp,0x8
10003861:	68 aa 00 00 00       	push   0xaa
10003866:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003869:	e8 fc ff ff ff       	call   1000386a <PS2::open(int, int, void*)+0xc2>	1000386a: R_386_PC32	PS2::controllerWrite(unsigned char)
1000386e:	83 c4 10             	add    esp,0x10
10003871:	83 ec 08             	sub    esp,0x8
10003874:	68 aa 00 00 00       	push   0xaa
10003879:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000387c:	e8 fc ff ff ff       	call   1000387d <PS2::open(int, int, void*)+0xd5>	1000387d: R_386_PC32	PS2::controllerWrite(unsigned char)
10003881:	83 c4 10             	add    esp,0x10
10003884:	83 ec 0c             	sub    esp,0xc
10003887:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000388a:	e8 fc ff ff ff       	call   1000388b <PS2::open(int, int, void*)+0xe3>	1000388b: R_386_PC32	PS2::controllerRead()
1000388f:	83 c4 10             	add    esp,0x10
10003892:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003895:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10003899:	74 11                	je     100038ac <PS2::open(int, int, void*)+0x104>
1000389b:	83 ec 0c             	sub    esp,0xc
1000389e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100038a1:	e8 fc ff ff ff       	call   100038a2 <PS2::open(int, int, void*)+0xfa>	100038a2: R_386_PC32	PS2::controllerRead()
100038a6:	83 c4 10             	add    esp,0x10
100038a9:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100038ac:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
100038b3:	83 ec 08             	sub    esp,0x8
100038b6:	6a 20                	push   0x20
100038b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100038bb:	e8 fc ff ff ff       	call   100038bc <PS2::open(int, int, void*)+0x114>	100038bc: R_386_PC32	PS2::controllerWrite(unsigned char)
100038c0:	83 c4 10             	add    esp,0x10
100038c3:	83 ec 0c             	sub    esp,0xc
100038c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100038c9:	e8 fc ff ff ff       	call   100038ca <PS2::open(int, int, void*)+0x122>	100038ca: R_386_PC32	PS2::controllerRead()
100038ce:	83 c4 10             	add    esp,0x10
100038d1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
100038d4:	80 4d f2 01          	or     BYTE PTR [ebp-0xe],0x1
100038d8:	80 4d f2 02          	or     BYTE PTR [ebp-0xe],0x2
100038dc:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
100038e0:	83 ec 04             	sub    esp,0x4
100038e3:	50                   	push   eax
100038e4:	6a 60                	push   0x60
100038e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100038e9:	e8 fc ff ff ff       	call   100038ea <PS2::open(int, int, void*)+0x142>	100038ea: R_386_PC32	PS2::controllerWrite(unsigned char, unsigned char)
100038ee:	83 c4 10             	add    esp,0x10
100038f1:	83 ec 08             	sub    esp,0x8
100038f4:	68 ae 00 00 00       	push   0xae
100038f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100038fc:	e8 fc ff ff ff       	call   100038fd <PS2::open(int, int, void*)+0x155>	100038fd: R_386_PC32	PS2::controllerWrite(unsigned char)
10003901:	83 c4 10             	add    esp,0x10
10003904:	83 ec 08             	sub    esp,0x8
10003907:	68 a8 00 00 00       	push   0xa8
1000390c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000390f:	e8 fc ff ff ff       	call   10003910 <PS2::open(int, int, void*)+0x168>	10003910: R_386_PC32	PS2::controllerWrite(unsigned char)
10003914:	83 c4 10             	add    esp,0x10
10003917:	e8 fc ff ff ff       	call   10003918 <PS2::open(int, int, void*)+0x170>	10003918: R_386_PC32	unlockScheduler()
1000391c:	c7 45 dc 60 01 00 00 	mov    DWORD PTR [ebp-0x24],0x160
10003923:	83 ec 0c             	sub    esp,0xc
10003926:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10003929:	e8 fc ff ff ff       	call   1000392a <PS2::open(int, int, void*)+0x182>	1000392a: R_386_PC32	malloc
1000392e:	83 c4 10             	add    esp,0x10
10003931:	89 c3                	mov    ebx,eax
10003933:	83 ec 0c             	sub    esp,0xc
10003936:	53                   	push   ebx
10003937:	e8 fc ff ff ff       	call   10003938 <PS2::open(int, int, void*)+0x190>	10003938: R_386_PC32	PS2Port::PS2Port()
1000393c:	83 c4 10             	add    esp,0x10
1000393f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003942:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
10003948:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000394b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000394e:	8b 92 58 01 00 00    	mov    edx,DWORD PTR [edx+0x158]
10003954:	83 ec 08             	sub    esp,0x8
10003957:	52                   	push   edx
10003958:	50                   	push   eax
10003959:	e8 fc ff ff ff       	call   1000395a <PS2::open(int, int, void*)+0x1b2>	1000395a: R_386_PC32	Device::addChild(Device*)
1000395e:	83 c4 10             	add    esp,0x10
10003961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003964:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
1000396a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000396d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10003973:	8b 00                	mov    eax,DWORD PTR [eax]
10003975:	83 c0 08             	add    eax,0x8
10003978:	8b 00                	mov    eax,DWORD PTR [eax]
1000397a:	6a 00                	push   0x0
1000397c:	6a 00                	push   0x0
1000397e:	6a 00                	push   0x0
10003980:	52                   	push   edx
10003981:	ff d0                	call   eax
10003983:	83 c4 10             	add    esp,0x10
10003986:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
1000398a:	75 6a                	jne    100039f6 <PS2::open(int, int, void*)+0x24e>
1000398c:	c7 45 d8 60 01 00 00 	mov    DWORD PTR [ebp-0x28],0x160
10003993:	83 ec 0c             	sub    esp,0xc
10003996:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10003999:	e8 fc ff ff ff       	call   1000399a <PS2::open(int, int, void*)+0x1f2>	1000399a: R_386_PC32	malloc
1000399e:	83 c4 10             	add    esp,0x10
100039a1:	89 c3                	mov    ebx,eax
100039a3:	83 ec 0c             	sub    esp,0xc
100039a6:	53                   	push   ebx
100039a7:	e8 fc ff ff ff       	call   100039a8 <PS2::open(int, int, void*)+0x200>	100039a8: R_386_PC32	PS2Port::PS2Port()
100039ac:	83 c4 10             	add    esp,0x10
100039af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100039b2:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
100039b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100039bb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100039be:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
100039c4:	83 ec 08             	sub    esp,0x8
100039c7:	52                   	push   edx
100039c8:	50                   	push   eax
100039c9:	e8 fc ff ff ff       	call   100039ca <PS2::open(int, int, void*)+0x222>	100039ca: R_386_PC32	Device::addChild(Device*)
100039ce:	83 c4 10             	add    esp,0x10
100039d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100039d4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
100039da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100039dd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100039e3:	8b 00                	mov    eax,DWORD PTR [eax]
100039e5:	83 c0 08             	add    eax,0x8
100039e8:	8b 00                	mov    eax,DWORD PTR [eax]
100039ea:	6a 00                	push   0x0
100039ec:	6a 00                	push   0x0
100039ee:	6a 01                	push   0x1
100039f0:	52                   	push   edx
100039f1:	ff d0                	call   eax
100039f3:	83 c4 10             	add    esp,0x10
100039f6:	b8 00 00 00 00       	mov    eax,0x0
100039fb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100039fe:	c9                   	leave  
100039ff:	c3                   	ret    

10003a00 <PS2::close(int, int, void*)>:
10003a00:	b8 00 00 00 00       	mov    eax,0x0
10003a05:	c3                   	ret    

10003a06 <PS2::detect()>:
10003a06:	90                   	nop
10003a07:	c3                   	ret    

10003a08 <PS2::controllerWrite(unsigned char)>:
10003a08:	55                   	push   ebp
10003a09:	89 e5                	mov    ebp,esp
10003a0b:	83 ec 14             	sub    esp,0x14
10003a0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10003a11:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10003a14:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003a1b:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003a21:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003a24:	89 c2                	mov    edx,eax
10003a26:	ec                   	in     al,dx
10003a27:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003a2a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003a2d:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003a30:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003a34:	83 e0 40             	and    eax,0x40
10003a37:	85 c0                	test   eax,eax
10003a39:	75 2d                	jne    10003a68 <PS2::controllerWrite(unsigned char)+0x60>
10003a3b:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003a3e:	84 c0                	test   al,al
10003a40:	78 26                	js     10003a68 <PS2::controllerWrite(unsigned char)+0x60>
10003a42:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003a46:	83 e0 02             	and    eax,0x2
10003a49:	85 c0                	test   eax,eax
10003a4b:	74 17                	je     10003a64 <PS2::controllerWrite(unsigned char)+0x5c>
10003a4d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003a50:	8d 50 01             	lea    edx,[eax+0x1]
10003a53:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003a56:	3d 20 03 00 00       	cmp    eax,0x320
10003a5b:	0f 94 c0             	sete   al
10003a5e:	84 c0                	test   al,al
10003a60:	75 05                	jne    10003a67 <PS2::controllerWrite(unsigned char)+0x5f>
10003a62:	eb b7                	jmp    10003a1b <PS2::controllerWrite(unsigned char)+0x13>
10003a64:	90                   	nop
10003a65:	eb 01                	jmp    10003a68 <PS2::controllerWrite(unsigned char)+0x60>
10003a67:	90                   	nop
10003a68:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
10003a6c:	66 c7 45 f4 64 00    	mov    WORD PTR [ebp-0xc],0x64
10003a72:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003a75:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003a78:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003a7b:	ee                   	out    dx,al
10003a7c:	b0 01                	mov    al,0x1
10003a7e:	c9                   	leave  
10003a7f:	c3                   	ret    

10003a80 <PS2::controllerWrite(unsigned char, unsigned char)>:
10003a80:	55                   	push   ebp
10003a81:	89 e5                	mov    ebp,esp
10003a83:	83 ec 28             	sub    esp,0x28
10003a86:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10003a89:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10003a8c:	88 55 dc             	mov    BYTE PTR [ebp-0x24],dl
10003a8f:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
10003a92:	0f b6 45 dc          	movzx  eax,BYTE PTR [ebp-0x24]
10003a96:	50                   	push   eax
10003a97:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a9a:	e8 fc ff ff ff       	call   10003a9b <PS2::controllerWrite(unsigned char, unsigned char)+0x1b>	10003a9b: R_386_PC32	PS2::controllerWrite(unsigned char)
10003a9f:	83 c4 08             	add    esp,0x8
10003aa2:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003aa9:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003aaf:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003ab2:	89 c2                	mov    edx,eax
10003ab4:	ec                   	in     al,dx
10003ab5:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003ab8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003abb:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003abe:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003ac2:	83 e0 40             	and    eax,0x40
10003ac5:	85 c0                	test   eax,eax
10003ac7:	75 07                	jne    10003ad0 <PS2::controllerWrite(unsigned char, unsigned char)+0x50>
10003ac9:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003acc:	84 c0                	test   al,al
10003ace:	79 18                	jns    10003ae8 <PS2::controllerWrite(unsigned char, unsigned char)+0x68>
10003ad0:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003ad4:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10003ada:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003add:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003ae0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003ae3:	ee                   	out    dx,al
10003ae4:	b0 00                	mov    al,0x0
10003ae6:	eb 4f                	jmp    10003b37 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10003ae8:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003aec:	83 e0 02             	and    eax,0x2
10003aef:	85 c0                	test   eax,eax
10003af1:	74 2d                	je     10003b20 <PS2::controllerWrite(unsigned char, unsigned char)+0xa0>
10003af3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003af6:	8d 50 01             	lea    edx,[eax+0x1]
10003af9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003afc:	3d 20 03 00 00       	cmp    eax,0x320
10003b01:	0f 94 c0             	sete   al
10003b04:	84 c0                	test   al,al
10003b06:	74 a1                	je     10003aa9 <PS2::controllerWrite(unsigned char, unsigned char)+0x29>
10003b08:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003b0c:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003b12:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003b15:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10003b18:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003b1b:	ee                   	out    dx,al
10003b1c:	b0 00                	mov    al,0x0
10003b1e:	eb 17                	jmp    10003b37 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10003b20:	90                   	nop
10003b21:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003b25:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10003b2b:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10003b2e:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10003b31:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10003b34:	ee                   	out    dx,al
10003b35:	b0 01                	mov    al,0x1
10003b37:	c9                   	leave  
10003b38:	c3                   	ret    
10003b39:	90                   	nop

10003b3a <PS2::controllerRead()>:
10003b3a:	55                   	push   ebp
10003b3b:	89 e5                	mov    ebp,esp
10003b3d:	83 ec 20             	sub    esp,0x20
10003b40:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003b47:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003b4d:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003b50:	89 c2                	mov    edx,eax
10003b52:	ec                   	in     al,dx
10003b53:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003b56:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003b59:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003b5c:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003b60:	83 e0 40             	and    eax,0x40
10003b63:	85 c0                	test   eax,eax
10003b65:	75 07                	jne    10003b6e <PS2::controllerRead()+0x34>
10003b67:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003b6a:	84 c0                	test   al,al
10003b6c:	79 04                	jns    10003b72 <PS2::controllerRead()+0x38>
10003b6e:	b0 00                	mov    al,0x0
10003b70:	eb 48                	jmp    10003bba <PS2::controllerRead()+0x80>
10003b72:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003b76:	83 e0 01             	and    eax,0x1
10003b79:	85 c0                	test   eax,eax
10003b7b:	75 29                	jne    10003ba6 <PS2::controllerRead()+0x6c>
10003b7d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003b80:	8d 50 01             	lea    edx,[eax+0x1]
10003b83:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003b86:	3d 40 06 00 00       	cmp    eax,0x640
10003b8b:	0f 94 c0             	sete   al
10003b8e:	84 c0                	test   al,al
10003b90:	74 b5                	je     10003b47 <PS2::controllerRead()+0xd>
10003b92:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10003b98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003b9b:	89 c2                	mov    edx,eax
10003b9d:	ec                   	in     al,dx
10003b9e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003ba1:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003ba4:	eb 14                	jmp    10003bba <PS2::controllerRead()+0x80>
10003ba6:	90                   	nop
10003ba7:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003bad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003bb0:	89 c2                	mov    edx,eax
10003bb2:	ec                   	in     al,dx
10003bb3:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003bb6:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10003bb9:	90                   	nop
10003bba:	c9                   	leave  
10003bbb:	c3                   	ret    

10003bbc <PS2Keyboard::PS2Keyboard()>:
10003bbc:	55                   	push   ebp
10003bbd:	89 e5                	mov    ebp,esp
10003bbf:	83 ec 08             	sub    esp,0x8
10003bc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003bc5:	83 ec 08             	sub    esp,0x8
10003bc8:	68 00 00 00 00       	push   0x0	10003bc9: R_386_32	ps2keyname
10003bcd:	50                   	push   eax
10003bce:	e8 fc ff ff ff       	call   10003bcf <PS2Keyboard::PS2Keyboard()+0x13>	10003bcf: R_386_PC32	Keyboard::Keyboard(char const*)
10003bd3:	83 c4 10             	add    esp,0x10
10003bd6:	ba 08 00 00 00       	mov    edx,0x8	10003bd7: R_386_32	vtable for PS2Keyboard
10003bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003bde:	89 10                	mov    DWORD PTR [eax],edx
10003be0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003be3:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10003bea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003bed:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10003bf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003bf7:	c6 80 66 01 00 00 00 	mov    BYTE PTR [eax+0x166],0x0
10003bfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003c01:	c6 80 67 01 00 00 00 	mov    BYTE PTR [eax+0x167],0x0
10003c08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003c0b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10003c12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003c15:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
10003c1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003c1f:	c6 80 6a 01 00 00 00 	mov    BYTE PTR [eax+0x16a],0x0
10003c26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003c29:	c6 80 6b 01 00 00 00 	mov    BYTE PTR [eax+0x16b],0x0
10003c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003c33:	c6 80 6c 01 00 00 00 	mov    BYTE PTR [eax+0x16c],0x0
10003c3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003c3d:	c6 80 6d 01 00 00 00 	mov    BYTE PTR [eax+0x16d],0x0
10003c44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003c47:	c6 80 6e 01 00 00 00 	mov    BYTE PTR [eax+0x16e],0x0
10003c4e:	90                   	nop
10003c4f:	c9                   	leave  
10003c50:	c3                   	ret    
10003c51:	90                   	nop

10003c52 <PS2Keyboard::~PS2Keyboard()>:
10003c52:	55                   	push   ebp
10003c53:	89 e5                	mov    ebp,esp
10003c55:	83 ec 08             	sub    esp,0x8
10003c58:	ba 08 00 00 00       	mov    edx,0x8	10003c59: R_386_32	vtable for PS2Keyboard
10003c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003c60:	89 10                	mov    DWORD PTR [eax],edx
10003c62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003c65:	83 ec 0c             	sub    esp,0xc
10003c68:	50                   	push   eax
10003c69:	e8 fc ff ff ff       	call   10003c6a <PS2Keyboard::~PS2Keyboard()+0x18>	10003c6a: R_386_PC32	Keyboard::~Keyboard()
10003c6e:	83 c4 10             	add    esp,0x10
10003c71:	90                   	nop
10003c72:	c9                   	leave  
10003c73:	c3                   	ret    

10003c74 <PS2Keyboard::~PS2Keyboard()>:
10003c74:	55                   	push   ebp
10003c75:	89 e5                	mov    ebp,esp
10003c77:	83 ec 08             	sub    esp,0x8
10003c7a:	83 ec 0c             	sub    esp,0xc
10003c7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003c80:	e8 fc ff ff ff       	call   10003c81 <PS2Keyboard::~PS2Keyboard()+0xd>	10003c81: R_386_PC32	PS2Keyboard::~PS2Keyboard()
10003c85:	83 c4 10             	add    esp,0x10
10003c88:	83 ec 08             	sub    esp,0x8
10003c8b:	68 70 01 00 00       	push   0x170
10003c90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003c93:	e8 fc ff ff ff       	call   10003c94 <PS2Keyboard::~PS2Keyboard()+0x20>	10003c94: R_386_PC32	operator delete(void*, unsigned long)
10003c98:	83 c4 10             	add    esp,0x10
10003c9b:	c9                   	leave  
10003c9c:	c3                   	ret    
10003c9d:	90                   	nop

10003c9e <PS2Keyboard::setRepeatRate(int)>:
10003c9e:	c3                   	ret    
10003c9f:	90                   	nop

10003ca0 <PS2Keyboard::setRepeatDelay(int)>:
10003ca0:	c3                   	ret    
10003ca1:	90                   	nop

10003ca2 <PS2Keyboard::sendKey(unsigned short, bool)>:
10003ca2:	83 ec 1c             	sub    esp,0x1c
10003ca5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003ca9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10003cad:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10003cb1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003cb5:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10003cba:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10003cc1:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10003cc7:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10003ccc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10003cd0:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10003cd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003cd8:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10003cdd:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10003ce2:	83 c4 1c             	add    esp,0x1c
10003ce5:	e9 fc ff ff ff       	jmp    10003ce6 <PS2Keyboard::sendKey(unsigned short, bool)+0x44>	10003ce6: R_386_PC32	sendKeyboardToken(KeyboardToken)

10003cea <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)>:
10003cea:	83 ec 1c             	sub    esp,0x1c
10003ced:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003cf1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10003cf5:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10003cf9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003cfd:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10003d02:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10003d09:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10003d0f:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10003d14:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10003d18:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10003d1c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003d20:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10003d25:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10003d2a:	83 c4 1c             	add    esp,0x1c
10003d2d:	e9 fc ff ff ff       	jmp    10003d2e <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)+0x44>	10003d2e: R_386_PC32	sendKeyboardToken(KeyboardToken)

10003d32 <PS2Keyboard::updateKeyboardLEDs()>:
10003d32:	56                   	push   esi
10003d33:	53                   	push   ebx
10003d34:	83 ec 0c             	sub    esp,0xc
10003d37:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10003d3b:	8a 96 69 01 00 00    	mov    dl,BYTE PTR [esi+0x169]
10003d41:	0f b6 9e 6a 01 00 00 	movzx  ebx,BYTE PTR [esi+0x16a]
10003d48:	8d 04 1b             	lea    eax,[ebx+ebx*1]
10003d4b:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10003d52:	09 c3                	or     ebx,eax
10003d54:	0a 9e 6b 01 00 00    	or     bl,BYTE PTR [esi+0x16b]
10003d5a:	68 ed 00 00 00       	push   0xed
10003d5f:	0f b6 db             	movzx  ebx,bl
10003d62:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003d68:	e8 fc ff ff ff       	call   10003d69 <PS2Keyboard::updateKeyboardLEDs()+0x37>	10003d69: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10003d6d:	58                   	pop    eax
10003d6e:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003d74:	e8 fc ff ff ff       	call   10003d75 <PS2Keyboard::updateKeyboardLEDs()+0x43>	10003d75: R_386_PC32	PS2Port::deviceRead()
10003d79:	5a                   	pop    edx
10003d7a:	59                   	pop    ecx
10003d7b:	53                   	push   ebx
10003d7c:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003d82:	e8 fc ff ff ff       	call   10003d83 <PS2Keyboard::updateKeyboardLEDs()+0x51>	10003d83: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10003d87:	8b 86 60 01 00 00    	mov    eax,DWORD PTR [esi+0x160]
10003d8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003d91:	83 c4 14             	add    esp,0x14
10003d94:	5b                   	pop    ebx
10003d95:	5e                   	pop    esi
10003d96:	e9 fc ff ff ff       	jmp    10003d97 <PS2Keyboard::updateKeyboardLEDs()+0x65>	10003d97: R_386_PC32	PS2Port::deviceRead()

10003d9b <ps2KeyboardHandler(regs*, void*)>:
10003d9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003d9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003da3:	eb 01                	jmp    10003da6 <PS2Keyboard::handler()>
10003da5:	90                   	nop

10003da6 <PS2Keyboard::handler()>:
10003da6:	57                   	push   edi
10003da7:	56                   	push   esi
10003da8:	53                   	push   ebx
10003da9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10003dad:	e4 60                	in     al,0x60
10003daf:	80 be 6e 01 00 00 00 	cmp    BYTE PTR [esi+0x16e],0x0
10003db6:	74 29                	je     10003de1 <PS2Keyboard::handler()+0x3b>
10003db8:	88 c2                	mov    dl,al
10003dba:	3c e0                	cmp    al,0xe0
10003dbc:	75 0c                	jne    10003dca <PS2Keyboard::handler()+0x24>
10003dbe:	c6 86 64 01 00 00 01 	mov    BYTE PTR [esi+0x164],0x1
10003dc5:	e9 17 07 00 00       	jmp    100044e1 <PS2Keyboard::handler()+0x73b>
10003dca:	84 c0                	test   al,al
10003dcc:	0f 89 52 01 00 00    	jns    10003f24 <PS2Keyboard::handler()+0x17e>
10003dd2:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10003dd9:	83 e2 7f             	and    edx,0x7f
10003ddc:	e9 43 01 00 00       	jmp    10003f24 <PS2Keyboard::handler()+0x17e>
10003de1:	3c e0                	cmp    al,0xe0
10003de3:	74 d9                	je     10003dbe <PS2Keyboard::handler()+0x18>
10003de5:	3c f0                	cmp    al,0xf0
10003de7:	75 0c                	jne    10003df5 <PS2Keyboard::handler()+0x4f>
10003de9:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10003df0:	e9 ec 06 00 00       	jmp    100044e1 <PS2Keyboard::handler()+0x73b>
10003df5:	3c 12                	cmp    al,0x12
10003df7:	75 1f                	jne    10003e18 <PS2Keyboard::handler()+0x72>
10003df9:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003dff:	83 f0 01             	xor    eax,0x1
10003e02:	88 86 67 01 00 00    	mov    BYTE PTR [esi+0x167],al
10003e08:	52                   	push   edx
10003e09:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003e10:	50                   	push   eax
10003e11:	68 04 01 00 00       	push   0x104
10003e16:	eb 23                	jmp    10003e3b <PS2Keyboard::handler()+0x95>
10003e18:	76 3d                	jbe    10003e57 <PS2Keyboard::handler()+0xb1>
10003e1a:	3c 14                	cmp    al,0x14
10003e1c:	75 62                	jne    10003e80 <PS2Keyboard::handler()+0xda>
10003e1e:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003e24:	83 f0 01             	xor    eax,0x1
10003e27:	88 86 68 01 00 00    	mov    BYTE PTR [esi+0x168],al
10003e2d:	51                   	push   ecx
10003e2e:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003e35:	50                   	push   eax
10003e36:	68 00 01 00 00       	push   0x100
10003e3b:	56                   	push   esi
10003e3c:	e8 fc ff ff ff       	call   10003e3d <PS2Keyboard::handler()+0x97>	10003e3d: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
10003e41:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10003e48:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10003e4f:	83 c4 10             	add    esp,0x10
10003e52:	e9 8a 06 00 00       	jmp    100044e1 <PS2Keyboard::handler()+0x73b>
10003e57:	3c 11                	cmp    al,0x11
10003e59:	75 2d                	jne    10003e88 <PS2Keyboard::handler()+0xe2>
10003e5b:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003e61:	83 f0 01             	xor    eax,0x1
10003e64:	88 86 6d 01 00 00    	mov    BYTE PTR [esi+0x16d],al
10003e6a:	88 86 6c 01 00 00    	mov    BYTE PTR [esi+0x16c],al
10003e70:	50                   	push   eax
10003e71:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003e78:	50                   	push   eax
10003e79:	68 01 01 00 00       	push   0x101
10003e7e:	eb bb                	jmp    10003e3b <PS2Keyboard::handler()+0x95>
10003e80:	3c 59                	cmp    al,0x59
10003e82:	0f 84 71 ff ff ff    	je     10003df9 <PS2Keyboard::handler()+0x53>
10003e88:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
10003e8f:	0f 84 b1 01 00 00    	je     10004046 <PS2Keyboard::handler()+0x2a0>
10003e95:	3c 6b                	cmp    al,0x6b
10003e97:	0f 84 f2 00 00 00    	je     10003f8f <PS2Keyboard::handler()+0x1e9>
10003e9d:	77 50                	ja     10003eef <PS2Keyboard::handler()+0x149>
10003e9f:	3c 51                	cmp    al,0x51
10003ea1:	0f 84 37 01 00 00    	je     10003fde <PS2Keyboard::handler()+0x238>
10003ea7:	77 23                	ja     10003ecc <PS2Keyboard::handler()+0x126>
10003ea9:	3c 49                	cmp    al,0x49
10003eab:	0f 84 0d 01 00 00    	je     10003fbe <PS2Keyboard::handler()+0x218>
10003eb1:	3c 4a                	cmp    al,0x4a
10003eb3:	0f 85 29 04 00 00    	jne    100042e2 <PS2Keyboard::handler()+0x53c>
10003eb9:	50                   	push   eax
10003eba:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003ec1:	50                   	push   eax
10003ec2:	68 1f 03 00 00       	push   0x31f
10003ec7:	e9 c6 03 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10003ecc:	3c 5a                	cmp    al,0x5a
10003ece:	0f 84 5f 01 00 00    	je     10004033 <PS2Keyboard::handler()+0x28d>
10003ed4:	3c 69                	cmp    al,0x69
10003ed6:	0f 85 06 04 00 00    	jne    100042e2 <PS2Keyboard::handler()+0x53c>
10003edc:	51                   	push   ecx
10003edd:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003ee4:	50                   	push   eax
10003ee5:	68 01 02 00 00       	push   0x201
10003eea:	e9 a3 03 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10003eef:	3c 71                	cmp    al,0x71
10003ef1:	0f 84 16 01 00 00    	je     1000400d <PS2Keyboard::handler()+0x267>
10003ef7:	77 15                	ja     10003f0e <PS2Keyboard::handler()+0x168>
10003ef9:	3c 6c                	cmp    al,0x6c
10003efb:	0f 84 f0 00 00 00    	je     10003ff1 <PS2Keyboard::handler()+0x24b>
10003f01:	3c 70                	cmp    al,0x70
10003f03:	0f 84 17 01 00 00    	je     10004020 <PS2Keyboard::handler()+0x27a>
10003f09:	e9 d4 03 00 00       	jmp    100042e2 <PS2Keyboard::handler()+0x53c>
10003f0e:	3c 74                	cmp    al,0x74
10003f10:	0f 84 8c 00 00 00    	je     10003fa2 <PS2Keyboard::handler()+0x1fc>
10003f16:	3c 75                	cmp    al,0x75
10003f18:	74 4a                	je     10003f64 <PS2Keyboard::handler()+0x1be>
10003f1a:	3c 72                	cmp    al,0x72
10003f1c:	0f 85 c0 03 00 00    	jne    100042e2 <PS2Keyboard::handler()+0x53c>
10003f22:	eb 58                	jmp    10003f7c <PS2Keyboard::handler()+0x1d6>
10003f24:	80 fa 2a             	cmp    dl,0x2a
10003f27:	0f 84 cc fe ff ff    	je     10003df9 <PS2Keyboard::handler()+0x53>
10003f2d:	0f 87 97 05 00 00    	ja     100044ca <PS2Keyboard::handler()+0x724>
10003f33:	80 fa 1d             	cmp    dl,0x1d
10003f36:	0f 84 e2 fe ff ff    	je     10003e1e <PS2Keyboard::handler()+0x78>
10003f3c:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
10003f43:	0f 84 ce 03 00 00    	je     10004317 <PS2Keyboard::handler()+0x571>
10003f49:	80 fa 4b             	cmp    dl,0x4b
10003f4c:	74 41                	je     10003f8f <PS2Keyboard::handler()+0x1e9>
10003f4e:	77 27                	ja     10003f77 <PS2Keyboard::handler()+0x1d1>
10003f50:	80 fa 47             	cmp    dl,0x47
10003f53:	0f 84 98 00 00 00    	je     10003ff1 <PS2Keyboard::handler()+0x24b>
10003f59:	0f 86 96 03 00 00    	jbe    100042f5 <PS2Keyboard::handler()+0x54f>
10003f5f:	80 fa 48             	cmp    dl,0x48
10003f62:	75 51                	jne    10003fb5 <PS2Keyboard::handler()+0x20f>
10003f64:	50                   	push   eax
10003f65:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f6c:	50                   	push   eax
10003f6d:	68 0b 02 00 00       	push   0x20b
10003f72:	e9 1b 03 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10003f77:	80 fa 50             	cmp    dl,0x50
10003f7a:	75 55                	jne    10003fd1 <PS2Keyboard::handler()+0x22b>
10003f7c:	50                   	push   eax
10003f7d:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f84:	50                   	push   eax
10003f85:	68 0c 02 00 00       	push   0x20c
10003f8a:	e9 03 03 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10003f8f:	50                   	push   eax
10003f90:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f97:	50                   	push   eax
10003f98:	68 0d 02 00 00       	push   0x20d
10003f9d:	e9 f0 02 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10003fa2:	50                   	push   eax
10003fa3:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003faa:	50                   	push   eax
10003fab:	68 0e 02 00 00       	push   0x20e
10003fb0:	e9 dd 02 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10003fb5:	80 fa 49             	cmp    dl,0x49
10003fb8:	0f 85 24 03 00 00    	jne    100042e2 <PS2Keyboard::handler()+0x53c>
10003fbe:	50                   	push   eax
10003fbf:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003fc6:	50                   	push   eax
10003fc7:	68 04 02 00 00       	push   0x204
10003fcc:	e9 c1 02 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10003fd1:	0f 86 2f 03 00 00    	jbe    10004306 <PS2Keyboard::handler()+0x560>
10003fd7:	80 fa 52             	cmp    dl,0x52
10003fda:	74 44                	je     10004020 <PS2Keyboard::handler()+0x27a>
10003fdc:	73 26                	jae    10004004 <PS2Keyboard::handler()+0x25e>
10003fde:	57                   	push   edi
10003fdf:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003fe6:	50                   	push   eax
10003fe7:	68 05 02 00 00       	push   0x205
10003fec:	e9 a1 02 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10003ff1:	53                   	push   ebx
10003ff2:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003ff9:	50                   	push   eax
10003ffa:	68 00 02 00 00       	push   0x200
10003fff:	e9 8e 02 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004004:	80 fa 53             	cmp    dl,0x53
10004007:	0f 85 d5 02 00 00    	jne    100042e2 <PS2Keyboard::handler()+0x53c>
1000400d:	52                   	push   edx
1000400e:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004015:	50                   	push   eax
10004016:	68 03 02 00 00       	push   0x203
1000401b:	e9 72 02 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004020:	50                   	push   eax
10004021:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004028:	50                   	push   eax
10004029:	68 02 02 00 00       	push   0x202
1000402e:	e9 5f 02 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004033:	50                   	push   eax
10004034:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000403b:	50                   	push   eax
1000403c:	68 1d 03 00 00       	push   0x31d
10004041:	e9 4c 02 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004046:	0f b6 96 66 01 00 00 	movzx  edx,BYTE PTR [esi+0x166]
1000404d:	3c 66                	cmp    al,0x66
1000404f:	75 09                	jne    1000405a <PS2Keyboard::handler()+0x2b4>
10004051:	50                   	push   eax
10004052:	52                   	push   edx
10004053:	6a 08                	push   0x8
10004055:	e9 38 02 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
1000405a:	3c 0d                	cmp    al,0xd
1000405c:	75 09                	jne    10004067 <PS2Keyboard::handler()+0x2c1>
1000405e:	50                   	push   eax
1000405f:	52                   	push   edx
10004060:	6a 09                	push   0x9
10004062:	e9 2b 02 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004067:	3c 58                	cmp    al,0x58
10004069:	75 2a                	jne    10004095 <PS2Keyboard::handler()+0x2ef>
1000406b:	84 d2                	test   dl,dl
1000406d:	75 13                	jne    10004082 <PS2Keyboard::handler()+0x2dc>
1000406f:	83 ec 0c             	sub    esp,0xc
10004072:	80 b6 69 01 00 00 01 	xor    BYTE PTR [esi+0x169],0x1
10004079:	56                   	push   esi
1000407a:	e8 fc ff ff ff       	call   1000407b <PS2Keyboard::handler()+0x2d5>	1000407b: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
1000407f:	83 c4 10             	add    esp,0x10
10004082:	50                   	push   eax
10004083:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000408a:	50                   	push   eax
1000408b:	68 80 02 00 00       	push   0x280
10004090:	e9 fd 01 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004095:	3c 77                	cmp    al,0x77
10004097:	75 2a                	jne    100040c3 <PS2Keyboard::handler()+0x31d>
10004099:	84 d2                	test   dl,dl
1000409b:	75 13                	jne    100040b0 <PS2Keyboard::handler()+0x30a>
1000409d:	83 ec 0c             	sub    esp,0xc
100040a0:	80 b6 6a 01 00 00 01 	xor    BYTE PTR [esi+0x16a],0x1
100040a7:	56                   	push   esi
100040a8:	e8 fc ff ff ff       	call   100040a9 <PS2Keyboard::handler()+0x303>	100040a9: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
100040ad:	83 c4 10             	add    esp,0x10
100040b0:	50                   	push   eax
100040b1:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100040b8:	50                   	push   eax
100040b9:	68 81 02 00 00       	push   0x281
100040be:	e9 cf 01 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
100040c3:	3c 7e                	cmp    al,0x7e
100040c5:	75 2a                	jne    100040f1 <PS2Keyboard::handler()+0x34b>
100040c7:	84 d2                	test   dl,dl
100040c9:	75 13                	jne    100040de <PS2Keyboard::handler()+0x338>
100040cb:	83 ec 0c             	sub    esp,0xc
100040ce:	80 b6 6b 01 00 00 01 	xor    BYTE PTR [esi+0x16b],0x1
100040d5:	56                   	push   esi
100040d6:	e8 fc ff ff ff       	call   100040d7 <PS2Keyboard::handler()+0x331>	100040d7: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
100040db:	83 c4 10             	add    esp,0x10
100040de:	57                   	push   edi
100040df:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100040e6:	50                   	push   eax
100040e7:	68 82 02 00 00       	push   0x282
100040ec:	e9 a1 01 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
100040f1:	3c 05                	cmp    al,0x5
100040f3:	75 0c                	jne    10004101 <PS2Keyboard::handler()+0x35b>
100040f5:	53                   	push   ebx
100040f6:	52                   	push   edx
100040f7:	68 00 03 00 00       	push   0x300
100040fc:	e9 91 01 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004101:	3c 06                	cmp    al,0x6
10004103:	75 0c                	jne    10004111 <PS2Keyboard::handler()+0x36b>
10004105:	51                   	push   ecx
10004106:	52                   	push   edx
10004107:	68 01 03 00 00       	push   0x301
1000410c:	e9 81 01 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004111:	3c 04                	cmp    al,0x4
10004113:	75 0c                	jne    10004121 <PS2Keyboard::handler()+0x37b>
10004115:	50                   	push   eax
10004116:	52                   	push   edx
10004117:	68 02 03 00 00       	push   0x302
1000411c:	e9 71 01 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004121:	3c 0c                	cmp    al,0xc
10004123:	75 0c                	jne    10004131 <PS2Keyboard::handler()+0x38b>
10004125:	50                   	push   eax
10004126:	52                   	push   edx
10004127:	68 03 03 00 00       	push   0x303
1000412c:	e9 61 01 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004131:	3c 03                	cmp    al,0x3
10004133:	75 0c                	jne    10004141 <PS2Keyboard::handler()+0x39b>
10004135:	50                   	push   eax
10004136:	52                   	push   edx
10004137:	68 04 03 00 00       	push   0x304
1000413c:	e9 51 01 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004141:	3c 0b                	cmp    al,0xb
10004143:	75 0c                	jne    10004151 <PS2Keyboard::handler()+0x3ab>
10004145:	50                   	push   eax
10004146:	52                   	push   edx
10004147:	68 05 03 00 00       	push   0x305
1000414c:	e9 41 01 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004151:	3c 02                	cmp    al,0x2
10004153:	74 04                	je     10004159 <PS2Keyboard::handler()+0x3b3>
10004155:	3c 83                	cmp    al,0x83
10004157:	75 0c                	jne    10004165 <PS2Keyboard::handler()+0x3bf>
10004159:	50                   	push   eax
1000415a:	52                   	push   edx
1000415b:	68 06 03 00 00       	push   0x306
10004160:	e9 2d 01 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004165:	3c 0a                	cmp    al,0xa
10004167:	75 0c                	jne    10004175 <PS2Keyboard::handler()+0x3cf>
10004169:	50                   	push   eax
1000416a:	52                   	push   edx
1000416b:	68 07 03 00 00       	push   0x307
10004170:	e9 1d 01 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004175:	3c 01                	cmp    al,0x1
10004177:	75 0c                	jne    10004185 <PS2Keyboard::handler()+0x3df>
10004179:	57                   	push   edi
1000417a:	52                   	push   edx
1000417b:	68 08 03 00 00       	push   0x308
10004180:	e9 0d 01 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004185:	3c 09                	cmp    al,0x9
10004187:	75 0c                	jne    10004195 <PS2Keyboard::handler()+0x3ef>
10004189:	53                   	push   ebx
1000418a:	52                   	push   edx
1000418b:	68 09 03 00 00       	push   0x309
10004190:	e9 fd 00 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004195:	3c 78                	cmp    al,0x78
10004197:	75 0c                	jne    100041a5 <PS2Keyboard::handler()+0x3ff>
10004199:	51                   	push   ecx
1000419a:	52                   	push   edx
1000419b:	68 0a 03 00 00       	push   0x30a
100041a0:	e9 ed 00 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
100041a5:	3c 07                	cmp    al,0x7
100041a7:	75 0c                	jne    100041b5 <PS2Keyboard::handler()+0x40f>
100041a9:	50                   	push   eax
100041aa:	52                   	push   edx
100041ab:	68 0b 03 00 00       	push   0x30b
100041b0:	e9 dd 00 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
100041b5:	3c 5a                	cmp    al,0x5a
100041b7:	75 09                	jne    100041c2 <PS2Keyboard::handler()+0x41c>
100041b9:	50                   	push   eax
100041ba:	52                   	push   edx
100041bb:	6a 0a                	push   0xa
100041bd:	e9 d0 00 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
100041c2:	3c 76                	cmp    al,0x76
100041c4:	75 0c                	jne    100041d2 <PS2Keyboard::handler()+0x42c>
100041c6:	50                   	push   eax
100041c7:	52                   	push   edx
100041c8:	68 0a 02 00 00       	push   0x20a
100041cd:	e9 c0 00 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
100041d2:	3c 70                	cmp    al,0x70
100041d4:	75 0c                	jne    100041e2 <PS2Keyboard::handler()+0x43c>
100041d6:	50                   	push   eax
100041d7:	52                   	push   edx
100041d8:	68 10 03 00 00       	push   0x310
100041dd:	e9 b0 00 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
100041e2:	3c 69                	cmp    al,0x69
100041e4:	75 0c                	jne    100041f2 <PS2Keyboard::handler()+0x44c>
100041e6:	50                   	push   eax
100041e7:	52                   	push   edx
100041e8:	68 11 03 00 00       	push   0x311
100041ed:	e9 a0 00 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
100041f2:	3c 72                	cmp    al,0x72
100041f4:	75 0c                	jne    10004202 <PS2Keyboard::handler()+0x45c>
100041f6:	50                   	push   eax
100041f7:	52                   	push   edx
100041f8:	68 12 03 00 00       	push   0x312
100041fd:	e9 90 00 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004202:	3c 7a                	cmp    al,0x7a
10004204:	75 0c                	jne    10004212 <PS2Keyboard::handler()+0x46c>
10004206:	57                   	push   edi
10004207:	52                   	push   edx
10004208:	68 13 03 00 00       	push   0x313
1000420d:	e9 80 00 00 00       	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004212:	3c 6b                	cmp    al,0x6b
10004214:	75 09                	jne    1000421f <PS2Keyboard::handler()+0x479>
10004216:	53                   	push   ebx
10004217:	52                   	push   edx
10004218:	68 14 03 00 00       	push   0x314
1000421d:	eb 73                	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
1000421f:	3c 73                	cmp    al,0x73
10004221:	75 09                	jne    1000422c <PS2Keyboard::handler()+0x486>
10004223:	51                   	push   ecx
10004224:	52                   	push   edx
10004225:	68 15 03 00 00       	push   0x315
1000422a:	eb 66                	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
1000422c:	3c 74                	cmp    al,0x74
1000422e:	75 09                	jne    10004239 <PS2Keyboard::handler()+0x493>
10004230:	50                   	push   eax
10004231:	52                   	push   edx
10004232:	68 16 03 00 00       	push   0x316
10004237:	eb 59                	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004239:	3c 6c                	cmp    al,0x6c
1000423b:	75 09                	jne    10004246 <PS2Keyboard::handler()+0x4a0>
1000423d:	50                   	push   eax
1000423e:	52                   	push   edx
1000423f:	68 17 03 00 00       	push   0x317
10004244:	eb 4c                	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004246:	3c 75                	cmp    al,0x75
10004248:	75 09                	jne    10004253 <PS2Keyboard::handler()+0x4ad>
1000424a:	50                   	push   eax
1000424b:	52                   	push   edx
1000424c:	68 18 03 00 00       	push   0x318
10004251:	eb 3f                	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004253:	3c 7d                	cmp    al,0x7d
10004255:	75 09                	jne    10004260 <PS2Keyboard::handler()+0x4ba>
10004257:	50                   	push   eax
10004258:	52                   	push   edx
10004259:	68 19 03 00 00       	push   0x319
1000425e:	eb 32                	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004260:	3c 71                	cmp    al,0x71
10004262:	75 09                	jne    1000426d <PS2Keyboard::handler()+0x4c7>
10004264:	50                   	push   eax
10004265:	52                   	push   edx
10004266:	68 1a 03 00 00       	push   0x31a
1000426b:	eb 25                	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
1000426d:	3c 7b                	cmp    al,0x7b
1000426f:	75 09                	jne    1000427a <PS2Keyboard::handler()+0x4d4>
10004271:	50                   	push   eax
10004272:	52                   	push   edx
10004273:	68 1c 03 00 00       	push   0x31c
10004278:	eb 18                	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
1000427a:	3c 79                	cmp    al,0x79
1000427c:	75 09                	jne    10004287 <PS2Keyboard::handler()+0x4e1>
1000427e:	57                   	push   edi
1000427f:	52                   	push   edx
10004280:	68 1b 03 00 00       	push   0x31b
10004285:	eb 0b                	jmp    10004292 <PS2Keyboard::handler()+0x4ec>
10004287:	3c 7c                	cmp    al,0x7c
10004289:	75 0f                	jne    1000429a <PS2Keyboard::handler()+0x4f4>
1000428b:	53                   	push   ebx
1000428c:	52                   	push   edx
1000428d:	68 1e 03 00 00       	push   0x31e
10004292:	56                   	push   esi
10004293:	e8 fc ff ff ff       	call   10004294 <PS2Keyboard::handler()+0x4ee>	10004294: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
10004298:	eb 45                	jmp    100042df <PS2Keyboard::handler()+0x539>
1000429a:	0f b6 c0             	movzx  eax,al
1000429d:	8a 8e 69 01 00 00    	mov    cl,BYTE PTR [esi+0x169]
100042a3:	80 be 67 01 00 00 00 	cmp    BYTE PTR [esi+0x167],0x0
100042aa:	74 16                	je     100042c2 <PS2Keyboard::handler()+0x51c>
100042ac:	84 c9                	test   cl,cl
100042ae:	74 09                	je     100042b9 <PS2Keyboard::handler()+0x513>
100042b0:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100042b3: R_386_32	PS2Keyboard::internalMapCapUpper
100042b7:	eb 1d                	jmp    100042d6 <PS2Keyboard::handler()+0x530>
100042b9:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100042bc: R_386_32	PS2Keyboard::internalMapperUpper
100042c0:	eb 14                	jmp    100042d6 <PS2Keyboard::handler()+0x530>
100042c2:	84 c9                	test   cl,cl
100042c4:	74 09                	je     100042cf <PS2Keyboard::handler()+0x529>
100042c6:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100042c9: R_386_32	PS2Keyboard::internalMapCapLower
100042cd:	eb 07                	jmp    100042d6 <PS2Keyboard::handler()+0x530>
100042cf:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	100042d2: R_386_32	PS2Keyboard::internalMapperLower
100042d6:	51                   	push   ecx
100042d7:	52                   	push   edx
100042d8:	50                   	push   eax
100042d9:	56                   	push   esi
100042da:	e8 fc ff ff ff       	call   100042db <PS2Keyboard::handler()+0x535>	100042db: R_386_PC32	PS2Keyboard::sendKey(unsigned short, bool)
100042df:	83 c4 10             	add    esp,0x10
100042e2:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
100042e9:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
100042f0:	e9 ec 01 00 00       	jmp    100044e1 <PS2Keyboard::handler()+0x73b>
100042f5:	80 fa 1c             	cmp    dl,0x1c
100042f8:	0f 84 35 fd ff ff    	je     10004033 <PS2Keyboard::handler()+0x28d>
100042fe:	80 fa 35             	cmp    dl,0x35
10004301:	e9 ad fb ff ff       	jmp    10003eb3 <PS2Keyboard::handler()+0x10d>
10004306:	80 fa 4d             	cmp    dl,0x4d
10004309:	0f 84 93 fc ff ff    	je     10003fa2 <PS2Keyboard::handler()+0x1fc>
1000430f:	80 fa 4f             	cmp    dl,0x4f
10004312:	e9 bf fb ff ff       	jmp    10003ed6 <PS2Keyboard::handler()+0x130>
10004317:	0f b6 8e 66 01 00 00 	movzx  ecx,BYTE PTR [esi+0x166]
1000431e:	80 fa 0e             	cmp    dl,0xe
10004321:	75 07                	jne    1000432a <PS2Keyboard::handler()+0x584>
10004323:	50                   	push   eax
10004324:	51                   	push   ecx
10004325:	e9 29 fd ff ff       	jmp    10004053 <PS2Keyboard::handler()+0x2ad>
1000432a:	80 fa 0f             	cmp    dl,0xf
1000432d:	75 07                	jne    10004336 <PS2Keyboard::handler()+0x590>
1000432f:	57                   	push   edi
10004330:	51                   	push   ecx
10004331:	e9 2a fd ff ff       	jmp    10004060 <PS2Keyboard::handler()+0x2ba>
10004336:	80 fa 3a             	cmp    dl,0x3a
10004339:	75 07                	jne    10004342 <PS2Keyboard::handler()+0x59c>
1000433b:	84 c9                	test   cl,cl
1000433d:	e9 2b fd ff ff       	jmp    1000406d <PS2Keyboard::handler()+0x2c7>
10004342:	80 fa 45             	cmp    dl,0x45
10004345:	75 07                	jne    1000434e <PS2Keyboard::handler()+0x5a8>
10004347:	84 c9                	test   cl,cl
10004349:	e9 4d fd ff ff       	jmp    1000409b <PS2Keyboard::handler()+0x2f5>
1000434e:	80 fa 46             	cmp    dl,0x46
10004351:	75 07                	jne    1000435a <PS2Keyboard::handler()+0x5b4>
10004353:	84 c9                	test   cl,cl
10004355:	e9 6f fd ff ff       	jmp    100040c9 <PS2Keyboard::handler()+0x323>
1000435a:	80 fa 3b             	cmp    dl,0x3b
1000435d:	75 07                	jne    10004366 <PS2Keyboard::handler()+0x5c0>
1000435f:	53                   	push   ebx
10004360:	51                   	push   ecx
10004361:	e9 91 fd ff ff       	jmp    100040f7 <PS2Keyboard::handler()+0x351>
10004366:	80 fa 3c             	cmp    dl,0x3c
10004369:	75 07                	jne    10004372 <PS2Keyboard::handler()+0x5cc>
1000436b:	52                   	push   edx
1000436c:	51                   	push   ecx
1000436d:	e9 95 fd ff ff       	jmp    10004107 <PS2Keyboard::handler()+0x361>
10004372:	80 fa 3d             	cmp    dl,0x3d
10004375:	75 07                	jne    1000437e <PS2Keyboard::handler()+0x5d8>
10004377:	50                   	push   eax
10004378:	51                   	push   ecx
10004379:	e9 99 fd ff ff       	jmp    10004117 <PS2Keyboard::handler()+0x371>
1000437e:	80 fa 3e             	cmp    dl,0x3e
10004381:	75 07                	jne    1000438a <PS2Keyboard::handler()+0x5e4>
10004383:	50                   	push   eax
10004384:	51                   	push   ecx
10004385:	e9 9d fd ff ff       	jmp    10004127 <PS2Keyboard::handler()+0x381>
1000438a:	80 fa 3f             	cmp    dl,0x3f
1000438d:	75 07                	jne    10004396 <PS2Keyboard::handler()+0x5f0>
1000438f:	50                   	push   eax
10004390:	51                   	push   ecx
10004391:	e9 a1 fd ff ff       	jmp    10004137 <PS2Keyboard::handler()+0x391>
10004396:	80 fa 40             	cmp    dl,0x40
10004399:	75 07                	jne    100043a2 <PS2Keyboard::handler()+0x5fc>
1000439b:	50                   	push   eax
1000439c:	51                   	push   ecx
1000439d:	e9 a5 fd ff ff       	jmp    10004147 <PS2Keyboard::handler()+0x3a1>
100043a2:	80 fa 41             	cmp    dl,0x41
100043a5:	75 07                	jne    100043ae <PS2Keyboard::handler()+0x608>
100043a7:	50                   	push   eax
100043a8:	51                   	push   ecx
100043a9:	e9 ad fd ff ff       	jmp    1000415b <PS2Keyboard::handler()+0x3b5>
100043ae:	80 fa 42             	cmp    dl,0x42
100043b1:	75 07                	jne    100043ba <PS2Keyboard::handler()+0x614>
100043b3:	50                   	push   eax
100043b4:	51                   	push   ecx
100043b5:	e9 b1 fd ff ff       	jmp    1000416b <PS2Keyboard::handler()+0x3c5>
100043ba:	80 fa 43             	cmp    dl,0x43
100043bd:	75 07                	jne    100043c6 <PS2Keyboard::handler()+0x620>
100043bf:	57                   	push   edi
100043c0:	51                   	push   ecx
100043c1:	e9 b5 fd ff ff       	jmp    1000417b <PS2Keyboard::handler()+0x3d5>
100043c6:	80 fa 44             	cmp    dl,0x44
100043c9:	75 07                	jne    100043d2 <PS2Keyboard::handler()+0x62c>
100043cb:	53                   	push   ebx
100043cc:	51                   	push   ecx
100043cd:	e9 b9 fd ff ff       	jmp    1000418b <PS2Keyboard::handler()+0x3e5>
100043d2:	84 d2                	test   dl,dl
100043d4:	75 07                	jne    100043dd <PS2Keyboard::handler()+0x637>
100043d6:	52                   	push   edx
100043d7:	51                   	push   ecx
100043d8:	e9 be fd ff ff       	jmp    1000419b <PS2Keyboard::handler()+0x3f5>
100043dd:	80 fa 1c             	cmp    dl,0x1c
100043e0:	75 07                	jne    100043e9 <PS2Keyboard::handler()+0x643>
100043e2:	50                   	push   eax
100043e3:	51                   	push   ecx
100043e4:	e9 d2 fd ff ff       	jmp    100041bb <PS2Keyboard::handler()+0x415>
100043e9:	80 fa 01             	cmp    dl,0x1
100043ec:	75 07                	jne    100043f5 <PS2Keyboard::handler()+0x64f>
100043ee:	50                   	push   eax
100043ef:	51                   	push   ecx
100043f0:	e9 d3 fd ff ff       	jmp    100041c8 <PS2Keyboard::handler()+0x422>
100043f5:	80 fa 52             	cmp    dl,0x52
100043f8:	75 07                	jne    10004401 <PS2Keyboard::handler()+0x65b>
100043fa:	50                   	push   eax
100043fb:	51                   	push   ecx
100043fc:	e9 d7 fd ff ff       	jmp    100041d8 <PS2Keyboard::handler()+0x432>
10004401:	80 fa 4f             	cmp    dl,0x4f
10004404:	75 07                	jne    1000440d <PS2Keyboard::handler()+0x667>
10004406:	50                   	push   eax
10004407:	51                   	push   ecx
10004408:	e9 db fd ff ff       	jmp    100041e8 <PS2Keyboard::handler()+0x442>
1000440d:	80 fa 50             	cmp    dl,0x50
10004410:	75 07                	jne    10004419 <PS2Keyboard::handler()+0x673>
10004412:	50                   	push   eax
10004413:	51                   	push   ecx
10004414:	e9 df fd ff ff       	jmp    100041f8 <PS2Keyboard::handler()+0x452>
10004419:	80 fa 51             	cmp    dl,0x51
1000441c:	75 07                	jne    10004425 <PS2Keyboard::handler()+0x67f>
1000441e:	50                   	push   eax
1000441f:	51                   	push   ecx
10004420:	e9 e3 fd ff ff       	jmp    10004208 <PS2Keyboard::handler()+0x462>
10004425:	80 fa 4b             	cmp    dl,0x4b
10004428:	75 07                	jne    10004431 <PS2Keyboard::handler()+0x68b>
1000442a:	57                   	push   edi
1000442b:	51                   	push   ecx
1000442c:	e9 e7 fd ff ff       	jmp    10004218 <PS2Keyboard::handler()+0x472>
10004431:	80 fa 4c             	cmp    dl,0x4c
10004434:	75 07                	jne    1000443d <PS2Keyboard::handler()+0x697>
10004436:	53                   	push   ebx
10004437:	51                   	push   ecx
10004438:	e9 e8 fd ff ff       	jmp    10004225 <PS2Keyboard::handler()+0x47f>
1000443d:	80 fa 4d             	cmp    dl,0x4d
10004440:	75 07                	jne    10004449 <PS2Keyboard::handler()+0x6a3>
10004442:	52                   	push   edx
10004443:	51                   	push   ecx
10004444:	e9 e9 fd ff ff       	jmp    10004232 <PS2Keyboard::handler()+0x48c>
10004449:	80 fa 47             	cmp    dl,0x47
1000444c:	75 07                	jne    10004455 <PS2Keyboard::handler()+0x6af>
1000444e:	50                   	push   eax
1000444f:	51                   	push   ecx
10004450:	e9 ea fd ff ff       	jmp    1000423f <PS2Keyboard::handler()+0x499>
10004455:	80 fa 48             	cmp    dl,0x48
10004458:	75 07                	jne    10004461 <PS2Keyboard::handler()+0x6bb>
1000445a:	50                   	push   eax
1000445b:	51                   	push   ecx
1000445c:	e9 eb fd ff ff       	jmp    1000424c <PS2Keyboard::handler()+0x4a6>
10004461:	80 fa 49             	cmp    dl,0x49
10004464:	75 07                	jne    1000446d <PS2Keyboard::handler()+0x6c7>
10004466:	50                   	push   eax
10004467:	51                   	push   ecx
10004468:	e9 ec fd ff ff       	jmp    10004259 <PS2Keyboard::handler()+0x4b3>
1000446d:	80 fa 53             	cmp    dl,0x53
10004470:	75 07                	jne    10004479 <PS2Keyboard::handler()+0x6d3>
10004472:	50                   	push   eax
10004473:	51                   	push   ecx
10004474:	e9 ed fd ff ff       	jmp    10004266 <PS2Keyboard::handler()+0x4c0>
10004479:	80 fa 4a             	cmp    dl,0x4a
1000447c:	75 07                	jne    10004485 <PS2Keyboard::handler()+0x6df>
1000447e:	50                   	push   eax
1000447f:	51                   	push   ecx
10004480:	e9 ee fd ff ff       	jmp    10004273 <PS2Keyboard::handler()+0x4cd>
10004485:	80 fa 4e             	cmp    dl,0x4e
10004488:	75 07                	jne    10004491 <PS2Keyboard::handler()+0x6eb>
1000448a:	50                   	push   eax
1000448b:	51                   	push   ecx
1000448c:	e9 ef fd ff ff       	jmp    10004280 <PS2Keyboard::handler()+0x4da>
10004491:	80 fa 37             	cmp    dl,0x37
10004494:	75 07                	jne    1000449d <PS2Keyboard::handler()+0x6f7>
10004496:	57                   	push   edi
10004497:	51                   	push   ecx
10004498:	e9 f0 fd ff ff       	jmp    1000428d <PS2Keyboard::handler()+0x4e7>
1000449d:	0f b6 be 67 01 00 00 	movzx  edi,BYTE PTR [esi+0x167]
100044a4:	0f b6 86 69 01 00 00 	movzx  eax,BYTE PTR [esi+0x169]
100044ab:	c1 e7 07             	shl    edi,0x7
100044ae:	c1 e0 08             	shl    eax,0x8
100044b1:	8d bc 07 00 00 00 00 	lea    edi,[edi+eax*1+0x0]	100044b4: R_386_32	PS2Keyboard::internalMapperLowerBad
100044b8:	88 d0                	mov    al,dl
100044ba:	89 fb                	mov    ebx,edi
100044bc:	d7                   	xlat   BYTE PTR ds:[ebx]
100044bd:	88 c2                	mov    dl,al
100044bf:	0f b6 d2             	movzx  edx,dl
100044c2:	53                   	push   ebx
100044c3:	51                   	push   ecx
100044c4:	52                   	push   edx
100044c5:	e9 0f fe ff ff       	jmp    100042d9 <PS2Keyboard::handler()+0x533>
100044ca:	80 fa 36             	cmp    dl,0x36
100044cd:	0f 84 26 f9 ff ff    	je     10003df9 <PS2Keyboard::handler()+0x53>
100044d3:	80 fa 38             	cmp    dl,0x38
100044d6:	0f 84 7f f9 ff ff    	je     10003e5b <PS2Keyboard::handler()+0xb5>
100044dc:	e9 5b fa ff ff       	jmp    10003f3c <PS2Keyboard::handler()+0x196>
100044e1:	5b                   	pop    ebx
100044e2:	5e                   	pop    esi
100044e3:	5f                   	pop    edi
100044e4:	c3                   	ret    
100044e5:	90                   	nop

100044e6 <PS2Keyboard::open(int, int, void*)>:
100044e6:	53                   	push   ebx
100044e7:	83 ec 14             	sub    esp,0x14
100044ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100044ee:	8b 83 c8 00 00 00    	mov    eax,DWORD PTR [ebx+0xc8]
100044f4:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
100044fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
100044fe:	89 83 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],eax
10004504:	53                   	push   ebx
10004505:	6a 01                	push   0x1
10004507:	68 00 00 00 00       	push   0x0	10004508: R_386_32	ps2KeyboardHandler(regs*, void*)
1000450c:	6a 01                	push   0x1
1000450e:	53                   	push   ebx
1000450f:	e8 fc ff ff ff       	call   10004510 <PS2Keyboard::open(int, int, void*)+0x2a>	10004510: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10004514:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
1000451a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000451b: R_386_32	sysBootSettings
1000451f:	c1 e8 02             	shr    eax,0x2
10004522:	83 f0 01             	xor    eax,0x1
10004525:	83 e0 01             	and    eax,0x1
10004528:	88 83 6e 01 00 00    	mov    BYTE PTR [ebx+0x16e],al
1000452e:	31 c0                	xor    eax,eax
10004530:	83 c4 28             	add    esp,0x28
10004533:	5b                   	pop    ebx
10004534:	c3                   	ret    
10004535:	90                   	nop

10004536 <PS2Keyboard::close(int, int, void*)>:
10004536:	83 c8 ff             	or     eax,0xffffffff
10004539:	c3                   	ret    

1000453a <PS2Mouse::PS2Mouse()>:
1000453a:	55                   	push   ebp
1000453b:	89 e5                	mov    ebp,esp
1000453d:	83 ec 08             	sub    esp,0x8
10004540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004543:	83 ec 08             	sub    esp,0x8
10004546:	68 00 00 00 00       	push   0x0	10004547: R_386_32	ps2mousename
1000454b:	50                   	push   eax
1000454c:	e8 fc ff ff ff       	call   1000454d <PS2Mouse::PS2Mouse()+0x13>	1000454d: R_386_PC32	Mouse::Mouse(char const*)
10004551:	83 c4 10             	add    esp,0x10
10004554:	ba 08 00 00 00       	mov    edx,0x8	10004555: R_386_32	vtable for PS2Mouse
10004559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000455c:	89 10                	mov    DWORD PTR [eax],edx
1000455e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004561:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10004568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000456b:	c7 80 62 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x162],0x0
10004575:	90                   	nop
10004576:	c9                   	leave  
10004577:	c3                   	ret    

10004578 <ps2MouseHandler(regs*, void*)>:
10004578:	55                   	push   ebp
10004579:	89 e5                	mov    ebp,esp
1000457b:	83 ec 08             	sub    esp,0x8
1000457e:	83 ec 0c             	sub    esp,0xc
10004581:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10004584:	e8 fc ff ff ff       	call   10004585 <ps2MouseHandler(regs*, void*)+0xd>	10004585: R_386_PC32	PS2Mouse::handler()
10004589:	83 c4 10             	add    esp,0x10
1000458c:	90                   	nop
1000458d:	c9                   	leave  
1000458e:	c3                   	ret    
1000458f:	90                   	nop

10004590 <PS2Mouse::handler()>:
10004590:	55                   	push   ebp
10004591:	89 e5                	mov    ebp,esp
10004593:	83 ec 28             	sub    esp,0x28
10004596:	66 c7 45 ea 64 00    	mov    WORD PTR [ebp-0x16],0x64
1000459c:	66 8b 45 ea          	mov    ax,WORD PTR [ebp-0x16]
100045a0:	89 c2                	mov    edx,eax
100045a2:	ec                   	in     al,dx
100045a3:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
100045a6:	8a 45 e9             	mov    al,BYTE PTR [ebp-0x17]
100045a9:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100045ac:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100045b0:	83 e0 01             	and    eax,0x1
100045b3:	85 c0                	test   eax,eax
100045b5:	0f 84 8d 01 00 00    	je     10004748 <PS2Mouse::handler()+0x1b8>
100045bb:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100045bf:	83 e0 20             	and    eax,0x20
100045c2:	85 c0                	test   eax,eax
100045c4:	0f 84 81 01 00 00    	je     1000474b <PS2Mouse::handler()+0x1bb>
100045ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100045cd:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
100045d3:	8d 50 01             	lea    edx,[eax+0x1]
100045d6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100045d9:	88 91 61 01 00 00    	mov    BYTE PTR [ecx+0x161],dl
100045df:	0f b6 c8             	movzx  ecx,al
100045e2:	66 c7 45 e6 60 00    	mov    WORD PTR [ebp-0x1a],0x60
100045e8:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
100045ec:	89 c2                	mov    edx,eax
100045ee:	ec                   	in     al,dx
100045ef:	88 45 e5             	mov    BYTE PTR [ebp-0x1b],al
100045f2:	8a 55 e5             	mov    dl,BYTE PTR [ebp-0x1b]
100045f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100045f8:	88 94 08 62 01 00 00 	mov    BYTE PTR [eax+ecx*1+0x162],dl
100045ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004602:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10004608:	0f b6 c0             	movzx  eax,al
1000460b:	83 e0 08             	and    eax,0x8
1000460e:	85 c0                	test   eax,eax
10004610:	75 0f                	jne    10004621 <PS2Mouse::handler()+0x91>
10004612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004615:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
1000461c:	e9 2b 01 00 00       	jmp    1000474c <PS2Mouse::handler()+0x1bc>
10004621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004624:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
1000462a:	84 c0                	test   al,al
1000462c:	75 0d                	jne    1000463b <PS2Mouse::handler()+0xab>
1000462e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004631:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10004637:	3c 02                	cmp    al,0x2
10004639:	77 2f                	ja     1000466a <PS2Mouse::handler()+0xda>
1000463b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000463e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10004644:	3c 03                	cmp    al,0x3
10004646:	74 11                	je     10004659 <PS2Mouse::handler()+0xc9>
10004648:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000464b:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10004651:	3c 04                	cmp    al,0x4
10004653:	0f 85 f3 00 00 00    	jne    1000474c <PS2Mouse::handler()+0x1bc>
10004659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000465c:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10004662:	3c 03                	cmp    al,0x3
10004664:	0f 86 e2 00 00 00    	jbe    1000474c <PS2Mouse::handler()+0x1bc>
1000466a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000466d:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10004674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004677:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
1000467d:	84 c0                	test   al,al
1000467f:	78 13                	js     10004694 <PS2Mouse::handler()+0x104>
10004681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004684:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
1000468a:	0f b6 c0             	movzx  eax,al
1000468d:	83 e0 40             	and    eax,0x40
10004690:	85 c0                	test   eax,eax
10004692:	74 37                	je     100046cb <PS2Mouse::handler()+0x13b>
10004694:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004697:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
1000469e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046a1:	c6 80 62 01 00 00 00 	mov    BYTE PTR [eax+0x162],0x0
100046a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046ab:	c6 80 63 01 00 00 00 	mov    BYTE PTR [eax+0x163],0x0
100046b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046b5:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
100046bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046bf:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
100046c6:	e9 81 00 00 00       	jmp    1000474c <PS2Mouse::handler()+0x1bc>
100046cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046ce:	8a 80 63 01 00 00    	mov    al,BYTE PTR [eax+0x163]
100046d4:	0f b6 d0             	movzx  edx,al
100046d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046da:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100046e0:	0f b6 c0             	movzx  eax,al
100046e3:	c1 e0 04             	shl    eax,0x4
100046e6:	25 00 01 00 00       	and    eax,0x100
100046eb:	29 c2                	sub    edx,eax
100046ed:	89 d0                	mov    eax,edx
100046ef:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100046f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046f5:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100046fb:	0f b6 c0             	movzx  eax,al
100046fe:	c1 e0 03             	shl    eax,0x3
10004701:	25 00 01 00 00       	and    eax,0x100
10004706:	89 c2                	mov    edx,eax
10004708:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000470b:	8a 80 64 01 00 00    	mov    al,BYTE PTR [eax+0x164]
10004711:	0f b6 c0             	movzx  eax,al
10004714:	29 c2                	sub    edx,eax
10004716:	89 d0                	mov    eax,edx
10004718:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000471b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000471c: R_386_32	guiMouseHandler
10004720:	85 c0                	test   eax,eax
10004722:	74 28                	je     1000474c <PS2Mouse::handler()+0x1bc>
10004724:	a1 00 00 00 00       	mov    eax,ds:0x0	10004725: R_386_32	guiMouseHandler
10004729:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000472c:	8a 92 62 01 00 00    	mov    dl,BYTE PTR [edx+0x162]
10004732:	0f b6 d2             	movzx  edx,dl
10004735:	83 e2 01             	and    edx,0x1
10004738:	6a 00                	push   0x0
1000473a:	52                   	push   edx
1000473b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000473e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10004741:	ff d0                	call   eax
10004743:	83 c4 10             	add    esp,0x10
10004746:	eb 04                	jmp    1000474c <PS2Mouse::handler()+0x1bc>
10004748:	90                   	nop
10004749:	eb 01                	jmp    1000474c <PS2Mouse::handler()+0x1bc>
1000474b:	90                   	nop
1000474c:	c9                   	leave  
1000474d:	c3                   	ret    

1000474e <PS2Mouse::open(int, int, void*)>:
1000474e:	55                   	push   ebp
1000474f:	89 e5                	mov    ebp,esp
10004751:	83 ec 08             	sub    esp,0x8
10004754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004757:	8b 90 c8 00 00 00    	mov    edx,DWORD PTR [eax+0xc8]
1000475d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004760:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10004766:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004769:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000476c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10004772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004775:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000477b:	83 ec 08             	sub    esp,0x8
1000477e:	68 f6 00 00 00       	push   0xf6
10004783:	50                   	push   eax
10004784:	e8 fc ff ff ff       	call   10004785 <PS2Mouse::open(int, int, void*)+0x37>	10004785: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10004789:	83 c4 10             	add    esp,0x10
1000478c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000478f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004795:	83 ec 0c             	sub    esp,0xc
10004798:	50                   	push   eax
10004799:	e8 fc ff ff ff       	call   1000479a <PS2Mouse::open(int, int, void*)+0x4c>	1000479a: R_386_PC32	PS2Port::deviceRead()
1000479e:	83 c4 10             	add    esp,0x10
100047a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047a4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100047aa:	83 ec 08             	sub    esp,0x8
100047ad:	68 f4 00 00 00       	push   0xf4
100047b2:	50                   	push   eax
100047b3:	e8 fc ff ff ff       	call   100047b4 <PS2Mouse::open(int, int, void*)+0x66>	100047b4: R_386_PC32	PS2Port::deviceWrite(unsigned char)
100047b8:	83 c4 10             	add    esp,0x10
100047bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047be:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100047c4:	83 ec 0c             	sub    esp,0xc
100047c7:	50                   	push   eax
100047c8:	e8 fc ff ff ff       	call   100047c9 <PS2Mouse::open(int, int, void*)+0x7b>	100047c9: R_386_PC32	PS2Port::deviceRead()
100047cd:	83 c4 10             	add    esp,0x10
100047d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047d3:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100047da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047dd:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
100047e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047e7:	83 ec 0c             	sub    esp,0xc
100047ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100047ed:	6a 01                	push   0x1
100047ef:	68 00 00 00 00       	push   0x0	100047f0: R_386_32	ps2MouseHandler(regs*, void*)
100047f4:	6a 0c                	push   0xc
100047f6:	50                   	push   eax
100047f7:	e8 fc ff ff ff       	call   100047f8 <PS2Mouse::open(int, int, void*)+0xaa>	100047f8: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
100047fc:	83 c4 20             	add    esp,0x20
100047ff:	b8 00 00 00 00       	mov    eax,0x0
10004804:	c9                   	leave  
10004805:	c3                   	ret    

10004806 <PS2Mouse::close(int, int, void*)>:
10004806:	b8 00 00 00 00       	mov    eax,0x0
1000480b:	c3                   	ret    

1000480c <PS2Mouse::detect()>:
1000480c:	90                   	nop
1000480d:	c3                   	ret    

1000480e <PS2Port::PS2Port()>:
1000480e:	55                   	push   ebp
1000480f:	89 e5                	mov    ebp,esp
10004811:	83 ec 08             	sub    esp,0x8
10004814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004817:	83 ec 08             	sub    esp,0x8
1000481a:	68 00 00 00 00       	push   0x0	1000481b: R_386_32	ps2portname
1000481f:	50                   	push   eax
10004820:	e8 fc ff ff ff       	call   10004821 <PS2Port::PS2Port()+0x13>	10004821: R_386_PC32	Bus::Bus(char const*)
10004825:	83 c4 10             	add    esp,0x10
10004828:	ba 08 00 00 00       	mov    edx,0x8	10004829: R_386_32	vtable for PS2Port
1000482d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004830:	89 10                	mov    DWORD PTR [eax],edx
10004832:	90                   	nop
10004833:	c9                   	leave  
10004834:	c3                   	ret    
10004835:	90                   	nop

10004836 <PS2Port::open(int, int, void*)>:
10004836:	55                   	push   ebp
10004837:	89 e5                	mov    ebp,esp
10004839:	83 ec 08             	sub    esp,0x8
1000483c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000483f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10004842:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10004848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000484b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000484e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10004854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004857:	8b 00                	mov    eax,DWORD PTR [eax]
10004859:	83 c0 18             	add    eax,0x18
1000485c:	8b 00                	mov    eax,DWORD PTR [eax]
1000485e:	83 ec 0c             	sub    esp,0xc
10004861:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004864:	ff d0                	call   eax
10004866:	83 c4 10             	add    esp,0x10
10004869:	b8 00 00 00 00       	mov    eax,0x0
1000486e:	c9                   	leave  
1000486f:	c3                   	ret    

10004870 <PS2Port::close(int, int, void*)>:
10004870:	b8 00 00 00 00       	mov    eax,0x0
10004875:	c3                   	ret    

10004876 <PS2Port::detect()>:
10004876:	55                   	push   ebp
10004877:	89 e5                	mov    ebp,esp
10004879:	53                   	push   ebx
1000487a:	83 ec 14             	sub    esp,0x14
1000487d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004880:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10004886:	85 c0                	test   eax,eax
10004888:	75 5a                	jne    100048e4 <PS2Port::detect()+0x6e>
1000488a:	c7 45 ec 70 01 00 00 	mov    DWORD PTR [ebp-0x14],0x170
10004891:	83 ec 0c             	sub    esp,0xc
10004894:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10004897:	e8 fc ff ff ff       	call   10004898 <PS2Port::detect()+0x22>	10004898: R_386_PC32	malloc
1000489c:	83 c4 10             	add    esp,0x10
1000489f:	89 c3                	mov    ebx,eax
100048a1:	83 ec 0c             	sub    esp,0xc
100048a4:	53                   	push   ebx
100048a5:	e8 fc ff ff ff       	call   100048a6 <PS2Port::detect()+0x30>	100048a6: R_386_PC32	PS2Keyboard::PS2Keyboard()
100048aa:	83 c4 10             	add    esp,0x10
100048ad:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100048b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048b3:	83 ec 08             	sub    esp,0x8
100048b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100048b9:	50                   	push   eax
100048ba:	e8 fc ff ff ff       	call   100048bb <PS2Port::detect()+0x45>	100048bb: R_386_PC32	Device::addChild(Device*)
100048bf:	83 c4 10             	add    esp,0x10
100048c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100048c5:	8b 00                	mov    eax,DWORD PTR [eax]
100048c7:	83 c0 08             	add    eax,0x8
100048ca:	8b 00                	mov    eax,DWORD PTR [eax]
100048cc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100048cf:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
100048d5:	52                   	push   edx
100048d6:	6a 00                	push   0x0
100048d8:	6a 00                	push   0x0
100048da:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100048dd:	ff d0                	call   eax
100048df:	83 c4 10             	add    esp,0x10
100048e2:	eb 66                	jmp    1000494a <PS2Port::detect()+0xd4>
100048e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048e7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100048ed:	83 f8 01             	cmp    eax,0x1
100048f0:	75 58                	jne    1000494a <PS2Port::detect()+0xd4>
100048f2:	c7 45 e8 68 01 00 00 	mov    DWORD PTR [ebp-0x18],0x168
100048f9:	83 ec 0c             	sub    esp,0xc
100048fc:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100048ff:	e8 fc ff ff ff       	call   10004900 <PS2Port::detect()+0x8a>	10004900: R_386_PC32	malloc
10004904:	83 c4 10             	add    esp,0x10
10004907:	89 c3                	mov    ebx,eax
10004909:	83 ec 0c             	sub    esp,0xc
1000490c:	53                   	push   ebx
1000490d:	e8 fc ff ff ff       	call   1000490e <PS2Port::detect()+0x98>	1000490e: R_386_PC32	PS2Mouse::PS2Mouse()
10004912:	83 c4 10             	add    esp,0x10
10004915:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
10004918:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000491b:	83 ec 08             	sub    esp,0x8
1000491e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10004921:	50                   	push   eax
10004922:	e8 fc ff ff ff       	call   10004923 <PS2Port::detect()+0xad>	10004923: R_386_PC32	Device::addChild(Device*)
10004927:	83 c4 10             	add    esp,0x10
1000492a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000492d:	8b 00                	mov    eax,DWORD PTR [eax]
1000492f:	83 c0 08             	add    eax,0x8
10004932:	8b 00                	mov    eax,DWORD PTR [eax]
10004934:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10004937:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
1000493d:	52                   	push   edx
1000493e:	6a 00                	push   0x0
10004940:	6a 01                	push   0x1
10004942:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10004945:	ff d0                	call   eax
10004947:	83 c4 10             	add    esp,0x10
1000494a:	90                   	nop
1000494b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000494e:	c9                   	leave  
1000494f:	c3                   	ret    

10004950 <PS2Port::deviceWrite(unsigned char)>:
10004950:	55                   	push   ebp
10004951:	89 e5                	mov    ebp,esp
10004953:	83 ec 28             	sub    esp,0x28
10004956:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004959:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
1000495c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000495f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10004965:	83 f8 01             	cmp    eax,0x1
10004968:	75 1a                	jne    10004984 <PS2Port::deviceWrite(unsigned char)+0x34>
1000496a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000496d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004973:	83 ec 08             	sub    esp,0x8
10004976:	68 d4 00 00 00       	push   0xd4
1000497b:	50                   	push   eax
1000497c:	e8 fc ff ff ff       	call   1000497d <PS2Port::deviceWrite(unsigned char)+0x2d>	1000497d: R_386_PC32	PS2::controllerWrite(unsigned char)
10004981:	83 c4 10             	add    esp,0x10
10004984:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000498b:	66 c7 45 f0 64 00    	mov    WORD PTR [ebp-0x10],0x64
10004991:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10004994:	89 c2                	mov    edx,eax
10004996:	ec                   	in     al,dx
10004997:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000499a:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
1000499d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100049a0:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100049a4:	83 e0 02             	and    eax,0x2
100049a7:	85 c0                	test   eax,eax
100049a9:	74 29                	je     100049d4 <PS2Port::deviceWrite(unsigned char)+0x84>
100049ab:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100049af:	83 e0 40             	and    eax,0x40
100049b2:	85 c0                	test   eax,eax
100049b4:	75 22                	jne    100049d8 <PS2Port::deviceWrite(unsigned char)+0x88>
100049b6:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100049b9:	84 c0                	test   al,al
100049bb:	78 1b                	js     100049d8 <PS2Port::deviceWrite(unsigned char)+0x88>
100049bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100049c0:	8d 50 01             	lea    edx,[eax+0x1]
100049c3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
100049c6:	3d 40 06 00 00       	cmp    eax,0x640
100049cb:	0f 94 c0             	sete   al
100049ce:	84 c0                	test   al,al
100049d0:	75 05                	jne    100049d7 <PS2Port::deviceWrite(unsigned char)+0x87>
100049d2:	eb b7                	jmp    1000498b <PS2Port::deviceWrite(unsigned char)+0x3b>
100049d4:	90                   	nop
100049d5:	eb 01                	jmp    100049d8 <PS2Port::deviceWrite(unsigned char)+0x88>
100049d7:	90                   	nop
100049d8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
100049dc:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
100049e2:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
100049e5:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
100049e8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100049eb:	ee                   	out    dx,al
100049ec:	b0 01                	mov    al,0x1
100049ee:	c9                   	leave  
100049ef:	c3                   	ret    

100049f0 <PS2Port::deviceRead()>:
100049f0:	55                   	push   ebp
100049f1:	89 e5                	mov    ebp,esp
100049f3:	83 ec 08             	sub    esp,0x8
100049f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049f9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100049ff:	83 ec 0c             	sub    esp,0xc
10004a02:	50                   	push   eax
10004a03:	e8 fc ff ff ff       	call   10004a04 <PS2Port::deviceRead()+0x14>	10004a04: R_386_PC32	PS2::controllerRead()
10004a08:	83 c4 10             	add    esp,0x10
10004a0b:	c9                   	leave  
10004a0c:	c3                   	ret    
10004a0d:	90                   	nop

10004a0e <ISA::~ISA()>:
10004a0e:	55                   	push   ebp
10004a0f:	89 e5                	mov    ebp,esp
10004a11:	83 ec 08             	sub    esp,0x8
10004a14:	ba 08 00 00 00       	mov    edx,0x8	10004a15: R_386_32	vtable for ISA
10004a19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a1c:	89 10                	mov    DWORD PTR [eax],edx
10004a1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a21:	83 ec 0c             	sub    esp,0xc
10004a24:	50                   	push   eax
10004a25:	e8 fc ff ff ff       	call   10004a26 <ISA::~ISA()+0x18>	10004a26: R_386_PC32	Bus::~Bus()
10004a2a:	83 c4 10             	add    esp,0x10
10004a2d:	90                   	nop
10004a2e:	c9                   	leave  
10004a2f:	c3                   	ret    

10004a30 <ISA::~ISA()>:
10004a30:	55                   	push   ebp
10004a31:	89 e5                	mov    ebp,esp
10004a33:	83 ec 08             	sub    esp,0x8
10004a36:	83 ec 0c             	sub    esp,0xc
10004a39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004a3c:	e8 fc ff ff ff       	call   10004a3d <ISA::~ISA()+0xd>	10004a3d: R_386_PC32	ISA::~ISA()
10004a41:	83 c4 10             	add    esp,0x10
10004a44:	83 ec 08             	sub    esp,0x8
10004a47:	68 58 01 00 00       	push   0x158
10004a4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004a4f:	e8 fc ff ff ff       	call   10004a50 <ISA::~ISA()+0x20>	10004a50: R_386_PC32	operator delete(void*, unsigned long)
10004a54:	83 c4 10             	add    esp,0x10
10004a57:	c9                   	leave  
10004a58:	c3                   	ret    
10004a59:	90                   	nop

10004a5a <Floppy::~Floppy()>:
10004a5a:	55                   	push   ebp
10004a5b:	89 e5                	mov    ebp,esp
10004a5d:	83 ec 08             	sub    esp,0x8
10004a60:	ba 08 00 00 00       	mov    edx,0x8	10004a61: R_386_32	vtable for Floppy
10004a65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a68:	89 10                	mov    DWORD PTR [eax],edx
10004a6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a6d:	83 ec 0c             	sub    esp,0xc
10004a70:	50                   	push   eax
10004a71:	e8 fc ff ff ff       	call   10004a72 <Floppy::~Floppy()+0x18>	10004a72: R_386_PC32	HardDiskController::~HardDiskController()
10004a76:	83 c4 10             	add    esp,0x10
10004a79:	90                   	nop
10004a7a:	c9                   	leave  
10004a7b:	c3                   	ret    

10004a7c <Floppy::~Floppy()>:
10004a7c:	55                   	push   ebp
10004a7d:	89 e5                	mov    ebp,esp
10004a7f:	83 ec 08             	sub    esp,0x8
10004a82:	83 ec 0c             	sub    esp,0xc
10004a85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004a88:	e8 fc ff ff ff       	call   10004a89 <Floppy::~Floppy()+0xd>	10004a89: R_386_PC32	Floppy::~Floppy()
10004a8d:	83 c4 10             	add    esp,0x10
10004a90:	83 ec 08             	sub    esp,0x8
10004a93:	68 b8 01 00 00       	push   0x1b8
10004a98:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004a9b:	e8 fc ff ff ff       	call   10004a9c <Floppy::~Floppy()+0x20>	10004a9c: R_386_PC32	operator delete(void*, unsigned long)
10004aa0:	83 c4 10             	add    esp,0x10
10004aa3:	c9                   	leave  
10004aa4:	c3                   	ret    
10004aa5:	90                   	nop

10004aa6 <JoystickHost::JoystickHost()>:
10004aa6:	55                   	push   ebp
10004aa7:	89 e5                	mov    ebp,esp
10004aa9:	ba 08 00 00 00       	mov    edx,0x8	10004aaa: R_386_32	vtable for JoystickHost
10004aae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004ab1:	89 10                	mov    DWORD PTR [eax],edx
10004ab3:	90                   	nop
10004ab4:	5d                   	pop    ebp
10004ab5:	c3                   	ret    

10004ab6 <DMA::~DMA()>:
10004ab6:	55                   	push   ebp
10004ab7:	89 e5                	mov    ebp,esp
10004ab9:	83 ec 08             	sub    esp,0x8
10004abc:	ba 08 00 00 00       	mov    edx,0x8	10004abd: R_386_32	vtable for DMA
10004ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004ac4:	89 10                	mov    DWORD PTR [eax],edx
10004ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004ac9:	83 ec 0c             	sub    esp,0xc
10004acc:	50                   	push   eax
10004acd:	e8 fc ff ff ff       	call   10004ace <DMA::~DMA()+0x18>	10004ace: R_386_PC32	Device::~Device()
10004ad2:	83 c4 10             	add    esp,0x10
10004ad5:	90                   	nop
10004ad6:	c9                   	leave  
10004ad7:	c3                   	ret    

10004ad8 <DMA::~DMA()>:
10004ad8:	55                   	push   ebp
10004ad9:	89 e5                	mov    ebp,esp
10004adb:	83 ec 08             	sub    esp,0x8
10004ade:	83 ec 0c             	sub    esp,0xc
10004ae1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004ae4:	e8 fc ff ff ff       	call   10004ae5 <DMA::~DMA()+0xd>	10004ae5: R_386_PC32	DMA::~DMA()
10004ae9:	83 c4 10             	add    esp,0x10
10004aec:	83 ec 08             	sub    esp,0x8
10004aef:	68 5c 01 00 00       	push   0x15c
10004af4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004af7:	e8 fc ff ff ff       	call   10004af8 <DMA::~DMA()+0x20>	10004af8: R_386_PC32	operator delete(void*, unsigned long)
10004afc:	83 c4 10             	add    esp,0x10
10004aff:	c9                   	leave  
10004b00:	c3                   	ret    
10004b01:	90                   	nop

10004b02 <PS2::~PS2()>:
10004b02:	55                   	push   ebp
10004b03:	89 e5                	mov    ebp,esp
10004b05:	83 ec 08             	sub    esp,0x8
10004b08:	ba 08 00 00 00       	mov    edx,0x8	10004b09: R_386_32	vtable for PS2
10004b0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004b10:	89 10                	mov    DWORD PTR [eax],edx
10004b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004b15:	83 ec 0c             	sub    esp,0xc
10004b18:	50                   	push   eax
10004b19:	e8 fc ff ff ff       	call   10004b1a <PS2::~PS2()+0x18>	10004b1a: R_386_PC32	Bus::~Bus()
10004b1e:	83 c4 10             	add    esp,0x10
10004b21:	90                   	nop
10004b22:	c9                   	leave  
10004b23:	c3                   	ret    

10004b24 <PS2::~PS2()>:
10004b24:	55                   	push   ebp
10004b25:	89 e5                	mov    ebp,esp
10004b27:	83 ec 08             	sub    esp,0x8
10004b2a:	83 ec 0c             	sub    esp,0xc
10004b2d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004b30:	e8 fc ff ff ff       	call   10004b31 <PS2::~PS2()+0xd>	10004b31: R_386_PC32	PS2::~PS2()
10004b35:	83 c4 10             	add    esp,0x10
10004b38:	83 ec 08             	sub    esp,0x8
10004b3b:	68 60 01 00 00       	push   0x160
10004b40:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004b43:	e8 fc ff ff ff       	call   10004b44 <PS2::~PS2()+0x20>	10004b44: R_386_PC32	operator delete(void*, unsigned long)
10004b48:	83 c4 10             	add    esp,0x10
10004b4b:	c9                   	leave  
10004b4c:	c3                   	ret    
10004b4d:	90                   	nop

10004b4e <PS2Mouse::~PS2Mouse()>:
10004b4e:	55                   	push   ebp
10004b4f:	89 e5                	mov    ebp,esp
10004b51:	83 ec 08             	sub    esp,0x8
10004b54:	ba 08 00 00 00       	mov    edx,0x8	10004b55: R_386_32	vtable for PS2Mouse
10004b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004b5c:	89 10                	mov    DWORD PTR [eax],edx
10004b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004b61:	83 ec 0c             	sub    esp,0xc
10004b64:	50                   	push   eax
10004b65:	e8 fc ff ff ff       	call   10004b66 <PS2Mouse::~PS2Mouse()+0x18>	10004b66: R_386_PC32	Mouse::~Mouse()
10004b6a:	83 c4 10             	add    esp,0x10
10004b6d:	90                   	nop
10004b6e:	c9                   	leave  
10004b6f:	c3                   	ret    

10004b70 <PS2Mouse::~PS2Mouse()>:
10004b70:	55                   	push   ebp
10004b71:	89 e5                	mov    ebp,esp
10004b73:	83 ec 08             	sub    esp,0x8
10004b76:	83 ec 0c             	sub    esp,0xc
10004b79:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004b7c:	e8 fc ff ff ff       	call   10004b7d <PS2Mouse::~PS2Mouse()+0xd>	10004b7d: R_386_PC32	PS2Mouse::~PS2Mouse()
10004b81:	83 c4 10             	add    esp,0x10
10004b84:	83 ec 08             	sub    esp,0x8
10004b87:	68 68 01 00 00       	push   0x168
10004b8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004b8f:	e8 fc ff ff ff       	call   10004b90 <PS2Mouse::~PS2Mouse()+0x20>	10004b90: R_386_PC32	operator delete(void*, unsigned long)
10004b94:	83 c4 10             	add    esp,0x10
10004b97:	c9                   	leave  
10004b98:	c3                   	ret    
10004b99:	90                   	nop

10004b9a <PS2Port::~PS2Port()>:
10004b9a:	55                   	push   ebp
10004b9b:	89 e5                	mov    ebp,esp
10004b9d:	83 ec 08             	sub    esp,0x8
10004ba0:	ba 08 00 00 00       	mov    edx,0x8	10004ba1: R_386_32	vtable for PS2Port
10004ba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004ba8:	89 10                	mov    DWORD PTR [eax],edx
10004baa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004bad:	83 ec 0c             	sub    esp,0xc
10004bb0:	50                   	push   eax
10004bb1:	e8 fc ff ff ff       	call   10004bb2 <PS2Port::~PS2Port()+0x18>	10004bb2: R_386_PC32	Bus::~Bus()
10004bb6:	83 c4 10             	add    esp,0x10
10004bb9:	90                   	nop
10004bba:	c9                   	leave  
10004bbb:	c3                   	ret    

10004bbc <PS2Port::~PS2Port()>:
10004bbc:	55                   	push   ebp
10004bbd:	89 e5                	mov    ebp,esp
10004bbf:	83 ec 08             	sub    esp,0x8
10004bc2:	83 ec 0c             	sub    esp,0xc
10004bc5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004bc8:	e8 fc ff ff ff       	call   10004bc9 <PS2Port::~PS2Port()+0xd>	10004bc9: R_386_PC32	PS2Port::~PS2Port()
10004bcd:	83 c4 10             	add    esp,0x10
10004bd0:	83 ec 08             	sub    esp,0x8
10004bd3:	68 60 01 00 00       	push   0x160
10004bd8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004bdb:	e8 fc ff ff ff       	call   10004bdc <PS2Port::~PS2Port()+0x20>	10004bdc: R_386_PC32	operator delete(void*, unsigned long)
10004be0:	83 c4 10             	add    esp,0x10
10004be3:	c9                   	leave  
10004be4:	c3                   	ret    
10004be5:	66 90                	xchg   ax,ax
10004be7:	90                   	nop

10004be8 <PHYS_RAM_TABLE_SIZE>:
10004be8:	13 05 00 00                                         ....

10004bec <PHYS_HIGHEST_UNUSED_ADDRESS>:
10004bec:	24 05 00 00                                         $...

10004bf0 <PHYS_RAM_TABLE>:
10004bf0:	00 06 00 00                                         ....

10004bf4 <PHYS_DMA_MEMORY_1>:
10004bf4:	00 00 01 00                                         ....

10004bf8 <PHYS_PHYS_PAGE_BITMAP>:
10004bf8:	00 00 02 00                                         ....

10004bfc <PHYS_VIRT_PAGE_BITMAP>:
10004bfc:	00 00 04 00                                         ....

10004c00 <PHYS_DMA_MEMORY_2>:
10004c00:	00 00 06 00                                         ....

10004c04 <PHYS_ALLOCED_VIRT_PAGES>:
10004c04:	00 00 10 00                                         ....

10004c08 <PHYS_KRNL_PAGE_DIRECTORY>:
10004c08:	00 10 00 00                                         ....

10004c0c <VIRT_KERNEL_BASE>:
10004c0c:	00 00 00 c0                                         ....

10004c10 <VIRT_LOW_MEGS>:
10004c10:	00 00 00 c2                                         ....

10004c14 <VIRT_CPU_SPECIFIC>:
10004c14:	00 00 40 c2                                         ..@.

10004c18 <VIRT_RECURSIVE_SPOT_1>:
10004c18:	00 00 80 c2                                         ....

10004c1c <VIRT_RECURSIVE_SPOT_2>:
10004c1c:	00 00 c0 c2                                         ....

10004c20 <VIRT_DMA_MEMORY_1>:
10004c20:	00 00 01 c2                                         ....

10004c24 <SIZE_DMA_MEMORY_1>:
10004c24:	00 00 01 00                                         ....

10004c28 <VIRT_DMA_MEMORY_2>:
10004c28:	00 00 06 c2                                         ....

10004c2c <SIZE_DMA_MEMORY_2>:
10004c2c:	00 00 02 00                                         ....

10004c30 <VIRT_KRNL_PAGE_DIRECTORY>:
10004c30:	00 10 00 c2                                         ....

10004c34 <VIRT_PHYS_PAGE_BITMAP>:
10004c34:	00 00 02 c2                                         ....

10004c38 <SIZE_PHYS_PAGE_BITMAP>:
10004c38:	00 00 02 00                                         ....

10004c3c <VIRT_VIRT_PAGE_BITMAP>:
10004c3c:	00 00 04 c2                                         ....

10004c40 <SIZE_VIRT_PAGE_BITMAP>:
10004c40:	00 80 00 00                                         ....

10004c44 <VIRT_RAM_TABLE>:
10004c44:	00 06 00 c2                                         ....

10004c48 <VIRT_RAM_TABLE_SIZE>:
10004c48:	13 05 00 c2                                         ....

10004c4c <VIRT_HIGHEST_UNUSED_ADDRESS>:
10004c4c:	24 05 00 c2                                         $...

10004c50 <SIZE_APP_STACK_USER>:
10004c50:	00 00 18 00                                         ....

10004c54 <SIZE_APP_STACK_KRNL>:
10004c54:	00 00 08 00                                         ....

10004c58 <SIZE_APP_STACK_TOTAL>:
10004c58:	00 00 20 00                                         .. .

10004c5c <VIRT_APP_DATA>:
10004c5c:	00 00 00 10                                         ....

10004c60 <VIRT_APP_STACK_USER_TOP>:
10004c60:	00 00 00 02                                         ....

10004c64 <VIRT_APP_STACK_KRNL_TOP>:
10004c64:	00 00 e8 01                                         ....

10004c68 <VIRT_HEAP_MIN>:
10004c68:	00 00 00 c8                                         ....

10004c6c <VIRT_HEAP_MAX>:
10004c6c:	ff ff ff ef                                         ....

10004c70 <VIRT_SBRK_MIN>:
10004c70:	00 00 00 f0                                         ....

10004c74 <VIRT_SBRK_MAX>:
10004c74:	00 00 c0 ff                                         ....

10004c78 <VIRT_ALLOCED_VIRT_PAGES>:
10004c78:	00 00 10 c2                                         ....

10004c7c <VIRT_ACPI_DRIVER>:
10004c7c:	00 40 48 c2                                         .@H.

10004c80 <TERMINAL_KEYBUFFER_IN_SIZE>:
10004c80:	96 00 00 00                                         ....

10004c84 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10004c84:	2c 01 00 00 49 53 41 20 42 75 73 00                 ,...ISA Bus.

10004c90 <vtable for ISA>:
	...
	10004c98: R_386_32	ISA::~ISA()
	10004c9c: R_386_32	ISA::~ISA()
	10004ca0: R_386_32	ISA::open(int, int, void*)
	10004ca4: R_386_32	ISA::close(int, int, void*)
	10004ca8: R_386_32	Device::hibernate()
	10004cac: R_386_32	Device::wake()
	10004cb0: R_386_32	ISA::detect()
	10004cb4: R_386_32	Device::disableLegacy()
	10004cb8: R_386_32	Device::powerSaving(PowerSavingLevel)

10004cbc <TERMINAL_KEYBUFFER_IN_SIZE>:
10004cbc:	96 00 00 00                                         ....

10004cc0 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10004cc0:	2c 01 00 00                                         ,...

10004cc4 <PHYS_RAM_TABLE_SIZE>:
10004cc4:	13 05 00 00                                         ....

10004cc8 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10004cc8:	24 05 00 00                                         $...

10004ccc <PHYS_RAM_TABLE>:
10004ccc:	00 06 00 00                                         ....

10004cd0 <PHYS_DMA_MEMORY_1>:
10004cd0:	00 00 01 00                                         ....

10004cd4 <PHYS_PHYS_PAGE_BITMAP>:
10004cd4:	00 00 02 00                                         ....

10004cd8 <PHYS_VIRT_PAGE_BITMAP>:
10004cd8:	00 00 04 00                                         ....

10004cdc <PHYS_DMA_MEMORY_2>:
10004cdc:	00 00 06 00                                         ....

10004ce0 <PHYS_ALLOCED_VIRT_PAGES>:
10004ce0:	00 00 10 00                                         ....

10004ce4 <PHYS_KRNL_PAGE_DIRECTORY>:
10004ce4:	00 10 00 00                                         ....

10004ce8 <VIRT_KERNEL_BASE>:
10004ce8:	00 00 00 c0                                         ....

10004cec <VIRT_LOW_MEGS>:
10004cec:	00 00 00 c2                                         ....

10004cf0 <VIRT_CPU_SPECIFIC>:
10004cf0:	00 00 40 c2                                         ..@.

10004cf4 <VIRT_RECURSIVE_SPOT_1>:
10004cf4:	00 00 80 c2                                         ....

10004cf8 <VIRT_RECURSIVE_SPOT_2>:
10004cf8:	00 00 c0 c2                                         ....

10004cfc <VIRT_DMA_MEMORY_1>:
10004cfc:	00 00 01 c2                                         ....

10004d00 <SIZE_DMA_MEMORY_1>:
10004d00:	00 00 01 00                                         ....

10004d04 <VIRT_DMA_MEMORY_2>:
10004d04:	00 00 06 c2                                         ....

10004d08 <SIZE_DMA_MEMORY_2>:
10004d08:	00 00 02 00                                         ....

10004d0c <VIRT_KRNL_PAGE_DIRECTORY>:
10004d0c:	00 10 00 c2                                         ....

10004d10 <VIRT_PHYS_PAGE_BITMAP>:
10004d10:	00 00 02 c2                                         ....

10004d14 <SIZE_PHYS_PAGE_BITMAP>:
10004d14:	00 00 02 00                                         ....

10004d18 <VIRT_VIRT_PAGE_BITMAP>:
10004d18:	00 00 04 c2                                         ....

10004d1c <SIZE_VIRT_PAGE_BITMAP>:
10004d1c:	00 80 00 00                                         ....

10004d20 <VIRT_RAM_TABLE>:
10004d20:	00 06 00 c2                                         ....

10004d24 <VIRT_RAM_TABLE_SIZE>:
10004d24:	13 05 00 c2                                         ....

10004d28 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10004d28:	24 05 00 c2                                         $...

10004d2c <SIZE_APP_STACK_USER>:
10004d2c:	00 00 18 00                                         ....

10004d30 <SIZE_APP_STACK_KRNL>:
10004d30:	00 00 08 00                                         ....

10004d34 <SIZE_APP_STACK_TOTAL>:
10004d34:	00 00 20 00                                         .. .

10004d38 <VIRT_APP_DATA>:
10004d38:	00 00 00 10                                         ....

10004d3c <VIRT_APP_STACK_USER_TOP>:
10004d3c:	00 00 00 02                                         ....

10004d40 <VIRT_APP_STACK_KRNL_TOP>:
10004d40:	00 00 e8 01                                         ....

10004d44 <VIRT_HEAP_MIN>:
10004d44:	00 00 00 c8                                         ....

10004d48 <VIRT_HEAP_MAX>:
10004d48:	ff ff ff ef                                         ....

10004d4c <VIRT_SBRK_MIN>:
10004d4c:	00 00 00 f0                                         ....

10004d50 <VIRT_SBRK_MAX>:
10004d50:	00 00 c0 ff                                         ....

10004d54 <VIRT_ALLOCED_VIRT_PAGES>:
10004d54:	00 00 10 c2                                         ....

10004d58 <VIRT_ACPI_DRIVER>:
10004d58:	00 40 48 c2 54 75 72 6e 69 6e 67 20 6f 66 66 20     .@H.Turning off 
10004d68:	74 68 65 20 66 6c 6f 70 70 79 20 6d 6f 74 6f 72     the floppy motor
10004d78:	2e 2e 2e 0a 00 46 6c 6f 70 70 79 20 44 69 73 6b     .....Floppy Disk
10004d88:	20 43 6f 6e 74 72 6f 6c 6c 65 72 00 50 52 45 56      Controller.PREV
10004d98:	49 4f 55 53 20 43 4f 4d 4d 41 4e 44 20 46 41 49     IOUS COMMAND FAI
10004da8:	4c 45 44 2c 20 43 41 55 47 48 54 20 42 59 20 77     LED, CAUGHT BY w
10004db8:	72 69 74 65 43 6f 6d 6d 61 6e 64 00 44 49 44 20     riteCommand.DID 
10004dc8:	4e 4f 54 20 43 48 45 43 4b 20 46 4f 52 20 46 41     NOT CHECK FOR FA
10004dd8:	49 4c 55 52 45 20 42 45 46 4f 52 45 20 77 72 69     ILURE BEFORE wri
10004de8:	74 65 43 6f 6d 6d 61 6e 64 00 46 6c 6f 70 70 79     teCommand.Floppy
10004df8:	3a 3a 64 72 69 76 65 44 65 74 65 63 74 69 6f 6e     ::driveDetection
10004e08:	28 29 0a 00 44 72 69 76 65 20 74 79 70 65 20 30     ()..Drive type 0
10004e18:	3a 20 30 78 25 58 0a 00 44 72 69 76 65 20 74 79     : 0x%X..Drive ty
10004e28:	70 65 20 31 3a 20 30 78 25 58 0a 00 76 6f 69 64     pe 1: 0x%X..void
10004e38:	20 46 6c 6f 70 70 79 3a 3a 72 65 73 65 74 28 29      Floppy::reset()
10004e48:	0a 00 53 50 45 43 49 46 59 20 42 41 44 20 44 41     ..SPECIFY BAD DA
10004e58:	54 41 52 41 54 45 00 00 20 a1 07 00 e0 93 04 00     TARATE.. .......
10004e68:	90 d0 03 00 40 42 0f 00 73 65 6c 65 63 74 20 28     ....@B..select (
10004e78:	41 29 2e 20 25 64 0a 00 73 65 6c 65 63 74 20 28     A). %d..select (
10004e88:	42 29 2e 0a 00 73 65 6c 65 63 74 20 28 43 29 2e     B)...select (C).
10004e98:	0a 00 73 65 6c 65 63 74 20 28 44 29 2e 0a 00 00     ..select (D)....
10004ea8:	55 4e 53 55 50 50 4f 52 54 45 44 20 46 4c 4f 50     UNSUPPORTED FLOP
10004eb8:	50 59 20 46 4f 52 4d 41 54 20 28 44 41 54 41 52     PY FORMAT (DATAR
10004ec8:	41 54 45 20 4e 4f 54 20 4b 4e 4f 57 4e 29 00 73     ATE NOT KNOWN).s
10004ed8:	65 6c 65 63 74 20 28 45 29 2e 0a 00 73 70 65 63     elect (E)...spec
10004ee8:	69 66 69 79 20 72 65 73 65 74 2e 0a 00 73 65 6c     ifiy reset...sel
10004ef8:	65 63 74 20 28 46 29 2e 0a 00 73 65 6c 65 63 74     ect (F)...select
10004f08:	20 28 46 32 29 2e 0a 00 63 61 6c 69 62 72 61 74      (F2)...calibrat
10004f18:	65 20 72 65 73 65 74 2e 0a 00 73 65 6c 65 63 74     e reset...select
10004f28:	20 28 47 29 2e 0a 00 73 65 6c 65 63 74 20 28 48      (G)...select (H
10004f38:	29 2e 0a 00 73 65 6c 65 63 74 20 28 49 29 2e 0a     )...select (I)..
10004f48:	00 46 6c 6f 70 70 79 3a 3a 6d 6f 74 6f 72 0a 00     .Floppy::motor..
10004f58:	6e 75 6d 20 3d 20 25 64 2c 20 73 74 61 74 65 20     num = %d, state 
10004f68:	3d 20 25 64 0a 00 73 74 61 74 65 2e 0a 00 73 74     = %d..state...st
10004f78:	61 72 74 69 6e 67 20 74 68 65 20 6d 6f 74 6f 72     arting the motor
10004f88:	2e 0a 00 64 6f 72 20 31 20 3d 20 30 78 25 58 0a     ...dor 1 = 0x%X.
10004f98:	00 64 6f 72 20 32 20 3d 20 30 78 25 58 0a 00 6d     .dor 2 = 0x%X..m
10004fa8:	6f 74 6f 72 20 61 67 61 69 6e 2e 0a 00 6d 6f 74     otor again...mot
10004fb8:	6f 72 20 61 67 61 69 6e 20 32 2e 0a 00 6d 6f 74     or again 2...mot
10004fc8:	6f 72 20 61 67 61 69 6e 20 33 2e 0a 00 6d 6f 74     or again 3...mot
10004fd8:	6f 72 20 61 67 61 69 6e 20 34 2e 0a 00 6d 6f 74     or again 4...mot
10004fe8:	6f 72 20 61 67 61 69 6e 20 35 2e 0a 00 6d 6f 74     or again 5...mot
10004ff8:	6f 72 20 61 67 61 69 6e 20 36 2e 0a 00 46 6c 6f     or again 6...Flo
10005008:	70 70 79 3a 3a 6d 6f 74 6f 72 20 64 6f 6e 65 2e     ppy::motor done.
10005018:	0a 00 46 6c 6f 70 70 79 20 44 69 73 6b 20 44 72     ..Floppy Disk Dr
10005028:	69 76 65 00 46 6c 6f 70 70 79 44 72 69 76 65 3a     ive.FloppyDrive:
10005038:	3a 6d 6f 74 6f 72 4f 6e 20 6e 75 6d 20 3d 20 25     :motorOn num = %
10005048:	64 0a 00 6e 75 6d 20 3d 20 25 64 0a 00 73 69 7a     d..num = %d..siz
10005058:	65 20 69 6e 20 4b 42 73 20 3d 20 25 64 0a 00 46     e in KBs = %d..F
10005068:	6c 6f 70 70 79 44 72 69 76 65 3a 3a 5f 6f 70 65     loppyDrive::_ope
10005078:	6e 20 31 0a 00 46 6c 6f 70 70 79 44 72 69 76 65     n 1..FloppyDrive
10005088:	3a 3a 5f 6f 70 65 6e 20 32 0a 00 46 6c 6f 70 70     ::_open 2..Flopp
10005098:	79 44 72 69 76 65 3a 3a 5f 6f 70 65 6e 20 33 0a     yDrive::_open 3.
100050a8:	00 46 6c 6f 70 70 79 44 72 69 76 65 3a 3a 73 65     .FloppyDrive::se
100050b8:	6c 65 63 74 0a 00 00 00 73 65 6c 65 63 74 69 6f     lect....selectio
100050c8:	6e 20 6c 6f 63 6b 65 64 20 6f 72 20 66 61 69 6c     n locked or fail
100050d8:	65 64 2e 2e 2e 0a 00 00 73 65 65 6b 3a 20 35 20     ed......seek: 5 
100050e8:	72 65 74 72 69 65 73 2c 20 63 6f 75 6c 64 20 6e     retries, could n
100050f8:	6f 74 20 63 61 6c 69 62 72 61 74 65 2e 0a 00 73     ot calibrate...s
10005108:	65 65 6b 20 28 73 65 6c 29 20 25 64 2e 0a 00 73     eek (sel) %d...s
10005118:	65 65 6b 20 28 6f 6e 29 20 25 64 2e 0a 00 73 65     eek (on) %d...se
10005128:	65 6b 20 28 31 29 2e 0a 00 73 65 65 6b 20 28 61     ek (1)...seek (a
10005138:	61 29 2e 0a 00 73 65 65 6b 20 28 62 62 29 2e 0a     a)...seek (bb)..
10005148:	00 73 65 65 6b 20 28 32 29 2e 0a 00 73 65 65 6b     .seek (2)...seek
10005158:	20 28 33 29 2e 0a 00 73 65 65 6b 20 28 34 29 2e      (3)...seek (4).
10005168:	0a 00 73 65 65 6b 20 28 6e 69 72 71 29 2e 0a 00     ..seek (nirq)...
10005178:	73 65 65 6b 20 28 35 29 2e 0a 00 73 65 65 6b 20     seek (5)...seek 
10005188:	28 73 69 64 29 2e 0a 00 73 65 65 6b 20 28 6f 66     (sid)...seek (of
10005198:	66 29 2e 0a 00 73 65 65 6b 20 28 75 6e 29 2e 0a     f)...seek (un)..
100051a8:	00 00 00 00 63 61 6c 69 62 72 61 74 65 3a 20 35     ....calibrate: 5
100051b8:	20 72 65 74 72 69 65 73 2c 20 63 6f 75 6c 64 20      retries, could 
100051c8:	6e 6f 74 20 63 61 6c 69 62 72 61 74 65 2e 0a 00     not calibrate...
100051d8:	63 61 6c 20 28 6f 6e 29 2c 20 25 64 0a 00 63 61     cal (on), %d..ca
100051e8:	6c 20 28 30 29 0a 00 63 61 6c 20 28 31 29 0a 00     l (0)..cal (1)..
100051f8:	63 61 6c 20 28 32 29 0a 00 63 61 6c 20 28 33 29     cal (2)..cal (3)
10005208:	0a 00 63 61 6c 20 28 34 29 0a 00 63 61 6c 20 28     ..cal (4)..cal (
10005218:	35 29 0a 00 20 72 65 74 72 79 3a 20 0a 00 41 62     5).. retry: ..Ab
10005228:	6f 75 74 20 74 6f 20 73 65 65 6b 2e 0a 00 53 65     out to seek...Se
10005238:	65 6b 20 64 6f 6e 65 2e 0a 00 4d 6f 74 6f 72 20     ek done...Motor 
10005248:	6f 6e 2e 0a 00 53 65 6c 65 63 74 65 64 2e 0a 00     on...Selected...
10005258:	44 4d 41 20 69 6e 69 74 27 64 2e 0a 00 73 6c 65     DMA init'd...sle
10005268:	65 70 20 64 6f 6e 65 0a 00 61 62 6f 75 74 20 74     ep done..about t
10005278:	6f 20 77 61 69 74 49 52 51 2e 0a 00 6e 6f 20 49     o waitIRQ...no I
10005288:	52 51 2e 0a 00 67 6f 74 20 49 52 51 2e 0a 00 66     RQ...got IRQ...f
10005298:	61 69 6c 75 72 65 20 72 65 61 64 69 6e 67 20 73     ailure reading s
100052a8:	74 61 74 75 73 2e 0a 00 72 65 61 64 20 72 65 73     tatus...read res
100052b8:	75 6c 74 20 62 79 74 65 73 2e 0a 00 6d 6f 74 6f     ult bytes...moto
100052c8:	72 20 6f 66 66 0a 00 75 6e 73 65 6c 65 63 74 2e     r off..unselect.
100052d8:	0a 00 43 61 63 68 65 73 20 68 61 76 65 20 62 65     ..Caches have be
100052e8:	65 6e 20 70 75 72 67 65 64 2e 0a 00 66 6c 6f 70     en purged...flop
100052f8:	70 79 20 72 65 61 64 20 63 6f 75 6e 74 20 6e 6f     py read count no
10005308:	74 20 31 00 46 6c 6f 70 70 79 44 72 69 76 65 3a     t 1.FloppyDrive:
10005318:	3a 72 65 61 64 20 63 61 6c 6c 65 64 2e 0a 00 43     :read called...C
10005328:	20 30 78 25 58 2c 20 48 20 30 78 25 58 2c 20 53      0x%X, H 0x%X, S
10005338:	20 30 78 25 58 0a 00 72 65 61 64 69 6e 67 20 74      0x%X..reading t
10005348:	72 61 63 6b 2e 0a 00 90                             rack....

10005350 <vtable for FloppyDrive>:
	...
	10005358: R_386_32	FloppyDrive::~FloppyDrive()
	1000535c: R_386_32	FloppyDrive::~FloppyDrive()
	10005360: R_386_32	FloppyDrive::open(int, int, void*)
	10005364: R_386_32	FloppyDrive::close(int, int, void*)
	10005368: R_386_32	Device::hibernate()
	1000536c: R_386_32	Device::wake()
	10005370: R_386_32	Device::detect()
	10005374: R_386_32	Device::disableLegacy()
	10005378: R_386_32	Device::powerSaving(PowerSavingLevel)
	1000537c: R_386_32	FloppyDrive::eject()
	10005380: R_386_32	FloppyDrive::read(unsigned long long, int, void*)
	10005384: R_386_32	FloppyDrive::write(unsigned long long, int, void*)

10005388 <vtable for Floppy>:
	...
	10005390: R_386_32	Floppy::~Floppy()
	10005394: R_386_32	Floppy::~Floppy()
	10005398: R_386_32	Floppy::open(int, int, void*)
	1000539c: R_386_32	Floppy::close(int, int, void*)
	100053a0: R_386_32	Device::hibernate()
	100053a4: R_386_32	Device::wake()
	100053a8: R_386_32	Device::detect()
	100053ac: R_386_32	Device::disableLegacy()
	100053b0: R_386_32	Device::powerSaving(PowerSavingLevel)

100053b4 <PHYS_RAM_TABLE_SIZE>:
100053b4:	13 05 00 00                                         ....

100053b8 <PHYS_HIGHEST_UNUSED_ADDRESS>:
100053b8:	24 05 00 00                                         $...

100053bc <PHYS_RAM_TABLE>:
100053bc:	00 06 00 00                                         ....

100053c0 <PHYS_DMA_MEMORY_1>:
100053c0:	00 00 01 00                                         ....

100053c4 <PHYS_PHYS_PAGE_BITMAP>:
100053c4:	00 00 02 00                                         ....

100053c8 <PHYS_VIRT_PAGE_BITMAP>:
100053c8:	00 00 04 00                                         ....

100053cc <PHYS_DMA_MEMORY_2>:
100053cc:	00 00 06 00                                         ....

100053d0 <PHYS_ALLOCED_VIRT_PAGES>:
100053d0:	00 00 10 00                                         ....

100053d4 <PHYS_KRNL_PAGE_DIRECTORY>:
100053d4:	00 10 00 00                                         ....

100053d8 <VIRT_KERNEL_BASE>:
100053d8:	00 00 00 c0                                         ....

100053dc <VIRT_LOW_MEGS>:
100053dc:	00 00 00 c2                                         ....

100053e0 <VIRT_CPU_SPECIFIC>:
100053e0:	00 00 40 c2                                         ..@.

100053e4 <VIRT_RECURSIVE_SPOT_1>:
100053e4:	00 00 80 c2                                         ....

100053e8 <VIRT_RECURSIVE_SPOT_2>:
100053e8:	00 00 c0 c2                                         ....

100053ec <VIRT_DMA_MEMORY_1>:
100053ec:	00 00 01 c2                                         ....

100053f0 <SIZE_DMA_MEMORY_1>:
100053f0:	00 00 01 00                                         ....

100053f4 <VIRT_DMA_MEMORY_2>:
100053f4:	00 00 06 c2                                         ....

100053f8 <SIZE_DMA_MEMORY_2>:
100053f8:	00 00 02 00                                         ....

100053fc <VIRT_KRNL_PAGE_DIRECTORY>:
100053fc:	00 10 00 c2                                         ....

10005400 <VIRT_PHYS_PAGE_BITMAP>:
10005400:	00 00 02 c2                                         ....

10005404 <SIZE_PHYS_PAGE_BITMAP>:
10005404:	00 00 02 00                                         ....

10005408 <VIRT_VIRT_PAGE_BITMAP>:
10005408:	00 00 04 c2                                         ....

1000540c <SIZE_VIRT_PAGE_BITMAP>:
1000540c:	00 80 00 00                                         ....

10005410 <VIRT_RAM_TABLE>:
10005410:	00 06 00 c2                                         ....

10005414 <VIRT_RAM_TABLE_SIZE>:
10005414:	13 05 00 c2                                         ....

10005418 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005418:	24 05 00 c2                                         $...

1000541c <SIZE_APP_STACK_USER>:
1000541c:	00 00 18 00                                         ....

10005420 <SIZE_APP_STACK_KRNL>:
10005420:	00 00 08 00                                         ....

10005424 <SIZE_APP_STACK_TOTAL>:
10005424:	00 00 20 00                                         .. .

10005428 <VIRT_APP_DATA>:
10005428:	00 00 00 10                                         ....

1000542c <VIRT_APP_STACK_USER_TOP>:
1000542c:	00 00 00 02                                         ....

10005430 <VIRT_APP_STACK_KRNL_TOP>:
10005430:	00 00 e8 01                                         ....

10005434 <VIRT_HEAP_MIN>:
10005434:	00 00 00 c8                                         ....

10005438 <VIRT_HEAP_MAX>:
10005438:	ff ff ff ef                                         ....

1000543c <VIRT_SBRK_MIN>:
1000543c:	00 00 00 f0                                         ....

10005440 <VIRT_SBRK_MAX>:
10005440:	00 00 c0 ff                                         ....

10005444 <VIRT_ALLOCED_VIRT_PAGES>:
10005444:	00 00 10 c2                                         ....

10005448 <VIRT_ACPI_DRIVER>:
10005448:	00 40 48 c2                                         .@H.

1000544c <TERMINAL_KEYBUFFER_IN_SIZE>:
1000544c:	96 00 00 00                                         ....

10005450 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005450:	2c 01 00 00 47 61 6d 65 70 6f 72 74 00 66 90 90     ,...Gameport.f..

10005460 <vtable for Gameport>:
	...
	10005468: R_386_32	Gameport::~Gameport()
	1000546c: R_386_32	Gameport::~Gameport()
	10005470: R_386_32	Gameport::open(int, int, void*)
	10005474: R_386_32	Gameport::close(int, int, void*)
	10005478: R_386_32	Device::hibernate()
	1000547c: R_386_32	Device::wake()
	10005480: R_386_32	Gameport::detect()
	10005484: R_386_32	Device::disableLegacy()
	10005488: R_386_32	Device::powerSaving(PowerSavingLevel)
	1000548c: R_386_32	Gameport::read(int)
10005490:	a8 fe ff ff 00 00 00 00 00 00 00 00                 ............	10005498: R_386_32	non-virtual thunk to Gameport::read(int)

1000549c <vtable for JoystickHost>:
	...
	100054a4: R_386_32	__cxa_pure_virtual

100054a8 <PHYS_RAM_TABLE_SIZE>:
100054a8:	13 05 00 00                                         ....

100054ac <PHYS_HIGHEST_UNUSED_ADDRESS>:
100054ac:	24 05 00 00                                         $...

100054b0 <PHYS_RAM_TABLE>:
100054b0:	00 06 00 00                                         ....

100054b4 <PHYS_DMA_MEMORY_1>:
100054b4:	00 00 01 00                                         ....

100054b8 <PHYS_PHYS_PAGE_BITMAP>:
100054b8:	00 00 02 00                                         ....

100054bc <PHYS_VIRT_PAGE_BITMAP>:
100054bc:	00 00 04 00                                         ....

100054c0 <PHYS_DMA_MEMORY_2>:
100054c0:	00 00 06 00                                         ....

100054c4 <PHYS_ALLOCED_VIRT_PAGES>:
100054c4:	00 00 10 00                                         ....

100054c8 <PHYS_KRNL_PAGE_DIRECTORY>:
100054c8:	00 10 00 00                                         ....

100054cc <VIRT_KERNEL_BASE>:
100054cc:	00 00 00 c0                                         ....

100054d0 <VIRT_LOW_MEGS>:
100054d0:	00 00 00 c2                                         ....

100054d4 <VIRT_CPU_SPECIFIC>:
100054d4:	00 00 40 c2                                         ..@.

100054d8 <VIRT_RECURSIVE_SPOT_1>:
100054d8:	00 00 80 c2                                         ....

100054dc <VIRT_RECURSIVE_SPOT_2>:
100054dc:	00 00 c0 c2                                         ....

100054e0 <VIRT_DMA_MEMORY_1>:
100054e0:	00 00 01 c2                                         ....

100054e4 <SIZE_DMA_MEMORY_1>:
100054e4:	00 00 01 00                                         ....

100054e8 <VIRT_DMA_MEMORY_2>:
100054e8:	00 00 06 c2                                         ....

100054ec <SIZE_DMA_MEMORY_2>:
100054ec:	00 00 02 00                                         ....

100054f0 <VIRT_KRNL_PAGE_DIRECTORY>:
100054f0:	00 10 00 c2                                         ....

100054f4 <VIRT_PHYS_PAGE_BITMAP>:
100054f4:	00 00 02 c2                                         ....

100054f8 <SIZE_PHYS_PAGE_BITMAP>:
100054f8:	00 00 02 00                                         ....

100054fc <VIRT_VIRT_PAGE_BITMAP>:
100054fc:	00 00 04 c2                                         ....

10005500 <SIZE_VIRT_PAGE_BITMAP>:
10005500:	00 80 00 00                                         ....

10005504 <VIRT_RAM_TABLE>:
10005504:	00 06 00 c2                                         ....

10005508 <VIRT_RAM_TABLE_SIZE>:
10005508:	13 05 00 c2                                         ....

1000550c <VIRT_HIGHEST_UNUSED_ADDRESS>:
1000550c:	24 05 00 c2                                         $...

10005510 <SIZE_APP_STACK_USER>:
10005510:	00 00 18 00                                         ....

10005514 <SIZE_APP_STACK_KRNL>:
10005514:	00 00 08 00                                         ....

10005518 <SIZE_APP_STACK_TOTAL>:
10005518:	00 00 20 00                                         .. .

1000551c <VIRT_APP_DATA>:
1000551c:	00 00 00 10                                         ....

10005520 <VIRT_APP_STACK_USER_TOP>:
10005520:	00 00 00 02                                         ....

10005524 <VIRT_APP_STACK_KRNL_TOP>:
10005524:	00 00 e8 01                                         ....

10005528 <VIRT_HEAP_MIN>:
10005528:	00 00 00 c8                                         ....

1000552c <VIRT_HEAP_MAX>:
1000552c:	ff ff ff ef                                         ....

10005530 <VIRT_SBRK_MIN>:
10005530:	00 00 00 f0                                         ....

10005534 <VIRT_SBRK_MAX>:
10005534:	00 00 c0 ff                                         ....

10005538 <VIRT_ALLOCED_VIRT_PAGES>:
10005538:	00 00 10 c2                                         ....

1000553c <VIRT_ACPI_DRIVER>:
1000553c:	00 40 48 c2                                         .@H.

10005540 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005540:	96 00 00 00                                         ....

10005544 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005544:	2c 01 00 00                                         ,...

10005548 <CSWTCH.8>:
10005548:	00 02 04 06 c0 c4 c8 cc                             ........

10005550 <CSWTCH.9>:
10005550:	01 03 05 07 c2 c6 ca ce                             ........

10005558 <CSWTCH.10>:
10005558:	87 83 81 82 8f 8b 89 8a 4e 6f 74 20 69 6e 20 72     ........Not in r
10005568:	61 6e 67 65 2e 0a 00 90                             ange....

10005570 <vtable for DMA>:
	...
	10005578: R_386_32	DMA::~DMA()
	1000557c: R_386_32	DMA::~DMA()
	10005580: R_386_32	DMA::open(int, int, void*)
	10005584: R_386_32	DMA::close(int, int, void*)
	10005588: R_386_32	Device::hibernate()
	1000558c: R_386_32	Device::wake()
	10005590: R_386_32	Device::detect()
	10005594: R_386_32	Device::disableLegacy()
	10005598: R_386_32	Device::powerSaving(PowerSavingLevel)

1000559c <PHYS_RAM_TABLE_SIZE>:
1000559c:	13 05 00 00                                         ....

100055a0 <PHYS_HIGHEST_UNUSED_ADDRESS>:
100055a0:	24 05 00 00                                         $...

100055a4 <PHYS_RAM_TABLE>:
100055a4:	00 06 00 00                                         ....

100055a8 <PHYS_DMA_MEMORY_1>:
100055a8:	00 00 01 00                                         ....

100055ac <PHYS_PHYS_PAGE_BITMAP>:
100055ac:	00 00 02 00                                         ....

100055b0 <PHYS_VIRT_PAGE_BITMAP>:
100055b0:	00 00 04 00                                         ....

100055b4 <PHYS_DMA_MEMORY_2>:
100055b4:	00 00 06 00                                         ....

100055b8 <PHYS_ALLOCED_VIRT_PAGES>:
100055b8:	00 00 10 00                                         ....

100055bc <PHYS_KRNL_PAGE_DIRECTORY>:
100055bc:	00 10 00 00                                         ....

100055c0 <VIRT_KERNEL_BASE>:
100055c0:	00 00 00 c0                                         ....

100055c4 <VIRT_LOW_MEGS>:
100055c4:	00 00 00 c2                                         ....

100055c8 <VIRT_CPU_SPECIFIC>:
100055c8:	00 00 40 c2                                         ..@.

100055cc <VIRT_RECURSIVE_SPOT_1>:
100055cc:	00 00 80 c2                                         ....

100055d0 <VIRT_RECURSIVE_SPOT_2>:
100055d0:	00 00 c0 c2                                         ....

100055d4 <VIRT_DMA_MEMORY_1>:
100055d4:	00 00 01 c2                                         ....

100055d8 <SIZE_DMA_MEMORY_1>:
100055d8:	00 00 01 00                                         ....

100055dc <VIRT_DMA_MEMORY_2>:
100055dc:	00 00 06 c2                                         ....

100055e0 <SIZE_DMA_MEMORY_2>:
100055e0:	00 00 02 00                                         ....

100055e4 <VIRT_KRNL_PAGE_DIRECTORY>:
100055e4:	00 10 00 c2                                         ....

100055e8 <VIRT_PHYS_PAGE_BITMAP>:
100055e8:	00 00 02 c2                                         ....

100055ec <SIZE_PHYS_PAGE_BITMAP>:
100055ec:	00 00 02 00                                         ....

100055f0 <VIRT_VIRT_PAGE_BITMAP>:
100055f0:	00 00 04 c2                                         ....

100055f4 <SIZE_VIRT_PAGE_BITMAP>:
100055f4:	00 80 00 00                                         ....

100055f8 <VIRT_RAM_TABLE>:
100055f8:	00 06 00 c2                                         ....

100055fc <VIRT_RAM_TABLE_SIZE>:
100055fc:	13 05 00 c2                                         ....

10005600 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005600:	24 05 00 c2                                         $...

10005604 <SIZE_APP_STACK_USER>:
10005604:	00 00 18 00                                         ....

10005608 <SIZE_APP_STACK_KRNL>:
10005608:	00 00 08 00                                         ....

1000560c <SIZE_APP_STACK_TOTAL>:
1000560c:	00 00 20 00                                         .. .

10005610 <VIRT_APP_DATA>:
10005610:	00 00 00 10                                         ....

10005614 <VIRT_APP_STACK_USER_TOP>:
10005614:	00 00 00 02                                         ....

10005618 <VIRT_APP_STACK_KRNL_TOP>:
10005618:	00 00 e8 01                                         ....

1000561c <VIRT_HEAP_MIN>:
1000561c:	00 00 00 c8                                         ....

10005620 <VIRT_HEAP_MAX>:
10005620:	ff ff ff ef                                         ....

10005624 <VIRT_SBRK_MIN>:
10005624:	00 00 00 f0                                         ....

10005628 <VIRT_SBRK_MAX>:
10005628:	00 00 c0 ff                                         ....

1000562c <VIRT_ALLOCED_VIRT_PAGES>:
1000562c:	00 00 10 c2                                         ....

10005630 <VIRT_ACPI_DRIVER>:
10005630:	00 40 48 c2                                         .@H.

10005634 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005634:	96 00 00 00                                         ....

10005638 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005638:	2c 01 00 00                                         ,...

1000563c <vtable for PS2>:
	...
	10005644: R_386_32	PS2::~PS2()
	10005648: R_386_32	PS2::~PS2()
	1000564c: R_386_32	PS2::open(int, int, void*)
	10005650: R_386_32	PS2::close(int, int, void*)
	10005654: R_386_32	Device::hibernate()
	10005658: R_386_32	Device::wake()
	1000565c: R_386_32	PS2::detect()
	10005660: R_386_32	Device::disableLegacy()
	10005664: R_386_32	Device::powerSaving(PowerSavingLevel)
10005668:	66 90 66 90 66 90 66 90 66 90 66 90 66 90 66 90     f.f.f.f.f.f.f.f.
10005678:	66 90 66 90 66 90 66 90                             f.f.f.f.

10005680 <PHYS_RAM_TABLE_SIZE>:
10005680:	13 05 00 00                                         ....

10005684 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005684:	24 05 00 00                                         $...

10005688 <PHYS_RAM_TABLE>:
10005688:	00 06 00 00                                         ....

1000568c <PHYS_DMA_MEMORY_1>:
1000568c:	00 00 01 00                                         ....

10005690 <PHYS_PHYS_PAGE_BITMAP>:
10005690:	00 00 02 00                                         ....

10005694 <PHYS_VIRT_PAGE_BITMAP>:
10005694:	00 00 04 00                                         ....

10005698 <PHYS_DMA_MEMORY_2>:
10005698:	00 00 06 00                                         ....

1000569c <PHYS_ALLOCED_VIRT_PAGES>:
1000569c:	00 00 10 00                                         ....

100056a0 <PHYS_KRNL_PAGE_DIRECTORY>:
100056a0:	00 10 00 00                                         ....

100056a4 <VIRT_KERNEL_BASE>:
100056a4:	00 00 00 c0                                         ....

100056a8 <VIRT_LOW_MEGS>:
100056a8:	00 00 00 c2                                         ....

100056ac <VIRT_CPU_SPECIFIC>:
100056ac:	00 00 40 c2                                         ..@.

100056b0 <VIRT_RECURSIVE_SPOT_1>:
100056b0:	00 00 80 c2                                         ....

100056b4 <VIRT_RECURSIVE_SPOT_2>:
100056b4:	00 00 c0 c2                                         ....

100056b8 <VIRT_DMA_MEMORY_1>:
100056b8:	00 00 01 c2                                         ....

100056bc <SIZE_DMA_MEMORY_1>:
100056bc:	00 00 01 00                                         ....

100056c0 <VIRT_DMA_MEMORY_2>:
100056c0:	00 00 06 c2                                         ....

100056c4 <SIZE_DMA_MEMORY_2>:
100056c4:	00 00 02 00                                         ....

100056c8 <VIRT_KRNL_PAGE_DIRECTORY>:
100056c8:	00 10 00 c2                                         ....

100056cc <VIRT_PHYS_PAGE_BITMAP>:
100056cc:	00 00 02 c2                                         ....

100056d0 <SIZE_PHYS_PAGE_BITMAP>:
100056d0:	00 00 02 00                                         ....

100056d4 <VIRT_VIRT_PAGE_BITMAP>:
100056d4:	00 00 04 c2                                         ....

100056d8 <SIZE_VIRT_PAGE_BITMAP>:
100056d8:	00 80 00 00                                         ....

100056dc <VIRT_RAM_TABLE>:
100056dc:	00 06 00 c2                                         ....

100056e0 <VIRT_RAM_TABLE_SIZE>:
100056e0:	13 05 00 c2                                         ....

100056e4 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100056e4:	24 05 00 c2                                         $...

100056e8 <SIZE_APP_STACK_USER>:
100056e8:	00 00 18 00                                         ....

100056ec <SIZE_APP_STACK_KRNL>:
100056ec:	00 00 08 00                                         ....

100056f0 <SIZE_APP_STACK_TOTAL>:
100056f0:	00 00 20 00                                         .. .

100056f4 <VIRT_APP_DATA>:
100056f4:	00 00 00 10                                         ....

100056f8 <VIRT_APP_STACK_USER_TOP>:
100056f8:	00 00 00 02                                         ....

100056fc <VIRT_APP_STACK_KRNL_TOP>:
100056fc:	00 00 e8 01                                         ....

10005700 <VIRT_HEAP_MIN>:
10005700:	00 00 00 c8                                         ....

10005704 <VIRT_HEAP_MAX>:
10005704:	ff ff ff ef                                         ....

10005708 <VIRT_SBRK_MIN>:
10005708:	00 00 00 f0                                         ....

1000570c <VIRT_SBRK_MAX>:
1000570c:	00 00 c0 ff                                         ....

10005710 <VIRT_ALLOCED_VIRT_PAGES>:
10005710:	00 00 10 c2                                         ....

10005714 <VIRT_ACPI_DRIVER>:
10005714:	00 40 48 c2                                         .@H.

10005718 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005718:	96 00 00 00                                         ....

1000571c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000571c:	2c 01 00 00                                         ,...

10005720 <PS2Keyboard::internalMapperLower>:
10005720:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10005730:	20 20 20 20 20 71 31 20 20 20 7a 73 61 77 32 20          q1   zsaw2 
10005740:	20 63 78 64 65 34 33 20 20 20 76 66 74 72 35 20      cxde43   vftr5 
10005750:	20 6e 62 68 67 79 36 20 20 20 6d 6a 75 37 38 20      nbhgy6   mju78 
10005760:	20 2c 6b 69 6f 30 39 20 20 2e 2f 6c 3b 70 2d 20      ,kio09  ./l;p- 
10005770:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10005780:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10005790:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
100057a0:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10005820 <PS2Keyboard::internalMapperUpper>:
10005820:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10005830:	20 20 20 20 20 51 21 20 20 20 5a 53 41 57 40 20          Q!   ZSAW@ 
10005840:	20 43 58 44 45 24 23 20 20 20 56 46 54 52 25 20      CXDE$#   VFTR% 
10005850:	20 4e 42 48 47 59 5e 20 20 20 4d 4a 55 26 2a 20      NBHGY^   MJU&* 
10005860:	20 3c 4b 49 4f 29 28 20 20 3e 3f 4c 3a 50 5f 20      <KIO)(  >?L:P_ 
10005870:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10005880:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10005890:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
100058a0:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10005920 <PS2Keyboard::internalMapCapLower>:
10005920:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10005930:	20 20 20 20 20 51 31 20 20 20 5a 53 41 57 32 20          Q1   ZSAW2 
10005940:	20 43 58 44 45 34 33 20 20 20 56 46 54 52 35 20      CXDE43   VFTR5 
10005950:	20 4e 42 48 47 59 36 20 20 20 4d 4a 55 37 38 20      NBHGY6   MJU78 
10005960:	20 2c 4b 49 4f 30 39 20 20 2e 2f 4c 3b 50 2d 20      ,KIO09  ./L;P- 
10005970:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10005980:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10005990:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
100059a0:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10005a20 <PS2Keyboard::internalMapCapUpper>:
10005a20:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10005a30:	20 20 20 20 20 51 21 20 20 20 7a 73 61 77 40 20          Q!   zsaw@ 
10005a40:	20 63 78 64 65 24 23 20 20 20 76 66 74 72 25 20      cxde$#   vftr% 
10005a50:	20 6e 62 68 67 79 5e 20 20 20 6d 6a 75 26 2a 20      nbhgy^   mju&* 
10005a60:	20 3c 6b 69 6f 29 28 20 20 3e 3f 6c 3a 70 5f 20      <kio)(  >?l:p_ 
10005a70:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10005a80:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10005a90:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10005aa0:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10005b20 <PS2Keyboard::internalMapperLowerBad>:
10005b20:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10005b30:	71 77 65 72 74 79 75 69 6f 70 5b 5d 20 20 61 73     qwertyuiop[]  as
10005b40:	64 66 67 68 6a 6b 6c 3b 27 60 20 5c 7a 78 63 76     dfghjkl;'` \zxcv
10005b50:	62 6e 6d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     bnm,./ *        
10005b60:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10005b70:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10005b80:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005b90:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005ba0:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10005bb0:	51 57 45 52 54 59 55 49 4f 50 7b 7d 20 20 41 53     QWERTYUIOP{}  AS
10005bc0:	44 46 47 48 4a 4b 4c 3a 22 7e 20 7c 5a 58 43 56     DFGHJKL:"~ |ZXCV
10005bd0:	42 4e 4d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     BNM<>? *        
10005be0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10005bf0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10005c00:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005c10:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005c20:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10005c30:	51 57 45 52 54 59 55 49 4f 50 5b 5d 20 20 41 53     QWERTYUIOP[]  AS
10005c40:	44 46 47 48 4a 4b 4c 3b 27 60 20 5c 5a 58 43 56     DFGHJKL;'` \ZXCV
10005c50:	42 4e 4d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     BNM,./ *        
10005c60:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10005c70:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10005c80:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005c90:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005ca0:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10005cb0:	71 77 65 72 74 79 75 69 6f 70 7b 7d 20 20 61 73     qwertyuiop{}  as
10005cc0:	64 66 67 68 6a 6b 6c 3a 22 7e 20 7c 7a 78 63 76     dfghjkl:"~ |zxcv
10005cd0:	62 6e 6d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     bnm<>? *        
10005ce0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10005cf0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10005d00:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005d10:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005d20:	00 66 90 90                                         .f..

10005d24 <vtable for PS2Keyboard>:
	...
	10005d2c: R_386_32	PS2Keyboard::~PS2Keyboard()
	10005d30: R_386_32	PS2Keyboard::~PS2Keyboard()
	10005d34: R_386_32	PS2Keyboard::open(int, int, void*)
	10005d38: R_386_32	PS2Keyboard::close(int, int, void*)
	10005d3c: R_386_32	Device::hibernate()
	10005d40: R_386_32	Device::wake()
	10005d44: R_386_32	Device::detect()
	10005d48: R_386_32	Device::disableLegacy()
	10005d4c: R_386_32	Device::powerSaving(PowerSavingLevel)
	10005d50: R_386_32	PS2Keyboard::setRepeatRate(int)
	10005d54: R_386_32	PS2Keyboard::setRepeatDelay(int)

10005d58 <PHYS_RAM_TABLE_SIZE>:
10005d58:	13 05 00 00                                         ....

10005d5c <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005d5c:	24 05 00 00                                         $...

10005d60 <PHYS_RAM_TABLE>:
10005d60:	00 06 00 00                                         ....

10005d64 <PHYS_DMA_MEMORY_1>:
10005d64:	00 00 01 00                                         ....

10005d68 <PHYS_PHYS_PAGE_BITMAP>:
10005d68:	00 00 02 00                                         ....

10005d6c <PHYS_VIRT_PAGE_BITMAP>:
10005d6c:	00 00 04 00                                         ....

10005d70 <PHYS_DMA_MEMORY_2>:
10005d70:	00 00 06 00                                         ....

10005d74 <PHYS_ALLOCED_VIRT_PAGES>:
10005d74:	00 00 10 00                                         ....

10005d78 <PHYS_KRNL_PAGE_DIRECTORY>:
10005d78:	00 10 00 00                                         ....

10005d7c <VIRT_KERNEL_BASE>:
10005d7c:	00 00 00 c0                                         ....

10005d80 <VIRT_LOW_MEGS>:
10005d80:	00 00 00 c2                                         ....

10005d84 <VIRT_CPU_SPECIFIC>:
10005d84:	00 00 40 c2                                         ..@.

10005d88 <VIRT_RECURSIVE_SPOT_1>:
10005d88:	00 00 80 c2                                         ....

10005d8c <VIRT_RECURSIVE_SPOT_2>:
10005d8c:	00 00 c0 c2                                         ....

10005d90 <VIRT_DMA_MEMORY_1>:
10005d90:	00 00 01 c2                                         ....

10005d94 <SIZE_DMA_MEMORY_1>:
10005d94:	00 00 01 00                                         ....

10005d98 <VIRT_DMA_MEMORY_2>:
10005d98:	00 00 06 c2                                         ....

10005d9c <SIZE_DMA_MEMORY_2>:
10005d9c:	00 00 02 00                                         ....

10005da0 <VIRT_KRNL_PAGE_DIRECTORY>:
10005da0:	00 10 00 c2                                         ....

10005da4 <VIRT_PHYS_PAGE_BITMAP>:
10005da4:	00 00 02 c2                                         ....

10005da8 <SIZE_PHYS_PAGE_BITMAP>:
10005da8:	00 00 02 00                                         ....

10005dac <VIRT_VIRT_PAGE_BITMAP>:
10005dac:	00 00 04 c2                                         ....

10005db0 <SIZE_VIRT_PAGE_BITMAP>:
10005db0:	00 80 00 00                                         ....

10005db4 <VIRT_RAM_TABLE>:
10005db4:	00 06 00 c2                                         ....

10005db8 <VIRT_RAM_TABLE_SIZE>:
10005db8:	13 05 00 c2                                         ....

10005dbc <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005dbc:	24 05 00 c2                                         $...

10005dc0 <SIZE_APP_STACK_USER>:
10005dc0:	00 00 18 00                                         ....

10005dc4 <SIZE_APP_STACK_KRNL>:
10005dc4:	00 00 08 00                                         ....

10005dc8 <SIZE_APP_STACK_TOTAL>:
10005dc8:	00 00 20 00                                         .. .

10005dcc <VIRT_APP_DATA>:
10005dcc:	00 00 00 10                                         ....

10005dd0 <VIRT_APP_STACK_USER_TOP>:
10005dd0:	00 00 00 02                                         ....

10005dd4 <VIRT_APP_STACK_KRNL_TOP>:
10005dd4:	00 00 e8 01                                         ....

10005dd8 <VIRT_HEAP_MIN>:
10005dd8:	00 00 00 c8                                         ....

10005ddc <VIRT_HEAP_MAX>:
10005ddc:	ff ff ff ef                                         ....

10005de0 <VIRT_SBRK_MIN>:
10005de0:	00 00 00 f0                                         ....

10005de4 <VIRT_SBRK_MAX>:
10005de4:	00 00 c0 ff                                         ....

10005de8 <VIRT_ALLOCED_VIRT_PAGES>:
10005de8:	00 00 10 c2                                         ....

10005dec <VIRT_ACPI_DRIVER>:
10005dec:	00 40 48 c2                                         .@H.

10005df0 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005df0:	96 00 00 00                                         ....

10005df4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005df4:	2c 01 00 00                                         ,...

10005df8 <vtable for PS2Mouse>:
	...
	10005e00: R_386_32	PS2Mouse::~PS2Mouse()
	10005e04: R_386_32	PS2Mouse::~PS2Mouse()
	10005e08: R_386_32	PS2Mouse::open(int, int, void*)
	10005e0c: R_386_32	PS2Mouse::close(int, int, void*)
	10005e10: R_386_32	Device::hibernate()
	10005e14: R_386_32	Device::wake()
	10005e18: R_386_32	PS2Mouse::detect()
	10005e1c: R_386_32	Device::disableLegacy()
	10005e20: R_386_32	Device::powerSaving(PowerSavingLevel)

10005e24 <PHYS_RAM_TABLE_SIZE>:
10005e24:	13 05 00 00                                         ....

10005e28 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005e28:	24 05 00 00                                         $...

10005e2c <PHYS_RAM_TABLE>:
10005e2c:	00 06 00 00                                         ....

10005e30 <PHYS_DMA_MEMORY_1>:
10005e30:	00 00 01 00                                         ....

10005e34 <PHYS_PHYS_PAGE_BITMAP>:
10005e34:	00 00 02 00                                         ....

10005e38 <PHYS_VIRT_PAGE_BITMAP>:
10005e38:	00 00 04 00                                         ....

10005e3c <PHYS_DMA_MEMORY_2>:
10005e3c:	00 00 06 00                                         ....

10005e40 <PHYS_ALLOCED_VIRT_PAGES>:
10005e40:	00 00 10 00                                         ....

10005e44 <PHYS_KRNL_PAGE_DIRECTORY>:
10005e44:	00 10 00 00                                         ....

10005e48 <VIRT_KERNEL_BASE>:
10005e48:	00 00 00 c0                                         ....

10005e4c <VIRT_LOW_MEGS>:
10005e4c:	00 00 00 c2                                         ....

10005e50 <VIRT_CPU_SPECIFIC>:
10005e50:	00 00 40 c2                                         ..@.

10005e54 <VIRT_RECURSIVE_SPOT_1>:
10005e54:	00 00 80 c2                                         ....

10005e58 <VIRT_RECURSIVE_SPOT_2>:
10005e58:	00 00 c0 c2                                         ....

10005e5c <VIRT_DMA_MEMORY_1>:
10005e5c:	00 00 01 c2                                         ....

10005e60 <SIZE_DMA_MEMORY_1>:
10005e60:	00 00 01 00                                         ....

10005e64 <VIRT_DMA_MEMORY_2>:
10005e64:	00 00 06 c2                                         ....

10005e68 <SIZE_DMA_MEMORY_2>:
10005e68:	00 00 02 00                                         ....

10005e6c <VIRT_KRNL_PAGE_DIRECTORY>:
10005e6c:	00 10 00 c2                                         ....

10005e70 <VIRT_PHYS_PAGE_BITMAP>:
10005e70:	00 00 02 c2                                         ....

10005e74 <SIZE_PHYS_PAGE_BITMAP>:
10005e74:	00 00 02 00                                         ....

10005e78 <VIRT_VIRT_PAGE_BITMAP>:
10005e78:	00 00 04 c2                                         ....

10005e7c <SIZE_VIRT_PAGE_BITMAP>:
10005e7c:	00 80 00 00                                         ....

10005e80 <VIRT_RAM_TABLE>:
10005e80:	00 06 00 c2                                         ....

10005e84 <VIRT_RAM_TABLE_SIZE>:
10005e84:	13 05 00 c2                                         ....

10005e88 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005e88:	24 05 00 c2                                         $...

10005e8c <SIZE_APP_STACK_USER>:
10005e8c:	00 00 18 00                                         ....

10005e90 <SIZE_APP_STACK_KRNL>:
10005e90:	00 00 08 00                                         ....

10005e94 <SIZE_APP_STACK_TOTAL>:
10005e94:	00 00 20 00                                         .. .

10005e98 <VIRT_APP_DATA>:
10005e98:	00 00 00 10                                         ....

10005e9c <VIRT_APP_STACK_USER_TOP>:
10005e9c:	00 00 00 02                                         ....

10005ea0 <VIRT_APP_STACK_KRNL_TOP>:
10005ea0:	00 00 e8 01                                         ....

10005ea4 <VIRT_HEAP_MIN>:
10005ea4:	00 00 00 c8                                         ....

10005ea8 <VIRT_HEAP_MAX>:
10005ea8:	ff ff ff ef                                         ....

10005eac <VIRT_SBRK_MIN>:
10005eac:	00 00 00 f0                                         ....

10005eb0 <VIRT_SBRK_MAX>:
10005eb0:	00 00 c0 ff                                         ....

10005eb4 <VIRT_ALLOCED_VIRT_PAGES>:
10005eb4:	00 00 10 c2                                         ....

10005eb8 <VIRT_ACPI_DRIVER>:
10005eb8:	00 40 48 c2                                         .@H.

10005ebc <TERMINAL_KEYBUFFER_IN_SIZE>:
10005ebc:	96 00 00 00                                         ....

10005ec0 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005ec0:	2c 01 00 00                                         ,...

10005ec4 <vtable for PS2Port>:
	...
	10005ecc: R_386_32	PS2Port::~PS2Port()
	10005ed0: R_386_32	PS2Port::~PS2Port()
	10005ed4: R_386_32	PS2Port::open(int, int, void*)
	10005ed8: R_386_32	PS2Port::close(int, int, void*)
	10005edc: R_386_32	Device::hibernate()
	10005ee0: R_386_32	Device::wake()
	10005ee4: R_386_32	PS2Port::detect()
	10005ee8: R_386_32	Device::disableLegacy()
	10005eec: R_386_32	Device::powerSaving(PowerSavingLevel)
