
packages/system/32/0002/legacy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	realstart(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <realstart(void*)>:
10000017:	53                   	push   ebx
10000018:	83 ec 14             	sub    esp,0x14
1000001b:	68 78 25 00 10       	push   0x10002578	1000001c: R_386_32	.text
10000020:	e8 fc ff ff ff       	call   10000021 <realstart(void*)+0xa>	10000021: R_386_PC32	Dbg::kprintf(char const*, ...)
10000025:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
1000002c:	e8 fc ff ff ff       	call   1000002d <realstart(void*)+0x16>	1000002d: R_386_PC32	malloc
10000031:	89 04 24             	mov    DWORD PTR [esp],eax
10000034:	89 c3                	mov    ebx,eax
10000036:	e8 fc ff ff ff       	call   10000037 <realstart(void*)+0x20>	10000037: R_386_PC32	ISA::ISA()
1000003b:	58                   	pop    eax
1000003c:	5a                   	pop    edx
1000003d:	53                   	push   ebx
1000003e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000042:	e8 fc ff ff ff       	call   10000043 <realstart(void*)+0x2c>	10000043: R_386_PC32	Device::addChild(Device*)
10000047:	6a 00                	push   0x0
10000049:	8b 03                	mov    eax,DWORD PTR [ebx]
1000004b:	6a 00                	push   0x0
1000004d:	6a 00                	push   0x0
1000004f:	53                   	push   ebx
10000050:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000053:	83 c4 28             	add    esp,0x28
10000056:	5b                   	pop    ebx
10000057:	c3                   	ret    

10000058 <ISA::ISA()>:
10000058:	55                   	push   ebp
10000059:	89 e5                	mov    ebp,esp
1000005b:	83 ec 08             	sub    esp,0x8
1000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000061:	83 ec 08             	sub    esp,0x8
10000064:	68 00 00 00 00       	push   0x0	10000065: R_386_32	busname
10000069:	50                   	push   eax
1000006a:	e8 fc ff ff ff       	call   1000006b <ISA::ISA()+0x13>	1000006b: R_386_PC32	Bus::Bus(char const*)
1000006f:	83 c4 10             	add    esp,0x10
10000072:	ba 08 00 00 00       	mov    edx,0x8	10000073: R_386_32	vtable for ISA
10000077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000007a:	89 10                	mov    DWORD PTR [eax],edx
1000007c:	90                   	nop
1000007d:	c9                   	leave  
1000007e:	c3                   	ret    
1000007f:	90                   	nop

10000080 <ISA::open(int, int, void*)>:
10000080:	83 ec 18             	sub    esp,0x18
10000083:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000087:	8b 10                	mov    edx,DWORD PTR [eax]
10000089:	50                   	push   eax
1000008a:	ff 52 18             	call   DWORD PTR [edx+0x18]
1000008d:	31 c0                	xor    eax,eax
1000008f:	83 c4 1c             	add    esp,0x1c
10000092:	c3                   	ret    
10000093:	90                   	nop

10000094 <ISA::close(int, int, void*)>:
10000094:	31 c0                	xor    eax,eax
10000096:	c3                   	ret    
10000097:	90                   	nop

10000098 <ISA::doSpeaker()>:
10000098:	c3                   	ret    
10000099:	90                   	nop

1000009a <ISA::doSoundblaster()>:
1000009a:	c3                   	ret    
1000009b:	90                   	nop

1000009c <ISA::doSerial()>:
1000009c:	c3                   	ret    
1000009d:	90                   	nop

1000009e <ISA::doParallel()>:
1000009e:	c3                   	ret    
1000009f:	90                   	nop

100000a0 <ISA::doGameport()>:
100000a0:	c3                   	ret    
100000a1:	90                   	nop

100000a2 <ISA::doFloppy()>:
100000a2:	c3                   	ret    
100000a3:	90                   	nop

100000a4 <ISA::doATA()>:
100000a4:	c3                   	ret    
100000a5:	90                   	nop

100000a6 <ISA::doPS2()>:
100000a6:	53                   	push   ebx
100000a7:	83 ec 14             	sub    esp,0x14
100000aa:	68 00 00 00 00       	push   0x0	100000ab: R_386_32	str_ps2
100000af:	e8 fc ff ff ff       	call   100000b0 <ISA::doPS2()+0xa>	100000b0: R_386_PC32	Dbg::kprintf(char const*, ...)
100000b4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	100000b7: R_386_32	str_ps2
100000bb:	e8 fc ff ff ff       	call   100000bc <ISA::doPS2()+0x16>	100000bc: R_386_PC32	Dbg::kprintf(char const*, ...)
100000c0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	100000c3: R_386_32	str_ps2
100000c7:	e8 fc ff ff ff       	call   100000c8 <ISA::doPS2()+0x22>	100000c8: R_386_PC32	Dbg::kprintf(char const*, ...)
100000cc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	100000cf: R_386_32	str_ps2
100000d3:	e8 fc ff ff ff       	call   100000d4 <ISA::doPS2()+0x2e>	100000d4: R_386_PC32	Dbg::kprintf(char const*, ...)
100000d8:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
100000df:	e8 fc ff ff ff       	call   100000e0 <ISA::doPS2()+0x3a>	100000e0: R_386_PC32	malloc
100000e4:	89 04 24             	mov    DWORD PTR [esp],eax
100000e7:	89 c3                	mov    ebx,eax
100000e9:	e8 fc ff ff ff       	call   100000ea <ISA::doPS2()+0x44>	100000ea: R_386_PC32	PS2::PS2()
100000ee:	58                   	pop    eax
100000ef:	5a                   	pop    edx
100000f0:	53                   	push   ebx
100000f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000f5:	e8 fc ff ff ff       	call   100000f6 <ISA::doPS2()+0x50>	100000f6: R_386_PC32	Device::addChild(Device*)
100000fa:	6a 00                	push   0x0
100000fc:	8b 03                	mov    eax,DWORD PTR [ebx]
100000fe:	6a 00                	push   0x0
10000100:	6a 00                	push   0x0
10000102:	53                   	push   ebx
10000103:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000106:	83 c4 28             	add    esp,0x28
10000109:	5b                   	pop    ebx
1000010a:	c3                   	ret    
1000010b:	90                   	nop

1000010c <ISA::doRTC()>:
1000010c:	c3                   	ret    
1000010d:	90                   	nop

1000010e <ISA::detect()>:
1000010e:	57                   	push   edi
1000010f:	56                   	push   esi
10000110:	53                   	push   ebx
10000111:	83 ec 2c             	sub    esp,0x2c
10000114:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
10000118:	68 5c 01 00 00       	push   0x15c
1000011d:	e8 fc ff ff ff       	call   1000011e <ISA::detect()+0x10>	1000011e: R_386_PC32	malloc
10000122:	89 04 24             	mov    DWORD PTR [esp],eax
10000125:	89 c3                	mov    ebx,eax
10000127:	e8 fc ff ff ff       	call   10000128 <ISA::detect()+0x1a>	10000128: R_386_PC32	DMA::DMA()
1000012c:	59                   	pop    ecx
1000012d:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	1000012f: R_386_32	isaDMAController
10000133:	5e                   	pop    esi
10000134:	53                   	push   ebx
10000135:	57                   	push   edi
10000136:	e8 fc ff ff ff       	call   10000137 <ISA::detect()+0x29>	10000137: R_386_PC32	Device::addChild(Device*)
1000013b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000013c: R_386_32	isaDMAController
10000140:	8b 10                	mov    edx,DWORD PTR [eax]
10000142:	6a 00                	push   0x0
10000144:	6a 00                	push   0x0
10000146:	6a 00                	push   0x0
10000148:	50                   	push   eax
10000149:	ff 52 08             	call   DWORD PTR [edx+0x8]
1000014c:	83 c4 20             	add    esp,0x20
1000014f:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	10000151: R_386_32	detectDone
10000156:	0f 85 cb 00 00 00    	jne    10000227 <ISA::detect()+0x119>
1000015c:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000015e: R_386_32	detectDone
10000163:	31 db                	xor    ebx,ebx
10000165:	52                   	push   edx
10000166:	6a 01                	push   0x1
10000168:	68 00 00 00 00       	push   0x0	10000169: R_386_32	str_isadonesafe
1000016d:	68 00 00 00 00       	push   0x0	1000016e: R_386_32	str_isa
10000172:	e8 fc ff ff ff       	call   10000173 <ISA::detect()+0x65>	10000173: R_386_PC32	Reg::readBoolWithDefault(char*, char*, bool)
10000177:	83 c4 10             	add    esp,0x10
1000017a:	50                   	push   eax
1000017b:	50                   	push   eax
1000017c:	68 00 00 00 00       	push   0x0	1000017d: R_386_32	str_devices
10000181:	8d 74 24 0c          	lea    esi,[esp+0xc]
10000185:	56                   	push   esi
10000186:	e8 fc ff ff ff       	call   10000187 <ISA::detect()+0x79>	10000187: R_386_PC32	strcpy
1000018b:	83 c4 10             	add    esp,0x10
1000018e:	85 db                	test   ebx,ebx
10000190:	75 09                	jne    1000019b <ISA::detect()+0x8d>
10000192:	50                   	push   eax
10000193:	50                   	push   eax
10000194:	68 00 00 00 00       	push   0x0	10000195: R_386_32	str_spk
10000199:	eb 52                	jmp    100001ed <ISA::detect()+0xdf>
1000019b:	83 fb 01             	cmp    ebx,0x1
1000019e:	75 09                	jne    100001a9 <ISA::detect()+0x9b>
100001a0:	50                   	push   eax
100001a1:	50                   	push   eax
100001a2:	68 00 00 00 00       	push   0x0	100001a3: R_386_32	str_rtc
100001a7:	eb 44                	jmp    100001ed <ISA::detect()+0xdf>
100001a9:	83 fb 02             	cmp    ebx,0x2
100001ac:	75 09                	jne    100001b7 <ISA::detect()+0xa9>
100001ae:	50                   	push   eax
100001af:	50                   	push   eax
100001b0:	68 00 00 00 00       	push   0x0	100001b1: R_386_32	str_ps2
100001b5:	eb 36                	jmp    100001ed <ISA::detect()+0xdf>
100001b7:	83 fb 03             	cmp    ebx,0x3
100001ba:	75 09                	jne    100001c5 <ISA::detect()+0xb7>
100001bc:	50                   	push   eax
100001bd:	50                   	push   eax
100001be:	68 00 00 00 00       	push   0x0	100001bf: R_386_32	str_floppy
100001c3:	eb 28                	jmp    100001ed <ISA::detect()+0xdf>
100001c5:	83 fb 04             	cmp    ebx,0x4
100001c8:	75 09                	jne    100001d3 <ISA::detect()+0xc5>
100001ca:	50                   	push   eax
100001cb:	50                   	push   eax
100001cc:	68 00 00 00 00       	push   0x0	100001cd: R_386_32	str_sb16
100001d1:	eb 1a                	jmp    100001ed <ISA::detect()+0xdf>
100001d3:	83 fb 05             	cmp    ebx,0x5
100001d6:	75 09                	jne    100001e1 <ISA::detect()+0xd3>
100001d8:	51                   	push   ecx
100001d9:	51                   	push   ecx
100001da:	68 00 00 00 00       	push   0x0	100001db: R_386_32	str_isaata
100001df:	eb 0c                	jmp    100001ed <ISA::detect()+0xdf>
100001e1:	83 fb 06             	cmp    ebx,0x6
100001e4:	75 10                	jne    100001f6 <ISA::detect()+0xe8>
100001e6:	52                   	push   edx
100001e7:	52                   	push   edx
100001e8:	68 00 00 00 00       	push   0x0	100001e9: R_386_32	str_gp
100001ed:	56                   	push   esi
100001ee:	e8 fc ff ff ff       	call   100001ef <ISA::detect()+0xe1>	100001ef: R_386_PC32	strcat
100001f3:	83 c4 10             	add    esp,0x10
100001f6:	50                   	push   eax
100001f7:	6a ff                	push   0xffffffff
100001f9:	56                   	push   esi
100001fa:	68 00 00 00 00       	push   0x0	100001fb: R_386_32	str_isa
100001ff:	e8 fc ff ff ff       	call   10000200 <ISA::detect()+0xf2>	10000200: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
10000204:	83 c4 10             	add    esp,0x10
10000207:	83 fb 02             	cmp    ebx,0x2
1000020a:	75 11                	jne    1000021d <ISA::detect()+0x10f>
1000020c:	83 f8 fe             	cmp    eax,0xfffffffe
1000020f:	74 0c                	je     1000021d <ISA::detect()+0x10f>
10000211:	83 ec 0c             	sub    esp,0xc
10000214:	57                   	push   edi
10000215:	e8 fc ff ff ff       	call   10000216 <ISA::detect()+0x108>	10000216: R_386_PC32	ISA::doPS2()
1000021a:	83 c4 10             	add    esp,0x10
1000021d:	43                   	inc    ebx
1000021e:	83 fb 07             	cmp    ebx,0x7
10000221:	0f 85 53 ff ff ff    	jne    1000017a <ISA::detect()+0x6c>
10000227:	83 c4 20             	add    esp,0x20
1000022a:	5b                   	pop    ebx
1000022b:	5e                   	pop    esi
1000022c:	5f                   	pop    edi
1000022d:	c3                   	ret    

1000022e <DMAChannel::DMAChannel(int)>:
1000022e:	55                   	push   ebp
1000022f:	89 e5                	mov    ebp,esp
10000231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000234:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
1000023b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000023e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10000245:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000248:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000024b:	89 10                	mov    DWORD PTR [eax],edx
1000024d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000250:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10000257:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000025a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10000261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000264:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
10000268:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000026b:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
1000026f:	83 7d 0c 03          	cmp    DWORD PTR [ebp+0xc],0x3
10000273:	0f 9f c2             	setg   dl
10000276:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000279:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
1000027c:	90                   	nop
1000027d:	5d                   	pop    ebp
1000027e:	c3                   	ret    
1000027f:	90                   	nop

10000280 <DMAChannel::~DMAChannel()>:
10000280:	55                   	push   ebp
10000281:	89 e5                	mov    ebp,esp
10000283:	83 ec 08             	sub    esp,0x8
10000286:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000289:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000028c:	85 c0                	test   eax,eax
1000028e:	74 19                	je     100002a9 <DMAChannel::~DMAChannel()+0x29>
10000290:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000293:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10000296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000299:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000029c:	83 ec 08             	sub    esp,0x8
1000029f:	52                   	push   edx
100002a0:	50                   	push   eax
100002a1:	e8 fc ff ff ff       	call   100002a2 <DMAChannel::~DMAChannel()+0x22>	100002a2: R_386_PC32	Phys::freeDMA(unsigned long, unsigned long)
100002a6:	83 c4 10             	add    esp,0x10
100002a9:	90                   	nop
100002aa:	c9                   	leave  
100002ab:	c3                   	ret    

100002ac <DMAChannel::getAddress()>:
100002ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100002b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100002b3:	c3                   	ret    

100002b4 <DMAChannel::getChannelNum()>:
100002b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100002b8:	8b 00                	mov    eax,DWORD PTR [eax]
100002ba:	c3                   	ret    
100002bb:	90                   	nop

100002bc <DMAChannel::setLength(unsigned int)>:
100002bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100002c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
100002c4:	3d 00 00 01 00       	cmp    eax,0x10000
100002c9:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
100002cc:	76 0d                	jbe    100002db <DMAChannel::setLength(unsigned int)+0x1f>
100002ce:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	100002d2: R_386_32	dmaLong
100002d6:	e9 fc ff ff ff       	jmp    100002d7 <DMAChannel::setLength(unsigned int)+0x1b>	100002d7: R_386_PC32	Krnl::panic(char const*)
100002db:	c3                   	ret    

100002dc <DMAChannel::setAddress(unsigned int)>:
100002dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100002e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
100002e4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100002e7:	c3                   	ret    

100002e8 <DMAChannel::allocateAddressAndSet(unsigned short)>:
100002e8:	56                   	push   esi
100002e9:	53                   	push   ebx
100002ea:	83 ec 10             	sub    esp,0x10
100002ed:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100002f1:	0f b7 74 24 20       	movzx  esi,WORD PTR [esp+0x20]
100002f6:	56                   	push   esi
100002f7:	e8 fc ff ff ff       	call   100002f8 <DMAChannel::allocateAddressAndSet(unsigned short)+0x10>	100002f8: R_386_PC32	Phys::allocateDMA(unsigned long)
100002fc:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
100002ff:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10000302:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10000305:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10000308:	83 c4 14             	add    esp,0x14
1000030b:	5b                   	pop    ebx
1000030c:	5e                   	pop    esi
1000030d:	c3                   	ret    

1000030e <DMAChannel::setMode(unsigned char)>:
1000030e:	53                   	push   ebx
1000030f:	83 ec 08             	sub    esp,0x8
10000312:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10000316:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
1000031a:	80 7b 0d 00          	cmp    BYTE PTR [ebx+0xd],0x0
1000031e:	88 43 0f             	mov    BYTE PTR [ebx+0xf],al
10000321:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
10000325:	74 2a                	je     10000351 <DMAChannel::setMode(unsigned char)+0x43>
10000327:	51                   	push   ecx
10000328:	51                   	push   ecx
10000329:	6a 01                	push   0x1
1000032b:	53                   	push   ebx
1000032c:	e8 fc ff ff ff       	call   1000032d <DMAChannel::setMode(unsigned char)+0x1f>	1000032d: R_386_PC32	DMAChannel::mask(bool)
10000331:	80 7b 0e 01          	cmp    BYTE PTR [ebx+0xe],0x1
10000335:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
10000338:	19 d2                	sbb    edx,edx
1000033a:	80 e2 35             	and    dl,0x35
1000033d:	81 c2 d6 00 00 00    	add    edx,0xd6
10000343:	ee                   	out    dx,al
10000344:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
10000348:	83 c4 18             	add    esp,0x18
1000034b:	5b                   	pop    ebx
1000034c:	e9 ff 00 00 00       	jmp    10000450 <DMAChannel::unmask()>
10000351:	83 c4 08             	add    esp,0x8
10000354:	5b                   	pop    ebx
10000355:	c3                   	ret    

10000356 <DMAChannel::start()>:
10000356:	57                   	push   edi
10000357:	56                   	push   esi
10000358:	53                   	push   ebx
10000359:	83 ec 10             	sub    esp,0x10
1000035c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10000360:	8b 06                	mov    eax,DWORD PTR [esi]
10000362:	83 f8 07             	cmp    eax,0x7
10000365:	0f 87 96 00 00 00    	ja     10000401 <DMAChannel::start()+0xab>
1000036b:	8a 98 54 26 00 10    	mov    bl,BYTE PTR [eax+0x10002654]	1000036d: R_386_32	.text
10000371:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
10000375:	8a 98 5c 26 00 10    	mov    bl,BYTE PTR [eax+0x1000265c]	10000377: R_386_32	.text
1000037b:	8a 80 64 26 00 10    	mov    al,BYTE PTR [eax+0x10002664]	1000037d: R_386_32	.text
10000381:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
10000385:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
10000389:	e8 fc ff ff ff       	call   1000038a <DMAChannel::start()+0x34>	1000038a: R_386_PC32	lockScheduler()
1000038e:	50                   	push   eax
1000038f:	50                   	push   eax
10000390:	6a 01                	push   0x1
10000392:	56                   	push   esi
10000393:	e8 fc ff ff ff       	call   10000394 <DMAChannel::start()+0x3e>	10000394: R_386_PC32	DMAChannel::mask(bool)
10000398:	8a 5e 0e             	mov    bl,BYTE PTR [esi+0xe]
1000039b:	83 c4 10             	add    esp,0x10
1000039e:	80 fb 01             	cmp    bl,0x1
100003a1:	19 c9                	sbb    ecx,ecx
100003a3:	31 ff                	xor    edi,edi
100003a5:	80 e1 34             	and    cl,0x34
100003a8:	89 f8                	mov    eax,edi
100003aa:	81 c1 d8 00 00 00    	add    ecx,0xd8
100003b0:	89 ca                	mov    edx,ecx
100003b2:	ee                   	out    dx,al
100003b3:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
100003b8:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
100003bb:	ee                   	out    dx,al
100003bc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
100003bf:	c1 e8 08             	shr    eax,0x8
100003c2:	ee                   	out    dx,al
100003c3:	89 f8                	mov    eax,edi
100003c5:	89 ca                	mov    edx,ecx
100003c7:	ee                   	out    dx,al
100003c8:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
100003cb:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
100003d0:	8d 41 ff             	lea    eax,[ecx-0x1]
100003d3:	ee                   	out    dx,al
100003d4:	8d 41 ff             	lea    eax,[ecx-0x1]
100003d7:	c1 e8 08             	shr    eax,0x8
100003da:	ee                   	out    dx,al
100003db:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
100003de:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
100003e3:	c1 e8 10             	shr    eax,0x10
100003e6:	ee                   	out    dx,al
100003e7:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
100003eb:	74 27                	je     10000414 <DMAChannel::start()+0xbe>
100003ed:	80 fb 01             	cmp    bl,0x1
100003f0:	8a 46 0f             	mov    al,BYTE PTR [esi+0xf]
100003f3:	19 d2                	sbb    edx,edx
100003f5:	80 e2 35             	and    dl,0x35
100003f8:	81 c2 d6 00 00 00    	add    edx,0xd6
100003fe:	ee                   	out    dx,al
100003ff:	eb 13                	jmp    10000414 <DMAChannel::start()+0xbe>
10000401:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	10000405: R_386_32	dmaConfused
10000409:	83 c4 10             	add    esp,0x10
1000040c:	5b                   	pop    ebx
1000040d:	5e                   	pop    esi
1000040e:	5f                   	pop    edi
1000040f:	e9 fc ff ff ff       	jmp    10000410 <DMAChannel::start()+0xba>	10000410: R_386_PC32	Krnl::panic(char const*)
10000414:	c6 46 0d 01          	mov    BYTE PTR [esi+0xd],0x1
10000418:	83 ec 0c             	sub    esp,0xc
1000041b:	56                   	push   esi
1000041c:	e8 fc ff ff ff       	call   1000041d <DMAChannel::start()+0xc7>	1000041d: R_386_PC32	DMAChannel::unmask()
10000421:	83 c4 20             	add    esp,0x20
10000424:	5b                   	pop    ebx
10000425:	5e                   	pop    esi
10000426:	5f                   	pop    edi
10000427:	e9 fc ff ff ff       	jmp    10000428 <DMAChannel::start()+0xd2>	10000428: R_386_PC32	unlockScheduler()

1000042c <DMAChannel::stop()>:
1000042c:	c3                   	ret    
1000042d:	90                   	nop

1000042e <DMAChannel::mask(bool)>:
1000042e:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
10000433:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10000437:	0f 95 c0             	setne  al
1000043a:	c1 e0 02             	shl    eax,0x2
1000043d:	0b 02                	or     eax,DWORD PTR [edx]
1000043f:	80 7a 0e 01          	cmp    BYTE PTR [edx+0xe],0x1
10000443:	19 d2                	sbb    edx,edx
10000445:	80 e2 36             	and    dl,0x36
10000448:	81 c2 d4 00 00 00    	add    edx,0xd4
1000044e:	ee                   	out    dx,al
1000044f:	c3                   	ret    

10000450 <DMAChannel::unmask()>:
10000450:	6a 00                	push   0x0
10000452:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10000456:	e8 fc ff ff ff       	call   10000457 <DMAChannel::unmask()+0x7>	10000457: R_386_PC32	DMAChannel::mask(bool)
1000045b:	58                   	pop    eax
1000045c:	5a                   	pop    edx
1000045d:	c3                   	ret    

1000045e <DMA::DMA()>:
1000045e:	55                   	push   ebp
1000045f:	89 e5                	mov    ebp,esp
10000461:	83 ec 08             	sub    esp,0x8
10000464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000467:	83 ec 08             	sub    esp,0x8
1000046a:	68 00 00 00 00       	push   0x0	1000046b: R_386_32	dmaCtrlName
1000046f:	50                   	push   eax
10000470:	e8 fc ff ff ff       	call   10000471 <DMA::DMA()+0x13>	10000471: R_386_PC32	Device::Device(char const*)
10000475:	83 c4 10             	add    esp,0x10
10000478:	ba 08 00 00 00       	mov    edx,0x8	10000479: R_386_32	vtable for DMA
1000047d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000480:	89 10                	mov    DWORD PTR [eax],edx
10000482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000485:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
1000048c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000048f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000495:	0f b6 d0             	movzx  edx,al
10000498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000049b:	66 c7 44 90 04 00 00 	mov    WORD PTR [eax+edx*4+0x4],0x0
100004a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100004ab:	0f b6 d0             	movzx  edx,al
100004ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004b1:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
100004b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100004bf:	8d 50 01             	lea    edx,[eax+0x1]
100004c2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100004c5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100004cb:	0f b6 d0             	movzx  edx,al
100004ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004d1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100004d5:	83 e1 3f             	and    ecx,0x3f
100004d8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100004dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004df:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100004e5:	0f b6 d0             	movzx  edx,al
100004e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004eb:	66 c7 44 90 04 c0 00 	mov    WORD PTR [eax+edx*4+0x4],0xc0
100004f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004f5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100004fb:	0f b6 d0             	movzx  edx,al
100004fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000501:	c6 44 90 06 20       	mov    BYTE PTR [eax+edx*4+0x6],0x20
10000506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000509:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000050f:	8d 50 01             	lea    edx,[eax+0x1]
10000512:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000515:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000051b:	0f b6 d0             	movzx  edx,al
1000051e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000521:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000525:	83 e1 3f             	and    ecx,0x3f
10000528:	83 c9 40             	or     ecx,0x40
1000052b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000052f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000532:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000538:	0f b6 d0             	movzx  edx,al
1000053b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000053e:	66 c7 44 90 04 81 00 	mov    WORD PTR [eax+edx*4+0x4],0x81
10000545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000548:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000054e:	0f b6 d0             	movzx  edx,al
10000551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000554:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
10000559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000055c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000562:	8d 50 01             	lea    edx,[eax+0x1]
10000565:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000568:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000056e:	0f b6 d0             	movzx  edx,al
10000571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000574:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000578:	83 e1 3f             	and    ecx,0x3f
1000057b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000057f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000582:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000588:	0f b6 d0             	movzx  edx,al
1000058b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000058e:	66 c7 44 90 04 87 00 	mov    WORD PTR [eax+edx*4+0x4],0x87
10000595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000598:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000059e:	0f b6 d0             	movzx  edx,al
100005a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005a4:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100005a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005b2:	8d 50 01             	lea    edx,[eax+0x1]
100005b5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100005b8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100005be:	0f b6 d0             	movzx  edx,al
100005c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005c4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100005c8:	83 e1 3f             	and    ecx,0x3f
100005cb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100005cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005d2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005d8:	0f b6 d0             	movzx  edx,al
100005db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005de:	66 c7 44 90 04 89 00 	mov    WORD PTR [eax+edx*4+0x4],0x89
100005e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005e8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100005ee:	0f b6 d0             	movzx  edx,al
100005f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005f4:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
100005f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005fc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000602:	8d 50 01             	lea    edx,[eax+0x1]
10000605:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000608:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000060e:	0f b6 d0             	movzx  edx,al
10000611:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000614:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000618:	83 e1 3f             	and    ecx,0x3f
1000061b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000061f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000622:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000628:	0f b6 d0             	movzx  edx,al
1000062b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000062e:	66 c7 44 90 04 8f 00 	mov    WORD PTR [eax+edx*4+0x4],0x8f
10000635:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000638:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000063e:	0f b6 d0             	movzx  edx,al
10000641:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000644:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000064c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000652:	8d 50 01             	lea    edx,[eax+0x1]
10000655:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000658:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000065e:	0f b6 d0             	movzx  edx,al
10000661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000664:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000668:	83 e1 3f             	and    ecx,0x3f
1000066b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000066f:	90                   	nop
10000670:	c9                   	leave  
10000671:	c3                   	ret    

10000672 <DMA::getAvailable()>:
10000672:	53                   	push   ebx
10000673:	31 db                	xor    ebx,ebx
10000675:	83 ec 08             	sub    esp,0x8
10000678:	e8 fc ff ff ff       	call   10000679 <DMA::getAvailable()+0x7>	10000679: R_386_PC32	lockScheduler()
1000067d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000681:	0f b6 80 58 01 00 00 	movzx  eax,BYTE PTR [eax+0x158]
10000688:	0f a3 d8             	bt     eax,ebx
1000068b:	73 07                	jae    10000694 <DMA::getAvailable()+0x22>
1000068d:	e8 fc ff ff ff       	call   1000068e <DMA::getAvailable()+0x1c>	1000068e: R_386_PC32	unlockScheduler()
10000692:	eb 0e                	jmp    100006a2 <DMA::getAvailable()+0x30>
10000694:	43                   	inc    ebx
10000695:	83 fb 08             	cmp    ebx,0x8
10000698:	75 ee                	jne    10000688 <DMA::getAvailable()+0x16>
1000069a:	e8 fc ff ff ff       	call   1000069b <DMA::getAvailable()+0x29>	1000069b: R_386_PC32	unlockScheduler()
1000069f:	83 cb ff             	or     ebx,0xffffffff
100006a2:	89 d8                	mov    eax,ebx
100006a4:	83 c4 08             	add    esp,0x8
100006a7:	5b                   	pop    ebx
100006a8:	c3                   	ret    
100006a9:	90                   	nop

100006aa <DMA::open(int, int, void*)>:
100006aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100006ae:	c6 80 58 01 00 00 ee 	mov    BYTE PTR [eax+0x158],0xee
100006b5:	31 c0                	xor    eax,eax
100006b7:	e6 0d                	out    0xd,al
100006b9:	e6 da                	out    0xda,al
100006bb:	31 c0                	xor    eax,eax
100006bd:	c3                   	ret    

100006be <DMA::close(int, int, void*)>:
100006be:	31 c0                	xor    eax,eax
100006c0:	c3                   	ret    
100006c1:	90                   	nop

100006c2 <DMA::tryLockChannelWithBase(int)>:
100006c2:	56                   	push   esi
100006c3:	53                   	push   ebx
100006c4:	83 ec 14             	sub    esp,0x14
100006c7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100006cb:	e8 fc ff ff ff       	call   100006cc <DMA::tryLockChannelWithBase(int)+0xa>	100006cc: R_386_PC32	lockScheduler()
100006d0:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100006d4:	8d 43 03             	lea    eax,[ebx+0x3]
100006d7:	39 d8                	cmp    eax,ebx
100006d9:	7c 47                	jl     10000722 <DMA::tryLockChannelWithBase(int)+0x60>
100006db:	0f b6 8e 58 01 00 00 	movzx  ecx,BYTE PTR [esi+0x158]
100006e2:	89 ca                	mov    edx,ecx
100006e4:	0f a3 d9             	bt     ecx,ebx
100006e7:	73 36                	jae    1000071f <DMA::tryLockChannelWithBase(int)+0x5d>
100006e9:	83 ec 0c             	sub    esp,0xc
100006ec:	88 d9                	mov    cl,bl
100006ee:	b8 fe ff ff ff       	mov    eax,0xfffffffe
100006f3:	d3 c0                	rol    eax,cl
100006f5:	21 d0                	and    eax,edx
100006f7:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
100006fd:	6a 18                	push   0x18
100006ff:	e8 fc ff ff ff       	call   10000700 <DMA::tryLockChannelWithBase(int)+0x3e>	10000700: R_386_PC32	operator new(unsigned long)
10000704:	5a                   	pop    edx
10000705:	59                   	pop    ecx
10000706:	53                   	push   ebx
10000707:	50                   	push   eax
10000708:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000070c:	e8 fc ff ff ff       	call   1000070d <DMA::tryLockChannelWithBase(int)+0x4b>	1000070d: R_386_PC32	DMAChannel::DMAChannel(int)
10000711:	e8 fc ff ff ff       	call   10000712 <DMA::tryLockChannelWithBase(int)+0x50>	10000712: R_386_PC32	unlockScheduler()
10000716:	83 c4 10             	add    esp,0x10
10000719:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000071d:	eb 0a                	jmp    10000729 <DMA::tryLockChannelWithBase(int)+0x67>
1000071f:	43                   	inc    ebx
10000720:	eb b5                	jmp    100006d7 <DMA::tryLockChannelWithBase(int)+0x15>
10000722:	e8 fc ff ff ff       	call   10000723 <DMA::tryLockChannelWithBase(int)+0x61>	10000723: R_386_PC32	unlockScheduler()
10000727:	31 c0                	xor    eax,eax
10000729:	83 c4 14             	add    esp,0x14
1000072c:	5b                   	pop    ebx
1000072d:	5e                   	pop    esi
1000072e:	c3                   	ret    
1000072f:	90                   	nop

10000730 <DMA::lockChannelWithBase(int)>:
10000730:	83 ec 0c             	sub    esp,0xc
10000733:	50                   	push   eax
10000734:	50                   	push   eax
10000735:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000739:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000073d:	e8 fc ff ff ff       	call   1000073e <DMA::lockChannelWithBase(int)+0xe>	1000073e: R_386_PC32	DMA::tryLockChannelWithBase(int)
10000742:	83 c4 10             	add    esp,0x10
10000745:	85 c0                	test   eax,eax
10000747:	74 ea                	je     10000733 <DMA::lockChannelWithBase(int)+0x3>
10000749:	83 c4 0c             	add    esp,0xc
1000074c:	c3                   	ret    
1000074d:	90                   	nop

1000074e <DMA::tryLockChannel8()>:
1000074e:	83 ec 14             	sub    esp,0x14
10000751:	6a 00                	push   0x0
10000753:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000757:	e8 fc ff ff ff       	call   10000758 <DMA::tryLockChannel8()+0xa>	10000758: R_386_PC32	DMA::tryLockChannelWithBase(int)
1000075c:	83 c4 1c             	add    esp,0x1c
1000075f:	c3                   	ret    

10000760 <DMA::tryLockChannel16()>:
10000760:	83 ec 14             	sub    esp,0x14
10000763:	6a 04                	push   0x4
10000765:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000769:	e8 fc ff ff ff       	call   1000076a <DMA::tryLockChannel16()+0xa>	1000076a: R_386_PC32	DMA::tryLockChannelWithBase(int)
1000076e:	83 c4 1c             	add    esp,0x1c
10000771:	c3                   	ret    

10000772 <DMA::tryLockChannel(int)>:
10000772:	56                   	push   esi
10000773:	53                   	push   ebx
10000774:	83 ec 14             	sub    esp,0x14
10000777:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
1000077b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
1000077f:	83 fb 07             	cmp    ebx,0x7
10000782:	76 12                	jbe    10000796 <DMA::tryLockChannel(int)+0x24>
10000784:	83 ec 0c             	sub    esp,0xc
10000787:	68 6c 26 00 10       	push   0x1000266c	10000788: R_386_32	.text
1000078c:	e8 fc ff ff ff       	call   1000078d <DMA::tryLockChannel(int)+0x1b>	1000078d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000791:	83 c4 10             	add    esp,0x10
10000794:	eb 4e                	jmp    100007e4 <DMA::tryLockChannel(int)+0x72>
10000796:	e8 fc ff ff ff       	call   10000797 <DMA::tryLockChannel(int)+0x25>	10000797: R_386_PC32	lockScheduler()
1000079b:	0f b6 86 58 01 00 00 	movzx  eax,BYTE PTR [esi+0x158]
100007a2:	89 c2                	mov    edx,eax
100007a4:	0f a3 d8             	bt     eax,ebx
100007a7:	73 36                	jae    100007df <DMA::tryLockChannel(int)+0x6d>
100007a9:	83 ec 0c             	sub    esp,0xc
100007ac:	88 d9                	mov    cl,bl
100007ae:	b8 fe ff ff ff       	mov    eax,0xfffffffe
100007b3:	d3 c0                	rol    eax,cl
100007b5:	21 d0                	and    eax,edx
100007b7:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
100007bd:	6a 18                	push   0x18
100007bf:	e8 fc ff ff ff       	call   100007c0 <DMA::tryLockChannel(int)+0x4e>	100007c0: R_386_PC32	operator new(unsigned long)
100007c4:	5a                   	pop    edx
100007c5:	59                   	pop    ecx
100007c6:	53                   	push   ebx
100007c7:	50                   	push   eax
100007c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100007cc:	e8 fc ff ff ff       	call   100007cd <DMA::tryLockChannel(int)+0x5b>	100007cd: R_386_PC32	DMAChannel::DMAChannel(int)
100007d1:	e8 fc ff ff ff       	call   100007d2 <DMA::tryLockChannel(int)+0x60>	100007d2: R_386_PC32	unlockScheduler()
100007d6:	83 c4 10             	add    esp,0x10
100007d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100007dd:	eb 07                	jmp    100007e6 <DMA::tryLockChannel(int)+0x74>
100007df:	e8 fc ff ff ff       	call   100007e0 <DMA::tryLockChannel(int)+0x6e>	100007e0: R_386_PC32	unlockScheduler()
100007e4:	31 c0                	xor    eax,eax
100007e6:	83 c4 14             	add    esp,0x14
100007e9:	5b                   	pop    ebx
100007ea:	5e                   	pop    esi
100007eb:	c3                   	ret    

100007ec <DMA::lockChannel8()>:
100007ec:	83 ec 14             	sub    esp,0x14
100007ef:	6a 00                	push   0x0
100007f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100007f5:	e8 fc ff ff ff       	call   100007f6 <DMA::lockChannel8()+0xa>	100007f6: R_386_PC32	DMA::lockChannelWithBase(int)
100007fa:	83 c4 1c             	add    esp,0x1c
100007fd:	c3                   	ret    

100007fe <DMA::lockChannel16()>:
100007fe:	83 ec 14             	sub    esp,0x14
10000801:	6a 04                	push   0x4
10000803:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000807:	e8 fc ff ff ff       	call   10000808 <DMA::lockChannel16()+0xa>	10000808: R_386_PC32	DMA::lockChannelWithBase(int)
1000080c:	83 c4 1c             	add    esp,0x1c
1000080f:	c3                   	ret    

10000810 <DMA::lockChannel(int)>:
10000810:	83 ec 0c             	sub    esp,0xc
10000813:	50                   	push   eax
10000814:	50                   	push   eax
10000815:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000819:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000081d:	e8 fc ff ff ff       	call   1000081e <DMA::lockChannel(int)+0xe>	1000081e: R_386_PC32	DMA::tryLockChannel(int)
10000822:	83 c4 10             	add    esp,0x10
10000825:	85 c0                	test   eax,eax
10000827:	74 ea                	je     10000813 <DMA::lockChannel(int)+0x3>
10000829:	83 c4 0c             	add    esp,0xc
1000082c:	c3                   	ret    
1000082d:	90                   	nop

1000082e <DMA::unlockChannel(DMAChannel*)>:
1000082e:	56                   	push   esi
1000082f:	53                   	push   ebx
10000830:	53                   	push   ebx
10000831:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10000835:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10000839:	85 db                	test   ebx,ebx
1000083b:	75 10                	jne    1000084d <DMA::unlockChannel(DMAChannel*)+0x1f>
1000083d:	83 ec 0c             	sub    esp,0xc
10000840:	68 00 00 00 00       	push   0x0	10000841: R_386_32	badDma
10000845:	e8 fc ff ff ff       	call   10000846 <DMA::unlockChannel(DMAChannel*)+0x18>	10000846: R_386_PC32	Krnl::panic(char const*)
1000084a:	83 c4 10             	add    esp,0x10
1000084d:	e8 fc ff ff ff       	call   1000084e <DMA::unlockChannel(DMAChannel*)+0x20>	1000084e: R_386_PC32	lockScheduler()
10000852:	0f b6 96 58 01 00 00 	movzx  edx,BYTE PTR [esi+0x158]
10000859:	8b 0b                	mov    ecx,DWORD PTR [ebx]
1000085b:	89 d0                	mov    eax,edx
1000085d:	0f a3 ca             	bt     edx,ecx
10000860:	72 24                	jb     10000886 <DMA::unlockChannel(DMAChannel*)+0x58>
10000862:	83 ec 0c             	sub    esp,0xc
10000865:	ba 01 00 00 00       	mov    edx,0x1
1000086a:	d3 e2                	shl    edx,cl
1000086c:	09 d0                	or     eax,edx
1000086e:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10000874:	53                   	push   ebx
10000875:	e8 fc ff ff ff       	call   10000876 <DMA::unlockChannel(DMAChannel*)+0x48>	10000876: R_386_PC32	DMAChannel::~DMAChannel()
1000087a:	5a                   	pop    edx
1000087b:	59                   	pop    ecx
1000087c:	6a 18                	push   0x18
1000087e:	53                   	push   ebx
1000087f:	e8 fc ff ff ff       	call   10000880 <DMA::unlockChannel(DMAChannel*)+0x52>	10000880: R_386_PC32	operator delete(void*, unsigned long)
10000884:	eb 0d                	jmp    10000893 <DMA::unlockChannel(DMAChannel*)+0x65>
10000886:	83 ec 0c             	sub    esp,0xc
10000889:	68 00 00 00 00       	push   0x0	1000088a: R_386_32	badBook
1000088e:	e8 fc ff ff ff       	call   1000088f <DMA::unlockChannel(DMAChannel*)+0x61>	1000088f: R_386_PC32	Krnl::panic(char const*)
10000893:	83 c4 10             	add    esp,0x10
10000896:	58                   	pop    eax
10000897:	5b                   	pop    ebx
10000898:	5e                   	pop    esi
10000899:	e9 fc ff ff ff       	jmp    1000089a <DMA::unlockChannel(DMAChannel*)+0x6c>	1000089a: R_386_PC32	unlockScheduler()

1000089e <PS2::PS2()>:
1000089e:	55                   	push   ebp
1000089f:	89 e5                	mov    ebp,esp
100008a1:	83 ec 08             	sub    esp,0x8
100008a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008a7:	83 ec 08             	sub    esp,0x8
100008aa:	68 00 00 00 00       	push   0x0	100008ab: R_386_32	ps2ctrlname
100008af:	50                   	push   eax
100008b0:	e8 fc ff ff ff       	call   100008b1 <PS2::PS2()+0x13>	100008b1: R_386_PC32	Bus::Bus(char const*)
100008b5:	83 c4 10             	add    esp,0x10
100008b8:	ba 08 00 00 00       	mov    edx,0x8	100008b9: R_386_32	vtable for PS2
100008bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008c0:	89 10                	mov    DWORD PTR [eax],edx
100008c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100008cb:	0f b6 d0             	movzx  edx,al
100008ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008d1:	66 c7 44 90 04 60 00 	mov    WORD PTR [eax+edx*4+0x4],0x60
100008d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008db:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100008e1:	0f b6 d0             	movzx  edx,al
100008e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008e7:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100008ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100008f5:	8d 50 01             	lea    edx,[eax+0x1]
100008f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100008fb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000901:	0f b6 d0             	movzx  edx,al
10000904:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000907:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000090b:	83 e1 3f             	and    ecx,0x3f
1000090e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000915:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000091b:	0f b6 d0             	movzx  edx,al
1000091e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000921:	66 c7 44 90 04 64 00 	mov    WORD PTR [eax+edx*4+0x4],0x64
10000928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000092b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000931:	0f b6 d0             	movzx  edx,al
10000934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000937:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
1000093c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000093f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000945:	8d 50 01             	lea    edx,[eax+0x1]
10000948:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000094b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000951:	0f b6 d0             	movzx  edx,al
10000954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000957:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000095b:	83 e1 3f             	and    ecx,0x3f
1000095e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000962:	90                   	nop
10000963:	c9                   	leave  
10000964:	c3                   	ret    
10000965:	90                   	nop

10000966 <PS2::open(int, int, void*)>:
10000966:	55                   	push   ebp
10000967:	89 e5                	mov    ebp,esp
10000969:	53                   	push   ebx
1000096a:	83 ec 24             	sub    esp,0x24
1000096d:	e8 fc ff ff ff       	call   1000096e <PS2::open(int, int, void*)+0x8>	1000096e: R_386_PC32	lockScheduler()
10000972:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000979:	83 ec 08             	sub    esp,0x8
1000097c:	68 ad 00 00 00       	push   0xad
10000981:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000984:	e8 fc ff ff ff       	call   10000985 <PS2::open(int, int, void*)+0x1f>	10000985: R_386_PC32	PS2::controllerWrite(unsigned char)
10000989:	83 c4 10             	add    esp,0x10
1000098c:	83 ec 08             	sub    esp,0x8
1000098f:	68 a7 00 00 00       	push   0xa7
10000994:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000997:	e8 fc ff ff ff       	call   10000998 <PS2::open(int, int, void*)+0x32>	10000998: R_386_PC32	PS2::controllerWrite(unsigned char)
1000099c:	83 c4 10             	add    esp,0x10
1000099f:	66 c7 45 e4 60 00    	mov    WORD PTR [ebp-0x1c],0x60
100009a5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100009a8:	89 c2                	mov    edx,eax
100009aa:	ec                   	in     al,dx
100009ab:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
100009ae:	66 c7 45 e8 60 00    	mov    WORD PTR [ebp-0x18],0x60
100009b4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100009b7:	89 c2                	mov    edx,eax
100009b9:	ec                   	in     al,dx
100009ba:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
100009bd:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
100009c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100009c6:	89 c2                	mov    edx,eax
100009c8:	ec                   	in     al,dx
100009c9:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
100009cc:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
100009d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100009d5:	89 c2                	mov    edx,eax
100009d7:	ec                   	in     al,dx
100009d8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100009db:	83 ec 08             	sub    esp,0x8
100009de:	68 aa 00 00 00       	push   0xaa
100009e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009e6:	e8 fc ff ff ff       	call   100009e7 <PS2::open(int, int, void*)+0x81>	100009e7: R_386_PC32	PS2::controllerWrite(unsigned char)
100009eb:	83 c4 10             	add    esp,0x10
100009ee:	83 ec 0c             	sub    esp,0xc
100009f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009f4:	e8 fc ff ff ff       	call   100009f5 <PS2::open(int, int, void*)+0x8f>	100009f5: R_386_PC32	PS2::controllerRead()
100009f9:	83 c4 10             	add    esp,0x10
100009fc:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100009ff:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000a03:	74 65                	je     10000a6a <PS2::open(int, int, void*)+0x104>
10000a05:	83 ec 0c             	sub    esp,0xc
10000a08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a0b:	e8 fc ff ff ff       	call   10000a0c <PS2::open(int, int, void*)+0xa6>	10000a0c: R_386_PC32	PS2::controllerRead()
10000a10:	83 c4 10             	add    esp,0x10
10000a13:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000a16:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000a1a:	74 4e                	je     10000a6a <PS2::open(int, int, void*)+0x104>
10000a1c:	83 ec 08             	sub    esp,0x8
10000a1f:	68 aa 00 00 00       	push   0xaa
10000a24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a27:	e8 fc ff ff ff       	call   10000a28 <PS2::open(int, int, void*)+0xc2>	10000a28: R_386_PC32	PS2::controllerWrite(unsigned char)
10000a2c:	83 c4 10             	add    esp,0x10
10000a2f:	83 ec 08             	sub    esp,0x8
10000a32:	68 aa 00 00 00       	push   0xaa
10000a37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a3a:	e8 fc ff ff ff       	call   10000a3b <PS2::open(int, int, void*)+0xd5>	10000a3b: R_386_PC32	PS2::controllerWrite(unsigned char)
10000a3f:	83 c4 10             	add    esp,0x10
10000a42:	83 ec 0c             	sub    esp,0xc
10000a45:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a48:	e8 fc ff ff ff       	call   10000a49 <PS2::open(int, int, void*)+0xe3>	10000a49: R_386_PC32	PS2::controllerRead()
10000a4d:	83 c4 10             	add    esp,0x10
10000a50:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000a53:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000a57:	74 11                	je     10000a6a <PS2::open(int, int, void*)+0x104>
10000a59:	83 ec 0c             	sub    esp,0xc
10000a5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a5f:	e8 fc ff ff ff       	call   10000a60 <PS2::open(int, int, void*)+0xfa>	10000a60: R_386_PC32	PS2::controllerRead()
10000a64:	83 c4 10             	add    esp,0x10
10000a67:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000a6a:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
10000a71:	83 ec 08             	sub    esp,0x8
10000a74:	6a 20                	push   0x20
10000a76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a79:	e8 fc ff ff ff       	call   10000a7a <PS2::open(int, int, void*)+0x114>	10000a7a: R_386_PC32	PS2::controllerWrite(unsigned char)
10000a7e:	83 c4 10             	add    esp,0x10
10000a81:	83 ec 0c             	sub    esp,0xc
10000a84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a87:	e8 fc ff ff ff       	call   10000a88 <PS2::open(int, int, void*)+0x122>	10000a88: R_386_PC32	PS2::controllerRead()
10000a8c:	83 c4 10             	add    esp,0x10
10000a8f:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10000a92:	80 4d f2 01          	or     BYTE PTR [ebp-0xe],0x1
10000a96:	80 4d f2 02          	or     BYTE PTR [ebp-0xe],0x2
10000a9a:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
10000a9e:	83 ec 04             	sub    esp,0x4
10000aa1:	50                   	push   eax
10000aa2:	6a 60                	push   0x60
10000aa4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000aa7:	e8 fc ff ff ff       	call   10000aa8 <PS2::open(int, int, void*)+0x142>	10000aa8: R_386_PC32	PS2::controllerWrite(unsigned char, unsigned char)
10000aac:	83 c4 10             	add    esp,0x10
10000aaf:	83 ec 08             	sub    esp,0x8
10000ab2:	68 ae 00 00 00       	push   0xae
10000ab7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000aba:	e8 fc ff ff ff       	call   10000abb <PS2::open(int, int, void*)+0x155>	10000abb: R_386_PC32	PS2::controllerWrite(unsigned char)
10000abf:	83 c4 10             	add    esp,0x10
10000ac2:	83 ec 08             	sub    esp,0x8
10000ac5:	68 a8 00 00 00       	push   0xa8
10000aca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000acd:	e8 fc ff ff ff       	call   10000ace <PS2::open(int, int, void*)+0x168>	10000ace: R_386_PC32	PS2::controllerWrite(unsigned char)
10000ad2:	83 c4 10             	add    esp,0x10
10000ad5:	e8 fc ff ff ff       	call   10000ad6 <PS2::open(int, int, void*)+0x170>	10000ad6: R_386_PC32	unlockScheduler()
10000ada:	83 ec 0c             	sub    esp,0xc
10000add:	68 60 01 00 00       	push   0x160
10000ae2:	e8 fc ff ff ff       	call   10000ae3 <PS2::open(int, int, void*)+0x17d>	10000ae3: R_386_PC32	operator new(unsigned long)
10000ae7:	83 c4 10             	add    esp,0x10
10000aea:	89 c3                	mov    ebx,eax
10000aec:	83 ec 0c             	sub    esp,0xc
10000aef:	53                   	push   ebx
10000af0:	e8 fc ff ff ff       	call   10000af1 <PS2::open(int, int, void*)+0x18b>	10000af1: R_386_PC32	PS2Port::PS2Port()
10000af5:	83 c4 10             	add    esp,0x10
10000af8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000afb:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
10000b01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b04:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000b07:	8b 92 58 01 00 00    	mov    edx,DWORD PTR [edx+0x158]
10000b0d:	83 ec 08             	sub    esp,0x8
10000b10:	52                   	push   edx
10000b11:	50                   	push   eax
10000b12:	e8 fc ff ff ff       	call   10000b13 <PS2::open(int, int, void*)+0x1ad>	10000b13: R_386_PC32	Device::addChild(Device*)
10000b17:	83 c4 10             	add    esp,0x10
10000b1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b1d:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
10000b23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b26:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000b2c:	8b 00                	mov    eax,DWORD PTR [eax]
10000b2e:	83 c0 08             	add    eax,0x8
10000b31:	8b 00                	mov    eax,DWORD PTR [eax]
10000b33:	6a 00                	push   0x0
10000b35:	6a 00                	push   0x0
10000b37:	6a 00                	push   0x0
10000b39:	52                   	push   edx
10000b3a:	ff d0                	call   eax
10000b3c:	83 c4 10             	add    esp,0x10
10000b3f:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10000b43:	75 65                	jne    10000baa <PS2::open(int, int, void*)+0x244>
10000b45:	83 ec 0c             	sub    esp,0xc
10000b48:	68 60 01 00 00       	push   0x160
10000b4d:	e8 fc ff ff ff       	call   10000b4e <PS2::open(int, int, void*)+0x1e8>	10000b4e: R_386_PC32	operator new(unsigned long)
10000b52:	83 c4 10             	add    esp,0x10
10000b55:	89 c3                	mov    ebx,eax
10000b57:	83 ec 0c             	sub    esp,0xc
10000b5a:	53                   	push   ebx
10000b5b:	e8 fc ff ff ff       	call   10000b5c <PS2::open(int, int, void*)+0x1f6>	10000b5c: R_386_PC32	PS2Port::PS2Port()
10000b60:	83 c4 10             	add    esp,0x10
10000b63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b66:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
10000b6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b6f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000b72:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10000b78:	83 ec 08             	sub    esp,0x8
10000b7b:	52                   	push   edx
10000b7c:	50                   	push   eax
10000b7d:	e8 fc ff ff ff       	call   10000b7e <PS2::open(int, int, void*)+0x218>	10000b7e: R_386_PC32	Device::addChild(Device*)
10000b82:	83 c4 10             	add    esp,0x10
10000b85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b88:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10000b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b91:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10000b97:	8b 00                	mov    eax,DWORD PTR [eax]
10000b99:	83 c0 08             	add    eax,0x8
10000b9c:	8b 00                	mov    eax,DWORD PTR [eax]
10000b9e:	6a 00                	push   0x0
10000ba0:	6a 00                	push   0x0
10000ba2:	6a 01                	push   0x1
10000ba4:	52                   	push   edx
10000ba5:	ff d0                	call   eax
10000ba7:	83 c4 10             	add    esp,0x10
10000baa:	b8 00 00 00 00       	mov    eax,0x0
10000baf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000bb2:	c9                   	leave  
10000bb3:	c3                   	ret    

10000bb4 <PS2::close(int, int, void*)>:
10000bb4:	b8 00 00 00 00       	mov    eax,0x0
10000bb9:	c3                   	ret    

10000bba <PS2::detect()>:
10000bba:	90                   	nop
10000bbb:	c3                   	ret    

10000bbc <PS2::controllerWrite(unsigned char)>:
10000bbc:	55                   	push   ebp
10000bbd:	89 e5                	mov    ebp,esp
10000bbf:	83 ec 14             	sub    esp,0x14
10000bc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000bc5:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10000bc8:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10000bcf:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10000bd5:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000bd8:	89 c2                	mov    edx,eax
10000bda:	ec                   	in     al,dx
10000bdb:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000bde:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000be1:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10000be4:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000be8:	83 e0 40             	and    eax,0x40
10000beb:	85 c0                	test   eax,eax
10000bed:	75 2d                	jne    10000c1c <PS2::controllerWrite(unsigned char)+0x60>
10000bef:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10000bf2:	84 c0                	test   al,al
10000bf4:	78 26                	js     10000c1c <PS2::controllerWrite(unsigned char)+0x60>
10000bf6:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000bfa:	83 e0 02             	and    eax,0x2
10000bfd:	85 c0                	test   eax,eax
10000bff:	74 17                	je     10000c18 <PS2::controllerWrite(unsigned char)+0x5c>
10000c01:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000c04:	8d 50 01             	lea    edx,[eax+0x1]
10000c07:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10000c0a:	3d 20 03 00 00       	cmp    eax,0x320
10000c0f:	0f 94 c0             	sete   al
10000c12:	84 c0                	test   al,al
10000c14:	75 05                	jne    10000c1b <PS2::controllerWrite(unsigned char)+0x5f>
10000c16:	eb b7                	jmp    10000bcf <PS2::controllerWrite(unsigned char)+0x13>
10000c18:	90                   	nop
10000c19:	eb 01                	jmp    10000c1c <PS2::controllerWrite(unsigned char)+0x60>
10000c1b:	90                   	nop
10000c1c:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
10000c20:	66 c7 45 f4 64 00    	mov    WORD PTR [ebp-0xc],0x64
10000c26:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000c29:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000c2c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000c2f:	ee                   	out    dx,al
10000c30:	b0 01                	mov    al,0x1
10000c32:	c9                   	leave  
10000c33:	c3                   	ret    

10000c34 <PS2::controllerWrite(unsigned char, unsigned char)>:
10000c34:	55                   	push   ebp
10000c35:	89 e5                	mov    ebp,esp
10000c37:	83 ec 28             	sub    esp,0x28
10000c3a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000c3d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000c40:	88 55 dc             	mov    BYTE PTR [ebp-0x24],dl
10000c43:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
10000c46:	0f b6 45 dc          	movzx  eax,BYTE PTR [ebp-0x24]
10000c4a:	50                   	push   eax
10000c4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c4e:	e8 fc ff ff ff       	call   10000c4f <PS2::controllerWrite(unsigned char, unsigned char)+0x1b>	10000c4f: R_386_PC32	PS2::controllerWrite(unsigned char)
10000c53:	83 c4 08             	add    esp,0x8
10000c56:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10000c5d:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10000c63:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000c66:	89 c2                	mov    edx,eax
10000c68:	ec                   	in     al,dx
10000c69:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c6c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000c6f:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10000c72:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000c76:	83 e0 40             	and    eax,0x40
10000c79:	85 c0                	test   eax,eax
10000c7b:	75 07                	jne    10000c84 <PS2::controllerWrite(unsigned char, unsigned char)+0x50>
10000c7d:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10000c80:	84 c0                	test   al,al
10000c82:	79 18                	jns    10000c9c <PS2::controllerWrite(unsigned char, unsigned char)+0x68>
10000c84:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10000c88:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10000c8e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000c91:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000c94:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000c97:	ee                   	out    dx,al
10000c98:	b0 00                	mov    al,0x0
10000c9a:	eb 4f                	jmp    10000ceb <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10000c9c:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000ca0:	83 e0 02             	and    eax,0x2
10000ca3:	85 c0                	test   eax,eax
10000ca5:	74 2d                	je     10000cd4 <PS2::controllerWrite(unsigned char, unsigned char)+0xa0>
10000ca7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000caa:	8d 50 01             	lea    edx,[eax+0x1]
10000cad:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10000cb0:	3d 20 03 00 00       	cmp    eax,0x320
10000cb5:	0f 94 c0             	sete   al
10000cb8:	84 c0                	test   al,al
10000cba:	74 a1                	je     10000c5d <PS2::controllerWrite(unsigned char, unsigned char)+0x29>
10000cbc:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10000cc0:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10000cc6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000cc9:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000ccc:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000ccf:	ee                   	out    dx,al
10000cd0:	b0 00                	mov    al,0x0
10000cd2:	eb 17                	jmp    10000ceb <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10000cd4:	90                   	nop
10000cd5:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10000cd9:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10000cdf:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10000ce2:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10000ce5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000ce8:	ee                   	out    dx,al
10000ce9:	b0 01                	mov    al,0x1
10000ceb:	c9                   	leave  
10000cec:	c3                   	ret    
10000ced:	90                   	nop

10000cee <PS2::controllerRead()>:
10000cee:	55                   	push   ebp
10000cef:	89 e5                	mov    ebp,esp
10000cf1:	83 ec 20             	sub    esp,0x20
10000cf4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10000cfb:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10000d01:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000d04:	89 c2                	mov    edx,eax
10000d06:	ec                   	in     al,dx
10000d07:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000d0a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000d0d:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10000d10:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000d14:	83 e0 40             	and    eax,0x40
10000d17:	85 c0                	test   eax,eax
10000d19:	75 07                	jne    10000d22 <PS2::controllerRead()+0x34>
10000d1b:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10000d1e:	84 c0                	test   al,al
10000d20:	79 04                	jns    10000d26 <PS2::controllerRead()+0x38>
10000d22:	b0 00                	mov    al,0x0
10000d24:	eb 48                	jmp    10000d6e <PS2::controllerRead()+0x80>
10000d26:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10000d2a:	83 e0 01             	and    eax,0x1
10000d2d:	85 c0                	test   eax,eax
10000d2f:	75 29                	jne    10000d5a <PS2::controllerRead()+0x6c>
10000d31:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10000d34:	8d 50 01             	lea    edx,[eax+0x1]
10000d37:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10000d3a:	3d 40 06 00 00       	cmp    eax,0x640
10000d3f:	0f 94 c0             	sete   al
10000d42:	84 c0                	test   al,al
10000d44:	74 b5                	je     10000cfb <PS2::controllerRead()+0xd>
10000d46:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10000d4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000d4f:	89 c2                	mov    edx,eax
10000d51:	ec                   	in     al,dx
10000d52:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000d55:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000d58:	eb 14                	jmp    10000d6e <PS2::controllerRead()+0x80>
10000d5a:	90                   	nop
10000d5b:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10000d61:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000d64:	89 c2                	mov    edx,eax
10000d66:	ec                   	in     al,dx
10000d67:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000d6a:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000d6d:	90                   	nop
10000d6e:	c9                   	leave  
10000d6f:	c3                   	ret    

10000d70 <PS2Keyboard::PS2Keyboard()>:
10000d70:	55                   	push   ebp
10000d71:	89 e5                	mov    ebp,esp
10000d73:	83 ec 08             	sub    esp,0x8
10000d76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d79:	83 ec 08             	sub    esp,0x8
10000d7c:	68 00 00 00 00       	push   0x0	10000d7d: R_386_32	ps2keyname
10000d81:	50                   	push   eax
10000d82:	e8 fc ff ff ff       	call   10000d83 <PS2Keyboard::PS2Keyboard()+0x13>	10000d83: R_386_PC32	Keyboard::Keyboard(char const*)
10000d87:	83 c4 10             	add    esp,0x10
10000d8a:	ba 08 00 00 00       	mov    edx,0x8	10000d8b: R_386_32	vtable for PS2Keyboard
10000d8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d92:	89 10                	mov    DWORD PTR [eax],edx
10000d94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d97:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10000d9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000da1:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10000da8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dab:	c6 80 66 01 00 00 00 	mov    BYTE PTR [eax+0x166],0x0
10000db2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000db5:	c6 80 67 01 00 00 00 	mov    BYTE PTR [eax+0x167],0x0
10000dbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dbf:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10000dc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dc9:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
10000dd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dd3:	c6 80 6a 01 00 00 00 	mov    BYTE PTR [eax+0x16a],0x0
10000dda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ddd:	c6 80 6b 01 00 00 00 	mov    BYTE PTR [eax+0x16b],0x0
10000de4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000de7:	c6 80 6c 01 00 00 00 	mov    BYTE PTR [eax+0x16c],0x0
10000dee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000df1:	c6 80 6d 01 00 00 00 	mov    BYTE PTR [eax+0x16d],0x0
10000df8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dfb:	c6 80 6e 01 00 00 00 	mov    BYTE PTR [eax+0x16e],0x0
10000e02:	90                   	nop
10000e03:	c9                   	leave  
10000e04:	c3                   	ret    
10000e05:	90                   	nop

10000e06 <PS2Keyboard::~PS2Keyboard()>:
10000e06:	55                   	push   ebp
10000e07:	89 e5                	mov    ebp,esp
10000e09:	83 ec 08             	sub    esp,0x8
10000e0c:	ba 08 00 00 00       	mov    edx,0x8	10000e0d: R_386_32	vtable for PS2Keyboard
10000e11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e14:	89 10                	mov    DWORD PTR [eax],edx
10000e16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e19:	83 ec 0c             	sub    esp,0xc
10000e1c:	50                   	push   eax
10000e1d:	e8 fc ff ff ff       	call   10000e1e <PS2Keyboard::~PS2Keyboard()+0x18>	10000e1e: R_386_PC32	Keyboard::~Keyboard()
10000e22:	83 c4 10             	add    esp,0x10
10000e25:	90                   	nop
10000e26:	c9                   	leave  
10000e27:	c3                   	ret    

10000e28 <PS2Keyboard::~PS2Keyboard()>:
10000e28:	55                   	push   ebp
10000e29:	89 e5                	mov    ebp,esp
10000e2b:	83 ec 08             	sub    esp,0x8
10000e2e:	83 ec 0c             	sub    esp,0xc
10000e31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e34:	e8 fc ff ff ff       	call   10000e35 <PS2Keyboard::~PS2Keyboard()+0xd>	10000e35: R_386_PC32	PS2Keyboard::~PS2Keyboard()
10000e39:	83 c4 10             	add    esp,0x10
10000e3c:	83 ec 08             	sub    esp,0x8
10000e3f:	68 70 01 00 00       	push   0x170
10000e44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e47:	e8 fc ff ff ff       	call   10000e48 <PS2Keyboard::~PS2Keyboard()+0x20>	10000e48: R_386_PC32	operator delete(void*, unsigned long)
10000e4c:	83 c4 10             	add    esp,0x10
10000e4f:	c9                   	leave  
10000e50:	c3                   	ret    
10000e51:	90                   	nop

10000e52 <PS2Keyboard::setRepeatRate(int)>:
10000e52:	c3                   	ret    
10000e53:	90                   	nop

10000e54 <PS2Keyboard::setRepeatDelay(int)>:
10000e54:	c3                   	ret    
10000e55:	90                   	nop

10000e56 <PS2Keyboard::sendKey(unsigned short, bool)>:
10000e56:	83 ec 1c             	sub    esp,0x1c
10000e59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000e5d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10000e61:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10000e65:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10000e69:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10000e6e:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10000e75:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10000e7b:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10000e80:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10000e84:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10000e88:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000e8c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10000e91:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10000e96:	83 c4 1c             	add    esp,0x1c
10000e99:	e9 fc ff ff ff       	jmp    10000e9a <PS2Keyboard::sendKey(unsigned short, bool)+0x44>	10000e9a: R_386_PC32	sendKeyboardToken(KeyboardToken)

10000e9e <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)>:
10000e9e:	83 ec 1c             	sub    esp,0x1c
10000ea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000ea5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10000ea9:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10000ead:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10000eb1:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10000eb6:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10000ebd:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10000ec3:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10000ec8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10000ecc:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10000ed0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000ed4:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10000ed9:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10000ede:	83 c4 1c             	add    esp,0x1c
10000ee1:	e9 fc ff ff ff       	jmp    10000ee2 <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)+0x44>	10000ee2: R_386_PC32	sendKeyboardToken(KeyboardToken)

10000ee6 <PS2Keyboard::updateKeyboardLEDs()>:
10000ee6:	56                   	push   esi
10000ee7:	53                   	push   ebx
10000ee8:	83 ec 0c             	sub    esp,0xc
10000eeb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10000eef:	8a 96 69 01 00 00    	mov    dl,BYTE PTR [esi+0x169]
10000ef5:	0f b6 9e 6a 01 00 00 	movzx  ebx,BYTE PTR [esi+0x16a]
10000efc:	8d 04 1b             	lea    eax,[ebx+ebx*1]
10000eff:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10000f06:	09 c3                	or     ebx,eax
10000f08:	0a 9e 6b 01 00 00    	or     bl,BYTE PTR [esi+0x16b]
10000f0e:	68 ed 00 00 00       	push   0xed
10000f13:	0f b6 db             	movzx  ebx,bl
10000f16:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10000f1c:	e8 fc ff ff ff       	call   10000f1d <PS2Keyboard::updateKeyboardLEDs()+0x37>	10000f1d: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10000f21:	58                   	pop    eax
10000f22:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10000f28:	e8 fc ff ff ff       	call   10000f29 <PS2Keyboard::updateKeyboardLEDs()+0x43>	10000f29: R_386_PC32	PS2Port::deviceRead()
10000f2d:	5a                   	pop    edx
10000f2e:	59                   	pop    ecx
10000f2f:	53                   	push   ebx
10000f30:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10000f36:	e8 fc ff ff ff       	call   10000f37 <PS2Keyboard::updateKeyboardLEDs()+0x51>	10000f37: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10000f3b:	8b 86 60 01 00 00    	mov    eax,DWORD PTR [esi+0x160]
10000f41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10000f45:	83 c4 14             	add    esp,0x14
10000f48:	5b                   	pop    ebx
10000f49:	5e                   	pop    esi
10000f4a:	e9 fc ff ff ff       	jmp    10000f4b <PS2Keyboard::updateKeyboardLEDs()+0x65>	10000f4b: R_386_PC32	PS2Port::deviceRead()

10000f4f <ps2KeyboardHandler(regs*, void*)>:
10000f4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10000f53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000f57:	eb 01                	jmp    10000f5a <PS2Keyboard::handler()>
10000f59:	90                   	nop

10000f5a <PS2Keyboard::handler()>:
10000f5a:	57                   	push   edi
10000f5b:	56                   	push   esi
10000f5c:	53                   	push   ebx
10000f5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10000f61:	e4 60                	in     al,0x60
10000f63:	80 be 6e 01 00 00 00 	cmp    BYTE PTR [esi+0x16e],0x0
10000f6a:	74 29                	je     10000f95 <PS2Keyboard::handler()+0x3b>
10000f6c:	88 c2                	mov    dl,al
10000f6e:	3c e0                	cmp    al,0xe0
10000f70:	75 0c                	jne    10000f7e <PS2Keyboard::handler()+0x24>
10000f72:	c6 86 64 01 00 00 01 	mov    BYTE PTR [esi+0x164],0x1
10000f79:	e9 17 07 00 00       	jmp    10001695 <PS2Keyboard::handler()+0x73b>
10000f7e:	84 c0                	test   al,al
10000f80:	0f 89 52 01 00 00    	jns    100010d8 <PS2Keyboard::handler()+0x17e>
10000f86:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10000f8d:	83 e2 7f             	and    edx,0x7f
10000f90:	e9 43 01 00 00       	jmp    100010d8 <PS2Keyboard::handler()+0x17e>
10000f95:	3c e0                	cmp    al,0xe0
10000f97:	74 d9                	je     10000f72 <PS2Keyboard::handler()+0x18>
10000f99:	3c f0                	cmp    al,0xf0
10000f9b:	75 0c                	jne    10000fa9 <PS2Keyboard::handler()+0x4f>
10000f9d:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10000fa4:	e9 ec 06 00 00       	jmp    10001695 <PS2Keyboard::handler()+0x73b>
10000fa9:	3c 12                	cmp    al,0x12
10000fab:	75 1f                	jne    10000fcc <PS2Keyboard::handler()+0x72>
10000fad:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10000fb3:	83 f0 01             	xor    eax,0x1
10000fb6:	88 86 67 01 00 00    	mov    BYTE PTR [esi+0x167],al
10000fbc:	52                   	push   edx
10000fbd:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10000fc4:	50                   	push   eax
10000fc5:	68 04 01 00 00       	push   0x104
10000fca:	eb 23                	jmp    10000fef <PS2Keyboard::handler()+0x95>
10000fcc:	76 3d                	jbe    1000100b <PS2Keyboard::handler()+0xb1>
10000fce:	3c 14                	cmp    al,0x14
10000fd0:	75 62                	jne    10001034 <PS2Keyboard::handler()+0xda>
10000fd2:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10000fd8:	83 f0 01             	xor    eax,0x1
10000fdb:	88 86 68 01 00 00    	mov    BYTE PTR [esi+0x168],al
10000fe1:	51                   	push   ecx
10000fe2:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10000fe9:	50                   	push   eax
10000fea:	68 00 01 00 00       	push   0x100
10000fef:	56                   	push   esi
10000ff0:	e8 fc ff ff ff       	call   10000ff1 <PS2Keyboard::handler()+0x97>	10000ff1: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
10000ff5:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10000ffc:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10001003:	83 c4 10             	add    esp,0x10
10001006:	e9 8a 06 00 00       	jmp    10001695 <PS2Keyboard::handler()+0x73b>
1000100b:	3c 11                	cmp    al,0x11
1000100d:	75 2d                	jne    1000103c <PS2Keyboard::handler()+0xe2>
1000100f:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10001015:	83 f0 01             	xor    eax,0x1
10001018:	88 86 6d 01 00 00    	mov    BYTE PTR [esi+0x16d],al
1000101e:	88 86 6c 01 00 00    	mov    BYTE PTR [esi+0x16c],al
10001024:	50                   	push   eax
10001025:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000102c:	50                   	push   eax
1000102d:	68 01 01 00 00       	push   0x101
10001032:	eb bb                	jmp    10000fef <PS2Keyboard::handler()+0x95>
10001034:	3c 59                	cmp    al,0x59
10001036:	0f 84 71 ff ff ff    	je     10000fad <PS2Keyboard::handler()+0x53>
1000103c:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
10001043:	0f 84 b1 01 00 00    	je     100011fa <PS2Keyboard::handler()+0x2a0>
10001049:	3c 6b                	cmp    al,0x6b
1000104b:	0f 84 f2 00 00 00    	je     10001143 <PS2Keyboard::handler()+0x1e9>
10001051:	77 50                	ja     100010a3 <PS2Keyboard::handler()+0x149>
10001053:	3c 51                	cmp    al,0x51
10001055:	0f 84 37 01 00 00    	je     10001192 <PS2Keyboard::handler()+0x238>
1000105b:	77 23                	ja     10001080 <PS2Keyboard::handler()+0x126>
1000105d:	3c 49                	cmp    al,0x49
1000105f:	0f 84 0d 01 00 00    	je     10001172 <PS2Keyboard::handler()+0x218>
10001065:	3c 4a                	cmp    al,0x4a
10001067:	0f 85 29 04 00 00    	jne    10001496 <PS2Keyboard::handler()+0x53c>
1000106d:	50                   	push   eax
1000106e:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001075:	50                   	push   eax
10001076:	68 1f 03 00 00       	push   0x31f
1000107b:	e9 c6 03 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001080:	3c 5a                	cmp    al,0x5a
10001082:	0f 84 5f 01 00 00    	je     100011e7 <PS2Keyboard::handler()+0x28d>
10001088:	3c 69                	cmp    al,0x69
1000108a:	0f 85 06 04 00 00    	jne    10001496 <PS2Keyboard::handler()+0x53c>
10001090:	51                   	push   ecx
10001091:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001098:	50                   	push   eax
10001099:	68 01 02 00 00       	push   0x201
1000109e:	e9 a3 03 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100010a3:	3c 71                	cmp    al,0x71
100010a5:	0f 84 16 01 00 00    	je     100011c1 <PS2Keyboard::handler()+0x267>
100010ab:	77 15                	ja     100010c2 <PS2Keyboard::handler()+0x168>
100010ad:	3c 6c                	cmp    al,0x6c
100010af:	0f 84 f0 00 00 00    	je     100011a5 <PS2Keyboard::handler()+0x24b>
100010b5:	3c 70                	cmp    al,0x70
100010b7:	0f 84 17 01 00 00    	je     100011d4 <PS2Keyboard::handler()+0x27a>
100010bd:	e9 d4 03 00 00       	jmp    10001496 <PS2Keyboard::handler()+0x53c>
100010c2:	3c 74                	cmp    al,0x74
100010c4:	0f 84 8c 00 00 00    	je     10001156 <PS2Keyboard::handler()+0x1fc>
100010ca:	3c 75                	cmp    al,0x75
100010cc:	74 4a                	je     10001118 <PS2Keyboard::handler()+0x1be>
100010ce:	3c 72                	cmp    al,0x72
100010d0:	0f 85 c0 03 00 00    	jne    10001496 <PS2Keyboard::handler()+0x53c>
100010d6:	eb 58                	jmp    10001130 <PS2Keyboard::handler()+0x1d6>
100010d8:	80 fa 2a             	cmp    dl,0x2a
100010db:	0f 84 cc fe ff ff    	je     10000fad <PS2Keyboard::handler()+0x53>
100010e1:	0f 87 97 05 00 00    	ja     1000167e <PS2Keyboard::handler()+0x724>
100010e7:	80 fa 1d             	cmp    dl,0x1d
100010ea:	0f 84 e2 fe ff ff    	je     10000fd2 <PS2Keyboard::handler()+0x78>
100010f0:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
100010f7:	0f 84 ce 03 00 00    	je     100014cb <PS2Keyboard::handler()+0x571>
100010fd:	80 fa 4b             	cmp    dl,0x4b
10001100:	74 41                	je     10001143 <PS2Keyboard::handler()+0x1e9>
10001102:	77 27                	ja     1000112b <PS2Keyboard::handler()+0x1d1>
10001104:	80 fa 47             	cmp    dl,0x47
10001107:	0f 84 98 00 00 00    	je     100011a5 <PS2Keyboard::handler()+0x24b>
1000110d:	0f 86 96 03 00 00    	jbe    100014a9 <PS2Keyboard::handler()+0x54f>
10001113:	80 fa 48             	cmp    dl,0x48
10001116:	75 51                	jne    10001169 <PS2Keyboard::handler()+0x20f>
10001118:	50                   	push   eax
10001119:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001120:	50                   	push   eax
10001121:	68 0b 02 00 00       	push   0x20b
10001126:	e9 1b 03 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
1000112b:	80 fa 50             	cmp    dl,0x50
1000112e:	75 55                	jne    10001185 <PS2Keyboard::handler()+0x22b>
10001130:	50                   	push   eax
10001131:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001138:	50                   	push   eax
10001139:	68 0c 02 00 00       	push   0x20c
1000113e:	e9 03 03 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001143:	50                   	push   eax
10001144:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000114b:	50                   	push   eax
1000114c:	68 0d 02 00 00       	push   0x20d
10001151:	e9 f0 02 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001156:	50                   	push   eax
10001157:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000115e:	50                   	push   eax
1000115f:	68 0e 02 00 00       	push   0x20e
10001164:	e9 dd 02 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001169:	80 fa 49             	cmp    dl,0x49
1000116c:	0f 85 24 03 00 00    	jne    10001496 <PS2Keyboard::handler()+0x53c>
10001172:	50                   	push   eax
10001173:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000117a:	50                   	push   eax
1000117b:	68 04 02 00 00       	push   0x204
10001180:	e9 c1 02 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001185:	0f 86 2f 03 00 00    	jbe    100014ba <PS2Keyboard::handler()+0x560>
1000118b:	80 fa 52             	cmp    dl,0x52
1000118e:	74 44                	je     100011d4 <PS2Keyboard::handler()+0x27a>
10001190:	73 26                	jae    100011b8 <PS2Keyboard::handler()+0x25e>
10001192:	57                   	push   edi
10001193:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000119a:	50                   	push   eax
1000119b:	68 05 02 00 00       	push   0x205
100011a0:	e9 a1 02 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100011a5:	53                   	push   ebx
100011a6:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100011ad:	50                   	push   eax
100011ae:	68 00 02 00 00       	push   0x200
100011b3:	e9 8e 02 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100011b8:	80 fa 53             	cmp    dl,0x53
100011bb:	0f 85 d5 02 00 00    	jne    10001496 <PS2Keyboard::handler()+0x53c>
100011c1:	52                   	push   edx
100011c2:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100011c9:	50                   	push   eax
100011ca:	68 03 02 00 00       	push   0x203
100011cf:	e9 72 02 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100011d4:	50                   	push   eax
100011d5:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100011dc:	50                   	push   eax
100011dd:	68 02 02 00 00       	push   0x202
100011e2:	e9 5f 02 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100011e7:	50                   	push   eax
100011e8:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100011ef:	50                   	push   eax
100011f0:	68 1d 03 00 00       	push   0x31d
100011f5:	e9 4c 02 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100011fa:	0f b6 96 66 01 00 00 	movzx  edx,BYTE PTR [esi+0x166]
10001201:	3c 66                	cmp    al,0x66
10001203:	75 09                	jne    1000120e <PS2Keyboard::handler()+0x2b4>
10001205:	50                   	push   eax
10001206:	52                   	push   edx
10001207:	6a 08                	push   0x8
10001209:	e9 38 02 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
1000120e:	3c 0d                	cmp    al,0xd
10001210:	75 09                	jne    1000121b <PS2Keyboard::handler()+0x2c1>
10001212:	50                   	push   eax
10001213:	52                   	push   edx
10001214:	6a 09                	push   0x9
10001216:	e9 2b 02 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
1000121b:	3c 58                	cmp    al,0x58
1000121d:	75 2a                	jne    10001249 <PS2Keyboard::handler()+0x2ef>
1000121f:	84 d2                	test   dl,dl
10001221:	75 13                	jne    10001236 <PS2Keyboard::handler()+0x2dc>
10001223:	83 ec 0c             	sub    esp,0xc
10001226:	80 b6 69 01 00 00 01 	xor    BYTE PTR [esi+0x169],0x1
1000122d:	56                   	push   esi
1000122e:	e8 fc ff ff ff       	call   1000122f <PS2Keyboard::handler()+0x2d5>	1000122f: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
10001233:	83 c4 10             	add    esp,0x10
10001236:	50                   	push   eax
10001237:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000123e:	50                   	push   eax
1000123f:	68 80 02 00 00       	push   0x280
10001244:	e9 fd 01 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001249:	3c 77                	cmp    al,0x77
1000124b:	75 2a                	jne    10001277 <PS2Keyboard::handler()+0x31d>
1000124d:	84 d2                	test   dl,dl
1000124f:	75 13                	jne    10001264 <PS2Keyboard::handler()+0x30a>
10001251:	83 ec 0c             	sub    esp,0xc
10001254:	80 b6 6a 01 00 00 01 	xor    BYTE PTR [esi+0x16a],0x1
1000125b:	56                   	push   esi
1000125c:	e8 fc ff ff ff       	call   1000125d <PS2Keyboard::handler()+0x303>	1000125d: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
10001261:	83 c4 10             	add    esp,0x10
10001264:	50                   	push   eax
10001265:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000126c:	50                   	push   eax
1000126d:	68 81 02 00 00       	push   0x281
10001272:	e9 cf 01 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001277:	3c 7e                	cmp    al,0x7e
10001279:	75 2a                	jne    100012a5 <PS2Keyboard::handler()+0x34b>
1000127b:	84 d2                	test   dl,dl
1000127d:	75 13                	jne    10001292 <PS2Keyboard::handler()+0x338>
1000127f:	83 ec 0c             	sub    esp,0xc
10001282:	80 b6 6b 01 00 00 01 	xor    BYTE PTR [esi+0x16b],0x1
10001289:	56                   	push   esi
1000128a:	e8 fc ff ff ff       	call   1000128b <PS2Keyboard::handler()+0x331>	1000128b: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
1000128f:	83 c4 10             	add    esp,0x10
10001292:	57                   	push   edi
10001293:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000129a:	50                   	push   eax
1000129b:	68 82 02 00 00       	push   0x282
100012a0:	e9 a1 01 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100012a5:	3c 05                	cmp    al,0x5
100012a7:	75 0c                	jne    100012b5 <PS2Keyboard::handler()+0x35b>
100012a9:	53                   	push   ebx
100012aa:	52                   	push   edx
100012ab:	68 00 03 00 00       	push   0x300
100012b0:	e9 91 01 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100012b5:	3c 06                	cmp    al,0x6
100012b7:	75 0c                	jne    100012c5 <PS2Keyboard::handler()+0x36b>
100012b9:	51                   	push   ecx
100012ba:	52                   	push   edx
100012bb:	68 01 03 00 00       	push   0x301
100012c0:	e9 81 01 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100012c5:	3c 04                	cmp    al,0x4
100012c7:	75 0c                	jne    100012d5 <PS2Keyboard::handler()+0x37b>
100012c9:	50                   	push   eax
100012ca:	52                   	push   edx
100012cb:	68 02 03 00 00       	push   0x302
100012d0:	e9 71 01 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100012d5:	3c 0c                	cmp    al,0xc
100012d7:	75 0c                	jne    100012e5 <PS2Keyboard::handler()+0x38b>
100012d9:	50                   	push   eax
100012da:	52                   	push   edx
100012db:	68 03 03 00 00       	push   0x303
100012e0:	e9 61 01 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100012e5:	3c 03                	cmp    al,0x3
100012e7:	75 0c                	jne    100012f5 <PS2Keyboard::handler()+0x39b>
100012e9:	50                   	push   eax
100012ea:	52                   	push   edx
100012eb:	68 04 03 00 00       	push   0x304
100012f0:	e9 51 01 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100012f5:	3c 0b                	cmp    al,0xb
100012f7:	75 0c                	jne    10001305 <PS2Keyboard::handler()+0x3ab>
100012f9:	50                   	push   eax
100012fa:	52                   	push   edx
100012fb:	68 05 03 00 00       	push   0x305
10001300:	e9 41 01 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001305:	3c 02                	cmp    al,0x2
10001307:	74 04                	je     1000130d <PS2Keyboard::handler()+0x3b3>
10001309:	3c 83                	cmp    al,0x83
1000130b:	75 0c                	jne    10001319 <PS2Keyboard::handler()+0x3bf>
1000130d:	50                   	push   eax
1000130e:	52                   	push   edx
1000130f:	68 06 03 00 00       	push   0x306
10001314:	e9 2d 01 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001319:	3c 0a                	cmp    al,0xa
1000131b:	75 0c                	jne    10001329 <PS2Keyboard::handler()+0x3cf>
1000131d:	50                   	push   eax
1000131e:	52                   	push   edx
1000131f:	68 07 03 00 00       	push   0x307
10001324:	e9 1d 01 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001329:	3c 01                	cmp    al,0x1
1000132b:	75 0c                	jne    10001339 <PS2Keyboard::handler()+0x3df>
1000132d:	57                   	push   edi
1000132e:	52                   	push   edx
1000132f:	68 08 03 00 00       	push   0x308
10001334:	e9 0d 01 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001339:	3c 09                	cmp    al,0x9
1000133b:	75 0c                	jne    10001349 <PS2Keyboard::handler()+0x3ef>
1000133d:	53                   	push   ebx
1000133e:	52                   	push   edx
1000133f:	68 09 03 00 00       	push   0x309
10001344:	e9 fd 00 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001349:	3c 78                	cmp    al,0x78
1000134b:	75 0c                	jne    10001359 <PS2Keyboard::handler()+0x3ff>
1000134d:	51                   	push   ecx
1000134e:	52                   	push   edx
1000134f:	68 0a 03 00 00       	push   0x30a
10001354:	e9 ed 00 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001359:	3c 07                	cmp    al,0x7
1000135b:	75 0c                	jne    10001369 <PS2Keyboard::handler()+0x40f>
1000135d:	50                   	push   eax
1000135e:	52                   	push   edx
1000135f:	68 0b 03 00 00       	push   0x30b
10001364:	e9 dd 00 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001369:	3c 5a                	cmp    al,0x5a
1000136b:	75 09                	jne    10001376 <PS2Keyboard::handler()+0x41c>
1000136d:	50                   	push   eax
1000136e:	52                   	push   edx
1000136f:	6a 0a                	push   0xa
10001371:	e9 d0 00 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001376:	3c 76                	cmp    al,0x76
10001378:	75 0c                	jne    10001386 <PS2Keyboard::handler()+0x42c>
1000137a:	50                   	push   eax
1000137b:	52                   	push   edx
1000137c:	68 0a 02 00 00       	push   0x20a
10001381:	e9 c0 00 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001386:	3c 70                	cmp    al,0x70
10001388:	75 0c                	jne    10001396 <PS2Keyboard::handler()+0x43c>
1000138a:	50                   	push   eax
1000138b:	52                   	push   edx
1000138c:	68 10 03 00 00       	push   0x310
10001391:	e9 b0 00 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001396:	3c 69                	cmp    al,0x69
10001398:	75 0c                	jne    100013a6 <PS2Keyboard::handler()+0x44c>
1000139a:	50                   	push   eax
1000139b:	52                   	push   edx
1000139c:	68 11 03 00 00       	push   0x311
100013a1:	e9 a0 00 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100013a6:	3c 72                	cmp    al,0x72
100013a8:	75 0c                	jne    100013b6 <PS2Keyboard::handler()+0x45c>
100013aa:	50                   	push   eax
100013ab:	52                   	push   edx
100013ac:	68 12 03 00 00       	push   0x312
100013b1:	e9 90 00 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100013b6:	3c 7a                	cmp    al,0x7a
100013b8:	75 0c                	jne    100013c6 <PS2Keyboard::handler()+0x46c>
100013ba:	57                   	push   edi
100013bb:	52                   	push   edx
100013bc:	68 13 03 00 00       	push   0x313
100013c1:	e9 80 00 00 00       	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100013c6:	3c 6b                	cmp    al,0x6b
100013c8:	75 09                	jne    100013d3 <PS2Keyboard::handler()+0x479>
100013ca:	53                   	push   ebx
100013cb:	52                   	push   edx
100013cc:	68 14 03 00 00       	push   0x314
100013d1:	eb 73                	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100013d3:	3c 73                	cmp    al,0x73
100013d5:	75 09                	jne    100013e0 <PS2Keyboard::handler()+0x486>
100013d7:	51                   	push   ecx
100013d8:	52                   	push   edx
100013d9:	68 15 03 00 00       	push   0x315
100013de:	eb 66                	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100013e0:	3c 74                	cmp    al,0x74
100013e2:	75 09                	jne    100013ed <PS2Keyboard::handler()+0x493>
100013e4:	50                   	push   eax
100013e5:	52                   	push   edx
100013e6:	68 16 03 00 00       	push   0x316
100013eb:	eb 59                	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100013ed:	3c 6c                	cmp    al,0x6c
100013ef:	75 09                	jne    100013fa <PS2Keyboard::handler()+0x4a0>
100013f1:	50                   	push   eax
100013f2:	52                   	push   edx
100013f3:	68 17 03 00 00       	push   0x317
100013f8:	eb 4c                	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
100013fa:	3c 75                	cmp    al,0x75
100013fc:	75 09                	jne    10001407 <PS2Keyboard::handler()+0x4ad>
100013fe:	50                   	push   eax
100013ff:	52                   	push   edx
10001400:	68 18 03 00 00       	push   0x318
10001405:	eb 3f                	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001407:	3c 7d                	cmp    al,0x7d
10001409:	75 09                	jne    10001414 <PS2Keyboard::handler()+0x4ba>
1000140b:	50                   	push   eax
1000140c:	52                   	push   edx
1000140d:	68 19 03 00 00       	push   0x319
10001412:	eb 32                	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001414:	3c 71                	cmp    al,0x71
10001416:	75 09                	jne    10001421 <PS2Keyboard::handler()+0x4c7>
10001418:	50                   	push   eax
10001419:	52                   	push   edx
1000141a:	68 1a 03 00 00       	push   0x31a
1000141f:	eb 25                	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
10001421:	3c 7b                	cmp    al,0x7b
10001423:	75 09                	jne    1000142e <PS2Keyboard::handler()+0x4d4>
10001425:	50                   	push   eax
10001426:	52                   	push   edx
10001427:	68 1c 03 00 00       	push   0x31c
1000142c:	eb 18                	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
1000142e:	3c 79                	cmp    al,0x79
10001430:	75 09                	jne    1000143b <PS2Keyboard::handler()+0x4e1>
10001432:	57                   	push   edi
10001433:	52                   	push   edx
10001434:	68 1b 03 00 00       	push   0x31b
10001439:	eb 0b                	jmp    10001446 <PS2Keyboard::handler()+0x4ec>
1000143b:	3c 7c                	cmp    al,0x7c
1000143d:	75 0f                	jne    1000144e <PS2Keyboard::handler()+0x4f4>
1000143f:	53                   	push   ebx
10001440:	52                   	push   edx
10001441:	68 1e 03 00 00       	push   0x31e
10001446:	56                   	push   esi
10001447:	e8 fc ff ff ff       	call   10001448 <PS2Keyboard::handler()+0x4ee>	10001448: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
1000144c:	eb 45                	jmp    10001493 <PS2Keyboard::handler()+0x539>
1000144e:	0f b6 c0             	movzx  eax,al
10001451:	8a 8e 69 01 00 00    	mov    cl,BYTE PTR [esi+0x169]
10001457:	80 be 67 01 00 00 00 	cmp    BYTE PTR [esi+0x167],0x0
1000145e:	74 16                	je     10001476 <PS2Keyboard::handler()+0x51c>
10001460:	84 c9                	test   cl,cl
10001462:	74 09                	je     1000146d <PS2Keyboard::handler()+0x513>
10001464:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10001467: R_386_32	PS2Keyboard::internalMapCapUpper
1000146b:	eb 1d                	jmp    1000148a <PS2Keyboard::handler()+0x530>
1000146d:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10001470: R_386_32	PS2Keyboard::internalMapperUpper
10001474:	eb 14                	jmp    1000148a <PS2Keyboard::handler()+0x530>
10001476:	84 c9                	test   cl,cl
10001478:	74 09                	je     10001483 <PS2Keyboard::handler()+0x529>
1000147a:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	1000147d: R_386_32	PS2Keyboard::internalMapCapLower
10001481:	eb 07                	jmp    1000148a <PS2Keyboard::handler()+0x530>
10001483:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10001486: R_386_32	PS2Keyboard::internalMapperLower
1000148a:	51                   	push   ecx
1000148b:	52                   	push   edx
1000148c:	50                   	push   eax
1000148d:	56                   	push   esi
1000148e:	e8 fc ff ff ff       	call   1000148f <PS2Keyboard::handler()+0x535>	1000148f: R_386_PC32	PS2Keyboard::sendKey(unsigned short, bool)
10001493:	83 c4 10             	add    esp,0x10
10001496:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
1000149d:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
100014a4:	e9 ec 01 00 00       	jmp    10001695 <PS2Keyboard::handler()+0x73b>
100014a9:	80 fa 1c             	cmp    dl,0x1c
100014ac:	0f 84 35 fd ff ff    	je     100011e7 <PS2Keyboard::handler()+0x28d>
100014b2:	80 fa 35             	cmp    dl,0x35
100014b5:	e9 ad fb ff ff       	jmp    10001067 <PS2Keyboard::handler()+0x10d>
100014ba:	80 fa 4d             	cmp    dl,0x4d
100014bd:	0f 84 93 fc ff ff    	je     10001156 <PS2Keyboard::handler()+0x1fc>
100014c3:	80 fa 4f             	cmp    dl,0x4f
100014c6:	e9 bf fb ff ff       	jmp    1000108a <PS2Keyboard::handler()+0x130>
100014cb:	0f b6 8e 66 01 00 00 	movzx  ecx,BYTE PTR [esi+0x166]
100014d2:	80 fa 0e             	cmp    dl,0xe
100014d5:	75 07                	jne    100014de <PS2Keyboard::handler()+0x584>
100014d7:	50                   	push   eax
100014d8:	51                   	push   ecx
100014d9:	e9 29 fd ff ff       	jmp    10001207 <PS2Keyboard::handler()+0x2ad>
100014de:	80 fa 0f             	cmp    dl,0xf
100014e1:	75 07                	jne    100014ea <PS2Keyboard::handler()+0x590>
100014e3:	57                   	push   edi
100014e4:	51                   	push   ecx
100014e5:	e9 2a fd ff ff       	jmp    10001214 <PS2Keyboard::handler()+0x2ba>
100014ea:	80 fa 3a             	cmp    dl,0x3a
100014ed:	75 07                	jne    100014f6 <PS2Keyboard::handler()+0x59c>
100014ef:	84 c9                	test   cl,cl
100014f1:	e9 2b fd ff ff       	jmp    10001221 <PS2Keyboard::handler()+0x2c7>
100014f6:	80 fa 45             	cmp    dl,0x45
100014f9:	75 07                	jne    10001502 <PS2Keyboard::handler()+0x5a8>
100014fb:	84 c9                	test   cl,cl
100014fd:	e9 4d fd ff ff       	jmp    1000124f <PS2Keyboard::handler()+0x2f5>
10001502:	80 fa 46             	cmp    dl,0x46
10001505:	75 07                	jne    1000150e <PS2Keyboard::handler()+0x5b4>
10001507:	84 c9                	test   cl,cl
10001509:	e9 6f fd ff ff       	jmp    1000127d <PS2Keyboard::handler()+0x323>
1000150e:	80 fa 3b             	cmp    dl,0x3b
10001511:	75 07                	jne    1000151a <PS2Keyboard::handler()+0x5c0>
10001513:	53                   	push   ebx
10001514:	51                   	push   ecx
10001515:	e9 91 fd ff ff       	jmp    100012ab <PS2Keyboard::handler()+0x351>
1000151a:	80 fa 3c             	cmp    dl,0x3c
1000151d:	75 07                	jne    10001526 <PS2Keyboard::handler()+0x5cc>
1000151f:	52                   	push   edx
10001520:	51                   	push   ecx
10001521:	e9 95 fd ff ff       	jmp    100012bb <PS2Keyboard::handler()+0x361>
10001526:	80 fa 3d             	cmp    dl,0x3d
10001529:	75 07                	jne    10001532 <PS2Keyboard::handler()+0x5d8>
1000152b:	50                   	push   eax
1000152c:	51                   	push   ecx
1000152d:	e9 99 fd ff ff       	jmp    100012cb <PS2Keyboard::handler()+0x371>
10001532:	80 fa 3e             	cmp    dl,0x3e
10001535:	75 07                	jne    1000153e <PS2Keyboard::handler()+0x5e4>
10001537:	50                   	push   eax
10001538:	51                   	push   ecx
10001539:	e9 9d fd ff ff       	jmp    100012db <PS2Keyboard::handler()+0x381>
1000153e:	80 fa 3f             	cmp    dl,0x3f
10001541:	75 07                	jne    1000154a <PS2Keyboard::handler()+0x5f0>
10001543:	50                   	push   eax
10001544:	51                   	push   ecx
10001545:	e9 a1 fd ff ff       	jmp    100012eb <PS2Keyboard::handler()+0x391>
1000154a:	80 fa 40             	cmp    dl,0x40
1000154d:	75 07                	jne    10001556 <PS2Keyboard::handler()+0x5fc>
1000154f:	50                   	push   eax
10001550:	51                   	push   ecx
10001551:	e9 a5 fd ff ff       	jmp    100012fb <PS2Keyboard::handler()+0x3a1>
10001556:	80 fa 41             	cmp    dl,0x41
10001559:	75 07                	jne    10001562 <PS2Keyboard::handler()+0x608>
1000155b:	50                   	push   eax
1000155c:	51                   	push   ecx
1000155d:	e9 ad fd ff ff       	jmp    1000130f <PS2Keyboard::handler()+0x3b5>
10001562:	80 fa 42             	cmp    dl,0x42
10001565:	75 07                	jne    1000156e <PS2Keyboard::handler()+0x614>
10001567:	50                   	push   eax
10001568:	51                   	push   ecx
10001569:	e9 b1 fd ff ff       	jmp    1000131f <PS2Keyboard::handler()+0x3c5>
1000156e:	80 fa 43             	cmp    dl,0x43
10001571:	75 07                	jne    1000157a <PS2Keyboard::handler()+0x620>
10001573:	57                   	push   edi
10001574:	51                   	push   ecx
10001575:	e9 b5 fd ff ff       	jmp    1000132f <PS2Keyboard::handler()+0x3d5>
1000157a:	80 fa 44             	cmp    dl,0x44
1000157d:	75 07                	jne    10001586 <PS2Keyboard::handler()+0x62c>
1000157f:	53                   	push   ebx
10001580:	51                   	push   ecx
10001581:	e9 b9 fd ff ff       	jmp    1000133f <PS2Keyboard::handler()+0x3e5>
10001586:	84 d2                	test   dl,dl
10001588:	75 07                	jne    10001591 <PS2Keyboard::handler()+0x637>
1000158a:	52                   	push   edx
1000158b:	51                   	push   ecx
1000158c:	e9 be fd ff ff       	jmp    1000134f <PS2Keyboard::handler()+0x3f5>
10001591:	80 fa 1c             	cmp    dl,0x1c
10001594:	75 07                	jne    1000159d <PS2Keyboard::handler()+0x643>
10001596:	50                   	push   eax
10001597:	51                   	push   ecx
10001598:	e9 d2 fd ff ff       	jmp    1000136f <PS2Keyboard::handler()+0x415>
1000159d:	80 fa 01             	cmp    dl,0x1
100015a0:	75 07                	jne    100015a9 <PS2Keyboard::handler()+0x64f>
100015a2:	50                   	push   eax
100015a3:	51                   	push   ecx
100015a4:	e9 d3 fd ff ff       	jmp    1000137c <PS2Keyboard::handler()+0x422>
100015a9:	80 fa 52             	cmp    dl,0x52
100015ac:	75 07                	jne    100015b5 <PS2Keyboard::handler()+0x65b>
100015ae:	50                   	push   eax
100015af:	51                   	push   ecx
100015b0:	e9 d7 fd ff ff       	jmp    1000138c <PS2Keyboard::handler()+0x432>
100015b5:	80 fa 4f             	cmp    dl,0x4f
100015b8:	75 07                	jne    100015c1 <PS2Keyboard::handler()+0x667>
100015ba:	50                   	push   eax
100015bb:	51                   	push   ecx
100015bc:	e9 db fd ff ff       	jmp    1000139c <PS2Keyboard::handler()+0x442>
100015c1:	80 fa 50             	cmp    dl,0x50
100015c4:	75 07                	jne    100015cd <PS2Keyboard::handler()+0x673>
100015c6:	50                   	push   eax
100015c7:	51                   	push   ecx
100015c8:	e9 df fd ff ff       	jmp    100013ac <PS2Keyboard::handler()+0x452>
100015cd:	80 fa 51             	cmp    dl,0x51
100015d0:	75 07                	jne    100015d9 <PS2Keyboard::handler()+0x67f>
100015d2:	50                   	push   eax
100015d3:	51                   	push   ecx
100015d4:	e9 e3 fd ff ff       	jmp    100013bc <PS2Keyboard::handler()+0x462>
100015d9:	80 fa 4b             	cmp    dl,0x4b
100015dc:	75 07                	jne    100015e5 <PS2Keyboard::handler()+0x68b>
100015de:	57                   	push   edi
100015df:	51                   	push   ecx
100015e0:	e9 e7 fd ff ff       	jmp    100013cc <PS2Keyboard::handler()+0x472>
100015e5:	80 fa 4c             	cmp    dl,0x4c
100015e8:	75 07                	jne    100015f1 <PS2Keyboard::handler()+0x697>
100015ea:	53                   	push   ebx
100015eb:	51                   	push   ecx
100015ec:	e9 e8 fd ff ff       	jmp    100013d9 <PS2Keyboard::handler()+0x47f>
100015f1:	80 fa 4d             	cmp    dl,0x4d
100015f4:	75 07                	jne    100015fd <PS2Keyboard::handler()+0x6a3>
100015f6:	52                   	push   edx
100015f7:	51                   	push   ecx
100015f8:	e9 e9 fd ff ff       	jmp    100013e6 <PS2Keyboard::handler()+0x48c>
100015fd:	80 fa 47             	cmp    dl,0x47
10001600:	75 07                	jne    10001609 <PS2Keyboard::handler()+0x6af>
10001602:	50                   	push   eax
10001603:	51                   	push   ecx
10001604:	e9 ea fd ff ff       	jmp    100013f3 <PS2Keyboard::handler()+0x499>
10001609:	80 fa 48             	cmp    dl,0x48
1000160c:	75 07                	jne    10001615 <PS2Keyboard::handler()+0x6bb>
1000160e:	50                   	push   eax
1000160f:	51                   	push   ecx
10001610:	e9 eb fd ff ff       	jmp    10001400 <PS2Keyboard::handler()+0x4a6>
10001615:	80 fa 49             	cmp    dl,0x49
10001618:	75 07                	jne    10001621 <PS2Keyboard::handler()+0x6c7>
1000161a:	50                   	push   eax
1000161b:	51                   	push   ecx
1000161c:	e9 ec fd ff ff       	jmp    1000140d <PS2Keyboard::handler()+0x4b3>
10001621:	80 fa 53             	cmp    dl,0x53
10001624:	75 07                	jne    1000162d <PS2Keyboard::handler()+0x6d3>
10001626:	50                   	push   eax
10001627:	51                   	push   ecx
10001628:	e9 ed fd ff ff       	jmp    1000141a <PS2Keyboard::handler()+0x4c0>
1000162d:	80 fa 4a             	cmp    dl,0x4a
10001630:	75 07                	jne    10001639 <PS2Keyboard::handler()+0x6df>
10001632:	50                   	push   eax
10001633:	51                   	push   ecx
10001634:	e9 ee fd ff ff       	jmp    10001427 <PS2Keyboard::handler()+0x4cd>
10001639:	80 fa 4e             	cmp    dl,0x4e
1000163c:	75 07                	jne    10001645 <PS2Keyboard::handler()+0x6eb>
1000163e:	50                   	push   eax
1000163f:	51                   	push   ecx
10001640:	e9 ef fd ff ff       	jmp    10001434 <PS2Keyboard::handler()+0x4da>
10001645:	80 fa 37             	cmp    dl,0x37
10001648:	75 07                	jne    10001651 <PS2Keyboard::handler()+0x6f7>
1000164a:	57                   	push   edi
1000164b:	51                   	push   ecx
1000164c:	e9 f0 fd ff ff       	jmp    10001441 <PS2Keyboard::handler()+0x4e7>
10001651:	0f b6 be 67 01 00 00 	movzx  edi,BYTE PTR [esi+0x167]
10001658:	0f b6 86 69 01 00 00 	movzx  eax,BYTE PTR [esi+0x169]
1000165f:	c1 e7 07             	shl    edi,0x7
10001662:	c1 e0 08             	shl    eax,0x8
10001665:	8d bc 07 00 00 00 00 	lea    edi,[edi+eax*1+0x0]	10001668: R_386_32	PS2Keyboard::internalMapperLowerBad
1000166c:	88 d0                	mov    al,dl
1000166e:	89 fb                	mov    ebx,edi
10001670:	d7                   	xlat   BYTE PTR ds:[ebx]
10001671:	88 c2                	mov    dl,al
10001673:	0f b6 d2             	movzx  edx,dl
10001676:	53                   	push   ebx
10001677:	51                   	push   ecx
10001678:	52                   	push   edx
10001679:	e9 0f fe ff ff       	jmp    1000148d <PS2Keyboard::handler()+0x533>
1000167e:	80 fa 36             	cmp    dl,0x36
10001681:	0f 84 26 f9 ff ff    	je     10000fad <PS2Keyboard::handler()+0x53>
10001687:	80 fa 38             	cmp    dl,0x38
1000168a:	0f 84 7f f9 ff ff    	je     1000100f <PS2Keyboard::handler()+0xb5>
10001690:	e9 5b fa ff ff       	jmp    100010f0 <PS2Keyboard::handler()+0x196>
10001695:	5b                   	pop    ebx
10001696:	5e                   	pop    esi
10001697:	5f                   	pop    edi
10001698:	c3                   	ret    
10001699:	90                   	nop

1000169a <PS2Keyboard::open(int, int, void*)>:
1000169a:	53                   	push   ebx
1000169b:	83 ec 14             	sub    esp,0x14
1000169e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100016a2:	8b 83 c8 00 00 00    	mov    eax,DWORD PTR [ebx+0xc8]
100016a8:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
100016ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
100016b2:	89 83 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],eax
100016b8:	53                   	push   ebx
100016b9:	6a 01                	push   0x1
100016bb:	68 00 00 00 00       	push   0x0	100016bc: R_386_32	ps2KeyboardHandler(regs*, void*)
100016c0:	6a 01                	push   0x1
100016c2:	53                   	push   ebx
100016c3:	e8 fc ff ff ff       	call   100016c4 <PS2Keyboard::open(int, int, void*)+0x2a>	100016c4: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
100016c8:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
100016ce:	a1 00 00 00 00       	mov    eax,ds:0x0	100016cf: R_386_32	sysBootSettings
100016d3:	c1 e8 02             	shr    eax,0x2
100016d6:	83 f0 01             	xor    eax,0x1
100016d9:	83 e0 01             	and    eax,0x1
100016dc:	88 83 6e 01 00 00    	mov    BYTE PTR [ebx+0x16e],al
100016e2:	31 c0                	xor    eax,eax
100016e4:	83 c4 28             	add    esp,0x28
100016e7:	5b                   	pop    ebx
100016e8:	c3                   	ret    
100016e9:	90                   	nop

100016ea <PS2Keyboard::close(int, int, void*)>:
100016ea:	83 c8 ff             	or     eax,0xffffffff
100016ed:	c3                   	ret    

100016ee <PS2Mouse::PS2Mouse()>:
100016ee:	55                   	push   ebp
100016ef:	89 e5                	mov    ebp,esp
100016f1:	83 ec 08             	sub    esp,0x8
100016f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100016f7:	83 ec 08             	sub    esp,0x8
100016fa:	68 00 00 00 00       	push   0x0	100016fb: R_386_32	ps2mousename
100016ff:	50                   	push   eax
10001700:	e8 fc ff ff ff       	call   10001701 <PS2Mouse::PS2Mouse()+0x13>	10001701: R_386_PC32	Mouse::Mouse(char const*)
10001705:	83 c4 10             	add    esp,0x10
10001708:	ba 08 00 00 00       	mov    edx,0x8	10001709: R_386_32	vtable for PS2Mouse
1000170d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001710:	89 10                	mov    DWORD PTR [eax],edx
10001712:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001715:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
1000171c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000171f:	c7 80 62 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x162],0x0
10001729:	90                   	nop
1000172a:	c9                   	leave  
1000172b:	c3                   	ret    

1000172c <ps2MouseHandler(regs*, void*)>:
1000172c:	55                   	push   ebp
1000172d:	89 e5                	mov    ebp,esp
1000172f:	83 ec 08             	sub    esp,0x8
10001732:	83 ec 0c             	sub    esp,0xc
10001735:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001738:	e8 fc ff ff ff       	call   10001739 <ps2MouseHandler(regs*, void*)+0xd>	10001739: R_386_PC32	PS2Mouse::handler()
1000173d:	83 c4 10             	add    esp,0x10
10001740:	90                   	nop
10001741:	c9                   	leave  
10001742:	c3                   	ret    
10001743:	90                   	nop

10001744 <PS2Mouse::handler()>:
10001744:	55                   	push   ebp
10001745:	89 e5                	mov    ebp,esp
10001747:	83 ec 28             	sub    esp,0x28
1000174a:	66 c7 45 ea 64 00    	mov    WORD PTR [ebp-0x16],0x64
10001750:	66 8b 45 ea          	mov    ax,WORD PTR [ebp-0x16]
10001754:	89 c2                	mov    edx,eax
10001756:	ec                   	in     al,dx
10001757:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
1000175a:	8a 45 e9             	mov    al,BYTE PTR [ebp-0x17]
1000175d:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10001760:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10001764:	83 e0 01             	and    eax,0x1
10001767:	85 c0                	test   eax,eax
10001769:	0f 84 8d 01 00 00    	je     100018fc <PS2Mouse::handler()+0x1b8>
1000176f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10001773:	83 e0 20             	and    eax,0x20
10001776:	85 c0                	test   eax,eax
10001778:	0f 84 81 01 00 00    	je     100018ff <PS2Mouse::handler()+0x1bb>
1000177e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001781:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10001787:	8d 50 01             	lea    edx,[eax+0x1]
1000178a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000178d:	88 91 61 01 00 00    	mov    BYTE PTR [ecx+0x161],dl
10001793:	0f b6 c8             	movzx  ecx,al
10001796:	66 c7 45 e6 60 00    	mov    WORD PTR [ebp-0x1a],0x60
1000179c:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
100017a0:	89 c2                	mov    edx,eax
100017a2:	ec                   	in     al,dx
100017a3:	88 45 e5             	mov    BYTE PTR [ebp-0x1b],al
100017a6:	8a 55 e5             	mov    dl,BYTE PTR [ebp-0x1b]
100017a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017ac:	88 94 08 62 01 00 00 	mov    BYTE PTR [eax+ecx*1+0x162],dl
100017b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017b6:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100017bc:	0f b6 c0             	movzx  eax,al
100017bf:	83 e0 08             	and    eax,0x8
100017c2:	85 c0                	test   eax,eax
100017c4:	75 0f                	jne    100017d5 <PS2Mouse::handler()+0x91>
100017c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017c9:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100017d0:	e9 2b 01 00 00       	jmp    10001900 <PS2Mouse::handler()+0x1bc>
100017d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017d8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
100017de:	84 c0                	test   al,al
100017e0:	75 0d                	jne    100017ef <PS2Mouse::handler()+0xab>
100017e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017e5:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
100017eb:	3c 02                	cmp    al,0x2
100017ed:	77 2f                	ja     1000181e <PS2Mouse::handler()+0xda>
100017ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017f2:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
100017f8:	3c 03                	cmp    al,0x3
100017fa:	74 11                	je     1000180d <PS2Mouse::handler()+0xc9>
100017fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017ff:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10001805:	3c 04                	cmp    al,0x4
10001807:	0f 85 f3 00 00 00    	jne    10001900 <PS2Mouse::handler()+0x1bc>
1000180d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001810:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10001816:	3c 03                	cmp    al,0x3
10001818:	0f 86 e2 00 00 00    	jbe    10001900 <PS2Mouse::handler()+0x1bc>
1000181e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001821:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001828:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000182b:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001831:	84 c0                	test   al,al
10001833:	78 13                	js     10001848 <PS2Mouse::handler()+0x104>
10001835:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001838:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
1000183e:	0f b6 c0             	movzx  eax,al
10001841:	83 e0 40             	and    eax,0x40
10001844:	85 c0                	test   eax,eax
10001846:	74 37                	je     1000187f <PS2Mouse::handler()+0x13b>
10001848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000184b:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001855:	c6 80 62 01 00 00 00 	mov    BYTE PTR [eax+0x162],0x0
1000185c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000185f:	c6 80 63 01 00 00 00 	mov    BYTE PTR [eax+0x163],0x0
10001866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001869:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10001870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001873:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
1000187a:	e9 81 00 00 00       	jmp    10001900 <PS2Mouse::handler()+0x1bc>
1000187f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001882:	8a 80 63 01 00 00    	mov    al,BYTE PTR [eax+0x163]
10001888:	0f b6 d0             	movzx  edx,al
1000188b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000188e:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001894:	0f b6 c0             	movzx  eax,al
10001897:	c1 e0 04             	shl    eax,0x4
1000189a:	25 00 01 00 00       	and    eax,0x100
1000189f:	29 c2                	sub    edx,eax
100018a1:	89 d0                	mov    eax,edx
100018a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100018a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018a9:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100018af:	0f b6 c0             	movzx  eax,al
100018b2:	c1 e0 03             	shl    eax,0x3
100018b5:	25 00 01 00 00       	and    eax,0x100
100018ba:	89 c2                	mov    edx,eax
100018bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018bf:	8a 80 64 01 00 00    	mov    al,BYTE PTR [eax+0x164]
100018c5:	0f b6 c0             	movzx  eax,al
100018c8:	29 c2                	sub    edx,eax
100018ca:	89 d0                	mov    eax,edx
100018cc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100018cf:	a1 00 00 00 00       	mov    eax,ds:0x0	100018d0: R_386_32	guiMouseHandler
100018d4:	85 c0                	test   eax,eax
100018d6:	74 28                	je     10001900 <PS2Mouse::handler()+0x1bc>
100018d8:	a1 00 00 00 00       	mov    eax,ds:0x0	100018d9: R_386_32	guiMouseHandler
100018dd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100018e0:	8a 92 62 01 00 00    	mov    dl,BYTE PTR [edx+0x162]
100018e6:	0f b6 d2             	movzx  edx,dl
100018e9:	83 e2 01             	and    edx,0x1
100018ec:	6a 00                	push   0x0
100018ee:	52                   	push   edx
100018ef:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100018f2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100018f5:	ff d0                	call   eax
100018f7:	83 c4 10             	add    esp,0x10
100018fa:	eb 04                	jmp    10001900 <PS2Mouse::handler()+0x1bc>
100018fc:	90                   	nop
100018fd:	eb 01                	jmp    10001900 <PS2Mouse::handler()+0x1bc>
100018ff:	90                   	nop
10001900:	c9                   	leave  
10001901:	c3                   	ret    

10001902 <PS2Mouse::open(int, int, void*)>:
10001902:	55                   	push   ebp
10001903:	89 e5                	mov    ebp,esp
10001905:	83 ec 08             	sub    esp,0x8
10001908:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000190b:	8b 90 c8 00 00 00    	mov    edx,DWORD PTR [eax+0xc8]
10001911:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001914:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
1000191a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000191d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001920:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10001926:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001929:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000192f:	83 ec 08             	sub    esp,0x8
10001932:	68 f6 00 00 00       	push   0xf6
10001937:	50                   	push   eax
10001938:	e8 fc ff ff ff       	call   10001939 <PS2Mouse::open(int, int, void*)+0x37>	10001939: R_386_PC32	PS2Port::deviceWrite(unsigned char)
1000193d:	83 c4 10             	add    esp,0x10
10001940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001943:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001949:	83 ec 0c             	sub    esp,0xc
1000194c:	50                   	push   eax
1000194d:	e8 fc ff ff ff       	call   1000194e <PS2Mouse::open(int, int, void*)+0x4c>	1000194e: R_386_PC32	PS2Port::deviceRead()
10001952:	83 c4 10             	add    esp,0x10
10001955:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001958:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000195e:	83 ec 08             	sub    esp,0x8
10001961:	68 f4 00 00 00       	push   0xf4
10001966:	50                   	push   eax
10001967:	e8 fc ff ff ff       	call   10001968 <PS2Mouse::open(int, int, void*)+0x66>	10001968: R_386_PC32	PS2Port::deviceWrite(unsigned char)
1000196c:	83 c4 10             	add    esp,0x10
1000196f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001972:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001978:	83 ec 0c             	sub    esp,0xc
1000197b:	50                   	push   eax
1000197c:	e8 fc ff ff ff       	call   1000197d <PS2Mouse::open(int, int, void*)+0x7b>	1000197d: R_386_PC32	PS2Port::deviceRead()
10001981:	83 c4 10             	add    esp,0x10
10001984:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001987:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
1000198e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001991:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
10001998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000199b:	83 ec 0c             	sub    esp,0xc
1000199e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100019a1:	6a 01                	push   0x1
100019a3:	68 00 00 00 00       	push   0x0	100019a4: R_386_32	ps2MouseHandler(regs*, void*)
100019a8:	6a 0c                	push   0xc
100019aa:	50                   	push   eax
100019ab:	e8 fc ff ff ff       	call   100019ac <PS2Mouse::open(int, int, void*)+0xaa>	100019ac: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
100019b0:	83 c4 20             	add    esp,0x20
100019b3:	b8 00 00 00 00       	mov    eax,0x0
100019b8:	c9                   	leave  
100019b9:	c3                   	ret    

100019ba <PS2Mouse::close(int, int, void*)>:
100019ba:	b8 00 00 00 00       	mov    eax,0x0
100019bf:	c3                   	ret    

100019c0 <PS2Mouse::detect()>:
100019c0:	90                   	nop
100019c1:	c3                   	ret    

100019c2 <PS2Port::PS2Port()>:
100019c2:	55                   	push   ebp
100019c3:	89 e5                	mov    ebp,esp
100019c5:	83 ec 08             	sub    esp,0x8
100019c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019cb:	83 ec 08             	sub    esp,0x8
100019ce:	68 00 00 00 00       	push   0x0	100019cf: R_386_32	ps2portname
100019d3:	50                   	push   eax
100019d4:	e8 fc ff ff ff       	call   100019d5 <PS2Port::PS2Port()+0x13>	100019d5: R_386_PC32	Bus::Bus(char const*)
100019d9:	83 c4 10             	add    esp,0x10
100019dc:	ba 08 00 00 00       	mov    edx,0x8	100019dd: R_386_32	vtable for PS2Port
100019e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019e4:	89 10                	mov    DWORD PTR [eax],edx
100019e6:	90                   	nop
100019e7:	c9                   	leave  
100019e8:	c3                   	ret    
100019e9:	90                   	nop

100019ea <PS2Port::open(int, int, void*)>:
100019ea:	55                   	push   ebp
100019eb:	89 e5                	mov    ebp,esp
100019ed:	83 ec 08             	sub    esp,0x8
100019f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019f3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100019f6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
100019fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019ff:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001a02:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10001a08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a0b:	8b 00                	mov    eax,DWORD PTR [eax]
10001a0d:	83 c0 18             	add    eax,0x18
10001a10:	8b 00                	mov    eax,DWORD PTR [eax]
10001a12:	83 ec 0c             	sub    esp,0xc
10001a15:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a18:	ff d0                	call   eax
10001a1a:	83 c4 10             	add    esp,0x10
10001a1d:	b8 00 00 00 00       	mov    eax,0x0
10001a22:	c9                   	leave  
10001a23:	c3                   	ret    

10001a24 <PS2Port::close(int, int, void*)>:
10001a24:	b8 00 00 00 00       	mov    eax,0x0
10001a29:	c3                   	ret    

10001a2a <PS2Port::detect()>:
10001a2a:	55                   	push   ebp
10001a2b:	89 e5                	mov    ebp,esp
10001a2d:	53                   	push   ebx
10001a2e:	83 ec 14             	sub    esp,0x14
10001a31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a34:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10001a3a:	85 c0                	test   eax,eax
10001a3c:	75 55                	jne    10001a93 <PS2Port::detect()+0x69>
10001a3e:	83 ec 0c             	sub    esp,0xc
10001a41:	68 70 01 00 00       	push   0x170
10001a46:	e8 fc ff ff ff       	call   10001a47 <PS2Port::detect()+0x1d>	10001a47: R_386_PC32	operator new(unsigned long)
10001a4b:	83 c4 10             	add    esp,0x10
10001a4e:	89 c3                	mov    ebx,eax
10001a50:	83 ec 0c             	sub    esp,0xc
10001a53:	53                   	push   ebx
10001a54:	e8 fc ff ff ff       	call   10001a55 <PS2Port::detect()+0x2b>	10001a55: R_386_PC32	PS2Keyboard::PS2Keyboard()
10001a59:	83 c4 10             	add    esp,0x10
10001a5c:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10001a5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a62:	83 ec 08             	sub    esp,0x8
10001a65:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001a68:	50                   	push   eax
10001a69:	e8 fc ff ff ff       	call   10001a6a <PS2Port::detect()+0x40>	10001a6a: R_386_PC32	Device::addChild(Device*)
10001a6e:	83 c4 10             	add    esp,0x10
10001a71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001a74:	8b 00                	mov    eax,DWORD PTR [eax]
10001a76:	83 c0 08             	add    eax,0x8
10001a79:	8b 00                	mov    eax,DWORD PTR [eax]
10001a7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001a7e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10001a84:	52                   	push   edx
10001a85:	6a 00                	push   0x0
10001a87:	6a 00                	push   0x0
10001a89:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10001a8c:	ff d0                	call   eax
10001a8e:	83 c4 10             	add    esp,0x10
10001a91:	eb 61                	jmp    10001af4 <PS2Port::detect()+0xca>
10001a93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a96:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10001a9c:	83 f8 01             	cmp    eax,0x1
10001a9f:	75 53                	jne    10001af4 <PS2Port::detect()+0xca>
10001aa1:	83 ec 0c             	sub    esp,0xc
10001aa4:	68 68 01 00 00       	push   0x168
10001aa9:	e8 fc ff ff ff       	call   10001aaa <PS2Port::detect()+0x80>	10001aaa: R_386_PC32	operator new(unsigned long)
10001aae:	83 c4 10             	add    esp,0x10
10001ab1:	89 c3                	mov    ebx,eax
10001ab3:	83 ec 0c             	sub    esp,0xc
10001ab6:	53                   	push   ebx
10001ab7:	e8 fc ff ff ff       	call   10001ab8 <PS2Port::detect()+0x8e>	10001ab8: R_386_PC32	PS2Mouse::PS2Mouse()
10001abc:	83 c4 10             	add    esp,0x10
10001abf:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
10001ac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ac5:	83 ec 08             	sub    esp,0x8
10001ac8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001acb:	50                   	push   eax
10001acc:	e8 fc ff ff ff       	call   10001acd <PS2Port::detect()+0xa3>	10001acd: R_386_PC32	Device::addChild(Device*)
10001ad1:	83 c4 10             	add    esp,0x10
10001ad4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001ad7:	8b 00                	mov    eax,DWORD PTR [eax]
10001ad9:	83 c0 08             	add    eax,0x8
10001adc:	8b 00                	mov    eax,DWORD PTR [eax]
10001ade:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001ae1:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10001ae7:	52                   	push   edx
10001ae8:	6a 00                	push   0x0
10001aea:	6a 01                	push   0x1
10001aec:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001aef:	ff d0                	call   eax
10001af1:	83 c4 10             	add    esp,0x10
10001af4:	90                   	nop
10001af5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001af8:	c9                   	leave  
10001af9:	c3                   	ret    

10001afa <PS2Port::deviceWrite(unsigned char)>:
10001afa:	55                   	push   ebp
10001afb:	89 e5                	mov    ebp,esp
10001afd:	83 ec 28             	sub    esp,0x28
10001b00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001b03:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10001b06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b09:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10001b0f:	83 f8 01             	cmp    eax,0x1
10001b12:	75 1a                	jne    10001b2e <PS2Port::deviceWrite(unsigned char)+0x34>
10001b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b17:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001b1d:	83 ec 08             	sub    esp,0x8
10001b20:	68 d4 00 00 00       	push   0xd4
10001b25:	50                   	push   eax
10001b26:	e8 fc ff ff ff       	call   10001b27 <PS2Port::deviceWrite(unsigned char)+0x2d>	10001b27: R_386_PC32	PS2::controllerWrite(unsigned char)
10001b2b:	83 c4 10             	add    esp,0x10
10001b2e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001b35:	66 c7 45 f0 64 00    	mov    WORD PTR [ebp-0x10],0x64
10001b3b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001b3e:	89 c2                	mov    edx,eax
10001b40:	ec                   	in     al,dx
10001b41:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10001b44:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10001b47:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001b4a:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10001b4e:	83 e0 02             	and    eax,0x2
10001b51:	85 c0                	test   eax,eax
10001b53:	74 29                	je     10001b7e <PS2Port::deviceWrite(unsigned char)+0x84>
10001b55:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10001b59:	83 e0 40             	and    eax,0x40
10001b5c:	85 c0                	test   eax,eax
10001b5e:	75 22                	jne    10001b82 <PS2Port::deviceWrite(unsigned char)+0x88>
10001b60:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001b63:	84 c0                	test   al,al
10001b65:	78 1b                	js     10001b82 <PS2Port::deviceWrite(unsigned char)+0x88>
10001b67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10001b6a:	8d 50 01             	lea    edx,[eax+0x1]
10001b6d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10001b70:	3d 40 06 00 00       	cmp    eax,0x640
10001b75:	0f 94 c0             	sete   al
10001b78:	84 c0                	test   al,al
10001b7a:	75 05                	jne    10001b81 <PS2Port::deviceWrite(unsigned char)+0x87>
10001b7c:	eb b7                	jmp    10001b35 <PS2Port::deviceWrite(unsigned char)+0x3b>
10001b7e:	90                   	nop
10001b7f:	eb 01                	jmp    10001b82 <PS2Port::deviceWrite(unsigned char)+0x88>
10001b81:	90                   	nop
10001b82:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10001b86:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10001b8c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10001b8f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10001b92:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10001b95:	ee                   	out    dx,al
10001b96:	b0 01                	mov    al,0x1
10001b98:	c9                   	leave  
10001b99:	c3                   	ret    

10001b9a <PS2Port::deviceRead()>:
10001b9a:	55                   	push   ebp
10001b9b:	89 e5                	mov    ebp,esp
10001b9d:	83 ec 08             	sub    esp,0x8
10001ba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ba3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001ba9:	83 ec 0c             	sub    esp,0xc
10001bac:	50                   	push   eax
10001bad:	e8 fc ff ff ff       	call   10001bae <PS2Port::deviceRead()+0x14>	10001bae: R_386_PC32	PS2::controllerRead()
10001bb2:	83 c4 10             	add    esp,0x10
10001bb5:	c9                   	leave  
10001bb6:	c3                   	ret    
10001bb7:	90                   	nop

10001bb8 <sb16Demo(void*)>:
10001bb8:	55                   	push   ebp
10001bb9:	57                   	push   edi
10001bba:	56                   	push   esi
10001bbb:	53                   	push   ebx
10001bbc:	83 ec 1c             	sub    esp,0x1c
10001bbf:	e8 fc ff ff ff       	call   10001bc0 <sb16Demo(void*)+0x8>	10001bc0: R_386_PC32	unlockScheduler()
10001bc4:	83 ec 0c             	sub    esp,0xc
10001bc7:	6a 2c                	push   0x2c
10001bc9:	e8 fc ff ff ff       	call   10001bca <sb16Demo(void*)+0x12>	10001bca: R_386_PC32	malloc
10001bce:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
10001bd5:	89 c3                	mov    ebx,eax
10001bd7:	6a 5a                	push   0x5a
10001bd9:	6a 08                	push   0x8
10001bdb:	68 40 1f 00 00       	push   0x1f40
10001be0:	50                   	push   eax
10001be1:	e8 fc ff ff ff       	call   10001be2 <sb16Demo(void*)+0x2a>	10001be2: R_386_PC32	SoundChannel::SoundChannel(int, int, int, int)
10001be6:	83 c4 14             	add    esp,0x14
10001be9:	68 14 01 00 00       	push   0x114
10001bee:	e8 fc ff ff ff       	call   10001bef <sb16Demo(void*)+0x37>	10001bef: R_386_PC32	malloc
10001bf3:	83 c4 0c             	add    esp,0xc
10001bf6:	89 c6                	mov    esi,eax
10001bf8:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001bfa: R_386_32	kernelProcess
10001bfe:	68 00 00 00 00       	push   0x0	10001bff: R_386_32	egFile
10001c03:	50                   	push   eax
10001c04:	e8 fc ff ff ff       	call   10001c05 <sb16Demo(void*)+0x4d>	10001c05: R_386_PC32	File::File(char const*, Process*)
10001c09:	5f                   	pop    edi
10001c0a:	5d                   	pop    ebp
10001c0b:	31 ed                	xor    ebp,ebp
10001c0d:	6a 01                	push   0x1
10001c0f:	56                   	push   esi
10001c10:	e8 fc ff ff ff       	call   10001c11 <sb16Demo(void*)+0x59>	10001c11: R_386_PC32	File::open(FileOpenMode)
10001c15:	83 c4 10             	add    esp,0x10
10001c18:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
10001c20:	8b 06                	mov    eax,DWORD PTR [esi]
10001c22:	83 ec 0c             	sub    esp,0xc
10001c25:	8d 54 24 18          	lea    edx,[esp+0x18]
10001c29:	52                   	push   edx
10001c2a:	68 00 00 00 00       	push   0x0	10001c2b: R_386_32	buf
10001c2f:	6a 00                	push   0x0
10001c31:	68 00 10 00 00       	push   0x1000
10001c36:	56                   	push   esi
10001c37:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10001c3a:	83 c4 20             	add    esp,0x20
10001c3d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10001c42:	74 04                	je     10001c48 <sb16Demo(void*)+0x90>
10001c44:	85 c0                	test   eax,eax
10001c46:	74 15                	je     10001c5d <sb16Demo(void*)+0xa5>
10001c48:	83 ec 0c             	sub    esp,0xc
10001c4b:	68 90 30 00 10       	push   0x10003090	10001c4c: R_386_32	.text
10001c50:	e8 fc ff ff ff       	call   10001c51 <sb16Demo(void*)+0x99>	10001c51: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c55:	83 c4 2c             	add    esp,0x2c
10001c58:	5b                   	pop    ebx
10001c59:	5e                   	pop    esi
10001c5a:	5f                   	pop    edi
10001c5b:	5d                   	pop    ebp
10001c5c:	c3                   	ret    
10001c5d:	e8 fc ff ff ff       	call   10001c5e <sb16Demo(void*)+0xa6>	10001c5e: R_386_PC32	lockScheduler()
10001c62:	e8 fc ff ff ff       	call   10001c63 <sb16Demo(void*)+0xab>	10001c63: R_386_PC32	schedule()
10001c67:	e8 fc ff ff ff       	call   10001c68 <sb16Demo(void*)+0xb0>	10001c68: R_386_PC32	unlockScheduler()
10001c6c:	83 ec 0c             	sub    esp,0xc
10001c6f:	53                   	push   ebx
10001c70:	e8 fc ff ff ff       	call   10001c71 <sb16Demo(void*)+0xb9>	10001c71: R_386_PC32	SoundChannel::getBufferUsed()
10001c75:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001c78:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
10001c7c:	89 c7                	mov    edi,eax
10001c7e:	e8 fc ff ff ff       	call   10001c7f <sb16Demo(void*)+0xc7>	10001c7f: R_386_PC32	SoundChannel::getBufferSize()
10001c83:	83 c4 10             	add    esp,0x10
10001c86:	39 c7                	cmp    edi,eax
10001c88:	7c 10                	jl     10001c9a <sb16Demo(void*)+0xe2>
10001c8a:	51                   	push   ecx
10001c8b:	51                   	push   ecx
10001c8c:	6a 00                	push   0x0
10001c8e:	6a 01                	push   0x1
10001c90:	e8 fc ff ff ff       	call   10001c91 <sb16Demo(void*)+0xd9>	10001c91: R_386_PC32	sleep(unsigned long long)
10001c95:	83 c4 10             	add    esp,0x10
10001c98:	eb d2                	jmp    10001c6c <sb16Demo(void*)+0xb4>
10001c9a:	52                   	push   edx
10001c9b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10001c9f:	68 00 00 00 00       	push   0x0	10001ca0: R_386_32	buf
10001ca4:	53                   	push   ebx
10001ca5:	e8 fc ff ff ff       	call   10001ca6 <sb16Demo(void*)+0xee>	10001ca6: R_386_PC32	SoundChannel::buffer8(unsigned char*, int)
10001caa:	83 c4 10             	add    esp,0x10
10001cad:	89 e8                	mov    eax,ebp
10001caf:	84 c0                	test   al,al
10001cb1:	75 17                	jne    10001cca <sb16Demo(void*)+0x112>
10001cb3:	50                   	push   eax
10001cb4:	50                   	push   eax
10001cb5:	53                   	push   ebx
10001cb6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10001cba:	e8 fc ff ff ff       	call   10001cbb <sb16Demo(void*)+0x103>	10001cbb: R_386_PC32	SoundDevice::addChannel(SoundChannel*)
10001cbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
10001cc2:	e8 fc ff ff ff       	call   10001cc3 <sb16Demo(void*)+0x10b>	10001cc3: R_386_PC32	SoundChannel::play()
10001cc7:	83 c4 10             	add    esp,0x10
10001cca:	bd 01 00 00 00       	mov    ebp,0x1
10001ccf:	e9 44 ff ff ff       	jmp    10001c18 <sb16Demo(void*)+0x60>

10001cd4 <SoundBlaster16::resetDSP()>:
10001cd4:	53                   	push   ebx
10001cd5:	b0 01                	mov    al,0x1
10001cd7:	83 ec 10             	sub    esp,0x10
10001cda:	bb 26 02 00 00       	mov    ebx,0x226
10001cdf:	89 da                	mov    edx,ebx
10001ce1:	ee                   	out    dx,al
10001ce2:	6a 00                	push   0x0
10001ce4:	68 c0 c6 2d 00       	push   0x2dc6c0
10001ce9:	e8 fc ff ff ff       	call   10001cea <SoundBlaster16::resetDSP()+0x16>	10001cea: R_386_PC32	nanoSleep(unsigned long long)
10001cee:	31 c0                	xor    eax,eax
10001cf0:	89 da                	mov    edx,ebx
10001cf2:	ee                   	out    dx,al
10001cf3:	ba 2a 02 00 00       	mov    edx,0x22a
10001cf8:	ec                   	in     al,dx
10001cf9:	83 c4 10             	add    esp,0x10
10001cfc:	3c aa                	cmp    al,0xaa
10001cfe:	75 25                	jne    10001d25 <SoundBlaster16::resetDSP()+0x51>
10001d00:	b0 e1                	mov    al,0xe1
10001d02:	ba 2c 02 00 00       	mov    edx,0x22c
10001d07:	ee                   	out    dx,al
10001d08:	ba 2e 02 00 00       	mov    edx,0x22e
10001d0d:	ec                   	in     al,dx
10001d0e:	84 c0                	test   al,al
10001d10:	79 fb                	jns    10001d0d <SoundBlaster16::resetDSP()+0x39>
10001d12:	ba 2a 02 00 00       	mov    edx,0x22a
10001d17:	ec                   	in     al,dx
10001d18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10001d1c:	88 81 f8 01 00 00    	mov    BYTE PTR [ecx+0x1f8],al
10001d22:	ec                   	in     al,dx
10001d23:	eb 13                	jmp    10001d38 <SoundBlaster16::resetDSP()+0x64>
10001d25:	0f b6 c0             	movzx  eax,al
10001d28:	51                   	push   ecx
10001d29:	51                   	push   ecx
10001d2a:	50                   	push   eax
10001d2b:	68 00 00 00 00       	push   0x0	10001d2c: R_386_32	badVer
10001d30:	e8 fc ff ff ff       	call   10001d31 <SoundBlaster16::resetDSP()+0x5d>	10001d31: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d35:	83 c4 10             	add    esp,0x10
10001d38:	83 c4 08             	add    esp,0x8
10001d3b:	5b                   	pop    ebx
10001d3c:	c3                   	ret    
10001d3d:	90                   	nop

10001d3e <SoundBlaster16::DSPOut(unsigned short, unsigned char)>:
10001d3e:	53                   	push   ebx
10001d3f:	ba 2c 02 00 00       	mov    edx,0x22c
10001d44:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10001d48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10001d4c:	ec                   	in     al,dx
10001d4d:	84 c0                	test   al,al
10001d4f:	78 fb                	js     10001d4c <SoundBlaster16::DSPOut(unsigned short, unsigned char)+0xe>
10001d51:	88 c8                	mov    al,cl
10001d53:	89 da                	mov    edx,ebx
10001d55:	ee                   	out    dx,al
10001d56:	5b                   	pop    ebx
10001d57:	c3                   	ret    

10001d58 <SoundBlaster16::turnSpeakerOn(bool)>:
10001d58:	53                   	push   ebx
10001d59:	52                   	push   edx
10001d5a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10001d5e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10001d62:	80 fa 01             	cmp    dl,0x1
10001d65:	89 14 24             	mov    DWORD PTR [esp],edx
10001d68:	19 c0                	sbb    eax,eax
10001d6a:	83 e0 02             	and    eax,0x2
10001d6d:	05 d1 00 00 00       	add    eax,0xd1
10001d72:	50                   	push   eax
10001d73:	68 2c 02 00 00       	push   0x22c
10001d78:	53                   	push   ebx
10001d79:	e8 fc ff ff ff       	call   10001d7a <SoundBlaster16::turnSpeakerOn(bool)+0x22>	10001d7a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001d7e:	83 c4 0c             	add    esp,0xc
10001d81:	8b 14 24             	mov    edx,DWORD PTR [esp]
10001d84:	84 d2                	test   dl,dl
10001d86:	75 23                	jne    10001dab <SoundBlaster16::turnSpeakerOn(bool)+0x53>
10001d88:	68 d0 00 00 00       	push   0xd0
10001d8d:	68 2c 02 00 00       	push   0x22c
10001d92:	53                   	push   ebx
10001d93:	e8 fc ff ff ff       	call   10001d94 <SoundBlaster16::turnSpeakerOn(bool)+0x3c>	10001d94: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001d98:	68 d3 00 00 00       	push   0xd3
10001d9d:	68 2c 02 00 00       	push   0x22c
10001da2:	53                   	push   ebx
10001da3:	e8 fc ff ff ff       	call   10001da4 <SoundBlaster16::turnSpeakerOn(bool)+0x4c>	10001da4: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001da8:	83 c4 18             	add    esp,0x18
10001dab:	58                   	pop    eax
10001dac:	5b                   	pop    ebx
10001dad:	c3                   	ret    

10001dae <SoundBlaster16::SoundBlaster16()>:
10001dae:	55                   	push   ebp
10001daf:	89 e5                	mov    ebp,esp
10001db1:	83 ec 08             	sub    esp,0x8
10001db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001db7:	83 ec 08             	sub    esp,0x8
10001dba:	68 00 00 00 00       	push   0x0	10001dbb: R_386_32	sb16name
10001dbf:	50                   	push   eax
10001dc0:	e8 fc ff ff ff       	call   10001dc1 <SoundBlaster16::SoundBlaster16()+0x13>	10001dc1: R_386_PC32	SoundDevice::SoundDevice(char const*)
10001dc5:	83 c4 10             	add    esp,0x10
10001dc8:	ba 08 00 00 00       	mov    edx,0x8	10001dc9: R_386_32	vtable for SoundBlaster16
10001dcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dd0:	89 10                	mov    DWORD PTR [eax],edx
10001dd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dd5:	c7 80 e8 01 00 00 40 1f 00 00 	mov    DWORD PTR [eax+0x1e8],0x1f40
10001ddf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001de2:	c7 80 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x1ec],0x8
10001dec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001def:	c6 80 f0 01 00 00 01 	mov    BYTE PTR [eax+0x1f0],0x1
10001df6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001df9:	c6 80 f1 01 00 00 00 	mov    BYTE PTR [eax+0x1f1],0x0
10001e00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e03:	c6 80 f2 01 00 00 00 	mov    BYTE PTR [eax+0x1f2],0x0
10001e0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e0d:	c6 80 f8 01 00 00 00 	mov    BYTE PTR [eax+0x1f8],0x0
10001e14:	a1 00 00 00 00       	mov    eax,ds:0x0	10001e15: R_386_32	tempBuffer
10001e19:	85 c0                	test   eax,eax
10001e1b:	75 2a                	jne    10001e47 <SoundBlaster16::SoundBlaster16()+0x99>
10001e1d:	83 ec 0c             	sub    esp,0xc
10001e20:	68 00 80 00 00       	push   0x8000
10001e25:	e8 fc ff ff ff       	call   10001e26 <SoundBlaster16::SoundBlaster16()+0x78>	10001e26: R_386_PC32	malloc
10001e2a:	83 c4 10             	add    esp,0x10
10001e2d:	a3 00 00 00 00       	mov    ds:0x0,eax	10001e2e: R_386_32	tempBuffer
10001e32:	83 ec 0c             	sub    esp,0xc
10001e35:	68 00 80 00 00       	push   0x8000
10001e3a:	e8 fc ff ff ff       	call   10001e3b <SoundBlaster16::SoundBlaster16()+0x8d>	10001e3b: R_386_PC32	malloc
10001e3f:	83 c4 10             	add    esp,0x10
10001e42:	a3 00 00 00 00       	mov    ds:0x0,eax	10001e43: R_386_32	outputBuffer
10001e47:	90                   	nop
10001e48:	c9                   	leave  
10001e49:	c3                   	ret    

10001e4a <SoundBlaster16::handleIRQ()>:
10001e4a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10001e4e:	ba 2e 02 00 00       	mov    edx,0x22e
10001e53:	83 b9 e0 01 00 00 08 	cmp    DWORD PTR [ecx+0x1e0],0x8
10001e5a:	74 17                	je     10001e73 <SoundBlaster16::handleIRQ()+0x29>
10001e5c:	b0 82                	mov    al,0x82
10001e5e:	ba 24 02 00 00       	mov    edx,0x224
10001e63:	ee                   	out    dx,al
10001e64:	ba 25 02 00 00       	mov    edx,0x225
10001e69:	ec                   	in     al,dx
10001e6a:	a8 02                	test   al,0x2
10001e6c:	74 06                	je     10001e74 <SoundBlaster16::handleIRQ()+0x2a>
10001e6e:	ba 2f 02 00 00       	mov    edx,0x22f
10001e73:	ec                   	in     al,dx
10001e74:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
10001e78:	e9 c7 03 00 00       	jmp    10002244 <SoundBlaster16::onInterrupt()>

10001e7d <sb16Handler(regs*, void*)>:
10001e7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10001e81:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001e85:	eb c3                	jmp    10001e4a <SoundBlaster16::handleIRQ()>
10001e87:	90                   	nop

10001e88 <SoundBlaster16::getNumHwChannels()>:
10001e88:	b8 01 00 00 00       	mov    eax,0x1
10001e8d:	c3                   	ret    

10001e8e <SoundBlaster16::beginPlayback(int, int)>:
10001e8e:	53                   	push   ebx
10001e8f:	50                   	push   eax
10001e90:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10001e94:	6a 01                	push   0x1
10001e96:	53                   	push   ebx
10001e97:	e8 fc ff ff ff       	call   10001e98 <SoundBlaster16::beginPlayback(int, int)+0xa>	10001e98: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10001e9c:	80 bb f0 01 00 00 01 	cmp    BYTE PTR [ebx+0x1f0],0x1
10001ea3:	5a                   	pop    edx
10001ea4:	19 c0                	sbb    eax,eax
10001ea6:	59                   	pop    ecx
10001ea7:	83 c0 02             	add    eax,0x2
10001eaa:	0f af 83 e8 01 00 00 	imul   eax,DWORD PTR [ebx+0x1e8]
10001eb1:	89 c1                	mov    ecx,eax
10001eb3:	b8 c0 bd f0 ff       	mov    eax,0xfff0bdc0
10001eb8:	99                   	cdq    
10001eb9:	f7 f9                	idiv   ecx
10001ebb:	89 04 24             	mov    DWORD PTR [esp],eax
10001ebe:	6a 40                	push   0x40
10001ec0:	68 2c 02 00 00       	push   0x22c
10001ec5:	53                   	push   ebx
10001ec6:	e8 fc ff ff ff       	call   10001ec7 <SoundBlaster16::beginPlayback(int, int)+0x39>	10001ec7: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001ecb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
10001ed0:	50                   	push   eax
10001ed1:	68 2c 02 00 00       	push   0x22c
10001ed6:	53                   	push   ebx
10001ed7:	e8 fc ff ff ff       	call   10001ed8 <SoundBlaster16::beginPlayback(int, int)+0x4a>	10001ed8: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001edc:	68 c0 00 00 00       	push   0xc0
10001ee1:	68 2c 02 00 00       	push   0x22c
10001ee6:	53                   	push   ebx
10001ee7:	e8 fc ff ff ff       	call   10001ee8 <SoundBlaster16::beginPlayback(int, int)+0x5a>	10001ee8: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001eec:	83 c4 24             	add    esp,0x24
10001eef:	0f b6 83 f0 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1f0]
10001ef6:	0f b6 93 f1 01 00 00 	movzx  edx,BYTE PTR [ebx+0x1f1]
10001efd:	c1 e0 05             	shl    eax,0x5
10001f00:	c1 e2 04             	shl    edx,0x4
10001f03:	09 d0                	or     eax,edx
10001f05:	0f be c0             	movsx  eax,al
10001f08:	50                   	push   eax
10001f09:	68 2c 02 00 00       	push   0x22c
10001f0e:	53                   	push   ebx
10001f0f:	e8 fc ff ff ff       	call   10001f10 <SoundBlaster16::beginPlayback(int, int)+0x82>	10001f10: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f14:	68 ff 00 00 00       	push   0xff
10001f19:	68 2c 02 00 00       	push   0x22c
10001f1e:	53                   	push   ebx
10001f1f:	e8 fc ff ff ff       	call   10001f20 <SoundBlaster16::beginPlayback(int, int)+0x92>	10001f20: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f24:	6a 1f                	push   0x1f
10001f26:	68 2c 02 00 00       	push   0x22c
10001f2b:	53                   	push   ebx
10001f2c:	e8 fc ff ff ff       	call   10001f2d <SoundBlaster16::beginPlayback(int, int)+0x9f>	10001f2d: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f31:	83 c4 24             	add    esp,0x24
10001f34:	6a 48                	push   0x48
10001f36:	68 2c 02 00 00       	push   0x22c
10001f3b:	53                   	push   ebx
10001f3c:	e8 fc ff ff ff       	call   10001f3d <SoundBlaster16::beginPlayback(int, int)+0xaf>	10001f3d: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f41:	68 ff 00 00 00       	push   0xff
10001f46:	68 2c 02 00 00       	push   0x22c
10001f4b:	53                   	push   ebx
10001f4c:	e8 fc ff ff ff       	call   10001f4d <SoundBlaster16::beginPlayback(int, int)+0xbf>	10001f4d: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f51:	6a 1f                	push   0x1f
10001f53:	68 2c 02 00 00       	push   0x22c
10001f58:	53                   	push   ebx
10001f59:	e8 fc ff ff ff       	call   10001f5a <SoundBlaster16::beginPlayback(int, int)+0xcc>	10001f5a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001f5e:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
10001f62:	c7 44 24 38 1c 00 00 00 	mov    DWORD PTR [esp+0x38],0x1c
10001f6a:	c7 44 24 34 2c 02 00 00 	mov    DWORD PTR [esp+0x34],0x22c
10001f72:	83 c4 28             	add    esp,0x28
10001f75:	5b                   	pop    ebx
10001f76:	e9 c3 fd ff ff       	jmp    10001d3e <SoundBlaster16::DSPOut(unsigned short, unsigned char)>
10001f7b:	90                   	nop

10001f7c <SoundBlaster16::stopPlayback()>:
10001f7c:	6a 00                	push   0x0
10001f7e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10001f82:	e8 fc ff ff ff       	call   10001f83 <SoundBlaster16::stopPlayback()+0x7>	10001f83: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10001f87:	58                   	pop    eax
10001f88:	5a                   	pop    edx
10001f89:	c3                   	ret    

10001f8a <SoundBlaster16::open(int, int, void*)>:
10001f8a:	56                   	push   esi
10001f8b:	be 25 02 00 00       	mov    esi,0x225
10001f90:	53                   	push   ebx
10001f91:	83 ec 14             	sub    esp,0x14
10001f94:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001f98:	c7 83 e8 01 00 00 40 1f 00 00 	mov    DWORD PTR [ebx+0x1e8],0x1f40
10001fa2:	c7 83 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x1ec],0x8
10001fac:	66 c7 83 f0 01 00 00 00 01 	mov    WORD PTR [ebx+0x1f0],0x100
10001fb5:	68 80 00 00 00       	push   0x80
10001fba:	68 24 02 00 00       	push   0x224
10001fbf:	53                   	push   ebx
10001fc0:	e8 fc ff ff ff       	call   10001fc1 <SoundBlaster16::open(int, int, void*)+0x37>	10001fc1: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001fc5:	89 f2                	mov    edx,esi
10001fc7:	ec                   	in     al,dx
10001fc8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
10001fcc:	68 80 00 00 00       	push   0x80
10001fd1:	68 24 02 00 00       	push   0x224
10001fd6:	53                   	push   ebx
10001fd7:	e8 fc ff ff ff       	call   10001fd8 <SoundBlaster16::open(int, int, void*)+0x4e>	10001fd8: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001fdc:	83 c4 18             	add    esp,0x18
10001fdf:	31 c0                	xor    eax,eax
10001fe1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
10001fe6:	0f 95 c0             	setne  al
10001fe9:	40                   	inc    eax
10001fea:	50                   	push   eax
10001feb:	68 25 02 00 00       	push   0x225
10001ff0:	53                   	push   ebx
10001ff1:	e8 fc ff ff ff       	call   10001ff2 <SoundBlaster16::open(int, int, void*)+0x68>	10001ff2: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10001ff6:	68 80 00 00 00       	push   0x80
10001ffb:	68 24 02 00 00       	push   0x224
10002000:	53                   	push   ebx
10002001:	e8 fc ff ff ff       	call   10002002 <SoundBlaster16::open(int, int, void*)+0x78>	10002002: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002006:	89 f2                	mov    edx,esi
10002008:	ec                   	in     al,dx
10002009:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
1000200d:	83 c4 18             	add    esp,0x18
10002010:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
10002014:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
10002018:	75 51                	jne    1000206b <SoundBlaster16::open(int, int, void*)+0xe1>
1000201a:	68 81 00 00 00       	push   0x81
1000201f:	68 24 02 00 00       	push   0x224
10002024:	53                   	push   ebx
10002025:	e8 fc ff ff ff       	call   10002026 <SoundBlaster16::open(int, int, void*)+0x9c>	10002026: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000202a:	89 f2                	mov    edx,esi
1000202c:	ec                   	in     al,dx
1000202d:	83 e0 0a             	and    eax,0xa
10002030:	3c 01                	cmp    al,0x1
10002032:	19 c0                	sbb    eax,eax
10002034:	83 e0 62             	and    eax,0x62
10002037:	40                   	inc    eax
10002038:	89 04 24             	mov    DWORD PTR [esp],eax
1000203b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000203d: R_386_32	isaDMAController
10002041:	e8 fc ff ff ff       	call   10002042 <SoundBlaster16::open(int, int, void*)+0xb8>	10002042: R_386_PC32	DMA::tryLockChannel(int)
10002046:	83 c4 10             	add    esp,0x10
10002049:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
1000204f:	85 c0                	test   eax,eax
10002051:	75 3a                	jne    1000208d <SoundBlaster16::open(int, int, void*)+0x103>
10002053:	83 ec 0c             	sub    esp,0xc
10002056:	68 00 00 00 00       	push   0x0	10002057: R_386_32	nodma
1000205b:	e8 fc ff ff ff       	call   1000205c <SoundBlaster16::open(int, int, void*)+0xd2>	1000205c: R_386_PC32	Dbg::kprintf(char const*, ...)
10002060:	83 c4 10             	add    esp,0x10
10002063:	83 c8 ff             	or     eax,0xffffffff
10002066:	e9 d3 01 00 00       	jmp    1000223e <SoundBlaster16::open(int, int, void*)+0x2b4>
1000206b:	56                   	push   esi
1000206c:	56                   	push   esi
1000206d:	6a 01                	push   0x1
1000206f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10002071: R_386_32	isaDMAController
10002075:	e8 fc ff ff ff       	call   10002076 <SoundBlaster16::open(int, int, void*)+0xec>	10002076: R_386_PC32	DMA::tryLockChannel(int)
1000207a:	83 c4 10             	add    esp,0x10
1000207d:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
10002083:	85 c0                	test   eax,eax
10002085:	75 06                	jne    1000208d <SoundBlaster16::open(int, int, void*)+0x103>
10002087:	51                   	push   ecx
10002088:	51                   	push   ecx
10002089:	6a 03                	push   0x3
1000208b:	eb ae                	jmp    1000203b <SoundBlaster16::open(int, int, void*)+0xb1>
1000208d:	50                   	push   eax
1000208e:	50                   	push   eax
1000208f:	68 00 40 00 00       	push   0x4000
10002094:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
1000209a:	e8 fc ff ff ff       	call   1000209b <SoundBlaster16::open(int, int, void*)+0x111>	1000209b: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
1000209f:	58                   	pop    eax
100020a0:	5a                   	pop    edx
100020a1:	6a 59                	push   0x59
100020a3:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100020a9:	e8 fc ff ff ff       	call   100020aa <SoundBlaster16::open(int, int, void*)+0x120>	100020aa: R_386_PC32	DMAChannel::setMode(unsigned char)
100020ae:	59                   	pop    ecx
100020af:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100020b5:	e8 fc ff ff ff       	call   100020b6 <SoundBlaster16::open(int, int, void*)+0x12c>	100020b6: R_386_PC32	DMAChannel::start()
100020ba:	5e                   	pop    esi
100020bb:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100020c1:	e8 fc ff ff ff       	call   100020c2 <SoundBlaster16::open(int, int, void*)+0x138>	100020c2: R_386_PC32	DMAChannel::getAddress()
100020c6:	89 83 f4 01 00 00    	mov    DWORD PTR [ebx+0x1f4],eax
100020cc:	89 1c 24             	mov    DWORD PTR [esp],ebx
100020cf:	e8 fc ff ff ff       	call   100020d0 <SoundBlaster16::open(int, int, void*)+0x146>	100020d0: R_386_PC32	SoundBlaster16::resetDSP()
100020d4:	58                   	pop    eax
100020d5:	5a                   	pop    edx
100020d6:	6a 01                	push   0x1
100020d8:	53                   	push   ebx
100020d9:	e8 fc ff ff ff       	call   100020da <SoundBlaster16::open(int, int, void*)+0x150>	100020da: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
100020de:	83 c4 10             	add    esp,0x10
100020e1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
100020e5:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
100020e9:	75 6f                	jne    1000215a <SoundBlaster16::open(int, int, void*)+0x1d0>
100020eb:	50                   	push   eax
100020ec:	68 80 00 00 00       	push   0x80
100020f1:	68 24 02 00 00       	push   0x224
100020f6:	53                   	push   ebx
100020f7:	e8 fc ff ff ff       	call   100020f8 <SoundBlaster16::open(int, int, void*)+0x16e>	100020f8: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100020fc:	ba 25 02 00 00       	mov    edx,0x225
10002101:	ec                   	in     al,dx
10002102:	83 c4 10             	add    esp,0x10
10002105:	3c 01                	cmp    al,0x1
10002107:	75 0f                	jne    10002118 <SoundBlaster16::open(int, int, void*)+0x18e>
10002109:	83 ec 0c             	sub    esp,0xc
1000210c:	53                   	push   ebx
1000210d:	6a 01                	push   0x1
1000210f:	68 00 00 00 00       	push   0x0	10002110: R_386_32	sb16Handler(regs*, void*)
10002114:	6a 02                	push   0x2
10002116:	eb 6f                	jmp    10002187 <SoundBlaster16::open(int, int, void*)+0x1fd>
10002118:	3c 02                	cmp    al,0x2
1000211a:	75 06                	jne    10002122 <SoundBlaster16::open(int, int, void*)+0x198>
1000211c:	83 ec 0c             	sub    esp,0xc
1000211f:	53                   	push   ebx
10002120:	eb 5c                	jmp    1000217e <SoundBlaster16::open(int, int, void*)+0x1f4>
10002122:	3c 04                	cmp    al,0x4
10002124:	75 0f                	jne    10002135 <SoundBlaster16::open(int, int, void*)+0x1ab>
10002126:	83 ec 0c             	sub    esp,0xc
10002129:	53                   	push   ebx
1000212a:	6a 01                	push   0x1
1000212c:	68 00 00 00 00       	push   0x0	1000212d: R_386_32	sb16Handler(regs*, void*)
10002131:	6a 07                	push   0x7
10002133:	eb 52                	jmp    10002187 <SoundBlaster16::open(int, int, void*)+0x1fd>
10002135:	3c 08                	cmp    al,0x8
10002137:	75 0f                	jne    10002148 <SoundBlaster16::open(int, int, void*)+0x1be>
10002139:	83 ec 0c             	sub    esp,0xc
1000213c:	53                   	push   ebx
1000213d:	6a 01                	push   0x1
1000213f:	68 00 00 00 00       	push   0x0	10002140: R_386_32	sb16Handler(regs*, void*)
10002144:	6a 0a                	push   0xa
10002146:	eb 3f                	jmp    10002187 <SoundBlaster16::open(int, int, void*)+0x1fd>
10002148:	83 ec 0c             	sub    esp,0xc
1000214b:	68 00 00 00 00       	push   0x0	1000214c: R_386_32	noirq
10002150:	e8 fc ff ff ff       	call   10002151 <SoundBlaster16::open(int, int, void*)+0x1c7>	10002151: R_386_PC32	Krnl::panic(char const*)
10002155:	83 c4 10             	add    esp,0x10
10002158:	eb 36                	jmp    10002190 <SoundBlaster16::open(int, int, void*)+0x206>
1000215a:	50                   	push   eax
1000215b:	68 80 00 00 00       	push   0x80
10002160:	68 24 02 00 00       	push   0x224
10002165:	53                   	push   ebx
10002166:	e8 fc ff ff ff       	call   10002167 <SoundBlaster16::open(int, int, void*)+0x1dd>	10002167: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000216b:	83 c4 0c             	add    esp,0xc
1000216e:	6a 02                	push   0x2
10002170:	68 25 02 00 00       	push   0x225
10002175:	53                   	push   ebx
10002176:	e8 fc ff ff ff       	call   10002177 <SoundBlaster16::open(int, int, void*)+0x1ed>	10002177: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000217b:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000217e:	6a 01                	push   0x1
10002180:	68 00 00 00 00       	push   0x0	10002181: R_386_32	sb16Handler(regs*, void*)
10002185:	6a 05                	push   0x5
10002187:	53                   	push   ebx
10002188:	e8 fc ff ff ff       	call   10002189 <SoundBlaster16::open(int, int, void*)+0x1ff>	10002189: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
1000218d:	83 c4 20             	add    esp,0x20
10002190:	56                   	push   esi
10002191:	68 81 00 00 00       	push   0x81
10002196:	68 24 02 00 00       	push   0x224
1000219b:	53                   	push   ebx
1000219c:	e8 fc ff ff ff       	call   1000219d <SoundBlaster16::open(int, int, void*)+0x213>	1000219d: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100021a1:	ba 25 02 00 00       	mov    edx,0x225
100021a6:	ec                   	in     al,dx
100021a7:	83 c4 0c             	add    esp,0xc
100021aa:	89 c6                	mov    esi,eax
100021ac:	68 81 00 00 00       	push   0x81
100021b1:	68 24 02 00 00       	push   0x224
100021b6:	53                   	push   ebx
100021b7:	e8 fc ff ff ff       	call   100021b8 <SoundBlaster16::open(int, int, void*)+0x22e>	100021b8: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100021bc:	58                   	pop    eax
100021bd:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100021c3:	e8 fc ff ff ff       	call   100021c4 <SoundBlaster16::open(int, int, void*)+0x23a>	100021c4: R_386_PC32	DMAChannel::getChannelNum()
100021c8:	83 c4 10             	add    esp,0x10
100021cb:	48                   	dec    eax
100021cc:	75 0c                	jne    100021da <SoundBlaster16::open(int, int, void*)+0x250>
100021ce:	81 e6 f0 00 00 00    	and    esi,0xf0
100021d4:	51                   	push   ecx
100021d5:	83 ce 02             	or     esi,0x2
100021d8:	eb 20                	jmp    100021fa <SoundBlaster16::open(int, int, void*)+0x270>
100021da:	83 ec 0c             	sub    esp,0xc
100021dd:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100021e3:	e8 fc ff ff ff       	call   100021e4 <SoundBlaster16::open(int, int, void*)+0x25a>	100021e4: R_386_PC32	DMAChannel::getChannelNum()
100021e8:	83 c4 10             	add    esp,0x10
100021eb:	83 f8 03             	cmp    eax,0x3
100021ee:	75 18                	jne    10002208 <SoundBlaster16::open(int, int, void*)+0x27e>
100021f0:	81 e6 f0 00 00 00    	and    esi,0xf0
100021f6:	52                   	push   edx
100021f7:	83 ce 08             	or     esi,0x8
100021fa:	56                   	push   esi
100021fb:	68 25 02 00 00       	push   0x225
10002200:	53                   	push   ebx
10002201:	e8 fc ff ff ff       	call   10002202 <SoundBlaster16::open(int, int, void*)+0x278>	10002202: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002206:	eb 0d                	jmp    10002215 <SoundBlaster16::open(int, int, void*)+0x28b>
10002208:	83 ec 0c             	sub    esp,0xc
1000220b:	68 00 00 00 00       	push   0x0	1000220c: R_386_32	baddma
10002210:	e8 fc ff ff ff       	call   10002211 <SoundBlaster16::open(int, int, void*)+0x287>	10002211: R_386_PC32	Krnl::panic(char const*)
10002215:	83 c4 10             	add    esp,0x10
10002218:	50                   	push   eax
10002219:	6a 22                	push   0x22
1000221b:	68 24 02 00 00       	push   0x224
10002220:	53                   	push   ebx
10002221:	e8 fc ff ff ff       	call   10002222 <SoundBlaster16::open(int, int, void*)+0x298>	10002222: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002226:	83 c4 0c             	add    esp,0xc
10002229:	68 ff 00 00 00       	push   0xff
1000222e:	68 24 02 00 00       	push   0x224
10002233:	53                   	push   ebx
10002234:	e8 fc ff ff ff       	call   10002235 <SoundBlaster16::open(int, int, void*)+0x2ab>	10002235: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002239:	83 c4 10             	add    esp,0x10
1000223c:	31 c0                	xor    eax,eax
1000223e:	83 c4 14             	add    esp,0x14
10002241:	5b                   	pop    ebx
10002242:	5e                   	pop    esi
10002243:	c3                   	ret    

10002244 <SoundBlaster16::onInterrupt()>:
10002244:	56                   	push   esi
10002245:	53                   	push   ebx
10002246:	53                   	push   ebx
10002247:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000224b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000224d: R_386_32	outputBuffer
10002251:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10002253: R_386_32	tempBuffer
10002257:	68 00 20 00 00       	push   0x2000
1000225c:	56                   	push   esi
1000225d:	e8 fc ff ff ff       	call   1000225e <SoundBlaster16::onInterrupt()+0x1a>	1000225e: R_386_PC32	SoundDevice::getAudio(int, float*, float*)
10002262:	83 c4 10             	add    esp,0x10
10002265:	89 c3                	mov    ebx,eax
10002267:	80 3d bf 32 00 10 01 	cmp    BYTE PTR ds:0x100032bf,0x1	10002269: R_386_32	.data
1000226e:	53                   	push   ebx
1000226f:	19 c0                	sbb    eax,eax
10002271:	25 00 20 00 00       	and    eax,0x2000
10002276:	03 86 f4 01 00 00    	add    eax,DWORD PTR [esi+0x1f4]
1000227c:	50                   	push   eax
1000227d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000227f: R_386_32	outputBuffer
10002283:	56                   	push   esi
10002284:	e8 fc ff ff ff       	call   10002285 <SoundBlaster16::onInterrupt()+0x41>	10002285: R_386_PC32	SoundDevice::floatTo8(float*, unsigned char*, int)
10002289:	83 c4 10             	add    esp,0x10
1000228c:	85 db                	test   ebx,ebx
1000228e:	75 0c                	jne    1000229c <SoundBlaster16::onInterrupt()+0x58>
10002290:	51                   	push   ecx
10002291:	51                   	push   ecx
10002292:	6a 00                	push   0x0
10002294:	56                   	push   esi
10002295:	e8 fc ff ff ff       	call   10002296 <SoundBlaster16::onInterrupt()+0x52>	10002296: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
1000229a:	eb 3e                	jmp    100022da <SoundBlaster16::onInterrupt()+0x96>
1000229c:	81 fb ff 1f 00 00    	cmp    ebx,0x1fff
100022a2:	7f 39                	jg     100022dd <SoundBlaster16::onInterrupt()+0x99>
100022a4:	52                   	push   edx
100022a5:	6a 24                	push   0x24
100022a7:	68 2c 02 00 00       	push   0x22c
100022ac:	56                   	push   esi
100022ad:	e8 fc ff ff ff       	call   100022ae <SoundBlaster16::onInterrupt()+0x6a>	100022ae: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100022b2:	83 c4 0c             	add    esp,0xc
100022b5:	8d 43 ff             	lea    eax,[ebx-0x1]
100022b8:	4b                   	dec    ebx
100022b9:	0f b6 c0             	movzx  eax,al
100022bc:	0f b6 df             	movzx  ebx,bh
100022bf:	50                   	push   eax
100022c0:	68 2c 02 00 00       	push   0x22c
100022c5:	56                   	push   esi
100022c6:	e8 fc ff ff ff       	call   100022c7 <SoundBlaster16::onInterrupt()+0x83>	100022c7: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100022cb:	83 c4 0c             	add    esp,0xc
100022ce:	53                   	push   ebx
100022cf:	68 2c 02 00 00       	push   0x22c
100022d4:	56                   	push   esi
100022d5:	e8 fc ff ff ff       	call   100022d6 <SoundBlaster16::onInterrupt()+0x92>	100022d6: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100022da:	83 c4 10             	add    esp,0x10
100022dd:	80 35 bf 32 00 10 01 	xor    BYTE PTR ds:0x100032bf,0x1	100022df: R_386_32	.data
100022e4:	58                   	pop    eax
100022e5:	5b                   	pop    ebx
100022e6:	5e                   	pop    esi
100022e7:	c3                   	ret    

100022e8 <SoundBlaster16::close(int, int, void*)>:
100022e8:	83 ec 0c             	sub    esp,0xc
100022eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100022ef:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
100022f5:	85 c0                	test   eax,eax
100022f7:	74 11                	je     1000230a <SoundBlaster16::close(int, int, void*)+0x22>
100022f9:	52                   	push   edx
100022fa:	52                   	push   edx
100022fb:	50                   	push   eax
100022fc:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100022fe: R_386_32	isaDMAController
10002302:	e8 fc ff ff ff       	call   10002303 <SoundBlaster16::close(int, int, void*)+0x1b>	10002303: R_386_PC32	DMA::unlockChannel(DMAChannel*)
10002307:	83 c4 10             	add    esp,0x10
1000230a:	31 c0                	xor    eax,eax
1000230c:	83 c4 0c             	add    esp,0xc
1000230f:	c3                   	ret    

10002310 <ISA::~ISA()>:
10002310:	55                   	push   ebp
10002311:	89 e5                	mov    ebp,esp
10002313:	83 ec 08             	sub    esp,0x8
10002316:	ba 08 00 00 00       	mov    edx,0x8	10002317: R_386_32	vtable for ISA
1000231b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000231e:	89 10                	mov    DWORD PTR [eax],edx
10002320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002323:	83 ec 0c             	sub    esp,0xc
10002326:	50                   	push   eax
10002327:	e8 fc ff ff ff       	call   10002328 <ISA::~ISA()+0x18>	10002328: R_386_PC32	Bus::~Bus()
1000232c:	83 c4 10             	add    esp,0x10
1000232f:	90                   	nop
10002330:	c9                   	leave  
10002331:	c3                   	ret    

10002332 <ISA::~ISA()>:
10002332:	55                   	push   ebp
10002333:	89 e5                	mov    ebp,esp
10002335:	83 ec 08             	sub    esp,0x8
10002338:	83 ec 0c             	sub    esp,0xc
1000233b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000233e:	e8 fc ff ff ff       	call   1000233f <ISA::~ISA()+0xd>	1000233f: R_386_PC32	ISA::~ISA()
10002343:	83 c4 10             	add    esp,0x10
10002346:	83 ec 08             	sub    esp,0x8
10002349:	68 58 01 00 00       	push   0x158
1000234e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002351:	e8 fc ff ff ff       	call   10002352 <ISA::~ISA()+0x20>	10002352: R_386_PC32	operator delete(void*, unsigned long)
10002356:	83 c4 10             	add    esp,0x10
10002359:	c9                   	leave  
1000235a:	c3                   	ret    
1000235b:	90                   	nop

1000235c <DMA::~DMA()>:
1000235c:	55                   	push   ebp
1000235d:	89 e5                	mov    ebp,esp
1000235f:	83 ec 08             	sub    esp,0x8
10002362:	ba 08 00 00 00       	mov    edx,0x8	10002363: R_386_32	vtable for DMA
10002367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000236a:	89 10                	mov    DWORD PTR [eax],edx
1000236c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000236f:	83 ec 0c             	sub    esp,0xc
10002372:	50                   	push   eax
10002373:	e8 fc ff ff ff       	call   10002374 <DMA::~DMA()+0x18>	10002374: R_386_PC32	Device::~Device()
10002378:	83 c4 10             	add    esp,0x10
1000237b:	90                   	nop
1000237c:	c9                   	leave  
1000237d:	c3                   	ret    

1000237e <DMA::~DMA()>:
1000237e:	55                   	push   ebp
1000237f:	89 e5                	mov    ebp,esp
10002381:	83 ec 08             	sub    esp,0x8
10002384:	83 ec 0c             	sub    esp,0xc
10002387:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000238a:	e8 fc ff ff ff       	call   1000238b <DMA::~DMA()+0xd>	1000238b: R_386_PC32	DMA::~DMA()
1000238f:	83 c4 10             	add    esp,0x10
10002392:	83 ec 08             	sub    esp,0x8
10002395:	68 5c 01 00 00       	push   0x15c
1000239a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000239d:	e8 fc ff ff ff       	call   1000239e <DMA::~DMA()+0x20>	1000239e: R_386_PC32	operator delete(void*, unsigned long)
100023a2:	83 c4 10             	add    esp,0x10
100023a5:	c9                   	leave  
100023a6:	c3                   	ret    
100023a7:	90                   	nop

100023a8 <PS2::~PS2()>:
100023a8:	55                   	push   ebp
100023a9:	89 e5                	mov    ebp,esp
100023ab:	83 ec 08             	sub    esp,0x8
100023ae:	ba 08 00 00 00       	mov    edx,0x8	100023af: R_386_32	vtable for PS2
100023b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023b6:	89 10                	mov    DWORD PTR [eax],edx
100023b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023bb:	83 ec 0c             	sub    esp,0xc
100023be:	50                   	push   eax
100023bf:	e8 fc ff ff ff       	call   100023c0 <PS2::~PS2()+0x18>	100023c0: R_386_PC32	Bus::~Bus()
100023c4:	83 c4 10             	add    esp,0x10
100023c7:	90                   	nop
100023c8:	c9                   	leave  
100023c9:	c3                   	ret    

100023ca <PS2::~PS2()>:
100023ca:	55                   	push   ebp
100023cb:	89 e5                	mov    ebp,esp
100023cd:	83 ec 08             	sub    esp,0x8
100023d0:	83 ec 0c             	sub    esp,0xc
100023d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100023d6:	e8 fc ff ff ff       	call   100023d7 <PS2::~PS2()+0xd>	100023d7: R_386_PC32	PS2::~PS2()
100023db:	83 c4 10             	add    esp,0x10
100023de:	83 ec 08             	sub    esp,0x8
100023e1:	68 60 01 00 00       	push   0x160
100023e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100023e9:	e8 fc ff ff ff       	call   100023ea <PS2::~PS2()+0x20>	100023ea: R_386_PC32	operator delete(void*, unsigned long)
100023ee:	83 c4 10             	add    esp,0x10
100023f1:	c9                   	leave  
100023f2:	c3                   	ret    
100023f3:	90                   	nop

100023f4 <PS2Mouse::~PS2Mouse()>:
100023f4:	55                   	push   ebp
100023f5:	89 e5                	mov    ebp,esp
100023f7:	83 ec 08             	sub    esp,0x8
100023fa:	ba 08 00 00 00       	mov    edx,0x8	100023fb: R_386_32	vtable for PS2Mouse
100023ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002402:	89 10                	mov    DWORD PTR [eax],edx
10002404:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002407:	83 ec 0c             	sub    esp,0xc
1000240a:	50                   	push   eax
1000240b:	e8 fc ff ff ff       	call   1000240c <PS2Mouse::~PS2Mouse()+0x18>	1000240c: R_386_PC32	Mouse::~Mouse()
10002410:	83 c4 10             	add    esp,0x10
10002413:	90                   	nop
10002414:	c9                   	leave  
10002415:	c3                   	ret    

10002416 <PS2Mouse::~PS2Mouse()>:
10002416:	55                   	push   ebp
10002417:	89 e5                	mov    ebp,esp
10002419:	83 ec 08             	sub    esp,0x8
1000241c:	83 ec 0c             	sub    esp,0xc
1000241f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002422:	e8 fc ff ff ff       	call   10002423 <PS2Mouse::~PS2Mouse()+0xd>	10002423: R_386_PC32	PS2Mouse::~PS2Mouse()
10002427:	83 c4 10             	add    esp,0x10
1000242a:	83 ec 08             	sub    esp,0x8
1000242d:	68 68 01 00 00       	push   0x168
10002432:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002435:	e8 fc ff ff ff       	call   10002436 <PS2Mouse::~PS2Mouse()+0x20>	10002436: R_386_PC32	operator delete(void*, unsigned long)
1000243a:	83 c4 10             	add    esp,0x10
1000243d:	c9                   	leave  
1000243e:	c3                   	ret    
1000243f:	90                   	nop

10002440 <PS2Port::~PS2Port()>:
10002440:	55                   	push   ebp
10002441:	89 e5                	mov    ebp,esp
10002443:	83 ec 08             	sub    esp,0x8
10002446:	ba 08 00 00 00       	mov    edx,0x8	10002447: R_386_32	vtable for PS2Port
1000244b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000244e:	89 10                	mov    DWORD PTR [eax],edx
10002450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002453:	83 ec 0c             	sub    esp,0xc
10002456:	50                   	push   eax
10002457:	e8 fc ff ff ff       	call   10002458 <PS2Port::~PS2Port()+0x18>	10002458: R_386_PC32	Bus::~Bus()
1000245c:	83 c4 10             	add    esp,0x10
1000245f:	90                   	nop
10002460:	c9                   	leave  
10002461:	c3                   	ret    

10002462 <PS2Port::~PS2Port()>:
10002462:	55                   	push   ebp
10002463:	89 e5                	mov    ebp,esp
10002465:	83 ec 08             	sub    esp,0x8
10002468:	83 ec 0c             	sub    esp,0xc
1000246b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000246e:	e8 fc ff ff ff       	call   1000246f <PS2Port::~PS2Port()+0xd>	1000246f: R_386_PC32	PS2Port::~PS2Port()
10002473:	83 c4 10             	add    esp,0x10
10002476:	83 ec 08             	sub    esp,0x8
10002479:	68 60 01 00 00       	push   0x160
1000247e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002481:	e8 fc ff ff ff       	call   10002482 <PS2Port::~PS2Port()+0x20>	10002482: R_386_PC32	operator delete(void*, unsigned long)
10002486:	83 c4 10             	add    esp,0x10
10002489:	c9                   	leave  
1000248a:	c3                   	ret    
1000248b:	90                   	nop

1000248c <SoundBlaster16::~SoundBlaster16()>:
1000248c:	55                   	push   ebp
1000248d:	89 e5                	mov    ebp,esp
1000248f:	83 ec 08             	sub    esp,0x8
10002492:	ba 08 00 00 00       	mov    edx,0x8	10002493: R_386_32	vtable for SoundBlaster16
10002497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000249a:	89 10                	mov    DWORD PTR [eax],edx
1000249c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000249f:	83 ec 0c             	sub    esp,0xc
100024a2:	50                   	push   eax
100024a3:	e8 fc ff ff ff       	call   100024a4 <SoundBlaster16::~SoundBlaster16()+0x18>	100024a4: R_386_PC32	SoundDevice::~SoundDevice()
100024a8:	83 c4 10             	add    esp,0x10
100024ab:	90                   	nop
100024ac:	c9                   	leave  
100024ad:	c3                   	ret    

100024ae <SoundBlaster16::~SoundBlaster16()>:
100024ae:	55                   	push   ebp
100024af:	89 e5                	mov    ebp,esp
100024b1:	83 ec 08             	sub    esp,0x8
100024b4:	83 ec 0c             	sub    esp,0xc
100024b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024ba:	e8 fc ff ff ff       	call   100024bb <SoundBlaster16::~SoundBlaster16()+0xd>	100024bb: R_386_PC32	SoundBlaster16::~SoundBlaster16()
100024bf:	83 c4 10             	add    esp,0x10
100024c2:	83 ec 08             	sub    esp,0x8
100024c5:	68 fc 01 00 00       	push   0x1fc
100024ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100024cd:	e8 fc ff ff ff       	call   100024ce <SoundBlaster16::~SoundBlaster16()+0x20>	100024ce: R_386_PC32	operator delete(void*, unsigned long)
100024d2:	83 c4 10             	add    esp,0x10
100024d5:	c9                   	leave  
100024d6:	c3                   	ret    
100024d7:	90                   	nop

100024d8 <PHYS_RAM_TABLE_SIZE>:
100024d8:	13 05 00 00                                         ....

100024dc <PHYS_HIGHEST_UNUSED_ADDRESS>:
100024dc:	24 05 00 00                                         $...

100024e0 <PHYS_RAM_TABLE>:
100024e0:	00 06 00 00                                         ....

100024e4 <PHYS_DMA_MEMORY_1>:
100024e4:	00 00 01 00                                         ....

100024e8 <PHYS_PHYS_PAGE_BITMAP>:
100024e8:	00 00 02 00                                         ....

100024ec <PHYS_VIRT_PAGE_BITMAP>:
100024ec:	00 00 04 00                                         ....

100024f0 <PHYS_DMA_MEMORY_2>:
100024f0:	00 00 06 00                                         ....

100024f4 <PHYS_ALLOCED_VIRT_PAGES>:
100024f4:	00 00 10 00                                         ....

100024f8 <PHYS_KRNL_PAGE_DIRECTORY>:
100024f8:	00 10 00 00                                         ....

100024fc <VIRT_KERNEL_BASE>:
100024fc:	00 00 00 c0                                         ....

10002500 <VIRT_LOW_MEGS>:
10002500:	00 00 00 c2                                         ....

10002504 <VIRT_CPU_SPECIFIC>:
10002504:	00 00 40 c2                                         ..@.

10002508 <VIRT_RECURSIVE_SPOT_1>:
10002508:	00 00 80 c2                                         ....

1000250c <VIRT_RECURSIVE_SPOT_2>:
1000250c:	00 00 c0 c2                                         ....

10002510 <VIRT_DMA_MEMORY_1>:
10002510:	00 00 01 c2                                         ....

10002514 <SIZE_DMA_MEMORY_1>:
10002514:	00 00 01 00                                         ....

10002518 <VIRT_DMA_MEMORY_2>:
10002518:	00 00 06 c2                                         ....

1000251c <SIZE_DMA_MEMORY_2>:
1000251c:	00 00 02 00                                         ....

10002520 <VIRT_KRNL_PAGE_DIRECTORY>:
10002520:	00 10 00 c2                                         ....

10002524 <VIRT_PHYS_PAGE_BITMAP>:
10002524:	00 00 02 c2                                         ....

10002528 <SIZE_PHYS_PAGE_BITMAP>:
10002528:	00 00 02 00                                         ....

1000252c <VIRT_VIRT_PAGE_BITMAP>:
1000252c:	00 00 04 c2                                         ....

10002530 <SIZE_VIRT_PAGE_BITMAP>:
10002530:	00 80 00 00                                         ....

10002534 <VIRT_RAM_TABLE>:
10002534:	00 06 00 c2                                         ....

10002538 <VIRT_RAM_TABLE_SIZE>:
10002538:	13 05 00 c2                                         ....

1000253c <VIRT_HIGHEST_UNUSED_ADDRESS>:
1000253c:	24 05 00 c2                                         $...

10002540 <SIZE_APP_STACK_USER>:
10002540:	00 00 18 00                                         ....

10002544 <SIZE_APP_STACK_KRNL>:
10002544:	00 00 08 00                                         ....

10002548 <SIZE_APP_STACK_TOTAL>:
10002548:	00 00 20 00                                         .. .

1000254c <VIRT_APP_DATA>:
1000254c:	00 00 00 10                                         ....

10002550 <VIRT_APP_STACK_USER_TOP>:
10002550:	00 00 00 02                                         ....

10002554 <VIRT_APP_STACK_KRNL_TOP>:
10002554:	00 00 e8 01                                         ....

10002558 <VIRT_HEAP_MIN>:
10002558:	00 00 00 c8                                         ....

1000255c <VIRT_HEAP_MAX>:
1000255c:	ff ff ff ef                                         ....

10002560 <VIRT_SBRK_MIN>:
10002560:	00 00 00 f0                                         ....

10002564 <VIRT_SBRK_MAX>:
10002564:	00 00 c0 ff                                         ....

10002568 <VIRT_ALLOCED_VIRT_PAGES>:
10002568:	00 00 10 c2                                         ....

1000256c <VIRT_ACPI_DRIVER>:
1000256c:	00 40 48 c2                                         .@H.

10002570 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002570:	96 00 00 00                                         ....

10002574 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002574:	2c 01 00 00 73 74 72 69 6e 67 20 74 65 73 74 2e     ,...string test.
10002584:	0a 00 66 90                                         ..f.

10002588 <vtable for ISA>:
	...
	10002590: R_386_32	ISA::~ISA()
	10002594: R_386_32	ISA::~ISA()
	10002598: R_386_32	ISA::open(int, int, void*)
	1000259c: R_386_32	ISA::close(int, int, void*)
	100025a0: R_386_32	Device::hibernate()
	100025a4: R_386_32	Device::wake()
	100025a8: R_386_32	ISA::detect()
	100025ac: R_386_32	Device::disableLegacy()
	100025b0: R_386_32	Device::powerSaving(PowerSavingLevel)

100025b4 <PHYS_RAM_TABLE_SIZE>:
100025b4:	13 05 00 00                                         ....

100025b8 <PHYS_HIGHEST_UNUSED_ADDRESS>:
100025b8:	24 05 00 00                                         $...

100025bc <PHYS_RAM_TABLE>:
100025bc:	00 06 00 00                                         ....

100025c0 <PHYS_DMA_MEMORY_1>:
100025c0:	00 00 01 00                                         ....

100025c4 <PHYS_PHYS_PAGE_BITMAP>:
100025c4:	00 00 02 00                                         ....

100025c8 <PHYS_VIRT_PAGE_BITMAP>:
100025c8:	00 00 04 00                                         ....

100025cc <PHYS_DMA_MEMORY_2>:
100025cc:	00 00 06 00                                         ....

100025d0 <PHYS_ALLOCED_VIRT_PAGES>:
100025d0:	00 00 10 00                                         ....

100025d4 <PHYS_KRNL_PAGE_DIRECTORY>:
100025d4:	00 10 00 00                                         ....

100025d8 <VIRT_KERNEL_BASE>:
100025d8:	00 00 00 c0                                         ....

100025dc <VIRT_LOW_MEGS>:
100025dc:	00 00 00 c2                                         ....

100025e0 <VIRT_CPU_SPECIFIC>:
100025e0:	00 00 40 c2                                         ..@.

100025e4 <VIRT_RECURSIVE_SPOT_1>:
100025e4:	00 00 80 c2                                         ....

100025e8 <VIRT_RECURSIVE_SPOT_2>:
100025e8:	00 00 c0 c2                                         ....

100025ec <VIRT_DMA_MEMORY_1>:
100025ec:	00 00 01 c2                                         ....

100025f0 <SIZE_DMA_MEMORY_1>:
100025f0:	00 00 01 00                                         ....

100025f4 <VIRT_DMA_MEMORY_2>:
100025f4:	00 00 06 c2                                         ....

100025f8 <SIZE_DMA_MEMORY_2>:
100025f8:	00 00 02 00                                         ....

100025fc <VIRT_KRNL_PAGE_DIRECTORY>:
100025fc:	00 10 00 c2                                         ....

10002600 <VIRT_PHYS_PAGE_BITMAP>:
10002600:	00 00 02 c2                                         ....

10002604 <SIZE_PHYS_PAGE_BITMAP>:
10002604:	00 00 02 00                                         ....

10002608 <VIRT_VIRT_PAGE_BITMAP>:
10002608:	00 00 04 c2                                         ....

1000260c <SIZE_VIRT_PAGE_BITMAP>:
1000260c:	00 80 00 00                                         ....

10002610 <VIRT_RAM_TABLE>:
10002610:	00 06 00 c2                                         ....

10002614 <VIRT_RAM_TABLE_SIZE>:
10002614:	13 05 00 c2                                         ....

10002618 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002618:	24 05 00 c2                                         $...

1000261c <SIZE_APP_STACK_USER>:
1000261c:	00 00 18 00                                         ....

10002620 <SIZE_APP_STACK_KRNL>:
10002620:	00 00 08 00                                         ....

10002624 <SIZE_APP_STACK_TOTAL>:
10002624:	00 00 20 00                                         .. .

10002628 <VIRT_APP_DATA>:
10002628:	00 00 00 10                                         ....

1000262c <VIRT_APP_STACK_USER_TOP>:
1000262c:	00 00 00 02                                         ....

10002630 <VIRT_APP_STACK_KRNL_TOP>:
10002630:	00 00 e8 01                                         ....

10002634 <VIRT_HEAP_MIN>:
10002634:	00 00 00 c8                                         ....

10002638 <VIRT_HEAP_MAX>:
10002638:	ff ff ff ef                                         ....

1000263c <VIRT_SBRK_MIN>:
1000263c:	00 00 00 f0                                         ....

10002640 <VIRT_SBRK_MAX>:
10002640:	00 00 c0 ff                                         ....

10002644 <VIRT_ALLOCED_VIRT_PAGES>:
10002644:	00 00 10 c2                                         ....

10002648 <VIRT_ACPI_DRIVER>:
10002648:	00 40 48 c2                                         .@H.

1000264c <TERMINAL_KEYBUFFER_IN_SIZE>:
1000264c:	96 00 00 00                                         ....

10002650 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002650:	2c 01 00 00                                         ,...

10002654 <CSWTCH.8>:
10002654:	00 02 04 06 c0 c4 c8 cc                             ........

1000265c <CSWTCH.9>:
1000265c:	01 03 05 07 c2 c6 ca ce                             ........

10002664 <CSWTCH.10>:
10002664:	87 83 81 82 8f 8b 89 8a 4e 6f 74 20 69 6e 20 72     ........Not in r
10002674:	61 6e 67 65 2e 0a 00 90                             ange....

1000267c <vtable for DMA>:
	...
	10002684: R_386_32	DMA::~DMA()
	10002688: R_386_32	DMA::~DMA()
	1000268c: R_386_32	DMA::open(int, int, void*)
	10002690: R_386_32	DMA::close(int, int, void*)
	10002694: R_386_32	Device::hibernate()
	10002698: R_386_32	Device::wake()
	1000269c: R_386_32	Device::detect()
	100026a0: R_386_32	Device::disableLegacy()
	100026a4: R_386_32	Device::powerSaving(PowerSavingLevel)

100026a8 <PHYS_RAM_TABLE_SIZE>:
100026a8:	13 05 00 00                                         ....

100026ac <PHYS_HIGHEST_UNUSED_ADDRESS>:
100026ac:	24 05 00 00                                         $...

100026b0 <PHYS_RAM_TABLE>:
100026b0:	00 06 00 00                                         ....

100026b4 <PHYS_DMA_MEMORY_1>:
100026b4:	00 00 01 00                                         ....

100026b8 <PHYS_PHYS_PAGE_BITMAP>:
100026b8:	00 00 02 00                                         ....

100026bc <PHYS_VIRT_PAGE_BITMAP>:
100026bc:	00 00 04 00                                         ....

100026c0 <PHYS_DMA_MEMORY_2>:
100026c0:	00 00 06 00                                         ....

100026c4 <PHYS_ALLOCED_VIRT_PAGES>:
100026c4:	00 00 10 00                                         ....

100026c8 <PHYS_KRNL_PAGE_DIRECTORY>:
100026c8:	00 10 00 00                                         ....

100026cc <VIRT_KERNEL_BASE>:
100026cc:	00 00 00 c0                                         ....

100026d0 <VIRT_LOW_MEGS>:
100026d0:	00 00 00 c2                                         ....

100026d4 <VIRT_CPU_SPECIFIC>:
100026d4:	00 00 40 c2                                         ..@.

100026d8 <VIRT_RECURSIVE_SPOT_1>:
100026d8:	00 00 80 c2                                         ....

100026dc <VIRT_RECURSIVE_SPOT_2>:
100026dc:	00 00 c0 c2                                         ....

100026e0 <VIRT_DMA_MEMORY_1>:
100026e0:	00 00 01 c2                                         ....

100026e4 <SIZE_DMA_MEMORY_1>:
100026e4:	00 00 01 00                                         ....

100026e8 <VIRT_DMA_MEMORY_2>:
100026e8:	00 00 06 c2                                         ....

100026ec <SIZE_DMA_MEMORY_2>:
100026ec:	00 00 02 00                                         ....

100026f0 <VIRT_KRNL_PAGE_DIRECTORY>:
100026f0:	00 10 00 c2                                         ....

100026f4 <VIRT_PHYS_PAGE_BITMAP>:
100026f4:	00 00 02 c2                                         ....

100026f8 <SIZE_PHYS_PAGE_BITMAP>:
100026f8:	00 00 02 00                                         ....

100026fc <VIRT_VIRT_PAGE_BITMAP>:
100026fc:	00 00 04 c2                                         ....

10002700 <SIZE_VIRT_PAGE_BITMAP>:
10002700:	00 80 00 00                                         ....

10002704 <VIRT_RAM_TABLE>:
10002704:	00 06 00 c2                                         ....

10002708 <VIRT_RAM_TABLE_SIZE>:
10002708:	13 05 00 c2                                         ....

1000270c <VIRT_HIGHEST_UNUSED_ADDRESS>:
1000270c:	24 05 00 c2                                         $...

10002710 <SIZE_APP_STACK_USER>:
10002710:	00 00 18 00                                         ....

10002714 <SIZE_APP_STACK_KRNL>:
10002714:	00 00 08 00                                         ....

10002718 <SIZE_APP_STACK_TOTAL>:
10002718:	00 00 20 00                                         .. .

1000271c <VIRT_APP_DATA>:
1000271c:	00 00 00 10                                         ....

10002720 <VIRT_APP_STACK_USER_TOP>:
10002720:	00 00 00 02                                         ....

10002724 <VIRT_APP_STACK_KRNL_TOP>:
10002724:	00 00 e8 01                                         ....

10002728 <VIRT_HEAP_MIN>:
10002728:	00 00 00 c8                                         ....

1000272c <VIRT_HEAP_MAX>:
1000272c:	ff ff ff ef                                         ....

10002730 <VIRT_SBRK_MIN>:
10002730:	00 00 00 f0                                         ....

10002734 <VIRT_SBRK_MAX>:
10002734:	00 00 c0 ff                                         ....

10002738 <VIRT_ALLOCED_VIRT_PAGES>:
10002738:	00 00 10 c2                                         ....

1000273c <VIRT_ACPI_DRIVER>:
1000273c:	00 40 48 c2                                         .@H.

10002740 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002740:	96 00 00 00                                         ....

10002744 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002744:	2c 01 00 00                                         ,...

10002748 <vtable for PS2>:
	...
	10002750: R_386_32	PS2::~PS2()
	10002754: R_386_32	PS2::~PS2()
	10002758: R_386_32	PS2::open(int, int, void*)
	1000275c: R_386_32	PS2::close(int, int, void*)
	10002760: R_386_32	Device::hibernate()
	10002764: R_386_32	Device::wake()
	10002768: R_386_32	PS2::detect()
	1000276c: R_386_32	Device::disableLegacy()
	10002770: R_386_32	Device::powerSaving(PowerSavingLevel)
10002774:	66 90 66 90 66 90 66 90 66 90 66 90                 f.f.f.f.f.f.

10002780 <PHYS_RAM_TABLE_SIZE>:
10002780:	13 05 00 00                                         ....

10002784 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002784:	24 05 00 00                                         $...

10002788 <PHYS_RAM_TABLE>:
10002788:	00 06 00 00                                         ....

1000278c <PHYS_DMA_MEMORY_1>:
1000278c:	00 00 01 00                                         ....

10002790 <PHYS_PHYS_PAGE_BITMAP>:
10002790:	00 00 02 00                                         ....

10002794 <PHYS_VIRT_PAGE_BITMAP>:
10002794:	00 00 04 00                                         ....

10002798 <PHYS_DMA_MEMORY_2>:
10002798:	00 00 06 00                                         ....

1000279c <PHYS_ALLOCED_VIRT_PAGES>:
1000279c:	00 00 10 00                                         ....

100027a0 <PHYS_KRNL_PAGE_DIRECTORY>:
100027a0:	00 10 00 00                                         ....

100027a4 <VIRT_KERNEL_BASE>:
100027a4:	00 00 00 c0                                         ....

100027a8 <VIRT_LOW_MEGS>:
100027a8:	00 00 00 c2                                         ....

100027ac <VIRT_CPU_SPECIFIC>:
100027ac:	00 00 40 c2                                         ..@.

100027b0 <VIRT_RECURSIVE_SPOT_1>:
100027b0:	00 00 80 c2                                         ....

100027b4 <VIRT_RECURSIVE_SPOT_2>:
100027b4:	00 00 c0 c2                                         ....

100027b8 <VIRT_DMA_MEMORY_1>:
100027b8:	00 00 01 c2                                         ....

100027bc <SIZE_DMA_MEMORY_1>:
100027bc:	00 00 01 00                                         ....

100027c0 <VIRT_DMA_MEMORY_2>:
100027c0:	00 00 06 c2                                         ....

100027c4 <SIZE_DMA_MEMORY_2>:
100027c4:	00 00 02 00                                         ....

100027c8 <VIRT_KRNL_PAGE_DIRECTORY>:
100027c8:	00 10 00 c2                                         ....

100027cc <VIRT_PHYS_PAGE_BITMAP>:
100027cc:	00 00 02 c2                                         ....

100027d0 <SIZE_PHYS_PAGE_BITMAP>:
100027d0:	00 00 02 00                                         ....

100027d4 <VIRT_VIRT_PAGE_BITMAP>:
100027d4:	00 00 04 c2                                         ....

100027d8 <SIZE_VIRT_PAGE_BITMAP>:
100027d8:	00 80 00 00                                         ....

100027dc <VIRT_RAM_TABLE>:
100027dc:	00 06 00 c2                                         ....

100027e0 <VIRT_RAM_TABLE_SIZE>:
100027e0:	13 05 00 c2                                         ....

100027e4 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100027e4:	24 05 00 c2                                         $...

100027e8 <SIZE_APP_STACK_USER>:
100027e8:	00 00 18 00                                         ....

100027ec <SIZE_APP_STACK_KRNL>:
100027ec:	00 00 08 00                                         ....

100027f0 <SIZE_APP_STACK_TOTAL>:
100027f0:	00 00 20 00                                         .. .

100027f4 <VIRT_APP_DATA>:
100027f4:	00 00 00 10                                         ....

100027f8 <VIRT_APP_STACK_USER_TOP>:
100027f8:	00 00 00 02                                         ....

100027fc <VIRT_APP_STACK_KRNL_TOP>:
100027fc:	00 00 e8 01                                         ....

10002800 <VIRT_HEAP_MIN>:
10002800:	00 00 00 c8                                         ....

10002804 <VIRT_HEAP_MAX>:
10002804:	ff ff ff ef                                         ....

10002808 <VIRT_SBRK_MIN>:
10002808:	00 00 00 f0                                         ....

1000280c <VIRT_SBRK_MAX>:
1000280c:	00 00 c0 ff                                         ....

10002810 <VIRT_ALLOCED_VIRT_PAGES>:
10002810:	00 00 10 c2                                         ....

10002814 <VIRT_ACPI_DRIVER>:
10002814:	00 40 48 c2                                         .@H.

10002818 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002818:	96 00 00 00                                         ....

1000281c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000281c:	2c 01 00 00                                         ,...

10002820 <PS2Keyboard::internalMapperLower>:
10002820:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10002830:	20 20 20 20 20 71 31 20 20 20 7a 73 61 77 32 20          q1   zsaw2 
10002840:	20 63 78 64 65 34 33 20 20 20 76 66 74 72 35 20      cxde43   vftr5 
10002850:	20 6e 62 68 67 79 36 20 20 20 6d 6a 75 37 38 20      nbhgy6   mju78 
10002860:	20 2c 6b 69 6f 30 39 20 20 2e 2f 6c 3b 70 2d 20      ,kio09  ./l;p- 
10002870:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10002880:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002890:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
100028a0:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10002920 <PS2Keyboard::internalMapperUpper>:
10002920:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10002930:	20 20 20 20 20 51 21 20 20 20 5a 53 41 57 40 20          Q!   ZSAW@ 
10002940:	20 43 58 44 45 24 23 20 20 20 56 46 54 52 25 20      CXDE$#   VFTR% 
10002950:	20 4e 42 48 47 59 5e 20 20 20 4d 4a 55 26 2a 20      NBHGY^   MJU&* 
10002960:	20 3c 4b 49 4f 29 28 20 20 3e 3f 4c 3a 50 5f 20      <KIO)(  >?L:P_ 
10002970:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10002980:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002990:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
100029a0:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10002a20 <PS2Keyboard::internalMapCapLower>:
10002a20:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10002a30:	20 20 20 20 20 51 31 20 20 20 5a 53 41 57 32 20          Q1   ZSAW2 
10002a40:	20 43 58 44 45 34 33 20 20 20 56 46 54 52 35 20      CXDE43   VFTR5 
10002a50:	20 4e 42 48 47 59 36 20 20 20 4d 4a 55 37 38 20      NBHGY6   MJU78 
10002a60:	20 2c 4b 49 4f 30 39 20 20 2e 2f 4c 3b 50 2d 20      ,KIO09  ./L;P- 
10002a70:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10002a80:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002a90:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002aa0:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10002b20 <PS2Keyboard::internalMapCapUpper>:
10002b20:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10002b30:	20 20 20 20 20 51 21 20 20 20 7a 73 61 77 40 20          Q!   zsaw@ 
10002b40:	20 63 78 64 65 24 23 20 20 20 76 66 74 72 25 20      cxde$#   vftr% 
10002b50:	20 6e 62 68 67 79 5e 20 20 20 6d 6a 75 26 2a 20      nbhgy^   mju&* 
10002b60:	20 3c 6b 69 6f 29 28 20 20 3e 3f 6c 3a 70 5f 20      <kio)(  >?l:p_ 
10002b70:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10002b80:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002b90:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002ba0:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10002c20 <PS2Keyboard::internalMapperLowerBad>:
10002c20:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10002c30:	71 77 65 72 74 79 75 69 6f 70 5b 5d 20 20 61 73     qwertyuiop[]  as
10002c40:	64 66 67 68 6a 6b 6c 3b 27 60 20 5c 7a 78 63 76     dfghjkl;'` \zxcv
10002c50:	62 6e 6d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     bnm,./ *        
10002c60:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002c70:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002c80:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002c90:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002ca0:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10002cb0:	51 57 45 52 54 59 55 49 4f 50 7b 7d 20 20 41 53     QWERTYUIOP{}  AS
10002cc0:	44 46 47 48 4a 4b 4c 3a 22 7e 20 7c 5a 58 43 56     DFGHJKL:"~ |ZXCV
10002cd0:	42 4e 4d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     BNM<>? *        
10002ce0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002cf0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002d00:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002d10:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002d20:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10002d30:	51 57 45 52 54 59 55 49 4f 50 5b 5d 20 20 41 53     QWERTYUIOP[]  AS
10002d40:	44 46 47 48 4a 4b 4c 3b 27 60 20 5c 5a 58 43 56     DFGHJKL;'` \ZXCV
10002d50:	42 4e 4d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     BNM,./ *        
10002d60:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002d70:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002d80:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002d90:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002da0:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10002db0:	71 77 65 72 74 79 75 69 6f 70 7b 7d 20 20 61 73     qwertyuiop{}  as
10002dc0:	64 66 67 68 6a 6b 6c 3a 22 7e 20 7c 7a 78 63 76     dfghjkl:"~ |zxcv
10002dd0:	62 6e 6d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     bnm<>? *        
10002de0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10002df0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10002e00:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002e10:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10002e20:	00 66 90 90                                         .f..

10002e24 <vtable for PS2Keyboard>:
	...
	10002e2c: R_386_32	PS2Keyboard::~PS2Keyboard()
	10002e30: R_386_32	PS2Keyboard::~PS2Keyboard()
	10002e34: R_386_32	PS2Keyboard::open(int, int, void*)
	10002e38: R_386_32	PS2Keyboard::close(int, int, void*)
	10002e3c: R_386_32	Device::hibernate()
	10002e40: R_386_32	Device::wake()
	10002e44: R_386_32	Device::detect()
	10002e48: R_386_32	Device::disableLegacy()
	10002e4c: R_386_32	Device::powerSaving(PowerSavingLevel)
	10002e50: R_386_32	PS2Keyboard::setRepeatRate(int)
	10002e54: R_386_32	PS2Keyboard::setRepeatDelay(int)

10002e58 <PHYS_RAM_TABLE_SIZE>:
10002e58:	13 05 00 00                                         ....

10002e5c <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002e5c:	24 05 00 00                                         $...

10002e60 <PHYS_RAM_TABLE>:
10002e60:	00 06 00 00                                         ....

10002e64 <PHYS_DMA_MEMORY_1>:
10002e64:	00 00 01 00                                         ....

10002e68 <PHYS_PHYS_PAGE_BITMAP>:
10002e68:	00 00 02 00                                         ....

10002e6c <PHYS_VIRT_PAGE_BITMAP>:
10002e6c:	00 00 04 00                                         ....

10002e70 <PHYS_DMA_MEMORY_2>:
10002e70:	00 00 06 00                                         ....

10002e74 <PHYS_ALLOCED_VIRT_PAGES>:
10002e74:	00 00 10 00                                         ....

10002e78 <PHYS_KRNL_PAGE_DIRECTORY>:
10002e78:	00 10 00 00                                         ....

10002e7c <VIRT_KERNEL_BASE>:
10002e7c:	00 00 00 c0                                         ....

10002e80 <VIRT_LOW_MEGS>:
10002e80:	00 00 00 c2                                         ....

10002e84 <VIRT_CPU_SPECIFIC>:
10002e84:	00 00 40 c2                                         ..@.

10002e88 <VIRT_RECURSIVE_SPOT_1>:
10002e88:	00 00 80 c2                                         ....

10002e8c <VIRT_RECURSIVE_SPOT_2>:
10002e8c:	00 00 c0 c2                                         ....

10002e90 <VIRT_DMA_MEMORY_1>:
10002e90:	00 00 01 c2                                         ....

10002e94 <SIZE_DMA_MEMORY_1>:
10002e94:	00 00 01 00                                         ....

10002e98 <VIRT_DMA_MEMORY_2>:
10002e98:	00 00 06 c2                                         ....

10002e9c <SIZE_DMA_MEMORY_2>:
10002e9c:	00 00 02 00                                         ....

10002ea0 <VIRT_KRNL_PAGE_DIRECTORY>:
10002ea0:	00 10 00 c2                                         ....

10002ea4 <VIRT_PHYS_PAGE_BITMAP>:
10002ea4:	00 00 02 c2                                         ....

10002ea8 <SIZE_PHYS_PAGE_BITMAP>:
10002ea8:	00 00 02 00                                         ....

10002eac <VIRT_VIRT_PAGE_BITMAP>:
10002eac:	00 00 04 c2                                         ....

10002eb0 <SIZE_VIRT_PAGE_BITMAP>:
10002eb0:	00 80 00 00                                         ....

10002eb4 <VIRT_RAM_TABLE>:
10002eb4:	00 06 00 c2                                         ....

10002eb8 <VIRT_RAM_TABLE_SIZE>:
10002eb8:	13 05 00 c2                                         ....

10002ebc <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002ebc:	24 05 00 c2                                         $...

10002ec0 <SIZE_APP_STACK_USER>:
10002ec0:	00 00 18 00                                         ....

10002ec4 <SIZE_APP_STACK_KRNL>:
10002ec4:	00 00 08 00                                         ....

10002ec8 <SIZE_APP_STACK_TOTAL>:
10002ec8:	00 00 20 00                                         .. .

10002ecc <VIRT_APP_DATA>:
10002ecc:	00 00 00 10                                         ....

10002ed0 <VIRT_APP_STACK_USER_TOP>:
10002ed0:	00 00 00 02                                         ....

10002ed4 <VIRT_APP_STACK_KRNL_TOP>:
10002ed4:	00 00 e8 01                                         ....

10002ed8 <VIRT_HEAP_MIN>:
10002ed8:	00 00 00 c8                                         ....

10002edc <VIRT_HEAP_MAX>:
10002edc:	ff ff ff ef                                         ....

10002ee0 <VIRT_SBRK_MIN>:
10002ee0:	00 00 00 f0                                         ....

10002ee4 <VIRT_SBRK_MAX>:
10002ee4:	00 00 c0 ff                                         ....

10002ee8 <VIRT_ALLOCED_VIRT_PAGES>:
10002ee8:	00 00 10 c2                                         ....

10002eec <VIRT_ACPI_DRIVER>:
10002eec:	00 40 48 c2                                         .@H.

10002ef0 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002ef0:	96 00 00 00                                         ....

10002ef4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002ef4:	2c 01 00 00                                         ,...

10002ef8 <vtable for PS2Mouse>:
	...
	10002f00: R_386_32	PS2Mouse::~PS2Mouse()
	10002f04: R_386_32	PS2Mouse::~PS2Mouse()
	10002f08: R_386_32	PS2Mouse::open(int, int, void*)
	10002f0c: R_386_32	PS2Mouse::close(int, int, void*)
	10002f10: R_386_32	Device::hibernate()
	10002f14: R_386_32	Device::wake()
	10002f18: R_386_32	PS2Mouse::detect()
	10002f1c: R_386_32	Device::disableLegacy()
	10002f20: R_386_32	Device::powerSaving(PowerSavingLevel)

10002f24 <PHYS_RAM_TABLE_SIZE>:
10002f24:	13 05 00 00                                         ....

10002f28 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002f28:	24 05 00 00                                         $...

10002f2c <PHYS_RAM_TABLE>:
10002f2c:	00 06 00 00                                         ....

10002f30 <PHYS_DMA_MEMORY_1>:
10002f30:	00 00 01 00                                         ....

10002f34 <PHYS_PHYS_PAGE_BITMAP>:
10002f34:	00 00 02 00                                         ....

10002f38 <PHYS_VIRT_PAGE_BITMAP>:
10002f38:	00 00 04 00                                         ....

10002f3c <PHYS_DMA_MEMORY_2>:
10002f3c:	00 00 06 00                                         ....

10002f40 <PHYS_ALLOCED_VIRT_PAGES>:
10002f40:	00 00 10 00                                         ....

10002f44 <PHYS_KRNL_PAGE_DIRECTORY>:
10002f44:	00 10 00 00                                         ....

10002f48 <VIRT_KERNEL_BASE>:
10002f48:	00 00 00 c0                                         ....

10002f4c <VIRT_LOW_MEGS>:
10002f4c:	00 00 00 c2                                         ....

10002f50 <VIRT_CPU_SPECIFIC>:
10002f50:	00 00 40 c2                                         ..@.

10002f54 <VIRT_RECURSIVE_SPOT_1>:
10002f54:	00 00 80 c2                                         ....

10002f58 <VIRT_RECURSIVE_SPOT_2>:
10002f58:	00 00 c0 c2                                         ....

10002f5c <VIRT_DMA_MEMORY_1>:
10002f5c:	00 00 01 c2                                         ....

10002f60 <SIZE_DMA_MEMORY_1>:
10002f60:	00 00 01 00                                         ....

10002f64 <VIRT_DMA_MEMORY_2>:
10002f64:	00 00 06 c2                                         ....

10002f68 <SIZE_DMA_MEMORY_2>:
10002f68:	00 00 02 00                                         ....

10002f6c <VIRT_KRNL_PAGE_DIRECTORY>:
10002f6c:	00 10 00 c2                                         ....

10002f70 <VIRT_PHYS_PAGE_BITMAP>:
10002f70:	00 00 02 c2                                         ....

10002f74 <SIZE_PHYS_PAGE_BITMAP>:
10002f74:	00 00 02 00                                         ....

10002f78 <VIRT_VIRT_PAGE_BITMAP>:
10002f78:	00 00 04 c2                                         ....

10002f7c <SIZE_VIRT_PAGE_BITMAP>:
10002f7c:	00 80 00 00                                         ....

10002f80 <VIRT_RAM_TABLE>:
10002f80:	00 06 00 c2                                         ....

10002f84 <VIRT_RAM_TABLE_SIZE>:
10002f84:	13 05 00 c2                                         ....

10002f88 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002f88:	24 05 00 c2                                         $...

10002f8c <SIZE_APP_STACK_USER>:
10002f8c:	00 00 18 00                                         ....

10002f90 <SIZE_APP_STACK_KRNL>:
10002f90:	00 00 08 00                                         ....

10002f94 <SIZE_APP_STACK_TOTAL>:
10002f94:	00 00 20 00                                         .. .

10002f98 <VIRT_APP_DATA>:
10002f98:	00 00 00 10                                         ....

10002f9c <VIRT_APP_STACK_USER_TOP>:
10002f9c:	00 00 00 02                                         ....

10002fa0 <VIRT_APP_STACK_KRNL_TOP>:
10002fa0:	00 00 e8 01                                         ....

10002fa4 <VIRT_HEAP_MIN>:
10002fa4:	00 00 00 c8                                         ....

10002fa8 <VIRT_HEAP_MAX>:
10002fa8:	ff ff ff ef                                         ....

10002fac <VIRT_SBRK_MIN>:
10002fac:	00 00 00 f0                                         ....

10002fb0 <VIRT_SBRK_MAX>:
10002fb0:	00 00 c0 ff                                         ....

10002fb4 <VIRT_ALLOCED_VIRT_PAGES>:
10002fb4:	00 00 10 c2                                         ....

10002fb8 <VIRT_ACPI_DRIVER>:
10002fb8:	00 40 48 c2                                         .@H.

10002fbc <TERMINAL_KEYBUFFER_IN_SIZE>:
10002fbc:	96 00 00 00                                         ....

10002fc0 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002fc0:	2c 01 00 00                                         ,...

10002fc4 <vtable for PS2Port>:
	...
	10002fcc: R_386_32	PS2Port::~PS2Port()
	10002fd0: R_386_32	PS2Port::~PS2Port()
	10002fd4: R_386_32	PS2Port::open(int, int, void*)
	10002fd8: R_386_32	PS2Port::close(int, int, void*)
	10002fdc: R_386_32	Device::hibernate()
	10002fe0: R_386_32	Device::wake()
	10002fe4: R_386_32	PS2Port::detect()
	10002fe8: R_386_32	Device::disableLegacy()
	10002fec: R_386_32	Device::powerSaving(PowerSavingLevel)

10002ff0 <PHYS_RAM_TABLE_SIZE>:
10002ff0:	13 05 00 00                                         ....

10002ff4 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002ff4:	24 05 00 00                                         $...

10002ff8 <PHYS_RAM_TABLE>:
10002ff8:	00 06 00 00                                         ....

10002ffc <PHYS_DMA_MEMORY_1>:
10002ffc:	00 00 01 00                                         ....

10003000 <PHYS_PHYS_PAGE_BITMAP>:
10003000:	00 00 02 00                                         ....

10003004 <PHYS_VIRT_PAGE_BITMAP>:
10003004:	00 00 04 00                                         ....

10003008 <PHYS_DMA_MEMORY_2>:
10003008:	00 00 06 00                                         ....

1000300c <PHYS_ALLOCED_VIRT_PAGES>:
1000300c:	00 00 10 00                                         ....

10003010 <PHYS_KRNL_PAGE_DIRECTORY>:
10003010:	00 10 00 00                                         ....

10003014 <VIRT_KERNEL_BASE>:
10003014:	00 00 00 c0                                         ....

10003018 <VIRT_LOW_MEGS>:
10003018:	00 00 00 c2                                         ....

1000301c <VIRT_CPU_SPECIFIC>:
1000301c:	00 00 40 c2                                         ..@.

10003020 <VIRT_RECURSIVE_SPOT_1>:
10003020:	00 00 80 c2                                         ....

10003024 <VIRT_RECURSIVE_SPOT_2>:
10003024:	00 00 c0 c2                                         ....

10003028 <VIRT_DMA_MEMORY_1>:
10003028:	00 00 01 c2                                         ....

1000302c <SIZE_DMA_MEMORY_1>:
1000302c:	00 00 01 00                                         ....

10003030 <VIRT_DMA_MEMORY_2>:
10003030:	00 00 06 c2                                         ....

10003034 <SIZE_DMA_MEMORY_2>:
10003034:	00 00 02 00                                         ....

10003038 <VIRT_KRNL_PAGE_DIRECTORY>:
10003038:	00 10 00 c2                                         ....

1000303c <VIRT_PHYS_PAGE_BITMAP>:
1000303c:	00 00 02 c2                                         ....

10003040 <SIZE_PHYS_PAGE_BITMAP>:
10003040:	00 00 02 00                                         ....

10003044 <VIRT_VIRT_PAGE_BITMAP>:
10003044:	00 00 04 c2                                         ....

10003048 <SIZE_VIRT_PAGE_BITMAP>:
10003048:	00 80 00 00                                         ....

1000304c <VIRT_RAM_TABLE>:
1000304c:	00 06 00 c2                                         ....

10003050 <VIRT_RAM_TABLE_SIZE>:
10003050:	13 05 00 c2                                         ....

10003054 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10003054:	24 05 00 c2                                         $...

10003058 <SIZE_APP_STACK_USER>:
10003058:	00 00 18 00                                         ....

1000305c <SIZE_APP_STACK_KRNL>:
1000305c:	00 00 08 00                                         ....

10003060 <SIZE_APP_STACK_TOTAL>:
10003060:	00 00 20 00                                         .. .

10003064 <VIRT_APP_DATA>:
10003064:	00 00 00 10                                         ....

10003068 <VIRT_APP_STACK_USER_TOP>:
10003068:	00 00 00 02                                         ....

1000306c <VIRT_APP_STACK_KRNL_TOP>:
1000306c:	00 00 e8 01                                         ....

10003070 <VIRT_HEAP_MIN>:
10003070:	00 00 00 c8                                         ....

10003074 <VIRT_HEAP_MAX>:
10003074:	ff ff ff ef                                         ....

10003078 <VIRT_SBRK_MIN>:
10003078:	00 00 00 f0                                         ....

1000307c <VIRT_SBRK_MAX>:
1000307c:	00 00 c0 ff                                         ....

10003080 <VIRT_ALLOCED_VIRT_PAGES>:
10003080:	00 00 10 c2                                         ....

10003084 <VIRT_ACPI_DRIVER>:
10003084:	00 40 48 c2                                         .@H.

10003088 <TERMINAL_KEYBUFFER_IN_SIZE>:
10003088:	96 00 00 00                                         ....

1000308c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000308c:	2c 01 00 00 53 4f 4e 47 20 53 48 4f 55 4c 44 20     ,...SONG SHOULD 
1000309c:	42 45 20 44 4f 4e 45 2e 0a 00 66 90                 BE DONE...f.

100030a8 <vtable for SoundBlaster16>:
	...
	100030b0: R_386_32	SoundBlaster16::~SoundBlaster16()
	100030b4: R_386_32	SoundBlaster16::~SoundBlaster16()
	100030b8: R_386_32	SoundBlaster16::open(int, int, void*)
	100030bc: R_386_32	SoundBlaster16::close(int, int, void*)
	100030c0: R_386_32	Device::hibernate()
	100030c4: R_386_32	Device::wake()
	100030c8: R_386_32	Device::detect()
	100030cc: R_386_32	Device::disableLegacy()
	100030d0: R_386_32	Device::powerSaving(PowerSavingLevel)
	100030d4: R_386_32	SoundBlaster16::getNumHwChannels()
	100030d8: R_386_32	SoundBlaster16::beginPlayback(int, int)
	100030dc: R_386_32	SoundBlaster16::stopPlayback()
