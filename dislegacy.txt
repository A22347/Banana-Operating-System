
packages/system/32/0002/legacy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	realstart(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <realstart(void*)>:
10000017:	53                   	push   ebx
10000018:	83 ec 14             	sub    esp,0x14
1000001b:	68 58 01 00 00       	push   0x158
10000020:	e8 fc ff ff ff       	call   10000021 <realstart(void*)+0xa>	10000021: R_386_PC32	malloc
10000025:	89 04 24             	mov    DWORD PTR [esp],eax
10000028:	89 c3                	mov    ebx,eax
1000002a:	e8 fc ff ff ff       	call   1000002b <realstart(void*)+0x14>	1000002b: R_386_PC32	ISA::ISA()
1000002f:	58                   	pop    eax
10000030:	5a                   	pop    edx
10000031:	53                   	push   ebx
10000032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000036:	e8 fc ff ff ff       	call   10000037 <realstart(void*)+0x20>	10000037: R_386_PC32	Device::addChild(Device*)
1000003b:	6a 00                	push   0x0
1000003d:	8b 03                	mov    eax,DWORD PTR [ebx]
1000003f:	6a 00                	push   0x0
10000041:	6a 00                	push   0x0
10000043:	53                   	push   ebx
10000044:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000047:	83 c4 28             	add    esp,0x28
1000004a:	5b                   	pop    ebx
1000004b:	c3                   	ret    

1000004c <ISA::ISA()>:
1000004c:	55                   	push   ebp
1000004d:	89 e5                	mov    ebp,esp
1000004f:	83 ec 08             	sub    esp,0x8
10000052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000055:	83 ec 08             	sub    esp,0x8
10000058:	68 c8 52 00 10       	push   0x100052c8	10000059: R_386_32	.text
1000005d:	50                   	push   eax
1000005e:	e8 fc ff ff ff       	call   1000005f <ISA::ISA()+0x13>	1000005f: R_386_PC32	Bus::Bus(char const*)
10000063:	83 c4 10             	add    esp,0x10
10000066:	ba 08 00 00 00       	mov    edx,0x8	10000067: R_386_32	vtable for ISA
1000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000006e:	89 10                	mov    DWORD PTR [eax],edx
10000070:	90                   	nop
10000071:	c9                   	leave  
10000072:	c3                   	ret    
10000073:	90                   	nop

10000074 <ISA::open(int, int, void*)>:
10000074:	83 ec 18             	sub    esp,0x18
10000077:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000007b:	8b 10                	mov    edx,DWORD PTR [eax]
1000007d:	50                   	push   eax
1000007e:	ff 52 18             	call   DWORD PTR [edx+0x18]
10000081:	31 c0                	xor    eax,eax
10000083:	83 c4 1c             	add    esp,0x1c
10000086:	c3                   	ret    
10000087:	90                   	nop

10000088 <ISA::close(int, int, void*)>:
10000088:	31 c0                	xor    eax,eax
1000008a:	c3                   	ret    
1000008b:	90                   	nop

1000008c <ISA::doSpeaker()>:
1000008c:	c3                   	ret    
1000008d:	90                   	nop

1000008e <ISA::doSoundblaster()>:
1000008e:	c3                   	ret    
1000008f:	90                   	nop

10000090 <ISA::doSerial()>:
10000090:	c3                   	ret    
10000091:	90                   	nop

10000092 <ISA::doParallel()>:
10000092:	c3                   	ret    
10000093:	90                   	nop

10000094 <ISA::doGameport()>:
10000094:	53                   	push   ebx
10000095:	83 ec 14             	sub    esp,0x14
10000098:	68 80 01 00 00       	push   0x180
1000009d:	e8 fc ff ff ff       	call   1000009e <ISA::doGameport()+0xa>	1000009e: R_386_PC32	malloc
100000a2:	89 04 24             	mov    DWORD PTR [esp],eax
100000a5:	89 c3                	mov    ebx,eax
100000a7:	e8 fc ff ff ff       	call   100000a8 <ISA::doGameport()+0x14>	100000a8: R_386_PC32	Gameport::Gameport()
100000ac:	58                   	pop    eax
100000ad:	5a                   	pop    edx
100000ae:	53                   	push   ebx
100000af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000b3:	e8 fc ff ff ff       	call   100000b4 <ISA::doGameport()+0x20>	100000b4: R_386_PC32	Device::addChild(Device*)
100000b8:	6a 00                	push   0x0
100000ba:	8b 03                	mov    eax,DWORD PTR [ebx]
100000bc:	6a 00                	push   0x0
100000be:	6a 00                	push   0x0
100000c0:	53                   	push   ebx
100000c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
100000c4:	83 c4 28             	add    esp,0x28
100000c7:	5b                   	pop    ebx
100000c8:	c3                   	ret    
100000c9:	90                   	nop

100000ca <ISA::doFloppy()>:
100000ca:	f6 05 10 04 00 00 01 	test   BYTE PTR ds:0x410,0x1
100000d1:	74 38                	je     1000010b <ISA::doFloppy()+0x41>
100000d3:	53                   	push   ebx
100000d4:	83 ec 14             	sub    esp,0x14
100000d7:	68 b0 01 00 00       	push   0x1b0
100000dc:	e8 fc ff ff ff       	call   100000dd <ISA::doFloppy()+0x13>	100000dd: R_386_PC32	malloc
100000e1:	89 04 24             	mov    DWORD PTR [esp],eax
100000e4:	89 c3                	mov    ebx,eax
100000e6:	e8 fc ff ff ff       	call   100000e7 <ISA::doFloppy()+0x1d>	100000e7: R_386_PC32	Floppy::Floppy()
100000eb:	58                   	pop    eax
100000ec:	5a                   	pop    edx
100000ed:	53                   	push   ebx
100000ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000f2:	e8 fc ff ff ff       	call   100000f3 <ISA::doFloppy()+0x29>	100000f3: R_386_PC32	Device::addChild(Device*)
100000f7:	6a 00                	push   0x0
100000f9:	6a 00                	push   0x0
100000fb:	68 f0 03 00 00       	push   0x3f0
10000100:	53                   	push   ebx
10000101:	e8 fc ff ff ff       	call   10000102 <ISA::doFloppy()+0x38>	10000102: R_386_PC32	Floppy::_open(int, int, void*)
10000106:	83 c4 28             	add    esp,0x28
10000109:	5b                   	pop    ebx
1000010a:	c3                   	ret    
1000010b:	c3                   	ret    

1000010c <ISA::doATA()>:
1000010c:	c3                   	ret    
1000010d:	90                   	nop

1000010e <ISA::doPS2()>:
1000010e:	53                   	push   ebx
1000010f:	83 ec 14             	sub    esp,0x14
10000112:	68 00 00 00 00       	push   0x0	10000113: R_386_32	str_ps2
10000117:	e8 fc ff ff ff       	call   10000118 <ISA::doPS2()+0xa>	10000118: R_386_PC32	Dbg::kprintf(char const*, ...)
1000011c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	1000011f: R_386_32	str_ps2
10000123:	e8 fc ff ff ff       	call   10000124 <ISA::doPS2()+0x16>	10000124: R_386_PC32	Dbg::kprintf(char const*, ...)
10000128:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	1000012b: R_386_32	str_ps2
1000012f:	e8 fc ff ff ff       	call   10000130 <ISA::doPS2()+0x22>	10000130: R_386_PC32	Dbg::kprintf(char const*, ...)
10000134:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000137: R_386_32	str_ps2
1000013b:	e8 fc ff ff ff       	call   1000013c <ISA::doPS2()+0x2e>	1000013c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000140:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
10000147:	e8 fc ff ff ff       	call   10000148 <ISA::doPS2()+0x3a>	10000148: R_386_PC32	malloc
1000014c:	89 04 24             	mov    DWORD PTR [esp],eax
1000014f:	89 c3                	mov    ebx,eax
10000151:	e8 fc ff ff ff       	call   10000152 <ISA::doPS2()+0x44>	10000152: R_386_PC32	PS2::PS2()
10000156:	58                   	pop    eax
10000157:	5a                   	pop    edx
10000158:	53                   	push   ebx
10000159:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000015d:	e8 fc ff ff ff       	call   1000015e <ISA::doPS2()+0x50>	1000015e: R_386_PC32	Device::addChild(Device*)
10000162:	6a 00                	push   0x0
10000164:	8b 03                	mov    eax,DWORD PTR [ebx]
10000166:	6a 00                	push   0x0
10000168:	6a 00                	push   0x0
1000016a:	53                   	push   ebx
1000016b:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000016e:	83 c4 28             	add    esp,0x28
10000171:	5b                   	pop    ebx
10000172:	c3                   	ret    
10000173:	90                   	nop

10000174 <ISA::doRTC()>:
10000174:	c3                   	ret    
10000175:	90                   	nop

10000176 <ISA::detect()>:
10000176:	57                   	push   edi
10000177:	56                   	push   esi
10000178:	53                   	push   ebx
10000179:	83 ec 2c             	sub    esp,0x2c
1000017c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
10000180:	68 5c 01 00 00       	push   0x15c
10000185:	e8 fc ff ff ff       	call   10000186 <ISA::detect()+0x10>	10000186: R_386_PC32	malloc
1000018a:	89 04 24             	mov    DWORD PTR [esp],eax
1000018d:	89 c3                	mov    ebx,eax
1000018f:	e8 fc ff ff ff       	call   10000190 <ISA::detect()+0x1a>	10000190: R_386_PC32	DMA::DMA()
10000194:	59                   	pop    ecx
10000195:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000197: R_386_32	isaDMAController
1000019b:	5e                   	pop    esi
1000019c:	53                   	push   ebx
1000019d:	57                   	push   edi
1000019e:	e8 fc ff ff ff       	call   1000019f <ISA::detect()+0x29>	1000019f: R_386_PC32	Device::addChild(Device*)
100001a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100001a4: R_386_32	isaDMAController
100001a8:	8b 10                	mov    edx,DWORD PTR [eax]
100001aa:	6a 00                	push   0x0
100001ac:	6a 00                	push   0x0
100001ae:	6a 00                	push   0x0
100001b0:	50                   	push   eax
100001b1:	ff 52 08             	call   DWORD PTR [edx+0x8]
100001b4:	83 c4 20             	add    esp,0x20
100001b7:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100001b9: R_386_32	detectDone
100001be:	0f 85 eb 00 00 00    	jne    100002af <ISA::detect()+0x139>
100001c4:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100001c6: R_386_32	detectDone
100001cb:	31 db                	xor    ebx,ebx
100001cd:	52                   	push   edx
100001ce:	6a 01                	push   0x1
100001d0:	68 00 00 00 00       	push   0x0	100001d1: R_386_32	str_isadonesafe
100001d5:	68 00 00 00 00       	push   0x0	100001d6: R_386_32	str_isa
100001da:	e8 fc ff ff ff       	call   100001db <ISA::detect()+0x65>	100001db: R_386_PC32	Reg::readBoolWithDefault(char*, char*, bool)
100001df:	83 c4 10             	add    esp,0x10
100001e2:	50                   	push   eax
100001e3:	50                   	push   eax
100001e4:	68 00 00 00 00       	push   0x0	100001e5: R_386_32	str_devices
100001e9:	8d 74 24 0c          	lea    esi,[esp+0xc]
100001ed:	56                   	push   esi
100001ee:	e8 fc ff ff ff       	call   100001ef <ISA::detect()+0x79>	100001ef: R_386_PC32	strcpy
100001f3:	83 c4 10             	add    esp,0x10
100001f6:	85 db                	test   ebx,ebx
100001f8:	75 09                	jne    10000203 <ISA::detect()+0x8d>
100001fa:	50                   	push   eax
100001fb:	50                   	push   eax
100001fc:	68 00 00 00 00       	push   0x0	100001fd: R_386_32	str_spk
10000201:	eb 52                	jmp    10000255 <ISA::detect()+0xdf>
10000203:	83 fb 01             	cmp    ebx,0x1
10000206:	75 09                	jne    10000211 <ISA::detect()+0x9b>
10000208:	50                   	push   eax
10000209:	50                   	push   eax
1000020a:	68 00 00 00 00       	push   0x0	1000020b: R_386_32	str_rtc
1000020f:	eb 44                	jmp    10000255 <ISA::detect()+0xdf>
10000211:	83 fb 02             	cmp    ebx,0x2
10000214:	75 09                	jne    1000021f <ISA::detect()+0xa9>
10000216:	50                   	push   eax
10000217:	50                   	push   eax
10000218:	68 00 00 00 00       	push   0x0	10000219: R_386_32	str_ps2
1000021d:	eb 36                	jmp    10000255 <ISA::detect()+0xdf>
1000021f:	83 fb 03             	cmp    ebx,0x3
10000222:	75 09                	jne    1000022d <ISA::detect()+0xb7>
10000224:	50                   	push   eax
10000225:	50                   	push   eax
10000226:	68 00 00 00 00       	push   0x0	10000227: R_386_32	str_floppy
1000022b:	eb 28                	jmp    10000255 <ISA::detect()+0xdf>
1000022d:	83 fb 04             	cmp    ebx,0x4
10000230:	75 09                	jne    1000023b <ISA::detect()+0xc5>
10000232:	50                   	push   eax
10000233:	50                   	push   eax
10000234:	68 00 00 00 00       	push   0x0	10000235: R_386_32	str_sb16
10000239:	eb 1a                	jmp    10000255 <ISA::detect()+0xdf>
1000023b:	83 fb 05             	cmp    ebx,0x5
1000023e:	75 09                	jne    10000249 <ISA::detect()+0xd3>
10000240:	51                   	push   ecx
10000241:	51                   	push   ecx
10000242:	68 00 00 00 00       	push   0x0	10000243: R_386_32	str_isaata
10000247:	eb 0c                	jmp    10000255 <ISA::detect()+0xdf>
10000249:	83 fb 06             	cmp    ebx,0x6
1000024c:	75 10                	jne    1000025e <ISA::detect()+0xe8>
1000024e:	52                   	push   edx
1000024f:	52                   	push   edx
10000250:	68 00 00 00 00       	push   0x0	10000251: R_386_32	str_gp
10000255:	56                   	push   esi
10000256:	e8 fc ff ff ff       	call   10000257 <ISA::detect()+0xe1>	10000257: R_386_PC32	strcat
1000025b:	83 c4 10             	add    esp,0x10
1000025e:	50                   	push   eax
1000025f:	6a ff                	push   0xffffffff
10000261:	56                   	push   esi
10000262:	68 00 00 00 00       	push   0x0	10000263: R_386_32	str_isa
10000267:	e8 fc ff ff ff       	call   10000268 <ISA::detect()+0xf2>	10000268: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
1000026c:	83 c4 10             	add    esp,0x10
1000026f:	83 f8 fe             	cmp    eax,0xfffffffe
10000272:	74 31                	je     100002a5 <ISA::detect()+0x12f>
10000274:	83 fb 02             	cmp    ebx,0x2
10000277:	75 0b                	jne    10000284 <ISA::detect()+0x10e>
10000279:	83 ec 0c             	sub    esp,0xc
1000027c:	57                   	push   edi
1000027d:	e8 fc ff ff ff       	call   1000027e <ISA::detect()+0x108>	1000027e: R_386_PC32	ISA::doPS2()
10000282:	eb 1e                	jmp    100002a2 <ISA::detect()+0x12c>
10000284:	83 fb 03             	cmp    ebx,0x3
10000287:	75 0b                	jne    10000294 <ISA::detect()+0x11e>
10000289:	83 ec 0c             	sub    esp,0xc
1000028c:	57                   	push   edi
1000028d:	e8 fc ff ff ff       	call   1000028e <ISA::detect()+0x118>	1000028e: R_386_PC32	ISA::doFloppy()
10000292:	eb 0e                	jmp    100002a2 <ISA::detect()+0x12c>
10000294:	83 fb 06             	cmp    ebx,0x6
10000297:	75 0c                	jne    100002a5 <ISA::detect()+0x12f>
10000299:	83 ec 0c             	sub    esp,0xc
1000029c:	57                   	push   edi
1000029d:	e8 fc ff ff ff       	call   1000029e <ISA::detect()+0x128>	1000029e: R_386_PC32	ISA::doGameport()
100002a2:	83 c4 10             	add    esp,0x10
100002a5:	43                   	inc    ebx
100002a6:	83 fb 07             	cmp    ebx,0x7
100002a9:	0f 85 33 ff ff ff    	jne    100001e2 <ISA::detect()+0x6c>
100002af:	83 c4 20             	add    esp,0x20
100002b2:	5b                   	pop    ebx
100002b3:	5e                   	pop    esi
100002b4:	5f                   	pop    edi
100002b5:	c3                   	ret    

100002b6 <floppyMotorFunction(void*)>:
100002b6:	55                   	push   ebp
100002b7:	89 e5                	mov    ebp,esp
100002b9:	83 ec 18             	sub    esp,0x18
100002bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002bf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100002c2:	a1 00 00 00 00       	mov    eax,ds:0x0	100002c3: R_386_32	irqDisableCounter
100002c7:	48                   	dec    eax
100002c8:	a3 00 00 00 00       	mov    ds:0x0,eax	100002c9: R_386_32	irqDisableCounter
100002cd:	a1 00 00 00 00       	mov    eax,ds:0x0	100002ce: R_386_32	irqDisableCounter
100002d2:	85 c0                	test   eax,eax
100002d4:	75 01                	jne    100002d7 <floppyMotorFunction(void*)+0x21>
100002d6:	fb                   	sti    
100002d7:	83 ec 08             	sub    esp,0x8
100002da:	6a 00                	push   0x0
100002dc:	68 00 84 d7 17       	push   0x17d78400
100002e1:	e8 fc ff ff ff       	call   100002e2 <floppyMotorFunction(void*)+0x2c>	100002e2: R_386_PC32	nanoSleep(unsigned long long)
100002e6:	83 c4 10             	add    esp,0x10
100002e9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100002f0:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
100002f4:	7f e1                	jg     100002d7 <floppyMotorFunction(void*)+0x21>
100002f6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100002f9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100002fc:	83 c2 58             	add    edx,0x58
100002ff:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000303:	83 f8 02             	cmp    eax,0x2
10000306:	0f 85 a1 00 00 00    	jne    100003ad <floppyMotorFunction(void*)+0xf7>
1000030c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000030f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000312:	83 c2 5c             	add    edx,0x5c
10000315:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000319:	8d 88 70 fe ff ff    	lea    ecx,[eax-0x190]
1000031f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000322:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000325:	83 c2 5c             	add    edx,0x5c
10000328:	89 4c 90 0c          	mov    DWORD PTR [eax+edx*4+0xc],ecx
1000032c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000032f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000332:	83 c2 5c             	add    edx,0x5c
10000335:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000339:	85 c0                	test   eax,eax
1000033b:	7f 70                	jg     100003ad <floppyMotorFunction(void*)+0xf7>
1000033d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000340:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000343:	83 c2 58             	add    edx,0x58
10000346:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
1000034e:	fa                   	cli    
1000034f:	a1 00 00 00 00       	mov    eax,ds:0x0	10000350: R_386_32	irqDisableCounter
10000354:	40                   	inc    eax
10000355:	a3 00 00 00 00       	mov    ds:0x0,eax	10000356: R_386_32	irqDisableCounter
1000035a:	83 ec 08             	sub    esp,0x8
1000035d:	6a 02                	push   0x2
1000035f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000362:	e8 fc ff ff ff       	call   10000363 <floppyMotorFunction(void*)+0xad>	10000363: R_386_PC32	Floppy::readPort(FloppyReg)
10000367:	83 c4 10             	add    esp,0x10
1000036a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000036d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000370:	ba 10 00 00 00       	mov    edx,0x10
10000375:	88 c1                	mov    cl,al
10000377:	d3 e2                	shl    edx,cl
10000379:	89 d0                	mov    eax,edx
1000037b:	f7 d0                	not    eax
1000037d:	88 c2                	mov    dl,al
1000037f:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000382:	21 d0                	and    eax,edx
10000384:	0f b6 c0             	movzx  eax,al
10000387:	83 ec 04             	sub    esp,0x4
1000038a:	50                   	push   eax
1000038b:	6a 02                	push   0x2
1000038d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000390:	e8 fc ff ff ff       	call   10000391 <floppyMotorFunction(void*)+0xdb>	10000391: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000395:	83 c4 10             	add    esp,0x10
10000398:	a1 00 00 00 00       	mov    eax,ds:0x0	10000399: R_386_32	irqDisableCounter
1000039d:	48                   	dec    eax
1000039e:	a3 00 00 00 00       	mov    ds:0x0,eax	1000039f: R_386_32	irqDisableCounter
100003a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100003a4: R_386_32	irqDisableCounter
100003a8:	85 c0                	test   eax,eax
100003aa:	75 01                	jne    100003ad <floppyMotorFunction(void*)+0xf7>
100003ac:	fb                   	sti    
100003ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100003b0:	e9 3b ff ff ff       	jmp    100002f0 <floppyMotorFunction(void*)+0x3a>

100003b5 <floppyIRQHandler(regs*, void*)>:
100003b5:	55                   	push   ebp
100003b6:	89 e5                	mov    ebp,esp
100003b8:	83 ec 10             	sub    esp,0x10
100003bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100003be:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003c1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003c4:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
100003cb:	90                   	nop
100003cc:	c9                   	leave  
100003cd:	c3                   	ret    

100003ce <Floppy::Floppy()>:
100003ce:	55                   	push   ebp
100003cf:	89 e5                	mov    ebp,esp
100003d1:	83 ec 08             	sub    esp,0x8
100003d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003d7:	83 ec 08             	sub    esp,0x8
100003da:	68 9c 53 00 10       	push   0x1000539c	100003db: R_386_32	.text
100003df:	50                   	push   eax
100003e0:	e8 fc ff ff ff       	call   100003e1 <Floppy::Floppy()+0x13>	100003e1: R_386_PC32	HardDiskController::HardDiskController(char const*)
100003e5:	83 c4 10             	add    esp,0x10
100003e8:	ba 08 00 00 00       	mov    edx,0x8	100003e9: R_386_32	vtable for Floppy
100003ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003f0:	89 10                	mov    DWORD PTR [eax],edx
100003f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003f5:	66 c7 80 58 01 00 00 f0 03 	mov    WORD PTR [eax+0x158],0x3f0
100003fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000401:	c6 80 8c 01 00 00 01 	mov    BYTE PTR [eax+0x18c],0x1
10000408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000040b:	c6 80 8d 01 00 00 00 	mov    BYTE PTR [eax+0x18d],0x0
10000412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000415:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
1000041c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041f:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
10000426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000429:	c6 80 90 01 00 00 01 	mov    BYTE PTR [eax+0x190],0x1
10000430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000433:	c6 80 91 01 00 00 01 	mov    BYTE PTR [eax+0x191],0x1
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000444:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000447:	c7 80 94 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x194],0xffffffff
10000451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000454:	83 ec 0c             	sub    esp,0xc
10000457:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000045a:	6a 01                	push   0x1
1000045c:	68 00 00 00 00       	push   0x0	1000045d: R_386_32	floppyIRQHandler(regs*, void*)
10000461:	6a 06                	push   0x6
10000463:	50                   	push   eax
10000464:	e8 fc ff ff ff       	call   10000465 <Floppy::Floppy()+0x97>	10000465: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10000469:	83 c4 20             	add    esp,0x20
1000046c:	89 c2                	mov    edx,eax
1000046e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000471:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
10000477:	a1 00 00 00 00       	mov    eax,ds:0x0	10000478: R_386_32	kernelProcess
1000047c:	68 d2 00 00 00       	push   0xd2
10000481:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000484:	68 00 00 00 00       	push   0x0	10000485: R_386_32	floppyMotorFunction(void*)
10000489:	50                   	push   eax
1000048a:	e8 fc ff ff ff       	call   1000048b <Floppy::Floppy()+0xbd>	1000048b: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
1000048f:	83 c4 10             	add    esp,0x10
10000492:	89 c2                	mov    edx,eax
10000494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000497:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
1000049d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000049e: R_386_32	isaDMAController
100004a2:	83 ec 08             	sub    esp,0x8
100004a5:	6a 02                	push   0x2
100004a7:	50                   	push   eax
100004a8:	e8 fc ff ff ff       	call   100004a9 <Floppy::Floppy()+0xdb>	100004a9: R_386_PC32	DMA::tryLockChannel(int)
100004ad:	83 c4 10             	add    esp,0x10
100004b0:	89 c2                	mov    edx,eax
100004b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004b5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
100004bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004be:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
100004c4:	83 ec 08             	sub    esp,0x8
100004c7:	68 00 48 00 00       	push   0x4800
100004cc:	50                   	push   eax
100004cd:	e8 fc ff ff ff       	call   100004ce <Floppy::Floppy()+0x100>	100004ce: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
100004d2:	83 c4 10             	add    esp,0x10
100004d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004d8:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
100004de:	83 ec 0c             	sub    esp,0xc
100004e1:	50                   	push   eax
100004e2:	e8 fc ff ff ff       	call   100004e3 <Floppy::Floppy()+0x115>	100004e3: R_386_PC32	DMAChannel::getAddress()
100004e7:	83 c4 10             	add    esp,0x10
100004ea:	89 c2                	mov    edx,eax
100004ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004ef:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
100004f5:	90                   	nop
100004f6:	c9                   	leave  
100004f7:	c3                   	ret    

100004f8 <Floppy::wasFailure()>:
100004f8:	55                   	push   ebp
100004f9:	89 e5                	mov    ebp,esp
100004fb:	83 ec 10             	sub    esp,0x10
100004fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000501:	c6 80 8f 01 00 00 01 	mov    BYTE PTR [eax+0x18f],0x1
10000508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000050b:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
10000511:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000514:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000517:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
1000051e:	8a 45 ff             	mov    al,BYTE PTR [ebp-0x1]
10000521:	c9                   	leave  
10000522:	c3                   	ret    
10000523:	90                   	nop

10000524 <Floppy::writeCommand(unsigned char)>:
10000524:	55                   	push   ebp
10000525:	89 e5                	mov    ebp,esp
10000527:	83 ec 28             	sub    esp,0x28
1000052a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000052d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000533:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
10000539:	84 c0                	test   al,al
1000053b:	74 10                	je     1000054d <Floppy::writeCommand(unsigned char)+0x29>
1000053d:	83 ec 0c             	sub    esp,0xc
10000540:	68 b4 53 00 10       	push   0x100053b4	10000541: R_386_32	.text
10000545:	e8 fc ff ff ff       	call   10000546 <Floppy::writeCommand(unsigned char)+0x22>	10000546: R_386_PC32	Krnl::panic(char const*)
1000054a:	83 c4 10             	add    esp,0x10
1000054d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000550:	8a 80 8f 01 00 00    	mov    al,BYTE PTR [eax+0x18f]
10000556:	83 f0 01             	xor    eax,0x1
10000559:	84 c0                	test   al,al
1000055b:	74 10                	je     1000056d <Floppy::writeCommand(unsigned char)+0x49>
1000055d:	83 ec 0c             	sub    esp,0xc
10000560:	68 e4 53 00 10       	push   0x100053e4	10000561: R_386_32	.text
10000565:	e8 fc ff ff ff       	call   10000566 <Floppy::writeCommand(unsigned char)+0x42>	10000566: R_386_PC32	Krnl::panic(char const*)
1000056a:	83 c4 10             	add    esp,0x10
1000056d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000570:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
10000577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000057a:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000581:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000588:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
1000058c:	7f 53                	jg     100005e1 <Floppy::writeCommand(unsigned char)+0xbd>
1000058e:	83 ec 08             	sub    esp,0x8
10000591:	6a 00                	push   0x0
10000593:	68 80 96 98 00       	push   0x989680
10000598:	e8 fc ff ff ff       	call   10000599 <Floppy::writeCommand(unsigned char)+0x75>	10000599: R_386_PC32	nanoSleep(unsigned long long)
1000059d:	83 c4 10             	add    esp,0x10
100005a0:	83 ec 08             	sub    esp,0x8
100005a3:	6a 04                	push   0x4
100005a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005a8:	e8 fc ff ff ff       	call   100005a9 <Floppy::writeCommand(unsigned char)+0x85>	100005a9: R_386_PC32	Floppy::readPort(FloppyReg)
100005ad:	83 c4 10             	add    esp,0x10
100005b0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100005b3:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100005b6:	84 c0                	test   al,al
100005b8:	79 22                	jns    100005dc <Floppy::writeCommand(unsigned char)+0xb8>
100005ba:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100005be:	83 e0 40             	and    eax,0x40
100005c1:	85 c0                	test   eax,eax
100005c3:	75 17                	jne    100005dc <Floppy::writeCommand(unsigned char)+0xb8>
100005c5:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
100005c9:	83 ec 04             	sub    esp,0x4
100005cc:	50                   	push   eax
100005cd:	6a 05                	push   0x5
100005cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005d2:	e8 fc ff ff ff       	call   100005d3 <Floppy::writeCommand(unsigned char)+0xaf>	100005d3: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100005d7:	83 c4 10             	add    esp,0x10
100005da:	eb 0f                	jmp    100005eb <Floppy::writeCommand(unsigned char)+0xc7>
100005dc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100005df:	eb a7                	jmp    10000588 <Floppy::writeCommand(unsigned char)+0x64>
100005e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005e4:	c6 80 8e 01 00 00 01 	mov    BYTE PTR [eax+0x18e],0x1
100005eb:	c9                   	leave  
100005ec:	c3                   	ret    
100005ed:	90                   	nop

100005ee <Floppy::readData()>:
100005ee:	55                   	push   ebp
100005ef:	89 e5                	mov    ebp,esp
100005f1:	83 ec 18             	sub    esp,0x18
100005f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005f7:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
100005fd:	84 c0                	test   al,al
100005ff:	74 10                	je     10000611 <Floppy::readData()+0x23>
10000601:	83 ec 0c             	sub    esp,0xc
10000604:	68 b4 53 00 10       	push   0x100053b4	10000605: R_386_32	.text
10000609:	e8 fc ff ff ff       	call   1000060a <Floppy::readData()+0x1c>	1000060a: R_386_PC32	Krnl::panic(char const*)
1000060e:	83 c4 10             	add    esp,0x10
10000611:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000614:	8a 80 8f 01 00 00    	mov    al,BYTE PTR [eax+0x18f]
1000061a:	83 f0 01             	xor    eax,0x1
1000061d:	84 c0                	test   al,al
1000061f:	74 10                	je     10000631 <Floppy::readData()+0x43>
10000621:	83 ec 0c             	sub    esp,0xc
10000624:	68 e4 53 00 10       	push   0x100053e4	10000625: R_386_32	.text
10000629:	e8 fc ff ff ff       	call   1000062a <Floppy::readData()+0x3c>	1000062a: R_386_PC32	Krnl::panic(char const*)
1000062e:	83 c4 10             	add    esp,0x10
10000631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000634:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
1000063b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000063e:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000645:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000064c:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
10000650:	7f 4e                	jg     100006a0 <Floppy::readData()+0xb2>
10000652:	83 ec 08             	sub    esp,0x8
10000655:	6a 00                	push   0x0
10000657:	68 80 96 98 00       	push   0x989680
1000065c:	e8 fc ff ff ff       	call   1000065d <Floppy::readData()+0x6f>	1000065d: R_386_PC32	nanoSleep(unsigned long long)
10000661:	83 c4 10             	add    esp,0x10
10000664:	83 ec 08             	sub    esp,0x8
10000667:	6a 04                	push   0x4
10000669:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000066c:	e8 fc ff ff ff       	call   1000066d <Floppy::readData()+0x7f>	1000066d: R_386_PC32	Floppy::readPort(FloppyReg)
10000671:	83 c4 10             	add    esp,0x10
10000674:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000677:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000067a:	84 c0                	test   al,al
1000067c:	79 1d                	jns    1000069b <Floppy::readData()+0xad>
1000067e:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10000682:	83 e0 40             	and    eax,0x40
10000685:	85 c0                	test   eax,eax
10000687:	74 12                	je     1000069b <Floppy::readData()+0xad>
10000689:	83 ec 08             	sub    esp,0x8
1000068c:	6a 05                	push   0x5
1000068e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000691:	e8 fc ff ff ff       	call   10000692 <Floppy::readData()+0xa4>	10000692: R_386_PC32	Floppy::readPort(FloppyReg)
10000696:	83 c4 10             	add    esp,0x10
10000699:	eb 11                	jmp    100006ac <Floppy::readData()+0xbe>
1000069b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000069e:	eb ac                	jmp    1000064c <Floppy::readData()+0x5e>
100006a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006a3:	c6 80 8e 01 00 00 01 	mov    BYTE PTR [eax+0x18e],0x1
100006aa:	b0 00                	mov    al,0x0
100006ac:	c9                   	leave  
100006ad:	c3                   	ret    

100006ae <Floppy::readPort(FloppyReg)>:
100006ae:	55                   	push   ebp
100006af:	89 e5                	mov    ebp,esp
100006b1:	83 ec 10             	sub    esp,0x10
100006b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006b7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100006bd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100006c0:	01 d0                	add    eax,edx
100006c2:	0f b7 c0             	movzx  eax,ax
100006c5:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
100006c9:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
100006cd:	89 c2                	mov    edx,eax
100006cf:	ec                   	in     al,dx
100006d0:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
100006d3:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
100006d6:	90                   	nop
100006d7:	c9                   	leave  
100006d8:	c3                   	ret    
100006d9:	90                   	nop

100006da <Floppy::writePort(FloppyReg, unsigned char)>:
100006da:	55                   	push   ebp
100006db:	89 e5                	mov    ebp,esp
100006dd:	83 ec 14             	sub    esp,0x14
100006e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100006e3:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
100006e6:	0f b6 4d ec          	movzx  ecx,BYTE PTR [ebp-0x14]
100006ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006ed:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100006f3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100006f6:	01 d0                	add    eax,edx
100006f8:	0f b7 c0             	movzx  eax,ax
100006fb:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
100006ff:	88 4d fd             	mov    BYTE PTR [ebp-0x3],cl
10000702:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
10000705:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
10000709:	ee                   	out    dx,al
1000070a:	90                   	nop
1000070b:	c9                   	leave  
1000070c:	c3                   	ret    
1000070d:	90                   	nop

1000070e <Floppy::driveDetection()>:
1000070e:	55                   	push   ebp
1000070f:	89 e5                	mov    ebp,esp
10000711:	53                   	push   ebx
10000712:	83 ec 24             	sub    esp,0x24
10000715:	83 ec 0c             	sub    esp,0xc
10000718:	68 12 54 00 10       	push   0x10005412	10000719: R_386_32	.text
1000071d:	e8 fc ff ff ff       	call   1000071e <Floppy::driveDetection()+0x10>	1000071e: R_386_PC32	Dbg::kprintf(char const*, ...)
10000722:	83 c4 10             	add    esp,0x10
10000725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000728:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000072e:	66 3d f0 03          	cmp    ax,0x3f0
10000732:	0f 85 28 01 00 00    	jne    10000860 <Floppy::driveDetection()+0x152>
10000738:	a1 00 00 00 00       	mov    eax,ds:0x0	10000739: R_386_32	Krnl::computer
1000073d:	83 ec 08             	sub    esp,0x8
10000740:	6a 10                	push   0x10
10000742:	50                   	push   eax
10000743:	e8 fc ff ff ff       	call   10000744 <Floppy::driveDetection()+0x36>	10000744: R_386_PC32	Computer::readCMOS(unsigned char)
10000748:	83 c4 10             	add    esp,0x10
1000074b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000074e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000752:	c1 f8 04             	sar    eax,0x4
10000755:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000758:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000075c:	83 e0 0f             	and    eax,0xf
1000075f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000762:	83 ec 08             	sub    esp,0x8
10000765:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000768:	68 2c 54 00 10       	push   0x1000542c	10000769: R_386_32	.text
1000076d:	e8 fc ff ff ff       	call   1000076e <Floppy::driveDetection()+0x60>	1000076e: R_386_PC32	Dbg::kprintf(char const*, ...)
10000772:	83 c4 10             	add    esp,0x10
10000775:	83 ec 08             	sub    esp,0x8
10000778:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000077b:	68 40 54 00 10       	push   0x10005440	1000077c: R_386_32	.text
10000780:	e8 fc ff ff ff       	call   10000781 <Floppy::driveDetection()+0x73>	10000781: R_386_PC32	Dbg::kprintf(char const*, ...)
10000785:	83 c4 10             	add    esp,0x10
10000788:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000078c:	74 63                	je     100007f1 <Floppy::driveDetection()+0xe3>
1000078e:	c7 45 e0 74 01 00 00 	mov    DWORD PTR [ebp-0x20],0x174
10000795:	83 ec 0c             	sub    esp,0xc
10000798:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
1000079b:	e8 fc ff ff ff       	call   1000079c <Floppy::driveDetection()+0x8e>	1000079c: R_386_PC32	malloc
100007a0:	83 c4 10             	add    esp,0x10
100007a3:	89 c3                	mov    ebx,eax
100007a5:	83 ec 0c             	sub    esp,0xc
100007a8:	53                   	push   ebx
100007a9:	e8 fc ff ff ff       	call   100007aa <Floppy::driveDetection()+0x9c>	100007aa: R_386_PC32	FloppyDrive::FloppyDrive()
100007ae:	83 c4 10             	add    esp,0x10
100007b1:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
100007b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007b7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100007ba:	89 90 98 01 00 00    	mov    DWORD PTR [eax+0x198],edx
100007c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007c3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
100007c6:	89 90 a8 01 00 00    	mov    DWORD PTR [eax+0x1a8],edx
100007cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007cf:	83 ec 08             	sub    esp,0x8
100007d2:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007d5:	50                   	push   eax
100007d6:	e8 fc ff ff ff       	call   100007d7 <Floppy::driveDetection()+0xc9>	100007d7: R_386_PC32	Device::addChild(Device*)
100007db:	83 c4 10             	add    esp,0x10
100007de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100007e1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100007e4:	6a 00                	push   0x0
100007e6:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007e9:	e8 fc ff ff ff       	call   100007ea <Floppy::driveDetection()+0xdc>	100007ea: R_386_PC32	FloppyDrive::_open(int, int, void*)
100007ee:	83 c4 10             	add    esp,0x10
100007f1:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100007f5:	74 69                	je     10000860 <Floppy::driveDetection()+0x152>
100007f7:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100007fb:	74 63                	je     10000860 <Floppy::driveDetection()+0x152>
100007fd:	c7 45 dc 74 01 00 00 	mov    DWORD PTR [ebp-0x24],0x174
10000804:	83 ec 0c             	sub    esp,0xc
10000807:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000080a:	e8 fc ff ff ff       	call   1000080b <Floppy::driveDetection()+0xfd>	1000080b: R_386_PC32	malloc
1000080f:	83 c4 10             	add    esp,0x10
10000812:	89 c3                	mov    ebx,eax
10000814:	83 ec 0c             	sub    esp,0xc
10000817:	53                   	push   ebx
10000818:	e8 fc ff ff ff       	call   10000819 <Floppy::driveDetection()+0x10b>	10000819: R_386_PC32	FloppyDrive::FloppyDrive()
1000081d:	83 c4 10             	add    esp,0x10
10000820:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000826:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000829:	89 90 9c 01 00 00    	mov    DWORD PTR [eax+0x19c],edx
1000082f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000832:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10000835:	89 90 ac 01 00 00    	mov    DWORD PTR [eax+0x1ac],edx
1000083b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000083e:	83 ec 08             	sub    esp,0x8
10000841:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000844:	50                   	push   eax
10000845:	e8 fc ff ff ff       	call   10000846 <Floppy::driveDetection()+0x138>	10000846: R_386_PC32	Device::addChild(Device*)
1000084a:	83 c4 10             	add    esp,0x10
1000084d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000850:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000853:	6a 01                	push   0x1
10000855:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000858:	e8 fc ff ff ff       	call   10000859 <Floppy::driveDetection()+0x14b>	10000859: R_386_PC32	FloppyDrive::_open(int, int, void*)
1000085d:	83 c4 10             	add    esp,0x10
10000860:	90                   	nop
10000861:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000864:	c9                   	leave  
10000865:	c3                   	ret    

10000866 <Floppy::close(int, int, void*)>:
10000866:	b8 00 00 00 00       	mov    eax,0x0
1000086b:	c3                   	ret    

1000086c <Floppy::open(int, int, void*)>:
1000086c:	b8 00 00 00 00       	mov    eax,0x0
10000871:	c3                   	ret    

10000872 <Floppy::_open(int, int, void*)>:
10000872:	55                   	push   ebp
10000873:	89 e5                	mov    ebp,esp
10000875:	83 ec 18             	sub    esp,0x18
10000878:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000087b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000087e:	66 89 82 58 01 00 00 	mov    WORD PTR [edx+0x158],ax
10000885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000888:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000088e:	0f b6 c8             	movzx  ecx,al
10000891:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000894:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000089a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000089d:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100008a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100008ab:	0f b6 d0             	movzx  edx,al
100008ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008b1:	c6 44 90 06 06       	mov    BYTE PTR [eax+edx*4+0x6],0x6
100008b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100008bf:	8d 50 01             	lea    edx,[eax+0x1]
100008c2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100008c5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100008cb:	0f b6 d0             	movzx  edx,al
100008ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008d1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100008d5:	83 e1 3f             	and    ecx,0x3f
100008d8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100008dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100008e5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008e8:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
100008ee:	0f b6 ca             	movzx  ecx,dl
100008f1:	83 c0 07             	add    eax,0x7
100008f4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008f7:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100008fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000905:	0f b6 d0             	movzx  edx,al
10000908:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000090b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000913:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000919:	8d 50 01             	lea    edx,[eax+0x1]
1000091c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000091f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000925:	0f b6 d0             	movzx  edx,al
10000928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000092b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000092f:	83 e1 3f             	and    ecx,0x3f
10000932:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000936:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000093d:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
10000941:	7f 27                	jg     1000096a <Floppy::_open(int, int, void*)+0xf8>
10000943:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000946:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000949:	83 c2 68             	add    edx,0x68
1000094c:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
10000954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000957:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000095a:	83 c2 58             	add    edx,0x58
1000095d:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
10000965:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000968:	eb d3                	jmp    1000093d <Floppy::_open(int, int, void*)+0xcb>
1000096a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000096d:	e8 fc ff ff ff       	call   1000096e <Floppy::_open(int, int, void*)+0xfc>	1000096e: R_386_PC32	Floppy::wasFailure()
10000972:	83 c4 04             	add    esp,0x4
10000975:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000978:	c6 80 91 01 00 00 01 	mov    BYTE PTR [eax+0x191],0x1
1000097f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000982:	c6 80 8d 01 00 00 00 	mov    BYTE PTR [eax+0x18d],0x0
10000989:	83 ec 0c             	sub    esp,0xc
1000098c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000098f:	e8 fc ff ff ff       	call   10000990 <Floppy::_open(int, int, void*)+0x11e>	10000990: R_386_PC32	Floppy::reset()
10000994:	83 c4 10             	add    esp,0x10
10000997:	83 ec 0c             	sub    esp,0xc
1000099a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000099d:	e8 fc ff ff ff       	call   1000099e <Floppy::_open(int, int, void*)+0x12c>	1000099e: R_386_PC32	Floppy::driveDetection()
100009a2:	83 c4 10             	add    esp,0x10
100009a5:	b8 00 00 00 00       	mov    eax,0x0
100009aa:	c9                   	leave  
100009ab:	c3                   	ret    

100009ac <Floppy::senseInterrupt(int*, int*)>:
100009ac:	55                   	push   ebp
100009ad:	89 e5                	mov    ebp,esp
100009af:	83 ec 08             	sub    esp,0x8
100009b2:	83 ec 08             	sub    esp,0x8
100009b5:	6a 08                	push   0x8
100009b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009ba:	e8 fc ff ff ff       	call   100009bb <Floppy::senseInterrupt(int*, int*)+0xf>	100009bb: R_386_PC32	Floppy::writeCommand(unsigned char)
100009bf:	83 c4 10             	add    esp,0x10
100009c2:	83 ec 0c             	sub    esp,0xc
100009c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009c8:	e8 fc ff ff ff       	call   100009c9 <Floppy::senseInterrupt(int*, int*)+0x1d>	100009c9: R_386_PC32	Floppy::wasFailure()
100009cd:	83 c4 10             	add    esp,0x10
100009d0:	84 c0                	test   al,al
100009d2:	74 04                	je     100009d8 <Floppy::senseInterrupt(int*, int*)+0x2c>
100009d4:	b0 00                	mov    al,0x0
100009d6:	eb 5a                	jmp    10000a32 <Floppy::senseInterrupt(int*, int*)+0x86>
100009d8:	83 ec 0c             	sub    esp,0xc
100009db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009de:	e8 fc ff ff ff       	call   100009df <Floppy::senseInterrupt(int*, int*)+0x33>	100009df: R_386_PC32	Floppy::readData()
100009e3:	83 c4 10             	add    esp,0x10
100009e6:	0f b6 d0             	movzx  edx,al
100009e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100009ec:	89 10                	mov    DWORD PTR [eax],edx
100009ee:	83 ec 0c             	sub    esp,0xc
100009f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009f4:	e8 fc ff ff ff       	call   100009f5 <Floppy::senseInterrupt(int*, int*)+0x49>	100009f5: R_386_PC32	Floppy::wasFailure()
100009f9:	83 c4 10             	add    esp,0x10
100009fc:	84 c0                	test   al,al
100009fe:	74 04                	je     10000a04 <Floppy::senseInterrupt(int*, int*)+0x58>
10000a00:	b0 00                	mov    al,0x0
10000a02:	eb 2e                	jmp    10000a32 <Floppy::senseInterrupt(int*, int*)+0x86>
10000a04:	83 ec 0c             	sub    esp,0xc
10000a07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a0a:	e8 fc ff ff ff       	call   10000a0b <Floppy::senseInterrupt(int*, int*)+0x5f>	10000a0b: R_386_PC32	Floppy::readData()
10000a0f:	83 c4 10             	add    esp,0x10
10000a12:	0f b6 d0             	movzx  edx,al
10000a15:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000a18:	89 10                	mov    DWORD PTR [eax],edx
10000a1a:	83 ec 0c             	sub    esp,0xc
10000a1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a20:	e8 fc ff ff ff       	call   10000a21 <Floppy::senseInterrupt(int*, int*)+0x75>	10000a21: R_386_PC32	Floppy::wasFailure()
10000a25:	83 c4 10             	add    esp,0x10
10000a28:	84 c0                	test   al,al
10000a2a:	74 04                	je     10000a30 <Floppy::senseInterrupt(int*, int*)+0x84>
10000a2c:	b0 00                	mov    al,0x0
10000a2e:	eb 02                	jmp    10000a32 <Floppy::senseInterrupt(int*, int*)+0x86>
10000a30:	b0 01                	mov    al,0x1
10000a32:	c9                   	leave  
10000a33:	c3                   	ret    

10000a34 <Floppy::lock()>:
10000a34:	55                   	push   ebp
10000a35:	89 e5                	mov    ebp,esp
10000a37:	83 ec 08             	sub    esp,0x8
10000a3a:	83 ec 08             	sub    esp,0x8
10000a3d:	6a 14                	push   0x14
10000a3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a42:	e8 fc ff ff ff       	call   10000a43 <Floppy::lock()+0xf>	10000a43: R_386_PC32	Floppy::writeCommand(unsigned char)
10000a47:	83 c4 10             	add    esp,0x10
10000a4a:	83 ec 0c             	sub    esp,0xc
10000a4d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a50:	e8 fc ff ff ff       	call   10000a51 <Floppy::lock()+0x1d>	10000a51: R_386_PC32	Floppy::wasFailure()
10000a55:	83 c4 10             	add    esp,0x10
10000a58:	84 c0                	test   al,al
10000a5a:	74 04                	je     10000a60 <Floppy::lock()+0x2c>
10000a5c:	b0 00                	mov    al,0x0
10000a5e:	eb 26                	jmp    10000a86 <Floppy::lock()+0x52>
10000a60:	83 ec 0c             	sub    esp,0xc
10000a63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a66:	e8 fc ff ff ff       	call   10000a67 <Floppy::lock()+0x33>	10000a67: R_386_PC32	Floppy::readData()
10000a6b:	83 c4 10             	add    esp,0x10
10000a6e:	83 ec 0c             	sub    esp,0xc
10000a71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a74:	e8 fc ff ff ff       	call   10000a75 <Floppy::lock()+0x41>	10000a75: R_386_PC32	Floppy::wasFailure()
10000a79:	83 c4 10             	add    esp,0x10
10000a7c:	84 c0                	test   al,al
10000a7e:	74 04                	je     10000a84 <Floppy::lock()+0x50>
10000a80:	b0 00                	mov    al,0x0
10000a82:	eb 02                	jmp    10000a86 <Floppy::lock()+0x52>
10000a84:	b0 01                	mov    al,0x1
10000a86:	c9                   	leave  
10000a87:	c3                   	ret    

10000a88 <Floppy::waitIRQ(int)>:
10000a88:	55                   	push   ebp
10000a89:	89 e5                	mov    ebp,esp
10000a8b:	83 ec 18             	sub    esp,0x18
10000a8e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000a95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a98:	8a 80 68 01 00 00    	mov    al,BYTE PTR [eax+0x168]
10000a9e:	84 c0                	test   al,al
10000aa0:	75 21                	jne    10000ac3 <Floppy::waitIRQ(int)+0x3b>
10000aa2:	83 ec 08             	sub    esp,0x8
10000aa5:	6a 00                	push   0x0
10000aa7:	68 80 f0 fa 02       	push   0x2faf080
10000aac:	e8 fc ff ff ff       	call   10000aad <Floppy::waitIRQ(int)+0x25>	10000aad: R_386_PC32	nanoSleep(unsigned long long)
10000ab1:	83 c4 10             	add    esp,0x10
10000ab4:	83 45 f4 32          	add    DWORD PTR [ebp-0xc],0x32
10000ab8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000abb:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
10000abe:	7d 02                	jge    10000ac2 <Floppy::waitIRQ(int)+0x3a>
10000ac0:	eb d3                	jmp    10000a95 <Floppy::waitIRQ(int)+0xd>
10000ac2:	90                   	nop
10000ac3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ac6:	8a 80 68 01 00 00    	mov    al,BYTE PTR [eax+0x168]
10000acc:	c9                   	leave  
10000acd:	c3                   	ret    

10000ace <Floppy::reset()>:
10000ace:	55                   	push   ebp
10000acf:	89 e5                	mov    ebp,esp
10000ad1:	83 ec 28             	sub    esp,0x28
10000ad4:	83 ec 0c             	sub    esp,0xc
10000ad7:	68 54 54 00 10       	push   0x10005454	10000ad8: R_386_32	.text
10000adc:	e8 fc ff ff ff       	call   10000add <Floppy::reset()+0xf>	10000add: R_386_PC32	Dbg::kprintf(char const*, ...)
10000ae1:	83 c4 10             	add    esp,0x10
10000ae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ae7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10000aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000af1:	c7 80 94 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x194],0xffffffff
10000afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000afe:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000b05:	83 ec 08             	sub    esp,0x8
10000b08:	6a 02                	push   0x2
10000b0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b0d:	e8 fc ff ff ff       	call   10000b0e <Floppy::reset()+0x40>	10000b0e: R_386_PC32	Floppy::readPort(FloppyReg)
10000b12:	83 c4 10             	add    esp,0x10
10000b15:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000b18:	83 ec 04             	sub    esp,0x4
10000b1b:	6a 00                	push   0x0
10000b1d:	6a 02                	push   0x2
10000b1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b22:	e8 fc ff ff ff       	call   10000b23 <Floppy::reset()+0x55>	10000b23: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000b27:	83 c4 10             	add    esp,0x10
10000b2a:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000b2d:	83 c8 0c             	or     eax,0xc
10000b30:	0f b6 c0             	movzx  eax,al
10000b33:	83 ec 04             	sub    esp,0x4
10000b36:	50                   	push   eax
10000b37:	6a 02                	push   0x2
10000b39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b3c:	e8 fc ff ff ff       	call   10000b3d <Floppy::reset()+0x6f>	10000b3d: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000b41:	83 c4 10             	add    esp,0x10
10000b44:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
10000b48:	83 e0 08             	and    eax,0x8
10000b4b:	85 c0                	test   eax,eax
10000b4d:	74 3f                	je     10000b8e <Floppy::reset()+0xc0>
10000b4f:	83 ec 08             	sub    esp,0x8
10000b52:	68 90 01 00 00       	push   0x190
10000b57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b5a:	e8 fc ff ff ff       	call   10000b5b <Floppy::reset()+0x8d>	10000b5b: R_386_PC32	Floppy::waitIRQ(int)
10000b5f:	83 c4 10             	add    esp,0x10
10000b62:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10000b65:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
10000b68:	83 f0 01             	xor    eax,0x1
10000b6b:	84 c0                	test   al,al
10000b6d:	74 3e                	je     10000bad <Floppy::reset()+0xdf>
10000b6f:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000b72:	83 c8 0c             	or     eax,0xc
10000b75:	0f b6 c0             	movzx  eax,al
10000b78:	83 ec 04             	sub    esp,0x4
10000b7b:	50                   	push   eax
10000b7c:	6a 02                	push   0x2
10000b7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b81:	e8 fc ff ff ff       	call   10000b82 <Floppy::reset()+0xb4>	10000b82: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000b86:	83 c4 10             	add    esp,0x10
10000b89:	e9 56 ff ff ff       	jmp    10000ae4 <Floppy::reset()+0x16>
10000b8e:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000b91:	83 c8 0c             	or     eax,0xc
10000b94:	0f b6 c0             	movzx  eax,al
10000b97:	83 ec 04             	sub    esp,0x4
10000b9a:	50                   	push   eax
10000b9b:	6a 02                	push   0x2
10000b9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ba0:	e8 fc ff ff ff       	call   10000ba1 <Floppy::reset()+0xd3>	10000ba1: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000ba5:	83 c4 10             	add    esp,0x10
10000ba8:	e9 37 ff ff ff       	jmp    10000ae4 <Floppy::reset()+0x16>
10000bad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bb0:	8a 80 91 01 00 00    	mov    al,BYTE PTR [eax+0x191]
10000bb6:	84 c0                	test   al,al
10000bb8:	0f 84 8f 00 00 00    	je     10000c4d <Floppy::reset()+0x17f>
10000bbe:	83 ec 04             	sub    esp,0x4
10000bc1:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000bc4:	50                   	push   eax
10000bc5:	8d 45 e8             	lea    eax,[ebp-0x18]
10000bc8:	50                   	push   eax
10000bc9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bcc:	e8 fc ff ff ff       	call   10000bcd <Floppy::reset()+0xff>	10000bcd: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000bd1:	83 c4 10             	add    esp,0x10
10000bd4:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000bd7:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000bdb:	74 19                	je     10000bf6 <Floppy::reset()+0x128>
10000bdd:	83 ec 04             	sub    esp,0x4
10000be0:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000be3:	50                   	push   eax
10000be4:	8d 45 e8             	lea    eax,[ebp-0x18]
10000be7:	50                   	push   eax
10000be8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000beb:	e8 fc ff ff ff       	call   10000bec <Floppy::reset()+0x11e>	10000bec: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000bf0:	83 c4 10             	add    esp,0x10
10000bf3:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000bf6:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000bfa:	74 19                	je     10000c15 <Floppy::reset()+0x147>
10000bfc:	83 ec 04             	sub    esp,0x4
10000bff:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000c02:	50                   	push   eax
10000c03:	8d 45 e8             	lea    eax,[ebp-0x18]
10000c06:	50                   	push   eax
10000c07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c0a:	e8 fc ff ff ff       	call   10000c0b <Floppy::reset()+0x13d>	10000c0b: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000c0f:	83 c4 10             	add    esp,0x10
10000c12:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c15:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000c19:	74 19                	je     10000c34 <Floppy::reset()+0x166>
10000c1b:	83 ec 04             	sub    esp,0x4
10000c1e:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000c21:	50                   	push   eax
10000c22:	8d 45 e8             	lea    eax,[ebp-0x18]
10000c25:	50                   	push   eax
10000c26:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c29:	e8 fc ff ff ff       	call   10000c2a <Floppy::reset()+0x15c>	10000c2a: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000c2e:	83 c4 10             	add    esp,0x10
10000c31:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c34:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000c37:	83 f0 01             	xor    eax,0x1
10000c3a:	84 c0                	test   al,al
10000c3c:	74 0f                	je     10000c4d <Floppy::reset()+0x17f>
10000c3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c41:	c6 80 91 01 00 00 00 	mov    BYTE PTR [eax+0x191],0x0
10000c48:	e9 97 fe ff ff       	jmp    10000ae4 <Floppy::reset()+0x16>
10000c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c50:	8a 80 8c 01 00 00    	mov    al,BYTE PTR [eax+0x18c]
10000c56:	84 c0                	test   al,al
10000c58:	75 14                	jne    10000c6e <Floppy::reset()+0x1a0>
10000c5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c5d:	8a 80 8d 01 00 00    	mov    al,BYTE PTR [eax+0x18d]
10000c63:	83 f0 01             	xor    eax,0x1
10000c66:	84 c0                	test   al,al
10000c68:	0f 84 91 00 00 00    	je     10000cff <Floppy::reset()+0x231>
10000c6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c71:	8a 80 90 01 00 00    	mov    al,BYTE PTR [eax+0x190]
10000c77:	84 c0                	test   al,al
10000c79:	74 3c                	je     10000cb7 <Floppy::reset()+0x1e9>
10000c7b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000c82:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
10000c86:	7f 2f                	jg     10000cb7 <Floppy::reset()+0x1e9>
10000c88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c8b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000c8e:	83 c2 68             	add    edx,0x68
10000c91:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000c95:	85 c0                	test   eax,eax
10000c97:	74 19                	je     10000cb2 <Floppy::reset()+0x1e4>
10000c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c9c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000c9f:	83 c2 68             	add    edx,0x68
10000ca2:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000ca6:	83 ec 0c             	sub    esp,0xc
10000ca9:	50                   	push   eax
10000caa:	e8 fc ff ff ff       	call   10000cab <Floppy::reset()+0x1dd>	10000cab: R_386_PC32	FloppyDrive::floppyConfigure()
10000caf:	83 c4 10             	add    esp,0x10
10000cb2:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10000cb5:	eb cb                	jmp    10000c82 <Floppy::reset()+0x1b4>
10000cb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cba:	8a 80 8d 01 00 00    	mov    al,BYTE PTR [eax+0x18d]
10000cc0:	83 f0 01             	xor    eax,0x1
10000cc3:	84 c0                	test   al,al
10000cc5:	74 38                	je     10000cff <Floppy::reset()+0x231>
10000cc7:	83 ec 0c             	sub    esp,0xc
10000cca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ccd:	e8 fc ff ff ff       	call   10000cce <Floppy::reset()+0x200>	10000cce: R_386_PC32	Floppy::lock()
10000cd2:	83 c4 10             	add    esp,0x10
10000cd5:	83 f0 01             	xor    eax,0x1
10000cd8:	88 c2                	mov    dl,al
10000cda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cdd:	88 90 8c 01 00 00    	mov    BYTE PTR [eax+0x18c],dl
10000ce3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ce6:	c6 80 8d 01 00 00 01 	mov    BYTE PTR [eax+0x18d],0x1
10000ced:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cf0:	8a 80 8c 01 00 00    	mov    al,BYTE PTR [eax+0x18c]
10000cf6:	84 c0                	test   al,al
10000cf8:	74 05                	je     10000cff <Floppy::reset()+0x231>
10000cfa:	e9 e5 fd ff ff       	jmp    10000ae4 <Floppy::reset()+0x16>
10000cff:	90                   	nop
10000d00:	c9                   	leave  
10000d01:	c3                   	ret    

10000d02 <Floppy::dmaInit(bool)>:
10000d02:	55                   	push   ebp
10000d03:	89 e5                	mov    ebp,esp
10000d05:	83 ec 18             	sub    esp,0x18
10000d08:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000d0b:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10000d0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d11:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000d17:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
10000d1b:	74 07                	je     10000d24 <Floppy::dmaInit(bool)+0x22>
10000d1d:	ba 4a 00 00 00       	mov    edx,0x4a
10000d22:	eb 05                	jmp    10000d29 <Floppy::dmaInit(bool)+0x27>
10000d24:	ba 46 00 00 00       	mov    edx,0x46
10000d29:	83 ec 08             	sub    esp,0x8
10000d2c:	52                   	push   edx
10000d2d:	50                   	push   eax
10000d2e:	e8 fc ff ff ff       	call   10000d2f <Floppy::dmaInit(bool)+0x2d>	10000d2f: R_386_PC32	DMAChannel::setMode(unsigned char)
10000d33:	83 c4 10             	add    esp,0x10
10000d36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d39:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000d3f:	83 ec 0c             	sub    esp,0xc
10000d42:	50                   	push   eax
10000d43:	e8 fc ff ff ff       	call   10000d44 <Floppy::dmaInit(bool)+0x42>	10000d44: R_386_PC32	DMAChannel::start()
10000d48:	83 c4 10             	add    esp,0x10
10000d4b:	90                   	nop
10000d4c:	c9                   	leave  
10000d4d:	c3                   	ret    

10000d4e <Floppy::specify(int)>:
10000d4e:	55                   	push   ebp
10000d4f:	89 e5                	mov    ebp,esp
10000d51:	57                   	push   edi
10000d52:	56                   	push   esi
10000d53:	53                   	push   ebx
10000d54:	83 ec 3c             	sub    esp,0x3c
10000d57:	8d 45 c0             	lea    eax,[ebp-0x40]
10000d5a:	bb 80 54 00 10       	mov    ebx,0x10005480	10000d5b: R_386_32	.text
10000d5f:	ba 04 00 00 00       	mov    edx,0x4
10000d64:	89 c7                	mov    edi,eax
10000d66:	89 de                	mov    esi,ebx
10000d68:	89 d1                	mov    ecx,edx
10000d6a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d6f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000d72:	83 c2 64             	add    edx,0x64
10000d75:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10000d79:	89 d0                	mov    eax,edx
10000d7b:	c1 e0 02             	shl    eax,0x2
10000d7e:	01 d0                	add    eax,edx
10000d80:	c1 e0 02             	shl    eax,0x2
10000d83:	01 d0                	add    eax,edx
10000d85:	05 10 00 00 00       	add    eax,0x10	10000d86: R_386_32	floppyTable
10000d8a:	8a 00                	mov    al,BYTE PTR [eax]
10000d8c:	0f be c0             	movsx  eax,al
10000d8f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000d92:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10000d96:	75 10                	jne    10000da8 <Floppy::specify(int)+0x5a>
10000d98:	83 ec 0c             	sub    esp,0xc
10000d9b:	68 6a 54 00 10       	push   0x1000546a	10000d9c: R_386_32	.text
10000da0:	e8 fc ff ff ff       	call   10000da1 <Floppy::specify(int)+0x53>	10000da1: R_386_PC32	Krnl::panic(char const*)
10000da5:	83 c4 10             	add    esp,0x10
10000da8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000dab:	8b 44 85 c0          	mov    eax,DWORD PTR [ebp+eax*4-0x40]
10000daf:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000db2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000db5:	89 c2                	mov    edx,eax
10000db7:	c1 e0 03             	shl    eax,0x3
10000dba:	89 d1                	mov    ecx,edx
10000dbc:	29 c1                	sub    ecx,eax
10000dbe:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000dc3:	f7 e9                	imul   ecx
10000dc5:	c1 fa 11             	sar    edx,0x11
10000dc8:	89 c8                	mov    eax,ecx
10000dca:	c1 f8 1f             	sar    eax,0x1f
10000dcd:	29 c2                	sub    edx,eax
10000dcf:	89 d0                	mov    eax,edx
10000dd1:	83 c0 10             	add    eax,0x10
10000dd4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000dd7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10000dda:	89 d0                	mov    eax,edx
10000ddc:	01 c0                	add    eax,eax
10000dde:	01 d0                	add    eax,edx
10000de0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10000de7:	01 d0                	add    eax,edx
10000de9:	01 c0                	add    eax,eax
10000deb:	89 c1                	mov    ecx,eax
10000ded:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000df2:	f7 e9                	imul   ecx
10000df4:	c1 fa 12             	sar    edx,0x12
10000df7:	89 c8                	mov    eax,ecx
10000df9:	c1 f8 1f             	sar    eax,0x1f
10000dfc:	29 c2                	sub    edx,eax
10000dfe:	89 d0                	mov    eax,edx
10000e00:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000e03:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10000e0a:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10000e11:	83 ec 08             	sub    esp,0x8
10000e14:	6a 03                	push   0x3
10000e16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e19:	e8 fc ff ff ff       	call   10000e1a <Floppy::specify(int)+0xcc>	10000e1a: R_386_PC32	Floppy::writeCommand(unsigned char)
10000e1e:	83 c4 10             	add    esp,0x10
10000e21:	83 ec 0c             	sub    esp,0xc
10000e24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e27:	e8 fc ff ff ff       	call   10000e28 <Floppy::specify(int)+0xda>	10000e28: R_386_PC32	Floppy::wasFailure()
10000e2c:	83 c4 10             	add    esp,0x10
10000e2f:	84 c0                	test   al,al
10000e31:	74 04                	je     10000e37 <Floppy::specify(int)+0xe9>
10000e33:	b0 00                	mov    al,0x0
10000e35:	eb 6b                	jmp    10000ea2 <Floppy::specify(int)+0x154>
10000e37:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e3a:	c1 e0 04             	shl    eax,0x4
10000e3d:	88 c2                	mov    dl,al
10000e3f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000e42:	09 d0                	or     eax,edx
10000e44:	0f b6 c0             	movzx  eax,al
10000e47:	83 ec 08             	sub    esp,0x8
10000e4a:	50                   	push   eax
10000e4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e4e:	e8 fc ff ff ff       	call   10000e4f <Floppy::specify(int)+0x101>	10000e4f: R_386_PC32	Floppy::writeCommand(unsigned char)
10000e53:	83 c4 10             	add    esp,0x10
10000e56:	83 ec 0c             	sub    esp,0xc
10000e59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e5c:	e8 fc ff ff ff       	call   10000e5d <Floppy::specify(int)+0x10f>	10000e5d: R_386_PC32	Floppy::wasFailure()
10000e61:	83 c4 10             	add    esp,0x10
10000e64:	84 c0                	test   al,al
10000e66:	74 04                	je     10000e6c <Floppy::specify(int)+0x11e>
10000e68:	b0 00                	mov    al,0x0
10000e6a:	eb 36                	jmp    10000ea2 <Floppy::specify(int)+0x154>
10000e6c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000e6f:	01 c0                	add    eax,eax
10000e71:	88 c2                	mov    dl,al
10000e73:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000e76:	09 d0                	or     eax,edx
10000e78:	0f b6 c0             	movzx  eax,al
10000e7b:	83 ec 08             	sub    esp,0x8
10000e7e:	50                   	push   eax
10000e7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e82:	e8 fc ff ff ff       	call   10000e83 <Floppy::specify(int)+0x135>	10000e83: R_386_PC32	Floppy::writeCommand(unsigned char)
10000e87:	83 c4 10             	add    esp,0x10
10000e8a:	83 ec 0c             	sub    esp,0xc
10000e8d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e90:	e8 fc ff ff ff       	call   10000e91 <Floppy::specify(int)+0x143>	10000e91: R_386_PC32	Floppy::wasFailure()
10000e95:	83 c4 10             	add    esp,0x10
10000e98:	84 c0                	test   al,al
10000e9a:	74 04                	je     10000ea0 <Floppy::specify(int)+0x152>
10000e9c:	b0 00                	mov    al,0x0
10000e9e:	eb 02                	jmp    10000ea2 <Floppy::specify(int)+0x154>
10000ea0:	b0 01                	mov    al,0x1
10000ea2:	8d 65 f4             	lea    esp,[ebp-0xc]
10000ea5:	5b                   	pop    ebx
10000ea6:	5e                   	pop    esi
10000ea7:	5f                   	pop    edi
10000ea8:	5d                   	pop    ebp
10000ea9:	c3                   	ret    

10000eaa <Floppy::select(int, bool)>:
10000eaa:	55                   	push   ebp
10000eab:	89 e5                	mov    ebp,esp
10000ead:	83 ec 28             	sub    esp,0x28
10000eb0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000eb3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000eb9:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000ebf:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000ec2:	75 27                	jne    10000eeb <Floppy::select(int, bool)+0x41>
10000ec4:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
10000ec7:	83 f0 01             	xor    eax,0x1
10000eca:	84 c0                	test   al,al
10000ecc:	74 1d                	je     10000eeb <Floppy::select(int, bool)+0x41>
10000ece:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ed1:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000ed7:	83 f8 ff             	cmp    eax,0xffffffff
10000eda:	74 0f                	je     10000eeb <Floppy::select(int, bool)+0x41>
10000edc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000edf:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000ee6:	e9 36 02 00 00       	jmp    10001121 <Floppy::select(int, bool)+0x277>
10000eeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000eee:	8a 80 92 01 00 00    	mov    al,BYTE PTR [eax+0x192]
10000ef4:	83 f0 01             	xor    eax,0x1
10000ef7:	84 c0                	test   al,al
10000ef9:	75 12                	jne    10000f0d <Floppy::select(int, bool)+0x63>
10000efb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000efe:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000f04:	83 f8 ff             	cmp    eax,0xffffffff
10000f07:	0f 85 14 02 00 00    	jne    10001121 <Floppy::select(int, bool)+0x277>
10000f0d:	83 ec 08             	sub    esp,0x8
10000f10:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000f13:	68 90 54 00 10       	push   0x10005490	10000f14: R_386_32	.text
10000f18:	e8 fc ff ff ff       	call   10000f19 <Floppy::select(int, bool)+0x6f>	10000f19: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f1d:	83 c4 10             	add    esp,0x10
10000f20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f23:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000f29:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000f2c:	0f 84 b7 01 00 00    	je     100010e9 <Floppy::select(int, bool)+0x23f>
10000f32:	83 ec 0c             	sub    esp,0xc
10000f35:	68 a0 54 00 10       	push   0x100054a0	10000f36: R_386_32	.text
10000f3a:	e8 fc ff ff ff       	call   10000f3b <Floppy::select(int, bool)+0x91>	10000f3b: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f3f:	83 c4 10             	add    esp,0x10
10000f42:	fa                   	cli    
10000f43:	a1 00 00 00 00       	mov    eax,ds:0x0	10000f44: R_386_32	irqDisableCounter
10000f48:	40                   	inc    eax
10000f49:	a3 00 00 00 00       	mov    ds:0x0,eax	10000f4a: R_386_32	irqDisableCounter
10000f4e:	83 ec 0c             	sub    esp,0xc
10000f51:	68 ad 54 00 10       	push   0x100054ad	10000f52: R_386_32	.text
10000f56:	e8 fc ff ff ff       	call   10000f57 <Floppy::select(int, bool)+0xad>	10000f57: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f5b:	83 c4 10             	add    esp,0x10
10000f5e:	83 ec 08             	sub    esp,0x8
10000f61:	6a 02                	push   0x2
10000f63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f66:	e8 fc ff ff ff       	call   10000f67 <Floppy::select(int, bool)+0xbd>	10000f67: R_386_PC32	Floppy::readPort(FloppyReg)
10000f6b:	83 c4 10             	add    esp,0x10
10000f6e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000f71:	80 65 f7 fc          	and    BYTE PTR [ebp-0x9],0xfc
10000f75:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000f78:	88 c2                	mov    dl,al
10000f7a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000f7d:	09 d0                	or     eax,edx
10000f7f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000f82:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000f86:	83 ec 04             	sub    esp,0x4
10000f89:	50                   	push   eax
10000f8a:	6a 02                	push   0x2
10000f8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f8f:	e8 fc ff ff ff       	call   10000f90 <Floppy::select(int, bool)+0xe6>	10000f90: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000f94:	83 c4 10             	add    esp,0x10
10000f97:	83 ec 08             	sub    esp,0x8
10000f9a:	6a 00                	push   0x0
10000f9c:	68 00 b4 c4 04       	push   0x4c4b400
10000fa1:	e8 fc ff ff ff       	call   10000fa2 <Floppy::select(int, bool)+0xf8>	10000fa2: R_386_PC32	nanoSleep(unsigned long long)
10000fa6:	83 c4 10             	add    esp,0x10
10000fa9:	83 ec 0c             	sub    esp,0xc
10000fac:	68 ba 54 00 10       	push   0x100054ba	10000fad: R_386_32	.text
10000fb1:	e8 fc ff ff ff       	call   10000fb2 <Floppy::select(int, bool)+0x108>	10000fb2: R_386_PC32	Dbg::kprintf(char const*, ...)
10000fb6:	83 c4 10             	add    esp,0x10
10000fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fbc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000fbf:	83 c2 64             	add    edx,0x64
10000fc2:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10000fc6:	89 d0                	mov    eax,edx
10000fc8:	c1 e0 02             	shl    eax,0x2
10000fcb:	01 d0                	add    eax,edx
10000fcd:	c1 e0 02             	shl    eax,0x2
10000fd0:	01 d0                	add    eax,edx
10000fd2:	05 10 00 00 00       	add    eax,0x10	10000fd3: R_386_32	floppyTable
10000fd7:	8a 00                	mov    al,BYTE PTR [eax]
10000fd9:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
10000fdc:	80 7d f6 ff          	cmp    BYTE PTR [ebp-0xa],0xff
10000fe0:	75 10                	jne    10000ff2 <Floppy::select(int, bool)+0x148>
10000fe2:	83 ec 0c             	sub    esp,0xc
10000fe5:	68 c8 54 00 10       	push   0x100054c8	10000fe6: R_386_32	.text
10000fea:	e8 fc ff ff ff       	call   10000feb <Floppy::select(int, bool)+0x141>	10000feb: R_386_PC32	Krnl::panic(char const*)
10000fef:	83 c4 10             	add    esp,0x10
10000ff2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
10000ff5:	0f b6 c0             	movzx  eax,al
10000ff8:	83 ec 04             	sub    esp,0x4
10000ffb:	50                   	push   eax
10000ffc:	6a 07                	push   0x7
10000ffe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001001:	e8 fc ff ff ff       	call   10001002 <Floppy::select(int, bool)+0x158>	10001002: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10001006:	83 c4 10             	add    esp,0x10
10001009:	a1 00 00 00 00       	mov    eax,ds:0x0	1000100a: R_386_32	irqDisableCounter
1000100e:	48                   	dec    eax
1000100f:	a3 00 00 00 00       	mov    ds:0x0,eax	10001010: R_386_32	irqDisableCounter
10001014:	a1 00 00 00 00       	mov    eax,ds:0x0	10001015: R_386_32	irqDisableCounter
10001019:	85 c0                	test   eax,eax
1000101b:	75 01                	jne    1000101e <Floppy::select(int, bool)+0x174>
1000101d:	fb                   	sti    
1000101e:	83 ec 0c             	sub    esp,0xc
10001021:	68 f7 54 00 10       	push   0x100054f7	10001022: R_386_32	.text
10001026:	e8 fc ff ff ff       	call   10001027 <Floppy::select(int, bool)+0x17d>	10001027: R_386_PC32	Dbg::kprintf(char const*, ...)
1000102b:	83 c4 10             	add    esp,0x10
1000102e:	83 ec 08             	sub    esp,0x8
10001031:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001034:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001037:	e8 fc ff ff ff       	call   10001038 <Floppy::select(int, bool)+0x18e>	10001038: R_386_PC32	Floppy::specify(int)
1000103c:	83 c4 10             	add    esp,0x10
1000103f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10001042:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10001045:	83 f0 01             	xor    eax,0x1
10001048:	84 c0                	test   al,al
1000104a:	74 25                	je     10001071 <Floppy::select(int, bool)+0x1c7>
1000104c:	83 ec 0c             	sub    esp,0xc
1000104f:	68 04 55 00 10       	push   0x10005504	10001050: R_386_32	.text
10001054:	e8 fc ff ff ff       	call   10001055 <Floppy::select(int, bool)+0x1ab>	10001055: R_386_PC32	Dbg::kprintf(char const*, ...)
10001059:	83 c4 10             	add    esp,0x10
1000105c:	83 ec 0c             	sub    esp,0xc
1000105f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001062:	e8 fc ff ff ff       	call   10001063 <Floppy::select(int, bool)+0x1b9>	10001063: R_386_PC32	Floppy::reset()
10001067:	83 c4 10             	add    esp,0x10
1000106a:	b0 00                	mov    al,0x0
1000106c:	e9 d2 00 00 00       	jmp    10001143 <Floppy::select(int, bool)+0x299>
10001071:	83 ec 0c             	sub    esp,0xc
10001074:	68 15 55 00 10       	push   0x10005515	10001075: R_386_32	.text
10001079:	e8 fc ff ff ff       	call   1000107a <Floppy::select(int, bool)+0x1d0>	1000107a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000107e:	83 c4 10             	add    esp,0x10
10001081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001084:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001087:	83 c2 68             	add    edx,0x68
1000108a:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
1000108e:	83 ec 0c             	sub    esp,0xc
10001091:	50                   	push   eax
10001092:	e8 fc ff ff ff       	call   10001093 <Floppy::select(int, bool)+0x1e9>	10001093: R_386_PC32	FloppyDrive::calibrate()
10001097:	83 c4 10             	add    esp,0x10
1000109a:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
1000109d:	83 ec 0c             	sub    esp,0xc
100010a0:	68 22 55 00 10       	push   0x10005522	100010a1: R_386_32	.text
100010a5:	e8 fc ff ff ff       	call   100010a6 <Floppy::select(int, bool)+0x1fc>	100010a6: R_386_PC32	Dbg::kprintf(char const*, ...)
100010aa:	83 c4 10             	add    esp,0x10
100010ad:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100010b0:	83 f0 01             	xor    eax,0x1
100010b3:	84 c0                	test   al,al
100010b5:	74 22                	je     100010d9 <Floppy::select(int, bool)+0x22f>
100010b7:	83 ec 0c             	sub    esp,0xc
100010ba:	68 30 55 00 10       	push   0x10005530	100010bb: R_386_32	.text
100010bf:	e8 fc ff ff ff       	call   100010c0 <Floppy::select(int, bool)+0x216>	100010c0: R_386_PC32	Dbg::kprintf(char const*, ...)
100010c4:	83 c4 10             	add    esp,0x10
100010c7:	83 ec 0c             	sub    esp,0xc
100010ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100010cd:	e8 fc ff ff ff       	call   100010ce <Floppy::select(int, bool)+0x224>	100010ce: R_386_PC32	Floppy::reset()
100010d2:	83 c4 10             	add    esp,0x10
100010d5:	b0 00                	mov    al,0x0
100010d7:	eb 6a                	jmp    10001143 <Floppy::select(int, bool)+0x299>
100010d9:	83 ec 0c             	sub    esp,0xc
100010dc:	68 42 55 00 10       	push   0x10005542	100010dd: R_386_32	.text
100010e1:	e8 fc ff ff ff       	call   100010e2 <Floppy::select(int, bool)+0x238>	100010e2: R_386_PC32	Dbg::kprintf(char const*, ...)
100010e6:	83 c4 10             	add    esp,0x10
100010e9:	83 ec 0c             	sub    esp,0xc
100010ec:	68 4f 55 00 10       	push   0x1000554f	100010ed: R_386_32	.text
100010f1:	e8 fc ff ff ff       	call   100010f2 <Floppy::select(int, bool)+0x248>	100010f2: R_386_PC32	Dbg::kprintf(char const*, ...)
100010f6:	83 c4 10             	add    esp,0x10
100010f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010fc:	8a 55 e4             	mov    dl,BYTE PTR [ebp-0x1c]
100010ff:	88 90 92 01 00 00    	mov    BYTE PTR [eax+0x192],dl
10001105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001108:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000110b:	89 90 94 01 00 00    	mov    DWORD PTR [eax+0x194],edx
10001111:	83 ec 0c             	sub    esp,0xc
10001114:	68 5c 55 00 10       	push   0x1000555c	10001115: R_386_32	.text
10001119:	e8 fc ff ff ff       	call   1000111a <Floppy::select(int, bool)+0x270>	1000111a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000111e:	83 c4 10             	add    esp,0x10
10001121:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001124:	8a 80 92 01 00 00    	mov    al,BYTE PTR [eax+0x192]
1000112a:	84 c0                	test   al,al
1000112c:	74 12                	je     10001140 <Floppy::select(int, bool)+0x296>
1000112e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001131:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10001137:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
1000113a:	75 04                	jne    10001140 <Floppy::select(int, bool)+0x296>
1000113c:	b0 01                	mov    al,0x1
1000113e:	eb 02                	jmp    10001142 <Floppy::select(int, bool)+0x298>
10001140:	b0 00                	mov    al,0x0
10001142:	90                   	nop
10001143:	c9                   	leave  
10001144:	c3                   	ret    
10001145:	90                   	nop

10001146 <Floppy::motor(int, bool)>:
10001146:	55                   	push   ebp
10001147:	89 e5                	mov    ebp,esp
10001149:	53                   	push   ebx
1000114a:	83 ec 24             	sub    esp,0x24
1000114d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001150:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10001153:	83 ec 0c             	sub    esp,0xc
10001156:	68 69 55 00 10       	push   0x10005569	10001157: R_386_32	.text
1000115b:	e8 fc ff ff ff       	call   1000115c <Floppy::motor(int, bool)+0x16>	1000115c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001160:	83 c4 10             	add    esp,0x10
10001163:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10001167:	83 ec 04             	sub    esp,0x4
1000116a:	50                   	push   eax
1000116b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000116e:	68 78 55 00 10       	push   0x10005578	1000116f: R_386_32	.text
10001173:	e8 fc ff ff ff       	call   10001174 <Floppy::motor(int, bool)+0x2e>	10001174: R_386_PC32	Dbg::kprintf(char const*, ...)
10001178:	83 c4 10             	add    esp,0x10
1000117b:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
1000117f:	0f 84 7f 01 00 00    	je     10001304 <Floppy::motor(int, bool)+0x1be>
10001185:	83 ec 0c             	sub    esp,0xc
10001188:	68 8e 55 00 10       	push   0x1000558e	10001189: R_386_32	.text
1000118d:	e8 fc ff ff ff       	call   1000118e <Floppy::motor(int, bool)+0x48>	1000118e: R_386_PC32	Dbg::kprintf(char const*, ...)
10001192:	83 c4 10             	add    esp,0x10
10001195:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001198:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000119b:	83 c2 58             	add    edx,0x58
1000119e:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100011a2:	85 c0                	test   eax,eax
100011a4:	0f 85 25 01 00 00    	jne    100012cf <Floppy::motor(int, bool)+0x189>
100011aa:	83 ec 0c             	sub    esp,0xc
100011ad:	68 96 55 00 10       	push   0x10005596	100011ae: R_386_32	.text
100011b2:	e8 fc ff ff ff       	call   100011b3 <Floppy::motor(int, bool)+0x6d>	100011b3: R_386_PC32	Dbg::kprintf(char const*, ...)
100011b7:	83 c4 10             	add    esp,0x10
100011ba:	fa                   	cli    
100011bb:	a1 00 00 00 00       	mov    eax,ds:0x0	100011bc: R_386_32	irqDisableCounter
100011c0:	40                   	inc    eax
100011c1:	a3 00 00 00 00       	mov    ds:0x0,eax	100011c2: R_386_32	irqDisableCounter
100011c6:	83 ec 08             	sub    esp,0x8
100011c9:	6a 02                	push   0x2
100011cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011ce:	e8 fc ff ff ff       	call   100011cf <Floppy::motor(int, bool)+0x89>	100011cf: R_386_PC32	Floppy::readPort(FloppyReg)
100011d3:	83 c4 10             	add    esp,0x10
100011d6:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100011d9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100011dd:	83 ec 08             	sub    esp,0x8
100011e0:	50                   	push   eax
100011e1:	68 ab 55 00 10       	push   0x100055ab	100011e2: R_386_32	.text
100011e6:	e8 fc ff ff ff       	call   100011e7 <Floppy::motor(int, bool)+0xa1>	100011e7: R_386_PC32	Dbg::kprintf(char const*, ...)
100011eb:	83 c4 10             	add    esp,0x10
100011ee:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
100011f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100011f5:	bb 10 00 00 00       	mov    ebx,0x10
100011fa:	88 c1                	mov    cl,al
100011fc:	d3 e3                	shl    ebx,cl
100011fe:	89 d8                	mov    eax,ebx
10001200:	09 d0                	or     eax,edx
10001202:	83 ec 08             	sub    esp,0x8
10001205:	50                   	push   eax
10001206:	68 b9 55 00 10       	push   0x100055b9	10001207: R_386_32	.text
1000120b:	e8 fc ff ff ff       	call   1000120c <Floppy::motor(int, bool)+0xc6>	1000120c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001210:	83 c4 10             	add    esp,0x10
10001213:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001216:	ba 10 00 00 00       	mov    edx,0x10
1000121b:	88 c1                	mov    cl,al
1000121d:	d3 e2                	shl    edx,cl
1000121f:	89 d0                	mov    eax,edx
10001221:	88 c2                	mov    dl,al
10001223:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10001226:	09 d0                	or     eax,edx
10001228:	0f b6 c0             	movzx  eax,al
1000122b:	83 ec 04             	sub    esp,0x4
1000122e:	50                   	push   eax
1000122f:	6a 02                	push   0x2
10001231:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001234:	e8 fc ff ff ff       	call   10001235 <Floppy::motor(int, bool)+0xef>	10001235: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10001239:	83 c4 10             	add    esp,0x10
1000123c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000123d: R_386_32	irqDisableCounter
10001241:	48                   	dec    eax
10001242:	a3 00 00 00 00       	mov    ds:0x0,eax	10001243: R_386_32	irqDisableCounter
10001247:	a1 00 00 00 00       	mov    eax,ds:0x0	10001248: R_386_32	irqDisableCounter
1000124c:	85 c0                	test   eax,eax
1000124e:	75 01                	jne    10001251 <Floppy::motor(int, bool)+0x10b>
10001250:	fb                   	sti    
10001251:	83 ec 0c             	sub    esp,0xc
10001254:	68 c7 55 00 10       	push   0x100055c7	10001255: R_386_32	.text
10001259:	e8 fc ff ff ff       	call   1000125a <Floppy::motor(int, bool)+0x114>	1000125a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000125e:	83 c4 10             	add    esp,0x10
10001261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001264:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001267:	83 c2 64             	add    edx,0x64
1000126a:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
1000126e:	83 f8 04             	cmp    eax,0x4
10001271:	75 14                	jne    10001287 <Floppy::motor(int, bool)+0x141>
10001273:	83 ec 08             	sub    esp,0x8
10001276:	6a 00                	push   0x0
10001278:	68 00 a3 e1 11       	push   0x11e1a300
1000127d:	e8 fc ff ff ff       	call   1000127e <Floppy::motor(int, bool)+0x138>	1000127e: R_386_PC32	nanoSleep(unsigned long long)
10001282:	83 c4 10             	add    esp,0x10
10001285:	eb 12                	jmp    10001299 <Floppy::motor(int, bool)+0x153>
10001287:	83 ec 08             	sub    esp,0x8
1000128a:	6a 00                	push   0x0
1000128c:	68 00 65 cd 1d       	push   0x1dcd6500
10001291:	e8 fc ff ff ff       	call   10001292 <Floppy::motor(int, bool)+0x14c>	10001292: R_386_PC32	nanoSleep(unsigned long long)
10001296:	83 c4 10             	add    esp,0x10
10001299:	83 ec 0c             	sub    esp,0xc
1000129c:	68 d5 55 00 10       	push   0x100055d5	1000129d: R_386_32	.text
100012a1:	e8 fc ff ff ff       	call   100012a2 <Floppy::motor(int, bool)+0x15c>	100012a2: R_386_PC32	Dbg::kprintf(char const*, ...)
100012a6:	83 c4 10             	add    esp,0x10
100012a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012ac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100012af:	83 c2 58             	add    edx,0x58
100012b2:	c7 44 90 0c 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x1
100012ba:	83 ec 0c             	sub    esp,0xc
100012bd:	68 e5 55 00 10       	push   0x100055e5	100012be: R_386_32	.text
100012c2:	e8 fc ff ff ff       	call   100012c3 <Floppy::motor(int, bool)+0x17d>	100012c3: R_386_PC32	Dbg::kprintf(char const*, ...)
100012c7:	83 c4 10             	add    esp,0x10
100012ca:	e9 89 00 00 00       	jmp    10001358 <Floppy::motor(int, bool)+0x212>
100012cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012d2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100012d5:	83 c2 58             	add    edx,0x58
100012d8:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100012dc:	83 f8 02             	cmp    eax,0x2
100012df:	75 77                	jne    10001358 <Floppy::motor(int, bool)+0x212>
100012e1:	83 ec 0c             	sub    esp,0xc
100012e4:	68 f5 55 00 10       	push   0x100055f5	100012e5: R_386_32	.text
100012e9:	e8 fc ff ff ff       	call   100012ea <Floppy::motor(int, bool)+0x1a4>	100012ea: R_386_PC32	Dbg::kprintf(char const*, ...)
100012ee:	83 c4 10             	add    esp,0x10
100012f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100012f7:	83 c2 58             	add    edx,0x58
100012fa:	c7 44 90 0c 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x1
10001302:	eb 54                	jmp    10001358 <Floppy::motor(int, bool)+0x212>
10001304:	83 ec 0c             	sub    esp,0xc
10001307:	68 05 56 00 10       	push   0x10005605	10001308: R_386_32	.text
1000130c:	e8 fc ff ff ff       	call   1000130d <Floppy::motor(int, bool)+0x1c7>	1000130d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001311:	83 c4 10             	add    esp,0x10
10001314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001317:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000131a:	83 c2 58             	add    edx,0x58
1000131d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10001321:	83 f8 01             	cmp    eax,0x1
10001324:	75 32                	jne    10001358 <Floppy::motor(int, bool)+0x212>
10001326:	83 ec 0c             	sub    esp,0xc
10001329:	68 15 56 00 10       	push   0x10005615	1000132a: R_386_32	.text
1000132e:	e8 fc ff ff ff       	call   1000132f <Floppy::motor(int, bool)+0x1e9>	1000132f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001333:	83 c4 10             	add    esp,0x10
10001336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001339:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000133c:	83 c2 58             	add    edx,0x58
1000133f:	c7 44 90 0c 02 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x2
10001347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000134a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000134d:	83 c2 5c             	add    edx,0x5c
10001350:	c7 44 90 0c c4 09 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x9c4
10001358:	83 ec 0c             	sub    esp,0xc
1000135b:	68 25 56 00 10       	push   0x10005625	1000135c: R_386_32	.text
10001360:	e8 fc ff ff ff       	call   10001361 <Floppy::motor(int, bool)+0x21b>	10001361: R_386_PC32	Dbg::kprintf(char const*, ...)
10001365:	83 c4 10             	add    esp,0x10
10001368:	90                   	nop
10001369:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000136c:	c9                   	leave  
1000136d:	c3                   	ret    

1000136e <FloppyDrive::FloppyDrive()>:
1000136e:	55                   	push   ebp
1000136f:	89 e5                	mov    ebp,esp
10001371:	83 ec 08             	sub    esp,0x8
10001374:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001377:	83 ec 04             	sub    esp,0x4
1000137a:	68 00 02 00 00       	push   0x200
1000137f:	68 3a 56 00 10       	push   0x1000563a	10001380: R_386_32	.text
10001384:	50                   	push   eax
10001385:	e8 fc ff ff ff       	call   10001386 <FloppyDrive::FloppyDrive()+0x18>	10001386: R_386_PC32	PhysicalDisk::PhysicalDisk(char const*, int)
1000138a:	83 c4 10             	add    esp,0x10
1000138d:	ba 08 00 00 00       	mov    edx,0x8	1000138e: R_386_32	vtable for FloppyDrive
10001392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001395:	89 10                	mov    DWORD PTR [eax],edx
10001397:	90                   	nop
10001398:	c9                   	leave  
10001399:	c3                   	ret    

1000139a <FloppyDrive::motorOn()>:
1000139a:	55                   	push   ebp
1000139b:	89 e5                	mov    ebp,esp
1000139d:	83 ec 08             	sub    esp,0x8
100013a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013a3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
100013a9:	83 ec 08             	sub    esp,0x8
100013ac:	50                   	push   eax
100013ad:	68 4c 56 00 10       	push   0x1000564c	100013ae: R_386_32	.text
100013b2:	e8 fc ff ff ff       	call   100013b3 <FloppyDrive::motorOn()+0x19>	100013b3: R_386_PC32	Dbg::kprintf(char const*, ...)
100013b7:	83 c4 10             	add    esp,0x10
100013ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013bd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100013c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100013c6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100013cc:	83 ec 04             	sub    esp,0x4
100013cf:	6a 01                	push   0x1
100013d1:	52                   	push   edx
100013d2:	50                   	push   eax
100013d3:	e8 fc ff ff ff       	call   100013d4 <FloppyDrive::motorOn()+0x3a>	100013d4: R_386_PC32	Floppy::motor(int, bool)
100013d8:	83 c4 10             	add    esp,0x10
100013db:	90                   	nop
100013dc:	c9                   	leave  
100013dd:	c3                   	ret    

100013de <FloppyDrive::motorOff()>:
100013de:	55                   	push   ebp
100013df:	89 e5                	mov    ebp,esp
100013e1:	83 ec 08             	sub    esp,0x8
100013e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013e7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100013ed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100013f0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100013f6:	83 ec 04             	sub    esp,0x4
100013f9:	6a 00                	push   0x0
100013fb:	52                   	push   edx
100013fc:	50                   	push   eax
100013fd:	e8 fc ff ff ff       	call   100013fe <FloppyDrive::motorOff()+0x20>	100013fe: R_386_PC32	Floppy::motor(int, bool)
10001402:	83 c4 10             	add    esp,0x10
10001405:	90                   	nop
10001406:	c9                   	leave  
10001407:	c3                   	ret    

10001408 <FloppyDrive::floppyConfigure()>:
10001408:	55                   	push   ebp
10001409:	89 e5                	mov    ebp,esp
1000140b:	83 ec 18             	sub    esp,0x18
1000140e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
10001412:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
10001416:	c6 45 f5 01          	mov    BYTE PTR [ebp-0xb],0x1
1000141a:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
10001421:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001428:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000142b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001431:	83 ec 08             	sub    esp,0x8
10001434:	6a 13                	push   0x13
10001436:	50                   	push   eax
10001437:	e8 fc ff ff ff       	call   10001438 <FloppyDrive::floppyConfigure()+0x30>	10001438: R_386_PC32	Floppy::writeCommand(unsigned char)
1000143c:	83 c4 10             	add    esp,0x10
1000143f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001442:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001448:	83 ec 0c             	sub    esp,0xc
1000144b:	50                   	push   eax
1000144c:	e8 fc ff ff ff       	call   1000144d <FloppyDrive::floppyConfigure()+0x45>	1000144d: R_386_PC32	Floppy::wasFailure()
10001451:	83 c4 10             	add    esp,0x10
10001454:	84 c0                	test   al,al
10001456:	74 07                	je     1000145f <FloppyDrive::floppyConfigure()+0x57>
10001458:	b0 00                	mov    al,0x0
1000145a:	e9 de 00 00 00       	jmp    1000153d <FloppyDrive::floppyConfigure()+0x135>
1000145f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001462:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001468:	83 ec 08             	sub    esp,0x8
1000146b:	6a 00                	push   0x0
1000146d:	50                   	push   eax
1000146e:	e8 fc ff ff ff       	call   1000146f <FloppyDrive::floppyConfigure()+0x67>	1000146f: R_386_PC32	Floppy::writeCommand(unsigned char)
10001473:	83 c4 10             	add    esp,0x10
10001476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001479:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000147f:	83 ec 0c             	sub    esp,0xc
10001482:	50                   	push   eax
10001483:	e8 fc ff ff ff       	call   10001484 <FloppyDrive::floppyConfigure()+0x7c>	10001484: R_386_PC32	Floppy::wasFailure()
10001488:	83 c4 10             	add    esp,0x10
1000148b:	84 c0                	test   al,al
1000148d:	74 07                	je     10001496 <FloppyDrive::floppyConfigure()+0x8e>
1000148f:	b0 00                	mov    al,0x0
10001491:	e9 a7 00 00 00       	jmp    1000153d <FloppyDrive::floppyConfigure()+0x135>
10001496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001499:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000149f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
100014a3:	c1 e2 06             	shl    edx,0x6
100014a6:	88 d1                	mov    cl,dl
100014a8:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
100014ac:	c1 e2 05             	shl    edx,0x5
100014af:	09 d1                	or     ecx,edx
100014b1:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
100014b5:	c1 e2 04             	shl    edx,0x4
100014b8:	09 d1                	or     ecx,edx
100014ba:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100014bd:	4a                   	dec    edx
100014be:	09 ca                	or     edx,ecx
100014c0:	0f b6 d2             	movzx  edx,dl
100014c3:	83 ec 08             	sub    esp,0x8
100014c6:	52                   	push   edx
100014c7:	50                   	push   eax
100014c8:	e8 fc ff ff ff       	call   100014c9 <FloppyDrive::floppyConfigure()+0xc1>	100014c9: R_386_PC32	Floppy::writeCommand(unsigned char)
100014cd:	83 c4 10             	add    esp,0x10
100014d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014d3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014d9:	83 ec 0c             	sub    esp,0xc
100014dc:	50                   	push   eax
100014dd:	e8 fc ff ff ff       	call   100014de <FloppyDrive::floppyConfigure()+0xd6>	100014de: R_386_PC32	Floppy::wasFailure()
100014e2:	83 c4 10             	add    esp,0x10
100014e5:	84 c0                	test   al,al
100014e7:	74 04                	je     100014ed <FloppyDrive::floppyConfigure()+0xe5>
100014e9:	b0 00                	mov    al,0x0
100014eb:	eb 50                	jmp    1000153d <FloppyDrive::floppyConfigure()+0x135>
100014ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014f0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014f6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100014f9:	0f b6 d2             	movzx  edx,dl
100014fc:	83 ec 08             	sub    esp,0x8
100014ff:	52                   	push   edx
10001500:	50                   	push   eax
10001501:	e8 fc ff ff ff       	call   10001502 <FloppyDrive::floppyConfigure()+0xfa>	10001502: R_386_PC32	Floppy::writeCommand(unsigned char)
10001506:	83 c4 10             	add    esp,0x10
10001509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000150c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001512:	83 ec 0c             	sub    esp,0xc
10001515:	50                   	push   eax
10001516:	e8 fc ff ff ff       	call   10001517 <FloppyDrive::floppyConfigure()+0x10f>	10001517: R_386_PC32	Floppy::wasFailure()
1000151b:	83 c4 10             	add    esp,0x10
1000151e:	84 c0                	test   al,al
10001520:	74 04                	je     10001526 <FloppyDrive::floppyConfigure()+0x11e>
10001522:	b0 00                	mov    al,0x0
10001524:	eb 17                	jmp    1000153d <FloppyDrive::floppyConfigure()+0x135>
10001526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001529:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000152f:	8a 55 f5             	mov    dl,BYTE PTR [ebp-0xb]
10001532:	83 f2 01             	xor    edx,0x1
10001535:	88 90 91 01 00 00    	mov    BYTE PTR [eax+0x191],dl
1000153b:	b0 01                	mov    al,0x1
1000153d:	c9                   	leave  
1000153e:	c3                   	ret    
1000153f:	90                   	nop

10001540 <FloppyDrive::open(int, int, void*)>:
10001540:	b8 00 00 00 00       	mov    eax,0x0
10001545:	c3                   	ret    

10001546 <FloppyDrive::_open(int, int, void*)>:
10001546:	55                   	push   ebp
10001547:	89 e5                	mov    ebp,esp
10001549:	83 ec 08             	sub    esp,0x8
1000154c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000154f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001552:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
10001558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000155b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000155e:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
10001564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001567:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
1000156d:	83 ec 08             	sub    esp,0x8
10001570:	50                   	push   eax
10001571:	68 6b 56 00 10       	push   0x1000566b	10001572: R_386_32	.text
10001576:	e8 fc ff ff ff       	call   10001577 <FloppyDrive::_open(int, int, void*)+0x31>	10001577: R_386_PC32	Dbg::kprintf(char const*, ...)
1000157b:	83 c4 10             	add    esp,0x10
1000157e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001581:	c7 80 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x15c],0x200
1000158b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000158e:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
10001595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001598:	c6 80 69 01 00 00 01 	mov    BYTE PTR [eax+0x169],0x1
1000159f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100015a2:	89 d0                	mov    eax,edx
100015a4:	c1 e0 02             	shl    eax,0x2
100015a7:	01 d0                	add    eax,edx
100015a9:	c1 e0 02             	shl    eax,0x2
100015ac:	01 d0                	add    eax,edx
100015ae:	05 11 00 00 00       	add    eax,0x11	100015af: R_386_32	floppyTable
100015b3:	8a 00                	mov    al,BYTE PTR [eax]
100015b5:	0f b6 c8             	movzx  ecx,al
100015b8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100015bb:	89 d0                	mov    eax,edx
100015bd:	c1 e0 02             	shl    eax,0x2
100015c0:	01 d0                	add    eax,edx
100015c2:	c1 e0 02             	shl    eax,0x2
100015c5:	01 d0                	add    eax,edx
100015c7:	05 13 00 00 00       	add    eax,0x13	100015c8: R_386_32	floppyTable
100015cc:	8a 00                	mov    al,BYTE PTR [eax]
100015ce:	0f b6 c0             	movzx  eax,al
100015d1:	0f af c8             	imul   ecx,eax
100015d4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100015d7:	89 d0                	mov    eax,edx
100015d9:	c1 e0 02             	shl    eax,0x2
100015dc:	01 d0                	add    eax,edx
100015de:	c1 e0 02             	shl    eax,0x2
100015e1:	01 d0                	add    eax,edx
100015e3:	05 12 00 00 00       	add    eax,0x12	100015e4: R_386_32	floppyTable
100015e8:	8a 00                	mov    al,BYTE PTR [eax]
100015ea:	0f b6 c0             	movzx  eax,al
100015ed:	0f af c1             	imul   eax,ecx
100015f0:	89 c2                	mov    edx,eax
100015f2:	c1 ea 1f             	shr    edx,0x1f
100015f5:	01 d0                	add    eax,edx
100015f7:	d1 f8                	sar    eax,1
100015f9:	99                   	cdq    
100015fa:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100015fd:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
10001603:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
10001609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000160c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
10001612:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
10001618:	83 ec 04             	sub    esp,0x4
1000161b:	52                   	push   edx
1000161c:	50                   	push   eax
1000161d:	68 75 56 00 10       	push   0x10005675	1000161e: R_386_32	.text
10001622:	e8 fc ff ff ff       	call   10001623 <FloppyDrive::_open(int, int, void*)+0xdd>	10001623: R_386_PC32	Dbg::kprintf(char const*, ...)
10001627:	83 c4 10             	add    esp,0x10
1000162a:	83 ec 0c             	sub    esp,0xc
1000162d:	68 87 56 00 10       	push   0x10005687	1000162e: R_386_32	.text
10001632:	e8 fc ff ff ff       	call   10001633 <FloppyDrive::_open(int, int, void*)+0xed>	10001633: R_386_PC32	Dbg::kprintf(char const*, ...)
10001637:	83 c4 10             	add    esp,0x10
1000163a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000163d:	83 ec 0c             	sub    esp,0xc
10001640:	50                   	push   eax
10001641:	e8 fc ff ff ff       	call   10001642 <FloppyDrive::_open(int, int, void*)+0xfc>	10001642: R_386_PC32	PhysicalDisk::startCache()
10001646:	83 c4 10             	add    esp,0x10
10001649:	83 ec 0c             	sub    esp,0xc
1000164c:	68 9d 56 00 10       	push   0x1000569d	1000164d: R_386_32	.text
10001651:	e8 fc ff ff ff       	call   10001652 <FloppyDrive::_open(int, int, void*)+0x10c>	10001652: R_386_PC32	Dbg::kprintf(char const*, ...)
10001656:	83 c4 10             	add    esp,0x10
10001659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000165c:	83 ec 0c             	sub    esp,0xc
1000165f:	50                   	push   eax
10001660:	e8 fc ff ff ff       	call   10001661 <FloppyDrive::_open(int, int, void*)+0x11b>	10001661: R_386_PC32	createPartitionsForDisk(PhysicalDisk*)
10001665:	83 c4 10             	add    esp,0x10
10001668:	83 ec 0c             	sub    esp,0xc
1000166b:	68 b3 56 00 10       	push   0x100056b3	1000166c: R_386_32	.text
10001670:	e8 fc ff ff ff       	call   10001671 <FloppyDrive::_open(int, int, void*)+0x12b>	10001671: R_386_PC32	Dbg::kprintf(char const*, ...)
10001675:	83 c4 10             	add    esp,0x10
10001678:	b8 00 00 00 00       	mov    eax,0x0
1000167d:	c9                   	leave  
1000167e:	c3                   	ret    
1000167f:	90                   	nop

10001680 <FloppyDrive::close(int, int, void*)>:
10001680:	b8 00 00 00 00       	mov    eax,0x0
10001685:	c3                   	ret    

10001686 <FloppyDrive::unselect()>:
10001686:	55                   	push   ebp
10001687:	89 e5                	mov    ebp,esp
10001689:	83 ec 08             	sub    esp,0x8
1000168c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000168f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001695:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001698:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
1000169e:	83 ec 04             	sub    esp,0x4
100016a1:	6a 00                	push   0x0
100016a3:	52                   	push   edx
100016a4:	50                   	push   eax
100016a5:	e8 fc ff ff ff       	call   100016a6 <FloppyDrive::unselect()+0x20>	100016a6: R_386_PC32	Floppy::select(int, bool)
100016aa:	83 c4 10             	add    esp,0x10
100016ad:	90                   	nop
100016ae:	c9                   	leave  
100016af:	c3                   	ret    

100016b0 <FloppyDrive::select()>:
100016b0:	55                   	push   ebp
100016b1:	89 e5                	mov    ebp,esp
100016b3:	83 ec 18             	sub    esp,0x18
100016b6:	83 ec 0c             	sub    esp,0xc
100016b9:	68 c9 56 00 10       	push   0x100056c9	100016ba: R_386_32	.text
100016be:	e8 fc ff ff ff       	call   100016bf <FloppyDrive::select()+0xf>	100016bf: R_386_PC32	Dbg::kprintf(char const*, ...)
100016c3:	83 c4 10             	add    esp,0x10
100016c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100016c9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100016cf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100016d2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100016d8:	83 ec 04             	sub    esp,0x4
100016db:	6a 01                	push   0x1
100016dd:	52                   	push   edx
100016de:	50                   	push   eax
100016df:	e8 fc ff ff ff       	call   100016e0 <FloppyDrive::select()+0x30>	100016e0: R_386_PC32	Floppy::select(int, bool)
100016e4:	83 c4 10             	add    esp,0x10
100016e7:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100016ea:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
100016ee:	75 24                	jne    10001714 <FloppyDrive::select()+0x64>
100016f0:	83 ec 0c             	sub    esp,0xc
100016f3:	68 e0 56 00 10       	push   0x100056e0	100016f4: R_386_32	.text
100016f8:	e8 fc ff ff ff       	call   100016f9 <FloppyDrive::select()+0x49>	100016f9: R_386_PC32	Dbg::kprintf(char const*, ...)
100016fd:	83 c4 10             	add    esp,0x10
10001700:	83 ec 08             	sub    esp,0x8
10001703:	6a 00                	push   0x0
10001705:	68 80 d1 f0 08       	push   0x8f0d180
1000170a:	e8 fc ff ff ff       	call   1000170b <FloppyDrive::select()+0x5b>	1000170b: R_386_PC32	nanoSleep(unsigned long long)
1000170f:	83 c4 10             	add    esp,0x10
10001712:	eb a2                	jmp    100016b6 <FloppyDrive::select()+0x6>
10001714:	90                   	nop
10001715:	c9                   	leave  
10001716:	c3                   	ret    
10001717:	90                   	nop

10001718 <FloppyDrive::seek(int, int)>:
10001718:	55                   	push   ebp
10001719:	89 e5                	mov    ebp,esp
1000171b:	83 ec 18             	sub    esp,0x18
1000171e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001725:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
10001729:	7e 33                	jle    1000175e <FloppyDrive::seek(int, int)+0x46>
1000172b:	83 ec 0c             	sub    esp,0xc
1000172e:	68 00 57 00 10       	push   0x10005700	1000172f: R_386_32	.text
10001733:	e8 fc ff ff ff       	call   10001734 <FloppyDrive::seek(int, int)+0x1c>	10001734: R_386_PC32	Dbg::kprintf(char const*, ...)
10001738:	83 c4 10             	add    esp,0x10
1000173b:	83 ec 0c             	sub    esp,0xc
1000173e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001741:	e8 fc ff ff ff       	call   10001742 <FloppyDrive::seek(int, int)+0x2a>	10001742: R_386_PC32	FloppyDrive::motorOff()
10001746:	83 c4 10             	add    esp,0x10
10001749:	83 ec 0c             	sub    esp,0xc
1000174c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000174f:	e8 fc ff ff ff       	call   10001750 <FloppyDrive::seek(int, int)+0x38>	10001750: R_386_PC32	FloppyDrive::unselect()
10001754:	83 c4 10             	add    esp,0x10
10001757:	b0 00                	mov    al,0x0
10001759:	e9 da 02 00 00       	jmp    10001a38 <FloppyDrive::seek(int, int)+0x320>
1000175e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001761:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001767:	83 ec 08             	sub    esp,0x8
1000176a:	50                   	push   eax
1000176b:	68 27 57 00 10       	push   0x10005727	1000176c: R_386_32	.text
10001770:	e8 fc ff ff ff       	call   10001771 <FloppyDrive::seek(int, int)+0x59>	10001771: R_386_PC32	Dbg::kprintf(char const*, ...)
10001775:	83 c4 10             	add    esp,0x10
10001778:	83 ec 0c             	sub    esp,0xc
1000177b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000177e:	e8 fc ff ff ff       	call   1000177f <FloppyDrive::seek(int, int)+0x67>	1000177f: R_386_PC32	FloppyDrive::select()
10001783:	83 c4 10             	add    esp,0x10
10001786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001789:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
1000178f:	83 ec 08             	sub    esp,0x8
10001792:	50                   	push   eax
10001793:	68 37 57 00 10       	push   0x10005737	10001794: R_386_32	.text
10001798:	e8 fc ff ff ff       	call   10001799 <FloppyDrive::seek(int, int)+0x81>	10001799: R_386_PC32	Dbg::kprintf(char const*, ...)
1000179d:	83 c4 10             	add    esp,0x10
100017a0:	83 ec 0c             	sub    esp,0xc
100017a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017a6:	e8 fc ff ff ff       	call   100017a7 <FloppyDrive::seek(int, int)+0x8f>	100017a7: R_386_PC32	FloppyDrive::motorOn()
100017ab:	83 c4 10             	add    esp,0x10
100017ae:	83 ec 0c             	sub    esp,0xc
100017b1:	68 46 57 00 10       	push   0x10005746	100017b2: R_386_32	.text
100017b6:	e8 fc ff ff ff       	call   100017b7 <FloppyDrive::seek(int, int)+0x9f>	100017b7: R_386_PC32	Dbg::kprintf(char const*, ...)
100017bb:	83 c4 10             	add    esp,0x10
100017be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017c1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100017c7:	83 ec 08             	sub    esp,0x8
100017ca:	6a 0f                	push   0xf
100017cc:	50                   	push   eax
100017cd:	e8 fc ff ff ff       	call   100017ce <FloppyDrive::seek(int, int)+0xb6>	100017ce: R_386_PC32	Floppy::writeCommand(unsigned char)
100017d2:	83 c4 10             	add    esp,0x10
100017d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017d8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100017de:	83 ec 0c             	sub    esp,0xc
100017e1:	50                   	push   eax
100017e2:	e8 fc ff ff ff       	call   100017e3 <FloppyDrive::seek(int, int)+0xcb>	100017e3: R_386_PC32	Floppy::wasFailure()
100017e7:	83 c4 10             	add    esp,0x10
100017ea:	84 c0                	test   al,al
100017ec:	74 3d                	je     1000182b <FloppyDrive::seek(int, int)+0x113>
100017ee:	83 ec 0c             	sub    esp,0xc
100017f1:	68 51 57 00 10       	push   0x10005751	100017f2: R_386_32	.text
100017f6:	e8 fc ff ff ff       	call   100017f7 <FloppyDrive::seek(int, int)+0xdf>	100017f7: R_386_PC32	Dbg::kprintf(char const*, ...)
100017fb:	83 c4 10             	add    esp,0x10
100017fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001801:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001807:	83 ec 0c             	sub    esp,0xc
1000180a:	50                   	push   eax
1000180b:	e8 fc ff ff ff       	call   1000180c <FloppyDrive::seek(int, int)+0xf4>	1000180c: R_386_PC32	Floppy::reset()
10001810:	83 c4 10             	add    esp,0x10
10001813:	83 ec 0c             	sub    esp,0xc
10001816:	68 5d 57 00 10       	push   0x1000575d	10001817: R_386_32	.text
1000181b:	e8 fc ff ff ff       	call   1000181c <FloppyDrive::seek(int, int)+0x104>	1000181c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001820:	83 c4 10             	add    esp,0x10
10001823:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001826:	e9 fa fe ff ff       	jmp    10001725 <FloppyDrive::seek(int, int)+0xd>
1000182b:	83 ec 0c             	sub    esp,0xc
1000182e:	68 69 57 00 10       	push   0x10005769	1000182f: R_386_32	.text
10001833:	e8 fc ff ff ff       	call   10001834 <FloppyDrive::seek(int, int)+0x11c>	10001834: R_386_PC32	Dbg::kprintf(char const*, ...)
10001838:	83 c4 10             	add    esp,0x10
1000183b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000183e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001844:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
1000184b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000184e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001854:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001857:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
1000185d:	88 d1                	mov    cl,dl
1000185f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10001862:	c1 e2 02             	shl    edx,0x2
10001865:	09 ca                	or     edx,ecx
10001867:	0f b6 d2             	movzx  edx,dl
1000186a:	83 ec 08             	sub    esp,0x8
1000186d:	52                   	push   edx
1000186e:	50                   	push   eax
1000186f:	e8 fc ff ff ff       	call   10001870 <FloppyDrive::seek(int, int)+0x158>	10001870: R_386_PC32	Floppy::writeCommand(unsigned char)
10001874:	83 c4 10             	add    esp,0x10
10001877:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000187a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001880:	83 ec 0c             	sub    esp,0xc
10001883:	50                   	push   eax
10001884:	e8 fc ff ff ff       	call   10001885 <FloppyDrive::seek(int, int)+0x16d>	10001885: R_386_PC32	Floppy::wasFailure()
10001889:	83 c4 10             	add    esp,0x10
1000188c:	84 c0                	test   al,al
1000188e:	74 1d                	je     100018ad <FloppyDrive::seek(int, int)+0x195>
10001890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001893:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001899:	83 ec 0c             	sub    esp,0xc
1000189c:	50                   	push   eax
1000189d:	e8 fc ff ff ff       	call   1000189e <FloppyDrive::seek(int, int)+0x186>	1000189e: R_386_PC32	Floppy::reset()
100018a2:	83 c4 10             	add    esp,0x10
100018a5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100018a8:	e9 78 fe ff ff       	jmp    10001725 <FloppyDrive::seek(int, int)+0xd>
100018ad:	83 ec 0c             	sub    esp,0xc
100018b0:	68 74 57 00 10       	push   0x10005774	100018b1: R_386_32	.text
100018b5:	e8 fc ff ff ff       	call   100018b6 <FloppyDrive::seek(int, int)+0x19e>	100018b6: R_386_PC32	Dbg::kprintf(char const*, ...)
100018ba:	83 c4 10             	add    esp,0x10
100018bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018c0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018c6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100018c9:	0f b6 d2             	movzx  edx,dl
100018cc:	83 ec 08             	sub    esp,0x8
100018cf:	52                   	push   edx
100018d0:	50                   	push   eax
100018d1:	e8 fc ff ff ff       	call   100018d2 <FloppyDrive::seek(int, int)+0x1ba>	100018d2: R_386_PC32	Floppy::writeCommand(unsigned char)
100018d6:	83 c4 10             	add    esp,0x10
100018d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018dc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018e2:	83 ec 0c             	sub    esp,0xc
100018e5:	50                   	push   eax
100018e6:	e8 fc ff ff ff       	call   100018e7 <FloppyDrive::seek(int, int)+0x1cf>	100018e7: R_386_PC32	Floppy::wasFailure()
100018eb:	83 c4 10             	add    esp,0x10
100018ee:	84 c0                	test   al,al
100018f0:	74 1d                	je     1000190f <FloppyDrive::seek(int, int)+0x1f7>
100018f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018f5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018fb:	83 ec 0c             	sub    esp,0xc
100018fe:	50                   	push   eax
100018ff:	e8 fc ff ff ff       	call   10001900 <FloppyDrive::seek(int, int)+0x1e8>	10001900: R_386_PC32	Floppy::reset()
10001904:	83 c4 10             	add    esp,0x10
10001907:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000190a:	e9 16 fe ff ff       	jmp    10001725 <FloppyDrive::seek(int, int)+0xd>
1000190f:	83 ec 0c             	sub    esp,0xc
10001912:	68 7f 57 00 10       	push   0x1000577f	10001913: R_386_32	.text
10001917:	e8 fc ff ff ff       	call   10001918 <FloppyDrive::seek(int, int)+0x200>	10001918: R_386_PC32	Dbg::kprintf(char const*, ...)
1000191c:	83 c4 10             	add    esp,0x10
1000191f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001922:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001928:	83 ec 08             	sub    esp,0x8
1000192b:	68 dc 05 00 00       	push   0x5dc
10001930:	50                   	push   eax
10001931:	e8 fc ff ff ff       	call   10001932 <FloppyDrive::seek(int, int)+0x21a>	10001932: R_386_PC32	Floppy::waitIRQ(int)
10001936:	83 c4 10             	add    esp,0x10
10001939:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000193c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000193f:	83 f0 01             	xor    eax,0x1
10001942:	84 c0                	test   al,al
10001944:	74 2d                	je     10001973 <FloppyDrive::seek(int, int)+0x25b>
10001946:	83 ec 0c             	sub    esp,0xc
10001949:	68 8a 57 00 10       	push   0x1000578a	1000194a: R_386_32	.text
1000194e:	e8 fc ff ff ff       	call   1000194f <FloppyDrive::seek(int, int)+0x237>	1000194f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001953:	83 c4 10             	add    esp,0x10
10001956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001959:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000195f:	83 ec 0c             	sub    esp,0xc
10001962:	50                   	push   eax
10001963:	e8 fc ff ff ff       	call   10001964 <FloppyDrive::seek(int, int)+0x24c>	10001964: R_386_PC32	Floppy::reset()
10001968:	83 c4 10             	add    esp,0x10
1000196b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000196e:	e9 b2 fd ff ff       	jmp    10001725 <FloppyDrive::seek(int, int)+0xd>
10001973:	83 ec 0c             	sub    esp,0xc
10001976:	68 98 57 00 10       	push   0x10005798	10001977: R_386_32	.text
1000197b:	e8 fc ff ff ff       	call   1000197c <FloppyDrive::seek(int, int)+0x264>	1000197c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001980:	83 c4 10             	add    esp,0x10
10001983:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
1000198a:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10001991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001994:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000199a:	83 ec 04             	sub    esp,0x4
1000199d:	8d 55 e8             	lea    edx,[ebp-0x18]
100019a0:	52                   	push   edx
100019a1:	8d 55 ec             	lea    edx,[ebp-0x14]
100019a4:	52                   	push   edx
100019a5:	50                   	push   eax
100019a6:	e8 fc ff ff ff       	call   100019a7 <FloppyDrive::seek(int, int)+0x28f>	100019a7: R_386_PC32	Floppy::senseInterrupt(int*, int*)
100019ab:	83 c4 10             	add    esp,0x10
100019ae:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
100019b1:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
100019b4:	83 f0 01             	xor    eax,0x1
100019b7:	84 c0                	test   al,al
100019b9:	74 15                	je     100019d0 <FloppyDrive::seek(int, int)+0x2b8>
100019bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019be:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019c4:	83 ec 0c             	sub    esp,0xc
100019c7:	50                   	push   eax
100019c8:	e8 fc ff ff ff       	call   100019c9 <FloppyDrive::seek(int, int)+0x2b1>	100019c9: R_386_PC32	Floppy::reset()
100019cd:	83 c4 10             	add    esp,0x10
100019d0:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
100019d3:	83 f0 01             	xor    eax,0x1
100019d6:	84 c0                	test   al,al
100019d8:	75 08                	jne    100019e2 <FloppyDrive::seek(int, int)+0x2ca>
100019da:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100019dd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
100019e0:	74 08                	je     100019ea <FloppyDrive::seek(int, int)+0x2d2>
100019e2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100019e5:	e9 3b fd ff ff       	jmp    10001725 <FloppyDrive::seek(int, int)+0xd>
100019ea:	83 ec 0c             	sub    esp,0xc
100019ed:	68 a3 57 00 10       	push   0x100057a3	100019ee: R_386_32	.text
100019f2:	e8 fc ff ff ff       	call   100019f3 <FloppyDrive::seek(int, int)+0x2db>	100019f3: R_386_PC32	Dbg::kprintf(char const*, ...)
100019f7:	83 c4 10             	add    esp,0x10
100019fa:	83 ec 0c             	sub    esp,0xc
100019fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a00:	e8 fc ff ff ff       	call   10001a01 <FloppyDrive::seek(int, int)+0x2e9>	10001a01: R_386_PC32	FloppyDrive::motorOff()
10001a05:	83 c4 10             	add    esp,0x10
10001a08:	83 ec 0c             	sub    esp,0xc
10001a0b:	68 b0 57 00 10       	push   0x100057b0	10001a0c: R_386_32	.text
10001a10:	e8 fc ff ff ff       	call   10001a11 <FloppyDrive::seek(int, int)+0x2f9>	10001a11: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a15:	83 c4 10             	add    esp,0x10
10001a18:	83 ec 0c             	sub    esp,0xc
10001a1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a1e:	e8 fc ff ff ff       	call   10001a1f <FloppyDrive::seek(int, int)+0x307>	10001a1f: R_386_PC32	FloppyDrive::unselect()
10001a23:	83 c4 10             	add    esp,0x10
10001a26:	83 ec 0c             	sub    esp,0xc
10001a29:	68 bd 57 00 10       	push   0x100057bd	10001a2a: R_386_32	.text
10001a2e:	e8 fc ff ff ff       	call   10001a2f <FloppyDrive::seek(int, int)+0x317>	10001a2f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a33:	83 c4 10             	add    esp,0x10
10001a36:	b0 01                	mov    al,0x1
10001a38:	c9                   	leave  
10001a39:	c3                   	ret    

10001a3a <FloppyDrive::calibrate()>:
10001a3a:	55                   	push   ebp
10001a3b:	89 e5                	mov    ebp,esp
10001a3d:	83 ec 18             	sub    esp,0x18
10001a40:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001a47:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
10001a4b:	7e 25                	jle    10001a72 <FloppyDrive::calibrate()+0x38>
10001a4d:	83 ec 0c             	sub    esp,0xc
10001a50:	68 cc 57 00 10       	push   0x100057cc	10001a51: R_386_32	.text
10001a55:	e8 fc ff ff ff       	call   10001a56 <FloppyDrive::calibrate()+0x1c>	10001a56: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a5a:	83 c4 10             	add    esp,0x10
10001a5d:	83 ec 0c             	sub    esp,0xc
10001a60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a63:	e8 fc ff ff ff       	call   10001a64 <FloppyDrive::calibrate()+0x2a>	10001a64: R_386_PC32	FloppyDrive::motorOff()
10001a68:	83 c4 10             	add    esp,0x10
10001a6b:	b0 00                	mov    al,0x0
10001a6d:	e9 01 02 00 00       	jmp    10001c73 <FloppyDrive::calibrate()+0x239>
10001a72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a75:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001a7b:	83 ec 08             	sub    esp,0x8
10001a7e:	50                   	push   eax
10001a7f:	68 f8 57 00 10       	push   0x100057f8	10001a80: R_386_32	.text
10001a84:	e8 fc ff ff ff       	call   10001a85 <FloppyDrive::calibrate()+0x4b>	10001a85: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a89:	83 c4 10             	add    esp,0x10
10001a8c:	83 ec 0c             	sub    esp,0xc
10001a8f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a92:	e8 fc ff ff ff       	call   10001a93 <FloppyDrive::calibrate()+0x59>	10001a93: R_386_PC32	FloppyDrive::motorOn()
10001a97:	83 c4 10             	add    esp,0x10
10001a9a:	83 ec 0c             	sub    esp,0xc
10001a9d:	68 06 58 00 10       	push   0x10005806	10001a9e: R_386_32	.text
10001aa2:	e8 fc ff ff ff       	call   10001aa3 <FloppyDrive::calibrate()+0x69>	10001aa3: R_386_PC32	Dbg::kprintf(char const*, ...)
10001aa7:	83 c4 10             	add    esp,0x10
10001aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001aad:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ab3:	83 ec 08             	sub    esp,0x8
10001ab6:	6a 07                	push   0x7
10001ab8:	50                   	push   eax
10001ab9:	e8 fc ff ff ff       	call   10001aba <FloppyDrive::calibrate()+0x80>	10001aba: R_386_PC32	Floppy::writeCommand(unsigned char)
10001abe:	83 c4 10             	add    esp,0x10
10001ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ac4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001aca:	83 ec 0c             	sub    esp,0xc
10001acd:	50                   	push   eax
10001ace:	e8 fc ff ff ff       	call   10001acf <FloppyDrive::calibrate()+0x95>	10001acf: R_386_PC32	Floppy::wasFailure()
10001ad3:	83 c4 10             	add    esp,0x10
10001ad6:	84 c0                	test   al,al
10001ad8:	74 1d                	je     10001af7 <FloppyDrive::calibrate()+0xbd>
10001ada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001add:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ae3:	83 ec 0c             	sub    esp,0xc
10001ae6:	50                   	push   eax
10001ae7:	e8 fc ff ff ff       	call   10001ae8 <FloppyDrive::calibrate()+0xae>	10001ae8: R_386_PC32	Floppy::reset()
10001aec:	83 c4 10             	add    esp,0x10
10001aef:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001af2:	e9 50 ff ff ff       	jmp    10001a47 <FloppyDrive::calibrate()+0xd>
10001af7:	83 ec 0c             	sub    esp,0xc
10001afa:	68 0f 58 00 10       	push   0x1000580f	10001afb: R_386_32	.text
10001aff:	e8 fc ff ff ff       	call   10001b00 <FloppyDrive::calibrate()+0xc6>	10001b00: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b04:	83 c4 10             	add    esp,0x10
10001b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b0a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b10:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10001b17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b1a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b20:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001b23:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001b29:	0f b6 d2             	movzx  edx,dl
10001b2c:	83 ec 08             	sub    esp,0x8
10001b2f:	52                   	push   edx
10001b30:	50                   	push   eax
10001b31:	e8 fc ff ff ff       	call   10001b32 <FloppyDrive::calibrate()+0xf8>	10001b32: R_386_PC32	Floppy::writeCommand(unsigned char)
10001b36:	83 c4 10             	add    esp,0x10
10001b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b3c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b42:	83 ec 0c             	sub    esp,0xc
10001b45:	50                   	push   eax
10001b46:	e8 fc ff ff ff       	call   10001b47 <FloppyDrive::calibrate()+0x10d>	10001b47: R_386_PC32	Floppy::wasFailure()
10001b4b:	83 c4 10             	add    esp,0x10
10001b4e:	84 c0                	test   al,al
10001b50:	74 1d                	je     10001b6f <FloppyDrive::calibrate()+0x135>
10001b52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b55:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b5b:	83 ec 0c             	sub    esp,0xc
10001b5e:	50                   	push   eax
10001b5f:	e8 fc ff ff ff       	call   10001b60 <FloppyDrive::calibrate()+0x126>	10001b60: R_386_PC32	Floppy::reset()
10001b64:	83 c4 10             	add    esp,0x10
10001b67:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001b6a:	e9 d8 fe ff ff       	jmp    10001a47 <FloppyDrive::calibrate()+0xd>
10001b6f:	83 ec 0c             	sub    esp,0xc
10001b72:	68 18 58 00 10       	push   0x10005818	10001b73: R_386_32	.text
10001b77:	e8 fc ff ff ff       	call   10001b78 <FloppyDrive::calibrate()+0x13e>	10001b78: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b7c:	83 c4 10             	add    esp,0x10
10001b7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b82:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b88:	83 ec 08             	sub    esp,0x8
10001b8b:	68 dc 05 00 00       	push   0x5dc
10001b90:	50                   	push   eax
10001b91:	e8 fc ff ff ff       	call   10001b92 <FloppyDrive::calibrate()+0x158>	10001b92: R_386_PC32	Floppy::waitIRQ(int)
10001b96:	83 c4 10             	add    esp,0x10
10001b99:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001b9c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001b9f:	83 f0 01             	xor    eax,0x1
10001ba2:	84 c0                	test   al,al
10001ba4:	74 1d                	je     10001bc3 <FloppyDrive::calibrate()+0x189>
10001ba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ba9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001baf:	83 ec 0c             	sub    esp,0xc
10001bb2:	50                   	push   eax
10001bb3:	e8 fc ff ff ff       	call   10001bb4 <FloppyDrive::calibrate()+0x17a>	10001bb4: R_386_PC32	Floppy::reset()
10001bb8:	83 c4 10             	add    esp,0x10
10001bbb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001bbe:	e9 84 fe ff ff       	jmp    10001a47 <FloppyDrive::calibrate()+0xd>
10001bc3:	83 ec 0c             	sub    esp,0xc
10001bc6:	68 21 58 00 10       	push   0x10005821	10001bc7: R_386_32	.text
10001bcb:	e8 fc ff ff ff       	call   10001bcc <FloppyDrive::calibrate()+0x192>	10001bcc: R_386_PC32	Dbg::kprintf(char const*, ...)
10001bd0:	83 c4 10             	add    esp,0x10
10001bd3:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
10001bda:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10001be1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001be4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bea:	83 ec 04             	sub    esp,0x4
10001bed:	8d 55 e8             	lea    edx,[ebp-0x18]
10001bf0:	52                   	push   edx
10001bf1:	8d 55 ec             	lea    edx,[ebp-0x14]
10001bf4:	52                   	push   edx
10001bf5:	50                   	push   eax
10001bf6:	e8 fc ff ff ff       	call   10001bf7 <FloppyDrive::calibrate()+0x1bd>	10001bf7: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10001bfb:	83 c4 10             	add    esp,0x10
10001bfe:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10001c01:	83 ec 0c             	sub    esp,0xc
10001c04:	68 2a 58 00 10       	push   0x1000582a	10001c05: R_386_32	.text
10001c09:	e8 fc ff ff ff       	call   10001c0a <FloppyDrive::calibrate()+0x1d0>	10001c0a: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c0e:	83 c4 10             	add    esp,0x10
10001c11:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001c14:	83 f0 01             	xor    eax,0x1
10001c17:	84 c0                	test   al,al
10001c19:	74 15                	je     10001c30 <FloppyDrive::calibrate()+0x1f6>
10001c1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c1e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c24:	83 ec 0c             	sub    esp,0xc
10001c27:	50                   	push   eax
10001c28:	e8 fc ff ff ff       	call   10001c29 <FloppyDrive::calibrate()+0x1ef>	10001c29: R_386_PC32	Floppy::reset()
10001c2d:	83 c4 10             	add    esp,0x10
10001c30:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001c33:	83 f0 01             	xor    eax,0x1
10001c36:	84 c0                	test   al,al
10001c38:	75 11                	jne    10001c4b <FloppyDrive::calibrate()+0x211>
10001c3a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001c3d:	85 c0                	test   eax,eax
10001c3f:	75 0a                	jne    10001c4b <FloppyDrive::calibrate()+0x211>
10001c41:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10001c44:	83 e0 20             	and    eax,0x20
10001c47:	85 c0                	test   eax,eax
10001c49:	75 08                	jne    10001c53 <FloppyDrive::calibrate()+0x219>
10001c4b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001c4e:	e9 f4 fd ff ff       	jmp    10001a47 <FloppyDrive::calibrate()+0xd>
10001c53:	83 ec 0c             	sub    esp,0xc
10001c56:	68 33 58 00 10       	push   0x10005833	10001c57: R_386_32	.text
10001c5b:	e8 fc ff ff ff       	call   10001c5c <FloppyDrive::calibrate()+0x222>	10001c5c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c60:	83 c4 10             	add    esp,0x10
10001c63:	83 ec 0c             	sub    esp,0xc
10001c66:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001c69:	e8 fc ff ff ff       	call   10001c6a <FloppyDrive::calibrate()+0x230>	10001c6a: R_386_PC32	FloppyDrive::motorOff()
10001c6e:	83 c4 10             	add    esp,0x10
10001c71:	b0 01                	mov    al,0x1
10001c73:	c9                   	leave  
10001c74:	c3                   	ret    
10001c75:	90                   	nop

10001c76 <FloppyDrive::doTrack(int, bool, unsigned char*)>:
10001c76:	55                   	push   ebp
10001c77:	89 e5                	mov    ebp,esp
10001c79:	57                   	push   edi
10001c7a:	56                   	push   esi
10001c7b:	53                   	push   ebx
10001c7c:	83 ec 6c             	sub    esp,0x6c
10001c7f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001c82:	88 45 94             	mov    BYTE PTR [ebp-0x6c],al
10001c85:	80 7d 94 00          	cmp    BYTE PTR [ebp-0x6c],0x0
10001c89:	74 43                	je     10001cce <FloppyDrive::doTrack(int, bool, unsigned char*)+0x58>
10001c8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c8e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
10001c9a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001c9d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001ca0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001ca3:	c7 45 cc 00 48 00 00 	mov    DWORD PTR [ebp-0x34],0x4800
10001caa:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10001cad:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001cb0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001cb3:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001cb6:	8b 4d cc             	mov    ecx,DWORD PTR [ebp-0x34]
10001cb9:	89 c6                	mov    esi,eax
10001cbb:	89 d7                	mov    edi,edx
10001cbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10001cbf:	89 c8                	mov    eax,ecx
10001cc1:	89 fa                	mov    edx,edi
10001cc3:	89 f3                	mov    ebx,esi
10001cc5:	89 5d c4             	mov    DWORD PTR [ebp-0x3c],ebx
10001cc8:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
10001ccb:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001cce:	80 7d 94 00          	cmp    BYTE PTR [ebp-0x6c],0x0
10001cd2:	74 07                	je     10001cdb <FloppyDrive::doTrack(int, bool, unsigned char*)+0x65>
10001cd4:	b8 c5 00 00 00       	mov    eax,0xc5
10001cd9:	eb 05                	jmp    10001ce0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6a>
10001cdb:	b8 c6 00 00 00       	mov    eax,0xc6
10001ce0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001ce3:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10001cea:	83 ec 0c             	sub    esp,0xc
10001ced:	68 3c 58 00 10       	push   0x1000583c	10001cee: R_386_32	.text
10001cf2:	e8 fc ff ff ff       	call   10001cf3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7d>	10001cf3: R_386_PC32	Dbg::kprintf(char const*, ...)
10001cf7:	83 c4 10             	add    esp,0x10
10001cfa:	83 7d e4 14          	cmp    DWORD PTR [ebp-0x1c],0x14
10001cfe:	75 26                	jne    10001d26 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xb0>
10001d00:	83 ec 0c             	sub    esp,0xc
10001d03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d06:	e8 fc ff ff ff       	call   10001d07 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x91>	10001d07: R_386_PC32	FloppyDrive::motorOff()
10001d0b:	83 c4 10             	add    esp,0x10
10001d0e:	83 ec 0c             	sub    esp,0xc
10001d11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d14:	e8 fc ff ff ff       	call   10001d15 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x9f>	10001d15: R_386_PC32	FloppyDrive::unselect()
10001d19:	83 c4 10             	add    esp,0x10
10001d1c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10001d21:	e9 73 07 00 00       	jmp    10002499 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x823>
10001d26:	83 ec 0c             	sub    esp,0xc
10001d29:	68 46 58 00 10       	push   0x10005846	10001d2a: R_386_32	.text
10001d2e:	e8 fc ff ff ff       	call   10001d2f <FloppyDrive::doTrack(int, bool, unsigned char*)+0xb9>	10001d2f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d33:	83 c4 10             	add    esp,0x10
10001d36:	83 ec 04             	sub    esp,0x4
10001d39:	6a 00                	push   0x0
10001d3b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001d3e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d41:	e8 fc ff ff ff       	call   10001d42 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xcc>	10001d42: R_386_PC32	FloppyDrive::seek(int, int)
10001d46:	83 c4 10             	add    esp,0x10
10001d49:	83 f0 01             	xor    eax,0x1
10001d4c:	84 c0                	test   al,al
10001d4e:	74 0a                	je     10001d5a <FloppyDrive::doTrack(int, bool, unsigned char*)+0xe4>
10001d50:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001d55:	e9 3f 07 00 00       	jmp    10002499 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x823>
10001d5a:	83 ec 04             	sub    esp,0x4
10001d5d:	6a 01                	push   0x1
10001d5f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001d62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d65:	e8 fc ff ff ff       	call   10001d66 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xf0>	10001d66: R_386_PC32	FloppyDrive::seek(int, int)
10001d6a:	83 c4 10             	add    esp,0x10
10001d6d:	83 f0 01             	xor    eax,0x1
10001d70:	84 c0                	test   al,al
10001d72:	74 0a                	je     10001d7e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x108>
10001d74:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001d79:	e9 1b 07 00 00       	jmp    10002499 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x823>
10001d7e:	83 ec 0c             	sub    esp,0xc
10001d81:	68 56 58 00 10       	push   0x10005856	10001d82: R_386_32	.text
10001d86:	e8 fc ff ff ff       	call   10001d87 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x111>	10001d87: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d8b:	83 c4 10             	add    esp,0x10
10001d8e:	83 ec 0c             	sub    esp,0xc
10001d91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d94:	e8 fc ff ff ff       	call   10001d95 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x11f>	10001d95: R_386_PC32	FloppyDrive::motorOn()
10001d99:	83 c4 10             	add    esp,0x10
10001d9c:	83 ec 0c             	sub    esp,0xc
10001d9f:	68 62 58 00 10       	push   0x10005862	10001da0: R_386_32	.text
10001da4:	e8 fc ff ff ff       	call   10001da5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x12f>	10001da5: R_386_PC32	Dbg::kprintf(char const*, ...)
10001da9:	83 c4 10             	add    esp,0x10
10001dac:	83 ec 0c             	sub    esp,0xc
10001daf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001db2:	e8 fc ff ff ff       	call   10001db3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x13d>	10001db3: R_386_PC32	FloppyDrive::select()
10001db7:	83 c4 10             	add    esp,0x10
10001dba:	83 ec 0c             	sub    esp,0xc
10001dbd:	68 6d 58 00 10       	push   0x1000586d	10001dbe: R_386_32	.text
10001dc2:	e8 fc ff ff ff       	call   10001dc3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x14d>	10001dc3: R_386_PC32	Dbg::kprintf(char const*, ...)
10001dc7:	83 c4 10             	add    esp,0x10
10001dca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dcd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001dd3:	0f b6 55 94          	movzx  edx,BYTE PTR [ebp-0x6c]
10001dd7:	83 ec 08             	sub    esp,0x8
10001dda:	52                   	push   edx
10001ddb:	50                   	push   eax
10001ddc:	e8 fc ff ff ff       	call   10001ddd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x167>	10001ddd: R_386_PC32	Floppy::dmaInit(bool)
10001de1:	83 c4 10             	add    esp,0x10
10001de4:	83 ec 0c             	sub    esp,0xc
10001de7:	68 78 58 00 10       	push   0x10005878	10001de8: R_386_32	.text
10001dec:	e8 fc ff ff ff       	call   10001ded <FloppyDrive::doTrack(int, bool, unsigned char*)+0x177>	10001ded: R_386_PC32	Dbg::kprintf(char const*, ...)
10001df1:	83 c4 10             	add    esp,0x10
10001df4:	83 ec 08             	sub    esp,0x8
10001df7:	6a 00                	push   0x0
10001df9:	68 00 e1 f5 05       	push   0x5f5e100
10001dfe:	e8 fc ff ff ff       	call   10001dff <FloppyDrive::doTrack(int, bool, unsigned char*)+0x189>	10001dff: R_386_PC32	nanoSleep(unsigned long long)
10001e03:	83 c4 10             	add    esp,0x10
10001e06:	83 ec 0c             	sub    esp,0xc
10001e09:	68 85 58 00 10       	push   0x10005885	10001e0a: R_386_32	.text
10001e0e:	e8 fc ff ff ff       	call   10001e0f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x199>	10001e0f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e13:	83 c4 10             	add    esp,0x10
10001e16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e19:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e1f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001e22:	0f b6 d2             	movzx  edx,dl
10001e25:	83 ec 08             	sub    esp,0x8
10001e28:	52                   	push   edx
10001e29:	50                   	push   eax
10001e2a:	e8 fc ff ff ff       	call   10001e2b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1b5>	10001e2b: R_386_PC32	Floppy::writeCommand(unsigned char)
10001e2f:	83 c4 10             	add    esp,0x10
10001e32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e35:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e3b:	83 ec 0c             	sub    esp,0xc
10001e3e:	50                   	push   eax
10001e3f:	e8 fc ff ff ff       	call   10001e40 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1ca>	10001e40: R_386_PC32	Floppy::wasFailure()
10001e44:	83 c4 10             	add    esp,0x10
10001e47:	84 c0                	test   al,al
10001e49:	74 1d                	je     10001e68 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1f2>
10001e4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e4e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e54:	83 ec 0c             	sub    esp,0xc
10001e57:	50                   	push   eax
10001e58:	e8 fc ff ff ff       	call   10001e59 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1e3>	10001e59: R_386_PC32	Floppy::reset()
10001e5d:	83 c4 10             	add    esp,0x10
10001e60:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001e63:	e9 82 fe ff ff       	jmp    10001cea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001e68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e6b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e71:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001e74:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001e7a:	0f b6 d2             	movzx  edx,dl
10001e7d:	83 ec 08             	sub    esp,0x8
10001e80:	52                   	push   edx
10001e81:	50                   	push   eax
10001e82:	e8 fc ff ff ff       	call   10001e83 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x20d>	10001e83: R_386_PC32	Floppy::writeCommand(unsigned char)
10001e87:	83 c4 10             	add    esp,0x10
10001e8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e8d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e93:	83 ec 0c             	sub    esp,0xc
10001e96:	50                   	push   eax
10001e97:	e8 fc ff ff ff       	call   10001e98 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x222>	10001e98: R_386_PC32	Floppy::wasFailure()
10001e9c:	83 c4 10             	add    esp,0x10
10001e9f:	84 c0                	test   al,al
10001ea1:	74 1d                	je     10001ec0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x24a>
10001ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ea6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001eac:	83 ec 0c             	sub    esp,0xc
10001eaf:	50                   	push   eax
10001eb0:	e8 fc ff ff ff       	call   10001eb1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x23b>	10001eb1: R_386_PC32	Floppy::reset()
10001eb5:	83 c4 10             	add    esp,0x10
10001eb8:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001ebb:	e9 2a fe ff ff       	jmp    10001cea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ec3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ec9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001ecc:	0f b6 d2             	movzx  edx,dl
10001ecf:	83 ec 08             	sub    esp,0x8
10001ed2:	52                   	push   edx
10001ed3:	50                   	push   eax
10001ed4:	e8 fc ff ff ff       	call   10001ed5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x25f>	10001ed5: R_386_PC32	Floppy::writeCommand(unsigned char)
10001ed9:	83 c4 10             	add    esp,0x10
10001edc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001edf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ee5:	83 ec 0c             	sub    esp,0xc
10001ee8:	50                   	push   eax
10001ee9:	e8 fc ff ff ff       	call   10001eea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x274>	10001eea: R_386_PC32	Floppy::wasFailure()
10001eee:	83 c4 10             	add    esp,0x10
10001ef1:	84 c0                	test   al,al
10001ef3:	74 1d                	je     10001f12 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x29c>
10001ef5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ef8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001efe:	83 ec 0c             	sub    esp,0xc
10001f01:	50                   	push   eax
10001f02:	e8 fc ff ff ff       	call   10001f03 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x28d>	10001f03: R_386_PC32	Floppy::reset()
10001f07:	83 c4 10             	add    esp,0x10
10001f0a:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001f0d:	e9 d8 fd ff ff       	jmp    10001cea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001f12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f15:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f1b:	83 ec 08             	sub    esp,0x8
10001f1e:	6a 00                	push   0x0
10001f20:	50                   	push   eax
10001f21:	e8 fc ff ff ff       	call   10001f22 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2ac>	10001f22: R_386_PC32	Floppy::writeCommand(unsigned char)
10001f26:	83 c4 10             	add    esp,0x10
10001f29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f2c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f32:	83 ec 0c             	sub    esp,0xc
10001f35:	50                   	push   eax
10001f36:	e8 fc ff ff ff       	call   10001f37 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2c1>	10001f37: R_386_PC32	Floppy::wasFailure()
10001f3b:	83 c4 10             	add    esp,0x10
10001f3e:	84 c0                	test   al,al
10001f40:	74 1d                	je     10001f5f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2e9>
10001f42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f45:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f4b:	83 ec 0c             	sub    esp,0xc
10001f4e:	50                   	push   eax
10001f4f:	e8 fc ff ff ff       	call   10001f50 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2da>	10001f50: R_386_PC32	Floppy::reset()
10001f54:	83 c4 10             	add    esp,0x10
10001f57:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001f5a:	e9 8b fd ff ff       	jmp    10001cea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001f5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f62:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f68:	83 ec 08             	sub    esp,0x8
10001f6b:	6a 01                	push   0x1
10001f6d:	50                   	push   eax
10001f6e:	e8 fc ff ff ff       	call   10001f6f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2f9>	10001f6f: R_386_PC32	Floppy::writeCommand(unsigned char)
10001f73:	83 c4 10             	add    esp,0x10
10001f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f79:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f7f:	83 ec 0c             	sub    esp,0xc
10001f82:	50                   	push   eax
10001f83:	e8 fc ff ff ff       	call   10001f84 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x30e>	10001f84: R_386_PC32	Floppy::wasFailure()
10001f88:	83 c4 10             	add    esp,0x10
10001f8b:	84 c0                	test   al,al
10001f8d:	74 1d                	je     10001fac <FloppyDrive::doTrack(int, bool, unsigned char*)+0x336>
10001f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f92:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f98:	83 ec 0c             	sub    esp,0xc
10001f9b:	50                   	push   eax
10001f9c:	e8 fc ff ff ff       	call   10001f9d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x327>	10001f9d: R_386_PC32	Floppy::reset()
10001fa1:	83 c4 10             	add    esp,0x10
10001fa4:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001fa7:	e9 3e fd ff ff       	jmp    10001cea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001faf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fb5:	83 ec 08             	sub    esp,0x8
10001fb8:	6a 02                	push   0x2
10001fba:	50                   	push   eax
10001fbb:	e8 fc ff ff ff       	call   10001fbc <FloppyDrive::doTrack(int, bool, unsigned char*)+0x346>	10001fbc: R_386_PC32	Floppy::writeCommand(unsigned char)
10001fc0:	83 c4 10             	add    esp,0x10
10001fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fc6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fcc:	83 ec 0c             	sub    esp,0xc
10001fcf:	50                   	push   eax
10001fd0:	e8 fc ff ff ff       	call   10001fd1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x35b>	10001fd1: R_386_PC32	Floppy::wasFailure()
10001fd5:	83 c4 10             	add    esp,0x10
10001fd8:	84 c0                	test   al,al
10001fda:	74 1d                	je     10001ff9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x383>
10001fdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fdf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fe5:	83 ec 0c             	sub    esp,0xc
10001fe8:	50                   	push   eax
10001fe9:	e8 fc ff ff ff       	call   10001fea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x374>	10001fea: R_386_PC32	Floppy::reset()
10001fee:	83 c4 10             	add    esp,0x10
10001ff1:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001ff4:	e9 f1 fc ff ff       	jmp    10001cea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ffc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002002:	83 ec 08             	sub    esp,0x8
10002005:	6a 12                	push   0x12
10002007:	50                   	push   eax
10002008:	e8 fc ff ff ff       	call   10002009 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x393>	10002009: R_386_PC32	Floppy::writeCommand(unsigned char)
1000200d:	83 c4 10             	add    esp,0x10
10002010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002013:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002019:	83 ec 0c             	sub    esp,0xc
1000201c:	50                   	push   eax
1000201d:	e8 fc ff ff ff       	call   1000201e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3a8>	1000201e: R_386_PC32	Floppy::wasFailure()
10002022:	83 c4 10             	add    esp,0x10
10002025:	84 c0                	test   al,al
10002027:	74 1d                	je     10002046 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3d0>
10002029:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000202c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002032:	83 ec 0c             	sub    esp,0xc
10002035:	50                   	push   eax
10002036:	e8 fc ff ff ff       	call   10002037 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3c1>	10002037: R_386_PC32	Floppy::reset()
1000203b:	83 c4 10             	add    esp,0x10
1000203e:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002041:	e9 a4 fc ff ff       	jmp    10001cea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002049:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000204f:	83 ec 08             	sub    esp,0x8
10002052:	6a 1b                	push   0x1b
10002054:	50                   	push   eax
10002055:	e8 fc ff ff ff       	call   10002056 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e0>	10002056: R_386_PC32	Floppy::writeCommand(unsigned char)
1000205a:	83 c4 10             	add    esp,0x10
1000205d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002060:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002066:	83 ec 0c             	sub    esp,0xc
10002069:	50                   	push   eax
1000206a:	e8 fc ff ff ff       	call   1000206b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3f5>	1000206b: R_386_PC32	Floppy::wasFailure()
1000206f:	83 c4 10             	add    esp,0x10
10002072:	84 c0                	test   al,al
10002074:	74 1d                	je     10002093 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x41d>
10002076:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002079:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000207f:	83 ec 0c             	sub    esp,0xc
10002082:	50                   	push   eax
10002083:	e8 fc ff ff ff       	call   10002084 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x40e>	10002084: R_386_PC32	Floppy::reset()
10002088:	83 c4 10             	add    esp,0x10
1000208b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000208e:	e9 57 fc ff ff       	jmp    10001cea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002093:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002096:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000209c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
100020a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020a6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020ac:	83 ec 08             	sub    esp,0x8
100020af:	68 ff 00 00 00       	push   0xff
100020b4:	50                   	push   eax
100020b5:	e8 fc ff ff ff       	call   100020b6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x440>	100020b6: R_386_PC32	Floppy::writeCommand(unsigned char)
100020ba:	83 c4 10             	add    esp,0x10
100020bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020c6:	83 ec 0c             	sub    esp,0xc
100020c9:	50                   	push   eax
100020ca:	e8 fc ff ff ff       	call   100020cb <FloppyDrive::doTrack(int, bool, unsigned char*)+0x455>	100020cb: R_386_PC32	Floppy::wasFailure()
100020cf:	83 c4 10             	add    esp,0x10
100020d2:	84 c0                	test   al,al
100020d4:	74 1d                	je     100020f3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x47d>
100020d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020d9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020df:	83 ec 0c             	sub    esp,0xc
100020e2:	50                   	push   eax
100020e3:	e8 fc ff ff ff       	call   100020e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x46e>	100020e4: R_386_PC32	Floppy::reset()
100020e8:	83 c4 10             	add    esp,0x10
100020eb:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100020ee:	e9 f7 fb ff ff       	jmp    10001cea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100020f3:	83 ec 0c             	sub    esp,0xc
100020f6:	68 91 58 00 10       	push   0x10005891	100020f7: R_386_32	.text
100020fb:	e8 fc ff ff ff       	call   100020fc <FloppyDrive::doTrack(int, bool, unsigned char*)+0x486>	100020fc: R_386_PC32	Dbg::kprintf(char const*, ...)
10002100:	83 c4 10             	add    esp,0x10
10002103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002106:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000210c:	83 ec 08             	sub    esp,0x8
1000210f:	68 e8 03 00 00       	push   0x3e8
10002114:	50                   	push   eax
10002115:	e8 fc ff ff ff       	call   10002116 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4a0>	10002116: R_386_PC32	Floppy::waitIRQ(int)
1000211a:	83 c4 10             	add    esp,0x10
1000211d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
10002120:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
10002123:	83 f0 01             	xor    eax,0x1
10002126:	84 c0                	test   al,al
10002128:	74 2d                	je     10002157 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4e1>
1000212a:	83 ec 0c             	sub    esp,0xc
1000212d:	68 a4 58 00 10       	push   0x100058a4	1000212e: R_386_32	.text
10002132:	e8 fc ff ff ff       	call   10002133 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4bd>	10002133: R_386_PC32	Dbg::kprintf(char const*, ...)
10002137:	83 c4 10             	add    esp,0x10
1000213a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000213d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002143:	83 ec 0c             	sub    esp,0xc
10002146:	50                   	push   eax
10002147:	e8 fc ff ff ff       	call   10002148 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4d2>	10002148: R_386_PC32	Floppy::reset()
1000214c:	83 c4 10             	add    esp,0x10
1000214f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002152:	e9 93 fb ff ff       	jmp    10001cea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002157:	83 ec 0c             	sub    esp,0xc
1000215a:	68 ad 58 00 10       	push   0x100058ad	1000215b: R_386_32	.text
1000215f:	e8 fc ff ff ff       	call   10002160 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4ea>	10002160: R_386_PC32	Dbg::kprintf(char const*, ...)
10002164:	83 c4 10             	add    esp,0x10
10002167:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000216a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002170:	83 ec 0c             	sub    esp,0xc
10002173:	50                   	push   eax
10002174:	e8 fc ff ff ff       	call   10002175 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4ff>	10002175: R_386_PC32	Floppy::readData()
10002179:	83 c4 10             	add    esp,0x10
1000217c:	88 45 de             	mov    BYTE PTR [ebp-0x22],al
1000217f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002182:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002188:	83 ec 0c             	sub    esp,0xc
1000218b:	50                   	push   eax
1000218c:	e8 fc ff ff ff       	call   1000218d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x517>	1000218d: R_386_PC32	Floppy::wasFailure()
10002191:	83 c4 10             	add    esp,0x10
10002194:	84 c0                	test   al,al
10002196:	74 2d                	je     100021c5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x54f>
10002198:	83 ec 0c             	sub    esp,0xc
1000219b:	68 b7 58 00 10       	push   0x100058b7	1000219c: R_386_32	.text
100021a0:	e8 fc ff ff ff       	call   100021a1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x52b>	100021a1: R_386_PC32	Dbg::kprintf(char const*, ...)
100021a5:	83 c4 10             	add    esp,0x10
100021a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021ab:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021b1:	83 ec 0c             	sub    esp,0xc
100021b4:	50                   	push   eax
100021b5:	e8 fc ff ff ff       	call   100021b6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x540>	100021b6: R_386_PC32	Floppy::reset()
100021ba:	83 c4 10             	add    esp,0x10
100021bd:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100021c0:	e9 25 fb ff ff       	jmp    10001cea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100021c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021c8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021ce:	83 ec 0c             	sub    esp,0xc
100021d1:	50                   	push   eax
100021d2:	e8 fc ff ff ff       	call   100021d3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x55d>	100021d3: R_386_PC32	Floppy::readData()
100021d7:	83 c4 10             	add    esp,0x10
100021da:	88 45 dd             	mov    BYTE PTR [ebp-0x23],al
100021dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021e0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021e6:	83 ec 0c             	sub    esp,0xc
100021e9:	50                   	push   eax
100021ea:	e8 fc ff ff ff       	call   100021eb <FloppyDrive::doTrack(int, bool, unsigned char*)+0x575>	100021eb: R_386_PC32	Floppy::wasFailure()
100021ef:	83 c4 10             	add    esp,0x10
100021f2:	84 c0                	test   al,al
100021f4:	74 2d                	je     10002223 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5ad>
100021f6:	83 ec 0c             	sub    esp,0xc
100021f9:	68 b7 58 00 10       	push   0x100058b7	100021fa: R_386_32	.text
100021fe:	e8 fc ff ff ff       	call   100021ff <FloppyDrive::doTrack(int, bool, unsigned char*)+0x589>	100021ff: R_386_PC32	Dbg::kprintf(char const*, ...)
10002203:	83 c4 10             	add    esp,0x10
10002206:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002209:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000220f:	83 ec 0c             	sub    esp,0xc
10002212:	50                   	push   eax
10002213:	e8 fc ff ff ff       	call   10002214 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x59e>	10002214: R_386_PC32	Floppy::reset()
10002218:	83 c4 10             	add    esp,0x10
1000221b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000221e:	e9 c7 fa ff ff       	jmp    10001cea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002223:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002226:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000222c:	83 ec 0c             	sub    esp,0xc
1000222f:	50                   	push   eax
10002230:	e8 fc ff ff ff       	call   10002231 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5bb>	10002231: R_386_PC32	Floppy::readData()
10002235:	83 c4 10             	add    esp,0x10
10002238:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
1000223b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000223e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002244:	83 ec 0c             	sub    esp,0xc
10002247:	50                   	push   eax
10002248:	e8 fc ff ff ff       	call   10002249 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5d3>	10002249: R_386_PC32	Floppy::wasFailure()
1000224d:	83 c4 10             	add    esp,0x10
10002250:	84 c0                	test   al,al
10002252:	74 2d                	je     10002281 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x60b>
10002254:	83 ec 0c             	sub    esp,0xc
10002257:	68 b7 58 00 10       	push   0x100058b7	10002258: R_386_32	.text
1000225c:	e8 fc ff ff ff       	call   1000225d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5e7>	1000225d: R_386_PC32	Dbg::kprintf(char const*, ...)
10002261:	83 c4 10             	add    esp,0x10
10002264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002267:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000226d:	83 ec 0c             	sub    esp,0xc
10002270:	50                   	push   eax
10002271:	e8 fc ff ff ff       	call   10002272 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5fc>	10002272: R_386_PC32	Floppy::reset()
10002276:	83 c4 10             	add    esp,0x10
10002279:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000227c:	e9 69 fa ff ff       	jmp    10001cea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002284:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000228a:	83 ec 0c             	sub    esp,0xc
1000228d:	50                   	push   eax
1000228e:	e8 fc ff ff ff       	call   1000228f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x619>	1000228f: R_386_PC32	Floppy::readData()
10002293:	83 c4 10             	add    esp,0x10
10002296:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
10002299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022a2:	83 ec 0c             	sub    esp,0xc
100022a5:	50                   	push   eax
100022a6:	e8 fc ff ff ff       	call   100022a7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x631>	100022a7: R_386_PC32	Floppy::wasFailure()
100022ab:	83 c4 10             	add    esp,0x10
100022ae:	84 c0                	test   al,al
100022b0:	74 2d                	je     100022df <FloppyDrive::doTrack(int, bool, unsigned char*)+0x669>
100022b2:	83 ec 0c             	sub    esp,0xc
100022b5:	68 b7 58 00 10       	push   0x100058b7	100022b6: R_386_32	.text
100022ba:	e8 fc ff ff ff       	call   100022bb <FloppyDrive::doTrack(int, bool, unsigned char*)+0x645>	100022bb: R_386_PC32	Dbg::kprintf(char const*, ...)
100022bf:	83 c4 10             	add    esp,0x10
100022c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022c5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022cb:	83 ec 0c             	sub    esp,0xc
100022ce:	50                   	push   eax
100022cf:	e8 fc ff ff ff       	call   100022d0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x65a>	100022d0: R_386_PC32	Floppy::reset()
100022d4:	83 c4 10             	add    esp,0x10
100022d7:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100022da:	e9 0b fa ff ff       	jmp    10001cea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100022df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022e2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022e8:	83 ec 0c             	sub    esp,0xc
100022eb:	50                   	push   eax
100022ec:	e8 fc ff ff ff       	call   100022ed <FloppyDrive::doTrack(int, bool, unsigned char*)+0x677>	100022ed: R_386_PC32	Floppy::readData()
100022f1:	83 c4 10             	add    esp,0x10
100022f4:	88 45 da             	mov    BYTE PTR [ebp-0x26],al
100022f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022fa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002300:	83 ec 0c             	sub    esp,0xc
10002303:	50                   	push   eax
10002304:	e8 fc ff ff ff       	call   10002305 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x68f>	10002305: R_386_PC32	Floppy::wasFailure()
10002309:	83 c4 10             	add    esp,0x10
1000230c:	84 c0                	test   al,al
1000230e:	74 2d                	je     1000233d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6c7>
10002310:	83 ec 0c             	sub    esp,0xc
10002313:	68 b7 58 00 10       	push   0x100058b7	10002314: R_386_32	.text
10002318:	e8 fc ff ff ff       	call   10002319 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6a3>	10002319: R_386_PC32	Dbg::kprintf(char const*, ...)
1000231d:	83 c4 10             	add    esp,0x10
10002320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002323:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002329:	83 ec 0c             	sub    esp,0xc
1000232c:	50                   	push   eax
1000232d:	e8 fc ff ff ff       	call   1000232e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6b8>	1000232e: R_386_PC32	Floppy::reset()
10002332:	83 c4 10             	add    esp,0x10
10002335:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002338:	e9 ad f9 ff ff       	jmp    10001cea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000233d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002340:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002346:	83 ec 0c             	sub    esp,0xc
10002349:	50                   	push   eax
1000234a:	e8 fc ff ff ff       	call   1000234b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6d5>	1000234b: R_386_PC32	Floppy::readData()
1000234f:	83 c4 10             	add    esp,0x10
10002352:	88 45 d9             	mov    BYTE PTR [ebp-0x27],al
10002355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002358:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000235e:	83 ec 0c             	sub    esp,0xc
10002361:	50                   	push   eax
10002362:	e8 fc ff ff ff       	call   10002363 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6ed>	10002363: R_386_PC32	Floppy::wasFailure()
10002367:	83 c4 10             	add    esp,0x10
1000236a:	84 c0                	test   al,al
1000236c:	74 2d                	je     1000239b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x725>
1000236e:	83 ec 0c             	sub    esp,0xc
10002371:	68 b7 58 00 10       	push   0x100058b7	10002372: R_386_32	.text
10002376:	e8 fc ff ff ff       	call   10002377 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x701>	10002377: R_386_PC32	Dbg::kprintf(char const*, ...)
1000237b:	83 c4 10             	add    esp,0x10
1000237e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002381:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002387:	83 ec 0c             	sub    esp,0xc
1000238a:	50                   	push   eax
1000238b:	e8 fc ff ff ff       	call   1000238c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x716>	1000238c: R_386_PC32	Floppy::reset()
10002390:	83 c4 10             	add    esp,0x10
10002393:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002396:	e9 4f f9 ff ff       	jmp    10001cea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000239b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000239e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023a4:	83 ec 0c             	sub    esp,0xc
100023a7:	50                   	push   eax
100023a8:	e8 fc ff ff ff       	call   100023a9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x733>	100023a9: R_386_PC32	Floppy::readData()
100023ad:	83 c4 10             	add    esp,0x10
100023b0:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
100023b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023b6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023bc:	83 ec 0c             	sub    esp,0xc
100023bf:	50                   	push   eax
100023c0:	e8 fc ff ff ff       	call   100023c1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74b>	100023c1: R_386_PC32	Floppy::wasFailure()
100023c5:	83 c4 10             	add    esp,0x10
100023c8:	84 c0                	test   al,al
100023ca:	74 2d                	je     100023f9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x783>
100023cc:	83 ec 0c             	sub    esp,0xc
100023cf:	68 b7 58 00 10       	push   0x100058b7	100023d0: R_386_32	.text
100023d4:	e8 fc ff ff ff       	call   100023d5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x75f>	100023d5: R_386_PC32	Dbg::kprintf(char const*, ...)
100023d9:	83 c4 10             	add    esp,0x10
100023dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023df:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023e5:	83 ec 0c             	sub    esp,0xc
100023e8:	50                   	push   eax
100023e9:	e8 fc ff ff ff       	call   100023ea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x774>	100023ea: R_386_PC32	Floppy::reset()
100023ee:	83 c4 10             	add    esp,0x10
100023f1:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100023f4:	e9 f1 f8 ff ff       	jmp    10001cea <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100023f9:	83 ec 0c             	sub    esp,0xc
100023fc:	68 d0 58 00 10       	push   0x100058d0	100023fd: R_386_32	.text
10002401:	e8 fc ff ff ff       	call   10002402 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x78c>	10002402: R_386_PC32	Dbg::kprintf(char const*, ...)
10002406:	83 c4 10             	add    esp,0x10
10002409:	83 ec 0c             	sub    esp,0xc
1000240c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000240f:	e8 fc ff ff ff       	call   10002410 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x79a>	10002410: R_386_PC32	FloppyDrive::motorOff()
10002414:	83 c4 10             	add    esp,0x10
10002417:	83 ec 0c             	sub    esp,0xc
1000241a:	68 e4 58 00 10       	push   0x100058e4	1000241b: R_386_32	.text
1000241f:	e8 fc ff ff ff       	call   10002420 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7aa>	10002420: R_386_PC32	Dbg::kprintf(char const*, ...)
10002424:	83 c4 10             	add    esp,0x10
10002427:	83 ec 0c             	sub    esp,0xc
1000242a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000242d:	e8 fc ff ff ff       	call   1000242e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7b8>	1000242e: R_386_PC32	FloppyDrive::unselect()
10002432:	83 c4 10             	add    esp,0x10
10002435:	83 ec 0c             	sub    esp,0xc
10002438:	68 ef 58 00 10       	push   0x100058ef	10002439: R_386_32	.text
1000243d:	e8 fc ff ff ff       	call   1000243e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7c8>	1000243e: R_386_PC32	Dbg::kprintf(char const*, ...)
10002442:	83 c4 10             	add    esp,0x10
10002445:	8a 45 94             	mov    al,BYTE PTR [ebp-0x6c]
10002448:	83 f0 01             	xor    eax,0x1
1000244b:	84 c0                	test   al,al
1000244d:	74 45                	je     10002494 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x81e>
1000244f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002452:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002458:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
1000245e:	89 c2                	mov    edx,eax
10002460:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10002463:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002466:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
10002469:	c7 45 b0 00 48 00 00 	mov    DWORD PTR [ebp-0x50],0x4800
10002470:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002473:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
10002476:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
10002479:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
1000247c:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
1000247f:	89 c6                	mov    esi,eax
10002481:	89 d7                	mov    edi,edx
10002483:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002485:	89 c8                	mov    eax,ecx
10002487:	89 fa                	mov    edx,edi
10002489:	89 f3                	mov    ebx,esi
1000248b:	89 5d a8             	mov    DWORD PTR [ebp-0x58],ebx
1000248e:	89 55 a4             	mov    DWORD PTR [ebp-0x5c],edx
10002491:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10002494:	b8 00 00 00 00       	mov    eax,0x0
10002499:	8d 65 f4             	lea    esp,[ebp-0xc]
1000249c:	5b                   	pop    ebx
1000249d:	5e                   	pop    esi
1000249e:	5f                   	pop    edi
1000249f:	5d                   	pop    ebp
100024a0:	c3                   	ret    
100024a1:	90                   	nop

100024a2 <FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)>:
100024a2:	55                   	push   ebp
100024a3:	89 e5                	mov    ebp,esp
100024a5:	83 ec 10             	sub    esp,0x10
100024a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024ab:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100024b1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100024b4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100024ba:	83 c2 64             	add    edx,0x64
100024bd:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
100024c1:	89 d0                	mov    eax,edx
100024c3:	c1 e0 02             	shl    eax,0x2
100024c6:	01 d0                	add    eax,edx
100024c8:	c1 e0 02             	shl    eax,0x2
100024cb:	01 d0                	add    eax,edx
100024cd:	05 13 00 00 00       	add    eax,0x13	100024ce: R_386_32	floppyTable
100024d2:	8a 00                	mov    al,BYTE PTR [eax]
100024d4:	0f b6 c0             	movzx  eax,al
100024d7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100024da:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100024dd:	01 c0                	add    eax,eax
100024df:	89 c1                	mov    ecx,eax
100024e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100024e4:	ba 00 00 00 00       	mov    edx,0x0
100024e9:	f7 f1                	div    ecx
100024eb:	89 c2                	mov    edx,eax
100024ed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100024f0:	89 10                	mov    DWORD PTR [eax],edx
100024f2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100024f5:	01 c0                	add    eax,eax
100024f7:	89 c1                	mov    ecx,eax
100024f9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100024fc:	ba 00 00 00 00       	mov    edx,0x0
10002501:	f7 f1                	div    ecx
10002503:	89 d0                	mov    eax,edx
10002505:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
10002508:	ba 00 00 00 00       	mov    edx,0x0
1000250d:	f7 f1                	div    ecx
1000250f:	89 c2                	mov    edx,eax
10002511:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10002514:	89 10                	mov    DWORD PTR [eax],edx
10002516:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10002519:	01 c0                	add    eax,eax
1000251b:	89 c1                	mov    ecx,eax
1000251d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002520:	ba 00 00 00 00       	mov    edx,0x0
10002525:	f7 f1                	div    ecx
10002527:	89 d0                	mov    eax,edx
10002529:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
1000252c:	ba 00 00 00 00       	mov    edx,0x0
10002531:	f7 f1                	div    ecx
10002533:	89 d0                	mov    eax,edx
10002535:	40                   	inc    eax
10002536:	89 c2                	mov    edx,eax
10002538:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000253b:	89 10                	mov    DWORD PTR [eax],edx
1000253d:	90                   	nop
1000253e:	c9                   	leave  
1000253f:	c3                   	ret    

10002540 <FloppyDrive::read(unsigned long long, int, void*)>:
10002540:	55                   	push   ebp
10002541:	89 e5                	mov    ebp,esp
10002543:	57                   	push   edi
10002544:	56                   	push   esi
10002545:	53                   	push   ebx
10002546:	83 ec 6c             	sub    esp,0x6c
10002549:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000254c:	89 45 90             	mov    DWORD PTR [ebp-0x70],eax
1000254f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10002552:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10002555:	a0 00 00 00 00       	mov    al,ds:0x0	10002556: R_386_32	_TEMP_allocated
1000255a:	83 f0 01             	xor    eax,0x1
1000255d:	84 c0                	test   al,al
1000255f:	74 46                	je     100025a7 <FloppyDrive::read(unsigned long long, int, void*)+0x67>
10002561:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10002563: R_386_32	_TEMP_allocated
10002568:	83 ec 0c             	sub    esp,0xc
1000256b:	68 00 48 00 00       	push   0x4800
10002570:	e8 fc ff ff ff       	call   10002571 <FloppyDrive::read(unsigned long long, int, void*)+0x31>	10002571: R_386_PC32	malloc
10002575:	83 c4 10             	add    esp,0x10
10002578:	a3 00 00 00 00       	mov    ds:0x0,eax	10002579: R_386_32	_TEMP_trackBuffer
1000257d:	83 ec 0c             	sub    esp,0xc
10002580:	68 00 48 00 00       	push   0x4800
10002585:	e8 fc ff ff ff       	call   10002586 <FloppyDrive::read(unsigned long long, int, void*)+0x46>	10002586: R_386_PC32	malloc
1000258a:	83 c4 10             	add    esp,0x10
1000258d:	a3 00 00 00 00       	mov    ds:0x0,eax	1000258e: R_386_32	_TEMP_cylinder0_bf
10002592:	83 ec 0c             	sub    esp,0xc
10002595:	68 00 48 00 00       	push   0x4800
1000259a:	e8 fc ff ff ff       	call   1000259b <FloppyDrive::read(unsigned long long, int, void*)+0x5b>	1000259b: R_386_PC32	malloc
1000259f:	83 c4 10             	add    esp,0x10
100025a2:	a3 00 00 00 00       	mov    ds:0x0,eax	100025a3: R_386_32	_TEMP_write_bf
100025a7:	83 7d 14 01          	cmp    DWORD PTR [ebp+0x14],0x1
100025ab:	74 10                	je     100025bd <FloppyDrive::read(unsigned long long, int, void*)+0x7d>
100025ad:	83 ec 0c             	sub    esp,0xc
100025b0:	68 fa 58 00 10       	push   0x100058fa	100025b1: R_386_32	.text
100025b5:	e8 fc ff ff ff       	call   100025b6 <FloppyDrive::read(unsigned long long, int, void*)+0x76>	100025b6: R_386_PC32	Krnl::panic(char const*)
100025ba:	83 c4 10             	add    esp,0x10
100025bd:	83 ec 0c             	sub    esp,0xc
100025c0:	68 12 59 00 10       	push   0x10005912	100025c1: R_386_32	.text
100025c5:	e8 fc ff ff ff       	call   100025c6 <FloppyDrive::read(unsigned long long, int, void*)+0x86>	100025c6: R_386_PC32	Dbg::kprintf(char const*, ...)
100025ca:	83 c4 10             	add    esp,0x10
100025cd:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
100025d0:	83 ec 0c             	sub    esp,0xc
100025d3:	8d 55 a0             	lea    edx,[ebp-0x60]
100025d6:	52                   	push   edx
100025d7:	8d 55 a4             	lea    edx,[ebp-0x5c]
100025da:	52                   	push   edx
100025db:	8d 55 a8             	lea    edx,[ebp-0x58]
100025de:	52                   	push   edx
100025df:	50                   	push   eax
100025e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100025e3:	e8 fc ff ff ff       	call   100025e4 <FloppyDrive::read(unsigned long long, int, void*)+0xa4>	100025e4: R_386_PC32	FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)
100025e8:	83 c4 20             	add    esp,0x20
100025eb:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
100025ee:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
100025f1:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
100025f4:	51                   	push   ecx
100025f5:	52                   	push   edx
100025f6:	50                   	push   eax
100025f7:	68 2d 59 00 10       	push   0x1000592d	100025f8: R_386_32	.text
100025fc:	e8 fc ff ff ff       	call   100025fd <FloppyDrive::read(unsigned long long, int, void*)+0xbd>	100025fd: R_386_PC32	Dbg::kprintf(char const*, ...)
10002601:	83 c4 10             	add    esp,0x10
10002604:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10002607:	85 c0                	test   eax,eax
10002609:	75 2a                	jne    10002635 <FloppyDrive::read(unsigned long long, int, void*)+0xf5>
1000260b:	a0 00 00 00 00       	mov    al,ds:0x0	1000260c: R_386_32	hasCyl0Bf
10002610:	83 f0 01             	xor    eax,0x1
10002613:	84 c0                	test   al,al
10002615:	74 5a                	je     10002671 <FloppyDrive::read(unsigned long long, int, void*)+0x131>
10002617:	a1 00 00 00 00       	mov    eax,ds:0x0	10002618: R_386_32	_TEMP_cylinder0_bf
1000261c:	50                   	push   eax
1000261d:	6a 00                	push   0x0
1000261f:	6a 00                	push   0x0
10002621:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002624:	e8 fc ff ff ff       	call   10002625 <FloppyDrive::read(unsigned long long, int, void*)+0xe5>	10002625: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002629:	83 c4 10             	add    esp,0x10
1000262c:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000262e: R_386_32	hasCyl0Bf
10002633:	eb 3c                	jmp    10002671 <FloppyDrive::read(unsigned long long, int, void*)+0x131>
10002635:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
10002638:	a1 00 00 00 00       	mov    eax,ds:0x0	10002639: R_386_32	_TEMP_cyl
1000263d:	39 c2                	cmp    edx,eax
1000263f:	74 30                	je     10002671 <FloppyDrive::read(unsigned long long, int, void*)+0x131>
10002641:	83 ec 0c             	sub    esp,0xc
10002644:	68 45 59 00 10       	push   0x10005945	10002645: R_386_32	.text
10002649:	e8 fc ff ff ff       	call   1000264a <FloppyDrive::read(unsigned long long, int, void*)+0x10a>	1000264a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000264e:	83 c4 10             	add    esp,0x10
10002651:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002653: R_386_32	_TEMP_trackBuffer
10002657:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
1000265a:	52                   	push   edx
1000265b:	6a 00                	push   0x0
1000265d:	50                   	push   eax
1000265e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002661:	e8 fc ff ff ff       	call   10002662 <FloppyDrive::read(unsigned long long, int, void*)+0x122>	10002662: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002666:	83 c4 10             	add    esp,0x10
10002669:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
1000266c:	a3 00 00 00 00       	mov    ds:0x0,eax	1000266d: R_386_32	_TEMP_cyl
10002671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002674:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000267a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000267d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10002683:	83 c2 64             	add    edx,0x64
10002686:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
1000268a:	89 d0                	mov    eax,edx
1000268c:	c1 e0 02             	shl    eax,0x2
1000268f:	01 d0                	add    eax,edx
10002691:	c1 e0 02             	shl    eax,0x2
10002694:	01 d0                	add    eax,edx
10002696:	05 13 00 00 00       	add    eax,0x13	10002697: R_386_32	floppyTable
1000269b:	8a 00                	mov    al,BYTE PTR [eax]
1000269d:	0f b6 c0             	movzx  eax,al
100026a0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100026a3:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
100026a6:	85 c0                	test   eax,eax
100026a8:	75 53                	jne    100026fd <FloppyDrive::read(unsigned long long, int, void*)+0x1bd>
100026aa:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100026ac: R_386_32	_TEMP_cylinder0_bf
100026b0:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
100026b3:	48                   	dec    eax
100026b4:	c1 e0 09             	shl    eax,0x9
100026b7:	89 c1                	mov    ecx,eax
100026b9:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
100026bc:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
100026c0:	c1 e0 09             	shl    eax,0x9
100026c3:	01 c8                	add    eax,ecx
100026c5:	01 c2                	add    edx,eax
100026c7:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100026ca:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100026cd:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
100026d0:	c7 45 d8 00 02 00 00 	mov    DWORD PTR [ebp-0x28],0x200
100026d7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100026da:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
100026dd:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100026e0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
100026e3:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100026e6:	89 c6                	mov    esi,eax
100026e8:	89 d7                	mov    edi,edx
100026ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100026ec:	89 c8                	mov    eax,ecx
100026ee:	89 fa                	mov    edx,edi
100026f0:	89 f3                	mov    ebx,esi
100026f2:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
100026f5:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100026f8:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100026fb:	eb 51                	jmp    1000274e <FloppyDrive::read(unsigned long long, int, void*)+0x20e>
100026fd:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100026ff: R_386_32	_TEMP_trackBuffer
10002703:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10002706:	48                   	dec    eax
10002707:	c1 e0 09             	shl    eax,0x9
1000270a:	89 c1                	mov    ecx,eax
1000270c:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
1000270f:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
10002713:	c1 e0 09             	shl    eax,0x9
10002716:	01 c8                	add    eax,ecx
10002718:	01 c2                	add    edx,eax
1000271a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000271d:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10002720:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
10002723:	c7 45 bc 00 02 00 00 	mov    DWORD PTR [ebp-0x44],0x200
1000272a:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
1000272d:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
10002730:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002733:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002736:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10002739:	89 c6                	mov    esi,eax
1000273b:	89 d7                	mov    edi,edx
1000273d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000273f:	89 c8                	mov    eax,ecx
10002741:	89 fa                	mov    edx,edi
10002743:	89 f3                	mov    ebx,esi
10002745:	89 5d b4             	mov    DWORD PTR [ebp-0x4c],ebx
10002748:	89 55 b0             	mov    DWORD PTR [ebp-0x50],edx
1000274b:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
1000274e:	b8 00 00 00 00       	mov    eax,0x0
10002753:	8d 65 f4             	lea    esp,[ebp-0xc]
10002756:	5b                   	pop    ebx
10002757:	5e                   	pop    esi
10002758:	5f                   	pop    edi
10002759:	5d                   	pop    ebp
1000275a:	c3                   	ret    
1000275b:	90                   	nop

1000275c <FloppyDrive::write(unsigned long long, int, void*)>:
1000275c:	55                   	push   ebp
1000275d:	89 e5                	mov    ebp,esp
1000275f:	57                   	push   edi
10002760:	56                   	push   esi
10002761:	53                   	push   ebx
10002762:	81 ec 8c 00 00 00    	sub    esp,0x8c
10002768:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000276b:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
10002771:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10002774:	89 85 74 ff ff ff    	mov    DWORD PTR [ebp-0x8c],eax
1000277a:	a0 00 00 00 00       	mov    al,ds:0x0	1000277b: R_386_32	_TEMP_allocated
1000277f:	83 f0 01             	xor    eax,0x1
10002782:	84 c0                	test   al,al
10002784:	74 46                	je     100027cc <FloppyDrive::write(unsigned long long, int, void*)+0x70>
10002786:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10002788: R_386_32	_TEMP_allocated
1000278d:	83 ec 0c             	sub    esp,0xc
10002790:	68 00 48 00 00       	push   0x4800
10002795:	e8 fc ff ff ff       	call   10002796 <FloppyDrive::write(unsigned long long, int, void*)+0x3a>	10002796: R_386_PC32	malloc
1000279a:	83 c4 10             	add    esp,0x10
1000279d:	a3 00 00 00 00       	mov    ds:0x0,eax	1000279e: R_386_32	_TEMP_trackBuffer
100027a2:	83 ec 0c             	sub    esp,0xc
100027a5:	68 00 48 00 00       	push   0x4800
100027aa:	e8 fc ff ff ff       	call   100027ab <FloppyDrive::write(unsigned long long, int, void*)+0x4f>	100027ab: R_386_PC32	malloc
100027af:	83 c4 10             	add    esp,0x10
100027b2:	a3 00 00 00 00       	mov    ds:0x0,eax	100027b3: R_386_32	_TEMP_cylinder0_bf
100027b7:	83 ec 0c             	sub    esp,0xc
100027ba:	68 00 48 00 00       	push   0x4800
100027bf:	e8 fc ff ff ff       	call   100027c0 <FloppyDrive::write(unsigned long long, int, void*)+0x64>	100027c0: R_386_PC32	malloc
100027c4:	83 c4 10             	add    esp,0x10
100027c7:	a3 00 00 00 00       	mov    ds:0x0,eax	100027c8: R_386_32	_TEMP_write_bf
100027cc:	83 7d 14 01          	cmp    DWORD PTR [ebp+0x14],0x1
100027d0:	74 5b                	je     1000282d <FloppyDrive::write(unsigned long long, int, void*)+0xd1>
100027d2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100027d9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100027dc:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
100027df:	7d 42                	jge    10002823 <FloppyDrive::write(unsigned long long, int, void*)+0xc7>
100027e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100027e4:	8b 00                	mov    eax,DWORD PTR [eax]
100027e6:	83 c0 2c             	add    eax,0x2c
100027e9:	8b 30                	mov    esi,DWORD PTR [eax]
100027eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100027ee:	89 c1                	mov    ecx,eax
100027f0:	89 c3                	mov    ebx,eax
100027f2:	c1 fb 1f             	sar    ebx,0x1f
100027f5:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [ebp-0x90]
100027fb:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [ebp-0x8c]
10002801:	01 c8                	add    eax,ecx
10002803:	11 da                	adc    edx,ebx
10002805:	83 ec 0c             	sub    esp,0xc
10002808:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000280b:	6a 01                	push   0x1
1000280d:	52                   	push   edx
1000280e:	50                   	push   eax
1000280f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002812:	ff d6                	call   esi
10002814:	83 c4 20             	add    esp,0x20
10002817:	81 45 18 00 02 00 00 	add    DWORD PTR [ebp+0x18],0x200
1000281e:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002821:	eb b6                	jmp    100027d9 <FloppyDrive::write(unsigned long long, int, void*)+0x7d>
10002823:	b8 00 00 00 00       	mov    eax,0x0
10002828:	e9 d1 01 00 00       	jmp    100029fe <FloppyDrive::write(unsigned long long, int, void*)+0x2a2>
1000282d:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [ebp-0x90]
10002833:	83 ec 0c             	sub    esp,0xc
10002836:	8d 55 80             	lea    edx,[ebp-0x80]
10002839:	52                   	push   edx
1000283a:	8d 55 84             	lea    edx,[ebp-0x7c]
1000283d:	52                   	push   edx
1000283e:	8d 55 88             	lea    edx,[ebp-0x78]
10002841:	52                   	push   edx
10002842:	50                   	push   eax
10002843:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002846:	e8 fc ff ff ff       	call   10002847 <FloppyDrive::write(unsigned long long, int, void*)+0xeb>	10002847: R_386_PC32	FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)
1000284b:	83 c4 20             	add    esp,0x20
1000284e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002851:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002857:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000285a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10002860:	83 c2 64             	add    edx,0x64
10002863:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10002867:	89 d0                	mov    eax,edx
10002869:	c1 e0 02             	shl    eax,0x2
1000286c:	01 d0                	add    eax,edx
1000286e:	c1 e0 02             	shl    eax,0x2
10002871:	01 d0                	add    eax,edx
10002873:	05 13 00 00 00       	add    eax,0x13	10002874: R_386_32	floppyTable
10002878:	8a 00                	mov    al,BYTE PTR [eax]
1000287a:	0f b6 c0             	movzx  eax,al
1000287d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002880:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002883:	85 c0                	test   eax,eax
10002885:	75 77                	jne    100028fe <FloppyDrive::write(unsigned long long, int, void*)+0x1a2>
10002887:	a0 00 00 00 00       	mov    al,ds:0x0	10002888: R_386_32	hasCyl0Bf
1000288c:	84 c0                	test   al,al
1000288e:	74 6e                	je     100028fe <FloppyDrive::write(unsigned long long, int, void*)+0x1a2>
10002890:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002892: R_386_32	_TEMP_cylinder0_bf
10002896:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002899:	48                   	dec    eax
1000289a:	c1 e0 09             	shl    eax,0x9
1000289d:	89 c1                	mov    ecx,eax
1000289f:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
100028a2:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
100028a6:	c1 e0 09             	shl    eax,0x9
100028a9:	01 c8                	add    eax,ecx
100028ab:	01 d0                	add    eax,edx
100028ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100028b0:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100028b3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100028b6:	c7 45 d4 00 02 00 00 	mov    DWORD PTR [ebp-0x2c],0x200
100028bd:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100028c0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100028c3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
100028c6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
100028c9:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
100028cc:	89 c6                	mov    esi,eax
100028ce:	89 d7                	mov    edi,edx
100028d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100028d2:	89 c8                	mov    eax,ecx
100028d4:	89 fa                	mov    edx,edi
100028d6:	89 f3                	mov    ebx,esi
100028d8:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
100028db:	89 55 c8             	mov    DWORD PTR [ebp-0x38],edx
100028de:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
100028e1:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100028e3: R_386_32	_TEMP_cylinder0_bf
100028e7:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
100028ea:	52                   	push   edx
100028eb:	6a 01                	push   0x1
100028ed:	50                   	push   eax
100028ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100028f1:	e8 fc ff ff ff       	call   100028f2 <FloppyDrive::write(unsigned long long, int, void*)+0x196>	100028f2: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
100028f6:	83 c4 10             	add    esp,0x10
100028f9:	e9 fb 00 00 00       	jmp    100029f9 <FloppyDrive::write(unsigned long long, int, void*)+0x29d>
100028fe:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
10002901:	a1 00 00 00 00       	mov    eax,ds:0x0	10002902: R_386_32	_TEMP_cyl
10002906:	39 c2                	cmp    edx,eax
10002908:	75 6e                	jne    10002978 <FloppyDrive::write(unsigned long long, int, void*)+0x21c>
1000290a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000290c: R_386_32	_TEMP_trackBuffer
10002910:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002913:	48                   	dec    eax
10002914:	c1 e0 09             	shl    eax,0x9
10002917:	89 c1                	mov    ecx,eax
10002919:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
1000291c:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
10002920:	c1 e0 09             	shl    eax,0x9
10002923:	01 c8                	add    eax,ecx
10002925:	01 d0                	add    eax,edx
10002927:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
1000292a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000292d:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10002930:	c7 45 b8 00 02 00 00 	mov    DWORD PTR [ebp-0x48],0x200
10002937:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
1000293a:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
1000293d:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10002940:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10002943:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
10002946:	89 c6                	mov    esi,eax
10002948:	89 d7                	mov    edi,edx
1000294a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000294c:	89 c8                	mov    eax,ecx
1000294e:	89 fa                	mov    edx,edi
10002950:	89 f3                	mov    ebx,esi
10002952:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
10002955:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10002958:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
1000295b:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000295d: R_386_32	_TEMP_trackBuffer
10002961:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002964:	52                   	push   edx
10002965:	6a 01                	push   0x1
10002967:	50                   	push   eax
10002968:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000296b:	e8 fc ff ff ff       	call   1000296c <FloppyDrive::write(unsigned long long, int, void*)+0x210>	1000296c: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002970:	83 c4 10             	add    esp,0x10
10002973:	e9 81 00 00 00       	jmp    100029f9 <FloppyDrive::write(unsigned long long, int, void*)+0x29d>
10002978:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000297a: R_386_32	_TEMP_write_bf
1000297e:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002981:	52                   	push   edx
10002982:	6a 00                	push   0x0
10002984:	50                   	push   eax
10002985:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002988:	e8 fc ff ff ff       	call   10002989 <FloppyDrive::write(unsigned long long, int, void*)+0x22d>	10002989: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
1000298d:	83 c4 10             	add    esp,0x10
10002990:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002992: R_386_32	_TEMP_write_bf
10002996:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002999:	48                   	dec    eax
1000299a:	c1 e0 09             	shl    eax,0x9
1000299d:	89 c1                	mov    ecx,eax
1000299f:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
100029a2:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
100029a6:	c1 e0 09             	shl    eax,0x9
100029a9:	01 c8                	add    eax,ecx
100029ab:	01 d0                	add    eax,edx
100029ad:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
100029b0:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100029b3:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
100029b6:	c7 45 9c 00 02 00 00 	mov    DWORD PTR [ebp-0x64],0x200
100029bd:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
100029c0:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
100029c3:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
100029c6:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
100029c9:	8b 4d 9c             	mov    ecx,DWORD PTR [ebp-0x64]
100029cc:	89 c6                	mov    esi,eax
100029ce:	89 d7                	mov    edi,edx
100029d0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100029d2:	89 c8                	mov    eax,ecx
100029d4:	89 fa                	mov    edx,edi
100029d6:	89 f3                	mov    ebx,esi
100029d8:	89 5d 94             	mov    DWORD PTR [ebp-0x6c],ebx
100029db:	89 55 90             	mov    DWORD PTR [ebp-0x70],edx
100029de:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
100029e1:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100029e3: R_386_32	_TEMP_write_bf
100029e7:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
100029ea:	52                   	push   edx
100029eb:	6a 01                	push   0x1
100029ed:	50                   	push   eax
100029ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100029f1:	e8 fc ff ff ff       	call   100029f2 <FloppyDrive::write(unsigned long long, int, void*)+0x296>	100029f2: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
100029f6:	83 c4 10             	add    esp,0x10
100029f9:	b8 00 00 00 00       	mov    eax,0x0
100029fe:	8d 65 f4             	lea    esp,[ebp-0xc]
10002a01:	5b                   	pop    ebx
10002a02:	5e                   	pop    esi
10002a03:	5f                   	pop    edi
10002a04:	5d                   	pop    ebp
10002a05:	c3                   	ret    

10002a06 <FloppyDrive::~FloppyDrive()>:
10002a06:	55                   	push   ebp
10002a07:	89 e5                	mov    ebp,esp
10002a09:	83 ec 08             	sub    esp,0x8
10002a0c:	ba 08 00 00 00       	mov    edx,0x8	10002a0d: R_386_32	vtable for FloppyDrive
10002a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a14:	89 10                	mov    DWORD PTR [eax],edx
10002a16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a19:	83 ec 0c             	sub    esp,0xc
10002a1c:	50                   	push   eax
10002a1d:	e8 fc ff ff ff       	call   10002a1e <FloppyDrive::~FloppyDrive()+0x18>	10002a1e: R_386_PC32	PhysicalDisk::~PhysicalDisk()
10002a22:	83 c4 10             	add    esp,0x10
10002a25:	90                   	nop
10002a26:	c9                   	leave  
10002a27:	c3                   	ret    

10002a28 <FloppyDrive::~FloppyDrive()>:
10002a28:	55                   	push   ebp
10002a29:	89 e5                	mov    ebp,esp
10002a2b:	83 ec 08             	sub    esp,0x8
10002a2e:	83 ec 0c             	sub    esp,0xc
10002a31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a34:	e8 fc ff ff ff       	call   10002a35 <FloppyDrive::~FloppyDrive()+0xd>	10002a35: R_386_PC32	FloppyDrive::~FloppyDrive()
10002a39:	83 c4 10             	add    esp,0x10
10002a3c:	83 ec 08             	sub    esp,0x8
10002a3f:	68 74 01 00 00       	push   0x174
10002a44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a47:	e8 fc ff ff ff       	call   10002a48 <FloppyDrive::~FloppyDrive()+0x20>	10002a48: R_386_PC32	operator delete(void*, unsigned long)
10002a4c:	83 c4 10             	add    esp,0x10
10002a4f:	c9                   	leave  
10002a50:	c3                   	ret    
10002a51:	90                   	nop

10002a52 <Gameport::Gameport()>:
10002a52:	55                   	push   ebp
10002a53:	89 e5                	mov    ebp,esp
10002a55:	83 ec 08             	sub    esp,0x8
10002a58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a5b:	83 ec 08             	sub    esp,0x8
10002a5e:	68 5c 5a 00 10       	push   0x10005a5c	10002a5f: R_386_32	.text
10002a63:	50                   	push   eax
10002a64:	e8 fc ff ff ff       	call   10002a65 <Gameport::Gameport()+0x13>	10002a65: R_386_PC32	Device::Device(char const*)
10002a69:	83 c4 10             	add    esp,0x10
10002a6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a6f:	05 58 01 00 00       	add    eax,0x158
10002a74:	83 ec 0c             	sub    esp,0xc
10002a77:	50                   	push   eax
10002a78:	e8 fc ff ff ff       	call   10002a79 <Gameport::Gameport()+0x27>	10002a79: R_386_PC32	JoystickHost::JoystickHost()
10002a7d:	83 c4 10             	add    esp,0x10
10002a80:	ba 08 00 00 00       	mov    edx,0x8	10002a81: R_386_32	vtable for Gameport
10002a85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a88:	89 10                	mov    DWORD PTR [eax],edx
10002a8a:	ba 38 00 00 00       	mov    edx,0x38	10002a8b: R_386_32	vtable for Gameport
10002a8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a92:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10002a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a9b:	c7 80 5c 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x15c],0x14a
10002aa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002aa8:	c7 80 60 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x160],0x14a
10002ab2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ab5:	c7 80 64 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x164],0x14a
10002abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ac2:	c7 80 68 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x168],0x14a
10002acc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002acf:	c7 80 6c 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x16c],0x3d4
10002ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002adc:	c7 80 70 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x170],0x3d4
10002ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ae9:	c7 80 74 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x174],0x3d4
10002af3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002af6:	c7 80 78 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x178],0x3d4
10002b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b03:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
10002b0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b0d:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10002b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b17:	c6 80 7e 01 00 00 00 	mov    BYTE PTR [eax+0x17e],0x0
10002b1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b21:	c6 80 7f 01 00 00 00 	mov    BYTE PTR [eax+0x17f],0x0
10002b28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b2b:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
10002b32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b35:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10002b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b3f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002b45:	0f b6 d0             	movzx  edx,al
10002b48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b4b:	66 c7 44 90 04 01 02 	mov    WORD PTR [eax+edx*4+0x4],0x201
10002b52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b55:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002b5b:	0f b6 d0             	movzx  edx,al
10002b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b61:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10002b66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b69:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002b6f:	8d 50 01             	lea    edx,[eax+0x1]
10002b72:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10002b75:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10002b7b:	0f b6 d0             	movzx  edx,al
10002b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b81:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10002b85:	83 e1 3f             	and    ecx,0x3f
10002b88:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10002b8c:	90                   	nop
10002b8d:	c9                   	leave  
10002b8e:	c3                   	ret    
10002b8f:	90                   	nop

10002b90 <Gameport::~Gameport()>:
10002b90:	55                   	push   ebp
10002b91:	89 e5                	mov    ebp,esp
10002b93:	83 ec 08             	sub    esp,0x8
10002b96:	ba 08 00 00 00       	mov    edx,0x8	10002b97: R_386_32	vtable for Gameport
10002b9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b9e:	89 10                	mov    DWORD PTR [eax],edx
10002ba0:	ba 38 00 00 00       	mov    edx,0x38	10002ba1: R_386_32	vtable for Gameport
10002ba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ba8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10002bae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bb1:	83 ec 0c             	sub    esp,0xc
10002bb4:	50                   	push   eax
10002bb5:	e8 fc ff ff ff       	call   10002bb6 <Gameport::~Gameport()+0x26>	10002bb6: R_386_PC32	Device::~Device()
10002bba:	83 c4 10             	add    esp,0x10
10002bbd:	90                   	nop
10002bbe:	c9                   	leave  
10002bbf:	c3                   	ret    

10002bc0 <Gameport::~Gameport()>:
10002bc0:	55                   	push   ebp
10002bc1:	89 e5                	mov    ebp,esp
10002bc3:	83 ec 08             	sub    esp,0x8
10002bc6:	83 ec 0c             	sub    esp,0xc
10002bc9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002bcc:	e8 fc ff ff ff       	call   10002bcd <Gameport::~Gameport()+0xd>	10002bcd: R_386_PC32	Gameport::~Gameport()
10002bd1:	83 c4 10             	add    esp,0x10
10002bd4:	83 ec 08             	sub    esp,0x8
10002bd7:	68 80 01 00 00       	push   0x180
10002bdc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002bdf:	e8 fc ff ff ff       	call   10002be0 <Gameport::~Gameport()+0x20>	10002be0: R_386_PC32	operator delete(void*, unsigned long)
10002be4:	83 c4 10             	add    esp,0x10
10002be7:	c9                   	leave  
10002be8:	c3                   	ret    
10002be9:	90                   	nop

10002bea <Gameport::calibration(int)>:
10002bea:	57                   	push   edi
10002beb:	56                   	push   esi
10002bec:	53                   	push   ebx
10002bed:	81 ec d0 00 00 00    	sub    esp,0xd0
10002bf3:	8b 9c 24 e0 00 00 00 	mov    ebx,DWORD PTR [esp+0xe0]
10002bfa:	8b b4 24 e4 00 00 00 	mov    esi,DWORD PTR [esp+0xe4]
10002c01:	80 bb 7e 01 00 00 00 	cmp    BYTE PTR [ebx+0x17e],0x0
10002c08:	74 0c                	je     10002c16 <Gameport::calibration(int)+0x2c>
10002c0a:	c6 83 7f 01 00 00 01 	mov    BYTE PTR [ebx+0x17f],0x1
10002c11:	e9 09 01 00 00       	jmp    10002d1f <Gameport::calibration(int)+0x135>
10002c16:	8d bc 24 9c 00 00 00 	lea    edi,[esp+0x9c]
10002c1d:	50                   	push   eax
10002c1e:	56                   	push   esi
10002c1f:	53                   	push   ebx
10002c20:	57                   	push   edi
10002c21:	e8 fc ff ff ff       	call   10002c22 <Gameport::calibration(int)+0x38>	10002c22: R_386_PC32	Gameport::readRaw(int)
10002c26:	83 ec 0c             	sub    esp,0xc
10002c29:	6a 00                	push   0x0
10002c2b:	68 40 42 0f 00       	push   0xf4240
10002c30:	e8 fc ff ff ff       	call   10002c31 <Gameport::calibration(int)+0x47>	10002c31: R_386_PC32	nanoSleep(unsigned long long)
10002c35:	8d 44 24 20          	lea    eax,[esp+0x20]
10002c39:	83 c4 1c             	add    esp,0x1c
10002c3c:	56                   	push   esi
10002c3d:	53                   	push   ebx
10002c3e:	50                   	push   eax
10002c3f:	e8 fc ff ff ff       	call   10002c40 <Gameport::calibration(int)+0x56>	10002c40: R_386_PC32	Gameport::readRaw(int)
10002c44:	83 ec 0c             	sub    esp,0xc
10002c47:	6a 00                	push   0x0
10002c49:	68 40 42 0f 00       	push   0xf4240
10002c4e:	e8 fc ff ff ff       	call   10002c4f <Gameport::calibration(int)+0x65>	10002c4f: R_386_PC32	nanoSleep(unsigned long long)
10002c53:	8d 44 24 54          	lea    eax,[esp+0x54]
10002c57:	83 c4 1c             	add    esp,0x1c
10002c5a:	56                   	push   esi
10002c5b:	53                   	push   ebx
10002c5c:	50                   	push   eax
10002c5d:	e8 fc ff ff ff       	call   10002c5e <Gameport::calibration(int)+0x74>	10002c5e: R_386_PC32	Gameport::readRaw(int)
10002c62:	83 ec 0c             	sub    esp,0xc
10002c65:	6a 00                	push   0x0
10002c67:	68 40 42 0f 00       	push   0xf4240
10002c6c:	e8 fc ff ff ff       	call   10002c6d <Gameport::calibration(int)+0x83>	10002c6d: R_386_PC32	nanoSleep(unsigned long long)
10002c71:	8d 84 24 88 00 00 00 	lea    eax,[esp+0x88]
10002c78:	83 c4 1c             	add    esp,0x1c
10002c7b:	56                   	push   esi
10002c7c:	53                   	push   ebx
10002c7d:	50                   	push   eax
10002c7e:	e8 fc ff ff ff       	call   10002c7f <Gameport::calibration(int)+0x95>	10002c7f: R_386_PC32	Gameport::readRaw(int)
10002c83:	83 ec 0c             	sub    esp,0xc
10002c86:	6a 00                	push   0x0
10002c88:	68 40 42 0f 00       	push   0xf4240
10002c8d:	e8 fc ff ff ff       	call   10002c8e <Gameport::calibration(int)+0xa4>	10002c8e: R_386_PC32	nanoSleep(unsigned long long)
10002c92:	83 c4 1c             	add    esp,0x1c
10002c95:	56                   	push   esi
10002c96:	53                   	push   ebx
10002c97:	57                   	push   edi
10002c98:	bf 03 00 00 00       	mov    edi,0x3
10002c9d:	e8 fc ff ff ff       	call   10002c9e <Gameport::calibration(int)+0xb4>	10002c9e: R_386_PC32	Gameport::readRaw(int)
10002ca2:	31 d2                	xor    edx,edx
10002ca4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10002ca8:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
10002cac:	03 84 24 88 00 00 00 	add    eax,DWORD PTR [esp+0x88]
10002cb3:	f7 f7                	div    edi
10002cb5:	31 d2                	xor    edx,edx
10002cb7:	89 c1                	mov    ecx,eax
10002cb9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10002cbd:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10002cc1:	03 84 24 8c 00 00 00 	add    eax,DWORD PTR [esp+0x8c]
10002cc8:	83 c4 0c             	add    esp,0xc
10002ccb:	f7 f7                	div    edi
10002ccd:	85 f6                	test   esi,esi
10002ccf:	75 0e                	jne    10002cdf <Gameport::calibration(int)+0xf5>
10002cd1:	89 8b 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],ecx
10002cd7:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10002cdd:	eb 0c                	jmp    10002ceb <Gameport::calibration(int)+0x101>
10002cdf:	89 8b 64 01 00 00    	mov    DWORD PTR [ebx+0x164],ecx
10002ce5:	89 83 68 01 00 00    	mov    DWORD PTR [ebx+0x168],eax
10002ceb:	6b 83 5c 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x15c],0x3
10002cf2:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
10002cf8:	6b 83 60 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x160],0x3
10002cff:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
10002d05:	6b 83 64 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x164],0x3
10002d0c:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
10002d12:	6b 83 68 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x168],0x3
10002d19:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
10002d1f:	81 c4 d0 00 00 00    	add    esp,0xd0
10002d25:	5b                   	pop    ebx
10002d26:	5e                   	pop    esi
10002d27:	5f                   	pop    edi
10002d28:	c3                   	ret    
10002d29:	90                   	nop

10002d2a <Gameport::detect()>:
10002d2a:	53                   	push   ebx
10002d2b:	81 ec 88 00 00 00    	sub    esp,0x88
10002d31:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
10002d38:	8d 44 24 18          	lea    eax,[esp+0x18]
10002d3c:	51                   	push   ecx
10002d3d:	6a 00                	push   0x0
10002d3f:	53                   	push   ebx
10002d40:	50                   	push   eax
10002d41:	e8 fc ff ff ff       	call   10002d42 <Gameport::detect()+0x18>	10002d42: R_386_PC32	Gameport::readRaw(int)
10002d46:	8d 44 24 58          	lea    eax,[esp+0x58]
10002d4a:	52                   	push   edx
10002d4b:	52                   	push   edx
10002d4c:	6a 01                	push   0x1
10002d4e:	53                   	push   ebx
10002d4f:	50                   	push   eax
10002d50:	e8 fc ff ff ff       	call   10002d51 <Gameport::detect()+0x27>	10002d51: R_386_PC32	Gameport::readRaw(int)
10002d55:	83 c4 1c             	add    esp,0x1c
10002d58:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10002d5f:	75 14                	jne    10002d75 <Gameport::detect()+0x4b>
10002d61:	f6 44 24 18 10       	test   BYTE PTR [esp+0x18],0x10
10002d66:	74 0d                	je     10002d75 <Gameport::detect()+0x4b>
10002d68:	52                   	push   edx
10002d69:	52                   	push   edx
10002d6a:	6a 00                	push   0x0
10002d6c:	53                   	push   ebx
10002d6d:	e8 fc ff ff ff       	call   10002d6e <Gameport::detect()+0x44>	10002d6e: R_386_PC32	Gameport::calibration(int)
10002d72:	83 c4 10             	add    esp,0x10
10002d75:	8a 54 24 4c          	mov    dl,BYTE PTR [esp+0x4c]
10002d79:	83 e2 10             	and    edx,0x10
10002d7c:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10002d83:	75 19                	jne    10002d9e <Gameport::detect()+0x74>
10002d85:	84 d2                	test   dl,dl
10002d87:	74 15                	je     10002d9e <Gameport::detect()+0x74>
10002d89:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10002d8d:	50                   	push   eax
10002d8e:	50                   	push   eax
10002d8f:	6a 01                	push   0x1
10002d91:	53                   	push   ebx
10002d92:	e8 fc ff ff ff       	call   10002d93 <Gameport::detect()+0x69>	10002d93: R_386_PC32	Gameport::calibration(int)
10002d97:	83 c4 10             	add    esp,0x10
10002d9a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
10002d9e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
10002da2:	c0 e8 04             	shr    al,0x4
10002da5:	83 e0 01             	and    eax,0x1
10002da8:	84 d2                	test   dl,dl
10002daa:	88 83 7c 01 00 00    	mov    BYTE PTR [ebx+0x17c],al
10002db0:	0f 95 83 7d 01 00 00 	setne  BYTE PTR [ebx+0x17d]
10002db7:	81 c4 88 00 00 00    	add    esp,0x88
10002dbd:	5b                   	pop    ebx
10002dbe:	c3                   	ret    
10002dbf:	90                   	nop

10002dc0 <Gameport::read(int)>:
10002dc0:	57                   	push   edi
10002dc1:	56                   	push   esi
10002dc2:	53                   	push   ebx
10002dc3:	83 ec 50             	sub    esp,0x50
10002dc6:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10002dca:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002dce:	85 f6                	test   esi,esi
10002dd0:	75 09                	jne    10002ddb <Gameport::read(int)+0x1b>
10002dd2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10002dd9:	eb 0c                	jmp    10002de7 <Gameport::read(int)+0x27>
10002ddb:	83 fe 01             	cmp    esi,0x1
10002dde:	75 15                	jne    10002df5 <Gameport::read(int)+0x35>
10002de0:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10002de7:	75 0c                	jne    10002df5 <Gameport::read(int)+0x35>
10002de9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002ded:	80 20 ef             	and    BYTE PTR [eax],0xef
10002df0:	e9 b0 00 00 00       	jmp    10002ea5 <Gameport::read(int)+0xe5>
10002df5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10002df9:	52                   	push   edx
10002dfa:	56                   	push   esi
10002dfb:	53                   	push   ebx
10002dfc:	50                   	push   eax
10002dfd:	e8 fc ff ff ff       	call   10002dfe <Gameport::read(int)+0x3e>	10002dfe: R_386_PC32	Gameport::readRaw(int)
10002e02:	83 c4 0c             	add    esp,0xc
10002e05:	4e                   	dec    esi
10002e06:	75 1a                	jne    10002e22 <Gameport::read(int)+0x62>
10002e08:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
10002e0e:	8b b3 68 01 00 00    	mov    esi,DWORD PTR [ebx+0x168]
10002e14:	8b 93 74 01 00 00    	mov    edx,DWORD PTR [ebx+0x174]
10002e1a:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
10002e20:	eb 18                	jmp    10002e3a <Gameport::read(int)+0x7a>
10002e22:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
10002e28:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
10002e2e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
10002e34:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10002e3a:	85 ff                	test   edi,edi
10002e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002e40:	0f 94 c0             	sete   al
10002e43:	85 f6                	test   esi,esi
10002e45:	0f 94 c1             	sete   cl
10002e48:	09 c1                	or     ecx,eax
10002e4a:	39 d7                	cmp    edi,edx
10002e4c:	0f 94 c0             	sete   al
10002e4f:	08 c1                	or     cl,al
10002e51:	75 96                	jne    10002de9 <Gameport::read(int)+0x29>
10002e53:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
10002e57:	74 90                	je     10002de9 <Gameport::read(int)+0x29>
10002e59:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002e5d:	89 d9                	mov    ecx,ebx
10002e5f:	29 f1                	sub    ecx,esi
10002e61:	6b c9 7f             	imul   ecx,ecx,0x7f
10002e64:	39 fb                	cmp    ebx,edi
10002e66:	7e 1a                	jle    10002e82 <Gameport::read(int)+0xc2>
10002e68:	29 fb                	sub    ebx,edi
10002e6a:	29 fa                	sub    edx,edi
10002e6c:	6b db 7f             	imul   ebx,ebx,0x7f
10002e6f:	89 d7                	mov    edi,edx
10002e71:	89 d8                	mov    eax,ebx
10002e73:	99                   	cdq    
10002e74:	f7 ff                	idiv   edi
10002e76:	89 c3                	mov    ebx,eax
10002e78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002e7c:	29 f0                	sub    eax,esi
10002e7e:	89 c6                	mov    esi,eax
10002e80:	eb 07                	jmp    10002e89 <Gameport::read(int)+0xc9>
10002e82:	89 c8                	mov    eax,ecx
10002e84:	99                   	cdq    
10002e85:	f7 ff                	idiv   edi
10002e87:	89 c3                	mov    ebx,eax
10002e89:	89 c8                	mov    eax,ecx
10002e8b:	88 5c 24 2d          	mov    BYTE PTR [esp+0x2d],bl
10002e8f:	99                   	cdq    
10002e90:	b9 0d 00 00 00       	mov    ecx,0xd
10002e95:	f7 fe                	idiv   esi
10002e97:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
10002e9b:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
10002e9f:	8d 74 24 1c          	lea    esi,[esp+0x1c]
10002ea3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002ea5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002ea9:	83 c4 50             	add    esp,0x50
10002eac:	5b                   	pop    ebx
10002ead:	5e                   	pop    esi
10002eae:	5f                   	pop    edi
10002eaf:	c2 04 00             	ret    0x4

10002eb2 <non-virtual thunk to Gameport::read(int)>:
10002eb2:	81 6c 24 08 58 01 00 00 	sub    DWORD PTR [esp+0x8],0x158
10002eba:	e9 01 ff ff ff       	jmp    10002dc0 <Gameport::read(int)>
10002ebf:	90                   	nop

10002ec0 <Gameport::readRaw(int)>:
10002ec0:	57                   	push   edi
10002ec1:	ba 01 02 00 00       	mov    edx,0x201
10002ec6:	56                   	push   esi
10002ec7:	53                   	push   ebx
10002ec8:	83 ec 10             	sub    esp,0x10
10002ecb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10002ecf:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10002ed3:	8a 03                	mov    al,BYTE PTR [ebx]
10002ed5:	83 e0 e0             	and    eax,0xffffffe0
10002ed8:	83 c8 12             	or     eax,0x12
10002edb:	88 03                	mov    BYTE PTR [ebx],al
10002edd:	ec                   	in     al,dx
10002ede:	88 c2                	mov    dl,al
10002ee0:	85 f6                	test   esi,esi
10002ee2:	75 11                	jne    10002ef5 <Gameport::readRaw(int)+0x35>
10002ee4:	c0 ea 04             	shr    dl,0x4
10002ee7:	c0 e8 05             	shr    al,0x5
10002eea:	83 e2 01             	and    edx,0x1
10002eed:	83 e0 01             	and    eax,0x1
10002ef0:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
10002ef3:	eb 0c                	jmp    10002f01 <Gameport::readRaw(int)+0x41>
10002ef5:	c0 ea 06             	shr    dl,0x6
10002ef8:	c0 e8 07             	shr    al,0x7
10002efb:	83 e2 01             	and    edx,0x1
10002efe:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
10002f01:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
10002f04:	ba 01 02 00 00       	mov    edx,0x201
10002f09:	b0 ff                	mov    al,0xff
10002f0b:	ee                   	out    dx,al
10002f0c:	e8 fc ff ff ff       	call   10002f0d <Gameport::readRaw(int)+0x4d>	10002f0d: R_386_PC32	lockScheduler()
10002f11:	4e                   	dec    esi
10002f12:	c7 44 24 0c ff ff 00 00 	mov    DWORD PTR [esp+0xc],0xffff
10002f1a:	0f 94 c1             	sete   cl
10002f1d:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
10002f22:	0f b6 f1             	movzx  esi,cl
10002f25:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
10002f2a:	0f b6 c9             	movzx  ecx,cl
10002f2d:	8d 74 76 01          	lea    esi,[esi+esi*2+0x1]
10002f31:	49                   	dec    ecx
10002f32:	31 ff                	xor    edi,edi
10002f34:	83 e1 fa             	and    ecx,0xfffffffa
10002f37:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
10002f3f:	83 c1 08             	add    ecx,0x8
10002f42:	ba 01 02 00 00       	mov    edx,0x201
10002f47:	ec                   	in     al,dx
10002f48:	0f b6 c0             	movzx  eax,al
10002f4b:	85 f0                	test   eax,esi
10002f4d:	0f 94 c2             	sete   dl
10002f50:	08 54 24 0a          	or     BYTE PTR [esp+0xa],dl
10002f54:	80 7c 24 0a 01       	cmp    BYTE PTR [esp+0xa],0x1
10002f59:	83 54 24 04 00       	adc    DWORD PTR [esp+0x4],0x0
10002f5e:	85 c8                	test   eax,ecx
10002f60:	0f 94 c0             	sete   al
10002f63:	08 44 24 0b          	or     BYTE PTR [esp+0xb],al
10002f67:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
10002f6c:	83 d7 00             	adc    edi,0x0
10002f6f:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
10002f73:	75 19                	jne    10002f8e <Gameport::readRaw(int)+0xce>
10002f75:	e8 fc ff ff ff       	call   10002f76 <Gameport::readRaw(int)+0xb6>	10002f76: R_386_PC32	unlockScheduler()
10002f7a:	81 ff ff ff 00 00    	cmp    edi,0xffff
10002f80:	74 1c                	je     10002f9e <Gameport::readRaw(int)+0xde>
10002f82:	81 7c 24 04 ff ff 00 00 	cmp    DWORD PTR [esp+0x4],0xffff
10002f8a:	75 15                	jne    10002fa1 <Gameport::readRaw(int)+0xe1>
10002f8c:	eb 10                	jmp    10002f9e <Gameport::readRaw(int)+0xde>
10002f8e:	80 7c 24 0a 00       	cmp    BYTE PTR [esp+0xa],0x0
10002f93:	74 ad                	je     10002f42 <Gameport::readRaw(int)+0x82>
10002f95:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
10002f9a:	74 a6                	je     10002f42 <Gameport::readRaw(int)+0x82>
10002f9c:	eb d7                	jmp    10002f75 <Gameport::readRaw(int)+0xb5>
10002f9e:	80 23 ef             	and    BYTE PTR [ebx],0xef
10002fa1:	89 7b 18             	mov    DWORD PTR [ebx+0x18],edi
10002fa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10002fa8:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10002fab:	83 c4 10             	add    esp,0x10
10002fae:	89 d8                	mov    eax,ebx
10002fb0:	5b                   	pop    ebx
10002fb1:	5e                   	pop    esi
10002fb2:	5f                   	pop    edi
10002fb3:	c2 04 00             	ret    0x4

10002fb6 <Gameport::open(int, int, void*)>:
10002fb6:	31 c0                	xor    eax,eax
10002fb8:	c3                   	ret    
10002fb9:	90                   	nop

10002fba <Gameport::close(int, int, void*)>:
10002fba:	31 c0                	xor    eax,eax
10002fbc:	c3                   	ret    
10002fbd:	90                   	nop

10002fbe <DMAChannel::DMAChannel(int)>:
10002fbe:	55                   	push   ebp
10002fbf:	89 e5                	mov    ebp,esp
10002fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002fc4:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10002fcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002fce:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10002fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002fd8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10002fdb:	89 10                	mov    DWORD PTR [eax],edx
10002fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002fe0:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10002fe7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002fea:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10002ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ff4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
10002ff8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ffb:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
10002fff:	83 7d 0c 03          	cmp    DWORD PTR [ebp+0xc],0x3
10003003:	0f 9f c2             	setg   dl
10003006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003009:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
1000300c:	90                   	nop
1000300d:	5d                   	pop    ebp
1000300e:	c3                   	ret    
1000300f:	90                   	nop

10003010 <DMAChannel::~DMAChannel()>:
10003010:	55                   	push   ebp
10003011:	89 e5                	mov    ebp,esp
10003013:	83 ec 08             	sub    esp,0x8
10003016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003019:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000301c:	85 c0                	test   eax,eax
1000301e:	74 19                	je     10003039 <DMAChannel::~DMAChannel()+0x29>
10003020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003023:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10003026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003029:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000302c:	83 ec 08             	sub    esp,0x8
1000302f:	52                   	push   edx
10003030:	50                   	push   eax
10003031:	e8 fc ff ff ff       	call   10003032 <DMAChannel::~DMAChannel()+0x22>	10003032: R_386_PC32	Phys::freeDMA(unsigned long, unsigned long)
10003036:	83 c4 10             	add    esp,0x10
10003039:	90                   	nop
1000303a:	c9                   	leave  
1000303b:	c3                   	ret    

1000303c <DMAChannel::getAddress()>:
1000303c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003043:	c3                   	ret    

10003044 <DMAChannel::getChannelNum()>:
10003044:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003048:	8b 00                	mov    eax,DWORD PTR [eax]
1000304a:	c3                   	ret    
1000304b:	90                   	nop

1000304c <DMAChannel::setLength(unsigned int)>:
1000304c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003050:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10003054:	3d 00 00 01 00       	cmp    eax,0x10000
10003059:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
1000305c:	76 0d                	jbe    1000306b <DMAChannel::setLength(unsigned int)+0x1f>
1000305e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	10003062: R_386_32	dmaLong
10003066:	e9 fc ff ff ff       	jmp    10003067 <DMAChannel::setLength(unsigned int)+0x1b>	10003067: R_386_PC32	Krnl::panic(char const*)
1000306b:	c3                   	ret    

1000306c <DMAChannel::setAddress(unsigned int)>:
1000306c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10003074:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10003077:	c3                   	ret    

10003078 <DMAChannel::allocateAddressAndSet(unsigned short)>:
10003078:	56                   	push   esi
10003079:	53                   	push   ebx
1000307a:	83 ec 10             	sub    esp,0x10
1000307d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10003081:	0f b7 74 24 20       	movzx  esi,WORD PTR [esp+0x20]
10003086:	56                   	push   esi
10003087:	e8 fc ff ff ff       	call   10003088 <DMAChannel::allocateAddressAndSet(unsigned short)+0x10>	10003088: R_386_PC32	Phys::allocateDMA(unsigned long)
1000308c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
1000308f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10003092:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10003095:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10003098:	83 c4 14             	add    esp,0x14
1000309b:	5b                   	pop    ebx
1000309c:	5e                   	pop    esi
1000309d:	c3                   	ret    

1000309e <DMAChannel::setMode(unsigned char)>:
1000309e:	53                   	push   ebx
1000309f:	83 ec 08             	sub    esp,0x8
100030a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100030a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100030aa:	80 7b 0d 00          	cmp    BYTE PTR [ebx+0xd],0x0
100030ae:	88 43 0f             	mov    BYTE PTR [ebx+0xf],al
100030b1:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
100030b5:	74 2a                	je     100030e1 <DMAChannel::setMode(unsigned char)+0x43>
100030b7:	51                   	push   ecx
100030b8:	51                   	push   ecx
100030b9:	6a 01                	push   0x1
100030bb:	53                   	push   ebx
100030bc:	e8 fc ff ff ff       	call   100030bd <DMAChannel::setMode(unsigned char)+0x1f>	100030bd: R_386_PC32	DMAChannel::mask(bool)
100030c1:	80 7b 0e 01          	cmp    BYTE PTR [ebx+0xe],0x1
100030c5:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
100030c8:	19 d2                	sbb    edx,edx
100030ca:	80 e2 35             	and    dl,0x35
100030cd:	81 c2 d6 00 00 00    	add    edx,0xd6
100030d3:	ee                   	out    dx,al
100030d4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
100030d8:	83 c4 18             	add    esp,0x18
100030db:	5b                   	pop    ebx
100030dc:	e9 ff 00 00 00       	jmp    100031e0 <DMAChannel::unmask()>
100030e1:	83 c4 08             	add    esp,0x8
100030e4:	5b                   	pop    ebx
100030e5:	c3                   	ret    

100030e6 <DMAChannel::start()>:
100030e6:	57                   	push   edi
100030e7:	56                   	push   esi
100030e8:	53                   	push   ebx
100030e9:	83 ec 10             	sub    esp,0x10
100030ec:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100030f0:	8b 06                	mov    eax,DWORD PTR [esi]
100030f2:	83 f8 07             	cmp    eax,0x7
100030f5:	0f 87 96 00 00 00    	ja     10003191 <DMAChannel::start()+0xab>
100030fb:	8a 98 50 5b 00 10    	mov    bl,BYTE PTR [eax+0x10005b50]	100030fd: R_386_32	.text
10003101:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
10003105:	8a 98 58 5b 00 10    	mov    bl,BYTE PTR [eax+0x10005b58]	10003107: R_386_32	.text
1000310b:	8a 80 60 5b 00 10    	mov    al,BYTE PTR [eax+0x10005b60]	1000310d: R_386_32	.text
10003111:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
10003115:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
10003119:	e8 fc ff ff ff       	call   1000311a <DMAChannel::start()+0x34>	1000311a: R_386_PC32	lockScheduler()
1000311e:	50                   	push   eax
1000311f:	50                   	push   eax
10003120:	6a 01                	push   0x1
10003122:	56                   	push   esi
10003123:	e8 fc ff ff ff       	call   10003124 <DMAChannel::start()+0x3e>	10003124: R_386_PC32	DMAChannel::mask(bool)
10003128:	8a 5e 0e             	mov    bl,BYTE PTR [esi+0xe]
1000312b:	83 c4 10             	add    esp,0x10
1000312e:	80 fb 01             	cmp    bl,0x1
10003131:	19 c9                	sbb    ecx,ecx
10003133:	31 ff                	xor    edi,edi
10003135:	80 e1 34             	and    cl,0x34
10003138:	89 f8                	mov    eax,edi
1000313a:	81 c1 d8 00 00 00    	add    ecx,0xd8
10003140:	89 ca                	mov    edx,ecx
10003142:	ee                   	out    dx,al
10003143:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
10003148:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
1000314b:	ee                   	out    dx,al
1000314c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
1000314f:	c1 e8 08             	shr    eax,0x8
10003152:	ee                   	out    dx,al
10003153:	89 f8                	mov    eax,edi
10003155:	89 ca                	mov    edx,ecx
10003157:	ee                   	out    dx,al
10003158:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
1000315b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
10003160:	8d 41 ff             	lea    eax,[ecx-0x1]
10003163:	ee                   	out    dx,al
10003164:	8d 41 ff             	lea    eax,[ecx-0x1]
10003167:	c1 e8 08             	shr    eax,0x8
1000316a:	ee                   	out    dx,al
1000316b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
1000316e:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
10003173:	c1 e8 10             	shr    eax,0x10
10003176:	ee                   	out    dx,al
10003177:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
1000317b:	74 27                	je     100031a4 <DMAChannel::start()+0xbe>
1000317d:	80 fb 01             	cmp    bl,0x1
10003180:	8a 46 0f             	mov    al,BYTE PTR [esi+0xf]
10003183:	19 d2                	sbb    edx,edx
10003185:	80 e2 35             	and    dl,0x35
10003188:	81 c2 d6 00 00 00    	add    edx,0xd6
1000318e:	ee                   	out    dx,al
1000318f:	eb 13                	jmp    100031a4 <DMAChannel::start()+0xbe>
10003191:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	10003195: R_386_32	dmaConfused
10003199:	83 c4 10             	add    esp,0x10
1000319c:	5b                   	pop    ebx
1000319d:	5e                   	pop    esi
1000319e:	5f                   	pop    edi
1000319f:	e9 fc ff ff ff       	jmp    100031a0 <DMAChannel::start()+0xba>	100031a0: R_386_PC32	Krnl::panic(char const*)
100031a4:	c6 46 0d 01          	mov    BYTE PTR [esi+0xd],0x1
100031a8:	83 ec 0c             	sub    esp,0xc
100031ab:	56                   	push   esi
100031ac:	e8 fc ff ff ff       	call   100031ad <DMAChannel::start()+0xc7>	100031ad: R_386_PC32	DMAChannel::unmask()
100031b1:	83 c4 20             	add    esp,0x20
100031b4:	5b                   	pop    ebx
100031b5:	5e                   	pop    esi
100031b6:	5f                   	pop    edi
100031b7:	e9 fc ff ff ff       	jmp    100031b8 <DMAChannel::start()+0xd2>	100031b8: R_386_PC32	unlockScheduler()

100031bc <DMAChannel::stop()>:
100031bc:	c3                   	ret    
100031bd:	90                   	nop

100031be <DMAChannel::mask(bool)>:
100031be:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
100031c3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
100031c7:	0f 95 c0             	setne  al
100031ca:	c1 e0 02             	shl    eax,0x2
100031cd:	0b 02                	or     eax,DWORD PTR [edx]
100031cf:	80 7a 0e 01          	cmp    BYTE PTR [edx+0xe],0x1
100031d3:	19 d2                	sbb    edx,edx
100031d5:	80 e2 36             	and    dl,0x36
100031d8:	81 c2 d4 00 00 00    	add    edx,0xd4
100031de:	ee                   	out    dx,al
100031df:	c3                   	ret    

100031e0 <DMAChannel::unmask()>:
100031e0:	6a 00                	push   0x0
100031e2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
100031e6:	e8 fc ff ff ff       	call   100031e7 <DMAChannel::unmask()+0x7>	100031e7: R_386_PC32	DMAChannel::mask(bool)
100031eb:	58                   	pop    eax
100031ec:	5a                   	pop    edx
100031ed:	c3                   	ret    

100031ee <DMA::DMA()>:
100031ee:	55                   	push   ebp
100031ef:	89 e5                	mov    ebp,esp
100031f1:	83 ec 08             	sub    esp,0x8
100031f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031f7:	83 ec 08             	sub    esp,0x8
100031fa:	68 00 00 00 00       	push   0x0	100031fb: R_386_32	dmaCtrlName
100031ff:	50                   	push   eax
10003200:	e8 fc ff ff ff       	call   10003201 <DMA::DMA()+0x13>	10003201: R_386_PC32	Device::Device(char const*)
10003205:	83 c4 10             	add    esp,0x10
10003208:	ba 08 00 00 00       	mov    edx,0x8	10003209: R_386_32	vtable for DMA
1000320d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003210:	89 10                	mov    DWORD PTR [eax],edx
10003212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003215:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
1000321c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000321f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003225:	0f b6 d0             	movzx  edx,al
10003228:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000322b:	66 c7 44 90 04 00 00 	mov    WORD PTR [eax+edx*4+0x4],0x0
10003232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003235:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000323b:	0f b6 d0             	movzx  edx,al
1000323e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003241:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
10003246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003249:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000324f:	8d 50 01             	lea    edx,[eax+0x1]
10003252:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003255:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000325b:	0f b6 d0             	movzx  edx,al
1000325e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003261:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003265:	83 e1 3f             	and    ecx,0x3f
10003268:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000326c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000326f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003275:	0f b6 d0             	movzx  edx,al
10003278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000327b:	66 c7 44 90 04 c0 00 	mov    WORD PTR [eax+edx*4+0x4],0xc0
10003282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003285:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000328b:	0f b6 d0             	movzx  edx,al
1000328e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003291:	c6 44 90 06 20       	mov    BYTE PTR [eax+edx*4+0x6],0x20
10003296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003299:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000329f:	8d 50 01             	lea    edx,[eax+0x1]
100032a2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100032a5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100032ab:	0f b6 d0             	movzx  edx,al
100032ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032b1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100032b5:	83 e1 3f             	and    ecx,0x3f
100032b8:	83 c9 40             	or     ecx,0x40
100032bb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100032bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032c2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100032c8:	0f b6 d0             	movzx  edx,al
100032cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032ce:	66 c7 44 90 04 81 00 	mov    WORD PTR [eax+edx*4+0x4],0x81
100032d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032d8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100032de:	0f b6 d0             	movzx  edx,al
100032e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032e4:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
100032e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032ec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100032f2:	8d 50 01             	lea    edx,[eax+0x1]
100032f5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100032f8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100032fe:	0f b6 d0             	movzx  edx,al
10003301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003304:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003308:	83 e1 3f             	and    ecx,0x3f
1000330b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000330f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003312:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003318:	0f b6 d0             	movzx  edx,al
1000331b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000331e:	66 c7 44 90 04 87 00 	mov    WORD PTR [eax+edx*4+0x4],0x87
10003325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003328:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000332e:	0f b6 d0             	movzx  edx,al
10003331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003334:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10003339:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000333c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003342:	8d 50 01             	lea    edx,[eax+0x1]
10003345:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003348:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000334e:	0f b6 d0             	movzx  edx,al
10003351:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003354:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003358:	83 e1 3f             	and    ecx,0x3f
1000335b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000335f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003362:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003368:	0f b6 d0             	movzx  edx,al
1000336b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000336e:	66 c7 44 90 04 89 00 	mov    WORD PTR [eax+edx*4+0x4],0x89
10003375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003378:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000337e:	0f b6 d0             	movzx  edx,al
10003381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003384:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
10003389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000338c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003392:	8d 50 01             	lea    edx,[eax+0x1]
10003395:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003398:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000339e:	0f b6 d0             	movzx  edx,al
100033a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033a4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100033a8:	83 e1 3f             	and    ecx,0x3f
100033ab:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100033af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033b2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033b8:	0f b6 d0             	movzx  edx,al
100033bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033be:	66 c7 44 90 04 8f 00 	mov    WORD PTR [eax+edx*4+0x4],0x8f
100033c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033c8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033ce:	0f b6 d0             	movzx  edx,al
100033d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033d4:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100033d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033dc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033e2:	8d 50 01             	lea    edx,[eax+0x1]
100033e5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100033e8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100033ee:	0f b6 d0             	movzx  edx,al
100033f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033f4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100033f8:	83 e1 3f             	and    ecx,0x3f
100033fb:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100033ff:	90                   	nop
10003400:	c9                   	leave  
10003401:	c3                   	ret    

10003402 <DMA::getAvailable()>:
10003402:	53                   	push   ebx
10003403:	31 db                	xor    ebx,ebx
10003405:	83 ec 08             	sub    esp,0x8
10003408:	e8 fc ff ff ff       	call   10003409 <DMA::getAvailable()+0x7>	10003409: R_386_PC32	lockScheduler()
1000340d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003411:	0f b6 80 58 01 00 00 	movzx  eax,BYTE PTR [eax+0x158]
10003418:	0f a3 d8             	bt     eax,ebx
1000341b:	73 07                	jae    10003424 <DMA::getAvailable()+0x22>
1000341d:	e8 fc ff ff ff       	call   1000341e <DMA::getAvailable()+0x1c>	1000341e: R_386_PC32	unlockScheduler()
10003422:	eb 0e                	jmp    10003432 <DMA::getAvailable()+0x30>
10003424:	43                   	inc    ebx
10003425:	83 fb 08             	cmp    ebx,0x8
10003428:	75 ee                	jne    10003418 <DMA::getAvailable()+0x16>
1000342a:	e8 fc ff ff ff       	call   1000342b <DMA::getAvailable()+0x29>	1000342b: R_386_PC32	unlockScheduler()
1000342f:	83 cb ff             	or     ebx,0xffffffff
10003432:	89 d8                	mov    eax,ebx
10003434:	83 c4 08             	add    esp,0x8
10003437:	5b                   	pop    ebx
10003438:	c3                   	ret    
10003439:	90                   	nop

1000343a <DMA::open(int, int, void*)>:
1000343a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000343e:	c6 80 58 01 00 00 ee 	mov    BYTE PTR [eax+0x158],0xee
10003445:	31 c0                	xor    eax,eax
10003447:	e6 0d                	out    0xd,al
10003449:	e6 da                	out    0xda,al
1000344b:	31 c0                	xor    eax,eax
1000344d:	c3                   	ret    

1000344e <DMA::close(int, int, void*)>:
1000344e:	31 c0                	xor    eax,eax
10003450:	c3                   	ret    
10003451:	90                   	nop

10003452 <DMA::tryLockChannelWithBase(int)>:
10003452:	56                   	push   esi
10003453:	53                   	push   ebx
10003454:	83 ec 14             	sub    esp,0x14
10003457:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
1000345b:	e8 fc ff ff ff       	call   1000345c <DMA::tryLockChannelWithBase(int)+0xa>	1000345c: R_386_PC32	lockScheduler()
10003460:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10003464:	8d 43 03             	lea    eax,[ebx+0x3]
10003467:	39 d8                	cmp    eax,ebx
10003469:	7c 47                	jl     100034b2 <DMA::tryLockChannelWithBase(int)+0x60>
1000346b:	0f b6 8e 58 01 00 00 	movzx  ecx,BYTE PTR [esi+0x158]
10003472:	89 ca                	mov    edx,ecx
10003474:	0f a3 d9             	bt     ecx,ebx
10003477:	73 36                	jae    100034af <DMA::tryLockChannelWithBase(int)+0x5d>
10003479:	83 ec 0c             	sub    esp,0xc
1000347c:	88 d9                	mov    cl,bl
1000347e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10003483:	d3 c0                	rol    eax,cl
10003485:	21 d0                	and    eax,edx
10003487:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
1000348d:	6a 18                	push   0x18
1000348f:	e8 fc ff ff ff       	call   10003490 <DMA::tryLockChannelWithBase(int)+0x3e>	10003490: R_386_PC32	malloc
10003494:	5a                   	pop    edx
10003495:	59                   	pop    ecx
10003496:	53                   	push   ebx
10003497:	50                   	push   eax
10003498:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000349c:	e8 fc ff ff ff       	call   1000349d <DMA::tryLockChannelWithBase(int)+0x4b>	1000349d: R_386_PC32	DMAChannel::DMAChannel(int)
100034a1:	e8 fc ff ff ff       	call   100034a2 <DMA::tryLockChannelWithBase(int)+0x50>	100034a2: R_386_PC32	unlockScheduler()
100034a6:	83 c4 10             	add    esp,0x10
100034a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100034ad:	eb 0a                	jmp    100034b9 <DMA::tryLockChannelWithBase(int)+0x67>
100034af:	43                   	inc    ebx
100034b0:	eb b5                	jmp    10003467 <DMA::tryLockChannelWithBase(int)+0x15>
100034b2:	e8 fc ff ff ff       	call   100034b3 <DMA::tryLockChannelWithBase(int)+0x61>	100034b3: R_386_PC32	unlockScheduler()
100034b7:	31 c0                	xor    eax,eax
100034b9:	83 c4 14             	add    esp,0x14
100034bc:	5b                   	pop    ebx
100034bd:	5e                   	pop    esi
100034be:	c3                   	ret    
100034bf:	90                   	nop

100034c0 <DMA::lockChannelWithBase(int)>:
100034c0:	83 ec 0c             	sub    esp,0xc
100034c3:	50                   	push   eax
100034c4:	50                   	push   eax
100034c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100034c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100034cd:	e8 fc ff ff ff       	call   100034ce <DMA::lockChannelWithBase(int)+0xe>	100034ce: R_386_PC32	DMA::tryLockChannelWithBase(int)
100034d2:	83 c4 10             	add    esp,0x10
100034d5:	85 c0                	test   eax,eax
100034d7:	74 ea                	je     100034c3 <DMA::lockChannelWithBase(int)+0x3>
100034d9:	83 c4 0c             	add    esp,0xc
100034dc:	c3                   	ret    
100034dd:	90                   	nop

100034de <DMA::tryLockChannel8()>:
100034de:	83 ec 14             	sub    esp,0x14
100034e1:	6a 00                	push   0x0
100034e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100034e7:	e8 fc ff ff ff       	call   100034e8 <DMA::tryLockChannel8()+0xa>	100034e8: R_386_PC32	DMA::tryLockChannelWithBase(int)
100034ec:	83 c4 1c             	add    esp,0x1c
100034ef:	c3                   	ret    

100034f0 <DMA::tryLockChannel16()>:
100034f0:	83 ec 14             	sub    esp,0x14
100034f3:	6a 04                	push   0x4
100034f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100034f9:	e8 fc ff ff ff       	call   100034fa <DMA::tryLockChannel16()+0xa>	100034fa: R_386_PC32	DMA::tryLockChannelWithBase(int)
100034fe:	83 c4 1c             	add    esp,0x1c
10003501:	c3                   	ret    

10003502 <DMA::tryLockChannel(int)>:
10003502:	56                   	push   esi
10003503:	53                   	push   ebx
10003504:	83 ec 14             	sub    esp,0x14
10003507:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
1000350b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
1000350f:	83 fb 07             	cmp    ebx,0x7
10003512:	76 12                	jbe    10003526 <DMA::tryLockChannel(int)+0x24>
10003514:	83 ec 0c             	sub    esp,0xc
10003517:	68 68 5b 00 10       	push   0x10005b68	10003518: R_386_32	.text
1000351c:	e8 fc ff ff ff       	call   1000351d <DMA::tryLockChannel(int)+0x1b>	1000351d: R_386_PC32	Dbg::kprintf(char const*, ...)
10003521:	83 c4 10             	add    esp,0x10
10003524:	eb 4e                	jmp    10003574 <DMA::tryLockChannel(int)+0x72>
10003526:	e8 fc ff ff ff       	call   10003527 <DMA::tryLockChannel(int)+0x25>	10003527: R_386_PC32	lockScheduler()
1000352b:	0f b6 86 58 01 00 00 	movzx  eax,BYTE PTR [esi+0x158]
10003532:	89 c2                	mov    edx,eax
10003534:	0f a3 d8             	bt     eax,ebx
10003537:	73 36                	jae    1000356f <DMA::tryLockChannel(int)+0x6d>
10003539:	83 ec 0c             	sub    esp,0xc
1000353c:	88 d9                	mov    cl,bl
1000353e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10003543:	d3 c0                	rol    eax,cl
10003545:	21 d0                	and    eax,edx
10003547:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
1000354d:	6a 18                	push   0x18
1000354f:	e8 fc ff ff ff       	call   10003550 <DMA::tryLockChannel(int)+0x4e>	10003550: R_386_PC32	malloc
10003554:	5a                   	pop    edx
10003555:	59                   	pop    ecx
10003556:	53                   	push   ebx
10003557:	50                   	push   eax
10003558:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000355c:	e8 fc ff ff ff       	call   1000355d <DMA::tryLockChannel(int)+0x5b>	1000355d: R_386_PC32	DMAChannel::DMAChannel(int)
10003561:	e8 fc ff ff ff       	call   10003562 <DMA::tryLockChannel(int)+0x60>	10003562: R_386_PC32	unlockScheduler()
10003566:	83 c4 10             	add    esp,0x10
10003569:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000356d:	eb 07                	jmp    10003576 <DMA::tryLockChannel(int)+0x74>
1000356f:	e8 fc ff ff ff       	call   10003570 <DMA::tryLockChannel(int)+0x6e>	10003570: R_386_PC32	unlockScheduler()
10003574:	31 c0                	xor    eax,eax
10003576:	83 c4 14             	add    esp,0x14
10003579:	5b                   	pop    ebx
1000357a:	5e                   	pop    esi
1000357b:	c3                   	ret    

1000357c <DMA::lockChannel8()>:
1000357c:	83 ec 14             	sub    esp,0x14
1000357f:	6a 00                	push   0x0
10003581:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003585:	e8 fc ff ff ff       	call   10003586 <DMA::lockChannel8()+0xa>	10003586: R_386_PC32	DMA::lockChannelWithBase(int)
1000358a:	83 c4 1c             	add    esp,0x1c
1000358d:	c3                   	ret    

1000358e <DMA::lockChannel16()>:
1000358e:	83 ec 14             	sub    esp,0x14
10003591:	6a 04                	push   0x4
10003593:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003597:	e8 fc ff ff ff       	call   10003598 <DMA::lockChannel16()+0xa>	10003598: R_386_PC32	DMA::lockChannelWithBase(int)
1000359c:	83 c4 1c             	add    esp,0x1c
1000359f:	c3                   	ret    

100035a0 <DMA::lockChannel(int)>:
100035a0:	83 ec 0c             	sub    esp,0xc
100035a3:	50                   	push   eax
100035a4:	50                   	push   eax
100035a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100035a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100035ad:	e8 fc ff ff ff       	call   100035ae <DMA::lockChannel(int)+0xe>	100035ae: R_386_PC32	DMA::tryLockChannel(int)
100035b2:	83 c4 10             	add    esp,0x10
100035b5:	85 c0                	test   eax,eax
100035b7:	74 ea                	je     100035a3 <DMA::lockChannel(int)+0x3>
100035b9:	83 c4 0c             	add    esp,0xc
100035bc:	c3                   	ret    
100035bd:	90                   	nop

100035be <DMA::unlockChannel(DMAChannel*)>:
100035be:	56                   	push   esi
100035bf:	53                   	push   ebx
100035c0:	53                   	push   ebx
100035c1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100035c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100035c9:	85 db                	test   ebx,ebx
100035cb:	75 10                	jne    100035dd <DMA::unlockChannel(DMAChannel*)+0x1f>
100035cd:	83 ec 0c             	sub    esp,0xc
100035d0:	68 00 00 00 00       	push   0x0	100035d1: R_386_32	badDma
100035d5:	e8 fc ff ff ff       	call   100035d6 <DMA::unlockChannel(DMAChannel*)+0x18>	100035d6: R_386_PC32	Krnl::panic(char const*)
100035da:	83 c4 10             	add    esp,0x10
100035dd:	e8 fc ff ff ff       	call   100035de <DMA::unlockChannel(DMAChannel*)+0x20>	100035de: R_386_PC32	lockScheduler()
100035e2:	0f b6 96 58 01 00 00 	movzx  edx,BYTE PTR [esi+0x158]
100035e9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
100035eb:	89 d0                	mov    eax,edx
100035ed:	0f a3 ca             	bt     edx,ecx
100035f0:	72 24                	jb     10003616 <DMA::unlockChannel(DMAChannel*)+0x58>
100035f2:	83 ec 0c             	sub    esp,0xc
100035f5:	ba 01 00 00 00       	mov    edx,0x1
100035fa:	d3 e2                	shl    edx,cl
100035fc:	09 d0                	or     eax,edx
100035fe:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10003604:	53                   	push   ebx
10003605:	e8 fc ff ff ff       	call   10003606 <DMA::unlockChannel(DMAChannel*)+0x48>	10003606: R_386_PC32	DMAChannel::~DMAChannel()
1000360a:	5a                   	pop    edx
1000360b:	59                   	pop    ecx
1000360c:	6a 18                	push   0x18
1000360e:	53                   	push   ebx
1000360f:	e8 fc ff ff ff       	call   10003610 <DMA::unlockChannel(DMAChannel*)+0x52>	10003610: R_386_PC32	operator delete(void*, unsigned long)
10003614:	eb 0d                	jmp    10003623 <DMA::unlockChannel(DMAChannel*)+0x65>
10003616:	83 ec 0c             	sub    esp,0xc
10003619:	68 00 00 00 00       	push   0x0	1000361a: R_386_32	badBook
1000361e:	e8 fc ff ff ff       	call   1000361f <DMA::unlockChannel(DMAChannel*)+0x61>	1000361f: R_386_PC32	Krnl::panic(char const*)
10003623:	83 c4 10             	add    esp,0x10
10003626:	58                   	pop    eax
10003627:	5b                   	pop    ebx
10003628:	5e                   	pop    esi
10003629:	e9 fc ff ff ff       	jmp    1000362a <DMA::unlockChannel(DMAChannel*)+0x6c>	1000362a: R_386_PC32	unlockScheduler()

1000362e <PS2::PS2()>:
1000362e:	55                   	push   ebp
1000362f:	89 e5                	mov    ebp,esp
10003631:	83 ec 08             	sub    esp,0x8
10003634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003637:	83 ec 08             	sub    esp,0x8
1000363a:	68 00 00 00 00       	push   0x0	1000363b: R_386_32	ps2ctrlname
1000363f:	50                   	push   eax
10003640:	e8 fc ff ff ff       	call   10003641 <PS2::PS2()+0x13>	10003641: R_386_PC32	Bus::Bus(char const*)
10003645:	83 c4 10             	add    esp,0x10
10003648:	ba 08 00 00 00       	mov    edx,0x8	10003649: R_386_32	vtable for PS2
1000364d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003650:	89 10                	mov    DWORD PTR [eax],edx
10003652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003655:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000365b:	0f b6 d0             	movzx  edx,al
1000365e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003661:	66 c7 44 90 04 60 00 	mov    WORD PTR [eax+edx*4+0x4],0x60
10003668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000366b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003671:	0f b6 d0             	movzx  edx,al
10003674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003677:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
1000367c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000367f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003685:	8d 50 01             	lea    edx,[eax+0x1]
10003688:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000368b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003691:	0f b6 d0             	movzx  edx,al
10003694:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003697:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000369b:	83 e1 3f             	and    ecx,0x3f
1000369e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100036a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100036a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100036ab:	0f b6 d0             	movzx  edx,al
100036ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100036b1:	66 c7 44 90 04 64 00 	mov    WORD PTR [eax+edx*4+0x4],0x64
100036b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100036bb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100036c1:	0f b6 d0             	movzx  edx,al
100036c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100036c7:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100036cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100036cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100036d5:	8d 50 01             	lea    edx,[eax+0x1]
100036d8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100036db:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100036e1:	0f b6 d0             	movzx  edx,al
100036e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100036e7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100036eb:	83 e1 3f             	and    ecx,0x3f
100036ee:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100036f2:	90                   	nop
100036f3:	c9                   	leave  
100036f4:	c3                   	ret    
100036f5:	90                   	nop

100036f6 <PS2::open(int, int, void*)>:
100036f6:	55                   	push   ebp
100036f7:	89 e5                	mov    ebp,esp
100036f9:	53                   	push   ebx
100036fa:	83 ec 24             	sub    esp,0x24
100036fd:	e8 fc ff ff ff       	call   100036fe <PS2::open(int, int, void*)+0x8>	100036fe: R_386_PC32	lockScheduler()
10003702:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10003709:	83 ec 08             	sub    esp,0x8
1000370c:	68 ad 00 00 00       	push   0xad
10003711:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003714:	e8 fc ff ff ff       	call   10003715 <PS2::open(int, int, void*)+0x1f>	10003715: R_386_PC32	PS2::controllerWrite(unsigned char)
10003719:	83 c4 10             	add    esp,0x10
1000371c:	83 ec 08             	sub    esp,0x8
1000371f:	68 a7 00 00 00       	push   0xa7
10003724:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003727:	e8 fc ff ff ff       	call   10003728 <PS2::open(int, int, void*)+0x32>	10003728: R_386_PC32	PS2::controllerWrite(unsigned char)
1000372c:	83 c4 10             	add    esp,0x10
1000372f:	66 c7 45 e4 60 00    	mov    WORD PTR [ebp-0x1c],0x60
10003735:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10003738:	89 c2                	mov    edx,eax
1000373a:	ec                   	in     al,dx
1000373b:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
1000373e:	66 c7 45 e8 60 00    	mov    WORD PTR [ebp-0x18],0x60
10003744:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10003747:	89 c2                	mov    edx,eax
10003749:	ec                   	in     al,dx
1000374a:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
1000374d:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10003753:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10003756:	89 c2                	mov    edx,eax
10003758:	ec                   	in     al,dx
10003759:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
1000375c:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003762:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003765:	89 c2                	mov    edx,eax
10003767:	ec                   	in     al,dx
10003768:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000376b:	83 ec 08             	sub    esp,0x8
1000376e:	68 aa 00 00 00       	push   0xaa
10003773:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003776:	e8 fc ff ff ff       	call   10003777 <PS2::open(int, int, void*)+0x81>	10003777: R_386_PC32	PS2::controllerWrite(unsigned char)
1000377b:	83 c4 10             	add    esp,0x10
1000377e:	83 ec 0c             	sub    esp,0xc
10003781:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003784:	e8 fc ff ff ff       	call   10003785 <PS2::open(int, int, void*)+0x8f>	10003785: R_386_PC32	PS2::controllerRead()
10003789:	83 c4 10             	add    esp,0x10
1000378c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000378f:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10003793:	74 65                	je     100037fa <PS2::open(int, int, void*)+0x104>
10003795:	83 ec 0c             	sub    esp,0xc
10003798:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000379b:	e8 fc ff ff ff       	call   1000379c <PS2::open(int, int, void*)+0xa6>	1000379c: R_386_PC32	PS2::controllerRead()
100037a0:	83 c4 10             	add    esp,0x10
100037a3:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100037a6:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
100037aa:	74 4e                	je     100037fa <PS2::open(int, int, void*)+0x104>
100037ac:	83 ec 08             	sub    esp,0x8
100037af:	68 aa 00 00 00       	push   0xaa
100037b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100037b7:	e8 fc ff ff ff       	call   100037b8 <PS2::open(int, int, void*)+0xc2>	100037b8: R_386_PC32	PS2::controllerWrite(unsigned char)
100037bc:	83 c4 10             	add    esp,0x10
100037bf:	83 ec 08             	sub    esp,0x8
100037c2:	68 aa 00 00 00       	push   0xaa
100037c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100037ca:	e8 fc ff ff ff       	call   100037cb <PS2::open(int, int, void*)+0xd5>	100037cb: R_386_PC32	PS2::controllerWrite(unsigned char)
100037cf:	83 c4 10             	add    esp,0x10
100037d2:	83 ec 0c             	sub    esp,0xc
100037d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100037d8:	e8 fc ff ff ff       	call   100037d9 <PS2::open(int, int, void*)+0xe3>	100037d9: R_386_PC32	PS2::controllerRead()
100037dd:	83 c4 10             	add    esp,0x10
100037e0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100037e3:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
100037e7:	74 11                	je     100037fa <PS2::open(int, int, void*)+0x104>
100037e9:	83 ec 0c             	sub    esp,0xc
100037ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100037ef:	e8 fc ff ff ff       	call   100037f0 <PS2::open(int, int, void*)+0xfa>	100037f0: R_386_PC32	PS2::controllerRead()
100037f4:	83 c4 10             	add    esp,0x10
100037f7:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100037fa:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
10003801:	83 ec 08             	sub    esp,0x8
10003804:	6a 20                	push   0x20
10003806:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003809:	e8 fc ff ff ff       	call   1000380a <PS2::open(int, int, void*)+0x114>	1000380a: R_386_PC32	PS2::controllerWrite(unsigned char)
1000380e:	83 c4 10             	add    esp,0x10
10003811:	83 ec 0c             	sub    esp,0xc
10003814:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003817:	e8 fc ff ff ff       	call   10003818 <PS2::open(int, int, void*)+0x122>	10003818: R_386_PC32	PS2::controllerRead()
1000381c:	83 c4 10             	add    esp,0x10
1000381f:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10003822:	80 4d f2 01          	or     BYTE PTR [ebp-0xe],0x1
10003826:	80 4d f2 02          	or     BYTE PTR [ebp-0xe],0x2
1000382a:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
1000382e:	83 ec 04             	sub    esp,0x4
10003831:	50                   	push   eax
10003832:	6a 60                	push   0x60
10003834:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003837:	e8 fc ff ff ff       	call   10003838 <PS2::open(int, int, void*)+0x142>	10003838: R_386_PC32	PS2::controllerWrite(unsigned char, unsigned char)
1000383c:	83 c4 10             	add    esp,0x10
1000383f:	83 ec 08             	sub    esp,0x8
10003842:	68 ae 00 00 00       	push   0xae
10003847:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000384a:	e8 fc ff ff ff       	call   1000384b <PS2::open(int, int, void*)+0x155>	1000384b: R_386_PC32	PS2::controllerWrite(unsigned char)
1000384f:	83 c4 10             	add    esp,0x10
10003852:	83 ec 08             	sub    esp,0x8
10003855:	68 a8 00 00 00       	push   0xa8
1000385a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000385d:	e8 fc ff ff ff       	call   1000385e <PS2::open(int, int, void*)+0x168>	1000385e: R_386_PC32	PS2::controllerWrite(unsigned char)
10003862:	83 c4 10             	add    esp,0x10
10003865:	e8 fc ff ff ff       	call   10003866 <PS2::open(int, int, void*)+0x170>	10003866: R_386_PC32	unlockScheduler()
1000386a:	c7 45 dc 60 01 00 00 	mov    DWORD PTR [ebp-0x24],0x160
10003871:	83 ec 0c             	sub    esp,0xc
10003874:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10003877:	e8 fc ff ff ff       	call   10003878 <PS2::open(int, int, void*)+0x182>	10003878: R_386_PC32	malloc
1000387c:	83 c4 10             	add    esp,0x10
1000387f:	89 c3                	mov    ebx,eax
10003881:	83 ec 0c             	sub    esp,0xc
10003884:	53                   	push   ebx
10003885:	e8 fc ff ff ff       	call   10003886 <PS2::open(int, int, void*)+0x190>	10003886: R_386_PC32	PS2Port::PS2Port()
1000388a:	83 c4 10             	add    esp,0x10
1000388d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003890:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
10003896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003899:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000389c:	8b 92 58 01 00 00    	mov    edx,DWORD PTR [edx+0x158]
100038a2:	83 ec 08             	sub    esp,0x8
100038a5:	52                   	push   edx
100038a6:	50                   	push   eax
100038a7:	e8 fc ff ff ff       	call   100038a8 <PS2::open(int, int, void*)+0x1b2>	100038a8: R_386_PC32	Device::addChild(Device*)
100038ac:	83 c4 10             	add    esp,0x10
100038af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038b2:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
100038b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038bb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100038c1:	8b 00                	mov    eax,DWORD PTR [eax]
100038c3:	83 c0 08             	add    eax,0x8
100038c6:	8b 00                	mov    eax,DWORD PTR [eax]
100038c8:	6a 00                	push   0x0
100038ca:	6a 00                	push   0x0
100038cc:	6a 00                	push   0x0
100038ce:	52                   	push   edx
100038cf:	ff d0                	call   eax
100038d1:	83 c4 10             	add    esp,0x10
100038d4:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
100038d8:	75 6a                	jne    10003944 <PS2::open(int, int, void*)+0x24e>
100038da:	c7 45 d8 60 01 00 00 	mov    DWORD PTR [ebp-0x28],0x160
100038e1:	83 ec 0c             	sub    esp,0xc
100038e4:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100038e7:	e8 fc ff ff ff       	call   100038e8 <PS2::open(int, int, void*)+0x1f2>	100038e8: R_386_PC32	malloc
100038ec:	83 c4 10             	add    esp,0x10
100038ef:	89 c3                	mov    ebx,eax
100038f1:	83 ec 0c             	sub    esp,0xc
100038f4:	53                   	push   ebx
100038f5:	e8 fc ff ff ff       	call   100038f6 <PS2::open(int, int, void*)+0x200>	100038f6: R_386_PC32	PS2Port::PS2Port()
100038fa:	83 c4 10             	add    esp,0x10
100038fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003900:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
10003906:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003909:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000390c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10003912:	83 ec 08             	sub    esp,0x8
10003915:	52                   	push   edx
10003916:	50                   	push   eax
10003917:	e8 fc ff ff ff       	call   10003918 <PS2::open(int, int, void*)+0x222>	10003918: R_386_PC32	Device::addChild(Device*)
1000391c:	83 c4 10             	add    esp,0x10
1000391f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003922:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10003928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000392b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10003931:	8b 00                	mov    eax,DWORD PTR [eax]
10003933:	83 c0 08             	add    eax,0x8
10003936:	8b 00                	mov    eax,DWORD PTR [eax]
10003938:	6a 00                	push   0x0
1000393a:	6a 00                	push   0x0
1000393c:	6a 01                	push   0x1
1000393e:	52                   	push   edx
1000393f:	ff d0                	call   eax
10003941:	83 c4 10             	add    esp,0x10
10003944:	b8 00 00 00 00       	mov    eax,0x0
10003949:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000394c:	c9                   	leave  
1000394d:	c3                   	ret    

1000394e <PS2::close(int, int, void*)>:
1000394e:	b8 00 00 00 00       	mov    eax,0x0
10003953:	c3                   	ret    

10003954 <PS2::detect()>:
10003954:	90                   	nop
10003955:	c3                   	ret    

10003956 <PS2::controllerWrite(unsigned char)>:
10003956:	55                   	push   ebp
10003957:	89 e5                	mov    ebp,esp
10003959:	83 ec 14             	sub    esp,0x14
1000395c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000395f:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10003962:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003969:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
1000396f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003972:	89 c2                	mov    edx,eax
10003974:	ec                   	in     al,dx
10003975:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003978:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000397b:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
1000397e:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003982:	83 e0 40             	and    eax,0x40
10003985:	85 c0                	test   eax,eax
10003987:	75 2d                	jne    100039b6 <PS2::controllerWrite(unsigned char)+0x60>
10003989:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
1000398c:	84 c0                	test   al,al
1000398e:	78 26                	js     100039b6 <PS2::controllerWrite(unsigned char)+0x60>
10003990:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003994:	83 e0 02             	and    eax,0x2
10003997:	85 c0                	test   eax,eax
10003999:	74 17                	je     100039b2 <PS2::controllerWrite(unsigned char)+0x5c>
1000399b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000399e:	8d 50 01             	lea    edx,[eax+0x1]
100039a1:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100039a4:	3d 20 03 00 00       	cmp    eax,0x320
100039a9:	0f 94 c0             	sete   al
100039ac:	84 c0                	test   al,al
100039ae:	75 05                	jne    100039b5 <PS2::controllerWrite(unsigned char)+0x5f>
100039b0:	eb b7                	jmp    10003969 <PS2::controllerWrite(unsigned char)+0x13>
100039b2:	90                   	nop
100039b3:	eb 01                	jmp    100039b6 <PS2::controllerWrite(unsigned char)+0x60>
100039b5:	90                   	nop
100039b6:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
100039ba:	66 c7 45 f4 64 00    	mov    WORD PTR [ebp-0xc],0x64
100039c0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100039c3:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100039c6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100039c9:	ee                   	out    dx,al
100039ca:	b0 01                	mov    al,0x1
100039cc:	c9                   	leave  
100039cd:	c3                   	ret    

100039ce <PS2::controllerWrite(unsigned char, unsigned char)>:
100039ce:	55                   	push   ebp
100039cf:	89 e5                	mov    ebp,esp
100039d1:	83 ec 28             	sub    esp,0x28
100039d4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100039d7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100039da:	88 55 dc             	mov    BYTE PTR [ebp-0x24],dl
100039dd:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
100039e0:	0f b6 45 dc          	movzx  eax,BYTE PTR [ebp-0x24]
100039e4:	50                   	push   eax
100039e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039e8:	e8 fc ff ff ff       	call   100039e9 <PS2::controllerWrite(unsigned char, unsigned char)+0x1b>	100039e9: R_386_PC32	PS2::controllerWrite(unsigned char)
100039ed:	83 c4 08             	add    esp,0x8
100039f0:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
100039f7:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
100039fd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003a00:	89 c2                	mov    edx,eax
10003a02:	ec                   	in     al,dx
10003a03:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003a06:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003a09:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003a0c:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003a10:	83 e0 40             	and    eax,0x40
10003a13:	85 c0                	test   eax,eax
10003a15:	75 07                	jne    10003a1e <PS2::controllerWrite(unsigned char, unsigned char)+0x50>
10003a17:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003a1a:	84 c0                	test   al,al
10003a1c:	79 18                	jns    10003a36 <PS2::controllerWrite(unsigned char, unsigned char)+0x68>
10003a1e:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003a22:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10003a28:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003a2b:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003a2e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003a31:	ee                   	out    dx,al
10003a32:	b0 00                	mov    al,0x0
10003a34:	eb 4f                	jmp    10003a85 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10003a36:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003a3a:	83 e0 02             	and    eax,0x2
10003a3d:	85 c0                	test   eax,eax
10003a3f:	74 2d                	je     10003a6e <PS2::controllerWrite(unsigned char, unsigned char)+0xa0>
10003a41:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003a44:	8d 50 01             	lea    edx,[eax+0x1]
10003a47:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003a4a:	3d 20 03 00 00       	cmp    eax,0x320
10003a4f:	0f 94 c0             	sete   al
10003a52:	84 c0                	test   al,al
10003a54:	74 a1                	je     100039f7 <PS2::controllerWrite(unsigned char, unsigned char)+0x29>
10003a56:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003a5a:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003a60:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003a63:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10003a66:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003a69:	ee                   	out    dx,al
10003a6a:	b0 00                	mov    al,0x0
10003a6c:	eb 17                	jmp    10003a85 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10003a6e:	90                   	nop
10003a6f:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003a73:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10003a79:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10003a7c:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10003a7f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10003a82:	ee                   	out    dx,al
10003a83:	b0 01                	mov    al,0x1
10003a85:	c9                   	leave  
10003a86:	c3                   	ret    
10003a87:	90                   	nop

10003a88 <PS2::controllerRead()>:
10003a88:	55                   	push   ebp
10003a89:	89 e5                	mov    ebp,esp
10003a8b:	83 ec 20             	sub    esp,0x20
10003a8e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003a95:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003a9b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003a9e:	89 c2                	mov    edx,eax
10003aa0:	ec                   	in     al,dx
10003aa1:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003aa4:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003aa7:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003aaa:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003aae:	83 e0 40             	and    eax,0x40
10003ab1:	85 c0                	test   eax,eax
10003ab3:	75 07                	jne    10003abc <PS2::controllerRead()+0x34>
10003ab5:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003ab8:	84 c0                	test   al,al
10003aba:	79 04                	jns    10003ac0 <PS2::controllerRead()+0x38>
10003abc:	b0 00                	mov    al,0x0
10003abe:	eb 48                	jmp    10003b08 <PS2::controllerRead()+0x80>
10003ac0:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003ac4:	83 e0 01             	and    eax,0x1
10003ac7:	85 c0                	test   eax,eax
10003ac9:	75 29                	jne    10003af4 <PS2::controllerRead()+0x6c>
10003acb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003ace:	8d 50 01             	lea    edx,[eax+0x1]
10003ad1:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003ad4:	3d 40 06 00 00       	cmp    eax,0x640
10003ad9:	0f 94 c0             	sete   al
10003adc:	84 c0                	test   al,al
10003ade:	74 b5                	je     10003a95 <PS2::controllerRead()+0xd>
10003ae0:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10003ae6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003ae9:	89 c2                	mov    edx,eax
10003aeb:	ec                   	in     al,dx
10003aec:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003aef:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003af2:	eb 14                	jmp    10003b08 <PS2::controllerRead()+0x80>
10003af4:	90                   	nop
10003af5:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003afb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003afe:	89 c2                	mov    edx,eax
10003b00:	ec                   	in     al,dx
10003b01:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003b04:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10003b07:	90                   	nop
10003b08:	c9                   	leave  
10003b09:	c3                   	ret    

10003b0a <PS2Keyboard::PS2Keyboard()>:
10003b0a:	55                   	push   ebp
10003b0b:	89 e5                	mov    ebp,esp
10003b0d:	83 ec 08             	sub    esp,0x8
10003b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b13:	83 ec 08             	sub    esp,0x8
10003b16:	68 00 00 00 00       	push   0x0	10003b17: R_386_32	ps2keyname
10003b1b:	50                   	push   eax
10003b1c:	e8 fc ff ff ff       	call   10003b1d <PS2Keyboard::PS2Keyboard()+0x13>	10003b1d: R_386_PC32	Keyboard::Keyboard(char const*)
10003b21:	83 c4 10             	add    esp,0x10
10003b24:	ba 08 00 00 00       	mov    edx,0x8	10003b25: R_386_32	vtable for PS2Keyboard
10003b29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b2c:	89 10                	mov    DWORD PTR [eax],edx
10003b2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b31:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10003b38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b3b:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10003b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b45:	c6 80 66 01 00 00 00 	mov    BYTE PTR [eax+0x166],0x0
10003b4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b4f:	c6 80 67 01 00 00 00 	mov    BYTE PTR [eax+0x167],0x0
10003b56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b59:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10003b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b63:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
10003b6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b6d:	c6 80 6a 01 00 00 00 	mov    BYTE PTR [eax+0x16a],0x0
10003b74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b77:	c6 80 6b 01 00 00 00 	mov    BYTE PTR [eax+0x16b],0x0
10003b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b81:	c6 80 6c 01 00 00 00 	mov    BYTE PTR [eax+0x16c],0x0
10003b88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b8b:	c6 80 6d 01 00 00 00 	mov    BYTE PTR [eax+0x16d],0x0
10003b92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b95:	c6 80 6e 01 00 00 00 	mov    BYTE PTR [eax+0x16e],0x0
10003b9c:	90                   	nop
10003b9d:	c9                   	leave  
10003b9e:	c3                   	ret    
10003b9f:	90                   	nop

10003ba0 <PS2Keyboard::~PS2Keyboard()>:
10003ba0:	55                   	push   ebp
10003ba1:	89 e5                	mov    ebp,esp
10003ba3:	83 ec 08             	sub    esp,0x8
10003ba6:	ba 08 00 00 00       	mov    edx,0x8	10003ba7: R_386_32	vtable for PS2Keyboard
10003bab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003bae:	89 10                	mov    DWORD PTR [eax],edx
10003bb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003bb3:	83 ec 0c             	sub    esp,0xc
10003bb6:	50                   	push   eax
10003bb7:	e8 fc ff ff ff       	call   10003bb8 <PS2Keyboard::~PS2Keyboard()+0x18>	10003bb8: R_386_PC32	Keyboard::~Keyboard()
10003bbc:	83 c4 10             	add    esp,0x10
10003bbf:	90                   	nop
10003bc0:	c9                   	leave  
10003bc1:	c3                   	ret    

10003bc2 <PS2Keyboard::~PS2Keyboard()>:
10003bc2:	55                   	push   ebp
10003bc3:	89 e5                	mov    ebp,esp
10003bc5:	83 ec 08             	sub    esp,0x8
10003bc8:	83 ec 0c             	sub    esp,0xc
10003bcb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003bce:	e8 fc ff ff ff       	call   10003bcf <PS2Keyboard::~PS2Keyboard()+0xd>	10003bcf: R_386_PC32	PS2Keyboard::~PS2Keyboard()
10003bd3:	83 c4 10             	add    esp,0x10
10003bd6:	83 ec 08             	sub    esp,0x8
10003bd9:	68 70 01 00 00       	push   0x170
10003bde:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003be1:	e8 fc ff ff ff       	call   10003be2 <PS2Keyboard::~PS2Keyboard()+0x20>	10003be2: R_386_PC32	operator delete(void*, unsigned long)
10003be6:	83 c4 10             	add    esp,0x10
10003be9:	c9                   	leave  
10003bea:	c3                   	ret    
10003beb:	90                   	nop

10003bec <PS2Keyboard::setRepeatRate(int)>:
10003bec:	c3                   	ret    
10003bed:	90                   	nop

10003bee <PS2Keyboard::setRepeatDelay(int)>:
10003bee:	c3                   	ret    
10003bef:	90                   	nop

10003bf0 <PS2Keyboard::sendKey(unsigned short, bool)>:
10003bf0:	83 ec 1c             	sub    esp,0x1c
10003bf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003bf7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10003bfb:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10003bff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003c03:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10003c08:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10003c0f:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10003c15:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10003c1a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10003c1e:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10003c22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003c26:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10003c2b:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10003c30:	83 c4 1c             	add    esp,0x1c
10003c33:	e9 fc ff ff ff       	jmp    10003c34 <PS2Keyboard::sendKey(unsigned short, bool)+0x44>	10003c34: R_386_PC32	sendKeyboardToken(KeyboardToken)

10003c38 <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)>:
10003c38:	83 ec 1c             	sub    esp,0x1c
10003c3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003c3f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10003c43:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10003c47:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003c4b:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10003c50:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10003c57:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10003c5d:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10003c62:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10003c66:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10003c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003c6e:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10003c73:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10003c78:	83 c4 1c             	add    esp,0x1c
10003c7b:	e9 fc ff ff ff       	jmp    10003c7c <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)+0x44>	10003c7c: R_386_PC32	sendKeyboardToken(KeyboardToken)

10003c80 <PS2Keyboard::updateKeyboardLEDs()>:
10003c80:	56                   	push   esi
10003c81:	53                   	push   ebx
10003c82:	83 ec 0c             	sub    esp,0xc
10003c85:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10003c89:	8a 96 69 01 00 00    	mov    dl,BYTE PTR [esi+0x169]
10003c8f:	0f b6 9e 6a 01 00 00 	movzx  ebx,BYTE PTR [esi+0x16a]
10003c96:	8d 04 1b             	lea    eax,[ebx+ebx*1]
10003c99:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10003ca0:	09 c3                	or     ebx,eax
10003ca2:	0a 9e 6b 01 00 00    	or     bl,BYTE PTR [esi+0x16b]
10003ca8:	68 ed 00 00 00       	push   0xed
10003cad:	0f b6 db             	movzx  ebx,bl
10003cb0:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003cb6:	e8 fc ff ff ff       	call   10003cb7 <PS2Keyboard::updateKeyboardLEDs()+0x37>	10003cb7: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10003cbb:	58                   	pop    eax
10003cbc:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003cc2:	e8 fc ff ff ff       	call   10003cc3 <PS2Keyboard::updateKeyboardLEDs()+0x43>	10003cc3: R_386_PC32	PS2Port::deviceRead()
10003cc7:	5a                   	pop    edx
10003cc8:	59                   	pop    ecx
10003cc9:	53                   	push   ebx
10003cca:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003cd0:	e8 fc ff ff ff       	call   10003cd1 <PS2Keyboard::updateKeyboardLEDs()+0x51>	10003cd1: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10003cd5:	8b 86 60 01 00 00    	mov    eax,DWORD PTR [esi+0x160]
10003cdb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003cdf:	83 c4 14             	add    esp,0x14
10003ce2:	5b                   	pop    ebx
10003ce3:	5e                   	pop    esi
10003ce4:	e9 fc ff ff ff       	jmp    10003ce5 <PS2Keyboard::updateKeyboardLEDs()+0x65>	10003ce5: R_386_PC32	PS2Port::deviceRead()

10003ce9 <ps2KeyboardHandler(regs*, void*)>:
10003ce9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003ced:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003cf1:	eb 01                	jmp    10003cf4 <PS2Keyboard::handler()>
10003cf3:	90                   	nop

10003cf4 <PS2Keyboard::handler()>:
10003cf4:	57                   	push   edi
10003cf5:	56                   	push   esi
10003cf6:	53                   	push   ebx
10003cf7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10003cfb:	e4 60                	in     al,0x60
10003cfd:	80 be 6e 01 00 00 00 	cmp    BYTE PTR [esi+0x16e],0x0
10003d04:	74 29                	je     10003d2f <PS2Keyboard::handler()+0x3b>
10003d06:	88 c2                	mov    dl,al
10003d08:	3c e0                	cmp    al,0xe0
10003d0a:	75 0c                	jne    10003d18 <PS2Keyboard::handler()+0x24>
10003d0c:	c6 86 64 01 00 00 01 	mov    BYTE PTR [esi+0x164],0x1
10003d13:	e9 17 07 00 00       	jmp    1000442f <PS2Keyboard::handler()+0x73b>
10003d18:	84 c0                	test   al,al
10003d1a:	0f 89 52 01 00 00    	jns    10003e72 <PS2Keyboard::handler()+0x17e>
10003d20:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10003d27:	83 e2 7f             	and    edx,0x7f
10003d2a:	e9 43 01 00 00       	jmp    10003e72 <PS2Keyboard::handler()+0x17e>
10003d2f:	3c e0                	cmp    al,0xe0
10003d31:	74 d9                	je     10003d0c <PS2Keyboard::handler()+0x18>
10003d33:	3c f0                	cmp    al,0xf0
10003d35:	75 0c                	jne    10003d43 <PS2Keyboard::handler()+0x4f>
10003d37:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10003d3e:	e9 ec 06 00 00       	jmp    1000442f <PS2Keyboard::handler()+0x73b>
10003d43:	3c 12                	cmp    al,0x12
10003d45:	75 1f                	jne    10003d66 <PS2Keyboard::handler()+0x72>
10003d47:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003d4d:	83 f0 01             	xor    eax,0x1
10003d50:	88 86 67 01 00 00    	mov    BYTE PTR [esi+0x167],al
10003d56:	52                   	push   edx
10003d57:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003d5e:	50                   	push   eax
10003d5f:	68 04 01 00 00       	push   0x104
10003d64:	eb 23                	jmp    10003d89 <PS2Keyboard::handler()+0x95>
10003d66:	76 3d                	jbe    10003da5 <PS2Keyboard::handler()+0xb1>
10003d68:	3c 14                	cmp    al,0x14
10003d6a:	75 62                	jne    10003dce <PS2Keyboard::handler()+0xda>
10003d6c:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003d72:	83 f0 01             	xor    eax,0x1
10003d75:	88 86 68 01 00 00    	mov    BYTE PTR [esi+0x168],al
10003d7b:	51                   	push   ecx
10003d7c:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003d83:	50                   	push   eax
10003d84:	68 00 01 00 00       	push   0x100
10003d89:	56                   	push   esi
10003d8a:	e8 fc ff ff ff       	call   10003d8b <PS2Keyboard::handler()+0x97>	10003d8b: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
10003d8f:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10003d96:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10003d9d:	83 c4 10             	add    esp,0x10
10003da0:	e9 8a 06 00 00       	jmp    1000442f <PS2Keyboard::handler()+0x73b>
10003da5:	3c 11                	cmp    al,0x11
10003da7:	75 2d                	jne    10003dd6 <PS2Keyboard::handler()+0xe2>
10003da9:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003daf:	83 f0 01             	xor    eax,0x1
10003db2:	88 86 6d 01 00 00    	mov    BYTE PTR [esi+0x16d],al
10003db8:	88 86 6c 01 00 00    	mov    BYTE PTR [esi+0x16c],al
10003dbe:	50                   	push   eax
10003dbf:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003dc6:	50                   	push   eax
10003dc7:	68 01 01 00 00       	push   0x101
10003dcc:	eb bb                	jmp    10003d89 <PS2Keyboard::handler()+0x95>
10003dce:	3c 59                	cmp    al,0x59
10003dd0:	0f 84 71 ff ff ff    	je     10003d47 <PS2Keyboard::handler()+0x53>
10003dd6:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
10003ddd:	0f 84 b1 01 00 00    	je     10003f94 <PS2Keyboard::handler()+0x2a0>
10003de3:	3c 6b                	cmp    al,0x6b
10003de5:	0f 84 f2 00 00 00    	je     10003edd <PS2Keyboard::handler()+0x1e9>
10003deb:	77 50                	ja     10003e3d <PS2Keyboard::handler()+0x149>
10003ded:	3c 51                	cmp    al,0x51
10003def:	0f 84 37 01 00 00    	je     10003f2c <PS2Keyboard::handler()+0x238>
10003df5:	77 23                	ja     10003e1a <PS2Keyboard::handler()+0x126>
10003df7:	3c 49                	cmp    al,0x49
10003df9:	0f 84 0d 01 00 00    	je     10003f0c <PS2Keyboard::handler()+0x218>
10003dff:	3c 4a                	cmp    al,0x4a
10003e01:	0f 85 29 04 00 00    	jne    10004230 <PS2Keyboard::handler()+0x53c>
10003e07:	50                   	push   eax
10003e08:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003e0f:	50                   	push   eax
10003e10:	68 1f 03 00 00       	push   0x31f
10003e15:	e9 c6 03 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10003e1a:	3c 5a                	cmp    al,0x5a
10003e1c:	0f 84 5f 01 00 00    	je     10003f81 <PS2Keyboard::handler()+0x28d>
10003e22:	3c 69                	cmp    al,0x69
10003e24:	0f 85 06 04 00 00    	jne    10004230 <PS2Keyboard::handler()+0x53c>
10003e2a:	51                   	push   ecx
10003e2b:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003e32:	50                   	push   eax
10003e33:	68 01 02 00 00       	push   0x201
10003e38:	e9 a3 03 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10003e3d:	3c 71                	cmp    al,0x71
10003e3f:	0f 84 16 01 00 00    	je     10003f5b <PS2Keyboard::handler()+0x267>
10003e45:	77 15                	ja     10003e5c <PS2Keyboard::handler()+0x168>
10003e47:	3c 6c                	cmp    al,0x6c
10003e49:	0f 84 f0 00 00 00    	je     10003f3f <PS2Keyboard::handler()+0x24b>
10003e4f:	3c 70                	cmp    al,0x70
10003e51:	0f 84 17 01 00 00    	je     10003f6e <PS2Keyboard::handler()+0x27a>
10003e57:	e9 d4 03 00 00       	jmp    10004230 <PS2Keyboard::handler()+0x53c>
10003e5c:	3c 74                	cmp    al,0x74
10003e5e:	0f 84 8c 00 00 00    	je     10003ef0 <PS2Keyboard::handler()+0x1fc>
10003e64:	3c 75                	cmp    al,0x75
10003e66:	74 4a                	je     10003eb2 <PS2Keyboard::handler()+0x1be>
10003e68:	3c 72                	cmp    al,0x72
10003e6a:	0f 85 c0 03 00 00    	jne    10004230 <PS2Keyboard::handler()+0x53c>
10003e70:	eb 58                	jmp    10003eca <PS2Keyboard::handler()+0x1d6>
10003e72:	80 fa 2a             	cmp    dl,0x2a
10003e75:	0f 84 cc fe ff ff    	je     10003d47 <PS2Keyboard::handler()+0x53>
10003e7b:	0f 87 97 05 00 00    	ja     10004418 <PS2Keyboard::handler()+0x724>
10003e81:	80 fa 1d             	cmp    dl,0x1d
10003e84:	0f 84 e2 fe ff ff    	je     10003d6c <PS2Keyboard::handler()+0x78>
10003e8a:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
10003e91:	0f 84 ce 03 00 00    	je     10004265 <PS2Keyboard::handler()+0x571>
10003e97:	80 fa 4b             	cmp    dl,0x4b
10003e9a:	74 41                	je     10003edd <PS2Keyboard::handler()+0x1e9>
10003e9c:	77 27                	ja     10003ec5 <PS2Keyboard::handler()+0x1d1>
10003e9e:	80 fa 47             	cmp    dl,0x47
10003ea1:	0f 84 98 00 00 00    	je     10003f3f <PS2Keyboard::handler()+0x24b>
10003ea7:	0f 86 96 03 00 00    	jbe    10004243 <PS2Keyboard::handler()+0x54f>
10003ead:	80 fa 48             	cmp    dl,0x48
10003eb0:	75 51                	jne    10003f03 <PS2Keyboard::handler()+0x20f>
10003eb2:	50                   	push   eax
10003eb3:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003eba:	50                   	push   eax
10003ebb:	68 0b 02 00 00       	push   0x20b
10003ec0:	e9 1b 03 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10003ec5:	80 fa 50             	cmp    dl,0x50
10003ec8:	75 55                	jne    10003f1f <PS2Keyboard::handler()+0x22b>
10003eca:	50                   	push   eax
10003ecb:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003ed2:	50                   	push   eax
10003ed3:	68 0c 02 00 00       	push   0x20c
10003ed8:	e9 03 03 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10003edd:	50                   	push   eax
10003ede:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003ee5:	50                   	push   eax
10003ee6:	68 0d 02 00 00       	push   0x20d
10003eeb:	e9 f0 02 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10003ef0:	50                   	push   eax
10003ef1:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003ef8:	50                   	push   eax
10003ef9:	68 0e 02 00 00       	push   0x20e
10003efe:	e9 dd 02 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10003f03:	80 fa 49             	cmp    dl,0x49
10003f06:	0f 85 24 03 00 00    	jne    10004230 <PS2Keyboard::handler()+0x53c>
10003f0c:	50                   	push   eax
10003f0d:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f14:	50                   	push   eax
10003f15:	68 04 02 00 00       	push   0x204
10003f1a:	e9 c1 02 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10003f1f:	0f 86 2f 03 00 00    	jbe    10004254 <PS2Keyboard::handler()+0x560>
10003f25:	80 fa 52             	cmp    dl,0x52
10003f28:	74 44                	je     10003f6e <PS2Keyboard::handler()+0x27a>
10003f2a:	73 26                	jae    10003f52 <PS2Keyboard::handler()+0x25e>
10003f2c:	57                   	push   edi
10003f2d:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f34:	50                   	push   eax
10003f35:	68 05 02 00 00       	push   0x205
10003f3a:	e9 a1 02 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10003f3f:	53                   	push   ebx
10003f40:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f47:	50                   	push   eax
10003f48:	68 00 02 00 00       	push   0x200
10003f4d:	e9 8e 02 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10003f52:	80 fa 53             	cmp    dl,0x53
10003f55:	0f 85 d5 02 00 00    	jne    10004230 <PS2Keyboard::handler()+0x53c>
10003f5b:	52                   	push   edx
10003f5c:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f63:	50                   	push   eax
10003f64:	68 03 02 00 00       	push   0x203
10003f69:	e9 72 02 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10003f6e:	50                   	push   eax
10003f6f:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f76:	50                   	push   eax
10003f77:	68 02 02 00 00       	push   0x202
10003f7c:	e9 5f 02 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10003f81:	50                   	push   eax
10003f82:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f89:	50                   	push   eax
10003f8a:	68 1d 03 00 00       	push   0x31d
10003f8f:	e9 4c 02 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10003f94:	0f b6 96 66 01 00 00 	movzx  edx,BYTE PTR [esi+0x166]
10003f9b:	3c 66                	cmp    al,0x66
10003f9d:	75 09                	jne    10003fa8 <PS2Keyboard::handler()+0x2b4>
10003f9f:	50                   	push   eax
10003fa0:	52                   	push   edx
10003fa1:	6a 08                	push   0x8
10003fa3:	e9 38 02 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10003fa8:	3c 0d                	cmp    al,0xd
10003faa:	75 09                	jne    10003fb5 <PS2Keyboard::handler()+0x2c1>
10003fac:	50                   	push   eax
10003fad:	52                   	push   edx
10003fae:	6a 09                	push   0x9
10003fb0:	e9 2b 02 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10003fb5:	3c 58                	cmp    al,0x58
10003fb7:	75 2a                	jne    10003fe3 <PS2Keyboard::handler()+0x2ef>
10003fb9:	84 d2                	test   dl,dl
10003fbb:	75 13                	jne    10003fd0 <PS2Keyboard::handler()+0x2dc>
10003fbd:	83 ec 0c             	sub    esp,0xc
10003fc0:	80 b6 69 01 00 00 01 	xor    BYTE PTR [esi+0x169],0x1
10003fc7:	56                   	push   esi
10003fc8:	e8 fc ff ff ff       	call   10003fc9 <PS2Keyboard::handler()+0x2d5>	10003fc9: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
10003fcd:	83 c4 10             	add    esp,0x10
10003fd0:	50                   	push   eax
10003fd1:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003fd8:	50                   	push   eax
10003fd9:	68 80 02 00 00       	push   0x280
10003fde:	e9 fd 01 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10003fe3:	3c 77                	cmp    al,0x77
10003fe5:	75 2a                	jne    10004011 <PS2Keyboard::handler()+0x31d>
10003fe7:	84 d2                	test   dl,dl
10003fe9:	75 13                	jne    10003ffe <PS2Keyboard::handler()+0x30a>
10003feb:	83 ec 0c             	sub    esp,0xc
10003fee:	80 b6 6a 01 00 00 01 	xor    BYTE PTR [esi+0x16a],0x1
10003ff5:	56                   	push   esi
10003ff6:	e8 fc ff ff ff       	call   10003ff7 <PS2Keyboard::handler()+0x303>	10003ff7: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
10003ffb:	83 c4 10             	add    esp,0x10
10003ffe:	50                   	push   eax
10003fff:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004006:	50                   	push   eax
10004007:	68 81 02 00 00       	push   0x281
1000400c:	e9 cf 01 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10004011:	3c 7e                	cmp    al,0x7e
10004013:	75 2a                	jne    1000403f <PS2Keyboard::handler()+0x34b>
10004015:	84 d2                	test   dl,dl
10004017:	75 13                	jne    1000402c <PS2Keyboard::handler()+0x338>
10004019:	83 ec 0c             	sub    esp,0xc
1000401c:	80 b6 6b 01 00 00 01 	xor    BYTE PTR [esi+0x16b],0x1
10004023:	56                   	push   esi
10004024:	e8 fc ff ff ff       	call   10004025 <PS2Keyboard::handler()+0x331>	10004025: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
10004029:	83 c4 10             	add    esp,0x10
1000402c:	57                   	push   edi
1000402d:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004034:	50                   	push   eax
10004035:	68 82 02 00 00       	push   0x282
1000403a:	e9 a1 01 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
1000403f:	3c 05                	cmp    al,0x5
10004041:	75 0c                	jne    1000404f <PS2Keyboard::handler()+0x35b>
10004043:	53                   	push   ebx
10004044:	52                   	push   edx
10004045:	68 00 03 00 00       	push   0x300
1000404a:	e9 91 01 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
1000404f:	3c 06                	cmp    al,0x6
10004051:	75 0c                	jne    1000405f <PS2Keyboard::handler()+0x36b>
10004053:	51                   	push   ecx
10004054:	52                   	push   edx
10004055:	68 01 03 00 00       	push   0x301
1000405a:	e9 81 01 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
1000405f:	3c 04                	cmp    al,0x4
10004061:	75 0c                	jne    1000406f <PS2Keyboard::handler()+0x37b>
10004063:	50                   	push   eax
10004064:	52                   	push   edx
10004065:	68 02 03 00 00       	push   0x302
1000406a:	e9 71 01 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
1000406f:	3c 0c                	cmp    al,0xc
10004071:	75 0c                	jne    1000407f <PS2Keyboard::handler()+0x38b>
10004073:	50                   	push   eax
10004074:	52                   	push   edx
10004075:	68 03 03 00 00       	push   0x303
1000407a:	e9 61 01 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
1000407f:	3c 03                	cmp    al,0x3
10004081:	75 0c                	jne    1000408f <PS2Keyboard::handler()+0x39b>
10004083:	50                   	push   eax
10004084:	52                   	push   edx
10004085:	68 04 03 00 00       	push   0x304
1000408a:	e9 51 01 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
1000408f:	3c 0b                	cmp    al,0xb
10004091:	75 0c                	jne    1000409f <PS2Keyboard::handler()+0x3ab>
10004093:	50                   	push   eax
10004094:	52                   	push   edx
10004095:	68 05 03 00 00       	push   0x305
1000409a:	e9 41 01 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
1000409f:	3c 02                	cmp    al,0x2
100040a1:	74 04                	je     100040a7 <PS2Keyboard::handler()+0x3b3>
100040a3:	3c 83                	cmp    al,0x83
100040a5:	75 0c                	jne    100040b3 <PS2Keyboard::handler()+0x3bf>
100040a7:	50                   	push   eax
100040a8:	52                   	push   edx
100040a9:	68 06 03 00 00       	push   0x306
100040ae:	e9 2d 01 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
100040b3:	3c 0a                	cmp    al,0xa
100040b5:	75 0c                	jne    100040c3 <PS2Keyboard::handler()+0x3cf>
100040b7:	50                   	push   eax
100040b8:	52                   	push   edx
100040b9:	68 07 03 00 00       	push   0x307
100040be:	e9 1d 01 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
100040c3:	3c 01                	cmp    al,0x1
100040c5:	75 0c                	jne    100040d3 <PS2Keyboard::handler()+0x3df>
100040c7:	57                   	push   edi
100040c8:	52                   	push   edx
100040c9:	68 08 03 00 00       	push   0x308
100040ce:	e9 0d 01 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
100040d3:	3c 09                	cmp    al,0x9
100040d5:	75 0c                	jne    100040e3 <PS2Keyboard::handler()+0x3ef>
100040d7:	53                   	push   ebx
100040d8:	52                   	push   edx
100040d9:	68 09 03 00 00       	push   0x309
100040de:	e9 fd 00 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
100040e3:	3c 78                	cmp    al,0x78
100040e5:	75 0c                	jne    100040f3 <PS2Keyboard::handler()+0x3ff>
100040e7:	51                   	push   ecx
100040e8:	52                   	push   edx
100040e9:	68 0a 03 00 00       	push   0x30a
100040ee:	e9 ed 00 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
100040f3:	3c 07                	cmp    al,0x7
100040f5:	75 0c                	jne    10004103 <PS2Keyboard::handler()+0x40f>
100040f7:	50                   	push   eax
100040f8:	52                   	push   edx
100040f9:	68 0b 03 00 00       	push   0x30b
100040fe:	e9 dd 00 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10004103:	3c 5a                	cmp    al,0x5a
10004105:	75 09                	jne    10004110 <PS2Keyboard::handler()+0x41c>
10004107:	50                   	push   eax
10004108:	52                   	push   edx
10004109:	6a 0a                	push   0xa
1000410b:	e9 d0 00 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10004110:	3c 76                	cmp    al,0x76
10004112:	75 0c                	jne    10004120 <PS2Keyboard::handler()+0x42c>
10004114:	50                   	push   eax
10004115:	52                   	push   edx
10004116:	68 0a 02 00 00       	push   0x20a
1000411b:	e9 c0 00 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10004120:	3c 70                	cmp    al,0x70
10004122:	75 0c                	jne    10004130 <PS2Keyboard::handler()+0x43c>
10004124:	50                   	push   eax
10004125:	52                   	push   edx
10004126:	68 10 03 00 00       	push   0x310
1000412b:	e9 b0 00 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10004130:	3c 69                	cmp    al,0x69
10004132:	75 0c                	jne    10004140 <PS2Keyboard::handler()+0x44c>
10004134:	50                   	push   eax
10004135:	52                   	push   edx
10004136:	68 11 03 00 00       	push   0x311
1000413b:	e9 a0 00 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10004140:	3c 72                	cmp    al,0x72
10004142:	75 0c                	jne    10004150 <PS2Keyboard::handler()+0x45c>
10004144:	50                   	push   eax
10004145:	52                   	push   edx
10004146:	68 12 03 00 00       	push   0x312
1000414b:	e9 90 00 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10004150:	3c 7a                	cmp    al,0x7a
10004152:	75 0c                	jne    10004160 <PS2Keyboard::handler()+0x46c>
10004154:	57                   	push   edi
10004155:	52                   	push   edx
10004156:	68 13 03 00 00       	push   0x313
1000415b:	e9 80 00 00 00       	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10004160:	3c 6b                	cmp    al,0x6b
10004162:	75 09                	jne    1000416d <PS2Keyboard::handler()+0x479>
10004164:	53                   	push   ebx
10004165:	52                   	push   edx
10004166:	68 14 03 00 00       	push   0x314
1000416b:	eb 73                	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
1000416d:	3c 73                	cmp    al,0x73
1000416f:	75 09                	jne    1000417a <PS2Keyboard::handler()+0x486>
10004171:	51                   	push   ecx
10004172:	52                   	push   edx
10004173:	68 15 03 00 00       	push   0x315
10004178:	eb 66                	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
1000417a:	3c 74                	cmp    al,0x74
1000417c:	75 09                	jne    10004187 <PS2Keyboard::handler()+0x493>
1000417e:	50                   	push   eax
1000417f:	52                   	push   edx
10004180:	68 16 03 00 00       	push   0x316
10004185:	eb 59                	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10004187:	3c 6c                	cmp    al,0x6c
10004189:	75 09                	jne    10004194 <PS2Keyboard::handler()+0x4a0>
1000418b:	50                   	push   eax
1000418c:	52                   	push   edx
1000418d:	68 17 03 00 00       	push   0x317
10004192:	eb 4c                	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
10004194:	3c 75                	cmp    al,0x75
10004196:	75 09                	jne    100041a1 <PS2Keyboard::handler()+0x4ad>
10004198:	50                   	push   eax
10004199:	52                   	push   edx
1000419a:	68 18 03 00 00       	push   0x318
1000419f:	eb 3f                	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
100041a1:	3c 7d                	cmp    al,0x7d
100041a3:	75 09                	jne    100041ae <PS2Keyboard::handler()+0x4ba>
100041a5:	50                   	push   eax
100041a6:	52                   	push   edx
100041a7:	68 19 03 00 00       	push   0x319
100041ac:	eb 32                	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
100041ae:	3c 71                	cmp    al,0x71
100041b0:	75 09                	jne    100041bb <PS2Keyboard::handler()+0x4c7>
100041b2:	50                   	push   eax
100041b3:	52                   	push   edx
100041b4:	68 1a 03 00 00       	push   0x31a
100041b9:	eb 25                	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
100041bb:	3c 7b                	cmp    al,0x7b
100041bd:	75 09                	jne    100041c8 <PS2Keyboard::handler()+0x4d4>
100041bf:	50                   	push   eax
100041c0:	52                   	push   edx
100041c1:	68 1c 03 00 00       	push   0x31c
100041c6:	eb 18                	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
100041c8:	3c 79                	cmp    al,0x79
100041ca:	75 09                	jne    100041d5 <PS2Keyboard::handler()+0x4e1>
100041cc:	57                   	push   edi
100041cd:	52                   	push   edx
100041ce:	68 1b 03 00 00       	push   0x31b
100041d3:	eb 0b                	jmp    100041e0 <PS2Keyboard::handler()+0x4ec>
100041d5:	3c 7c                	cmp    al,0x7c
100041d7:	75 0f                	jne    100041e8 <PS2Keyboard::handler()+0x4f4>
100041d9:	53                   	push   ebx
100041da:	52                   	push   edx
100041db:	68 1e 03 00 00       	push   0x31e
100041e0:	56                   	push   esi
100041e1:	e8 fc ff ff ff       	call   100041e2 <PS2Keyboard::handler()+0x4ee>	100041e2: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
100041e6:	eb 45                	jmp    1000422d <PS2Keyboard::handler()+0x539>
100041e8:	0f b6 c0             	movzx  eax,al
100041eb:	8a 8e 69 01 00 00    	mov    cl,BYTE PTR [esi+0x169]
100041f1:	80 be 67 01 00 00 00 	cmp    BYTE PTR [esi+0x167],0x0
100041f8:	74 16                	je     10004210 <PS2Keyboard::handler()+0x51c>
100041fa:	84 c9                	test   cl,cl
100041fc:	74 09                	je     10004207 <PS2Keyboard::handler()+0x513>
100041fe:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10004201: R_386_32	PS2Keyboard::internalMapCapUpper
10004205:	eb 1d                	jmp    10004224 <PS2Keyboard::handler()+0x530>
10004207:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	1000420a: R_386_32	PS2Keyboard::internalMapperUpper
1000420e:	eb 14                	jmp    10004224 <PS2Keyboard::handler()+0x530>
10004210:	84 c9                	test   cl,cl
10004212:	74 09                	je     1000421d <PS2Keyboard::handler()+0x529>
10004214:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10004217: R_386_32	PS2Keyboard::internalMapCapLower
1000421b:	eb 07                	jmp    10004224 <PS2Keyboard::handler()+0x530>
1000421d:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10004220: R_386_32	PS2Keyboard::internalMapperLower
10004224:	51                   	push   ecx
10004225:	52                   	push   edx
10004226:	50                   	push   eax
10004227:	56                   	push   esi
10004228:	e8 fc ff ff ff       	call   10004229 <PS2Keyboard::handler()+0x535>	10004229: R_386_PC32	PS2Keyboard::sendKey(unsigned short, bool)
1000422d:	83 c4 10             	add    esp,0x10
10004230:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10004237:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
1000423e:	e9 ec 01 00 00       	jmp    1000442f <PS2Keyboard::handler()+0x73b>
10004243:	80 fa 1c             	cmp    dl,0x1c
10004246:	0f 84 35 fd ff ff    	je     10003f81 <PS2Keyboard::handler()+0x28d>
1000424c:	80 fa 35             	cmp    dl,0x35
1000424f:	e9 ad fb ff ff       	jmp    10003e01 <PS2Keyboard::handler()+0x10d>
10004254:	80 fa 4d             	cmp    dl,0x4d
10004257:	0f 84 93 fc ff ff    	je     10003ef0 <PS2Keyboard::handler()+0x1fc>
1000425d:	80 fa 4f             	cmp    dl,0x4f
10004260:	e9 bf fb ff ff       	jmp    10003e24 <PS2Keyboard::handler()+0x130>
10004265:	0f b6 8e 66 01 00 00 	movzx  ecx,BYTE PTR [esi+0x166]
1000426c:	80 fa 0e             	cmp    dl,0xe
1000426f:	75 07                	jne    10004278 <PS2Keyboard::handler()+0x584>
10004271:	50                   	push   eax
10004272:	51                   	push   ecx
10004273:	e9 29 fd ff ff       	jmp    10003fa1 <PS2Keyboard::handler()+0x2ad>
10004278:	80 fa 0f             	cmp    dl,0xf
1000427b:	75 07                	jne    10004284 <PS2Keyboard::handler()+0x590>
1000427d:	57                   	push   edi
1000427e:	51                   	push   ecx
1000427f:	e9 2a fd ff ff       	jmp    10003fae <PS2Keyboard::handler()+0x2ba>
10004284:	80 fa 3a             	cmp    dl,0x3a
10004287:	75 07                	jne    10004290 <PS2Keyboard::handler()+0x59c>
10004289:	84 c9                	test   cl,cl
1000428b:	e9 2b fd ff ff       	jmp    10003fbb <PS2Keyboard::handler()+0x2c7>
10004290:	80 fa 45             	cmp    dl,0x45
10004293:	75 07                	jne    1000429c <PS2Keyboard::handler()+0x5a8>
10004295:	84 c9                	test   cl,cl
10004297:	e9 4d fd ff ff       	jmp    10003fe9 <PS2Keyboard::handler()+0x2f5>
1000429c:	80 fa 46             	cmp    dl,0x46
1000429f:	75 07                	jne    100042a8 <PS2Keyboard::handler()+0x5b4>
100042a1:	84 c9                	test   cl,cl
100042a3:	e9 6f fd ff ff       	jmp    10004017 <PS2Keyboard::handler()+0x323>
100042a8:	80 fa 3b             	cmp    dl,0x3b
100042ab:	75 07                	jne    100042b4 <PS2Keyboard::handler()+0x5c0>
100042ad:	53                   	push   ebx
100042ae:	51                   	push   ecx
100042af:	e9 91 fd ff ff       	jmp    10004045 <PS2Keyboard::handler()+0x351>
100042b4:	80 fa 3c             	cmp    dl,0x3c
100042b7:	75 07                	jne    100042c0 <PS2Keyboard::handler()+0x5cc>
100042b9:	52                   	push   edx
100042ba:	51                   	push   ecx
100042bb:	e9 95 fd ff ff       	jmp    10004055 <PS2Keyboard::handler()+0x361>
100042c0:	80 fa 3d             	cmp    dl,0x3d
100042c3:	75 07                	jne    100042cc <PS2Keyboard::handler()+0x5d8>
100042c5:	50                   	push   eax
100042c6:	51                   	push   ecx
100042c7:	e9 99 fd ff ff       	jmp    10004065 <PS2Keyboard::handler()+0x371>
100042cc:	80 fa 3e             	cmp    dl,0x3e
100042cf:	75 07                	jne    100042d8 <PS2Keyboard::handler()+0x5e4>
100042d1:	50                   	push   eax
100042d2:	51                   	push   ecx
100042d3:	e9 9d fd ff ff       	jmp    10004075 <PS2Keyboard::handler()+0x381>
100042d8:	80 fa 3f             	cmp    dl,0x3f
100042db:	75 07                	jne    100042e4 <PS2Keyboard::handler()+0x5f0>
100042dd:	50                   	push   eax
100042de:	51                   	push   ecx
100042df:	e9 a1 fd ff ff       	jmp    10004085 <PS2Keyboard::handler()+0x391>
100042e4:	80 fa 40             	cmp    dl,0x40
100042e7:	75 07                	jne    100042f0 <PS2Keyboard::handler()+0x5fc>
100042e9:	50                   	push   eax
100042ea:	51                   	push   ecx
100042eb:	e9 a5 fd ff ff       	jmp    10004095 <PS2Keyboard::handler()+0x3a1>
100042f0:	80 fa 41             	cmp    dl,0x41
100042f3:	75 07                	jne    100042fc <PS2Keyboard::handler()+0x608>
100042f5:	50                   	push   eax
100042f6:	51                   	push   ecx
100042f7:	e9 ad fd ff ff       	jmp    100040a9 <PS2Keyboard::handler()+0x3b5>
100042fc:	80 fa 42             	cmp    dl,0x42
100042ff:	75 07                	jne    10004308 <PS2Keyboard::handler()+0x614>
10004301:	50                   	push   eax
10004302:	51                   	push   ecx
10004303:	e9 b1 fd ff ff       	jmp    100040b9 <PS2Keyboard::handler()+0x3c5>
10004308:	80 fa 43             	cmp    dl,0x43
1000430b:	75 07                	jne    10004314 <PS2Keyboard::handler()+0x620>
1000430d:	57                   	push   edi
1000430e:	51                   	push   ecx
1000430f:	e9 b5 fd ff ff       	jmp    100040c9 <PS2Keyboard::handler()+0x3d5>
10004314:	80 fa 44             	cmp    dl,0x44
10004317:	75 07                	jne    10004320 <PS2Keyboard::handler()+0x62c>
10004319:	53                   	push   ebx
1000431a:	51                   	push   ecx
1000431b:	e9 b9 fd ff ff       	jmp    100040d9 <PS2Keyboard::handler()+0x3e5>
10004320:	84 d2                	test   dl,dl
10004322:	75 07                	jne    1000432b <PS2Keyboard::handler()+0x637>
10004324:	52                   	push   edx
10004325:	51                   	push   ecx
10004326:	e9 be fd ff ff       	jmp    100040e9 <PS2Keyboard::handler()+0x3f5>
1000432b:	80 fa 1c             	cmp    dl,0x1c
1000432e:	75 07                	jne    10004337 <PS2Keyboard::handler()+0x643>
10004330:	50                   	push   eax
10004331:	51                   	push   ecx
10004332:	e9 d2 fd ff ff       	jmp    10004109 <PS2Keyboard::handler()+0x415>
10004337:	80 fa 01             	cmp    dl,0x1
1000433a:	75 07                	jne    10004343 <PS2Keyboard::handler()+0x64f>
1000433c:	50                   	push   eax
1000433d:	51                   	push   ecx
1000433e:	e9 d3 fd ff ff       	jmp    10004116 <PS2Keyboard::handler()+0x422>
10004343:	80 fa 52             	cmp    dl,0x52
10004346:	75 07                	jne    1000434f <PS2Keyboard::handler()+0x65b>
10004348:	50                   	push   eax
10004349:	51                   	push   ecx
1000434a:	e9 d7 fd ff ff       	jmp    10004126 <PS2Keyboard::handler()+0x432>
1000434f:	80 fa 4f             	cmp    dl,0x4f
10004352:	75 07                	jne    1000435b <PS2Keyboard::handler()+0x667>
10004354:	50                   	push   eax
10004355:	51                   	push   ecx
10004356:	e9 db fd ff ff       	jmp    10004136 <PS2Keyboard::handler()+0x442>
1000435b:	80 fa 50             	cmp    dl,0x50
1000435e:	75 07                	jne    10004367 <PS2Keyboard::handler()+0x673>
10004360:	50                   	push   eax
10004361:	51                   	push   ecx
10004362:	e9 df fd ff ff       	jmp    10004146 <PS2Keyboard::handler()+0x452>
10004367:	80 fa 51             	cmp    dl,0x51
1000436a:	75 07                	jne    10004373 <PS2Keyboard::handler()+0x67f>
1000436c:	50                   	push   eax
1000436d:	51                   	push   ecx
1000436e:	e9 e3 fd ff ff       	jmp    10004156 <PS2Keyboard::handler()+0x462>
10004373:	80 fa 4b             	cmp    dl,0x4b
10004376:	75 07                	jne    1000437f <PS2Keyboard::handler()+0x68b>
10004378:	57                   	push   edi
10004379:	51                   	push   ecx
1000437a:	e9 e7 fd ff ff       	jmp    10004166 <PS2Keyboard::handler()+0x472>
1000437f:	80 fa 4c             	cmp    dl,0x4c
10004382:	75 07                	jne    1000438b <PS2Keyboard::handler()+0x697>
10004384:	53                   	push   ebx
10004385:	51                   	push   ecx
10004386:	e9 e8 fd ff ff       	jmp    10004173 <PS2Keyboard::handler()+0x47f>
1000438b:	80 fa 4d             	cmp    dl,0x4d
1000438e:	75 07                	jne    10004397 <PS2Keyboard::handler()+0x6a3>
10004390:	52                   	push   edx
10004391:	51                   	push   ecx
10004392:	e9 e9 fd ff ff       	jmp    10004180 <PS2Keyboard::handler()+0x48c>
10004397:	80 fa 47             	cmp    dl,0x47
1000439a:	75 07                	jne    100043a3 <PS2Keyboard::handler()+0x6af>
1000439c:	50                   	push   eax
1000439d:	51                   	push   ecx
1000439e:	e9 ea fd ff ff       	jmp    1000418d <PS2Keyboard::handler()+0x499>
100043a3:	80 fa 48             	cmp    dl,0x48
100043a6:	75 07                	jne    100043af <PS2Keyboard::handler()+0x6bb>
100043a8:	50                   	push   eax
100043a9:	51                   	push   ecx
100043aa:	e9 eb fd ff ff       	jmp    1000419a <PS2Keyboard::handler()+0x4a6>
100043af:	80 fa 49             	cmp    dl,0x49
100043b2:	75 07                	jne    100043bb <PS2Keyboard::handler()+0x6c7>
100043b4:	50                   	push   eax
100043b5:	51                   	push   ecx
100043b6:	e9 ec fd ff ff       	jmp    100041a7 <PS2Keyboard::handler()+0x4b3>
100043bb:	80 fa 53             	cmp    dl,0x53
100043be:	75 07                	jne    100043c7 <PS2Keyboard::handler()+0x6d3>
100043c0:	50                   	push   eax
100043c1:	51                   	push   ecx
100043c2:	e9 ed fd ff ff       	jmp    100041b4 <PS2Keyboard::handler()+0x4c0>
100043c7:	80 fa 4a             	cmp    dl,0x4a
100043ca:	75 07                	jne    100043d3 <PS2Keyboard::handler()+0x6df>
100043cc:	50                   	push   eax
100043cd:	51                   	push   ecx
100043ce:	e9 ee fd ff ff       	jmp    100041c1 <PS2Keyboard::handler()+0x4cd>
100043d3:	80 fa 4e             	cmp    dl,0x4e
100043d6:	75 07                	jne    100043df <PS2Keyboard::handler()+0x6eb>
100043d8:	50                   	push   eax
100043d9:	51                   	push   ecx
100043da:	e9 ef fd ff ff       	jmp    100041ce <PS2Keyboard::handler()+0x4da>
100043df:	80 fa 37             	cmp    dl,0x37
100043e2:	75 07                	jne    100043eb <PS2Keyboard::handler()+0x6f7>
100043e4:	57                   	push   edi
100043e5:	51                   	push   ecx
100043e6:	e9 f0 fd ff ff       	jmp    100041db <PS2Keyboard::handler()+0x4e7>
100043eb:	0f b6 be 67 01 00 00 	movzx  edi,BYTE PTR [esi+0x167]
100043f2:	0f b6 86 69 01 00 00 	movzx  eax,BYTE PTR [esi+0x169]
100043f9:	c1 e7 07             	shl    edi,0x7
100043fc:	c1 e0 08             	shl    eax,0x8
100043ff:	8d bc 07 00 00 00 00 	lea    edi,[edi+eax*1+0x0]	10004402: R_386_32	PS2Keyboard::internalMapperLowerBad
10004406:	88 d0                	mov    al,dl
10004408:	89 fb                	mov    ebx,edi
1000440a:	d7                   	xlat   BYTE PTR ds:[ebx]
1000440b:	88 c2                	mov    dl,al
1000440d:	0f b6 d2             	movzx  edx,dl
10004410:	53                   	push   ebx
10004411:	51                   	push   ecx
10004412:	52                   	push   edx
10004413:	e9 0f fe ff ff       	jmp    10004227 <PS2Keyboard::handler()+0x533>
10004418:	80 fa 36             	cmp    dl,0x36
1000441b:	0f 84 26 f9 ff ff    	je     10003d47 <PS2Keyboard::handler()+0x53>
10004421:	80 fa 38             	cmp    dl,0x38
10004424:	0f 84 7f f9 ff ff    	je     10003da9 <PS2Keyboard::handler()+0xb5>
1000442a:	e9 5b fa ff ff       	jmp    10003e8a <PS2Keyboard::handler()+0x196>
1000442f:	5b                   	pop    ebx
10004430:	5e                   	pop    esi
10004431:	5f                   	pop    edi
10004432:	c3                   	ret    
10004433:	90                   	nop

10004434 <PS2Keyboard::open(int, int, void*)>:
10004434:	53                   	push   ebx
10004435:	83 ec 14             	sub    esp,0x14
10004438:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
1000443c:	8b 83 c8 00 00 00    	mov    eax,DWORD PTR [ebx+0xc8]
10004442:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10004448:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000444c:	89 83 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],eax
10004452:	53                   	push   ebx
10004453:	6a 01                	push   0x1
10004455:	68 00 00 00 00       	push   0x0	10004456: R_386_32	ps2KeyboardHandler(regs*, void*)
1000445a:	6a 01                	push   0x1
1000445c:	53                   	push   ebx
1000445d:	e8 fc ff ff ff       	call   1000445e <PS2Keyboard::open(int, int, void*)+0x2a>	1000445e: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10004462:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
10004468:	a1 00 00 00 00       	mov    eax,ds:0x0	10004469: R_386_32	sysBootSettings
1000446d:	c1 e8 02             	shr    eax,0x2
10004470:	83 f0 01             	xor    eax,0x1
10004473:	83 e0 01             	and    eax,0x1
10004476:	88 83 6e 01 00 00    	mov    BYTE PTR [ebx+0x16e],al
1000447c:	31 c0                	xor    eax,eax
1000447e:	83 c4 28             	add    esp,0x28
10004481:	5b                   	pop    ebx
10004482:	c3                   	ret    
10004483:	90                   	nop

10004484 <PS2Keyboard::close(int, int, void*)>:
10004484:	83 c8 ff             	or     eax,0xffffffff
10004487:	c3                   	ret    

10004488 <PS2Mouse::PS2Mouse()>:
10004488:	55                   	push   ebp
10004489:	89 e5                	mov    ebp,esp
1000448b:	83 ec 08             	sub    esp,0x8
1000448e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004491:	83 ec 08             	sub    esp,0x8
10004494:	68 00 00 00 00       	push   0x0	10004495: R_386_32	ps2mousename
10004499:	50                   	push   eax
1000449a:	e8 fc ff ff ff       	call   1000449b <PS2Mouse::PS2Mouse()+0x13>	1000449b: R_386_PC32	Mouse::Mouse(char const*)
1000449f:	83 c4 10             	add    esp,0x10
100044a2:	ba 08 00 00 00       	mov    edx,0x8	100044a3: R_386_32	vtable for PS2Mouse
100044a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100044aa:	89 10                	mov    DWORD PTR [eax],edx
100044ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100044af:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100044b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100044b9:	c7 80 62 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x162],0x0
100044c3:	90                   	nop
100044c4:	c9                   	leave  
100044c5:	c3                   	ret    

100044c6 <ps2MouseHandler(regs*, void*)>:
100044c6:	55                   	push   ebp
100044c7:	89 e5                	mov    ebp,esp
100044c9:	83 ec 08             	sub    esp,0x8
100044cc:	83 ec 0c             	sub    esp,0xc
100044cf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100044d2:	e8 fc ff ff ff       	call   100044d3 <ps2MouseHandler(regs*, void*)+0xd>	100044d3: R_386_PC32	PS2Mouse::handler()
100044d7:	83 c4 10             	add    esp,0x10
100044da:	90                   	nop
100044db:	c9                   	leave  
100044dc:	c3                   	ret    
100044dd:	90                   	nop

100044de <PS2Mouse::handler()>:
100044de:	55                   	push   ebp
100044df:	89 e5                	mov    ebp,esp
100044e1:	83 ec 28             	sub    esp,0x28
100044e4:	66 c7 45 ea 64 00    	mov    WORD PTR [ebp-0x16],0x64
100044ea:	66 8b 45 ea          	mov    ax,WORD PTR [ebp-0x16]
100044ee:	89 c2                	mov    edx,eax
100044f0:	ec                   	in     al,dx
100044f1:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
100044f4:	8a 45 e9             	mov    al,BYTE PTR [ebp-0x17]
100044f7:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100044fa:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100044fe:	83 e0 01             	and    eax,0x1
10004501:	85 c0                	test   eax,eax
10004503:	0f 84 8d 01 00 00    	je     10004696 <PS2Mouse::handler()+0x1b8>
10004509:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000450d:	83 e0 20             	and    eax,0x20
10004510:	85 c0                	test   eax,eax
10004512:	0f 84 81 01 00 00    	je     10004699 <PS2Mouse::handler()+0x1bb>
10004518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000451b:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10004521:	8d 50 01             	lea    edx,[eax+0x1]
10004524:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10004527:	88 91 61 01 00 00    	mov    BYTE PTR [ecx+0x161],dl
1000452d:	0f b6 c8             	movzx  ecx,al
10004530:	66 c7 45 e6 60 00    	mov    WORD PTR [ebp-0x1a],0x60
10004536:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
1000453a:	89 c2                	mov    edx,eax
1000453c:	ec                   	in     al,dx
1000453d:	88 45 e5             	mov    BYTE PTR [ebp-0x1b],al
10004540:	8a 55 e5             	mov    dl,BYTE PTR [ebp-0x1b]
10004543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004546:	88 94 08 62 01 00 00 	mov    BYTE PTR [eax+ecx*1+0x162],dl
1000454d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004550:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10004556:	0f b6 c0             	movzx  eax,al
10004559:	83 e0 08             	and    eax,0x8
1000455c:	85 c0                	test   eax,eax
1000455e:	75 0f                	jne    1000456f <PS2Mouse::handler()+0x91>
10004560:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004563:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
1000456a:	e9 2b 01 00 00       	jmp    1000469a <PS2Mouse::handler()+0x1bc>
1000456f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004572:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10004578:	84 c0                	test   al,al
1000457a:	75 0d                	jne    10004589 <PS2Mouse::handler()+0xab>
1000457c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000457f:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10004585:	3c 02                	cmp    al,0x2
10004587:	77 2f                	ja     100045b8 <PS2Mouse::handler()+0xda>
10004589:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000458c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10004592:	3c 03                	cmp    al,0x3
10004594:	74 11                	je     100045a7 <PS2Mouse::handler()+0xc9>
10004596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004599:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
1000459f:	3c 04                	cmp    al,0x4
100045a1:	0f 85 f3 00 00 00    	jne    1000469a <PS2Mouse::handler()+0x1bc>
100045a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100045aa:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
100045b0:	3c 03                	cmp    al,0x3
100045b2:	0f 86 e2 00 00 00    	jbe    1000469a <PS2Mouse::handler()+0x1bc>
100045b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100045bb:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100045c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100045c5:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100045cb:	84 c0                	test   al,al
100045cd:	78 13                	js     100045e2 <PS2Mouse::handler()+0x104>
100045cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100045d2:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100045d8:	0f b6 c0             	movzx  eax,al
100045db:	83 e0 40             	and    eax,0x40
100045de:	85 c0                	test   eax,eax
100045e0:	74 37                	je     10004619 <PS2Mouse::handler()+0x13b>
100045e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100045e5:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100045ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100045ef:	c6 80 62 01 00 00 00 	mov    BYTE PTR [eax+0x162],0x0
100045f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100045f9:	c6 80 63 01 00 00 00 	mov    BYTE PTR [eax+0x163],0x0
10004600:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004603:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
1000460a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000460d:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10004614:	e9 81 00 00 00       	jmp    1000469a <PS2Mouse::handler()+0x1bc>
10004619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000461c:	8a 80 63 01 00 00    	mov    al,BYTE PTR [eax+0x163]
10004622:	0f b6 d0             	movzx  edx,al
10004625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004628:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
1000462e:	0f b6 c0             	movzx  eax,al
10004631:	c1 e0 04             	shl    eax,0x4
10004634:	25 00 01 00 00       	and    eax,0x100
10004639:	29 c2                	sub    edx,eax
1000463b:	89 d0                	mov    eax,edx
1000463d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10004640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004643:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10004649:	0f b6 c0             	movzx  eax,al
1000464c:	c1 e0 03             	shl    eax,0x3
1000464f:	25 00 01 00 00       	and    eax,0x100
10004654:	89 c2                	mov    edx,eax
10004656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004659:	8a 80 64 01 00 00    	mov    al,BYTE PTR [eax+0x164]
1000465f:	0f b6 c0             	movzx  eax,al
10004662:	29 c2                	sub    edx,eax
10004664:	89 d0                	mov    eax,edx
10004666:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10004669:	a1 00 00 00 00       	mov    eax,ds:0x0	1000466a: R_386_32	guiMouseHandler
1000466e:	85 c0                	test   eax,eax
10004670:	74 28                	je     1000469a <PS2Mouse::handler()+0x1bc>
10004672:	a1 00 00 00 00       	mov    eax,ds:0x0	10004673: R_386_32	guiMouseHandler
10004677:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000467a:	8a 92 62 01 00 00    	mov    dl,BYTE PTR [edx+0x162]
10004680:	0f b6 d2             	movzx  edx,dl
10004683:	83 e2 01             	and    edx,0x1
10004686:	6a 00                	push   0x0
10004688:	52                   	push   edx
10004689:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000468c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000468f:	ff d0                	call   eax
10004691:	83 c4 10             	add    esp,0x10
10004694:	eb 04                	jmp    1000469a <PS2Mouse::handler()+0x1bc>
10004696:	90                   	nop
10004697:	eb 01                	jmp    1000469a <PS2Mouse::handler()+0x1bc>
10004699:	90                   	nop
1000469a:	c9                   	leave  
1000469b:	c3                   	ret    

1000469c <PS2Mouse::open(int, int, void*)>:
1000469c:	55                   	push   ebp
1000469d:	89 e5                	mov    ebp,esp
1000469f:	83 ec 08             	sub    esp,0x8
100046a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046a5:	8b 90 c8 00 00 00    	mov    edx,DWORD PTR [eax+0xc8]
100046ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046ae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
100046b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046b7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100046ba:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
100046c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046c3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100046c9:	83 ec 08             	sub    esp,0x8
100046cc:	68 f6 00 00 00       	push   0xf6
100046d1:	50                   	push   eax
100046d2:	e8 fc ff ff ff       	call   100046d3 <PS2Mouse::open(int, int, void*)+0x37>	100046d3: R_386_PC32	PS2Port::deviceWrite(unsigned char)
100046d7:	83 c4 10             	add    esp,0x10
100046da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046dd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100046e3:	83 ec 0c             	sub    esp,0xc
100046e6:	50                   	push   eax
100046e7:	e8 fc ff ff ff       	call   100046e8 <PS2Mouse::open(int, int, void*)+0x4c>	100046e8: R_386_PC32	PS2Port::deviceRead()
100046ec:	83 c4 10             	add    esp,0x10
100046ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046f2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100046f8:	83 ec 08             	sub    esp,0x8
100046fb:	68 f4 00 00 00       	push   0xf4
10004700:	50                   	push   eax
10004701:	e8 fc ff ff ff       	call   10004702 <PS2Mouse::open(int, int, void*)+0x66>	10004702: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10004706:	83 c4 10             	add    esp,0x10
10004709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000470c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004712:	83 ec 0c             	sub    esp,0xc
10004715:	50                   	push   eax
10004716:	e8 fc ff ff ff       	call   10004717 <PS2Mouse::open(int, int, void*)+0x7b>	10004717: R_386_PC32	PS2Port::deviceRead()
1000471b:	83 c4 10             	add    esp,0x10
1000471e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004721:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10004728:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000472b:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
10004732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004735:	83 ec 0c             	sub    esp,0xc
10004738:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000473b:	6a 01                	push   0x1
1000473d:	68 00 00 00 00       	push   0x0	1000473e: R_386_32	ps2MouseHandler(regs*, void*)
10004742:	6a 0c                	push   0xc
10004744:	50                   	push   eax
10004745:	e8 fc ff ff ff       	call   10004746 <PS2Mouse::open(int, int, void*)+0xaa>	10004746: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
1000474a:	83 c4 20             	add    esp,0x20
1000474d:	b8 00 00 00 00       	mov    eax,0x0
10004752:	c9                   	leave  
10004753:	c3                   	ret    

10004754 <PS2Mouse::close(int, int, void*)>:
10004754:	b8 00 00 00 00       	mov    eax,0x0
10004759:	c3                   	ret    

1000475a <PS2Mouse::detect()>:
1000475a:	90                   	nop
1000475b:	c3                   	ret    

1000475c <PS2Port::PS2Port()>:
1000475c:	55                   	push   ebp
1000475d:	89 e5                	mov    ebp,esp
1000475f:	83 ec 08             	sub    esp,0x8
10004762:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004765:	83 ec 08             	sub    esp,0x8
10004768:	68 00 00 00 00       	push   0x0	10004769: R_386_32	ps2portname
1000476d:	50                   	push   eax
1000476e:	e8 fc ff ff ff       	call   1000476f <PS2Port::PS2Port()+0x13>	1000476f: R_386_PC32	Bus::Bus(char const*)
10004773:	83 c4 10             	add    esp,0x10
10004776:	ba 08 00 00 00       	mov    edx,0x8	10004777: R_386_32	vtable for PS2Port
1000477b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000477e:	89 10                	mov    DWORD PTR [eax],edx
10004780:	90                   	nop
10004781:	c9                   	leave  
10004782:	c3                   	ret    
10004783:	90                   	nop

10004784 <PS2Port::open(int, int, void*)>:
10004784:	55                   	push   ebp
10004785:	89 e5                	mov    ebp,esp
10004787:	83 ec 08             	sub    esp,0x8
1000478a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000478d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10004790:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10004796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004799:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000479c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
100047a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047a5:	8b 00                	mov    eax,DWORD PTR [eax]
100047a7:	83 c0 18             	add    eax,0x18
100047aa:	8b 00                	mov    eax,DWORD PTR [eax]
100047ac:	83 ec 0c             	sub    esp,0xc
100047af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100047b2:	ff d0                	call   eax
100047b4:	83 c4 10             	add    esp,0x10
100047b7:	b8 00 00 00 00       	mov    eax,0x0
100047bc:	c9                   	leave  
100047bd:	c3                   	ret    

100047be <PS2Port::close(int, int, void*)>:
100047be:	b8 00 00 00 00       	mov    eax,0x0
100047c3:	c3                   	ret    

100047c4 <PS2Port::detect()>:
100047c4:	55                   	push   ebp
100047c5:	89 e5                	mov    ebp,esp
100047c7:	53                   	push   ebx
100047c8:	83 ec 14             	sub    esp,0x14
100047cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100047d4:	85 c0                	test   eax,eax
100047d6:	75 5a                	jne    10004832 <PS2Port::detect()+0x6e>
100047d8:	c7 45 ec 70 01 00 00 	mov    DWORD PTR [ebp-0x14],0x170
100047df:	83 ec 0c             	sub    esp,0xc
100047e2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100047e5:	e8 fc ff ff ff       	call   100047e6 <PS2Port::detect()+0x22>	100047e6: R_386_PC32	malloc
100047ea:	83 c4 10             	add    esp,0x10
100047ed:	89 c3                	mov    ebx,eax
100047ef:	83 ec 0c             	sub    esp,0xc
100047f2:	53                   	push   ebx
100047f3:	e8 fc ff ff ff       	call   100047f4 <PS2Port::detect()+0x30>	100047f4: R_386_PC32	PS2Keyboard::PS2Keyboard()
100047f8:	83 c4 10             	add    esp,0x10
100047fb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100047fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004801:	83 ec 08             	sub    esp,0x8
10004804:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10004807:	50                   	push   eax
10004808:	e8 fc ff ff ff       	call   10004809 <PS2Port::detect()+0x45>	10004809: R_386_PC32	Device::addChild(Device*)
1000480d:	83 c4 10             	add    esp,0x10
10004810:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004813:	8b 00                	mov    eax,DWORD PTR [eax]
10004815:	83 c0 08             	add    eax,0x8
10004818:	8b 00                	mov    eax,DWORD PTR [eax]
1000481a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000481d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10004823:	52                   	push   edx
10004824:	6a 00                	push   0x0
10004826:	6a 00                	push   0x0
10004828:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000482b:	ff d0                	call   eax
1000482d:	83 c4 10             	add    esp,0x10
10004830:	eb 66                	jmp    10004898 <PS2Port::detect()+0xd4>
10004832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004835:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000483b:	83 f8 01             	cmp    eax,0x1
1000483e:	75 58                	jne    10004898 <PS2Port::detect()+0xd4>
10004840:	c7 45 e8 68 01 00 00 	mov    DWORD PTR [ebp-0x18],0x168
10004847:	83 ec 0c             	sub    esp,0xc
1000484a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
1000484d:	e8 fc ff ff ff       	call   1000484e <PS2Port::detect()+0x8a>	1000484e: R_386_PC32	malloc
10004852:	83 c4 10             	add    esp,0x10
10004855:	89 c3                	mov    ebx,eax
10004857:	83 ec 0c             	sub    esp,0xc
1000485a:	53                   	push   ebx
1000485b:	e8 fc ff ff ff       	call   1000485c <PS2Port::detect()+0x98>	1000485c: R_386_PC32	PS2Mouse::PS2Mouse()
10004860:	83 c4 10             	add    esp,0x10
10004863:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
10004866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004869:	83 ec 08             	sub    esp,0x8
1000486c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000486f:	50                   	push   eax
10004870:	e8 fc ff ff ff       	call   10004871 <PS2Port::detect()+0xad>	10004871: R_386_PC32	Device::addChild(Device*)
10004875:	83 c4 10             	add    esp,0x10
10004878:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000487b:	8b 00                	mov    eax,DWORD PTR [eax]
1000487d:	83 c0 08             	add    eax,0x8
10004880:	8b 00                	mov    eax,DWORD PTR [eax]
10004882:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10004885:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
1000488b:	52                   	push   edx
1000488c:	6a 00                	push   0x0
1000488e:	6a 01                	push   0x1
10004890:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10004893:	ff d0                	call   eax
10004895:	83 c4 10             	add    esp,0x10
10004898:	90                   	nop
10004899:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000489c:	c9                   	leave  
1000489d:	c3                   	ret    

1000489e <PS2Port::deviceWrite(unsigned char)>:
1000489e:	55                   	push   ebp
1000489f:	89 e5                	mov    ebp,esp
100048a1:	83 ec 28             	sub    esp,0x28
100048a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100048a7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
100048aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048ad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100048b3:	83 f8 01             	cmp    eax,0x1
100048b6:	75 1a                	jne    100048d2 <PS2Port::deviceWrite(unsigned char)+0x34>
100048b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048bb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100048c1:	83 ec 08             	sub    esp,0x8
100048c4:	68 d4 00 00 00       	push   0xd4
100048c9:	50                   	push   eax
100048ca:	e8 fc ff ff ff       	call   100048cb <PS2Port::deviceWrite(unsigned char)+0x2d>	100048cb: R_386_PC32	PS2::controllerWrite(unsigned char)
100048cf:	83 c4 10             	add    esp,0x10
100048d2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100048d9:	66 c7 45 f0 64 00    	mov    WORD PTR [ebp-0x10],0x64
100048df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100048e2:	89 c2                	mov    edx,eax
100048e4:	ec                   	in     al,dx
100048e5:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100048e8:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100048eb:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100048ee:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100048f2:	83 e0 02             	and    eax,0x2
100048f5:	85 c0                	test   eax,eax
100048f7:	74 29                	je     10004922 <PS2Port::deviceWrite(unsigned char)+0x84>
100048f9:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100048fd:	83 e0 40             	and    eax,0x40
10004900:	85 c0                	test   eax,eax
10004902:	75 22                	jne    10004926 <PS2Port::deviceWrite(unsigned char)+0x88>
10004904:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10004907:	84 c0                	test   al,al
10004909:	78 1b                	js     10004926 <PS2Port::deviceWrite(unsigned char)+0x88>
1000490b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000490e:	8d 50 01             	lea    edx,[eax+0x1]
10004911:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10004914:	3d 40 06 00 00       	cmp    eax,0x640
10004919:	0f 94 c0             	sete   al
1000491c:	84 c0                	test   al,al
1000491e:	75 05                	jne    10004925 <PS2Port::deviceWrite(unsigned char)+0x87>
10004920:	eb b7                	jmp    100048d9 <PS2Port::deviceWrite(unsigned char)+0x3b>
10004922:	90                   	nop
10004923:	eb 01                	jmp    10004926 <PS2Port::deviceWrite(unsigned char)+0x88>
10004925:	90                   	nop
10004926:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
1000492a:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10004930:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10004933:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10004936:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10004939:	ee                   	out    dx,al
1000493a:	b0 01                	mov    al,0x1
1000493c:	c9                   	leave  
1000493d:	c3                   	ret    

1000493e <PS2Port::deviceRead()>:
1000493e:	55                   	push   ebp
1000493f:	89 e5                	mov    ebp,esp
10004941:	83 ec 08             	sub    esp,0x8
10004944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004947:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000494d:	83 ec 0c             	sub    esp,0xc
10004950:	50                   	push   eax
10004951:	e8 fc ff ff ff       	call   10004952 <PS2Port::deviceRead()+0x14>	10004952: R_386_PC32	PS2::controllerRead()
10004956:	83 c4 10             	add    esp,0x10
10004959:	c9                   	leave  
1000495a:	c3                   	ret    
1000495b:	90                   	nop

1000495c <sb16Demo(void*)>:
1000495c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000495d: R_386_32	irqDisableCounter
10004961:	48                   	dec    eax
10004962:	a3 00 00 00 00       	mov    ds:0x0,eax	10004963: R_386_32	irqDisableCounter
10004967:	75 01                	jne    1000496a <sb16Demo(void*)+0xe>
10004969:	fb                   	sti    
1000496a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
10004972:	e9 fc ff ff ff       	jmp    10004973 <sb16Demo(void*)+0x17>	10004973: R_386_PC32	terminateTask(int)
10004977:	90                   	nop

10004978 <SoundBlaster16::resetDSP()>:
10004978:	53                   	push   ebx
10004979:	b0 01                	mov    al,0x1
1000497b:	83 ec 10             	sub    esp,0x10
1000497e:	bb 26 02 00 00       	mov    ebx,0x226
10004983:	89 da                	mov    edx,ebx
10004985:	ee                   	out    dx,al
10004986:	6a 00                	push   0x0
10004988:	68 c0 c6 2d 00       	push   0x2dc6c0
1000498d:	e8 fc ff ff ff       	call   1000498e <SoundBlaster16::resetDSP()+0x16>	1000498e: R_386_PC32	nanoSleep(unsigned long long)
10004992:	31 c0                	xor    eax,eax
10004994:	89 da                	mov    edx,ebx
10004996:	ee                   	out    dx,al
10004997:	ba 2a 02 00 00       	mov    edx,0x22a
1000499c:	ec                   	in     al,dx
1000499d:	83 c4 10             	add    esp,0x10
100049a0:	3c aa                	cmp    al,0xaa
100049a2:	75 25                	jne    100049c9 <SoundBlaster16::resetDSP()+0x51>
100049a4:	b0 e1                	mov    al,0xe1
100049a6:	ba 2c 02 00 00       	mov    edx,0x22c
100049ab:	ee                   	out    dx,al
100049ac:	ba 2e 02 00 00       	mov    edx,0x22e
100049b1:	ec                   	in     al,dx
100049b2:	84 c0                	test   al,al
100049b4:	79 fb                	jns    100049b1 <SoundBlaster16::resetDSP()+0x39>
100049b6:	ba 2a 02 00 00       	mov    edx,0x22a
100049bb:	ec                   	in     al,dx
100049bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100049c0:	88 81 f8 01 00 00    	mov    BYTE PTR [ecx+0x1f8],al
100049c6:	ec                   	in     al,dx
100049c7:	eb 13                	jmp    100049dc <SoundBlaster16::resetDSP()+0x64>
100049c9:	0f b6 c0             	movzx  eax,al
100049cc:	51                   	push   ecx
100049cd:	51                   	push   ecx
100049ce:	50                   	push   eax
100049cf:	68 00 00 00 00       	push   0x0	100049d0: R_386_32	badVer
100049d4:	e8 fc ff ff ff       	call   100049d5 <SoundBlaster16::resetDSP()+0x5d>	100049d5: R_386_PC32	Dbg::kprintf(char const*, ...)
100049d9:	83 c4 10             	add    esp,0x10
100049dc:	83 c4 08             	add    esp,0x8
100049df:	5b                   	pop    ebx
100049e0:	c3                   	ret    
100049e1:	90                   	nop

100049e2 <SoundBlaster16::DSPOut(unsigned short, unsigned char)>:
100049e2:	53                   	push   ebx
100049e3:	ba 2c 02 00 00       	mov    edx,0x22c
100049e8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
100049ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100049f0:	ec                   	in     al,dx
100049f1:	84 c0                	test   al,al
100049f3:	78 fb                	js     100049f0 <SoundBlaster16::DSPOut(unsigned short, unsigned char)+0xe>
100049f5:	88 c8                	mov    al,cl
100049f7:	89 da                	mov    edx,ebx
100049f9:	ee                   	out    dx,al
100049fa:	5b                   	pop    ebx
100049fb:	c3                   	ret    

100049fc <SoundBlaster16::turnSpeakerOn(bool)>:
100049fc:	53                   	push   ebx
100049fd:	52                   	push   edx
100049fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10004a02:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10004a06:	80 fa 01             	cmp    dl,0x1
10004a09:	89 14 24             	mov    DWORD PTR [esp],edx
10004a0c:	19 c0                	sbb    eax,eax
10004a0e:	83 e0 02             	and    eax,0x2
10004a11:	05 d1 00 00 00       	add    eax,0xd1
10004a16:	50                   	push   eax
10004a17:	68 2c 02 00 00       	push   0x22c
10004a1c:	53                   	push   ebx
10004a1d:	e8 fc ff ff ff       	call   10004a1e <SoundBlaster16::turnSpeakerOn(bool)+0x22>	10004a1e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004a22:	83 c4 0c             	add    esp,0xc
10004a25:	8b 14 24             	mov    edx,DWORD PTR [esp]
10004a28:	84 d2                	test   dl,dl
10004a2a:	75 23                	jne    10004a4f <SoundBlaster16::turnSpeakerOn(bool)+0x53>
10004a2c:	68 d0 00 00 00       	push   0xd0
10004a31:	68 2c 02 00 00       	push   0x22c
10004a36:	53                   	push   ebx
10004a37:	e8 fc ff ff ff       	call   10004a38 <SoundBlaster16::turnSpeakerOn(bool)+0x3c>	10004a38: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004a3c:	68 d3 00 00 00       	push   0xd3
10004a41:	68 2c 02 00 00       	push   0x22c
10004a46:	53                   	push   ebx
10004a47:	e8 fc ff ff ff       	call   10004a48 <SoundBlaster16::turnSpeakerOn(bool)+0x4c>	10004a48: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004a4c:	83 c4 18             	add    esp,0x18
10004a4f:	58                   	pop    eax
10004a50:	5b                   	pop    ebx
10004a51:	c3                   	ret    

10004a52 <SoundBlaster16::SoundBlaster16()>:
10004a52:	55                   	push   ebp
10004a53:	89 e5                	mov    ebp,esp
10004a55:	83 ec 08             	sub    esp,0x8
10004a58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a5b:	83 ec 08             	sub    esp,0x8
10004a5e:	68 00 00 00 00       	push   0x0	10004a5f: R_386_32	sb16name
10004a63:	50                   	push   eax
10004a64:	e8 fc ff ff ff       	call   10004a65 <SoundBlaster16::SoundBlaster16()+0x13>	10004a65: R_386_PC32	SoundDevice::SoundDevice(char const*)
10004a69:	83 c4 10             	add    esp,0x10
10004a6c:	ba 08 00 00 00       	mov    edx,0x8	10004a6d: R_386_32	vtable for SoundBlaster16
10004a71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a74:	89 10                	mov    DWORD PTR [eax],edx
10004a76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a79:	c7 80 e8 01 00 00 40 1f 00 00 	mov    DWORD PTR [eax+0x1e8],0x1f40
10004a83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a86:	c7 80 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x1ec],0x8
10004a90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a93:	c6 80 f0 01 00 00 01 	mov    BYTE PTR [eax+0x1f0],0x1
10004a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a9d:	c6 80 f1 01 00 00 00 	mov    BYTE PTR [eax+0x1f1],0x0
10004aa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004aa7:	c6 80 f2 01 00 00 00 	mov    BYTE PTR [eax+0x1f2],0x0
10004aae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004ab1:	c6 80 f8 01 00 00 00 	mov    BYTE PTR [eax+0x1f8],0x0
10004ab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004abb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10004ac1:	0f b6 d0             	movzx  edx,al
10004ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004ac7:	66 c7 44 90 04 20 02 	mov    WORD PTR [eax+edx*4+0x4],0x220
10004ace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004ad1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10004ad7:	0f b6 d0             	movzx  edx,al
10004ada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004add:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
10004ae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004ae5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10004aeb:	8d 50 01             	lea    edx,[eax+0x1]
10004aee:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10004af1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10004af7:	0f b6 d0             	movzx  edx,al
10004afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004afd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10004b01:	83 e1 3f             	and    ecx,0x3f
10004b04:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10004b08:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b09: R_386_32	tempBuffer
10004b0d:	85 c0                	test   eax,eax
10004b0f:	75 2a                	jne    10004b3b <SoundBlaster16::SoundBlaster16()+0xe9>
10004b11:	83 ec 0c             	sub    esp,0xc
10004b14:	68 00 80 00 00       	push   0x8000
10004b19:	e8 fc ff ff ff       	call   10004b1a <SoundBlaster16::SoundBlaster16()+0xc8>	10004b1a: R_386_PC32	malloc
10004b1e:	83 c4 10             	add    esp,0x10
10004b21:	a3 00 00 00 00       	mov    ds:0x0,eax	10004b22: R_386_32	tempBuffer
10004b26:	83 ec 0c             	sub    esp,0xc
10004b29:	68 00 80 00 00       	push   0x8000
10004b2e:	e8 fc ff ff ff       	call   10004b2f <SoundBlaster16::SoundBlaster16()+0xdd>	10004b2f: R_386_PC32	malloc
10004b33:	83 c4 10             	add    esp,0x10
10004b36:	a3 00 00 00 00       	mov    ds:0x0,eax	10004b37: R_386_32	outputBuffer
10004b3b:	90                   	nop
10004b3c:	c9                   	leave  
10004b3d:	c3                   	ret    

10004b3e <SoundBlaster16::handleIRQ()>:
10004b3e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10004b42:	ba 2e 02 00 00       	mov    edx,0x22e
10004b47:	83 b9 e0 01 00 00 08 	cmp    DWORD PTR [ecx+0x1e0],0x8
10004b4e:	74 17                	je     10004b67 <SoundBlaster16::handleIRQ()+0x29>
10004b50:	b0 82                	mov    al,0x82
10004b52:	ba 24 02 00 00       	mov    edx,0x224
10004b57:	ee                   	out    dx,al
10004b58:	ba 25 02 00 00       	mov    edx,0x225
10004b5d:	ec                   	in     al,dx
10004b5e:	a8 02                	test   al,0x2
10004b60:	74 06                	je     10004b68 <SoundBlaster16::handleIRQ()+0x2a>
10004b62:	ba 2f 02 00 00       	mov    edx,0x22f
10004b67:	ec                   	in     al,dx
10004b68:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
10004b6c:	e9 c7 03 00 00       	jmp    10004f38 <SoundBlaster16::onInterrupt()>

10004b71 <sb16Handler(regs*, void*)>:
10004b71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10004b79:	eb c3                	jmp    10004b3e <SoundBlaster16::handleIRQ()>
10004b7b:	90                   	nop

10004b7c <SoundBlaster16::getNumHwChannels()>:
10004b7c:	b8 01 00 00 00       	mov    eax,0x1
10004b81:	c3                   	ret    

10004b82 <SoundBlaster16::beginPlayback(int, int)>:
10004b82:	53                   	push   ebx
10004b83:	50                   	push   eax
10004b84:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10004b88:	6a 01                	push   0x1
10004b8a:	53                   	push   ebx
10004b8b:	e8 fc ff ff ff       	call   10004b8c <SoundBlaster16::beginPlayback(int, int)+0xa>	10004b8c: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10004b90:	80 bb f0 01 00 00 01 	cmp    BYTE PTR [ebx+0x1f0],0x1
10004b97:	5a                   	pop    edx
10004b98:	19 c0                	sbb    eax,eax
10004b9a:	59                   	pop    ecx
10004b9b:	83 c0 02             	add    eax,0x2
10004b9e:	0f af 83 e8 01 00 00 	imul   eax,DWORD PTR [ebx+0x1e8]
10004ba5:	89 c1                	mov    ecx,eax
10004ba7:	b8 c0 bd f0 ff       	mov    eax,0xfff0bdc0
10004bac:	99                   	cdq    
10004bad:	f7 f9                	idiv   ecx
10004baf:	89 04 24             	mov    DWORD PTR [esp],eax
10004bb2:	6a 40                	push   0x40
10004bb4:	68 2c 02 00 00       	push   0x22c
10004bb9:	53                   	push   ebx
10004bba:	e8 fc ff ff ff       	call   10004bbb <SoundBlaster16::beginPlayback(int, int)+0x39>	10004bbb: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004bbf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
10004bc4:	50                   	push   eax
10004bc5:	68 2c 02 00 00       	push   0x22c
10004bca:	53                   	push   ebx
10004bcb:	e8 fc ff ff ff       	call   10004bcc <SoundBlaster16::beginPlayback(int, int)+0x4a>	10004bcc: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004bd0:	68 c0 00 00 00       	push   0xc0
10004bd5:	68 2c 02 00 00       	push   0x22c
10004bda:	53                   	push   ebx
10004bdb:	e8 fc ff ff ff       	call   10004bdc <SoundBlaster16::beginPlayback(int, int)+0x5a>	10004bdc: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004be0:	83 c4 24             	add    esp,0x24
10004be3:	0f b6 83 f0 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1f0]
10004bea:	0f b6 93 f1 01 00 00 	movzx  edx,BYTE PTR [ebx+0x1f1]
10004bf1:	c1 e0 05             	shl    eax,0x5
10004bf4:	c1 e2 04             	shl    edx,0x4
10004bf7:	09 d0                	or     eax,edx
10004bf9:	0f be c0             	movsx  eax,al
10004bfc:	50                   	push   eax
10004bfd:	68 2c 02 00 00       	push   0x22c
10004c02:	53                   	push   ebx
10004c03:	e8 fc ff ff ff       	call   10004c04 <SoundBlaster16::beginPlayback(int, int)+0x82>	10004c04: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004c08:	68 ff 00 00 00       	push   0xff
10004c0d:	68 2c 02 00 00       	push   0x22c
10004c12:	53                   	push   ebx
10004c13:	e8 fc ff ff ff       	call   10004c14 <SoundBlaster16::beginPlayback(int, int)+0x92>	10004c14: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004c18:	6a 1f                	push   0x1f
10004c1a:	68 2c 02 00 00       	push   0x22c
10004c1f:	53                   	push   ebx
10004c20:	e8 fc ff ff ff       	call   10004c21 <SoundBlaster16::beginPlayback(int, int)+0x9f>	10004c21: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004c25:	83 c4 24             	add    esp,0x24
10004c28:	6a 48                	push   0x48
10004c2a:	68 2c 02 00 00       	push   0x22c
10004c2f:	53                   	push   ebx
10004c30:	e8 fc ff ff ff       	call   10004c31 <SoundBlaster16::beginPlayback(int, int)+0xaf>	10004c31: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004c35:	68 ff 00 00 00       	push   0xff
10004c3a:	68 2c 02 00 00       	push   0x22c
10004c3f:	53                   	push   ebx
10004c40:	e8 fc ff ff ff       	call   10004c41 <SoundBlaster16::beginPlayback(int, int)+0xbf>	10004c41: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004c45:	6a 1f                	push   0x1f
10004c47:	68 2c 02 00 00       	push   0x22c
10004c4c:	53                   	push   ebx
10004c4d:	e8 fc ff ff ff       	call   10004c4e <SoundBlaster16::beginPlayback(int, int)+0xcc>	10004c4e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004c52:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
10004c56:	c7 44 24 38 1c 00 00 00 	mov    DWORD PTR [esp+0x38],0x1c
10004c5e:	c7 44 24 34 2c 02 00 00 	mov    DWORD PTR [esp+0x34],0x22c
10004c66:	83 c4 28             	add    esp,0x28
10004c69:	5b                   	pop    ebx
10004c6a:	e9 73 fd ff ff       	jmp    100049e2 <SoundBlaster16::DSPOut(unsigned short, unsigned char)>
10004c6f:	90                   	nop

10004c70 <SoundBlaster16::stopPlayback()>:
10004c70:	6a 00                	push   0x0
10004c72:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10004c76:	e8 fc ff ff ff       	call   10004c77 <SoundBlaster16::stopPlayback()+0x7>	10004c77: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10004c7b:	58                   	pop    eax
10004c7c:	5a                   	pop    edx
10004c7d:	c3                   	ret    

10004c7e <SoundBlaster16::open(int, int, void*)>:
10004c7e:	56                   	push   esi
10004c7f:	be 25 02 00 00       	mov    esi,0x225
10004c84:	53                   	push   ebx
10004c85:	83 ec 14             	sub    esp,0x14
10004c88:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10004c8c:	c7 83 e8 01 00 00 40 1f 00 00 	mov    DWORD PTR [ebx+0x1e8],0x1f40
10004c96:	c7 83 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x1ec],0x8
10004ca0:	66 c7 83 f0 01 00 00 00 01 	mov    WORD PTR [ebx+0x1f0],0x100
10004ca9:	68 80 00 00 00       	push   0x80
10004cae:	68 24 02 00 00       	push   0x224
10004cb3:	53                   	push   ebx
10004cb4:	e8 fc ff ff ff       	call   10004cb5 <SoundBlaster16::open(int, int, void*)+0x37>	10004cb5: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004cb9:	89 f2                	mov    edx,esi
10004cbb:	ec                   	in     al,dx
10004cbc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
10004cc0:	68 80 00 00 00       	push   0x80
10004cc5:	68 24 02 00 00       	push   0x224
10004cca:	53                   	push   ebx
10004ccb:	e8 fc ff ff ff       	call   10004ccc <SoundBlaster16::open(int, int, void*)+0x4e>	10004ccc: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004cd0:	83 c4 18             	add    esp,0x18
10004cd3:	31 c0                	xor    eax,eax
10004cd5:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
10004cda:	0f 95 c0             	setne  al
10004cdd:	40                   	inc    eax
10004cde:	50                   	push   eax
10004cdf:	68 25 02 00 00       	push   0x225
10004ce4:	53                   	push   ebx
10004ce5:	e8 fc ff ff ff       	call   10004ce6 <SoundBlaster16::open(int, int, void*)+0x68>	10004ce6: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004cea:	68 80 00 00 00       	push   0x80
10004cef:	68 24 02 00 00       	push   0x224
10004cf4:	53                   	push   ebx
10004cf5:	e8 fc ff ff ff       	call   10004cf6 <SoundBlaster16::open(int, int, void*)+0x78>	10004cf6: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004cfa:	89 f2                	mov    edx,esi
10004cfc:	ec                   	in     al,dx
10004cfd:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
10004d01:	83 c4 18             	add    esp,0x18
10004d04:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
10004d08:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
10004d0c:	75 51                	jne    10004d5f <SoundBlaster16::open(int, int, void*)+0xe1>
10004d0e:	68 81 00 00 00       	push   0x81
10004d13:	68 24 02 00 00       	push   0x224
10004d18:	53                   	push   ebx
10004d19:	e8 fc ff ff ff       	call   10004d1a <SoundBlaster16::open(int, int, void*)+0x9c>	10004d1a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004d1e:	89 f2                	mov    edx,esi
10004d20:	ec                   	in     al,dx
10004d21:	83 e0 0a             	and    eax,0xa
10004d24:	3c 01                	cmp    al,0x1
10004d26:	19 c0                	sbb    eax,eax
10004d28:	83 e0 62             	and    eax,0x62
10004d2b:	40                   	inc    eax
10004d2c:	89 04 24             	mov    DWORD PTR [esp],eax
10004d2f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004d31: R_386_32	isaDMAController
10004d35:	e8 fc ff ff ff       	call   10004d36 <SoundBlaster16::open(int, int, void*)+0xb8>	10004d36: R_386_PC32	DMA::tryLockChannel(int)
10004d3a:	83 c4 10             	add    esp,0x10
10004d3d:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
10004d43:	85 c0                	test   eax,eax
10004d45:	75 3a                	jne    10004d81 <SoundBlaster16::open(int, int, void*)+0x103>
10004d47:	83 ec 0c             	sub    esp,0xc
10004d4a:	68 00 00 00 00       	push   0x0	10004d4b: R_386_32	nodma
10004d4f:	e8 fc ff ff ff       	call   10004d50 <SoundBlaster16::open(int, int, void*)+0xd2>	10004d50: R_386_PC32	Dbg::kprintf(char const*, ...)
10004d54:	83 c4 10             	add    esp,0x10
10004d57:	83 c8 ff             	or     eax,0xffffffff
10004d5a:	e9 d3 01 00 00       	jmp    10004f32 <SoundBlaster16::open(int, int, void*)+0x2b4>
10004d5f:	56                   	push   esi
10004d60:	56                   	push   esi
10004d61:	6a 01                	push   0x1
10004d63:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004d65: R_386_32	isaDMAController
10004d69:	e8 fc ff ff ff       	call   10004d6a <SoundBlaster16::open(int, int, void*)+0xec>	10004d6a: R_386_PC32	DMA::tryLockChannel(int)
10004d6e:	83 c4 10             	add    esp,0x10
10004d71:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
10004d77:	85 c0                	test   eax,eax
10004d79:	75 06                	jne    10004d81 <SoundBlaster16::open(int, int, void*)+0x103>
10004d7b:	51                   	push   ecx
10004d7c:	51                   	push   ecx
10004d7d:	6a 03                	push   0x3
10004d7f:	eb ae                	jmp    10004d2f <SoundBlaster16::open(int, int, void*)+0xb1>
10004d81:	50                   	push   eax
10004d82:	50                   	push   eax
10004d83:	68 00 40 00 00       	push   0x4000
10004d88:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10004d8e:	e8 fc ff ff ff       	call   10004d8f <SoundBlaster16::open(int, int, void*)+0x111>	10004d8f: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
10004d93:	58                   	pop    eax
10004d94:	5a                   	pop    edx
10004d95:	6a 59                	push   0x59
10004d97:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10004d9d:	e8 fc ff ff ff       	call   10004d9e <SoundBlaster16::open(int, int, void*)+0x120>	10004d9e: R_386_PC32	DMAChannel::setMode(unsigned char)
10004da2:	59                   	pop    ecx
10004da3:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10004da9:	e8 fc ff ff ff       	call   10004daa <SoundBlaster16::open(int, int, void*)+0x12c>	10004daa: R_386_PC32	DMAChannel::start()
10004dae:	5e                   	pop    esi
10004daf:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10004db5:	e8 fc ff ff ff       	call   10004db6 <SoundBlaster16::open(int, int, void*)+0x138>	10004db6: R_386_PC32	DMAChannel::getAddress()
10004dba:	89 83 f4 01 00 00    	mov    DWORD PTR [ebx+0x1f4],eax
10004dc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004dc3:	e8 fc ff ff ff       	call   10004dc4 <SoundBlaster16::open(int, int, void*)+0x146>	10004dc4: R_386_PC32	SoundBlaster16::resetDSP()
10004dc8:	58                   	pop    eax
10004dc9:	5a                   	pop    edx
10004dca:	6a 01                	push   0x1
10004dcc:	53                   	push   ebx
10004dcd:	e8 fc ff ff ff       	call   10004dce <SoundBlaster16::open(int, int, void*)+0x150>	10004dce: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10004dd2:	83 c4 10             	add    esp,0x10
10004dd5:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
10004dd9:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
10004ddd:	75 6f                	jne    10004e4e <SoundBlaster16::open(int, int, void*)+0x1d0>
10004ddf:	50                   	push   eax
10004de0:	68 80 00 00 00       	push   0x80
10004de5:	68 24 02 00 00       	push   0x224
10004dea:	53                   	push   ebx
10004deb:	e8 fc ff ff ff       	call   10004dec <SoundBlaster16::open(int, int, void*)+0x16e>	10004dec: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004df0:	ba 25 02 00 00       	mov    edx,0x225
10004df5:	ec                   	in     al,dx
10004df6:	83 c4 10             	add    esp,0x10
10004df9:	3c 01                	cmp    al,0x1
10004dfb:	75 0f                	jne    10004e0c <SoundBlaster16::open(int, int, void*)+0x18e>
10004dfd:	83 ec 0c             	sub    esp,0xc
10004e00:	53                   	push   ebx
10004e01:	6a 01                	push   0x1
10004e03:	68 00 00 00 00       	push   0x0	10004e04: R_386_32	sb16Handler(regs*, void*)
10004e08:	6a 02                	push   0x2
10004e0a:	eb 6f                	jmp    10004e7b <SoundBlaster16::open(int, int, void*)+0x1fd>
10004e0c:	3c 02                	cmp    al,0x2
10004e0e:	75 06                	jne    10004e16 <SoundBlaster16::open(int, int, void*)+0x198>
10004e10:	83 ec 0c             	sub    esp,0xc
10004e13:	53                   	push   ebx
10004e14:	eb 5c                	jmp    10004e72 <SoundBlaster16::open(int, int, void*)+0x1f4>
10004e16:	3c 04                	cmp    al,0x4
10004e18:	75 0f                	jne    10004e29 <SoundBlaster16::open(int, int, void*)+0x1ab>
10004e1a:	83 ec 0c             	sub    esp,0xc
10004e1d:	53                   	push   ebx
10004e1e:	6a 01                	push   0x1
10004e20:	68 00 00 00 00       	push   0x0	10004e21: R_386_32	sb16Handler(regs*, void*)
10004e25:	6a 07                	push   0x7
10004e27:	eb 52                	jmp    10004e7b <SoundBlaster16::open(int, int, void*)+0x1fd>
10004e29:	3c 08                	cmp    al,0x8
10004e2b:	75 0f                	jne    10004e3c <SoundBlaster16::open(int, int, void*)+0x1be>
10004e2d:	83 ec 0c             	sub    esp,0xc
10004e30:	53                   	push   ebx
10004e31:	6a 01                	push   0x1
10004e33:	68 00 00 00 00       	push   0x0	10004e34: R_386_32	sb16Handler(regs*, void*)
10004e38:	6a 0a                	push   0xa
10004e3a:	eb 3f                	jmp    10004e7b <SoundBlaster16::open(int, int, void*)+0x1fd>
10004e3c:	83 ec 0c             	sub    esp,0xc
10004e3f:	68 00 00 00 00       	push   0x0	10004e40: R_386_32	noirq
10004e44:	e8 fc ff ff ff       	call   10004e45 <SoundBlaster16::open(int, int, void*)+0x1c7>	10004e45: R_386_PC32	Krnl::panic(char const*)
10004e49:	83 c4 10             	add    esp,0x10
10004e4c:	eb 36                	jmp    10004e84 <SoundBlaster16::open(int, int, void*)+0x206>
10004e4e:	50                   	push   eax
10004e4f:	68 80 00 00 00       	push   0x80
10004e54:	68 24 02 00 00       	push   0x224
10004e59:	53                   	push   ebx
10004e5a:	e8 fc ff ff ff       	call   10004e5b <SoundBlaster16::open(int, int, void*)+0x1dd>	10004e5b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004e5f:	83 c4 0c             	add    esp,0xc
10004e62:	6a 02                	push   0x2
10004e64:	68 25 02 00 00       	push   0x225
10004e69:	53                   	push   ebx
10004e6a:	e8 fc ff ff ff       	call   10004e6b <SoundBlaster16::open(int, int, void*)+0x1ed>	10004e6b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004e6f:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004e72:	6a 01                	push   0x1
10004e74:	68 00 00 00 00       	push   0x0	10004e75: R_386_32	sb16Handler(regs*, void*)
10004e79:	6a 05                	push   0x5
10004e7b:	53                   	push   ebx
10004e7c:	e8 fc ff ff ff       	call   10004e7d <SoundBlaster16::open(int, int, void*)+0x1ff>	10004e7d: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10004e81:	83 c4 20             	add    esp,0x20
10004e84:	56                   	push   esi
10004e85:	68 81 00 00 00       	push   0x81
10004e8a:	68 24 02 00 00       	push   0x224
10004e8f:	53                   	push   ebx
10004e90:	e8 fc ff ff ff       	call   10004e91 <SoundBlaster16::open(int, int, void*)+0x213>	10004e91: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004e95:	ba 25 02 00 00       	mov    edx,0x225
10004e9a:	ec                   	in     al,dx
10004e9b:	83 c4 0c             	add    esp,0xc
10004e9e:	89 c6                	mov    esi,eax
10004ea0:	68 81 00 00 00       	push   0x81
10004ea5:	68 24 02 00 00       	push   0x224
10004eaa:	53                   	push   ebx
10004eab:	e8 fc ff ff ff       	call   10004eac <SoundBlaster16::open(int, int, void*)+0x22e>	10004eac: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004eb0:	58                   	pop    eax
10004eb1:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10004eb7:	e8 fc ff ff ff       	call   10004eb8 <SoundBlaster16::open(int, int, void*)+0x23a>	10004eb8: R_386_PC32	DMAChannel::getChannelNum()
10004ebc:	83 c4 10             	add    esp,0x10
10004ebf:	48                   	dec    eax
10004ec0:	75 0c                	jne    10004ece <SoundBlaster16::open(int, int, void*)+0x250>
10004ec2:	81 e6 f0 00 00 00    	and    esi,0xf0
10004ec8:	51                   	push   ecx
10004ec9:	83 ce 02             	or     esi,0x2
10004ecc:	eb 20                	jmp    10004eee <SoundBlaster16::open(int, int, void*)+0x270>
10004ece:	83 ec 0c             	sub    esp,0xc
10004ed1:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10004ed7:	e8 fc ff ff ff       	call   10004ed8 <SoundBlaster16::open(int, int, void*)+0x25a>	10004ed8: R_386_PC32	DMAChannel::getChannelNum()
10004edc:	83 c4 10             	add    esp,0x10
10004edf:	83 f8 03             	cmp    eax,0x3
10004ee2:	75 18                	jne    10004efc <SoundBlaster16::open(int, int, void*)+0x27e>
10004ee4:	81 e6 f0 00 00 00    	and    esi,0xf0
10004eea:	52                   	push   edx
10004eeb:	83 ce 08             	or     esi,0x8
10004eee:	56                   	push   esi
10004eef:	68 25 02 00 00       	push   0x225
10004ef4:	53                   	push   ebx
10004ef5:	e8 fc ff ff ff       	call   10004ef6 <SoundBlaster16::open(int, int, void*)+0x278>	10004ef6: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004efa:	eb 0d                	jmp    10004f09 <SoundBlaster16::open(int, int, void*)+0x28b>
10004efc:	83 ec 0c             	sub    esp,0xc
10004eff:	68 00 00 00 00       	push   0x0	10004f00: R_386_32	baddma
10004f04:	e8 fc ff ff ff       	call   10004f05 <SoundBlaster16::open(int, int, void*)+0x287>	10004f05: R_386_PC32	Krnl::panic(char const*)
10004f09:	83 c4 10             	add    esp,0x10
10004f0c:	50                   	push   eax
10004f0d:	6a 22                	push   0x22
10004f0f:	68 24 02 00 00       	push   0x224
10004f14:	53                   	push   ebx
10004f15:	e8 fc ff ff ff       	call   10004f16 <SoundBlaster16::open(int, int, void*)+0x298>	10004f16: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f1a:	83 c4 0c             	add    esp,0xc
10004f1d:	68 ff 00 00 00       	push   0xff
10004f22:	68 24 02 00 00       	push   0x224
10004f27:	53                   	push   ebx
10004f28:	e8 fc ff ff ff       	call   10004f29 <SoundBlaster16::open(int, int, void*)+0x2ab>	10004f29: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f2d:	83 c4 10             	add    esp,0x10
10004f30:	31 c0                	xor    eax,eax
10004f32:	83 c4 14             	add    esp,0x14
10004f35:	5b                   	pop    ebx
10004f36:	5e                   	pop    esi
10004f37:	c3                   	ret    

10004f38 <SoundBlaster16::onInterrupt()>:
10004f38:	56                   	push   esi
10004f39:	53                   	push   ebx
10004f3a:	53                   	push   ebx
10004f3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10004f3f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004f41: R_386_32	outputBuffer
10004f45:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004f47: R_386_32	tempBuffer
10004f4b:	68 00 20 00 00       	push   0x2000
10004f50:	56                   	push   esi
10004f51:	e8 fc ff ff ff       	call   10004f52 <SoundBlaster16::onInterrupt()+0x1a>	10004f52: R_386_PC32	SoundDevice::getAudio(int, float*, float*)
10004f56:	83 c4 10             	add    esp,0x10
10004f59:	89 c3                	mov    ebx,eax
10004f5b:	80 3d 5f 68 00 10 01 	cmp    BYTE PTR ds:0x1000685f,0x1	10004f5d: R_386_32	.data
10004f62:	53                   	push   ebx
10004f63:	19 c0                	sbb    eax,eax
10004f65:	25 00 20 00 00       	and    eax,0x2000
10004f6a:	03 86 f4 01 00 00    	add    eax,DWORD PTR [esi+0x1f4]
10004f70:	50                   	push   eax
10004f71:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004f73: R_386_32	outputBuffer
10004f77:	56                   	push   esi
10004f78:	e8 fc ff ff ff       	call   10004f79 <SoundBlaster16::onInterrupt()+0x41>	10004f79: R_386_PC32	SoundDevice::floatTo8(float*, unsigned char*, int)
10004f7d:	83 c4 10             	add    esp,0x10
10004f80:	85 db                	test   ebx,ebx
10004f82:	75 0c                	jne    10004f90 <SoundBlaster16::onInterrupt()+0x58>
10004f84:	51                   	push   ecx
10004f85:	51                   	push   ecx
10004f86:	6a 00                	push   0x0
10004f88:	56                   	push   esi
10004f89:	e8 fc ff ff ff       	call   10004f8a <SoundBlaster16::onInterrupt()+0x52>	10004f8a: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10004f8e:	eb 3e                	jmp    10004fce <SoundBlaster16::onInterrupt()+0x96>
10004f90:	81 fb ff 1f 00 00    	cmp    ebx,0x1fff
10004f96:	7f 39                	jg     10004fd1 <SoundBlaster16::onInterrupt()+0x99>
10004f98:	52                   	push   edx
10004f99:	6a 24                	push   0x24
10004f9b:	68 2c 02 00 00       	push   0x22c
10004fa0:	56                   	push   esi
10004fa1:	e8 fc ff ff ff       	call   10004fa2 <SoundBlaster16::onInterrupt()+0x6a>	10004fa2: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004fa6:	83 c4 0c             	add    esp,0xc
10004fa9:	8d 43 ff             	lea    eax,[ebx-0x1]
10004fac:	4b                   	dec    ebx
10004fad:	0f b6 c0             	movzx  eax,al
10004fb0:	0f b6 df             	movzx  ebx,bh
10004fb3:	50                   	push   eax
10004fb4:	68 2c 02 00 00       	push   0x22c
10004fb9:	56                   	push   esi
10004fba:	e8 fc ff ff ff       	call   10004fbb <SoundBlaster16::onInterrupt()+0x83>	10004fbb: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004fbf:	83 c4 0c             	add    esp,0xc
10004fc2:	53                   	push   ebx
10004fc3:	68 2c 02 00 00       	push   0x22c
10004fc8:	56                   	push   esi
10004fc9:	e8 fc ff ff ff       	call   10004fca <SoundBlaster16::onInterrupt()+0x92>	10004fca: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004fce:	83 c4 10             	add    esp,0x10
10004fd1:	80 35 5f 68 00 10 01 	xor    BYTE PTR ds:0x1000685f,0x1	10004fd3: R_386_32	.data
10004fd8:	58                   	pop    eax
10004fd9:	5b                   	pop    ebx
10004fda:	5e                   	pop    esi
10004fdb:	c3                   	ret    

10004fdc <SoundBlaster16::close(int, int, void*)>:
10004fdc:	83 ec 0c             	sub    esp,0xc
10004fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004fe3:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
10004fe9:	85 c0                	test   eax,eax
10004feb:	74 11                	je     10004ffe <SoundBlaster16::close(int, int, void*)+0x22>
10004fed:	52                   	push   edx
10004fee:	52                   	push   edx
10004fef:	50                   	push   eax
10004ff0:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004ff2: R_386_32	isaDMAController
10004ff6:	e8 fc ff ff ff       	call   10004ff7 <SoundBlaster16::close(int, int, void*)+0x1b>	10004ff7: R_386_PC32	DMA::unlockChannel(DMAChannel*)
10004ffb:	83 c4 10             	add    esp,0x10
10004ffe:	31 c0                	xor    eax,eax
10005000:	83 c4 0c             	add    esp,0xc
10005003:	c3                   	ret    

10005004 <ISA::~ISA()>:
10005004:	55                   	push   ebp
10005005:	89 e5                	mov    ebp,esp
10005007:	83 ec 08             	sub    esp,0x8
1000500a:	ba 08 00 00 00       	mov    edx,0x8	1000500b: R_386_32	vtable for ISA
1000500f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005012:	89 10                	mov    DWORD PTR [eax],edx
10005014:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005017:	83 ec 0c             	sub    esp,0xc
1000501a:	50                   	push   eax
1000501b:	e8 fc ff ff ff       	call   1000501c <ISA::~ISA()+0x18>	1000501c: R_386_PC32	Bus::~Bus()
10005020:	83 c4 10             	add    esp,0x10
10005023:	90                   	nop
10005024:	c9                   	leave  
10005025:	c3                   	ret    

10005026 <ISA::~ISA()>:
10005026:	55                   	push   ebp
10005027:	89 e5                	mov    ebp,esp
10005029:	83 ec 08             	sub    esp,0x8
1000502c:	83 ec 0c             	sub    esp,0xc
1000502f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005032:	e8 fc ff ff ff       	call   10005033 <ISA::~ISA()+0xd>	10005033: R_386_PC32	ISA::~ISA()
10005037:	83 c4 10             	add    esp,0x10
1000503a:	83 ec 08             	sub    esp,0x8
1000503d:	68 58 01 00 00       	push   0x158
10005042:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005045:	e8 fc ff ff ff       	call   10005046 <ISA::~ISA()+0x20>	10005046: R_386_PC32	operator delete(void*, unsigned long)
1000504a:	83 c4 10             	add    esp,0x10
1000504d:	c9                   	leave  
1000504e:	c3                   	ret    
1000504f:	90                   	nop

10005050 <Floppy::~Floppy()>:
10005050:	55                   	push   ebp
10005051:	89 e5                	mov    ebp,esp
10005053:	83 ec 08             	sub    esp,0x8
10005056:	ba 08 00 00 00       	mov    edx,0x8	10005057: R_386_32	vtable for Floppy
1000505b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000505e:	89 10                	mov    DWORD PTR [eax],edx
10005060:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005063:	83 ec 0c             	sub    esp,0xc
10005066:	50                   	push   eax
10005067:	e8 fc ff ff ff       	call   10005068 <Floppy::~Floppy()+0x18>	10005068: R_386_PC32	HardDiskController::~HardDiskController()
1000506c:	83 c4 10             	add    esp,0x10
1000506f:	90                   	nop
10005070:	c9                   	leave  
10005071:	c3                   	ret    

10005072 <Floppy::~Floppy()>:
10005072:	55                   	push   ebp
10005073:	89 e5                	mov    ebp,esp
10005075:	83 ec 08             	sub    esp,0x8
10005078:	83 ec 0c             	sub    esp,0xc
1000507b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000507e:	e8 fc ff ff ff       	call   1000507f <Floppy::~Floppy()+0xd>	1000507f: R_386_PC32	Floppy::~Floppy()
10005083:	83 c4 10             	add    esp,0x10
10005086:	83 ec 08             	sub    esp,0x8
10005089:	68 b8 01 00 00       	push   0x1b8
1000508e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005091:	e8 fc ff ff ff       	call   10005092 <Floppy::~Floppy()+0x20>	10005092: R_386_PC32	operator delete(void*, unsigned long)
10005096:	83 c4 10             	add    esp,0x10
10005099:	c9                   	leave  
1000509a:	c3                   	ret    
1000509b:	90                   	nop

1000509c <JoystickHost::JoystickHost()>:
1000509c:	55                   	push   ebp
1000509d:	89 e5                	mov    ebp,esp
1000509f:	ba 08 00 00 00       	mov    edx,0x8	100050a0: R_386_32	vtable for JoystickHost
100050a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100050a7:	89 10                	mov    DWORD PTR [eax],edx
100050a9:	90                   	nop
100050aa:	5d                   	pop    ebp
100050ab:	c3                   	ret    

100050ac <DMA::~DMA()>:
100050ac:	55                   	push   ebp
100050ad:	89 e5                	mov    ebp,esp
100050af:	83 ec 08             	sub    esp,0x8
100050b2:	ba 08 00 00 00       	mov    edx,0x8	100050b3: R_386_32	vtable for DMA
100050b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100050ba:	89 10                	mov    DWORD PTR [eax],edx
100050bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100050bf:	83 ec 0c             	sub    esp,0xc
100050c2:	50                   	push   eax
100050c3:	e8 fc ff ff ff       	call   100050c4 <DMA::~DMA()+0x18>	100050c4: R_386_PC32	Device::~Device()
100050c8:	83 c4 10             	add    esp,0x10
100050cb:	90                   	nop
100050cc:	c9                   	leave  
100050cd:	c3                   	ret    

100050ce <DMA::~DMA()>:
100050ce:	55                   	push   ebp
100050cf:	89 e5                	mov    ebp,esp
100050d1:	83 ec 08             	sub    esp,0x8
100050d4:	83 ec 0c             	sub    esp,0xc
100050d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100050da:	e8 fc ff ff ff       	call   100050db <DMA::~DMA()+0xd>	100050db: R_386_PC32	DMA::~DMA()
100050df:	83 c4 10             	add    esp,0x10
100050e2:	83 ec 08             	sub    esp,0x8
100050e5:	68 5c 01 00 00       	push   0x15c
100050ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100050ed:	e8 fc ff ff ff       	call   100050ee <DMA::~DMA()+0x20>	100050ee: R_386_PC32	operator delete(void*, unsigned long)
100050f2:	83 c4 10             	add    esp,0x10
100050f5:	c9                   	leave  
100050f6:	c3                   	ret    
100050f7:	90                   	nop

100050f8 <PS2::~PS2()>:
100050f8:	55                   	push   ebp
100050f9:	89 e5                	mov    ebp,esp
100050fb:	83 ec 08             	sub    esp,0x8
100050fe:	ba 08 00 00 00       	mov    edx,0x8	100050ff: R_386_32	vtable for PS2
10005103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005106:	89 10                	mov    DWORD PTR [eax],edx
10005108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000510b:	83 ec 0c             	sub    esp,0xc
1000510e:	50                   	push   eax
1000510f:	e8 fc ff ff ff       	call   10005110 <PS2::~PS2()+0x18>	10005110: R_386_PC32	Bus::~Bus()
10005114:	83 c4 10             	add    esp,0x10
10005117:	90                   	nop
10005118:	c9                   	leave  
10005119:	c3                   	ret    

1000511a <PS2::~PS2()>:
1000511a:	55                   	push   ebp
1000511b:	89 e5                	mov    ebp,esp
1000511d:	83 ec 08             	sub    esp,0x8
10005120:	83 ec 0c             	sub    esp,0xc
10005123:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005126:	e8 fc ff ff ff       	call   10005127 <PS2::~PS2()+0xd>	10005127: R_386_PC32	PS2::~PS2()
1000512b:	83 c4 10             	add    esp,0x10
1000512e:	83 ec 08             	sub    esp,0x8
10005131:	68 60 01 00 00       	push   0x160
10005136:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005139:	e8 fc ff ff ff       	call   1000513a <PS2::~PS2()+0x20>	1000513a: R_386_PC32	operator delete(void*, unsigned long)
1000513e:	83 c4 10             	add    esp,0x10
10005141:	c9                   	leave  
10005142:	c3                   	ret    
10005143:	90                   	nop

10005144 <PS2Mouse::~PS2Mouse()>:
10005144:	55                   	push   ebp
10005145:	89 e5                	mov    ebp,esp
10005147:	83 ec 08             	sub    esp,0x8
1000514a:	ba 08 00 00 00       	mov    edx,0x8	1000514b: R_386_32	vtable for PS2Mouse
1000514f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005152:	89 10                	mov    DWORD PTR [eax],edx
10005154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005157:	83 ec 0c             	sub    esp,0xc
1000515a:	50                   	push   eax
1000515b:	e8 fc ff ff ff       	call   1000515c <PS2Mouse::~PS2Mouse()+0x18>	1000515c: R_386_PC32	Mouse::~Mouse()
10005160:	83 c4 10             	add    esp,0x10
10005163:	90                   	nop
10005164:	c9                   	leave  
10005165:	c3                   	ret    

10005166 <PS2Mouse::~PS2Mouse()>:
10005166:	55                   	push   ebp
10005167:	89 e5                	mov    ebp,esp
10005169:	83 ec 08             	sub    esp,0x8
1000516c:	83 ec 0c             	sub    esp,0xc
1000516f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005172:	e8 fc ff ff ff       	call   10005173 <PS2Mouse::~PS2Mouse()+0xd>	10005173: R_386_PC32	PS2Mouse::~PS2Mouse()
10005177:	83 c4 10             	add    esp,0x10
1000517a:	83 ec 08             	sub    esp,0x8
1000517d:	68 68 01 00 00       	push   0x168
10005182:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005185:	e8 fc ff ff ff       	call   10005186 <PS2Mouse::~PS2Mouse()+0x20>	10005186: R_386_PC32	operator delete(void*, unsigned long)
1000518a:	83 c4 10             	add    esp,0x10
1000518d:	c9                   	leave  
1000518e:	c3                   	ret    
1000518f:	90                   	nop

10005190 <PS2Port::~PS2Port()>:
10005190:	55                   	push   ebp
10005191:	89 e5                	mov    ebp,esp
10005193:	83 ec 08             	sub    esp,0x8
10005196:	ba 08 00 00 00       	mov    edx,0x8	10005197: R_386_32	vtable for PS2Port
1000519b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000519e:	89 10                	mov    DWORD PTR [eax],edx
100051a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100051a3:	83 ec 0c             	sub    esp,0xc
100051a6:	50                   	push   eax
100051a7:	e8 fc ff ff ff       	call   100051a8 <PS2Port::~PS2Port()+0x18>	100051a8: R_386_PC32	Bus::~Bus()
100051ac:	83 c4 10             	add    esp,0x10
100051af:	90                   	nop
100051b0:	c9                   	leave  
100051b1:	c3                   	ret    

100051b2 <PS2Port::~PS2Port()>:
100051b2:	55                   	push   ebp
100051b3:	89 e5                	mov    ebp,esp
100051b5:	83 ec 08             	sub    esp,0x8
100051b8:	83 ec 0c             	sub    esp,0xc
100051bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100051be:	e8 fc ff ff ff       	call   100051bf <PS2Port::~PS2Port()+0xd>	100051bf: R_386_PC32	PS2Port::~PS2Port()
100051c3:	83 c4 10             	add    esp,0x10
100051c6:	83 ec 08             	sub    esp,0x8
100051c9:	68 60 01 00 00       	push   0x160
100051ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100051d1:	e8 fc ff ff ff       	call   100051d2 <PS2Port::~PS2Port()+0x20>	100051d2: R_386_PC32	operator delete(void*, unsigned long)
100051d6:	83 c4 10             	add    esp,0x10
100051d9:	c9                   	leave  
100051da:	c3                   	ret    
100051db:	90                   	nop

100051dc <SoundBlaster16::~SoundBlaster16()>:
100051dc:	55                   	push   ebp
100051dd:	89 e5                	mov    ebp,esp
100051df:	83 ec 08             	sub    esp,0x8
100051e2:	ba 08 00 00 00       	mov    edx,0x8	100051e3: R_386_32	vtable for SoundBlaster16
100051e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100051ea:	89 10                	mov    DWORD PTR [eax],edx
100051ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100051ef:	83 ec 0c             	sub    esp,0xc
100051f2:	50                   	push   eax
100051f3:	e8 fc ff ff ff       	call   100051f4 <SoundBlaster16::~SoundBlaster16()+0x18>	100051f4: R_386_PC32	SoundDevice::~SoundDevice()
100051f8:	83 c4 10             	add    esp,0x10
100051fb:	90                   	nop
100051fc:	c9                   	leave  
100051fd:	c3                   	ret    

100051fe <SoundBlaster16::~SoundBlaster16()>:
100051fe:	55                   	push   ebp
100051ff:	89 e5                	mov    ebp,esp
10005201:	83 ec 08             	sub    esp,0x8
10005204:	83 ec 0c             	sub    esp,0xc
10005207:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000520a:	e8 fc ff ff ff       	call   1000520b <SoundBlaster16::~SoundBlaster16()+0xd>	1000520b: R_386_PC32	SoundBlaster16::~SoundBlaster16()
1000520f:	83 c4 10             	add    esp,0x10
10005212:	83 ec 08             	sub    esp,0x8
10005215:	68 fc 01 00 00       	push   0x1fc
1000521a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000521d:	e8 fc ff ff ff       	call   1000521e <SoundBlaster16::~SoundBlaster16()+0x20>	1000521e: R_386_PC32	operator delete(void*, unsigned long)
10005222:	83 c4 10             	add    esp,0x10
10005225:	c9                   	leave  
10005226:	c3                   	ret    
10005227:	90                   	nop

10005228 <PHYS_RAM_TABLE_SIZE>:
10005228:	13 05 00 00                                         ....

1000522c <PHYS_HIGHEST_UNUSED_ADDRESS>:
1000522c:	24 05 00 00                                         $...

10005230 <PHYS_RAM_TABLE>:
10005230:	00 06 00 00                                         ....

10005234 <PHYS_DMA_MEMORY_1>:
10005234:	00 00 01 00                                         ....

10005238 <PHYS_PHYS_PAGE_BITMAP>:
10005238:	00 00 02 00                                         ....

1000523c <PHYS_VIRT_PAGE_BITMAP>:
1000523c:	00 00 04 00                                         ....

10005240 <PHYS_DMA_MEMORY_2>:
10005240:	00 00 06 00                                         ....

10005244 <PHYS_ALLOCED_VIRT_PAGES>:
10005244:	00 00 10 00                                         ....

10005248 <PHYS_KRNL_PAGE_DIRECTORY>:
10005248:	00 10 00 00                                         ....

1000524c <VIRT_KERNEL_BASE>:
1000524c:	00 00 00 c0                                         ....

10005250 <VIRT_LOW_MEGS>:
10005250:	00 00 00 c2                                         ....

10005254 <VIRT_CPU_SPECIFIC>:
10005254:	00 00 40 c2                                         ..@.

10005258 <VIRT_RECURSIVE_SPOT_1>:
10005258:	00 00 80 c2                                         ....

1000525c <VIRT_RECURSIVE_SPOT_2>:
1000525c:	00 00 c0 c2                                         ....

10005260 <VIRT_DMA_MEMORY_1>:
10005260:	00 00 01 c2                                         ....

10005264 <SIZE_DMA_MEMORY_1>:
10005264:	00 00 01 00                                         ....

10005268 <VIRT_DMA_MEMORY_2>:
10005268:	00 00 06 c2                                         ....

1000526c <SIZE_DMA_MEMORY_2>:
1000526c:	00 00 02 00                                         ....

10005270 <VIRT_KRNL_PAGE_DIRECTORY>:
10005270:	00 10 00 c2                                         ....

10005274 <VIRT_PHYS_PAGE_BITMAP>:
10005274:	00 00 02 c2                                         ....

10005278 <SIZE_PHYS_PAGE_BITMAP>:
10005278:	00 00 02 00                                         ....

1000527c <VIRT_VIRT_PAGE_BITMAP>:
1000527c:	00 00 04 c2                                         ....

10005280 <SIZE_VIRT_PAGE_BITMAP>:
10005280:	00 80 00 00                                         ....

10005284 <VIRT_RAM_TABLE>:
10005284:	00 06 00 c2                                         ....

10005288 <VIRT_RAM_TABLE_SIZE>:
10005288:	13 05 00 c2                                         ....

1000528c <VIRT_HIGHEST_UNUSED_ADDRESS>:
1000528c:	24 05 00 c2                                         $...

10005290 <SIZE_APP_STACK_USER>:
10005290:	00 00 18 00                                         ....

10005294 <SIZE_APP_STACK_KRNL>:
10005294:	00 00 08 00                                         ....

10005298 <SIZE_APP_STACK_TOTAL>:
10005298:	00 00 20 00                                         .. .

1000529c <VIRT_APP_DATA>:
1000529c:	00 00 00 10                                         ....

100052a0 <VIRT_APP_STACK_USER_TOP>:
100052a0:	00 00 00 02                                         ....

100052a4 <VIRT_APP_STACK_KRNL_TOP>:
100052a4:	00 00 e8 01                                         ....

100052a8 <VIRT_HEAP_MIN>:
100052a8:	00 00 00 c8                                         ....

100052ac <VIRT_HEAP_MAX>:
100052ac:	ff ff ff ef                                         ....

100052b0 <VIRT_SBRK_MIN>:
100052b0:	00 00 00 f0                                         ....

100052b4 <VIRT_SBRK_MAX>:
100052b4:	00 00 c0 ff                                         ....

100052b8 <VIRT_ALLOCED_VIRT_PAGES>:
100052b8:	00 00 10 c2                                         ....

100052bc <VIRT_ACPI_DRIVER>:
100052bc:	00 40 48 c2                                         .@H.

100052c0 <TERMINAL_KEYBUFFER_IN_SIZE>:
100052c0:	96 00 00 00                                         ....

100052c4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100052c4:	2c 01 00 00 49 53 41 20 42 75 73 00                 ,...ISA Bus.

100052d0 <vtable for ISA>:
	...
	100052d8: R_386_32	ISA::~ISA()
	100052dc: R_386_32	ISA::~ISA()
	100052e0: R_386_32	ISA::open(int, int, void*)
	100052e4: R_386_32	ISA::close(int, int, void*)
	100052e8: R_386_32	Device::hibernate()
	100052ec: R_386_32	Device::wake()
	100052f0: R_386_32	ISA::detect()
	100052f4: R_386_32	Device::disableLegacy()
	100052f8: R_386_32	Device::powerSaving(PowerSavingLevel)

100052fc <TERMINAL_KEYBUFFER_IN_SIZE>:
100052fc:	96 00 00 00                                         ....

10005300 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005300:	2c 01 00 00                                         ,...

10005304 <PHYS_RAM_TABLE_SIZE>:
10005304:	13 05 00 00                                         ....

10005308 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005308:	24 05 00 00                                         $...

1000530c <PHYS_RAM_TABLE>:
1000530c:	00 06 00 00                                         ....

10005310 <PHYS_DMA_MEMORY_1>:
10005310:	00 00 01 00                                         ....

10005314 <PHYS_PHYS_PAGE_BITMAP>:
10005314:	00 00 02 00                                         ....

10005318 <PHYS_VIRT_PAGE_BITMAP>:
10005318:	00 00 04 00                                         ....

1000531c <PHYS_DMA_MEMORY_2>:
1000531c:	00 00 06 00                                         ....

10005320 <PHYS_ALLOCED_VIRT_PAGES>:
10005320:	00 00 10 00                                         ....

10005324 <PHYS_KRNL_PAGE_DIRECTORY>:
10005324:	00 10 00 00                                         ....

10005328 <VIRT_KERNEL_BASE>:
10005328:	00 00 00 c0                                         ....

1000532c <VIRT_LOW_MEGS>:
1000532c:	00 00 00 c2                                         ....

10005330 <VIRT_CPU_SPECIFIC>:
10005330:	00 00 40 c2                                         ..@.

10005334 <VIRT_RECURSIVE_SPOT_1>:
10005334:	00 00 80 c2                                         ....

10005338 <VIRT_RECURSIVE_SPOT_2>:
10005338:	00 00 c0 c2                                         ....

1000533c <VIRT_DMA_MEMORY_1>:
1000533c:	00 00 01 c2                                         ....

10005340 <SIZE_DMA_MEMORY_1>:
10005340:	00 00 01 00                                         ....

10005344 <VIRT_DMA_MEMORY_2>:
10005344:	00 00 06 c2                                         ....

10005348 <SIZE_DMA_MEMORY_2>:
10005348:	00 00 02 00                                         ....

1000534c <VIRT_KRNL_PAGE_DIRECTORY>:
1000534c:	00 10 00 c2                                         ....

10005350 <VIRT_PHYS_PAGE_BITMAP>:
10005350:	00 00 02 c2                                         ....

10005354 <SIZE_PHYS_PAGE_BITMAP>:
10005354:	00 00 02 00                                         ....

10005358 <VIRT_VIRT_PAGE_BITMAP>:
10005358:	00 00 04 c2                                         ....

1000535c <SIZE_VIRT_PAGE_BITMAP>:
1000535c:	00 80 00 00                                         ....

10005360 <VIRT_RAM_TABLE>:
10005360:	00 06 00 c2                                         ....

10005364 <VIRT_RAM_TABLE_SIZE>:
10005364:	13 05 00 c2                                         ....

10005368 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005368:	24 05 00 c2                                         $...

1000536c <SIZE_APP_STACK_USER>:
1000536c:	00 00 18 00                                         ....

10005370 <SIZE_APP_STACK_KRNL>:
10005370:	00 00 08 00                                         ....

10005374 <SIZE_APP_STACK_TOTAL>:
10005374:	00 00 20 00                                         .. .

10005378 <VIRT_APP_DATA>:
10005378:	00 00 00 10                                         ....

1000537c <VIRT_APP_STACK_USER_TOP>:
1000537c:	00 00 00 02                                         ....

10005380 <VIRT_APP_STACK_KRNL_TOP>:
10005380:	00 00 e8 01                                         ....

10005384 <VIRT_HEAP_MIN>:
10005384:	00 00 00 c8                                         ....

10005388 <VIRT_HEAP_MAX>:
10005388:	ff ff ff ef                                         ....

1000538c <VIRT_SBRK_MIN>:
1000538c:	00 00 00 f0                                         ....

10005390 <VIRT_SBRK_MAX>:
10005390:	00 00 c0 ff                                         ....

10005394 <VIRT_ALLOCED_VIRT_PAGES>:
10005394:	00 00 10 c2                                         ....

10005398 <VIRT_ACPI_DRIVER>:
10005398:	00 40 48 c2 46 6c 6f 70 70 79 20 44 69 73 6b 20     .@H.Floppy Disk 
100053a8:	43 6f 6e 74 72 6f 6c 6c 65 72 00 00 50 52 45 56     Controller..PREV
100053b8:	49 4f 55 53 20 43 4f 4d 4d 41 4e 44 20 46 41 49     IOUS COMMAND FAI
100053c8:	4c 45 44 2c 20 43 41 55 47 48 54 20 42 59 20 77     LED, CAUGHT BY w
100053d8:	72 69 74 65 43 6f 6d 6d 61 6e 64 00 44 49 44 20     riteCommand.DID 
100053e8:	4e 4f 54 20 43 48 45 43 4b 20 46 4f 52 20 46 41     NOT CHECK FOR FA
100053f8:	49 4c 55 52 45 20 42 45 46 4f 52 45 20 77 72 69     ILURE BEFORE wri
10005408:	74 65 43 6f 6d 6d 61 6e 64 00 46 6c 6f 70 70 79     teCommand.Floppy
10005418:	3a 3a 64 72 69 76 65 44 65 74 65 63 74 69 6f 6e     ::driveDetection
10005428:	28 29 0a 00 44 72 69 76 65 20 74 79 70 65 20 30     ()..Drive type 0
10005438:	3a 20 30 78 25 58 0a 00 44 72 69 76 65 20 74 79     : 0x%X..Drive ty
10005448:	70 65 20 31 3a 20 30 78 25 58 0a 00 76 6f 69 64     pe 1: 0x%X..void
10005458:	20 46 6c 6f 70 70 79 3a 3a 72 65 73 65 74 28 29      Floppy::reset()
10005468:	0a 00 53 50 45 43 49 46 59 20 42 41 44 20 44 41     ..SPECIFY BAD DA
10005478:	54 41 52 41 54 45 00 00 20 a1 07 00 e0 93 04 00     TARATE.. .......
10005488:	90 d0 03 00 40 42 0f 00 73 65 6c 65 63 74 20 28     ....@B..select (
10005498:	41 29 2e 20 25 64 0a 00 73 65 6c 65 63 74 20 28     A). %d..select (
100054a8:	42 29 2e 0a 00 73 65 6c 65 63 74 20 28 43 29 2e     B)...select (C).
100054b8:	0a 00 73 65 6c 65 63 74 20 28 44 29 2e 0a 00 00     ..select (D)....
100054c8:	55 4e 53 55 50 50 4f 52 54 45 44 20 46 4c 4f 50     UNSUPPORTED FLOP
100054d8:	50 59 20 46 4f 52 4d 41 54 20 28 44 41 54 41 52     PY FORMAT (DATAR
100054e8:	41 54 45 20 4e 4f 54 20 4b 4e 4f 57 4e 29 00 73     ATE NOT KNOWN).s
100054f8:	65 6c 65 63 74 20 28 45 29 2e 0a 00 73 70 65 63     elect (E)...spec
10005508:	69 66 69 79 20 72 65 73 65 74 2e 0a 00 73 65 6c     ifiy reset...sel
10005518:	65 63 74 20 28 46 29 2e 0a 00 73 65 6c 65 63 74     ect (F)...select
10005528:	20 28 46 32 29 2e 0a 00 63 61 6c 69 62 72 61 74      (F2)...calibrat
10005538:	65 20 72 65 73 65 74 2e 0a 00 73 65 6c 65 63 74     e reset...select
10005548:	20 28 47 29 2e 0a 00 73 65 6c 65 63 74 20 28 48      (G)...select (H
10005558:	29 2e 0a 00 73 65 6c 65 63 74 20 28 49 29 2e 0a     )...select (I)..
10005568:	00 46 6c 6f 70 70 79 3a 3a 6d 6f 74 6f 72 0a 00     .Floppy::motor..
10005578:	6e 75 6d 20 3d 20 25 64 2c 20 73 74 61 74 65 20     num = %d, state 
10005588:	3d 20 25 64 0a 00 73 74 61 74 65 2e 0a 00 73 74     = %d..state...st
10005598:	61 72 74 69 6e 67 20 74 68 65 20 6d 6f 74 6f 72     arting the motor
100055a8:	2e 0a 00 64 6f 72 20 31 20 3d 20 30 78 25 58 0a     ...dor 1 = 0x%X.
100055b8:	00 64 6f 72 20 32 20 3d 20 30 78 25 58 0a 00 6d     .dor 2 = 0x%X..m
100055c8:	6f 74 6f 72 20 61 67 61 69 6e 2e 0a 00 6d 6f 74     otor again...mot
100055d8:	6f 72 20 61 67 61 69 6e 20 32 2e 0a 00 6d 6f 74     or again 2...mot
100055e8:	6f 72 20 61 67 61 69 6e 20 33 2e 0a 00 6d 6f 74     or again 3...mot
100055f8:	6f 72 20 61 67 61 69 6e 20 34 2e 0a 00 6d 6f 74     or again 4...mot
10005608:	6f 72 20 61 67 61 69 6e 20 35 2e 0a 00 6d 6f 74     or again 5...mot
10005618:	6f 72 20 61 67 61 69 6e 20 36 2e 0a 00 46 6c 6f     or again 6...Flo
10005628:	70 70 79 3a 3a 6d 6f 74 6f 72 20 64 6f 6e 65 2e     ppy::motor done.
10005638:	0a 00 46 6c 6f 70 70 79 20 44 69 73 6b 20 44 72     ..Floppy Disk Dr
10005648:	69 76 65 00 46 6c 6f 70 70 79 44 72 69 76 65 3a     ive.FloppyDrive:
10005658:	3a 6d 6f 74 6f 72 4f 6e 20 6e 75 6d 20 3d 20 25     :motorOn num = %
10005668:	64 0a 00 6e 75 6d 20 3d 20 25 64 0a 00 73 69 7a     d..num = %d..siz
10005678:	65 20 69 6e 20 4b 42 73 20 3d 20 25 64 0a 00 46     e in KBs = %d..F
10005688:	6c 6f 70 70 79 44 72 69 76 65 3a 3a 5f 6f 70 65     loppyDrive::_ope
10005698:	6e 20 31 0a 00 46 6c 6f 70 70 79 44 72 69 76 65     n 1..FloppyDrive
100056a8:	3a 3a 5f 6f 70 65 6e 20 32 0a 00 46 6c 6f 70 70     ::_open 2..Flopp
100056b8:	79 44 72 69 76 65 3a 3a 5f 6f 70 65 6e 20 33 0a     yDrive::_open 3.
100056c8:	00 46 6c 6f 70 70 79 44 72 69 76 65 3a 3a 73 65     .FloppyDrive::se
100056d8:	6c 65 63 74 0a 00 00 00 73 65 6c 65 63 74 69 6f     lect....selectio
100056e8:	6e 20 6c 6f 63 6b 65 64 20 6f 72 20 66 61 69 6c     n locked or fail
100056f8:	65 64 2e 2e 2e 0a 00 00 73 65 65 6b 3a 20 35 20     ed......seek: 5 
10005708:	72 65 74 72 69 65 73 2c 20 63 6f 75 6c 64 20 6e     retries, could n
10005718:	6f 74 20 63 61 6c 69 62 72 61 74 65 2e 0a 00 73     ot calibrate...s
10005728:	65 65 6b 20 28 73 65 6c 29 20 25 64 2e 0a 00 73     eek (sel) %d...s
10005738:	65 65 6b 20 28 6f 6e 29 20 25 64 2e 0a 00 73 65     eek (on) %d...se
10005748:	65 6b 20 28 31 29 2e 0a 00 73 65 65 6b 20 28 61     ek (1)...seek (a
10005758:	61 29 2e 0a 00 73 65 65 6b 20 28 62 62 29 2e 0a     a)...seek (bb)..
10005768:	00 73 65 65 6b 20 28 32 29 2e 0a 00 73 65 65 6b     .seek (2)...seek
10005778:	20 28 33 29 2e 0a 00 73 65 65 6b 20 28 34 29 2e      (3)...seek (4).
10005788:	0a 00 73 65 65 6b 20 28 6e 69 72 71 29 2e 0a 00     ..seek (nirq)...
10005798:	73 65 65 6b 20 28 35 29 2e 0a 00 73 65 65 6b 20     seek (5)...seek 
100057a8:	28 73 69 64 29 2e 0a 00 73 65 65 6b 20 28 6f 66     (sid)...seek (of
100057b8:	66 29 2e 0a 00 73 65 65 6b 20 28 75 6e 29 2e 0a     f)...seek (un)..
100057c8:	00 00 00 00 63 61 6c 69 62 72 61 74 65 3a 20 35     ....calibrate: 5
100057d8:	20 72 65 74 72 69 65 73 2c 20 63 6f 75 6c 64 20      retries, could 
100057e8:	6e 6f 74 20 63 61 6c 69 62 72 61 74 65 2e 0a 00     not calibrate...
100057f8:	63 61 6c 20 28 6f 6e 29 2c 20 25 64 0a 00 63 61     cal (on), %d..ca
10005808:	6c 20 28 30 29 0a 00 63 61 6c 20 28 31 29 0a 00     l (0)..cal (1)..
10005818:	63 61 6c 20 28 32 29 0a 00 63 61 6c 20 28 33 29     cal (2)..cal (3)
10005828:	0a 00 63 61 6c 20 28 34 29 0a 00 63 61 6c 20 28     ..cal (4)..cal (
10005838:	35 29 0a 00 20 72 65 74 72 79 3a 20 0a 00 41 62     5).. retry: ..Ab
10005848:	6f 75 74 20 74 6f 20 73 65 65 6b 2e 0a 00 53 65     out to seek...Se
10005858:	65 6b 20 64 6f 6e 65 2e 0a 00 4d 6f 74 6f 72 20     ek done...Motor 
10005868:	6f 6e 2e 0a 00 53 65 6c 65 63 74 65 64 2e 0a 00     on...Selected...
10005878:	44 4d 41 20 69 6e 69 74 27 64 2e 0a 00 73 6c 65     DMA init'd...sle
10005888:	65 70 20 64 6f 6e 65 0a 00 61 62 6f 75 74 20 74     ep done..about t
10005898:	6f 20 77 61 69 74 49 52 51 2e 0a 00 6e 6f 20 49     o waitIRQ...no I
100058a8:	52 51 2e 0a 00 67 6f 74 20 49 52 51 2e 0a 00 66     RQ...got IRQ...f
100058b8:	61 69 6c 75 72 65 20 72 65 61 64 69 6e 67 20 73     ailure reading s
100058c8:	74 61 74 75 73 2e 0a 00 72 65 61 64 20 72 65 73     tatus...read res
100058d8:	75 6c 74 20 62 79 74 65 73 2e 0a 00 6d 6f 74 6f     ult bytes...moto
100058e8:	72 20 6f 66 66 0a 00 75 6e 73 65 6c 65 63 74 2e     r off..unselect.
100058f8:	0a 00 66 6c 6f 70 70 79 20 72 65 61 64 20 63 6f     ..floppy read co
10005908:	75 6e 74 20 6e 6f 74 20 31 00 46 6c 6f 70 70 79     unt not 1.Floppy
10005918:	44 72 69 76 65 3a 3a 72 65 61 64 20 63 61 6c 6c     Drive::read call
10005928:	65 64 2e 0a 00 43 20 30 78 25 58 2c 20 48 20 30     ed...C 0x%X, H 0
10005938:	78 25 58 2c 20 53 20 30 78 25 58 0a 00 72 65 61     x%X, S 0x%X..rea
10005948:	64 69 6e 67 20 74 72 61 63 6b 2e 0a 00 66 90 90     ding track...f..

10005958 <vtable for FloppyDrive>:
	...
	10005960: R_386_32	FloppyDrive::~FloppyDrive()
	10005964: R_386_32	FloppyDrive::~FloppyDrive()
	10005968: R_386_32	FloppyDrive::open(int, int, void*)
	1000596c: R_386_32	FloppyDrive::close(int, int, void*)
	10005970: R_386_32	Device::hibernate()
	10005974: R_386_32	Device::wake()
	10005978: R_386_32	Device::detect()
	1000597c: R_386_32	Device::disableLegacy()
	10005980: R_386_32	Device::powerSaving(PowerSavingLevel)
	10005984: R_386_32	PhysicalDisk::eject()
	10005988: R_386_32	FloppyDrive::read(unsigned long long, int, void*)
	1000598c: R_386_32	FloppyDrive::write(unsigned long long, int, void*)

10005990 <vtable for Floppy>:
	...
	10005998: R_386_32	Floppy::~Floppy()
	1000599c: R_386_32	Floppy::~Floppy()
	100059a0: R_386_32	Floppy::open(int, int, void*)
	100059a4: R_386_32	Floppy::close(int, int, void*)
	100059a8: R_386_32	Device::hibernate()
	100059ac: R_386_32	Device::wake()
	100059b0: R_386_32	Device::detect()
	100059b4: R_386_32	Device::disableLegacy()
	100059b8: R_386_32	Device::powerSaving(PowerSavingLevel)

100059bc <PHYS_RAM_TABLE_SIZE>:
100059bc:	13 05 00 00                                         ....

100059c0 <PHYS_HIGHEST_UNUSED_ADDRESS>:
100059c0:	24 05 00 00                                         $...

100059c4 <PHYS_RAM_TABLE>:
100059c4:	00 06 00 00                                         ....

100059c8 <PHYS_DMA_MEMORY_1>:
100059c8:	00 00 01 00                                         ....

100059cc <PHYS_PHYS_PAGE_BITMAP>:
100059cc:	00 00 02 00                                         ....

100059d0 <PHYS_VIRT_PAGE_BITMAP>:
100059d0:	00 00 04 00                                         ....

100059d4 <PHYS_DMA_MEMORY_2>:
100059d4:	00 00 06 00                                         ....

100059d8 <PHYS_ALLOCED_VIRT_PAGES>:
100059d8:	00 00 10 00                                         ....

100059dc <PHYS_KRNL_PAGE_DIRECTORY>:
100059dc:	00 10 00 00                                         ....

100059e0 <VIRT_KERNEL_BASE>:
100059e0:	00 00 00 c0                                         ....

100059e4 <VIRT_LOW_MEGS>:
100059e4:	00 00 00 c2                                         ....

100059e8 <VIRT_CPU_SPECIFIC>:
100059e8:	00 00 40 c2                                         ..@.

100059ec <VIRT_RECURSIVE_SPOT_1>:
100059ec:	00 00 80 c2                                         ....

100059f0 <VIRT_RECURSIVE_SPOT_2>:
100059f0:	00 00 c0 c2                                         ....

100059f4 <VIRT_DMA_MEMORY_1>:
100059f4:	00 00 01 c2                                         ....

100059f8 <SIZE_DMA_MEMORY_1>:
100059f8:	00 00 01 00                                         ....

100059fc <VIRT_DMA_MEMORY_2>:
100059fc:	00 00 06 c2                                         ....

10005a00 <SIZE_DMA_MEMORY_2>:
10005a00:	00 00 02 00                                         ....

10005a04 <VIRT_KRNL_PAGE_DIRECTORY>:
10005a04:	00 10 00 c2                                         ....

10005a08 <VIRT_PHYS_PAGE_BITMAP>:
10005a08:	00 00 02 c2                                         ....

10005a0c <SIZE_PHYS_PAGE_BITMAP>:
10005a0c:	00 00 02 00                                         ....

10005a10 <VIRT_VIRT_PAGE_BITMAP>:
10005a10:	00 00 04 c2                                         ....

10005a14 <SIZE_VIRT_PAGE_BITMAP>:
10005a14:	00 80 00 00                                         ....

10005a18 <VIRT_RAM_TABLE>:
10005a18:	00 06 00 c2                                         ....

10005a1c <VIRT_RAM_TABLE_SIZE>:
10005a1c:	13 05 00 c2                                         ....

10005a20 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005a20:	24 05 00 c2                                         $...

10005a24 <SIZE_APP_STACK_USER>:
10005a24:	00 00 18 00                                         ....

10005a28 <SIZE_APP_STACK_KRNL>:
10005a28:	00 00 08 00                                         ....

10005a2c <SIZE_APP_STACK_TOTAL>:
10005a2c:	00 00 20 00                                         .. .

10005a30 <VIRT_APP_DATA>:
10005a30:	00 00 00 10                                         ....

10005a34 <VIRT_APP_STACK_USER_TOP>:
10005a34:	00 00 00 02                                         ....

10005a38 <VIRT_APP_STACK_KRNL_TOP>:
10005a38:	00 00 e8 01                                         ....

10005a3c <VIRT_HEAP_MIN>:
10005a3c:	00 00 00 c8                                         ....

10005a40 <VIRT_HEAP_MAX>:
10005a40:	ff ff ff ef                                         ....

10005a44 <VIRT_SBRK_MIN>:
10005a44:	00 00 00 f0                                         ....

10005a48 <VIRT_SBRK_MAX>:
10005a48:	00 00 c0 ff                                         ....

10005a4c <VIRT_ALLOCED_VIRT_PAGES>:
10005a4c:	00 00 10 c2                                         ....

10005a50 <VIRT_ACPI_DRIVER>:
10005a50:	00 40 48 c2                                         .@H.

10005a54 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005a54:	96 00 00 00                                         ....

10005a58 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005a58:	2c 01 00 00 47 61 6d 65 70 6f 72 74 00 66 90 90     ,...Gameport.f..

10005a68 <vtable for Gameport>:
	...
	10005a70: R_386_32	Gameport::~Gameport()
	10005a74: R_386_32	Gameport::~Gameport()
	10005a78: R_386_32	Gameport::open(int, int, void*)
	10005a7c: R_386_32	Gameport::close(int, int, void*)
	10005a80: R_386_32	Device::hibernate()
	10005a84: R_386_32	Device::wake()
	10005a88: R_386_32	Gameport::detect()
	10005a8c: R_386_32	Device::disableLegacy()
	10005a90: R_386_32	Device::powerSaving(PowerSavingLevel)
	10005a94: R_386_32	Gameport::read(int)
10005a98:	a8 fe ff ff 00 00 00 00 00 00 00 00                 ............	10005aa0: R_386_32	non-virtual thunk to Gameport::read(int)

10005aa4 <vtable for JoystickHost>:
	...
	10005aac: R_386_32	__cxa_pure_virtual

10005ab0 <PHYS_RAM_TABLE_SIZE>:
10005ab0:	13 05 00 00                                         ....

10005ab4 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005ab4:	24 05 00 00                                         $...

10005ab8 <PHYS_RAM_TABLE>:
10005ab8:	00 06 00 00                                         ....

10005abc <PHYS_DMA_MEMORY_1>:
10005abc:	00 00 01 00                                         ....

10005ac0 <PHYS_PHYS_PAGE_BITMAP>:
10005ac0:	00 00 02 00                                         ....

10005ac4 <PHYS_VIRT_PAGE_BITMAP>:
10005ac4:	00 00 04 00                                         ....

10005ac8 <PHYS_DMA_MEMORY_2>:
10005ac8:	00 00 06 00                                         ....

10005acc <PHYS_ALLOCED_VIRT_PAGES>:
10005acc:	00 00 10 00                                         ....

10005ad0 <PHYS_KRNL_PAGE_DIRECTORY>:
10005ad0:	00 10 00 00                                         ....

10005ad4 <VIRT_KERNEL_BASE>:
10005ad4:	00 00 00 c0                                         ....

10005ad8 <VIRT_LOW_MEGS>:
10005ad8:	00 00 00 c2                                         ....

10005adc <VIRT_CPU_SPECIFIC>:
10005adc:	00 00 40 c2                                         ..@.

10005ae0 <VIRT_RECURSIVE_SPOT_1>:
10005ae0:	00 00 80 c2                                         ....

10005ae4 <VIRT_RECURSIVE_SPOT_2>:
10005ae4:	00 00 c0 c2                                         ....

10005ae8 <VIRT_DMA_MEMORY_1>:
10005ae8:	00 00 01 c2                                         ....

10005aec <SIZE_DMA_MEMORY_1>:
10005aec:	00 00 01 00                                         ....

10005af0 <VIRT_DMA_MEMORY_2>:
10005af0:	00 00 06 c2                                         ....

10005af4 <SIZE_DMA_MEMORY_2>:
10005af4:	00 00 02 00                                         ....

10005af8 <VIRT_KRNL_PAGE_DIRECTORY>:
10005af8:	00 10 00 c2                                         ....

10005afc <VIRT_PHYS_PAGE_BITMAP>:
10005afc:	00 00 02 c2                                         ....

10005b00 <SIZE_PHYS_PAGE_BITMAP>:
10005b00:	00 00 02 00                                         ....

10005b04 <VIRT_VIRT_PAGE_BITMAP>:
10005b04:	00 00 04 c2                                         ....

10005b08 <SIZE_VIRT_PAGE_BITMAP>:
10005b08:	00 80 00 00                                         ....

10005b0c <VIRT_RAM_TABLE>:
10005b0c:	00 06 00 c2                                         ....

10005b10 <VIRT_RAM_TABLE_SIZE>:
10005b10:	13 05 00 c2                                         ....

10005b14 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005b14:	24 05 00 c2                                         $...

10005b18 <SIZE_APP_STACK_USER>:
10005b18:	00 00 18 00                                         ....

10005b1c <SIZE_APP_STACK_KRNL>:
10005b1c:	00 00 08 00                                         ....

10005b20 <SIZE_APP_STACK_TOTAL>:
10005b20:	00 00 20 00                                         .. .

10005b24 <VIRT_APP_DATA>:
10005b24:	00 00 00 10                                         ....

10005b28 <VIRT_APP_STACK_USER_TOP>:
10005b28:	00 00 00 02                                         ....

10005b2c <VIRT_APP_STACK_KRNL_TOP>:
10005b2c:	00 00 e8 01                                         ....

10005b30 <VIRT_HEAP_MIN>:
10005b30:	00 00 00 c8                                         ....

10005b34 <VIRT_HEAP_MAX>:
10005b34:	ff ff ff ef                                         ....

10005b38 <VIRT_SBRK_MIN>:
10005b38:	00 00 00 f0                                         ....

10005b3c <VIRT_SBRK_MAX>:
10005b3c:	00 00 c0 ff                                         ....

10005b40 <VIRT_ALLOCED_VIRT_PAGES>:
10005b40:	00 00 10 c2                                         ....

10005b44 <VIRT_ACPI_DRIVER>:
10005b44:	00 40 48 c2                                         .@H.

10005b48 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005b48:	96 00 00 00                                         ....

10005b4c <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005b4c:	2c 01 00 00                                         ,...

10005b50 <CSWTCH.8>:
10005b50:	00 02 04 06 c0 c4 c8 cc                             ........

10005b58 <CSWTCH.9>:
10005b58:	01 03 05 07 c2 c6 ca ce                             ........

10005b60 <CSWTCH.10>:
10005b60:	87 83 81 82 8f 8b 89 8a 4e 6f 74 20 69 6e 20 72     ........Not in r
10005b70:	61 6e 67 65 2e 0a 00 90                             ange....

10005b78 <vtable for DMA>:
	...
	10005b80: R_386_32	DMA::~DMA()
	10005b84: R_386_32	DMA::~DMA()
	10005b88: R_386_32	DMA::open(int, int, void*)
	10005b8c: R_386_32	DMA::close(int, int, void*)
	10005b90: R_386_32	Device::hibernate()
	10005b94: R_386_32	Device::wake()
	10005b98: R_386_32	Device::detect()
	10005b9c: R_386_32	Device::disableLegacy()
	10005ba0: R_386_32	Device::powerSaving(PowerSavingLevel)

10005ba4 <PHYS_RAM_TABLE_SIZE>:
10005ba4:	13 05 00 00                                         ....

10005ba8 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005ba8:	24 05 00 00                                         $...

10005bac <PHYS_RAM_TABLE>:
10005bac:	00 06 00 00                                         ....

10005bb0 <PHYS_DMA_MEMORY_1>:
10005bb0:	00 00 01 00                                         ....

10005bb4 <PHYS_PHYS_PAGE_BITMAP>:
10005bb4:	00 00 02 00                                         ....

10005bb8 <PHYS_VIRT_PAGE_BITMAP>:
10005bb8:	00 00 04 00                                         ....

10005bbc <PHYS_DMA_MEMORY_2>:
10005bbc:	00 00 06 00                                         ....

10005bc0 <PHYS_ALLOCED_VIRT_PAGES>:
10005bc0:	00 00 10 00                                         ....

10005bc4 <PHYS_KRNL_PAGE_DIRECTORY>:
10005bc4:	00 10 00 00                                         ....

10005bc8 <VIRT_KERNEL_BASE>:
10005bc8:	00 00 00 c0                                         ....

10005bcc <VIRT_LOW_MEGS>:
10005bcc:	00 00 00 c2                                         ....

10005bd0 <VIRT_CPU_SPECIFIC>:
10005bd0:	00 00 40 c2                                         ..@.

10005bd4 <VIRT_RECURSIVE_SPOT_1>:
10005bd4:	00 00 80 c2                                         ....

10005bd8 <VIRT_RECURSIVE_SPOT_2>:
10005bd8:	00 00 c0 c2                                         ....

10005bdc <VIRT_DMA_MEMORY_1>:
10005bdc:	00 00 01 c2                                         ....

10005be0 <SIZE_DMA_MEMORY_1>:
10005be0:	00 00 01 00                                         ....

10005be4 <VIRT_DMA_MEMORY_2>:
10005be4:	00 00 06 c2                                         ....

10005be8 <SIZE_DMA_MEMORY_2>:
10005be8:	00 00 02 00                                         ....

10005bec <VIRT_KRNL_PAGE_DIRECTORY>:
10005bec:	00 10 00 c2                                         ....

10005bf0 <VIRT_PHYS_PAGE_BITMAP>:
10005bf0:	00 00 02 c2                                         ....

10005bf4 <SIZE_PHYS_PAGE_BITMAP>:
10005bf4:	00 00 02 00                                         ....

10005bf8 <VIRT_VIRT_PAGE_BITMAP>:
10005bf8:	00 00 04 c2                                         ....

10005bfc <SIZE_VIRT_PAGE_BITMAP>:
10005bfc:	00 80 00 00                                         ....

10005c00 <VIRT_RAM_TABLE>:
10005c00:	00 06 00 c2                                         ....

10005c04 <VIRT_RAM_TABLE_SIZE>:
10005c04:	13 05 00 c2                                         ....

10005c08 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005c08:	24 05 00 c2                                         $...

10005c0c <SIZE_APP_STACK_USER>:
10005c0c:	00 00 18 00                                         ....

10005c10 <SIZE_APP_STACK_KRNL>:
10005c10:	00 00 08 00                                         ....

10005c14 <SIZE_APP_STACK_TOTAL>:
10005c14:	00 00 20 00                                         .. .

10005c18 <VIRT_APP_DATA>:
10005c18:	00 00 00 10                                         ....

10005c1c <VIRT_APP_STACK_USER_TOP>:
10005c1c:	00 00 00 02                                         ....

10005c20 <VIRT_APP_STACK_KRNL_TOP>:
10005c20:	00 00 e8 01                                         ....

10005c24 <VIRT_HEAP_MIN>:
10005c24:	00 00 00 c8                                         ....

10005c28 <VIRT_HEAP_MAX>:
10005c28:	ff ff ff ef                                         ....

10005c2c <VIRT_SBRK_MIN>:
10005c2c:	00 00 00 f0                                         ....

10005c30 <VIRT_SBRK_MAX>:
10005c30:	00 00 c0 ff                                         ....

10005c34 <VIRT_ALLOCED_VIRT_PAGES>:
10005c34:	00 00 10 c2                                         ....

10005c38 <VIRT_ACPI_DRIVER>:
10005c38:	00 40 48 c2                                         .@H.

10005c3c <TERMINAL_KEYBUFFER_IN_SIZE>:
10005c3c:	96 00 00 00                                         ....

10005c40 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005c40:	2c 01 00 00                                         ,...

10005c44 <vtable for PS2>:
	...
	10005c4c: R_386_32	PS2::~PS2()
	10005c50: R_386_32	PS2::~PS2()
	10005c54: R_386_32	PS2::open(int, int, void*)
	10005c58: R_386_32	PS2::close(int, int, void*)
	10005c5c: R_386_32	Device::hibernate()
	10005c60: R_386_32	Device::wake()
	10005c64: R_386_32	PS2::detect()
	10005c68: R_386_32	Device::disableLegacy()
	10005c6c: R_386_32	Device::powerSaving(PowerSavingLevel)
10005c70:	66 90 66 90 66 90 66 90 66 90 66 90 66 90 66 90     f.f.f.f.f.f.f.f.

10005c80 <PHYS_RAM_TABLE_SIZE>:
10005c80:	13 05 00 00                                         ....

10005c84 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005c84:	24 05 00 00                                         $...

10005c88 <PHYS_RAM_TABLE>:
10005c88:	00 06 00 00                                         ....

10005c8c <PHYS_DMA_MEMORY_1>:
10005c8c:	00 00 01 00                                         ....

10005c90 <PHYS_PHYS_PAGE_BITMAP>:
10005c90:	00 00 02 00                                         ....

10005c94 <PHYS_VIRT_PAGE_BITMAP>:
10005c94:	00 00 04 00                                         ....

10005c98 <PHYS_DMA_MEMORY_2>:
10005c98:	00 00 06 00                                         ....

10005c9c <PHYS_ALLOCED_VIRT_PAGES>:
10005c9c:	00 00 10 00                                         ....

10005ca0 <PHYS_KRNL_PAGE_DIRECTORY>:
10005ca0:	00 10 00 00                                         ....

10005ca4 <VIRT_KERNEL_BASE>:
10005ca4:	00 00 00 c0                                         ....

10005ca8 <VIRT_LOW_MEGS>:
10005ca8:	00 00 00 c2                                         ....

10005cac <VIRT_CPU_SPECIFIC>:
10005cac:	00 00 40 c2                                         ..@.

10005cb0 <VIRT_RECURSIVE_SPOT_1>:
10005cb0:	00 00 80 c2                                         ....

10005cb4 <VIRT_RECURSIVE_SPOT_2>:
10005cb4:	00 00 c0 c2                                         ....

10005cb8 <VIRT_DMA_MEMORY_1>:
10005cb8:	00 00 01 c2                                         ....

10005cbc <SIZE_DMA_MEMORY_1>:
10005cbc:	00 00 01 00                                         ....

10005cc0 <VIRT_DMA_MEMORY_2>:
10005cc0:	00 00 06 c2                                         ....

10005cc4 <SIZE_DMA_MEMORY_2>:
10005cc4:	00 00 02 00                                         ....

10005cc8 <VIRT_KRNL_PAGE_DIRECTORY>:
10005cc8:	00 10 00 c2                                         ....

10005ccc <VIRT_PHYS_PAGE_BITMAP>:
10005ccc:	00 00 02 c2                                         ....

10005cd0 <SIZE_PHYS_PAGE_BITMAP>:
10005cd0:	00 00 02 00                                         ....

10005cd4 <VIRT_VIRT_PAGE_BITMAP>:
10005cd4:	00 00 04 c2                                         ....

10005cd8 <SIZE_VIRT_PAGE_BITMAP>:
10005cd8:	00 80 00 00                                         ....

10005cdc <VIRT_RAM_TABLE>:
10005cdc:	00 06 00 c2                                         ....

10005ce0 <VIRT_RAM_TABLE_SIZE>:
10005ce0:	13 05 00 c2                                         ....

10005ce4 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005ce4:	24 05 00 c2                                         $...

10005ce8 <SIZE_APP_STACK_USER>:
10005ce8:	00 00 18 00                                         ....

10005cec <SIZE_APP_STACK_KRNL>:
10005cec:	00 00 08 00                                         ....

10005cf0 <SIZE_APP_STACK_TOTAL>:
10005cf0:	00 00 20 00                                         .. .

10005cf4 <VIRT_APP_DATA>:
10005cf4:	00 00 00 10                                         ....

10005cf8 <VIRT_APP_STACK_USER_TOP>:
10005cf8:	00 00 00 02                                         ....

10005cfc <VIRT_APP_STACK_KRNL_TOP>:
10005cfc:	00 00 e8 01                                         ....

10005d00 <VIRT_HEAP_MIN>:
10005d00:	00 00 00 c8                                         ....

10005d04 <VIRT_HEAP_MAX>:
10005d04:	ff ff ff ef                                         ....

10005d08 <VIRT_SBRK_MIN>:
10005d08:	00 00 00 f0                                         ....

10005d0c <VIRT_SBRK_MAX>:
10005d0c:	00 00 c0 ff                                         ....

10005d10 <VIRT_ALLOCED_VIRT_PAGES>:
10005d10:	00 00 10 c2                                         ....

10005d14 <VIRT_ACPI_DRIVER>:
10005d14:	00 40 48 c2                                         .@H.

10005d18 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005d18:	96 00 00 00                                         ....

10005d1c <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005d1c:	2c 01 00 00                                         ,...

10005d20 <PS2Keyboard::internalMapperLower>:
10005d20:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10005d30:	20 20 20 20 20 71 31 20 20 20 7a 73 61 77 32 20          q1   zsaw2 
10005d40:	20 63 78 64 65 34 33 20 20 20 76 66 74 72 35 20      cxde43   vftr5 
10005d50:	20 6e 62 68 67 79 36 20 20 20 6d 6a 75 37 38 20      nbhgy6   mju78 
10005d60:	20 2c 6b 69 6f 30 39 20 20 2e 2f 6c 3b 70 2d 20      ,kio09  ./l;p- 
10005d70:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10005d80:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10005d90:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10005da0:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10005e20 <PS2Keyboard::internalMapperUpper>:
10005e20:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10005e30:	20 20 20 20 20 51 21 20 20 20 5a 53 41 57 40 20          Q!   ZSAW@ 
10005e40:	20 43 58 44 45 24 23 20 20 20 56 46 54 52 25 20      CXDE$#   VFTR% 
10005e50:	20 4e 42 48 47 59 5e 20 20 20 4d 4a 55 26 2a 20      NBHGY^   MJU&* 
10005e60:	20 3c 4b 49 4f 29 28 20 20 3e 3f 4c 3a 50 5f 20      <KIO)(  >?L:P_ 
10005e70:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10005e80:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10005e90:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10005ea0:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10005f20 <PS2Keyboard::internalMapCapLower>:
10005f20:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10005f30:	20 20 20 20 20 51 31 20 20 20 5a 53 41 57 32 20          Q1   ZSAW2 
10005f40:	20 43 58 44 45 34 33 20 20 20 56 46 54 52 35 20      CXDE43   VFTR5 
10005f50:	20 4e 42 48 47 59 36 20 20 20 4d 4a 55 37 38 20      NBHGY6   MJU78 
10005f60:	20 2c 4b 49 4f 30 39 20 20 2e 2f 4c 3b 50 2d 20      ,KIO09  ./L;P- 
10005f70:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10005f80:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10005f90:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10005fa0:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10006020 <PS2Keyboard::internalMapCapUpper>:
10006020:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10006030:	20 20 20 20 20 51 21 20 20 20 7a 73 61 77 40 20          Q!   zsaw@ 
10006040:	20 63 78 64 65 24 23 20 20 20 76 66 74 72 25 20      cxde$#   vftr% 
10006050:	20 6e 62 68 67 79 5e 20 20 20 6d 6a 75 26 2a 20      nbhgy^   mju&* 
10006060:	20 3c 6b 69 6f 29 28 20 20 3e 3f 6c 3a 70 5f 20      <kio)(  >?l:p_ 
10006070:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10006080:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10006090:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
100060a0:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10006120 <PS2Keyboard::internalMapperLowerBad>:
10006120:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10006130:	71 77 65 72 74 79 75 69 6f 70 5b 5d 20 20 61 73     qwertyuiop[]  as
10006140:	64 66 67 68 6a 6b 6c 3b 27 60 20 5c 7a 78 63 76     dfghjkl;'` \zxcv
10006150:	62 6e 6d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     bnm,./ *        
10006160:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10006170:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006180:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006190:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100061a0:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
100061b0:	51 57 45 52 54 59 55 49 4f 50 7b 7d 20 20 41 53     QWERTYUIOP{}  AS
100061c0:	44 46 47 48 4a 4b 4c 3a 22 7e 20 7c 5a 58 43 56     DFGHJKL:"~ |ZXCV
100061d0:	42 4e 4d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     BNM<>? *        
100061e0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
100061f0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006200:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006210:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006220:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10006230:	51 57 45 52 54 59 55 49 4f 50 5b 5d 20 20 41 53     QWERTYUIOP[]  AS
10006240:	44 46 47 48 4a 4b 4c 3b 27 60 20 5c 5a 58 43 56     DFGHJKL;'` \ZXCV
10006250:	42 4e 4d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     BNM,./ *        
10006260:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10006270:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006280:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006290:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100062a0:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
100062b0:	71 77 65 72 74 79 75 69 6f 70 7b 7d 20 20 61 73     qwertyuiop{}  as
100062c0:	64 66 67 68 6a 6b 6c 3a 22 7e 20 7c 7a 78 63 76     dfghjkl:"~ |zxcv
100062d0:	62 6e 6d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     bnm<>? *        
100062e0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
100062f0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006300:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006310:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006320:	00 66 90 90                                         .f..

10006324 <vtable for PS2Keyboard>:
	...
	1000632c: R_386_32	PS2Keyboard::~PS2Keyboard()
	10006330: R_386_32	PS2Keyboard::~PS2Keyboard()
	10006334: R_386_32	PS2Keyboard::open(int, int, void*)
	10006338: R_386_32	PS2Keyboard::close(int, int, void*)
	1000633c: R_386_32	Device::hibernate()
	10006340: R_386_32	Device::wake()
	10006344: R_386_32	Device::detect()
	10006348: R_386_32	Device::disableLegacy()
	1000634c: R_386_32	Device::powerSaving(PowerSavingLevel)
	10006350: R_386_32	PS2Keyboard::setRepeatRate(int)
	10006354: R_386_32	PS2Keyboard::setRepeatDelay(int)

10006358 <PHYS_RAM_TABLE_SIZE>:
10006358:	13 05 00 00                                         ....

1000635c <PHYS_HIGHEST_UNUSED_ADDRESS>:
1000635c:	24 05 00 00                                         $...

10006360 <PHYS_RAM_TABLE>:
10006360:	00 06 00 00                                         ....

10006364 <PHYS_DMA_MEMORY_1>:
10006364:	00 00 01 00                                         ....

10006368 <PHYS_PHYS_PAGE_BITMAP>:
10006368:	00 00 02 00                                         ....

1000636c <PHYS_VIRT_PAGE_BITMAP>:
1000636c:	00 00 04 00                                         ....

10006370 <PHYS_DMA_MEMORY_2>:
10006370:	00 00 06 00                                         ....

10006374 <PHYS_ALLOCED_VIRT_PAGES>:
10006374:	00 00 10 00                                         ....

10006378 <PHYS_KRNL_PAGE_DIRECTORY>:
10006378:	00 10 00 00                                         ....

1000637c <VIRT_KERNEL_BASE>:
1000637c:	00 00 00 c0                                         ....

10006380 <VIRT_LOW_MEGS>:
10006380:	00 00 00 c2                                         ....

10006384 <VIRT_CPU_SPECIFIC>:
10006384:	00 00 40 c2                                         ..@.

10006388 <VIRT_RECURSIVE_SPOT_1>:
10006388:	00 00 80 c2                                         ....

1000638c <VIRT_RECURSIVE_SPOT_2>:
1000638c:	00 00 c0 c2                                         ....

10006390 <VIRT_DMA_MEMORY_1>:
10006390:	00 00 01 c2                                         ....

10006394 <SIZE_DMA_MEMORY_1>:
10006394:	00 00 01 00                                         ....

10006398 <VIRT_DMA_MEMORY_2>:
10006398:	00 00 06 c2                                         ....

1000639c <SIZE_DMA_MEMORY_2>:
1000639c:	00 00 02 00                                         ....

100063a0 <VIRT_KRNL_PAGE_DIRECTORY>:
100063a0:	00 10 00 c2                                         ....

100063a4 <VIRT_PHYS_PAGE_BITMAP>:
100063a4:	00 00 02 c2                                         ....

100063a8 <SIZE_PHYS_PAGE_BITMAP>:
100063a8:	00 00 02 00                                         ....

100063ac <VIRT_VIRT_PAGE_BITMAP>:
100063ac:	00 00 04 c2                                         ....

100063b0 <SIZE_VIRT_PAGE_BITMAP>:
100063b0:	00 80 00 00                                         ....

100063b4 <VIRT_RAM_TABLE>:
100063b4:	00 06 00 c2                                         ....

100063b8 <VIRT_RAM_TABLE_SIZE>:
100063b8:	13 05 00 c2                                         ....

100063bc <VIRT_HIGHEST_UNUSED_ADDRESS>:
100063bc:	24 05 00 c2                                         $...

100063c0 <SIZE_APP_STACK_USER>:
100063c0:	00 00 18 00                                         ....

100063c4 <SIZE_APP_STACK_KRNL>:
100063c4:	00 00 08 00                                         ....

100063c8 <SIZE_APP_STACK_TOTAL>:
100063c8:	00 00 20 00                                         .. .

100063cc <VIRT_APP_DATA>:
100063cc:	00 00 00 10                                         ....

100063d0 <VIRT_APP_STACK_USER_TOP>:
100063d0:	00 00 00 02                                         ....

100063d4 <VIRT_APP_STACK_KRNL_TOP>:
100063d4:	00 00 e8 01                                         ....

100063d8 <VIRT_HEAP_MIN>:
100063d8:	00 00 00 c8                                         ....

100063dc <VIRT_HEAP_MAX>:
100063dc:	ff ff ff ef                                         ....

100063e0 <VIRT_SBRK_MIN>:
100063e0:	00 00 00 f0                                         ....

100063e4 <VIRT_SBRK_MAX>:
100063e4:	00 00 c0 ff                                         ....

100063e8 <VIRT_ALLOCED_VIRT_PAGES>:
100063e8:	00 00 10 c2                                         ....

100063ec <VIRT_ACPI_DRIVER>:
100063ec:	00 40 48 c2                                         .@H.

100063f0 <TERMINAL_KEYBUFFER_IN_SIZE>:
100063f0:	96 00 00 00                                         ....

100063f4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100063f4:	2c 01 00 00                                         ,...

100063f8 <vtable for PS2Mouse>:
	...
	10006400: R_386_32	PS2Mouse::~PS2Mouse()
	10006404: R_386_32	PS2Mouse::~PS2Mouse()
	10006408: R_386_32	PS2Mouse::open(int, int, void*)
	1000640c: R_386_32	PS2Mouse::close(int, int, void*)
	10006410: R_386_32	Device::hibernate()
	10006414: R_386_32	Device::wake()
	10006418: R_386_32	PS2Mouse::detect()
	1000641c: R_386_32	Device::disableLegacy()
	10006420: R_386_32	Device::powerSaving(PowerSavingLevel)

10006424 <PHYS_RAM_TABLE_SIZE>:
10006424:	13 05 00 00                                         ....

10006428 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10006428:	24 05 00 00                                         $...

1000642c <PHYS_RAM_TABLE>:
1000642c:	00 06 00 00                                         ....

10006430 <PHYS_DMA_MEMORY_1>:
10006430:	00 00 01 00                                         ....

10006434 <PHYS_PHYS_PAGE_BITMAP>:
10006434:	00 00 02 00                                         ....

10006438 <PHYS_VIRT_PAGE_BITMAP>:
10006438:	00 00 04 00                                         ....

1000643c <PHYS_DMA_MEMORY_2>:
1000643c:	00 00 06 00                                         ....

10006440 <PHYS_ALLOCED_VIRT_PAGES>:
10006440:	00 00 10 00                                         ....

10006444 <PHYS_KRNL_PAGE_DIRECTORY>:
10006444:	00 10 00 00                                         ....

10006448 <VIRT_KERNEL_BASE>:
10006448:	00 00 00 c0                                         ....

1000644c <VIRT_LOW_MEGS>:
1000644c:	00 00 00 c2                                         ....

10006450 <VIRT_CPU_SPECIFIC>:
10006450:	00 00 40 c2                                         ..@.

10006454 <VIRT_RECURSIVE_SPOT_1>:
10006454:	00 00 80 c2                                         ....

10006458 <VIRT_RECURSIVE_SPOT_2>:
10006458:	00 00 c0 c2                                         ....

1000645c <VIRT_DMA_MEMORY_1>:
1000645c:	00 00 01 c2                                         ....

10006460 <SIZE_DMA_MEMORY_1>:
10006460:	00 00 01 00                                         ....

10006464 <VIRT_DMA_MEMORY_2>:
10006464:	00 00 06 c2                                         ....

10006468 <SIZE_DMA_MEMORY_2>:
10006468:	00 00 02 00                                         ....

1000646c <VIRT_KRNL_PAGE_DIRECTORY>:
1000646c:	00 10 00 c2                                         ....

10006470 <VIRT_PHYS_PAGE_BITMAP>:
10006470:	00 00 02 c2                                         ....

10006474 <SIZE_PHYS_PAGE_BITMAP>:
10006474:	00 00 02 00                                         ....

10006478 <VIRT_VIRT_PAGE_BITMAP>:
10006478:	00 00 04 c2                                         ....

1000647c <SIZE_VIRT_PAGE_BITMAP>:
1000647c:	00 80 00 00                                         ....

10006480 <VIRT_RAM_TABLE>:
10006480:	00 06 00 c2                                         ....

10006484 <VIRT_RAM_TABLE_SIZE>:
10006484:	13 05 00 c2                                         ....

10006488 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10006488:	24 05 00 c2                                         $...

1000648c <SIZE_APP_STACK_USER>:
1000648c:	00 00 18 00                                         ....

10006490 <SIZE_APP_STACK_KRNL>:
10006490:	00 00 08 00                                         ....

10006494 <SIZE_APP_STACK_TOTAL>:
10006494:	00 00 20 00                                         .. .

10006498 <VIRT_APP_DATA>:
10006498:	00 00 00 10                                         ....

1000649c <VIRT_APP_STACK_USER_TOP>:
1000649c:	00 00 00 02                                         ....

100064a0 <VIRT_APP_STACK_KRNL_TOP>:
100064a0:	00 00 e8 01                                         ....

100064a4 <VIRT_HEAP_MIN>:
100064a4:	00 00 00 c8                                         ....

100064a8 <VIRT_HEAP_MAX>:
100064a8:	ff ff ff ef                                         ....

100064ac <VIRT_SBRK_MIN>:
100064ac:	00 00 00 f0                                         ....

100064b0 <VIRT_SBRK_MAX>:
100064b0:	00 00 c0 ff                                         ....

100064b4 <VIRT_ALLOCED_VIRT_PAGES>:
100064b4:	00 00 10 c2                                         ....

100064b8 <VIRT_ACPI_DRIVER>:
100064b8:	00 40 48 c2                                         .@H.

100064bc <TERMINAL_KEYBUFFER_IN_SIZE>:
100064bc:	96 00 00 00                                         ....

100064c0 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100064c0:	2c 01 00 00                                         ,...

100064c4 <vtable for PS2Port>:
	...
	100064cc: R_386_32	PS2Port::~PS2Port()
	100064d0: R_386_32	PS2Port::~PS2Port()
	100064d4: R_386_32	PS2Port::open(int, int, void*)
	100064d8: R_386_32	PS2Port::close(int, int, void*)
	100064dc: R_386_32	Device::hibernate()
	100064e0: R_386_32	Device::wake()
	100064e4: R_386_32	PS2Port::detect()
	100064e8: R_386_32	Device::disableLegacy()
	100064ec: R_386_32	Device::powerSaving(PowerSavingLevel)

100064f0 <PHYS_RAM_TABLE_SIZE>:
100064f0:	13 05 00 00                                         ....

100064f4 <PHYS_HIGHEST_UNUSED_ADDRESS>:
100064f4:	24 05 00 00                                         $...

100064f8 <PHYS_RAM_TABLE>:
100064f8:	00 06 00 00                                         ....

100064fc <PHYS_DMA_MEMORY_1>:
100064fc:	00 00 01 00                                         ....

10006500 <PHYS_PHYS_PAGE_BITMAP>:
10006500:	00 00 02 00                                         ....

10006504 <PHYS_VIRT_PAGE_BITMAP>:
10006504:	00 00 04 00                                         ....

10006508 <PHYS_DMA_MEMORY_2>:
10006508:	00 00 06 00                                         ....

1000650c <PHYS_ALLOCED_VIRT_PAGES>:
1000650c:	00 00 10 00                                         ....

10006510 <PHYS_KRNL_PAGE_DIRECTORY>:
10006510:	00 10 00 00                                         ....

10006514 <VIRT_KERNEL_BASE>:
10006514:	00 00 00 c0                                         ....

10006518 <VIRT_LOW_MEGS>:
10006518:	00 00 00 c2                                         ....

1000651c <VIRT_CPU_SPECIFIC>:
1000651c:	00 00 40 c2                                         ..@.

10006520 <VIRT_RECURSIVE_SPOT_1>:
10006520:	00 00 80 c2                                         ....

10006524 <VIRT_RECURSIVE_SPOT_2>:
10006524:	00 00 c0 c2                                         ....

10006528 <VIRT_DMA_MEMORY_1>:
10006528:	00 00 01 c2                                         ....

1000652c <SIZE_DMA_MEMORY_1>:
1000652c:	00 00 01 00                                         ....

10006530 <VIRT_DMA_MEMORY_2>:
10006530:	00 00 06 c2                                         ....

10006534 <SIZE_DMA_MEMORY_2>:
10006534:	00 00 02 00                                         ....

10006538 <VIRT_KRNL_PAGE_DIRECTORY>:
10006538:	00 10 00 c2                                         ....

1000653c <VIRT_PHYS_PAGE_BITMAP>:
1000653c:	00 00 02 c2                                         ....

10006540 <SIZE_PHYS_PAGE_BITMAP>:
10006540:	00 00 02 00                                         ....

10006544 <VIRT_VIRT_PAGE_BITMAP>:
10006544:	00 00 04 c2                                         ....

10006548 <SIZE_VIRT_PAGE_BITMAP>:
10006548:	00 80 00 00                                         ....

1000654c <VIRT_RAM_TABLE>:
1000654c:	00 06 00 c2                                         ....

10006550 <VIRT_RAM_TABLE_SIZE>:
10006550:	13 05 00 c2                                         ....

10006554 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10006554:	24 05 00 c2                                         $...

10006558 <SIZE_APP_STACK_USER>:
10006558:	00 00 18 00                                         ....

1000655c <SIZE_APP_STACK_KRNL>:
1000655c:	00 00 08 00                                         ....

10006560 <SIZE_APP_STACK_TOTAL>:
10006560:	00 00 20 00                                         .. .

10006564 <VIRT_APP_DATA>:
10006564:	00 00 00 10                                         ....

10006568 <VIRT_APP_STACK_USER_TOP>:
10006568:	00 00 00 02                                         ....

1000656c <VIRT_APP_STACK_KRNL_TOP>:
1000656c:	00 00 e8 01                                         ....

10006570 <VIRT_HEAP_MIN>:
10006570:	00 00 00 c8                                         ....

10006574 <VIRT_HEAP_MAX>:
10006574:	ff ff ff ef                                         ....

10006578 <VIRT_SBRK_MIN>:
10006578:	00 00 00 f0                                         ....

1000657c <VIRT_SBRK_MAX>:
1000657c:	00 00 c0 ff                                         ....

10006580 <VIRT_ALLOCED_VIRT_PAGES>:
10006580:	00 00 10 c2                                         ....

10006584 <VIRT_ACPI_DRIVER>:
10006584:	00 40 48 c2                                         .@H.

10006588 <TERMINAL_KEYBUFFER_IN_SIZE>:
10006588:	96 00 00 00                                         ....

1000658c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000658c:	2c 01 00 00                                         ,...

10006590 <vtable for SoundBlaster16>:
	...
	10006598: R_386_32	SoundBlaster16::~SoundBlaster16()
	1000659c: R_386_32	SoundBlaster16::~SoundBlaster16()
	100065a0: R_386_32	SoundBlaster16::open(int, int, void*)
	100065a4: R_386_32	SoundBlaster16::close(int, int, void*)
	100065a8: R_386_32	Device::hibernate()
	100065ac: R_386_32	Device::wake()
	100065b0: R_386_32	Device::detect()
	100065b4: R_386_32	Device::disableLegacy()
	100065b8: R_386_32	Device::powerSaving(PowerSavingLevel)
	100065bc: R_386_32	SoundBlaster16::beginPlayback(int, int)
	100065c0: R_386_32	SoundBlaster16::stopPlayback()
	100065c4: R_386_32	SoundBlaster16::getNumHwChannels()
