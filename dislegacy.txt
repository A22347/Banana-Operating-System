
packages/system/32/0002/legacy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	realstart(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <realstart(void*)>:
10000017:	53                   	push   ebx
10000018:	83 ec 14             	sub    esp,0x14
1000001b:	68 58 01 00 00       	push   0x158
10000020:	e8 fc ff ff ff       	call   10000021 <realstart(void*)+0xa>	10000021: R_386_PC32	malloc
10000025:	89 04 24             	mov    DWORD PTR [esp],eax
10000028:	89 c3                	mov    ebx,eax
1000002a:	e8 fc ff ff ff       	call   1000002b <realstart(void*)+0x14>	1000002b: R_386_PC32	ISA::ISA()
1000002f:	58                   	pop    eax
10000030:	5a                   	pop    edx
10000031:	53                   	push   ebx
10000032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000036:	e8 fc ff ff ff       	call   10000037 <realstart(void*)+0x20>	10000037: R_386_PC32	Device::addChild(Device*)
1000003b:	6a 00                	push   0x0
1000003d:	8b 03                	mov    eax,DWORD PTR [ebx]
1000003f:	6a 00                	push   0x0
10000041:	6a 00                	push   0x0
10000043:	53                   	push   ebx
10000044:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000047:	83 c4 28             	add    esp,0x28
1000004a:	5b                   	pop    ebx
1000004b:	c3                   	ret    

1000004c <ISA::ISA()>:
1000004c:	55                   	push   ebp
1000004d:	89 e5                	mov    ebp,esp
1000004f:	83 ec 08             	sub    esp,0x8
10000052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000055:	83 ec 08             	sub    esp,0x8
10000058:	68 9c 50 00 10       	push   0x1000509c	10000059: R_386_32	.text
1000005d:	50                   	push   eax
1000005e:	e8 fc ff ff ff       	call   1000005f <ISA::ISA()+0x13>	1000005f: R_386_PC32	Bus::Bus(char const*)
10000063:	83 c4 10             	add    esp,0x10
10000066:	ba 08 00 00 00       	mov    edx,0x8	10000067: R_386_32	vtable for ISA
1000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000006e:	89 10                	mov    DWORD PTR [eax],edx
10000070:	90                   	nop
10000071:	c9                   	leave  
10000072:	c3                   	ret    
10000073:	90                   	nop

10000074 <ISA::open(int, int, void*)>:
10000074:	83 ec 18             	sub    esp,0x18
10000077:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000007b:	8b 10                	mov    edx,DWORD PTR [eax]
1000007d:	50                   	push   eax
1000007e:	ff 52 18             	call   DWORD PTR [edx+0x18]
10000081:	31 c0                	xor    eax,eax
10000083:	83 c4 1c             	add    esp,0x1c
10000086:	c3                   	ret    
10000087:	90                   	nop

10000088 <ISA::close(int, int, void*)>:
10000088:	31 c0                	xor    eax,eax
1000008a:	c3                   	ret    
1000008b:	90                   	nop

1000008c <ISA::doSpeaker()>:
1000008c:	c3                   	ret    
1000008d:	90                   	nop

1000008e <ISA::doSoundblaster()>:
1000008e:	c3                   	ret    
1000008f:	90                   	nop

10000090 <ISA::doSerial()>:
10000090:	c3                   	ret    
10000091:	90                   	nop

10000092 <ISA::doParallel()>:
10000092:	c3                   	ret    
10000093:	90                   	nop

10000094 <ISA::doGameport()>:
10000094:	53                   	push   ebx
10000095:	83 ec 14             	sub    esp,0x14
10000098:	68 80 01 00 00       	push   0x180
1000009d:	e8 fc ff ff ff       	call   1000009e <ISA::doGameport()+0xa>	1000009e: R_386_PC32	malloc
100000a2:	89 04 24             	mov    DWORD PTR [esp],eax
100000a5:	89 c3                	mov    ebx,eax
100000a7:	e8 fc ff ff ff       	call   100000a8 <ISA::doGameport()+0x14>	100000a8: R_386_PC32	Gameport::Gameport()
100000ac:	58                   	pop    eax
100000ad:	5a                   	pop    edx
100000ae:	53                   	push   ebx
100000af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000b3:	e8 fc ff ff ff       	call   100000b4 <ISA::doGameport()+0x20>	100000b4: R_386_PC32	Device::addChild(Device*)
100000b8:	6a 00                	push   0x0
100000ba:	8b 03                	mov    eax,DWORD PTR [ebx]
100000bc:	6a 00                	push   0x0
100000be:	6a 00                	push   0x0
100000c0:	53                   	push   ebx
100000c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
100000c4:	83 c4 28             	add    esp,0x28
100000c7:	5b                   	pop    ebx
100000c8:	c3                   	ret    
100000c9:	90                   	nop

100000ca <ISA::doFloppy()>:
100000ca:	f6 05 10 04 00 00 01 	test   BYTE PTR ds:0x410,0x1
100000d1:	74 38                	je     1000010b <ISA::doFloppy()+0x41>
100000d3:	53                   	push   ebx
100000d4:	83 ec 14             	sub    esp,0x14
100000d7:	68 b0 01 00 00       	push   0x1b0
100000dc:	e8 fc ff ff ff       	call   100000dd <ISA::doFloppy()+0x13>	100000dd: R_386_PC32	malloc
100000e1:	89 04 24             	mov    DWORD PTR [esp],eax
100000e4:	89 c3                	mov    ebx,eax
100000e6:	e8 fc ff ff ff       	call   100000e7 <ISA::doFloppy()+0x1d>	100000e7: R_386_PC32	Floppy::Floppy()
100000eb:	58                   	pop    eax
100000ec:	5a                   	pop    edx
100000ed:	53                   	push   ebx
100000ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000f2:	e8 fc ff ff ff       	call   100000f3 <ISA::doFloppy()+0x29>	100000f3: R_386_PC32	Device::addChild(Device*)
100000f7:	6a 00                	push   0x0
100000f9:	6a 00                	push   0x0
100000fb:	68 f0 03 00 00       	push   0x3f0
10000100:	53                   	push   ebx
10000101:	e8 fc ff ff ff       	call   10000102 <ISA::doFloppy()+0x38>	10000102: R_386_PC32	Floppy::_open(int, int, void*)
10000106:	83 c4 28             	add    esp,0x28
10000109:	5b                   	pop    ebx
1000010a:	c3                   	ret    
1000010b:	c3                   	ret    

1000010c <ISA::doATA()>:
1000010c:	c3                   	ret    
1000010d:	90                   	nop

1000010e <ISA::doPS2()>:
1000010e:	53                   	push   ebx
1000010f:	83 ec 14             	sub    esp,0x14
10000112:	68 00 00 00 00       	push   0x0	10000113: R_386_32	str_ps2
10000117:	e8 fc ff ff ff       	call   10000118 <ISA::doPS2()+0xa>	10000118: R_386_PC32	Dbg::kprintf(char const*, ...)
1000011c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	1000011f: R_386_32	str_ps2
10000123:	e8 fc ff ff ff       	call   10000124 <ISA::doPS2()+0x16>	10000124: R_386_PC32	Dbg::kprintf(char const*, ...)
10000128:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	1000012b: R_386_32	str_ps2
1000012f:	e8 fc ff ff ff       	call   10000130 <ISA::doPS2()+0x22>	10000130: R_386_PC32	Dbg::kprintf(char const*, ...)
10000134:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000137: R_386_32	str_ps2
1000013b:	e8 fc ff ff ff       	call   1000013c <ISA::doPS2()+0x2e>	1000013c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000140:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
10000147:	e8 fc ff ff ff       	call   10000148 <ISA::doPS2()+0x3a>	10000148: R_386_PC32	malloc
1000014c:	89 04 24             	mov    DWORD PTR [esp],eax
1000014f:	89 c3                	mov    ebx,eax
10000151:	e8 fc ff ff ff       	call   10000152 <ISA::doPS2()+0x44>	10000152: R_386_PC32	PS2::PS2()
10000156:	58                   	pop    eax
10000157:	5a                   	pop    edx
10000158:	53                   	push   ebx
10000159:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000015d:	e8 fc ff ff ff       	call   1000015e <ISA::doPS2()+0x50>	1000015e: R_386_PC32	Device::addChild(Device*)
10000162:	6a 00                	push   0x0
10000164:	8b 03                	mov    eax,DWORD PTR [ebx]
10000166:	6a 00                	push   0x0
10000168:	6a 00                	push   0x0
1000016a:	53                   	push   ebx
1000016b:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000016e:	83 c4 28             	add    esp,0x28
10000171:	5b                   	pop    ebx
10000172:	c3                   	ret    
10000173:	90                   	nop

10000174 <ISA::doRTC()>:
10000174:	c3                   	ret    
10000175:	90                   	nop

10000176 <ISA::detect()>:
10000176:	57                   	push   edi
10000177:	56                   	push   esi
10000178:	53                   	push   ebx
10000179:	83 ec 2c             	sub    esp,0x2c
1000017c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
10000180:	68 5c 01 00 00       	push   0x15c
10000185:	e8 fc ff ff ff       	call   10000186 <ISA::detect()+0x10>	10000186: R_386_PC32	malloc
1000018a:	89 04 24             	mov    DWORD PTR [esp],eax
1000018d:	89 c3                	mov    ebx,eax
1000018f:	e8 fc ff ff ff       	call   10000190 <ISA::detect()+0x1a>	10000190: R_386_PC32	DMA::DMA()
10000194:	59                   	pop    ecx
10000195:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000197: R_386_32	isaDMAController
1000019b:	5e                   	pop    esi
1000019c:	53                   	push   ebx
1000019d:	57                   	push   edi
1000019e:	e8 fc ff ff ff       	call   1000019f <ISA::detect()+0x29>	1000019f: R_386_PC32	Device::addChild(Device*)
100001a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100001a4: R_386_32	isaDMAController
100001a8:	8b 10                	mov    edx,DWORD PTR [eax]
100001aa:	6a 00                	push   0x0
100001ac:	6a 00                	push   0x0
100001ae:	6a 00                	push   0x0
100001b0:	50                   	push   eax
100001b1:	ff 52 08             	call   DWORD PTR [edx+0x8]
100001b4:	83 c4 20             	add    esp,0x20
100001b7:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100001b9: R_386_32	detectDone
100001be:	0f 85 eb 00 00 00    	jne    100002af <ISA::detect()+0x139>
100001c4:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100001c6: R_386_32	detectDone
100001cb:	31 db                	xor    ebx,ebx
100001cd:	52                   	push   edx
100001ce:	6a 01                	push   0x1
100001d0:	68 00 00 00 00       	push   0x0	100001d1: R_386_32	str_isadonesafe
100001d5:	68 00 00 00 00       	push   0x0	100001d6: R_386_32	str_isa
100001da:	e8 fc ff ff ff       	call   100001db <ISA::detect()+0x65>	100001db: R_386_PC32	Reg::readBoolWithDefault(char*, char*, bool)
100001df:	83 c4 10             	add    esp,0x10
100001e2:	50                   	push   eax
100001e3:	50                   	push   eax
100001e4:	68 00 00 00 00       	push   0x0	100001e5: R_386_32	str_devices
100001e9:	8d 74 24 0c          	lea    esi,[esp+0xc]
100001ed:	56                   	push   esi
100001ee:	e8 fc ff ff ff       	call   100001ef <ISA::detect()+0x79>	100001ef: R_386_PC32	strcpy
100001f3:	83 c4 10             	add    esp,0x10
100001f6:	85 db                	test   ebx,ebx
100001f8:	75 09                	jne    10000203 <ISA::detect()+0x8d>
100001fa:	50                   	push   eax
100001fb:	50                   	push   eax
100001fc:	68 00 00 00 00       	push   0x0	100001fd: R_386_32	str_spk
10000201:	eb 52                	jmp    10000255 <ISA::detect()+0xdf>
10000203:	83 fb 01             	cmp    ebx,0x1
10000206:	75 09                	jne    10000211 <ISA::detect()+0x9b>
10000208:	50                   	push   eax
10000209:	50                   	push   eax
1000020a:	68 00 00 00 00       	push   0x0	1000020b: R_386_32	str_rtc
1000020f:	eb 44                	jmp    10000255 <ISA::detect()+0xdf>
10000211:	83 fb 02             	cmp    ebx,0x2
10000214:	75 09                	jne    1000021f <ISA::detect()+0xa9>
10000216:	50                   	push   eax
10000217:	50                   	push   eax
10000218:	68 00 00 00 00       	push   0x0	10000219: R_386_32	str_ps2
1000021d:	eb 36                	jmp    10000255 <ISA::detect()+0xdf>
1000021f:	83 fb 03             	cmp    ebx,0x3
10000222:	75 09                	jne    1000022d <ISA::detect()+0xb7>
10000224:	50                   	push   eax
10000225:	50                   	push   eax
10000226:	68 00 00 00 00       	push   0x0	10000227: R_386_32	str_floppy
1000022b:	eb 28                	jmp    10000255 <ISA::detect()+0xdf>
1000022d:	83 fb 04             	cmp    ebx,0x4
10000230:	75 09                	jne    1000023b <ISA::detect()+0xc5>
10000232:	50                   	push   eax
10000233:	50                   	push   eax
10000234:	68 00 00 00 00       	push   0x0	10000235: R_386_32	str_sb16
10000239:	eb 1a                	jmp    10000255 <ISA::detect()+0xdf>
1000023b:	83 fb 05             	cmp    ebx,0x5
1000023e:	75 09                	jne    10000249 <ISA::detect()+0xd3>
10000240:	51                   	push   ecx
10000241:	51                   	push   ecx
10000242:	68 00 00 00 00       	push   0x0	10000243: R_386_32	str_isaata
10000247:	eb 0c                	jmp    10000255 <ISA::detect()+0xdf>
10000249:	83 fb 06             	cmp    ebx,0x6
1000024c:	75 10                	jne    1000025e <ISA::detect()+0xe8>
1000024e:	52                   	push   edx
1000024f:	52                   	push   edx
10000250:	68 00 00 00 00       	push   0x0	10000251: R_386_32	str_gp
10000255:	56                   	push   esi
10000256:	e8 fc ff ff ff       	call   10000257 <ISA::detect()+0xe1>	10000257: R_386_PC32	strcat
1000025b:	83 c4 10             	add    esp,0x10
1000025e:	50                   	push   eax
1000025f:	6a ff                	push   0xffffffff
10000261:	56                   	push   esi
10000262:	68 00 00 00 00       	push   0x0	10000263: R_386_32	str_isa
10000267:	e8 fc ff ff ff       	call   10000268 <ISA::detect()+0xf2>	10000268: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
1000026c:	83 c4 10             	add    esp,0x10
1000026f:	83 f8 fe             	cmp    eax,0xfffffffe
10000272:	74 31                	je     100002a5 <ISA::detect()+0x12f>
10000274:	83 fb 02             	cmp    ebx,0x2
10000277:	75 0b                	jne    10000284 <ISA::detect()+0x10e>
10000279:	83 ec 0c             	sub    esp,0xc
1000027c:	57                   	push   edi
1000027d:	e8 fc ff ff ff       	call   1000027e <ISA::detect()+0x108>	1000027e: R_386_PC32	ISA::doPS2()
10000282:	eb 1e                	jmp    100002a2 <ISA::detect()+0x12c>
10000284:	83 fb 03             	cmp    ebx,0x3
10000287:	75 0b                	jne    10000294 <ISA::detect()+0x11e>
10000289:	83 ec 0c             	sub    esp,0xc
1000028c:	57                   	push   edi
1000028d:	e8 fc ff ff ff       	call   1000028e <ISA::detect()+0x118>	1000028e: R_386_PC32	ISA::doFloppy()
10000292:	eb 0e                	jmp    100002a2 <ISA::detect()+0x12c>
10000294:	83 fb 06             	cmp    ebx,0x6
10000297:	75 0c                	jne    100002a5 <ISA::detect()+0x12f>
10000299:	83 ec 0c             	sub    esp,0xc
1000029c:	57                   	push   edi
1000029d:	e8 fc ff ff ff       	call   1000029e <ISA::detect()+0x128>	1000029e: R_386_PC32	ISA::doGameport()
100002a2:	83 c4 10             	add    esp,0x10
100002a5:	43                   	inc    ebx
100002a6:	83 fb 07             	cmp    ebx,0x7
100002a9:	0f 85 33 ff ff ff    	jne    100001e2 <ISA::detect()+0x6c>
100002af:	83 c4 20             	add    esp,0x20
100002b2:	5b                   	pop    ebx
100002b3:	5e                   	pop    esi
100002b4:	5f                   	pop    edi
100002b5:	c3                   	ret    

100002b6 <floppyMotorFunction(void*)>:
100002b6:	55                   	push   ebp
100002b7:	89 e5                	mov    ebp,esp
100002b9:	83 ec 18             	sub    esp,0x18
100002bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002bf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100002c2:	e8 fc ff ff ff       	call   100002c3 <floppyMotorFunction(void*)+0xd>	100002c3: R_386_PC32	unlockScheduler()
100002c7:	83 ec 08             	sub    esp,0x8
100002ca:	6a 00                	push   0x0
100002cc:	68 00 84 d7 17       	push   0x17d78400
100002d1:	e8 fc ff ff ff       	call   100002d2 <floppyMotorFunction(void*)+0x1c>	100002d2: R_386_PC32	nanoSleep(unsigned long long)
100002d6:	83 c4 10             	add    esp,0x10
100002d9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100002e0:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
100002e4:	7f e1                	jg     100002c7 <floppyMotorFunction(void*)+0x11>
100002e6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100002e9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100002ec:	83 c2 58             	add    edx,0x58
100002ef:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100002f3:	83 f8 02             	cmp    eax,0x2
100002f6:	0f 85 8a 00 00 00    	jne    10000386 <floppyMotorFunction(void*)+0xd0>
100002fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100002ff:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000302:	83 c2 5c             	add    edx,0x5c
10000305:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000309:	8d 88 70 fe ff ff    	lea    ecx,[eax-0x190]
1000030f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000312:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000315:	83 c2 5c             	add    edx,0x5c
10000318:	89 4c 90 0c          	mov    DWORD PTR [eax+edx*4+0xc],ecx
1000031c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000031f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000322:	83 c2 5c             	add    edx,0x5c
10000325:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000329:	85 c0                	test   eax,eax
1000032b:	7f 59                	jg     10000386 <floppyMotorFunction(void*)+0xd0>
1000032d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000330:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000333:	83 c2 58             	add    edx,0x58
10000336:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
1000033e:	e8 fc ff ff ff       	call   1000033f <floppyMotorFunction(void*)+0x89>	1000033f: R_386_PC32	lockScheduler()
10000343:	83 ec 08             	sub    esp,0x8
10000346:	6a 02                	push   0x2
10000348:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000034b:	e8 fc ff ff ff       	call   1000034c <floppyMotorFunction(void*)+0x96>	1000034c: R_386_PC32	Floppy::readPort(FloppyReg)
10000350:	83 c4 10             	add    esp,0x10
10000353:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000356:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000359:	ba 10 00 00 00       	mov    edx,0x10
1000035e:	88 c1                	mov    cl,al
10000360:	d3 e2                	shl    edx,cl
10000362:	89 d0                	mov    eax,edx
10000364:	f7 d0                	not    eax
10000366:	88 c2                	mov    dl,al
10000368:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
1000036b:	21 d0                	and    eax,edx
1000036d:	0f b6 c0             	movzx  eax,al
10000370:	83 ec 04             	sub    esp,0x4
10000373:	50                   	push   eax
10000374:	6a 02                	push   0x2
10000376:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000379:	e8 fc ff ff ff       	call   1000037a <floppyMotorFunction(void*)+0xc4>	1000037a: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
1000037e:	83 c4 10             	add    esp,0x10
10000381:	e8 fc ff ff ff       	call   10000382 <floppyMotorFunction(void*)+0xcc>	10000382: R_386_PC32	unlockScheduler()
10000386:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000389:	e9 52 ff ff ff       	jmp    100002e0 <floppyMotorFunction(void*)+0x2a>

1000038e <floppyIRQHandler(regs*, void*)>:
1000038e:	55                   	push   ebp
1000038f:	89 e5                	mov    ebp,esp
10000391:	83 ec 10             	sub    esp,0x10
10000394:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000397:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000039a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000039d:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
100003a4:	90                   	nop
100003a5:	c9                   	leave  
100003a6:	c3                   	ret    
100003a7:	90                   	nop

100003a8 <Floppy::Floppy()>:
100003a8:	55                   	push   ebp
100003a9:	89 e5                	mov    ebp,esp
100003ab:	83 ec 08             	sub    esp,0x8
100003ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b1:	83 ec 08             	sub    esp,0x8
100003b4:	68 70 51 00 10       	push   0x10005170	100003b5: R_386_32	.text
100003b9:	50                   	push   eax
100003ba:	e8 fc ff ff ff       	call   100003bb <Floppy::Floppy()+0x13>	100003bb: R_386_PC32	HardDiskController::HardDiskController(char const*)
100003bf:	83 c4 10             	add    esp,0x10
100003c2:	ba 08 00 00 00       	mov    edx,0x8	100003c3: R_386_32	vtable for Floppy
100003c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003ca:	89 10                	mov    DWORD PTR [eax],edx
100003cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003cf:	66 c7 80 58 01 00 00 f0 03 	mov    WORD PTR [eax+0x158],0x3f0
100003d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003db:	c6 80 8c 01 00 00 01 	mov    BYTE PTR [eax+0x18c],0x1
100003e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003e5:	c6 80 8d 01 00 00 00 	mov    BYTE PTR [eax+0x18d],0x0
100003ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003ef:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
100003f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003f9:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
10000400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000403:	c6 80 90 01 00 00 01 	mov    BYTE PTR [eax+0x190],0x1
1000040a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000040d:	c6 80 91 01 00 00 01 	mov    BYTE PTR [eax+0x191],0x1
10000414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000417:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
1000041e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000421:	c7 80 94 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x194],0xffffffff
1000042b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000042e:	83 ec 0c             	sub    esp,0xc
10000431:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000434:	6a 01                	push   0x1
10000436:	68 00 00 00 00       	push   0x0	10000437: R_386_32	floppyIRQHandler(regs*, void*)
1000043b:	6a 06                	push   0x6
1000043d:	50                   	push   eax
1000043e:	e8 fc ff ff ff       	call   1000043f <Floppy::Floppy()+0x97>	1000043f: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10000443:	83 c4 20             	add    esp,0x20
10000446:	89 c2                	mov    edx,eax
10000448:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000044b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
10000451:	a1 00 00 00 00       	mov    eax,ds:0x0	10000452: R_386_32	kernelProcess
10000456:	68 d2 00 00 00       	push   0xd2
1000045b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000045e:	68 00 00 00 00       	push   0x0	1000045f: R_386_32	floppyMotorFunction(void*)
10000463:	50                   	push   eax
10000464:	e8 fc ff ff ff       	call   10000465 <Floppy::Floppy()+0xbd>	10000465: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000469:	83 c4 10             	add    esp,0x10
1000046c:	89 c2                	mov    edx,eax
1000046e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000471:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10000477:	a1 00 00 00 00       	mov    eax,ds:0x0	10000478: R_386_32	isaDMAController
1000047c:	83 ec 08             	sub    esp,0x8
1000047f:	6a 02                	push   0x2
10000481:	50                   	push   eax
10000482:	e8 fc ff ff ff       	call   10000483 <Floppy::Floppy()+0xdb>	10000483: R_386_PC32	DMA::tryLockChannel(int)
10000487:	83 c4 10             	add    esp,0x10
1000048a:	89 c2                	mov    edx,eax
1000048c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000048f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
10000495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000498:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
1000049e:	83 ec 08             	sub    esp,0x8
100004a1:	68 00 48 00 00       	push   0x4800
100004a6:	50                   	push   eax
100004a7:	e8 fc ff ff ff       	call   100004a8 <Floppy::Floppy()+0x100>	100004a8: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
100004ac:	83 c4 10             	add    esp,0x10
100004af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004b2:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
100004b8:	83 ec 0c             	sub    esp,0xc
100004bb:	50                   	push   eax
100004bc:	e8 fc ff ff ff       	call   100004bd <Floppy::Floppy()+0x115>	100004bd: R_386_PC32	DMAChannel::getAddress()
100004c1:	83 c4 10             	add    esp,0x10
100004c4:	89 c2                	mov    edx,eax
100004c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004c9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
100004cf:	90                   	nop
100004d0:	c9                   	leave  
100004d1:	c3                   	ret    

100004d2 <Floppy::wasFailure()>:
100004d2:	55                   	push   ebp
100004d3:	89 e5                	mov    ebp,esp
100004d5:	83 ec 10             	sub    esp,0x10
100004d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004db:	c6 80 8f 01 00 00 01 	mov    BYTE PTR [eax+0x18f],0x1
100004e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004e5:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
100004eb:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
100004ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004f1:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
100004f8:	8a 45 ff             	mov    al,BYTE PTR [ebp-0x1]
100004fb:	c9                   	leave  
100004fc:	c3                   	ret    
100004fd:	90                   	nop

100004fe <Floppy::writeCommand(unsigned char)>:
100004fe:	55                   	push   ebp
100004ff:	89 e5                	mov    ebp,esp
10000501:	83 ec 28             	sub    esp,0x28
10000504:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000507:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
1000050a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000050d:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
10000513:	84 c0                	test   al,al
10000515:	74 10                	je     10000527 <Floppy::writeCommand(unsigned char)+0x29>
10000517:	83 ec 0c             	sub    esp,0xc
1000051a:	68 88 51 00 10       	push   0x10005188	1000051b: R_386_32	.text
1000051f:	e8 fc ff ff ff       	call   10000520 <Floppy::writeCommand(unsigned char)+0x22>	10000520: R_386_PC32	Krnl::panic(char const*)
10000524:	83 c4 10             	add    esp,0x10
10000527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000052a:	8a 80 8f 01 00 00    	mov    al,BYTE PTR [eax+0x18f]
10000530:	83 f0 01             	xor    eax,0x1
10000533:	84 c0                	test   al,al
10000535:	74 10                	je     10000547 <Floppy::writeCommand(unsigned char)+0x49>
10000537:	83 ec 0c             	sub    esp,0xc
1000053a:	68 b8 51 00 10       	push   0x100051b8	1000053b: R_386_32	.text
1000053f:	e8 fc ff ff ff       	call   10000540 <Floppy::writeCommand(unsigned char)+0x42>	10000540: R_386_PC32	Krnl::panic(char const*)
10000544:	83 c4 10             	add    esp,0x10
10000547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000054a:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
10000551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000554:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
1000055b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000562:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
10000566:	7f 53                	jg     100005bb <Floppy::writeCommand(unsigned char)+0xbd>
10000568:	83 ec 08             	sub    esp,0x8
1000056b:	6a 00                	push   0x0
1000056d:	68 80 96 98 00       	push   0x989680
10000572:	e8 fc ff ff ff       	call   10000573 <Floppy::writeCommand(unsigned char)+0x75>	10000573: R_386_PC32	nanoSleep(unsigned long long)
10000577:	83 c4 10             	add    esp,0x10
1000057a:	83 ec 08             	sub    esp,0x8
1000057d:	6a 04                	push   0x4
1000057f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000582:	e8 fc ff ff ff       	call   10000583 <Floppy::writeCommand(unsigned char)+0x85>	10000583: R_386_PC32	Floppy::readPort(FloppyReg)
10000587:	83 c4 10             	add    esp,0x10
1000058a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000058d:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000590:	84 c0                	test   al,al
10000592:	79 22                	jns    100005b6 <Floppy::writeCommand(unsigned char)+0xb8>
10000594:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10000598:	83 e0 40             	and    eax,0x40
1000059b:	85 c0                	test   eax,eax
1000059d:	75 17                	jne    100005b6 <Floppy::writeCommand(unsigned char)+0xb8>
1000059f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
100005a3:	83 ec 04             	sub    esp,0x4
100005a6:	50                   	push   eax
100005a7:	6a 05                	push   0x5
100005a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005ac:	e8 fc ff ff ff       	call   100005ad <Floppy::writeCommand(unsigned char)+0xaf>	100005ad: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100005b1:	83 c4 10             	add    esp,0x10
100005b4:	eb 0f                	jmp    100005c5 <Floppy::writeCommand(unsigned char)+0xc7>
100005b6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100005b9:	eb a7                	jmp    10000562 <Floppy::writeCommand(unsigned char)+0x64>
100005bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005be:	c6 80 8e 01 00 00 01 	mov    BYTE PTR [eax+0x18e],0x1
100005c5:	c9                   	leave  
100005c6:	c3                   	ret    
100005c7:	90                   	nop

100005c8 <Floppy::readData()>:
100005c8:	55                   	push   ebp
100005c9:	89 e5                	mov    ebp,esp
100005cb:	83 ec 18             	sub    esp,0x18
100005ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005d1:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
100005d7:	84 c0                	test   al,al
100005d9:	74 10                	je     100005eb <Floppy::readData()+0x23>
100005db:	83 ec 0c             	sub    esp,0xc
100005de:	68 88 51 00 10       	push   0x10005188	100005df: R_386_32	.text
100005e3:	e8 fc ff ff ff       	call   100005e4 <Floppy::readData()+0x1c>	100005e4: R_386_PC32	Krnl::panic(char const*)
100005e8:	83 c4 10             	add    esp,0x10
100005eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005ee:	8a 80 8f 01 00 00    	mov    al,BYTE PTR [eax+0x18f]
100005f4:	83 f0 01             	xor    eax,0x1
100005f7:	84 c0                	test   al,al
100005f9:	74 10                	je     1000060b <Floppy::readData()+0x43>
100005fb:	83 ec 0c             	sub    esp,0xc
100005fe:	68 b8 51 00 10       	push   0x100051b8	100005ff: R_386_32	.text
10000603:	e8 fc ff ff ff       	call   10000604 <Floppy::readData()+0x3c>	10000604: R_386_PC32	Krnl::panic(char const*)
10000608:	83 c4 10             	add    esp,0x10
1000060b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000060e:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
10000615:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000618:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
1000061f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000626:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
1000062a:	7f 4e                	jg     1000067a <Floppy::readData()+0xb2>
1000062c:	83 ec 08             	sub    esp,0x8
1000062f:	6a 00                	push   0x0
10000631:	68 80 96 98 00       	push   0x989680
10000636:	e8 fc ff ff ff       	call   10000637 <Floppy::readData()+0x6f>	10000637: R_386_PC32	nanoSleep(unsigned long long)
1000063b:	83 c4 10             	add    esp,0x10
1000063e:	83 ec 08             	sub    esp,0x8
10000641:	6a 04                	push   0x4
10000643:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000646:	e8 fc ff ff ff       	call   10000647 <Floppy::readData()+0x7f>	10000647: R_386_PC32	Floppy::readPort(FloppyReg)
1000064b:	83 c4 10             	add    esp,0x10
1000064e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000651:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000654:	84 c0                	test   al,al
10000656:	79 1d                	jns    10000675 <Floppy::readData()+0xad>
10000658:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
1000065c:	83 e0 40             	and    eax,0x40
1000065f:	85 c0                	test   eax,eax
10000661:	74 12                	je     10000675 <Floppy::readData()+0xad>
10000663:	83 ec 08             	sub    esp,0x8
10000666:	6a 05                	push   0x5
10000668:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000066b:	e8 fc ff ff ff       	call   1000066c <Floppy::readData()+0xa4>	1000066c: R_386_PC32	Floppy::readPort(FloppyReg)
10000670:	83 c4 10             	add    esp,0x10
10000673:	eb 11                	jmp    10000686 <Floppy::readData()+0xbe>
10000675:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000678:	eb ac                	jmp    10000626 <Floppy::readData()+0x5e>
1000067a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000067d:	c6 80 8e 01 00 00 01 	mov    BYTE PTR [eax+0x18e],0x1
10000684:	b0 00                	mov    al,0x0
10000686:	c9                   	leave  
10000687:	c3                   	ret    

10000688 <Floppy::readPort(FloppyReg)>:
10000688:	55                   	push   ebp
10000689:	89 e5                	mov    ebp,esp
1000068b:	83 ec 10             	sub    esp,0x10
1000068e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000691:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000697:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000069a:	01 d0                	add    eax,edx
1000069c:	0f b7 c0             	movzx  eax,ax
1000069f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
100006a3:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
100006a7:	89 c2                	mov    edx,eax
100006a9:	ec                   	in     al,dx
100006aa:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
100006ad:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
100006b0:	90                   	nop
100006b1:	c9                   	leave  
100006b2:	c3                   	ret    
100006b3:	90                   	nop

100006b4 <Floppy::writePort(FloppyReg, unsigned char)>:
100006b4:	55                   	push   ebp
100006b5:	89 e5                	mov    ebp,esp
100006b7:	83 ec 14             	sub    esp,0x14
100006ba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100006bd:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
100006c0:	0f b6 4d ec          	movzx  ecx,BYTE PTR [ebp-0x14]
100006c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006c7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100006cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100006d0:	01 d0                	add    eax,edx
100006d2:	0f b7 c0             	movzx  eax,ax
100006d5:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
100006d9:	88 4d fd             	mov    BYTE PTR [ebp-0x3],cl
100006dc:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
100006df:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
100006e3:	ee                   	out    dx,al
100006e4:	90                   	nop
100006e5:	c9                   	leave  
100006e6:	c3                   	ret    
100006e7:	90                   	nop

100006e8 <Floppy::driveDetection()>:
100006e8:	55                   	push   ebp
100006e9:	89 e5                	mov    ebp,esp
100006eb:	53                   	push   ebx
100006ec:	83 ec 24             	sub    esp,0x24
100006ef:	83 ec 0c             	sub    esp,0xc
100006f2:	68 e6 51 00 10       	push   0x100051e6	100006f3: R_386_32	.text
100006f7:	e8 fc ff ff ff       	call   100006f8 <Floppy::driveDetection()+0x10>	100006f8: R_386_PC32	Dbg::kprintf(char const*, ...)
100006fc:	83 c4 10             	add    esp,0x10
100006ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000702:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000708:	66 3d f0 03          	cmp    ax,0x3f0
1000070c:	0f 85 28 01 00 00    	jne    1000083a <Floppy::driveDetection()+0x152>
10000712:	a1 00 00 00 00       	mov    eax,ds:0x0	10000713: R_386_32	Krnl::computer
10000717:	83 ec 08             	sub    esp,0x8
1000071a:	6a 10                	push   0x10
1000071c:	50                   	push   eax
1000071d:	e8 fc ff ff ff       	call   1000071e <Floppy::driveDetection()+0x36>	1000071e: R_386_PC32	Computer::readCMOS(unsigned char)
10000722:	83 c4 10             	add    esp,0x10
10000725:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000728:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000072c:	c1 f8 04             	sar    eax,0x4
1000072f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000732:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000736:	83 e0 0f             	and    eax,0xf
10000739:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000073c:	83 ec 08             	sub    esp,0x8
1000073f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000742:	68 00 52 00 10       	push   0x10005200	10000743: R_386_32	.text
10000747:	e8 fc ff ff ff       	call   10000748 <Floppy::driveDetection()+0x60>	10000748: R_386_PC32	Dbg::kprintf(char const*, ...)
1000074c:	83 c4 10             	add    esp,0x10
1000074f:	83 ec 08             	sub    esp,0x8
10000752:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000755:	68 14 52 00 10       	push   0x10005214	10000756: R_386_32	.text
1000075a:	e8 fc ff ff ff       	call   1000075b <Floppy::driveDetection()+0x73>	1000075b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000075f:	83 c4 10             	add    esp,0x10
10000762:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10000766:	74 63                	je     100007cb <Floppy::driveDetection()+0xe3>
10000768:	c7 45 e0 74 01 00 00 	mov    DWORD PTR [ebp-0x20],0x174
1000076f:	83 ec 0c             	sub    esp,0xc
10000772:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10000775:	e8 fc ff ff ff       	call   10000776 <Floppy::driveDetection()+0x8e>	10000776: R_386_PC32	malloc
1000077a:	83 c4 10             	add    esp,0x10
1000077d:	89 c3                	mov    ebx,eax
1000077f:	83 ec 0c             	sub    esp,0xc
10000782:	53                   	push   ebx
10000783:	e8 fc ff ff ff       	call   10000784 <Floppy::driveDetection()+0x9c>	10000784: R_386_PC32	FloppyDrive::FloppyDrive()
10000788:	83 c4 10             	add    esp,0x10
1000078b:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
1000078e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000791:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000794:	89 90 98 01 00 00    	mov    DWORD PTR [eax+0x198],edx
1000079a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000079d:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
100007a0:	89 90 a8 01 00 00    	mov    DWORD PTR [eax+0x1a8],edx
100007a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007a9:	83 ec 08             	sub    esp,0x8
100007ac:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007af:	50                   	push   eax
100007b0:	e8 fc ff ff ff       	call   100007b1 <Floppy::driveDetection()+0xc9>	100007b1: R_386_PC32	Device::addChild(Device*)
100007b5:	83 c4 10             	add    esp,0x10
100007b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100007bb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100007be:	6a 00                	push   0x0
100007c0:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007c3:	e8 fc ff ff ff       	call   100007c4 <Floppy::driveDetection()+0xdc>	100007c4: R_386_PC32	FloppyDrive::_open(int, int, void*)
100007c8:	83 c4 10             	add    esp,0x10
100007cb:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100007cf:	74 69                	je     1000083a <Floppy::driveDetection()+0x152>
100007d1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100007d5:	74 63                	je     1000083a <Floppy::driveDetection()+0x152>
100007d7:	c7 45 dc 74 01 00 00 	mov    DWORD PTR [ebp-0x24],0x174
100007de:	83 ec 0c             	sub    esp,0xc
100007e1:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100007e4:	e8 fc ff ff ff       	call   100007e5 <Floppy::driveDetection()+0xfd>	100007e5: R_386_PC32	malloc
100007e9:	83 c4 10             	add    esp,0x10
100007ec:	89 c3                	mov    ebx,eax
100007ee:	83 ec 0c             	sub    esp,0xc
100007f1:	53                   	push   ebx
100007f2:	e8 fc ff ff ff       	call   100007f3 <Floppy::driveDetection()+0x10b>	100007f3: R_386_PC32	FloppyDrive::FloppyDrive()
100007f7:	83 c4 10             	add    esp,0x10
100007fa:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
100007fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000800:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000803:	89 90 9c 01 00 00    	mov    DWORD PTR [eax+0x19c],edx
10000809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000080c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
1000080f:	89 90 ac 01 00 00    	mov    DWORD PTR [eax+0x1ac],edx
10000815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000818:	83 ec 08             	sub    esp,0x8
1000081b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000081e:	50                   	push   eax
1000081f:	e8 fc ff ff ff       	call   10000820 <Floppy::driveDetection()+0x138>	10000820: R_386_PC32	Device::addChild(Device*)
10000824:	83 c4 10             	add    esp,0x10
10000827:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000082a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000082d:	6a 01                	push   0x1
1000082f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000832:	e8 fc ff ff ff       	call   10000833 <Floppy::driveDetection()+0x14b>	10000833: R_386_PC32	FloppyDrive::_open(int, int, void*)
10000837:	83 c4 10             	add    esp,0x10
1000083a:	90                   	nop
1000083b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000083e:	c9                   	leave  
1000083f:	c3                   	ret    

10000840 <Floppy::close(int, int, void*)>:
10000840:	b8 00 00 00 00       	mov    eax,0x0
10000845:	c3                   	ret    

10000846 <Floppy::open(int, int, void*)>:
10000846:	b8 00 00 00 00       	mov    eax,0x0
1000084b:	c3                   	ret    

1000084c <Floppy::_open(int, int, void*)>:
1000084c:	55                   	push   ebp
1000084d:	89 e5                	mov    ebp,esp
1000084f:	83 ec 18             	sub    esp,0x18
10000852:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000855:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000858:	66 89 82 58 01 00 00 	mov    WORD PTR [edx+0x158],ax
1000085f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000862:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000868:	0f b6 c8             	movzx  ecx,al
1000086b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000086e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000874:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000877:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
1000087c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000087f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000885:	0f b6 d0             	movzx  edx,al
10000888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000088b:	c6 44 90 06 06       	mov    BYTE PTR [eax+edx*4+0x6],0x6
10000890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000893:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000899:	8d 50 01             	lea    edx,[eax+0x1]
1000089c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000089f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100008a5:	0f b6 d0             	movzx  edx,al
100008a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008ab:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100008af:	83 e1 3f             	and    ecx,0x3f
100008b2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100008b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100008bf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008c2:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
100008c8:	0f b6 ca             	movzx  ecx,dl
100008cb:	83 c0 07             	add    eax,0x7
100008ce:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008d1:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100008d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008d9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100008df:	0f b6 d0             	movzx  edx,al
100008e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008e5:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100008ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100008f3:	8d 50 01             	lea    edx,[eax+0x1]
100008f6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100008f9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100008ff:	0f b6 d0             	movzx  edx,al
10000902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000905:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000909:	83 e1 3f             	and    ecx,0x3f
1000090c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000910:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000917:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
1000091b:	7f 27                	jg     10000944 <Floppy::_open(int, int, void*)+0xf8>
1000091d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000920:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000923:	83 c2 68             	add    edx,0x68
10000926:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
1000092e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000931:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000934:	83 c2 58             	add    edx,0x58
10000937:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
1000093f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000942:	eb d3                	jmp    10000917 <Floppy::_open(int, int, void*)+0xcb>
10000944:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000947:	e8 fc ff ff ff       	call   10000948 <Floppy::_open(int, int, void*)+0xfc>	10000948: R_386_PC32	Floppy::wasFailure()
1000094c:	83 c4 04             	add    esp,0x4
1000094f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000952:	c6 80 91 01 00 00 01 	mov    BYTE PTR [eax+0x191],0x1
10000959:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000095c:	c6 80 8d 01 00 00 00 	mov    BYTE PTR [eax+0x18d],0x0
10000963:	83 ec 0c             	sub    esp,0xc
10000966:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000969:	e8 fc ff ff ff       	call   1000096a <Floppy::_open(int, int, void*)+0x11e>	1000096a: R_386_PC32	Floppy::reset()
1000096e:	83 c4 10             	add    esp,0x10
10000971:	83 ec 0c             	sub    esp,0xc
10000974:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000977:	e8 fc ff ff ff       	call   10000978 <Floppy::_open(int, int, void*)+0x12c>	10000978: R_386_PC32	Floppy::driveDetection()
1000097c:	83 c4 10             	add    esp,0x10
1000097f:	b8 00 00 00 00       	mov    eax,0x0
10000984:	c9                   	leave  
10000985:	c3                   	ret    

10000986 <Floppy::senseInterrupt(int*, int*)>:
10000986:	55                   	push   ebp
10000987:	89 e5                	mov    ebp,esp
10000989:	83 ec 08             	sub    esp,0x8
1000098c:	83 ec 08             	sub    esp,0x8
1000098f:	6a 08                	push   0x8
10000991:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000994:	e8 fc ff ff ff       	call   10000995 <Floppy::senseInterrupt(int*, int*)+0xf>	10000995: R_386_PC32	Floppy::writeCommand(unsigned char)
10000999:	83 c4 10             	add    esp,0x10
1000099c:	83 ec 0c             	sub    esp,0xc
1000099f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009a2:	e8 fc ff ff ff       	call   100009a3 <Floppy::senseInterrupt(int*, int*)+0x1d>	100009a3: R_386_PC32	Floppy::wasFailure()
100009a7:	83 c4 10             	add    esp,0x10
100009aa:	84 c0                	test   al,al
100009ac:	74 04                	je     100009b2 <Floppy::senseInterrupt(int*, int*)+0x2c>
100009ae:	b0 00                	mov    al,0x0
100009b0:	eb 5a                	jmp    10000a0c <Floppy::senseInterrupt(int*, int*)+0x86>
100009b2:	83 ec 0c             	sub    esp,0xc
100009b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009b8:	e8 fc ff ff ff       	call   100009b9 <Floppy::senseInterrupt(int*, int*)+0x33>	100009b9: R_386_PC32	Floppy::readData()
100009bd:	83 c4 10             	add    esp,0x10
100009c0:	0f b6 d0             	movzx  edx,al
100009c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100009c6:	89 10                	mov    DWORD PTR [eax],edx
100009c8:	83 ec 0c             	sub    esp,0xc
100009cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009ce:	e8 fc ff ff ff       	call   100009cf <Floppy::senseInterrupt(int*, int*)+0x49>	100009cf: R_386_PC32	Floppy::wasFailure()
100009d3:	83 c4 10             	add    esp,0x10
100009d6:	84 c0                	test   al,al
100009d8:	74 04                	je     100009de <Floppy::senseInterrupt(int*, int*)+0x58>
100009da:	b0 00                	mov    al,0x0
100009dc:	eb 2e                	jmp    10000a0c <Floppy::senseInterrupt(int*, int*)+0x86>
100009de:	83 ec 0c             	sub    esp,0xc
100009e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009e4:	e8 fc ff ff ff       	call   100009e5 <Floppy::senseInterrupt(int*, int*)+0x5f>	100009e5: R_386_PC32	Floppy::readData()
100009e9:	83 c4 10             	add    esp,0x10
100009ec:	0f b6 d0             	movzx  edx,al
100009ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100009f2:	89 10                	mov    DWORD PTR [eax],edx
100009f4:	83 ec 0c             	sub    esp,0xc
100009f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009fa:	e8 fc ff ff ff       	call   100009fb <Floppy::senseInterrupt(int*, int*)+0x75>	100009fb: R_386_PC32	Floppy::wasFailure()
100009ff:	83 c4 10             	add    esp,0x10
10000a02:	84 c0                	test   al,al
10000a04:	74 04                	je     10000a0a <Floppy::senseInterrupt(int*, int*)+0x84>
10000a06:	b0 00                	mov    al,0x0
10000a08:	eb 02                	jmp    10000a0c <Floppy::senseInterrupt(int*, int*)+0x86>
10000a0a:	b0 01                	mov    al,0x1
10000a0c:	c9                   	leave  
10000a0d:	c3                   	ret    

10000a0e <Floppy::lock()>:
10000a0e:	55                   	push   ebp
10000a0f:	89 e5                	mov    ebp,esp
10000a11:	83 ec 08             	sub    esp,0x8
10000a14:	83 ec 08             	sub    esp,0x8
10000a17:	6a 14                	push   0x14
10000a19:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a1c:	e8 fc ff ff ff       	call   10000a1d <Floppy::lock()+0xf>	10000a1d: R_386_PC32	Floppy::writeCommand(unsigned char)
10000a21:	83 c4 10             	add    esp,0x10
10000a24:	83 ec 0c             	sub    esp,0xc
10000a27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a2a:	e8 fc ff ff ff       	call   10000a2b <Floppy::lock()+0x1d>	10000a2b: R_386_PC32	Floppy::wasFailure()
10000a2f:	83 c4 10             	add    esp,0x10
10000a32:	84 c0                	test   al,al
10000a34:	74 04                	je     10000a3a <Floppy::lock()+0x2c>
10000a36:	b0 00                	mov    al,0x0
10000a38:	eb 26                	jmp    10000a60 <Floppy::lock()+0x52>
10000a3a:	83 ec 0c             	sub    esp,0xc
10000a3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a40:	e8 fc ff ff ff       	call   10000a41 <Floppy::lock()+0x33>	10000a41: R_386_PC32	Floppy::readData()
10000a45:	83 c4 10             	add    esp,0x10
10000a48:	83 ec 0c             	sub    esp,0xc
10000a4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a4e:	e8 fc ff ff ff       	call   10000a4f <Floppy::lock()+0x41>	10000a4f: R_386_PC32	Floppy::wasFailure()
10000a53:	83 c4 10             	add    esp,0x10
10000a56:	84 c0                	test   al,al
10000a58:	74 04                	je     10000a5e <Floppy::lock()+0x50>
10000a5a:	b0 00                	mov    al,0x0
10000a5c:	eb 02                	jmp    10000a60 <Floppy::lock()+0x52>
10000a5e:	b0 01                	mov    al,0x1
10000a60:	c9                   	leave  
10000a61:	c3                   	ret    

10000a62 <Floppy::waitIRQ(int)>:
10000a62:	55                   	push   ebp
10000a63:	89 e5                	mov    ebp,esp
10000a65:	83 ec 18             	sub    esp,0x18
10000a68:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000a6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a72:	8a 80 68 01 00 00    	mov    al,BYTE PTR [eax+0x168]
10000a78:	84 c0                	test   al,al
10000a7a:	75 21                	jne    10000a9d <Floppy::waitIRQ(int)+0x3b>
10000a7c:	83 ec 08             	sub    esp,0x8
10000a7f:	6a 00                	push   0x0
10000a81:	68 80 f0 fa 02       	push   0x2faf080
10000a86:	e8 fc ff ff ff       	call   10000a87 <Floppy::waitIRQ(int)+0x25>	10000a87: R_386_PC32	nanoSleep(unsigned long long)
10000a8b:	83 c4 10             	add    esp,0x10
10000a8e:	83 45 f4 32          	add    DWORD PTR [ebp-0xc],0x32
10000a92:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000a95:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
10000a98:	7d 02                	jge    10000a9c <Floppy::waitIRQ(int)+0x3a>
10000a9a:	eb d3                	jmp    10000a6f <Floppy::waitIRQ(int)+0xd>
10000a9c:	90                   	nop
10000a9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000aa0:	8a 80 68 01 00 00    	mov    al,BYTE PTR [eax+0x168]
10000aa6:	c9                   	leave  
10000aa7:	c3                   	ret    

10000aa8 <Floppy::reset()>:
10000aa8:	55                   	push   ebp
10000aa9:	89 e5                	mov    ebp,esp
10000aab:	83 ec 28             	sub    esp,0x28
10000aae:	83 ec 0c             	sub    esp,0xc
10000ab1:	68 28 52 00 10       	push   0x10005228	10000ab2: R_386_32	.text
10000ab6:	e8 fc ff ff ff       	call   10000ab7 <Floppy::reset()+0xf>	10000ab7: R_386_PC32	Dbg::kprintf(char const*, ...)
10000abb:	83 c4 10             	add    esp,0x10
10000abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ac1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10000ac8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000acb:	c7 80 94 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x194],0xffffffff
10000ad5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ad8:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000adf:	83 ec 08             	sub    esp,0x8
10000ae2:	6a 02                	push   0x2
10000ae4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ae7:	e8 fc ff ff ff       	call   10000ae8 <Floppy::reset()+0x40>	10000ae8: R_386_PC32	Floppy::readPort(FloppyReg)
10000aec:	83 c4 10             	add    esp,0x10
10000aef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000af2:	83 ec 04             	sub    esp,0x4
10000af5:	6a 00                	push   0x0
10000af7:	6a 02                	push   0x2
10000af9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000afc:	e8 fc ff ff ff       	call   10000afd <Floppy::reset()+0x55>	10000afd: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000b01:	83 c4 10             	add    esp,0x10
10000b04:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000b07:	83 c8 0c             	or     eax,0xc
10000b0a:	0f b6 c0             	movzx  eax,al
10000b0d:	83 ec 04             	sub    esp,0x4
10000b10:	50                   	push   eax
10000b11:	6a 02                	push   0x2
10000b13:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b16:	e8 fc ff ff ff       	call   10000b17 <Floppy::reset()+0x6f>	10000b17: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000b1b:	83 c4 10             	add    esp,0x10
10000b1e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
10000b22:	83 e0 08             	and    eax,0x8
10000b25:	85 c0                	test   eax,eax
10000b27:	74 3f                	je     10000b68 <Floppy::reset()+0xc0>
10000b29:	83 ec 08             	sub    esp,0x8
10000b2c:	68 90 01 00 00       	push   0x190
10000b31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b34:	e8 fc ff ff ff       	call   10000b35 <Floppy::reset()+0x8d>	10000b35: R_386_PC32	Floppy::waitIRQ(int)
10000b39:	83 c4 10             	add    esp,0x10
10000b3c:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10000b3f:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
10000b42:	83 f0 01             	xor    eax,0x1
10000b45:	84 c0                	test   al,al
10000b47:	74 3e                	je     10000b87 <Floppy::reset()+0xdf>
10000b49:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000b4c:	83 c8 0c             	or     eax,0xc
10000b4f:	0f b6 c0             	movzx  eax,al
10000b52:	83 ec 04             	sub    esp,0x4
10000b55:	50                   	push   eax
10000b56:	6a 02                	push   0x2
10000b58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b5b:	e8 fc ff ff ff       	call   10000b5c <Floppy::reset()+0xb4>	10000b5c: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000b60:	83 c4 10             	add    esp,0x10
10000b63:	e9 56 ff ff ff       	jmp    10000abe <Floppy::reset()+0x16>
10000b68:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000b6b:	83 c8 0c             	or     eax,0xc
10000b6e:	0f b6 c0             	movzx  eax,al
10000b71:	83 ec 04             	sub    esp,0x4
10000b74:	50                   	push   eax
10000b75:	6a 02                	push   0x2
10000b77:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b7a:	e8 fc ff ff ff       	call   10000b7b <Floppy::reset()+0xd3>	10000b7b: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000b7f:	83 c4 10             	add    esp,0x10
10000b82:	e9 37 ff ff ff       	jmp    10000abe <Floppy::reset()+0x16>
10000b87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b8a:	8a 80 91 01 00 00    	mov    al,BYTE PTR [eax+0x191]
10000b90:	84 c0                	test   al,al
10000b92:	0f 84 8f 00 00 00    	je     10000c27 <Floppy::reset()+0x17f>
10000b98:	83 ec 04             	sub    esp,0x4
10000b9b:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000b9e:	50                   	push   eax
10000b9f:	8d 45 e8             	lea    eax,[ebp-0x18]
10000ba2:	50                   	push   eax
10000ba3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ba6:	e8 fc ff ff ff       	call   10000ba7 <Floppy::reset()+0xff>	10000ba7: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000bab:	83 c4 10             	add    esp,0x10
10000bae:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000bb1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000bb5:	74 19                	je     10000bd0 <Floppy::reset()+0x128>
10000bb7:	83 ec 04             	sub    esp,0x4
10000bba:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000bbd:	50                   	push   eax
10000bbe:	8d 45 e8             	lea    eax,[ebp-0x18]
10000bc1:	50                   	push   eax
10000bc2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bc5:	e8 fc ff ff ff       	call   10000bc6 <Floppy::reset()+0x11e>	10000bc6: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000bca:	83 c4 10             	add    esp,0x10
10000bcd:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000bd0:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000bd4:	74 19                	je     10000bef <Floppy::reset()+0x147>
10000bd6:	83 ec 04             	sub    esp,0x4
10000bd9:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000bdc:	50                   	push   eax
10000bdd:	8d 45 e8             	lea    eax,[ebp-0x18]
10000be0:	50                   	push   eax
10000be1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000be4:	e8 fc ff ff ff       	call   10000be5 <Floppy::reset()+0x13d>	10000be5: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000be9:	83 c4 10             	add    esp,0x10
10000bec:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000bef:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000bf3:	74 19                	je     10000c0e <Floppy::reset()+0x166>
10000bf5:	83 ec 04             	sub    esp,0x4
10000bf8:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000bfb:	50                   	push   eax
10000bfc:	8d 45 e8             	lea    eax,[ebp-0x18]
10000bff:	50                   	push   eax
10000c00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c03:	e8 fc ff ff ff       	call   10000c04 <Floppy::reset()+0x15c>	10000c04: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000c08:	83 c4 10             	add    esp,0x10
10000c0b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c0e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000c11:	83 f0 01             	xor    eax,0x1
10000c14:	84 c0                	test   al,al
10000c16:	74 0f                	je     10000c27 <Floppy::reset()+0x17f>
10000c18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c1b:	c6 80 91 01 00 00 00 	mov    BYTE PTR [eax+0x191],0x0
10000c22:	e9 97 fe ff ff       	jmp    10000abe <Floppy::reset()+0x16>
10000c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c2a:	8a 80 8c 01 00 00    	mov    al,BYTE PTR [eax+0x18c]
10000c30:	84 c0                	test   al,al
10000c32:	75 14                	jne    10000c48 <Floppy::reset()+0x1a0>
10000c34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c37:	8a 80 8d 01 00 00    	mov    al,BYTE PTR [eax+0x18d]
10000c3d:	83 f0 01             	xor    eax,0x1
10000c40:	84 c0                	test   al,al
10000c42:	0f 84 91 00 00 00    	je     10000cd9 <Floppy::reset()+0x231>
10000c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c4b:	8a 80 90 01 00 00    	mov    al,BYTE PTR [eax+0x190]
10000c51:	84 c0                	test   al,al
10000c53:	74 3c                	je     10000c91 <Floppy::reset()+0x1e9>
10000c55:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000c5c:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
10000c60:	7f 2f                	jg     10000c91 <Floppy::reset()+0x1e9>
10000c62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c65:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000c68:	83 c2 68             	add    edx,0x68
10000c6b:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000c6f:	85 c0                	test   eax,eax
10000c71:	74 19                	je     10000c8c <Floppy::reset()+0x1e4>
10000c73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c76:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000c79:	83 c2 68             	add    edx,0x68
10000c7c:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000c80:	83 ec 0c             	sub    esp,0xc
10000c83:	50                   	push   eax
10000c84:	e8 fc ff ff ff       	call   10000c85 <Floppy::reset()+0x1dd>	10000c85: R_386_PC32	FloppyDrive::floppyConfigure()
10000c89:	83 c4 10             	add    esp,0x10
10000c8c:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10000c8f:	eb cb                	jmp    10000c5c <Floppy::reset()+0x1b4>
10000c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c94:	8a 80 8d 01 00 00    	mov    al,BYTE PTR [eax+0x18d]
10000c9a:	83 f0 01             	xor    eax,0x1
10000c9d:	84 c0                	test   al,al
10000c9f:	74 38                	je     10000cd9 <Floppy::reset()+0x231>
10000ca1:	83 ec 0c             	sub    esp,0xc
10000ca4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ca7:	e8 fc ff ff ff       	call   10000ca8 <Floppy::reset()+0x200>	10000ca8: R_386_PC32	Floppy::lock()
10000cac:	83 c4 10             	add    esp,0x10
10000caf:	83 f0 01             	xor    eax,0x1
10000cb2:	88 c2                	mov    dl,al
10000cb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cb7:	88 90 8c 01 00 00    	mov    BYTE PTR [eax+0x18c],dl
10000cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cc0:	c6 80 8d 01 00 00 01 	mov    BYTE PTR [eax+0x18d],0x1
10000cc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cca:	8a 80 8c 01 00 00    	mov    al,BYTE PTR [eax+0x18c]
10000cd0:	84 c0                	test   al,al
10000cd2:	74 05                	je     10000cd9 <Floppy::reset()+0x231>
10000cd4:	e9 e5 fd ff ff       	jmp    10000abe <Floppy::reset()+0x16>
10000cd9:	90                   	nop
10000cda:	c9                   	leave  
10000cdb:	c3                   	ret    

10000cdc <Floppy::dmaInit(bool)>:
10000cdc:	55                   	push   ebp
10000cdd:	89 e5                	mov    ebp,esp
10000cdf:	83 ec 18             	sub    esp,0x18
10000ce2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000ce5:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10000ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ceb:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000cf1:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
10000cf5:	74 07                	je     10000cfe <Floppy::dmaInit(bool)+0x22>
10000cf7:	ba 4a 00 00 00       	mov    edx,0x4a
10000cfc:	eb 05                	jmp    10000d03 <Floppy::dmaInit(bool)+0x27>
10000cfe:	ba 46 00 00 00       	mov    edx,0x46
10000d03:	83 ec 08             	sub    esp,0x8
10000d06:	52                   	push   edx
10000d07:	50                   	push   eax
10000d08:	e8 fc ff ff ff       	call   10000d09 <Floppy::dmaInit(bool)+0x2d>	10000d09: R_386_PC32	DMAChannel::setMode(unsigned char)
10000d0d:	83 c4 10             	add    esp,0x10
10000d10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d13:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000d19:	83 ec 0c             	sub    esp,0xc
10000d1c:	50                   	push   eax
10000d1d:	e8 fc ff ff ff       	call   10000d1e <Floppy::dmaInit(bool)+0x42>	10000d1e: R_386_PC32	DMAChannel::start()
10000d22:	83 c4 10             	add    esp,0x10
10000d25:	90                   	nop
10000d26:	c9                   	leave  
10000d27:	c3                   	ret    

10000d28 <Floppy::specify(int)>:
10000d28:	55                   	push   ebp
10000d29:	89 e5                	mov    ebp,esp
10000d2b:	57                   	push   edi
10000d2c:	56                   	push   esi
10000d2d:	53                   	push   ebx
10000d2e:	83 ec 3c             	sub    esp,0x3c
10000d31:	8d 45 c0             	lea    eax,[ebp-0x40]
10000d34:	bb 54 52 00 10       	mov    ebx,0x10005254	10000d35: R_386_32	.text
10000d39:	ba 04 00 00 00       	mov    edx,0x4
10000d3e:	89 c7                	mov    edi,eax
10000d40:	89 de                	mov    esi,ebx
10000d42:	89 d1                	mov    ecx,edx
10000d44:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d49:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000d4c:	83 c2 64             	add    edx,0x64
10000d4f:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10000d53:	89 d0                	mov    eax,edx
10000d55:	c1 e0 02             	shl    eax,0x2
10000d58:	01 d0                	add    eax,edx
10000d5a:	c1 e0 02             	shl    eax,0x2
10000d5d:	01 d0                	add    eax,edx
10000d5f:	05 10 00 00 00       	add    eax,0x10	10000d60: R_386_32	floppyTable
10000d64:	8a 00                	mov    al,BYTE PTR [eax]
10000d66:	0f be c0             	movsx  eax,al
10000d69:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000d6c:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10000d70:	75 10                	jne    10000d82 <Floppy::specify(int)+0x5a>
10000d72:	83 ec 0c             	sub    esp,0xc
10000d75:	68 3e 52 00 10       	push   0x1000523e	10000d76: R_386_32	.text
10000d7a:	e8 fc ff ff ff       	call   10000d7b <Floppy::specify(int)+0x53>	10000d7b: R_386_PC32	Krnl::panic(char const*)
10000d7f:	83 c4 10             	add    esp,0x10
10000d82:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000d85:	8b 44 85 c0          	mov    eax,DWORD PTR [ebp+eax*4-0x40]
10000d89:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000d8c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000d8f:	89 c2                	mov    edx,eax
10000d91:	c1 e0 03             	shl    eax,0x3
10000d94:	89 d1                	mov    ecx,edx
10000d96:	29 c1                	sub    ecx,eax
10000d98:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000d9d:	f7 e9                	imul   ecx
10000d9f:	c1 fa 11             	sar    edx,0x11
10000da2:	89 c8                	mov    eax,ecx
10000da4:	c1 f8 1f             	sar    eax,0x1f
10000da7:	29 c2                	sub    edx,eax
10000da9:	89 d0                	mov    eax,edx
10000dab:	83 c0 10             	add    eax,0x10
10000dae:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000db1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10000db4:	89 d0                	mov    eax,edx
10000db6:	01 c0                	add    eax,eax
10000db8:	01 d0                	add    eax,edx
10000dba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10000dc1:	01 d0                	add    eax,edx
10000dc3:	01 c0                	add    eax,eax
10000dc5:	89 c1                	mov    ecx,eax
10000dc7:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000dcc:	f7 e9                	imul   ecx
10000dce:	c1 fa 12             	sar    edx,0x12
10000dd1:	89 c8                	mov    eax,ecx
10000dd3:	c1 f8 1f             	sar    eax,0x1f
10000dd6:	29 c2                	sub    edx,eax
10000dd8:	89 d0                	mov    eax,edx
10000dda:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000ddd:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10000de4:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10000deb:	83 ec 08             	sub    esp,0x8
10000dee:	6a 03                	push   0x3
10000df0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000df3:	e8 fc ff ff ff       	call   10000df4 <Floppy::specify(int)+0xcc>	10000df4: R_386_PC32	Floppy::writeCommand(unsigned char)
10000df8:	83 c4 10             	add    esp,0x10
10000dfb:	83 ec 0c             	sub    esp,0xc
10000dfe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e01:	e8 fc ff ff ff       	call   10000e02 <Floppy::specify(int)+0xda>	10000e02: R_386_PC32	Floppy::wasFailure()
10000e06:	83 c4 10             	add    esp,0x10
10000e09:	84 c0                	test   al,al
10000e0b:	74 04                	je     10000e11 <Floppy::specify(int)+0xe9>
10000e0d:	b0 00                	mov    al,0x0
10000e0f:	eb 6b                	jmp    10000e7c <Floppy::specify(int)+0x154>
10000e11:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e14:	c1 e0 04             	shl    eax,0x4
10000e17:	88 c2                	mov    dl,al
10000e19:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000e1c:	09 d0                	or     eax,edx
10000e1e:	0f b6 c0             	movzx  eax,al
10000e21:	83 ec 08             	sub    esp,0x8
10000e24:	50                   	push   eax
10000e25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e28:	e8 fc ff ff ff       	call   10000e29 <Floppy::specify(int)+0x101>	10000e29: R_386_PC32	Floppy::writeCommand(unsigned char)
10000e2d:	83 c4 10             	add    esp,0x10
10000e30:	83 ec 0c             	sub    esp,0xc
10000e33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e36:	e8 fc ff ff ff       	call   10000e37 <Floppy::specify(int)+0x10f>	10000e37: R_386_PC32	Floppy::wasFailure()
10000e3b:	83 c4 10             	add    esp,0x10
10000e3e:	84 c0                	test   al,al
10000e40:	74 04                	je     10000e46 <Floppy::specify(int)+0x11e>
10000e42:	b0 00                	mov    al,0x0
10000e44:	eb 36                	jmp    10000e7c <Floppy::specify(int)+0x154>
10000e46:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000e49:	01 c0                	add    eax,eax
10000e4b:	88 c2                	mov    dl,al
10000e4d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000e50:	09 d0                	or     eax,edx
10000e52:	0f b6 c0             	movzx  eax,al
10000e55:	83 ec 08             	sub    esp,0x8
10000e58:	50                   	push   eax
10000e59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e5c:	e8 fc ff ff ff       	call   10000e5d <Floppy::specify(int)+0x135>	10000e5d: R_386_PC32	Floppy::writeCommand(unsigned char)
10000e61:	83 c4 10             	add    esp,0x10
10000e64:	83 ec 0c             	sub    esp,0xc
10000e67:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e6a:	e8 fc ff ff ff       	call   10000e6b <Floppy::specify(int)+0x143>	10000e6b: R_386_PC32	Floppy::wasFailure()
10000e6f:	83 c4 10             	add    esp,0x10
10000e72:	84 c0                	test   al,al
10000e74:	74 04                	je     10000e7a <Floppy::specify(int)+0x152>
10000e76:	b0 00                	mov    al,0x0
10000e78:	eb 02                	jmp    10000e7c <Floppy::specify(int)+0x154>
10000e7a:	b0 01                	mov    al,0x1
10000e7c:	8d 65 f4             	lea    esp,[ebp-0xc]
10000e7f:	5b                   	pop    ebx
10000e80:	5e                   	pop    esi
10000e81:	5f                   	pop    edi
10000e82:	5d                   	pop    ebp
10000e83:	c3                   	ret    

10000e84 <Floppy::select(int, bool)>:
10000e84:	55                   	push   ebp
10000e85:	89 e5                	mov    ebp,esp
10000e87:	83 ec 28             	sub    esp,0x28
10000e8a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000e8d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000e90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e93:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000e99:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000e9c:	75 27                	jne    10000ec5 <Floppy::select(int, bool)+0x41>
10000e9e:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
10000ea1:	83 f0 01             	xor    eax,0x1
10000ea4:	84 c0                	test   al,al
10000ea6:	74 1d                	je     10000ec5 <Floppy::select(int, bool)+0x41>
10000ea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000eab:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000eb1:	83 f8 ff             	cmp    eax,0xffffffff
10000eb4:	74 0f                	je     10000ec5 <Floppy::select(int, bool)+0x41>
10000eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000eb9:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000ec0:	e9 1f 02 00 00       	jmp    100010e4 <Floppy::select(int, bool)+0x260>
10000ec5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ec8:	8a 80 92 01 00 00    	mov    al,BYTE PTR [eax+0x192]
10000ece:	83 f0 01             	xor    eax,0x1
10000ed1:	84 c0                	test   al,al
10000ed3:	75 12                	jne    10000ee7 <Floppy::select(int, bool)+0x63>
10000ed5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ed8:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000ede:	83 f8 ff             	cmp    eax,0xffffffff
10000ee1:	0f 85 fd 01 00 00    	jne    100010e4 <Floppy::select(int, bool)+0x260>
10000ee7:	83 ec 08             	sub    esp,0x8
10000eea:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000eed:	68 64 52 00 10       	push   0x10005264	10000eee: R_386_32	.text
10000ef2:	e8 fc ff ff ff       	call   10000ef3 <Floppy::select(int, bool)+0x6f>	10000ef3: R_386_PC32	Dbg::kprintf(char const*, ...)
10000ef7:	83 c4 10             	add    esp,0x10
10000efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000efd:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000f03:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000f06:	0f 84 a0 01 00 00    	je     100010ac <Floppy::select(int, bool)+0x228>
10000f0c:	83 ec 0c             	sub    esp,0xc
10000f0f:	68 74 52 00 10       	push   0x10005274	10000f10: R_386_32	.text
10000f14:	e8 fc ff ff ff       	call   10000f15 <Floppy::select(int, bool)+0x91>	10000f15: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f19:	83 c4 10             	add    esp,0x10
10000f1c:	e8 fc ff ff ff       	call   10000f1d <Floppy::select(int, bool)+0x99>	10000f1d: R_386_PC32	lockScheduler()
10000f21:	83 ec 0c             	sub    esp,0xc
10000f24:	68 81 52 00 10       	push   0x10005281	10000f25: R_386_32	.text
10000f29:	e8 fc ff ff ff       	call   10000f2a <Floppy::select(int, bool)+0xa6>	10000f2a: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f2e:	83 c4 10             	add    esp,0x10
10000f31:	83 ec 08             	sub    esp,0x8
10000f34:	6a 02                	push   0x2
10000f36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f39:	e8 fc ff ff ff       	call   10000f3a <Floppy::select(int, bool)+0xb6>	10000f3a: R_386_PC32	Floppy::readPort(FloppyReg)
10000f3e:	83 c4 10             	add    esp,0x10
10000f41:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000f44:	80 65 f7 fc          	and    BYTE PTR [ebp-0x9],0xfc
10000f48:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000f4b:	88 c2                	mov    dl,al
10000f4d:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000f50:	09 d0                	or     eax,edx
10000f52:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000f55:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000f59:	83 ec 04             	sub    esp,0x4
10000f5c:	50                   	push   eax
10000f5d:	6a 02                	push   0x2
10000f5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f62:	e8 fc ff ff ff       	call   10000f63 <Floppy::select(int, bool)+0xdf>	10000f63: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000f67:	83 c4 10             	add    esp,0x10
10000f6a:	83 ec 08             	sub    esp,0x8
10000f6d:	6a 00                	push   0x0
10000f6f:	68 00 b4 c4 04       	push   0x4c4b400
10000f74:	e8 fc ff ff ff       	call   10000f75 <Floppy::select(int, bool)+0xf1>	10000f75: R_386_PC32	nanoSleep(unsigned long long)
10000f79:	83 c4 10             	add    esp,0x10
10000f7c:	83 ec 0c             	sub    esp,0xc
10000f7f:	68 8e 52 00 10       	push   0x1000528e	10000f80: R_386_32	.text
10000f84:	e8 fc ff ff ff       	call   10000f85 <Floppy::select(int, bool)+0x101>	10000f85: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f89:	83 c4 10             	add    esp,0x10
10000f8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f8f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000f92:	83 c2 64             	add    edx,0x64
10000f95:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10000f99:	89 d0                	mov    eax,edx
10000f9b:	c1 e0 02             	shl    eax,0x2
10000f9e:	01 d0                	add    eax,edx
10000fa0:	c1 e0 02             	shl    eax,0x2
10000fa3:	01 d0                	add    eax,edx
10000fa5:	05 10 00 00 00       	add    eax,0x10	10000fa6: R_386_32	floppyTable
10000faa:	8a 00                	mov    al,BYTE PTR [eax]
10000fac:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
10000faf:	80 7d f6 ff          	cmp    BYTE PTR [ebp-0xa],0xff
10000fb3:	75 10                	jne    10000fc5 <Floppy::select(int, bool)+0x141>
10000fb5:	83 ec 0c             	sub    esp,0xc
10000fb8:	68 9c 52 00 10       	push   0x1000529c	10000fb9: R_386_32	.text
10000fbd:	e8 fc ff ff ff       	call   10000fbe <Floppy::select(int, bool)+0x13a>	10000fbe: R_386_PC32	Krnl::panic(char const*)
10000fc2:	83 c4 10             	add    esp,0x10
10000fc5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
10000fc8:	0f b6 c0             	movzx  eax,al
10000fcb:	83 ec 04             	sub    esp,0x4
10000fce:	50                   	push   eax
10000fcf:	6a 07                	push   0x7
10000fd1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000fd4:	e8 fc ff ff ff       	call   10000fd5 <Floppy::select(int, bool)+0x151>	10000fd5: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000fd9:	83 c4 10             	add    esp,0x10
10000fdc:	e8 fc ff ff ff       	call   10000fdd <Floppy::select(int, bool)+0x159>	10000fdd: R_386_PC32	unlockScheduler()
10000fe1:	83 ec 0c             	sub    esp,0xc
10000fe4:	68 cb 52 00 10       	push   0x100052cb	10000fe5: R_386_32	.text
10000fe9:	e8 fc ff ff ff       	call   10000fea <Floppy::select(int, bool)+0x166>	10000fea: R_386_PC32	Dbg::kprintf(char const*, ...)
10000fee:	83 c4 10             	add    esp,0x10
10000ff1:	83 ec 08             	sub    esp,0x8
10000ff4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000ff7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ffa:	e8 fc ff ff ff       	call   10000ffb <Floppy::select(int, bool)+0x177>	10000ffb: R_386_PC32	Floppy::specify(int)
10000fff:	83 c4 10             	add    esp,0x10
10001002:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10001005:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10001008:	83 f0 01             	xor    eax,0x1
1000100b:	84 c0                	test   al,al
1000100d:	74 25                	je     10001034 <Floppy::select(int, bool)+0x1b0>
1000100f:	83 ec 0c             	sub    esp,0xc
10001012:	68 d8 52 00 10       	push   0x100052d8	10001013: R_386_32	.text
10001017:	e8 fc ff ff ff       	call   10001018 <Floppy::select(int, bool)+0x194>	10001018: R_386_PC32	Dbg::kprintf(char const*, ...)
1000101c:	83 c4 10             	add    esp,0x10
1000101f:	83 ec 0c             	sub    esp,0xc
10001022:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001025:	e8 fc ff ff ff       	call   10001026 <Floppy::select(int, bool)+0x1a2>	10001026: R_386_PC32	Floppy::reset()
1000102a:	83 c4 10             	add    esp,0x10
1000102d:	b0 00                	mov    al,0x0
1000102f:	e9 d2 00 00 00       	jmp    10001106 <Floppy::select(int, bool)+0x282>
10001034:	83 ec 0c             	sub    esp,0xc
10001037:	68 e9 52 00 10       	push   0x100052e9	10001038: R_386_32	.text
1000103c:	e8 fc ff ff ff       	call   1000103d <Floppy::select(int, bool)+0x1b9>	1000103d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001041:	83 c4 10             	add    esp,0x10
10001044:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001047:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000104a:	83 c2 68             	add    edx,0x68
1000104d:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10001051:	83 ec 0c             	sub    esp,0xc
10001054:	50                   	push   eax
10001055:	e8 fc ff ff ff       	call   10001056 <Floppy::select(int, bool)+0x1d2>	10001056: R_386_PC32	FloppyDrive::calibrate()
1000105a:	83 c4 10             	add    esp,0x10
1000105d:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10001060:	83 ec 0c             	sub    esp,0xc
10001063:	68 f6 52 00 10       	push   0x100052f6	10001064: R_386_32	.text
10001068:	e8 fc ff ff ff       	call   10001069 <Floppy::select(int, bool)+0x1e5>	10001069: R_386_PC32	Dbg::kprintf(char const*, ...)
1000106d:	83 c4 10             	add    esp,0x10
10001070:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10001073:	83 f0 01             	xor    eax,0x1
10001076:	84 c0                	test   al,al
10001078:	74 22                	je     1000109c <Floppy::select(int, bool)+0x218>
1000107a:	83 ec 0c             	sub    esp,0xc
1000107d:	68 04 53 00 10       	push   0x10005304	1000107e: R_386_32	.text
10001082:	e8 fc ff ff ff       	call   10001083 <Floppy::select(int, bool)+0x1ff>	10001083: R_386_PC32	Dbg::kprintf(char const*, ...)
10001087:	83 c4 10             	add    esp,0x10
1000108a:	83 ec 0c             	sub    esp,0xc
1000108d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001090:	e8 fc ff ff ff       	call   10001091 <Floppy::select(int, bool)+0x20d>	10001091: R_386_PC32	Floppy::reset()
10001095:	83 c4 10             	add    esp,0x10
10001098:	b0 00                	mov    al,0x0
1000109a:	eb 6a                	jmp    10001106 <Floppy::select(int, bool)+0x282>
1000109c:	83 ec 0c             	sub    esp,0xc
1000109f:	68 16 53 00 10       	push   0x10005316	100010a0: R_386_32	.text
100010a4:	e8 fc ff ff ff       	call   100010a5 <Floppy::select(int, bool)+0x221>	100010a5: R_386_PC32	Dbg::kprintf(char const*, ...)
100010a9:	83 c4 10             	add    esp,0x10
100010ac:	83 ec 0c             	sub    esp,0xc
100010af:	68 23 53 00 10       	push   0x10005323	100010b0: R_386_32	.text
100010b4:	e8 fc ff ff ff       	call   100010b5 <Floppy::select(int, bool)+0x231>	100010b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100010b9:	83 c4 10             	add    esp,0x10
100010bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010bf:	8a 55 e4             	mov    dl,BYTE PTR [ebp-0x1c]
100010c2:	88 90 92 01 00 00    	mov    BYTE PTR [eax+0x192],dl
100010c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010cb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100010ce:	89 90 94 01 00 00    	mov    DWORD PTR [eax+0x194],edx
100010d4:	83 ec 0c             	sub    esp,0xc
100010d7:	68 30 53 00 10       	push   0x10005330	100010d8: R_386_32	.text
100010dc:	e8 fc ff ff ff       	call   100010dd <Floppy::select(int, bool)+0x259>	100010dd: R_386_PC32	Dbg::kprintf(char const*, ...)
100010e1:	83 c4 10             	add    esp,0x10
100010e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010e7:	8a 80 92 01 00 00    	mov    al,BYTE PTR [eax+0x192]
100010ed:	84 c0                	test   al,al
100010ef:	74 12                	je     10001103 <Floppy::select(int, bool)+0x27f>
100010f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010f4:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
100010fa:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
100010fd:	75 04                	jne    10001103 <Floppy::select(int, bool)+0x27f>
100010ff:	b0 01                	mov    al,0x1
10001101:	eb 02                	jmp    10001105 <Floppy::select(int, bool)+0x281>
10001103:	b0 00                	mov    al,0x0
10001105:	90                   	nop
10001106:	c9                   	leave  
10001107:	c3                   	ret    

10001108 <Floppy::motor(int, bool)>:
10001108:	55                   	push   ebp
10001109:	89 e5                	mov    ebp,esp
1000110b:	53                   	push   ebx
1000110c:	83 ec 24             	sub    esp,0x24
1000110f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001112:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10001115:	83 ec 0c             	sub    esp,0xc
10001118:	68 3d 53 00 10       	push   0x1000533d	10001119: R_386_32	.text
1000111d:	e8 fc ff ff ff       	call   1000111e <Floppy::motor(int, bool)+0x16>	1000111e: R_386_PC32	Dbg::kprintf(char const*, ...)
10001122:	83 c4 10             	add    esp,0x10
10001125:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10001129:	83 ec 04             	sub    esp,0x4
1000112c:	50                   	push   eax
1000112d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001130:	68 4c 53 00 10       	push   0x1000534c	10001131: R_386_32	.text
10001135:	e8 fc ff ff ff       	call   10001136 <Floppy::motor(int, bool)+0x2e>	10001136: R_386_PC32	Dbg::kprintf(char const*, ...)
1000113a:	83 c4 10             	add    esp,0x10
1000113d:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
10001141:	0f 84 68 01 00 00    	je     100012af <Floppy::motor(int, bool)+0x1a7>
10001147:	83 ec 0c             	sub    esp,0xc
1000114a:	68 62 53 00 10       	push   0x10005362	1000114b: R_386_32	.text
1000114f:	e8 fc ff ff ff       	call   10001150 <Floppy::motor(int, bool)+0x48>	10001150: R_386_PC32	Dbg::kprintf(char const*, ...)
10001154:	83 c4 10             	add    esp,0x10
10001157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000115a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000115d:	83 c2 58             	add    edx,0x58
10001160:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10001164:	85 c0                	test   eax,eax
10001166:	0f 85 0e 01 00 00    	jne    1000127a <Floppy::motor(int, bool)+0x172>
1000116c:	83 ec 0c             	sub    esp,0xc
1000116f:	68 6a 53 00 10       	push   0x1000536a	10001170: R_386_32	.text
10001174:	e8 fc ff ff ff       	call   10001175 <Floppy::motor(int, bool)+0x6d>	10001175: R_386_PC32	Dbg::kprintf(char const*, ...)
10001179:	83 c4 10             	add    esp,0x10
1000117c:	e8 fc ff ff ff       	call   1000117d <Floppy::motor(int, bool)+0x75>	1000117d: R_386_PC32	lockScheduler()
10001181:	83 ec 08             	sub    esp,0x8
10001184:	6a 02                	push   0x2
10001186:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001189:	e8 fc ff ff ff       	call   1000118a <Floppy::motor(int, bool)+0x82>	1000118a: R_386_PC32	Floppy::readPort(FloppyReg)
1000118e:	83 c4 10             	add    esp,0x10
10001191:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10001194:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10001198:	83 ec 08             	sub    esp,0x8
1000119b:	50                   	push   eax
1000119c:	68 7f 53 00 10       	push   0x1000537f	1000119d: R_386_32	.text
100011a1:	e8 fc ff ff ff       	call   100011a2 <Floppy::motor(int, bool)+0x9a>	100011a2: R_386_PC32	Dbg::kprintf(char const*, ...)
100011a6:	83 c4 10             	add    esp,0x10
100011a9:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
100011ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100011b0:	bb 10 00 00 00       	mov    ebx,0x10
100011b5:	88 c1                	mov    cl,al
100011b7:	d3 e3                	shl    ebx,cl
100011b9:	89 d8                	mov    eax,ebx
100011bb:	09 d0                	or     eax,edx
100011bd:	83 ec 08             	sub    esp,0x8
100011c0:	50                   	push   eax
100011c1:	68 8d 53 00 10       	push   0x1000538d	100011c2: R_386_32	.text
100011c6:	e8 fc ff ff ff       	call   100011c7 <Floppy::motor(int, bool)+0xbf>	100011c7: R_386_PC32	Dbg::kprintf(char const*, ...)
100011cb:	83 c4 10             	add    esp,0x10
100011ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100011d1:	ba 10 00 00 00       	mov    edx,0x10
100011d6:	88 c1                	mov    cl,al
100011d8:	d3 e2                	shl    edx,cl
100011da:	89 d0                	mov    eax,edx
100011dc:	88 c2                	mov    dl,al
100011de:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
100011e1:	09 d0                	or     eax,edx
100011e3:	0f b6 c0             	movzx  eax,al
100011e6:	83 ec 04             	sub    esp,0x4
100011e9:	50                   	push   eax
100011ea:	6a 02                	push   0x2
100011ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011ef:	e8 fc ff ff ff       	call   100011f0 <Floppy::motor(int, bool)+0xe8>	100011f0: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100011f4:	83 c4 10             	add    esp,0x10
100011f7:	e8 fc ff ff ff       	call   100011f8 <Floppy::motor(int, bool)+0xf0>	100011f8: R_386_PC32	unlockScheduler()
100011fc:	83 ec 0c             	sub    esp,0xc
100011ff:	68 9b 53 00 10       	push   0x1000539b	10001200: R_386_32	.text
10001204:	e8 fc ff ff ff       	call   10001205 <Floppy::motor(int, bool)+0xfd>	10001205: R_386_PC32	Dbg::kprintf(char const*, ...)
10001209:	83 c4 10             	add    esp,0x10
1000120c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000120f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001212:	83 c2 64             	add    edx,0x64
10001215:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10001219:	83 f8 04             	cmp    eax,0x4
1000121c:	75 14                	jne    10001232 <Floppy::motor(int, bool)+0x12a>
1000121e:	83 ec 08             	sub    esp,0x8
10001221:	6a 00                	push   0x0
10001223:	68 00 a3 e1 11       	push   0x11e1a300
10001228:	e8 fc ff ff ff       	call   10001229 <Floppy::motor(int, bool)+0x121>	10001229: R_386_PC32	nanoSleep(unsigned long long)
1000122d:	83 c4 10             	add    esp,0x10
10001230:	eb 12                	jmp    10001244 <Floppy::motor(int, bool)+0x13c>
10001232:	83 ec 08             	sub    esp,0x8
10001235:	6a 00                	push   0x0
10001237:	68 00 65 cd 1d       	push   0x1dcd6500
1000123c:	e8 fc ff ff ff       	call   1000123d <Floppy::motor(int, bool)+0x135>	1000123d: R_386_PC32	nanoSleep(unsigned long long)
10001241:	83 c4 10             	add    esp,0x10
10001244:	83 ec 0c             	sub    esp,0xc
10001247:	68 a9 53 00 10       	push   0x100053a9	10001248: R_386_32	.text
1000124c:	e8 fc ff ff ff       	call   1000124d <Floppy::motor(int, bool)+0x145>	1000124d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001251:	83 c4 10             	add    esp,0x10
10001254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001257:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000125a:	83 c2 58             	add    edx,0x58
1000125d:	c7 44 90 0c 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x1
10001265:	83 ec 0c             	sub    esp,0xc
10001268:	68 b9 53 00 10       	push   0x100053b9	10001269: R_386_32	.text
1000126d:	e8 fc ff ff ff       	call   1000126e <Floppy::motor(int, bool)+0x166>	1000126e: R_386_PC32	Dbg::kprintf(char const*, ...)
10001272:	83 c4 10             	add    esp,0x10
10001275:	e9 89 00 00 00       	jmp    10001303 <Floppy::motor(int, bool)+0x1fb>
1000127a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000127d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001280:	83 c2 58             	add    edx,0x58
10001283:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10001287:	83 f8 02             	cmp    eax,0x2
1000128a:	75 77                	jne    10001303 <Floppy::motor(int, bool)+0x1fb>
1000128c:	83 ec 0c             	sub    esp,0xc
1000128f:	68 c9 53 00 10       	push   0x100053c9	10001290: R_386_32	.text
10001294:	e8 fc ff ff ff       	call   10001295 <Floppy::motor(int, bool)+0x18d>	10001295: R_386_PC32	Dbg::kprintf(char const*, ...)
10001299:	83 c4 10             	add    esp,0x10
1000129c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000129f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100012a2:	83 c2 58             	add    edx,0x58
100012a5:	c7 44 90 0c 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x1
100012ad:	eb 54                	jmp    10001303 <Floppy::motor(int, bool)+0x1fb>
100012af:	83 ec 0c             	sub    esp,0xc
100012b2:	68 d9 53 00 10       	push   0x100053d9	100012b3: R_386_32	.text
100012b7:	e8 fc ff ff ff       	call   100012b8 <Floppy::motor(int, bool)+0x1b0>	100012b8: R_386_PC32	Dbg::kprintf(char const*, ...)
100012bc:	83 c4 10             	add    esp,0x10
100012bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012c2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100012c5:	83 c2 58             	add    edx,0x58
100012c8:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100012cc:	83 f8 01             	cmp    eax,0x1
100012cf:	75 32                	jne    10001303 <Floppy::motor(int, bool)+0x1fb>
100012d1:	83 ec 0c             	sub    esp,0xc
100012d4:	68 e9 53 00 10       	push   0x100053e9	100012d5: R_386_32	.text
100012d9:	e8 fc ff ff ff       	call   100012da <Floppy::motor(int, bool)+0x1d2>	100012da: R_386_PC32	Dbg::kprintf(char const*, ...)
100012de:	83 c4 10             	add    esp,0x10
100012e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100012e7:	83 c2 58             	add    edx,0x58
100012ea:	c7 44 90 0c 02 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x2
100012f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012f5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100012f8:	83 c2 5c             	add    edx,0x5c
100012fb:	c7 44 90 0c c4 09 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x9c4
10001303:	83 ec 0c             	sub    esp,0xc
10001306:	68 f9 53 00 10       	push   0x100053f9	10001307: R_386_32	.text
1000130b:	e8 fc ff ff ff       	call   1000130c <Floppy::motor(int, bool)+0x204>	1000130c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001310:	83 c4 10             	add    esp,0x10
10001313:	90                   	nop
10001314:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001317:	c9                   	leave  
10001318:	c3                   	ret    
10001319:	90                   	nop

1000131a <FloppyDrive::FloppyDrive()>:
1000131a:	55                   	push   ebp
1000131b:	89 e5                	mov    ebp,esp
1000131d:	83 ec 08             	sub    esp,0x8
10001320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001323:	83 ec 04             	sub    esp,0x4
10001326:	68 00 02 00 00       	push   0x200
1000132b:	68 0e 54 00 10       	push   0x1000540e	1000132c: R_386_32	.text
10001330:	50                   	push   eax
10001331:	e8 fc ff ff ff       	call   10001332 <FloppyDrive::FloppyDrive()+0x18>	10001332: R_386_PC32	PhysicalDisk::PhysicalDisk(char const*, int)
10001336:	83 c4 10             	add    esp,0x10
10001339:	ba 08 00 00 00       	mov    edx,0x8	1000133a: R_386_32	vtable for FloppyDrive
1000133e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001341:	89 10                	mov    DWORD PTR [eax],edx
10001343:	90                   	nop
10001344:	c9                   	leave  
10001345:	c3                   	ret    

10001346 <FloppyDrive::motorOn()>:
10001346:	55                   	push   ebp
10001347:	89 e5                	mov    ebp,esp
10001349:	83 ec 08             	sub    esp,0x8
1000134c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000134f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001355:	83 ec 08             	sub    esp,0x8
10001358:	50                   	push   eax
10001359:	68 20 54 00 10       	push   0x10005420	1000135a: R_386_32	.text
1000135e:	e8 fc ff ff ff       	call   1000135f <FloppyDrive::motorOn()+0x19>	1000135f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001363:	83 c4 10             	add    esp,0x10
10001366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001369:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000136f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001372:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001378:	83 ec 04             	sub    esp,0x4
1000137b:	6a 01                	push   0x1
1000137d:	52                   	push   edx
1000137e:	50                   	push   eax
1000137f:	e8 fc ff ff ff       	call   10001380 <FloppyDrive::motorOn()+0x3a>	10001380: R_386_PC32	Floppy::motor(int, bool)
10001384:	83 c4 10             	add    esp,0x10
10001387:	90                   	nop
10001388:	c9                   	leave  
10001389:	c3                   	ret    

1000138a <FloppyDrive::motorOff()>:
1000138a:	55                   	push   ebp
1000138b:	89 e5                	mov    ebp,esp
1000138d:	83 ec 08             	sub    esp,0x8
10001390:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001393:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001399:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000139c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100013a2:	83 ec 04             	sub    esp,0x4
100013a5:	6a 00                	push   0x0
100013a7:	52                   	push   edx
100013a8:	50                   	push   eax
100013a9:	e8 fc ff ff ff       	call   100013aa <FloppyDrive::motorOff()+0x20>	100013aa: R_386_PC32	Floppy::motor(int, bool)
100013ae:	83 c4 10             	add    esp,0x10
100013b1:	90                   	nop
100013b2:	c9                   	leave  
100013b3:	c3                   	ret    

100013b4 <FloppyDrive::floppyConfigure()>:
100013b4:	55                   	push   ebp
100013b5:	89 e5                	mov    ebp,esp
100013b7:	83 ec 18             	sub    esp,0x18
100013ba:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
100013be:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
100013c2:	c6 45 f5 01          	mov    BYTE PTR [ebp-0xb],0x1
100013c6:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
100013cd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
100013d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013d7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100013dd:	83 ec 08             	sub    esp,0x8
100013e0:	6a 13                	push   0x13
100013e2:	50                   	push   eax
100013e3:	e8 fc ff ff ff       	call   100013e4 <FloppyDrive::floppyConfigure()+0x30>	100013e4: R_386_PC32	Floppy::writeCommand(unsigned char)
100013e8:	83 c4 10             	add    esp,0x10
100013eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013ee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100013f4:	83 ec 0c             	sub    esp,0xc
100013f7:	50                   	push   eax
100013f8:	e8 fc ff ff ff       	call   100013f9 <FloppyDrive::floppyConfigure()+0x45>	100013f9: R_386_PC32	Floppy::wasFailure()
100013fd:	83 c4 10             	add    esp,0x10
10001400:	84 c0                	test   al,al
10001402:	74 07                	je     1000140b <FloppyDrive::floppyConfigure()+0x57>
10001404:	b0 00                	mov    al,0x0
10001406:	e9 de 00 00 00       	jmp    100014e9 <FloppyDrive::floppyConfigure()+0x135>
1000140b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000140e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001414:	83 ec 08             	sub    esp,0x8
10001417:	6a 00                	push   0x0
10001419:	50                   	push   eax
1000141a:	e8 fc ff ff ff       	call   1000141b <FloppyDrive::floppyConfigure()+0x67>	1000141b: R_386_PC32	Floppy::writeCommand(unsigned char)
1000141f:	83 c4 10             	add    esp,0x10
10001422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001425:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000142b:	83 ec 0c             	sub    esp,0xc
1000142e:	50                   	push   eax
1000142f:	e8 fc ff ff ff       	call   10001430 <FloppyDrive::floppyConfigure()+0x7c>	10001430: R_386_PC32	Floppy::wasFailure()
10001434:	83 c4 10             	add    esp,0x10
10001437:	84 c0                	test   al,al
10001439:	74 07                	je     10001442 <FloppyDrive::floppyConfigure()+0x8e>
1000143b:	b0 00                	mov    al,0x0
1000143d:	e9 a7 00 00 00       	jmp    100014e9 <FloppyDrive::floppyConfigure()+0x135>
10001442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001445:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000144b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
1000144f:	c1 e2 06             	shl    edx,0x6
10001452:	88 d1                	mov    cl,dl
10001454:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
10001458:	c1 e2 05             	shl    edx,0x5
1000145b:	09 d1                	or     ecx,edx
1000145d:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
10001461:	c1 e2 04             	shl    edx,0x4
10001464:	09 d1                	or     ecx,edx
10001466:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10001469:	4a                   	dec    edx
1000146a:	09 ca                	or     edx,ecx
1000146c:	0f b6 d2             	movzx  edx,dl
1000146f:	83 ec 08             	sub    esp,0x8
10001472:	52                   	push   edx
10001473:	50                   	push   eax
10001474:	e8 fc ff ff ff       	call   10001475 <FloppyDrive::floppyConfigure()+0xc1>	10001475: R_386_PC32	Floppy::writeCommand(unsigned char)
10001479:	83 c4 10             	add    esp,0x10
1000147c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000147f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001485:	83 ec 0c             	sub    esp,0xc
10001488:	50                   	push   eax
10001489:	e8 fc ff ff ff       	call   1000148a <FloppyDrive::floppyConfigure()+0xd6>	1000148a: R_386_PC32	Floppy::wasFailure()
1000148e:	83 c4 10             	add    esp,0x10
10001491:	84 c0                	test   al,al
10001493:	74 04                	je     10001499 <FloppyDrive::floppyConfigure()+0xe5>
10001495:	b0 00                	mov    al,0x0
10001497:	eb 50                	jmp    100014e9 <FloppyDrive::floppyConfigure()+0x135>
10001499:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000149c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014a2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100014a5:	0f b6 d2             	movzx  edx,dl
100014a8:	83 ec 08             	sub    esp,0x8
100014ab:	52                   	push   edx
100014ac:	50                   	push   eax
100014ad:	e8 fc ff ff ff       	call   100014ae <FloppyDrive::floppyConfigure()+0xfa>	100014ae: R_386_PC32	Floppy::writeCommand(unsigned char)
100014b2:	83 c4 10             	add    esp,0x10
100014b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014b8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014be:	83 ec 0c             	sub    esp,0xc
100014c1:	50                   	push   eax
100014c2:	e8 fc ff ff ff       	call   100014c3 <FloppyDrive::floppyConfigure()+0x10f>	100014c3: R_386_PC32	Floppy::wasFailure()
100014c7:	83 c4 10             	add    esp,0x10
100014ca:	84 c0                	test   al,al
100014cc:	74 04                	je     100014d2 <FloppyDrive::floppyConfigure()+0x11e>
100014ce:	b0 00                	mov    al,0x0
100014d0:	eb 17                	jmp    100014e9 <FloppyDrive::floppyConfigure()+0x135>
100014d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014d5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014db:	8a 55 f5             	mov    dl,BYTE PTR [ebp-0xb]
100014de:	83 f2 01             	xor    edx,0x1
100014e1:	88 90 91 01 00 00    	mov    BYTE PTR [eax+0x191],dl
100014e7:	b0 01                	mov    al,0x1
100014e9:	c9                   	leave  
100014ea:	c3                   	ret    
100014eb:	90                   	nop

100014ec <FloppyDrive::open(int, int, void*)>:
100014ec:	b8 00 00 00 00       	mov    eax,0x0
100014f1:	c3                   	ret    

100014f2 <FloppyDrive::_open(int, int, void*)>:
100014f2:	55                   	push   ebp
100014f3:	89 e5                	mov    ebp,esp
100014f5:	83 ec 08             	sub    esp,0x8
100014f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014fb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100014fe:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
10001504:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001507:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000150a:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
10001510:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001513:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001519:	83 ec 08             	sub    esp,0x8
1000151c:	50                   	push   eax
1000151d:	68 3f 54 00 10       	push   0x1000543f	1000151e: R_386_32	.text
10001522:	e8 fc ff ff ff       	call   10001523 <FloppyDrive::_open(int, int, void*)+0x31>	10001523: R_386_PC32	Dbg::kprintf(char const*, ...)
10001527:	83 c4 10             	add    esp,0x10
1000152a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000152d:	c7 80 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x15c],0x200
10001537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000153a:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
10001541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001544:	c6 80 69 01 00 00 01 	mov    BYTE PTR [eax+0x169],0x1
1000154b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000154e:	89 d0                	mov    eax,edx
10001550:	c1 e0 02             	shl    eax,0x2
10001553:	01 d0                	add    eax,edx
10001555:	c1 e0 02             	shl    eax,0x2
10001558:	01 d0                	add    eax,edx
1000155a:	05 11 00 00 00       	add    eax,0x11	1000155b: R_386_32	floppyTable
1000155f:	8a 00                	mov    al,BYTE PTR [eax]
10001561:	0f b6 c8             	movzx  ecx,al
10001564:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10001567:	89 d0                	mov    eax,edx
10001569:	c1 e0 02             	shl    eax,0x2
1000156c:	01 d0                	add    eax,edx
1000156e:	c1 e0 02             	shl    eax,0x2
10001571:	01 d0                	add    eax,edx
10001573:	05 13 00 00 00       	add    eax,0x13	10001574: R_386_32	floppyTable
10001578:	8a 00                	mov    al,BYTE PTR [eax]
1000157a:	0f b6 c0             	movzx  eax,al
1000157d:	0f af c8             	imul   ecx,eax
10001580:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10001583:	89 d0                	mov    eax,edx
10001585:	c1 e0 02             	shl    eax,0x2
10001588:	01 d0                	add    eax,edx
1000158a:	c1 e0 02             	shl    eax,0x2
1000158d:	01 d0                	add    eax,edx
1000158f:	05 12 00 00 00       	add    eax,0x12	10001590: R_386_32	floppyTable
10001594:	8a 00                	mov    al,BYTE PTR [eax]
10001596:	0f b6 c0             	movzx  eax,al
10001599:	0f af c1             	imul   eax,ecx
1000159c:	89 c2                	mov    edx,eax
1000159e:	c1 ea 1f             	shr    edx,0x1f
100015a1:	01 d0                	add    eax,edx
100015a3:	d1 f8                	sar    eax,1
100015a5:	99                   	cdq    
100015a6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100015a9:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
100015af:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
100015b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100015b8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
100015be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
100015c4:	83 ec 04             	sub    esp,0x4
100015c7:	52                   	push   edx
100015c8:	50                   	push   eax
100015c9:	68 49 54 00 10       	push   0x10005449	100015ca: R_386_32	.text
100015ce:	e8 fc ff ff ff       	call   100015cf <FloppyDrive::_open(int, int, void*)+0xdd>	100015cf: R_386_PC32	Dbg::kprintf(char const*, ...)
100015d3:	83 c4 10             	add    esp,0x10
100015d6:	83 ec 0c             	sub    esp,0xc
100015d9:	68 5b 54 00 10       	push   0x1000545b	100015da: R_386_32	.text
100015de:	e8 fc ff ff ff       	call   100015df <FloppyDrive::_open(int, int, void*)+0xed>	100015df: R_386_PC32	Dbg::kprintf(char const*, ...)
100015e3:	83 c4 10             	add    esp,0x10
100015e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100015e9:	83 ec 0c             	sub    esp,0xc
100015ec:	50                   	push   eax
100015ed:	e8 fc ff ff ff       	call   100015ee <FloppyDrive::_open(int, int, void*)+0xfc>	100015ee: R_386_PC32	PhysicalDisk::startCache()
100015f2:	83 c4 10             	add    esp,0x10
100015f5:	83 ec 0c             	sub    esp,0xc
100015f8:	68 71 54 00 10       	push   0x10005471	100015f9: R_386_32	.text
100015fd:	e8 fc ff ff ff       	call   100015fe <FloppyDrive::_open(int, int, void*)+0x10c>	100015fe: R_386_PC32	Dbg::kprintf(char const*, ...)
10001602:	83 c4 10             	add    esp,0x10
10001605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001608:	83 ec 0c             	sub    esp,0xc
1000160b:	50                   	push   eax
1000160c:	e8 fc ff ff ff       	call   1000160d <FloppyDrive::_open(int, int, void*)+0x11b>	1000160d: R_386_PC32	createPartitionsForDisk(PhysicalDisk*)
10001611:	83 c4 10             	add    esp,0x10
10001614:	83 ec 0c             	sub    esp,0xc
10001617:	68 87 54 00 10       	push   0x10005487	10001618: R_386_32	.text
1000161c:	e8 fc ff ff ff       	call   1000161d <FloppyDrive::_open(int, int, void*)+0x12b>	1000161d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001621:	83 c4 10             	add    esp,0x10
10001624:	b8 00 00 00 00       	mov    eax,0x0
10001629:	c9                   	leave  
1000162a:	c3                   	ret    
1000162b:	90                   	nop

1000162c <FloppyDrive::close(int, int, void*)>:
1000162c:	b8 00 00 00 00       	mov    eax,0x0
10001631:	c3                   	ret    

10001632 <FloppyDrive::unselect()>:
10001632:	55                   	push   ebp
10001633:	89 e5                	mov    ebp,esp
10001635:	83 ec 08             	sub    esp,0x8
10001638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000163b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001641:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001644:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
1000164a:	83 ec 04             	sub    esp,0x4
1000164d:	6a 00                	push   0x0
1000164f:	52                   	push   edx
10001650:	50                   	push   eax
10001651:	e8 fc ff ff ff       	call   10001652 <FloppyDrive::unselect()+0x20>	10001652: R_386_PC32	Floppy::select(int, bool)
10001656:	83 c4 10             	add    esp,0x10
10001659:	90                   	nop
1000165a:	c9                   	leave  
1000165b:	c3                   	ret    

1000165c <FloppyDrive::select()>:
1000165c:	55                   	push   ebp
1000165d:	89 e5                	mov    ebp,esp
1000165f:	83 ec 18             	sub    esp,0x18
10001662:	83 ec 0c             	sub    esp,0xc
10001665:	68 9d 54 00 10       	push   0x1000549d	10001666: R_386_32	.text
1000166a:	e8 fc ff ff ff       	call   1000166b <FloppyDrive::select()+0xf>	1000166b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000166f:	83 c4 10             	add    esp,0x10
10001672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001675:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000167b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000167e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001684:	83 ec 04             	sub    esp,0x4
10001687:	6a 01                	push   0x1
10001689:	52                   	push   edx
1000168a:	50                   	push   eax
1000168b:	e8 fc ff ff ff       	call   1000168c <FloppyDrive::select()+0x30>	1000168c: R_386_PC32	Floppy::select(int, bool)
10001690:	83 c4 10             	add    esp,0x10
10001693:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10001696:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
1000169a:	75 24                	jne    100016c0 <FloppyDrive::select()+0x64>
1000169c:	83 ec 0c             	sub    esp,0xc
1000169f:	68 b4 54 00 10       	push   0x100054b4	100016a0: R_386_32	.text
100016a4:	e8 fc ff ff ff       	call   100016a5 <FloppyDrive::select()+0x49>	100016a5: R_386_PC32	Dbg::kprintf(char const*, ...)
100016a9:	83 c4 10             	add    esp,0x10
100016ac:	83 ec 08             	sub    esp,0x8
100016af:	6a 00                	push   0x0
100016b1:	68 80 d1 f0 08       	push   0x8f0d180
100016b6:	e8 fc ff ff ff       	call   100016b7 <FloppyDrive::select()+0x5b>	100016b7: R_386_PC32	nanoSleep(unsigned long long)
100016bb:	83 c4 10             	add    esp,0x10
100016be:	eb a2                	jmp    10001662 <FloppyDrive::select()+0x6>
100016c0:	90                   	nop
100016c1:	c9                   	leave  
100016c2:	c3                   	ret    
100016c3:	90                   	nop

100016c4 <FloppyDrive::seek(int, int)>:
100016c4:	55                   	push   ebp
100016c5:	89 e5                	mov    ebp,esp
100016c7:	83 ec 18             	sub    esp,0x18
100016ca:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100016d1:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
100016d5:	7e 33                	jle    1000170a <FloppyDrive::seek(int, int)+0x46>
100016d7:	83 ec 0c             	sub    esp,0xc
100016da:	68 d4 54 00 10       	push   0x100054d4	100016db: R_386_32	.text
100016df:	e8 fc ff ff ff       	call   100016e0 <FloppyDrive::seek(int, int)+0x1c>	100016e0: R_386_PC32	Dbg::kprintf(char const*, ...)
100016e4:	83 c4 10             	add    esp,0x10
100016e7:	83 ec 0c             	sub    esp,0xc
100016ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016ed:	e8 fc ff ff ff       	call   100016ee <FloppyDrive::seek(int, int)+0x2a>	100016ee: R_386_PC32	FloppyDrive::motorOff()
100016f2:	83 c4 10             	add    esp,0x10
100016f5:	83 ec 0c             	sub    esp,0xc
100016f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100016fb:	e8 fc ff ff ff       	call   100016fc <FloppyDrive::seek(int, int)+0x38>	100016fc: R_386_PC32	FloppyDrive::unselect()
10001700:	83 c4 10             	add    esp,0x10
10001703:	b0 00                	mov    al,0x0
10001705:	e9 da 02 00 00       	jmp    100019e4 <FloppyDrive::seek(int, int)+0x320>
1000170a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000170d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001713:	83 ec 08             	sub    esp,0x8
10001716:	50                   	push   eax
10001717:	68 fb 54 00 10       	push   0x100054fb	10001718: R_386_32	.text
1000171c:	e8 fc ff ff ff       	call   1000171d <FloppyDrive::seek(int, int)+0x59>	1000171d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001721:	83 c4 10             	add    esp,0x10
10001724:	83 ec 0c             	sub    esp,0xc
10001727:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000172a:	e8 fc ff ff ff       	call   1000172b <FloppyDrive::seek(int, int)+0x67>	1000172b: R_386_PC32	FloppyDrive::select()
1000172f:	83 c4 10             	add    esp,0x10
10001732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001735:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
1000173b:	83 ec 08             	sub    esp,0x8
1000173e:	50                   	push   eax
1000173f:	68 0b 55 00 10       	push   0x1000550b	10001740: R_386_32	.text
10001744:	e8 fc ff ff ff       	call   10001745 <FloppyDrive::seek(int, int)+0x81>	10001745: R_386_PC32	Dbg::kprintf(char const*, ...)
10001749:	83 c4 10             	add    esp,0x10
1000174c:	83 ec 0c             	sub    esp,0xc
1000174f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001752:	e8 fc ff ff ff       	call   10001753 <FloppyDrive::seek(int, int)+0x8f>	10001753: R_386_PC32	FloppyDrive::motorOn()
10001757:	83 c4 10             	add    esp,0x10
1000175a:	83 ec 0c             	sub    esp,0xc
1000175d:	68 1a 55 00 10       	push   0x1000551a	1000175e: R_386_32	.text
10001762:	e8 fc ff ff ff       	call   10001763 <FloppyDrive::seek(int, int)+0x9f>	10001763: R_386_PC32	Dbg::kprintf(char const*, ...)
10001767:	83 c4 10             	add    esp,0x10
1000176a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000176d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001773:	83 ec 08             	sub    esp,0x8
10001776:	6a 0f                	push   0xf
10001778:	50                   	push   eax
10001779:	e8 fc ff ff ff       	call   1000177a <FloppyDrive::seek(int, int)+0xb6>	1000177a: R_386_PC32	Floppy::writeCommand(unsigned char)
1000177e:	83 c4 10             	add    esp,0x10
10001781:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001784:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000178a:	83 ec 0c             	sub    esp,0xc
1000178d:	50                   	push   eax
1000178e:	e8 fc ff ff ff       	call   1000178f <FloppyDrive::seek(int, int)+0xcb>	1000178f: R_386_PC32	Floppy::wasFailure()
10001793:	83 c4 10             	add    esp,0x10
10001796:	84 c0                	test   al,al
10001798:	74 3d                	je     100017d7 <FloppyDrive::seek(int, int)+0x113>
1000179a:	83 ec 0c             	sub    esp,0xc
1000179d:	68 25 55 00 10       	push   0x10005525	1000179e: R_386_32	.text
100017a2:	e8 fc ff ff ff       	call   100017a3 <FloppyDrive::seek(int, int)+0xdf>	100017a3: R_386_PC32	Dbg::kprintf(char const*, ...)
100017a7:	83 c4 10             	add    esp,0x10
100017aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017ad:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100017b3:	83 ec 0c             	sub    esp,0xc
100017b6:	50                   	push   eax
100017b7:	e8 fc ff ff ff       	call   100017b8 <FloppyDrive::seek(int, int)+0xf4>	100017b8: R_386_PC32	Floppy::reset()
100017bc:	83 c4 10             	add    esp,0x10
100017bf:	83 ec 0c             	sub    esp,0xc
100017c2:	68 31 55 00 10       	push   0x10005531	100017c3: R_386_32	.text
100017c7:	e8 fc ff ff ff       	call   100017c8 <FloppyDrive::seek(int, int)+0x104>	100017c8: R_386_PC32	Dbg::kprintf(char const*, ...)
100017cc:	83 c4 10             	add    esp,0x10
100017cf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100017d2:	e9 fa fe ff ff       	jmp    100016d1 <FloppyDrive::seek(int, int)+0xd>
100017d7:	83 ec 0c             	sub    esp,0xc
100017da:	68 3d 55 00 10       	push   0x1000553d	100017db: R_386_32	.text
100017df:	e8 fc ff ff ff       	call   100017e0 <FloppyDrive::seek(int, int)+0x11c>	100017e0: R_386_PC32	Dbg::kprintf(char const*, ...)
100017e4:	83 c4 10             	add    esp,0x10
100017e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017ea:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100017f0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
100017f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017fa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001800:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001803:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001809:	88 d1                	mov    cl,dl
1000180b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000180e:	c1 e2 02             	shl    edx,0x2
10001811:	09 ca                	or     edx,ecx
10001813:	0f b6 d2             	movzx  edx,dl
10001816:	83 ec 08             	sub    esp,0x8
10001819:	52                   	push   edx
1000181a:	50                   	push   eax
1000181b:	e8 fc ff ff ff       	call   1000181c <FloppyDrive::seek(int, int)+0x158>	1000181c: R_386_PC32	Floppy::writeCommand(unsigned char)
10001820:	83 c4 10             	add    esp,0x10
10001823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001826:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000182c:	83 ec 0c             	sub    esp,0xc
1000182f:	50                   	push   eax
10001830:	e8 fc ff ff ff       	call   10001831 <FloppyDrive::seek(int, int)+0x16d>	10001831: R_386_PC32	Floppy::wasFailure()
10001835:	83 c4 10             	add    esp,0x10
10001838:	84 c0                	test   al,al
1000183a:	74 1d                	je     10001859 <FloppyDrive::seek(int, int)+0x195>
1000183c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000183f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001845:	83 ec 0c             	sub    esp,0xc
10001848:	50                   	push   eax
10001849:	e8 fc ff ff ff       	call   1000184a <FloppyDrive::seek(int, int)+0x186>	1000184a: R_386_PC32	Floppy::reset()
1000184e:	83 c4 10             	add    esp,0x10
10001851:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001854:	e9 78 fe ff ff       	jmp    100016d1 <FloppyDrive::seek(int, int)+0xd>
10001859:	83 ec 0c             	sub    esp,0xc
1000185c:	68 48 55 00 10       	push   0x10005548	1000185d: R_386_32	.text
10001861:	e8 fc ff ff ff       	call   10001862 <FloppyDrive::seek(int, int)+0x19e>	10001862: R_386_PC32	Dbg::kprintf(char const*, ...)
10001866:	83 c4 10             	add    esp,0x10
10001869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000186c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001872:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001875:	0f b6 d2             	movzx  edx,dl
10001878:	83 ec 08             	sub    esp,0x8
1000187b:	52                   	push   edx
1000187c:	50                   	push   eax
1000187d:	e8 fc ff ff ff       	call   1000187e <FloppyDrive::seek(int, int)+0x1ba>	1000187e: R_386_PC32	Floppy::writeCommand(unsigned char)
10001882:	83 c4 10             	add    esp,0x10
10001885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001888:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000188e:	83 ec 0c             	sub    esp,0xc
10001891:	50                   	push   eax
10001892:	e8 fc ff ff ff       	call   10001893 <FloppyDrive::seek(int, int)+0x1cf>	10001893: R_386_PC32	Floppy::wasFailure()
10001897:	83 c4 10             	add    esp,0x10
1000189a:	84 c0                	test   al,al
1000189c:	74 1d                	je     100018bb <FloppyDrive::seek(int, int)+0x1f7>
1000189e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018a1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018a7:	83 ec 0c             	sub    esp,0xc
100018aa:	50                   	push   eax
100018ab:	e8 fc ff ff ff       	call   100018ac <FloppyDrive::seek(int, int)+0x1e8>	100018ac: R_386_PC32	Floppy::reset()
100018b0:	83 c4 10             	add    esp,0x10
100018b3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100018b6:	e9 16 fe ff ff       	jmp    100016d1 <FloppyDrive::seek(int, int)+0xd>
100018bb:	83 ec 0c             	sub    esp,0xc
100018be:	68 53 55 00 10       	push   0x10005553	100018bf: R_386_32	.text
100018c3:	e8 fc ff ff ff       	call   100018c4 <FloppyDrive::seek(int, int)+0x200>	100018c4: R_386_PC32	Dbg::kprintf(char const*, ...)
100018c8:	83 c4 10             	add    esp,0x10
100018cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018ce:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018d4:	83 ec 08             	sub    esp,0x8
100018d7:	68 dc 05 00 00       	push   0x5dc
100018dc:	50                   	push   eax
100018dd:	e8 fc ff ff ff       	call   100018de <FloppyDrive::seek(int, int)+0x21a>	100018de: R_386_PC32	Floppy::waitIRQ(int)
100018e2:	83 c4 10             	add    esp,0x10
100018e5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100018e8:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100018eb:	83 f0 01             	xor    eax,0x1
100018ee:	84 c0                	test   al,al
100018f0:	74 2d                	je     1000191f <FloppyDrive::seek(int, int)+0x25b>
100018f2:	83 ec 0c             	sub    esp,0xc
100018f5:	68 5e 55 00 10       	push   0x1000555e	100018f6: R_386_32	.text
100018fa:	e8 fc ff ff ff       	call   100018fb <FloppyDrive::seek(int, int)+0x237>	100018fb: R_386_PC32	Dbg::kprintf(char const*, ...)
100018ff:	83 c4 10             	add    esp,0x10
10001902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001905:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000190b:	83 ec 0c             	sub    esp,0xc
1000190e:	50                   	push   eax
1000190f:	e8 fc ff ff ff       	call   10001910 <FloppyDrive::seek(int, int)+0x24c>	10001910: R_386_PC32	Floppy::reset()
10001914:	83 c4 10             	add    esp,0x10
10001917:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000191a:	e9 b2 fd ff ff       	jmp    100016d1 <FloppyDrive::seek(int, int)+0xd>
1000191f:	83 ec 0c             	sub    esp,0xc
10001922:	68 6c 55 00 10       	push   0x1000556c	10001923: R_386_32	.text
10001927:	e8 fc ff ff ff       	call   10001928 <FloppyDrive::seek(int, int)+0x264>	10001928: R_386_PC32	Dbg::kprintf(char const*, ...)
1000192c:	83 c4 10             	add    esp,0x10
1000192f:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
10001936:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
1000193d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001940:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001946:	83 ec 04             	sub    esp,0x4
10001949:	8d 55 e8             	lea    edx,[ebp-0x18]
1000194c:	52                   	push   edx
1000194d:	8d 55 ec             	lea    edx,[ebp-0x14]
10001950:	52                   	push   edx
10001951:	50                   	push   eax
10001952:	e8 fc ff ff ff       	call   10001953 <FloppyDrive::seek(int, int)+0x28f>	10001953: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10001957:	83 c4 10             	add    esp,0x10
1000195a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
1000195d:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001960:	83 f0 01             	xor    eax,0x1
10001963:	84 c0                	test   al,al
10001965:	74 15                	je     1000197c <FloppyDrive::seek(int, int)+0x2b8>
10001967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000196a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001970:	83 ec 0c             	sub    esp,0xc
10001973:	50                   	push   eax
10001974:	e8 fc ff ff ff       	call   10001975 <FloppyDrive::seek(int, int)+0x2b1>	10001975: R_386_PC32	Floppy::reset()
10001979:	83 c4 10             	add    esp,0x10
1000197c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
1000197f:	83 f0 01             	xor    eax,0x1
10001982:	84 c0                	test   al,al
10001984:	75 08                	jne    1000198e <FloppyDrive::seek(int, int)+0x2ca>
10001986:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001989:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
1000198c:	74 08                	je     10001996 <FloppyDrive::seek(int, int)+0x2d2>
1000198e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001991:	e9 3b fd ff ff       	jmp    100016d1 <FloppyDrive::seek(int, int)+0xd>
10001996:	83 ec 0c             	sub    esp,0xc
10001999:	68 77 55 00 10       	push   0x10005577	1000199a: R_386_32	.text
1000199e:	e8 fc ff ff ff       	call   1000199f <FloppyDrive::seek(int, int)+0x2db>	1000199f: R_386_PC32	Dbg::kprintf(char const*, ...)
100019a3:	83 c4 10             	add    esp,0x10
100019a6:	83 ec 0c             	sub    esp,0xc
100019a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100019ac:	e8 fc ff ff ff       	call   100019ad <FloppyDrive::seek(int, int)+0x2e9>	100019ad: R_386_PC32	FloppyDrive::motorOff()
100019b1:	83 c4 10             	add    esp,0x10
100019b4:	83 ec 0c             	sub    esp,0xc
100019b7:	68 84 55 00 10       	push   0x10005584	100019b8: R_386_32	.text
100019bc:	e8 fc ff ff ff       	call   100019bd <FloppyDrive::seek(int, int)+0x2f9>	100019bd: R_386_PC32	Dbg::kprintf(char const*, ...)
100019c1:	83 c4 10             	add    esp,0x10
100019c4:	83 ec 0c             	sub    esp,0xc
100019c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100019ca:	e8 fc ff ff ff       	call   100019cb <FloppyDrive::seek(int, int)+0x307>	100019cb: R_386_PC32	FloppyDrive::unselect()
100019cf:	83 c4 10             	add    esp,0x10
100019d2:	83 ec 0c             	sub    esp,0xc
100019d5:	68 91 55 00 10       	push   0x10005591	100019d6: R_386_32	.text
100019da:	e8 fc ff ff ff       	call   100019db <FloppyDrive::seek(int, int)+0x317>	100019db: R_386_PC32	Dbg::kprintf(char const*, ...)
100019df:	83 c4 10             	add    esp,0x10
100019e2:	b0 01                	mov    al,0x1
100019e4:	c9                   	leave  
100019e5:	c3                   	ret    

100019e6 <FloppyDrive::calibrate()>:
100019e6:	55                   	push   ebp
100019e7:	89 e5                	mov    ebp,esp
100019e9:	83 ec 18             	sub    esp,0x18
100019ec:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100019f3:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
100019f7:	7e 25                	jle    10001a1e <FloppyDrive::calibrate()+0x38>
100019f9:	83 ec 0c             	sub    esp,0xc
100019fc:	68 a0 55 00 10       	push   0x100055a0	100019fd: R_386_32	.text
10001a01:	e8 fc ff ff ff       	call   10001a02 <FloppyDrive::calibrate()+0x1c>	10001a02: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a06:	83 c4 10             	add    esp,0x10
10001a09:	83 ec 0c             	sub    esp,0xc
10001a0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a0f:	e8 fc ff ff ff       	call   10001a10 <FloppyDrive::calibrate()+0x2a>	10001a10: R_386_PC32	FloppyDrive::motorOff()
10001a14:	83 c4 10             	add    esp,0x10
10001a17:	b0 00                	mov    al,0x0
10001a19:	e9 01 02 00 00       	jmp    10001c1f <FloppyDrive::calibrate()+0x239>
10001a1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a21:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001a27:	83 ec 08             	sub    esp,0x8
10001a2a:	50                   	push   eax
10001a2b:	68 cc 55 00 10       	push   0x100055cc	10001a2c: R_386_32	.text
10001a30:	e8 fc ff ff ff       	call   10001a31 <FloppyDrive::calibrate()+0x4b>	10001a31: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a35:	83 c4 10             	add    esp,0x10
10001a38:	83 ec 0c             	sub    esp,0xc
10001a3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a3e:	e8 fc ff ff ff       	call   10001a3f <FloppyDrive::calibrate()+0x59>	10001a3f: R_386_PC32	FloppyDrive::motorOn()
10001a43:	83 c4 10             	add    esp,0x10
10001a46:	83 ec 0c             	sub    esp,0xc
10001a49:	68 da 55 00 10       	push   0x100055da	10001a4a: R_386_32	.text
10001a4e:	e8 fc ff ff ff       	call   10001a4f <FloppyDrive::calibrate()+0x69>	10001a4f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a53:	83 c4 10             	add    esp,0x10
10001a56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a59:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a5f:	83 ec 08             	sub    esp,0x8
10001a62:	6a 07                	push   0x7
10001a64:	50                   	push   eax
10001a65:	e8 fc ff ff ff       	call   10001a66 <FloppyDrive::calibrate()+0x80>	10001a66: R_386_PC32	Floppy::writeCommand(unsigned char)
10001a6a:	83 c4 10             	add    esp,0x10
10001a6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a70:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a76:	83 ec 0c             	sub    esp,0xc
10001a79:	50                   	push   eax
10001a7a:	e8 fc ff ff ff       	call   10001a7b <FloppyDrive::calibrate()+0x95>	10001a7b: R_386_PC32	Floppy::wasFailure()
10001a7f:	83 c4 10             	add    esp,0x10
10001a82:	84 c0                	test   al,al
10001a84:	74 1d                	je     10001aa3 <FloppyDrive::calibrate()+0xbd>
10001a86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a89:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a8f:	83 ec 0c             	sub    esp,0xc
10001a92:	50                   	push   eax
10001a93:	e8 fc ff ff ff       	call   10001a94 <FloppyDrive::calibrate()+0xae>	10001a94: R_386_PC32	Floppy::reset()
10001a98:	83 c4 10             	add    esp,0x10
10001a9b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001a9e:	e9 50 ff ff ff       	jmp    100019f3 <FloppyDrive::calibrate()+0xd>
10001aa3:	83 ec 0c             	sub    esp,0xc
10001aa6:	68 e3 55 00 10       	push   0x100055e3	10001aa7: R_386_32	.text
10001aab:	e8 fc ff ff ff       	call   10001aac <FloppyDrive::calibrate()+0xc6>	10001aac: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ab0:	83 c4 10             	add    esp,0x10
10001ab3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ab6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001abc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10001ac3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ac6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001acc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001acf:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001ad5:	0f b6 d2             	movzx  edx,dl
10001ad8:	83 ec 08             	sub    esp,0x8
10001adb:	52                   	push   edx
10001adc:	50                   	push   eax
10001add:	e8 fc ff ff ff       	call   10001ade <FloppyDrive::calibrate()+0xf8>	10001ade: R_386_PC32	Floppy::writeCommand(unsigned char)
10001ae2:	83 c4 10             	add    esp,0x10
10001ae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ae8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001aee:	83 ec 0c             	sub    esp,0xc
10001af1:	50                   	push   eax
10001af2:	e8 fc ff ff ff       	call   10001af3 <FloppyDrive::calibrate()+0x10d>	10001af3: R_386_PC32	Floppy::wasFailure()
10001af7:	83 c4 10             	add    esp,0x10
10001afa:	84 c0                	test   al,al
10001afc:	74 1d                	je     10001b1b <FloppyDrive::calibrate()+0x135>
10001afe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b01:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b07:	83 ec 0c             	sub    esp,0xc
10001b0a:	50                   	push   eax
10001b0b:	e8 fc ff ff ff       	call   10001b0c <FloppyDrive::calibrate()+0x126>	10001b0c: R_386_PC32	Floppy::reset()
10001b10:	83 c4 10             	add    esp,0x10
10001b13:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001b16:	e9 d8 fe ff ff       	jmp    100019f3 <FloppyDrive::calibrate()+0xd>
10001b1b:	83 ec 0c             	sub    esp,0xc
10001b1e:	68 ec 55 00 10       	push   0x100055ec	10001b1f: R_386_32	.text
10001b23:	e8 fc ff ff ff       	call   10001b24 <FloppyDrive::calibrate()+0x13e>	10001b24: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b28:	83 c4 10             	add    esp,0x10
10001b2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b2e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b34:	83 ec 08             	sub    esp,0x8
10001b37:	68 dc 05 00 00       	push   0x5dc
10001b3c:	50                   	push   eax
10001b3d:	e8 fc ff ff ff       	call   10001b3e <FloppyDrive::calibrate()+0x158>	10001b3e: R_386_PC32	Floppy::waitIRQ(int)
10001b42:	83 c4 10             	add    esp,0x10
10001b45:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001b48:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001b4b:	83 f0 01             	xor    eax,0x1
10001b4e:	84 c0                	test   al,al
10001b50:	74 1d                	je     10001b6f <FloppyDrive::calibrate()+0x189>
10001b52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b55:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b5b:	83 ec 0c             	sub    esp,0xc
10001b5e:	50                   	push   eax
10001b5f:	e8 fc ff ff ff       	call   10001b60 <FloppyDrive::calibrate()+0x17a>	10001b60: R_386_PC32	Floppy::reset()
10001b64:	83 c4 10             	add    esp,0x10
10001b67:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001b6a:	e9 84 fe ff ff       	jmp    100019f3 <FloppyDrive::calibrate()+0xd>
10001b6f:	83 ec 0c             	sub    esp,0xc
10001b72:	68 f5 55 00 10       	push   0x100055f5	10001b73: R_386_32	.text
10001b77:	e8 fc ff ff ff       	call   10001b78 <FloppyDrive::calibrate()+0x192>	10001b78: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b7c:	83 c4 10             	add    esp,0x10
10001b7f:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
10001b86:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10001b8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b90:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b96:	83 ec 04             	sub    esp,0x4
10001b99:	8d 55 e8             	lea    edx,[ebp-0x18]
10001b9c:	52                   	push   edx
10001b9d:	8d 55 ec             	lea    edx,[ebp-0x14]
10001ba0:	52                   	push   edx
10001ba1:	50                   	push   eax
10001ba2:	e8 fc ff ff ff       	call   10001ba3 <FloppyDrive::calibrate()+0x1bd>	10001ba3: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10001ba7:	83 c4 10             	add    esp,0x10
10001baa:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10001bad:	83 ec 0c             	sub    esp,0xc
10001bb0:	68 fe 55 00 10       	push   0x100055fe	10001bb1: R_386_32	.text
10001bb5:	e8 fc ff ff ff       	call   10001bb6 <FloppyDrive::calibrate()+0x1d0>	10001bb6: R_386_PC32	Dbg::kprintf(char const*, ...)
10001bba:	83 c4 10             	add    esp,0x10
10001bbd:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001bc0:	83 f0 01             	xor    eax,0x1
10001bc3:	84 c0                	test   al,al
10001bc5:	74 15                	je     10001bdc <FloppyDrive::calibrate()+0x1f6>
10001bc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bca:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bd0:	83 ec 0c             	sub    esp,0xc
10001bd3:	50                   	push   eax
10001bd4:	e8 fc ff ff ff       	call   10001bd5 <FloppyDrive::calibrate()+0x1ef>	10001bd5: R_386_PC32	Floppy::reset()
10001bd9:	83 c4 10             	add    esp,0x10
10001bdc:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001bdf:	83 f0 01             	xor    eax,0x1
10001be2:	84 c0                	test   al,al
10001be4:	75 11                	jne    10001bf7 <FloppyDrive::calibrate()+0x211>
10001be6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001be9:	85 c0                	test   eax,eax
10001beb:	75 0a                	jne    10001bf7 <FloppyDrive::calibrate()+0x211>
10001bed:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10001bf0:	83 e0 20             	and    eax,0x20
10001bf3:	85 c0                	test   eax,eax
10001bf5:	75 08                	jne    10001bff <FloppyDrive::calibrate()+0x219>
10001bf7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001bfa:	e9 f4 fd ff ff       	jmp    100019f3 <FloppyDrive::calibrate()+0xd>
10001bff:	83 ec 0c             	sub    esp,0xc
10001c02:	68 07 56 00 10       	push   0x10005607	10001c03: R_386_32	.text
10001c07:	e8 fc ff ff ff       	call   10001c08 <FloppyDrive::calibrate()+0x222>	10001c08: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c0c:	83 c4 10             	add    esp,0x10
10001c0f:	83 ec 0c             	sub    esp,0xc
10001c12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001c15:	e8 fc ff ff ff       	call   10001c16 <FloppyDrive::calibrate()+0x230>	10001c16: R_386_PC32	FloppyDrive::motorOff()
10001c1a:	83 c4 10             	add    esp,0x10
10001c1d:	b0 01                	mov    al,0x1
10001c1f:	c9                   	leave  
10001c20:	c3                   	ret    
10001c21:	90                   	nop

10001c22 <FloppyDrive::doTrack(int, bool, unsigned char*)>:
10001c22:	55                   	push   ebp
10001c23:	89 e5                	mov    ebp,esp
10001c25:	83 ec 28             	sub    esp,0x28
10001c28:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001c2b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10001c2e:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
10001c32:	74 23                	je     10001c57 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x35>
10001c34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c37:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c3d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
10001c43:	83 ec 04             	sub    esp,0x4
10001c46:	68 00 48 00 00       	push   0x4800
10001c4b:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10001c4e:	50                   	push   eax
10001c4f:	e8 fc ff ff ff       	call   10001c50 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2e>	10001c50: R_386_PC32	memcpy
10001c54:	83 c4 10             	add    esp,0x10
10001c57:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
10001c5b:	74 07                	je     10001c64 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x42>
10001c5d:	b8 c5 00 00 00       	mov    eax,0xc5
10001c62:	eb 05                	jmp    10001c69 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x47>
10001c64:	b8 c6 00 00 00       	mov    eax,0xc6
10001c69:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001c6c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001c73:	83 ec 0c             	sub    esp,0xc
10001c76:	68 10 56 00 10       	push   0x10005610	10001c77: R_386_32	.text
10001c7b:	e8 fc ff ff ff       	call   10001c7c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5a>	10001c7c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c80:	83 c4 10             	add    esp,0x10
10001c83:	83 7d f4 14          	cmp    DWORD PTR [ebp-0xc],0x14
10001c87:	75 26                	jne    10001caf <FloppyDrive::doTrack(int, bool, unsigned char*)+0x8d>
10001c89:	83 ec 0c             	sub    esp,0xc
10001c8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001c8f:	e8 fc ff ff ff       	call   10001c90 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6e>	10001c90: R_386_PC32	FloppyDrive::motorOff()
10001c94:	83 c4 10             	add    esp,0x10
10001c97:	83 ec 0c             	sub    esp,0xc
10001c9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001c9d:	e8 fc ff ff ff       	call   10001c9e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7c>	10001c9e: R_386_PC32	FloppyDrive::unselect()
10001ca2:	83 c4 10             	add    esp,0x10
10001ca5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10001caa:	e9 51 07 00 00       	jmp    10002400 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7de>
10001caf:	83 ec 0c             	sub    esp,0xc
10001cb2:	68 1a 56 00 10       	push   0x1000561a	10001cb3: R_386_32	.text
10001cb7:	e8 fc ff ff ff       	call   10001cb8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x96>	10001cb8: R_386_PC32	Dbg::kprintf(char const*, ...)
10001cbc:	83 c4 10             	add    esp,0x10
10001cbf:	83 ec 04             	sub    esp,0x4
10001cc2:	6a 00                	push   0x0
10001cc4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001cc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001cca:	e8 fc ff ff ff       	call   10001ccb <FloppyDrive::doTrack(int, bool, unsigned char*)+0xa9>	10001ccb: R_386_PC32	FloppyDrive::seek(int, int)
10001ccf:	83 c4 10             	add    esp,0x10
10001cd2:	83 f0 01             	xor    eax,0x1
10001cd5:	84 c0                	test   al,al
10001cd7:	74 0a                	je     10001ce3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xc1>
10001cd9:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001cde:	e9 1d 07 00 00       	jmp    10002400 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7de>
10001ce3:	83 ec 04             	sub    esp,0x4
10001ce6:	6a 01                	push   0x1
10001ce8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001ceb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001cee:	e8 fc ff ff ff       	call   10001cef <FloppyDrive::doTrack(int, bool, unsigned char*)+0xcd>	10001cef: R_386_PC32	FloppyDrive::seek(int, int)
10001cf3:	83 c4 10             	add    esp,0x10
10001cf6:	83 f0 01             	xor    eax,0x1
10001cf9:	84 c0                	test   al,al
10001cfb:	74 0a                	je     10001d07 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xe5>
10001cfd:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001d02:	e9 f9 06 00 00       	jmp    10002400 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7de>
10001d07:	83 ec 0c             	sub    esp,0xc
10001d0a:	68 2a 56 00 10       	push   0x1000562a	10001d0b: R_386_32	.text
10001d0f:	e8 fc ff ff ff       	call   10001d10 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xee>	10001d10: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d14:	83 c4 10             	add    esp,0x10
10001d17:	83 ec 0c             	sub    esp,0xc
10001d1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d1d:	e8 fc ff ff ff       	call   10001d1e <FloppyDrive::doTrack(int, bool, unsigned char*)+0xfc>	10001d1e: R_386_PC32	FloppyDrive::motorOn()
10001d22:	83 c4 10             	add    esp,0x10
10001d25:	83 ec 0c             	sub    esp,0xc
10001d28:	68 36 56 00 10       	push   0x10005636	10001d29: R_386_32	.text
10001d2d:	e8 fc ff ff ff       	call   10001d2e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x10c>	10001d2e: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d32:	83 c4 10             	add    esp,0x10
10001d35:	83 ec 0c             	sub    esp,0xc
10001d38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d3b:	e8 fc ff ff ff       	call   10001d3c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x11a>	10001d3c: R_386_PC32	FloppyDrive::select()
10001d40:	83 c4 10             	add    esp,0x10
10001d43:	83 ec 0c             	sub    esp,0xc
10001d46:	68 41 56 00 10       	push   0x10005641	10001d47: R_386_32	.text
10001d4b:	e8 fc ff ff ff       	call   10001d4c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x12a>	10001d4c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d50:	83 c4 10             	add    esp,0x10
10001d53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d56:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d5c:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
10001d60:	83 ec 08             	sub    esp,0x8
10001d63:	52                   	push   edx
10001d64:	50                   	push   eax
10001d65:	e8 fc ff ff ff       	call   10001d66 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x144>	10001d66: R_386_PC32	Floppy::dmaInit(bool)
10001d6a:	83 c4 10             	add    esp,0x10
10001d6d:	83 ec 0c             	sub    esp,0xc
10001d70:	68 4c 56 00 10       	push   0x1000564c	10001d71: R_386_32	.text
10001d75:	e8 fc ff ff ff       	call   10001d76 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x154>	10001d76: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d7a:	83 c4 10             	add    esp,0x10
10001d7d:	83 ec 08             	sub    esp,0x8
10001d80:	6a 00                	push   0x0
10001d82:	68 00 e1 f5 05       	push   0x5f5e100
10001d87:	e8 fc ff ff ff       	call   10001d88 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x166>	10001d88: R_386_PC32	nanoSleep(unsigned long long)
10001d8c:	83 c4 10             	add    esp,0x10
10001d8f:	83 ec 0c             	sub    esp,0xc
10001d92:	68 59 56 00 10       	push   0x10005659	10001d93: R_386_32	.text
10001d97:	e8 fc ff ff ff       	call   10001d98 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x176>	10001d98: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d9c:	83 c4 10             	add    esp,0x10
10001d9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001da2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001da8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10001dab:	0f b6 d2             	movzx  edx,dl
10001dae:	83 ec 08             	sub    esp,0x8
10001db1:	52                   	push   edx
10001db2:	50                   	push   eax
10001db3:	e8 fc ff ff ff       	call   10001db4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x192>	10001db4: R_386_PC32	Floppy::writeCommand(unsigned char)
10001db8:	83 c4 10             	add    esp,0x10
10001dbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dbe:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001dc4:	83 ec 0c             	sub    esp,0xc
10001dc7:	50                   	push   eax
10001dc8:	e8 fc ff ff ff       	call   10001dc9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1a7>	10001dc9: R_386_PC32	Floppy::wasFailure()
10001dcd:	83 c4 10             	add    esp,0x10
10001dd0:	84 c0                	test   al,al
10001dd2:	74 1d                	je     10001df1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1cf>
10001dd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dd7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ddd:	83 ec 0c             	sub    esp,0xc
10001de0:	50                   	push   eax
10001de1:	e8 fc ff ff ff       	call   10001de2 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1c0>	10001de2: R_386_PC32	Floppy::reset()
10001de6:	83 c4 10             	add    esp,0x10
10001de9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001dec:	e9 82 fe ff ff       	jmp    10001c73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51>
10001df1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001df4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001dfa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001dfd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001e03:	0f b6 d2             	movzx  edx,dl
10001e06:	83 ec 08             	sub    esp,0x8
10001e09:	52                   	push   edx
10001e0a:	50                   	push   eax
10001e0b:	e8 fc ff ff ff       	call   10001e0c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1ea>	10001e0c: R_386_PC32	Floppy::writeCommand(unsigned char)
10001e10:	83 c4 10             	add    esp,0x10
10001e13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e16:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e1c:	83 ec 0c             	sub    esp,0xc
10001e1f:	50                   	push   eax
10001e20:	e8 fc ff ff ff       	call   10001e21 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1ff>	10001e21: R_386_PC32	Floppy::wasFailure()
10001e25:	83 c4 10             	add    esp,0x10
10001e28:	84 c0                	test   al,al
10001e2a:	74 1d                	je     10001e49 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x227>
10001e2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e2f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e35:	83 ec 0c             	sub    esp,0xc
10001e38:	50                   	push   eax
10001e39:	e8 fc ff ff ff       	call   10001e3a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x218>	10001e3a: R_386_PC32	Floppy::reset()
10001e3e:	83 c4 10             	add    esp,0x10
10001e41:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001e44:	e9 2a fe ff ff       	jmp    10001c73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51>
10001e49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e4c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e52:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001e55:	0f b6 d2             	movzx  edx,dl
10001e58:	83 ec 08             	sub    esp,0x8
10001e5b:	52                   	push   edx
10001e5c:	50                   	push   eax
10001e5d:	e8 fc ff ff ff       	call   10001e5e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x23c>	10001e5e: R_386_PC32	Floppy::writeCommand(unsigned char)
10001e62:	83 c4 10             	add    esp,0x10
10001e65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e68:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e6e:	83 ec 0c             	sub    esp,0xc
10001e71:	50                   	push   eax
10001e72:	e8 fc ff ff ff       	call   10001e73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x251>	10001e73: R_386_PC32	Floppy::wasFailure()
10001e77:	83 c4 10             	add    esp,0x10
10001e7a:	84 c0                	test   al,al
10001e7c:	74 1d                	je     10001e9b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x279>
10001e7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e81:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e87:	83 ec 0c             	sub    esp,0xc
10001e8a:	50                   	push   eax
10001e8b:	e8 fc ff ff ff       	call   10001e8c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x26a>	10001e8c: R_386_PC32	Floppy::reset()
10001e90:	83 c4 10             	add    esp,0x10
10001e93:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001e96:	e9 d8 fd ff ff       	jmp    10001c73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51>
10001e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e9e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ea4:	83 ec 08             	sub    esp,0x8
10001ea7:	6a 00                	push   0x0
10001ea9:	50                   	push   eax
10001eaa:	e8 fc ff ff ff       	call   10001eab <FloppyDrive::doTrack(int, bool, unsigned char*)+0x289>	10001eab: R_386_PC32	Floppy::writeCommand(unsigned char)
10001eaf:	83 c4 10             	add    esp,0x10
10001eb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001eb5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ebb:	83 ec 0c             	sub    esp,0xc
10001ebe:	50                   	push   eax
10001ebf:	e8 fc ff ff ff       	call   10001ec0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x29e>	10001ec0: R_386_PC32	Floppy::wasFailure()
10001ec4:	83 c4 10             	add    esp,0x10
10001ec7:	84 c0                	test   al,al
10001ec9:	74 1d                	je     10001ee8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2c6>
10001ecb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ece:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ed4:	83 ec 0c             	sub    esp,0xc
10001ed7:	50                   	push   eax
10001ed8:	e8 fc ff ff ff       	call   10001ed9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2b7>	10001ed9: R_386_PC32	Floppy::reset()
10001edd:	83 c4 10             	add    esp,0x10
10001ee0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001ee3:	e9 8b fd ff ff       	jmp    10001c73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51>
10001ee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001eeb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ef1:	83 ec 08             	sub    esp,0x8
10001ef4:	6a 01                	push   0x1
10001ef6:	50                   	push   eax
10001ef7:	e8 fc ff ff ff       	call   10001ef8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2d6>	10001ef8: R_386_PC32	Floppy::writeCommand(unsigned char)
10001efc:	83 c4 10             	add    esp,0x10
10001eff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f02:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f08:	83 ec 0c             	sub    esp,0xc
10001f0b:	50                   	push   eax
10001f0c:	e8 fc ff ff ff       	call   10001f0d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2eb>	10001f0d: R_386_PC32	Floppy::wasFailure()
10001f11:	83 c4 10             	add    esp,0x10
10001f14:	84 c0                	test   al,al
10001f16:	74 1d                	je     10001f35 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x313>
10001f18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f1b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f21:	83 ec 0c             	sub    esp,0xc
10001f24:	50                   	push   eax
10001f25:	e8 fc ff ff ff       	call   10001f26 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x304>	10001f26: R_386_PC32	Floppy::reset()
10001f2a:	83 c4 10             	add    esp,0x10
10001f2d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f30:	e9 3e fd ff ff       	jmp    10001c73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51>
10001f35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f38:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f3e:	83 ec 08             	sub    esp,0x8
10001f41:	6a 02                	push   0x2
10001f43:	50                   	push   eax
10001f44:	e8 fc ff ff ff       	call   10001f45 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x323>	10001f45: R_386_PC32	Floppy::writeCommand(unsigned char)
10001f49:	83 c4 10             	add    esp,0x10
10001f4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f4f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f55:	83 ec 0c             	sub    esp,0xc
10001f58:	50                   	push   eax
10001f59:	e8 fc ff ff ff       	call   10001f5a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x338>	10001f5a: R_386_PC32	Floppy::wasFailure()
10001f5e:	83 c4 10             	add    esp,0x10
10001f61:	84 c0                	test   al,al
10001f63:	74 1d                	je     10001f82 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x360>
10001f65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f68:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f6e:	83 ec 0c             	sub    esp,0xc
10001f71:	50                   	push   eax
10001f72:	e8 fc ff ff ff       	call   10001f73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x351>	10001f73: R_386_PC32	Floppy::reset()
10001f77:	83 c4 10             	add    esp,0x10
10001f7a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001f7d:	e9 f1 fc ff ff       	jmp    10001c73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51>
10001f82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f85:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f8b:	83 ec 08             	sub    esp,0x8
10001f8e:	6a 12                	push   0x12
10001f90:	50                   	push   eax
10001f91:	e8 fc ff ff ff       	call   10001f92 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x370>	10001f92: R_386_PC32	Floppy::writeCommand(unsigned char)
10001f96:	83 c4 10             	add    esp,0x10
10001f99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f9c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fa2:	83 ec 0c             	sub    esp,0xc
10001fa5:	50                   	push   eax
10001fa6:	e8 fc ff ff ff       	call   10001fa7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x385>	10001fa7: R_386_PC32	Floppy::wasFailure()
10001fab:	83 c4 10             	add    esp,0x10
10001fae:	84 c0                	test   al,al
10001fb0:	74 1d                	je     10001fcf <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3ad>
10001fb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fb5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fbb:	83 ec 0c             	sub    esp,0xc
10001fbe:	50                   	push   eax
10001fbf:	e8 fc ff ff ff       	call   10001fc0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x39e>	10001fc0: R_386_PC32	Floppy::reset()
10001fc4:	83 c4 10             	add    esp,0x10
10001fc7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001fca:	e9 a4 fc ff ff       	jmp    10001c73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51>
10001fcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fd2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fd8:	83 ec 08             	sub    esp,0x8
10001fdb:	6a 1b                	push   0x1b
10001fdd:	50                   	push   eax
10001fde:	e8 fc ff ff ff       	call   10001fdf <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3bd>	10001fdf: R_386_PC32	Floppy::writeCommand(unsigned char)
10001fe3:	83 c4 10             	add    esp,0x10
10001fe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fe9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fef:	83 ec 0c             	sub    esp,0xc
10001ff2:	50                   	push   eax
10001ff3:	e8 fc ff ff ff       	call   10001ff4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3d2>	10001ff4: R_386_PC32	Floppy::wasFailure()
10001ff8:	83 c4 10             	add    esp,0x10
10001ffb:	84 c0                	test   al,al
10001ffd:	74 1d                	je     1000201c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3fa>
10001fff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002002:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002008:	83 ec 0c             	sub    esp,0xc
1000200b:	50                   	push   eax
1000200c:	e8 fc ff ff ff       	call   1000200d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3eb>	1000200d: R_386_PC32	Floppy::reset()
10002011:	83 c4 10             	add    esp,0x10
10002014:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002017:	e9 57 fc ff ff       	jmp    10001c73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51>
1000201c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000201f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002025:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
1000202c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000202f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002035:	83 ec 08             	sub    esp,0x8
10002038:	68 ff 00 00 00       	push   0xff
1000203d:	50                   	push   eax
1000203e:	e8 fc ff ff ff       	call   1000203f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x41d>	1000203f: R_386_PC32	Floppy::writeCommand(unsigned char)
10002043:	83 c4 10             	add    esp,0x10
10002046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002049:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000204f:	83 ec 0c             	sub    esp,0xc
10002052:	50                   	push   eax
10002053:	e8 fc ff ff ff       	call   10002054 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x432>	10002054: R_386_PC32	Floppy::wasFailure()
10002058:	83 c4 10             	add    esp,0x10
1000205b:	84 c0                	test   al,al
1000205d:	74 1d                	je     1000207c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x45a>
1000205f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002062:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002068:	83 ec 0c             	sub    esp,0xc
1000206b:	50                   	push   eax
1000206c:	e8 fc ff ff ff       	call   1000206d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x44b>	1000206d: R_386_PC32	Floppy::reset()
10002071:	83 c4 10             	add    esp,0x10
10002074:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002077:	e9 f7 fb ff ff       	jmp    10001c73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51>
1000207c:	83 ec 0c             	sub    esp,0xc
1000207f:	68 65 56 00 10       	push   0x10005665	10002080: R_386_32	.text
10002084:	e8 fc ff ff ff       	call   10002085 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x463>	10002085: R_386_PC32	Dbg::kprintf(char const*, ...)
10002089:	83 c4 10             	add    esp,0x10
1000208c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000208f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002095:	83 ec 08             	sub    esp,0x8
10002098:	68 e8 03 00 00       	push   0x3e8
1000209d:	50                   	push   eax
1000209e:	e8 fc ff ff ff       	call   1000209f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x47d>	1000209f: R_386_PC32	Floppy::waitIRQ(int)
100020a3:	83 c4 10             	add    esp,0x10
100020a6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100020a9:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100020ac:	83 f0 01             	xor    eax,0x1
100020af:	84 c0                	test   al,al
100020b1:	74 2d                	je     100020e0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4be>
100020b3:	83 ec 0c             	sub    esp,0xc
100020b6:	68 78 56 00 10       	push   0x10005678	100020b7: R_386_32	.text
100020bb:	e8 fc ff ff ff       	call   100020bc <FloppyDrive::doTrack(int, bool, unsigned char*)+0x49a>	100020bc: R_386_PC32	Dbg::kprintf(char const*, ...)
100020c0:	83 c4 10             	add    esp,0x10
100020c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020c6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020cc:	83 ec 0c             	sub    esp,0xc
100020cf:	50                   	push   eax
100020d0:	e8 fc ff ff ff       	call   100020d1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4af>	100020d1: R_386_PC32	Floppy::reset()
100020d5:	83 c4 10             	add    esp,0x10
100020d8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100020db:	e9 93 fb ff ff       	jmp    10001c73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51>
100020e0:	83 ec 0c             	sub    esp,0xc
100020e3:	68 81 56 00 10       	push   0x10005681	100020e4: R_386_32	.text
100020e8:	e8 fc ff ff ff       	call   100020e9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4c7>	100020e9: R_386_PC32	Dbg::kprintf(char const*, ...)
100020ed:	83 c4 10             	add    esp,0x10
100020f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020f3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020f9:	83 ec 0c             	sub    esp,0xc
100020fc:	50                   	push   eax
100020fd:	e8 fc ff ff ff       	call   100020fe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4dc>	100020fe: R_386_PC32	Floppy::readData()
10002102:	83 c4 10             	add    esp,0x10
10002105:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10002108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000210b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002111:	83 ec 0c             	sub    esp,0xc
10002114:	50                   	push   eax
10002115:	e8 fc ff ff ff       	call   10002116 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4f4>	10002116: R_386_PC32	Floppy::wasFailure()
1000211a:	83 c4 10             	add    esp,0x10
1000211d:	84 c0                	test   al,al
1000211f:	74 2d                	je     1000214e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x52c>
10002121:	83 ec 0c             	sub    esp,0xc
10002124:	68 8b 56 00 10       	push   0x1000568b	10002125: R_386_32	.text
10002129:	e8 fc ff ff ff       	call   1000212a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x508>	1000212a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000212e:	83 c4 10             	add    esp,0x10
10002131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002134:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000213a:	83 ec 0c             	sub    esp,0xc
1000213d:	50                   	push   eax
1000213e:	e8 fc ff ff ff       	call   1000213f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51d>	1000213f: R_386_PC32	Floppy::reset()
10002143:	83 c4 10             	add    esp,0x10
10002146:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002149:	e9 25 fb ff ff       	jmp    10001c73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51>
1000214e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002151:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002157:	83 ec 0c             	sub    esp,0xc
1000215a:	50                   	push   eax
1000215b:	e8 fc ff ff ff       	call   1000215c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x53a>	1000215c: R_386_PC32	Floppy::readData()
10002160:	83 c4 10             	add    esp,0x10
10002163:	88 45 ed             	mov    BYTE PTR [ebp-0x13],al
10002166:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002169:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000216f:	83 ec 0c             	sub    esp,0xc
10002172:	50                   	push   eax
10002173:	e8 fc ff ff ff       	call   10002174 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x552>	10002174: R_386_PC32	Floppy::wasFailure()
10002178:	83 c4 10             	add    esp,0x10
1000217b:	84 c0                	test   al,al
1000217d:	74 2d                	je     100021ac <FloppyDrive::doTrack(int, bool, unsigned char*)+0x58a>
1000217f:	83 ec 0c             	sub    esp,0xc
10002182:	68 8b 56 00 10       	push   0x1000568b	10002183: R_386_32	.text
10002187:	e8 fc ff ff ff       	call   10002188 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x566>	10002188: R_386_PC32	Dbg::kprintf(char const*, ...)
1000218c:	83 c4 10             	add    esp,0x10
1000218f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002192:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002198:	83 ec 0c             	sub    esp,0xc
1000219b:	50                   	push   eax
1000219c:	e8 fc ff ff ff       	call   1000219d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x57b>	1000219d: R_386_PC32	Floppy::reset()
100021a1:	83 c4 10             	add    esp,0x10
100021a4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100021a7:	e9 c7 fa ff ff       	jmp    10001c73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51>
100021ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021af:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021b5:	83 ec 0c             	sub    esp,0xc
100021b8:	50                   	push   eax
100021b9:	e8 fc ff ff ff       	call   100021ba <FloppyDrive::doTrack(int, bool, unsigned char*)+0x598>	100021ba: R_386_PC32	Floppy::readData()
100021be:	83 c4 10             	add    esp,0x10
100021c1:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
100021c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021c7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021cd:	83 ec 0c             	sub    esp,0xc
100021d0:	50                   	push   eax
100021d1:	e8 fc ff ff ff       	call   100021d2 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5b0>	100021d2: R_386_PC32	Floppy::wasFailure()
100021d6:	83 c4 10             	add    esp,0x10
100021d9:	84 c0                	test   al,al
100021db:	74 2d                	je     1000220a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5e8>
100021dd:	83 ec 0c             	sub    esp,0xc
100021e0:	68 8b 56 00 10       	push   0x1000568b	100021e1: R_386_32	.text
100021e5:	e8 fc ff ff ff       	call   100021e6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5c4>	100021e6: R_386_PC32	Dbg::kprintf(char const*, ...)
100021ea:	83 c4 10             	add    esp,0x10
100021ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021f0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021f6:	83 ec 0c             	sub    esp,0xc
100021f9:	50                   	push   eax
100021fa:	e8 fc ff ff ff       	call   100021fb <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5d9>	100021fb: R_386_PC32	Floppy::reset()
100021ff:	83 c4 10             	add    esp,0x10
10002202:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002205:	e9 69 fa ff ff       	jmp    10001c73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51>
1000220a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000220d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002213:	83 ec 0c             	sub    esp,0xc
10002216:	50                   	push   eax
10002217:	e8 fc ff ff ff       	call   10002218 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5f6>	10002218: R_386_PC32	Floppy::readData()
1000221c:	83 c4 10             	add    esp,0x10
1000221f:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10002222:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002225:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000222b:	83 ec 0c             	sub    esp,0xc
1000222e:	50                   	push   eax
1000222f:	e8 fc ff ff ff       	call   10002230 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x60e>	10002230: R_386_PC32	Floppy::wasFailure()
10002234:	83 c4 10             	add    esp,0x10
10002237:	84 c0                	test   al,al
10002239:	74 2d                	je     10002268 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x646>
1000223b:	83 ec 0c             	sub    esp,0xc
1000223e:	68 8b 56 00 10       	push   0x1000568b	1000223f: R_386_32	.text
10002243:	e8 fc ff ff ff       	call   10002244 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x622>	10002244: R_386_PC32	Dbg::kprintf(char const*, ...)
10002248:	83 c4 10             	add    esp,0x10
1000224b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000224e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002254:	83 ec 0c             	sub    esp,0xc
10002257:	50                   	push   eax
10002258:	e8 fc ff ff ff       	call   10002259 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x637>	10002259: R_386_PC32	Floppy::reset()
1000225d:	83 c4 10             	add    esp,0x10
10002260:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10002263:	e9 0b fa ff ff       	jmp    10001c73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51>
10002268:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000226b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002271:	83 ec 0c             	sub    esp,0xc
10002274:	50                   	push   eax
10002275:	e8 fc ff ff ff       	call   10002276 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x654>	10002276: R_386_PC32	Floppy::readData()
1000227a:	83 c4 10             	add    esp,0x10
1000227d:	88 45 ea             	mov    BYTE PTR [ebp-0x16],al
10002280:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002283:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002289:	83 ec 0c             	sub    esp,0xc
1000228c:	50                   	push   eax
1000228d:	e8 fc ff ff ff       	call   1000228e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x66c>	1000228e: R_386_PC32	Floppy::wasFailure()
10002292:	83 c4 10             	add    esp,0x10
10002295:	84 c0                	test   al,al
10002297:	74 2d                	je     100022c6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6a4>
10002299:	83 ec 0c             	sub    esp,0xc
1000229c:	68 8b 56 00 10       	push   0x1000568b	1000229d: R_386_32	.text
100022a1:	e8 fc ff ff ff       	call   100022a2 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x680>	100022a2: R_386_PC32	Dbg::kprintf(char const*, ...)
100022a6:	83 c4 10             	add    esp,0x10
100022a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022ac:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022b2:	83 ec 0c             	sub    esp,0xc
100022b5:	50                   	push   eax
100022b6:	e8 fc ff ff ff       	call   100022b7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x695>	100022b7: R_386_PC32	Floppy::reset()
100022bb:	83 c4 10             	add    esp,0x10
100022be:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100022c1:	e9 ad f9 ff ff       	jmp    10001c73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51>
100022c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022c9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022cf:	83 ec 0c             	sub    esp,0xc
100022d2:	50                   	push   eax
100022d3:	e8 fc ff ff ff       	call   100022d4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6b2>	100022d4: R_386_PC32	Floppy::readData()
100022d8:	83 c4 10             	add    esp,0x10
100022db:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
100022de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022e1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022e7:	83 ec 0c             	sub    esp,0xc
100022ea:	50                   	push   eax
100022eb:	e8 fc ff ff ff       	call   100022ec <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6ca>	100022ec: R_386_PC32	Floppy::wasFailure()
100022f0:	83 c4 10             	add    esp,0x10
100022f3:	84 c0                	test   al,al
100022f5:	74 2d                	je     10002324 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x702>
100022f7:	83 ec 0c             	sub    esp,0xc
100022fa:	68 8b 56 00 10       	push   0x1000568b	100022fb: R_386_32	.text
100022ff:	e8 fc ff ff ff       	call   10002300 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6de>	10002300: R_386_PC32	Dbg::kprintf(char const*, ...)
10002304:	83 c4 10             	add    esp,0x10
10002307:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000230a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002310:	83 ec 0c             	sub    esp,0xc
10002313:	50                   	push   eax
10002314:	e8 fc ff ff ff       	call   10002315 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6f3>	10002315: R_386_PC32	Floppy::reset()
10002319:	83 c4 10             	add    esp,0x10
1000231c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000231f:	e9 4f f9 ff ff       	jmp    10001c73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51>
10002324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002327:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000232d:	83 ec 0c             	sub    esp,0xc
10002330:	50                   	push   eax
10002331:	e8 fc ff ff ff       	call   10002332 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x710>	10002332: R_386_PC32	Floppy::readData()
10002336:	83 c4 10             	add    esp,0x10
10002339:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
1000233c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000233f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002345:	83 ec 0c             	sub    esp,0xc
10002348:	50                   	push   eax
10002349:	e8 fc ff ff ff       	call   1000234a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x728>	1000234a: R_386_PC32	Floppy::wasFailure()
1000234e:	83 c4 10             	add    esp,0x10
10002351:	84 c0                	test   al,al
10002353:	74 2d                	je     10002382 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x760>
10002355:	83 ec 0c             	sub    esp,0xc
10002358:	68 8b 56 00 10       	push   0x1000568b	10002359: R_386_32	.text
1000235d:	e8 fc ff ff ff       	call   1000235e <FloppyDrive::doTrack(int, bool, unsigned char*)+0x73c>	1000235e: R_386_PC32	Dbg::kprintf(char const*, ...)
10002362:	83 c4 10             	add    esp,0x10
10002365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002368:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000236e:	83 ec 0c             	sub    esp,0xc
10002371:	50                   	push   eax
10002372:	e8 fc ff ff ff       	call   10002373 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x751>	10002373: R_386_PC32	Floppy::reset()
10002377:	83 c4 10             	add    esp,0x10
1000237a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000237d:	e9 f1 f8 ff ff       	jmp    10001c73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x51>
10002382:	83 ec 0c             	sub    esp,0xc
10002385:	68 a4 56 00 10       	push   0x100056a4	10002386: R_386_32	.text
1000238a:	e8 fc ff ff ff       	call   1000238b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x769>	1000238b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000238f:	83 c4 10             	add    esp,0x10
10002392:	83 ec 0c             	sub    esp,0xc
10002395:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002398:	e8 fc ff ff ff       	call   10002399 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x777>	10002399: R_386_PC32	FloppyDrive::motorOff()
1000239d:	83 c4 10             	add    esp,0x10
100023a0:	83 ec 0c             	sub    esp,0xc
100023a3:	68 b8 56 00 10       	push   0x100056b8	100023a4: R_386_32	.text
100023a8:	e8 fc ff ff ff       	call   100023a9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x787>	100023a9: R_386_PC32	Dbg::kprintf(char const*, ...)
100023ad:	83 c4 10             	add    esp,0x10
100023b0:	83 ec 0c             	sub    esp,0xc
100023b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100023b6:	e8 fc ff ff ff       	call   100023b7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x795>	100023b7: R_386_PC32	FloppyDrive::unselect()
100023bb:	83 c4 10             	add    esp,0x10
100023be:	83 ec 0c             	sub    esp,0xc
100023c1:	68 c3 56 00 10       	push   0x100056c3	100023c2: R_386_32	.text
100023c6:	e8 fc ff ff ff       	call   100023c7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7a5>	100023c7: R_386_PC32	Dbg::kprintf(char const*, ...)
100023cb:	83 c4 10             	add    esp,0x10
100023ce:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
100023d1:	83 f0 01             	xor    eax,0x1
100023d4:	84 c0                	test   al,al
100023d6:	74 23                	je     100023fb <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7d9>
100023d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023db:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023e1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
100023e7:	83 ec 04             	sub    esp,0x4
100023ea:	68 00 48 00 00       	push   0x4800
100023ef:	50                   	push   eax
100023f0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
100023f3:	e8 fc ff ff ff       	call   100023f4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7d2>	100023f4: R_386_PC32	memcpy
100023f8:	83 c4 10             	add    esp,0x10
100023fb:	b8 00 00 00 00       	mov    eax,0x0
10002400:	c9                   	leave  
10002401:	c3                   	ret    

10002402 <FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)>:
10002402:	55                   	push   ebp
10002403:	89 e5                	mov    ebp,esp
10002405:	83 ec 10             	sub    esp,0x10
10002408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000240b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002411:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10002414:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
1000241a:	83 c2 64             	add    edx,0x64
1000241d:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10002421:	89 d0                	mov    eax,edx
10002423:	c1 e0 02             	shl    eax,0x2
10002426:	01 d0                	add    eax,edx
10002428:	c1 e0 02             	shl    eax,0x2
1000242b:	01 d0                	add    eax,edx
1000242d:	05 13 00 00 00       	add    eax,0x13	1000242e: R_386_32	floppyTable
10002432:	8a 00                	mov    al,BYTE PTR [eax]
10002434:	0f b6 c0             	movzx  eax,al
10002437:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
1000243a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000243d:	01 c0                	add    eax,eax
1000243f:	89 c1                	mov    ecx,eax
10002441:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002444:	ba 00 00 00 00       	mov    edx,0x0
10002449:	f7 f1                	div    ecx
1000244b:	89 c2                	mov    edx,eax
1000244d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10002450:	89 10                	mov    DWORD PTR [eax],edx
10002452:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10002455:	01 c0                	add    eax,eax
10002457:	89 c1                	mov    ecx,eax
10002459:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000245c:	ba 00 00 00 00       	mov    edx,0x0
10002461:	f7 f1                	div    ecx
10002463:	89 d0                	mov    eax,edx
10002465:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
10002468:	ba 00 00 00 00       	mov    edx,0x0
1000246d:	f7 f1                	div    ecx
1000246f:	89 c2                	mov    edx,eax
10002471:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10002474:	89 10                	mov    DWORD PTR [eax],edx
10002476:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10002479:	01 c0                	add    eax,eax
1000247b:	89 c1                	mov    ecx,eax
1000247d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002480:	ba 00 00 00 00       	mov    edx,0x0
10002485:	f7 f1                	div    ecx
10002487:	89 d0                	mov    eax,edx
10002489:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
1000248c:	ba 00 00 00 00       	mov    edx,0x0
10002491:	f7 f1                	div    ecx
10002493:	89 d0                	mov    eax,edx
10002495:	40                   	inc    eax
10002496:	89 c2                	mov    edx,eax
10002498:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000249b:	89 10                	mov    DWORD PTR [eax],edx
1000249d:	90                   	nop
1000249e:	c9                   	leave  
1000249f:	c3                   	ret    

100024a0 <FloppyDrive::read(unsigned long long, int, void*)>:
100024a0:	55                   	push   ebp
100024a1:	89 e5                	mov    ebp,esp
100024a3:	83 ec 28             	sub    esp,0x28
100024a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100024a9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100024ac:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100024af:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100024b2:	a0 00 00 00 00       	mov    al,ds:0x0	100024b3: R_386_32	_TEMP_allocated
100024b7:	83 f0 01             	xor    eax,0x1
100024ba:	84 c0                	test   al,al
100024bc:	74 31                	je     100024ef <FloppyDrive::read(unsigned long long, int, void*)+0x4f>
100024be:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100024c0: R_386_32	_TEMP_allocated
100024c5:	83 ec 0c             	sub    esp,0xc
100024c8:	68 00 48 00 00       	push   0x4800
100024cd:	e8 fc ff ff ff       	call   100024ce <FloppyDrive::read(unsigned long long, int, void*)+0x2e>	100024ce: R_386_PC32	malloc
100024d2:	83 c4 10             	add    esp,0x10
100024d5:	a3 00 00 00 00       	mov    ds:0x0,eax	100024d6: R_386_32	_TEMP_trackBuffer
100024da:	83 ec 0c             	sub    esp,0xc
100024dd:	68 00 48 00 00       	push   0x4800
100024e2:	e8 fc ff ff ff       	call   100024e3 <FloppyDrive::read(unsigned long long, int, void*)+0x43>	100024e3: R_386_PC32	malloc
100024e7:	83 c4 10             	add    esp,0x10
100024ea:	a3 00 00 00 00       	mov    ds:0x0,eax	100024eb: R_386_32	_TEMP_cylinder0_bf
100024ef:	83 7d 14 01          	cmp    DWORD PTR [ebp+0x14],0x1
100024f3:	74 10                	je     10002505 <FloppyDrive::read(unsigned long long, int, void*)+0x65>
100024f5:	83 ec 0c             	sub    esp,0xc
100024f8:	68 ce 56 00 10       	push   0x100056ce	100024f9: R_386_32	.text
100024fd:	e8 fc ff ff ff       	call   100024fe <FloppyDrive::read(unsigned long long, int, void*)+0x5e>	100024fe: R_386_PC32	Krnl::panic(char const*)
10002502:	83 c4 10             	add    esp,0x10
10002505:	83 ec 0c             	sub    esp,0xc
10002508:	68 e6 56 00 10       	push   0x100056e6	10002509: R_386_32	.text
1000250d:	e8 fc ff ff ff       	call   1000250e <FloppyDrive::read(unsigned long long, int, void*)+0x6e>	1000250e: R_386_PC32	Dbg::kprintf(char const*, ...)
10002512:	83 c4 10             	add    esp,0x10
10002515:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002518:	83 ec 0c             	sub    esp,0xc
1000251b:	8d 55 e8             	lea    edx,[ebp-0x18]
1000251e:	52                   	push   edx
1000251f:	8d 55 ec             	lea    edx,[ebp-0x14]
10002522:	52                   	push   edx
10002523:	8d 55 f0             	lea    edx,[ebp-0x10]
10002526:	52                   	push   edx
10002527:	50                   	push   eax
10002528:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000252b:	e8 fc ff ff ff       	call   1000252c <FloppyDrive::read(unsigned long long, int, void*)+0x8c>	1000252c: R_386_PC32	FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)
10002530:	83 c4 20             	add    esp,0x20
10002533:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
10002536:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10002539:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000253c:	51                   	push   ecx
1000253d:	52                   	push   edx
1000253e:	50                   	push   eax
1000253f:	68 01 57 00 10       	push   0x10005701	10002540: R_386_32	.text
10002544:	e8 fc ff ff ff       	call   10002545 <FloppyDrive::read(unsigned long long, int, void*)+0xa5>	10002545: R_386_PC32	Dbg::kprintf(char const*, ...)
10002549:	83 c4 10             	add    esp,0x10
1000254c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000254f:	85 c0                	test   eax,eax
10002551:	75 2a                	jne    1000257d <FloppyDrive::read(unsigned long long, int, void*)+0xdd>
10002553:	a0 00 00 00 00       	mov    al,ds:0x0	10002554: R_386_32	hasCyl0Bf
10002558:	83 f0 01             	xor    eax,0x1
1000255b:	84 c0                	test   al,al
1000255d:	74 5a                	je     100025b9 <FloppyDrive::read(unsigned long long, int, void*)+0x119>
1000255f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002560: R_386_32	_TEMP_cylinder0_bf
10002564:	50                   	push   eax
10002565:	6a 00                	push   0x0
10002567:	6a 00                	push   0x0
10002569:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000256c:	e8 fc ff ff ff       	call   1000256d <FloppyDrive::read(unsigned long long, int, void*)+0xcd>	1000256d: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002571:	83 c4 10             	add    esp,0x10
10002574:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10002576: R_386_32	hasCyl0Bf
1000257b:	eb 3c                	jmp    100025b9 <FloppyDrive::read(unsigned long long, int, void*)+0x119>
1000257d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10002580:	a1 00 00 00 00       	mov    eax,ds:0x0	10002581: R_386_32	_TEMP_cyl
10002585:	39 c2                	cmp    edx,eax
10002587:	74 30                	je     100025b9 <FloppyDrive::read(unsigned long long, int, void*)+0x119>
10002589:	83 ec 0c             	sub    esp,0xc
1000258c:	68 19 57 00 10       	push   0x10005719	1000258d: R_386_32	.text
10002591:	e8 fc ff ff ff       	call   10002592 <FloppyDrive::read(unsigned long long, int, void*)+0xf2>	10002592: R_386_PC32	Dbg::kprintf(char const*, ...)
10002596:	83 c4 10             	add    esp,0x10
10002599:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000259b: R_386_32	_TEMP_trackBuffer
1000259f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100025a2:	52                   	push   edx
100025a3:	6a 00                	push   0x0
100025a5:	50                   	push   eax
100025a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100025a9:	e8 fc ff ff ff       	call   100025aa <FloppyDrive::read(unsigned long long, int, void*)+0x10a>	100025aa: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
100025ae:	83 c4 10             	add    esp,0x10
100025b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100025b4:	a3 00 00 00 00       	mov    ds:0x0,eax	100025b5: R_386_32	_TEMP_cyl
100025b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100025bc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100025c2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100025c5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100025cb:	83 c2 64             	add    edx,0x64
100025ce:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
100025d2:	89 d0                	mov    eax,edx
100025d4:	c1 e0 02             	shl    eax,0x2
100025d7:	01 d0                	add    eax,edx
100025d9:	c1 e0 02             	shl    eax,0x2
100025dc:	01 d0                	add    eax,edx
100025de:	05 13 00 00 00       	add    eax,0x13	100025df: R_386_32	floppyTable
100025e3:	8a 00                	mov    al,BYTE PTR [eax]
100025e5:	0f b6 c0             	movzx  eax,al
100025e8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100025eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100025ee:	85 c0                	test   eax,eax
100025f0:	75 33                	jne    10002625 <FloppyDrive::read(unsigned long long, int, void*)+0x185>
100025f2:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100025f4: R_386_32	_TEMP_cylinder0_bf
100025f8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100025fb:	48                   	dec    eax
100025fc:	c1 e0 09             	shl    eax,0x9
100025ff:	89 c1                	mov    ecx,eax
10002601:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10002604:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
10002608:	c1 e0 09             	shl    eax,0x9
1000260b:	01 c8                	add    eax,ecx
1000260d:	01 d0                	add    eax,edx
1000260f:	83 ec 04             	sub    esp,0x4
10002612:	68 00 02 00 00       	push   0x200
10002617:	50                   	push   eax
10002618:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000261b:	e8 fc ff ff ff       	call   1000261c <FloppyDrive::read(unsigned long long, int, void*)+0x17c>	1000261c: R_386_PC32	memcpy
10002620:	83 c4 10             	add    esp,0x10
10002623:	eb 31                	jmp    10002656 <FloppyDrive::read(unsigned long long, int, void*)+0x1b6>
10002625:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002627: R_386_32	_TEMP_trackBuffer
1000262b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000262e:	48                   	dec    eax
1000262f:	c1 e0 09             	shl    eax,0x9
10002632:	89 c1                	mov    ecx,eax
10002634:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10002637:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
1000263b:	c1 e0 09             	shl    eax,0x9
1000263e:	01 c8                	add    eax,ecx
10002640:	01 d0                	add    eax,edx
10002642:	83 ec 04             	sub    esp,0x4
10002645:	68 00 02 00 00       	push   0x200
1000264a:	50                   	push   eax
1000264b:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000264e:	e8 fc ff ff ff       	call   1000264f <FloppyDrive::read(unsigned long long, int, void*)+0x1af>	1000264f: R_386_PC32	memcpy
10002653:	83 c4 10             	add    esp,0x10
10002656:	b8 00 00 00 00       	mov    eax,0x0
1000265b:	c9                   	leave  
1000265c:	c3                   	ret    
1000265d:	90                   	nop

1000265e <FloppyDrive::write(unsigned long long, int, void*)>:
1000265e:	55                   	push   ebp
1000265f:	89 e5                	mov    ebp,esp
10002661:	83 ec 18             	sub    esp,0x18
10002664:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002667:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000266a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000266d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10002670:	a0 00 00 00 00       	mov    al,ds:0x0	10002671: R_386_32	_TEMP_allocated
10002675:	83 f0 01             	xor    eax,0x1
10002678:	84 c0                	test   al,al
1000267a:	74 31                	je     100026ad <FloppyDrive::write(unsigned long long, int, void*)+0x4f>
1000267c:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000267e: R_386_32	_TEMP_allocated
10002683:	83 ec 0c             	sub    esp,0xc
10002686:	68 00 48 00 00       	push   0x4800
1000268b:	e8 fc ff ff ff       	call   1000268c <FloppyDrive::write(unsigned long long, int, void*)+0x2e>	1000268c: R_386_PC32	malloc
10002690:	83 c4 10             	add    esp,0x10
10002693:	a3 00 00 00 00       	mov    ds:0x0,eax	10002694: R_386_32	_TEMP_trackBuffer
10002698:	83 ec 0c             	sub    esp,0xc
1000269b:	68 00 48 00 00       	push   0x4800
100026a0:	e8 fc ff ff ff       	call   100026a1 <FloppyDrive::write(unsigned long long, int, void*)+0x43>	100026a1: R_386_PC32	malloc
100026a5:	83 c4 10             	add    esp,0x10
100026a8:	a3 00 00 00 00       	mov    ds:0x0,eax	100026a9: R_386_32	_TEMP_cylinder0_bf
100026ad:	83 7d 14 01          	cmp    DWORD PTR [ebp+0x14],0x1
100026b1:	74 10                	je     100026c3 <FloppyDrive::write(unsigned long long, int, void*)+0x65>
100026b3:	83 ec 0c             	sub    esp,0xc
100026b6:	68 29 57 00 10       	push   0x10005729	100026b7: R_386_32	.text
100026bb:	e8 fc ff ff ff       	call   100026bc <FloppyDrive::write(unsigned long long, int, void*)+0x5e>	100026bc: R_386_PC32	Krnl::panic(char const*)
100026c0:	83 c4 10             	add    esp,0x10
100026c3:	83 ec 0c             	sub    esp,0xc
100026c6:	68 42 57 00 10       	push   0x10005742	100026c7: R_386_32	.text
100026cb:	e8 fc ff ff ff       	call   100026cc <FloppyDrive::write(unsigned long long, int, void*)+0x6e>	100026cc: R_386_PC32	Krnl::panic(char const*)
100026d0:	83 c4 10             	add    esp,0x10
100026d3:	b8 fd ff ff ff       	mov    eax,0xfffffffd
100026d8:	c9                   	leave  
100026d9:	c3                   	ret    

100026da <FloppyDrive::~FloppyDrive()>:
100026da:	55                   	push   ebp
100026db:	89 e5                	mov    ebp,esp
100026dd:	83 ec 08             	sub    esp,0x8
100026e0:	ba 08 00 00 00       	mov    edx,0x8	100026e1: R_386_32	vtable for FloppyDrive
100026e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100026e8:	89 10                	mov    DWORD PTR [eax],edx
100026ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100026ed:	83 ec 0c             	sub    esp,0xc
100026f0:	50                   	push   eax
100026f1:	e8 fc ff ff ff       	call   100026f2 <FloppyDrive::~FloppyDrive()+0x18>	100026f2: R_386_PC32	PhysicalDisk::~PhysicalDisk()
100026f6:	83 c4 10             	add    esp,0x10
100026f9:	90                   	nop
100026fa:	c9                   	leave  
100026fb:	c3                   	ret    

100026fc <FloppyDrive::~FloppyDrive()>:
100026fc:	55                   	push   ebp
100026fd:	89 e5                	mov    ebp,esp
100026ff:	83 ec 08             	sub    esp,0x8
10002702:	83 ec 0c             	sub    esp,0xc
10002705:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002708:	e8 fc ff ff ff       	call   10002709 <FloppyDrive::~FloppyDrive()+0xd>	10002709: R_386_PC32	FloppyDrive::~FloppyDrive()
1000270d:	83 c4 10             	add    esp,0x10
10002710:	83 ec 08             	sub    esp,0x8
10002713:	68 74 01 00 00       	push   0x174
10002718:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000271b:	e8 fc ff ff ff       	call   1000271c <FloppyDrive::~FloppyDrive()+0x20>	1000271c: R_386_PC32	operator delete(void*, unsigned long)
10002720:	83 c4 10             	add    esp,0x10
10002723:	c9                   	leave  
10002724:	c3                   	ret    
10002725:	90                   	nop

10002726 <Gameport::Gameport()>:
10002726:	55                   	push   ebp
10002727:	89 e5                	mov    ebp,esp
10002729:	83 ec 08             	sub    esp,0x8
1000272c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000272f:	83 ec 08             	sub    esp,0x8
10002732:	68 5c 58 00 10       	push   0x1000585c	10002733: R_386_32	.text
10002737:	50                   	push   eax
10002738:	e8 fc ff ff ff       	call   10002739 <Gameport::Gameport()+0x13>	10002739: R_386_PC32	Device::Device(char const*)
1000273d:	83 c4 10             	add    esp,0x10
10002740:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002743:	05 58 01 00 00       	add    eax,0x158
10002748:	83 ec 0c             	sub    esp,0xc
1000274b:	50                   	push   eax
1000274c:	e8 fc ff ff ff       	call   1000274d <Gameport::Gameport()+0x27>	1000274d: R_386_PC32	JoystickHost::JoystickHost()
10002751:	83 c4 10             	add    esp,0x10
10002754:	ba 08 00 00 00       	mov    edx,0x8	10002755: R_386_32	vtable for Gameport
10002759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000275c:	89 10                	mov    DWORD PTR [eax],edx
1000275e:	ba 38 00 00 00       	mov    edx,0x38	1000275f: R_386_32	vtable for Gameport
10002763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002766:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
1000276c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000276f:	c7 80 5c 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x15c],0x14a
10002779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000277c:	c7 80 60 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x160],0x14a
10002786:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002789:	c7 80 64 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x164],0x14a
10002793:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002796:	c7 80 68 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x168],0x14a
100027a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100027a3:	c7 80 6c 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x16c],0x3d4
100027ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100027b0:	c7 80 70 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x170],0x3d4
100027ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100027bd:	c7 80 74 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x174],0x3d4
100027c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100027ca:	c7 80 78 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x178],0x3d4
100027d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100027d7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
100027de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100027e1:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
100027e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100027eb:	c6 80 7e 01 00 00 00 	mov    BYTE PTR [eax+0x17e],0x0
100027f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100027f5:	c6 80 7f 01 00 00 00 	mov    BYTE PTR [eax+0x17f],0x0
100027fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100027ff:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
10002806:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002809:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10002810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002813:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002819:	0f b6 d0             	movzx  edx,al
1000281c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000281f:	66 c7 44 90 04 01 02 	mov    WORD PTR [eax+edx*4+0x4],0x201
10002826:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002829:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000282f:	0f b6 d0             	movzx  edx,al
10002832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002835:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
1000283a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000283d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002843:	8d 50 01             	lea    edx,[eax+0x1]
10002846:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10002849:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000284f:	0f b6 d0             	movzx  edx,al
10002852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002855:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10002859:	83 e1 3f             	and    ecx,0x3f
1000285c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10002860:	90                   	nop
10002861:	c9                   	leave  
10002862:	c3                   	ret    
10002863:	90                   	nop

10002864 <Gameport::~Gameport()>:
10002864:	55                   	push   ebp
10002865:	89 e5                	mov    ebp,esp
10002867:	83 ec 08             	sub    esp,0x8
1000286a:	ba 08 00 00 00       	mov    edx,0x8	1000286b: R_386_32	vtable for Gameport
1000286f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002872:	89 10                	mov    DWORD PTR [eax],edx
10002874:	ba 38 00 00 00       	mov    edx,0x38	10002875: R_386_32	vtable for Gameport
10002879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000287c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10002882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002885:	83 ec 0c             	sub    esp,0xc
10002888:	50                   	push   eax
10002889:	e8 fc ff ff ff       	call   1000288a <Gameport::~Gameport()+0x26>	1000288a: R_386_PC32	Device::~Device()
1000288e:	83 c4 10             	add    esp,0x10
10002891:	90                   	nop
10002892:	c9                   	leave  
10002893:	c3                   	ret    

10002894 <Gameport::~Gameport()>:
10002894:	55                   	push   ebp
10002895:	89 e5                	mov    ebp,esp
10002897:	83 ec 08             	sub    esp,0x8
1000289a:	83 ec 0c             	sub    esp,0xc
1000289d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100028a0:	e8 fc ff ff ff       	call   100028a1 <Gameport::~Gameport()+0xd>	100028a1: R_386_PC32	Gameport::~Gameport()
100028a5:	83 c4 10             	add    esp,0x10
100028a8:	83 ec 08             	sub    esp,0x8
100028ab:	68 80 01 00 00       	push   0x180
100028b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100028b3:	e8 fc ff ff ff       	call   100028b4 <Gameport::~Gameport()+0x20>	100028b4: R_386_PC32	operator delete(void*, unsigned long)
100028b8:	83 c4 10             	add    esp,0x10
100028bb:	c9                   	leave  
100028bc:	c3                   	ret    
100028bd:	90                   	nop

100028be <Gameport::calibration(int)>:
100028be:	57                   	push   edi
100028bf:	56                   	push   esi
100028c0:	53                   	push   ebx
100028c1:	81 ec d0 00 00 00    	sub    esp,0xd0
100028c7:	8b 9c 24 e0 00 00 00 	mov    ebx,DWORD PTR [esp+0xe0]
100028ce:	8b b4 24 e4 00 00 00 	mov    esi,DWORD PTR [esp+0xe4]
100028d5:	80 bb 7e 01 00 00 00 	cmp    BYTE PTR [ebx+0x17e],0x0
100028dc:	74 0c                	je     100028ea <Gameport::calibration(int)+0x2c>
100028de:	c6 83 7f 01 00 00 01 	mov    BYTE PTR [ebx+0x17f],0x1
100028e5:	e9 09 01 00 00       	jmp    100029f3 <Gameport::calibration(int)+0x135>
100028ea:	8d bc 24 9c 00 00 00 	lea    edi,[esp+0x9c]
100028f1:	50                   	push   eax
100028f2:	56                   	push   esi
100028f3:	53                   	push   ebx
100028f4:	57                   	push   edi
100028f5:	e8 fc ff ff ff       	call   100028f6 <Gameport::calibration(int)+0x38>	100028f6: R_386_PC32	Gameport::readRaw(int)
100028fa:	83 ec 0c             	sub    esp,0xc
100028fd:	6a 00                	push   0x0
100028ff:	68 40 42 0f 00       	push   0xf4240
10002904:	e8 fc ff ff ff       	call   10002905 <Gameport::calibration(int)+0x47>	10002905: R_386_PC32	nanoSleep(unsigned long long)
10002909:	8d 44 24 20          	lea    eax,[esp+0x20]
1000290d:	83 c4 1c             	add    esp,0x1c
10002910:	56                   	push   esi
10002911:	53                   	push   ebx
10002912:	50                   	push   eax
10002913:	e8 fc ff ff ff       	call   10002914 <Gameport::calibration(int)+0x56>	10002914: R_386_PC32	Gameport::readRaw(int)
10002918:	83 ec 0c             	sub    esp,0xc
1000291b:	6a 00                	push   0x0
1000291d:	68 40 42 0f 00       	push   0xf4240
10002922:	e8 fc ff ff ff       	call   10002923 <Gameport::calibration(int)+0x65>	10002923: R_386_PC32	nanoSleep(unsigned long long)
10002927:	8d 44 24 54          	lea    eax,[esp+0x54]
1000292b:	83 c4 1c             	add    esp,0x1c
1000292e:	56                   	push   esi
1000292f:	53                   	push   ebx
10002930:	50                   	push   eax
10002931:	e8 fc ff ff ff       	call   10002932 <Gameport::calibration(int)+0x74>	10002932: R_386_PC32	Gameport::readRaw(int)
10002936:	83 ec 0c             	sub    esp,0xc
10002939:	6a 00                	push   0x0
1000293b:	68 40 42 0f 00       	push   0xf4240
10002940:	e8 fc ff ff ff       	call   10002941 <Gameport::calibration(int)+0x83>	10002941: R_386_PC32	nanoSleep(unsigned long long)
10002945:	8d 84 24 88 00 00 00 	lea    eax,[esp+0x88]
1000294c:	83 c4 1c             	add    esp,0x1c
1000294f:	56                   	push   esi
10002950:	53                   	push   ebx
10002951:	50                   	push   eax
10002952:	e8 fc ff ff ff       	call   10002953 <Gameport::calibration(int)+0x95>	10002953: R_386_PC32	Gameport::readRaw(int)
10002957:	83 ec 0c             	sub    esp,0xc
1000295a:	6a 00                	push   0x0
1000295c:	68 40 42 0f 00       	push   0xf4240
10002961:	e8 fc ff ff ff       	call   10002962 <Gameport::calibration(int)+0xa4>	10002962: R_386_PC32	nanoSleep(unsigned long long)
10002966:	83 c4 1c             	add    esp,0x1c
10002969:	56                   	push   esi
1000296a:	53                   	push   ebx
1000296b:	57                   	push   edi
1000296c:	bf 03 00 00 00       	mov    edi,0x3
10002971:	e8 fc ff ff ff       	call   10002972 <Gameport::calibration(int)+0xb4>	10002972: R_386_PC32	Gameport::readRaw(int)
10002976:	31 d2                	xor    edx,edx
10002978:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
1000297c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
10002980:	03 84 24 88 00 00 00 	add    eax,DWORD PTR [esp+0x88]
10002987:	f7 f7                	div    edi
10002989:	31 d2                	xor    edx,edx
1000298b:	89 c1                	mov    ecx,eax
1000298d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10002991:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10002995:	03 84 24 8c 00 00 00 	add    eax,DWORD PTR [esp+0x8c]
1000299c:	83 c4 0c             	add    esp,0xc
1000299f:	f7 f7                	div    edi
100029a1:	85 f6                	test   esi,esi
100029a3:	75 0e                	jne    100029b3 <Gameport::calibration(int)+0xf5>
100029a5:	89 8b 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],ecx
100029ab:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
100029b1:	eb 0c                	jmp    100029bf <Gameport::calibration(int)+0x101>
100029b3:	89 8b 64 01 00 00    	mov    DWORD PTR [ebx+0x164],ecx
100029b9:	89 83 68 01 00 00    	mov    DWORD PTR [ebx+0x168],eax
100029bf:	6b 83 5c 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x15c],0x3
100029c6:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
100029cc:	6b 83 60 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x160],0x3
100029d3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
100029d9:	6b 83 64 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x164],0x3
100029e0:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
100029e6:	6b 83 68 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x168],0x3
100029ed:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
100029f3:	81 c4 d0 00 00 00    	add    esp,0xd0
100029f9:	5b                   	pop    ebx
100029fa:	5e                   	pop    esi
100029fb:	5f                   	pop    edi
100029fc:	c3                   	ret    
100029fd:	90                   	nop

100029fe <Gameport::detect()>:
100029fe:	53                   	push   ebx
100029ff:	81 ec 88 00 00 00    	sub    esp,0x88
10002a05:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
10002a0c:	8d 44 24 18          	lea    eax,[esp+0x18]
10002a10:	51                   	push   ecx
10002a11:	6a 00                	push   0x0
10002a13:	53                   	push   ebx
10002a14:	50                   	push   eax
10002a15:	e8 fc ff ff ff       	call   10002a16 <Gameport::detect()+0x18>	10002a16: R_386_PC32	Gameport::readRaw(int)
10002a1a:	8d 44 24 58          	lea    eax,[esp+0x58]
10002a1e:	52                   	push   edx
10002a1f:	52                   	push   edx
10002a20:	6a 01                	push   0x1
10002a22:	53                   	push   ebx
10002a23:	50                   	push   eax
10002a24:	e8 fc ff ff ff       	call   10002a25 <Gameport::detect()+0x27>	10002a25: R_386_PC32	Gameport::readRaw(int)
10002a29:	83 c4 1c             	add    esp,0x1c
10002a2c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10002a33:	75 14                	jne    10002a49 <Gameport::detect()+0x4b>
10002a35:	f6 44 24 18 10       	test   BYTE PTR [esp+0x18],0x10
10002a3a:	74 0d                	je     10002a49 <Gameport::detect()+0x4b>
10002a3c:	52                   	push   edx
10002a3d:	52                   	push   edx
10002a3e:	6a 00                	push   0x0
10002a40:	53                   	push   ebx
10002a41:	e8 fc ff ff ff       	call   10002a42 <Gameport::detect()+0x44>	10002a42: R_386_PC32	Gameport::calibration(int)
10002a46:	83 c4 10             	add    esp,0x10
10002a49:	8a 54 24 4c          	mov    dl,BYTE PTR [esp+0x4c]
10002a4d:	83 e2 10             	and    edx,0x10
10002a50:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10002a57:	75 19                	jne    10002a72 <Gameport::detect()+0x74>
10002a59:	84 d2                	test   dl,dl
10002a5b:	74 15                	je     10002a72 <Gameport::detect()+0x74>
10002a5d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10002a61:	50                   	push   eax
10002a62:	50                   	push   eax
10002a63:	6a 01                	push   0x1
10002a65:	53                   	push   ebx
10002a66:	e8 fc ff ff ff       	call   10002a67 <Gameport::detect()+0x69>	10002a67: R_386_PC32	Gameport::calibration(int)
10002a6b:	83 c4 10             	add    esp,0x10
10002a6e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
10002a72:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
10002a76:	c0 e8 04             	shr    al,0x4
10002a79:	83 e0 01             	and    eax,0x1
10002a7c:	84 d2                	test   dl,dl
10002a7e:	88 83 7c 01 00 00    	mov    BYTE PTR [ebx+0x17c],al
10002a84:	0f 95 83 7d 01 00 00 	setne  BYTE PTR [ebx+0x17d]
10002a8b:	81 c4 88 00 00 00    	add    esp,0x88
10002a91:	5b                   	pop    ebx
10002a92:	c3                   	ret    
10002a93:	90                   	nop

10002a94 <Gameport::read(int)>:
10002a94:	57                   	push   edi
10002a95:	56                   	push   esi
10002a96:	53                   	push   ebx
10002a97:	83 ec 50             	sub    esp,0x50
10002a9a:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10002a9e:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002aa2:	85 f6                	test   esi,esi
10002aa4:	75 09                	jne    10002aaf <Gameport::read(int)+0x1b>
10002aa6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10002aad:	eb 0c                	jmp    10002abb <Gameport::read(int)+0x27>
10002aaf:	83 fe 01             	cmp    esi,0x1
10002ab2:	75 15                	jne    10002ac9 <Gameport::read(int)+0x35>
10002ab4:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10002abb:	75 0c                	jne    10002ac9 <Gameport::read(int)+0x35>
10002abd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002ac1:	80 20 ef             	and    BYTE PTR [eax],0xef
10002ac4:	e9 b0 00 00 00       	jmp    10002b79 <Gameport::read(int)+0xe5>
10002ac9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10002acd:	52                   	push   edx
10002ace:	56                   	push   esi
10002acf:	53                   	push   ebx
10002ad0:	50                   	push   eax
10002ad1:	e8 fc ff ff ff       	call   10002ad2 <Gameport::read(int)+0x3e>	10002ad2: R_386_PC32	Gameport::readRaw(int)
10002ad6:	83 c4 0c             	add    esp,0xc
10002ad9:	4e                   	dec    esi
10002ada:	75 1a                	jne    10002af6 <Gameport::read(int)+0x62>
10002adc:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
10002ae2:	8b b3 68 01 00 00    	mov    esi,DWORD PTR [ebx+0x168]
10002ae8:	8b 93 74 01 00 00    	mov    edx,DWORD PTR [ebx+0x174]
10002aee:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
10002af4:	eb 18                	jmp    10002b0e <Gameport::read(int)+0x7a>
10002af6:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
10002afc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
10002b02:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
10002b08:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10002b0e:	85 ff                	test   edi,edi
10002b10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002b14:	0f 94 c0             	sete   al
10002b17:	85 f6                	test   esi,esi
10002b19:	0f 94 c1             	sete   cl
10002b1c:	09 c1                	or     ecx,eax
10002b1e:	39 d7                	cmp    edi,edx
10002b20:	0f 94 c0             	sete   al
10002b23:	08 c1                	or     cl,al
10002b25:	75 96                	jne    10002abd <Gameport::read(int)+0x29>
10002b27:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
10002b2b:	74 90                	je     10002abd <Gameport::read(int)+0x29>
10002b2d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002b31:	89 d9                	mov    ecx,ebx
10002b33:	29 f1                	sub    ecx,esi
10002b35:	6b c9 7f             	imul   ecx,ecx,0x7f
10002b38:	39 fb                	cmp    ebx,edi
10002b3a:	7e 1a                	jle    10002b56 <Gameport::read(int)+0xc2>
10002b3c:	29 fb                	sub    ebx,edi
10002b3e:	29 fa                	sub    edx,edi
10002b40:	6b db 7f             	imul   ebx,ebx,0x7f
10002b43:	89 d7                	mov    edi,edx
10002b45:	89 d8                	mov    eax,ebx
10002b47:	99                   	cdq    
10002b48:	f7 ff                	idiv   edi
10002b4a:	89 c3                	mov    ebx,eax
10002b4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002b50:	29 f0                	sub    eax,esi
10002b52:	89 c6                	mov    esi,eax
10002b54:	eb 07                	jmp    10002b5d <Gameport::read(int)+0xc9>
10002b56:	89 c8                	mov    eax,ecx
10002b58:	99                   	cdq    
10002b59:	f7 ff                	idiv   edi
10002b5b:	89 c3                	mov    ebx,eax
10002b5d:	89 c8                	mov    eax,ecx
10002b5f:	88 5c 24 2d          	mov    BYTE PTR [esp+0x2d],bl
10002b63:	99                   	cdq    
10002b64:	b9 0d 00 00 00       	mov    ecx,0xd
10002b69:	f7 fe                	idiv   esi
10002b6b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
10002b6f:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
10002b73:	8d 74 24 1c          	lea    esi,[esp+0x1c]
10002b77:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002b79:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002b7d:	83 c4 50             	add    esp,0x50
10002b80:	5b                   	pop    ebx
10002b81:	5e                   	pop    esi
10002b82:	5f                   	pop    edi
10002b83:	c2 04 00             	ret    0x4

10002b86 <non-virtual thunk to Gameport::read(int)>:
10002b86:	81 6c 24 08 58 01 00 00 	sub    DWORD PTR [esp+0x8],0x158
10002b8e:	e9 01 ff ff ff       	jmp    10002a94 <Gameport::read(int)>
10002b93:	90                   	nop

10002b94 <Gameport::readRaw(int)>:
10002b94:	57                   	push   edi
10002b95:	ba 01 02 00 00       	mov    edx,0x201
10002b9a:	56                   	push   esi
10002b9b:	53                   	push   ebx
10002b9c:	83 ec 10             	sub    esp,0x10
10002b9f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10002ba3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10002ba7:	8a 03                	mov    al,BYTE PTR [ebx]
10002ba9:	83 e0 e0             	and    eax,0xffffffe0
10002bac:	83 c8 12             	or     eax,0x12
10002baf:	88 03                	mov    BYTE PTR [ebx],al
10002bb1:	ec                   	in     al,dx
10002bb2:	88 c2                	mov    dl,al
10002bb4:	85 f6                	test   esi,esi
10002bb6:	75 11                	jne    10002bc9 <Gameport::readRaw(int)+0x35>
10002bb8:	c0 ea 04             	shr    dl,0x4
10002bbb:	c0 e8 05             	shr    al,0x5
10002bbe:	83 e2 01             	and    edx,0x1
10002bc1:	83 e0 01             	and    eax,0x1
10002bc4:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
10002bc7:	eb 0c                	jmp    10002bd5 <Gameport::readRaw(int)+0x41>
10002bc9:	c0 ea 06             	shr    dl,0x6
10002bcc:	c0 e8 07             	shr    al,0x7
10002bcf:	83 e2 01             	and    edx,0x1
10002bd2:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
10002bd5:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
10002bd8:	ba 01 02 00 00       	mov    edx,0x201
10002bdd:	b0 ff                	mov    al,0xff
10002bdf:	ee                   	out    dx,al
10002be0:	e8 fc ff ff ff       	call   10002be1 <Gameport::readRaw(int)+0x4d>	10002be1: R_386_PC32	lockScheduler()
10002be5:	4e                   	dec    esi
10002be6:	c7 44 24 0c ff ff 00 00 	mov    DWORD PTR [esp+0xc],0xffff
10002bee:	0f 94 c1             	sete   cl
10002bf1:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
10002bf6:	0f b6 f1             	movzx  esi,cl
10002bf9:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
10002bfe:	0f b6 c9             	movzx  ecx,cl
10002c01:	8d 74 76 01          	lea    esi,[esi+esi*2+0x1]
10002c05:	49                   	dec    ecx
10002c06:	31 ff                	xor    edi,edi
10002c08:	83 e1 fa             	and    ecx,0xfffffffa
10002c0b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
10002c13:	83 c1 08             	add    ecx,0x8
10002c16:	ba 01 02 00 00       	mov    edx,0x201
10002c1b:	ec                   	in     al,dx
10002c1c:	0f b6 c0             	movzx  eax,al
10002c1f:	85 f0                	test   eax,esi
10002c21:	0f 94 c2             	sete   dl
10002c24:	08 54 24 0a          	or     BYTE PTR [esp+0xa],dl
10002c28:	80 7c 24 0a 01       	cmp    BYTE PTR [esp+0xa],0x1
10002c2d:	83 54 24 04 00       	adc    DWORD PTR [esp+0x4],0x0
10002c32:	85 c8                	test   eax,ecx
10002c34:	0f 94 c0             	sete   al
10002c37:	08 44 24 0b          	or     BYTE PTR [esp+0xb],al
10002c3b:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
10002c40:	83 d7 00             	adc    edi,0x0
10002c43:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
10002c47:	75 19                	jne    10002c62 <Gameport::readRaw(int)+0xce>
10002c49:	e8 fc ff ff ff       	call   10002c4a <Gameport::readRaw(int)+0xb6>	10002c4a: R_386_PC32	unlockScheduler()
10002c4e:	81 ff ff ff 00 00    	cmp    edi,0xffff
10002c54:	74 1c                	je     10002c72 <Gameport::readRaw(int)+0xde>
10002c56:	81 7c 24 04 ff ff 00 00 	cmp    DWORD PTR [esp+0x4],0xffff
10002c5e:	75 15                	jne    10002c75 <Gameport::readRaw(int)+0xe1>
10002c60:	eb 10                	jmp    10002c72 <Gameport::readRaw(int)+0xde>
10002c62:	80 7c 24 0a 00       	cmp    BYTE PTR [esp+0xa],0x0
10002c67:	74 ad                	je     10002c16 <Gameport::readRaw(int)+0x82>
10002c69:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
10002c6e:	74 a6                	je     10002c16 <Gameport::readRaw(int)+0x82>
10002c70:	eb d7                	jmp    10002c49 <Gameport::readRaw(int)+0xb5>
10002c72:	80 23 ef             	and    BYTE PTR [ebx],0xef
10002c75:	89 7b 18             	mov    DWORD PTR [ebx+0x18],edi
10002c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10002c7c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10002c7f:	83 c4 10             	add    esp,0x10
10002c82:	89 d8                	mov    eax,ebx
10002c84:	5b                   	pop    ebx
10002c85:	5e                   	pop    esi
10002c86:	5f                   	pop    edi
10002c87:	c2 04 00             	ret    0x4

10002c8a <Gameport::open(int, int, void*)>:
10002c8a:	31 c0                	xor    eax,eax
10002c8c:	c3                   	ret    
10002c8d:	90                   	nop

10002c8e <Gameport::close(int, int, void*)>:
10002c8e:	31 c0                	xor    eax,eax
10002c90:	c3                   	ret    
10002c91:	90                   	nop

10002c92 <DMAChannel::DMAChannel(int)>:
10002c92:	55                   	push   ebp
10002c93:	89 e5                	mov    ebp,esp
10002c95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c98:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10002c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ca2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10002ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10002caf:	89 10                	mov    DWORD PTR [eax],edx
10002cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cb4:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10002cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cbe:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10002cc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cc8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
10002ccc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ccf:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
10002cd3:	83 7d 0c 03          	cmp    DWORD PTR [ebp+0xc],0x3
10002cd7:	0f 9f c2             	setg   dl
10002cda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cdd:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
10002ce0:	90                   	nop
10002ce1:	5d                   	pop    ebp
10002ce2:	c3                   	ret    
10002ce3:	90                   	nop

10002ce4 <DMAChannel::~DMAChannel()>:
10002ce4:	55                   	push   ebp
10002ce5:	89 e5                	mov    ebp,esp
10002ce7:	83 ec 08             	sub    esp,0x8
10002cea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ced:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10002cf0:	85 c0                	test   eax,eax
10002cf2:	74 19                	je     10002d0d <DMAChannel::~DMAChannel()+0x29>
10002cf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cf7:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10002cfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cfd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10002d00:	83 ec 08             	sub    esp,0x8
10002d03:	52                   	push   edx
10002d04:	50                   	push   eax
10002d05:	e8 fc ff ff ff       	call   10002d06 <DMAChannel::~DMAChannel()+0x22>	10002d06: R_386_PC32	Phys::freeDMA(unsigned long, unsigned long)
10002d0a:	83 c4 10             	add    esp,0x10
10002d0d:	90                   	nop
10002d0e:	c9                   	leave  
10002d0f:	c3                   	ret    

10002d10 <DMAChannel::getAddress()>:
10002d10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10002d14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10002d17:	c3                   	ret    

10002d18 <DMAChannel::getChannelNum()>:
10002d18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10002d1c:	8b 00                	mov    eax,DWORD PTR [eax]
10002d1e:	c3                   	ret    
10002d1f:	90                   	nop

10002d20 <DMAChannel::setLength(unsigned int)>:
10002d20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10002d24:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10002d28:	3d 00 00 01 00       	cmp    eax,0x10000
10002d2d:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10002d30:	76 0d                	jbe    10002d3f <DMAChannel::setLength(unsigned int)+0x1f>
10002d32:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	10002d36: R_386_32	dmaLong
10002d3a:	e9 fc ff ff ff       	jmp    10002d3b <DMAChannel::setLength(unsigned int)+0x1b>	10002d3b: R_386_PC32	Krnl::panic(char const*)
10002d3f:	c3                   	ret    

10002d40 <DMAChannel::setAddress(unsigned int)>:
10002d40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10002d44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10002d48:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10002d4b:	c3                   	ret    

10002d4c <DMAChannel::allocateAddressAndSet(unsigned short)>:
10002d4c:	56                   	push   esi
10002d4d:	53                   	push   ebx
10002d4e:	83 ec 10             	sub    esp,0x10
10002d51:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10002d55:	0f b7 74 24 20       	movzx  esi,WORD PTR [esp+0x20]
10002d5a:	56                   	push   esi
10002d5b:	e8 fc ff ff ff       	call   10002d5c <DMAChannel::allocateAddressAndSet(unsigned short)+0x10>	10002d5c: R_386_PC32	Phys::allocateDMA(unsigned long)
10002d60:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
10002d63:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10002d66:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10002d69:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10002d6c:	83 c4 14             	add    esp,0x14
10002d6f:	5b                   	pop    ebx
10002d70:	5e                   	pop    esi
10002d71:	c3                   	ret    

10002d72 <DMAChannel::setMode(unsigned char)>:
10002d72:	53                   	push   ebx
10002d73:	83 ec 08             	sub    esp,0x8
10002d76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002d7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002d7e:	80 7b 0d 00          	cmp    BYTE PTR [ebx+0xd],0x0
10002d82:	88 43 0f             	mov    BYTE PTR [ebx+0xf],al
10002d85:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
10002d89:	74 2a                	je     10002db5 <DMAChannel::setMode(unsigned char)+0x43>
10002d8b:	51                   	push   ecx
10002d8c:	51                   	push   ecx
10002d8d:	6a 01                	push   0x1
10002d8f:	53                   	push   ebx
10002d90:	e8 fc ff ff ff       	call   10002d91 <DMAChannel::setMode(unsigned char)+0x1f>	10002d91: R_386_PC32	DMAChannel::mask(bool)
10002d95:	80 7b 0e 01          	cmp    BYTE PTR [ebx+0xe],0x1
10002d99:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
10002d9c:	19 d2                	sbb    edx,edx
10002d9e:	80 e2 35             	and    dl,0x35
10002da1:	81 c2 d6 00 00 00    	add    edx,0xd6
10002da7:	ee                   	out    dx,al
10002da8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
10002dac:	83 c4 18             	add    esp,0x18
10002daf:	5b                   	pop    ebx
10002db0:	e9 ff 00 00 00       	jmp    10002eb4 <DMAChannel::unmask()>
10002db5:	83 c4 08             	add    esp,0x8
10002db8:	5b                   	pop    ebx
10002db9:	c3                   	ret    

10002dba <DMAChannel::start()>:
10002dba:	57                   	push   edi
10002dbb:	56                   	push   esi
10002dbc:	53                   	push   ebx
10002dbd:	83 ec 10             	sub    esp,0x10
10002dc0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10002dc4:	8b 06                	mov    eax,DWORD PTR [esi]
10002dc6:	83 f8 07             	cmp    eax,0x7
10002dc9:	0f 87 96 00 00 00    	ja     10002e65 <DMAChannel::start()+0xab>
10002dcf:	8a 98 50 59 00 10    	mov    bl,BYTE PTR [eax+0x10005950]	10002dd1: R_386_32	.text
10002dd5:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
10002dd9:	8a 98 58 59 00 10    	mov    bl,BYTE PTR [eax+0x10005958]	10002ddb: R_386_32	.text
10002ddf:	8a 80 60 59 00 10    	mov    al,BYTE PTR [eax+0x10005960]	10002de1: R_386_32	.text
10002de5:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
10002de9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
10002ded:	e8 fc ff ff ff       	call   10002dee <DMAChannel::start()+0x34>	10002dee: R_386_PC32	lockScheduler()
10002df2:	50                   	push   eax
10002df3:	50                   	push   eax
10002df4:	6a 01                	push   0x1
10002df6:	56                   	push   esi
10002df7:	e8 fc ff ff ff       	call   10002df8 <DMAChannel::start()+0x3e>	10002df8: R_386_PC32	DMAChannel::mask(bool)
10002dfc:	8a 5e 0e             	mov    bl,BYTE PTR [esi+0xe]
10002dff:	83 c4 10             	add    esp,0x10
10002e02:	80 fb 01             	cmp    bl,0x1
10002e05:	19 c9                	sbb    ecx,ecx
10002e07:	31 ff                	xor    edi,edi
10002e09:	80 e1 34             	and    cl,0x34
10002e0c:	89 f8                	mov    eax,edi
10002e0e:	81 c1 d8 00 00 00    	add    ecx,0xd8
10002e14:	89 ca                	mov    edx,ecx
10002e16:	ee                   	out    dx,al
10002e17:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
10002e1c:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
10002e1f:	ee                   	out    dx,al
10002e20:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10002e23:	c1 e8 08             	shr    eax,0x8
10002e26:	ee                   	out    dx,al
10002e27:	89 f8                	mov    eax,edi
10002e29:	89 ca                	mov    edx,ecx
10002e2b:	ee                   	out    dx,al
10002e2c:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
10002e2f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
10002e34:	8d 41 ff             	lea    eax,[ecx-0x1]
10002e37:	ee                   	out    dx,al
10002e38:	8d 41 ff             	lea    eax,[ecx-0x1]
10002e3b:	c1 e8 08             	shr    eax,0x8
10002e3e:	ee                   	out    dx,al
10002e3f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10002e42:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
10002e47:	c1 e8 10             	shr    eax,0x10
10002e4a:	ee                   	out    dx,al
10002e4b:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
10002e4f:	74 27                	je     10002e78 <DMAChannel::start()+0xbe>
10002e51:	80 fb 01             	cmp    bl,0x1
10002e54:	8a 46 0f             	mov    al,BYTE PTR [esi+0xf]
10002e57:	19 d2                	sbb    edx,edx
10002e59:	80 e2 35             	and    dl,0x35
10002e5c:	81 c2 d6 00 00 00    	add    edx,0xd6
10002e62:	ee                   	out    dx,al
10002e63:	eb 13                	jmp    10002e78 <DMAChannel::start()+0xbe>
10002e65:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	10002e69: R_386_32	dmaConfused
10002e6d:	83 c4 10             	add    esp,0x10
10002e70:	5b                   	pop    ebx
10002e71:	5e                   	pop    esi
10002e72:	5f                   	pop    edi
10002e73:	e9 fc ff ff ff       	jmp    10002e74 <DMAChannel::start()+0xba>	10002e74: R_386_PC32	Krnl::panic(char const*)
10002e78:	c6 46 0d 01          	mov    BYTE PTR [esi+0xd],0x1
10002e7c:	83 ec 0c             	sub    esp,0xc
10002e7f:	56                   	push   esi
10002e80:	e8 fc ff ff ff       	call   10002e81 <DMAChannel::start()+0xc7>	10002e81: R_386_PC32	DMAChannel::unmask()
10002e85:	83 c4 20             	add    esp,0x20
10002e88:	5b                   	pop    ebx
10002e89:	5e                   	pop    esi
10002e8a:	5f                   	pop    edi
10002e8b:	e9 fc ff ff ff       	jmp    10002e8c <DMAChannel::start()+0xd2>	10002e8c: R_386_PC32	unlockScheduler()

10002e90 <DMAChannel::stop()>:
10002e90:	c3                   	ret    
10002e91:	90                   	nop

10002e92 <DMAChannel::mask(bool)>:
10002e92:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
10002e97:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10002e9b:	0f 95 c0             	setne  al
10002e9e:	c1 e0 02             	shl    eax,0x2
10002ea1:	0b 02                	or     eax,DWORD PTR [edx]
10002ea3:	80 7a 0e 01          	cmp    BYTE PTR [edx+0xe],0x1
10002ea7:	19 d2                	sbb    edx,edx
10002ea9:	80 e2 36             	and    dl,0x36
10002eac:	81 c2 d4 00 00 00    	add    edx,0xd4
10002eb2:	ee                   	out    dx,al
10002eb3:	c3                   	ret    

10002eb4 <DMAChannel::unmask()>:
10002eb4:	6a 00                	push   0x0
10002eb6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10002eba:	e8 fc ff ff ff       	call   10002ebb <DMAChannel::unmask()+0x7>	10002ebb: R_386_PC32	DMAChannel::mask(bool)
10002ebf:	58                   	pop    eax
10002ec0:	5a                   	pop    edx
10002ec1:	c3                   	ret    

10002ec2 <DMA::DMA()>:
10002ec2:	55                   	push   ebp
10002ec3:	89 e5                	mov    ebp,esp
10002ec5:	83 ec 08             	sub    esp,0x8
10002ec8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ecb:	83 ec 08             	sub    esp,0x8
10002ece:	68 00 00 00 00       	push   0x0	10002ecf: R_386_32	dmaCtrlName
10002ed3:	50                   	push   eax
10002ed4:	e8 fc ff ff ff       	call   10002ed5 <DMA::DMA()+0x13>	10002ed5: R_386_PC32	Device::Device(char const*)
10002ed9:	83 c4 10             	add    esp,0x10
10002edc:	ba 08 00 00 00       	mov    edx,0x8	10002edd: R_386_32	vtable for DMA
10002ee1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ee4:	89 10                	mov    DWORD PTR [eax],edx
10002ee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ee9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
10002ef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ef3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002ef9:	0f b6 d0             	movzx  edx,al
10002efc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002eff:	66 c7 44 90 04 00 00 	mov    WORD PTR [eax+edx*4+0x4],0x0
10002f06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002f09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002f0f:	0f b6 d0             	movzx  edx,al
10002f12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002f15:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
10002f1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002f1d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002f23:	8d 50 01             	lea    edx,[eax+0x1]
10002f26:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10002f29:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10002f2f:	0f b6 d0             	movzx  edx,al
10002f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002f35:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10002f39:	83 e1 3f             	and    ecx,0x3f
10002f3c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10002f40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002f43:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002f49:	0f b6 d0             	movzx  edx,al
10002f4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002f4f:	66 c7 44 90 04 c0 00 	mov    WORD PTR [eax+edx*4+0x4],0xc0
10002f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002f59:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002f5f:	0f b6 d0             	movzx  edx,al
10002f62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002f65:	c6 44 90 06 20       	mov    BYTE PTR [eax+edx*4+0x6],0x20
10002f6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002f6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002f73:	8d 50 01             	lea    edx,[eax+0x1]
10002f76:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10002f79:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10002f7f:	0f b6 d0             	movzx  edx,al
10002f82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002f85:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10002f89:	83 e1 3f             	and    ecx,0x3f
10002f8c:	83 c9 40             	or     ecx,0x40
10002f8f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10002f93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002f96:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002f9c:	0f b6 d0             	movzx  edx,al
10002f9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002fa2:	66 c7 44 90 04 81 00 	mov    WORD PTR [eax+edx*4+0x4],0x81
10002fa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002fac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002fb2:	0f b6 d0             	movzx  edx,al
10002fb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002fb8:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
10002fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002fc0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002fc6:	8d 50 01             	lea    edx,[eax+0x1]
10002fc9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10002fcc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10002fd2:	0f b6 d0             	movzx  edx,al
10002fd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002fd8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10002fdc:	83 e1 3f             	and    ecx,0x3f
10002fdf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10002fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002fe6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002fec:	0f b6 d0             	movzx  edx,al
10002fef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ff2:	66 c7 44 90 04 87 00 	mov    WORD PTR [eax+edx*4+0x4],0x87
10002ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ffc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003002:	0f b6 d0             	movzx  edx,al
10003005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003008:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
1000300d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003010:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003016:	8d 50 01             	lea    edx,[eax+0x1]
10003019:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000301c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003022:	0f b6 d0             	movzx  edx,al
10003025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003028:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000302c:	83 e1 3f             	and    ecx,0x3f
1000302f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003036:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000303c:	0f b6 d0             	movzx  edx,al
1000303f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003042:	66 c7 44 90 04 89 00 	mov    WORD PTR [eax+edx*4+0x4],0x89
10003049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000304c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003052:	0f b6 d0             	movzx  edx,al
10003055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003058:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
1000305d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003060:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003066:	8d 50 01             	lea    edx,[eax+0x1]
10003069:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000306c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003072:	0f b6 d0             	movzx  edx,al
10003075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003078:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000307c:	83 e1 3f             	and    ecx,0x3f
1000307f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003086:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000308c:	0f b6 d0             	movzx  edx,al
1000308f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003092:	66 c7 44 90 04 8f 00 	mov    WORD PTR [eax+edx*4+0x4],0x8f
10003099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000309c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100030a2:	0f b6 d0             	movzx  edx,al
100030a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100030a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100030ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100030b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100030b6:	8d 50 01             	lea    edx,[eax+0x1]
100030b9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100030bc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100030c2:	0f b6 d0             	movzx  edx,al
100030c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100030c8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100030cc:	83 e1 3f             	and    ecx,0x3f
100030cf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100030d3:	90                   	nop
100030d4:	c9                   	leave  
100030d5:	c3                   	ret    

100030d6 <DMA::getAvailable()>:
100030d6:	53                   	push   ebx
100030d7:	31 db                	xor    ebx,ebx
100030d9:	83 ec 08             	sub    esp,0x8
100030dc:	e8 fc ff ff ff       	call   100030dd <DMA::getAvailable()+0x7>	100030dd: R_386_PC32	lockScheduler()
100030e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100030e5:	0f b6 80 58 01 00 00 	movzx  eax,BYTE PTR [eax+0x158]
100030ec:	0f a3 d8             	bt     eax,ebx
100030ef:	73 07                	jae    100030f8 <DMA::getAvailable()+0x22>
100030f1:	e8 fc ff ff ff       	call   100030f2 <DMA::getAvailable()+0x1c>	100030f2: R_386_PC32	unlockScheduler()
100030f6:	eb 0e                	jmp    10003106 <DMA::getAvailable()+0x30>
100030f8:	43                   	inc    ebx
100030f9:	83 fb 08             	cmp    ebx,0x8
100030fc:	75 ee                	jne    100030ec <DMA::getAvailable()+0x16>
100030fe:	e8 fc ff ff ff       	call   100030ff <DMA::getAvailable()+0x29>	100030ff: R_386_PC32	unlockScheduler()
10003103:	83 cb ff             	or     ebx,0xffffffff
10003106:	89 d8                	mov    eax,ebx
10003108:	83 c4 08             	add    esp,0x8
1000310b:	5b                   	pop    ebx
1000310c:	c3                   	ret    
1000310d:	90                   	nop

1000310e <DMA::open(int, int, void*)>:
1000310e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003112:	c6 80 58 01 00 00 ee 	mov    BYTE PTR [eax+0x158],0xee
10003119:	31 c0                	xor    eax,eax
1000311b:	e6 0d                	out    0xd,al
1000311d:	e6 da                	out    0xda,al
1000311f:	31 c0                	xor    eax,eax
10003121:	c3                   	ret    

10003122 <DMA::close(int, int, void*)>:
10003122:	31 c0                	xor    eax,eax
10003124:	c3                   	ret    
10003125:	90                   	nop

10003126 <DMA::tryLockChannelWithBase(int)>:
10003126:	56                   	push   esi
10003127:	53                   	push   ebx
10003128:	83 ec 14             	sub    esp,0x14
1000312b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
1000312f:	e8 fc ff ff ff       	call   10003130 <DMA::tryLockChannelWithBase(int)+0xa>	10003130: R_386_PC32	lockScheduler()
10003134:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10003138:	8d 43 03             	lea    eax,[ebx+0x3]
1000313b:	39 d8                	cmp    eax,ebx
1000313d:	7c 47                	jl     10003186 <DMA::tryLockChannelWithBase(int)+0x60>
1000313f:	0f b6 8e 58 01 00 00 	movzx  ecx,BYTE PTR [esi+0x158]
10003146:	89 ca                	mov    edx,ecx
10003148:	0f a3 d9             	bt     ecx,ebx
1000314b:	73 36                	jae    10003183 <DMA::tryLockChannelWithBase(int)+0x5d>
1000314d:	83 ec 0c             	sub    esp,0xc
10003150:	88 d9                	mov    cl,bl
10003152:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10003157:	d3 c0                	rol    eax,cl
10003159:	21 d0                	and    eax,edx
1000315b:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10003161:	6a 18                	push   0x18
10003163:	e8 fc ff ff ff       	call   10003164 <DMA::tryLockChannelWithBase(int)+0x3e>	10003164: R_386_PC32	malloc
10003168:	5a                   	pop    edx
10003169:	59                   	pop    ecx
1000316a:	53                   	push   ebx
1000316b:	50                   	push   eax
1000316c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003170:	e8 fc ff ff ff       	call   10003171 <DMA::tryLockChannelWithBase(int)+0x4b>	10003171: R_386_PC32	DMAChannel::DMAChannel(int)
10003175:	e8 fc ff ff ff       	call   10003176 <DMA::tryLockChannelWithBase(int)+0x50>	10003176: R_386_PC32	unlockScheduler()
1000317a:	83 c4 10             	add    esp,0x10
1000317d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003181:	eb 0a                	jmp    1000318d <DMA::tryLockChannelWithBase(int)+0x67>
10003183:	43                   	inc    ebx
10003184:	eb b5                	jmp    1000313b <DMA::tryLockChannelWithBase(int)+0x15>
10003186:	e8 fc ff ff ff       	call   10003187 <DMA::tryLockChannelWithBase(int)+0x61>	10003187: R_386_PC32	unlockScheduler()
1000318b:	31 c0                	xor    eax,eax
1000318d:	83 c4 14             	add    esp,0x14
10003190:	5b                   	pop    ebx
10003191:	5e                   	pop    esi
10003192:	c3                   	ret    
10003193:	90                   	nop

10003194 <DMA::lockChannelWithBase(int)>:
10003194:	83 ec 0c             	sub    esp,0xc
10003197:	50                   	push   eax
10003198:	50                   	push   eax
10003199:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000319d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100031a1:	e8 fc ff ff ff       	call   100031a2 <DMA::lockChannelWithBase(int)+0xe>	100031a2: R_386_PC32	DMA::tryLockChannelWithBase(int)
100031a6:	83 c4 10             	add    esp,0x10
100031a9:	85 c0                	test   eax,eax
100031ab:	74 ea                	je     10003197 <DMA::lockChannelWithBase(int)+0x3>
100031ad:	83 c4 0c             	add    esp,0xc
100031b0:	c3                   	ret    
100031b1:	90                   	nop

100031b2 <DMA::tryLockChannel8()>:
100031b2:	83 ec 14             	sub    esp,0x14
100031b5:	6a 00                	push   0x0
100031b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100031bb:	e8 fc ff ff ff       	call   100031bc <DMA::tryLockChannel8()+0xa>	100031bc: R_386_PC32	DMA::tryLockChannelWithBase(int)
100031c0:	83 c4 1c             	add    esp,0x1c
100031c3:	c3                   	ret    

100031c4 <DMA::tryLockChannel16()>:
100031c4:	83 ec 14             	sub    esp,0x14
100031c7:	6a 04                	push   0x4
100031c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100031cd:	e8 fc ff ff ff       	call   100031ce <DMA::tryLockChannel16()+0xa>	100031ce: R_386_PC32	DMA::tryLockChannelWithBase(int)
100031d2:	83 c4 1c             	add    esp,0x1c
100031d5:	c3                   	ret    

100031d6 <DMA::tryLockChannel(int)>:
100031d6:	56                   	push   esi
100031d7:	53                   	push   ebx
100031d8:	83 ec 14             	sub    esp,0x14
100031db:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100031df:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100031e3:	83 fb 07             	cmp    ebx,0x7
100031e6:	76 12                	jbe    100031fa <DMA::tryLockChannel(int)+0x24>
100031e8:	83 ec 0c             	sub    esp,0xc
100031eb:	68 68 59 00 10       	push   0x10005968	100031ec: R_386_32	.text
100031f0:	e8 fc ff ff ff       	call   100031f1 <DMA::tryLockChannel(int)+0x1b>	100031f1: R_386_PC32	Dbg::kprintf(char const*, ...)
100031f5:	83 c4 10             	add    esp,0x10
100031f8:	eb 4e                	jmp    10003248 <DMA::tryLockChannel(int)+0x72>
100031fa:	e8 fc ff ff ff       	call   100031fb <DMA::tryLockChannel(int)+0x25>	100031fb: R_386_PC32	lockScheduler()
100031ff:	0f b6 86 58 01 00 00 	movzx  eax,BYTE PTR [esi+0x158]
10003206:	89 c2                	mov    edx,eax
10003208:	0f a3 d8             	bt     eax,ebx
1000320b:	73 36                	jae    10003243 <DMA::tryLockChannel(int)+0x6d>
1000320d:	83 ec 0c             	sub    esp,0xc
10003210:	88 d9                	mov    cl,bl
10003212:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10003217:	d3 c0                	rol    eax,cl
10003219:	21 d0                	and    eax,edx
1000321b:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10003221:	6a 18                	push   0x18
10003223:	e8 fc ff ff ff       	call   10003224 <DMA::tryLockChannel(int)+0x4e>	10003224: R_386_PC32	malloc
10003228:	5a                   	pop    edx
10003229:	59                   	pop    ecx
1000322a:	53                   	push   ebx
1000322b:	50                   	push   eax
1000322c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003230:	e8 fc ff ff ff       	call   10003231 <DMA::tryLockChannel(int)+0x5b>	10003231: R_386_PC32	DMAChannel::DMAChannel(int)
10003235:	e8 fc ff ff ff       	call   10003236 <DMA::tryLockChannel(int)+0x60>	10003236: R_386_PC32	unlockScheduler()
1000323a:	83 c4 10             	add    esp,0x10
1000323d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003241:	eb 07                	jmp    1000324a <DMA::tryLockChannel(int)+0x74>
10003243:	e8 fc ff ff ff       	call   10003244 <DMA::tryLockChannel(int)+0x6e>	10003244: R_386_PC32	unlockScheduler()
10003248:	31 c0                	xor    eax,eax
1000324a:	83 c4 14             	add    esp,0x14
1000324d:	5b                   	pop    ebx
1000324e:	5e                   	pop    esi
1000324f:	c3                   	ret    

10003250 <DMA::lockChannel8()>:
10003250:	83 ec 14             	sub    esp,0x14
10003253:	6a 00                	push   0x0
10003255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003259:	e8 fc ff ff ff       	call   1000325a <DMA::lockChannel8()+0xa>	1000325a: R_386_PC32	DMA::lockChannelWithBase(int)
1000325e:	83 c4 1c             	add    esp,0x1c
10003261:	c3                   	ret    

10003262 <DMA::lockChannel16()>:
10003262:	83 ec 14             	sub    esp,0x14
10003265:	6a 04                	push   0x4
10003267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000326b:	e8 fc ff ff ff       	call   1000326c <DMA::lockChannel16()+0xa>	1000326c: R_386_PC32	DMA::lockChannelWithBase(int)
10003270:	83 c4 1c             	add    esp,0x1c
10003273:	c3                   	ret    

10003274 <DMA::lockChannel(int)>:
10003274:	83 ec 0c             	sub    esp,0xc
10003277:	50                   	push   eax
10003278:	50                   	push   eax
10003279:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000327d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003281:	e8 fc ff ff ff       	call   10003282 <DMA::lockChannel(int)+0xe>	10003282: R_386_PC32	DMA::tryLockChannel(int)
10003286:	83 c4 10             	add    esp,0x10
10003289:	85 c0                	test   eax,eax
1000328b:	74 ea                	je     10003277 <DMA::lockChannel(int)+0x3>
1000328d:	83 c4 0c             	add    esp,0xc
10003290:	c3                   	ret    
10003291:	90                   	nop

10003292 <DMA::unlockChannel(DMAChannel*)>:
10003292:	56                   	push   esi
10003293:	53                   	push   ebx
10003294:	53                   	push   ebx
10003295:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10003299:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000329d:	85 db                	test   ebx,ebx
1000329f:	75 10                	jne    100032b1 <DMA::unlockChannel(DMAChannel*)+0x1f>
100032a1:	83 ec 0c             	sub    esp,0xc
100032a4:	68 00 00 00 00       	push   0x0	100032a5: R_386_32	badDma
100032a9:	e8 fc ff ff ff       	call   100032aa <DMA::unlockChannel(DMAChannel*)+0x18>	100032aa: R_386_PC32	Krnl::panic(char const*)
100032ae:	83 c4 10             	add    esp,0x10
100032b1:	e8 fc ff ff ff       	call   100032b2 <DMA::unlockChannel(DMAChannel*)+0x20>	100032b2: R_386_PC32	lockScheduler()
100032b6:	0f b6 96 58 01 00 00 	movzx  edx,BYTE PTR [esi+0x158]
100032bd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
100032bf:	89 d0                	mov    eax,edx
100032c1:	0f a3 ca             	bt     edx,ecx
100032c4:	72 24                	jb     100032ea <DMA::unlockChannel(DMAChannel*)+0x58>
100032c6:	83 ec 0c             	sub    esp,0xc
100032c9:	ba 01 00 00 00       	mov    edx,0x1
100032ce:	d3 e2                	shl    edx,cl
100032d0:	09 d0                	or     eax,edx
100032d2:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
100032d8:	53                   	push   ebx
100032d9:	e8 fc ff ff ff       	call   100032da <DMA::unlockChannel(DMAChannel*)+0x48>	100032da: R_386_PC32	DMAChannel::~DMAChannel()
100032de:	5a                   	pop    edx
100032df:	59                   	pop    ecx
100032e0:	6a 18                	push   0x18
100032e2:	53                   	push   ebx
100032e3:	e8 fc ff ff ff       	call   100032e4 <DMA::unlockChannel(DMAChannel*)+0x52>	100032e4: R_386_PC32	operator delete(void*, unsigned long)
100032e8:	eb 0d                	jmp    100032f7 <DMA::unlockChannel(DMAChannel*)+0x65>
100032ea:	83 ec 0c             	sub    esp,0xc
100032ed:	68 00 00 00 00       	push   0x0	100032ee: R_386_32	badBook
100032f2:	e8 fc ff ff ff       	call   100032f3 <DMA::unlockChannel(DMAChannel*)+0x61>	100032f3: R_386_PC32	Krnl::panic(char const*)
100032f7:	83 c4 10             	add    esp,0x10
100032fa:	58                   	pop    eax
100032fb:	5b                   	pop    ebx
100032fc:	5e                   	pop    esi
100032fd:	e9 fc ff ff ff       	jmp    100032fe <DMA::unlockChannel(DMAChannel*)+0x6c>	100032fe: R_386_PC32	unlockScheduler()

10003302 <PS2::PS2()>:
10003302:	55                   	push   ebp
10003303:	89 e5                	mov    ebp,esp
10003305:	83 ec 08             	sub    esp,0x8
10003308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000330b:	83 ec 08             	sub    esp,0x8
1000330e:	68 00 00 00 00       	push   0x0	1000330f: R_386_32	ps2ctrlname
10003313:	50                   	push   eax
10003314:	e8 fc ff ff ff       	call   10003315 <PS2::PS2()+0x13>	10003315: R_386_PC32	Bus::Bus(char const*)
10003319:	83 c4 10             	add    esp,0x10
1000331c:	ba 08 00 00 00       	mov    edx,0x8	1000331d: R_386_32	vtable for PS2
10003321:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003324:	89 10                	mov    DWORD PTR [eax],edx
10003326:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003329:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000332f:	0f b6 d0             	movzx  edx,al
10003332:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003335:	66 c7 44 90 04 60 00 	mov    WORD PTR [eax+edx*4+0x4],0x60
1000333c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000333f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003345:	0f b6 d0             	movzx  edx,al
10003348:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000334b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10003350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003353:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003359:	8d 50 01             	lea    edx,[eax+0x1]
1000335c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000335f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003365:	0f b6 d0             	movzx  edx,al
10003368:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000336b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000336f:	83 e1 3f             	and    ecx,0x3f
10003372:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003379:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000337f:	0f b6 d0             	movzx  edx,al
10003382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003385:	66 c7 44 90 04 64 00 	mov    WORD PTR [eax+edx*4+0x4],0x64
1000338c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000338f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003395:	0f b6 d0             	movzx  edx,al
10003398:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000339b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100033a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033a9:	8d 50 01             	lea    edx,[eax+0x1]
100033ac:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100033af:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100033b5:	0f b6 d0             	movzx  edx,al
100033b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033bb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100033bf:	83 e1 3f             	and    ecx,0x3f
100033c2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100033c6:	90                   	nop
100033c7:	c9                   	leave  
100033c8:	c3                   	ret    
100033c9:	90                   	nop

100033ca <PS2::open(int, int, void*)>:
100033ca:	55                   	push   ebp
100033cb:	89 e5                	mov    ebp,esp
100033cd:	53                   	push   ebx
100033ce:	83 ec 24             	sub    esp,0x24
100033d1:	e8 fc ff ff ff       	call   100033d2 <PS2::open(int, int, void*)+0x8>	100033d2: R_386_PC32	lockScheduler()
100033d6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100033dd:	83 ec 08             	sub    esp,0x8
100033e0:	68 ad 00 00 00       	push   0xad
100033e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100033e8:	e8 fc ff ff ff       	call   100033e9 <PS2::open(int, int, void*)+0x1f>	100033e9: R_386_PC32	PS2::controllerWrite(unsigned char)
100033ed:	83 c4 10             	add    esp,0x10
100033f0:	83 ec 08             	sub    esp,0x8
100033f3:	68 a7 00 00 00       	push   0xa7
100033f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100033fb:	e8 fc ff ff ff       	call   100033fc <PS2::open(int, int, void*)+0x32>	100033fc: R_386_PC32	PS2::controllerWrite(unsigned char)
10003400:	83 c4 10             	add    esp,0x10
10003403:	66 c7 45 e4 60 00    	mov    WORD PTR [ebp-0x1c],0x60
10003409:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000340c:	89 c2                	mov    edx,eax
1000340e:	ec                   	in     al,dx
1000340f:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
10003412:	66 c7 45 e8 60 00    	mov    WORD PTR [ebp-0x18],0x60
10003418:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000341b:	89 c2                	mov    edx,eax
1000341d:	ec                   	in     al,dx
1000341e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
10003421:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10003427:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000342a:	89 c2                	mov    edx,eax
1000342c:	ec                   	in     al,dx
1000342d:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10003430:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003436:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003439:	89 c2                	mov    edx,eax
1000343b:	ec                   	in     al,dx
1000343c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000343f:	83 ec 08             	sub    esp,0x8
10003442:	68 aa 00 00 00       	push   0xaa
10003447:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000344a:	e8 fc ff ff ff       	call   1000344b <PS2::open(int, int, void*)+0x81>	1000344b: R_386_PC32	PS2::controllerWrite(unsigned char)
1000344f:	83 c4 10             	add    esp,0x10
10003452:	83 ec 0c             	sub    esp,0xc
10003455:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003458:	e8 fc ff ff ff       	call   10003459 <PS2::open(int, int, void*)+0x8f>	10003459: R_386_PC32	PS2::controllerRead()
1000345d:	83 c4 10             	add    esp,0x10
10003460:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003463:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10003467:	74 65                	je     100034ce <PS2::open(int, int, void*)+0x104>
10003469:	83 ec 0c             	sub    esp,0xc
1000346c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000346f:	e8 fc ff ff ff       	call   10003470 <PS2::open(int, int, void*)+0xa6>	10003470: R_386_PC32	PS2::controllerRead()
10003474:	83 c4 10             	add    esp,0x10
10003477:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000347a:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
1000347e:	74 4e                	je     100034ce <PS2::open(int, int, void*)+0x104>
10003480:	83 ec 08             	sub    esp,0x8
10003483:	68 aa 00 00 00       	push   0xaa
10003488:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000348b:	e8 fc ff ff ff       	call   1000348c <PS2::open(int, int, void*)+0xc2>	1000348c: R_386_PC32	PS2::controllerWrite(unsigned char)
10003490:	83 c4 10             	add    esp,0x10
10003493:	83 ec 08             	sub    esp,0x8
10003496:	68 aa 00 00 00       	push   0xaa
1000349b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000349e:	e8 fc ff ff ff       	call   1000349f <PS2::open(int, int, void*)+0xd5>	1000349f: R_386_PC32	PS2::controllerWrite(unsigned char)
100034a3:	83 c4 10             	add    esp,0x10
100034a6:	83 ec 0c             	sub    esp,0xc
100034a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100034ac:	e8 fc ff ff ff       	call   100034ad <PS2::open(int, int, void*)+0xe3>	100034ad: R_386_PC32	PS2::controllerRead()
100034b1:	83 c4 10             	add    esp,0x10
100034b4:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100034b7:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
100034bb:	74 11                	je     100034ce <PS2::open(int, int, void*)+0x104>
100034bd:	83 ec 0c             	sub    esp,0xc
100034c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100034c3:	e8 fc ff ff ff       	call   100034c4 <PS2::open(int, int, void*)+0xfa>	100034c4: R_386_PC32	PS2::controllerRead()
100034c8:	83 c4 10             	add    esp,0x10
100034cb:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100034ce:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
100034d5:	83 ec 08             	sub    esp,0x8
100034d8:	6a 20                	push   0x20
100034da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100034dd:	e8 fc ff ff ff       	call   100034de <PS2::open(int, int, void*)+0x114>	100034de: R_386_PC32	PS2::controllerWrite(unsigned char)
100034e2:	83 c4 10             	add    esp,0x10
100034e5:	83 ec 0c             	sub    esp,0xc
100034e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100034eb:	e8 fc ff ff ff       	call   100034ec <PS2::open(int, int, void*)+0x122>	100034ec: R_386_PC32	PS2::controllerRead()
100034f0:	83 c4 10             	add    esp,0x10
100034f3:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
100034f6:	80 4d f2 01          	or     BYTE PTR [ebp-0xe],0x1
100034fa:	80 4d f2 02          	or     BYTE PTR [ebp-0xe],0x2
100034fe:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
10003502:	83 ec 04             	sub    esp,0x4
10003505:	50                   	push   eax
10003506:	6a 60                	push   0x60
10003508:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000350b:	e8 fc ff ff ff       	call   1000350c <PS2::open(int, int, void*)+0x142>	1000350c: R_386_PC32	PS2::controllerWrite(unsigned char, unsigned char)
10003510:	83 c4 10             	add    esp,0x10
10003513:	83 ec 08             	sub    esp,0x8
10003516:	68 ae 00 00 00       	push   0xae
1000351b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000351e:	e8 fc ff ff ff       	call   1000351f <PS2::open(int, int, void*)+0x155>	1000351f: R_386_PC32	PS2::controllerWrite(unsigned char)
10003523:	83 c4 10             	add    esp,0x10
10003526:	83 ec 08             	sub    esp,0x8
10003529:	68 a8 00 00 00       	push   0xa8
1000352e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003531:	e8 fc ff ff ff       	call   10003532 <PS2::open(int, int, void*)+0x168>	10003532: R_386_PC32	PS2::controllerWrite(unsigned char)
10003536:	83 c4 10             	add    esp,0x10
10003539:	e8 fc ff ff ff       	call   1000353a <PS2::open(int, int, void*)+0x170>	1000353a: R_386_PC32	unlockScheduler()
1000353e:	c7 45 dc 60 01 00 00 	mov    DWORD PTR [ebp-0x24],0x160
10003545:	83 ec 0c             	sub    esp,0xc
10003548:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000354b:	e8 fc ff ff ff       	call   1000354c <PS2::open(int, int, void*)+0x182>	1000354c: R_386_PC32	malloc
10003550:	83 c4 10             	add    esp,0x10
10003553:	89 c3                	mov    ebx,eax
10003555:	83 ec 0c             	sub    esp,0xc
10003558:	53                   	push   ebx
10003559:	e8 fc ff ff ff       	call   1000355a <PS2::open(int, int, void*)+0x190>	1000355a: R_386_PC32	PS2Port::PS2Port()
1000355e:	83 c4 10             	add    esp,0x10
10003561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003564:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
1000356a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000356d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10003570:	8b 92 58 01 00 00    	mov    edx,DWORD PTR [edx+0x158]
10003576:	83 ec 08             	sub    esp,0x8
10003579:	52                   	push   edx
1000357a:	50                   	push   eax
1000357b:	e8 fc ff ff ff       	call   1000357c <PS2::open(int, int, void*)+0x1b2>	1000357c: R_386_PC32	Device::addChild(Device*)
10003580:	83 c4 10             	add    esp,0x10
10003583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003586:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
1000358c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000358f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10003595:	8b 00                	mov    eax,DWORD PTR [eax]
10003597:	83 c0 08             	add    eax,0x8
1000359a:	8b 00                	mov    eax,DWORD PTR [eax]
1000359c:	6a 00                	push   0x0
1000359e:	6a 00                	push   0x0
100035a0:	6a 00                	push   0x0
100035a2:	52                   	push   edx
100035a3:	ff d0                	call   eax
100035a5:	83 c4 10             	add    esp,0x10
100035a8:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
100035ac:	75 6a                	jne    10003618 <PS2::open(int, int, void*)+0x24e>
100035ae:	c7 45 d8 60 01 00 00 	mov    DWORD PTR [ebp-0x28],0x160
100035b5:	83 ec 0c             	sub    esp,0xc
100035b8:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100035bb:	e8 fc ff ff ff       	call   100035bc <PS2::open(int, int, void*)+0x1f2>	100035bc: R_386_PC32	malloc
100035c0:	83 c4 10             	add    esp,0x10
100035c3:	89 c3                	mov    ebx,eax
100035c5:	83 ec 0c             	sub    esp,0xc
100035c8:	53                   	push   ebx
100035c9:	e8 fc ff ff ff       	call   100035ca <PS2::open(int, int, void*)+0x200>	100035ca: R_386_PC32	PS2Port::PS2Port()
100035ce:	83 c4 10             	add    esp,0x10
100035d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100035d4:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
100035da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100035dd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100035e0:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
100035e6:	83 ec 08             	sub    esp,0x8
100035e9:	52                   	push   edx
100035ea:	50                   	push   eax
100035eb:	e8 fc ff ff ff       	call   100035ec <PS2::open(int, int, void*)+0x222>	100035ec: R_386_PC32	Device::addChild(Device*)
100035f0:	83 c4 10             	add    esp,0x10
100035f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100035f6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
100035fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100035ff:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10003605:	8b 00                	mov    eax,DWORD PTR [eax]
10003607:	83 c0 08             	add    eax,0x8
1000360a:	8b 00                	mov    eax,DWORD PTR [eax]
1000360c:	6a 00                	push   0x0
1000360e:	6a 00                	push   0x0
10003610:	6a 01                	push   0x1
10003612:	52                   	push   edx
10003613:	ff d0                	call   eax
10003615:	83 c4 10             	add    esp,0x10
10003618:	b8 00 00 00 00       	mov    eax,0x0
1000361d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10003620:	c9                   	leave  
10003621:	c3                   	ret    

10003622 <PS2::close(int, int, void*)>:
10003622:	b8 00 00 00 00       	mov    eax,0x0
10003627:	c3                   	ret    

10003628 <PS2::detect()>:
10003628:	90                   	nop
10003629:	c3                   	ret    

1000362a <PS2::controllerWrite(unsigned char)>:
1000362a:	55                   	push   ebp
1000362b:	89 e5                	mov    ebp,esp
1000362d:	83 ec 14             	sub    esp,0x14
10003630:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10003633:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10003636:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000363d:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003643:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003646:	89 c2                	mov    edx,eax
10003648:	ec                   	in     al,dx
10003649:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000364c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000364f:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003652:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003656:	83 e0 40             	and    eax,0x40
10003659:	85 c0                	test   eax,eax
1000365b:	75 2d                	jne    1000368a <PS2::controllerWrite(unsigned char)+0x60>
1000365d:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003660:	84 c0                	test   al,al
10003662:	78 26                	js     1000368a <PS2::controllerWrite(unsigned char)+0x60>
10003664:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003668:	83 e0 02             	and    eax,0x2
1000366b:	85 c0                	test   eax,eax
1000366d:	74 17                	je     10003686 <PS2::controllerWrite(unsigned char)+0x5c>
1000366f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003672:	8d 50 01             	lea    edx,[eax+0x1]
10003675:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003678:	3d 20 03 00 00       	cmp    eax,0x320
1000367d:	0f 94 c0             	sete   al
10003680:	84 c0                	test   al,al
10003682:	75 05                	jne    10003689 <PS2::controllerWrite(unsigned char)+0x5f>
10003684:	eb b7                	jmp    1000363d <PS2::controllerWrite(unsigned char)+0x13>
10003686:	90                   	nop
10003687:	eb 01                	jmp    1000368a <PS2::controllerWrite(unsigned char)+0x60>
10003689:	90                   	nop
1000368a:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
1000368e:	66 c7 45 f4 64 00    	mov    WORD PTR [ebp-0xc],0x64
10003694:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003697:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000369a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000369d:	ee                   	out    dx,al
1000369e:	b0 01                	mov    al,0x1
100036a0:	c9                   	leave  
100036a1:	c3                   	ret    

100036a2 <PS2::controllerWrite(unsigned char, unsigned char)>:
100036a2:	55                   	push   ebp
100036a3:	89 e5                	mov    ebp,esp
100036a5:	83 ec 28             	sub    esp,0x28
100036a8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100036ab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100036ae:	88 55 dc             	mov    BYTE PTR [ebp-0x24],dl
100036b1:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
100036b4:	0f b6 45 dc          	movzx  eax,BYTE PTR [ebp-0x24]
100036b8:	50                   	push   eax
100036b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100036bc:	e8 fc ff ff ff       	call   100036bd <PS2::controllerWrite(unsigned char, unsigned char)+0x1b>	100036bd: R_386_PC32	PS2::controllerWrite(unsigned char)
100036c1:	83 c4 08             	add    esp,0x8
100036c4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
100036cb:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
100036d1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100036d4:	89 c2                	mov    edx,eax
100036d6:	ec                   	in     al,dx
100036d7:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100036da:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
100036dd:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
100036e0:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
100036e4:	83 e0 40             	and    eax,0x40
100036e7:	85 c0                	test   eax,eax
100036e9:	75 07                	jne    100036f2 <PS2::controllerWrite(unsigned char, unsigned char)+0x50>
100036eb:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
100036ee:	84 c0                	test   al,al
100036f0:	79 18                	jns    1000370a <PS2::controllerWrite(unsigned char, unsigned char)+0x68>
100036f2:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
100036f6:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
100036fc:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100036ff:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003702:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003705:	ee                   	out    dx,al
10003706:	b0 00                	mov    al,0x0
10003708:	eb 4f                	jmp    10003759 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
1000370a:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
1000370e:	83 e0 02             	and    eax,0x2
10003711:	85 c0                	test   eax,eax
10003713:	74 2d                	je     10003742 <PS2::controllerWrite(unsigned char, unsigned char)+0xa0>
10003715:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003718:	8d 50 01             	lea    edx,[eax+0x1]
1000371b:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000371e:	3d 20 03 00 00       	cmp    eax,0x320
10003723:	0f 94 c0             	sete   al
10003726:	84 c0                	test   al,al
10003728:	74 a1                	je     100036cb <PS2::controllerWrite(unsigned char, unsigned char)+0x29>
1000372a:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
1000372e:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003734:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003737:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
1000373a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
1000373d:	ee                   	out    dx,al
1000373e:	b0 00                	mov    al,0x0
10003740:	eb 17                	jmp    10003759 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10003742:	90                   	nop
10003743:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003747:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
1000374d:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10003750:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10003753:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10003756:	ee                   	out    dx,al
10003757:	b0 01                	mov    al,0x1
10003759:	c9                   	leave  
1000375a:	c3                   	ret    
1000375b:	90                   	nop

1000375c <PS2::controllerRead()>:
1000375c:	55                   	push   ebp
1000375d:	89 e5                	mov    ebp,esp
1000375f:	83 ec 20             	sub    esp,0x20
10003762:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003769:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
1000376f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003772:	89 c2                	mov    edx,eax
10003774:	ec                   	in     al,dx
10003775:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003778:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000377b:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
1000377e:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003782:	83 e0 40             	and    eax,0x40
10003785:	85 c0                	test   eax,eax
10003787:	75 07                	jne    10003790 <PS2::controllerRead()+0x34>
10003789:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
1000378c:	84 c0                	test   al,al
1000378e:	79 04                	jns    10003794 <PS2::controllerRead()+0x38>
10003790:	b0 00                	mov    al,0x0
10003792:	eb 48                	jmp    100037dc <PS2::controllerRead()+0x80>
10003794:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003798:	83 e0 01             	and    eax,0x1
1000379b:	85 c0                	test   eax,eax
1000379d:	75 29                	jne    100037c8 <PS2::controllerRead()+0x6c>
1000379f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100037a2:	8d 50 01             	lea    edx,[eax+0x1]
100037a5:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100037a8:	3d 40 06 00 00       	cmp    eax,0x640
100037ad:	0f 94 c0             	sete   al
100037b0:	84 c0                	test   al,al
100037b2:	74 b5                	je     10003769 <PS2::controllerRead()+0xd>
100037b4:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
100037ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100037bd:	89 c2                	mov    edx,eax
100037bf:	ec                   	in     al,dx
100037c0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100037c3:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100037c6:	eb 14                	jmp    100037dc <PS2::controllerRead()+0x80>
100037c8:	90                   	nop
100037c9:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
100037cf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100037d2:	89 c2                	mov    edx,eax
100037d4:	ec                   	in     al,dx
100037d5:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100037d8:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100037db:	90                   	nop
100037dc:	c9                   	leave  
100037dd:	c3                   	ret    

100037de <PS2Keyboard::PS2Keyboard()>:
100037de:	55                   	push   ebp
100037df:	89 e5                	mov    ebp,esp
100037e1:	83 ec 08             	sub    esp,0x8
100037e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100037e7:	83 ec 08             	sub    esp,0x8
100037ea:	68 00 00 00 00       	push   0x0	100037eb: R_386_32	ps2keyname
100037ef:	50                   	push   eax
100037f0:	e8 fc ff ff ff       	call   100037f1 <PS2Keyboard::PS2Keyboard()+0x13>	100037f1: R_386_PC32	Keyboard::Keyboard(char const*)
100037f5:	83 c4 10             	add    esp,0x10
100037f8:	ba 08 00 00 00       	mov    edx,0x8	100037f9: R_386_32	vtable for PS2Keyboard
100037fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003800:	89 10                	mov    DWORD PTR [eax],edx
10003802:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003805:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
1000380c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000380f:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10003816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003819:	c6 80 66 01 00 00 00 	mov    BYTE PTR [eax+0x166],0x0
10003820:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003823:	c6 80 67 01 00 00 00 	mov    BYTE PTR [eax+0x167],0x0
1000382a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000382d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10003834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003837:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
1000383e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003841:	c6 80 6a 01 00 00 00 	mov    BYTE PTR [eax+0x16a],0x0
10003848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000384b:	c6 80 6b 01 00 00 00 	mov    BYTE PTR [eax+0x16b],0x0
10003852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003855:	c6 80 6c 01 00 00 00 	mov    BYTE PTR [eax+0x16c],0x0
1000385c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000385f:	c6 80 6d 01 00 00 00 	mov    BYTE PTR [eax+0x16d],0x0
10003866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003869:	c6 80 6e 01 00 00 00 	mov    BYTE PTR [eax+0x16e],0x0
10003870:	90                   	nop
10003871:	c9                   	leave  
10003872:	c3                   	ret    
10003873:	90                   	nop

10003874 <PS2Keyboard::~PS2Keyboard()>:
10003874:	55                   	push   ebp
10003875:	89 e5                	mov    ebp,esp
10003877:	83 ec 08             	sub    esp,0x8
1000387a:	ba 08 00 00 00       	mov    edx,0x8	1000387b: R_386_32	vtable for PS2Keyboard
1000387f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003882:	89 10                	mov    DWORD PTR [eax],edx
10003884:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003887:	83 ec 0c             	sub    esp,0xc
1000388a:	50                   	push   eax
1000388b:	e8 fc ff ff ff       	call   1000388c <PS2Keyboard::~PS2Keyboard()+0x18>	1000388c: R_386_PC32	Keyboard::~Keyboard()
10003890:	83 c4 10             	add    esp,0x10
10003893:	90                   	nop
10003894:	c9                   	leave  
10003895:	c3                   	ret    

10003896 <PS2Keyboard::~PS2Keyboard()>:
10003896:	55                   	push   ebp
10003897:	89 e5                	mov    ebp,esp
10003899:	83 ec 08             	sub    esp,0x8
1000389c:	83 ec 0c             	sub    esp,0xc
1000389f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100038a2:	e8 fc ff ff ff       	call   100038a3 <PS2Keyboard::~PS2Keyboard()+0xd>	100038a3: R_386_PC32	PS2Keyboard::~PS2Keyboard()
100038a7:	83 c4 10             	add    esp,0x10
100038aa:	83 ec 08             	sub    esp,0x8
100038ad:	68 70 01 00 00       	push   0x170
100038b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100038b5:	e8 fc ff ff ff       	call   100038b6 <PS2Keyboard::~PS2Keyboard()+0x20>	100038b6: R_386_PC32	operator delete(void*, unsigned long)
100038ba:	83 c4 10             	add    esp,0x10
100038bd:	c9                   	leave  
100038be:	c3                   	ret    
100038bf:	90                   	nop

100038c0 <PS2Keyboard::setRepeatRate(int)>:
100038c0:	c3                   	ret    
100038c1:	90                   	nop

100038c2 <PS2Keyboard::setRepeatDelay(int)>:
100038c2:	c3                   	ret    
100038c3:	90                   	nop

100038c4 <PS2Keyboard::sendKey(unsigned short, bool)>:
100038c4:	83 ec 1c             	sub    esp,0x1c
100038c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100038cb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
100038cf:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
100038d3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
100038d7:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
100038dc:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
100038e3:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
100038e9:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
100038ee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100038f2:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
100038f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100038fa:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
100038ff:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10003904:	83 c4 1c             	add    esp,0x1c
10003907:	e9 fc ff ff ff       	jmp    10003908 <PS2Keyboard::sendKey(unsigned short, bool)+0x44>	10003908: R_386_PC32	sendKeyboardToken(KeyboardToken)

1000390c <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)>:
1000390c:	83 ec 1c             	sub    esp,0x1c
1000390f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003913:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10003917:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
1000391b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
1000391f:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10003924:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
1000392b:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10003931:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10003936:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
1000393a:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
1000393e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003942:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10003947:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
1000394c:	83 c4 1c             	add    esp,0x1c
1000394f:	e9 fc ff ff ff       	jmp    10003950 <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)+0x44>	10003950: R_386_PC32	sendKeyboardToken(KeyboardToken)

10003954 <PS2Keyboard::updateKeyboardLEDs()>:
10003954:	56                   	push   esi
10003955:	53                   	push   ebx
10003956:	83 ec 0c             	sub    esp,0xc
10003959:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
1000395d:	8a 96 69 01 00 00    	mov    dl,BYTE PTR [esi+0x169]
10003963:	0f b6 9e 6a 01 00 00 	movzx  ebx,BYTE PTR [esi+0x16a]
1000396a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
1000396d:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10003974:	09 c3                	or     ebx,eax
10003976:	0a 9e 6b 01 00 00    	or     bl,BYTE PTR [esi+0x16b]
1000397c:	68 ed 00 00 00       	push   0xed
10003981:	0f b6 db             	movzx  ebx,bl
10003984:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
1000398a:	e8 fc ff ff ff       	call   1000398b <PS2Keyboard::updateKeyboardLEDs()+0x37>	1000398b: R_386_PC32	PS2Port::deviceWrite(unsigned char)
1000398f:	58                   	pop    eax
10003990:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003996:	e8 fc ff ff ff       	call   10003997 <PS2Keyboard::updateKeyboardLEDs()+0x43>	10003997: R_386_PC32	PS2Port::deviceRead()
1000399b:	5a                   	pop    edx
1000399c:	59                   	pop    ecx
1000399d:	53                   	push   ebx
1000399e:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
100039a4:	e8 fc ff ff ff       	call   100039a5 <PS2Keyboard::updateKeyboardLEDs()+0x51>	100039a5: R_386_PC32	PS2Port::deviceWrite(unsigned char)
100039a9:	8b 86 60 01 00 00    	mov    eax,DWORD PTR [esi+0x160]
100039af:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100039b3:	83 c4 14             	add    esp,0x14
100039b6:	5b                   	pop    ebx
100039b7:	5e                   	pop    esi
100039b8:	e9 fc ff ff ff       	jmp    100039b9 <PS2Keyboard::updateKeyboardLEDs()+0x65>	100039b9: R_386_PC32	PS2Port::deviceRead()

100039bd <ps2KeyboardHandler(regs*, void*)>:
100039bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100039c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100039c5:	eb 01                	jmp    100039c8 <PS2Keyboard::handler()>
100039c7:	90                   	nop

100039c8 <PS2Keyboard::handler()>:
100039c8:	57                   	push   edi
100039c9:	56                   	push   esi
100039ca:	53                   	push   ebx
100039cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100039cf:	e4 60                	in     al,0x60
100039d1:	80 be 6e 01 00 00 00 	cmp    BYTE PTR [esi+0x16e],0x0
100039d8:	74 29                	je     10003a03 <PS2Keyboard::handler()+0x3b>
100039da:	88 c2                	mov    dl,al
100039dc:	3c e0                	cmp    al,0xe0
100039de:	75 0c                	jne    100039ec <PS2Keyboard::handler()+0x24>
100039e0:	c6 86 64 01 00 00 01 	mov    BYTE PTR [esi+0x164],0x1
100039e7:	e9 17 07 00 00       	jmp    10004103 <PS2Keyboard::handler()+0x73b>
100039ec:	84 c0                	test   al,al
100039ee:	0f 89 52 01 00 00    	jns    10003b46 <PS2Keyboard::handler()+0x17e>
100039f4:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
100039fb:	83 e2 7f             	and    edx,0x7f
100039fe:	e9 43 01 00 00       	jmp    10003b46 <PS2Keyboard::handler()+0x17e>
10003a03:	3c e0                	cmp    al,0xe0
10003a05:	74 d9                	je     100039e0 <PS2Keyboard::handler()+0x18>
10003a07:	3c f0                	cmp    al,0xf0
10003a09:	75 0c                	jne    10003a17 <PS2Keyboard::handler()+0x4f>
10003a0b:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10003a12:	e9 ec 06 00 00       	jmp    10004103 <PS2Keyboard::handler()+0x73b>
10003a17:	3c 12                	cmp    al,0x12
10003a19:	75 1f                	jne    10003a3a <PS2Keyboard::handler()+0x72>
10003a1b:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003a21:	83 f0 01             	xor    eax,0x1
10003a24:	88 86 67 01 00 00    	mov    BYTE PTR [esi+0x167],al
10003a2a:	52                   	push   edx
10003a2b:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003a32:	50                   	push   eax
10003a33:	68 04 01 00 00       	push   0x104
10003a38:	eb 23                	jmp    10003a5d <PS2Keyboard::handler()+0x95>
10003a3a:	76 3d                	jbe    10003a79 <PS2Keyboard::handler()+0xb1>
10003a3c:	3c 14                	cmp    al,0x14
10003a3e:	75 62                	jne    10003aa2 <PS2Keyboard::handler()+0xda>
10003a40:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003a46:	83 f0 01             	xor    eax,0x1
10003a49:	88 86 68 01 00 00    	mov    BYTE PTR [esi+0x168],al
10003a4f:	51                   	push   ecx
10003a50:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003a57:	50                   	push   eax
10003a58:	68 00 01 00 00       	push   0x100
10003a5d:	56                   	push   esi
10003a5e:	e8 fc ff ff ff       	call   10003a5f <PS2Keyboard::handler()+0x97>	10003a5f: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
10003a63:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10003a6a:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10003a71:	83 c4 10             	add    esp,0x10
10003a74:	e9 8a 06 00 00       	jmp    10004103 <PS2Keyboard::handler()+0x73b>
10003a79:	3c 11                	cmp    al,0x11
10003a7b:	75 2d                	jne    10003aaa <PS2Keyboard::handler()+0xe2>
10003a7d:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003a83:	83 f0 01             	xor    eax,0x1
10003a86:	88 86 6d 01 00 00    	mov    BYTE PTR [esi+0x16d],al
10003a8c:	88 86 6c 01 00 00    	mov    BYTE PTR [esi+0x16c],al
10003a92:	50                   	push   eax
10003a93:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003a9a:	50                   	push   eax
10003a9b:	68 01 01 00 00       	push   0x101
10003aa0:	eb bb                	jmp    10003a5d <PS2Keyboard::handler()+0x95>
10003aa2:	3c 59                	cmp    al,0x59
10003aa4:	0f 84 71 ff ff ff    	je     10003a1b <PS2Keyboard::handler()+0x53>
10003aaa:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
10003ab1:	0f 84 b1 01 00 00    	je     10003c68 <PS2Keyboard::handler()+0x2a0>
10003ab7:	3c 6b                	cmp    al,0x6b
10003ab9:	0f 84 f2 00 00 00    	je     10003bb1 <PS2Keyboard::handler()+0x1e9>
10003abf:	77 50                	ja     10003b11 <PS2Keyboard::handler()+0x149>
10003ac1:	3c 51                	cmp    al,0x51
10003ac3:	0f 84 37 01 00 00    	je     10003c00 <PS2Keyboard::handler()+0x238>
10003ac9:	77 23                	ja     10003aee <PS2Keyboard::handler()+0x126>
10003acb:	3c 49                	cmp    al,0x49
10003acd:	0f 84 0d 01 00 00    	je     10003be0 <PS2Keyboard::handler()+0x218>
10003ad3:	3c 4a                	cmp    al,0x4a
10003ad5:	0f 85 29 04 00 00    	jne    10003f04 <PS2Keyboard::handler()+0x53c>
10003adb:	50                   	push   eax
10003adc:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003ae3:	50                   	push   eax
10003ae4:	68 1f 03 00 00       	push   0x31f
10003ae9:	e9 c6 03 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003aee:	3c 5a                	cmp    al,0x5a
10003af0:	0f 84 5f 01 00 00    	je     10003c55 <PS2Keyboard::handler()+0x28d>
10003af6:	3c 69                	cmp    al,0x69
10003af8:	0f 85 06 04 00 00    	jne    10003f04 <PS2Keyboard::handler()+0x53c>
10003afe:	51                   	push   ecx
10003aff:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003b06:	50                   	push   eax
10003b07:	68 01 02 00 00       	push   0x201
10003b0c:	e9 a3 03 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003b11:	3c 71                	cmp    al,0x71
10003b13:	0f 84 16 01 00 00    	je     10003c2f <PS2Keyboard::handler()+0x267>
10003b19:	77 15                	ja     10003b30 <PS2Keyboard::handler()+0x168>
10003b1b:	3c 6c                	cmp    al,0x6c
10003b1d:	0f 84 f0 00 00 00    	je     10003c13 <PS2Keyboard::handler()+0x24b>
10003b23:	3c 70                	cmp    al,0x70
10003b25:	0f 84 17 01 00 00    	je     10003c42 <PS2Keyboard::handler()+0x27a>
10003b2b:	e9 d4 03 00 00       	jmp    10003f04 <PS2Keyboard::handler()+0x53c>
10003b30:	3c 74                	cmp    al,0x74
10003b32:	0f 84 8c 00 00 00    	je     10003bc4 <PS2Keyboard::handler()+0x1fc>
10003b38:	3c 75                	cmp    al,0x75
10003b3a:	74 4a                	je     10003b86 <PS2Keyboard::handler()+0x1be>
10003b3c:	3c 72                	cmp    al,0x72
10003b3e:	0f 85 c0 03 00 00    	jne    10003f04 <PS2Keyboard::handler()+0x53c>
10003b44:	eb 58                	jmp    10003b9e <PS2Keyboard::handler()+0x1d6>
10003b46:	80 fa 2a             	cmp    dl,0x2a
10003b49:	0f 84 cc fe ff ff    	je     10003a1b <PS2Keyboard::handler()+0x53>
10003b4f:	0f 87 97 05 00 00    	ja     100040ec <PS2Keyboard::handler()+0x724>
10003b55:	80 fa 1d             	cmp    dl,0x1d
10003b58:	0f 84 e2 fe ff ff    	je     10003a40 <PS2Keyboard::handler()+0x78>
10003b5e:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
10003b65:	0f 84 ce 03 00 00    	je     10003f39 <PS2Keyboard::handler()+0x571>
10003b6b:	80 fa 4b             	cmp    dl,0x4b
10003b6e:	74 41                	je     10003bb1 <PS2Keyboard::handler()+0x1e9>
10003b70:	77 27                	ja     10003b99 <PS2Keyboard::handler()+0x1d1>
10003b72:	80 fa 47             	cmp    dl,0x47
10003b75:	0f 84 98 00 00 00    	je     10003c13 <PS2Keyboard::handler()+0x24b>
10003b7b:	0f 86 96 03 00 00    	jbe    10003f17 <PS2Keyboard::handler()+0x54f>
10003b81:	80 fa 48             	cmp    dl,0x48
10003b84:	75 51                	jne    10003bd7 <PS2Keyboard::handler()+0x20f>
10003b86:	50                   	push   eax
10003b87:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003b8e:	50                   	push   eax
10003b8f:	68 0b 02 00 00       	push   0x20b
10003b94:	e9 1b 03 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003b99:	80 fa 50             	cmp    dl,0x50
10003b9c:	75 55                	jne    10003bf3 <PS2Keyboard::handler()+0x22b>
10003b9e:	50                   	push   eax
10003b9f:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003ba6:	50                   	push   eax
10003ba7:	68 0c 02 00 00       	push   0x20c
10003bac:	e9 03 03 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003bb1:	50                   	push   eax
10003bb2:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003bb9:	50                   	push   eax
10003bba:	68 0d 02 00 00       	push   0x20d
10003bbf:	e9 f0 02 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003bc4:	50                   	push   eax
10003bc5:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003bcc:	50                   	push   eax
10003bcd:	68 0e 02 00 00       	push   0x20e
10003bd2:	e9 dd 02 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003bd7:	80 fa 49             	cmp    dl,0x49
10003bda:	0f 85 24 03 00 00    	jne    10003f04 <PS2Keyboard::handler()+0x53c>
10003be0:	50                   	push   eax
10003be1:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003be8:	50                   	push   eax
10003be9:	68 04 02 00 00       	push   0x204
10003bee:	e9 c1 02 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003bf3:	0f 86 2f 03 00 00    	jbe    10003f28 <PS2Keyboard::handler()+0x560>
10003bf9:	80 fa 52             	cmp    dl,0x52
10003bfc:	74 44                	je     10003c42 <PS2Keyboard::handler()+0x27a>
10003bfe:	73 26                	jae    10003c26 <PS2Keyboard::handler()+0x25e>
10003c00:	57                   	push   edi
10003c01:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003c08:	50                   	push   eax
10003c09:	68 05 02 00 00       	push   0x205
10003c0e:	e9 a1 02 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003c13:	53                   	push   ebx
10003c14:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003c1b:	50                   	push   eax
10003c1c:	68 00 02 00 00       	push   0x200
10003c21:	e9 8e 02 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003c26:	80 fa 53             	cmp    dl,0x53
10003c29:	0f 85 d5 02 00 00    	jne    10003f04 <PS2Keyboard::handler()+0x53c>
10003c2f:	52                   	push   edx
10003c30:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003c37:	50                   	push   eax
10003c38:	68 03 02 00 00       	push   0x203
10003c3d:	e9 72 02 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003c42:	50                   	push   eax
10003c43:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003c4a:	50                   	push   eax
10003c4b:	68 02 02 00 00       	push   0x202
10003c50:	e9 5f 02 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003c55:	50                   	push   eax
10003c56:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003c5d:	50                   	push   eax
10003c5e:	68 1d 03 00 00       	push   0x31d
10003c63:	e9 4c 02 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003c68:	0f b6 96 66 01 00 00 	movzx  edx,BYTE PTR [esi+0x166]
10003c6f:	3c 66                	cmp    al,0x66
10003c71:	75 09                	jne    10003c7c <PS2Keyboard::handler()+0x2b4>
10003c73:	50                   	push   eax
10003c74:	52                   	push   edx
10003c75:	6a 08                	push   0x8
10003c77:	e9 38 02 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003c7c:	3c 0d                	cmp    al,0xd
10003c7e:	75 09                	jne    10003c89 <PS2Keyboard::handler()+0x2c1>
10003c80:	50                   	push   eax
10003c81:	52                   	push   edx
10003c82:	6a 09                	push   0x9
10003c84:	e9 2b 02 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003c89:	3c 58                	cmp    al,0x58
10003c8b:	75 2a                	jne    10003cb7 <PS2Keyboard::handler()+0x2ef>
10003c8d:	84 d2                	test   dl,dl
10003c8f:	75 13                	jne    10003ca4 <PS2Keyboard::handler()+0x2dc>
10003c91:	83 ec 0c             	sub    esp,0xc
10003c94:	80 b6 69 01 00 00 01 	xor    BYTE PTR [esi+0x169],0x1
10003c9b:	56                   	push   esi
10003c9c:	e8 fc ff ff ff       	call   10003c9d <PS2Keyboard::handler()+0x2d5>	10003c9d: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
10003ca1:	83 c4 10             	add    esp,0x10
10003ca4:	50                   	push   eax
10003ca5:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003cac:	50                   	push   eax
10003cad:	68 80 02 00 00       	push   0x280
10003cb2:	e9 fd 01 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003cb7:	3c 77                	cmp    al,0x77
10003cb9:	75 2a                	jne    10003ce5 <PS2Keyboard::handler()+0x31d>
10003cbb:	84 d2                	test   dl,dl
10003cbd:	75 13                	jne    10003cd2 <PS2Keyboard::handler()+0x30a>
10003cbf:	83 ec 0c             	sub    esp,0xc
10003cc2:	80 b6 6a 01 00 00 01 	xor    BYTE PTR [esi+0x16a],0x1
10003cc9:	56                   	push   esi
10003cca:	e8 fc ff ff ff       	call   10003ccb <PS2Keyboard::handler()+0x303>	10003ccb: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
10003ccf:	83 c4 10             	add    esp,0x10
10003cd2:	50                   	push   eax
10003cd3:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003cda:	50                   	push   eax
10003cdb:	68 81 02 00 00       	push   0x281
10003ce0:	e9 cf 01 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003ce5:	3c 7e                	cmp    al,0x7e
10003ce7:	75 2a                	jne    10003d13 <PS2Keyboard::handler()+0x34b>
10003ce9:	84 d2                	test   dl,dl
10003ceb:	75 13                	jne    10003d00 <PS2Keyboard::handler()+0x338>
10003ced:	83 ec 0c             	sub    esp,0xc
10003cf0:	80 b6 6b 01 00 00 01 	xor    BYTE PTR [esi+0x16b],0x1
10003cf7:	56                   	push   esi
10003cf8:	e8 fc ff ff ff       	call   10003cf9 <PS2Keyboard::handler()+0x331>	10003cf9: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
10003cfd:	83 c4 10             	add    esp,0x10
10003d00:	57                   	push   edi
10003d01:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003d08:	50                   	push   eax
10003d09:	68 82 02 00 00       	push   0x282
10003d0e:	e9 a1 01 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003d13:	3c 05                	cmp    al,0x5
10003d15:	75 0c                	jne    10003d23 <PS2Keyboard::handler()+0x35b>
10003d17:	53                   	push   ebx
10003d18:	52                   	push   edx
10003d19:	68 00 03 00 00       	push   0x300
10003d1e:	e9 91 01 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003d23:	3c 06                	cmp    al,0x6
10003d25:	75 0c                	jne    10003d33 <PS2Keyboard::handler()+0x36b>
10003d27:	51                   	push   ecx
10003d28:	52                   	push   edx
10003d29:	68 01 03 00 00       	push   0x301
10003d2e:	e9 81 01 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003d33:	3c 04                	cmp    al,0x4
10003d35:	75 0c                	jne    10003d43 <PS2Keyboard::handler()+0x37b>
10003d37:	50                   	push   eax
10003d38:	52                   	push   edx
10003d39:	68 02 03 00 00       	push   0x302
10003d3e:	e9 71 01 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003d43:	3c 0c                	cmp    al,0xc
10003d45:	75 0c                	jne    10003d53 <PS2Keyboard::handler()+0x38b>
10003d47:	50                   	push   eax
10003d48:	52                   	push   edx
10003d49:	68 03 03 00 00       	push   0x303
10003d4e:	e9 61 01 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003d53:	3c 03                	cmp    al,0x3
10003d55:	75 0c                	jne    10003d63 <PS2Keyboard::handler()+0x39b>
10003d57:	50                   	push   eax
10003d58:	52                   	push   edx
10003d59:	68 04 03 00 00       	push   0x304
10003d5e:	e9 51 01 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003d63:	3c 0b                	cmp    al,0xb
10003d65:	75 0c                	jne    10003d73 <PS2Keyboard::handler()+0x3ab>
10003d67:	50                   	push   eax
10003d68:	52                   	push   edx
10003d69:	68 05 03 00 00       	push   0x305
10003d6e:	e9 41 01 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003d73:	3c 02                	cmp    al,0x2
10003d75:	74 04                	je     10003d7b <PS2Keyboard::handler()+0x3b3>
10003d77:	3c 83                	cmp    al,0x83
10003d79:	75 0c                	jne    10003d87 <PS2Keyboard::handler()+0x3bf>
10003d7b:	50                   	push   eax
10003d7c:	52                   	push   edx
10003d7d:	68 06 03 00 00       	push   0x306
10003d82:	e9 2d 01 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003d87:	3c 0a                	cmp    al,0xa
10003d89:	75 0c                	jne    10003d97 <PS2Keyboard::handler()+0x3cf>
10003d8b:	50                   	push   eax
10003d8c:	52                   	push   edx
10003d8d:	68 07 03 00 00       	push   0x307
10003d92:	e9 1d 01 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003d97:	3c 01                	cmp    al,0x1
10003d99:	75 0c                	jne    10003da7 <PS2Keyboard::handler()+0x3df>
10003d9b:	57                   	push   edi
10003d9c:	52                   	push   edx
10003d9d:	68 08 03 00 00       	push   0x308
10003da2:	e9 0d 01 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003da7:	3c 09                	cmp    al,0x9
10003da9:	75 0c                	jne    10003db7 <PS2Keyboard::handler()+0x3ef>
10003dab:	53                   	push   ebx
10003dac:	52                   	push   edx
10003dad:	68 09 03 00 00       	push   0x309
10003db2:	e9 fd 00 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003db7:	3c 78                	cmp    al,0x78
10003db9:	75 0c                	jne    10003dc7 <PS2Keyboard::handler()+0x3ff>
10003dbb:	51                   	push   ecx
10003dbc:	52                   	push   edx
10003dbd:	68 0a 03 00 00       	push   0x30a
10003dc2:	e9 ed 00 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003dc7:	3c 07                	cmp    al,0x7
10003dc9:	75 0c                	jne    10003dd7 <PS2Keyboard::handler()+0x40f>
10003dcb:	50                   	push   eax
10003dcc:	52                   	push   edx
10003dcd:	68 0b 03 00 00       	push   0x30b
10003dd2:	e9 dd 00 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003dd7:	3c 5a                	cmp    al,0x5a
10003dd9:	75 09                	jne    10003de4 <PS2Keyboard::handler()+0x41c>
10003ddb:	50                   	push   eax
10003ddc:	52                   	push   edx
10003ddd:	6a 0a                	push   0xa
10003ddf:	e9 d0 00 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003de4:	3c 76                	cmp    al,0x76
10003de6:	75 0c                	jne    10003df4 <PS2Keyboard::handler()+0x42c>
10003de8:	50                   	push   eax
10003de9:	52                   	push   edx
10003dea:	68 0a 02 00 00       	push   0x20a
10003def:	e9 c0 00 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003df4:	3c 70                	cmp    al,0x70
10003df6:	75 0c                	jne    10003e04 <PS2Keyboard::handler()+0x43c>
10003df8:	50                   	push   eax
10003df9:	52                   	push   edx
10003dfa:	68 10 03 00 00       	push   0x310
10003dff:	e9 b0 00 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003e04:	3c 69                	cmp    al,0x69
10003e06:	75 0c                	jne    10003e14 <PS2Keyboard::handler()+0x44c>
10003e08:	50                   	push   eax
10003e09:	52                   	push   edx
10003e0a:	68 11 03 00 00       	push   0x311
10003e0f:	e9 a0 00 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003e14:	3c 72                	cmp    al,0x72
10003e16:	75 0c                	jne    10003e24 <PS2Keyboard::handler()+0x45c>
10003e18:	50                   	push   eax
10003e19:	52                   	push   edx
10003e1a:	68 12 03 00 00       	push   0x312
10003e1f:	e9 90 00 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003e24:	3c 7a                	cmp    al,0x7a
10003e26:	75 0c                	jne    10003e34 <PS2Keyboard::handler()+0x46c>
10003e28:	57                   	push   edi
10003e29:	52                   	push   edx
10003e2a:	68 13 03 00 00       	push   0x313
10003e2f:	e9 80 00 00 00       	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003e34:	3c 6b                	cmp    al,0x6b
10003e36:	75 09                	jne    10003e41 <PS2Keyboard::handler()+0x479>
10003e38:	53                   	push   ebx
10003e39:	52                   	push   edx
10003e3a:	68 14 03 00 00       	push   0x314
10003e3f:	eb 73                	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003e41:	3c 73                	cmp    al,0x73
10003e43:	75 09                	jne    10003e4e <PS2Keyboard::handler()+0x486>
10003e45:	51                   	push   ecx
10003e46:	52                   	push   edx
10003e47:	68 15 03 00 00       	push   0x315
10003e4c:	eb 66                	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003e4e:	3c 74                	cmp    al,0x74
10003e50:	75 09                	jne    10003e5b <PS2Keyboard::handler()+0x493>
10003e52:	50                   	push   eax
10003e53:	52                   	push   edx
10003e54:	68 16 03 00 00       	push   0x316
10003e59:	eb 59                	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003e5b:	3c 6c                	cmp    al,0x6c
10003e5d:	75 09                	jne    10003e68 <PS2Keyboard::handler()+0x4a0>
10003e5f:	50                   	push   eax
10003e60:	52                   	push   edx
10003e61:	68 17 03 00 00       	push   0x317
10003e66:	eb 4c                	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003e68:	3c 75                	cmp    al,0x75
10003e6a:	75 09                	jne    10003e75 <PS2Keyboard::handler()+0x4ad>
10003e6c:	50                   	push   eax
10003e6d:	52                   	push   edx
10003e6e:	68 18 03 00 00       	push   0x318
10003e73:	eb 3f                	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003e75:	3c 7d                	cmp    al,0x7d
10003e77:	75 09                	jne    10003e82 <PS2Keyboard::handler()+0x4ba>
10003e79:	50                   	push   eax
10003e7a:	52                   	push   edx
10003e7b:	68 19 03 00 00       	push   0x319
10003e80:	eb 32                	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003e82:	3c 71                	cmp    al,0x71
10003e84:	75 09                	jne    10003e8f <PS2Keyboard::handler()+0x4c7>
10003e86:	50                   	push   eax
10003e87:	52                   	push   edx
10003e88:	68 1a 03 00 00       	push   0x31a
10003e8d:	eb 25                	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003e8f:	3c 7b                	cmp    al,0x7b
10003e91:	75 09                	jne    10003e9c <PS2Keyboard::handler()+0x4d4>
10003e93:	50                   	push   eax
10003e94:	52                   	push   edx
10003e95:	68 1c 03 00 00       	push   0x31c
10003e9a:	eb 18                	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003e9c:	3c 79                	cmp    al,0x79
10003e9e:	75 09                	jne    10003ea9 <PS2Keyboard::handler()+0x4e1>
10003ea0:	57                   	push   edi
10003ea1:	52                   	push   edx
10003ea2:	68 1b 03 00 00       	push   0x31b
10003ea7:	eb 0b                	jmp    10003eb4 <PS2Keyboard::handler()+0x4ec>
10003ea9:	3c 7c                	cmp    al,0x7c
10003eab:	75 0f                	jne    10003ebc <PS2Keyboard::handler()+0x4f4>
10003ead:	53                   	push   ebx
10003eae:	52                   	push   edx
10003eaf:	68 1e 03 00 00       	push   0x31e
10003eb4:	56                   	push   esi
10003eb5:	e8 fc ff ff ff       	call   10003eb6 <PS2Keyboard::handler()+0x4ee>	10003eb6: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
10003eba:	eb 45                	jmp    10003f01 <PS2Keyboard::handler()+0x539>
10003ebc:	0f b6 c0             	movzx  eax,al
10003ebf:	8a 8e 69 01 00 00    	mov    cl,BYTE PTR [esi+0x169]
10003ec5:	80 be 67 01 00 00 00 	cmp    BYTE PTR [esi+0x167],0x0
10003ecc:	74 16                	je     10003ee4 <PS2Keyboard::handler()+0x51c>
10003ece:	84 c9                	test   cl,cl
10003ed0:	74 09                	je     10003edb <PS2Keyboard::handler()+0x513>
10003ed2:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10003ed5: R_386_32	PS2Keyboard::internalMapCapUpper
10003ed9:	eb 1d                	jmp    10003ef8 <PS2Keyboard::handler()+0x530>
10003edb:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10003ede: R_386_32	PS2Keyboard::internalMapperUpper
10003ee2:	eb 14                	jmp    10003ef8 <PS2Keyboard::handler()+0x530>
10003ee4:	84 c9                	test   cl,cl
10003ee6:	74 09                	je     10003ef1 <PS2Keyboard::handler()+0x529>
10003ee8:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10003eeb: R_386_32	PS2Keyboard::internalMapCapLower
10003eef:	eb 07                	jmp    10003ef8 <PS2Keyboard::handler()+0x530>
10003ef1:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10003ef4: R_386_32	PS2Keyboard::internalMapperLower
10003ef8:	51                   	push   ecx
10003ef9:	52                   	push   edx
10003efa:	50                   	push   eax
10003efb:	56                   	push   esi
10003efc:	e8 fc ff ff ff       	call   10003efd <PS2Keyboard::handler()+0x535>	10003efd: R_386_PC32	PS2Keyboard::sendKey(unsigned short, bool)
10003f01:	83 c4 10             	add    esp,0x10
10003f04:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10003f0b:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10003f12:	e9 ec 01 00 00       	jmp    10004103 <PS2Keyboard::handler()+0x73b>
10003f17:	80 fa 1c             	cmp    dl,0x1c
10003f1a:	0f 84 35 fd ff ff    	je     10003c55 <PS2Keyboard::handler()+0x28d>
10003f20:	80 fa 35             	cmp    dl,0x35
10003f23:	e9 ad fb ff ff       	jmp    10003ad5 <PS2Keyboard::handler()+0x10d>
10003f28:	80 fa 4d             	cmp    dl,0x4d
10003f2b:	0f 84 93 fc ff ff    	je     10003bc4 <PS2Keyboard::handler()+0x1fc>
10003f31:	80 fa 4f             	cmp    dl,0x4f
10003f34:	e9 bf fb ff ff       	jmp    10003af8 <PS2Keyboard::handler()+0x130>
10003f39:	0f b6 8e 66 01 00 00 	movzx  ecx,BYTE PTR [esi+0x166]
10003f40:	80 fa 0e             	cmp    dl,0xe
10003f43:	75 07                	jne    10003f4c <PS2Keyboard::handler()+0x584>
10003f45:	50                   	push   eax
10003f46:	51                   	push   ecx
10003f47:	e9 29 fd ff ff       	jmp    10003c75 <PS2Keyboard::handler()+0x2ad>
10003f4c:	80 fa 0f             	cmp    dl,0xf
10003f4f:	75 07                	jne    10003f58 <PS2Keyboard::handler()+0x590>
10003f51:	57                   	push   edi
10003f52:	51                   	push   ecx
10003f53:	e9 2a fd ff ff       	jmp    10003c82 <PS2Keyboard::handler()+0x2ba>
10003f58:	80 fa 3a             	cmp    dl,0x3a
10003f5b:	75 07                	jne    10003f64 <PS2Keyboard::handler()+0x59c>
10003f5d:	84 c9                	test   cl,cl
10003f5f:	e9 2b fd ff ff       	jmp    10003c8f <PS2Keyboard::handler()+0x2c7>
10003f64:	80 fa 45             	cmp    dl,0x45
10003f67:	75 07                	jne    10003f70 <PS2Keyboard::handler()+0x5a8>
10003f69:	84 c9                	test   cl,cl
10003f6b:	e9 4d fd ff ff       	jmp    10003cbd <PS2Keyboard::handler()+0x2f5>
10003f70:	80 fa 46             	cmp    dl,0x46
10003f73:	75 07                	jne    10003f7c <PS2Keyboard::handler()+0x5b4>
10003f75:	84 c9                	test   cl,cl
10003f77:	e9 6f fd ff ff       	jmp    10003ceb <PS2Keyboard::handler()+0x323>
10003f7c:	80 fa 3b             	cmp    dl,0x3b
10003f7f:	75 07                	jne    10003f88 <PS2Keyboard::handler()+0x5c0>
10003f81:	53                   	push   ebx
10003f82:	51                   	push   ecx
10003f83:	e9 91 fd ff ff       	jmp    10003d19 <PS2Keyboard::handler()+0x351>
10003f88:	80 fa 3c             	cmp    dl,0x3c
10003f8b:	75 07                	jne    10003f94 <PS2Keyboard::handler()+0x5cc>
10003f8d:	52                   	push   edx
10003f8e:	51                   	push   ecx
10003f8f:	e9 95 fd ff ff       	jmp    10003d29 <PS2Keyboard::handler()+0x361>
10003f94:	80 fa 3d             	cmp    dl,0x3d
10003f97:	75 07                	jne    10003fa0 <PS2Keyboard::handler()+0x5d8>
10003f99:	50                   	push   eax
10003f9a:	51                   	push   ecx
10003f9b:	e9 99 fd ff ff       	jmp    10003d39 <PS2Keyboard::handler()+0x371>
10003fa0:	80 fa 3e             	cmp    dl,0x3e
10003fa3:	75 07                	jne    10003fac <PS2Keyboard::handler()+0x5e4>
10003fa5:	50                   	push   eax
10003fa6:	51                   	push   ecx
10003fa7:	e9 9d fd ff ff       	jmp    10003d49 <PS2Keyboard::handler()+0x381>
10003fac:	80 fa 3f             	cmp    dl,0x3f
10003faf:	75 07                	jne    10003fb8 <PS2Keyboard::handler()+0x5f0>
10003fb1:	50                   	push   eax
10003fb2:	51                   	push   ecx
10003fb3:	e9 a1 fd ff ff       	jmp    10003d59 <PS2Keyboard::handler()+0x391>
10003fb8:	80 fa 40             	cmp    dl,0x40
10003fbb:	75 07                	jne    10003fc4 <PS2Keyboard::handler()+0x5fc>
10003fbd:	50                   	push   eax
10003fbe:	51                   	push   ecx
10003fbf:	e9 a5 fd ff ff       	jmp    10003d69 <PS2Keyboard::handler()+0x3a1>
10003fc4:	80 fa 41             	cmp    dl,0x41
10003fc7:	75 07                	jne    10003fd0 <PS2Keyboard::handler()+0x608>
10003fc9:	50                   	push   eax
10003fca:	51                   	push   ecx
10003fcb:	e9 ad fd ff ff       	jmp    10003d7d <PS2Keyboard::handler()+0x3b5>
10003fd0:	80 fa 42             	cmp    dl,0x42
10003fd3:	75 07                	jne    10003fdc <PS2Keyboard::handler()+0x614>
10003fd5:	50                   	push   eax
10003fd6:	51                   	push   ecx
10003fd7:	e9 b1 fd ff ff       	jmp    10003d8d <PS2Keyboard::handler()+0x3c5>
10003fdc:	80 fa 43             	cmp    dl,0x43
10003fdf:	75 07                	jne    10003fe8 <PS2Keyboard::handler()+0x620>
10003fe1:	57                   	push   edi
10003fe2:	51                   	push   ecx
10003fe3:	e9 b5 fd ff ff       	jmp    10003d9d <PS2Keyboard::handler()+0x3d5>
10003fe8:	80 fa 44             	cmp    dl,0x44
10003feb:	75 07                	jne    10003ff4 <PS2Keyboard::handler()+0x62c>
10003fed:	53                   	push   ebx
10003fee:	51                   	push   ecx
10003fef:	e9 b9 fd ff ff       	jmp    10003dad <PS2Keyboard::handler()+0x3e5>
10003ff4:	84 d2                	test   dl,dl
10003ff6:	75 07                	jne    10003fff <PS2Keyboard::handler()+0x637>
10003ff8:	52                   	push   edx
10003ff9:	51                   	push   ecx
10003ffa:	e9 be fd ff ff       	jmp    10003dbd <PS2Keyboard::handler()+0x3f5>
10003fff:	80 fa 1c             	cmp    dl,0x1c
10004002:	75 07                	jne    1000400b <PS2Keyboard::handler()+0x643>
10004004:	50                   	push   eax
10004005:	51                   	push   ecx
10004006:	e9 d2 fd ff ff       	jmp    10003ddd <PS2Keyboard::handler()+0x415>
1000400b:	80 fa 01             	cmp    dl,0x1
1000400e:	75 07                	jne    10004017 <PS2Keyboard::handler()+0x64f>
10004010:	50                   	push   eax
10004011:	51                   	push   ecx
10004012:	e9 d3 fd ff ff       	jmp    10003dea <PS2Keyboard::handler()+0x422>
10004017:	80 fa 52             	cmp    dl,0x52
1000401a:	75 07                	jne    10004023 <PS2Keyboard::handler()+0x65b>
1000401c:	50                   	push   eax
1000401d:	51                   	push   ecx
1000401e:	e9 d7 fd ff ff       	jmp    10003dfa <PS2Keyboard::handler()+0x432>
10004023:	80 fa 4f             	cmp    dl,0x4f
10004026:	75 07                	jne    1000402f <PS2Keyboard::handler()+0x667>
10004028:	50                   	push   eax
10004029:	51                   	push   ecx
1000402a:	e9 db fd ff ff       	jmp    10003e0a <PS2Keyboard::handler()+0x442>
1000402f:	80 fa 50             	cmp    dl,0x50
10004032:	75 07                	jne    1000403b <PS2Keyboard::handler()+0x673>
10004034:	50                   	push   eax
10004035:	51                   	push   ecx
10004036:	e9 df fd ff ff       	jmp    10003e1a <PS2Keyboard::handler()+0x452>
1000403b:	80 fa 51             	cmp    dl,0x51
1000403e:	75 07                	jne    10004047 <PS2Keyboard::handler()+0x67f>
10004040:	50                   	push   eax
10004041:	51                   	push   ecx
10004042:	e9 e3 fd ff ff       	jmp    10003e2a <PS2Keyboard::handler()+0x462>
10004047:	80 fa 4b             	cmp    dl,0x4b
1000404a:	75 07                	jne    10004053 <PS2Keyboard::handler()+0x68b>
1000404c:	57                   	push   edi
1000404d:	51                   	push   ecx
1000404e:	e9 e7 fd ff ff       	jmp    10003e3a <PS2Keyboard::handler()+0x472>
10004053:	80 fa 4c             	cmp    dl,0x4c
10004056:	75 07                	jne    1000405f <PS2Keyboard::handler()+0x697>
10004058:	53                   	push   ebx
10004059:	51                   	push   ecx
1000405a:	e9 e8 fd ff ff       	jmp    10003e47 <PS2Keyboard::handler()+0x47f>
1000405f:	80 fa 4d             	cmp    dl,0x4d
10004062:	75 07                	jne    1000406b <PS2Keyboard::handler()+0x6a3>
10004064:	52                   	push   edx
10004065:	51                   	push   ecx
10004066:	e9 e9 fd ff ff       	jmp    10003e54 <PS2Keyboard::handler()+0x48c>
1000406b:	80 fa 47             	cmp    dl,0x47
1000406e:	75 07                	jne    10004077 <PS2Keyboard::handler()+0x6af>
10004070:	50                   	push   eax
10004071:	51                   	push   ecx
10004072:	e9 ea fd ff ff       	jmp    10003e61 <PS2Keyboard::handler()+0x499>
10004077:	80 fa 48             	cmp    dl,0x48
1000407a:	75 07                	jne    10004083 <PS2Keyboard::handler()+0x6bb>
1000407c:	50                   	push   eax
1000407d:	51                   	push   ecx
1000407e:	e9 eb fd ff ff       	jmp    10003e6e <PS2Keyboard::handler()+0x4a6>
10004083:	80 fa 49             	cmp    dl,0x49
10004086:	75 07                	jne    1000408f <PS2Keyboard::handler()+0x6c7>
10004088:	50                   	push   eax
10004089:	51                   	push   ecx
1000408a:	e9 ec fd ff ff       	jmp    10003e7b <PS2Keyboard::handler()+0x4b3>
1000408f:	80 fa 53             	cmp    dl,0x53
10004092:	75 07                	jne    1000409b <PS2Keyboard::handler()+0x6d3>
10004094:	50                   	push   eax
10004095:	51                   	push   ecx
10004096:	e9 ed fd ff ff       	jmp    10003e88 <PS2Keyboard::handler()+0x4c0>
1000409b:	80 fa 4a             	cmp    dl,0x4a
1000409e:	75 07                	jne    100040a7 <PS2Keyboard::handler()+0x6df>
100040a0:	50                   	push   eax
100040a1:	51                   	push   ecx
100040a2:	e9 ee fd ff ff       	jmp    10003e95 <PS2Keyboard::handler()+0x4cd>
100040a7:	80 fa 4e             	cmp    dl,0x4e
100040aa:	75 07                	jne    100040b3 <PS2Keyboard::handler()+0x6eb>
100040ac:	50                   	push   eax
100040ad:	51                   	push   ecx
100040ae:	e9 ef fd ff ff       	jmp    10003ea2 <PS2Keyboard::handler()+0x4da>
100040b3:	80 fa 37             	cmp    dl,0x37
100040b6:	75 07                	jne    100040bf <PS2Keyboard::handler()+0x6f7>
100040b8:	57                   	push   edi
100040b9:	51                   	push   ecx
100040ba:	e9 f0 fd ff ff       	jmp    10003eaf <PS2Keyboard::handler()+0x4e7>
100040bf:	0f b6 be 67 01 00 00 	movzx  edi,BYTE PTR [esi+0x167]
100040c6:	0f b6 86 69 01 00 00 	movzx  eax,BYTE PTR [esi+0x169]
100040cd:	c1 e7 07             	shl    edi,0x7
100040d0:	c1 e0 08             	shl    eax,0x8
100040d3:	8d bc 07 00 00 00 00 	lea    edi,[edi+eax*1+0x0]	100040d6: R_386_32	PS2Keyboard::internalMapperLowerBad
100040da:	88 d0                	mov    al,dl
100040dc:	89 fb                	mov    ebx,edi
100040de:	d7                   	xlat   BYTE PTR ds:[ebx]
100040df:	88 c2                	mov    dl,al
100040e1:	0f b6 d2             	movzx  edx,dl
100040e4:	53                   	push   ebx
100040e5:	51                   	push   ecx
100040e6:	52                   	push   edx
100040e7:	e9 0f fe ff ff       	jmp    10003efb <PS2Keyboard::handler()+0x533>
100040ec:	80 fa 36             	cmp    dl,0x36
100040ef:	0f 84 26 f9 ff ff    	je     10003a1b <PS2Keyboard::handler()+0x53>
100040f5:	80 fa 38             	cmp    dl,0x38
100040f8:	0f 84 7f f9 ff ff    	je     10003a7d <PS2Keyboard::handler()+0xb5>
100040fe:	e9 5b fa ff ff       	jmp    10003b5e <PS2Keyboard::handler()+0x196>
10004103:	5b                   	pop    ebx
10004104:	5e                   	pop    esi
10004105:	5f                   	pop    edi
10004106:	c3                   	ret    
10004107:	90                   	nop

10004108 <PS2Keyboard::open(int, int, void*)>:
10004108:	53                   	push   ebx
10004109:	83 ec 14             	sub    esp,0x14
1000410c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10004110:	8b 83 c8 00 00 00    	mov    eax,DWORD PTR [ebx+0xc8]
10004116:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
1000411c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004120:	89 83 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],eax
10004126:	53                   	push   ebx
10004127:	6a 01                	push   0x1
10004129:	68 00 00 00 00       	push   0x0	1000412a: R_386_32	ps2KeyboardHandler(regs*, void*)
1000412e:	6a 01                	push   0x1
10004130:	53                   	push   ebx
10004131:	e8 fc ff ff ff       	call   10004132 <PS2Keyboard::open(int, int, void*)+0x2a>	10004132: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10004136:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
1000413c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000413d: R_386_32	sysBootSettings
10004141:	c1 e8 02             	shr    eax,0x2
10004144:	83 f0 01             	xor    eax,0x1
10004147:	83 e0 01             	and    eax,0x1
1000414a:	88 83 6e 01 00 00    	mov    BYTE PTR [ebx+0x16e],al
10004150:	31 c0                	xor    eax,eax
10004152:	83 c4 28             	add    esp,0x28
10004155:	5b                   	pop    ebx
10004156:	c3                   	ret    
10004157:	90                   	nop

10004158 <PS2Keyboard::close(int, int, void*)>:
10004158:	83 c8 ff             	or     eax,0xffffffff
1000415b:	c3                   	ret    

1000415c <PS2Mouse::PS2Mouse()>:
1000415c:	55                   	push   ebp
1000415d:	89 e5                	mov    ebp,esp
1000415f:	83 ec 08             	sub    esp,0x8
10004162:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004165:	83 ec 08             	sub    esp,0x8
10004168:	68 00 00 00 00       	push   0x0	10004169: R_386_32	ps2mousename
1000416d:	50                   	push   eax
1000416e:	e8 fc ff ff ff       	call   1000416f <PS2Mouse::PS2Mouse()+0x13>	1000416f: R_386_PC32	Mouse::Mouse(char const*)
10004173:	83 c4 10             	add    esp,0x10
10004176:	ba 08 00 00 00       	mov    edx,0x8	10004177: R_386_32	vtable for PS2Mouse
1000417b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000417e:	89 10                	mov    DWORD PTR [eax],edx
10004180:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004183:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
1000418a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000418d:	c7 80 62 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x162],0x0
10004197:	90                   	nop
10004198:	c9                   	leave  
10004199:	c3                   	ret    

1000419a <ps2MouseHandler(regs*, void*)>:
1000419a:	55                   	push   ebp
1000419b:	89 e5                	mov    ebp,esp
1000419d:	83 ec 08             	sub    esp,0x8
100041a0:	83 ec 0c             	sub    esp,0xc
100041a3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100041a6:	e8 fc ff ff ff       	call   100041a7 <ps2MouseHandler(regs*, void*)+0xd>	100041a7: R_386_PC32	PS2Mouse::handler()
100041ab:	83 c4 10             	add    esp,0x10
100041ae:	90                   	nop
100041af:	c9                   	leave  
100041b0:	c3                   	ret    
100041b1:	90                   	nop

100041b2 <PS2Mouse::handler()>:
100041b2:	55                   	push   ebp
100041b3:	89 e5                	mov    ebp,esp
100041b5:	83 ec 28             	sub    esp,0x28
100041b8:	66 c7 45 ea 64 00    	mov    WORD PTR [ebp-0x16],0x64
100041be:	66 8b 45 ea          	mov    ax,WORD PTR [ebp-0x16]
100041c2:	89 c2                	mov    edx,eax
100041c4:	ec                   	in     al,dx
100041c5:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
100041c8:	8a 45 e9             	mov    al,BYTE PTR [ebp-0x17]
100041cb:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100041ce:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100041d2:	83 e0 01             	and    eax,0x1
100041d5:	85 c0                	test   eax,eax
100041d7:	0f 84 8d 01 00 00    	je     1000436a <PS2Mouse::handler()+0x1b8>
100041dd:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100041e1:	83 e0 20             	and    eax,0x20
100041e4:	85 c0                	test   eax,eax
100041e6:	0f 84 81 01 00 00    	je     1000436d <PS2Mouse::handler()+0x1bb>
100041ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100041ef:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
100041f5:	8d 50 01             	lea    edx,[eax+0x1]
100041f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100041fb:	88 91 61 01 00 00    	mov    BYTE PTR [ecx+0x161],dl
10004201:	0f b6 c8             	movzx  ecx,al
10004204:	66 c7 45 e6 60 00    	mov    WORD PTR [ebp-0x1a],0x60
1000420a:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
1000420e:	89 c2                	mov    edx,eax
10004210:	ec                   	in     al,dx
10004211:	88 45 e5             	mov    BYTE PTR [ebp-0x1b],al
10004214:	8a 55 e5             	mov    dl,BYTE PTR [ebp-0x1b]
10004217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000421a:	88 94 08 62 01 00 00 	mov    BYTE PTR [eax+ecx*1+0x162],dl
10004221:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004224:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
1000422a:	0f b6 c0             	movzx  eax,al
1000422d:	83 e0 08             	and    eax,0x8
10004230:	85 c0                	test   eax,eax
10004232:	75 0f                	jne    10004243 <PS2Mouse::handler()+0x91>
10004234:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004237:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
1000423e:	e9 2b 01 00 00       	jmp    1000436e <PS2Mouse::handler()+0x1bc>
10004243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004246:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
1000424c:	84 c0                	test   al,al
1000424e:	75 0d                	jne    1000425d <PS2Mouse::handler()+0xab>
10004250:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004253:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10004259:	3c 02                	cmp    al,0x2
1000425b:	77 2f                	ja     1000428c <PS2Mouse::handler()+0xda>
1000425d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004260:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10004266:	3c 03                	cmp    al,0x3
10004268:	74 11                	je     1000427b <PS2Mouse::handler()+0xc9>
1000426a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000426d:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10004273:	3c 04                	cmp    al,0x4
10004275:	0f 85 f3 00 00 00    	jne    1000436e <PS2Mouse::handler()+0x1bc>
1000427b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000427e:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10004284:	3c 03                	cmp    al,0x3
10004286:	0f 86 e2 00 00 00    	jbe    1000436e <PS2Mouse::handler()+0x1bc>
1000428c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000428f:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10004296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004299:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
1000429f:	84 c0                	test   al,al
100042a1:	78 13                	js     100042b6 <PS2Mouse::handler()+0x104>
100042a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100042a6:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100042ac:	0f b6 c0             	movzx  eax,al
100042af:	83 e0 40             	and    eax,0x40
100042b2:	85 c0                	test   eax,eax
100042b4:	74 37                	je     100042ed <PS2Mouse::handler()+0x13b>
100042b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100042b9:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100042c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100042c3:	c6 80 62 01 00 00 00 	mov    BYTE PTR [eax+0x162],0x0
100042ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100042cd:	c6 80 63 01 00 00 00 	mov    BYTE PTR [eax+0x163],0x0
100042d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100042d7:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
100042de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100042e1:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
100042e8:	e9 81 00 00 00       	jmp    1000436e <PS2Mouse::handler()+0x1bc>
100042ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100042f0:	8a 80 63 01 00 00    	mov    al,BYTE PTR [eax+0x163]
100042f6:	0f b6 d0             	movzx  edx,al
100042f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100042fc:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10004302:	0f b6 c0             	movzx  eax,al
10004305:	c1 e0 04             	shl    eax,0x4
10004308:	25 00 01 00 00       	and    eax,0x100
1000430d:	29 c2                	sub    edx,eax
1000430f:	89 d0                	mov    eax,edx
10004311:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10004314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004317:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
1000431d:	0f b6 c0             	movzx  eax,al
10004320:	c1 e0 03             	shl    eax,0x3
10004323:	25 00 01 00 00       	and    eax,0x100
10004328:	89 c2                	mov    edx,eax
1000432a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000432d:	8a 80 64 01 00 00    	mov    al,BYTE PTR [eax+0x164]
10004333:	0f b6 c0             	movzx  eax,al
10004336:	29 c2                	sub    edx,eax
10004338:	89 d0                	mov    eax,edx
1000433a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000433d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000433e: R_386_32	guiMouseHandler
10004342:	85 c0                	test   eax,eax
10004344:	74 28                	je     1000436e <PS2Mouse::handler()+0x1bc>
10004346:	a1 00 00 00 00       	mov    eax,ds:0x0	10004347: R_386_32	guiMouseHandler
1000434b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000434e:	8a 92 62 01 00 00    	mov    dl,BYTE PTR [edx+0x162]
10004354:	0f b6 d2             	movzx  edx,dl
10004357:	83 e2 01             	and    edx,0x1
1000435a:	6a 00                	push   0x0
1000435c:	52                   	push   edx
1000435d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10004360:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10004363:	ff d0                	call   eax
10004365:	83 c4 10             	add    esp,0x10
10004368:	eb 04                	jmp    1000436e <PS2Mouse::handler()+0x1bc>
1000436a:	90                   	nop
1000436b:	eb 01                	jmp    1000436e <PS2Mouse::handler()+0x1bc>
1000436d:	90                   	nop
1000436e:	c9                   	leave  
1000436f:	c3                   	ret    

10004370 <PS2Mouse::open(int, int, void*)>:
10004370:	55                   	push   ebp
10004371:	89 e5                	mov    ebp,esp
10004373:	83 ec 08             	sub    esp,0x8
10004376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004379:	8b 90 c8 00 00 00    	mov    edx,DWORD PTR [eax+0xc8]
1000437f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004382:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10004388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000438b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000438e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10004394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004397:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000439d:	83 ec 08             	sub    esp,0x8
100043a0:	68 f6 00 00 00       	push   0xf6
100043a5:	50                   	push   eax
100043a6:	e8 fc ff ff ff       	call   100043a7 <PS2Mouse::open(int, int, void*)+0x37>	100043a7: R_386_PC32	PS2Port::deviceWrite(unsigned char)
100043ab:	83 c4 10             	add    esp,0x10
100043ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100043b1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100043b7:	83 ec 0c             	sub    esp,0xc
100043ba:	50                   	push   eax
100043bb:	e8 fc ff ff ff       	call   100043bc <PS2Mouse::open(int, int, void*)+0x4c>	100043bc: R_386_PC32	PS2Port::deviceRead()
100043c0:	83 c4 10             	add    esp,0x10
100043c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100043c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100043cc:	83 ec 08             	sub    esp,0x8
100043cf:	68 f4 00 00 00       	push   0xf4
100043d4:	50                   	push   eax
100043d5:	e8 fc ff ff ff       	call   100043d6 <PS2Mouse::open(int, int, void*)+0x66>	100043d6: R_386_PC32	PS2Port::deviceWrite(unsigned char)
100043da:	83 c4 10             	add    esp,0x10
100043dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100043e0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100043e6:	83 ec 0c             	sub    esp,0xc
100043e9:	50                   	push   eax
100043ea:	e8 fc ff ff ff       	call   100043eb <PS2Mouse::open(int, int, void*)+0x7b>	100043eb: R_386_PC32	PS2Port::deviceRead()
100043ef:	83 c4 10             	add    esp,0x10
100043f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100043f5:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100043fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100043ff:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
10004406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004409:	83 ec 0c             	sub    esp,0xc
1000440c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000440f:	6a 01                	push   0x1
10004411:	68 00 00 00 00       	push   0x0	10004412: R_386_32	ps2MouseHandler(regs*, void*)
10004416:	6a 0c                	push   0xc
10004418:	50                   	push   eax
10004419:	e8 fc ff ff ff       	call   1000441a <PS2Mouse::open(int, int, void*)+0xaa>	1000441a: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
1000441e:	83 c4 20             	add    esp,0x20
10004421:	b8 00 00 00 00       	mov    eax,0x0
10004426:	c9                   	leave  
10004427:	c3                   	ret    

10004428 <PS2Mouse::close(int, int, void*)>:
10004428:	b8 00 00 00 00       	mov    eax,0x0
1000442d:	c3                   	ret    

1000442e <PS2Mouse::detect()>:
1000442e:	90                   	nop
1000442f:	c3                   	ret    

10004430 <PS2Port::PS2Port()>:
10004430:	55                   	push   ebp
10004431:	89 e5                	mov    ebp,esp
10004433:	83 ec 08             	sub    esp,0x8
10004436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004439:	83 ec 08             	sub    esp,0x8
1000443c:	68 00 00 00 00       	push   0x0	1000443d: R_386_32	ps2portname
10004441:	50                   	push   eax
10004442:	e8 fc ff ff ff       	call   10004443 <PS2Port::PS2Port()+0x13>	10004443: R_386_PC32	Bus::Bus(char const*)
10004447:	83 c4 10             	add    esp,0x10
1000444a:	ba 08 00 00 00       	mov    edx,0x8	1000444b: R_386_32	vtable for PS2Port
1000444f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004452:	89 10                	mov    DWORD PTR [eax],edx
10004454:	90                   	nop
10004455:	c9                   	leave  
10004456:	c3                   	ret    
10004457:	90                   	nop

10004458 <PS2Port::open(int, int, void*)>:
10004458:	55                   	push   ebp
10004459:	89 e5                	mov    ebp,esp
1000445b:	83 ec 08             	sub    esp,0x8
1000445e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004461:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10004464:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
1000446a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000446d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10004470:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10004476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004479:	8b 00                	mov    eax,DWORD PTR [eax]
1000447b:	83 c0 18             	add    eax,0x18
1000447e:	8b 00                	mov    eax,DWORD PTR [eax]
10004480:	83 ec 0c             	sub    esp,0xc
10004483:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004486:	ff d0                	call   eax
10004488:	83 c4 10             	add    esp,0x10
1000448b:	b8 00 00 00 00       	mov    eax,0x0
10004490:	c9                   	leave  
10004491:	c3                   	ret    

10004492 <PS2Port::close(int, int, void*)>:
10004492:	b8 00 00 00 00       	mov    eax,0x0
10004497:	c3                   	ret    

10004498 <PS2Port::detect()>:
10004498:	55                   	push   ebp
10004499:	89 e5                	mov    ebp,esp
1000449b:	53                   	push   ebx
1000449c:	83 ec 14             	sub    esp,0x14
1000449f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100044a2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100044a8:	85 c0                	test   eax,eax
100044aa:	75 5a                	jne    10004506 <PS2Port::detect()+0x6e>
100044ac:	c7 45 ec 70 01 00 00 	mov    DWORD PTR [ebp-0x14],0x170
100044b3:	83 ec 0c             	sub    esp,0xc
100044b6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100044b9:	e8 fc ff ff ff       	call   100044ba <PS2Port::detect()+0x22>	100044ba: R_386_PC32	malloc
100044be:	83 c4 10             	add    esp,0x10
100044c1:	89 c3                	mov    ebx,eax
100044c3:	83 ec 0c             	sub    esp,0xc
100044c6:	53                   	push   ebx
100044c7:	e8 fc ff ff ff       	call   100044c8 <PS2Port::detect()+0x30>	100044c8: R_386_PC32	PS2Keyboard::PS2Keyboard()
100044cc:	83 c4 10             	add    esp,0x10
100044cf:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
100044d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100044d5:	83 ec 08             	sub    esp,0x8
100044d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100044db:	50                   	push   eax
100044dc:	e8 fc ff ff ff       	call   100044dd <PS2Port::detect()+0x45>	100044dd: R_386_PC32	Device::addChild(Device*)
100044e1:	83 c4 10             	add    esp,0x10
100044e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100044e7:	8b 00                	mov    eax,DWORD PTR [eax]
100044e9:	83 c0 08             	add    eax,0x8
100044ec:	8b 00                	mov    eax,DWORD PTR [eax]
100044ee:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100044f1:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
100044f7:	52                   	push   edx
100044f8:	6a 00                	push   0x0
100044fa:	6a 00                	push   0x0
100044fc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100044ff:	ff d0                	call   eax
10004501:	83 c4 10             	add    esp,0x10
10004504:	eb 66                	jmp    1000456c <PS2Port::detect()+0xd4>
10004506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004509:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000450f:	83 f8 01             	cmp    eax,0x1
10004512:	75 58                	jne    1000456c <PS2Port::detect()+0xd4>
10004514:	c7 45 e8 68 01 00 00 	mov    DWORD PTR [ebp-0x18],0x168
1000451b:	83 ec 0c             	sub    esp,0xc
1000451e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10004521:	e8 fc ff ff ff       	call   10004522 <PS2Port::detect()+0x8a>	10004522: R_386_PC32	malloc
10004526:	83 c4 10             	add    esp,0x10
10004529:	89 c3                	mov    ebx,eax
1000452b:	83 ec 0c             	sub    esp,0xc
1000452e:	53                   	push   ebx
1000452f:	e8 fc ff ff ff       	call   10004530 <PS2Port::detect()+0x98>	10004530: R_386_PC32	PS2Mouse::PS2Mouse()
10004534:	83 c4 10             	add    esp,0x10
10004537:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
1000453a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000453d:	83 ec 08             	sub    esp,0x8
10004540:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10004543:	50                   	push   eax
10004544:	e8 fc ff ff ff       	call   10004545 <PS2Port::detect()+0xad>	10004545: R_386_PC32	Device::addChild(Device*)
10004549:	83 c4 10             	add    esp,0x10
1000454c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000454f:	8b 00                	mov    eax,DWORD PTR [eax]
10004551:	83 c0 08             	add    eax,0x8
10004554:	8b 00                	mov    eax,DWORD PTR [eax]
10004556:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10004559:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
1000455f:	52                   	push   edx
10004560:	6a 00                	push   0x0
10004562:	6a 01                	push   0x1
10004564:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10004567:	ff d0                	call   eax
10004569:	83 c4 10             	add    esp,0x10
1000456c:	90                   	nop
1000456d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10004570:	c9                   	leave  
10004571:	c3                   	ret    

10004572 <PS2Port::deviceWrite(unsigned char)>:
10004572:	55                   	push   ebp
10004573:	89 e5                	mov    ebp,esp
10004575:	83 ec 28             	sub    esp,0x28
10004578:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000457b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
1000457e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004581:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10004587:	83 f8 01             	cmp    eax,0x1
1000458a:	75 1a                	jne    100045a6 <PS2Port::deviceWrite(unsigned char)+0x34>
1000458c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000458f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004595:	83 ec 08             	sub    esp,0x8
10004598:	68 d4 00 00 00       	push   0xd4
1000459d:	50                   	push   eax
1000459e:	e8 fc ff ff ff       	call   1000459f <PS2Port::deviceWrite(unsigned char)+0x2d>	1000459f: R_386_PC32	PS2::controllerWrite(unsigned char)
100045a3:	83 c4 10             	add    esp,0x10
100045a6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100045ad:	66 c7 45 f0 64 00    	mov    WORD PTR [ebp-0x10],0x64
100045b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100045b6:	89 c2                	mov    edx,eax
100045b8:	ec                   	in     al,dx
100045b9:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100045bc:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100045bf:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100045c2:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100045c6:	83 e0 02             	and    eax,0x2
100045c9:	85 c0                	test   eax,eax
100045cb:	74 29                	je     100045f6 <PS2Port::deviceWrite(unsigned char)+0x84>
100045cd:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100045d1:	83 e0 40             	and    eax,0x40
100045d4:	85 c0                	test   eax,eax
100045d6:	75 22                	jne    100045fa <PS2Port::deviceWrite(unsigned char)+0x88>
100045d8:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100045db:	84 c0                	test   al,al
100045dd:	78 1b                	js     100045fa <PS2Port::deviceWrite(unsigned char)+0x88>
100045df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100045e2:	8d 50 01             	lea    edx,[eax+0x1]
100045e5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
100045e8:	3d 40 06 00 00       	cmp    eax,0x640
100045ed:	0f 94 c0             	sete   al
100045f0:	84 c0                	test   al,al
100045f2:	75 05                	jne    100045f9 <PS2Port::deviceWrite(unsigned char)+0x87>
100045f4:	eb b7                	jmp    100045ad <PS2Port::deviceWrite(unsigned char)+0x3b>
100045f6:	90                   	nop
100045f7:	eb 01                	jmp    100045fa <PS2Port::deviceWrite(unsigned char)+0x88>
100045f9:	90                   	nop
100045fa:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
100045fe:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10004604:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10004607:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
1000460a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
1000460d:	ee                   	out    dx,al
1000460e:	b0 01                	mov    al,0x1
10004610:	c9                   	leave  
10004611:	c3                   	ret    

10004612 <PS2Port::deviceRead()>:
10004612:	55                   	push   ebp
10004613:	89 e5                	mov    ebp,esp
10004615:	83 ec 08             	sub    esp,0x8
10004618:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000461b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004621:	83 ec 0c             	sub    esp,0xc
10004624:	50                   	push   eax
10004625:	e8 fc ff ff ff       	call   10004626 <PS2Port::deviceRead()+0x14>	10004626: R_386_PC32	PS2::controllerRead()
1000462a:	83 c4 10             	add    esp,0x10
1000462d:	c9                   	leave  
1000462e:	c3                   	ret    
1000462f:	90                   	nop

10004630 <sb16Demo(void*)>:
10004630:	55                   	push   ebp
10004631:	57                   	push   edi
10004632:	56                   	push   esi
10004633:	53                   	push   ebx
10004634:	83 ec 1c             	sub    esp,0x1c
10004637:	e8 fc ff ff ff       	call   10004638 <sb16Demo(void*)+0x8>	10004638: R_386_PC32	unlockScheduler()
1000463c:	83 ec 0c             	sub    esp,0xc
1000463f:	6a 2c                	push   0x2c
10004641:	e8 fc ff ff ff       	call   10004642 <sb16Demo(void*)+0x12>	10004642: R_386_PC32	malloc
10004646:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
1000464d:	89 c3                	mov    ebx,eax
1000464f:	6a 5a                	push   0x5a
10004651:	6a 08                	push   0x8
10004653:	68 40 1f 00 00       	push   0x1f40
10004658:	50                   	push   eax
10004659:	e8 fc ff ff ff       	call   1000465a <sb16Demo(void*)+0x2a>	1000465a: R_386_PC32	SoundChannel::SoundChannel(int, int, int, int)
1000465e:	83 c4 14             	add    esp,0x14
10004661:	68 14 01 00 00       	push   0x114
10004666:	e8 fc ff ff ff       	call   10004667 <sb16Demo(void*)+0x37>	10004667: R_386_PC32	malloc
1000466b:	83 c4 0c             	add    esp,0xc
1000466e:	89 c6                	mov    esi,eax
10004670:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004672: R_386_32	kernelProcess
10004676:	68 00 00 00 00       	push   0x0	10004677: R_386_32	egFile
1000467b:	50                   	push   eax
1000467c:	e8 fc ff ff ff       	call   1000467d <sb16Demo(void*)+0x4d>	1000467d: R_386_PC32	File::File(char const*, Process*)
10004681:	5f                   	pop    edi
10004682:	5d                   	pop    ebp
10004683:	31 ed                	xor    ebp,ebp
10004685:	6a 01                	push   0x1
10004687:	56                   	push   esi
10004688:	e8 fc ff ff ff       	call   10004689 <sb16Demo(void*)+0x59>	10004689: R_386_PC32	File::open(FileOpenMode)
1000468d:	83 c4 10             	add    esp,0x10
10004690:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
10004698:	8b 06                	mov    eax,DWORD PTR [esi]
1000469a:	83 ec 0c             	sub    esp,0xc
1000469d:	8d 54 24 18          	lea    edx,[esp+0x18]
100046a1:	52                   	push   edx
100046a2:	68 00 00 00 00       	push   0x0	100046a3: R_386_32	buf
100046a7:	6a 00                	push   0x0
100046a9:	68 00 10 00 00       	push   0x1000
100046ae:	56                   	push   esi
100046af:	ff 50 0c             	call   DWORD PTR [eax+0xc]
100046b2:	83 c4 20             	add    esp,0x20
100046b5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
100046ba:	74 04                	je     100046c0 <sb16Demo(void*)+0x90>
100046bc:	85 c0                	test   eax,eax
100046be:	74 15                	je     100046d5 <sb16Demo(void*)+0xa5>
100046c0:	83 ec 0c             	sub    esp,0xc
100046c3:	68 90 63 00 10       	push   0x10006390	100046c4: R_386_32	.text
100046c8:	e8 fc ff ff ff       	call   100046c9 <sb16Demo(void*)+0x99>	100046c9: R_386_PC32	Dbg::kprintf(char const*, ...)
100046cd:	83 c4 2c             	add    esp,0x2c
100046d0:	5b                   	pop    ebx
100046d1:	5e                   	pop    esi
100046d2:	5f                   	pop    edi
100046d3:	5d                   	pop    ebp
100046d4:	c3                   	ret    
100046d5:	e8 fc ff ff ff       	call   100046d6 <sb16Demo(void*)+0xa6>	100046d6: R_386_PC32	lockScheduler()
100046da:	e8 fc ff ff ff       	call   100046db <sb16Demo(void*)+0xab>	100046db: R_386_PC32	schedule()
100046df:	e8 fc ff ff ff       	call   100046e0 <sb16Demo(void*)+0xb0>	100046e0: R_386_PC32	unlockScheduler()
100046e4:	83 ec 0c             	sub    esp,0xc
100046e7:	53                   	push   ebx
100046e8:	e8 fc ff ff ff       	call   100046e9 <sb16Demo(void*)+0xb9>	100046e9: R_386_PC32	SoundChannel::getBufferUsed()
100046ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
100046f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
100046f4:	89 c7                	mov    edi,eax
100046f6:	e8 fc ff ff ff       	call   100046f7 <sb16Demo(void*)+0xc7>	100046f7: R_386_PC32	SoundChannel::getBufferSize()
100046fb:	83 c4 10             	add    esp,0x10
100046fe:	39 c7                	cmp    edi,eax
10004700:	7c 10                	jl     10004712 <sb16Demo(void*)+0xe2>
10004702:	51                   	push   ecx
10004703:	51                   	push   ecx
10004704:	6a 00                	push   0x0
10004706:	6a 01                	push   0x1
10004708:	e8 fc ff ff ff       	call   10004709 <sb16Demo(void*)+0xd9>	10004709: R_386_PC32	sleep(unsigned long long)
1000470d:	83 c4 10             	add    esp,0x10
10004710:	eb d2                	jmp    100046e4 <sb16Demo(void*)+0xb4>
10004712:	52                   	push   edx
10004713:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10004717:	68 00 00 00 00       	push   0x0	10004718: R_386_32	buf
1000471c:	53                   	push   ebx
1000471d:	e8 fc ff ff ff       	call   1000471e <sb16Demo(void*)+0xee>	1000471e: R_386_PC32	SoundChannel::buffer8(unsigned char*, int)
10004722:	83 c4 10             	add    esp,0x10
10004725:	89 e8                	mov    eax,ebp
10004727:	84 c0                	test   al,al
10004729:	75 17                	jne    10004742 <sb16Demo(void*)+0x112>
1000472b:	50                   	push   eax
1000472c:	50                   	push   eax
1000472d:	53                   	push   ebx
1000472e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10004732:	e8 fc ff ff ff       	call   10004733 <sb16Demo(void*)+0x103>	10004733: R_386_PC32	SoundDevice::addChannel(SoundChannel*)
10004737:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000473a:	e8 fc ff ff ff       	call   1000473b <sb16Demo(void*)+0x10b>	1000473b: R_386_PC32	SoundChannel::play()
1000473f:	83 c4 10             	add    esp,0x10
10004742:	bd 01 00 00 00       	mov    ebp,0x1
10004747:	e9 44 ff ff ff       	jmp    10004690 <sb16Demo(void*)+0x60>

1000474c <SoundBlaster16::resetDSP()>:
1000474c:	53                   	push   ebx
1000474d:	b0 01                	mov    al,0x1
1000474f:	83 ec 10             	sub    esp,0x10
10004752:	bb 26 02 00 00       	mov    ebx,0x226
10004757:	89 da                	mov    edx,ebx
10004759:	ee                   	out    dx,al
1000475a:	6a 00                	push   0x0
1000475c:	68 c0 c6 2d 00       	push   0x2dc6c0
10004761:	e8 fc ff ff ff       	call   10004762 <SoundBlaster16::resetDSP()+0x16>	10004762: R_386_PC32	nanoSleep(unsigned long long)
10004766:	31 c0                	xor    eax,eax
10004768:	89 da                	mov    edx,ebx
1000476a:	ee                   	out    dx,al
1000476b:	ba 2a 02 00 00       	mov    edx,0x22a
10004770:	ec                   	in     al,dx
10004771:	83 c4 10             	add    esp,0x10
10004774:	3c aa                	cmp    al,0xaa
10004776:	75 25                	jne    1000479d <SoundBlaster16::resetDSP()+0x51>
10004778:	b0 e1                	mov    al,0xe1
1000477a:	ba 2c 02 00 00       	mov    edx,0x22c
1000477f:	ee                   	out    dx,al
10004780:	ba 2e 02 00 00       	mov    edx,0x22e
10004785:	ec                   	in     al,dx
10004786:	84 c0                	test   al,al
10004788:	79 fb                	jns    10004785 <SoundBlaster16::resetDSP()+0x39>
1000478a:	ba 2a 02 00 00       	mov    edx,0x22a
1000478f:	ec                   	in     al,dx
10004790:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004794:	88 81 f8 01 00 00    	mov    BYTE PTR [ecx+0x1f8],al
1000479a:	ec                   	in     al,dx
1000479b:	eb 13                	jmp    100047b0 <SoundBlaster16::resetDSP()+0x64>
1000479d:	0f b6 c0             	movzx  eax,al
100047a0:	51                   	push   ecx
100047a1:	51                   	push   ecx
100047a2:	50                   	push   eax
100047a3:	68 00 00 00 00       	push   0x0	100047a4: R_386_32	badVer
100047a8:	e8 fc ff ff ff       	call   100047a9 <SoundBlaster16::resetDSP()+0x5d>	100047a9: R_386_PC32	Dbg::kprintf(char const*, ...)
100047ad:	83 c4 10             	add    esp,0x10
100047b0:	83 c4 08             	add    esp,0x8
100047b3:	5b                   	pop    ebx
100047b4:	c3                   	ret    
100047b5:	90                   	nop

100047b6 <SoundBlaster16::DSPOut(unsigned short, unsigned char)>:
100047b6:	53                   	push   ebx
100047b7:	ba 2c 02 00 00       	mov    edx,0x22c
100047bc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
100047c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100047c4:	ec                   	in     al,dx
100047c5:	84 c0                	test   al,al
100047c7:	78 fb                	js     100047c4 <SoundBlaster16::DSPOut(unsigned short, unsigned char)+0xe>
100047c9:	88 c8                	mov    al,cl
100047cb:	89 da                	mov    edx,ebx
100047cd:	ee                   	out    dx,al
100047ce:	5b                   	pop    ebx
100047cf:	c3                   	ret    

100047d0 <SoundBlaster16::turnSpeakerOn(bool)>:
100047d0:	53                   	push   ebx
100047d1:	52                   	push   edx
100047d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100047d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
100047da:	80 fa 01             	cmp    dl,0x1
100047dd:	89 14 24             	mov    DWORD PTR [esp],edx
100047e0:	19 c0                	sbb    eax,eax
100047e2:	83 e0 02             	and    eax,0x2
100047e5:	05 d1 00 00 00       	add    eax,0xd1
100047ea:	50                   	push   eax
100047eb:	68 2c 02 00 00       	push   0x22c
100047f0:	53                   	push   ebx
100047f1:	e8 fc ff ff ff       	call   100047f2 <SoundBlaster16::turnSpeakerOn(bool)+0x22>	100047f2: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100047f6:	83 c4 0c             	add    esp,0xc
100047f9:	8b 14 24             	mov    edx,DWORD PTR [esp]
100047fc:	84 d2                	test   dl,dl
100047fe:	75 23                	jne    10004823 <SoundBlaster16::turnSpeakerOn(bool)+0x53>
10004800:	68 d0 00 00 00       	push   0xd0
10004805:	68 2c 02 00 00       	push   0x22c
1000480a:	53                   	push   ebx
1000480b:	e8 fc ff ff ff       	call   1000480c <SoundBlaster16::turnSpeakerOn(bool)+0x3c>	1000480c: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004810:	68 d3 00 00 00       	push   0xd3
10004815:	68 2c 02 00 00       	push   0x22c
1000481a:	53                   	push   ebx
1000481b:	e8 fc ff ff ff       	call   1000481c <SoundBlaster16::turnSpeakerOn(bool)+0x4c>	1000481c: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004820:	83 c4 18             	add    esp,0x18
10004823:	58                   	pop    eax
10004824:	5b                   	pop    ebx
10004825:	c3                   	ret    

10004826 <SoundBlaster16::SoundBlaster16()>:
10004826:	55                   	push   ebp
10004827:	89 e5                	mov    ebp,esp
10004829:	83 ec 08             	sub    esp,0x8
1000482c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000482f:	83 ec 08             	sub    esp,0x8
10004832:	68 00 00 00 00       	push   0x0	10004833: R_386_32	sb16name
10004837:	50                   	push   eax
10004838:	e8 fc ff ff ff       	call   10004839 <SoundBlaster16::SoundBlaster16()+0x13>	10004839: R_386_PC32	SoundDevice::SoundDevice(char const*)
1000483d:	83 c4 10             	add    esp,0x10
10004840:	ba 08 00 00 00       	mov    edx,0x8	10004841: R_386_32	vtable for SoundBlaster16
10004845:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004848:	89 10                	mov    DWORD PTR [eax],edx
1000484a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000484d:	c7 80 e8 01 00 00 40 1f 00 00 	mov    DWORD PTR [eax+0x1e8],0x1f40
10004857:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000485a:	c7 80 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x1ec],0x8
10004864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004867:	c6 80 f0 01 00 00 01 	mov    BYTE PTR [eax+0x1f0],0x1
1000486e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004871:	c6 80 f1 01 00 00 00 	mov    BYTE PTR [eax+0x1f1],0x0
10004878:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000487b:	c6 80 f2 01 00 00 00 	mov    BYTE PTR [eax+0x1f2],0x0
10004882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004885:	c6 80 f8 01 00 00 00 	mov    BYTE PTR [eax+0x1f8],0x0
1000488c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000488f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10004895:	0f b6 d0             	movzx  edx,al
10004898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000489b:	66 c7 44 90 04 20 02 	mov    WORD PTR [eax+edx*4+0x4],0x220
100048a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100048ab:	0f b6 d0             	movzx  edx,al
100048ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048b1:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
100048b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100048bf:	8d 50 01             	lea    edx,[eax+0x1]
100048c2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100048c5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100048cb:	0f b6 d0             	movzx  edx,al
100048ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048d1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100048d5:	83 e1 3f             	and    ecx,0x3f
100048d8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100048dc:	a1 00 00 00 00       	mov    eax,ds:0x0	100048dd: R_386_32	tempBuffer
100048e1:	85 c0                	test   eax,eax
100048e3:	75 2a                	jne    1000490f <SoundBlaster16::SoundBlaster16()+0xe9>
100048e5:	83 ec 0c             	sub    esp,0xc
100048e8:	68 00 80 00 00       	push   0x8000
100048ed:	e8 fc ff ff ff       	call   100048ee <SoundBlaster16::SoundBlaster16()+0xc8>	100048ee: R_386_PC32	malloc
100048f2:	83 c4 10             	add    esp,0x10
100048f5:	a3 00 00 00 00       	mov    ds:0x0,eax	100048f6: R_386_32	tempBuffer
100048fa:	83 ec 0c             	sub    esp,0xc
100048fd:	68 00 80 00 00       	push   0x8000
10004902:	e8 fc ff ff ff       	call   10004903 <SoundBlaster16::SoundBlaster16()+0xdd>	10004903: R_386_PC32	malloc
10004907:	83 c4 10             	add    esp,0x10
1000490a:	a3 00 00 00 00       	mov    ds:0x0,eax	1000490b: R_386_32	outputBuffer
1000490f:	90                   	nop
10004910:	c9                   	leave  
10004911:	c3                   	ret    

10004912 <SoundBlaster16::handleIRQ()>:
10004912:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10004916:	ba 2e 02 00 00       	mov    edx,0x22e
1000491b:	83 b9 e0 01 00 00 08 	cmp    DWORD PTR [ecx+0x1e0],0x8
10004922:	74 17                	je     1000493b <SoundBlaster16::handleIRQ()+0x29>
10004924:	b0 82                	mov    al,0x82
10004926:	ba 24 02 00 00       	mov    edx,0x224
1000492b:	ee                   	out    dx,al
1000492c:	ba 25 02 00 00       	mov    edx,0x225
10004931:	ec                   	in     al,dx
10004932:	a8 02                	test   al,0x2
10004934:	74 06                	je     1000493c <SoundBlaster16::handleIRQ()+0x2a>
10004936:	ba 2f 02 00 00       	mov    edx,0x22f
1000493b:	ec                   	in     al,dx
1000493c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
10004940:	e9 c7 03 00 00       	jmp    10004d0c <SoundBlaster16::onInterrupt()>

10004945 <sb16Handler(regs*, void*)>:
10004945:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004949:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
1000494d:	eb c3                	jmp    10004912 <SoundBlaster16::handleIRQ()>
1000494f:	90                   	nop

10004950 <SoundBlaster16::getNumHwChannels()>:
10004950:	b8 01 00 00 00       	mov    eax,0x1
10004955:	c3                   	ret    

10004956 <SoundBlaster16::beginPlayback(int, int)>:
10004956:	53                   	push   ebx
10004957:	50                   	push   eax
10004958:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
1000495c:	6a 01                	push   0x1
1000495e:	53                   	push   ebx
1000495f:	e8 fc ff ff ff       	call   10004960 <SoundBlaster16::beginPlayback(int, int)+0xa>	10004960: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10004964:	80 bb f0 01 00 00 01 	cmp    BYTE PTR [ebx+0x1f0],0x1
1000496b:	5a                   	pop    edx
1000496c:	19 c0                	sbb    eax,eax
1000496e:	59                   	pop    ecx
1000496f:	83 c0 02             	add    eax,0x2
10004972:	0f af 83 e8 01 00 00 	imul   eax,DWORD PTR [ebx+0x1e8]
10004979:	89 c1                	mov    ecx,eax
1000497b:	b8 c0 bd f0 ff       	mov    eax,0xfff0bdc0
10004980:	99                   	cdq    
10004981:	f7 f9                	idiv   ecx
10004983:	89 04 24             	mov    DWORD PTR [esp],eax
10004986:	6a 40                	push   0x40
10004988:	68 2c 02 00 00       	push   0x22c
1000498d:	53                   	push   ebx
1000498e:	e8 fc ff ff ff       	call   1000498f <SoundBlaster16::beginPlayback(int, int)+0x39>	1000498f: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004993:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
10004998:	50                   	push   eax
10004999:	68 2c 02 00 00       	push   0x22c
1000499e:	53                   	push   ebx
1000499f:	e8 fc ff ff ff       	call   100049a0 <SoundBlaster16::beginPlayback(int, int)+0x4a>	100049a0: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100049a4:	68 c0 00 00 00       	push   0xc0
100049a9:	68 2c 02 00 00       	push   0x22c
100049ae:	53                   	push   ebx
100049af:	e8 fc ff ff ff       	call   100049b0 <SoundBlaster16::beginPlayback(int, int)+0x5a>	100049b0: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100049b4:	83 c4 24             	add    esp,0x24
100049b7:	0f b6 83 f0 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1f0]
100049be:	0f b6 93 f1 01 00 00 	movzx  edx,BYTE PTR [ebx+0x1f1]
100049c5:	c1 e0 05             	shl    eax,0x5
100049c8:	c1 e2 04             	shl    edx,0x4
100049cb:	09 d0                	or     eax,edx
100049cd:	0f be c0             	movsx  eax,al
100049d0:	50                   	push   eax
100049d1:	68 2c 02 00 00       	push   0x22c
100049d6:	53                   	push   ebx
100049d7:	e8 fc ff ff ff       	call   100049d8 <SoundBlaster16::beginPlayback(int, int)+0x82>	100049d8: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100049dc:	68 ff 00 00 00       	push   0xff
100049e1:	68 2c 02 00 00       	push   0x22c
100049e6:	53                   	push   ebx
100049e7:	e8 fc ff ff ff       	call   100049e8 <SoundBlaster16::beginPlayback(int, int)+0x92>	100049e8: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100049ec:	6a 1f                	push   0x1f
100049ee:	68 2c 02 00 00       	push   0x22c
100049f3:	53                   	push   ebx
100049f4:	e8 fc ff ff ff       	call   100049f5 <SoundBlaster16::beginPlayback(int, int)+0x9f>	100049f5: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100049f9:	83 c4 24             	add    esp,0x24
100049fc:	6a 48                	push   0x48
100049fe:	68 2c 02 00 00       	push   0x22c
10004a03:	53                   	push   ebx
10004a04:	e8 fc ff ff ff       	call   10004a05 <SoundBlaster16::beginPlayback(int, int)+0xaf>	10004a05: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004a09:	68 ff 00 00 00       	push   0xff
10004a0e:	68 2c 02 00 00       	push   0x22c
10004a13:	53                   	push   ebx
10004a14:	e8 fc ff ff ff       	call   10004a15 <SoundBlaster16::beginPlayback(int, int)+0xbf>	10004a15: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004a19:	6a 1f                	push   0x1f
10004a1b:	68 2c 02 00 00       	push   0x22c
10004a20:	53                   	push   ebx
10004a21:	e8 fc ff ff ff       	call   10004a22 <SoundBlaster16::beginPlayback(int, int)+0xcc>	10004a22: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004a26:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
10004a2a:	c7 44 24 38 1c 00 00 00 	mov    DWORD PTR [esp+0x38],0x1c
10004a32:	c7 44 24 34 2c 02 00 00 	mov    DWORD PTR [esp+0x34],0x22c
10004a3a:	83 c4 28             	add    esp,0x28
10004a3d:	5b                   	pop    ebx
10004a3e:	e9 73 fd ff ff       	jmp    100047b6 <SoundBlaster16::DSPOut(unsigned short, unsigned char)>
10004a43:	90                   	nop

10004a44 <SoundBlaster16::stopPlayback()>:
10004a44:	6a 00                	push   0x0
10004a46:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10004a4a:	e8 fc ff ff ff       	call   10004a4b <SoundBlaster16::stopPlayback()+0x7>	10004a4b: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10004a4f:	58                   	pop    eax
10004a50:	5a                   	pop    edx
10004a51:	c3                   	ret    

10004a52 <SoundBlaster16::open(int, int, void*)>:
10004a52:	56                   	push   esi
10004a53:	be 25 02 00 00       	mov    esi,0x225
10004a58:	53                   	push   ebx
10004a59:	83 ec 14             	sub    esp,0x14
10004a5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10004a60:	c7 83 e8 01 00 00 40 1f 00 00 	mov    DWORD PTR [ebx+0x1e8],0x1f40
10004a6a:	c7 83 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x1ec],0x8
10004a74:	66 c7 83 f0 01 00 00 00 01 	mov    WORD PTR [ebx+0x1f0],0x100
10004a7d:	68 80 00 00 00       	push   0x80
10004a82:	68 24 02 00 00       	push   0x224
10004a87:	53                   	push   ebx
10004a88:	e8 fc ff ff ff       	call   10004a89 <SoundBlaster16::open(int, int, void*)+0x37>	10004a89: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004a8d:	89 f2                	mov    edx,esi
10004a8f:	ec                   	in     al,dx
10004a90:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
10004a94:	68 80 00 00 00       	push   0x80
10004a99:	68 24 02 00 00       	push   0x224
10004a9e:	53                   	push   ebx
10004a9f:	e8 fc ff ff ff       	call   10004aa0 <SoundBlaster16::open(int, int, void*)+0x4e>	10004aa0: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004aa4:	83 c4 18             	add    esp,0x18
10004aa7:	31 c0                	xor    eax,eax
10004aa9:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
10004aae:	0f 95 c0             	setne  al
10004ab1:	40                   	inc    eax
10004ab2:	50                   	push   eax
10004ab3:	68 25 02 00 00       	push   0x225
10004ab8:	53                   	push   ebx
10004ab9:	e8 fc ff ff ff       	call   10004aba <SoundBlaster16::open(int, int, void*)+0x68>	10004aba: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004abe:	68 80 00 00 00       	push   0x80
10004ac3:	68 24 02 00 00       	push   0x224
10004ac8:	53                   	push   ebx
10004ac9:	e8 fc ff ff ff       	call   10004aca <SoundBlaster16::open(int, int, void*)+0x78>	10004aca: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004ace:	89 f2                	mov    edx,esi
10004ad0:	ec                   	in     al,dx
10004ad1:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
10004ad5:	83 c4 18             	add    esp,0x18
10004ad8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
10004adc:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
10004ae0:	75 51                	jne    10004b33 <SoundBlaster16::open(int, int, void*)+0xe1>
10004ae2:	68 81 00 00 00       	push   0x81
10004ae7:	68 24 02 00 00       	push   0x224
10004aec:	53                   	push   ebx
10004aed:	e8 fc ff ff ff       	call   10004aee <SoundBlaster16::open(int, int, void*)+0x9c>	10004aee: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004af2:	89 f2                	mov    edx,esi
10004af4:	ec                   	in     al,dx
10004af5:	83 e0 0a             	and    eax,0xa
10004af8:	3c 01                	cmp    al,0x1
10004afa:	19 c0                	sbb    eax,eax
10004afc:	83 e0 62             	and    eax,0x62
10004aff:	40                   	inc    eax
10004b00:	89 04 24             	mov    DWORD PTR [esp],eax
10004b03:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004b05: R_386_32	isaDMAController
10004b09:	e8 fc ff ff ff       	call   10004b0a <SoundBlaster16::open(int, int, void*)+0xb8>	10004b0a: R_386_PC32	DMA::tryLockChannel(int)
10004b0e:	83 c4 10             	add    esp,0x10
10004b11:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
10004b17:	85 c0                	test   eax,eax
10004b19:	75 3a                	jne    10004b55 <SoundBlaster16::open(int, int, void*)+0x103>
10004b1b:	83 ec 0c             	sub    esp,0xc
10004b1e:	68 00 00 00 00       	push   0x0	10004b1f: R_386_32	nodma
10004b23:	e8 fc ff ff ff       	call   10004b24 <SoundBlaster16::open(int, int, void*)+0xd2>	10004b24: R_386_PC32	Dbg::kprintf(char const*, ...)
10004b28:	83 c4 10             	add    esp,0x10
10004b2b:	83 c8 ff             	or     eax,0xffffffff
10004b2e:	e9 d3 01 00 00       	jmp    10004d06 <SoundBlaster16::open(int, int, void*)+0x2b4>
10004b33:	56                   	push   esi
10004b34:	56                   	push   esi
10004b35:	6a 01                	push   0x1
10004b37:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004b39: R_386_32	isaDMAController
10004b3d:	e8 fc ff ff ff       	call   10004b3e <SoundBlaster16::open(int, int, void*)+0xec>	10004b3e: R_386_PC32	DMA::tryLockChannel(int)
10004b42:	83 c4 10             	add    esp,0x10
10004b45:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
10004b4b:	85 c0                	test   eax,eax
10004b4d:	75 06                	jne    10004b55 <SoundBlaster16::open(int, int, void*)+0x103>
10004b4f:	51                   	push   ecx
10004b50:	51                   	push   ecx
10004b51:	6a 03                	push   0x3
10004b53:	eb ae                	jmp    10004b03 <SoundBlaster16::open(int, int, void*)+0xb1>
10004b55:	50                   	push   eax
10004b56:	50                   	push   eax
10004b57:	68 00 40 00 00       	push   0x4000
10004b5c:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10004b62:	e8 fc ff ff ff       	call   10004b63 <SoundBlaster16::open(int, int, void*)+0x111>	10004b63: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
10004b67:	58                   	pop    eax
10004b68:	5a                   	pop    edx
10004b69:	6a 59                	push   0x59
10004b6b:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10004b71:	e8 fc ff ff ff       	call   10004b72 <SoundBlaster16::open(int, int, void*)+0x120>	10004b72: R_386_PC32	DMAChannel::setMode(unsigned char)
10004b76:	59                   	pop    ecx
10004b77:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10004b7d:	e8 fc ff ff ff       	call   10004b7e <SoundBlaster16::open(int, int, void*)+0x12c>	10004b7e: R_386_PC32	DMAChannel::start()
10004b82:	5e                   	pop    esi
10004b83:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10004b89:	e8 fc ff ff ff       	call   10004b8a <SoundBlaster16::open(int, int, void*)+0x138>	10004b8a: R_386_PC32	DMAChannel::getAddress()
10004b8e:	89 83 f4 01 00 00    	mov    DWORD PTR [ebx+0x1f4],eax
10004b94:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004b97:	e8 fc ff ff ff       	call   10004b98 <SoundBlaster16::open(int, int, void*)+0x146>	10004b98: R_386_PC32	SoundBlaster16::resetDSP()
10004b9c:	58                   	pop    eax
10004b9d:	5a                   	pop    edx
10004b9e:	6a 01                	push   0x1
10004ba0:	53                   	push   ebx
10004ba1:	e8 fc ff ff ff       	call   10004ba2 <SoundBlaster16::open(int, int, void*)+0x150>	10004ba2: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10004ba6:	83 c4 10             	add    esp,0x10
10004ba9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
10004bad:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
10004bb1:	75 6f                	jne    10004c22 <SoundBlaster16::open(int, int, void*)+0x1d0>
10004bb3:	50                   	push   eax
10004bb4:	68 80 00 00 00       	push   0x80
10004bb9:	68 24 02 00 00       	push   0x224
10004bbe:	53                   	push   ebx
10004bbf:	e8 fc ff ff ff       	call   10004bc0 <SoundBlaster16::open(int, int, void*)+0x16e>	10004bc0: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004bc4:	ba 25 02 00 00       	mov    edx,0x225
10004bc9:	ec                   	in     al,dx
10004bca:	83 c4 10             	add    esp,0x10
10004bcd:	3c 01                	cmp    al,0x1
10004bcf:	75 0f                	jne    10004be0 <SoundBlaster16::open(int, int, void*)+0x18e>
10004bd1:	83 ec 0c             	sub    esp,0xc
10004bd4:	53                   	push   ebx
10004bd5:	6a 01                	push   0x1
10004bd7:	68 00 00 00 00       	push   0x0	10004bd8: R_386_32	sb16Handler(regs*, void*)
10004bdc:	6a 02                	push   0x2
10004bde:	eb 6f                	jmp    10004c4f <SoundBlaster16::open(int, int, void*)+0x1fd>
10004be0:	3c 02                	cmp    al,0x2
10004be2:	75 06                	jne    10004bea <SoundBlaster16::open(int, int, void*)+0x198>
10004be4:	83 ec 0c             	sub    esp,0xc
10004be7:	53                   	push   ebx
10004be8:	eb 5c                	jmp    10004c46 <SoundBlaster16::open(int, int, void*)+0x1f4>
10004bea:	3c 04                	cmp    al,0x4
10004bec:	75 0f                	jne    10004bfd <SoundBlaster16::open(int, int, void*)+0x1ab>
10004bee:	83 ec 0c             	sub    esp,0xc
10004bf1:	53                   	push   ebx
10004bf2:	6a 01                	push   0x1
10004bf4:	68 00 00 00 00       	push   0x0	10004bf5: R_386_32	sb16Handler(regs*, void*)
10004bf9:	6a 07                	push   0x7
10004bfb:	eb 52                	jmp    10004c4f <SoundBlaster16::open(int, int, void*)+0x1fd>
10004bfd:	3c 08                	cmp    al,0x8
10004bff:	75 0f                	jne    10004c10 <SoundBlaster16::open(int, int, void*)+0x1be>
10004c01:	83 ec 0c             	sub    esp,0xc
10004c04:	53                   	push   ebx
10004c05:	6a 01                	push   0x1
10004c07:	68 00 00 00 00       	push   0x0	10004c08: R_386_32	sb16Handler(regs*, void*)
10004c0c:	6a 0a                	push   0xa
10004c0e:	eb 3f                	jmp    10004c4f <SoundBlaster16::open(int, int, void*)+0x1fd>
10004c10:	83 ec 0c             	sub    esp,0xc
10004c13:	68 00 00 00 00       	push   0x0	10004c14: R_386_32	noirq
10004c18:	e8 fc ff ff ff       	call   10004c19 <SoundBlaster16::open(int, int, void*)+0x1c7>	10004c19: R_386_PC32	Krnl::panic(char const*)
10004c1d:	83 c4 10             	add    esp,0x10
10004c20:	eb 36                	jmp    10004c58 <SoundBlaster16::open(int, int, void*)+0x206>
10004c22:	50                   	push   eax
10004c23:	68 80 00 00 00       	push   0x80
10004c28:	68 24 02 00 00       	push   0x224
10004c2d:	53                   	push   ebx
10004c2e:	e8 fc ff ff ff       	call   10004c2f <SoundBlaster16::open(int, int, void*)+0x1dd>	10004c2f: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004c33:	83 c4 0c             	add    esp,0xc
10004c36:	6a 02                	push   0x2
10004c38:	68 25 02 00 00       	push   0x225
10004c3d:	53                   	push   ebx
10004c3e:	e8 fc ff ff ff       	call   10004c3f <SoundBlaster16::open(int, int, void*)+0x1ed>	10004c3f: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004c43:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004c46:	6a 01                	push   0x1
10004c48:	68 00 00 00 00       	push   0x0	10004c49: R_386_32	sb16Handler(regs*, void*)
10004c4d:	6a 05                	push   0x5
10004c4f:	53                   	push   ebx
10004c50:	e8 fc ff ff ff       	call   10004c51 <SoundBlaster16::open(int, int, void*)+0x1ff>	10004c51: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10004c55:	83 c4 20             	add    esp,0x20
10004c58:	56                   	push   esi
10004c59:	68 81 00 00 00       	push   0x81
10004c5e:	68 24 02 00 00       	push   0x224
10004c63:	53                   	push   ebx
10004c64:	e8 fc ff ff ff       	call   10004c65 <SoundBlaster16::open(int, int, void*)+0x213>	10004c65: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004c69:	ba 25 02 00 00       	mov    edx,0x225
10004c6e:	ec                   	in     al,dx
10004c6f:	83 c4 0c             	add    esp,0xc
10004c72:	89 c6                	mov    esi,eax
10004c74:	68 81 00 00 00       	push   0x81
10004c79:	68 24 02 00 00       	push   0x224
10004c7e:	53                   	push   ebx
10004c7f:	e8 fc ff ff ff       	call   10004c80 <SoundBlaster16::open(int, int, void*)+0x22e>	10004c80: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004c84:	58                   	pop    eax
10004c85:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10004c8b:	e8 fc ff ff ff       	call   10004c8c <SoundBlaster16::open(int, int, void*)+0x23a>	10004c8c: R_386_PC32	DMAChannel::getChannelNum()
10004c90:	83 c4 10             	add    esp,0x10
10004c93:	48                   	dec    eax
10004c94:	75 0c                	jne    10004ca2 <SoundBlaster16::open(int, int, void*)+0x250>
10004c96:	81 e6 f0 00 00 00    	and    esi,0xf0
10004c9c:	51                   	push   ecx
10004c9d:	83 ce 02             	or     esi,0x2
10004ca0:	eb 20                	jmp    10004cc2 <SoundBlaster16::open(int, int, void*)+0x270>
10004ca2:	83 ec 0c             	sub    esp,0xc
10004ca5:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
10004cab:	e8 fc ff ff ff       	call   10004cac <SoundBlaster16::open(int, int, void*)+0x25a>	10004cac: R_386_PC32	DMAChannel::getChannelNum()
10004cb0:	83 c4 10             	add    esp,0x10
10004cb3:	83 f8 03             	cmp    eax,0x3
10004cb6:	75 18                	jne    10004cd0 <SoundBlaster16::open(int, int, void*)+0x27e>
10004cb8:	81 e6 f0 00 00 00    	and    esi,0xf0
10004cbe:	52                   	push   edx
10004cbf:	83 ce 08             	or     esi,0x8
10004cc2:	56                   	push   esi
10004cc3:	68 25 02 00 00       	push   0x225
10004cc8:	53                   	push   ebx
10004cc9:	e8 fc ff ff ff       	call   10004cca <SoundBlaster16::open(int, int, void*)+0x278>	10004cca: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004cce:	eb 0d                	jmp    10004cdd <SoundBlaster16::open(int, int, void*)+0x28b>
10004cd0:	83 ec 0c             	sub    esp,0xc
10004cd3:	68 00 00 00 00       	push   0x0	10004cd4: R_386_32	baddma
10004cd8:	e8 fc ff ff ff       	call   10004cd9 <SoundBlaster16::open(int, int, void*)+0x287>	10004cd9: R_386_PC32	Krnl::panic(char const*)
10004cdd:	83 c4 10             	add    esp,0x10
10004ce0:	50                   	push   eax
10004ce1:	6a 22                	push   0x22
10004ce3:	68 24 02 00 00       	push   0x224
10004ce8:	53                   	push   ebx
10004ce9:	e8 fc ff ff ff       	call   10004cea <SoundBlaster16::open(int, int, void*)+0x298>	10004cea: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004cee:	83 c4 0c             	add    esp,0xc
10004cf1:	68 ff 00 00 00       	push   0xff
10004cf6:	68 24 02 00 00       	push   0x224
10004cfb:	53                   	push   ebx
10004cfc:	e8 fc ff ff ff       	call   10004cfd <SoundBlaster16::open(int, int, void*)+0x2ab>	10004cfd: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004d01:	83 c4 10             	add    esp,0x10
10004d04:	31 c0                	xor    eax,eax
10004d06:	83 c4 14             	add    esp,0x14
10004d09:	5b                   	pop    ebx
10004d0a:	5e                   	pop    esi
10004d0b:	c3                   	ret    

10004d0c <SoundBlaster16::onInterrupt()>:
10004d0c:	56                   	push   esi
10004d0d:	53                   	push   ebx
10004d0e:	53                   	push   ebx
10004d0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10004d13:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004d15: R_386_32	outputBuffer
10004d19:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004d1b: R_386_32	tempBuffer
10004d1f:	68 00 20 00 00       	push   0x2000
10004d24:	56                   	push   esi
10004d25:	e8 fc ff ff ff       	call   10004d26 <SoundBlaster16::onInterrupt()+0x1a>	10004d26: R_386_PC32	SoundDevice::getAudio(int, float*, float*)
10004d2a:	83 c4 10             	add    esp,0x10
10004d2d:	89 c3                	mov    ebx,eax
10004d2f:	80 3d 5f 66 00 10 01 	cmp    BYTE PTR ds:0x1000665f,0x1	10004d31: R_386_32	.data
10004d36:	53                   	push   ebx
10004d37:	19 c0                	sbb    eax,eax
10004d39:	25 00 20 00 00       	and    eax,0x2000
10004d3e:	03 86 f4 01 00 00    	add    eax,DWORD PTR [esi+0x1f4]
10004d44:	50                   	push   eax
10004d45:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004d47: R_386_32	outputBuffer
10004d4b:	56                   	push   esi
10004d4c:	e8 fc ff ff ff       	call   10004d4d <SoundBlaster16::onInterrupt()+0x41>	10004d4d: R_386_PC32	SoundDevice::floatTo8(float*, unsigned char*, int)
10004d51:	83 c4 10             	add    esp,0x10
10004d54:	85 db                	test   ebx,ebx
10004d56:	75 0c                	jne    10004d64 <SoundBlaster16::onInterrupt()+0x58>
10004d58:	51                   	push   ecx
10004d59:	51                   	push   ecx
10004d5a:	6a 00                	push   0x0
10004d5c:	56                   	push   esi
10004d5d:	e8 fc ff ff ff       	call   10004d5e <SoundBlaster16::onInterrupt()+0x52>	10004d5e: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10004d62:	eb 3e                	jmp    10004da2 <SoundBlaster16::onInterrupt()+0x96>
10004d64:	81 fb ff 1f 00 00    	cmp    ebx,0x1fff
10004d6a:	7f 39                	jg     10004da5 <SoundBlaster16::onInterrupt()+0x99>
10004d6c:	52                   	push   edx
10004d6d:	6a 24                	push   0x24
10004d6f:	68 2c 02 00 00       	push   0x22c
10004d74:	56                   	push   esi
10004d75:	e8 fc ff ff ff       	call   10004d76 <SoundBlaster16::onInterrupt()+0x6a>	10004d76: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004d7a:	83 c4 0c             	add    esp,0xc
10004d7d:	8d 43 ff             	lea    eax,[ebx-0x1]
10004d80:	4b                   	dec    ebx
10004d81:	0f b6 c0             	movzx  eax,al
10004d84:	0f b6 df             	movzx  ebx,bh
10004d87:	50                   	push   eax
10004d88:	68 2c 02 00 00       	push   0x22c
10004d8d:	56                   	push   esi
10004d8e:	e8 fc ff ff ff       	call   10004d8f <SoundBlaster16::onInterrupt()+0x83>	10004d8f: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004d93:	83 c4 0c             	add    esp,0xc
10004d96:	53                   	push   ebx
10004d97:	68 2c 02 00 00       	push   0x22c
10004d9c:	56                   	push   esi
10004d9d:	e8 fc ff ff ff       	call   10004d9e <SoundBlaster16::onInterrupt()+0x92>	10004d9e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004da2:	83 c4 10             	add    esp,0x10
10004da5:	80 35 5f 66 00 10 01 	xor    BYTE PTR ds:0x1000665f,0x1	10004da7: R_386_32	.data
10004dac:	58                   	pop    eax
10004dad:	5b                   	pop    ebx
10004dae:	5e                   	pop    esi
10004daf:	c3                   	ret    

10004db0 <SoundBlaster16::close(int, int, void*)>:
10004db0:	83 ec 0c             	sub    esp,0xc
10004db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004db7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
10004dbd:	85 c0                	test   eax,eax
10004dbf:	74 11                	je     10004dd2 <SoundBlaster16::close(int, int, void*)+0x22>
10004dc1:	52                   	push   edx
10004dc2:	52                   	push   edx
10004dc3:	50                   	push   eax
10004dc4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004dc6: R_386_32	isaDMAController
10004dca:	e8 fc ff ff ff       	call   10004dcb <SoundBlaster16::close(int, int, void*)+0x1b>	10004dcb: R_386_PC32	DMA::unlockChannel(DMAChannel*)
10004dcf:	83 c4 10             	add    esp,0x10
10004dd2:	31 c0                	xor    eax,eax
10004dd4:	83 c4 0c             	add    esp,0xc
10004dd7:	c3                   	ret    

10004dd8 <ISA::~ISA()>:
10004dd8:	55                   	push   ebp
10004dd9:	89 e5                	mov    ebp,esp
10004ddb:	83 ec 08             	sub    esp,0x8
10004dde:	ba 08 00 00 00       	mov    edx,0x8	10004ddf: R_386_32	vtable for ISA
10004de3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004de6:	89 10                	mov    DWORD PTR [eax],edx
10004de8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004deb:	83 ec 0c             	sub    esp,0xc
10004dee:	50                   	push   eax
10004def:	e8 fc ff ff ff       	call   10004df0 <ISA::~ISA()+0x18>	10004df0: R_386_PC32	Bus::~Bus()
10004df4:	83 c4 10             	add    esp,0x10
10004df7:	90                   	nop
10004df8:	c9                   	leave  
10004df9:	c3                   	ret    

10004dfa <ISA::~ISA()>:
10004dfa:	55                   	push   ebp
10004dfb:	89 e5                	mov    ebp,esp
10004dfd:	83 ec 08             	sub    esp,0x8
10004e00:	83 ec 0c             	sub    esp,0xc
10004e03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004e06:	e8 fc ff ff ff       	call   10004e07 <ISA::~ISA()+0xd>	10004e07: R_386_PC32	ISA::~ISA()
10004e0b:	83 c4 10             	add    esp,0x10
10004e0e:	83 ec 08             	sub    esp,0x8
10004e11:	68 58 01 00 00       	push   0x158
10004e16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004e19:	e8 fc ff ff ff       	call   10004e1a <ISA::~ISA()+0x20>	10004e1a: R_386_PC32	operator delete(void*, unsigned long)
10004e1e:	83 c4 10             	add    esp,0x10
10004e21:	c9                   	leave  
10004e22:	c3                   	ret    
10004e23:	90                   	nop

10004e24 <Floppy::~Floppy()>:
10004e24:	55                   	push   ebp
10004e25:	89 e5                	mov    ebp,esp
10004e27:	83 ec 08             	sub    esp,0x8
10004e2a:	ba 08 00 00 00       	mov    edx,0x8	10004e2b: R_386_32	vtable for Floppy
10004e2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004e32:	89 10                	mov    DWORD PTR [eax],edx
10004e34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004e37:	83 ec 0c             	sub    esp,0xc
10004e3a:	50                   	push   eax
10004e3b:	e8 fc ff ff ff       	call   10004e3c <Floppy::~Floppy()+0x18>	10004e3c: R_386_PC32	HardDiskController::~HardDiskController()
10004e40:	83 c4 10             	add    esp,0x10
10004e43:	90                   	nop
10004e44:	c9                   	leave  
10004e45:	c3                   	ret    

10004e46 <Floppy::~Floppy()>:
10004e46:	55                   	push   ebp
10004e47:	89 e5                	mov    ebp,esp
10004e49:	83 ec 08             	sub    esp,0x8
10004e4c:	83 ec 0c             	sub    esp,0xc
10004e4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004e52:	e8 fc ff ff ff       	call   10004e53 <Floppy::~Floppy()+0xd>	10004e53: R_386_PC32	Floppy::~Floppy()
10004e57:	83 c4 10             	add    esp,0x10
10004e5a:	83 ec 08             	sub    esp,0x8
10004e5d:	68 b8 01 00 00       	push   0x1b8
10004e62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004e65:	e8 fc ff ff ff       	call   10004e66 <Floppy::~Floppy()+0x20>	10004e66: R_386_PC32	operator delete(void*, unsigned long)
10004e6a:	83 c4 10             	add    esp,0x10
10004e6d:	c9                   	leave  
10004e6e:	c3                   	ret    
10004e6f:	90                   	nop

10004e70 <JoystickHost::JoystickHost()>:
10004e70:	55                   	push   ebp
10004e71:	89 e5                	mov    ebp,esp
10004e73:	ba 08 00 00 00       	mov    edx,0x8	10004e74: R_386_32	vtable for JoystickHost
10004e78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004e7b:	89 10                	mov    DWORD PTR [eax],edx
10004e7d:	90                   	nop
10004e7e:	5d                   	pop    ebp
10004e7f:	c3                   	ret    

10004e80 <DMA::~DMA()>:
10004e80:	55                   	push   ebp
10004e81:	89 e5                	mov    ebp,esp
10004e83:	83 ec 08             	sub    esp,0x8
10004e86:	ba 08 00 00 00       	mov    edx,0x8	10004e87: R_386_32	vtable for DMA
10004e8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004e8e:	89 10                	mov    DWORD PTR [eax],edx
10004e90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004e93:	83 ec 0c             	sub    esp,0xc
10004e96:	50                   	push   eax
10004e97:	e8 fc ff ff ff       	call   10004e98 <DMA::~DMA()+0x18>	10004e98: R_386_PC32	Device::~Device()
10004e9c:	83 c4 10             	add    esp,0x10
10004e9f:	90                   	nop
10004ea0:	c9                   	leave  
10004ea1:	c3                   	ret    

10004ea2 <DMA::~DMA()>:
10004ea2:	55                   	push   ebp
10004ea3:	89 e5                	mov    ebp,esp
10004ea5:	83 ec 08             	sub    esp,0x8
10004ea8:	83 ec 0c             	sub    esp,0xc
10004eab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004eae:	e8 fc ff ff ff       	call   10004eaf <DMA::~DMA()+0xd>	10004eaf: R_386_PC32	DMA::~DMA()
10004eb3:	83 c4 10             	add    esp,0x10
10004eb6:	83 ec 08             	sub    esp,0x8
10004eb9:	68 5c 01 00 00       	push   0x15c
10004ebe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004ec1:	e8 fc ff ff ff       	call   10004ec2 <DMA::~DMA()+0x20>	10004ec2: R_386_PC32	operator delete(void*, unsigned long)
10004ec6:	83 c4 10             	add    esp,0x10
10004ec9:	c9                   	leave  
10004eca:	c3                   	ret    
10004ecb:	90                   	nop

10004ecc <PS2::~PS2()>:
10004ecc:	55                   	push   ebp
10004ecd:	89 e5                	mov    ebp,esp
10004ecf:	83 ec 08             	sub    esp,0x8
10004ed2:	ba 08 00 00 00       	mov    edx,0x8	10004ed3: R_386_32	vtable for PS2
10004ed7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004eda:	89 10                	mov    DWORD PTR [eax],edx
10004edc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004edf:	83 ec 0c             	sub    esp,0xc
10004ee2:	50                   	push   eax
10004ee3:	e8 fc ff ff ff       	call   10004ee4 <PS2::~PS2()+0x18>	10004ee4: R_386_PC32	Bus::~Bus()
10004ee8:	83 c4 10             	add    esp,0x10
10004eeb:	90                   	nop
10004eec:	c9                   	leave  
10004eed:	c3                   	ret    

10004eee <PS2::~PS2()>:
10004eee:	55                   	push   ebp
10004eef:	89 e5                	mov    ebp,esp
10004ef1:	83 ec 08             	sub    esp,0x8
10004ef4:	83 ec 0c             	sub    esp,0xc
10004ef7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004efa:	e8 fc ff ff ff       	call   10004efb <PS2::~PS2()+0xd>	10004efb: R_386_PC32	PS2::~PS2()
10004eff:	83 c4 10             	add    esp,0x10
10004f02:	83 ec 08             	sub    esp,0x8
10004f05:	68 60 01 00 00       	push   0x160
10004f0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004f0d:	e8 fc ff ff ff       	call   10004f0e <PS2::~PS2()+0x20>	10004f0e: R_386_PC32	operator delete(void*, unsigned long)
10004f12:	83 c4 10             	add    esp,0x10
10004f15:	c9                   	leave  
10004f16:	c3                   	ret    
10004f17:	90                   	nop

10004f18 <PS2Mouse::~PS2Mouse()>:
10004f18:	55                   	push   ebp
10004f19:	89 e5                	mov    ebp,esp
10004f1b:	83 ec 08             	sub    esp,0x8
10004f1e:	ba 08 00 00 00       	mov    edx,0x8	10004f1f: R_386_32	vtable for PS2Mouse
10004f23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004f26:	89 10                	mov    DWORD PTR [eax],edx
10004f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004f2b:	83 ec 0c             	sub    esp,0xc
10004f2e:	50                   	push   eax
10004f2f:	e8 fc ff ff ff       	call   10004f30 <PS2Mouse::~PS2Mouse()+0x18>	10004f30: R_386_PC32	Mouse::~Mouse()
10004f34:	83 c4 10             	add    esp,0x10
10004f37:	90                   	nop
10004f38:	c9                   	leave  
10004f39:	c3                   	ret    

10004f3a <PS2Mouse::~PS2Mouse()>:
10004f3a:	55                   	push   ebp
10004f3b:	89 e5                	mov    ebp,esp
10004f3d:	83 ec 08             	sub    esp,0x8
10004f40:	83 ec 0c             	sub    esp,0xc
10004f43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004f46:	e8 fc ff ff ff       	call   10004f47 <PS2Mouse::~PS2Mouse()+0xd>	10004f47: R_386_PC32	PS2Mouse::~PS2Mouse()
10004f4b:	83 c4 10             	add    esp,0x10
10004f4e:	83 ec 08             	sub    esp,0x8
10004f51:	68 68 01 00 00       	push   0x168
10004f56:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004f59:	e8 fc ff ff ff       	call   10004f5a <PS2Mouse::~PS2Mouse()+0x20>	10004f5a: R_386_PC32	operator delete(void*, unsigned long)
10004f5e:	83 c4 10             	add    esp,0x10
10004f61:	c9                   	leave  
10004f62:	c3                   	ret    
10004f63:	90                   	nop

10004f64 <PS2Port::~PS2Port()>:
10004f64:	55                   	push   ebp
10004f65:	89 e5                	mov    ebp,esp
10004f67:	83 ec 08             	sub    esp,0x8
10004f6a:	ba 08 00 00 00       	mov    edx,0x8	10004f6b: R_386_32	vtable for PS2Port
10004f6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004f72:	89 10                	mov    DWORD PTR [eax],edx
10004f74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004f77:	83 ec 0c             	sub    esp,0xc
10004f7a:	50                   	push   eax
10004f7b:	e8 fc ff ff ff       	call   10004f7c <PS2Port::~PS2Port()+0x18>	10004f7c: R_386_PC32	Bus::~Bus()
10004f80:	83 c4 10             	add    esp,0x10
10004f83:	90                   	nop
10004f84:	c9                   	leave  
10004f85:	c3                   	ret    

10004f86 <PS2Port::~PS2Port()>:
10004f86:	55                   	push   ebp
10004f87:	89 e5                	mov    ebp,esp
10004f89:	83 ec 08             	sub    esp,0x8
10004f8c:	83 ec 0c             	sub    esp,0xc
10004f8f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004f92:	e8 fc ff ff ff       	call   10004f93 <PS2Port::~PS2Port()+0xd>	10004f93: R_386_PC32	PS2Port::~PS2Port()
10004f97:	83 c4 10             	add    esp,0x10
10004f9a:	83 ec 08             	sub    esp,0x8
10004f9d:	68 60 01 00 00       	push   0x160
10004fa2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004fa5:	e8 fc ff ff ff       	call   10004fa6 <PS2Port::~PS2Port()+0x20>	10004fa6: R_386_PC32	operator delete(void*, unsigned long)
10004faa:	83 c4 10             	add    esp,0x10
10004fad:	c9                   	leave  
10004fae:	c3                   	ret    
10004faf:	90                   	nop

10004fb0 <SoundBlaster16::~SoundBlaster16()>:
10004fb0:	55                   	push   ebp
10004fb1:	89 e5                	mov    ebp,esp
10004fb3:	83 ec 08             	sub    esp,0x8
10004fb6:	ba 08 00 00 00       	mov    edx,0x8	10004fb7: R_386_32	vtable for SoundBlaster16
10004fbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004fbe:	89 10                	mov    DWORD PTR [eax],edx
10004fc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004fc3:	83 ec 0c             	sub    esp,0xc
10004fc6:	50                   	push   eax
10004fc7:	e8 fc ff ff ff       	call   10004fc8 <SoundBlaster16::~SoundBlaster16()+0x18>	10004fc8: R_386_PC32	SoundDevice::~SoundDevice()
10004fcc:	83 c4 10             	add    esp,0x10
10004fcf:	90                   	nop
10004fd0:	c9                   	leave  
10004fd1:	c3                   	ret    

10004fd2 <SoundBlaster16::~SoundBlaster16()>:
10004fd2:	55                   	push   ebp
10004fd3:	89 e5                	mov    ebp,esp
10004fd5:	83 ec 08             	sub    esp,0x8
10004fd8:	83 ec 0c             	sub    esp,0xc
10004fdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004fde:	e8 fc ff ff ff       	call   10004fdf <SoundBlaster16::~SoundBlaster16()+0xd>	10004fdf: R_386_PC32	SoundBlaster16::~SoundBlaster16()
10004fe3:	83 c4 10             	add    esp,0x10
10004fe6:	83 ec 08             	sub    esp,0x8
10004fe9:	68 fc 01 00 00       	push   0x1fc
10004fee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004ff1:	e8 fc ff ff ff       	call   10004ff2 <SoundBlaster16::~SoundBlaster16()+0x20>	10004ff2: R_386_PC32	operator delete(void*, unsigned long)
10004ff6:	83 c4 10             	add    esp,0x10
10004ff9:	c9                   	leave  
10004ffa:	c3                   	ret    
10004ffb:	90                   	nop

10004ffc <PHYS_RAM_TABLE_SIZE>:
10004ffc:	13 05 00 00                                         ....

10005000 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005000:	24 05 00 00                                         $...

10005004 <PHYS_RAM_TABLE>:
10005004:	00 06 00 00                                         ....

10005008 <PHYS_DMA_MEMORY_1>:
10005008:	00 00 01 00                                         ....

1000500c <PHYS_PHYS_PAGE_BITMAP>:
1000500c:	00 00 02 00                                         ....

10005010 <PHYS_VIRT_PAGE_BITMAP>:
10005010:	00 00 04 00                                         ....

10005014 <PHYS_DMA_MEMORY_2>:
10005014:	00 00 06 00                                         ....

10005018 <PHYS_ALLOCED_VIRT_PAGES>:
10005018:	00 00 10 00                                         ....

1000501c <PHYS_KRNL_PAGE_DIRECTORY>:
1000501c:	00 10 00 00                                         ....

10005020 <VIRT_KERNEL_BASE>:
10005020:	00 00 00 c0                                         ....

10005024 <VIRT_LOW_MEGS>:
10005024:	00 00 00 c2                                         ....

10005028 <VIRT_CPU_SPECIFIC>:
10005028:	00 00 40 c2                                         ..@.

1000502c <VIRT_RECURSIVE_SPOT_1>:
1000502c:	00 00 80 c2                                         ....

10005030 <VIRT_RECURSIVE_SPOT_2>:
10005030:	00 00 c0 c2                                         ....

10005034 <VIRT_DMA_MEMORY_1>:
10005034:	00 00 01 c2                                         ....

10005038 <SIZE_DMA_MEMORY_1>:
10005038:	00 00 01 00                                         ....

1000503c <VIRT_DMA_MEMORY_2>:
1000503c:	00 00 06 c2                                         ....

10005040 <SIZE_DMA_MEMORY_2>:
10005040:	00 00 02 00                                         ....

10005044 <VIRT_KRNL_PAGE_DIRECTORY>:
10005044:	00 10 00 c2                                         ....

10005048 <VIRT_PHYS_PAGE_BITMAP>:
10005048:	00 00 02 c2                                         ....

1000504c <SIZE_PHYS_PAGE_BITMAP>:
1000504c:	00 00 02 00                                         ....

10005050 <VIRT_VIRT_PAGE_BITMAP>:
10005050:	00 00 04 c2                                         ....

10005054 <SIZE_VIRT_PAGE_BITMAP>:
10005054:	00 80 00 00                                         ....

10005058 <VIRT_RAM_TABLE>:
10005058:	00 06 00 c2                                         ....

1000505c <VIRT_RAM_TABLE_SIZE>:
1000505c:	13 05 00 c2                                         ....

10005060 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005060:	24 05 00 c2                                         $...

10005064 <SIZE_APP_STACK_USER>:
10005064:	00 00 18 00                                         ....

10005068 <SIZE_APP_STACK_KRNL>:
10005068:	00 00 08 00                                         ....

1000506c <SIZE_APP_STACK_TOTAL>:
1000506c:	00 00 20 00                                         .. .

10005070 <VIRT_APP_DATA>:
10005070:	00 00 00 10                                         ....

10005074 <VIRT_APP_STACK_USER_TOP>:
10005074:	00 00 00 02                                         ....

10005078 <VIRT_APP_STACK_KRNL_TOP>:
10005078:	00 00 e8 01                                         ....

1000507c <VIRT_HEAP_MIN>:
1000507c:	00 00 00 c8                                         ....

10005080 <VIRT_HEAP_MAX>:
10005080:	ff ff ff ef                                         ....

10005084 <VIRT_SBRK_MIN>:
10005084:	00 00 00 f0                                         ....

10005088 <VIRT_SBRK_MAX>:
10005088:	00 00 c0 ff                                         ....

1000508c <VIRT_ALLOCED_VIRT_PAGES>:
1000508c:	00 00 10 c2                                         ....

10005090 <VIRT_ACPI_DRIVER>:
10005090:	00 40 48 c2                                         .@H.

10005094 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005094:	96 00 00 00                                         ....

10005098 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005098:	2c 01 00 00 49 53 41 20 42 75 73 00                 ,...ISA Bus.

100050a4 <vtable for ISA>:
	...
	100050ac: R_386_32	ISA::~ISA()
	100050b0: R_386_32	ISA::~ISA()
	100050b4: R_386_32	ISA::open(int, int, void*)
	100050b8: R_386_32	ISA::close(int, int, void*)
	100050bc: R_386_32	Device::hibernate()
	100050c0: R_386_32	Device::wake()
	100050c4: R_386_32	ISA::detect()
	100050c8: R_386_32	Device::disableLegacy()
	100050cc: R_386_32	Device::powerSaving(PowerSavingLevel)

100050d0 <TERMINAL_KEYBUFFER_IN_SIZE>:
100050d0:	96 00 00 00                                         ....

100050d4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100050d4:	2c 01 00 00                                         ,...

100050d8 <PHYS_RAM_TABLE_SIZE>:
100050d8:	13 05 00 00                                         ....

100050dc <PHYS_HIGHEST_UNUSED_ADDRESS>:
100050dc:	24 05 00 00                                         $...

100050e0 <PHYS_RAM_TABLE>:
100050e0:	00 06 00 00                                         ....

100050e4 <PHYS_DMA_MEMORY_1>:
100050e4:	00 00 01 00                                         ....

100050e8 <PHYS_PHYS_PAGE_BITMAP>:
100050e8:	00 00 02 00                                         ....

100050ec <PHYS_VIRT_PAGE_BITMAP>:
100050ec:	00 00 04 00                                         ....

100050f0 <PHYS_DMA_MEMORY_2>:
100050f0:	00 00 06 00                                         ....

100050f4 <PHYS_ALLOCED_VIRT_PAGES>:
100050f4:	00 00 10 00                                         ....

100050f8 <PHYS_KRNL_PAGE_DIRECTORY>:
100050f8:	00 10 00 00                                         ....

100050fc <VIRT_KERNEL_BASE>:
100050fc:	00 00 00 c0                                         ....

10005100 <VIRT_LOW_MEGS>:
10005100:	00 00 00 c2                                         ....

10005104 <VIRT_CPU_SPECIFIC>:
10005104:	00 00 40 c2                                         ..@.

10005108 <VIRT_RECURSIVE_SPOT_1>:
10005108:	00 00 80 c2                                         ....

1000510c <VIRT_RECURSIVE_SPOT_2>:
1000510c:	00 00 c0 c2                                         ....

10005110 <VIRT_DMA_MEMORY_1>:
10005110:	00 00 01 c2                                         ....

10005114 <SIZE_DMA_MEMORY_1>:
10005114:	00 00 01 00                                         ....

10005118 <VIRT_DMA_MEMORY_2>:
10005118:	00 00 06 c2                                         ....

1000511c <SIZE_DMA_MEMORY_2>:
1000511c:	00 00 02 00                                         ....

10005120 <VIRT_KRNL_PAGE_DIRECTORY>:
10005120:	00 10 00 c2                                         ....

10005124 <VIRT_PHYS_PAGE_BITMAP>:
10005124:	00 00 02 c2                                         ....

10005128 <SIZE_PHYS_PAGE_BITMAP>:
10005128:	00 00 02 00                                         ....

1000512c <VIRT_VIRT_PAGE_BITMAP>:
1000512c:	00 00 04 c2                                         ....

10005130 <SIZE_VIRT_PAGE_BITMAP>:
10005130:	00 80 00 00                                         ....

10005134 <VIRT_RAM_TABLE>:
10005134:	00 06 00 c2                                         ....

10005138 <VIRT_RAM_TABLE_SIZE>:
10005138:	13 05 00 c2                                         ....

1000513c <VIRT_HIGHEST_UNUSED_ADDRESS>:
1000513c:	24 05 00 c2                                         $...

10005140 <SIZE_APP_STACK_USER>:
10005140:	00 00 18 00                                         ....

10005144 <SIZE_APP_STACK_KRNL>:
10005144:	00 00 08 00                                         ....

10005148 <SIZE_APP_STACK_TOTAL>:
10005148:	00 00 20 00                                         .. .

1000514c <VIRT_APP_DATA>:
1000514c:	00 00 00 10                                         ....

10005150 <VIRT_APP_STACK_USER_TOP>:
10005150:	00 00 00 02                                         ....

10005154 <VIRT_APP_STACK_KRNL_TOP>:
10005154:	00 00 e8 01                                         ....

10005158 <VIRT_HEAP_MIN>:
10005158:	00 00 00 c8                                         ....

1000515c <VIRT_HEAP_MAX>:
1000515c:	ff ff ff ef                                         ....

10005160 <VIRT_SBRK_MIN>:
10005160:	00 00 00 f0                                         ....

10005164 <VIRT_SBRK_MAX>:
10005164:	00 00 c0 ff                                         ....

10005168 <VIRT_ALLOCED_VIRT_PAGES>:
10005168:	00 00 10 c2                                         ....

1000516c <VIRT_ACPI_DRIVER>:
1000516c:	00 40 48 c2 46 6c 6f 70 70 79 20 44 69 73 6b 20     .@H.Floppy Disk 
1000517c:	43 6f 6e 74 72 6f 6c 6c 65 72 00 00 50 52 45 56     Controller..PREV
1000518c:	49 4f 55 53 20 43 4f 4d 4d 41 4e 44 20 46 41 49     IOUS COMMAND FAI
1000519c:	4c 45 44 2c 20 43 41 55 47 48 54 20 42 59 20 77     LED, CAUGHT BY w
100051ac:	72 69 74 65 43 6f 6d 6d 61 6e 64 00 44 49 44 20     riteCommand.DID 
100051bc:	4e 4f 54 20 43 48 45 43 4b 20 46 4f 52 20 46 41     NOT CHECK FOR FA
100051cc:	49 4c 55 52 45 20 42 45 46 4f 52 45 20 77 72 69     ILURE BEFORE wri
100051dc:	74 65 43 6f 6d 6d 61 6e 64 00 46 6c 6f 70 70 79     teCommand.Floppy
100051ec:	3a 3a 64 72 69 76 65 44 65 74 65 63 74 69 6f 6e     ::driveDetection
100051fc:	28 29 0a 00 44 72 69 76 65 20 74 79 70 65 20 30     ()..Drive type 0
1000520c:	3a 20 30 78 25 58 0a 00 44 72 69 76 65 20 74 79     : 0x%X..Drive ty
1000521c:	70 65 20 31 3a 20 30 78 25 58 0a 00 76 6f 69 64     pe 1: 0x%X..void
1000522c:	20 46 6c 6f 70 70 79 3a 3a 72 65 73 65 74 28 29      Floppy::reset()
1000523c:	0a 00 53 50 45 43 49 46 59 20 42 41 44 20 44 41     ..SPECIFY BAD DA
1000524c:	54 41 52 41 54 45 00 00 20 a1 07 00 e0 93 04 00     TARATE.. .......
1000525c:	90 d0 03 00 40 42 0f 00 73 65 6c 65 63 74 20 28     ....@B..select (
1000526c:	41 29 2e 20 25 64 0a 00 73 65 6c 65 63 74 20 28     A). %d..select (
1000527c:	42 29 2e 0a 00 73 65 6c 65 63 74 20 28 43 29 2e     B)...select (C).
1000528c:	0a 00 73 65 6c 65 63 74 20 28 44 29 2e 0a 00 00     ..select (D)....
1000529c:	55 4e 53 55 50 50 4f 52 54 45 44 20 46 4c 4f 50     UNSUPPORTED FLOP
100052ac:	50 59 20 46 4f 52 4d 41 54 20 28 44 41 54 41 52     PY FORMAT (DATAR
100052bc:	41 54 45 20 4e 4f 54 20 4b 4e 4f 57 4e 29 00 73     ATE NOT KNOWN).s
100052cc:	65 6c 65 63 74 20 28 45 29 2e 0a 00 73 70 65 63     elect (E)...spec
100052dc:	69 66 69 79 20 72 65 73 65 74 2e 0a 00 73 65 6c     ifiy reset...sel
100052ec:	65 63 74 20 28 46 29 2e 0a 00 73 65 6c 65 63 74     ect (F)...select
100052fc:	20 28 46 32 29 2e 0a 00 63 61 6c 69 62 72 61 74      (F2)...calibrat
1000530c:	65 20 72 65 73 65 74 2e 0a 00 73 65 6c 65 63 74     e reset...select
1000531c:	20 28 47 29 2e 0a 00 73 65 6c 65 63 74 20 28 48      (G)...select (H
1000532c:	29 2e 0a 00 73 65 6c 65 63 74 20 28 49 29 2e 0a     )...select (I)..
1000533c:	00 46 6c 6f 70 70 79 3a 3a 6d 6f 74 6f 72 0a 00     .Floppy::motor..
1000534c:	6e 75 6d 20 3d 20 25 64 2c 20 73 74 61 74 65 20     num = %d, state 
1000535c:	3d 20 25 64 0a 00 73 74 61 74 65 2e 0a 00 73 74     = %d..state...st
1000536c:	61 72 74 69 6e 67 20 74 68 65 20 6d 6f 74 6f 72     arting the motor
1000537c:	2e 0a 00 64 6f 72 20 31 20 3d 20 30 78 25 58 0a     ...dor 1 = 0x%X.
1000538c:	00 64 6f 72 20 32 20 3d 20 30 78 25 58 0a 00 6d     .dor 2 = 0x%X..m
1000539c:	6f 74 6f 72 20 61 67 61 69 6e 2e 0a 00 6d 6f 74     otor again...mot
100053ac:	6f 72 20 61 67 61 69 6e 20 32 2e 0a 00 6d 6f 74     or again 2...mot
100053bc:	6f 72 20 61 67 61 69 6e 20 33 2e 0a 00 6d 6f 74     or again 3...mot
100053cc:	6f 72 20 61 67 61 69 6e 20 34 2e 0a 00 6d 6f 74     or again 4...mot
100053dc:	6f 72 20 61 67 61 69 6e 20 35 2e 0a 00 6d 6f 74     or again 5...mot
100053ec:	6f 72 20 61 67 61 69 6e 20 36 2e 0a 00 46 6c 6f     or again 6...Flo
100053fc:	70 70 79 3a 3a 6d 6f 74 6f 72 20 64 6f 6e 65 2e     ppy::motor done.
1000540c:	0a 00 46 6c 6f 70 70 79 20 44 69 73 6b 20 44 72     ..Floppy Disk Dr
1000541c:	69 76 65 00 46 6c 6f 70 70 79 44 72 69 76 65 3a     ive.FloppyDrive:
1000542c:	3a 6d 6f 74 6f 72 4f 6e 20 6e 75 6d 20 3d 20 25     :motorOn num = %
1000543c:	64 0a 00 6e 75 6d 20 3d 20 25 64 0a 00 73 69 7a     d..num = %d..siz
1000544c:	65 20 69 6e 20 4b 42 73 20 3d 20 25 64 0a 00 46     e in KBs = %d..F
1000545c:	6c 6f 70 70 79 44 72 69 76 65 3a 3a 5f 6f 70 65     loppyDrive::_ope
1000546c:	6e 20 31 0a 00 46 6c 6f 70 70 79 44 72 69 76 65     n 1..FloppyDrive
1000547c:	3a 3a 5f 6f 70 65 6e 20 32 0a 00 46 6c 6f 70 70     ::_open 2..Flopp
1000548c:	79 44 72 69 76 65 3a 3a 5f 6f 70 65 6e 20 33 0a     yDrive::_open 3.
1000549c:	00 46 6c 6f 70 70 79 44 72 69 76 65 3a 3a 73 65     .FloppyDrive::se
100054ac:	6c 65 63 74 0a 00 00 00 73 65 6c 65 63 74 69 6f     lect....selectio
100054bc:	6e 20 6c 6f 63 6b 65 64 20 6f 72 20 66 61 69 6c     n locked or fail
100054cc:	65 64 2e 2e 2e 0a 00 00 73 65 65 6b 3a 20 35 20     ed......seek: 5 
100054dc:	72 65 74 72 69 65 73 2c 20 63 6f 75 6c 64 20 6e     retries, could n
100054ec:	6f 74 20 63 61 6c 69 62 72 61 74 65 2e 0a 00 73     ot calibrate...s
100054fc:	65 65 6b 20 28 73 65 6c 29 20 25 64 2e 0a 00 73     eek (sel) %d...s
1000550c:	65 65 6b 20 28 6f 6e 29 20 25 64 2e 0a 00 73 65     eek (on) %d...se
1000551c:	65 6b 20 28 31 29 2e 0a 00 73 65 65 6b 20 28 61     ek (1)...seek (a
1000552c:	61 29 2e 0a 00 73 65 65 6b 20 28 62 62 29 2e 0a     a)...seek (bb)..
1000553c:	00 73 65 65 6b 20 28 32 29 2e 0a 00 73 65 65 6b     .seek (2)...seek
1000554c:	20 28 33 29 2e 0a 00 73 65 65 6b 20 28 34 29 2e      (3)...seek (4).
1000555c:	0a 00 73 65 65 6b 20 28 6e 69 72 71 29 2e 0a 00     ..seek (nirq)...
1000556c:	73 65 65 6b 20 28 35 29 2e 0a 00 73 65 65 6b 20     seek (5)...seek 
1000557c:	28 73 69 64 29 2e 0a 00 73 65 65 6b 20 28 6f 66     (sid)...seek (of
1000558c:	66 29 2e 0a 00 73 65 65 6b 20 28 75 6e 29 2e 0a     f)...seek (un)..
1000559c:	00 00 00 00 63 61 6c 69 62 72 61 74 65 3a 20 35     ....calibrate: 5
100055ac:	20 72 65 74 72 69 65 73 2c 20 63 6f 75 6c 64 20      retries, could 
100055bc:	6e 6f 74 20 63 61 6c 69 62 72 61 74 65 2e 0a 00     not calibrate...
100055cc:	63 61 6c 20 28 6f 6e 29 2c 20 25 64 0a 00 63 61     cal (on), %d..ca
100055dc:	6c 20 28 30 29 0a 00 63 61 6c 20 28 31 29 0a 00     l (0)..cal (1)..
100055ec:	63 61 6c 20 28 32 29 0a 00 63 61 6c 20 28 33 29     cal (2)..cal (3)
100055fc:	0a 00 63 61 6c 20 28 34 29 0a 00 63 61 6c 20 28     ..cal (4)..cal (
1000560c:	35 29 0a 00 20 72 65 74 72 79 3a 20 0a 00 41 62     5).. retry: ..Ab
1000561c:	6f 75 74 20 74 6f 20 73 65 65 6b 2e 0a 00 53 65     out to seek...Se
1000562c:	65 6b 20 64 6f 6e 65 2e 0a 00 4d 6f 74 6f 72 20     ek done...Motor 
1000563c:	6f 6e 2e 0a 00 53 65 6c 65 63 74 65 64 2e 0a 00     on...Selected...
1000564c:	44 4d 41 20 69 6e 69 74 27 64 2e 0a 00 73 6c 65     DMA init'd...sle
1000565c:	65 70 20 64 6f 6e 65 0a 00 61 62 6f 75 74 20 74     ep done..about t
1000566c:	6f 20 77 61 69 74 49 52 51 2e 0a 00 6e 6f 20 49     o waitIRQ...no I
1000567c:	52 51 2e 0a 00 67 6f 74 20 49 52 51 2e 0a 00 66     RQ...got IRQ...f
1000568c:	61 69 6c 75 72 65 20 72 65 61 64 69 6e 67 20 73     ailure reading s
1000569c:	74 61 74 75 73 2e 0a 00 72 65 61 64 20 72 65 73     tatus...read res
100056ac:	75 6c 74 20 62 79 74 65 73 2e 0a 00 6d 6f 74 6f     ult bytes...moto
100056bc:	72 20 6f 66 66 0a 00 75 6e 73 65 6c 65 63 74 2e     r off..unselect.
100056cc:	0a 00 66 6c 6f 70 70 79 20 72 65 61 64 20 63 6f     ..floppy read co
100056dc:	75 6e 74 20 6e 6f 74 20 31 00 46 6c 6f 70 70 79     unt not 1.Floppy
100056ec:	44 72 69 76 65 3a 3a 72 65 61 64 20 63 61 6c 6c     Drive::read call
100056fc:	65 64 2e 0a 00 43 20 30 78 25 58 2c 20 48 20 30     ed...C 0x%X, H 0
1000570c:	78 25 58 2c 20 53 20 30 78 25 58 0a 00 72 65 61     x%X, S 0x%X..rea
1000571c:	64 69 6e 67 20 74 72 61 63 6b 2e 0a 00 66 6c 6f     ding track...flo
1000572c:	70 70 79 20 77 72 69 74 65 20 63 6f 75 6e 74 20     ppy write count 
1000573c:	6e 6f 74 20 31 00 66 6c 6f 70 70 79 20 77 72 69     not 1.floppy wri
1000574c:	74 65 20 63 61 6c 6c 65 64 00 66 90                 te called.f.

10005758 <vtable for FloppyDrive>:
	...
	10005760: R_386_32	FloppyDrive::~FloppyDrive()
	10005764: R_386_32	FloppyDrive::~FloppyDrive()
	10005768: R_386_32	FloppyDrive::open(int, int, void*)
	1000576c: R_386_32	FloppyDrive::close(int, int, void*)
	10005770: R_386_32	Device::hibernate()
	10005774: R_386_32	Device::wake()
	10005778: R_386_32	Device::detect()
	1000577c: R_386_32	Device::disableLegacy()
	10005780: R_386_32	Device::powerSaving(PowerSavingLevel)
	10005784: R_386_32	PhysicalDisk::eject()
	10005788: R_386_32	FloppyDrive::read(unsigned long long, int, void*)
	1000578c: R_386_32	FloppyDrive::write(unsigned long long, int, void*)

10005790 <vtable for Floppy>:
	...
	10005798: R_386_32	Floppy::~Floppy()
	1000579c: R_386_32	Floppy::~Floppy()
	100057a0: R_386_32	Floppy::open(int, int, void*)
	100057a4: R_386_32	Floppy::close(int, int, void*)
	100057a8: R_386_32	Device::hibernate()
	100057ac: R_386_32	Device::wake()
	100057b0: R_386_32	Device::detect()
	100057b4: R_386_32	Device::disableLegacy()
	100057b8: R_386_32	Device::powerSaving(PowerSavingLevel)

100057bc <PHYS_RAM_TABLE_SIZE>:
100057bc:	13 05 00 00                                         ....

100057c0 <PHYS_HIGHEST_UNUSED_ADDRESS>:
100057c0:	24 05 00 00                                         $...

100057c4 <PHYS_RAM_TABLE>:
100057c4:	00 06 00 00                                         ....

100057c8 <PHYS_DMA_MEMORY_1>:
100057c8:	00 00 01 00                                         ....

100057cc <PHYS_PHYS_PAGE_BITMAP>:
100057cc:	00 00 02 00                                         ....

100057d0 <PHYS_VIRT_PAGE_BITMAP>:
100057d0:	00 00 04 00                                         ....

100057d4 <PHYS_DMA_MEMORY_2>:
100057d4:	00 00 06 00                                         ....

100057d8 <PHYS_ALLOCED_VIRT_PAGES>:
100057d8:	00 00 10 00                                         ....

100057dc <PHYS_KRNL_PAGE_DIRECTORY>:
100057dc:	00 10 00 00                                         ....

100057e0 <VIRT_KERNEL_BASE>:
100057e0:	00 00 00 c0                                         ....

100057e4 <VIRT_LOW_MEGS>:
100057e4:	00 00 00 c2                                         ....

100057e8 <VIRT_CPU_SPECIFIC>:
100057e8:	00 00 40 c2                                         ..@.

100057ec <VIRT_RECURSIVE_SPOT_1>:
100057ec:	00 00 80 c2                                         ....

100057f0 <VIRT_RECURSIVE_SPOT_2>:
100057f0:	00 00 c0 c2                                         ....

100057f4 <VIRT_DMA_MEMORY_1>:
100057f4:	00 00 01 c2                                         ....

100057f8 <SIZE_DMA_MEMORY_1>:
100057f8:	00 00 01 00                                         ....

100057fc <VIRT_DMA_MEMORY_2>:
100057fc:	00 00 06 c2                                         ....

10005800 <SIZE_DMA_MEMORY_2>:
10005800:	00 00 02 00                                         ....

10005804 <VIRT_KRNL_PAGE_DIRECTORY>:
10005804:	00 10 00 c2                                         ....

10005808 <VIRT_PHYS_PAGE_BITMAP>:
10005808:	00 00 02 c2                                         ....

1000580c <SIZE_PHYS_PAGE_BITMAP>:
1000580c:	00 00 02 00                                         ....

10005810 <VIRT_VIRT_PAGE_BITMAP>:
10005810:	00 00 04 c2                                         ....

10005814 <SIZE_VIRT_PAGE_BITMAP>:
10005814:	00 80 00 00                                         ....

10005818 <VIRT_RAM_TABLE>:
10005818:	00 06 00 c2                                         ....

1000581c <VIRT_RAM_TABLE_SIZE>:
1000581c:	13 05 00 c2                                         ....

10005820 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005820:	24 05 00 c2                                         $...

10005824 <SIZE_APP_STACK_USER>:
10005824:	00 00 18 00                                         ....

10005828 <SIZE_APP_STACK_KRNL>:
10005828:	00 00 08 00                                         ....

1000582c <SIZE_APP_STACK_TOTAL>:
1000582c:	00 00 20 00                                         .. .

10005830 <VIRT_APP_DATA>:
10005830:	00 00 00 10                                         ....

10005834 <VIRT_APP_STACK_USER_TOP>:
10005834:	00 00 00 02                                         ....

10005838 <VIRT_APP_STACK_KRNL_TOP>:
10005838:	00 00 e8 01                                         ....

1000583c <VIRT_HEAP_MIN>:
1000583c:	00 00 00 c8                                         ....

10005840 <VIRT_HEAP_MAX>:
10005840:	ff ff ff ef                                         ....

10005844 <VIRT_SBRK_MIN>:
10005844:	00 00 00 f0                                         ....

10005848 <VIRT_SBRK_MAX>:
10005848:	00 00 c0 ff                                         ....

1000584c <VIRT_ALLOCED_VIRT_PAGES>:
1000584c:	00 00 10 c2                                         ....

10005850 <VIRT_ACPI_DRIVER>:
10005850:	00 40 48 c2                                         .@H.

10005854 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005854:	96 00 00 00                                         ....

10005858 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005858:	2c 01 00 00 47 61 6d 65 70 6f 72 74 00 66 90 90     ,...Gameport.f..

10005868 <vtable for Gameport>:
	...
	10005870: R_386_32	Gameport::~Gameport()
	10005874: R_386_32	Gameport::~Gameport()
	10005878: R_386_32	Gameport::open(int, int, void*)
	1000587c: R_386_32	Gameport::close(int, int, void*)
	10005880: R_386_32	Device::hibernate()
	10005884: R_386_32	Device::wake()
	10005888: R_386_32	Gameport::detect()
	1000588c: R_386_32	Device::disableLegacy()
	10005890: R_386_32	Device::powerSaving(PowerSavingLevel)
	10005894: R_386_32	Gameport::read(int)
10005898:	a8 fe ff ff 00 00 00 00 00 00 00 00                 ............	100058a0: R_386_32	non-virtual thunk to Gameport::read(int)

100058a4 <vtable for JoystickHost>:
	...
	100058ac: R_386_32	__cxa_pure_virtual

100058b0 <PHYS_RAM_TABLE_SIZE>:
100058b0:	13 05 00 00                                         ....

100058b4 <PHYS_HIGHEST_UNUSED_ADDRESS>:
100058b4:	24 05 00 00                                         $...

100058b8 <PHYS_RAM_TABLE>:
100058b8:	00 06 00 00                                         ....

100058bc <PHYS_DMA_MEMORY_1>:
100058bc:	00 00 01 00                                         ....

100058c0 <PHYS_PHYS_PAGE_BITMAP>:
100058c0:	00 00 02 00                                         ....

100058c4 <PHYS_VIRT_PAGE_BITMAP>:
100058c4:	00 00 04 00                                         ....

100058c8 <PHYS_DMA_MEMORY_2>:
100058c8:	00 00 06 00                                         ....

100058cc <PHYS_ALLOCED_VIRT_PAGES>:
100058cc:	00 00 10 00                                         ....

100058d0 <PHYS_KRNL_PAGE_DIRECTORY>:
100058d0:	00 10 00 00                                         ....

100058d4 <VIRT_KERNEL_BASE>:
100058d4:	00 00 00 c0                                         ....

100058d8 <VIRT_LOW_MEGS>:
100058d8:	00 00 00 c2                                         ....

100058dc <VIRT_CPU_SPECIFIC>:
100058dc:	00 00 40 c2                                         ..@.

100058e0 <VIRT_RECURSIVE_SPOT_1>:
100058e0:	00 00 80 c2                                         ....

100058e4 <VIRT_RECURSIVE_SPOT_2>:
100058e4:	00 00 c0 c2                                         ....

100058e8 <VIRT_DMA_MEMORY_1>:
100058e8:	00 00 01 c2                                         ....

100058ec <SIZE_DMA_MEMORY_1>:
100058ec:	00 00 01 00                                         ....

100058f0 <VIRT_DMA_MEMORY_2>:
100058f0:	00 00 06 c2                                         ....

100058f4 <SIZE_DMA_MEMORY_2>:
100058f4:	00 00 02 00                                         ....

100058f8 <VIRT_KRNL_PAGE_DIRECTORY>:
100058f8:	00 10 00 c2                                         ....

100058fc <VIRT_PHYS_PAGE_BITMAP>:
100058fc:	00 00 02 c2                                         ....

10005900 <SIZE_PHYS_PAGE_BITMAP>:
10005900:	00 00 02 00                                         ....

10005904 <VIRT_VIRT_PAGE_BITMAP>:
10005904:	00 00 04 c2                                         ....

10005908 <SIZE_VIRT_PAGE_BITMAP>:
10005908:	00 80 00 00                                         ....

1000590c <VIRT_RAM_TABLE>:
1000590c:	00 06 00 c2                                         ....

10005910 <VIRT_RAM_TABLE_SIZE>:
10005910:	13 05 00 c2                                         ....

10005914 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005914:	24 05 00 c2                                         $...

10005918 <SIZE_APP_STACK_USER>:
10005918:	00 00 18 00                                         ....

1000591c <SIZE_APP_STACK_KRNL>:
1000591c:	00 00 08 00                                         ....

10005920 <SIZE_APP_STACK_TOTAL>:
10005920:	00 00 20 00                                         .. .

10005924 <VIRT_APP_DATA>:
10005924:	00 00 00 10                                         ....

10005928 <VIRT_APP_STACK_USER_TOP>:
10005928:	00 00 00 02                                         ....

1000592c <VIRT_APP_STACK_KRNL_TOP>:
1000592c:	00 00 e8 01                                         ....

10005930 <VIRT_HEAP_MIN>:
10005930:	00 00 00 c8                                         ....

10005934 <VIRT_HEAP_MAX>:
10005934:	ff ff ff ef                                         ....

10005938 <VIRT_SBRK_MIN>:
10005938:	00 00 00 f0                                         ....

1000593c <VIRT_SBRK_MAX>:
1000593c:	00 00 c0 ff                                         ....

10005940 <VIRT_ALLOCED_VIRT_PAGES>:
10005940:	00 00 10 c2                                         ....

10005944 <VIRT_ACPI_DRIVER>:
10005944:	00 40 48 c2                                         .@H.

10005948 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005948:	96 00 00 00                                         ....

1000594c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000594c:	2c 01 00 00                                         ,...

10005950 <CSWTCH.8>:
10005950:	00 02 04 06 c0 c4 c8 cc                             ........

10005958 <CSWTCH.9>:
10005958:	01 03 05 07 c2 c6 ca ce                             ........

10005960 <CSWTCH.10>:
10005960:	87 83 81 82 8f 8b 89 8a 4e 6f 74 20 69 6e 20 72     ........Not in r
10005970:	61 6e 67 65 2e 0a 00 90                             ange....

10005978 <vtable for DMA>:
	...
	10005980: R_386_32	DMA::~DMA()
	10005984: R_386_32	DMA::~DMA()
	10005988: R_386_32	DMA::open(int, int, void*)
	1000598c: R_386_32	DMA::close(int, int, void*)
	10005990: R_386_32	Device::hibernate()
	10005994: R_386_32	Device::wake()
	10005998: R_386_32	Device::detect()
	1000599c: R_386_32	Device::disableLegacy()
	100059a0: R_386_32	Device::powerSaving(PowerSavingLevel)

100059a4 <PHYS_RAM_TABLE_SIZE>:
100059a4:	13 05 00 00                                         ....

100059a8 <PHYS_HIGHEST_UNUSED_ADDRESS>:
100059a8:	24 05 00 00                                         $...

100059ac <PHYS_RAM_TABLE>:
100059ac:	00 06 00 00                                         ....

100059b0 <PHYS_DMA_MEMORY_1>:
100059b0:	00 00 01 00                                         ....

100059b4 <PHYS_PHYS_PAGE_BITMAP>:
100059b4:	00 00 02 00                                         ....

100059b8 <PHYS_VIRT_PAGE_BITMAP>:
100059b8:	00 00 04 00                                         ....

100059bc <PHYS_DMA_MEMORY_2>:
100059bc:	00 00 06 00                                         ....

100059c0 <PHYS_ALLOCED_VIRT_PAGES>:
100059c0:	00 00 10 00                                         ....

100059c4 <PHYS_KRNL_PAGE_DIRECTORY>:
100059c4:	00 10 00 00                                         ....

100059c8 <VIRT_KERNEL_BASE>:
100059c8:	00 00 00 c0                                         ....

100059cc <VIRT_LOW_MEGS>:
100059cc:	00 00 00 c2                                         ....

100059d0 <VIRT_CPU_SPECIFIC>:
100059d0:	00 00 40 c2                                         ..@.

100059d4 <VIRT_RECURSIVE_SPOT_1>:
100059d4:	00 00 80 c2                                         ....

100059d8 <VIRT_RECURSIVE_SPOT_2>:
100059d8:	00 00 c0 c2                                         ....

100059dc <VIRT_DMA_MEMORY_1>:
100059dc:	00 00 01 c2                                         ....

100059e0 <SIZE_DMA_MEMORY_1>:
100059e0:	00 00 01 00                                         ....

100059e4 <VIRT_DMA_MEMORY_2>:
100059e4:	00 00 06 c2                                         ....

100059e8 <SIZE_DMA_MEMORY_2>:
100059e8:	00 00 02 00                                         ....

100059ec <VIRT_KRNL_PAGE_DIRECTORY>:
100059ec:	00 10 00 c2                                         ....

100059f0 <VIRT_PHYS_PAGE_BITMAP>:
100059f0:	00 00 02 c2                                         ....

100059f4 <SIZE_PHYS_PAGE_BITMAP>:
100059f4:	00 00 02 00                                         ....

100059f8 <VIRT_VIRT_PAGE_BITMAP>:
100059f8:	00 00 04 c2                                         ....

100059fc <SIZE_VIRT_PAGE_BITMAP>:
100059fc:	00 80 00 00                                         ....

10005a00 <VIRT_RAM_TABLE>:
10005a00:	00 06 00 c2                                         ....

10005a04 <VIRT_RAM_TABLE_SIZE>:
10005a04:	13 05 00 c2                                         ....

10005a08 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005a08:	24 05 00 c2                                         $...

10005a0c <SIZE_APP_STACK_USER>:
10005a0c:	00 00 18 00                                         ....

10005a10 <SIZE_APP_STACK_KRNL>:
10005a10:	00 00 08 00                                         ....

10005a14 <SIZE_APP_STACK_TOTAL>:
10005a14:	00 00 20 00                                         .. .

10005a18 <VIRT_APP_DATA>:
10005a18:	00 00 00 10                                         ....

10005a1c <VIRT_APP_STACK_USER_TOP>:
10005a1c:	00 00 00 02                                         ....

10005a20 <VIRT_APP_STACK_KRNL_TOP>:
10005a20:	00 00 e8 01                                         ....

10005a24 <VIRT_HEAP_MIN>:
10005a24:	00 00 00 c8                                         ....

10005a28 <VIRT_HEAP_MAX>:
10005a28:	ff ff ff ef                                         ....

10005a2c <VIRT_SBRK_MIN>:
10005a2c:	00 00 00 f0                                         ....

10005a30 <VIRT_SBRK_MAX>:
10005a30:	00 00 c0 ff                                         ....

10005a34 <VIRT_ALLOCED_VIRT_PAGES>:
10005a34:	00 00 10 c2                                         ....

10005a38 <VIRT_ACPI_DRIVER>:
10005a38:	00 40 48 c2                                         .@H.

10005a3c <TERMINAL_KEYBUFFER_IN_SIZE>:
10005a3c:	96 00 00 00                                         ....

10005a40 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005a40:	2c 01 00 00                                         ,...

10005a44 <vtable for PS2>:
	...
	10005a4c: R_386_32	PS2::~PS2()
	10005a50: R_386_32	PS2::~PS2()
	10005a54: R_386_32	PS2::open(int, int, void*)
	10005a58: R_386_32	PS2::close(int, int, void*)
	10005a5c: R_386_32	Device::hibernate()
	10005a60: R_386_32	Device::wake()
	10005a64: R_386_32	PS2::detect()
	10005a68: R_386_32	Device::disableLegacy()
	10005a6c: R_386_32	Device::powerSaving(PowerSavingLevel)
10005a70:	66 90 66 90 66 90 66 90 66 90 66 90 66 90 66 90     f.f.f.f.f.f.f.f.

10005a80 <PHYS_RAM_TABLE_SIZE>:
10005a80:	13 05 00 00                                         ....

10005a84 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005a84:	24 05 00 00                                         $...

10005a88 <PHYS_RAM_TABLE>:
10005a88:	00 06 00 00                                         ....

10005a8c <PHYS_DMA_MEMORY_1>:
10005a8c:	00 00 01 00                                         ....

10005a90 <PHYS_PHYS_PAGE_BITMAP>:
10005a90:	00 00 02 00                                         ....

10005a94 <PHYS_VIRT_PAGE_BITMAP>:
10005a94:	00 00 04 00                                         ....

10005a98 <PHYS_DMA_MEMORY_2>:
10005a98:	00 00 06 00                                         ....

10005a9c <PHYS_ALLOCED_VIRT_PAGES>:
10005a9c:	00 00 10 00                                         ....

10005aa0 <PHYS_KRNL_PAGE_DIRECTORY>:
10005aa0:	00 10 00 00                                         ....

10005aa4 <VIRT_KERNEL_BASE>:
10005aa4:	00 00 00 c0                                         ....

10005aa8 <VIRT_LOW_MEGS>:
10005aa8:	00 00 00 c2                                         ....

10005aac <VIRT_CPU_SPECIFIC>:
10005aac:	00 00 40 c2                                         ..@.

10005ab0 <VIRT_RECURSIVE_SPOT_1>:
10005ab0:	00 00 80 c2                                         ....

10005ab4 <VIRT_RECURSIVE_SPOT_2>:
10005ab4:	00 00 c0 c2                                         ....

10005ab8 <VIRT_DMA_MEMORY_1>:
10005ab8:	00 00 01 c2                                         ....

10005abc <SIZE_DMA_MEMORY_1>:
10005abc:	00 00 01 00                                         ....

10005ac0 <VIRT_DMA_MEMORY_2>:
10005ac0:	00 00 06 c2                                         ....

10005ac4 <SIZE_DMA_MEMORY_2>:
10005ac4:	00 00 02 00                                         ....

10005ac8 <VIRT_KRNL_PAGE_DIRECTORY>:
10005ac8:	00 10 00 c2                                         ....

10005acc <VIRT_PHYS_PAGE_BITMAP>:
10005acc:	00 00 02 c2                                         ....

10005ad0 <SIZE_PHYS_PAGE_BITMAP>:
10005ad0:	00 00 02 00                                         ....

10005ad4 <VIRT_VIRT_PAGE_BITMAP>:
10005ad4:	00 00 04 c2                                         ....

10005ad8 <SIZE_VIRT_PAGE_BITMAP>:
10005ad8:	00 80 00 00                                         ....

10005adc <VIRT_RAM_TABLE>:
10005adc:	00 06 00 c2                                         ....

10005ae0 <VIRT_RAM_TABLE_SIZE>:
10005ae0:	13 05 00 c2                                         ....

10005ae4 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005ae4:	24 05 00 c2                                         $...

10005ae8 <SIZE_APP_STACK_USER>:
10005ae8:	00 00 18 00                                         ....

10005aec <SIZE_APP_STACK_KRNL>:
10005aec:	00 00 08 00                                         ....

10005af0 <SIZE_APP_STACK_TOTAL>:
10005af0:	00 00 20 00                                         .. .

10005af4 <VIRT_APP_DATA>:
10005af4:	00 00 00 10                                         ....

10005af8 <VIRT_APP_STACK_USER_TOP>:
10005af8:	00 00 00 02                                         ....

10005afc <VIRT_APP_STACK_KRNL_TOP>:
10005afc:	00 00 e8 01                                         ....

10005b00 <VIRT_HEAP_MIN>:
10005b00:	00 00 00 c8                                         ....

10005b04 <VIRT_HEAP_MAX>:
10005b04:	ff ff ff ef                                         ....

10005b08 <VIRT_SBRK_MIN>:
10005b08:	00 00 00 f0                                         ....

10005b0c <VIRT_SBRK_MAX>:
10005b0c:	00 00 c0 ff                                         ....

10005b10 <VIRT_ALLOCED_VIRT_PAGES>:
10005b10:	00 00 10 c2                                         ....

10005b14 <VIRT_ACPI_DRIVER>:
10005b14:	00 40 48 c2                                         .@H.

10005b18 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005b18:	96 00 00 00                                         ....

10005b1c <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005b1c:	2c 01 00 00                                         ,...

10005b20 <PS2Keyboard::internalMapperLower>:
10005b20:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10005b30:	20 20 20 20 20 71 31 20 20 20 7a 73 61 77 32 20          q1   zsaw2 
10005b40:	20 63 78 64 65 34 33 20 20 20 76 66 74 72 35 20      cxde43   vftr5 
10005b50:	20 6e 62 68 67 79 36 20 20 20 6d 6a 75 37 38 20      nbhgy6   mju78 
10005b60:	20 2c 6b 69 6f 30 39 20 20 2e 2f 6c 3b 70 2d 20      ,kio09  ./l;p- 
10005b70:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10005b80:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10005b90:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10005ba0:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10005c20 <PS2Keyboard::internalMapperUpper>:
10005c20:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10005c30:	20 20 20 20 20 51 21 20 20 20 5a 53 41 57 40 20          Q!   ZSAW@ 
10005c40:	20 43 58 44 45 24 23 20 20 20 56 46 54 52 25 20      CXDE$#   VFTR% 
10005c50:	20 4e 42 48 47 59 5e 20 20 20 4d 4a 55 26 2a 20      NBHGY^   MJU&* 
10005c60:	20 3c 4b 49 4f 29 28 20 20 3e 3f 4c 3a 50 5f 20      <KIO)(  >?L:P_ 
10005c70:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10005c80:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10005c90:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10005ca0:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10005d20 <PS2Keyboard::internalMapCapLower>:
10005d20:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10005d30:	20 20 20 20 20 51 31 20 20 20 5a 53 41 57 32 20          Q1   ZSAW2 
10005d40:	20 43 58 44 45 34 33 20 20 20 56 46 54 52 35 20      CXDE43   VFTR5 
10005d50:	20 4e 42 48 47 59 36 20 20 20 4d 4a 55 37 38 20      NBHGY6   MJU78 
10005d60:	20 2c 4b 49 4f 30 39 20 20 2e 2f 4c 3b 50 2d 20      ,KIO09  ./L;P- 
10005d70:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10005d80:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10005d90:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10005da0:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10005e20 <PS2Keyboard::internalMapCapUpper>:
10005e20:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10005e30:	20 20 20 20 20 51 21 20 20 20 7a 73 61 77 40 20          Q!   zsaw@ 
10005e40:	20 63 78 64 65 24 23 20 20 20 76 66 74 72 25 20      cxde$#   vftr% 
10005e50:	20 6e 62 68 67 79 5e 20 20 20 6d 6a 75 26 2a 20      nbhgy^   mju&* 
10005e60:	20 3c 6b 69 6f 29 28 20 20 3e 3f 6c 3a 70 5f 20      <kio)(  >?l:p_ 
10005e70:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10005e80:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10005e90:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10005ea0:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10005f20 <PS2Keyboard::internalMapperLowerBad>:
10005f20:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10005f30:	71 77 65 72 74 79 75 69 6f 70 5b 5d 20 20 61 73     qwertyuiop[]  as
10005f40:	64 66 67 68 6a 6b 6c 3b 27 60 20 5c 7a 78 63 76     dfghjkl;'` \zxcv
10005f50:	62 6e 6d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     bnm,./ *        
10005f60:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10005f70:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10005f80:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005f90:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005fa0:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10005fb0:	51 57 45 52 54 59 55 49 4f 50 7b 7d 20 20 41 53     QWERTYUIOP{}  AS
10005fc0:	44 46 47 48 4a 4b 4c 3a 22 7e 20 7c 5a 58 43 56     DFGHJKL:"~ |ZXCV
10005fd0:	42 4e 4d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     BNM<>? *        
10005fe0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10005ff0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006000:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006010:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006020:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10006030:	51 57 45 52 54 59 55 49 4f 50 5b 5d 20 20 41 53     QWERTYUIOP[]  AS
10006040:	44 46 47 48 4a 4b 4c 3b 27 60 20 5c 5a 58 43 56     DFGHJKL;'` \ZXCV
10006050:	42 4e 4d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     BNM,./ *        
10006060:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10006070:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006080:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006090:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100060a0:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
100060b0:	71 77 65 72 74 79 75 69 6f 70 7b 7d 20 20 61 73     qwertyuiop{}  as
100060c0:	64 66 67 68 6a 6b 6c 3a 22 7e 20 7c 7a 78 63 76     dfghjkl:"~ |zxcv
100060d0:	62 6e 6d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     bnm<>? *        
100060e0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
100060f0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006100:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006110:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006120:	00 66 90 90                                         .f..

10006124 <vtable for PS2Keyboard>:
	...
	1000612c: R_386_32	PS2Keyboard::~PS2Keyboard()
	10006130: R_386_32	PS2Keyboard::~PS2Keyboard()
	10006134: R_386_32	PS2Keyboard::open(int, int, void*)
	10006138: R_386_32	PS2Keyboard::close(int, int, void*)
	1000613c: R_386_32	Device::hibernate()
	10006140: R_386_32	Device::wake()
	10006144: R_386_32	Device::detect()
	10006148: R_386_32	Device::disableLegacy()
	1000614c: R_386_32	Device::powerSaving(PowerSavingLevel)
	10006150: R_386_32	PS2Keyboard::setRepeatRate(int)
	10006154: R_386_32	PS2Keyboard::setRepeatDelay(int)

10006158 <PHYS_RAM_TABLE_SIZE>:
10006158:	13 05 00 00                                         ....

1000615c <PHYS_HIGHEST_UNUSED_ADDRESS>:
1000615c:	24 05 00 00                                         $...

10006160 <PHYS_RAM_TABLE>:
10006160:	00 06 00 00                                         ....

10006164 <PHYS_DMA_MEMORY_1>:
10006164:	00 00 01 00                                         ....

10006168 <PHYS_PHYS_PAGE_BITMAP>:
10006168:	00 00 02 00                                         ....

1000616c <PHYS_VIRT_PAGE_BITMAP>:
1000616c:	00 00 04 00                                         ....

10006170 <PHYS_DMA_MEMORY_2>:
10006170:	00 00 06 00                                         ....

10006174 <PHYS_ALLOCED_VIRT_PAGES>:
10006174:	00 00 10 00                                         ....

10006178 <PHYS_KRNL_PAGE_DIRECTORY>:
10006178:	00 10 00 00                                         ....

1000617c <VIRT_KERNEL_BASE>:
1000617c:	00 00 00 c0                                         ....

10006180 <VIRT_LOW_MEGS>:
10006180:	00 00 00 c2                                         ....

10006184 <VIRT_CPU_SPECIFIC>:
10006184:	00 00 40 c2                                         ..@.

10006188 <VIRT_RECURSIVE_SPOT_1>:
10006188:	00 00 80 c2                                         ....

1000618c <VIRT_RECURSIVE_SPOT_2>:
1000618c:	00 00 c0 c2                                         ....

10006190 <VIRT_DMA_MEMORY_1>:
10006190:	00 00 01 c2                                         ....

10006194 <SIZE_DMA_MEMORY_1>:
10006194:	00 00 01 00                                         ....

10006198 <VIRT_DMA_MEMORY_2>:
10006198:	00 00 06 c2                                         ....

1000619c <SIZE_DMA_MEMORY_2>:
1000619c:	00 00 02 00                                         ....

100061a0 <VIRT_KRNL_PAGE_DIRECTORY>:
100061a0:	00 10 00 c2                                         ....

100061a4 <VIRT_PHYS_PAGE_BITMAP>:
100061a4:	00 00 02 c2                                         ....

100061a8 <SIZE_PHYS_PAGE_BITMAP>:
100061a8:	00 00 02 00                                         ....

100061ac <VIRT_VIRT_PAGE_BITMAP>:
100061ac:	00 00 04 c2                                         ....

100061b0 <SIZE_VIRT_PAGE_BITMAP>:
100061b0:	00 80 00 00                                         ....

100061b4 <VIRT_RAM_TABLE>:
100061b4:	00 06 00 c2                                         ....

100061b8 <VIRT_RAM_TABLE_SIZE>:
100061b8:	13 05 00 c2                                         ....

100061bc <VIRT_HIGHEST_UNUSED_ADDRESS>:
100061bc:	24 05 00 c2                                         $...

100061c0 <SIZE_APP_STACK_USER>:
100061c0:	00 00 18 00                                         ....

100061c4 <SIZE_APP_STACK_KRNL>:
100061c4:	00 00 08 00                                         ....

100061c8 <SIZE_APP_STACK_TOTAL>:
100061c8:	00 00 20 00                                         .. .

100061cc <VIRT_APP_DATA>:
100061cc:	00 00 00 10                                         ....

100061d0 <VIRT_APP_STACK_USER_TOP>:
100061d0:	00 00 00 02                                         ....

100061d4 <VIRT_APP_STACK_KRNL_TOP>:
100061d4:	00 00 e8 01                                         ....

100061d8 <VIRT_HEAP_MIN>:
100061d8:	00 00 00 c8                                         ....

100061dc <VIRT_HEAP_MAX>:
100061dc:	ff ff ff ef                                         ....

100061e0 <VIRT_SBRK_MIN>:
100061e0:	00 00 00 f0                                         ....

100061e4 <VIRT_SBRK_MAX>:
100061e4:	00 00 c0 ff                                         ....

100061e8 <VIRT_ALLOCED_VIRT_PAGES>:
100061e8:	00 00 10 c2                                         ....

100061ec <VIRT_ACPI_DRIVER>:
100061ec:	00 40 48 c2                                         .@H.

100061f0 <TERMINAL_KEYBUFFER_IN_SIZE>:
100061f0:	96 00 00 00                                         ....

100061f4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100061f4:	2c 01 00 00                                         ,...

100061f8 <vtable for PS2Mouse>:
	...
	10006200: R_386_32	PS2Mouse::~PS2Mouse()
	10006204: R_386_32	PS2Mouse::~PS2Mouse()
	10006208: R_386_32	PS2Mouse::open(int, int, void*)
	1000620c: R_386_32	PS2Mouse::close(int, int, void*)
	10006210: R_386_32	Device::hibernate()
	10006214: R_386_32	Device::wake()
	10006218: R_386_32	PS2Mouse::detect()
	1000621c: R_386_32	Device::disableLegacy()
	10006220: R_386_32	Device::powerSaving(PowerSavingLevel)

10006224 <PHYS_RAM_TABLE_SIZE>:
10006224:	13 05 00 00                                         ....

10006228 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10006228:	24 05 00 00                                         $...

1000622c <PHYS_RAM_TABLE>:
1000622c:	00 06 00 00                                         ....

10006230 <PHYS_DMA_MEMORY_1>:
10006230:	00 00 01 00                                         ....

10006234 <PHYS_PHYS_PAGE_BITMAP>:
10006234:	00 00 02 00                                         ....

10006238 <PHYS_VIRT_PAGE_BITMAP>:
10006238:	00 00 04 00                                         ....

1000623c <PHYS_DMA_MEMORY_2>:
1000623c:	00 00 06 00                                         ....

10006240 <PHYS_ALLOCED_VIRT_PAGES>:
10006240:	00 00 10 00                                         ....

10006244 <PHYS_KRNL_PAGE_DIRECTORY>:
10006244:	00 10 00 00                                         ....

10006248 <VIRT_KERNEL_BASE>:
10006248:	00 00 00 c0                                         ....

1000624c <VIRT_LOW_MEGS>:
1000624c:	00 00 00 c2                                         ....

10006250 <VIRT_CPU_SPECIFIC>:
10006250:	00 00 40 c2                                         ..@.

10006254 <VIRT_RECURSIVE_SPOT_1>:
10006254:	00 00 80 c2                                         ....

10006258 <VIRT_RECURSIVE_SPOT_2>:
10006258:	00 00 c0 c2                                         ....

1000625c <VIRT_DMA_MEMORY_1>:
1000625c:	00 00 01 c2                                         ....

10006260 <SIZE_DMA_MEMORY_1>:
10006260:	00 00 01 00                                         ....

10006264 <VIRT_DMA_MEMORY_2>:
10006264:	00 00 06 c2                                         ....

10006268 <SIZE_DMA_MEMORY_2>:
10006268:	00 00 02 00                                         ....

1000626c <VIRT_KRNL_PAGE_DIRECTORY>:
1000626c:	00 10 00 c2                                         ....

10006270 <VIRT_PHYS_PAGE_BITMAP>:
10006270:	00 00 02 c2                                         ....

10006274 <SIZE_PHYS_PAGE_BITMAP>:
10006274:	00 00 02 00                                         ....

10006278 <VIRT_VIRT_PAGE_BITMAP>:
10006278:	00 00 04 c2                                         ....

1000627c <SIZE_VIRT_PAGE_BITMAP>:
1000627c:	00 80 00 00                                         ....

10006280 <VIRT_RAM_TABLE>:
10006280:	00 06 00 c2                                         ....

10006284 <VIRT_RAM_TABLE_SIZE>:
10006284:	13 05 00 c2                                         ....

10006288 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10006288:	24 05 00 c2                                         $...

1000628c <SIZE_APP_STACK_USER>:
1000628c:	00 00 18 00                                         ....

10006290 <SIZE_APP_STACK_KRNL>:
10006290:	00 00 08 00                                         ....

10006294 <SIZE_APP_STACK_TOTAL>:
10006294:	00 00 20 00                                         .. .

10006298 <VIRT_APP_DATA>:
10006298:	00 00 00 10                                         ....

1000629c <VIRT_APP_STACK_USER_TOP>:
1000629c:	00 00 00 02                                         ....

100062a0 <VIRT_APP_STACK_KRNL_TOP>:
100062a0:	00 00 e8 01                                         ....

100062a4 <VIRT_HEAP_MIN>:
100062a4:	00 00 00 c8                                         ....

100062a8 <VIRT_HEAP_MAX>:
100062a8:	ff ff ff ef                                         ....

100062ac <VIRT_SBRK_MIN>:
100062ac:	00 00 00 f0                                         ....

100062b0 <VIRT_SBRK_MAX>:
100062b0:	00 00 c0 ff                                         ....

100062b4 <VIRT_ALLOCED_VIRT_PAGES>:
100062b4:	00 00 10 c2                                         ....

100062b8 <VIRT_ACPI_DRIVER>:
100062b8:	00 40 48 c2                                         .@H.

100062bc <TERMINAL_KEYBUFFER_IN_SIZE>:
100062bc:	96 00 00 00                                         ....

100062c0 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100062c0:	2c 01 00 00                                         ,...

100062c4 <vtable for PS2Port>:
	...
	100062cc: R_386_32	PS2Port::~PS2Port()
	100062d0: R_386_32	PS2Port::~PS2Port()
	100062d4: R_386_32	PS2Port::open(int, int, void*)
	100062d8: R_386_32	PS2Port::close(int, int, void*)
	100062dc: R_386_32	Device::hibernate()
	100062e0: R_386_32	Device::wake()
	100062e4: R_386_32	PS2Port::detect()
	100062e8: R_386_32	Device::disableLegacy()
	100062ec: R_386_32	Device::powerSaving(PowerSavingLevel)

100062f0 <PHYS_RAM_TABLE_SIZE>:
100062f0:	13 05 00 00                                         ....

100062f4 <PHYS_HIGHEST_UNUSED_ADDRESS>:
100062f4:	24 05 00 00                                         $...

100062f8 <PHYS_RAM_TABLE>:
100062f8:	00 06 00 00                                         ....

100062fc <PHYS_DMA_MEMORY_1>:
100062fc:	00 00 01 00                                         ....

10006300 <PHYS_PHYS_PAGE_BITMAP>:
10006300:	00 00 02 00                                         ....

10006304 <PHYS_VIRT_PAGE_BITMAP>:
10006304:	00 00 04 00                                         ....

10006308 <PHYS_DMA_MEMORY_2>:
10006308:	00 00 06 00                                         ....

1000630c <PHYS_ALLOCED_VIRT_PAGES>:
1000630c:	00 00 10 00                                         ....

10006310 <PHYS_KRNL_PAGE_DIRECTORY>:
10006310:	00 10 00 00                                         ....

10006314 <VIRT_KERNEL_BASE>:
10006314:	00 00 00 c0                                         ....

10006318 <VIRT_LOW_MEGS>:
10006318:	00 00 00 c2                                         ....

1000631c <VIRT_CPU_SPECIFIC>:
1000631c:	00 00 40 c2                                         ..@.

10006320 <VIRT_RECURSIVE_SPOT_1>:
10006320:	00 00 80 c2                                         ....

10006324 <VIRT_RECURSIVE_SPOT_2>:
10006324:	00 00 c0 c2                                         ....

10006328 <VIRT_DMA_MEMORY_1>:
10006328:	00 00 01 c2                                         ....

1000632c <SIZE_DMA_MEMORY_1>:
1000632c:	00 00 01 00                                         ....

10006330 <VIRT_DMA_MEMORY_2>:
10006330:	00 00 06 c2                                         ....

10006334 <SIZE_DMA_MEMORY_2>:
10006334:	00 00 02 00                                         ....

10006338 <VIRT_KRNL_PAGE_DIRECTORY>:
10006338:	00 10 00 c2                                         ....

1000633c <VIRT_PHYS_PAGE_BITMAP>:
1000633c:	00 00 02 c2                                         ....

10006340 <SIZE_PHYS_PAGE_BITMAP>:
10006340:	00 00 02 00                                         ....

10006344 <VIRT_VIRT_PAGE_BITMAP>:
10006344:	00 00 04 c2                                         ....

10006348 <SIZE_VIRT_PAGE_BITMAP>:
10006348:	00 80 00 00                                         ....

1000634c <VIRT_RAM_TABLE>:
1000634c:	00 06 00 c2                                         ....

10006350 <VIRT_RAM_TABLE_SIZE>:
10006350:	13 05 00 c2                                         ....

10006354 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10006354:	24 05 00 c2                                         $...

10006358 <SIZE_APP_STACK_USER>:
10006358:	00 00 18 00                                         ....

1000635c <SIZE_APP_STACK_KRNL>:
1000635c:	00 00 08 00                                         ....

10006360 <SIZE_APP_STACK_TOTAL>:
10006360:	00 00 20 00                                         .. .

10006364 <VIRT_APP_DATA>:
10006364:	00 00 00 10                                         ....

10006368 <VIRT_APP_STACK_USER_TOP>:
10006368:	00 00 00 02                                         ....

1000636c <VIRT_APP_STACK_KRNL_TOP>:
1000636c:	00 00 e8 01                                         ....

10006370 <VIRT_HEAP_MIN>:
10006370:	00 00 00 c8                                         ....

10006374 <VIRT_HEAP_MAX>:
10006374:	ff ff ff ef                                         ....

10006378 <VIRT_SBRK_MIN>:
10006378:	00 00 00 f0                                         ....

1000637c <VIRT_SBRK_MAX>:
1000637c:	00 00 c0 ff                                         ....

10006380 <VIRT_ALLOCED_VIRT_PAGES>:
10006380:	00 00 10 c2                                         ....

10006384 <VIRT_ACPI_DRIVER>:
10006384:	00 40 48 c2                                         .@H.

10006388 <TERMINAL_KEYBUFFER_IN_SIZE>:
10006388:	96 00 00 00                                         ....

1000638c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000638c:	2c 01 00 00 53 4f 4e 47 20 53 48 4f 55 4c 44 20     ,...SONG SHOULD 
1000639c:	42 45 20 44 4f 4e 45 2e 0a 00 66 90                 BE DONE...f.

100063a8 <vtable for SoundBlaster16>:
	...
	100063b0: R_386_32	SoundBlaster16::~SoundBlaster16()
	100063b4: R_386_32	SoundBlaster16::~SoundBlaster16()
	100063b8: R_386_32	SoundBlaster16::open(int, int, void*)
	100063bc: R_386_32	SoundBlaster16::close(int, int, void*)
	100063c0: R_386_32	Device::hibernate()
	100063c4: R_386_32	Device::wake()
	100063c8: R_386_32	Device::detect()
	100063cc: R_386_32	Device::disableLegacy()
	100063d0: R_386_32	Device::powerSaving(PowerSavingLevel)
	100063d4: R_386_32	SoundBlaster16::getNumHwChannels()
	100063d8: R_386_32	SoundBlaster16::beginPlayback(int, int)
	100063dc: R_386_32	SoundBlaster16::stopPlayback()
