
packages/system/32/0002/legacy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	realstart(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <realstart(void*)>:
10000017:	53                   	push   ebx
10000018:	83 ec 14             	sub    esp,0x14
1000001b:	68 58 01 00 00       	push   0x158
10000020:	e8 fc ff ff ff       	call   10000021 <realstart(void*)+0xa>	10000021: R_386_PC32	malloc
10000025:	89 04 24             	mov    DWORD PTR [esp],eax
10000028:	89 c3                	mov    ebx,eax
1000002a:	e8 fc ff ff ff       	call   1000002b <realstart(void*)+0x14>	1000002b: R_386_PC32	ISA::ISA()
1000002f:	58                   	pop    eax
10000030:	5a                   	pop    edx
10000031:	53                   	push   ebx
10000032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000036:	e8 fc ff ff ff       	call   10000037 <realstart(void*)+0x20>	10000037: R_386_PC32	Device::addChild(Device*)
1000003b:	6a 00                	push   0x0
1000003d:	8b 03                	mov    eax,DWORD PTR [ebx]
1000003f:	6a 00                	push   0x0
10000041:	6a 00                	push   0x0
10000043:	53                   	push   ebx
10000044:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000047:	83 c4 28             	add    esp,0x28
1000004a:	5b                   	pop    ebx
1000004b:	c3                   	ret    

1000004c <ISA::ISA()>:
1000004c:	55                   	push   ebp
1000004d:	89 e5                	mov    ebp,esp
1000004f:	83 ec 08             	sub    esp,0x8
10000052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000055:	83 ec 08             	sub    esp,0x8
10000058:	68 50 57 00 10       	push   0x10005750	10000059: R_386_32	.text
1000005d:	50                   	push   eax
1000005e:	e8 fc ff ff ff       	call   1000005f <ISA::ISA()+0x13>	1000005f: R_386_PC32	Bus::Bus(char const*)
10000063:	83 c4 10             	add    esp,0x10
10000066:	ba 08 00 00 00       	mov    edx,0x8	10000067: R_386_32	vtable for ISA
1000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000006e:	89 10                	mov    DWORD PTR [eax],edx
10000070:	90                   	nop
10000071:	c9                   	leave  
10000072:	c3                   	ret    
10000073:	90                   	nop

10000074 <ISA::open(int, int, void*)>:
10000074:	83 ec 18             	sub    esp,0x18
10000077:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000007b:	8b 10                	mov    edx,DWORD PTR [eax]
1000007d:	50                   	push   eax
1000007e:	ff 52 18             	call   DWORD PTR [edx+0x18]
10000081:	31 c0                	xor    eax,eax
10000083:	83 c4 1c             	add    esp,0x1c
10000086:	c3                   	ret    
10000087:	90                   	nop

10000088 <ISA::close(int, int, void*)>:
10000088:	31 c0                	xor    eax,eax
1000008a:	c3                   	ret    
1000008b:	90                   	nop

1000008c <ISA::doSpeaker()>:
1000008c:	c3                   	ret    
1000008d:	90                   	nop

1000008e <ISA::doSoundblaster()>:
1000008e:	56                   	push   esi
1000008f:	b0 01                	mov    al,0x1
10000091:	53                   	push   ebx
10000092:	bb 26 02 00 00       	mov    ebx,0x226
10000097:	83 ec 10             	sub    esp,0x10
1000009a:	89 da                	mov    edx,ebx
1000009c:	ee                   	out    dx,al
1000009d:	6a 1e                	push   0x1e
1000009f:	e8 fc ff ff ff       	call   100000a0 <ISA::doSoundblaster()+0x12>	100000a0: R_386_PC32	milliTenthSleep(unsigned int)
100000a4:	31 c0                	xor    eax,eax
100000a6:	89 da                	mov    edx,ebx
100000a8:	ee                   	out    dx,al
100000a9:	ba 2a 02 00 00       	mov    edx,0x22a
100000ae:	ec                   	in     al,dx
100000af:	83 c4 10             	add    esp,0x10
100000b2:	3c aa                	cmp    al,0xaa
100000b4:	0f 85 83 00 00 00    	jne    1000013d <ISA::doSoundblaster()+0xaf>
100000ba:	83 ec 0c             	sub    esp,0xc
100000bd:	68 58 57 00 10       	push   0x10005758	100000be: R_386_32	.text
100000c2:	e8 fc ff ff ff       	call   100000c3 <ISA::doSoundblaster()+0x35>	100000c3: R_386_PC32	Krnl::setBootMessage(char const*)
100000c7:	c7 04 24 fc 01 00 00 	mov    DWORD PTR [esp],0x1fc
100000ce:	e8 fc ff ff ff       	call   100000cf <ISA::doSoundblaster()+0x41>	100000cf: R_386_PC32	malloc
100000d3:	89 04 24             	mov    DWORD PTR [esp],eax
100000d6:	89 c3                	mov    ebx,eax
100000d8:	e8 fc ff ff ff       	call   100000d9 <ISA::doSoundblaster()+0x4b>	100000d9: R_386_PC32	SoundBlaster16::SoundBlaster16()
100000dd:	5a                   	pop    edx
100000de:	59                   	pop    ecx
100000df:	53                   	push   ebx
100000e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000e4:	e8 fc ff ff ff       	call   100000e5 <ISA::doSoundblaster()+0x57>	100000e5: R_386_PC32	Device::addChild(Device*)
100000e9:	6a 00                	push   0x0
100000eb:	6a 00                	push   0x0
100000ed:	6a 00                	push   0x0
100000ef:	53                   	push   ebx
100000f0:	e8 fc ff ff ff       	call   100000f1 <ISA::doSoundblaster()+0x63>	100000f1: R_386_PC32	SoundBlaster16::_open(int, int, void*)
100000f5:	83 c4 14             	add    esp,0x14
100000f8:	68 14 01 00 00       	push   0x114
100000fd:	e8 fc ff ff ff       	call   100000fe <ISA::doSoundblaster()+0x70>	100000fe: R_386_PC32	malloc
10000102:	83 c4 0c             	add    esp,0xc
10000105:	89 c6                	mov    esi,eax
10000107:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000109: R_386_32	kernelProcess
1000010d:	68 78 57 00 10       	push   0x10005778	1000010e: R_386_32	.text
10000112:	50                   	push   eax
10000113:	e8 fc ff ff ff       	call   10000114 <ISA::doSoundblaster()+0x86>	10000114: R_386_PC32	File::File(char const*, Process*)
10000118:	89 34 24             	mov    DWORD PTR [esp],esi
1000011b:	e8 fc ff ff ff       	call   1000011c <ISA::doSoundblaster()+0x8e>	1000011c: R_386_PC32	File::exists()
10000120:	83 c4 10             	add    esp,0x10
10000123:	84 c0                	test   al,al
10000125:	74 16                	je     1000013d <ISA::doSoundblaster()+0xaf>
10000127:	6a 6f                	push   0x6f
10000129:	53                   	push   ebx
1000012a:	68 00 00 00 00       	push   0x0	1000012b: R_386_32	sb16Demo(void*)
1000012f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000131: R_386_32	kernelProcess
10000135:	e8 fc ff ff ff       	call   10000136 <ISA::doSoundblaster()+0xa8>	10000136: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
1000013a:	83 c4 10             	add    esp,0x10
1000013d:	58                   	pop    eax
1000013e:	5b                   	pop    ebx
1000013f:	5e                   	pop    esi
10000140:	c3                   	ret    
10000141:	90                   	nop

10000142 <ISA::doSerial()>:
10000142:	c3                   	ret    
10000143:	90                   	nop

10000144 <ISA::doParallel()>:
10000144:	c3                   	ret    
10000145:	90                   	nop

10000146 <ISA::doGameport()>:
10000146:	53                   	push   ebx
10000147:	83 ec 14             	sub    esp,0x14
1000014a:	68 96 57 00 10       	push   0x10005796	1000014b: R_386_32	.text
1000014f:	e8 fc ff ff ff       	call   10000150 <ISA::doGameport()+0xa>	10000150: R_386_PC32	Krnl::setBootMessage(char const*)
10000154:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
1000015b:	e8 fc ff ff ff       	call   1000015c <ISA::doGameport()+0x16>	1000015c: R_386_PC32	malloc
10000160:	89 04 24             	mov    DWORD PTR [esp],eax
10000163:	89 c3                	mov    ebx,eax
10000165:	e8 fc ff ff ff       	call   10000166 <ISA::doGameport()+0x20>	10000166: R_386_PC32	Gameport::Gameport()
1000016a:	58                   	pop    eax
1000016b:	5a                   	pop    edx
1000016c:	53                   	push   ebx
1000016d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000171:	e8 fc ff ff ff       	call   10000172 <ISA::doGameport()+0x2c>	10000172: R_386_PC32	Device::addChild(Device*)
10000176:	6a 00                	push   0x0
10000178:	8b 03                	mov    eax,DWORD PTR [ebx]
1000017a:	6a 00                	push   0x0
1000017c:	6a 00                	push   0x0
1000017e:	53                   	push   ebx
1000017f:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000182:	83 c4 28             	add    esp,0x28
10000185:	5b                   	pop    ebx
10000186:	c3                   	ret    
10000187:	90                   	nop

10000188 <ISA::doFloppy()>:
10000188:	53                   	push   ebx
10000189:	83 ec 14             	sub    esp,0x14
1000018c:	68 b2 57 00 10       	push   0x100057b2	1000018d: R_386_32	.text
10000191:	e8 fc ff ff ff       	call   10000192 <ISA::doFloppy()+0xa>	10000192: R_386_PC32	Krnl::setBootMessage(char const*)
10000196:	83 c4 10             	add    esp,0x10
10000199:	f6 05 10 04 00 00 01 	test   BYTE PTR ds:0x410,0x1
100001a0:	74 35                	je     100001d7 <ISA::doFloppy()+0x4f>
100001a2:	83 ec 0c             	sub    esp,0xc
100001a5:	68 b8 01 00 00       	push   0x1b8
100001aa:	e8 fc ff ff ff       	call   100001ab <ISA::doFloppy()+0x23>	100001ab: R_386_PC32	malloc
100001af:	89 04 24             	mov    DWORD PTR [esp],eax
100001b2:	89 c3                	mov    ebx,eax
100001b4:	e8 fc ff ff ff       	call   100001b5 <ISA::doFloppy()+0x2d>	100001b5: R_386_PC32	Floppy::Floppy()
100001b9:	59                   	pop    ecx
100001ba:	58                   	pop    eax
100001bb:	53                   	push   ebx
100001bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100001c0:	e8 fc ff ff ff       	call   100001c1 <ISA::doFloppy()+0x39>	100001c1: R_386_PC32	Device::addChild(Device*)
100001c5:	6a 00                	push   0x0
100001c7:	6a 00                	push   0x0
100001c9:	68 f0 03 00 00       	push   0x3f0
100001ce:	53                   	push   ebx
100001cf:	e8 fc ff ff ff       	call   100001d0 <ISA::doFloppy()+0x48>	100001d0: R_386_PC32	Floppy::_open(int, int, void*)
100001d4:	83 c4 20             	add    esp,0x20
100001d7:	83 c4 08             	add    esp,0x8
100001da:	5b                   	pop    ebx
100001db:	c3                   	ret    

100001dc <ISA::doATA()>:
100001dc:	c3                   	ret    
100001dd:	90                   	nop

100001de <ISA::doPS2()>:
100001de:	53                   	push   ebx
100001df:	83 ec 14             	sub    esp,0x14
100001e2:	68 cc 57 00 10       	push   0x100057cc	100001e3: R_386_32	.text
100001e7:	e8 fc ff ff ff       	call   100001e8 <ISA::doPS2()+0xa>	100001e8: R_386_PC32	Krnl::setBootMessage(char const*)
100001ec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	100001ef: R_386_32	str_ps2
100001f3:	e8 fc ff ff ff       	call   100001f4 <ISA::doPS2()+0x16>	100001f4: R_386_PC32	Dbg::kprintf(char const*, ...)
100001f8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	100001fb: R_386_32	str_ps2
100001ff:	e8 fc ff ff ff       	call   10000200 <ISA::doPS2()+0x22>	10000200: R_386_PC32	Dbg::kprintf(char const*, ...)
10000204:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000207: R_386_32	str_ps2
1000020b:	e8 fc ff ff ff       	call   1000020c <ISA::doPS2()+0x2e>	1000020c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000210:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000213: R_386_32	str_ps2
10000217:	e8 fc ff ff ff       	call   10000218 <ISA::doPS2()+0x3a>	10000218: R_386_PC32	Dbg::kprintf(char const*, ...)
1000021c:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
10000223:	e8 fc ff ff ff       	call   10000224 <ISA::doPS2()+0x46>	10000224: R_386_PC32	malloc
10000228:	89 04 24             	mov    DWORD PTR [esp],eax
1000022b:	89 c3                	mov    ebx,eax
1000022d:	e8 fc ff ff ff       	call   1000022e <ISA::doPS2()+0x50>	1000022e: R_386_PC32	PS2::PS2()
10000232:	58                   	pop    eax
10000233:	5a                   	pop    edx
10000234:	53                   	push   ebx
10000235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000239:	e8 fc ff ff ff       	call   1000023a <ISA::doPS2()+0x5c>	1000023a: R_386_PC32	Device::addChild(Device*)
1000023e:	6a 00                	push   0x0
10000240:	8b 03                	mov    eax,DWORD PTR [ebx]
10000242:	6a 00                	push   0x0
10000244:	6a 00                	push   0x0
10000246:	53                   	push   ebx
10000247:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000024a:	83 c4 28             	add    esp,0x28
1000024d:	5b                   	pop    ebx
1000024e:	c3                   	ret    
1000024f:	90                   	nop

10000250 <ISA::doRTC()>:
10000250:	c3                   	ret    
10000251:	90                   	nop

10000252 <ISA::detect()>:
10000252:	57                   	push   edi
10000253:	56                   	push   esi
10000254:	53                   	push   ebx
10000255:	83 ec 2c             	sub    esp,0x2c
10000258:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
1000025c:	68 e4 57 00 10       	push   0x100057e4	1000025d: R_386_32	.text
10000261:	e8 fc ff ff ff       	call   10000262 <ISA::detect()+0x10>	10000262: R_386_PC32	Krnl::setBootMessage(char const*)
10000266:	c7 04 24 5c 01 00 00 	mov    DWORD PTR [esp],0x15c
1000026d:	e8 fc ff ff ff       	call   1000026e <ISA::detect()+0x1c>	1000026e: R_386_PC32	malloc
10000272:	89 04 24             	mov    DWORD PTR [esp],eax
10000275:	89 c3                	mov    ebx,eax
10000277:	e8 fc ff ff ff       	call   10000278 <ISA::detect()+0x26>	10000278: R_386_PC32	DMA::DMA()
1000027c:	59                   	pop    ecx
1000027d:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	1000027f: R_386_32	isaDMAController
10000283:	5e                   	pop    esi
10000284:	53                   	push   ebx
10000285:	57                   	push   edi
10000286:	e8 fc ff ff ff       	call   10000287 <ISA::detect()+0x35>	10000287: R_386_PC32	Device::addChild(Device*)
1000028b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000028c: R_386_32	isaDMAController
10000290:	8b 10                	mov    edx,DWORD PTR [eax]
10000292:	6a 00                	push   0x0
10000294:	6a 00                	push   0x0
10000296:	6a 00                	push   0x0
10000298:	50                   	push   eax
10000299:	ff 52 08             	call   DWORD PTR [edx+0x8]
1000029c:	83 c4 20             	add    esp,0x20
1000029f:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100002a1: R_386_32	detectDone
100002a6:	0f 85 fb 00 00 00    	jne    100003a7 <ISA::detect()+0x155>
100002ac:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100002ae: R_386_32	detectDone
100002b3:	31 db                	xor    ebx,ebx
100002b5:	52                   	push   edx
100002b6:	6a 01                	push   0x1
100002b8:	68 00 00 00 00       	push   0x0	100002b9: R_386_32	str_isadonesafe
100002bd:	68 00 00 00 00       	push   0x0	100002be: R_386_32	str_isa
100002c2:	e8 fc ff ff ff       	call   100002c3 <ISA::detect()+0x71>	100002c3: R_386_PC32	Reg::readBoolWithDefault(char*, char*, bool)
100002c7:	83 c4 10             	add    esp,0x10
100002ca:	50                   	push   eax
100002cb:	50                   	push   eax
100002cc:	68 00 00 00 00       	push   0x0	100002cd: R_386_32	str_devices
100002d1:	8d 74 24 0c          	lea    esi,[esp+0xc]
100002d5:	56                   	push   esi
100002d6:	e8 fc ff ff ff       	call   100002d7 <ISA::detect()+0x85>	100002d7: R_386_PC32	strcpy
100002db:	83 c4 10             	add    esp,0x10
100002de:	85 db                	test   ebx,ebx
100002e0:	75 09                	jne    100002eb <ISA::detect()+0x99>
100002e2:	50                   	push   eax
100002e3:	50                   	push   eax
100002e4:	68 00 00 00 00       	push   0x0	100002e5: R_386_32	str_spk
100002e9:	eb 52                	jmp    1000033d <ISA::detect()+0xeb>
100002eb:	83 fb 01             	cmp    ebx,0x1
100002ee:	75 09                	jne    100002f9 <ISA::detect()+0xa7>
100002f0:	50                   	push   eax
100002f1:	50                   	push   eax
100002f2:	68 00 00 00 00       	push   0x0	100002f3: R_386_32	str_rtc
100002f7:	eb 44                	jmp    1000033d <ISA::detect()+0xeb>
100002f9:	83 fb 02             	cmp    ebx,0x2
100002fc:	75 09                	jne    10000307 <ISA::detect()+0xb5>
100002fe:	50                   	push   eax
100002ff:	50                   	push   eax
10000300:	68 00 00 00 00       	push   0x0	10000301: R_386_32	str_ps2
10000305:	eb 36                	jmp    1000033d <ISA::detect()+0xeb>
10000307:	83 fb 03             	cmp    ebx,0x3
1000030a:	75 09                	jne    10000315 <ISA::detect()+0xc3>
1000030c:	50                   	push   eax
1000030d:	50                   	push   eax
1000030e:	68 00 00 00 00       	push   0x0	1000030f: R_386_32	str_floppy
10000313:	eb 28                	jmp    1000033d <ISA::detect()+0xeb>
10000315:	83 fb 04             	cmp    ebx,0x4
10000318:	75 09                	jne    10000323 <ISA::detect()+0xd1>
1000031a:	50                   	push   eax
1000031b:	50                   	push   eax
1000031c:	68 00 00 00 00       	push   0x0	1000031d: R_386_32	str_sb16
10000321:	eb 1a                	jmp    1000033d <ISA::detect()+0xeb>
10000323:	83 fb 05             	cmp    ebx,0x5
10000326:	75 09                	jne    10000331 <ISA::detect()+0xdf>
10000328:	51                   	push   ecx
10000329:	51                   	push   ecx
1000032a:	68 00 00 00 00       	push   0x0	1000032b: R_386_32	str_isaata
1000032f:	eb 0c                	jmp    1000033d <ISA::detect()+0xeb>
10000331:	83 fb 06             	cmp    ebx,0x6
10000334:	75 10                	jne    10000346 <ISA::detect()+0xf4>
10000336:	52                   	push   edx
10000337:	52                   	push   edx
10000338:	68 00 00 00 00       	push   0x0	10000339: R_386_32	str_gp
1000033d:	56                   	push   esi
1000033e:	e8 fc ff ff ff       	call   1000033f <ISA::detect()+0xed>	1000033f: R_386_PC32	strcat
10000343:	83 c4 10             	add    esp,0x10
10000346:	50                   	push   eax
10000347:	6a ff                	push   0xffffffff
10000349:	56                   	push   esi
1000034a:	68 00 00 00 00       	push   0x0	1000034b: R_386_32	str_isa
1000034f:	e8 fc ff ff ff       	call   10000350 <ISA::detect()+0xfe>	10000350: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
10000354:	83 c4 10             	add    esp,0x10
10000357:	83 f8 fe             	cmp    eax,0xfffffffe
1000035a:	74 41                	je     1000039d <ISA::detect()+0x14b>
1000035c:	83 fb 02             	cmp    ebx,0x2
1000035f:	75 0b                	jne    1000036c <ISA::detect()+0x11a>
10000361:	83 ec 0c             	sub    esp,0xc
10000364:	57                   	push   edi
10000365:	e8 fc ff ff ff       	call   10000366 <ISA::detect()+0x114>	10000366: R_386_PC32	ISA::doPS2()
1000036a:	eb 2e                	jmp    1000039a <ISA::detect()+0x148>
1000036c:	83 fb 03             	cmp    ebx,0x3
1000036f:	75 0b                	jne    1000037c <ISA::detect()+0x12a>
10000371:	83 ec 0c             	sub    esp,0xc
10000374:	57                   	push   edi
10000375:	e8 fc ff ff ff       	call   10000376 <ISA::detect()+0x124>	10000376: R_386_PC32	ISA::doFloppy()
1000037a:	eb 1e                	jmp    1000039a <ISA::detect()+0x148>
1000037c:	83 fb 04             	cmp    ebx,0x4
1000037f:	75 0b                	jne    1000038c <ISA::detect()+0x13a>
10000381:	83 ec 0c             	sub    esp,0xc
10000384:	57                   	push   edi
10000385:	e8 fc ff ff ff       	call   10000386 <ISA::detect()+0x134>	10000386: R_386_PC32	ISA::doSoundblaster()
1000038a:	eb 0e                	jmp    1000039a <ISA::detect()+0x148>
1000038c:	83 fb 06             	cmp    ebx,0x6
1000038f:	75 0c                	jne    1000039d <ISA::detect()+0x14b>
10000391:	83 ec 0c             	sub    esp,0xc
10000394:	57                   	push   edi
10000395:	e8 fc ff ff ff       	call   10000396 <ISA::detect()+0x144>	10000396: R_386_PC32	ISA::doGameport()
1000039a:	83 c4 10             	add    esp,0x10
1000039d:	43                   	inc    ebx
1000039e:	83 fb 07             	cmp    ebx,0x7
100003a1:	0f 85 23 ff ff ff    	jne    100002ca <ISA::detect()+0x78>
100003a7:	83 c4 20             	add    esp,0x20
100003aa:	5b                   	pop    ebx
100003ab:	5e                   	pop    esi
100003ac:	5f                   	pop    edi
100003ad:	c3                   	ret    

100003ae <floppyMotorFunction(void*)>:
100003ae:	55                   	push   ebp
100003af:	89 e5                	mov    ebp,esp
100003b1:	83 ec 18             	sub    esp,0x18
100003b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100003ba:	a1 00 00 00 00       	mov    eax,ds:0x0	100003bb: R_386_32	irqDisableCounter
100003bf:	48                   	dec    eax
100003c0:	a3 00 00 00 00       	mov    ds:0x0,eax	100003c1: R_386_32	irqDisableCounter
100003c5:	a1 00 00 00 00       	mov    eax,ds:0x0	100003c6: R_386_32	irqDisableCounter
100003ca:	85 c0                	test   eax,eax
100003cc:	75 01                	jne    100003cf <floppyMotorFunction(void*)+0x21>
100003ce:	fb                   	sti    
100003cf:	83 ec 0c             	sub    esp,0xc
100003d2:	68 a0 0f 00 00       	push   0xfa0
100003d7:	e8 fc ff ff ff       	call   100003d8 <floppyMotorFunction(void*)+0x2a>	100003d8: R_386_PC32	milliTenthSleep(unsigned int)
100003dc:	83 c4 10             	add    esp,0x10
100003df:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100003e6:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
100003ea:	7f e3                	jg     100003cf <floppyMotorFunction(void*)+0x21>
100003ec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100003ef:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100003f2:	83 c2 58             	add    edx,0x58
100003f5:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100003f9:	83 f8 02             	cmp    eax,0x2
100003fc:	0f 85 b5 00 00 00    	jne    100004b7 <floppyMotorFunction(void*)+0x109>
10000402:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000405:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000408:	83 c2 5c             	add    edx,0x5c
1000040b:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
1000040f:	8d 88 70 fe ff ff    	lea    ecx,[eax-0x190]
10000415:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000418:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000041b:	83 c2 5c             	add    edx,0x5c
1000041e:	89 4c 90 0c          	mov    DWORD PTR [eax+edx*4+0xc],ecx
10000422:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000425:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000428:	83 c2 5c             	add    edx,0x5c
1000042b:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
1000042f:	85 c0                	test   eax,eax
10000431:	0f 8f 80 00 00 00    	jg     100004b7 <floppyMotorFunction(void*)+0x109>
10000437:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000043a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000043d:	83 c2 58             	add    edx,0x58
10000440:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
10000448:	83 ec 0c             	sub    esp,0xc
1000044b:	68 c8 58 00 10       	push   0x100058c8	1000044c: R_386_32	.text
10000450:	e8 fc ff ff ff       	call   10000451 <floppyMotorFunction(void*)+0xa3>	10000451: R_386_PC32	Dbg::kprintf(char const*, ...)
10000455:	83 c4 10             	add    esp,0x10
10000458:	fa                   	cli    
10000459:	a1 00 00 00 00       	mov    eax,ds:0x0	1000045a: R_386_32	irqDisableCounter
1000045e:	40                   	inc    eax
1000045f:	a3 00 00 00 00       	mov    ds:0x0,eax	10000460: R_386_32	irqDisableCounter
10000464:	83 ec 08             	sub    esp,0x8
10000467:	6a 02                	push   0x2
10000469:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000046c:	e8 fc ff ff ff       	call   1000046d <floppyMotorFunction(void*)+0xbf>	1000046d: R_386_PC32	Floppy::readPort(FloppyReg)
10000471:	83 c4 10             	add    esp,0x10
10000474:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000477:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000047a:	ba 10 00 00 00       	mov    edx,0x10
1000047f:	88 c1                	mov    cl,al
10000481:	d3 e2                	shl    edx,cl
10000483:	89 d0                	mov    eax,edx
10000485:	f7 d0                	not    eax
10000487:	88 c2                	mov    dl,al
10000489:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
1000048c:	21 d0                	and    eax,edx
1000048e:	0f b6 c0             	movzx  eax,al
10000491:	83 ec 04             	sub    esp,0x4
10000494:	50                   	push   eax
10000495:	6a 02                	push   0x2
10000497:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000049a:	e8 fc ff ff ff       	call   1000049b <floppyMotorFunction(void*)+0xed>	1000049b: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
1000049f:	83 c4 10             	add    esp,0x10
100004a2:	a1 00 00 00 00       	mov    eax,ds:0x0	100004a3: R_386_32	irqDisableCounter
100004a7:	48                   	dec    eax
100004a8:	a3 00 00 00 00       	mov    ds:0x0,eax	100004a9: R_386_32	irqDisableCounter
100004ad:	a1 00 00 00 00       	mov    eax,ds:0x0	100004ae: R_386_32	irqDisableCounter
100004b2:	85 c0                	test   eax,eax
100004b4:	75 01                	jne    100004b7 <floppyMotorFunction(void*)+0x109>
100004b6:	fb                   	sti    
100004b7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100004ba:	e9 27 ff ff ff       	jmp    100003e6 <floppyMotorFunction(void*)+0x38>

100004bf <floppyIRQHandler(regs*, void*)>:
100004bf:	55                   	push   ebp
100004c0:	89 e5                	mov    ebp,esp
100004c2:	83 ec 10             	sub    esp,0x10
100004c5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100004c8:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100004cb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100004ce:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
100004d5:	90                   	nop
100004d6:	c9                   	leave  
100004d7:	c3                   	ret    

100004d8 <Floppy::Floppy()>:
100004d8:	55                   	push   ebp
100004d9:	89 e5                	mov    ebp,esp
100004db:	83 ec 08             	sub    esp,0x8
100004de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004e1:	83 ec 08             	sub    esp,0x8
100004e4:	68 e9 58 00 10       	push   0x100058e9	100004e5: R_386_32	.text
100004e9:	50                   	push   eax
100004ea:	e8 fc ff ff ff       	call   100004eb <Floppy::Floppy()+0x13>	100004eb: R_386_PC32	HardDiskController::HardDiskController(char const*)
100004ef:	83 c4 10             	add    esp,0x10
100004f2:	ba 08 00 00 00       	mov    edx,0x8	100004f3: R_386_32	vtable for Floppy
100004f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004fa:	89 10                	mov    DWORD PTR [eax],edx
100004fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004ff:	66 c7 80 58 01 00 00 f0 03 	mov    WORD PTR [eax+0x158],0x3f0
10000508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000050b:	c6 80 8c 01 00 00 01 	mov    BYTE PTR [eax+0x18c],0x1
10000512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000515:	c6 80 8d 01 00 00 00 	mov    BYTE PTR [eax+0x18d],0x0
1000051c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000051f:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000529:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
10000530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000533:	c6 80 90 01 00 00 01 	mov    BYTE PTR [eax+0x190],0x1
1000053a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000053d:	c6 80 91 01 00 00 01 	mov    BYTE PTR [eax+0x191],0x1
10000544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000547:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
1000054e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000551:	c7 80 94 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x194],0xffffffff
1000055b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000055e:	83 ec 0c             	sub    esp,0xc
10000561:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000564:	6a 01                	push   0x1
10000566:	68 00 00 00 00       	push   0x0	10000567: R_386_32	floppyIRQHandler(regs*, void*)
1000056b:	6a 06                	push   0x6
1000056d:	50                   	push   eax
1000056e:	e8 fc ff ff ff       	call   1000056f <Floppy::Floppy()+0x97>	1000056f: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10000573:	83 c4 20             	add    esp,0x20
10000576:	89 c2                	mov    edx,eax
10000578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000057b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
10000581:	a1 00 00 00 00       	mov    eax,ds:0x0	10000582: R_386_32	kernelProcess
10000586:	68 d2 00 00 00       	push   0xd2
1000058b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000058e:	68 00 00 00 00       	push   0x0	1000058f: R_386_32	floppyMotorFunction(void*)
10000593:	50                   	push   eax
10000594:	e8 fc ff ff ff       	call   10000595 <Floppy::Floppy()+0xbd>	10000595: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
10000599:	83 c4 10             	add    esp,0x10
1000059c:	89 c2                	mov    edx,eax
1000059e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005a1:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
100005a7:	a1 00 00 00 00       	mov    eax,ds:0x0	100005a8: R_386_32	isaDMAController
100005ac:	83 ec 08             	sub    esp,0x8
100005af:	6a 02                	push   0x2
100005b1:	50                   	push   eax
100005b2:	e8 fc ff ff ff       	call   100005b3 <Floppy::Floppy()+0xdb>	100005b3: R_386_PC32	DMA::tryLockChannel(int)
100005b7:	83 c4 10             	add    esp,0x10
100005ba:	89 c2                	mov    edx,eax
100005bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005bf:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
100005c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005c8:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
100005ce:	83 ec 08             	sub    esp,0x8
100005d1:	68 00 48 00 00       	push   0x4800
100005d6:	50                   	push   eax
100005d7:	e8 fc ff ff ff       	call   100005d8 <Floppy::Floppy()+0x100>	100005d8: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
100005dc:	83 c4 10             	add    esp,0x10
100005df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005e2:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
100005e8:	83 ec 0c             	sub    esp,0xc
100005eb:	50                   	push   eax
100005ec:	e8 fc ff ff ff       	call   100005ed <Floppy::Floppy()+0x115>	100005ed: R_386_PC32	DMAChannel::getAddress()
100005f1:	83 c4 10             	add    esp,0x10
100005f4:	89 c2                	mov    edx,eax
100005f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005f9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
100005ff:	90                   	nop
10000600:	c9                   	leave  
10000601:	c3                   	ret    

10000602 <Floppy::wasFailure()>:
10000602:	55                   	push   ebp
10000603:	89 e5                	mov    ebp,esp
10000605:	83 ec 10             	sub    esp,0x10
10000608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000060b:	c6 80 8f 01 00 00 01 	mov    BYTE PTR [eax+0x18f],0x1
10000612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000615:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
1000061b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
1000061e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000621:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000628:	8a 45 ff             	mov    al,BYTE PTR [ebp-0x1]
1000062b:	c9                   	leave  
1000062c:	c3                   	ret    
1000062d:	90                   	nop

1000062e <Floppy::writeCommand(unsigned char)>:
1000062e:	55                   	push   ebp
1000062f:	89 e5                	mov    ebp,esp
10000631:	83 ec 28             	sub    esp,0x28
10000634:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000637:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
1000063a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000063d:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
10000643:	84 c0                	test   al,al
10000645:	74 10                	je     10000657 <Floppy::writeCommand(unsigned char)+0x29>
10000647:	83 ec 0c             	sub    esp,0xc
1000064a:	68 00 59 00 10       	push   0x10005900	1000064b: R_386_32	.text
1000064f:	e8 fc ff ff ff       	call   10000650 <Floppy::writeCommand(unsigned char)+0x22>	10000650: R_386_PC32	Krnl::panic(char const*)
10000654:	83 c4 10             	add    esp,0x10
10000657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000065a:	8a 80 8f 01 00 00    	mov    al,BYTE PTR [eax+0x18f]
10000660:	83 f0 01             	xor    eax,0x1
10000663:	84 c0                	test   al,al
10000665:	74 10                	je     10000677 <Floppy::writeCommand(unsigned char)+0x49>
10000667:	83 ec 0c             	sub    esp,0xc
1000066a:	68 30 59 00 10       	push   0x10005930	1000066b: R_386_32	.text
1000066f:	e8 fc ff ff ff       	call   10000670 <Floppy::writeCommand(unsigned char)+0x42>	10000670: R_386_PC32	Krnl::panic(char const*)
10000674:	83 c4 10             	add    esp,0x10
10000677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000067a:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
10000681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000684:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
1000068b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000692:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
10000696:	7f 4e                	jg     100006e6 <Floppy::writeCommand(unsigned char)+0xb8>
10000698:	83 ec 0c             	sub    esp,0xc
1000069b:	6a 64                	push   0x64
1000069d:	e8 fc ff ff ff       	call   1000069e <Floppy::writeCommand(unsigned char)+0x70>	1000069e: R_386_PC32	milliTenthSleep(unsigned int)
100006a2:	83 c4 10             	add    esp,0x10
100006a5:	83 ec 08             	sub    esp,0x8
100006a8:	6a 04                	push   0x4
100006aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006ad:	e8 fc ff ff ff       	call   100006ae <Floppy::writeCommand(unsigned char)+0x80>	100006ae: R_386_PC32	Floppy::readPort(FloppyReg)
100006b2:	83 c4 10             	add    esp,0x10
100006b5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100006b8:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100006bb:	84 c0                	test   al,al
100006bd:	79 22                	jns    100006e1 <Floppy::writeCommand(unsigned char)+0xb3>
100006bf:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100006c3:	83 e0 40             	and    eax,0x40
100006c6:	85 c0                	test   eax,eax
100006c8:	75 17                	jne    100006e1 <Floppy::writeCommand(unsigned char)+0xb3>
100006ca:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
100006ce:	83 ec 04             	sub    esp,0x4
100006d1:	50                   	push   eax
100006d2:	6a 05                	push   0x5
100006d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006d7:	e8 fc ff ff ff       	call   100006d8 <Floppy::writeCommand(unsigned char)+0xaa>	100006d8: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100006dc:	83 c4 10             	add    esp,0x10
100006df:	eb 0f                	jmp    100006f0 <Floppy::writeCommand(unsigned char)+0xc2>
100006e1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100006e4:	eb ac                	jmp    10000692 <Floppy::writeCommand(unsigned char)+0x64>
100006e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006e9:	c6 80 8e 01 00 00 01 	mov    BYTE PTR [eax+0x18e],0x1
100006f0:	c9                   	leave  
100006f1:	c3                   	ret    

100006f2 <Floppy::readData()>:
100006f2:	55                   	push   ebp
100006f3:	89 e5                	mov    ebp,esp
100006f5:	83 ec 18             	sub    esp,0x18
100006f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006fb:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
10000701:	84 c0                	test   al,al
10000703:	74 10                	je     10000715 <Floppy::readData()+0x23>
10000705:	83 ec 0c             	sub    esp,0xc
10000708:	68 00 59 00 10       	push   0x10005900	10000709: R_386_32	.text
1000070d:	e8 fc ff ff ff       	call   1000070e <Floppy::readData()+0x1c>	1000070e: R_386_PC32	Krnl::panic(char const*)
10000712:	83 c4 10             	add    esp,0x10
10000715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000718:	8a 80 8f 01 00 00    	mov    al,BYTE PTR [eax+0x18f]
1000071e:	83 f0 01             	xor    eax,0x1
10000721:	84 c0                	test   al,al
10000723:	74 10                	je     10000735 <Floppy::readData()+0x43>
10000725:	83 ec 0c             	sub    esp,0xc
10000728:	68 30 59 00 10       	push   0x10005930	10000729: R_386_32	.text
1000072d:	e8 fc ff ff ff       	call   1000072e <Floppy::readData()+0x3c>	1000072e: R_386_PC32	Krnl::panic(char const*)
10000732:	83 c4 10             	add    esp,0x10
10000735:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000738:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
1000073f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000742:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000749:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000750:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
10000754:	7f 49                	jg     1000079f <Floppy::readData()+0xad>
10000756:	83 ec 0c             	sub    esp,0xc
10000759:	6a 64                	push   0x64
1000075b:	e8 fc ff ff ff       	call   1000075c <Floppy::readData()+0x6a>	1000075c: R_386_PC32	milliTenthSleep(unsigned int)
10000760:	83 c4 10             	add    esp,0x10
10000763:	83 ec 08             	sub    esp,0x8
10000766:	6a 04                	push   0x4
10000768:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000076b:	e8 fc ff ff ff       	call   1000076c <Floppy::readData()+0x7a>	1000076c: R_386_PC32	Floppy::readPort(FloppyReg)
10000770:	83 c4 10             	add    esp,0x10
10000773:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000776:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10000779:	84 c0                	test   al,al
1000077b:	79 1d                	jns    1000079a <Floppy::readData()+0xa8>
1000077d:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10000781:	83 e0 40             	and    eax,0x40
10000784:	85 c0                	test   eax,eax
10000786:	74 12                	je     1000079a <Floppy::readData()+0xa8>
10000788:	83 ec 08             	sub    esp,0x8
1000078b:	6a 05                	push   0x5
1000078d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000790:	e8 fc ff ff ff       	call   10000791 <Floppy::readData()+0x9f>	10000791: R_386_PC32	Floppy::readPort(FloppyReg)
10000795:	83 c4 10             	add    esp,0x10
10000798:	eb 11                	jmp    100007ab <Floppy::readData()+0xb9>
1000079a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000079d:	eb b1                	jmp    10000750 <Floppy::readData()+0x5e>
1000079f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007a2:	c6 80 8e 01 00 00 01 	mov    BYTE PTR [eax+0x18e],0x1
100007a9:	b0 00                	mov    al,0x0
100007ab:	c9                   	leave  
100007ac:	c3                   	ret    
100007ad:	90                   	nop

100007ae <Floppy::readPort(FloppyReg)>:
100007ae:	55                   	push   ebp
100007af:	89 e5                	mov    ebp,esp
100007b1:	83 ec 10             	sub    esp,0x10
100007b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007b7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100007bd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100007c0:	01 d0                	add    eax,edx
100007c2:	0f b7 c0             	movzx  eax,ax
100007c5:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
100007c9:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
100007cd:	89 c2                	mov    edx,eax
100007cf:	ec                   	in     al,dx
100007d0:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
100007d3:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
100007d6:	90                   	nop
100007d7:	c9                   	leave  
100007d8:	c3                   	ret    
100007d9:	90                   	nop

100007da <Floppy::writePort(FloppyReg, unsigned char)>:
100007da:	55                   	push   ebp
100007db:	89 e5                	mov    ebp,esp
100007dd:	83 ec 14             	sub    esp,0x14
100007e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100007e3:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
100007e6:	0f b6 4d ec          	movzx  ecx,BYTE PTR [ebp-0x14]
100007ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007ed:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100007f3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100007f6:	01 d0                	add    eax,edx
100007f8:	0f b7 c0             	movzx  eax,ax
100007fb:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
100007ff:	88 4d fd             	mov    BYTE PTR [ebp-0x3],cl
10000802:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
10000805:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
10000809:	ee                   	out    dx,al
1000080a:	90                   	nop
1000080b:	c9                   	leave  
1000080c:	c3                   	ret    
1000080d:	90                   	nop

1000080e <Floppy::driveDetection()>:
1000080e:	55                   	push   ebp
1000080f:	89 e5                	mov    ebp,esp
10000811:	53                   	push   ebx
10000812:	83 ec 24             	sub    esp,0x24
10000815:	83 ec 0c             	sub    esp,0xc
10000818:	68 5e 59 00 10       	push   0x1000595e	10000819: R_386_32	.text
1000081d:	e8 fc ff ff ff       	call   1000081e <Floppy::driveDetection()+0x10>	1000081e: R_386_PC32	Dbg::kprintf(char const*, ...)
10000822:	83 c4 10             	add    esp,0x10
10000825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000828:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000082e:	66 3d f0 03          	cmp    ax,0x3f0
10000832:	0f 85 28 01 00 00    	jne    10000960 <Floppy::driveDetection()+0x152>
10000838:	a1 00 00 00 00       	mov    eax,ds:0x0	10000839: R_386_32	Krnl::computer
1000083d:	83 ec 08             	sub    esp,0x8
10000840:	6a 10                	push   0x10
10000842:	50                   	push   eax
10000843:	e8 fc ff ff ff       	call   10000844 <Floppy::driveDetection()+0x36>	10000844: R_386_PC32	Computer::readCMOS(unsigned char)
10000848:	83 c4 10             	add    esp,0x10
1000084b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000084e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000852:	c1 f8 04             	sar    eax,0x4
10000855:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000858:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
1000085c:	83 e0 0f             	and    eax,0xf
1000085f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000862:	83 ec 08             	sub    esp,0x8
10000865:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000868:	68 78 59 00 10       	push   0x10005978	10000869: R_386_32	.text
1000086d:	e8 fc ff ff ff       	call   1000086e <Floppy::driveDetection()+0x60>	1000086e: R_386_PC32	Dbg::kprintf(char const*, ...)
10000872:	83 c4 10             	add    esp,0x10
10000875:	83 ec 08             	sub    esp,0x8
10000878:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000087b:	68 8c 59 00 10       	push   0x1000598c	1000087c: R_386_32	.text
10000880:	e8 fc ff ff ff       	call   10000881 <Floppy::driveDetection()+0x73>	10000881: R_386_PC32	Dbg::kprintf(char const*, ...)
10000885:	83 c4 10             	add    esp,0x10
10000888:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
1000088c:	74 63                	je     100008f1 <Floppy::driveDetection()+0xe3>
1000088e:	c7 45 e0 74 01 00 00 	mov    DWORD PTR [ebp-0x20],0x174
10000895:	83 ec 0c             	sub    esp,0xc
10000898:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
1000089b:	e8 fc ff ff ff       	call   1000089c <Floppy::driveDetection()+0x8e>	1000089c: R_386_PC32	malloc
100008a0:	83 c4 10             	add    esp,0x10
100008a3:	89 c3                	mov    ebx,eax
100008a5:	83 ec 0c             	sub    esp,0xc
100008a8:	53                   	push   ebx
100008a9:	e8 fc ff ff ff       	call   100008aa <Floppy::driveDetection()+0x9c>	100008aa: R_386_PC32	FloppyDrive::FloppyDrive()
100008ae:	83 c4 10             	add    esp,0x10
100008b1:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
100008b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008b7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100008ba:	89 90 98 01 00 00    	mov    DWORD PTR [eax+0x198],edx
100008c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008c3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
100008c6:	89 90 a8 01 00 00    	mov    DWORD PTR [eax+0x1a8],edx
100008cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008cf:	83 ec 08             	sub    esp,0x8
100008d2:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100008d5:	50                   	push   eax
100008d6:	e8 fc ff ff ff       	call   100008d7 <Floppy::driveDetection()+0xc9>	100008d7: R_386_PC32	Device::addChild(Device*)
100008db:	83 c4 10             	add    esp,0x10
100008de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100008e1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100008e4:	6a 00                	push   0x0
100008e6:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100008e9:	e8 fc ff ff ff       	call   100008ea <Floppy::driveDetection()+0xdc>	100008ea: R_386_PC32	FloppyDrive::_open(int, int, void*)
100008ee:	83 c4 10             	add    esp,0x10
100008f1:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100008f5:	74 69                	je     10000960 <Floppy::driveDetection()+0x152>
100008f7:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
100008fb:	74 63                	je     10000960 <Floppy::driveDetection()+0x152>
100008fd:	c7 45 dc 74 01 00 00 	mov    DWORD PTR [ebp-0x24],0x174
10000904:	83 ec 0c             	sub    esp,0xc
10000907:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000090a:	e8 fc ff ff ff       	call   1000090b <Floppy::driveDetection()+0xfd>	1000090b: R_386_PC32	malloc
1000090f:	83 c4 10             	add    esp,0x10
10000912:	89 c3                	mov    ebx,eax
10000914:	83 ec 0c             	sub    esp,0xc
10000917:	53                   	push   ebx
10000918:	e8 fc ff ff ff       	call   10000919 <Floppy::driveDetection()+0x10b>	10000919: R_386_PC32	FloppyDrive::FloppyDrive()
1000091d:	83 c4 10             	add    esp,0x10
10000920:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000926:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10000929:	89 90 9c 01 00 00    	mov    DWORD PTR [eax+0x19c],edx
1000092f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000932:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10000935:	89 90 ac 01 00 00    	mov    DWORD PTR [eax+0x1ac],edx
1000093b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000093e:	83 ec 08             	sub    esp,0x8
10000941:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000944:	50                   	push   eax
10000945:	e8 fc ff ff ff       	call   10000946 <Floppy::driveDetection()+0x138>	10000946: R_386_PC32	Device::addChild(Device*)
1000094a:	83 c4 10             	add    esp,0x10
1000094d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000950:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000953:	6a 01                	push   0x1
10000955:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000958:	e8 fc ff ff ff       	call   10000959 <Floppy::driveDetection()+0x14b>	10000959: R_386_PC32	FloppyDrive::_open(int, int, void*)
1000095d:	83 c4 10             	add    esp,0x10
10000960:	90                   	nop
10000961:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000964:	c9                   	leave  
10000965:	c3                   	ret    

10000966 <Floppy::close(int, int, void*)>:
10000966:	b8 00 00 00 00       	mov    eax,0x0
1000096b:	c3                   	ret    

1000096c <Floppy::open(int, int, void*)>:
1000096c:	b8 00 00 00 00       	mov    eax,0x0
10000971:	c3                   	ret    

10000972 <Floppy::_open(int, int, void*)>:
10000972:	55                   	push   ebp
10000973:	89 e5                	mov    ebp,esp
10000975:	83 ec 18             	sub    esp,0x18
10000978:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000097b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000097e:	66 89 82 58 01 00 00 	mov    WORD PTR [edx+0x158],ax
10000985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000988:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000098e:	0f b6 c8             	movzx  ecx,al
10000991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000994:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000099a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000099d:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100009a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009ab:	0f b6 d0             	movzx  edx,al
100009ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009b1:	c6 44 90 06 06       	mov    BYTE PTR [eax+edx*4+0x6],0x6
100009b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100009bf:	8d 50 01             	lea    edx,[eax+0x1]
100009c2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100009c5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100009cb:	0f b6 d0             	movzx  edx,al
100009ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009d1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100009d5:	83 e1 3f             	and    ecx,0x3f
100009d8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100009dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100009e5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100009e8:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
100009ee:	0f b6 ca             	movzx  ecx,dl
100009f1:	83 c0 07             	add    eax,0x7
100009f4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100009f7:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100009fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100009ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000a05:	0f b6 d0             	movzx  edx,al
10000a08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a0b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000a10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a13:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000a19:	8d 50 01             	lea    edx,[eax+0x1]
10000a1c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000a1f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000a25:	0f b6 d0             	movzx  edx,al
10000a28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a2b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000a2f:	83 e1 3f             	and    ecx,0x3f
10000a32:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000a36:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000a3d:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
10000a41:	7f 27                	jg     10000a6a <Floppy::_open(int, int, void*)+0xf8>
10000a43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a46:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000a49:	83 c2 68             	add    edx,0x68
10000a4c:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
10000a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a57:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000a5a:	83 c2 58             	add    edx,0x58
10000a5d:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
10000a65:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000a68:	eb d3                	jmp    10000a3d <Floppy::_open(int, int, void*)+0xcb>
10000a6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a6d:	e8 fc ff ff ff       	call   10000a6e <Floppy::_open(int, int, void*)+0xfc>	10000a6e: R_386_PC32	Floppy::wasFailure()
10000a72:	83 c4 04             	add    esp,0x4
10000a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a78:	c6 80 91 01 00 00 01 	mov    BYTE PTR [eax+0x191],0x1
10000a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a82:	c6 80 8d 01 00 00 00 	mov    BYTE PTR [eax+0x18d],0x0
10000a89:	83 ec 0c             	sub    esp,0xc
10000a8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a8f:	e8 fc ff ff ff       	call   10000a90 <Floppy::_open(int, int, void*)+0x11e>	10000a90: R_386_PC32	Floppy::reset()
10000a94:	83 c4 10             	add    esp,0x10
10000a97:	83 ec 0c             	sub    esp,0xc
10000a9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a9d:	e8 fc ff ff ff       	call   10000a9e <Floppy::_open(int, int, void*)+0x12c>	10000a9e: R_386_PC32	Floppy::driveDetection()
10000aa2:	83 c4 10             	add    esp,0x10
10000aa5:	b8 00 00 00 00       	mov    eax,0x0
10000aaa:	c9                   	leave  
10000aab:	c3                   	ret    

10000aac <Floppy::senseInterrupt(int*, int*)>:
10000aac:	55                   	push   ebp
10000aad:	89 e5                	mov    ebp,esp
10000aaf:	83 ec 08             	sub    esp,0x8
10000ab2:	83 ec 08             	sub    esp,0x8
10000ab5:	6a 08                	push   0x8
10000ab7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000aba:	e8 fc ff ff ff       	call   10000abb <Floppy::senseInterrupt(int*, int*)+0xf>	10000abb: R_386_PC32	Floppy::writeCommand(unsigned char)
10000abf:	83 c4 10             	add    esp,0x10
10000ac2:	83 ec 0c             	sub    esp,0xc
10000ac5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ac8:	e8 fc ff ff ff       	call   10000ac9 <Floppy::senseInterrupt(int*, int*)+0x1d>	10000ac9: R_386_PC32	Floppy::wasFailure()
10000acd:	83 c4 10             	add    esp,0x10
10000ad0:	84 c0                	test   al,al
10000ad2:	74 04                	je     10000ad8 <Floppy::senseInterrupt(int*, int*)+0x2c>
10000ad4:	b0 00                	mov    al,0x0
10000ad6:	eb 5a                	jmp    10000b32 <Floppy::senseInterrupt(int*, int*)+0x86>
10000ad8:	83 ec 0c             	sub    esp,0xc
10000adb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ade:	e8 fc ff ff ff       	call   10000adf <Floppy::senseInterrupt(int*, int*)+0x33>	10000adf: R_386_PC32	Floppy::readData()
10000ae3:	83 c4 10             	add    esp,0x10
10000ae6:	0f b6 d0             	movzx  edx,al
10000ae9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000aec:	89 10                	mov    DWORD PTR [eax],edx
10000aee:	83 ec 0c             	sub    esp,0xc
10000af1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000af4:	e8 fc ff ff ff       	call   10000af5 <Floppy::senseInterrupt(int*, int*)+0x49>	10000af5: R_386_PC32	Floppy::wasFailure()
10000af9:	83 c4 10             	add    esp,0x10
10000afc:	84 c0                	test   al,al
10000afe:	74 04                	je     10000b04 <Floppy::senseInterrupt(int*, int*)+0x58>
10000b00:	b0 00                	mov    al,0x0
10000b02:	eb 2e                	jmp    10000b32 <Floppy::senseInterrupt(int*, int*)+0x86>
10000b04:	83 ec 0c             	sub    esp,0xc
10000b07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b0a:	e8 fc ff ff ff       	call   10000b0b <Floppy::senseInterrupt(int*, int*)+0x5f>	10000b0b: R_386_PC32	Floppy::readData()
10000b0f:	83 c4 10             	add    esp,0x10
10000b12:	0f b6 d0             	movzx  edx,al
10000b15:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000b18:	89 10                	mov    DWORD PTR [eax],edx
10000b1a:	83 ec 0c             	sub    esp,0xc
10000b1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b20:	e8 fc ff ff ff       	call   10000b21 <Floppy::senseInterrupt(int*, int*)+0x75>	10000b21: R_386_PC32	Floppy::wasFailure()
10000b25:	83 c4 10             	add    esp,0x10
10000b28:	84 c0                	test   al,al
10000b2a:	74 04                	je     10000b30 <Floppy::senseInterrupt(int*, int*)+0x84>
10000b2c:	b0 00                	mov    al,0x0
10000b2e:	eb 02                	jmp    10000b32 <Floppy::senseInterrupt(int*, int*)+0x86>
10000b30:	b0 01                	mov    al,0x1
10000b32:	c9                   	leave  
10000b33:	c3                   	ret    

10000b34 <Floppy::lock()>:
10000b34:	55                   	push   ebp
10000b35:	89 e5                	mov    ebp,esp
10000b37:	83 ec 08             	sub    esp,0x8
10000b3a:	83 ec 08             	sub    esp,0x8
10000b3d:	6a 14                	push   0x14
10000b3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b42:	e8 fc ff ff ff       	call   10000b43 <Floppy::lock()+0xf>	10000b43: R_386_PC32	Floppy::writeCommand(unsigned char)
10000b47:	83 c4 10             	add    esp,0x10
10000b4a:	83 ec 0c             	sub    esp,0xc
10000b4d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b50:	e8 fc ff ff ff       	call   10000b51 <Floppy::lock()+0x1d>	10000b51: R_386_PC32	Floppy::wasFailure()
10000b55:	83 c4 10             	add    esp,0x10
10000b58:	84 c0                	test   al,al
10000b5a:	74 04                	je     10000b60 <Floppy::lock()+0x2c>
10000b5c:	b0 00                	mov    al,0x0
10000b5e:	eb 26                	jmp    10000b86 <Floppy::lock()+0x52>
10000b60:	83 ec 0c             	sub    esp,0xc
10000b63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b66:	e8 fc ff ff ff       	call   10000b67 <Floppy::lock()+0x33>	10000b67: R_386_PC32	Floppy::readData()
10000b6b:	83 c4 10             	add    esp,0x10
10000b6e:	83 ec 0c             	sub    esp,0xc
10000b71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b74:	e8 fc ff ff ff       	call   10000b75 <Floppy::lock()+0x41>	10000b75: R_386_PC32	Floppy::wasFailure()
10000b79:	83 c4 10             	add    esp,0x10
10000b7c:	84 c0                	test   al,al
10000b7e:	74 04                	je     10000b84 <Floppy::lock()+0x50>
10000b80:	b0 00                	mov    al,0x0
10000b82:	eb 02                	jmp    10000b86 <Floppy::lock()+0x52>
10000b84:	b0 01                	mov    al,0x1
10000b86:	c9                   	leave  
10000b87:	c3                   	ret    

10000b88 <Floppy::waitIRQ(int)>:
10000b88:	55                   	push   ebp
10000b89:	89 e5                	mov    ebp,esp
10000b8b:	83 ec 18             	sub    esp,0x18
10000b8e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000b95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b98:	8a 80 68 01 00 00    	mov    al,BYTE PTR [eax+0x168]
10000b9e:	84 c0                	test   al,al
10000ba0:	75 1f                	jne    10000bc1 <Floppy::waitIRQ(int)+0x39>
10000ba2:	83 ec 0c             	sub    esp,0xc
10000ba5:	68 f4 01 00 00       	push   0x1f4
10000baa:	e8 fc ff ff ff       	call   10000bab <Floppy::waitIRQ(int)+0x23>	10000bab: R_386_PC32	milliTenthSleep(unsigned int)
10000baf:	83 c4 10             	add    esp,0x10
10000bb2:	83 45 f4 32          	add    DWORD PTR [ebp-0xc],0x32
10000bb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000bb9:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
10000bbc:	7d 02                	jge    10000bc0 <Floppy::waitIRQ(int)+0x38>
10000bbe:	eb d5                	jmp    10000b95 <Floppy::waitIRQ(int)+0xd>
10000bc0:	90                   	nop
10000bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bc4:	8a 80 68 01 00 00    	mov    al,BYTE PTR [eax+0x168]
10000bca:	c9                   	leave  
10000bcb:	c3                   	ret    

10000bcc <Floppy::reset()>:
10000bcc:	55                   	push   ebp
10000bcd:	89 e5                	mov    ebp,esp
10000bcf:	83 ec 28             	sub    esp,0x28
10000bd2:	83 ec 0c             	sub    esp,0xc
10000bd5:	68 a0 59 00 10       	push   0x100059a0	10000bd6: R_386_32	.text
10000bda:	e8 fc ff ff ff       	call   10000bdb <Floppy::reset()+0xf>	10000bdb: R_386_PC32	Dbg::kprintf(char const*, ...)
10000bdf:	83 c4 10             	add    esp,0x10
10000be2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000be5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10000bec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bef:	c7 80 94 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x194],0xffffffff
10000bf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bfc:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000c03:	83 ec 08             	sub    esp,0x8
10000c06:	6a 02                	push   0x2
10000c08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c0b:	e8 fc ff ff ff       	call   10000c0c <Floppy::reset()+0x40>	10000c0c: R_386_PC32	Floppy::readPort(FloppyReg)
10000c10:	83 c4 10             	add    esp,0x10
10000c13:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000c16:	83 ec 04             	sub    esp,0x4
10000c19:	6a 00                	push   0x0
10000c1b:	6a 02                	push   0x2
10000c1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c20:	e8 fc ff ff ff       	call   10000c21 <Floppy::reset()+0x55>	10000c21: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000c25:	83 c4 10             	add    esp,0x10
10000c28:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000c2b:	83 c8 0c             	or     eax,0xc
10000c2e:	0f b6 c0             	movzx  eax,al
10000c31:	83 ec 04             	sub    esp,0x4
10000c34:	50                   	push   eax
10000c35:	6a 02                	push   0x2
10000c37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c3a:	e8 fc ff ff ff       	call   10000c3b <Floppy::reset()+0x6f>	10000c3b: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000c3f:	83 c4 10             	add    esp,0x10
10000c42:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
10000c46:	83 e0 08             	and    eax,0x8
10000c49:	85 c0                	test   eax,eax
10000c4b:	74 3f                	je     10000c8c <Floppy::reset()+0xc0>
10000c4d:	83 ec 08             	sub    esp,0x8
10000c50:	68 90 01 00 00       	push   0x190
10000c55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c58:	e8 fc ff ff ff       	call   10000c59 <Floppy::reset()+0x8d>	10000c59: R_386_PC32	Floppy::waitIRQ(int)
10000c5d:	83 c4 10             	add    esp,0x10
10000c60:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10000c63:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
10000c66:	83 f0 01             	xor    eax,0x1
10000c69:	84 c0                	test   al,al
10000c6b:	74 3e                	je     10000cab <Floppy::reset()+0xdf>
10000c6d:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000c70:	83 c8 0c             	or     eax,0xc
10000c73:	0f b6 c0             	movzx  eax,al
10000c76:	83 ec 04             	sub    esp,0x4
10000c79:	50                   	push   eax
10000c7a:	6a 02                	push   0x2
10000c7c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c7f:	e8 fc ff ff ff       	call   10000c80 <Floppy::reset()+0xb4>	10000c80: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000c84:	83 c4 10             	add    esp,0x10
10000c87:	e9 56 ff ff ff       	jmp    10000be2 <Floppy::reset()+0x16>
10000c8c:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000c8f:	83 c8 0c             	or     eax,0xc
10000c92:	0f b6 c0             	movzx  eax,al
10000c95:	83 ec 04             	sub    esp,0x4
10000c98:	50                   	push   eax
10000c99:	6a 02                	push   0x2
10000c9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c9e:	e8 fc ff ff ff       	call   10000c9f <Floppy::reset()+0xd3>	10000c9f: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000ca3:	83 c4 10             	add    esp,0x10
10000ca6:	e9 37 ff ff ff       	jmp    10000be2 <Floppy::reset()+0x16>
10000cab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cae:	8a 80 91 01 00 00    	mov    al,BYTE PTR [eax+0x191]
10000cb4:	84 c0                	test   al,al
10000cb6:	0f 84 8f 00 00 00    	je     10000d4b <Floppy::reset()+0x17f>
10000cbc:	83 ec 04             	sub    esp,0x4
10000cbf:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000cc2:	50                   	push   eax
10000cc3:	8d 45 e8             	lea    eax,[ebp-0x18]
10000cc6:	50                   	push   eax
10000cc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000cca:	e8 fc ff ff ff       	call   10000ccb <Floppy::reset()+0xff>	10000ccb: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000ccf:	83 c4 10             	add    esp,0x10
10000cd2:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000cd5:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000cd9:	74 19                	je     10000cf4 <Floppy::reset()+0x128>
10000cdb:	83 ec 04             	sub    esp,0x4
10000cde:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000ce1:	50                   	push   eax
10000ce2:	8d 45 e8             	lea    eax,[ebp-0x18]
10000ce5:	50                   	push   eax
10000ce6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ce9:	e8 fc ff ff ff       	call   10000cea <Floppy::reset()+0x11e>	10000cea: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000cee:	83 c4 10             	add    esp,0x10
10000cf1:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000cf4:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000cf8:	74 19                	je     10000d13 <Floppy::reset()+0x147>
10000cfa:	83 ec 04             	sub    esp,0x4
10000cfd:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000d00:	50                   	push   eax
10000d01:	8d 45 e8             	lea    eax,[ebp-0x18]
10000d04:	50                   	push   eax
10000d05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000d08:	e8 fc ff ff ff       	call   10000d09 <Floppy::reset()+0x13d>	10000d09: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000d0d:	83 c4 10             	add    esp,0x10
10000d10:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000d13:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000d17:	74 19                	je     10000d32 <Floppy::reset()+0x166>
10000d19:	83 ec 04             	sub    esp,0x4
10000d1c:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000d1f:	50                   	push   eax
10000d20:	8d 45 e8             	lea    eax,[ebp-0x18]
10000d23:	50                   	push   eax
10000d24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000d27:	e8 fc ff ff ff       	call   10000d28 <Floppy::reset()+0x15c>	10000d28: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000d2c:	83 c4 10             	add    esp,0x10
10000d2f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000d32:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000d35:	83 f0 01             	xor    eax,0x1
10000d38:	84 c0                	test   al,al
10000d3a:	74 0f                	je     10000d4b <Floppy::reset()+0x17f>
10000d3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d3f:	c6 80 91 01 00 00 00 	mov    BYTE PTR [eax+0x191],0x0
10000d46:	e9 97 fe ff ff       	jmp    10000be2 <Floppy::reset()+0x16>
10000d4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d4e:	8a 80 8c 01 00 00    	mov    al,BYTE PTR [eax+0x18c]
10000d54:	84 c0                	test   al,al
10000d56:	75 14                	jne    10000d6c <Floppy::reset()+0x1a0>
10000d58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d5b:	8a 80 8d 01 00 00    	mov    al,BYTE PTR [eax+0x18d]
10000d61:	83 f0 01             	xor    eax,0x1
10000d64:	84 c0                	test   al,al
10000d66:	0f 84 91 00 00 00    	je     10000dfd <Floppy::reset()+0x231>
10000d6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d6f:	8a 80 90 01 00 00    	mov    al,BYTE PTR [eax+0x190]
10000d75:	84 c0                	test   al,al
10000d77:	74 3c                	je     10000db5 <Floppy::reset()+0x1e9>
10000d79:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000d80:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
10000d84:	7f 2f                	jg     10000db5 <Floppy::reset()+0x1e9>
10000d86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d89:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000d8c:	83 c2 68             	add    edx,0x68
10000d8f:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000d93:	85 c0                	test   eax,eax
10000d95:	74 19                	je     10000db0 <Floppy::reset()+0x1e4>
10000d97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d9a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000d9d:	83 c2 68             	add    edx,0x68
10000da0:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000da4:	83 ec 0c             	sub    esp,0xc
10000da7:	50                   	push   eax
10000da8:	e8 fc ff ff ff       	call   10000da9 <Floppy::reset()+0x1dd>	10000da9: R_386_PC32	FloppyDrive::floppyConfigure()
10000dad:	83 c4 10             	add    esp,0x10
10000db0:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10000db3:	eb cb                	jmp    10000d80 <Floppy::reset()+0x1b4>
10000db5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000db8:	8a 80 8d 01 00 00    	mov    al,BYTE PTR [eax+0x18d]
10000dbe:	83 f0 01             	xor    eax,0x1
10000dc1:	84 c0                	test   al,al
10000dc3:	74 38                	je     10000dfd <Floppy::reset()+0x231>
10000dc5:	83 ec 0c             	sub    esp,0xc
10000dc8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000dcb:	e8 fc ff ff ff       	call   10000dcc <Floppy::reset()+0x200>	10000dcc: R_386_PC32	Floppy::lock()
10000dd0:	83 c4 10             	add    esp,0x10
10000dd3:	83 f0 01             	xor    eax,0x1
10000dd6:	88 c2                	mov    dl,al
10000dd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ddb:	88 90 8c 01 00 00    	mov    BYTE PTR [eax+0x18c],dl
10000de1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000de4:	c6 80 8d 01 00 00 01 	mov    BYTE PTR [eax+0x18d],0x1
10000deb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000dee:	8a 80 8c 01 00 00    	mov    al,BYTE PTR [eax+0x18c]
10000df4:	84 c0                	test   al,al
10000df6:	74 05                	je     10000dfd <Floppy::reset()+0x231>
10000df8:	e9 e5 fd ff ff       	jmp    10000be2 <Floppy::reset()+0x16>
10000dfd:	90                   	nop
10000dfe:	c9                   	leave  
10000dff:	c3                   	ret    

10000e00 <Floppy::dmaInit(bool)>:
10000e00:	55                   	push   ebp
10000e01:	89 e5                	mov    ebp,esp
10000e03:	83 ec 18             	sub    esp,0x18
10000e06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000e09:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10000e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e0f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000e15:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
10000e19:	74 07                	je     10000e22 <Floppy::dmaInit(bool)+0x22>
10000e1b:	ba 4a 00 00 00       	mov    edx,0x4a
10000e20:	eb 05                	jmp    10000e27 <Floppy::dmaInit(bool)+0x27>
10000e22:	ba 46 00 00 00       	mov    edx,0x46
10000e27:	83 ec 08             	sub    esp,0x8
10000e2a:	52                   	push   edx
10000e2b:	50                   	push   eax
10000e2c:	e8 fc ff ff ff       	call   10000e2d <Floppy::dmaInit(bool)+0x2d>	10000e2d: R_386_PC32	DMAChannel::setMode(unsigned char)
10000e31:	83 c4 10             	add    esp,0x10
10000e34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e37:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000e3d:	83 ec 0c             	sub    esp,0xc
10000e40:	50                   	push   eax
10000e41:	e8 fc ff ff ff       	call   10000e42 <Floppy::dmaInit(bool)+0x42>	10000e42: R_386_PC32	DMAChannel::start()
10000e46:	83 c4 10             	add    esp,0x10
10000e49:	90                   	nop
10000e4a:	c9                   	leave  
10000e4b:	c3                   	ret    

10000e4c <Floppy::specify(int)>:
10000e4c:	55                   	push   ebp
10000e4d:	89 e5                	mov    ebp,esp
10000e4f:	57                   	push   edi
10000e50:	56                   	push   esi
10000e51:	53                   	push   ebx
10000e52:	83 ec 3c             	sub    esp,0x3c
10000e55:	8d 45 c0             	lea    eax,[ebp-0x40]
10000e58:	bb cc 59 00 10       	mov    ebx,0x100059cc	10000e59: R_386_32	.text
10000e5d:	ba 04 00 00 00       	mov    edx,0x4
10000e62:	89 c7                	mov    edi,eax
10000e64:	89 de                	mov    esi,ebx
10000e66:	89 d1                	mov    ecx,edx
10000e68:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000e6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e6d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000e70:	83 c2 64             	add    edx,0x64
10000e73:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10000e77:	89 d0                	mov    eax,edx
10000e79:	c1 e0 02             	shl    eax,0x2
10000e7c:	01 d0                	add    eax,edx
10000e7e:	c1 e0 02             	shl    eax,0x2
10000e81:	01 d0                	add    eax,edx
10000e83:	05 10 00 00 00       	add    eax,0x10	10000e84: R_386_32	floppyTable
10000e88:	8a 00                	mov    al,BYTE PTR [eax]
10000e8a:	0f be c0             	movsx  eax,al
10000e8d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000e90:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10000e94:	75 10                	jne    10000ea6 <Floppy::specify(int)+0x5a>
10000e96:	83 ec 0c             	sub    esp,0xc
10000e99:	68 b6 59 00 10       	push   0x100059b6	10000e9a: R_386_32	.text
10000e9e:	e8 fc ff ff ff       	call   10000e9f <Floppy::specify(int)+0x53>	10000e9f: R_386_PC32	Krnl::panic(char const*)
10000ea3:	83 c4 10             	add    esp,0x10
10000ea6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000ea9:	8b 44 85 c0          	mov    eax,DWORD PTR [ebp+eax*4-0x40]
10000ead:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000eb0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000eb3:	89 c2                	mov    edx,eax
10000eb5:	c1 e0 03             	shl    eax,0x3
10000eb8:	89 d1                	mov    ecx,edx
10000eba:	29 c1                	sub    ecx,eax
10000ebc:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000ec1:	f7 e9                	imul   ecx
10000ec3:	c1 fa 11             	sar    edx,0x11
10000ec6:	89 c8                	mov    eax,ecx
10000ec8:	c1 f8 1f             	sar    eax,0x1f
10000ecb:	29 c2                	sub    edx,eax
10000ecd:	89 d0                	mov    eax,edx
10000ecf:	83 c0 10             	add    eax,0x10
10000ed2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000ed5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10000ed8:	89 d0                	mov    eax,edx
10000eda:	01 c0                	add    eax,eax
10000edc:	01 d0                	add    eax,edx
10000ede:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10000ee5:	01 d0                	add    eax,edx
10000ee7:	01 c0                	add    eax,eax
10000ee9:	89 c1                	mov    ecx,eax
10000eeb:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000ef0:	f7 e9                	imul   ecx
10000ef2:	c1 fa 12             	sar    edx,0x12
10000ef5:	89 c8                	mov    eax,ecx
10000ef7:	c1 f8 1f             	sar    eax,0x1f
10000efa:	29 c2                	sub    edx,eax
10000efc:	89 d0                	mov    eax,edx
10000efe:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000f01:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10000f08:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10000f0f:	83 ec 08             	sub    esp,0x8
10000f12:	6a 03                	push   0x3
10000f14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f17:	e8 fc ff ff ff       	call   10000f18 <Floppy::specify(int)+0xcc>	10000f18: R_386_PC32	Floppy::writeCommand(unsigned char)
10000f1c:	83 c4 10             	add    esp,0x10
10000f1f:	83 ec 0c             	sub    esp,0xc
10000f22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f25:	e8 fc ff ff ff       	call   10000f26 <Floppy::specify(int)+0xda>	10000f26: R_386_PC32	Floppy::wasFailure()
10000f2a:	83 c4 10             	add    esp,0x10
10000f2d:	84 c0                	test   al,al
10000f2f:	74 04                	je     10000f35 <Floppy::specify(int)+0xe9>
10000f31:	b0 00                	mov    al,0x0
10000f33:	eb 6b                	jmp    10000fa0 <Floppy::specify(int)+0x154>
10000f35:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000f38:	c1 e0 04             	shl    eax,0x4
10000f3b:	88 c2                	mov    dl,al
10000f3d:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000f40:	09 d0                	or     eax,edx
10000f42:	0f b6 c0             	movzx  eax,al
10000f45:	83 ec 08             	sub    esp,0x8
10000f48:	50                   	push   eax
10000f49:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f4c:	e8 fc ff ff ff       	call   10000f4d <Floppy::specify(int)+0x101>	10000f4d: R_386_PC32	Floppy::writeCommand(unsigned char)
10000f51:	83 c4 10             	add    esp,0x10
10000f54:	83 ec 0c             	sub    esp,0xc
10000f57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f5a:	e8 fc ff ff ff       	call   10000f5b <Floppy::specify(int)+0x10f>	10000f5b: R_386_PC32	Floppy::wasFailure()
10000f5f:	83 c4 10             	add    esp,0x10
10000f62:	84 c0                	test   al,al
10000f64:	74 04                	je     10000f6a <Floppy::specify(int)+0x11e>
10000f66:	b0 00                	mov    al,0x0
10000f68:	eb 36                	jmp    10000fa0 <Floppy::specify(int)+0x154>
10000f6a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000f6d:	01 c0                	add    eax,eax
10000f6f:	88 c2                	mov    dl,al
10000f71:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000f74:	09 d0                	or     eax,edx
10000f76:	0f b6 c0             	movzx  eax,al
10000f79:	83 ec 08             	sub    esp,0x8
10000f7c:	50                   	push   eax
10000f7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f80:	e8 fc ff ff ff       	call   10000f81 <Floppy::specify(int)+0x135>	10000f81: R_386_PC32	Floppy::writeCommand(unsigned char)
10000f85:	83 c4 10             	add    esp,0x10
10000f88:	83 ec 0c             	sub    esp,0xc
10000f8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f8e:	e8 fc ff ff ff       	call   10000f8f <Floppy::specify(int)+0x143>	10000f8f: R_386_PC32	Floppy::wasFailure()
10000f93:	83 c4 10             	add    esp,0x10
10000f96:	84 c0                	test   al,al
10000f98:	74 04                	je     10000f9e <Floppy::specify(int)+0x152>
10000f9a:	b0 00                	mov    al,0x0
10000f9c:	eb 02                	jmp    10000fa0 <Floppy::specify(int)+0x154>
10000f9e:	b0 01                	mov    al,0x1
10000fa0:	8d 65 f4             	lea    esp,[ebp-0xc]
10000fa3:	5b                   	pop    ebx
10000fa4:	5e                   	pop    esi
10000fa5:	5f                   	pop    edi
10000fa6:	5d                   	pop    ebp
10000fa7:	c3                   	ret    

10000fa8 <Floppy::select(int, bool)>:
10000fa8:	55                   	push   ebp
10000fa9:	89 e5                	mov    ebp,esp
10000fab:	83 ec 28             	sub    esp,0x28
10000fae:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000fb1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000fb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fb7:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000fbd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000fc0:	75 27                	jne    10000fe9 <Floppy::select(int, bool)+0x41>
10000fc2:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
10000fc5:	83 f0 01             	xor    eax,0x1
10000fc8:	84 c0                	test   al,al
10000fca:	74 1d                	je     10000fe9 <Floppy::select(int, bool)+0x41>
10000fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fcf:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000fd5:	83 f8 ff             	cmp    eax,0xffffffff
10000fd8:	74 0f                	je     10000fe9 <Floppy::select(int, bool)+0x41>
10000fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fdd:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000fe4:	e9 34 02 00 00       	jmp    1000121d <Floppy::select(int, bool)+0x275>
10000fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fec:	8a 80 92 01 00 00    	mov    al,BYTE PTR [eax+0x192]
10000ff2:	83 f0 01             	xor    eax,0x1
10000ff5:	84 c0                	test   al,al
10000ff7:	75 12                	jne    1000100b <Floppy::select(int, bool)+0x63>
10000ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ffc:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10001002:	83 f8 ff             	cmp    eax,0xffffffff
10001005:	0f 85 12 02 00 00    	jne    1000121d <Floppy::select(int, bool)+0x275>
1000100b:	83 ec 08             	sub    esp,0x8
1000100e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001011:	68 dc 59 00 10       	push   0x100059dc	10001012: R_386_32	.text
10001016:	e8 fc ff ff ff       	call   10001017 <Floppy::select(int, bool)+0x6f>	10001017: R_386_PC32	Dbg::kprintf(char const*, ...)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001021:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10001027:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
1000102a:	0f 84 b5 01 00 00    	je     100011e5 <Floppy::select(int, bool)+0x23d>
10001030:	83 ec 0c             	sub    esp,0xc
10001033:	68 ec 59 00 10       	push   0x100059ec	10001034: R_386_32	.text
10001038:	e8 fc ff ff ff       	call   10001039 <Floppy::select(int, bool)+0x91>	10001039: R_386_PC32	Dbg::kprintf(char const*, ...)
1000103d:	83 c4 10             	add    esp,0x10
10001040:	fa                   	cli    
10001041:	a1 00 00 00 00       	mov    eax,ds:0x0	10001042: R_386_32	irqDisableCounter
10001046:	40                   	inc    eax
10001047:	a3 00 00 00 00       	mov    ds:0x0,eax	10001048: R_386_32	irqDisableCounter
1000104c:	83 ec 0c             	sub    esp,0xc
1000104f:	68 f9 59 00 10       	push   0x100059f9	10001050: R_386_32	.text
10001054:	e8 fc ff ff ff       	call   10001055 <Floppy::select(int, bool)+0xad>	10001055: R_386_PC32	Dbg::kprintf(char const*, ...)
10001059:	83 c4 10             	add    esp,0x10
1000105c:	83 ec 08             	sub    esp,0x8
1000105f:	6a 02                	push   0x2
10001061:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001064:	e8 fc ff ff ff       	call   10001065 <Floppy::select(int, bool)+0xbd>	10001065: R_386_PC32	Floppy::readPort(FloppyReg)
10001069:	83 c4 10             	add    esp,0x10
1000106c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000106f:	80 65 f7 fc          	and    BYTE PTR [ebp-0x9],0xfc
10001073:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001076:	88 c2                	mov    dl,al
10001078:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000107b:	09 d0                	or     eax,edx
1000107d:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10001080:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10001084:	83 ec 04             	sub    esp,0x4
10001087:	50                   	push   eax
10001088:	6a 02                	push   0x2
1000108a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000108d:	e8 fc ff ff ff       	call   1000108e <Floppy::select(int, bool)+0xe6>	1000108e: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10001092:	83 c4 10             	add    esp,0x10
10001095:	83 ec 0c             	sub    esp,0xc
10001098:	68 20 03 00 00       	push   0x320
1000109d:	e8 fc ff ff ff       	call   1000109e <Floppy::select(int, bool)+0xf6>	1000109e: R_386_PC32	milliTenthSleep(unsigned int)
100010a2:	83 c4 10             	add    esp,0x10
100010a5:	83 ec 0c             	sub    esp,0xc
100010a8:	68 06 5a 00 10       	push   0x10005a06	100010a9: R_386_32	.text
100010ad:	e8 fc ff ff ff       	call   100010ae <Floppy::select(int, bool)+0x106>	100010ae: R_386_PC32	Dbg::kprintf(char const*, ...)
100010b2:	83 c4 10             	add    esp,0x10
100010b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010b8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100010bb:	83 c2 64             	add    edx,0x64
100010be:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
100010c2:	89 d0                	mov    eax,edx
100010c4:	c1 e0 02             	shl    eax,0x2
100010c7:	01 d0                	add    eax,edx
100010c9:	c1 e0 02             	shl    eax,0x2
100010cc:	01 d0                	add    eax,edx
100010ce:	05 10 00 00 00       	add    eax,0x10	100010cf: R_386_32	floppyTable
100010d3:	8a 00                	mov    al,BYTE PTR [eax]
100010d5:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
100010d8:	80 7d f6 ff          	cmp    BYTE PTR [ebp-0xa],0xff
100010dc:	75 10                	jne    100010ee <Floppy::select(int, bool)+0x146>
100010de:	83 ec 0c             	sub    esp,0xc
100010e1:	68 14 5a 00 10       	push   0x10005a14	100010e2: R_386_32	.text
100010e6:	e8 fc ff ff ff       	call   100010e7 <Floppy::select(int, bool)+0x13f>	100010e7: R_386_PC32	Krnl::panic(char const*)
100010eb:	83 c4 10             	add    esp,0x10
100010ee:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
100010f1:	0f b6 c0             	movzx  eax,al
100010f4:	83 ec 04             	sub    esp,0x4
100010f7:	50                   	push   eax
100010f8:	6a 07                	push   0x7
100010fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100010fd:	e8 fc ff ff ff       	call   100010fe <Floppy::select(int, bool)+0x156>	100010fe: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10001102:	83 c4 10             	add    esp,0x10
10001105:	a1 00 00 00 00       	mov    eax,ds:0x0	10001106: R_386_32	irqDisableCounter
1000110a:	48                   	dec    eax
1000110b:	a3 00 00 00 00       	mov    ds:0x0,eax	1000110c: R_386_32	irqDisableCounter
10001110:	a1 00 00 00 00       	mov    eax,ds:0x0	10001111: R_386_32	irqDisableCounter
10001115:	85 c0                	test   eax,eax
10001117:	75 01                	jne    1000111a <Floppy::select(int, bool)+0x172>
10001119:	fb                   	sti    
1000111a:	83 ec 0c             	sub    esp,0xc
1000111d:	68 43 5a 00 10       	push   0x10005a43	1000111e: R_386_32	.text
10001122:	e8 fc ff ff ff       	call   10001123 <Floppy::select(int, bool)+0x17b>	10001123: R_386_PC32	Dbg::kprintf(char const*, ...)
10001127:	83 c4 10             	add    esp,0x10
1000112a:	83 ec 08             	sub    esp,0x8
1000112d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001130:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001133:	e8 fc ff ff ff       	call   10001134 <Floppy::select(int, bool)+0x18c>	10001134: R_386_PC32	Floppy::specify(int)
10001138:	83 c4 10             	add    esp,0x10
1000113b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
1000113e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10001141:	83 f0 01             	xor    eax,0x1
10001144:	84 c0                	test   al,al
10001146:	74 25                	je     1000116d <Floppy::select(int, bool)+0x1c5>
10001148:	83 ec 0c             	sub    esp,0xc
1000114b:	68 50 5a 00 10       	push   0x10005a50	1000114c: R_386_32	.text
10001150:	e8 fc ff ff ff       	call   10001151 <Floppy::select(int, bool)+0x1a9>	10001151: R_386_PC32	Dbg::kprintf(char const*, ...)
10001155:	83 c4 10             	add    esp,0x10
10001158:	83 ec 0c             	sub    esp,0xc
1000115b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000115e:	e8 fc ff ff ff       	call   1000115f <Floppy::select(int, bool)+0x1b7>	1000115f: R_386_PC32	Floppy::reset()
10001163:	83 c4 10             	add    esp,0x10
10001166:	b0 00                	mov    al,0x0
10001168:	e9 d2 00 00 00       	jmp    1000123f <Floppy::select(int, bool)+0x297>
1000116d:	83 ec 0c             	sub    esp,0xc
10001170:	68 61 5a 00 10       	push   0x10005a61	10001171: R_386_32	.text
10001175:	e8 fc ff ff ff       	call   10001176 <Floppy::select(int, bool)+0x1ce>	10001176: R_386_PC32	Dbg::kprintf(char const*, ...)
1000117a:	83 c4 10             	add    esp,0x10
1000117d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001180:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001183:	83 c2 68             	add    edx,0x68
10001186:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
1000118a:	83 ec 0c             	sub    esp,0xc
1000118d:	50                   	push   eax
1000118e:	e8 fc ff ff ff       	call   1000118f <Floppy::select(int, bool)+0x1e7>	1000118f: R_386_PC32	FloppyDrive::calibrate()
10001193:	83 c4 10             	add    esp,0x10
10001196:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10001199:	83 ec 0c             	sub    esp,0xc
1000119c:	68 6e 5a 00 10       	push   0x10005a6e	1000119d: R_386_32	.text
100011a1:	e8 fc ff ff ff       	call   100011a2 <Floppy::select(int, bool)+0x1fa>	100011a2: R_386_PC32	Dbg::kprintf(char const*, ...)
100011a6:	83 c4 10             	add    esp,0x10
100011a9:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100011ac:	83 f0 01             	xor    eax,0x1
100011af:	84 c0                	test   al,al
100011b1:	74 22                	je     100011d5 <Floppy::select(int, bool)+0x22d>
100011b3:	83 ec 0c             	sub    esp,0xc
100011b6:	68 7c 5a 00 10       	push   0x10005a7c	100011b7: R_386_32	.text
100011bb:	e8 fc ff ff ff       	call   100011bc <Floppy::select(int, bool)+0x214>	100011bc: R_386_PC32	Dbg::kprintf(char const*, ...)
100011c0:	83 c4 10             	add    esp,0x10
100011c3:	83 ec 0c             	sub    esp,0xc
100011c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011c9:	e8 fc ff ff ff       	call   100011ca <Floppy::select(int, bool)+0x222>	100011ca: R_386_PC32	Floppy::reset()
100011ce:	83 c4 10             	add    esp,0x10
100011d1:	b0 00                	mov    al,0x0
100011d3:	eb 6a                	jmp    1000123f <Floppy::select(int, bool)+0x297>
100011d5:	83 ec 0c             	sub    esp,0xc
100011d8:	68 8e 5a 00 10       	push   0x10005a8e	100011d9: R_386_32	.text
100011dd:	e8 fc ff ff ff       	call   100011de <Floppy::select(int, bool)+0x236>	100011de: R_386_PC32	Dbg::kprintf(char const*, ...)
100011e2:	83 c4 10             	add    esp,0x10
100011e5:	83 ec 0c             	sub    esp,0xc
100011e8:	68 9b 5a 00 10       	push   0x10005a9b	100011e9: R_386_32	.text
100011ed:	e8 fc ff ff ff       	call   100011ee <Floppy::select(int, bool)+0x246>	100011ee: R_386_PC32	Dbg::kprintf(char const*, ...)
100011f2:	83 c4 10             	add    esp,0x10
100011f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100011f8:	8a 55 e4             	mov    dl,BYTE PTR [ebp-0x1c]
100011fb:	88 90 92 01 00 00    	mov    BYTE PTR [eax+0x192],dl
10001201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001204:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001207:	89 90 94 01 00 00    	mov    DWORD PTR [eax+0x194],edx
1000120d:	83 ec 0c             	sub    esp,0xc
10001210:	68 a8 5a 00 10       	push   0x10005aa8	10001211: R_386_32	.text
10001215:	e8 fc ff ff ff       	call   10001216 <Floppy::select(int, bool)+0x26e>	10001216: R_386_PC32	Dbg::kprintf(char const*, ...)
1000121a:	83 c4 10             	add    esp,0x10
1000121d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001220:	8a 80 92 01 00 00    	mov    al,BYTE PTR [eax+0x192]
10001226:	84 c0                	test   al,al
10001228:	74 12                	je     1000123c <Floppy::select(int, bool)+0x294>
1000122a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000122d:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10001233:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10001236:	75 04                	jne    1000123c <Floppy::select(int, bool)+0x294>
10001238:	b0 01                	mov    al,0x1
1000123a:	eb 02                	jmp    1000123e <Floppy::select(int, bool)+0x296>
1000123c:	b0 00                	mov    al,0x0
1000123e:	90                   	nop
1000123f:	c9                   	leave  
10001240:	c3                   	ret    
10001241:	90                   	nop

10001242 <Floppy::motor(int, bool)>:
10001242:	55                   	push   ebp
10001243:	89 e5                	mov    ebp,esp
10001245:	53                   	push   ebx
10001246:	83 ec 24             	sub    esp,0x24
10001249:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000124c:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
1000124f:	83 ec 0c             	sub    esp,0xc
10001252:	68 b5 5a 00 10       	push   0x10005ab5	10001253: R_386_32	.text
10001257:	e8 fc ff ff ff       	call   10001258 <Floppy::motor(int, bool)+0x16>	10001258: R_386_PC32	Dbg::kprintf(char const*, ...)
1000125c:	83 c4 10             	add    esp,0x10
1000125f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10001263:	83 ec 04             	sub    esp,0x4
10001266:	50                   	push   eax
10001267:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000126a:	68 c4 5a 00 10       	push   0x10005ac4	1000126b: R_386_32	.text
1000126f:	e8 fc ff ff ff       	call   10001270 <Floppy::motor(int, bool)+0x2e>	10001270: R_386_PC32	Dbg::kprintf(char const*, ...)
10001274:	83 c4 10             	add    esp,0x10
10001277:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
1000127b:	0f 84 7b 01 00 00    	je     100013fc <Floppy::motor(int, bool)+0x1ba>
10001281:	83 ec 0c             	sub    esp,0xc
10001284:	68 da 5a 00 10       	push   0x10005ada	10001285: R_386_32	.text
10001289:	e8 fc ff ff ff       	call   1000128a <Floppy::motor(int, bool)+0x48>	1000128a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000128e:	83 c4 10             	add    esp,0x10
10001291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001294:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001297:	83 c2 58             	add    edx,0x58
1000129a:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
1000129e:	85 c0                	test   eax,eax
100012a0:	0f 85 21 01 00 00    	jne    100013c7 <Floppy::motor(int, bool)+0x185>
100012a6:	83 ec 0c             	sub    esp,0xc
100012a9:	68 e2 5a 00 10       	push   0x10005ae2	100012aa: R_386_32	.text
100012ae:	e8 fc ff ff ff       	call   100012af <Floppy::motor(int, bool)+0x6d>	100012af: R_386_PC32	Dbg::kprintf(char const*, ...)
100012b3:	83 c4 10             	add    esp,0x10
100012b6:	fa                   	cli    
100012b7:	a1 00 00 00 00       	mov    eax,ds:0x0	100012b8: R_386_32	irqDisableCounter
100012bc:	40                   	inc    eax
100012bd:	a3 00 00 00 00       	mov    ds:0x0,eax	100012be: R_386_32	irqDisableCounter
100012c2:	83 ec 08             	sub    esp,0x8
100012c5:	6a 02                	push   0x2
100012c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100012ca:	e8 fc ff ff ff       	call   100012cb <Floppy::motor(int, bool)+0x89>	100012cb: R_386_PC32	Floppy::readPort(FloppyReg)
100012cf:	83 c4 10             	add    esp,0x10
100012d2:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100012d5:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100012d9:	83 ec 08             	sub    esp,0x8
100012dc:	50                   	push   eax
100012dd:	68 f7 5a 00 10       	push   0x10005af7	100012de: R_386_32	.text
100012e2:	e8 fc ff ff ff       	call   100012e3 <Floppy::motor(int, bool)+0xa1>	100012e3: R_386_PC32	Dbg::kprintf(char const*, ...)
100012e7:	83 c4 10             	add    esp,0x10
100012ea:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
100012ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100012f1:	bb 10 00 00 00       	mov    ebx,0x10
100012f6:	88 c1                	mov    cl,al
100012f8:	d3 e3                	shl    ebx,cl
100012fa:	89 d8                	mov    eax,ebx
100012fc:	09 d0                	or     eax,edx
100012fe:	83 ec 08             	sub    esp,0x8
10001301:	50                   	push   eax
10001302:	68 05 5b 00 10       	push   0x10005b05	10001303: R_386_32	.text
10001307:	e8 fc ff ff ff       	call   10001308 <Floppy::motor(int, bool)+0xc6>	10001308: R_386_PC32	Dbg::kprintf(char const*, ...)
1000130c:	83 c4 10             	add    esp,0x10
1000130f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001312:	ba 10 00 00 00       	mov    edx,0x10
10001317:	88 c1                	mov    cl,al
10001319:	d3 e2                	shl    edx,cl
1000131b:	89 d0                	mov    eax,edx
1000131d:	88 c2                	mov    dl,al
1000131f:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10001322:	09 d0                	or     eax,edx
10001324:	0f b6 c0             	movzx  eax,al
10001327:	83 ec 04             	sub    esp,0x4
1000132a:	50                   	push   eax
1000132b:	6a 02                	push   0x2
1000132d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001330:	e8 fc ff ff ff       	call   10001331 <Floppy::motor(int, bool)+0xef>	10001331: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10001335:	83 c4 10             	add    esp,0x10
10001338:	a1 00 00 00 00       	mov    eax,ds:0x0	10001339: R_386_32	irqDisableCounter
1000133d:	48                   	dec    eax
1000133e:	a3 00 00 00 00       	mov    ds:0x0,eax	1000133f: R_386_32	irqDisableCounter
10001343:	a1 00 00 00 00       	mov    eax,ds:0x0	10001344: R_386_32	irqDisableCounter
10001348:	85 c0                	test   eax,eax
1000134a:	75 01                	jne    1000134d <Floppy::motor(int, bool)+0x10b>
1000134c:	fb                   	sti    
1000134d:	83 ec 0c             	sub    esp,0xc
10001350:	68 13 5b 00 10       	push   0x10005b13	10001351: R_386_32	.text
10001355:	e8 fc ff ff ff       	call   10001356 <Floppy::motor(int, bool)+0x114>	10001356: R_386_PC32	Dbg::kprintf(char const*, ...)
1000135a:	83 c4 10             	add    esp,0x10
1000135d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001360:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001363:	83 c2 64             	add    edx,0x64
10001366:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
1000136a:	83 f8 04             	cmp    eax,0x4
1000136d:	75 12                	jne    10001381 <Floppy::motor(int, bool)+0x13f>
1000136f:	83 ec 0c             	sub    esp,0xc
10001372:	68 b8 0b 00 00       	push   0xbb8
10001377:	e8 fc ff ff ff       	call   10001378 <Floppy::motor(int, bool)+0x136>	10001378: R_386_PC32	milliTenthSleep(unsigned int)
1000137c:	83 c4 10             	add    esp,0x10
1000137f:	eb 10                	jmp    10001391 <Floppy::motor(int, bool)+0x14f>
10001381:	83 ec 0c             	sub    esp,0xc
10001384:	68 88 13 00 00       	push   0x1388
10001389:	e8 fc ff ff ff       	call   1000138a <Floppy::motor(int, bool)+0x148>	1000138a: R_386_PC32	milliTenthSleep(unsigned int)
1000138e:	83 c4 10             	add    esp,0x10
10001391:	83 ec 0c             	sub    esp,0xc
10001394:	68 21 5b 00 10       	push   0x10005b21	10001395: R_386_32	.text
10001399:	e8 fc ff ff ff       	call   1000139a <Floppy::motor(int, bool)+0x158>	1000139a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000139e:	83 c4 10             	add    esp,0x10
100013a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013a4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100013a7:	83 c2 58             	add    edx,0x58
100013aa:	c7 44 90 0c 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x1
100013b2:	83 ec 0c             	sub    esp,0xc
100013b5:	68 31 5b 00 10       	push   0x10005b31	100013b6: R_386_32	.text
100013ba:	e8 fc ff ff ff       	call   100013bb <Floppy::motor(int, bool)+0x179>	100013bb: R_386_PC32	Dbg::kprintf(char const*, ...)
100013bf:	83 c4 10             	add    esp,0x10
100013c2:	e9 89 00 00 00       	jmp    10001450 <Floppy::motor(int, bool)+0x20e>
100013c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013ca:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100013cd:	83 c2 58             	add    edx,0x58
100013d0:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100013d4:	83 f8 02             	cmp    eax,0x2
100013d7:	75 77                	jne    10001450 <Floppy::motor(int, bool)+0x20e>
100013d9:	83 ec 0c             	sub    esp,0xc
100013dc:	68 41 5b 00 10       	push   0x10005b41	100013dd: R_386_32	.text
100013e1:	e8 fc ff ff ff       	call   100013e2 <Floppy::motor(int, bool)+0x1a0>	100013e2: R_386_PC32	Dbg::kprintf(char const*, ...)
100013e6:	83 c4 10             	add    esp,0x10
100013e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100013ef:	83 c2 58             	add    edx,0x58
100013f2:	c7 44 90 0c 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x1
100013fa:	eb 54                	jmp    10001450 <Floppy::motor(int, bool)+0x20e>
100013fc:	83 ec 0c             	sub    esp,0xc
100013ff:	68 51 5b 00 10       	push   0x10005b51	10001400: R_386_32	.text
10001404:	e8 fc ff ff ff       	call   10001405 <Floppy::motor(int, bool)+0x1c3>	10001405: R_386_PC32	Dbg::kprintf(char const*, ...)
10001409:	83 c4 10             	add    esp,0x10
1000140c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000140f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001412:	83 c2 58             	add    edx,0x58
10001415:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10001419:	83 f8 01             	cmp    eax,0x1
1000141c:	75 32                	jne    10001450 <Floppy::motor(int, bool)+0x20e>
1000141e:	83 ec 0c             	sub    esp,0xc
10001421:	68 61 5b 00 10       	push   0x10005b61	10001422: R_386_32	.text
10001426:	e8 fc ff ff ff       	call   10001427 <Floppy::motor(int, bool)+0x1e5>	10001427: R_386_PC32	Dbg::kprintf(char const*, ...)
1000142b:	83 c4 10             	add    esp,0x10
1000142e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001431:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001434:	83 c2 58             	add    edx,0x58
10001437:	c7 44 90 0c 02 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x2
1000143f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001442:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001445:	83 c2 5c             	add    edx,0x5c
10001448:	c7 44 90 0c c4 09 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x9c4
10001450:	83 ec 0c             	sub    esp,0xc
10001453:	68 71 5b 00 10       	push   0x10005b71	10001454: R_386_32	.text
10001458:	e8 fc ff ff ff       	call   10001459 <Floppy::motor(int, bool)+0x217>	10001459: R_386_PC32	Dbg::kprintf(char const*, ...)
1000145d:	83 c4 10             	add    esp,0x10
10001460:	90                   	nop
10001461:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001464:	c9                   	leave  
10001465:	c3                   	ret    

10001466 <FloppyDrive::FloppyDrive()>:
10001466:	55                   	push   ebp
10001467:	89 e5                	mov    ebp,esp
10001469:	83 ec 08             	sub    esp,0x8
1000146c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000146f:	83 ec 04             	sub    esp,0x4
10001472:	68 00 02 00 00       	push   0x200
10001477:	68 86 5b 00 10       	push   0x10005b86	10001478: R_386_32	.text
1000147c:	50                   	push   eax
1000147d:	e8 fc ff ff ff       	call   1000147e <FloppyDrive::FloppyDrive()+0x18>	1000147e: R_386_PC32	PhysicalDisk::PhysicalDisk(char const*, int)
10001482:	83 c4 10             	add    esp,0x10
10001485:	ba 08 00 00 00       	mov    edx,0x8	10001486: R_386_32	vtable for FloppyDrive
1000148a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000148d:	89 10                	mov    DWORD PTR [eax],edx
1000148f:	90                   	nop
10001490:	c9                   	leave  
10001491:	c3                   	ret    

10001492 <FloppyDrive::motorOn()>:
10001492:	55                   	push   ebp
10001493:	89 e5                	mov    ebp,esp
10001495:	83 ec 08             	sub    esp,0x8
10001498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000149b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
100014a1:	83 ec 08             	sub    esp,0x8
100014a4:	50                   	push   eax
100014a5:	68 98 5b 00 10       	push   0x10005b98	100014a6: R_386_32	.text
100014aa:	e8 fc ff ff ff       	call   100014ab <FloppyDrive::motorOn()+0x19>	100014ab: R_386_PC32	Dbg::kprintf(char const*, ...)
100014af:	83 c4 10             	add    esp,0x10
100014b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014b5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014bb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100014be:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100014c4:	83 ec 04             	sub    esp,0x4
100014c7:	6a 01                	push   0x1
100014c9:	52                   	push   edx
100014ca:	50                   	push   eax
100014cb:	e8 fc ff ff ff       	call   100014cc <FloppyDrive::motorOn()+0x3a>	100014cc: R_386_PC32	Floppy::motor(int, bool)
100014d0:	83 c4 10             	add    esp,0x10
100014d3:	90                   	nop
100014d4:	c9                   	leave  
100014d5:	c3                   	ret    

100014d6 <FloppyDrive::motorOff()>:
100014d6:	55                   	push   ebp
100014d7:	89 e5                	mov    ebp,esp
100014d9:	83 ec 08             	sub    esp,0x8
100014dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014df:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014e5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100014e8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100014ee:	83 ec 04             	sub    esp,0x4
100014f1:	6a 00                	push   0x0
100014f3:	52                   	push   edx
100014f4:	50                   	push   eax
100014f5:	e8 fc ff ff ff       	call   100014f6 <FloppyDrive::motorOff()+0x20>	100014f6: R_386_PC32	Floppy::motor(int, bool)
100014fa:	83 c4 10             	add    esp,0x10
100014fd:	90                   	nop
100014fe:	c9                   	leave  
100014ff:	c3                   	ret    

10001500 <FloppyDrive::floppyConfigure()>:
10001500:	55                   	push   ebp
10001501:	89 e5                	mov    ebp,esp
10001503:	83 ec 18             	sub    esp,0x18
10001506:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
1000150a:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
1000150e:	c6 45 f5 01          	mov    BYTE PTR [ebp-0xb],0x1
10001512:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
10001519:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10001520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001523:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001529:	83 ec 08             	sub    esp,0x8
1000152c:	6a 13                	push   0x13
1000152e:	50                   	push   eax
1000152f:	e8 fc ff ff ff       	call   10001530 <FloppyDrive::floppyConfigure()+0x30>	10001530: R_386_PC32	Floppy::writeCommand(unsigned char)
10001534:	83 c4 10             	add    esp,0x10
10001537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000153a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001540:	83 ec 0c             	sub    esp,0xc
10001543:	50                   	push   eax
10001544:	e8 fc ff ff ff       	call   10001545 <FloppyDrive::floppyConfigure()+0x45>	10001545: R_386_PC32	Floppy::wasFailure()
10001549:	83 c4 10             	add    esp,0x10
1000154c:	84 c0                	test   al,al
1000154e:	74 07                	je     10001557 <FloppyDrive::floppyConfigure()+0x57>
10001550:	b0 00                	mov    al,0x0
10001552:	e9 de 00 00 00       	jmp    10001635 <FloppyDrive::floppyConfigure()+0x135>
10001557:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000155a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001560:	83 ec 08             	sub    esp,0x8
10001563:	6a 00                	push   0x0
10001565:	50                   	push   eax
10001566:	e8 fc ff ff ff       	call   10001567 <FloppyDrive::floppyConfigure()+0x67>	10001567: R_386_PC32	Floppy::writeCommand(unsigned char)
1000156b:	83 c4 10             	add    esp,0x10
1000156e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001571:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001577:	83 ec 0c             	sub    esp,0xc
1000157a:	50                   	push   eax
1000157b:	e8 fc ff ff ff       	call   1000157c <FloppyDrive::floppyConfigure()+0x7c>	1000157c: R_386_PC32	Floppy::wasFailure()
10001580:	83 c4 10             	add    esp,0x10
10001583:	84 c0                	test   al,al
10001585:	74 07                	je     1000158e <FloppyDrive::floppyConfigure()+0x8e>
10001587:	b0 00                	mov    al,0x0
10001589:	e9 a7 00 00 00       	jmp    10001635 <FloppyDrive::floppyConfigure()+0x135>
1000158e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001591:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001597:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
1000159b:	c1 e2 06             	shl    edx,0x6
1000159e:	88 d1                	mov    cl,dl
100015a0:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
100015a4:	c1 e2 05             	shl    edx,0x5
100015a7:	09 d1                	or     ecx,edx
100015a9:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
100015ad:	c1 e2 04             	shl    edx,0x4
100015b0:	09 d1                	or     ecx,edx
100015b2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100015b5:	4a                   	dec    edx
100015b6:	09 ca                	or     edx,ecx
100015b8:	0f b6 d2             	movzx  edx,dl
100015bb:	83 ec 08             	sub    esp,0x8
100015be:	52                   	push   edx
100015bf:	50                   	push   eax
100015c0:	e8 fc ff ff ff       	call   100015c1 <FloppyDrive::floppyConfigure()+0xc1>	100015c1: R_386_PC32	Floppy::writeCommand(unsigned char)
100015c5:	83 c4 10             	add    esp,0x10
100015c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100015cb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100015d1:	83 ec 0c             	sub    esp,0xc
100015d4:	50                   	push   eax
100015d5:	e8 fc ff ff ff       	call   100015d6 <FloppyDrive::floppyConfigure()+0xd6>	100015d6: R_386_PC32	Floppy::wasFailure()
100015da:	83 c4 10             	add    esp,0x10
100015dd:	84 c0                	test   al,al
100015df:	74 04                	je     100015e5 <FloppyDrive::floppyConfigure()+0xe5>
100015e1:	b0 00                	mov    al,0x0
100015e3:	eb 50                	jmp    10001635 <FloppyDrive::floppyConfigure()+0x135>
100015e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100015e8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100015ee:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100015f1:	0f b6 d2             	movzx  edx,dl
100015f4:	83 ec 08             	sub    esp,0x8
100015f7:	52                   	push   edx
100015f8:	50                   	push   eax
100015f9:	e8 fc ff ff ff       	call   100015fa <FloppyDrive::floppyConfigure()+0xfa>	100015fa: R_386_PC32	Floppy::writeCommand(unsigned char)
100015fe:	83 c4 10             	add    esp,0x10
10001601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001604:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000160a:	83 ec 0c             	sub    esp,0xc
1000160d:	50                   	push   eax
1000160e:	e8 fc ff ff ff       	call   1000160f <FloppyDrive::floppyConfigure()+0x10f>	1000160f: R_386_PC32	Floppy::wasFailure()
10001613:	83 c4 10             	add    esp,0x10
10001616:	84 c0                	test   al,al
10001618:	74 04                	je     1000161e <FloppyDrive::floppyConfigure()+0x11e>
1000161a:	b0 00                	mov    al,0x0
1000161c:	eb 17                	jmp    10001635 <FloppyDrive::floppyConfigure()+0x135>
1000161e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001621:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001627:	8a 55 f5             	mov    dl,BYTE PTR [ebp-0xb]
1000162a:	83 f2 01             	xor    edx,0x1
1000162d:	88 90 91 01 00 00    	mov    BYTE PTR [eax+0x191],dl
10001633:	b0 01                	mov    al,0x1
10001635:	c9                   	leave  
10001636:	c3                   	ret    
10001637:	90                   	nop

10001638 <FloppyDrive::open(int, int, void*)>:
10001638:	b8 00 00 00 00       	mov    eax,0x0
1000163d:	c3                   	ret    

1000163e <FloppyDrive::_open(int, int, void*)>:
1000163e:	55                   	push   ebp
1000163f:	89 e5                	mov    ebp,esp
10001641:	83 ec 08             	sub    esp,0x8
10001644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001647:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
1000164a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
10001650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001653:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001656:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
1000165c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000165f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001665:	83 ec 08             	sub    esp,0x8
10001668:	50                   	push   eax
10001669:	68 b7 5b 00 10       	push   0x10005bb7	1000166a: R_386_32	.text
1000166e:	e8 fc ff ff ff       	call   1000166f <FloppyDrive::_open(int, int, void*)+0x31>	1000166f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001673:	83 c4 10             	add    esp,0x10
10001676:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001679:	c7 80 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x15c],0x200
10001683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001686:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
1000168d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001690:	c6 80 69 01 00 00 01 	mov    BYTE PTR [eax+0x169],0x1
10001697:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000169a:	89 d0                	mov    eax,edx
1000169c:	c1 e0 02             	shl    eax,0x2
1000169f:	01 d0                	add    eax,edx
100016a1:	c1 e0 02             	shl    eax,0x2
100016a4:	01 d0                	add    eax,edx
100016a6:	05 11 00 00 00       	add    eax,0x11	100016a7: R_386_32	floppyTable
100016ab:	8a 00                	mov    al,BYTE PTR [eax]
100016ad:	0f b6 c8             	movzx  ecx,al
100016b0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100016b3:	89 d0                	mov    eax,edx
100016b5:	c1 e0 02             	shl    eax,0x2
100016b8:	01 d0                	add    eax,edx
100016ba:	c1 e0 02             	shl    eax,0x2
100016bd:	01 d0                	add    eax,edx
100016bf:	05 13 00 00 00       	add    eax,0x13	100016c0: R_386_32	floppyTable
100016c4:	8a 00                	mov    al,BYTE PTR [eax]
100016c6:	0f b6 c0             	movzx  eax,al
100016c9:	0f af c8             	imul   ecx,eax
100016cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100016cf:	89 d0                	mov    eax,edx
100016d1:	c1 e0 02             	shl    eax,0x2
100016d4:	01 d0                	add    eax,edx
100016d6:	c1 e0 02             	shl    eax,0x2
100016d9:	01 d0                	add    eax,edx
100016db:	05 12 00 00 00       	add    eax,0x12	100016dc: R_386_32	floppyTable
100016e0:	8a 00                	mov    al,BYTE PTR [eax]
100016e2:	0f b6 c0             	movzx  eax,al
100016e5:	0f af c1             	imul   eax,ecx
100016e8:	89 c2                	mov    edx,eax
100016ea:	c1 ea 1f             	shr    edx,0x1f
100016ed:	01 d0                	add    eax,edx
100016ef:	d1 f8                	sar    eax,1
100016f1:	99                   	cdq    
100016f2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100016f5:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
100016fb:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
10001701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001704:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
1000170a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
10001710:	83 ec 04             	sub    esp,0x4
10001713:	52                   	push   edx
10001714:	50                   	push   eax
10001715:	68 c1 5b 00 10       	push   0x10005bc1	10001716: R_386_32	.text
1000171a:	e8 fc ff ff ff       	call   1000171b <FloppyDrive::_open(int, int, void*)+0xdd>	1000171b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000171f:	83 c4 10             	add    esp,0x10
10001722:	83 ec 0c             	sub    esp,0xc
10001725:	68 d3 5b 00 10       	push   0x10005bd3	10001726: R_386_32	.text
1000172a:	e8 fc ff ff ff       	call   1000172b <FloppyDrive::_open(int, int, void*)+0xed>	1000172b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000172f:	83 c4 10             	add    esp,0x10
10001732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001735:	83 ec 0c             	sub    esp,0xc
10001738:	50                   	push   eax
10001739:	e8 fc ff ff ff       	call   1000173a <FloppyDrive::_open(int, int, void*)+0xfc>	1000173a: R_386_PC32	PhysicalDisk::startCache()
1000173e:	83 c4 10             	add    esp,0x10
10001741:	83 ec 0c             	sub    esp,0xc
10001744:	68 e9 5b 00 10       	push   0x10005be9	10001745: R_386_32	.text
10001749:	e8 fc ff ff ff       	call   1000174a <FloppyDrive::_open(int, int, void*)+0x10c>	1000174a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000174e:	83 c4 10             	add    esp,0x10
10001751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001754:	83 ec 0c             	sub    esp,0xc
10001757:	50                   	push   eax
10001758:	e8 fc ff ff ff       	call   10001759 <FloppyDrive::_open(int, int, void*)+0x11b>	10001759: R_386_PC32	createPartitionsForDisk(PhysicalDisk*)
1000175d:	83 c4 10             	add    esp,0x10
10001760:	83 ec 0c             	sub    esp,0xc
10001763:	68 ff 5b 00 10       	push   0x10005bff	10001764: R_386_32	.text
10001768:	e8 fc ff ff ff       	call   10001769 <FloppyDrive::_open(int, int, void*)+0x12b>	10001769: R_386_PC32	Dbg::kprintf(char const*, ...)
1000176d:	83 c4 10             	add    esp,0x10
10001770:	b8 00 00 00 00       	mov    eax,0x0
10001775:	c9                   	leave  
10001776:	c3                   	ret    
10001777:	90                   	nop

10001778 <FloppyDrive::close(int, int, void*)>:
10001778:	b8 00 00 00 00       	mov    eax,0x0
1000177d:	c3                   	ret    

1000177e <FloppyDrive::unselect()>:
1000177e:	55                   	push   ebp
1000177f:	89 e5                	mov    ebp,esp
10001781:	83 ec 08             	sub    esp,0x8
10001784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001787:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000178d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001790:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001796:	83 ec 04             	sub    esp,0x4
10001799:	6a 00                	push   0x0
1000179b:	52                   	push   edx
1000179c:	50                   	push   eax
1000179d:	e8 fc ff ff ff       	call   1000179e <FloppyDrive::unselect()+0x20>	1000179e: R_386_PC32	Floppy::select(int, bool)
100017a2:	83 c4 10             	add    esp,0x10
100017a5:	90                   	nop
100017a6:	c9                   	leave  
100017a7:	c3                   	ret    

100017a8 <FloppyDrive::select()>:
100017a8:	55                   	push   ebp
100017a9:	89 e5                	mov    ebp,esp
100017ab:	83 ec 18             	sub    esp,0x18
100017ae:	83 ec 0c             	sub    esp,0xc
100017b1:	68 15 5c 00 10       	push   0x10005c15	100017b2: R_386_32	.text
100017b6:	e8 fc ff ff ff       	call   100017b7 <FloppyDrive::select()+0xf>	100017b7: R_386_PC32	Dbg::kprintf(char const*, ...)
100017bb:	83 c4 10             	add    esp,0x10
100017be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017c1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100017c7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100017ca:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100017d0:	83 ec 04             	sub    esp,0x4
100017d3:	6a 01                	push   0x1
100017d5:	52                   	push   edx
100017d6:	50                   	push   eax
100017d7:	e8 fc ff ff ff       	call   100017d8 <FloppyDrive::select()+0x30>	100017d8: R_386_PC32	Floppy::select(int, bool)
100017dc:	83 c4 10             	add    esp,0x10
100017df:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100017e2:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
100017e6:	75 22                	jne    1000180a <FloppyDrive::select()+0x62>
100017e8:	83 ec 0c             	sub    esp,0xc
100017eb:	68 2c 5c 00 10       	push   0x10005c2c	100017ec: R_386_32	.text
100017f0:	e8 fc ff ff ff       	call   100017f1 <FloppyDrive::select()+0x49>	100017f1: R_386_PC32	Dbg::kprintf(char const*, ...)
100017f5:	83 c4 10             	add    esp,0x10
100017f8:	83 ec 0c             	sub    esp,0xc
100017fb:	68 dc 05 00 00       	push   0x5dc
10001800:	e8 fc ff ff ff       	call   10001801 <FloppyDrive::select()+0x59>	10001801: R_386_PC32	milliTenthSleep(unsigned int)
10001805:	83 c4 10             	add    esp,0x10
10001808:	eb a4                	jmp    100017ae <FloppyDrive::select()+0x6>
1000180a:	90                   	nop
1000180b:	c9                   	leave  
1000180c:	c3                   	ret    
1000180d:	90                   	nop

1000180e <FloppyDrive::seek(int, int)>:
1000180e:	55                   	push   ebp
1000180f:	89 e5                	mov    ebp,esp
10001811:	83 ec 18             	sub    esp,0x18
10001814:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000181b:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
1000181f:	7e 33                	jle    10001854 <FloppyDrive::seek(int, int)+0x46>
10001821:	83 ec 0c             	sub    esp,0xc
10001824:	68 4c 5c 00 10       	push   0x10005c4c	10001825: R_386_32	.text
10001829:	e8 fc ff ff ff       	call   1000182a <FloppyDrive::seek(int, int)+0x1c>	1000182a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000182e:	83 c4 10             	add    esp,0x10
10001831:	83 ec 0c             	sub    esp,0xc
10001834:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001837:	e8 fc ff ff ff       	call   10001838 <FloppyDrive::seek(int, int)+0x2a>	10001838: R_386_PC32	FloppyDrive::motorOff()
1000183c:	83 c4 10             	add    esp,0x10
1000183f:	83 ec 0c             	sub    esp,0xc
10001842:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001845:	e8 fc ff ff ff       	call   10001846 <FloppyDrive::seek(int, int)+0x38>	10001846: R_386_PC32	FloppyDrive::unselect()
1000184a:	83 c4 10             	add    esp,0x10
1000184d:	b0 00                	mov    al,0x0
1000184f:	e9 da 02 00 00       	jmp    10001b2e <FloppyDrive::seek(int, int)+0x320>
10001854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001857:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
1000185d:	83 ec 08             	sub    esp,0x8
10001860:	50                   	push   eax
10001861:	68 73 5c 00 10       	push   0x10005c73	10001862: R_386_32	.text
10001866:	e8 fc ff ff ff       	call   10001867 <FloppyDrive::seek(int, int)+0x59>	10001867: R_386_PC32	Dbg::kprintf(char const*, ...)
1000186b:	83 c4 10             	add    esp,0x10
1000186e:	83 ec 0c             	sub    esp,0xc
10001871:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001874:	e8 fc ff ff ff       	call   10001875 <FloppyDrive::seek(int, int)+0x67>	10001875: R_386_PC32	FloppyDrive::select()
10001879:	83 c4 10             	add    esp,0x10
1000187c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000187f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001885:	83 ec 08             	sub    esp,0x8
10001888:	50                   	push   eax
10001889:	68 83 5c 00 10       	push   0x10005c83	1000188a: R_386_32	.text
1000188e:	e8 fc ff ff ff       	call   1000188f <FloppyDrive::seek(int, int)+0x81>	1000188f: R_386_PC32	Dbg::kprintf(char const*, ...)
10001893:	83 c4 10             	add    esp,0x10
10001896:	83 ec 0c             	sub    esp,0xc
10001899:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000189c:	e8 fc ff ff ff       	call   1000189d <FloppyDrive::seek(int, int)+0x8f>	1000189d: R_386_PC32	FloppyDrive::motorOn()
100018a1:	83 c4 10             	add    esp,0x10
100018a4:	83 ec 0c             	sub    esp,0xc
100018a7:	68 92 5c 00 10       	push   0x10005c92	100018a8: R_386_32	.text
100018ac:	e8 fc ff ff ff       	call   100018ad <FloppyDrive::seek(int, int)+0x9f>	100018ad: R_386_PC32	Dbg::kprintf(char const*, ...)
100018b1:	83 c4 10             	add    esp,0x10
100018b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018b7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018bd:	83 ec 08             	sub    esp,0x8
100018c0:	6a 0f                	push   0xf
100018c2:	50                   	push   eax
100018c3:	e8 fc ff ff ff       	call   100018c4 <FloppyDrive::seek(int, int)+0xb6>	100018c4: R_386_PC32	Floppy::writeCommand(unsigned char)
100018c8:	83 c4 10             	add    esp,0x10
100018cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018ce:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018d4:	83 ec 0c             	sub    esp,0xc
100018d7:	50                   	push   eax
100018d8:	e8 fc ff ff ff       	call   100018d9 <FloppyDrive::seek(int, int)+0xcb>	100018d9: R_386_PC32	Floppy::wasFailure()
100018dd:	83 c4 10             	add    esp,0x10
100018e0:	84 c0                	test   al,al
100018e2:	74 3d                	je     10001921 <FloppyDrive::seek(int, int)+0x113>
100018e4:	83 ec 0c             	sub    esp,0xc
100018e7:	68 9d 5c 00 10       	push   0x10005c9d	100018e8: R_386_32	.text
100018ec:	e8 fc ff ff ff       	call   100018ed <FloppyDrive::seek(int, int)+0xdf>	100018ed: R_386_PC32	Dbg::kprintf(char const*, ...)
100018f1:	83 c4 10             	add    esp,0x10
100018f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018f7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018fd:	83 ec 0c             	sub    esp,0xc
10001900:	50                   	push   eax
10001901:	e8 fc ff ff ff       	call   10001902 <FloppyDrive::seek(int, int)+0xf4>	10001902: R_386_PC32	Floppy::reset()
10001906:	83 c4 10             	add    esp,0x10
10001909:	83 ec 0c             	sub    esp,0xc
1000190c:	68 a9 5c 00 10       	push   0x10005ca9	1000190d: R_386_32	.text
10001911:	e8 fc ff ff ff       	call   10001912 <FloppyDrive::seek(int, int)+0x104>	10001912: R_386_PC32	Dbg::kprintf(char const*, ...)
10001916:	83 c4 10             	add    esp,0x10
10001919:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000191c:	e9 fa fe ff ff       	jmp    1000181b <FloppyDrive::seek(int, int)+0xd>
10001921:	83 ec 0c             	sub    esp,0xc
10001924:	68 b5 5c 00 10       	push   0x10005cb5	10001925: R_386_32	.text
10001929:	e8 fc ff ff ff       	call   1000192a <FloppyDrive::seek(int, int)+0x11c>	1000192a: R_386_PC32	Dbg::kprintf(char const*, ...)
1000192e:	83 c4 10             	add    esp,0x10
10001931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001934:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000193a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10001941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001944:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000194a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000194d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001953:	88 d1                	mov    cl,dl
10001955:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10001958:	c1 e2 02             	shl    edx,0x2
1000195b:	09 ca                	or     edx,ecx
1000195d:	0f b6 d2             	movzx  edx,dl
10001960:	83 ec 08             	sub    esp,0x8
10001963:	52                   	push   edx
10001964:	50                   	push   eax
10001965:	e8 fc ff ff ff       	call   10001966 <FloppyDrive::seek(int, int)+0x158>	10001966: R_386_PC32	Floppy::writeCommand(unsigned char)
1000196a:	83 c4 10             	add    esp,0x10
1000196d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001970:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001976:	83 ec 0c             	sub    esp,0xc
10001979:	50                   	push   eax
1000197a:	e8 fc ff ff ff       	call   1000197b <FloppyDrive::seek(int, int)+0x16d>	1000197b: R_386_PC32	Floppy::wasFailure()
1000197f:	83 c4 10             	add    esp,0x10
10001982:	84 c0                	test   al,al
10001984:	74 1d                	je     100019a3 <FloppyDrive::seek(int, int)+0x195>
10001986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001989:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000198f:	83 ec 0c             	sub    esp,0xc
10001992:	50                   	push   eax
10001993:	e8 fc ff ff ff       	call   10001994 <FloppyDrive::seek(int, int)+0x186>	10001994: R_386_PC32	Floppy::reset()
10001998:	83 c4 10             	add    esp,0x10
1000199b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000199e:	e9 78 fe ff ff       	jmp    1000181b <FloppyDrive::seek(int, int)+0xd>
100019a3:	83 ec 0c             	sub    esp,0xc
100019a6:	68 c0 5c 00 10       	push   0x10005cc0	100019a7: R_386_32	.text
100019ab:	e8 fc ff ff ff       	call   100019ac <FloppyDrive::seek(int, int)+0x19e>	100019ac: R_386_PC32	Dbg::kprintf(char const*, ...)
100019b0:	83 c4 10             	add    esp,0x10
100019b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019b6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100019bf:	0f b6 d2             	movzx  edx,dl
100019c2:	83 ec 08             	sub    esp,0x8
100019c5:	52                   	push   edx
100019c6:	50                   	push   eax
100019c7:	e8 fc ff ff ff       	call   100019c8 <FloppyDrive::seek(int, int)+0x1ba>	100019c8: R_386_PC32	Floppy::writeCommand(unsigned char)
100019cc:	83 c4 10             	add    esp,0x10
100019cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019d2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019d8:	83 ec 0c             	sub    esp,0xc
100019db:	50                   	push   eax
100019dc:	e8 fc ff ff ff       	call   100019dd <FloppyDrive::seek(int, int)+0x1cf>	100019dd: R_386_PC32	Floppy::wasFailure()
100019e1:	83 c4 10             	add    esp,0x10
100019e4:	84 c0                	test   al,al
100019e6:	74 1d                	je     10001a05 <FloppyDrive::seek(int, int)+0x1f7>
100019e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019eb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019f1:	83 ec 0c             	sub    esp,0xc
100019f4:	50                   	push   eax
100019f5:	e8 fc ff ff ff       	call   100019f6 <FloppyDrive::seek(int, int)+0x1e8>	100019f6: R_386_PC32	Floppy::reset()
100019fa:	83 c4 10             	add    esp,0x10
100019fd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001a00:	e9 16 fe ff ff       	jmp    1000181b <FloppyDrive::seek(int, int)+0xd>
10001a05:	83 ec 0c             	sub    esp,0xc
10001a08:	68 cb 5c 00 10       	push   0x10005ccb	10001a09: R_386_32	.text
10001a0d:	e8 fc ff ff ff       	call   10001a0e <FloppyDrive::seek(int, int)+0x200>	10001a0e: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a12:	83 c4 10             	add    esp,0x10
10001a15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a18:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a1e:	83 ec 08             	sub    esp,0x8
10001a21:	68 dc 05 00 00       	push   0x5dc
10001a26:	50                   	push   eax
10001a27:	e8 fc ff ff ff       	call   10001a28 <FloppyDrive::seek(int, int)+0x21a>	10001a28: R_386_PC32	Floppy::waitIRQ(int)
10001a2c:	83 c4 10             	add    esp,0x10
10001a2f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001a32:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001a35:	83 f0 01             	xor    eax,0x1
10001a38:	84 c0                	test   al,al
10001a3a:	74 2d                	je     10001a69 <FloppyDrive::seek(int, int)+0x25b>
10001a3c:	83 ec 0c             	sub    esp,0xc
10001a3f:	68 d6 5c 00 10       	push   0x10005cd6	10001a40: R_386_32	.text
10001a44:	e8 fc ff ff ff       	call   10001a45 <FloppyDrive::seek(int, int)+0x237>	10001a45: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a49:	83 c4 10             	add    esp,0x10
10001a4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a4f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a55:	83 ec 0c             	sub    esp,0xc
10001a58:	50                   	push   eax
10001a59:	e8 fc ff ff ff       	call   10001a5a <FloppyDrive::seek(int, int)+0x24c>	10001a5a: R_386_PC32	Floppy::reset()
10001a5e:	83 c4 10             	add    esp,0x10
10001a61:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001a64:	e9 b2 fd ff ff       	jmp    1000181b <FloppyDrive::seek(int, int)+0xd>
10001a69:	83 ec 0c             	sub    esp,0xc
10001a6c:	68 e4 5c 00 10       	push   0x10005ce4	10001a6d: R_386_32	.text
10001a71:	e8 fc ff ff ff       	call   10001a72 <FloppyDrive::seek(int, int)+0x264>	10001a72: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a76:	83 c4 10             	add    esp,0x10
10001a79:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
10001a80:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10001a87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a8a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001a90:	83 ec 04             	sub    esp,0x4
10001a93:	8d 55 e8             	lea    edx,[ebp-0x18]
10001a96:	52                   	push   edx
10001a97:	8d 55 ec             	lea    edx,[ebp-0x14]
10001a9a:	52                   	push   edx
10001a9b:	50                   	push   eax
10001a9c:	e8 fc ff ff ff       	call   10001a9d <FloppyDrive::seek(int, int)+0x28f>	10001a9d: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10001aa1:	83 c4 10             	add    esp,0x10
10001aa4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10001aa7:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001aaa:	83 f0 01             	xor    eax,0x1
10001aad:	84 c0                	test   al,al
10001aaf:	74 15                	je     10001ac6 <FloppyDrive::seek(int, int)+0x2b8>
10001ab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ab4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001aba:	83 ec 0c             	sub    esp,0xc
10001abd:	50                   	push   eax
10001abe:	e8 fc ff ff ff       	call   10001abf <FloppyDrive::seek(int, int)+0x2b1>	10001abf: R_386_PC32	Floppy::reset()
10001ac3:	83 c4 10             	add    esp,0x10
10001ac6:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001ac9:	83 f0 01             	xor    eax,0x1
10001acc:	84 c0                	test   al,al
10001ace:	75 08                	jne    10001ad8 <FloppyDrive::seek(int, int)+0x2ca>
10001ad0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001ad3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10001ad6:	74 08                	je     10001ae0 <FloppyDrive::seek(int, int)+0x2d2>
10001ad8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001adb:	e9 3b fd ff ff       	jmp    1000181b <FloppyDrive::seek(int, int)+0xd>
10001ae0:	83 ec 0c             	sub    esp,0xc
10001ae3:	68 ef 5c 00 10       	push   0x10005cef	10001ae4: R_386_32	.text
10001ae8:	e8 fc ff ff ff       	call   10001ae9 <FloppyDrive::seek(int, int)+0x2db>	10001ae9: R_386_PC32	Dbg::kprintf(char const*, ...)
10001aed:	83 c4 10             	add    esp,0x10
10001af0:	83 ec 0c             	sub    esp,0xc
10001af3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001af6:	e8 fc ff ff ff       	call   10001af7 <FloppyDrive::seek(int, int)+0x2e9>	10001af7: R_386_PC32	FloppyDrive::motorOff()
10001afb:	83 c4 10             	add    esp,0x10
10001afe:	83 ec 0c             	sub    esp,0xc
10001b01:	68 fc 5c 00 10       	push   0x10005cfc	10001b02: R_386_32	.text
10001b06:	e8 fc ff ff ff       	call   10001b07 <FloppyDrive::seek(int, int)+0x2f9>	10001b07: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b0b:	83 c4 10             	add    esp,0x10
10001b0e:	83 ec 0c             	sub    esp,0xc
10001b11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001b14:	e8 fc ff ff ff       	call   10001b15 <FloppyDrive::seek(int, int)+0x307>	10001b15: R_386_PC32	FloppyDrive::unselect()
10001b19:	83 c4 10             	add    esp,0x10
10001b1c:	83 ec 0c             	sub    esp,0xc
10001b1f:	68 09 5d 00 10       	push   0x10005d09	10001b20: R_386_32	.text
10001b24:	e8 fc ff ff ff       	call   10001b25 <FloppyDrive::seek(int, int)+0x317>	10001b25: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b29:	83 c4 10             	add    esp,0x10
10001b2c:	b0 01                	mov    al,0x1
10001b2e:	c9                   	leave  
10001b2f:	c3                   	ret    

10001b30 <FloppyDrive::calibrate()>:
10001b30:	55                   	push   ebp
10001b31:	89 e5                	mov    ebp,esp
10001b33:	83 ec 18             	sub    esp,0x18
10001b36:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001b3d:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
10001b41:	7e 25                	jle    10001b68 <FloppyDrive::calibrate()+0x38>
10001b43:	83 ec 0c             	sub    esp,0xc
10001b46:	68 18 5d 00 10       	push   0x10005d18	10001b47: R_386_32	.text
10001b4b:	e8 fc ff ff ff       	call   10001b4c <FloppyDrive::calibrate()+0x1c>	10001b4c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b50:	83 c4 10             	add    esp,0x10
10001b53:	83 ec 0c             	sub    esp,0xc
10001b56:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001b59:	e8 fc ff ff ff       	call   10001b5a <FloppyDrive::calibrate()+0x2a>	10001b5a: R_386_PC32	FloppyDrive::motorOff()
10001b5e:	83 c4 10             	add    esp,0x10
10001b61:	b0 00                	mov    al,0x0
10001b63:	e9 01 02 00 00       	jmp    10001d69 <FloppyDrive::calibrate()+0x239>
10001b68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b6b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001b71:	83 ec 08             	sub    esp,0x8
10001b74:	50                   	push   eax
10001b75:	68 44 5d 00 10       	push   0x10005d44	10001b76: R_386_32	.text
10001b7a:	e8 fc ff ff ff       	call   10001b7b <FloppyDrive::calibrate()+0x4b>	10001b7b: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b7f:	83 c4 10             	add    esp,0x10
10001b82:	83 ec 0c             	sub    esp,0xc
10001b85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001b88:	e8 fc ff ff ff       	call   10001b89 <FloppyDrive::calibrate()+0x59>	10001b89: R_386_PC32	FloppyDrive::motorOn()
10001b8d:	83 c4 10             	add    esp,0x10
10001b90:	83 ec 0c             	sub    esp,0xc
10001b93:	68 52 5d 00 10       	push   0x10005d52	10001b94: R_386_32	.text
10001b98:	e8 fc ff ff ff       	call   10001b99 <FloppyDrive::calibrate()+0x69>	10001b99: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b9d:	83 c4 10             	add    esp,0x10
10001ba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ba3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ba9:	83 ec 08             	sub    esp,0x8
10001bac:	6a 07                	push   0x7
10001bae:	50                   	push   eax
10001baf:	e8 fc ff ff ff       	call   10001bb0 <FloppyDrive::calibrate()+0x80>	10001bb0: R_386_PC32	Floppy::writeCommand(unsigned char)
10001bb4:	83 c4 10             	add    esp,0x10
10001bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bba:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bc0:	83 ec 0c             	sub    esp,0xc
10001bc3:	50                   	push   eax
10001bc4:	e8 fc ff ff ff       	call   10001bc5 <FloppyDrive::calibrate()+0x95>	10001bc5: R_386_PC32	Floppy::wasFailure()
10001bc9:	83 c4 10             	add    esp,0x10
10001bcc:	84 c0                	test   al,al
10001bce:	74 1d                	je     10001bed <FloppyDrive::calibrate()+0xbd>
10001bd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bd3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bd9:	83 ec 0c             	sub    esp,0xc
10001bdc:	50                   	push   eax
10001bdd:	e8 fc ff ff ff       	call   10001bde <FloppyDrive::calibrate()+0xae>	10001bde: R_386_PC32	Floppy::reset()
10001be2:	83 c4 10             	add    esp,0x10
10001be5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001be8:	e9 50 ff ff ff       	jmp    10001b3d <FloppyDrive::calibrate()+0xd>
10001bed:	83 ec 0c             	sub    esp,0xc
10001bf0:	68 5b 5d 00 10       	push   0x10005d5b	10001bf1: R_386_32	.text
10001bf5:	e8 fc ff ff ff       	call   10001bf6 <FloppyDrive::calibrate()+0xc6>	10001bf6: R_386_PC32	Dbg::kprintf(char const*, ...)
10001bfa:	83 c4 10             	add    esp,0x10
10001bfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c00:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c06:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10001c0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c10:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c16:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001c19:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001c1f:	0f b6 d2             	movzx  edx,dl
10001c22:	83 ec 08             	sub    esp,0x8
10001c25:	52                   	push   edx
10001c26:	50                   	push   eax
10001c27:	e8 fc ff ff ff       	call   10001c28 <FloppyDrive::calibrate()+0xf8>	10001c28: R_386_PC32	Floppy::writeCommand(unsigned char)
10001c2c:	83 c4 10             	add    esp,0x10
10001c2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c32:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c38:	83 ec 0c             	sub    esp,0xc
10001c3b:	50                   	push   eax
10001c3c:	e8 fc ff ff ff       	call   10001c3d <FloppyDrive::calibrate()+0x10d>	10001c3d: R_386_PC32	Floppy::wasFailure()
10001c41:	83 c4 10             	add    esp,0x10
10001c44:	84 c0                	test   al,al
10001c46:	74 1d                	je     10001c65 <FloppyDrive::calibrate()+0x135>
10001c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c4b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c51:	83 ec 0c             	sub    esp,0xc
10001c54:	50                   	push   eax
10001c55:	e8 fc ff ff ff       	call   10001c56 <FloppyDrive::calibrate()+0x126>	10001c56: R_386_PC32	Floppy::reset()
10001c5a:	83 c4 10             	add    esp,0x10
10001c5d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001c60:	e9 d8 fe ff ff       	jmp    10001b3d <FloppyDrive::calibrate()+0xd>
10001c65:	83 ec 0c             	sub    esp,0xc
10001c68:	68 64 5d 00 10       	push   0x10005d64	10001c69: R_386_32	.text
10001c6d:	e8 fc ff ff ff       	call   10001c6e <FloppyDrive::calibrate()+0x13e>	10001c6e: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c72:	83 c4 10             	add    esp,0x10
10001c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c78:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c7e:	83 ec 08             	sub    esp,0x8
10001c81:	68 dc 05 00 00       	push   0x5dc
10001c86:	50                   	push   eax
10001c87:	e8 fc ff ff ff       	call   10001c88 <FloppyDrive::calibrate()+0x158>	10001c88: R_386_PC32	Floppy::waitIRQ(int)
10001c8c:	83 c4 10             	add    esp,0x10
10001c8f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001c92:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001c95:	83 f0 01             	xor    eax,0x1
10001c98:	84 c0                	test   al,al
10001c9a:	74 1d                	je     10001cb9 <FloppyDrive::calibrate()+0x189>
10001c9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c9f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ca5:	83 ec 0c             	sub    esp,0xc
10001ca8:	50                   	push   eax
10001ca9:	e8 fc ff ff ff       	call   10001caa <FloppyDrive::calibrate()+0x17a>	10001caa: R_386_PC32	Floppy::reset()
10001cae:	83 c4 10             	add    esp,0x10
10001cb1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001cb4:	e9 84 fe ff ff       	jmp    10001b3d <FloppyDrive::calibrate()+0xd>
10001cb9:	83 ec 0c             	sub    esp,0xc
10001cbc:	68 6d 5d 00 10       	push   0x10005d6d	10001cbd: R_386_32	.text
10001cc1:	e8 fc ff ff ff       	call   10001cc2 <FloppyDrive::calibrate()+0x192>	10001cc2: R_386_PC32	Dbg::kprintf(char const*, ...)
10001cc6:	83 c4 10             	add    esp,0x10
10001cc9:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
10001cd0:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10001cd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cda:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ce0:	83 ec 04             	sub    esp,0x4
10001ce3:	8d 55 e8             	lea    edx,[ebp-0x18]
10001ce6:	52                   	push   edx
10001ce7:	8d 55 ec             	lea    edx,[ebp-0x14]
10001cea:	52                   	push   edx
10001ceb:	50                   	push   eax
10001cec:	e8 fc ff ff ff       	call   10001ced <FloppyDrive::calibrate()+0x1bd>	10001ced: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10001cf1:	83 c4 10             	add    esp,0x10
10001cf4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10001cf7:	83 ec 0c             	sub    esp,0xc
10001cfa:	68 76 5d 00 10       	push   0x10005d76	10001cfb: R_386_32	.text
10001cff:	e8 fc ff ff ff       	call   10001d00 <FloppyDrive::calibrate()+0x1d0>	10001d00: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d04:	83 c4 10             	add    esp,0x10
10001d07:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001d0a:	83 f0 01             	xor    eax,0x1
10001d0d:	84 c0                	test   al,al
10001d0f:	74 15                	je     10001d26 <FloppyDrive::calibrate()+0x1f6>
10001d11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d14:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d1a:	83 ec 0c             	sub    esp,0xc
10001d1d:	50                   	push   eax
10001d1e:	e8 fc ff ff ff       	call   10001d1f <FloppyDrive::calibrate()+0x1ef>	10001d1f: R_386_PC32	Floppy::reset()
10001d23:	83 c4 10             	add    esp,0x10
10001d26:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001d29:	83 f0 01             	xor    eax,0x1
10001d2c:	84 c0                	test   al,al
10001d2e:	75 11                	jne    10001d41 <FloppyDrive::calibrate()+0x211>
10001d30:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001d33:	85 c0                	test   eax,eax
10001d35:	75 0a                	jne    10001d41 <FloppyDrive::calibrate()+0x211>
10001d37:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10001d3a:	83 e0 20             	and    eax,0x20
10001d3d:	85 c0                	test   eax,eax
10001d3f:	75 08                	jne    10001d49 <FloppyDrive::calibrate()+0x219>
10001d41:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001d44:	e9 f4 fd ff ff       	jmp    10001b3d <FloppyDrive::calibrate()+0xd>
10001d49:	83 ec 0c             	sub    esp,0xc
10001d4c:	68 7f 5d 00 10       	push   0x10005d7f	10001d4d: R_386_32	.text
10001d51:	e8 fc ff ff ff       	call   10001d52 <FloppyDrive::calibrate()+0x222>	10001d52: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d56:	83 c4 10             	add    esp,0x10
10001d59:	83 ec 0c             	sub    esp,0xc
10001d5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d5f:	e8 fc ff ff ff       	call   10001d60 <FloppyDrive::calibrate()+0x230>	10001d60: R_386_PC32	FloppyDrive::motorOff()
10001d64:	83 c4 10             	add    esp,0x10
10001d67:	b0 01                	mov    al,0x1
10001d69:	c9                   	leave  
10001d6a:	c3                   	ret    
10001d6b:	90                   	nop

10001d6c <FloppyDrive::doTrack(int, bool, unsigned char*)>:
10001d6c:	55                   	push   ebp
10001d6d:	89 e5                	mov    ebp,esp
10001d6f:	57                   	push   edi
10001d70:	56                   	push   esi
10001d71:	53                   	push   ebx
10001d72:	83 ec 6c             	sub    esp,0x6c
10001d75:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001d78:	88 45 94             	mov    BYTE PTR [ebp-0x6c],al
10001d7b:	80 7d 94 00          	cmp    BYTE PTR [ebp-0x6c],0x0
10001d7f:	74 43                	je     10001dc4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x58>
10001d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d84:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001d8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
10001d90:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001d93:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001d96:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001d99:	c7 45 cc 00 48 00 00 	mov    DWORD PTR [ebp-0x34],0x4800
10001da0:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10001da3:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001da6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001da9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001dac:	8b 4d cc             	mov    ecx,DWORD PTR [ebp-0x34]
10001daf:	89 c6                	mov    esi,eax
10001db1:	89 d7                	mov    edi,edx
10001db3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10001db5:	89 c8                	mov    eax,ecx
10001db7:	89 fa                	mov    edx,edi
10001db9:	89 f3                	mov    ebx,esi
10001dbb:	89 5d c4             	mov    DWORD PTR [ebp-0x3c],ebx
10001dbe:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
10001dc1:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001dc4:	80 7d 94 00          	cmp    BYTE PTR [ebp-0x6c],0x0
10001dc8:	74 07                	je     10001dd1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x65>
10001dca:	b8 c5 00 00 00       	mov    eax,0xc5
10001dcf:	eb 05                	jmp    10001dd6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6a>
10001dd1:	b8 c6 00 00 00       	mov    eax,0xc6
10001dd6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001dd9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10001de0:	83 ec 0c             	sub    esp,0xc
10001de3:	68 88 5d 00 10       	push   0x10005d88	10001de4: R_386_32	.text
10001de8:	e8 fc ff ff ff       	call   10001de9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7d>	10001de9: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ded:	83 c4 10             	add    esp,0x10
10001df0:	83 7d e4 14          	cmp    DWORD PTR [ebp-0x1c],0x14
10001df4:	75 26                	jne    10001e1c <FloppyDrive::doTrack(int, bool, unsigned char*)+0xb0>
10001df6:	83 ec 0c             	sub    esp,0xc
10001df9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001dfc:	e8 fc ff ff ff       	call   10001dfd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x91>	10001dfd: R_386_PC32	FloppyDrive::motorOff()
10001e01:	83 c4 10             	add    esp,0x10
10001e04:	83 ec 0c             	sub    esp,0xc
10001e07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e0a:	e8 fc ff ff ff       	call   10001e0b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x9f>	10001e0b: R_386_PC32	FloppyDrive::unselect()
10001e0f:	83 c4 10             	add    esp,0x10
10001e12:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10001e17:	e9 71 07 00 00       	jmp    1000258d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x821>
10001e1c:	83 ec 0c             	sub    esp,0xc
10001e1f:	68 92 5d 00 10       	push   0x10005d92	10001e20: R_386_32	.text
10001e24:	e8 fc ff ff ff       	call   10001e25 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xb9>	10001e25: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e29:	83 c4 10             	add    esp,0x10
10001e2c:	83 ec 04             	sub    esp,0x4
10001e2f:	6a 00                	push   0x0
10001e31:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001e34:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e37:	e8 fc ff ff ff       	call   10001e38 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xcc>	10001e38: R_386_PC32	FloppyDrive::seek(int, int)
10001e3c:	83 c4 10             	add    esp,0x10
10001e3f:	83 f0 01             	xor    eax,0x1
10001e42:	84 c0                	test   al,al
10001e44:	74 0a                	je     10001e50 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xe4>
10001e46:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001e4b:	e9 3d 07 00 00       	jmp    1000258d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x821>
10001e50:	83 ec 04             	sub    esp,0x4
10001e53:	6a 01                	push   0x1
10001e55:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001e58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e5b:	e8 fc ff ff ff       	call   10001e5c <FloppyDrive::doTrack(int, bool, unsigned char*)+0xf0>	10001e5c: R_386_PC32	FloppyDrive::seek(int, int)
10001e60:	83 c4 10             	add    esp,0x10
10001e63:	83 f0 01             	xor    eax,0x1
10001e66:	84 c0                	test   al,al
10001e68:	74 0a                	je     10001e74 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x108>
10001e6a:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001e6f:	e9 19 07 00 00       	jmp    1000258d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x821>
10001e74:	83 ec 0c             	sub    esp,0xc
10001e77:	68 a2 5d 00 10       	push   0x10005da2	10001e78: R_386_32	.text
10001e7c:	e8 fc ff ff ff       	call   10001e7d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x111>	10001e7d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e81:	83 c4 10             	add    esp,0x10
10001e84:	83 ec 0c             	sub    esp,0xc
10001e87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001e8a:	e8 fc ff ff ff       	call   10001e8b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x11f>	10001e8b: R_386_PC32	FloppyDrive::motorOn()
10001e8f:	83 c4 10             	add    esp,0x10
10001e92:	83 ec 0c             	sub    esp,0xc
10001e95:	68 ae 5d 00 10       	push   0x10005dae	10001e96: R_386_32	.text
10001e9a:	e8 fc ff ff ff       	call   10001e9b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x12f>	10001e9b: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e9f:	83 c4 10             	add    esp,0x10
10001ea2:	83 ec 0c             	sub    esp,0xc
10001ea5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001ea8:	e8 fc ff ff ff       	call   10001ea9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x13d>	10001ea9: R_386_PC32	FloppyDrive::select()
10001ead:	83 c4 10             	add    esp,0x10
10001eb0:	83 ec 0c             	sub    esp,0xc
10001eb3:	68 b9 5d 00 10       	push   0x10005db9	10001eb4: R_386_32	.text
10001eb8:	e8 fc ff ff ff       	call   10001eb9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x14d>	10001eb9: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ebd:	83 c4 10             	add    esp,0x10
10001ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ec3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ec9:	0f b6 55 94          	movzx  edx,BYTE PTR [ebp-0x6c]
10001ecd:	83 ec 08             	sub    esp,0x8
10001ed0:	52                   	push   edx
10001ed1:	50                   	push   eax
10001ed2:	e8 fc ff ff ff       	call   10001ed3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x167>	10001ed3: R_386_PC32	Floppy::dmaInit(bool)
10001ed7:	83 c4 10             	add    esp,0x10
10001eda:	83 ec 0c             	sub    esp,0xc
10001edd:	68 c4 5d 00 10       	push   0x10005dc4	10001ede: R_386_32	.text
10001ee2:	e8 fc ff ff ff       	call   10001ee3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x177>	10001ee3: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ee7:	83 c4 10             	add    esp,0x10
10001eea:	83 ec 0c             	sub    esp,0xc
10001eed:	68 e8 03 00 00       	push   0x3e8
10001ef2:	e8 fc ff ff ff       	call   10001ef3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x187>	10001ef3: R_386_PC32	milliTenthSleep(unsigned int)
10001ef7:	83 c4 10             	add    esp,0x10
10001efa:	83 ec 0c             	sub    esp,0xc
10001efd:	68 d1 5d 00 10       	push   0x10005dd1	10001efe: R_386_32	.text
10001f02:	e8 fc ff ff ff       	call   10001f03 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x197>	10001f03: R_386_PC32	Dbg::kprintf(char const*, ...)
10001f07:	83 c4 10             	add    esp,0x10
10001f0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f0d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f13:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001f16:	0f b6 d2             	movzx  edx,dl
10001f19:	83 ec 08             	sub    esp,0x8
10001f1c:	52                   	push   edx
10001f1d:	50                   	push   eax
10001f1e:	e8 fc ff ff ff       	call   10001f1f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1b3>	10001f1f: R_386_PC32	Floppy::writeCommand(unsigned char)
10001f23:	83 c4 10             	add    esp,0x10
10001f26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f29:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f2f:	83 ec 0c             	sub    esp,0xc
10001f32:	50                   	push   eax
10001f33:	e8 fc ff ff ff       	call   10001f34 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1c8>	10001f34: R_386_PC32	Floppy::wasFailure()
10001f38:	83 c4 10             	add    esp,0x10
10001f3b:	84 c0                	test   al,al
10001f3d:	74 1d                	je     10001f5c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1f0>
10001f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f42:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f48:	83 ec 0c             	sub    esp,0xc
10001f4b:	50                   	push   eax
10001f4c:	e8 fc ff ff ff       	call   10001f4d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1e1>	10001f4d: R_386_PC32	Floppy::reset()
10001f51:	83 c4 10             	add    esp,0x10
10001f54:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001f57:	e9 84 fe ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f5f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f65:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001f68:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001f6e:	0f b6 d2             	movzx  edx,dl
10001f71:	83 ec 08             	sub    esp,0x8
10001f74:	52                   	push   edx
10001f75:	50                   	push   eax
10001f76:	e8 fc ff ff ff       	call   10001f77 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x20b>	10001f77: R_386_PC32	Floppy::writeCommand(unsigned char)
10001f7b:	83 c4 10             	add    esp,0x10
10001f7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f81:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f87:	83 ec 0c             	sub    esp,0xc
10001f8a:	50                   	push   eax
10001f8b:	e8 fc ff ff ff       	call   10001f8c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x220>	10001f8c: R_386_PC32	Floppy::wasFailure()
10001f90:	83 c4 10             	add    esp,0x10
10001f93:	84 c0                	test   al,al
10001f95:	74 1d                	je     10001fb4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x248>
10001f97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f9a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fa0:	83 ec 0c             	sub    esp,0xc
10001fa3:	50                   	push   eax
10001fa4:	e8 fc ff ff ff       	call   10001fa5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x239>	10001fa5: R_386_PC32	Floppy::reset()
10001fa9:	83 c4 10             	add    esp,0x10
10001fac:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001faf:	e9 2c fe ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001fb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fb7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fbd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001fc0:	0f b6 d2             	movzx  edx,dl
10001fc3:	83 ec 08             	sub    esp,0x8
10001fc6:	52                   	push   edx
10001fc7:	50                   	push   eax
10001fc8:	e8 fc ff ff ff       	call   10001fc9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x25d>	10001fc9: R_386_PC32	Floppy::writeCommand(unsigned char)
10001fcd:	83 c4 10             	add    esp,0x10
10001fd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fd3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fd9:	83 ec 0c             	sub    esp,0xc
10001fdc:	50                   	push   eax
10001fdd:	e8 fc ff ff ff       	call   10001fde <FloppyDrive::doTrack(int, bool, unsigned char*)+0x272>	10001fde: R_386_PC32	Floppy::wasFailure()
10001fe2:	83 c4 10             	add    esp,0x10
10001fe5:	84 c0                	test   al,al
10001fe7:	74 1d                	je     10002006 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x29a>
10001fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fec:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ff2:	83 ec 0c             	sub    esp,0xc
10001ff5:	50                   	push   eax
10001ff6:	e8 fc ff ff ff       	call   10001ff7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x28b>	10001ff7: R_386_PC32	Floppy::reset()
10001ffb:	83 c4 10             	add    esp,0x10
10001ffe:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002001:	e9 da fd ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002009:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000200f:	83 ec 08             	sub    esp,0x8
10002012:	6a 00                	push   0x0
10002014:	50                   	push   eax
10002015:	e8 fc ff ff ff       	call   10002016 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2aa>	10002016: R_386_PC32	Floppy::writeCommand(unsigned char)
1000201a:	83 c4 10             	add    esp,0x10
1000201d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002020:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002026:	83 ec 0c             	sub    esp,0xc
10002029:	50                   	push   eax
1000202a:	e8 fc ff ff ff       	call   1000202b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2bf>	1000202b: R_386_PC32	Floppy::wasFailure()
1000202f:	83 c4 10             	add    esp,0x10
10002032:	84 c0                	test   al,al
10002034:	74 1d                	je     10002053 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2e7>
10002036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002039:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000203f:	83 ec 0c             	sub    esp,0xc
10002042:	50                   	push   eax
10002043:	e8 fc ff ff ff       	call   10002044 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2d8>	10002044: R_386_PC32	Floppy::reset()
10002048:	83 c4 10             	add    esp,0x10
1000204b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000204e:	e9 8d fd ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002056:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000205c:	83 ec 08             	sub    esp,0x8
1000205f:	6a 01                	push   0x1
10002061:	50                   	push   eax
10002062:	e8 fc ff ff ff       	call   10002063 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2f7>	10002063: R_386_PC32	Floppy::writeCommand(unsigned char)
10002067:	83 c4 10             	add    esp,0x10
1000206a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000206d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002073:	83 ec 0c             	sub    esp,0xc
10002076:	50                   	push   eax
10002077:	e8 fc ff ff ff       	call   10002078 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x30c>	10002078: R_386_PC32	Floppy::wasFailure()
1000207c:	83 c4 10             	add    esp,0x10
1000207f:	84 c0                	test   al,al
10002081:	74 1d                	je     100020a0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x334>
10002083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002086:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000208c:	83 ec 0c             	sub    esp,0xc
1000208f:	50                   	push   eax
10002090:	e8 fc ff ff ff       	call   10002091 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x325>	10002091: R_386_PC32	Floppy::reset()
10002095:	83 c4 10             	add    esp,0x10
10002098:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000209b:	e9 40 fd ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100020a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020a3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020a9:	83 ec 08             	sub    esp,0x8
100020ac:	6a 02                	push   0x2
100020ae:	50                   	push   eax
100020af:	e8 fc ff ff ff       	call   100020b0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x344>	100020b0: R_386_PC32	Floppy::writeCommand(unsigned char)
100020b4:	83 c4 10             	add    esp,0x10
100020b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ba:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020c0:	83 ec 0c             	sub    esp,0xc
100020c3:	50                   	push   eax
100020c4:	e8 fc ff ff ff       	call   100020c5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x359>	100020c5: R_386_PC32	Floppy::wasFailure()
100020c9:	83 c4 10             	add    esp,0x10
100020cc:	84 c0                	test   al,al
100020ce:	74 1d                	je     100020ed <FloppyDrive::doTrack(int, bool, unsigned char*)+0x381>
100020d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020d3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020d9:	83 ec 0c             	sub    esp,0xc
100020dc:	50                   	push   eax
100020dd:	e8 fc ff ff ff       	call   100020de <FloppyDrive::doTrack(int, bool, unsigned char*)+0x372>	100020de: R_386_PC32	Floppy::reset()
100020e2:	83 c4 10             	add    esp,0x10
100020e5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100020e8:	e9 f3 fc ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100020ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020f0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020f6:	83 ec 08             	sub    esp,0x8
100020f9:	6a 12                	push   0x12
100020fb:	50                   	push   eax
100020fc:	e8 fc ff ff ff       	call   100020fd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x391>	100020fd: R_386_PC32	Floppy::writeCommand(unsigned char)
10002101:	83 c4 10             	add    esp,0x10
10002104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002107:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000210d:	83 ec 0c             	sub    esp,0xc
10002110:	50                   	push   eax
10002111:	e8 fc ff ff ff       	call   10002112 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3a6>	10002112: R_386_PC32	Floppy::wasFailure()
10002116:	83 c4 10             	add    esp,0x10
10002119:	84 c0                	test   al,al
1000211b:	74 1d                	je     1000213a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3ce>
1000211d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002120:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002126:	83 ec 0c             	sub    esp,0xc
10002129:	50                   	push   eax
1000212a:	e8 fc ff ff ff       	call   1000212b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3bf>	1000212b: R_386_PC32	Floppy::reset()
1000212f:	83 c4 10             	add    esp,0x10
10002132:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002135:	e9 a6 fc ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000213a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000213d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002143:	83 ec 08             	sub    esp,0x8
10002146:	6a 1b                	push   0x1b
10002148:	50                   	push   eax
10002149:	e8 fc ff ff ff       	call   1000214a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3de>	1000214a: R_386_PC32	Floppy::writeCommand(unsigned char)
1000214e:	83 c4 10             	add    esp,0x10
10002151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002154:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000215a:	83 ec 0c             	sub    esp,0xc
1000215d:	50                   	push   eax
1000215e:	e8 fc ff ff ff       	call   1000215f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3f3>	1000215f: R_386_PC32	Floppy::wasFailure()
10002163:	83 c4 10             	add    esp,0x10
10002166:	84 c0                	test   al,al
10002168:	74 1d                	je     10002187 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x41b>
1000216a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000216d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002173:	83 ec 0c             	sub    esp,0xc
10002176:	50                   	push   eax
10002177:	e8 fc ff ff ff       	call   10002178 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x40c>	10002178: R_386_PC32	Floppy::reset()
1000217c:	83 c4 10             	add    esp,0x10
1000217f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002182:	e9 59 fc ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000218a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002190:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10002197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000219a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021a0:	83 ec 08             	sub    esp,0x8
100021a3:	68 ff 00 00 00       	push   0xff
100021a8:	50                   	push   eax
100021a9:	e8 fc ff ff ff       	call   100021aa <FloppyDrive::doTrack(int, bool, unsigned char*)+0x43e>	100021aa: R_386_PC32	Floppy::writeCommand(unsigned char)
100021ae:	83 c4 10             	add    esp,0x10
100021b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021b4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021ba:	83 ec 0c             	sub    esp,0xc
100021bd:	50                   	push   eax
100021be:	e8 fc ff ff ff       	call   100021bf <FloppyDrive::doTrack(int, bool, unsigned char*)+0x453>	100021bf: R_386_PC32	Floppy::wasFailure()
100021c3:	83 c4 10             	add    esp,0x10
100021c6:	84 c0                	test   al,al
100021c8:	74 1d                	je     100021e7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x47b>
100021ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021cd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021d3:	83 ec 0c             	sub    esp,0xc
100021d6:	50                   	push   eax
100021d7:	e8 fc ff ff ff       	call   100021d8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x46c>	100021d8: R_386_PC32	Floppy::reset()
100021dc:	83 c4 10             	add    esp,0x10
100021df:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100021e2:	e9 f9 fb ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100021e7:	83 ec 0c             	sub    esp,0xc
100021ea:	68 dd 5d 00 10       	push   0x10005ddd	100021eb: R_386_32	.text
100021ef:	e8 fc ff ff ff       	call   100021f0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x484>	100021f0: R_386_PC32	Dbg::kprintf(char const*, ...)
100021f4:	83 c4 10             	add    esp,0x10
100021f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021fa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002200:	83 ec 08             	sub    esp,0x8
10002203:	68 e8 03 00 00       	push   0x3e8
10002208:	50                   	push   eax
10002209:	e8 fc ff ff ff       	call   1000220a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x49e>	1000220a: R_386_PC32	Floppy::waitIRQ(int)
1000220e:	83 c4 10             	add    esp,0x10
10002211:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
10002214:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
10002217:	83 f0 01             	xor    eax,0x1
1000221a:	84 c0                	test   al,al
1000221c:	74 2d                	je     1000224b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4df>
1000221e:	83 ec 0c             	sub    esp,0xc
10002221:	68 f0 5d 00 10       	push   0x10005df0	10002222: R_386_32	.text
10002226:	e8 fc ff ff ff       	call   10002227 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4bb>	10002227: R_386_PC32	Dbg::kprintf(char const*, ...)
1000222b:	83 c4 10             	add    esp,0x10
1000222e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002231:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002237:	83 ec 0c             	sub    esp,0xc
1000223a:	50                   	push   eax
1000223b:	e8 fc ff ff ff       	call   1000223c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4d0>	1000223c: R_386_PC32	Floppy::reset()
10002240:	83 c4 10             	add    esp,0x10
10002243:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002246:	e9 95 fb ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000224b:	83 ec 0c             	sub    esp,0xc
1000224e:	68 f9 5d 00 10       	push   0x10005df9	1000224f: R_386_32	.text
10002253:	e8 fc ff ff ff       	call   10002254 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4e8>	10002254: R_386_PC32	Dbg::kprintf(char const*, ...)
10002258:	83 c4 10             	add    esp,0x10
1000225b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000225e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002264:	83 ec 0c             	sub    esp,0xc
10002267:	50                   	push   eax
10002268:	e8 fc ff ff ff       	call   10002269 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4fd>	10002269: R_386_PC32	Floppy::readData()
1000226d:	83 c4 10             	add    esp,0x10
10002270:	88 45 de             	mov    BYTE PTR [ebp-0x22],al
10002273:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002276:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000227c:	83 ec 0c             	sub    esp,0xc
1000227f:	50                   	push   eax
10002280:	e8 fc ff ff ff       	call   10002281 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x515>	10002281: R_386_PC32	Floppy::wasFailure()
10002285:	83 c4 10             	add    esp,0x10
10002288:	84 c0                	test   al,al
1000228a:	74 2d                	je     100022b9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x54d>
1000228c:	83 ec 0c             	sub    esp,0xc
1000228f:	68 03 5e 00 10       	push   0x10005e03	10002290: R_386_32	.text
10002294:	e8 fc ff ff ff       	call   10002295 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x529>	10002295: R_386_PC32	Dbg::kprintf(char const*, ...)
10002299:	83 c4 10             	add    esp,0x10
1000229c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000229f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022a5:	83 ec 0c             	sub    esp,0xc
100022a8:	50                   	push   eax
100022a9:	e8 fc ff ff ff       	call   100022aa <FloppyDrive::doTrack(int, bool, unsigned char*)+0x53e>	100022aa: R_386_PC32	Floppy::reset()
100022ae:	83 c4 10             	add    esp,0x10
100022b1:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100022b4:	e9 27 fb ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100022b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022bc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022c2:	83 ec 0c             	sub    esp,0xc
100022c5:	50                   	push   eax
100022c6:	e8 fc ff ff ff       	call   100022c7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x55b>	100022c7: R_386_PC32	Floppy::readData()
100022cb:	83 c4 10             	add    esp,0x10
100022ce:	88 45 dd             	mov    BYTE PTR [ebp-0x23],al
100022d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022d4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022da:	83 ec 0c             	sub    esp,0xc
100022dd:	50                   	push   eax
100022de:	e8 fc ff ff ff       	call   100022df <FloppyDrive::doTrack(int, bool, unsigned char*)+0x573>	100022df: R_386_PC32	Floppy::wasFailure()
100022e3:	83 c4 10             	add    esp,0x10
100022e6:	84 c0                	test   al,al
100022e8:	74 2d                	je     10002317 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5ab>
100022ea:	83 ec 0c             	sub    esp,0xc
100022ed:	68 03 5e 00 10       	push   0x10005e03	100022ee: R_386_32	.text
100022f2:	e8 fc ff ff ff       	call   100022f3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x587>	100022f3: R_386_PC32	Dbg::kprintf(char const*, ...)
100022f7:	83 c4 10             	add    esp,0x10
100022fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022fd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002303:	83 ec 0c             	sub    esp,0xc
10002306:	50                   	push   eax
10002307:	e8 fc ff ff ff       	call   10002308 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x59c>	10002308: R_386_PC32	Floppy::reset()
1000230c:	83 c4 10             	add    esp,0x10
1000230f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002312:	e9 c9 fa ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002317:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000231a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002320:	83 ec 0c             	sub    esp,0xc
10002323:	50                   	push   eax
10002324:	e8 fc ff ff ff       	call   10002325 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5b9>	10002325: R_386_PC32	Floppy::readData()
10002329:	83 c4 10             	add    esp,0x10
1000232c:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
1000232f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002332:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002338:	83 ec 0c             	sub    esp,0xc
1000233b:	50                   	push   eax
1000233c:	e8 fc ff ff ff       	call   1000233d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5d1>	1000233d: R_386_PC32	Floppy::wasFailure()
10002341:	83 c4 10             	add    esp,0x10
10002344:	84 c0                	test   al,al
10002346:	74 2d                	je     10002375 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x609>
10002348:	83 ec 0c             	sub    esp,0xc
1000234b:	68 03 5e 00 10       	push   0x10005e03	1000234c: R_386_32	.text
10002350:	e8 fc ff ff ff       	call   10002351 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5e5>	10002351: R_386_PC32	Dbg::kprintf(char const*, ...)
10002355:	83 c4 10             	add    esp,0x10
10002358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000235b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002361:	83 ec 0c             	sub    esp,0xc
10002364:	50                   	push   eax
10002365:	e8 fc ff ff ff       	call   10002366 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5fa>	10002366: R_386_PC32	Floppy::reset()
1000236a:	83 c4 10             	add    esp,0x10
1000236d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002370:	e9 6b fa ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002378:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000237e:	83 ec 0c             	sub    esp,0xc
10002381:	50                   	push   eax
10002382:	e8 fc ff ff ff       	call   10002383 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x617>	10002383: R_386_PC32	Floppy::readData()
10002387:	83 c4 10             	add    esp,0x10
1000238a:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
1000238d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002390:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002396:	83 ec 0c             	sub    esp,0xc
10002399:	50                   	push   eax
1000239a:	e8 fc ff ff ff       	call   1000239b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x62f>	1000239b: R_386_PC32	Floppy::wasFailure()
1000239f:	83 c4 10             	add    esp,0x10
100023a2:	84 c0                	test   al,al
100023a4:	74 2d                	je     100023d3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x667>
100023a6:	83 ec 0c             	sub    esp,0xc
100023a9:	68 03 5e 00 10       	push   0x10005e03	100023aa: R_386_32	.text
100023ae:	e8 fc ff ff ff       	call   100023af <FloppyDrive::doTrack(int, bool, unsigned char*)+0x643>	100023af: R_386_PC32	Dbg::kprintf(char const*, ...)
100023b3:	83 c4 10             	add    esp,0x10
100023b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023b9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023bf:	83 ec 0c             	sub    esp,0xc
100023c2:	50                   	push   eax
100023c3:	e8 fc ff ff ff       	call   100023c4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x658>	100023c4: R_386_PC32	Floppy::reset()
100023c8:	83 c4 10             	add    esp,0x10
100023cb:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100023ce:	e9 0d fa ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100023d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023d6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023dc:	83 ec 0c             	sub    esp,0xc
100023df:	50                   	push   eax
100023e0:	e8 fc ff ff ff       	call   100023e1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x675>	100023e1: R_386_PC32	Floppy::readData()
100023e5:	83 c4 10             	add    esp,0x10
100023e8:	88 45 da             	mov    BYTE PTR [ebp-0x26],al
100023eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023ee:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023f4:	83 ec 0c             	sub    esp,0xc
100023f7:	50                   	push   eax
100023f8:	e8 fc ff ff ff       	call   100023f9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x68d>	100023f9: R_386_PC32	Floppy::wasFailure()
100023fd:	83 c4 10             	add    esp,0x10
10002400:	84 c0                	test   al,al
10002402:	74 2d                	je     10002431 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6c5>
10002404:	83 ec 0c             	sub    esp,0xc
10002407:	68 03 5e 00 10       	push   0x10005e03	10002408: R_386_32	.text
1000240c:	e8 fc ff ff ff       	call   1000240d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6a1>	1000240d: R_386_PC32	Dbg::kprintf(char const*, ...)
10002411:	83 c4 10             	add    esp,0x10
10002414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002417:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000241d:	83 ec 0c             	sub    esp,0xc
10002420:	50                   	push   eax
10002421:	e8 fc ff ff ff       	call   10002422 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6b6>	10002422: R_386_PC32	Floppy::reset()
10002426:	83 c4 10             	add    esp,0x10
10002429:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000242c:	e9 af f9 ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002434:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000243a:	83 ec 0c             	sub    esp,0xc
1000243d:	50                   	push   eax
1000243e:	e8 fc ff ff ff       	call   1000243f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6d3>	1000243f: R_386_PC32	Floppy::readData()
10002443:	83 c4 10             	add    esp,0x10
10002446:	88 45 d9             	mov    BYTE PTR [ebp-0x27],al
10002449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000244c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002452:	83 ec 0c             	sub    esp,0xc
10002455:	50                   	push   eax
10002456:	e8 fc ff ff ff       	call   10002457 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6eb>	10002457: R_386_PC32	Floppy::wasFailure()
1000245b:	83 c4 10             	add    esp,0x10
1000245e:	84 c0                	test   al,al
10002460:	74 2d                	je     1000248f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x723>
10002462:	83 ec 0c             	sub    esp,0xc
10002465:	68 03 5e 00 10       	push   0x10005e03	10002466: R_386_32	.text
1000246a:	e8 fc ff ff ff       	call   1000246b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6ff>	1000246b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000246f:	83 c4 10             	add    esp,0x10
10002472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002475:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000247b:	83 ec 0c             	sub    esp,0xc
1000247e:	50                   	push   eax
1000247f:	e8 fc ff ff ff       	call   10002480 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x714>	10002480: R_386_PC32	Floppy::reset()
10002484:	83 c4 10             	add    esp,0x10
10002487:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000248a:	e9 51 f9 ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000248f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002492:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002498:	83 ec 0c             	sub    esp,0xc
1000249b:	50                   	push   eax
1000249c:	e8 fc ff ff ff       	call   1000249d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x731>	1000249d: R_386_PC32	Floppy::readData()
100024a1:	83 c4 10             	add    esp,0x10
100024a4:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
100024a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024aa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100024b0:	83 ec 0c             	sub    esp,0xc
100024b3:	50                   	push   eax
100024b4:	e8 fc ff ff ff       	call   100024b5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x749>	100024b5: R_386_PC32	Floppy::wasFailure()
100024b9:	83 c4 10             	add    esp,0x10
100024bc:	84 c0                	test   al,al
100024be:	74 2d                	je     100024ed <FloppyDrive::doTrack(int, bool, unsigned char*)+0x781>
100024c0:	83 ec 0c             	sub    esp,0xc
100024c3:	68 03 5e 00 10       	push   0x10005e03	100024c4: R_386_32	.text
100024c8:	e8 fc ff ff ff       	call   100024c9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x75d>	100024c9: R_386_PC32	Dbg::kprintf(char const*, ...)
100024cd:	83 c4 10             	add    esp,0x10
100024d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024d3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100024d9:	83 ec 0c             	sub    esp,0xc
100024dc:	50                   	push   eax
100024dd:	e8 fc ff ff ff       	call   100024de <FloppyDrive::doTrack(int, bool, unsigned char*)+0x772>	100024de: R_386_PC32	Floppy::reset()
100024e2:	83 c4 10             	add    esp,0x10
100024e5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100024e8:	e9 f3 f8 ff ff       	jmp    10001de0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100024ed:	83 ec 0c             	sub    esp,0xc
100024f0:	68 1c 5e 00 10       	push   0x10005e1c	100024f1: R_386_32	.text
100024f5:	e8 fc ff ff ff       	call   100024f6 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x78a>	100024f6: R_386_PC32	Dbg::kprintf(char const*, ...)
100024fa:	83 c4 10             	add    esp,0x10
100024fd:	83 ec 0c             	sub    esp,0xc
10002500:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002503:	e8 fc ff ff ff       	call   10002504 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x798>	10002504: R_386_PC32	FloppyDrive::motorOff()
10002508:	83 c4 10             	add    esp,0x10
1000250b:	83 ec 0c             	sub    esp,0xc
1000250e:	68 30 5e 00 10       	push   0x10005e30	1000250f: R_386_32	.text
10002513:	e8 fc ff ff ff       	call   10002514 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7a8>	10002514: R_386_PC32	Dbg::kprintf(char const*, ...)
10002518:	83 c4 10             	add    esp,0x10
1000251b:	83 ec 0c             	sub    esp,0xc
1000251e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002521:	e8 fc ff ff ff       	call   10002522 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7b6>	10002522: R_386_PC32	FloppyDrive::unselect()
10002526:	83 c4 10             	add    esp,0x10
10002529:	83 ec 0c             	sub    esp,0xc
1000252c:	68 3b 5e 00 10       	push   0x10005e3b	1000252d: R_386_32	.text
10002531:	e8 fc ff ff ff       	call   10002532 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7c6>	10002532: R_386_PC32	Dbg::kprintf(char const*, ...)
10002536:	83 c4 10             	add    esp,0x10
10002539:	8a 45 94             	mov    al,BYTE PTR [ebp-0x6c]
1000253c:	83 f0 01             	xor    eax,0x1
1000253f:	84 c0                	test   al,al
10002541:	74 45                	je     10002588 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x81c>
10002543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002546:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000254c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
10002552:	89 c2                	mov    edx,eax
10002554:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10002557:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
1000255a:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
1000255d:	c7 45 b0 00 48 00 00 	mov    DWORD PTR [ebp-0x50],0x4800
10002564:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002567:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
1000256a:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
1000256d:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10002570:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10002573:	89 c6                	mov    esi,eax
10002575:	89 d7                	mov    edi,edx
10002577:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002579:	89 c8                	mov    eax,ecx
1000257b:	89 fa                	mov    edx,edi
1000257d:	89 f3                	mov    ebx,esi
1000257f:	89 5d a8             	mov    DWORD PTR [ebp-0x58],ebx
10002582:	89 55 a4             	mov    DWORD PTR [ebp-0x5c],edx
10002585:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10002588:	b8 00 00 00 00       	mov    eax,0x0
1000258d:	8d 65 f4             	lea    esp,[ebp-0xc]
10002590:	5b                   	pop    ebx
10002591:	5e                   	pop    esi
10002592:	5f                   	pop    edi
10002593:	5d                   	pop    ebp
10002594:	c3                   	ret    
10002595:	90                   	nop

10002596 <FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)>:
10002596:	55                   	push   ebp
10002597:	89 e5                	mov    ebp,esp
10002599:	83 ec 10             	sub    esp,0x10
1000259c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000259f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100025a5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100025a8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100025ae:	83 c2 64             	add    edx,0x64
100025b1:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
100025b5:	89 d0                	mov    eax,edx
100025b7:	c1 e0 02             	shl    eax,0x2
100025ba:	01 d0                	add    eax,edx
100025bc:	c1 e0 02             	shl    eax,0x2
100025bf:	01 d0                	add    eax,edx
100025c1:	05 13 00 00 00       	add    eax,0x13	100025c2: R_386_32	floppyTable
100025c6:	8a 00                	mov    al,BYTE PTR [eax]
100025c8:	0f b6 c0             	movzx  eax,al
100025cb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100025ce:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100025d1:	01 c0                	add    eax,eax
100025d3:	89 c1                	mov    ecx,eax
100025d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100025d8:	ba 00 00 00 00       	mov    edx,0x0
100025dd:	f7 f1                	div    ecx
100025df:	89 c2                	mov    edx,eax
100025e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100025e4:	89 10                	mov    DWORD PTR [eax],edx
100025e6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100025e9:	01 c0                	add    eax,eax
100025eb:	89 c1                	mov    ecx,eax
100025ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100025f0:	ba 00 00 00 00       	mov    edx,0x0
100025f5:	f7 f1                	div    ecx
100025f7:	89 d0                	mov    eax,edx
100025f9:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
100025fc:	ba 00 00 00 00       	mov    edx,0x0
10002601:	f7 f1                	div    ecx
10002603:	89 c2                	mov    edx,eax
10002605:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10002608:	89 10                	mov    DWORD PTR [eax],edx
1000260a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000260d:	01 c0                	add    eax,eax
1000260f:	89 c1                	mov    ecx,eax
10002611:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002614:	ba 00 00 00 00       	mov    edx,0x0
10002619:	f7 f1                	div    ecx
1000261b:	89 d0                	mov    eax,edx
1000261d:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
10002620:	ba 00 00 00 00       	mov    edx,0x0
10002625:	f7 f1                	div    ecx
10002627:	89 d0                	mov    eax,edx
10002629:	40                   	inc    eax
1000262a:	89 c2                	mov    edx,eax
1000262c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000262f:	89 10                	mov    DWORD PTR [eax],edx
10002631:	90                   	nop
10002632:	c9                   	leave  
10002633:	c3                   	ret    

10002634 <FloppyDrive::eject()>:
10002634:	55                   	push   ebp
10002635:	89 e5                	mov    ebp,esp
10002637:	57                   	push   edi
10002638:	56                   	push   esi
10002639:	53                   	push   ebx
1000263a:	83 ec 2c             	sub    esp,0x2c
1000263d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002640:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10002646:	83 ec 0c             	sub    esp,0xc
10002649:	50                   	push   eax
1000264a:	e8 fc ff ff ff       	call   1000264b <FloppyDrive::eject()+0x17>	1000264b: R_386_PC32	VCache::writeWriteBuffer()
1000264f:	83 c4 10             	add    esp,0x10
10002652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002655:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000265b:	83 ec 0c             	sub    esp,0xc
1000265e:	50                   	push   eax
1000265f:	e8 fc ff ff ff       	call   10002660 <FloppyDrive::eject()+0x2c>	10002660: R_386_PC32	VCache::invalidateReadBuffer()
10002664:	83 c4 10             	add    esp,0x10
10002667:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10002669: R_386_32	hasCyl0Bf
1000266e:	c7 05 00 00 00 00 ff ff ff ff 	mov    DWORD PTR ds:0x0,0xffffffff	10002670: R_386_32	_TEMP_cyl
10002678:	a1 00 00 00 00       	mov    eax,ds:0x0	10002679: R_386_32	_TEMP_trackBuffer
1000267d:	83 ec 04             	sub    esp,0x4
10002680:	68 00 48 00 00       	push   0x4800
10002685:	6a 00                	push   0x0
10002687:	50                   	push   eax
10002688:	e8 fc ff ff ff       	call   10002689 <FloppyDrive::eject()+0x55>	10002689: R_386_PC32	memset
1000268d:	83 c4 10             	add    esp,0x10
10002690:	a1 00 00 00 00       	mov    eax,ds:0x0	10002691: R_386_32	_TEMP_cylinder0_bf
10002695:	83 ec 04             	sub    esp,0x4
10002698:	68 00 48 00 00       	push   0x4800
1000269d:	6a 00                	push   0x0
1000269f:	50                   	push   eax
100026a0:	e8 fc ff ff ff       	call   100026a1 <FloppyDrive::eject()+0x6d>	100026a1: R_386_PC32	memset
100026a5:	83 c4 10             	add    esp,0x10
100026a8:	a1 00 00 00 00       	mov    eax,ds:0x0	100026a9: R_386_32	_TEMP_write_bf
100026ad:	83 ec 04             	sub    esp,0x4
100026b0:	68 00 48 00 00       	push   0x4800
100026b5:	6a 00                	push   0x0
100026b7:	50                   	push   eax
100026b8:	e8 fc ff ff ff       	call   100026b9 <FloppyDrive::eject()+0x85>	100026b9: R_386_PC32	memset
100026bd:	83 c4 10             	add    esp,0x10
100026c0:	8d 45 ce             	lea    eax,[ebp-0x32]
100026c3:	bb 46 5e 00 10       	mov    ebx,0x10005e46	100026c4: R_386_32	.text
100026c8:	ba 1a 00 00 00       	mov    edx,0x1a
100026cd:	89 c7                	mov    edi,eax
100026cf:	89 de                	mov    esi,ebx
100026d1:	89 d1                	mov    ecx,edx
100026d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100026d5:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100026d7: R_386_32	activeTerminal
100026db:	a1 00 00 00 00       	mov    eax,ds:0x0	100026dc: R_386_32	activeTerminal
100026e0:	8b 00                	mov    eax,DWORD PTR [eax]
100026e2:	83 c0 10             	add    eax,0x10
100026e5:	8b 00                	mov    eax,DWORD PTR [eax]
100026e7:	83 ec 0c             	sub    esp,0xc
100026ea:	8d 4d c8             	lea    ecx,[ebp-0x38]
100026ed:	51                   	push   ecx
100026ee:	8d 4d ce             	lea    ecx,[ebp-0x32]
100026f1:	51                   	push   ecx
100026f2:	6a 00                	push   0x0
100026f4:	6a 1a                	push   0x1a
100026f6:	52                   	push   edx
100026f7:	ff d0                	call   eax
100026f9:	83 c4 20             	add    esp,0x20
100026fc:	b8 00 00 00 00       	mov    eax,0x0
10002701:	8d 65 f4             	lea    esp,[ebp-0xc]
10002704:	5b                   	pop    ebx
10002705:	5e                   	pop    esi
10002706:	5f                   	pop    edi
10002707:	5d                   	pop    ebp
10002708:	c3                   	ret    
10002709:	90                   	nop

1000270a <FloppyDrive::read(unsigned long long, int, void*)>:
1000270a:	55                   	push   ebp
1000270b:	89 e5                	mov    ebp,esp
1000270d:	57                   	push   edi
1000270e:	56                   	push   esi
1000270f:	53                   	push   ebx
10002710:	83 ec 6c             	sub    esp,0x6c
10002713:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002716:	89 45 90             	mov    DWORD PTR [ebp-0x70],eax
10002719:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000271c:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
1000271f:	a0 00 00 00 00       	mov    al,ds:0x0	10002720: R_386_32	_TEMP_allocated
10002724:	83 f0 01             	xor    eax,0x1
10002727:	84 c0                	test   al,al
10002729:	74 46                	je     10002771 <FloppyDrive::read(unsigned long long, int, void*)+0x67>
1000272b:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	1000272d: R_386_32	_TEMP_allocated
10002732:	83 ec 0c             	sub    esp,0xc
10002735:	68 00 48 00 00       	push   0x4800
1000273a:	e8 fc ff ff ff       	call   1000273b <FloppyDrive::read(unsigned long long, int, void*)+0x31>	1000273b: R_386_PC32	malloc
1000273f:	83 c4 10             	add    esp,0x10
10002742:	a3 00 00 00 00       	mov    ds:0x0,eax	10002743: R_386_32	_TEMP_trackBuffer
10002747:	83 ec 0c             	sub    esp,0xc
1000274a:	68 00 48 00 00       	push   0x4800
1000274f:	e8 fc ff ff ff       	call   10002750 <FloppyDrive::read(unsigned long long, int, void*)+0x46>	10002750: R_386_PC32	malloc
10002754:	83 c4 10             	add    esp,0x10
10002757:	a3 00 00 00 00       	mov    ds:0x0,eax	10002758: R_386_32	_TEMP_cylinder0_bf
1000275c:	83 ec 0c             	sub    esp,0xc
1000275f:	68 00 48 00 00       	push   0x4800
10002764:	e8 fc ff ff ff       	call   10002765 <FloppyDrive::read(unsigned long long, int, void*)+0x5b>	10002765: R_386_PC32	malloc
10002769:	83 c4 10             	add    esp,0x10
1000276c:	a3 00 00 00 00       	mov    ds:0x0,eax	1000276d: R_386_32	_TEMP_write_bf
10002771:	83 7d 14 01          	cmp    DWORD PTR [ebp+0x14],0x1
10002775:	74 10                	je     10002787 <FloppyDrive::read(unsigned long long, int, void*)+0x7d>
10002777:	83 ec 0c             	sub    esp,0xc
1000277a:	68 60 5e 00 10       	push   0x10005e60	1000277b: R_386_32	.text
1000277f:	e8 fc ff ff ff       	call   10002780 <FloppyDrive::read(unsigned long long, int, void*)+0x76>	10002780: R_386_PC32	Krnl::panic(char const*)
10002784:	83 c4 10             	add    esp,0x10
10002787:	83 ec 0c             	sub    esp,0xc
1000278a:	68 78 5e 00 10       	push   0x10005e78	1000278b: R_386_32	.text
1000278f:	e8 fc ff ff ff       	call   10002790 <FloppyDrive::read(unsigned long long, int, void*)+0x86>	10002790: R_386_PC32	Dbg::kprintf(char const*, ...)
10002794:	83 c4 10             	add    esp,0x10
10002797:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
1000279a:	83 ec 0c             	sub    esp,0xc
1000279d:	8d 55 a0             	lea    edx,[ebp-0x60]
100027a0:	52                   	push   edx
100027a1:	8d 55 a4             	lea    edx,[ebp-0x5c]
100027a4:	52                   	push   edx
100027a5:	8d 55 a8             	lea    edx,[ebp-0x58]
100027a8:	52                   	push   edx
100027a9:	50                   	push   eax
100027aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100027ad:	e8 fc ff ff ff       	call   100027ae <FloppyDrive::read(unsigned long long, int, void*)+0xa4>	100027ae: R_386_PC32	FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)
100027b2:	83 c4 20             	add    esp,0x20
100027b5:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
100027b8:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
100027bb:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
100027be:	51                   	push   ecx
100027bf:	52                   	push   edx
100027c0:	50                   	push   eax
100027c1:	68 93 5e 00 10       	push   0x10005e93	100027c2: R_386_32	.text
100027c6:	e8 fc ff ff ff       	call   100027c7 <FloppyDrive::read(unsigned long long, int, void*)+0xbd>	100027c7: R_386_PC32	Dbg::kprintf(char const*, ...)
100027cb:	83 c4 10             	add    esp,0x10
100027ce:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
100027d1:	85 c0                	test   eax,eax
100027d3:	75 2a                	jne    100027ff <FloppyDrive::read(unsigned long long, int, void*)+0xf5>
100027d5:	a0 00 00 00 00       	mov    al,ds:0x0	100027d6: R_386_32	hasCyl0Bf
100027da:	83 f0 01             	xor    eax,0x1
100027dd:	84 c0                	test   al,al
100027df:	74 5a                	je     1000283b <FloppyDrive::read(unsigned long long, int, void*)+0x131>
100027e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100027e2: R_386_32	_TEMP_cylinder0_bf
100027e6:	50                   	push   eax
100027e7:	6a 00                	push   0x0
100027e9:	6a 00                	push   0x0
100027eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100027ee:	e8 fc ff ff ff       	call   100027ef <FloppyDrive::read(unsigned long long, int, void*)+0xe5>	100027ef: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
100027f3:	83 c4 10             	add    esp,0x10
100027f6:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100027f8: R_386_32	hasCyl0Bf
100027fd:	eb 3c                	jmp    1000283b <FloppyDrive::read(unsigned long long, int, void*)+0x131>
100027ff:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
10002802:	a1 00 00 00 00       	mov    eax,ds:0x0	10002803: R_386_32	_TEMP_cyl
10002807:	39 c2                	cmp    edx,eax
10002809:	74 30                	je     1000283b <FloppyDrive::read(unsigned long long, int, void*)+0x131>
1000280b:	83 ec 0c             	sub    esp,0xc
1000280e:	68 ab 5e 00 10       	push   0x10005eab	1000280f: R_386_32	.text
10002813:	e8 fc ff ff ff       	call   10002814 <FloppyDrive::read(unsigned long long, int, void*)+0x10a>	10002814: R_386_PC32	Dbg::kprintf(char const*, ...)
10002818:	83 c4 10             	add    esp,0x10
1000281b:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000281d: R_386_32	_TEMP_trackBuffer
10002821:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10002824:	52                   	push   edx
10002825:	6a 00                	push   0x0
10002827:	50                   	push   eax
10002828:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000282b:	e8 fc ff ff ff       	call   1000282c <FloppyDrive::read(unsigned long long, int, void*)+0x122>	1000282c: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002830:	83 c4 10             	add    esp,0x10
10002833:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10002836:	a3 00 00 00 00       	mov    ds:0x0,eax	10002837: R_386_32	_TEMP_cyl
1000283b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000283e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002844:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10002847:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
1000284d:	83 c2 64             	add    edx,0x64
10002850:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10002854:	89 d0                	mov    eax,edx
10002856:	c1 e0 02             	shl    eax,0x2
10002859:	01 d0                	add    eax,edx
1000285b:	c1 e0 02             	shl    eax,0x2
1000285e:	01 d0                	add    eax,edx
10002860:	05 13 00 00 00       	add    eax,0x13	10002861: R_386_32	floppyTable
10002865:	8a 00                	mov    al,BYTE PTR [eax]
10002867:	0f b6 c0             	movzx  eax,al
1000286a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000286d:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
10002870:	85 c0                	test   eax,eax
10002872:	75 53                	jne    100028c7 <FloppyDrive::read(unsigned long long, int, void*)+0x1bd>
10002874:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002876: R_386_32	_TEMP_cylinder0_bf
1000287a:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000287d:	48                   	dec    eax
1000287e:	c1 e0 09             	shl    eax,0x9
10002881:	89 c1                	mov    ecx,eax
10002883:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10002886:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
1000288a:	c1 e0 09             	shl    eax,0x9
1000288d:	01 c8                	add    eax,ecx
1000288f:	01 c2                	add    edx,eax
10002891:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002894:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002897:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
1000289a:	c7 45 d8 00 02 00 00 	mov    DWORD PTR [ebp-0x28],0x200
100028a1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100028a4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
100028a7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100028aa:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
100028ad:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
100028b0:	89 c6                	mov    esi,eax
100028b2:	89 d7                	mov    edi,edx
100028b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100028b6:	89 c8                	mov    eax,ecx
100028b8:	89 fa                	mov    edx,edi
100028ba:	89 f3                	mov    ebx,esi
100028bc:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
100028bf:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100028c2:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100028c5:	eb 51                	jmp    10002918 <FloppyDrive::read(unsigned long long, int, void*)+0x20e>
100028c7:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100028c9: R_386_32	_TEMP_trackBuffer
100028cd:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
100028d0:	48                   	dec    eax
100028d1:	c1 e0 09             	shl    eax,0x9
100028d4:	89 c1                	mov    ecx,eax
100028d6:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
100028d9:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
100028dd:	c1 e0 09             	shl    eax,0x9
100028e0:	01 c8                	add    eax,ecx
100028e2:	01 c2                	add    edx,eax
100028e4:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100028e7:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
100028ea:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
100028ed:	c7 45 bc 00 02 00 00 	mov    DWORD PTR [ebp-0x44],0x200
100028f4:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100028f7:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100028fa:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100028fd:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
10002900:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
10002903:	89 c6                	mov    esi,eax
10002905:	89 d7                	mov    edi,edx
10002907:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002909:	89 c8                	mov    eax,ecx
1000290b:	89 fa                	mov    edx,edi
1000290d:	89 f3                	mov    ebx,esi
1000290f:	89 5d b4             	mov    DWORD PTR [ebp-0x4c],ebx
10002912:	89 55 b0             	mov    DWORD PTR [ebp-0x50],edx
10002915:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
10002918:	b8 00 00 00 00       	mov    eax,0x0
1000291d:	8d 65 f4             	lea    esp,[ebp-0xc]
10002920:	5b                   	pop    ebx
10002921:	5e                   	pop    esi
10002922:	5f                   	pop    edi
10002923:	5d                   	pop    ebp
10002924:	c3                   	ret    
10002925:	90                   	nop

10002926 <FloppyDrive::write(unsigned long long, int, void*)>:
10002926:	55                   	push   ebp
10002927:	89 e5                	mov    ebp,esp
10002929:	57                   	push   edi
1000292a:	56                   	push   esi
1000292b:	53                   	push   ebx
1000292c:	81 ec 8c 00 00 00    	sub    esp,0x8c
10002932:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002935:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
1000293b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000293e:	89 85 74 ff ff ff    	mov    DWORD PTR [ebp-0x8c],eax
10002944:	a0 00 00 00 00       	mov    al,ds:0x0	10002945: R_386_32	_TEMP_allocated
10002949:	83 f0 01             	xor    eax,0x1
1000294c:	84 c0                	test   al,al
1000294e:	74 46                	je     10002996 <FloppyDrive::write(unsigned long long, int, void*)+0x70>
10002950:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10002952: R_386_32	_TEMP_allocated
10002957:	83 ec 0c             	sub    esp,0xc
1000295a:	68 00 48 00 00       	push   0x4800
1000295f:	e8 fc ff ff ff       	call   10002960 <FloppyDrive::write(unsigned long long, int, void*)+0x3a>	10002960: R_386_PC32	malloc
10002964:	83 c4 10             	add    esp,0x10
10002967:	a3 00 00 00 00       	mov    ds:0x0,eax	10002968: R_386_32	_TEMP_trackBuffer
1000296c:	83 ec 0c             	sub    esp,0xc
1000296f:	68 00 48 00 00       	push   0x4800
10002974:	e8 fc ff ff ff       	call   10002975 <FloppyDrive::write(unsigned long long, int, void*)+0x4f>	10002975: R_386_PC32	malloc
10002979:	83 c4 10             	add    esp,0x10
1000297c:	a3 00 00 00 00       	mov    ds:0x0,eax	1000297d: R_386_32	_TEMP_cylinder0_bf
10002981:	83 ec 0c             	sub    esp,0xc
10002984:	68 00 48 00 00       	push   0x4800
10002989:	e8 fc ff ff ff       	call   1000298a <FloppyDrive::write(unsigned long long, int, void*)+0x64>	1000298a: R_386_PC32	malloc
1000298e:	83 c4 10             	add    esp,0x10
10002991:	a3 00 00 00 00       	mov    ds:0x0,eax	10002992: R_386_32	_TEMP_write_bf
10002996:	83 7d 14 01          	cmp    DWORD PTR [ebp+0x14],0x1
1000299a:	74 5b                	je     100029f7 <FloppyDrive::write(unsigned long long, int, void*)+0xd1>
1000299c:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100029a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100029a6:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
100029a9:	7d 42                	jge    100029ed <FloppyDrive::write(unsigned long long, int, void*)+0xc7>
100029ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029ae:	8b 00                	mov    eax,DWORD PTR [eax]
100029b0:	83 c0 2c             	add    eax,0x2c
100029b3:	8b 30                	mov    esi,DWORD PTR [eax]
100029b5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100029b8:	89 c1                	mov    ecx,eax
100029ba:	89 c3                	mov    ebx,eax
100029bc:	c1 fb 1f             	sar    ebx,0x1f
100029bf:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [ebp-0x90]
100029c5:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [ebp-0x8c]
100029cb:	01 c8                	add    eax,ecx
100029cd:	11 da                	adc    edx,ebx
100029cf:	83 ec 0c             	sub    esp,0xc
100029d2:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100029d5:	6a 01                	push   0x1
100029d7:	52                   	push   edx
100029d8:	50                   	push   eax
100029d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100029dc:	ff d6                	call   esi
100029de:	83 c4 20             	add    esp,0x20
100029e1:	81 45 18 00 02 00 00 	add    DWORD PTR [ebp+0x18],0x200
100029e8:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100029eb:	eb b6                	jmp    100029a3 <FloppyDrive::write(unsigned long long, int, void*)+0x7d>
100029ed:	b8 00 00 00 00       	mov    eax,0x0
100029f2:	e9 d1 01 00 00       	jmp    10002bc8 <FloppyDrive::write(unsigned long long, int, void*)+0x2a2>
100029f7:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [ebp-0x90]
100029fd:	83 ec 0c             	sub    esp,0xc
10002a00:	8d 55 80             	lea    edx,[ebp-0x80]
10002a03:	52                   	push   edx
10002a04:	8d 55 84             	lea    edx,[ebp-0x7c]
10002a07:	52                   	push   edx
10002a08:	8d 55 88             	lea    edx,[ebp-0x78]
10002a0b:	52                   	push   edx
10002a0c:	50                   	push   eax
10002a0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a10:	e8 fc ff ff ff       	call   10002a11 <FloppyDrive::write(unsigned long long, int, void*)+0xeb>	10002a11: R_386_PC32	FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)
10002a15:	83 c4 20             	add    esp,0x20
10002a18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a1b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002a21:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10002a24:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10002a2a:	83 c2 64             	add    edx,0x64
10002a2d:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10002a31:	89 d0                	mov    eax,edx
10002a33:	c1 e0 02             	shl    eax,0x2
10002a36:	01 d0                	add    eax,edx
10002a38:	c1 e0 02             	shl    eax,0x2
10002a3b:	01 d0                	add    eax,edx
10002a3d:	05 13 00 00 00       	add    eax,0x13	10002a3e: R_386_32	floppyTable
10002a42:	8a 00                	mov    al,BYTE PTR [eax]
10002a44:	0f b6 c0             	movzx  eax,al
10002a47:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002a4a:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002a4d:	85 c0                	test   eax,eax
10002a4f:	75 77                	jne    10002ac8 <FloppyDrive::write(unsigned long long, int, void*)+0x1a2>
10002a51:	a0 00 00 00 00       	mov    al,ds:0x0	10002a52: R_386_32	hasCyl0Bf
10002a56:	84 c0                	test   al,al
10002a58:	74 6e                	je     10002ac8 <FloppyDrive::write(unsigned long long, int, void*)+0x1a2>
10002a5a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002a5c: R_386_32	_TEMP_cylinder0_bf
10002a60:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002a63:	48                   	dec    eax
10002a64:	c1 e0 09             	shl    eax,0x9
10002a67:	89 c1                	mov    ecx,eax
10002a69:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
10002a6c:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
10002a70:	c1 e0 09             	shl    eax,0x9
10002a73:	01 c8                	add    eax,ecx
10002a75:	01 d0                	add    eax,edx
10002a77:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10002a7a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002a7d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10002a80:	c7 45 d4 00 02 00 00 	mov    DWORD PTR [ebp-0x2c],0x200
10002a87:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10002a8a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10002a8d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10002a90:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002a93:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002a96:	89 c6                	mov    esi,eax
10002a98:	89 d7                	mov    edi,edx
10002a9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002a9c:	89 c8                	mov    eax,ecx
10002a9e:	89 fa                	mov    edx,edi
10002aa0:	89 f3                	mov    ebx,esi
10002aa2:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
10002aa5:	89 55 c8             	mov    DWORD PTR [ebp-0x38],edx
10002aa8:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10002aab:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002aad: R_386_32	_TEMP_cylinder0_bf
10002ab1:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002ab4:	52                   	push   edx
10002ab5:	6a 01                	push   0x1
10002ab7:	50                   	push   eax
10002ab8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002abb:	e8 fc ff ff ff       	call   10002abc <FloppyDrive::write(unsigned long long, int, void*)+0x196>	10002abc: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002ac0:	83 c4 10             	add    esp,0x10
10002ac3:	e9 fb 00 00 00       	jmp    10002bc3 <FloppyDrive::write(unsigned long long, int, void*)+0x29d>
10002ac8:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
10002acb:	a1 00 00 00 00       	mov    eax,ds:0x0	10002acc: R_386_32	_TEMP_cyl
10002ad0:	39 c2                	cmp    edx,eax
10002ad2:	75 6e                	jne    10002b42 <FloppyDrive::write(unsigned long long, int, void*)+0x21c>
10002ad4:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002ad6: R_386_32	_TEMP_trackBuffer
10002ada:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002add:	48                   	dec    eax
10002ade:	c1 e0 09             	shl    eax,0x9
10002ae1:	89 c1                	mov    ecx,eax
10002ae3:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
10002ae6:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
10002aea:	c1 e0 09             	shl    eax,0x9
10002aed:	01 c8                	add    eax,ecx
10002aef:	01 d0                	add    eax,edx
10002af1:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
10002af4:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002af7:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10002afa:	c7 45 b8 00 02 00 00 	mov    DWORD PTR [ebp-0x48],0x200
10002b01:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10002b04:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10002b07:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
10002b0a:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
10002b0d:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
10002b10:	89 c6                	mov    esi,eax
10002b12:	89 d7                	mov    edi,edx
10002b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002b16:	89 c8                	mov    eax,ecx
10002b18:	89 fa                	mov    edx,edi
10002b1a:	89 f3                	mov    ebx,esi
10002b1c:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
10002b1f:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
10002b22:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
10002b25:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002b27: R_386_32	_TEMP_trackBuffer
10002b2b:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002b2e:	52                   	push   edx
10002b2f:	6a 01                	push   0x1
10002b31:	50                   	push   eax
10002b32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002b35:	e8 fc ff ff ff       	call   10002b36 <FloppyDrive::write(unsigned long long, int, void*)+0x210>	10002b36: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002b3a:	83 c4 10             	add    esp,0x10
10002b3d:	e9 81 00 00 00       	jmp    10002bc3 <FloppyDrive::write(unsigned long long, int, void*)+0x29d>
10002b42:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002b44: R_386_32	_TEMP_write_bf
10002b48:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002b4b:	52                   	push   edx
10002b4c:	6a 00                	push   0x0
10002b4e:	50                   	push   eax
10002b4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002b52:	e8 fc ff ff ff       	call   10002b53 <FloppyDrive::write(unsigned long long, int, void*)+0x22d>	10002b53: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002b57:	83 c4 10             	add    esp,0x10
10002b5a:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002b5c: R_386_32	_TEMP_write_bf
10002b60:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002b63:	48                   	dec    eax
10002b64:	c1 e0 09             	shl    eax,0x9
10002b67:	89 c1                	mov    ecx,eax
10002b69:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
10002b6c:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
10002b70:	c1 e0 09             	shl    eax,0x9
10002b73:	01 c8                	add    eax,ecx
10002b75:	01 d0                	add    eax,edx
10002b77:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10002b7a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002b7d:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10002b80:	c7 45 9c 00 02 00 00 	mov    DWORD PTR [ebp-0x64],0x200
10002b87:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10002b8a:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10002b8d:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10002b90:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
10002b93:	8b 4d 9c             	mov    ecx,DWORD PTR [ebp-0x64]
10002b96:	89 c6                	mov    esi,eax
10002b98:	89 d7                	mov    edi,edx
10002b9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002b9c:	89 c8                	mov    eax,ecx
10002b9e:	89 fa                	mov    edx,edi
10002ba0:	89 f3                	mov    ebx,esi
10002ba2:	89 5d 94             	mov    DWORD PTR [ebp-0x6c],ebx
10002ba5:	89 55 90             	mov    DWORD PTR [ebp-0x70],edx
10002ba8:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
10002bab:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002bad: R_386_32	_TEMP_write_bf
10002bb1:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002bb4:	52                   	push   edx
10002bb5:	6a 01                	push   0x1
10002bb7:	50                   	push   eax
10002bb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002bbb:	e8 fc ff ff ff       	call   10002bbc <FloppyDrive::write(unsigned long long, int, void*)+0x296>	10002bbc: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002bc0:	83 c4 10             	add    esp,0x10
10002bc3:	b8 00 00 00 00       	mov    eax,0x0
10002bc8:	8d 65 f4             	lea    esp,[ebp-0xc]
10002bcb:	5b                   	pop    ebx
10002bcc:	5e                   	pop    esi
10002bcd:	5f                   	pop    edi
10002bce:	5d                   	pop    ebp
10002bcf:	c3                   	ret    

10002bd0 <FloppyDrive::~FloppyDrive()>:
10002bd0:	55                   	push   ebp
10002bd1:	89 e5                	mov    ebp,esp
10002bd3:	83 ec 08             	sub    esp,0x8
10002bd6:	ba 08 00 00 00       	mov    edx,0x8	10002bd7: R_386_32	vtable for FloppyDrive
10002bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bde:	89 10                	mov    DWORD PTR [eax],edx
10002be0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002be3:	83 ec 0c             	sub    esp,0xc
10002be6:	50                   	push   eax
10002be7:	e8 fc ff ff ff       	call   10002be8 <FloppyDrive::~FloppyDrive()+0x18>	10002be8: R_386_PC32	PhysicalDisk::~PhysicalDisk()
10002bec:	83 c4 10             	add    esp,0x10
10002bef:	90                   	nop
10002bf0:	c9                   	leave  
10002bf1:	c3                   	ret    

10002bf2 <FloppyDrive::~FloppyDrive()>:
10002bf2:	55                   	push   ebp
10002bf3:	89 e5                	mov    ebp,esp
10002bf5:	83 ec 08             	sub    esp,0x8
10002bf8:	83 ec 0c             	sub    esp,0xc
10002bfb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002bfe:	e8 fc ff ff ff       	call   10002bff <FloppyDrive::~FloppyDrive()+0xd>	10002bff: R_386_PC32	FloppyDrive::~FloppyDrive()
10002c03:	83 c4 10             	add    esp,0x10
10002c06:	83 ec 08             	sub    esp,0x8
10002c09:	68 74 01 00 00       	push   0x174
10002c0e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002c11:	e8 fc ff ff ff       	call   10002c12 <FloppyDrive::~FloppyDrive()+0x20>	10002c12: R_386_PC32	operator delete(void*, unsigned long)
10002c16:	83 c4 10             	add    esp,0x10
10002c19:	c9                   	leave  
10002c1a:	c3                   	ret    
10002c1b:	90                   	nop

10002c1c <Gameport::Gameport()>:
10002c1c:	55                   	push   ebp
10002c1d:	89 e5                	mov    ebp,esp
10002c1f:	83 ec 08             	sub    esp,0x8
10002c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c25:	83 ec 08             	sub    esp,0x8
10002c28:	68 c0 5f 00 10       	push   0x10005fc0	10002c29: R_386_32	.text
10002c2d:	50                   	push   eax
10002c2e:	e8 fc ff ff ff       	call   10002c2f <Gameport::Gameport()+0x13>	10002c2f: R_386_PC32	Device::Device(char const*)
10002c33:	83 c4 10             	add    esp,0x10
10002c36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c39:	05 58 01 00 00       	add    eax,0x158
10002c3e:	83 ec 0c             	sub    esp,0xc
10002c41:	50                   	push   eax
10002c42:	e8 fc ff ff ff       	call   10002c43 <Gameport::Gameport()+0x27>	10002c43: R_386_PC32	JoystickHost::JoystickHost()
10002c47:	83 c4 10             	add    esp,0x10
10002c4a:	ba 08 00 00 00       	mov    edx,0x8	10002c4b: R_386_32	vtable for Gameport
10002c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c52:	89 10                	mov    DWORD PTR [eax],edx
10002c54:	ba 38 00 00 00       	mov    edx,0x38	10002c55: R_386_32	vtable for Gameport
10002c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c5c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10002c62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c65:	c7 80 5c 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x15c],0x14a
10002c6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c72:	c7 80 60 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x160],0x14a
10002c7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c7f:	c7 80 64 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x164],0x14a
10002c89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c8c:	c7 80 68 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x168],0x14a
10002c96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c99:	c7 80 6c 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x16c],0x3d4
10002ca3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ca6:	c7 80 70 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x170],0x3d4
10002cb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cb3:	c7 80 74 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x174],0x3d4
10002cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cc0:	c7 80 78 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x178],0x3d4
10002cca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ccd:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
10002cd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cd7:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10002cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ce1:	c6 80 7e 01 00 00 00 	mov    BYTE PTR [eax+0x17e],0x0
10002ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ceb:	c6 80 7f 01 00 00 00 	mov    BYTE PTR [eax+0x17f],0x0
10002cf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cf5:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
10002cfc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002cff:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10002d06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002d0f:	0f b6 d0             	movzx  edx,al
10002d12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d15:	66 c7 44 90 04 01 02 	mov    WORD PTR [eax+edx*4+0x4],0x201
10002d1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d1f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002d25:	0f b6 d0             	movzx  edx,al
10002d28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d2b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10002d30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d33:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002d39:	8d 50 01             	lea    edx,[eax+0x1]
10002d3c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10002d3f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10002d45:	0f b6 d0             	movzx  edx,al
10002d48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d4b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10002d4f:	83 e1 3f             	and    ecx,0x3f
10002d52:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10002d56:	90                   	nop
10002d57:	c9                   	leave  
10002d58:	c3                   	ret    
10002d59:	90                   	nop

10002d5a <Gameport::~Gameport()>:
10002d5a:	55                   	push   ebp
10002d5b:	89 e5                	mov    ebp,esp
10002d5d:	83 ec 08             	sub    esp,0x8
10002d60:	ba 08 00 00 00       	mov    edx,0x8	10002d61: R_386_32	vtable for Gameport
10002d65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d68:	89 10                	mov    DWORD PTR [eax],edx
10002d6a:	ba 38 00 00 00       	mov    edx,0x38	10002d6b: R_386_32	vtable for Gameport
10002d6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d72:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10002d78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002d7b:	83 ec 0c             	sub    esp,0xc
10002d7e:	50                   	push   eax
10002d7f:	e8 fc ff ff ff       	call   10002d80 <Gameport::~Gameport()+0x26>	10002d80: R_386_PC32	Device::~Device()
10002d84:	83 c4 10             	add    esp,0x10
10002d87:	90                   	nop
10002d88:	c9                   	leave  
10002d89:	c3                   	ret    

10002d8a <Gameport::~Gameport()>:
10002d8a:	55                   	push   ebp
10002d8b:	89 e5                	mov    ebp,esp
10002d8d:	83 ec 08             	sub    esp,0x8
10002d90:	83 ec 0c             	sub    esp,0xc
10002d93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002d96:	e8 fc ff ff ff       	call   10002d97 <Gameport::~Gameport()+0xd>	10002d97: R_386_PC32	Gameport::~Gameport()
10002d9b:	83 c4 10             	add    esp,0x10
10002d9e:	83 ec 08             	sub    esp,0x8
10002da1:	68 80 01 00 00       	push   0x180
10002da6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002da9:	e8 fc ff ff ff       	call   10002daa <Gameport::~Gameport()+0x20>	10002daa: R_386_PC32	operator delete(void*, unsigned long)
10002dae:	83 c4 10             	add    esp,0x10
10002db1:	c9                   	leave  
10002db2:	c3                   	ret    
10002db3:	90                   	nop

10002db4 <Gameport::calibration(int)>:
10002db4:	57                   	push   edi
10002db5:	56                   	push   esi
10002db6:	53                   	push   ebx
10002db7:	81 ec d0 00 00 00    	sub    esp,0xd0
10002dbd:	8b 9c 24 e0 00 00 00 	mov    ebx,DWORD PTR [esp+0xe0]
10002dc4:	8b b4 24 e4 00 00 00 	mov    esi,DWORD PTR [esp+0xe4]
10002dcb:	80 bb 7e 01 00 00 00 	cmp    BYTE PTR [ebx+0x17e],0x0
10002dd2:	74 0c                	je     10002de0 <Gameport::calibration(int)+0x2c>
10002dd4:	c6 83 7f 01 00 00 01 	mov    BYTE PTR [ebx+0x17f],0x1
10002ddb:	e9 e6 00 00 00       	jmp    10002ec6 <Gameport::calibration(int)+0x112>
10002de0:	8d bc 24 9c 00 00 00 	lea    edi,[esp+0x9c]
10002de7:	50                   	push   eax
10002de8:	56                   	push   esi
10002de9:	53                   	push   ebx
10002dea:	57                   	push   edi
10002deb:	e8 fc ff ff ff       	call   10002dec <Gameport::calibration(int)+0x38>	10002dec: R_386_PC32	Gameport::readRaw(int)
10002df0:	6a 0a                	push   0xa
10002df2:	e8 fc ff ff ff       	call   10002df3 <Gameport::calibration(int)+0x3f>	10002df3: R_386_PC32	milliTenthSleep(unsigned int)
10002df7:	8d 44 24 10          	lea    eax,[esp+0x10]
10002dfb:	83 c4 0c             	add    esp,0xc
10002dfe:	56                   	push   esi
10002dff:	53                   	push   ebx
10002e00:	50                   	push   eax
10002e01:	e8 fc ff ff ff       	call   10002e02 <Gameport::calibration(int)+0x4e>	10002e02: R_386_PC32	Gameport::readRaw(int)
10002e06:	6a 0a                	push   0xa
10002e08:	e8 fc ff ff ff       	call   10002e09 <Gameport::calibration(int)+0x55>	10002e09: R_386_PC32	milliTenthSleep(unsigned int)
10002e0d:	8d 44 24 44          	lea    eax,[esp+0x44]
10002e11:	83 c4 0c             	add    esp,0xc
10002e14:	56                   	push   esi
10002e15:	53                   	push   ebx
10002e16:	50                   	push   eax
10002e17:	e8 fc ff ff ff       	call   10002e18 <Gameport::calibration(int)+0x64>	10002e18: R_386_PC32	Gameport::readRaw(int)
10002e1c:	6a 0a                	push   0xa
10002e1e:	e8 fc ff ff ff       	call   10002e1f <Gameport::calibration(int)+0x6b>	10002e1f: R_386_PC32	milliTenthSleep(unsigned int)
10002e23:	8d 44 24 78          	lea    eax,[esp+0x78]
10002e27:	83 c4 0c             	add    esp,0xc
10002e2a:	56                   	push   esi
10002e2b:	53                   	push   ebx
10002e2c:	50                   	push   eax
10002e2d:	e8 fc ff ff ff       	call   10002e2e <Gameport::calibration(int)+0x7a>	10002e2e: R_386_PC32	Gameport::readRaw(int)
10002e32:	6a 0a                	push   0xa
10002e34:	e8 fc ff ff ff       	call   10002e35 <Gameport::calibration(int)+0x81>	10002e35: R_386_PC32	milliTenthSleep(unsigned int)
10002e39:	83 c4 0c             	add    esp,0xc
10002e3c:	56                   	push   esi
10002e3d:	53                   	push   ebx
10002e3e:	57                   	push   edi
10002e3f:	bf 03 00 00 00       	mov    edi,0x3
10002e44:	e8 fc ff ff ff       	call   10002e45 <Gameport::calibration(int)+0x91>	10002e45: R_386_PC32	Gameport::readRaw(int)
10002e49:	31 d2                	xor    edx,edx
10002e4b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10002e4f:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
10002e53:	03 84 24 88 00 00 00 	add    eax,DWORD PTR [esp+0x88]
10002e5a:	f7 f7                	div    edi
10002e5c:	31 d2                	xor    edx,edx
10002e5e:	89 c1                	mov    ecx,eax
10002e60:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10002e64:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10002e68:	03 84 24 8c 00 00 00 	add    eax,DWORD PTR [esp+0x8c]
10002e6f:	83 c4 0c             	add    esp,0xc
10002e72:	f7 f7                	div    edi
10002e74:	85 f6                	test   esi,esi
10002e76:	75 0e                	jne    10002e86 <Gameport::calibration(int)+0xd2>
10002e78:	89 8b 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],ecx
10002e7e:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10002e84:	eb 0c                	jmp    10002e92 <Gameport::calibration(int)+0xde>
10002e86:	89 8b 64 01 00 00    	mov    DWORD PTR [ebx+0x164],ecx
10002e8c:	89 83 68 01 00 00    	mov    DWORD PTR [ebx+0x168],eax
10002e92:	6b 83 5c 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x15c],0x3
10002e99:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
10002e9f:	6b 83 60 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x160],0x3
10002ea6:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
10002eac:	6b 83 64 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x164],0x3
10002eb3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
10002eb9:	6b 83 68 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x168],0x3
10002ec0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
10002ec6:	81 c4 d0 00 00 00    	add    esp,0xd0
10002ecc:	5b                   	pop    ebx
10002ecd:	5e                   	pop    esi
10002ece:	5f                   	pop    edi
10002ecf:	c3                   	ret    

10002ed0 <Gameport::detect()>:
10002ed0:	53                   	push   ebx
10002ed1:	81 ec 88 00 00 00    	sub    esp,0x88
10002ed7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
10002ede:	8d 44 24 18          	lea    eax,[esp+0x18]
10002ee2:	51                   	push   ecx
10002ee3:	6a 00                	push   0x0
10002ee5:	53                   	push   ebx
10002ee6:	50                   	push   eax
10002ee7:	e8 fc ff ff ff       	call   10002ee8 <Gameport::detect()+0x18>	10002ee8: R_386_PC32	Gameport::readRaw(int)
10002eec:	8d 44 24 58          	lea    eax,[esp+0x58]
10002ef0:	52                   	push   edx
10002ef1:	52                   	push   edx
10002ef2:	6a 01                	push   0x1
10002ef4:	53                   	push   ebx
10002ef5:	50                   	push   eax
10002ef6:	e8 fc ff ff ff       	call   10002ef7 <Gameport::detect()+0x27>	10002ef7: R_386_PC32	Gameport::readRaw(int)
10002efb:	83 c4 1c             	add    esp,0x1c
10002efe:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10002f05:	75 14                	jne    10002f1b <Gameport::detect()+0x4b>
10002f07:	f6 44 24 18 10       	test   BYTE PTR [esp+0x18],0x10
10002f0c:	74 0d                	je     10002f1b <Gameport::detect()+0x4b>
10002f0e:	52                   	push   edx
10002f0f:	52                   	push   edx
10002f10:	6a 00                	push   0x0
10002f12:	53                   	push   ebx
10002f13:	e8 fc ff ff ff       	call   10002f14 <Gameport::detect()+0x44>	10002f14: R_386_PC32	Gameport::calibration(int)
10002f18:	83 c4 10             	add    esp,0x10
10002f1b:	8a 54 24 4c          	mov    dl,BYTE PTR [esp+0x4c]
10002f1f:	83 e2 10             	and    edx,0x10
10002f22:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10002f29:	75 19                	jne    10002f44 <Gameport::detect()+0x74>
10002f2b:	84 d2                	test   dl,dl
10002f2d:	74 15                	je     10002f44 <Gameport::detect()+0x74>
10002f2f:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10002f33:	50                   	push   eax
10002f34:	50                   	push   eax
10002f35:	6a 01                	push   0x1
10002f37:	53                   	push   ebx
10002f38:	e8 fc ff ff ff       	call   10002f39 <Gameport::detect()+0x69>	10002f39: R_386_PC32	Gameport::calibration(int)
10002f3d:	83 c4 10             	add    esp,0x10
10002f40:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
10002f44:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
10002f48:	c0 e8 04             	shr    al,0x4
10002f4b:	83 e0 01             	and    eax,0x1
10002f4e:	84 d2                	test   dl,dl
10002f50:	88 83 7c 01 00 00    	mov    BYTE PTR [ebx+0x17c],al
10002f56:	0f 95 83 7d 01 00 00 	setne  BYTE PTR [ebx+0x17d]
10002f5d:	81 c4 88 00 00 00    	add    esp,0x88
10002f63:	5b                   	pop    ebx
10002f64:	c3                   	ret    
10002f65:	90                   	nop

10002f66 <Gameport::read(int)>:
10002f66:	57                   	push   edi
10002f67:	56                   	push   esi
10002f68:	53                   	push   ebx
10002f69:	83 ec 50             	sub    esp,0x50
10002f6c:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10002f70:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002f74:	85 f6                	test   esi,esi
10002f76:	75 09                	jne    10002f81 <Gameport::read(int)+0x1b>
10002f78:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10002f7f:	eb 0c                	jmp    10002f8d <Gameport::read(int)+0x27>
10002f81:	83 fe 01             	cmp    esi,0x1
10002f84:	75 15                	jne    10002f9b <Gameport::read(int)+0x35>
10002f86:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10002f8d:	75 0c                	jne    10002f9b <Gameport::read(int)+0x35>
10002f8f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002f93:	80 20 ef             	and    BYTE PTR [eax],0xef
10002f96:	e9 b0 00 00 00       	jmp    1000304b <Gameport::read(int)+0xe5>
10002f9b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10002f9f:	52                   	push   edx
10002fa0:	56                   	push   esi
10002fa1:	53                   	push   ebx
10002fa2:	50                   	push   eax
10002fa3:	e8 fc ff ff ff       	call   10002fa4 <Gameport::read(int)+0x3e>	10002fa4: R_386_PC32	Gameport::readRaw(int)
10002fa8:	83 c4 0c             	add    esp,0xc
10002fab:	4e                   	dec    esi
10002fac:	75 1a                	jne    10002fc8 <Gameport::read(int)+0x62>
10002fae:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
10002fb4:	8b b3 68 01 00 00    	mov    esi,DWORD PTR [ebx+0x168]
10002fba:	8b 93 74 01 00 00    	mov    edx,DWORD PTR [ebx+0x174]
10002fc0:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
10002fc6:	eb 18                	jmp    10002fe0 <Gameport::read(int)+0x7a>
10002fc8:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
10002fce:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
10002fd4:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
10002fda:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10002fe0:	85 ff                	test   edi,edi
10002fe2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002fe6:	0f 94 c0             	sete   al
10002fe9:	85 f6                	test   esi,esi
10002feb:	0f 94 c1             	sete   cl
10002fee:	09 c1                	or     ecx,eax
10002ff0:	39 d7                	cmp    edi,edx
10002ff2:	0f 94 c0             	sete   al
10002ff5:	08 c1                	or     cl,al
10002ff7:	75 96                	jne    10002f8f <Gameport::read(int)+0x29>
10002ff9:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
10002ffd:	74 90                	je     10002f8f <Gameport::read(int)+0x29>
10002fff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10003003:	89 d9                	mov    ecx,ebx
10003005:	29 f1                	sub    ecx,esi
10003007:	6b c9 7f             	imul   ecx,ecx,0x7f
1000300a:	39 fb                	cmp    ebx,edi
1000300c:	7e 1a                	jle    10003028 <Gameport::read(int)+0xc2>
1000300e:	29 fb                	sub    ebx,edi
10003010:	29 fa                	sub    edx,edi
10003012:	6b db 7f             	imul   ebx,ebx,0x7f
10003015:	89 d7                	mov    edi,edx
10003017:	89 d8                	mov    eax,ebx
10003019:	99                   	cdq    
1000301a:	f7 ff                	idiv   edi
1000301c:	89 c3                	mov    ebx,eax
1000301e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003022:	29 f0                	sub    eax,esi
10003024:	89 c6                	mov    esi,eax
10003026:	eb 07                	jmp    1000302f <Gameport::read(int)+0xc9>
10003028:	89 c8                	mov    eax,ecx
1000302a:	99                   	cdq    
1000302b:	f7 ff                	idiv   edi
1000302d:	89 c3                	mov    ebx,eax
1000302f:	89 c8                	mov    eax,ecx
10003031:	88 5c 24 2d          	mov    BYTE PTR [esp+0x2d],bl
10003035:	99                   	cdq    
10003036:	b9 0d 00 00 00       	mov    ecx,0xd
1000303b:	f7 fe                	idiv   esi
1000303d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
10003041:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
10003045:	8d 74 24 1c          	lea    esi,[esp+0x1c]
10003049:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000304b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000304f:	83 c4 50             	add    esp,0x50
10003052:	5b                   	pop    ebx
10003053:	5e                   	pop    esi
10003054:	5f                   	pop    edi
10003055:	c2 04 00             	ret    0x4

10003058 <non-virtual thunk to Gameport::read(int)>:
10003058:	81 6c 24 08 58 01 00 00 	sub    DWORD PTR [esp+0x8],0x158
10003060:	e9 01 ff ff ff       	jmp    10002f66 <Gameport::read(int)>
10003065:	90                   	nop

10003066 <Gameport::readRaw(int)>:
10003066:	57                   	push   edi
10003067:	ba 01 02 00 00       	mov    edx,0x201
1000306c:	56                   	push   esi
1000306d:	53                   	push   ebx
1000306e:	83 ec 10             	sub    esp,0x10
10003071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
10003075:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
10003079:	8a 01                	mov    al,BYTE PTR [ecx]
1000307b:	83 e0 e0             	and    eax,0xffffffe0
1000307e:	83 c8 12             	or     eax,0x12
10003081:	88 01                	mov    BYTE PTR [ecx],al
10003083:	ec                   	in     al,dx
10003084:	88 c2                	mov    dl,al
10003086:	85 db                	test   ebx,ebx
10003088:	75 11                	jne    1000309b <Gameport::readRaw(int)+0x35>
1000308a:	c0 ea 04             	shr    dl,0x4
1000308d:	c0 e8 05             	shr    al,0x5
10003090:	83 e2 01             	and    edx,0x1
10003093:	83 e0 01             	and    eax,0x1
10003096:	88 51 01             	mov    BYTE PTR [ecx+0x1],dl
10003099:	eb 0c                	jmp    100030a7 <Gameport::readRaw(int)+0x41>
1000309b:	c0 ea 06             	shr    dl,0x6
1000309e:	c0 e8 07             	shr    al,0x7
100030a1:	83 e2 01             	and    edx,0x1
100030a4:	88 51 01             	mov    BYTE PTR [ecx+0x1],dl
100030a7:	88 41 02             	mov    BYTE PTR [ecx+0x2],al
100030aa:	ba 01 02 00 00       	mov    edx,0x201
100030af:	b0 ff                	mov    al,0xff
100030b1:	ee                   	out    dx,al
100030b2:	fa                   	cli    
100030b3:	a1 00 00 00 00       	mov    eax,ds:0x0	100030b4: R_386_32	irqDisableCounter
100030b8:	4b                   	dec    ebx
100030b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100030bd:	0f 94 c3             	sete   bl
100030c0:	c7 44 24 0c ff ff 00 00 	mov    DWORD PTR [esp+0xc],0xffff
100030c8:	0f b6 f3             	movzx  esi,bl
100030cb:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
100030d0:	0f b6 db             	movzx  ebx,bl
100030d3:	8d 74 76 01          	lea    esi,[esi+esi*2+0x1]
100030d7:	4b                   	dec    ebx
100030d8:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
100030dd:	83 e3 fa             	and    ebx,0xfffffffa
100030e0:	31 ff                	xor    edi,edi
100030e2:	83 c3 08             	add    ebx,0x8
100030e5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100030ec:	ba 01 02 00 00       	mov    edx,0x201
100030f1:	ec                   	in     al,dx
100030f2:	0f b6 c0             	movzx  eax,al
100030f5:	85 f0                	test   eax,esi
100030f7:	0f 94 c2             	sete   dl
100030fa:	08 54 24 06          	or     BYTE PTR [esp+0x6],dl
100030fe:	80 7c 24 06 01       	cmp    BYTE PTR [esp+0x6],0x1
10003103:	83 14 24 00          	adc    DWORD PTR [esp],0x0
10003107:	85 d8                	test   eax,ebx
10003109:	0f 94 c0             	sete   al
1000310c:	08 44 24 07          	or     BYTE PTR [esp+0x7],al
10003110:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
10003115:	83 d7 00             	adc    edi,0x0
10003118:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
1000311c:	75 0a                	jne    10003128 <Gameport::readRaw(int)+0xc2>
1000311e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
10003123:	75 13                	jne    10003138 <Gameport::readRaw(int)+0xd2>
10003125:	fb                   	sti    
10003126:	eb 10                	jmp    10003138 <Gameport::readRaw(int)+0xd2>
10003128:	80 7c 24 06 00       	cmp    BYTE PTR [esp+0x6],0x0
1000312d:	74 bd                	je     100030ec <Gameport::readRaw(int)+0x86>
1000312f:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
10003134:	74 b6                	je     100030ec <Gameport::readRaw(int)+0x86>
10003136:	eb e6                	jmp    1000311e <Gameport::readRaw(int)+0xb8>
10003138:	81 ff ff ff 00 00    	cmp    edi,0xffff
1000313e:	74 09                	je     10003149 <Gameport::readRaw(int)+0xe3>
10003140:	81 3c 24 ff ff 00 00 	cmp    DWORD PTR [esp],0xffff
10003147:	75 03                	jne    1000314c <Gameport::readRaw(int)+0xe6>
10003149:	80 21 ef             	and    BYTE PTR [ecx],0xef
1000314c:	89 79 18             	mov    DWORD PTR [ecx+0x18],edi
1000314f:	8b 04 24             	mov    eax,DWORD PTR [esp]
10003152:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
10003155:	83 c4 10             	add    esp,0x10
10003158:	89 c8                	mov    eax,ecx
1000315a:	5b                   	pop    ebx
1000315b:	5e                   	pop    esi
1000315c:	5f                   	pop    edi
1000315d:	c2 04 00             	ret    0x4

10003160 <Gameport::open(int, int, void*)>:
10003160:	31 c0                	xor    eax,eax
10003162:	c3                   	ret    
10003163:	90                   	nop

10003164 <Gameport::close(int, int, void*)>:
10003164:	31 c0                	xor    eax,eax
10003166:	c3                   	ret    
10003167:	90                   	nop

10003168 <DMAChannel::DMAChannel(int)>:
10003168:	55                   	push   ebp
10003169:	89 e5                	mov    ebp,esp
1000316b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000316e:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10003175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003178:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
1000317f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003182:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10003185:	89 10                	mov    DWORD PTR [eax],edx
10003187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000318a:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10003191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003194:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
1000319b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000319e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
100031a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031a5:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
100031a9:	83 7d 0c 03          	cmp    DWORD PTR [ebp+0xc],0x3
100031ad:	0f 9f c2             	setg   dl
100031b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031b3:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
100031b6:	90                   	nop
100031b7:	5d                   	pop    ebp
100031b8:	c3                   	ret    
100031b9:	90                   	nop

100031ba <DMAChannel::~DMAChannel()>:
100031ba:	55                   	push   ebp
100031bb:	89 e5                	mov    ebp,esp
100031bd:	83 ec 08             	sub    esp,0x8
100031c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100031c6:	85 c0                	test   eax,eax
100031c8:	74 19                	je     100031e3 <DMAChannel::~DMAChannel()+0x29>
100031ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031cd:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
100031d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100031d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100031d6:	83 ec 08             	sub    esp,0x8
100031d9:	52                   	push   edx
100031da:	50                   	push   eax
100031db:	e8 fc ff ff ff       	call   100031dc <DMAChannel::~DMAChannel()+0x22>	100031dc: R_386_PC32	Phys::freeDMA(unsigned long, unsigned long)
100031e0:	83 c4 10             	add    esp,0x10
100031e3:	90                   	nop
100031e4:	c9                   	leave  
100031e5:	c3                   	ret    

100031e6 <DMAChannel::getAddress()>:
100031e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100031ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100031ed:	c3                   	ret    

100031ee <DMAChannel::getChannelNum()>:
100031ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100031f2:	8b 00                	mov    eax,DWORD PTR [eax]
100031f4:	c3                   	ret    
100031f5:	90                   	nop

100031f6 <DMAChannel::setLength(unsigned int)>:
100031f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100031fa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
100031fe:	3d 00 00 01 00       	cmp    eax,0x10000
10003203:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
10003206:	76 0d                	jbe    10003215 <DMAChannel::setLength(unsigned int)+0x1f>
10003208:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	1000320c: R_386_32	dmaLong
10003210:	e9 fc ff ff ff       	jmp    10003211 <DMAChannel::setLength(unsigned int)+0x1b>	10003211: R_386_PC32	Krnl::panic(char const*)
10003215:	c3                   	ret    

10003216 <DMAChannel::setAddress(unsigned int)>:
10003216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000321a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
1000321e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10003221:	c3                   	ret    

10003222 <DMAChannel::allocateAddressAndSet(unsigned short)>:
10003222:	56                   	push   esi
10003223:	53                   	push   ebx
10003224:	83 ec 10             	sub    esp,0x10
10003227:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
1000322b:	0f b7 74 24 20       	movzx  esi,WORD PTR [esp+0x20]
10003230:	56                   	push   esi
10003231:	e8 fc ff ff ff       	call   10003232 <DMAChannel::allocateAddressAndSet(unsigned short)+0x10>	10003232: R_386_PC32	Phys::allocateDMA(unsigned long)
10003236:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
10003239:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
1000323c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
1000323f:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10003242:	83 c4 14             	add    esp,0x14
10003245:	5b                   	pop    ebx
10003246:	5e                   	pop    esi
10003247:	c3                   	ret    

10003248 <DMAChannel::setMode(unsigned char)>:
10003248:	53                   	push   ebx
10003249:	83 ec 08             	sub    esp,0x8
1000324c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10003250:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003254:	80 7b 0d 00          	cmp    BYTE PTR [ebx+0xd],0x0
10003258:	88 43 0f             	mov    BYTE PTR [ebx+0xf],al
1000325b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
1000325f:	74 2a                	je     1000328b <DMAChannel::setMode(unsigned char)+0x43>
10003261:	51                   	push   ecx
10003262:	51                   	push   ecx
10003263:	6a 01                	push   0x1
10003265:	53                   	push   ebx
10003266:	e8 fc ff ff ff       	call   10003267 <DMAChannel::setMode(unsigned char)+0x1f>	10003267: R_386_PC32	DMAChannel::mask(bool)
1000326b:	80 7b 0e 01          	cmp    BYTE PTR [ebx+0xe],0x1
1000326f:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
10003272:	19 d2                	sbb    edx,edx
10003274:	80 e2 35             	and    dl,0x35
10003277:	81 c2 d6 00 00 00    	add    edx,0xd6
1000327d:	ee                   	out    dx,al
1000327e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
10003282:	83 c4 18             	add    esp,0x18
10003285:	5b                   	pop    ebx
10003286:	e9 1f 01 00 00       	jmp    100033aa <DMAChannel::unmask()>
1000328b:	83 c4 08             	add    esp,0x8
1000328e:	5b                   	pop    ebx
1000328f:	c3                   	ret    

10003290 <DMAChannel::start()>:
10003290:	57                   	push   edi
10003291:	56                   	push   esi
10003292:	53                   	push   ebx
10003293:	83 ec 10             	sub    esp,0x10
10003296:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
1000329a:	8b 06                	mov    eax,DWORD PTR [esi]
1000329c:	83 f8 07             	cmp    eax,0x7
1000329f:	77 60                	ja     10003301 <DMAChannel::start()+0x71>
100032a1:	8a 98 b4 60 00 10    	mov    bl,BYTE PTR [eax+0x100060b4]	100032a3: R_386_32	.text
100032a7:	8a 88 bc 60 00 10    	mov    cl,BYTE PTR [eax+0x100060bc]	100032a9: R_386_32	.text
100032ad:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
100032b1:	8a 80 c4 60 00 10    	mov    al,BYTE PTR [eax+0x100060c4]	100032b3: R_386_32	.text
100032b7:	88 4c 24 0e          	mov    BYTE PTR [esp+0xe],cl
100032bb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100032bf:	fa                   	cli    
100032c0:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	100032c2: R_386_32	irqDisableCounter
100032c6:	50                   	push   eax
100032c7:	50                   	push   eax
100032c8:	6a 01                	push   0x1
100032ca:	56                   	push   esi
100032cb:	e8 fc ff ff ff       	call   100032cc <DMAChannel::start()+0x3c>	100032cc: R_386_PC32	DMAChannel::mask(bool)
100032d0:	8a 5e 0e             	mov    bl,BYTE PTR [esi+0xe]
100032d3:	83 c4 10             	add    esp,0x10
100032d6:	80 fb 01             	cmp    bl,0x1
100032d9:	19 d2                	sbb    edx,edx
100032db:	31 c0                	xor    eax,eax
100032dd:	80 e2 34             	and    dl,0x34
100032e0:	81 c2 d8 00 00 00    	add    edx,0xd8
100032e6:	89 d7                	mov    edi,edx
100032e8:	ee                   	out    dx,al
100032e9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
100032ec:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
100032f1:	84 db                	test   bl,bl
100032f3:	74 1f                	je     10003314 <DMAChannel::start()+0x84>
100032f5:	89 c8                	mov    eax,ecx
100032f7:	d1 e8                	shr    eax,1
100032f9:	ee                   	out    dx,al
100032fa:	89 c8                	mov    eax,ecx
100032fc:	c1 e8 09             	shr    eax,0x9
100032ff:	eb 1b                	jmp    1000331c <DMAChannel::start()+0x8c>
10003301:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	10003305: R_386_32	dmaConfused
10003309:	83 c4 10             	add    esp,0x10
1000330c:	5b                   	pop    ebx
1000330d:	5e                   	pop    esi
1000330e:	5f                   	pop    edi
1000330f:	e9 fc ff ff ff       	jmp    10003310 <DMAChannel::start()+0x80>	10003310: R_386_PC32	Krnl::panic(char const*)
10003314:	88 c8                	mov    al,cl
10003316:	ee                   	out    dx,al
10003317:	89 c8                	mov    eax,ecx
10003319:	c1 e8 08             	shr    eax,0x8
1000331c:	ee                   	out    dx,al
1000331d:	31 c0                	xor    eax,eax
1000331f:	89 fa                	mov    edx,edi
10003321:	ee                   	out    dx,al
10003322:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
10003325:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
1000332a:	8d 47 ff             	lea    eax,[edi-0x1]
1000332d:	ee                   	out    dx,al
1000332e:	8d 47 ff             	lea    eax,[edi-0x1]
10003331:	c1 e8 08             	shr    eax,0x8
10003334:	ee                   	out    dx,al
10003335:	89 c8                	mov    eax,ecx
10003337:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
1000333c:	c1 e8 10             	shr    eax,0x10
1000333f:	ee                   	out    dx,al
10003340:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
10003344:	74 12                	je     10003358 <DMAChannel::start()+0xc8>
10003346:	80 fb 01             	cmp    bl,0x1
10003349:	8a 46 0f             	mov    al,BYTE PTR [esi+0xf]
1000334c:	19 d2                	sbb    edx,edx
1000334e:	80 e2 35             	and    dl,0x35
10003351:	81 c2 d6 00 00 00    	add    edx,0xd6
10003357:	ee                   	out    dx,al
10003358:	83 ec 0c             	sub    esp,0xc
1000335b:	c6 46 0d 01          	mov    BYTE PTR [esi+0xd],0x1
1000335f:	56                   	push   esi
10003360:	e8 fc ff ff ff       	call   10003361 <DMAChannel::start()+0xd1>	10003361: R_386_PC32	DMAChannel::unmask()
10003365:	a1 00 00 00 00       	mov    eax,ds:0x0	10003366: R_386_32	irqDisableCounter
1000336a:	83 c4 10             	add    esp,0x10
1000336d:	48                   	dec    eax
1000336e:	a3 00 00 00 00       	mov    ds:0x0,eax	1000336f: R_386_32	irqDisableCounter
10003373:	85 c0                	test   eax,eax
10003375:	75 01                	jne    10003378 <DMAChannel::start()+0xe8>
10003377:	fb                   	sti    
10003378:	83 c4 10             	add    esp,0x10
1000337b:	5b                   	pop    ebx
1000337c:	5e                   	pop    esi
1000337d:	5f                   	pop    edi
1000337e:	c3                   	ret    
1000337f:	90                   	nop

10003380 <DMAChannel::stop()>:
10003380:	c3                   	ret    
10003381:	90                   	nop

10003382 <DMAChannel::mask(bool)>:
10003382:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10003386:	8a 01                	mov    al,BYTE PTR [ecx]
10003388:	83 e0 03             	and    eax,0x3
1000338b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
10003390:	0f 95 c2             	setne  dl
10003393:	c1 e2 02             	shl    edx,0x2
10003396:	09 d0                	or     eax,edx
10003398:	80 79 0e 01          	cmp    BYTE PTR [ecx+0xe],0x1
1000339c:	19 d2                	sbb    edx,edx
1000339e:	80 e2 36             	and    dl,0x36
100033a1:	81 c2 d4 00 00 00    	add    edx,0xd4
100033a7:	ee                   	out    dx,al
100033a8:	c3                   	ret    
100033a9:	90                   	nop

100033aa <DMAChannel::unmask()>:
100033aa:	6a 00                	push   0x0
100033ac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
100033b0:	e8 fc ff ff ff       	call   100033b1 <DMAChannel::unmask()+0x7>	100033b1: R_386_PC32	DMAChannel::mask(bool)
100033b5:	58                   	pop    eax
100033b6:	5a                   	pop    edx
100033b7:	c3                   	ret    

100033b8 <DMA::DMA()>:
100033b8:	55                   	push   ebp
100033b9:	89 e5                	mov    ebp,esp
100033bb:	83 ec 08             	sub    esp,0x8
100033be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033c1:	83 ec 08             	sub    esp,0x8
100033c4:	68 00 00 00 00       	push   0x0	100033c5: R_386_32	dmaCtrlName
100033c9:	50                   	push   eax
100033ca:	e8 fc ff ff ff       	call   100033cb <DMA::DMA()+0x13>	100033cb: R_386_PC32	Device::Device(char const*)
100033cf:	83 c4 10             	add    esp,0x10
100033d2:	ba 08 00 00 00       	mov    edx,0x8	100033d3: R_386_32	vtable for DMA
100033d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033da:	89 10                	mov    DWORD PTR [eax],edx
100033dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033df:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
100033e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033e9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033ef:	0f b6 d0             	movzx  edx,al
100033f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033f5:	66 c7 44 90 04 00 00 	mov    WORD PTR [eax+edx*4+0x4],0x0
100033fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003405:	0f b6 d0             	movzx  edx,al
10003408:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000340b:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
10003410:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003413:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003419:	8d 50 01             	lea    edx,[eax+0x1]
1000341c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000341f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003425:	0f b6 d0             	movzx  edx,al
10003428:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000342b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000342f:	83 e1 3f             	and    ecx,0x3f
10003432:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003436:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003439:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000343f:	0f b6 d0             	movzx  edx,al
10003442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003445:	66 c7 44 90 04 c0 00 	mov    WORD PTR [eax+edx*4+0x4],0xc0
1000344c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000344f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003455:	0f b6 d0             	movzx  edx,al
10003458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000345b:	c6 44 90 06 20       	mov    BYTE PTR [eax+edx*4+0x6],0x20
10003460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003463:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003469:	8d 50 01             	lea    edx,[eax+0x1]
1000346c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000346f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003475:	0f b6 d0             	movzx  edx,al
10003478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000347b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000347f:	83 e1 3f             	and    ecx,0x3f
10003482:	83 c9 40             	or     ecx,0x40
10003485:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000348c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003492:	0f b6 d0             	movzx  edx,al
10003495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003498:	66 c7 44 90 04 81 00 	mov    WORD PTR [eax+edx*4+0x4],0x81
1000349f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100034a8:	0f b6 d0             	movzx  edx,al
100034ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034ae:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
100034b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100034bc:	8d 50 01             	lea    edx,[eax+0x1]
100034bf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100034c2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100034c8:	0f b6 d0             	movzx  edx,al
100034cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034ce:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100034d2:	83 e1 3f             	and    ecx,0x3f
100034d5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100034d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034dc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100034e2:	0f b6 d0             	movzx  edx,al
100034e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034e8:	66 c7 44 90 04 87 00 	mov    WORD PTR [eax+edx*4+0x4],0x87
100034ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100034f8:	0f b6 d0             	movzx  edx,al
100034fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100034fe:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10003503:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003506:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000350c:	8d 50 01             	lea    edx,[eax+0x1]
1000350f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003512:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003518:	0f b6 d0             	movzx  edx,al
1000351b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000351e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003522:	83 e1 3f             	and    ecx,0x3f
10003525:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000352c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003532:	0f b6 d0             	movzx  edx,al
10003535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003538:	66 c7 44 90 04 89 00 	mov    WORD PTR [eax+edx*4+0x4],0x89
1000353f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003542:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003548:	0f b6 d0             	movzx  edx,al
1000354b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000354e:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
10003553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003556:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000355c:	8d 50 01             	lea    edx,[eax+0x1]
1000355f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003562:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003568:	0f b6 d0             	movzx  edx,al
1000356b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000356e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003572:	83 e1 3f             	and    ecx,0x3f
10003575:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003579:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000357c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003582:	0f b6 d0             	movzx  edx,al
10003585:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003588:	66 c7 44 90 04 8f 00 	mov    WORD PTR [eax+edx*4+0x4],0x8f
1000358f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003592:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003598:	0f b6 d0             	movzx  edx,al
1000359b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000359e:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100035a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100035a6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100035ac:	8d 50 01             	lea    edx,[eax+0x1]
100035af:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100035b2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100035b8:	0f b6 d0             	movzx  edx,al
100035bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100035be:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100035c2:	83 e1 3f             	and    ecx,0x3f
100035c5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100035c9:	90                   	nop
100035ca:	c9                   	leave  
100035cb:	c3                   	ret    

100035cc <DMA::getAvailable()>:
100035cc:	fa                   	cli    
100035cd:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100035cf: R_386_32	irqDisableCounter
100035d3:	8d 42 01             	lea    eax,[edx+0x1]
100035d6:	a3 00 00 00 00       	mov    ds:0x0,eax	100035d7: R_386_32	irqDisableCounter
100035db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100035df:	0f b6 88 58 01 00 00 	movzx  ecx,BYTE PTR [eax+0x158]
100035e6:	31 c0                	xor    eax,eax
100035e8:	0f a3 c1             	bt     ecx,eax
100035eb:	73 08                	jae    100035f5 <DMA::getAvailable()+0x29>
100035ed:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100035ef: R_386_32	irqDisableCounter
100035f3:	eb 0f                	jmp    10003604 <DMA::getAvailable()+0x38>
100035f5:	40                   	inc    eax
100035f6:	83 f8 08             	cmp    eax,0x8
100035f9:	75 ed                	jne    100035e8 <DMA::getAvailable()+0x1c>
100035fb:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	100035fd: R_386_32	irqDisableCounter
10003601:	83 c8 ff             	or     eax,0xffffffff
10003604:	85 d2                	test   edx,edx
10003606:	75 01                	jne    10003609 <DMA::getAvailable()+0x3d>
10003608:	fb                   	sti    
10003609:	c3                   	ret    

1000360a <DMA::open(int, int, void*)>:
1000360a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000360e:	c6 80 58 01 00 00 ee 	mov    BYTE PTR [eax+0x158],0xee
10003615:	31 c0                	xor    eax,eax
10003617:	e6 0d                	out    0xd,al
10003619:	e6 da                	out    0xda,al
1000361b:	31 c0                	xor    eax,eax
1000361d:	c3                   	ret    

1000361e <DMA::close(int, int, void*)>:
1000361e:	31 c0                	xor    eax,eax
10003620:	c3                   	ret    
10003621:	90                   	nop

10003622 <DMA::tryLockChannelWithBase(int)>:
10003622:	57                   	push   edi
10003623:	56                   	push   esi
10003624:	53                   	push   ebx
10003625:	83 ec 10             	sub    esp,0x10
10003628:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000362c:	fa                   	cli    
1000362d:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	1000362f: R_386_32	irqDisableCounter
10003633:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10003637:	8d 41 01             	lea    eax,[ecx+0x1]
1000363a:	a3 00 00 00 00       	mov    ds:0x0,eax	1000363b: R_386_32	irqDisableCounter
1000363f:	8d 43 03             	lea    eax,[ebx+0x3]
10003642:	39 d8                	cmp    eax,ebx
10003644:	7c 50                	jl     10003696 <DMA::tryLockChannelWithBase(int)+0x74>
10003646:	0f b6 b7 58 01 00 00 	movzx  esi,BYTE PTR [edi+0x158]
1000364d:	0f a3 de             	bt     esi,ebx
10003650:	73 41                	jae    10003693 <DMA::tryLockChannelWithBase(int)+0x71>
10003652:	83 ec 0c             	sub    esp,0xc
10003655:	88 d9                	mov    cl,bl
10003657:	b8 fe ff ff ff       	mov    eax,0xfffffffe
1000365c:	d3 c0                	rol    eax,cl
1000365e:	21 f0                	and    eax,esi
10003660:	88 87 58 01 00 00    	mov    BYTE PTR [edi+0x158],al
10003666:	6a 18                	push   0x18
10003668:	e8 fc ff ff ff       	call   10003669 <DMA::tryLockChannelWithBase(int)+0x47>	10003669: R_386_PC32	malloc
1000366d:	5a                   	pop    edx
1000366e:	59                   	pop    ecx
1000366f:	53                   	push   ebx
10003670:	50                   	push   eax
10003671:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003675:	e8 fc ff ff ff       	call   10003676 <DMA::tryLockChannelWithBase(int)+0x54>	10003676: R_386_PC32	DMAChannel::DMAChannel(int)
1000367a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000367b: R_386_32	irqDisableCounter
1000367f:	83 c4 10             	add    esp,0x10
10003682:	8d 50 ff             	lea    edx,[eax-0x1]
10003685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003689:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	1000368b: R_386_32	irqDisableCounter
1000368f:	85 d2                	test   edx,edx
10003691:	eb 0d                	jmp    100036a0 <DMA::tryLockChannelWithBase(int)+0x7e>
10003693:	43                   	inc    ebx
10003694:	eb ac                	jmp    10003642 <DMA::tryLockChannelWithBase(int)+0x20>
10003696:	31 c0                	xor    eax,eax
10003698:	89 0d 00 00 00 00    	mov    DWORD PTR ds:0x0,ecx	1000369a: R_386_32	irqDisableCounter
1000369e:	85 c9                	test   ecx,ecx
100036a0:	75 01                	jne    100036a3 <DMA::tryLockChannelWithBase(int)+0x81>
100036a2:	fb                   	sti    
100036a3:	83 c4 10             	add    esp,0x10
100036a6:	5b                   	pop    ebx
100036a7:	5e                   	pop    esi
100036a8:	5f                   	pop    edi
100036a9:	c3                   	ret    

100036aa <DMA::lockChannelWithBase(int)>:
100036aa:	83 ec 0c             	sub    esp,0xc
100036ad:	50                   	push   eax
100036ae:	50                   	push   eax
100036af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100036b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100036b7:	e8 fc ff ff ff       	call   100036b8 <DMA::lockChannelWithBase(int)+0xe>	100036b8: R_386_PC32	DMA::tryLockChannelWithBase(int)
100036bc:	83 c4 10             	add    esp,0x10
100036bf:	85 c0                	test   eax,eax
100036c1:	74 ea                	je     100036ad <DMA::lockChannelWithBase(int)+0x3>
100036c3:	83 c4 0c             	add    esp,0xc
100036c6:	c3                   	ret    
100036c7:	90                   	nop

100036c8 <DMA::tryLockChannel8()>:
100036c8:	83 ec 14             	sub    esp,0x14
100036cb:	6a 00                	push   0x0
100036cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100036d1:	e8 fc ff ff ff       	call   100036d2 <DMA::tryLockChannel8()+0xa>	100036d2: R_386_PC32	DMA::tryLockChannelWithBase(int)
100036d6:	83 c4 1c             	add    esp,0x1c
100036d9:	c3                   	ret    

100036da <DMA::tryLockChannel16()>:
100036da:	83 ec 14             	sub    esp,0x14
100036dd:	6a 04                	push   0x4
100036df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100036e3:	e8 fc ff ff ff       	call   100036e4 <DMA::tryLockChannel16()+0xa>	100036e4: R_386_PC32	DMA::tryLockChannelWithBase(int)
100036e8:	83 c4 1c             	add    esp,0x1c
100036eb:	c3                   	ret    

100036ec <DMA::tryLockChannel(int)>:
100036ec:	56                   	push   esi
100036ed:	53                   	push   ebx
100036ee:	83 ec 14             	sub    esp,0x14
100036f1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100036f5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100036f9:	83 fb 07             	cmp    ebx,0x7
100036fc:	76 14                	jbe    10003712 <DMA::tryLockChannel(int)+0x26>
100036fe:	83 ec 0c             	sub    esp,0xc
10003701:	68 cc 60 00 10       	push   0x100060cc	10003702: R_386_32	.text
10003706:	e8 fc ff ff ff       	call   10003707 <DMA::tryLockChannel(int)+0x1b>	10003707: R_386_PC32	Dbg::kprintf(char const*, ...)
1000370b:	83 c4 10             	add    esp,0x10
1000370e:	31 c0                	xor    eax,eax
10003710:	eb 6b                	jmp    1000377d <DMA::tryLockChannel(int)+0x91>
10003712:	fa                   	cli    
10003713:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10003715: R_386_32	irqDisableCounter
10003719:	8d 41 01             	lea    eax,[ecx+0x1]
1000371c:	a3 00 00 00 00       	mov    ds:0x0,eax	1000371d: R_386_32	irqDisableCounter
10003721:	0f b6 86 58 01 00 00 	movzx  eax,BYTE PTR [esi+0x158]
10003728:	89 c2                	mov    edx,eax
1000372a:	0f a3 d8             	bt     eax,ebx
1000372d:	73 41                	jae    10003770 <DMA::tryLockChannel(int)+0x84>
1000372f:	83 ec 0c             	sub    esp,0xc
10003732:	88 d9                	mov    cl,bl
10003734:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10003739:	d3 c0                	rol    eax,cl
1000373b:	21 d0                	and    eax,edx
1000373d:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10003743:	6a 18                	push   0x18
10003745:	e8 fc ff ff ff       	call   10003746 <DMA::tryLockChannel(int)+0x5a>	10003746: R_386_PC32	malloc
1000374a:	5a                   	pop    edx
1000374b:	59                   	pop    ecx
1000374c:	53                   	push   ebx
1000374d:	50                   	push   eax
1000374e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003752:	e8 fc ff ff ff       	call   10003753 <DMA::tryLockChannel(int)+0x67>	10003753: R_386_PC32	DMAChannel::DMAChannel(int)
10003757:	a1 00 00 00 00       	mov    eax,ds:0x0	10003758: R_386_32	irqDisableCounter
1000375c:	83 c4 10             	add    esp,0x10
1000375f:	8d 50 ff             	lea    edx,[eax-0x1]
10003762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003766:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10003768: R_386_32	irqDisableCounter
1000376c:	85 d2                	test   edx,edx
1000376e:	eb 0a                	jmp    1000377a <DMA::tryLockChannel(int)+0x8e>
10003770:	31 c0                	xor    eax,eax
10003772:	89 0d 00 00 00 00    	mov    DWORD PTR ds:0x0,ecx	10003774: R_386_32	irqDisableCounter
10003778:	85 c9                	test   ecx,ecx
1000377a:	75 01                	jne    1000377d <DMA::tryLockChannel(int)+0x91>
1000377c:	fb                   	sti    
1000377d:	83 c4 14             	add    esp,0x14
10003780:	5b                   	pop    ebx
10003781:	5e                   	pop    esi
10003782:	c3                   	ret    
10003783:	90                   	nop

10003784 <DMA::lockChannel8()>:
10003784:	83 ec 14             	sub    esp,0x14
10003787:	6a 00                	push   0x0
10003789:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000378d:	e8 fc ff ff ff       	call   1000378e <DMA::lockChannel8()+0xa>	1000378e: R_386_PC32	DMA::lockChannelWithBase(int)
10003792:	83 c4 1c             	add    esp,0x1c
10003795:	c3                   	ret    

10003796 <DMA::lockChannel16()>:
10003796:	83 ec 14             	sub    esp,0x14
10003799:	6a 04                	push   0x4
1000379b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000379f:	e8 fc ff ff ff       	call   100037a0 <DMA::lockChannel16()+0xa>	100037a0: R_386_PC32	DMA::lockChannelWithBase(int)
100037a4:	83 c4 1c             	add    esp,0x1c
100037a7:	c3                   	ret    

100037a8 <DMA::lockChannel(int)>:
100037a8:	83 ec 0c             	sub    esp,0xc
100037ab:	50                   	push   eax
100037ac:	50                   	push   eax
100037ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100037b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100037b5:	e8 fc ff ff ff       	call   100037b6 <DMA::lockChannel(int)+0xe>	100037b6: R_386_PC32	DMA::tryLockChannel(int)
100037ba:	83 c4 10             	add    esp,0x10
100037bd:	85 c0                	test   eax,eax
100037bf:	74 ea                	je     100037ab <DMA::lockChannel(int)+0x3>
100037c1:	83 c4 0c             	add    esp,0xc
100037c4:	c3                   	ret    
100037c5:	90                   	nop

100037c6 <DMA::unlockChannel(DMAChannel*)>:
100037c6:	56                   	push   esi
100037c7:	53                   	push   ebx
100037c8:	53                   	push   ebx
100037c9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100037cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100037d1:	85 db                	test   ebx,ebx
100037d3:	75 10                	jne    100037e5 <DMA::unlockChannel(DMAChannel*)+0x1f>
100037d5:	83 ec 0c             	sub    esp,0xc
100037d8:	68 00 00 00 00       	push   0x0	100037d9: R_386_32	badDma
100037dd:	e8 fc ff ff ff       	call   100037de <DMA::unlockChannel(DMAChannel*)+0x18>	100037de: R_386_PC32	Krnl::panic(char const*)
100037e2:	83 c4 10             	add    esp,0x10
100037e5:	fa                   	cli    
100037e6:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	100037e8: R_386_32	irqDisableCounter
100037ec:	0f b6 96 58 01 00 00 	movzx  edx,BYTE PTR [esi+0x158]
100037f3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
100037f5:	89 d0                	mov    eax,edx
100037f7:	0f a3 ca             	bt     edx,ecx
100037fa:	72 24                	jb     10003820 <DMA::unlockChannel(DMAChannel*)+0x5a>
100037fc:	83 ec 0c             	sub    esp,0xc
100037ff:	ba 01 00 00 00       	mov    edx,0x1
10003804:	d3 e2                	shl    edx,cl
10003806:	09 d0                	or     eax,edx
10003808:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
1000380e:	53                   	push   ebx
1000380f:	e8 fc ff ff ff       	call   10003810 <DMA::unlockChannel(DMAChannel*)+0x4a>	10003810: R_386_PC32	DMAChannel::~DMAChannel()
10003814:	5a                   	pop    edx
10003815:	59                   	pop    ecx
10003816:	6a 18                	push   0x18
10003818:	53                   	push   ebx
10003819:	e8 fc ff ff ff       	call   1000381a <DMA::unlockChannel(DMAChannel*)+0x54>	1000381a: R_386_PC32	operator delete(void*, unsigned long)
1000381e:	eb 0d                	jmp    1000382d <DMA::unlockChannel(DMAChannel*)+0x67>
10003820:	83 ec 0c             	sub    esp,0xc
10003823:	68 00 00 00 00       	push   0x0	10003824: R_386_32	badBook
10003828:	e8 fc ff ff ff       	call   10003829 <DMA::unlockChannel(DMAChannel*)+0x63>	10003829: R_386_PC32	Krnl::panic(char const*)
1000382d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000382e: R_386_32	irqDisableCounter
10003832:	83 c4 10             	add    esp,0x10
10003835:	48                   	dec    eax
10003836:	a3 00 00 00 00       	mov    ds:0x0,eax	10003837: R_386_32	irqDisableCounter
1000383b:	75 01                	jne    1000383e <DMA::unlockChannel(DMAChannel*)+0x78>
1000383d:	fb                   	sti    
1000383e:	58                   	pop    eax
1000383f:	5b                   	pop    ebx
10003840:	5e                   	pop    esi
10003841:	c3                   	ret    

10003842 <PS2::PS2()>:
10003842:	55                   	push   ebp
10003843:	89 e5                	mov    ebp,esp
10003845:	83 ec 08             	sub    esp,0x8
10003848:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000384b:	83 ec 08             	sub    esp,0x8
1000384e:	68 00 00 00 00       	push   0x0	1000384f: R_386_32	ps2ctrlname
10003853:	50                   	push   eax
10003854:	e8 fc ff ff ff       	call   10003855 <PS2::PS2()+0x13>	10003855: R_386_PC32	Bus::Bus(char const*)
10003859:	83 c4 10             	add    esp,0x10
1000385c:	ba 08 00 00 00       	mov    edx,0x8	1000385d: R_386_32	vtable for PS2
10003861:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003864:	89 10                	mov    DWORD PTR [eax],edx
10003866:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003869:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000386f:	0f b6 d0             	movzx  edx,al
10003872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003875:	66 c7 44 90 04 60 00 	mov    WORD PTR [eax+edx*4+0x4],0x60
1000387c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000387f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003885:	0f b6 d0             	movzx  edx,al
10003888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000388b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10003890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003893:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003899:	8d 50 01             	lea    edx,[eax+0x1]
1000389c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000389f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100038a5:	0f b6 d0             	movzx  edx,al
100038a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038ab:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100038af:	83 e1 3f             	and    ecx,0x3f
100038b2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100038b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100038bf:	0f b6 d0             	movzx  edx,al
100038c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038c5:	66 c7 44 90 04 64 00 	mov    WORD PTR [eax+edx*4+0x4],0x64
100038cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100038d5:	0f b6 d0             	movzx  edx,al
100038d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038db:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100038e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100038e9:	8d 50 01             	lea    edx,[eax+0x1]
100038ec:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100038ef:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100038f5:	0f b6 d0             	movzx  edx,al
100038f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100038fb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100038ff:	83 e1 3f             	and    ecx,0x3f
10003902:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003906:	90                   	nop
10003907:	c9                   	leave  
10003908:	c3                   	ret    
10003909:	90                   	nop

1000390a <PS2::open(int, int, void*)>:
1000390a:	55                   	push   ebp
1000390b:	89 e5                	mov    ebp,esp
1000390d:	53                   	push   ebx
1000390e:	83 ec 24             	sub    esp,0x24
10003911:	e8 fc ff ff ff       	call   10003912 <PS2::open(int, int, void*)+0x8>	10003912: R_386_PC32	lockScheduler()
10003916:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000391d:	83 ec 08             	sub    esp,0x8
10003920:	68 ad 00 00 00       	push   0xad
10003925:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003928:	e8 fc ff ff ff       	call   10003929 <PS2::open(int, int, void*)+0x1f>	10003929: R_386_PC32	PS2::controllerWrite(unsigned char)
1000392d:	83 c4 10             	add    esp,0x10
10003930:	83 ec 08             	sub    esp,0x8
10003933:	68 a7 00 00 00       	push   0xa7
10003938:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000393b:	e8 fc ff ff ff       	call   1000393c <PS2::open(int, int, void*)+0x32>	1000393c: R_386_PC32	PS2::controllerWrite(unsigned char)
10003940:	83 c4 10             	add    esp,0x10
10003943:	66 c7 45 e4 60 00    	mov    WORD PTR [ebp-0x1c],0x60
10003949:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000394c:	89 c2                	mov    edx,eax
1000394e:	ec                   	in     al,dx
1000394f:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
10003952:	66 c7 45 e8 60 00    	mov    WORD PTR [ebp-0x18],0x60
10003958:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
1000395b:	89 c2                	mov    edx,eax
1000395d:	ec                   	in     al,dx
1000395e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
10003961:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10003967:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000396a:	89 c2                	mov    edx,eax
1000396c:	ec                   	in     al,dx
1000396d:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10003970:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003976:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003979:	89 c2                	mov    edx,eax
1000397b:	ec                   	in     al,dx
1000397c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
1000397f:	83 ec 08             	sub    esp,0x8
10003982:	68 aa 00 00 00       	push   0xaa
10003987:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000398a:	e8 fc ff ff ff       	call   1000398b <PS2::open(int, int, void*)+0x81>	1000398b: R_386_PC32	PS2::controllerWrite(unsigned char)
1000398f:	83 c4 10             	add    esp,0x10
10003992:	83 ec 0c             	sub    esp,0xc
10003995:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003998:	e8 fc ff ff ff       	call   10003999 <PS2::open(int, int, void*)+0x8f>	10003999: R_386_PC32	PS2::controllerRead()
1000399d:	83 c4 10             	add    esp,0x10
100039a0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100039a3:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
100039a7:	74 65                	je     10003a0e <PS2::open(int, int, void*)+0x104>
100039a9:	83 ec 0c             	sub    esp,0xc
100039ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039af:	e8 fc ff ff ff       	call   100039b0 <PS2::open(int, int, void*)+0xa6>	100039b0: R_386_PC32	PS2::controllerRead()
100039b4:	83 c4 10             	add    esp,0x10
100039b7:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100039ba:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
100039be:	74 4e                	je     10003a0e <PS2::open(int, int, void*)+0x104>
100039c0:	83 ec 08             	sub    esp,0x8
100039c3:	68 aa 00 00 00       	push   0xaa
100039c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039cb:	e8 fc ff ff ff       	call   100039cc <PS2::open(int, int, void*)+0xc2>	100039cc: R_386_PC32	PS2::controllerWrite(unsigned char)
100039d0:	83 c4 10             	add    esp,0x10
100039d3:	83 ec 08             	sub    esp,0x8
100039d6:	68 aa 00 00 00       	push   0xaa
100039db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039de:	e8 fc ff ff ff       	call   100039df <PS2::open(int, int, void*)+0xd5>	100039df: R_386_PC32	PS2::controllerWrite(unsigned char)
100039e3:	83 c4 10             	add    esp,0x10
100039e6:	83 ec 0c             	sub    esp,0xc
100039e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100039ec:	e8 fc ff ff ff       	call   100039ed <PS2::open(int, int, void*)+0xe3>	100039ed: R_386_PC32	PS2::controllerRead()
100039f1:	83 c4 10             	add    esp,0x10
100039f4:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100039f7:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
100039fb:	74 11                	je     10003a0e <PS2::open(int, int, void*)+0x104>
100039fd:	83 ec 0c             	sub    esp,0xc
10003a00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a03:	e8 fc ff ff ff       	call   10003a04 <PS2::open(int, int, void*)+0xfa>	10003a04: R_386_PC32	PS2::controllerRead()
10003a08:	83 c4 10             	add    esp,0x10
10003a0b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003a0e:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
10003a15:	83 ec 08             	sub    esp,0x8
10003a18:	6a 20                	push   0x20
10003a1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a1d:	e8 fc ff ff ff       	call   10003a1e <PS2::open(int, int, void*)+0x114>	10003a1e: R_386_PC32	PS2::controllerWrite(unsigned char)
10003a22:	83 c4 10             	add    esp,0x10
10003a25:	83 ec 0c             	sub    esp,0xc
10003a28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a2b:	e8 fc ff ff ff       	call   10003a2c <PS2::open(int, int, void*)+0x122>	10003a2c: R_386_PC32	PS2::controllerRead()
10003a30:	83 c4 10             	add    esp,0x10
10003a33:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10003a36:	80 4d f2 01          	or     BYTE PTR [ebp-0xe],0x1
10003a3a:	80 4d f2 02          	or     BYTE PTR [ebp-0xe],0x2
10003a3e:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
10003a42:	83 ec 04             	sub    esp,0x4
10003a45:	50                   	push   eax
10003a46:	6a 60                	push   0x60
10003a48:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a4b:	e8 fc ff ff ff       	call   10003a4c <PS2::open(int, int, void*)+0x142>	10003a4c: R_386_PC32	PS2::controllerWrite(unsigned char, unsigned char)
10003a50:	83 c4 10             	add    esp,0x10
10003a53:	83 ec 08             	sub    esp,0x8
10003a56:	68 ae 00 00 00       	push   0xae
10003a5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a5e:	e8 fc ff ff ff       	call   10003a5f <PS2::open(int, int, void*)+0x155>	10003a5f: R_386_PC32	PS2::controllerWrite(unsigned char)
10003a63:	83 c4 10             	add    esp,0x10
10003a66:	83 ec 08             	sub    esp,0x8
10003a69:	68 a8 00 00 00       	push   0xa8
10003a6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a71:	e8 fc ff ff ff       	call   10003a72 <PS2::open(int, int, void*)+0x168>	10003a72: R_386_PC32	PS2::controllerWrite(unsigned char)
10003a76:	83 c4 10             	add    esp,0x10
10003a79:	e8 fc ff ff ff       	call   10003a7a <PS2::open(int, int, void*)+0x170>	10003a7a: R_386_PC32	unlockScheduler()
10003a7e:	c7 45 dc 60 01 00 00 	mov    DWORD PTR [ebp-0x24],0x160
10003a85:	83 ec 0c             	sub    esp,0xc
10003a88:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10003a8b:	e8 fc ff ff ff       	call   10003a8c <PS2::open(int, int, void*)+0x182>	10003a8c: R_386_PC32	malloc
10003a90:	83 c4 10             	add    esp,0x10
10003a93:	89 c3                	mov    ebx,eax
10003a95:	83 ec 0c             	sub    esp,0xc
10003a98:	53                   	push   ebx
10003a99:	e8 fc ff ff ff       	call   10003a9a <PS2::open(int, int, void*)+0x190>	10003a9a: R_386_PC32	PS2Port::PS2Port()
10003a9e:	83 c4 10             	add    esp,0x10
10003aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003aa4:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
10003aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003aad:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10003ab0:	8b 92 58 01 00 00    	mov    edx,DWORD PTR [edx+0x158]
10003ab6:	83 ec 08             	sub    esp,0x8
10003ab9:	52                   	push   edx
10003aba:	50                   	push   eax
10003abb:	e8 fc ff ff ff       	call   10003abc <PS2::open(int, int, void*)+0x1b2>	10003abc: R_386_PC32	Device::addChild(Device*)
10003ac0:	83 c4 10             	add    esp,0x10
10003ac3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003ac6:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
10003acc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003acf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10003ad5:	8b 00                	mov    eax,DWORD PTR [eax]
10003ad7:	83 c0 08             	add    eax,0x8
10003ada:	8b 00                	mov    eax,DWORD PTR [eax]
10003adc:	6a 00                	push   0x0
10003ade:	6a 00                	push   0x0
10003ae0:	6a 00                	push   0x0
10003ae2:	52                   	push   edx
10003ae3:	ff d0                	call   eax
10003ae5:	83 c4 10             	add    esp,0x10
10003ae8:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10003aec:	75 6a                	jne    10003b58 <PS2::open(int, int, void*)+0x24e>
10003aee:	c7 45 d8 60 01 00 00 	mov    DWORD PTR [ebp-0x28],0x160
10003af5:	83 ec 0c             	sub    esp,0xc
10003af8:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
10003afb:	e8 fc ff ff ff       	call   10003afc <PS2::open(int, int, void*)+0x1f2>	10003afc: R_386_PC32	malloc
10003b00:	83 c4 10             	add    esp,0x10
10003b03:	89 c3                	mov    ebx,eax
10003b05:	83 ec 0c             	sub    esp,0xc
10003b08:	53                   	push   ebx
10003b09:	e8 fc ff ff ff       	call   10003b0a <PS2::open(int, int, void*)+0x200>	10003b0a: R_386_PC32	PS2Port::PS2Port()
10003b0e:	83 c4 10             	add    esp,0x10
10003b11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b14:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
10003b1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b1d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10003b20:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10003b26:	83 ec 08             	sub    esp,0x8
10003b29:	52                   	push   edx
10003b2a:	50                   	push   eax
10003b2b:	e8 fc ff ff ff       	call   10003b2c <PS2::open(int, int, void*)+0x222>	10003b2c: R_386_PC32	Device::addChild(Device*)
10003b30:	83 c4 10             	add    esp,0x10
10003b33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b36:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
10003b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b3f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10003b45:	8b 00                	mov    eax,DWORD PTR [eax]
10003b47:	83 c0 08             	add    eax,0x8
10003b4a:	8b 00                	mov    eax,DWORD PTR [eax]
10003b4c:	6a 00                	push   0x0
10003b4e:	6a 00                	push   0x0
10003b50:	6a 01                	push   0x1
10003b52:	52                   	push   edx
10003b53:	ff d0                	call   eax
10003b55:	83 c4 10             	add    esp,0x10
10003b58:	b8 00 00 00 00       	mov    eax,0x0
10003b5d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10003b60:	c9                   	leave  
10003b61:	c3                   	ret    

10003b62 <PS2::close(int, int, void*)>:
10003b62:	b8 00 00 00 00       	mov    eax,0x0
10003b67:	c3                   	ret    

10003b68 <PS2::detect()>:
10003b68:	90                   	nop
10003b69:	c3                   	ret    

10003b6a <PS2::controllerWrite(unsigned char)>:
10003b6a:	55                   	push   ebp
10003b6b:	89 e5                	mov    ebp,esp
10003b6d:	83 ec 14             	sub    esp,0x14
10003b70:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10003b73:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
10003b76:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003b7d:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003b83:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003b86:	89 c2                	mov    edx,eax
10003b88:	ec                   	in     al,dx
10003b89:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003b8c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003b8f:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003b92:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003b96:	83 e0 40             	and    eax,0x40
10003b99:	85 c0                	test   eax,eax
10003b9b:	75 2d                	jne    10003bca <PS2::controllerWrite(unsigned char)+0x60>
10003b9d:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003ba0:	84 c0                	test   al,al
10003ba2:	78 26                	js     10003bca <PS2::controllerWrite(unsigned char)+0x60>
10003ba4:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003ba8:	83 e0 02             	and    eax,0x2
10003bab:	85 c0                	test   eax,eax
10003bad:	74 17                	je     10003bc6 <PS2::controllerWrite(unsigned char)+0x5c>
10003baf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003bb2:	8d 50 01             	lea    edx,[eax+0x1]
10003bb5:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003bb8:	3d 20 03 00 00       	cmp    eax,0x320
10003bbd:	0f 94 c0             	sete   al
10003bc0:	84 c0                	test   al,al
10003bc2:	75 05                	jne    10003bc9 <PS2::controllerWrite(unsigned char)+0x5f>
10003bc4:	eb b7                	jmp    10003b7d <PS2::controllerWrite(unsigned char)+0x13>
10003bc6:	90                   	nop
10003bc7:	eb 01                	jmp    10003bca <PS2::controllerWrite(unsigned char)+0x60>
10003bc9:	90                   	nop
10003bca:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
10003bce:	66 c7 45 f4 64 00    	mov    WORD PTR [ebp-0xc],0x64
10003bd4:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003bd7:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003bda:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003bdd:	ee                   	out    dx,al
10003bde:	b0 01                	mov    al,0x1
10003be0:	c9                   	leave  
10003be1:	c3                   	ret    

10003be2 <PS2::controllerWrite(unsigned char, unsigned char)>:
10003be2:	55                   	push   ebp
10003be3:	89 e5                	mov    ebp,esp
10003be5:	83 ec 28             	sub    esp,0x28
10003be8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10003beb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10003bee:	88 55 dc             	mov    BYTE PTR [ebp-0x24],dl
10003bf1:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
10003bf4:	0f b6 45 dc          	movzx  eax,BYTE PTR [ebp-0x24]
10003bf8:	50                   	push   eax
10003bf9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003bfc:	e8 fc ff ff ff       	call   10003bfd <PS2::controllerWrite(unsigned char, unsigned char)+0x1b>	10003bfd: R_386_PC32	PS2::controllerWrite(unsigned char)
10003c01:	83 c4 08             	add    esp,0x8
10003c04:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003c0b:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003c11:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003c14:	89 c2                	mov    edx,eax
10003c16:	ec                   	in     al,dx
10003c17:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003c1a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003c1d:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003c20:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003c24:	83 e0 40             	and    eax,0x40
10003c27:	85 c0                	test   eax,eax
10003c29:	75 07                	jne    10003c32 <PS2::controllerWrite(unsigned char, unsigned char)+0x50>
10003c2b:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003c2e:	84 c0                	test   al,al
10003c30:	79 18                	jns    10003c4a <PS2::controllerWrite(unsigned char, unsigned char)+0x68>
10003c32:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003c36:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10003c3c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003c3f:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003c42:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003c45:	ee                   	out    dx,al
10003c46:	b0 00                	mov    al,0x0
10003c48:	eb 4f                	jmp    10003c99 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10003c4a:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003c4e:	83 e0 02             	and    eax,0x2
10003c51:	85 c0                	test   eax,eax
10003c53:	74 2d                	je     10003c82 <PS2::controllerWrite(unsigned char, unsigned char)+0xa0>
10003c55:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003c58:	8d 50 01             	lea    edx,[eax+0x1]
10003c5b:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003c5e:	3d 20 03 00 00       	cmp    eax,0x320
10003c63:	0f 94 c0             	sete   al
10003c66:	84 c0                	test   al,al
10003c68:	74 a1                	je     10003c0b <PS2::controllerWrite(unsigned char, unsigned char)+0x29>
10003c6a:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003c6e:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003c74:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003c77:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10003c7a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003c7d:	ee                   	out    dx,al
10003c7e:	b0 00                	mov    al,0x0
10003c80:	eb 17                	jmp    10003c99 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10003c82:	90                   	nop
10003c83:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003c87:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10003c8d:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10003c90:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10003c93:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10003c96:	ee                   	out    dx,al
10003c97:	b0 01                	mov    al,0x1
10003c99:	c9                   	leave  
10003c9a:	c3                   	ret    
10003c9b:	90                   	nop

10003c9c <PS2::controllerRead()>:
10003c9c:	55                   	push   ebp
10003c9d:	89 e5                	mov    ebp,esp
10003c9f:	83 ec 20             	sub    esp,0x20
10003ca2:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003ca9:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003caf:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003cb2:	89 c2                	mov    edx,eax
10003cb4:	ec                   	in     al,dx
10003cb5:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003cb8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003cbb:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003cbe:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003cc2:	83 e0 40             	and    eax,0x40
10003cc5:	85 c0                	test   eax,eax
10003cc7:	75 07                	jne    10003cd0 <PS2::controllerRead()+0x34>
10003cc9:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003ccc:	84 c0                	test   al,al
10003cce:	79 04                	jns    10003cd4 <PS2::controllerRead()+0x38>
10003cd0:	b0 00                	mov    al,0x0
10003cd2:	eb 48                	jmp    10003d1c <PS2::controllerRead()+0x80>
10003cd4:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003cd8:	83 e0 01             	and    eax,0x1
10003cdb:	85 c0                	test   eax,eax
10003cdd:	75 29                	jne    10003d08 <PS2::controllerRead()+0x6c>
10003cdf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003ce2:	8d 50 01             	lea    edx,[eax+0x1]
10003ce5:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003ce8:	3d 40 06 00 00       	cmp    eax,0x640
10003ced:	0f 94 c0             	sete   al
10003cf0:	84 c0                	test   al,al
10003cf2:	74 b5                	je     10003ca9 <PS2::controllerRead()+0xd>
10003cf4:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10003cfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003cfd:	89 c2                	mov    edx,eax
10003cff:	ec                   	in     al,dx
10003d00:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003d03:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003d06:	eb 14                	jmp    10003d1c <PS2::controllerRead()+0x80>
10003d08:	90                   	nop
10003d09:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003d0f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003d12:	89 c2                	mov    edx,eax
10003d14:	ec                   	in     al,dx
10003d15:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003d18:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10003d1b:	90                   	nop
10003d1c:	c9                   	leave  
10003d1d:	c3                   	ret    

10003d1e <PS2Keyboard::PS2Keyboard()>:
10003d1e:	55                   	push   ebp
10003d1f:	89 e5                	mov    ebp,esp
10003d21:	83 ec 08             	sub    esp,0x8
10003d24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d27:	83 ec 08             	sub    esp,0x8
10003d2a:	68 00 00 00 00       	push   0x0	10003d2b: R_386_32	ps2keyname
10003d2f:	50                   	push   eax
10003d30:	e8 fc ff ff ff       	call   10003d31 <PS2Keyboard::PS2Keyboard()+0x13>	10003d31: R_386_PC32	Keyboard::Keyboard(char const*)
10003d35:	83 c4 10             	add    esp,0x10
10003d38:	ba 08 00 00 00       	mov    edx,0x8	10003d39: R_386_32	vtable for PS2Keyboard
10003d3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d40:	89 10                	mov    DWORD PTR [eax],edx
10003d42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d45:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10003d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d4f:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10003d56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d59:	c6 80 66 01 00 00 00 	mov    BYTE PTR [eax+0x166],0x0
10003d60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d63:	c6 80 67 01 00 00 00 	mov    BYTE PTR [eax+0x167],0x0
10003d6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d6d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10003d74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d77:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
10003d7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d81:	c6 80 6a 01 00 00 00 	mov    BYTE PTR [eax+0x16a],0x0
10003d88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d8b:	c6 80 6b 01 00 00 00 	mov    BYTE PTR [eax+0x16b],0x0
10003d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d95:	c6 80 6c 01 00 00 00 	mov    BYTE PTR [eax+0x16c],0x0
10003d9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003d9f:	c6 80 6d 01 00 00 00 	mov    BYTE PTR [eax+0x16d],0x0
10003da6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003da9:	c6 80 6e 01 00 00 00 	mov    BYTE PTR [eax+0x16e],0x0
10003db0:	90                   	nop
10003db1:	c9                   	leave  
10003db2:	c3                   	ret    
10003db3:	90                   	nop

10003db4 <PS2Keyboard::~PS2Keyboard()>:
10003db4:	55                   	push   ebp
10003db5:	89 e5                	mov    ebp,esp
10003db7:	83 ec 08             	sub    esp,0x8
10003dba:	ba 08 00 00 00       	mov    edx,0x8	10003dbb: R_386_32	vtable for PS2Keyboard
10003dbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003dc2:	89 10                	mov    DWORD PTR [eax],edx
10003dc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003dc7:	83 ec 0c             	sub    esp,0xc
10003dca:	50                   	push   eax
10003dcb:	e8 fc ff ff ff       	call   10003dcc <PS2Keyboard::~PS2Keyboard()+0x18>	10003dcc: R_386_PC32	Keyboard::~Keyboard()
10003dd0:	83 c4 10             	add    esp,0x10
10003dd3:	90                   	nop
10003dd4:	c9                   	leave  
10003dd5:	c3                   	ret    

10003dd6 <PS2Keyboard::~PS2Keyboard()>:
10003dd6:	55                   	push   ebp
10003dd7:	89 e5                	mov    ebp,esp
10003dd9:	83 ec 08             	sub    esp,0x8
10003ddc:	83 ec 0c             	sub    esp,0xc
10003ddf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003de2:	e8 fc ff ff ff       	call   10003de3 <PS2Keyboard::~PS2Keyboard()+0xd>	10003de3: R_386_PC32	PS2Keyboard::~PS2Keyboard()
10003de7:	83 c4 10             	add    esp,0x10
10003dea:	83 ec 08             	sub    esp,0x8
10003ded:	68 70 01 00 00       	push   0x170
10003df2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003df5:	e8 fc ff ff ff       	call   10003df6 <PS2Keyboard::~PS2Keyboard()+0x20>	10003df6: R_386_PC32	operator delete(void*, unsigned long)
10003dfa:	83 c4 10             	add    esp,0x10
10003dfd:	c9                   	leave  
10003dfe:	c3                   	ret    
10003dff:	90                   	nop

10003e00 <PS2Keyboard::setRepeatRate(int)>:
10003e00:	c3                   	ret    
10003e01:	90                   	nop

10003e02 <PS2Keyboard::setRepeatDelay(int)>:
10003e02:	c3                   	ret    
10003e03:	90                   	nop

10003e04 <PS2Keyboard::sendKey(unsigned short, bool)>:
10003e04:	83 ec 1c             	sub    esp,0x1c
10003e07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003e0b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10003e0f:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10003e13:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003e17:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10003e1c:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10003e23:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10003e29:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10003e2e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10003e32:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10003e36:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003e3a:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10003e3f:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10003e44:	83 c4 1c             	add    esp,0x1c
10003e47:	e9 fc ff ff ff       	jmp    10003e48 <PS2Keyboard::sendKey(unsigned short, bool)+0x44>	10003e48: R_386_PC32	sendKeyboardToken(KeyboardToken)

10003e4c <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)>:
10003e4c:	83 ec 1c             	sub    esp,0x1c
10003e4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003e53:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10003e57:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10003e5b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003e5f:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10003e64:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10003e6b:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10003e71:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10003e76:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10003e7a:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10003e7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003e82:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10003e87:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10003e8c:	83 c4 1c             	add    esp,0x1c
10003e8f:	e9 fc ff ff ff       	jmp    10003e90 <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)+0x44>	10003e90: R_386_PC32	sendKeyboardToken(KeyboardToken)

10003e94 <PS2Keyboard::updateKeyboardLEDs()>:
10003e94:	56                   	push   esi
10003e95:	53                   	push   ebx
10003e96:	83 ec 0c             	sub    esp,0xc
10003e99:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10003e9d:	8a 96 69 01 00 00    	mov    dl,BYTE PTR [esi+0x169]
10003ea3:	0f b6 9e 6a 01 00 00 	movzx  ebx,BYTE PTR [esi+0x16a]
10003eaa:	8d 04 1b             	lea    eax,[ebx+ebx*1]
10003ead:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10003eb4:	09 c3                	or     ebx,eax
10003eb6:	0a 9e 6b 01 00 00    	or     bl,BYTE PTR [esi+0x16b]
10003ebc:	68 ed 00 00 00       	push   0xed
10003ec1:	0f b6 db             	movzx  ebx,bl
10003ec4:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003eca:	e8 fc ff ff ff       	call   10003ecb <PS2Keyboard::updateKeyboardLEDs()+0x37>	10003ecb: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10003ecf:	58                   	pop    eax
10003ed0:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003ed6:	e8 fc ff ff ff       	call   10003ed7 <PS2Keyboard::updateKeyboardLEDs()+0x43>	10003ed7: R_386_PC32	PS2Port::deviceRead()
10003edb:	5a                   	pop    edx
10003edc:	59                   	pop    ecx
10003edd:	53                   	push   ebx
10003ede:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003ee4:	e8 fc ff ff ff       	call   10003ee5 <PS2Keyboard::updateKeyboardLEDs()+0x51>	10003ee5: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10003ee9:	8b 86 60 01 00 00    	mov    eax,DWORD PTR [esi+0x160]
10003eef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003ef3:	83 c4 14             	add    esp,0x14
10003ef6:	5b                   	pop    ebx
10003ef7:	5e                   	pop    esi
10003ef8:	e9 fc ff ff ff       	jmp    10003ef9 <PS2Keyboard::updateKeyboardLEDs()+0x65>	10003ef9: R_386_PC32	PS2Port::deviceRead()

10003efd <ps2KeyboardHandler(regs*, void*)>:
10003efd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003f01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003f05:	eb 01                	jmp    10003f08 <PS2Keyboard::handler()>
10003f07:	90                   	nop

10003f08 <PS2Keyboard::handler()>:
10003f08:	57                   	push   edi
10003f09:	56                   	push   esi
10003f0a:	53                   	push   ebx
10003f0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10003f0f:	e4 60                	in     al,0x60
10003f11:	80 be 6e 01 00 00 00 	cmp    BYTE PTR [esi+0x16e],0x0
10003f18:	74 29                	je     10003f43 <PS2Keyboard::handler()+0x3b>
10003f1a:	88 c2                	mov    dl,al
10003f1c:	3c e0                	cmp    al,0xe0
10003f1e:	75 0c                	jne    10003f2c <PS2Keyboard::handler()+0x24>
10003f20:	c6 86 64 01 00 00 01 	mov    BYTE PTR [esi+0x164],0x1
10003f27:	e9 17 07 00 00       	jmp    10004643 <PS2Keyboard::handler()+0x73b>
10003f2c:	84 c0                	test   al,al
10003f2e:	0f 89 52 01 00 00    	jns    10004086 <PS2Keyboard::handler()+0x17e>
10003f34:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10003f3b:	83 e2 7f             	and    edx,0x7f
10003f3e:	e9 43 01 00 00       	jmp    10004086 <PS2Keyboard::handler()+0x17e>
10003f43:	3c e0                	cmp    al,0xe0
10003f45:	74 d9                	je     10003f20 <PS2Keyboard::handler()+0x18>
10003f47:	3c f0                	cmp    al,0xf0
10003f49:	75 0c                	jne    10003f57 <PS2Keyboard::handler()+0x4f>
10003f4b:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10003f52:	e9 ec 06 00 00       	jmp    10004643 <PS2Keyboard::handler()+0x73b>
10003f57:	3c 12                	cmp    al,0x12
10003f59:	75 1f                	jne    10003f7a <PS2Keyboard::handler()+0x72>
10003f5b:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003f61:	83 f0 01             	xor    eax,0x1
10003f64:	88 86 67 01 00 00    	mov    BYTE PTR [esi+0x167],al
10003f6a:	52                   	push   edx
10003f6b:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f72:	50                   	push   eax
10003f73:	68 04 01 00 00       	push   0x104
10003f78:	eb 23                	jmp    10003f9d <PS2Keyboard::handler()+0x95>
10003f7a:	76 3d                	jbe    10003fb9 <PS2Keyboard::handler()+0xb1>
10003f7c:	3c 14                	cmp    al,0x14
10003f7e:	75 62                	jne    10003fe2 <PS2Keyboard::handler()+0xda>
10003f80:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003f86:	83 f0 01             	xor    eax,0x1
10003f89:	88 86 68 01 00 00    	mov    BYTE PTR [esi+0x168],al
10003f8f:	51                   	push   ecx
10003f90:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f97:	50                   	push   eax
10003f98:	68 00 01 00 00       	push   0x100
10003f9d:	56                   	push   esi
10003f9e:	e8 fc ff ff ff       	call   10003f9f <PS2Keyboard::handler()+0x97>	10003f9f: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
10003fa3:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10003faa:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10003fb1:	83 c4 10             	add    esp,0x10
10003fb4:	e9 8a 06 00 00       	jmp    10004643 <PS2Keyboard::handler()+0x73b>
10003fb9:	3c 11                	cmp    al,0x11
10003fbb:	75 2d                	jne    10003fea <PS2Keyboard::handler()+0xe2>
10003fbd:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003fc3:	83 f0 01             	xor    eax,0x1
10003fc6:	88 86 6d 01 00 00    	mov    BYTE PTR [esi+0x16d],al
10003fcc:	88 86 6c 01 00 00    	mov    BYTE PTR [esi+0x16c],al
10003fd2:	50                   	push   eax
10003fd3:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003fda:	50                   	push   eax
10003fdb:	68 01 01 00 00       	push   0x101
10003fe0:	eb bb                	jmp    10003f9d <PS2Keyboard::handler()+0x95>
10003fe2:	3c 59                	cmp    al,0x59
10003fe4:	0f 84 71 ff ff ff    	je     10003f5b <PS2Keyboard::handler()+0x53>
10003fea:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
10003ff1:	0f 84 b1 01 00 00    	je     100041a8 <PS2Keyboard::handler()+0x2a0>
10003ff7:	3c 6b                	cmp    al,0x6b
10003ff9:	0f 84 f2 00 00 00    	je     100040f1 <PS2Keyboard::handler()+0x1e9>
10003fff:	77 50                	ja     10004051 <PS2Keyboard::handler()+0x149>
10004001:	3c 51                	cmp    al,0x51
10004003:	0f 84 37 01 00 00    	je     10004140 <PS2Keyboard::handler()+0x238>
10004009:	77 23                	ja     1000402e <PS2Keyboard::handler()+0x126>
1000400b:	3c 49                	cmp    al,0x49
1000400d:	0f 84 0d 01 00 00    	je     10004120 <PS2Keyboard::handler()+0x218>
10004013:	3c 4a                	cmp    al,0x4a
10004015:	0f 85 29 04 00 00    	jne    10004444 <PS2Keyboard::handler()+0x53c>
1000401b:	50                   	push   eax
1000401c:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004023:	50                   	push   eax
10004024:	68 1f 03 00 00       	push   0x31f
10004029:	e9 c6 03 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
1000402e:	3c 5a                	cmp    al,0x5a
10004030:	0f 84 5f 01 00 00    	je     10004195 <PS2Keyboard::handler()+0x28d>
10004036:	3c 69                	cmp    al,0x69
10004038:	0f 85 06 04 00 00    	jne    10004444 <PS2Keyboard::handler()+0x53c>
1000403e:	51                   	push   ecx
1000403f:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004046:	50                   	push   eax
10004047:	68 01 02 00 00       	push   0x201
1000404c:	e9 a3 03 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004051:	3c 71                	cmp    al,0x71
10004053:	0f 84 16 01 00 00    	je     1000416f <PS2Keyboard::handler()+0x267>
10004059:	77 15                	ja     10004070 <PS2Keyboard::handler()+0x168>
1000405b:	3c 6c                	cmp    al,0x6c
1000405d:	0f 84 f0 00 00 00    	je     10004153 <PS2Keyboard::handler()+0x24b>
10004063:	3c 70                	cmp    al,0x70
10004065:	0f 84 17 01 00 00    	je     10004182 <PS2Keyboard::handler()+0x27a>
1000406b:	e9 d4 03 00 00       	jmp    10004444 <PS2Keyboard::handler()+0x53c>
10004070:	3c 74                	cmp    al,0x74
10004072:	0f 84 8c 00 00 00    	je     10004104 <PS2Keyboard::handler()+0x1fc>
10004078:	3c 75                	cmp    al,0x75
1000407a:	74 4a                	je     100040c6 <PS2Keyboard::handler()+0x1be>
1000407c:	3c 72                	cmp    al,0x72
1000407e:	0f 85 c0 03 00 00    	jne    10004444 <PS2Keyboard::handler()+0x53c>
10004084:	eb 58                	jmp    100040de <PS2Keyboard::handler()+0x1d6>
10004086:	80 fa 2a             	cmp    dl,0x2a
10004089:	0f 84 cc fe ff ff    	je     10003f5b <PS2Keyboard::handler()+0x53>
1000408f:	0f 87 97 05 00 00    	ja     1000462c <PS2Keyboard::handler()+0x724>
10004095:	80 fa 1d             	cmp    dl,0x1d
10004098:	0f 84 e2 fe ff ff    	je     10003f80 <PS2Keyboard::handler()+0x78>
1000409e:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
100040a5:	0f 84 ce 03 00 00    	je     10004479 <PS2Keyboard::handler()+0x571>
100040ab:	80 fa 4b             	cmp    dl,0x4b
100040ae:	74 41                	je     100040f1 <PS2Keyboard::handler()+0x1e9>
100040b0:	77 27                	ja     100040d9 <PS2Keyboard::handler()+0x1d1>
100040b2:	80 fa 47             	cmp    dl,0x47
100040b5:	0f 84 98 00 00 00    	je     10004153 <PS2Keyboard::handler()+0x24b>
100040bb:	0f 86 96 03 00 00    	jbe    10004457 <PS2Keyboard::handler()+0x54f>
100040c1:	80 fa 48             	cmp    dl,0x48
100040c4:	75 51                	jne    10004117 <PS2Keyboard::handler()+0x20f>
100040c6:	50                   	push   eax
100040c7:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100040ce:	50                   	push   eax
100040cf:	68 0b 02 00 00       	push   0x20b
100040d4:	e9 1b 03 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100040d9:	80 fa 50             	cmp    dl,0x50
100040dc:	75 55                	jne    10004133 <PS2Keyboard::handler()+0x22b>
100040de:	50                   	push   eax
100040df:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100040e6:	50                   	push   eax
100040e7:	68 0c 02 00 00       	push   0x20c
100040ec:	e9 03 03 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100040f1:	50                   	push   eax
100040f2:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100040f9:	50                   	push   eax
100040fa:	68 0d 02 00 00       	push   0x20d
100040ff:	e9 f0 02 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004104:	50                   	push   eax
10004105:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000410c:	50                   	push   eax
1000410d:	68 0e 02 00 00       	push   0x20e
10004112:	e9 dd 02 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004117:	80 fa 49             	cmp    dl,0x49
1000411a:	0f 85 24 03 00 00    	jne    10004444 <PS2Keyboard::handler()+0x53c>
10004120:	50                   	push   eax
10004121:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004128:	50                   	push   eax
10004129:	68 04 02 00 00       	push   0x204
1000412e:	e9 c1 02 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004133:	0f 86 2f 03 00 00    	jbe    10004468 <PS2Keyboard::handler()+0x560>
10004139:	80 fa 52             	cmp    dl,0x52
1000413c:	74 44                	je     10004182 <PS2Keyboard::handler()+0x27a>
1000413e:	73 26                	jae    10004166 <PS2Keyboard::handler()+0x25e>
10004140:	57                   	push   edi
10004141:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004148:	50                   	push   eax
10004149:	68 05 02 00 00       	push   0x205
1000414e:	e9 a1 02 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004153:	53                   	push   ebx
10004154:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000415b:	50                   	push   eax
1000415c:	68 00 02 00 00       	push   0x200
10004161:	e9 8e 02 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004166:	80 fa 53             	cmp    dl,0x53
10004169:	0f 85 d5 02 00 00    	jne    10004444 <PS2Keyboard::handler()+0x53c>
1000416f:	52                   	push   edx
10004170:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004177:	50                   	push   eax
10004178:	68 03 02 00 00       	push   0x203
1000417d:	e9 72 02 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004182:	50                   	push   eax
10004183:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000418a:	50                   	push   eax
1000418b:	68 02 02 00 00       	push   0x202
10004190:	e9 5f 02 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004195:	50                   	push   eax
10004196:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000419d:	50                   	push   eax
1000419e:	68 1d 03 00 00       	push   0x31d
100041a3:	e9 4c 02 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100041a8:	0f b6 96 66 01 00 00 	movzx  edx,BYTE PTR [esi+0x166]
100041af:	3c 66                	cmp    al,0x66
100041b1:	75 09                	jne    100041bc <PS2Keyboard::handler()+0x2b4>
100041b3:	50                   	push   eax
100041b4:	52                   	push   edx
100041b5:	6a 08                	push   0x8
100041b7:	e9 38 02 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100041bc:	3c 0d                	cmp    al,0xd
100041be:	75 09                	jne    100041c9 <PS2Keyboard::handler()+0x2c1>
100041c0:	50                   	push   eax
100041c1:	52                   	push   edx
100041c2:	6a 09                	push   0x9
100041c4:	e9 2b 02 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100041c9:	3c 58                	cmp    al,0x58
100041cb:	75 2a                	jne    100041f7 <PS2Keyboard::handler()+0x2ef>
100041cd:	84 d2                	test   dl,dl
100041cf:	75 13                	jne    100041e4 <PS2Keyboard::handler()+0x2dc>
100041d1:	83 ec 0c             	sub    esp,0xc
100041d4:	80 b6 69 01 00 00 01 	xor    BYTE PTR [esi+0x169],0x1
100041db:	56                   	push   esi
100041dc:	e8 fc ff ff ff       	call   100041dd <PS2Keyboard::handler()+0x2d5>	100041dd: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
100041e1:	83 c4 10             	add    esp,0x10
100041e4:	50                   	push   eax
100041e5:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100041ec:	50                   	push   eax
100041ed:	68 80 02 00 00       	push   0x280
100041f2:	e9 fd 01 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100041f7:	3c 77                	cmp    al,0x77
100041f9:	75 2a                	jne    10004225 <PS2Keyboard::handler()+0x31d>
100041fb:	84 d2                	test   dl,dl
100041fd:	75 13                	jne    10004212 <PS2Keyboard::handler()+0x30a>
100041ff:	83 ec 0c             	sub    esp,0xc
10004202:	80 b6 6a 01 00 00 01 	xor    BYTE PTR [esi+0x16a],0x1
10004209:	56                   	push   esi
1000420a:	e8 fc ff ff ff       	call   1000420b <PS2Keyboard::handler()+0x303>	1000420b: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
1000420f:	83 c4 10             	add    esp,0x10
10004212:	50                   	push   eax
10004213:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000421a:	50                   	push   eax
1000421b:	68 81 02 00 00       	push   0x281
10004220:	e9 cf 01 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004225:	3c 7e                	cmp    al,0x7e
10004227:	75 2a                	jne    10004253 <PS2Keyboard::handler()+0x34b>
10004229:	84 d2                	test   dl,dl
1000422b:	75 13                	jne    10004240 <PS2Keyboard::handler()+0x338>
1000422d:	83 ec 0c             	sub    esp,0xc
10004230:	80 b6 6b 01 00 00 01 	xor    BYTE PTR [esi+0x16b],0x1
10004237:	56                   	push   esi
10004238:	e8 fc ff ff ff       	call   10004239 <PS2Keyboard::handler()+0x331>	10004239: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
1000423d:	83 c4 10             	add    esp,0x10
10004240:	57                   	push   edi
10004241:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004248:	50                   	push   eax
10004249:	68 82 02 00 00       	push   0x282
1000424e:	e9 a1 01 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004253:	3c 05                	cmp    al,0x5
10004255:	75 0c                	jne    10004263 <PS2Keyboard::handler()+0x35b>
10004257:	53                   	push   ebx
10004258:	52                   	push   edx
10004259:	68 00 03 00 00       	push   0x300
1000425e:	e9 91 01 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004263:	3c 06                	cmp    al,0x6
10004265:	75 0c                	jne    10004273 <PS2Keyboard::handler()+0x36b>
10004267:	51                   	push   ecx
10004268:	52                   	push   edx
10004269:	68 01 03 00 00       	push   0x301
1000426e:	e9 81 01 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004273:	3c 04                	cmp    al,0x4
10004275:	75 0c                	jne    10004283 <PS2Keyboard::handler()+0x37b>
10004277:	50                   	push   eax
10004278:	52                   	push   edx
10004279:	68 02 03 00 00       	push   0x302
1000427e:	e9 71 01 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004283:	3c 0c                	cmp    al,0xc
10004285:	75 0c                	jne    10004293 <PS2Keyboard::handler()+0x38b>
10004287:	50                   	push   eax
10004288:	52                   	push   edx
10004289:	68 03 03 00 00       	push   0x303
1000428e:	e9 61 01 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004293:	3c 03                	cmp    al,0x3
10004295:	75 0c                	jne    100042a3 <PS2Keyboard::handler()+0x39b>
10004297:	50                   	push   eax
10004298:	52                   	push   edx
10004299:	68 04 03 00 00       	push   0x304
1000429e:	e9 51 01 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100042a3:	3c 0b                	cmp    al,0xb
100042a5:	75 0c                	jne    100042b3 <PS2Keyboard::handler()+0x3ab>
100042a7:	50                   	push   eax
100042a8:	52                   	push   edx
100042a9:	68 05 03 00 00       	push   0x305
100042ae:	e9 41 01 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100042b3:	3c 02                	cmp    al,0x2
100042b5:	74 04                	je     100042bb <PS2Keyboard::handler()+0x3b3>
100042b7:	3c 83                	cmp    al,0x83
100042b9:	75 0c                	jne    100042c7 <PS2Keyboard::handler()+0x3bf>
100042bb:	50                   	push   eax
100042bc:	52                   	push   edx
100042bd:	68 06 03 00 00       	push   0x306
100042c2:	e9 2d 01 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100042c7:	3c 0a                	cmp    al,0xa
100042c9:	75 0c                	jne    100042d7 <PS2Keyboard::handler()+0x3cf>
100042cb:	50                   	push   eax
100042cc:	52                   	push   edx
100042cd:	68 07 03 00 00       	push   0x307
100042d2:	e9 1d 01 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100042d7:	3c 01                	cmp    al,0x1
100042d9:	75 0c                	jne    100042e7 <PS2Keyboard::handler()+0x3df>
100042db:	57                   	push   edi
100042dc:	52                   	push   edx
100042dd:	68 08 03 00 00       	push   0x308
100042e2:	e9 0d 01 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100042e7:	3c 09                	cmp    al,0x9
100042e9:	75 0c                	jne    100042f7 <PS2Keyboard::handler()+0x3ef>
100042eb:	53                   	push   ebx
100042ec:	52                   	push   edx
100042ed:	68 09 03 00 00       	push   0x309
100042f2:	e9 fd 00 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100042f7:	3c 78                	cmp    al,0x78
100042f9:	75 0c                	jne    10004307 <PS2Keyboard::handler()+0x3ff>
100042fb:	51                   	push   ecx
100042fc:	52                   	push   edx
100042fd:	68 0a 03 00 00       	push   0x30a
10004302:	e9 ed 00 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004307:	3c 07                	cmp    al,0x7
10004309:	75 0c                	jne    10004317 <PS2Keyboard::handler()+0x40f>
1000430b:	50                   	push   eax
1000430c:	52                   	push   edx
1000430d:	68 0b 03 00 00       	push   0x30b
10004312:	e9 dd 00 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004317:	3c 5a                	cmp    al,0x5a
10004319:	75 09                	jne    10004324 <PS2Keyboard::handler()+0x41c>
1000431b:	50                   	push   eax
1000431c:	52                   	push   edx
1000431d:	6a 0a                	push   0xa
1000431f:	e9 d0 00 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004324:	3c 76                	cmp    al,0x76
10004326:	75 0c                	jne    10004334 <PS2Keyboard::handler()+0x42c>
10004328:	50                   	push   eax
10004329:	52                   	push   edx
1000432a:	68 0a 02 00 00       	push   0x20a
1000432f:	e9 c0 00 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004334:	3c 70                	cmp    al,0x70
10004336:	75 0c                	jne    10004344 <PS2Keyboard::handler()+0x43c>
10004338:	50                   	push   eax
10004339:	52                   	push   edx
1000433a:	68 10 03 00 00       	push   0x310
1000433f:	e9 b0 00 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004344:	3c 69                	cmp    al,0x69
10004346:	75 0c                	jne    10004354 <PS2Keyboard::handler()+0x44c>
10004348:	50                   	push   eax
10004349:	52                   	push   edx
1000434a:	68 11 03 00 00       	push   0x311
1000434f:	e9 a0 00 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004354:	3c 72                	cmp    al,0x72
10004356:	75 0c                	jne    10004364 <PS2Keyboard::handler()+0x45c>
10004358:	50                   	push   eax
10004359:	52                   	push   edx
1000435a:	68 12 03 00 00       	push   0x312
1000435f:	e9 90 00 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004364:	3c 7a                	cmp    al,0x7a
10004366:	75 0c                	jne    10004374 <PS2Keyboard::handler()+0x46c>
10004368:	57                   	push   edi
10004369:	52                   	push   edx
1000436a:	68 13 03 00 00       	push   0x313
1000436f:	e9 80 00 00 00       	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004374:	3c 6b                	cmp    al,0x6b
10004376:	75 09                	jne    10004381 <PS2Keyboard::handler()+0x479>
10004378:	53                   	push   ebx
10004379:	52                   	push   edx
1000437a:	68 14 03 00 00       	push   0x314
1000437f:	eb 73                	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
10004381:	3c 73                	cmp    al,0x73
10004383:	75 09                	jne    1000438e <PS2Keyboard::handler()+0x486>
10004385:	51                   	push   ecx
10004386:	52                   	push   edx
10004387:	68 15 03 00 00       	push   0x315
1000438c:	eb 66                	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
1000438e:	3c 74                	cmp    al,0x74
10004390:	75 09                	jne    1000439b <PS2Keyboard::handler()+0x493>
10004392:	50                   	push   eax
10004393:	52                   	push   edx
10004394:	68 16 03 00 00       	push   0x316
10004399:	eb 59                	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
1000439b:	3c 6c                	cmp    al,0x6c
1000439d:	75 09                	jne    100043a8 <PS2Keyboard::handler()+0x4a0>
1000439f:	50                   	push   eax
100043a0:	52                   	push   edx
100043a1:	68 17 03 00 00       	push   0x317
100043a6:	eb 4c                	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100043a8:	3c 75                	cmp    al,0x75
100043aa:	75 09                	jne    100043b5 <PS2Keyboard::handler()+0x4ad>
100043ac:	50                   	push   eax
100043ad:	52                   	push   edx
100043ae:	68 18 03 00 00       	push   0x318
100043b3:	eb 3f                	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100043b5:	3c 7d                	cmp    al,0x7d
100043b7:	75 09                	jne    100043c2 <PS2Keyboard::handler()+0x4ba>
100043b9:	50                   	push   eax
100043ba:	52                   	push   edx
100043bb:	68 19 03 00 00       	push   0x319
100043c0:	eb 32                	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100043c2:	3c 71                	cmp    al,0x71
100043c4:	75 09                	jne    100043cf <PS2Keyboard::handler()+0x4c7>
100043c6:	50                   	push   eax
100043c7:	52                   	push   edx
100043c8:	68 1a 03 00 00       	push   0x31a
100043cd:	eb 25                	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100043cf:	3c 7b                	cmp    al,0x7b
100043d1:	75 09                	jne    100043dc <PS2Keyboard::handler()+0x4d4>
100043d3:	50                   	push   eax
100043d4:	52                   	push   edx
100043d5:	68 1c 03 00 00       	push   0x31c
100043da:	eb 18                	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100043dc:	3c 79                	cmp    al,0x79
100043de:	75 09                	jne    100043e9 <PS2Keyboard::handler()+0x4e1>
100043e0:	57                   	push   edi
100043e1:	52                   	push   edx
100043e2:	68 1b 03 00 00       	push   0x31b
100043e7:	eb 0b                	jmp    100043f4 <PS2Keyboard::handler()+0x4ec>
100043e9:	3c 7c                	cmp    al,0x7c
100043eb:	75 0f                	jne    100043fc <PS2Keyboard::handler()+0x4f4>
100043ed:	53                   	push   ebx
100043ee:	52                   	push   edx
100043ef:	68 1e 03 00 00       	push   0x31e
100043f4:	56                   	push   esi
100043f5:	e8 fc ff ff ff       	call   100043f6 <PS2Keyboard::handler()+0x4ee>	100043f6: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
100043fa:	eb 45                	jmp    10004441 <PS2Keyboard::handler()+0x539>
100043fc:	0f b6 c0             	movzx  eax,al
100043ff:	8a 8e 69 01 00 00    	mov    cl,BYTE PTR [esi+0x169]
10004405:	80 be 67 01 00 00 00 	cmp    BYTE PTR [esi+0x167],0x0
1000440c:	74 16                	je     10004424 <PS2Keyboard::handler()+0x51c>
1000440e:	84 c9                	test   cl,cl
10004410:	74 09                	je     1000441b <PS2Keyboard::handler()+0x513>
10004412:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10004415: R_386_32	PS2Keyboard::internalMapCapUpper
10004419:	eb 1d                	jmp    10004438 <PS2Keyboard::handler()+0x530>
1000441b:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	1000441e: R_386_32	PS2Keyboard::internalMapperUpper
10004422:	eb 14                	jmp    10004438 <PS2Keyboard::handler()+0x530>
10004424:	84 c9                	test   cl,cl
10004426:	74 09                	je     10004431 <PS2Keyboard::handler()+0x529>
10004428:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	1000442b: R_386_32	PS2Keyboard::internalMapCapLower
1000442f:	eb 07                	jmp    10004438 <PS2Keyboard::handler()+0x530>
10004431:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10004434: R_386_32	PS2Keyboard::internalMapperLower
10004438:	51                   	push   ecx
10004439:	52                   	push   edx
1000443a:	50                   	push   eax
1000443b:	56                   	push   esi
1000443c:	e8 fc ff ff ff       	call   1000443d <PS2Keyboard::handler()+0x535>	1000443d: R_386_PC32	PS2Keyboard::sendKey(unsigned short, bool)
10004441:	83 c4 10             	add    esp,0x10
10004444:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
1000444b:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10004452:	e9 ec 01 00 00       	jmp    10004643 <PS2Keyboard::handler()+0x73b>
10004457:	80 fa 1c             	cmp    dl,0x1c
1000445a:	0f 84 35 fd ff ff    	je     10004195 <PS2Keyboard::handler()+0x28d>
10004460:	80 fa 35             	cmp    dl,0x35
10004463:	e9 ad fb ff ff       	jmp    10004015 <PS2Keyboard::handler()+0x10d>
10004468:	80 fa 4d             	cmp    dl,0x4d
1000446b:	0f 84 93 fc ff ff    	je     10004104 <PS2Keyboard::handler()+0x1fc>
10004471:	80 fa 4f             	cmp    dl,0x4f
10004474:	e9 bf fb ff ff       	jmp    10004038 <PS2Keyboard::handler()+0x130>
10004479:	0f b6 8e 66 01 00 00 	movzx  ecx,BYTE PTR [esi+0x166]
10004480:	80 fa 0e             	cmp    dl,0xe
10004483:	75 07                	jne    1000448c <PS2Keyboard::handler()+0x584>
10004485:	50                   	push   eax
10004486:	51                   	push   ecx
10004487:	e9 29 fd ff ff       	jmp    100041b5 <PS2Keyboard::handler()+0x2ad>
1000448c:	80 fa 0f             	cmp    dl,0xf
1000448f:	75 07                	jne    10004498 <PS2Keyboard::handler()+0x590>
10004491:	57                   	push   edi
10004492:	51                   	push   ecx
10004493:	e9 2a fd ff ff       	jmp    100041c2 <PS2Keyboard::handler()+0x2ba>
10004498:	80 fa 3a             	cmp    dl,0x3a
1000449b:	75 07                	jne    100044a4 <PS2Keyboard::handler()+0x59c>
1000449d:	84 c9                	test   cl,cl
1000449f:	e9 2b fd ff ff       	jmp    100041cf <PS2Keyboard::handler()+0x2c7>
100044a4:	80 fa 45             	cmp    dl,0x45
100044a7:	75 07                	jne    100044b0 <PS2Keyboard::handler()+0x5a8>
100044a9:	84 c9                	test   cl,cl
100044ab:	e9 4d fd ff ff       	jmp    100041fd <PS2Keyboard::handler()+0x2f5>
100044b0:	80 fa 46             	cmp    dl,0x46
100044b3:	75 07                	jne    100044bc <PS2Keyboard::handler()+0x5b4>
100044b5:	84 c9                	test   cl,cl
100044b7:	e9 6f fd ff ff       	jmp    1000422b <PS2Keyboard::handler()+0x323>
100044bc:	80 fa 3b             	cmp    dl,0x3b
100044bf:	75 07                	jne    100044c8 <PS2Keyboard::handler()+0x5c0>
100044c1:	53                   	push   ebx
100044c2:	51                   	push   ecx
100044c3:	e9 91 fd ff ff       	jmp    10004259 <PS2Keyboard::handler()+0x351>
100044c8:	80 fa 3c             	cmp    dl,0x3c
100044cb:	75 07                	jne    100044d4 <PS2Keyboard::handler()+0x5cc>
100044cd:	52                   	push   edx
100044ce:	51                   	push   ecx
100044cf:	e9 95 fd ff ff       	jmp    10004269 <PS2Keyboard::handler()+0x361>
100044d4:	80 fa 3d             	cmp    dl,0x3d
100044d7:	75 07                	jne    100044e0 <PS2Keyboard::handler()+0x5d8>
100044d9:	50                   	push   eax
100044da:	51                   	push   ecx
100044db:	e9 99 fd ff ff       	jmp    10004279 <PS2Keyboard::handler()+0x371>
100044e0:	80 fa 3e             	cmp    dl,0x3e
100044e3:	75 07                	jne    100044ec <PS2Keyboard::handler()+0x5e4>
100044e5:	50                   	push   eax
100044e6:	51                   	push   ecx
100044e7:	e9 9d fd ff ff       	jmp    10004289 <PS2Keyboard::handler()+0x381>
100044ec:	80 fa 3f             	cmp    dl,0x3f
100044ef:	75 07                	jne    100044f8 <PS2Keyboard::handler()+0x5f0>
100044f1:	50                   	push   eax
100044f2:	51                   	push   ecx
100044f3:	e9 a1 fd ff ff       	jmp    10004299 <PS2Keyboard::handler()+0x391>
100044f8:	80 fa 40             	cmp    dl,0x40
100044fb:	75 07                	jne    10004504 <PS2Keyboard::handler()+0x5fc>
100044fd:	50                   	push   eax
100044fe:	51                   	push   ecx
100044ff:	e9 a5 fd ff ff       	jmp    100042a9 <PS2Keyboard::handler()+0x3a1>
10004504:	80 fa 41             	cmp    dl,0x41
10004507:	75 07                	jne    10004510 <PS2Keyboard::handler()+0x608>
10004509:	50                   	push   eax
1000450a:	51                   	push   ecx
1000450b:	e9 ad fd ff ff       	jmp    100042bd <PS2Keyboard::handler()+0x3b5>
10004510:	80 fa 42             	cmp    dl,0x42
10004513:	75 07                	jne    1000451c <PS2Keyboard::handler()+0x614>
10004515:	50                   	push   eax
10004516:	51                   	push   ecx
10004517:	e9 b1 fd ff ff       	jmp    100042cd <PS2Keyboard::handler()+0x3c5>
1000451c:	80 fa 43             	cmp    dl,0x43
1000451f:	75 07                	jne    10004528 <PS2Keyboard::handler()+0x620>
10004521:	57                   	push   edi
10004522:	51                   	push   ecx
10004523:	e9 b5 fd ff ff       	jmp    100042dd <PS2Keyboard::handler()+0x3d5>
10004528:	80 fa 44             	cmp    dl,0x44
1000452b:	75 07                	jne    10004534 <PS2Keyboard::handler()+0x62c>
1000452d:	53                   	push   ebx
1000452e:	51                   	push   ecx
1000452f:	e9 b9 fd ff ff       	jmp    100042ed <PS2Keyboard::handler()+0x3e5>
10004534:	84 d2                	test   dl,dl
10004536:	75 07                	jne    1000453f <PS2Keyboard::handler()+0x637>
10004538:	52                   	push   edx
10004539:	51                   	push   ecx
1000453a:	e9 be fd ff ff       	jmp    100042fd <PS2Keyboard::handler()+0x3f5>
1000453f:	80 fa 1c             	cmp    dl,0x1c
10004542:	75 07                	jne    1000454b <PS2Keyboard::handler()+0x643>
10004544:	50                   	push   eax
10004545:	51                   	push   ecx
10004546:	e9 d2 fd ff ff       	jmp    1000431d <PS2Keyboard::handler()+0x415>
1000454b:	80 fa 01             	cmp    dl,0x1
1000454e:	75 07                	jne    10004557 <PS2Keyboard::handler()+0x64f>
10004550:	50                   	push   eax
10004551:	51                   	push   ecx
10004552:	e9 d3 fd ff ff       	jmp    1000432a <PS2Keyboard::handler()+0x422>
10004557:	80 fa 52             	cmp    dl,0x52
1000455a:	75 07                	jne    10004563 <PS2Keyboard::handler()+0x65b>
1000455c:	50                   	push   eax
1000455d:	51                   	push   ecx
1000455e:	e9 d7 fd ff ff       	jmp    1000433a <PS2Keyboard::handler()+0x432>
10004563:	80 fa 4f             	cmp    dl,0x4f
10004566:	75 07                	jne    1000456f <PS2Keyboard::handler()+0x667>
10004568:	50                   	push   eax
10004569:	51                   	push   ecx
1000456a:	e9 db fd ff ff       	jmp    1000434a <PS2Keyboard::handler()+0x442>
1000456f:	80 fa 50             	cmp    dl,0x50
10004572:	75 07                	jne    1000457b <PS2Keyboard::handler()+0x673>
10004574:	50                   	push   eax
10004575:	51                   	push   ecx
10004576:	e9 df fd ff ff       	jmp    1000435a <PS2Keyboard::handler()+0x452>
1000457b:	80 fa 51             	cmp    dl,0x51
1000457e:	75 07                	jne    10004587 <PS2Keyboard::handler()+0x67f>
10004580:	50                   	push   eax
10004581:	51                   	push   ecx
10004582:	e9 e3 fd ff ff       	jmp    1000436a <PS2Keyboard::handler()+0x462>
10004587:	80 fa 4b             	cmp    dl,0x4b
1000458a:	75 07                	jne    10004593 <PS2Keyboard::handler()+0x68b>
1000458c:	57                   	push   edi
1000458d:	51                   	push   ecx
1000458e:	e9 e7 fd ff ff       	jmp    1000437a <PS2Keyboard::handler()+0x472>
10004593:	80 fa 4c             	cmp    dl,0x4c
10004596:	75 07                	jne    1000459f <PS2Keyboard::handler()+0x697>
10004598:	53                   	push   ebx
10004599:	51                   	push   ecx
1000459a:	e9 e8 fd ff ff       	jmp    10004387 <PS2Keyboard::handler()+0x47f>
1000459f:	80 fa 4d             	cmp    dl,0x4d
100045a2:	75 07                	jne    100045ab <PS2Keyboard::handler()+0x6a3>
100045a4:	52                   	push   edx
100045a5:	51                   	push   ecx
100045a6:	e9 e9 fd ff ff       	jmp    10004394 <PS2Keyboard::handler()+0x48c>
100045ab:	80 fa 47             	cmp    dl,0x47
100045ae:	75 07                	jne    100045b7 <PS2Keyboard::handler()+0x6af>
100045b0:	50                   	push   eax
100045b1:	51                   	push   ecx
100045b2:	e9 ea fd ff ff       	jmp    100043a1 <PS2Keyboard::handler()+0x499>
100045b7:	80 fa 48             	cmp    dl,0x48
100045ba:	75 07                	jne    100045c3 <PS2Keyboard::handler()+0x6bb>
100045bc:	50                   	push   eax
100045bd:	51                   	push   ecx
100045be:	e9 eb fd ff ff       	jmp    100043ae <PS2Keyboard::handler()+0x4a6>
100045c3:	80 fa 49             	cmp    dl,0x49
100045c6:	75 07                	jne    100045cf <PS2Keyboard::handler()+0x6c7>
100045c8:	50                   	push   eax
100045c9:	51                   	push   ecx
100045ca:	e9 ec fd ff ff       	jmp    100043bb <PS2Keyboard::handler()+0x4b3>
100045cf:	80 fa 53             	cmp    dl,0x53
100045d2:	75 07                	jne    100045db <PS2Keyboard::handler()+0x6d3>
100045d4:	50                   	push   eax
100045d5:	51                   	push   ecx
100045d6:	e9 ed fd ff ff       	jmp    100043c8 <PS2Keyboard::handler()+0x4c0>
100045db:	80 fa 4a             	cmp    dl,0x4a
100045de:	75 07                	jne    100045e7 <PS2Keyboard::handler()+0x6df>
100045e0:	50                   	push   eax
100045e1:	51                   	push   ecx
100045e2:	e9 ee fd ff ff       	jmp    100043d5 <PS2Keyboard::handler()+0x4cd>
100045e7:	80 fa 4e             	cmp    dl,0x4e
100045ea:	75 07                	jne    100045f3 <PS2Keyboard::handler()+0x6eb>
100045ec:	50                   	push   eax
100045ed:	51                   	push   ecx
100045ee:	e9 ef fd ff ff       	jmp    100043e2 <PS2Keyboard::handler()+0x4da>
100045f3:	80 fa 37             	cmp    dl,0x37
100045f6:	75 07                	jne    100045ff <PS2Keyboard::handler()+0x6f7>
100045f8:	57                   	push   edi
100045f9:	51                   	push   ecx
100045fa:	e9 f0 fd ff ff       	jmp    100043ef <PS2Keyboard::handler()+0x4e7>
100045ff:	0f b6 be 67 01 00 00 	movzx  edi,BYTE PTR [esi+0x167]
10004606:	0f b6 86 69 01 00 00 	movzx  eax,BYTE PTR [esi+0x169]
1000460d:	c1 e7 07             	shl    edi,0x7
10004610:	c1 e0 08             	shl    eax,0x8
10004613:	8d bc 07 00 00 00 00 	lea    edi,[edi+eax*1+0x0]	10004616: R_386_32	PS2Keyboard::internalMapperLowerBad
1000461a:	88 d0                	mov    al,dl
1000461c:	89 fb                	mov    ebx,edi
1000461e:	d7                   	xlat   BYTE PTR ds:[ebx]
1000461f:	88 c2                	mov    dl,al
10004621:	0f b6 d2             	movzx  edx,dl
10004624:	53                   	push   ebx
10004625:	51                   	push   ecx
10004626:	52                   	push   edx
10004627:	e9 0f fe ff ff       	jmp    1000443b <PS2Keyboard::handler()+0x533>
1000462c:	80 fa 36             	cmp    dl,0x36
1000462f:	0f 84 26 f9 ff ff    	je     10003f5b <PS2Keyboard::handler()+0x53>
10004635:	80 fa 38             	cmp    dl,0x38
10004638:	0f 84 7f f9 ff ff    	je     10003fbd <PS2Keyboard::handler()+0xb5>
1000463e:	e9 5b fa ff ff       	jmp    1000409e <PS2Keyboard::handler()+0x196>
10004643:	5b                   	pop    ebx
10004644:	5e                   	pop    esi
10004645:	5f                   	pop    edi
10004646:	c3                   	ret    
10004647:	90                   	nop

10004648 <PS2Keyboard::open(int, int, void*)>:
10004648:	53                   	push   ebx
10004649:	83 ec 14             	sub    esp,0x14
1000464c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10004650:	8b 83 c8 00 00 00    	mov    eax,DWORD PTR [ebx+0xc8]
10004656:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
1000465c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004660:	89 83 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],eax
10004666:	53                   	push   ebx
10004667:	6a 01                	push   0x1
10004669:	68 00 00 00 00       	push   0x0	1000466a: R_386_32	ps2KeyboardHandler(regs*, void*)
1000466e:	6a 01                	push   0x1
10004670:	53                   	push   ebx
10004671:	e8 fc ff ff ff       	call   10004672 <PS2Keyboard::open(int, int, void*)+0x2a>	10004672: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10004676:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
1000467c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000467d: R_386_32	sysBootSettings
10004681:	c1 e8 02             	shr    eax,0x2
10004684:	83 f0 01             	xor    eax,0x1
10004687:	83 e0 01             	and    eax,0x1
1000468a:	88 83 6e 01 00 00    	mov    BYTE PTR [ebx+0x16e],al
10004690:	31 c0                	xor    eax,eax
10004692:	83 c4 28             	add    esp,0x28
10004695:	5b                   	pop    ebx
10004696:	c3                   	ret    
10004697:	90                   	nop

10004698 <PS2Keyboard::close(int, int, void*)>:
10004698:	83 c8 ff             	or     eax,0xffffffff
1000469b:	c3                   	ret    

1000469c <PS2Mouse::PS2Mouse()>:
1000469c:	55                   	push   ebp
1000469d:	89 e5                	mov    ebp,esp
1000469f:	83 ec 08             	sub    esp,0x8
100046a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046a5:	83 ec 08             	sub    esp,0x8
100046a8:	68 00 00 00 00       	push   0x0	100046a9: R_386_32	ps2mousename
100046ad:	50                   	push   eax
100046ae:	e8 fc ff ff ff       	call   100046af <PS2Mouse::PS2Mouse()+0x13>	100046af: R_386_PC32	Mouse::Mouse(char const*)
100046b3:	83 c4 10             	add    esp,0x10
100046b6:	ba 08 00 00 00       	mov    edx,0x8	100046b7: R_386_32	vtable for PS2Mouse
100046bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046be:	89 10                	mov    DWORD PTR [eax],edx
100046c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046c3:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100046ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046cd:	c7 80 62 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x162],0x0
100046d7:	90                   	nop
100046d8:	c9                   	leave  
100046d9:	c3                   	ret    

100046da <ps2MouseHandler(regs*, void*)>:
100046da:	55                   	push   ebp
100046db:	89 e5                	mov    ebp,esp
100046dd:	83 ec 08             	sub    esp,0x8
100046e0:	83 ec 0c             	sub    esp,0xc
100046e3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100046e6:	e8 fc ff ff ff       	call   100046e7 <ps2MouseHandler(regs*, void*)+0xd>	100046e7: R_386_PC32	PS2Mouse::handler()
100046eb:	83 c4 10             	add    esp,0x10
100046ee:	90                   	nop
100046ef:	c9                   	leave  
100046f0:	c3                   	ret    
100046f1:	90                   	nop

100046f2 <PS2Mouse::handler()>:
100046f2:	55                   	push   ebp
100046f3:	89 e5                	mov    ebp,esp
100046f5:	83 ec 28             	sub    esp,0x28
100046f8:	66 c7 45 ea 64 00    	mov    WORD PTR [ebp-0x16],0x64
100046fe:	66 8b 45 ea          	mov    ax,WORD PTR [ebp-0x16]
10004702:	89 c2                	mov    edx,eax
10004704:	ec                   	in     al,dx
10004705:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
10004708:	8a 45 e9             	mov    al,BYTE PTR [ebp-0x17]
1000470b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
1000470e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10004712:	83 e0 01             	and    eax,0x1
10004715:	85 c0                	test   eax,eax
10004717:	0f 84 8d 01 00 00    	je     100048aa <PS2Mouse::handler()+0x1b8>
1000471d:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10004721:	83 e0 20             	and    eax,0x20
10004724:	85 c0                	test   eax,eax
10004726:	0f 84 81 01 00 00    	je     100048ad <PS2Mouse::handler()+0x1bb>
1000472c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000472f:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10004735:	8d 50 01             	lea    edx,[eax+0x1]
10004738:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000473b:	88 91 61 01 00 00    	mov    BYTE PTR [ecx+0x161],dl
10004741:	0f b6 c8             	movzx  ecx,al
10004744:	66 c7 45 e6 60 00    	mov    WORD PTR [ebp-0x1a],0x60
1000474a:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
1000474e:	89 c2                	mov    edx,eax
10004750:	ec                   	in     al,dx
10004751:	88 45 e5             	mov    BYTE PTR [ebp-0x1b],al
10004754:	8a 55 e5             	mov    dl,BYTE PTR [ebp-0x1b]
10004757:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000475a:	88 94 08 62 01 00 00 	mov    BYTE PTR [eax+ecx*1+0x162],dl
10004761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004764:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
1000476a:	0f b6 c0             	movzx  eax,al
1000476d:	83 e0 08             	and    eax,0x8
10004770:	85 c0                	test   eax,eax
10004772:	75 0f                	jne    10004783 <PS2Mouse::handler()+0x91>
10004774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004777:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
1000477e:	e9 2b 01 00 00       	jmp    100048ae <PS2Mouse::handler()+0x1bc>
10004783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004786:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
1000478c:	84 c0                	test   al,al
1000478e:	75 0d                	jne    1000479d <PS2Mouse::handler()+0xab>
10004790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004793:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10004799:	3c 02                	cmp    al,0x2
1000479b:	77 2f                	ja     100047cc <PS2Mouse::handler()+0xda>
1000479d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047a0:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
100047a6:	3c 03                	cmp    al,0x3
100047a8:	74 11                	je     100047bb <PS2Mouse::handler()+0xc9>
100047aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047ad:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
100047b3:	3c 04                	cmp    al,0x4
100047b5:	0f 85 f3 00 00 00    	jne    100048ae <PS2Mouse::handler()+0x1bc>
100047bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047be:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
100047c4:	3c 03                	cmp    al,0x3
100047c6:	0f 86 e2 00 00 00    	jbe    100048ae <PS2Mouse::handler()+0x1bc>
100047cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047cf:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100047d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047d9:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100047df:	84 c0                	test   al,al
100047e1:	78 13                	js     100047f6 <PS2Mouse::handler()+0x104>
100047e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047e6:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100047ec:	0f b6 c0             	movzx  eax,al
100047ef:	83 e0 40             	and    eax,0x40
100047f2:	85 c0                	test   eax,eax
100047f4:	74 37                	je     1000482d <PS2Mouse::handler()+0x13b>
100047f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047f9:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10004800:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004803:	c6 80 62 01 00 00 00 	mov    BYTE PTR [eax+0x162],0x0
1000480a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000480d:	c6 80 63 01 00 00 00 	mov    BYTE PTR [eax+0x163],0x0
10004814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004817:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
1000481e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004821:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10004828:	e9 81 00 00 00       	jmp    100048ae <PS2Mouse::handler()+0x1bc>
1000482d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004830:	8a 80 63 01 00 00    	mov    al,BYTE PTR [eax+0x163]
10004836:	0f b6 d0             	movzx  edx,al
10004839:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000483c:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10004842:	0f b6 c0             	movzx  eax,al
10004845:	c1 e0 04             	shl    eax,0x4
10004848:	25 00 01 00 00       	and    eax,0x100
1000484d:	29 c2                	sub    edx,eax
1000484f:	89 d0                	mov    eax,edx
10004851:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10004854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004857:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
1000485d:	0f b6 c0             	movzx  eax,al
10004860:	c1 e0 03             	shl    eax,0x3
10004863:	25 00 01 00 00       	and    eax,0x100
10004868:	89 c2                	mov    edx,eax
1000486a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000486d:	8a 80 64 01 00 00    	mov    al,BYTE PTR [eax+0x164]
10004873:	0f b6 c0             	movzx  eax,al
10004876:	29 c2                	sub    edx,eax
10004878:	89 d0                	mov    eax,edx
1000487a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
1000487d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000487e: R_386_32	guiMouseHandler
10004882:	85 c0                	test   eax,eax
10004884:	74 28                	je     100048ae <PS2Mouse::handler()+0x1bc>
10004886:	a1 00 00 00 00       	mov    eax,ds:0x0	10004887: R_386_32	guiMouseHandler
1000488b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000488e:	8a 92 62 01 00 00    	mov    dl,BYTE PTR [edx+0x162]
10004894:	0f b6 d2             	movzx  edx,dl
10004897:	83 e2 01             	and    edx,0x1
1000489a:	6a 00                	push   0x0
1000489c:	52                   	push   edx
1000489d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100048a0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100048a3:	ff d0                	call   eax
100048a5:	83 c4 10             	add    esp,0x10
100048a8:	eb 04                	jmp    100048ae <PS2Mouse::handler()+0x1bc>
100048aa:	90                   	nop
100048ab:	eb 01                	jmp    100048ae <PS2Mouse::handler()+0x1bc>
100048ad:	90                   	nop
100048ae:	c9                   	leave  
100048af:	c3                   	ret    

100048b0 <PS2Mouse::open(int, int, void*)>:
100048b0:	55                   	push   ebp
100048b1:	89 e5                	mov    ebp,esp
100048b3:	83 ec 08             	sub    esp,0x8
100048b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048b9:	8b 90 c8 00 00 00    	mov    edx,DWORD PTR [eax+0xc8]
100048bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048c2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
100048c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048cb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100048ce:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
100048d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048d7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100048dd:	83 ec 08             	sub    esp,0x8
100048e0:	68 f6 00 00 00       	push   0xf6
100048e5:	50                   	push   eax
100048e6:	e8 fc ff ff ff       	call   100048e7 <PS2Mouse::open(int, int, void*)+0x37>	100048e7: R_386_PC32	PS2Port::deviceWrite(unsigned char)
100048eb:	83 c4 10             	add    esp,0x10
100048ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048f1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100048f7:	83 ec 0c             	sub    esp,0xc
100048fa:	50                   	push   eax
100048fb:	e8 fc ff ff ff       	call   100048fc <PS2Mouse::open(int, int, void*)+0x4c>	100048fc: R_386_PC32	PS2Port::deviceRead()
10004900:	83 c4 10             	add    esp,0x10
10004903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004906:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000490c:	83 ec 08             	sub    esp,0x8
1000490f:	68 f4 00 00 00       	push   0xf4
10004914:	50                   	push   eax
10004915:	e8 fc ff ff ff       	call   10004916 <PS2Mouse::open(int, int, void*)+0x66>	10004916: R_386_PC32	PS2Port::deviceWrite(unsigned char)
1000491a:	83 c4 10             	add    esp,0x10
1000491d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004920:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004926:	83 ec 0c             	sub    esp,0xc
10004929:	50                   	push   eax
1000492a:	e8 fc ff ff ff       	call   1000492b <PS2Mouse::open(int, int, void*)+0x7b>	1000492b: R_386_PC32	PS2Port::deviceRead()
1000492f:	83 c4 10             	add    esp,0x10
10004932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004935:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
1000493c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000493f:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
10004946:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004949:	83 ec 0c             	sub    esp,0xc
1000494c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000494f:	6a 01                	push   0x1
10004951:	68 00 00 00 00       	push   0x0	10004952: R_386_32	ps2MouseHandler(regs*, void*)
10004956:	6a 0c                	push   0xc
10004958:	50                   	push   eax
10004959:	e8 fc ff ff ff       	call   1000495a <PS2Mouse::open(int, int, void*)+0xaa>	1000495a: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
1000495e:	83 c4 20             	add    esp,0x20
10004961:	b8 00 00 00 00       	mov    eax,0x0
10004966:	c9                   	leave  
10004967:	c3                   	ret    

10004968 <PS2Mouse::close(int, int, void*)>:
10004968:	b8 00 00 00 00       	mov    eax,0x0
1000496d:	c3                   	ret    

1000496e <PS2Mouse::detect()>:
1000496e:	90                   	nop
1000496f:	c3                   	ret    

10004970 <PS2Port::PS2Port()>:
10004970:	55                   	push   ebp
10004971:	89 e5                	mov    ebp,esp
10004973:	83 ec 08             	sub    esp,0x8
10004976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004979:	83 ec 08             	sub    esp,0x8
1000497c:	68 00 00 00 00       	push   0x0	1000497d: R_386_32	ps2portname
10004981:	50                   	push   eax
10004982:	e8 fc ff ff ff       	call   10004983 <PS2Port::PS2Port()+0x13>	10004983: R_386_PC32	Bus::Bus(char const*)
10004987:	83 c4 10             	add    esp,0x10
1000498a:	ba 08 00 00 00       	mov    edx,0x8	1000498b: R_386_32	vtable for PS2Port
1000498f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004992:	89 10                	mov    DWORD PTR [eax],edx
10004994:	90                   	nop
10004995:	c9                   	leave  
10004996:	c3                   	ret    
10004997:	90                   	nop

10004998 <PS2Port::open(int, int, void*)>:
10004998:	55                   	push   ebp
10004999:	89 e5                	mov    ebp,esp
1000499b:	83 ec 08             	sub    esp,0x8
1000499e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049a1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100049a4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
100049aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049ad:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100049b0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
100049b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049b9:	8b 00                	mov    eax,DWORD PTR [eax]
100049bb:	83 c0 18             	add    eax,0x18
100049be:	8b 00                	mov    eax,DWORD PTR [eax]
100049c0:	83 ec 0c             	sub    esp,0xc
100049c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100049c6:	ff d0                	call   eax
100049c8:	83 c4 10             	add    esp,0x10
100049cb:	b8 00 00 00 00       	mov    eax,0x0
100049d0:	c9                   	leave  
100049d1:	c3                   	ret    

100049d2 <PS2Port::close(int, int, void*)>:
100049d2:	b8 00 00 00 00       	mov    eax,0x0
100049d7:	c3                   	ret    

100049d8 <PS2Port::detect()>:
100049d8:	55                   	push   ebp
100049d9:	89 e5                	mov    ebp,esp
100049db:	53                   	push   ebx
100049dc:	83 ec 14             	sub    esp,0x14
100049df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100049e8:	85 c0                	test   eax,eax
100049ea:	75 5a                	jne    10004a46 <PS2Port::detect()+0x6e>
100049ec:	c7 45 ec 70 01 00 00 	mov    DWORD PTR [ebp-0x14],0x170
100049f3:	83 ec 0c             	sub    esp,0xc
100049f6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100049f9:	e8 fc ff ff ff       	call   100049fa <PS2Port::detect()+0x22>	100049fa: R_386_PC32	malloc
100049fe:	83 c4 10             	add    esp,0x10
10004a01:	89 c3                	mov    ebx,eax
10004a03:	83 ec 0c             	sub    esp,0xc
10004a06:	53                   	push   ebx
10004a07:	e8 fc ff ff ff       	call   10004a08 <PS2Port::detect()+0x30>	10004a08: R_386_PC32	PS2Keyboard::PS2Keyboard()
10004a0c:	83 c4 10             	add    esp,0x10
10004a0f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10004a12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a15:	83 ec 08             	sub    esp,0x8
10004a18:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10004a1b:	50                   	push   eax
10004a1c:	e8 fc ff ff ff       	call   10004a1d <PS2Port::detect()+0x45>	10004a1d: R_386_PC32	Device::addChild(Device*)
10004a21:	83 c4 10             	add    esp,0x10
10004a24:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004a27:	8b 00                	mov    eax,DWORD PTR [eax]
10004a29:	83 c0 08             	add    eax,0x8
10004a2c:	8b 00                	mov    eax,DWORD PTR [eax]
10004a2e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10004a31:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10004a37:	52                   	push   edx
10004a38:	6a 00                	push   0x0
10004a3a:	6a 00                	push   0x0
10004a3c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10004a3f:	ff d0                	call   eax
10004a41:	83 c4 10             	add    esp,0x10
10004a44:	eb 66                	jmp    10004aac <PS2Port::detect()+0xd4>
10004a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a49:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10004a4f:	83 f8 01             	cmp    eax,0x1
10004a52:	75 58                	jne    10004aac <PS2Port::detect()+0xd4>
10004a54:	c7 45 e8 68 01 00 00 	mov    DWORD PTR [ebp-0x18],0x168
10004a5b:	83 ec 0c             	sub    esp,0xc
10004a5e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
10004a61:	e8 fc ff ff ff       	call   10004a62 <PS2Port::detect()+0x8a>	10004a62: R_386_PC32	malloc
10004a66:	83 c4 10             	add    esp,0x10
10004a69:	89 c3                	mov    ebx,eax
10004a6b:	83 ec 0c             	sub    esp,0xc
10004a6e:	53                   	push   ebx
10004a6f:	e8 fc ff ff ff       	call   10004a70 <PS2Port::detect()+0x98>	10004a70: R_386_PC32	PS2Mouse::PS2Mouse()
10004a74:	83 c4 10             	add    esp,0x10
10004a77:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
10004a7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a7d:	83 ec 08             	sub    esp,0x8
10004a80:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10004a83:	50                   	push   eax
10004a84:	e8 fc ff ff ff       	call   10004a85 <PS2Port::detect()+0xad>	10004a85: R_386_PC32	Device::addChild(Device*)
10004a89:	83 c4 10             	add    esp,0x10
10004a8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10004a8f:	8b 00                	mov    eax,DWORD PTR [eax]
10004a91:	83 c0 08             	add    eax,0x8
10004a94:	8b 00                	mov    eax,DWORD PTR [eax]
10004a96:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10004a99:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10004a9f:	52                   	push   edx
10004aa0:	6a 00                	push   0x0
10004aa2:	6a 01                	push   0x1
10004aa4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10004aa7:	ff d0                	call   eax
10004aa9:	83 c4 10             	add    esp,0x10
10004aac:	90                   	nop
10004aad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10004ab0:	c9                   	leave  
10004ab1:	c3                   	ret    

10004ab2 <PS2Port::deviceWrite(unsigned char)>:
10004ab2:	55                   	push   ebp
10004ab3:	89 e5                	mov    ebp,esp
10004ab5:	83 ec 28             	sub    esp,0x28
10004ab8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10004abb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10004abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004ac1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10004ac7:	83 f8 01             	cmp    eax,0x1
10004aca:	75 1a                	jne    10004ae6 <PS2Port::deviceWrite(unsigned char)+0x34>
10004acc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004acf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004ad5:	83 ec 08             	sub    esp,0x8
10004ad8:	68 d4 00 00 00       	push   0xd4
10004add:	50                   	push   eax
10004ade:	e8 fc ff ff ff       	call   10004adf <PS2Port::deviceWrite(unsigned char)+0x2d>	10004adf: R_386_PC32	PS2::controllerWrite(unsigned char)
10004ae3:	83 c4 10             	add    esp,0x10
10004ae6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10004aed:	66 c7 45 f0 64 00    	mov    WORD PTR [ebp-0x10],0x64
10004af3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10004af6:	89 c2                	mov    edx,eax
10004af8:	ec                   	in     al,dx
10004af9:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10004afc:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10004aff:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10004b02:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10004b06:	83 e0 02             	and    eax,0x2
10004b09:	85 c0                	test   eax,eax
10004b0b:	74 29                	je     10004b36 <PS2Port::deviceWrite(unsigned char)+0x84>
10004b0d:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10004b11:	83 e0 40             	and    eax,0x40
10004b14:	85 c0                	test   eax,eax
10004b16:	75 22                	jne    10004b3a <PS2Port::deviceWrite(unsigned char)+0x88>
10004b18:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10004b1b:	84 c0                	test   al,al
10004b1d:	78 1b                	js     10004b3a <PS2Port::deviceWrite(unsigned char)+0x88>
10004b1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004b22:	8d 50 01             	lea    edx,[eax+0x1]
10004b25:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
10004b28:	3d 40 06 00 00       	cmp    eax,0x640
10004b2d:	0f 94 c0             	sete   al
10004b30:	84 c0                	test   al,al
10004b32:	75 05                	jne    10004b39 <PS2Port::deviceWrite(unsigned char)+0x87>
10004b34:	eb b7                	jmp    10004aed <PS2Port::deviceWrite(unsigned char)+0x3b>
10004b36:	90                   	nop
10004b37:	eb 01                	jmp    10004b3a <PS2Port::deviceWrite(unsigned char)+0x88>
10004b39:	90                   	nop
10004b3a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10004b3e:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10004b44:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10004b47:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10004b4a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10004b4d:	ee                   	out    dx,al
10004b4e:	b0 01                	mov    al,0x1
10004b50:	c9                   	leave  
10004b51:	c3                   	ret    

10004b52 <PS2Port::deviceRead()>:
10004b52:	55                   	push   ebp
10004b53:	89 e5                	mov    ebp,esp
10004b55:	83 ec 08             	sub    esp,0x8
10004b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004b5b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004b61:	83 ec 0c             	sub    esp,0xc
10004b64:	50                   	push   eax
10004b65:	e8 fc ff ff ff       	call   10004b66 <PS2Port::deviceRead()+0x14>	10004b66: R_386_PC32	PS2::controllerRead()
10004b6a:	83 c4 10             	add    esp,0x10
10004b6d:	c9                   	leave  
10004b6e:	c3                   	ret    
10004b6f:	90                   	nop

10004b70 <sb16Demo(void*)>:
10004b70:	55                   	push   ebp
10004b71:	57                   	push   edi
10004b72:	56                   	push   esi
10004b73:	53                   	push   ebx
10004b74:	83 ec 2c             	sub    esp,0x2c
10004b77:	a1 00 00 00 00       	mov    eax,ds:0x0	10004b78: R_386_32	irqDisableCounter
10004b7c:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
10004b80:	48                   	dec    eax
10004b81:	a3 00 00 00 00       	mov    ds:0x0,eax	10004b82: R_386_32	irqDisableCounter
10004b86:	75 01                	jne    10004b89 <sb16Demo(void*)+0x19>
10004b88:	fb                   	sti    
10004b89:	83 ec 0c             	sub    esp,0xc
10004b8c:	6a 1c                	push   0x1c
10004b8e:	e8 fc ff ff ff       	call   10004b8f <sb16Demo(void*)+0x1f>	10004b8f: R_386_PC32	malloc
10004b93:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
10004b9a:	89 c3                	mov    ebx,eax
10004b9c:	6a 02                	push   0x2
10004b9e:	6a 10                	push   0x10
10004ba0:	68 22 56 00 00       	push   0x5622
10004ba5:	50                   	push   eax
10004ba6:	e8 fc ff ff ff       	call   10004ba7 <sb16Demo(void*)+0x37>	10004ba7: R_386_PC32	SoundPort::SoundPort(int, int, int, int)
10004bab:	83 c4 14             	add    esp,0x14
10004bae:	68 14 01 00 00       	push   0x114
10004bb3:	e8 fc ff ff ff       	call   10004bb4 <sb16Demo(void*)+0x44>	10004bb4: R_386_PC32	malloc
10004bb8:	83 c4 0c             	add    esp,0xc
10004bbb:	89 c6                	mov    esi,eax
10004bbd:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10004bbf: R_386_32	kernelProcess
10004bc3:	68 f0 6a 00 10       	push   0x10006af0	10004bc4: R_386_32	.text
10004bc8:	50                   	push   eax
10004bc9:	e8 fc ff ff ff       	call   10004bca <sb16Demo(void*)+0x5a>	10004bca: R_386_PC32	File::File(char const*, Process*)
10004bce:	5d                   	pop    ebp
10004bcf:	31 ed                	xor    ebp,ebp
10004bd1:	58                   	pop    eax
10004bd2:	6a 01                	push   0x1
10004bd4:	56                   	push   esi
10004bd5:	e8 fc ff ff ff       	call   10004bd6 <sb16Demo(void*)+0x66>	10004bd6: R_386_PC32	File::open(FileOpenMode)
10004bda:	83 c4 10             	add    esp,0x10
10004bdd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10004be5:	8b 06                	mov    eax,DWORD PTR [esi]
10004be7:	83 ec 0c             	sub    esp,0xc
10004bea:	8d 54 24 28          	lea    edx,[esp+0x28]
10004bee:	52                   	push   edx
10004bef:	68 00 00 00 00       	push   0x0	10004bf0: R_386_32	buf
10004bf4:	6a 00                	push   0x0
10004bf6:	68 00 20 00 00       	push   0x2000
10004bfb:	56                   	push   esi
10004bfc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10004bff:	83 c4 20             	add    esp,0x20
10004c02:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
10004c07:	74 04                	je     10004c0d <sb16Demo(void*)+0x9d>
10004c09:	85 c0                	test   eax,eax
10004c0b:	74 60                	je     10004c6d <sb16Demo(void*)+0xfd>
10004c0d:	83 ec 0c             	sub    esp,0xc
10004c10:	68 0d 6b 00 10       	push   0x10006b0d	10004c11: R_386_32	.text
10004c15:	e8 fc ff ff ff       	call   10004c16 <sb16Demo(void*)+0xa6>	10004c16: R_386_PC32	Dbg::kprintf(char const*, ...)
10004c1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
10004c21:	e8 fc ff ff ff       	call   10004c22 <sb16Demo(void*)+0xb2>	10004c22: R_386_PC32	terminateTask(int)
10004c26:	83 c4 3c             	add    esp,0x3c
10004c29:	5b                   	pop    ebx
10004c2a:	5e                   	pop    esi
10004c2b:	5f                   	pop    edi
10004c2c:	5d                   	pop    ebp
10004c2d:	c3                   	ret    
10004c2e:	83 ec 0c             	sub    esp,0xc
10004c31:	53                   	push   ebx
10004c32:	e8 fc ff ff ff       	call   10004c33 <sb16Demo(void*)+0xc3>	10004c33: R_386_PC32	SoundPort::getBufferUsed()
10004c37:	6b 54 24 2c 03       	imul   edx,DWORD PTR [esp+0x2c],0x3
10004c3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004c3f:	01 d0                	add    eax,edx
10004c41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10004c45:	e8 fc ff ff ff       	call   10004c46 <sb16Demo(void*)+0xd6>	10004c46: R_386_PC32	SoundPort::getBufferSize()
10004c4a:	83 c4 10             	add    esp,0x10
10004c4d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10004c51:	7c 20                	jl     10004c73 <sb16Demo(void*)+0x103>
10004c53:	fa                   	cli    
10004c54:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	10004c56: R_386_32	irqDisableCounter
10004c5a:	e8 fc ff ff ff       	call   10004c5b <sb16Demo(void*)+0xeb>	10004c5b: R_386_PC32	schedule()
10004c5f:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c60: R_386_32	irqDisableCounter
10004c64:	48                   	dec    eax
10004c65:	a3 00 00 00 00       	mov    ds:0x0,eax	10004c66: R_386_32	irqDisableCounter
10004c6a:	75 01                	jne    10004c6d <sb16Demo(void*)+0xfd>
10004c6c:	fb                   	sti    
10004c6d:	89 e8                	mov    eax,ebp
10004c6f:	84 c0                	test   al,al
10004c71:	75 bb                	jne    10004c2e <sb16Demo(void*)+0xbe>
10004c73:	51                   	push   ecx
10004c74:	b9 02 00 00 00       	mov    ecx,0x2
10004c79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004c7d:	99                   	cdq    
10004c7e:	f7 f9                	idiv   ecx
10004c80:	50                   	push   eax
10004c81:	68 00 00 00 00       	push   0x0	10004c82: R_386_32	buf
10004c86:	53                   	push   ebx
10004c87:	e8 fc ff ff ff       	call   10004c88 <sb16Demo(void*)+0x118>	10004c88: R_386_PC32	SoundPort::buffer16(short*, int)
10004c8c:	83 c4 10             	add    esp,0x10
10004c8f:	89 e8                	mov    eax,ebp
10004c91:	84 c0                	test   al,al
10004c93:	75 2b                	jne    10004cc0 <sb16Demo(void*)+0x150>
10004c95:	6a 02                	push   0x2
10004c97:	6a 10                	push   0x10
10004c99:	68 22 56 00 00       	push   0x5622
10004c9e:	57                   	push   edi
10004c9f:	e8 fc ff ff ff       	call   10004ca0 <sb16Demo(void*)+0x130>	10004ca0: R_386_PC32	SoundCard::configureRates(int, int, int)
10004ca4:	58                   	pop    eax
10004ca5:	5a                   	pop    edx
10004ca6:	53                   	push   ebx
10004ca7:	57                   	push   edi
10004ca8:	e8 fc ff ff ff       	call   10004ca9 <sb16Demo(void*)+0x139>	10004ca9: R_386_PC32	SoundCard::addChannel(SoundPort*)
10004cad:	89 1c 24             	mov    DWORD PTR [esp],ebx
10004cb0:	e8 fc ff ff ff       	call   10004cb1 <sb16Demo(void*)+0x141>	10004cb1: R_386_PC32	SoundPort::unpause()
10004cb5:	8b 07                	mov    eax,DWORD PTR [edi]
10004cb7:	89 3c 24             	mov    DWORD PTR [esp],edi
10004cba:	ff 50 24             	call   DWORD PTR [eax+0x24]
10004cbd:	83 c4 10             	add    esp,0x10
10004cc0:	bd 01 00 00 00       	mov    ebp,0x1
10004cc5:	e9 13 ff ff ff       	jmp    10004bdd <sb16Demo(void*)+0x6d>

10004cca <SoundBlaster16::resetDSP()>:
10004cca:	53                   	push   ebx
10004ccb:	b0 01                	mov    al,0x1
10004ccd:	83 ec 14             	sub    esp,0x14
10004cd0:	bb 26 02 00 00       	mov    ebx,0x226
10004cd5:	89 da                	mov    edx,ebx
10004cd7:	ee                   	out    dx,al
10004cd8:	6a 1e                	push   0x1e
10004cda:	e8 fc ff ff ff       	call   10004cdb <SoundBlaster16::resetDSP()+0x11>	10004cdb: R_386_PC32	milliTenthSleep(unsigned int)
10004cdf:	31 c0                	xor    eax,eax
10004ce1:	89 da                	mov    edx,ebx
10004ce3:	ee                   	out    dx,al
10004ce4:	ba 2a 02 00 00       	mov    edx,0x22a
10004ce9:	ec                   	in     al,dx
10004cea:	83 c4 10             	add    esp,0x10
10004ced:	3c aa                	cmp    al,0xaa
10004cef:	75 25                	jne    10004d16 <SoundBlaster16::resetDSP()+0x4c>
10004cf1:	b0 e1                	mov    al,0xe1
10004cf3:	ba 2c 02 00 00       	mov    edx,0x22c
10004cf8:	ee                   	out    dx,al
10004cf9:	ba 2e 02 00 00       	mov    edx,0x22e
10004cfe:	ec                   	in     al,dx
10004cff:	84 c0                	test   al,al
10004d01:	79 fb                	jns    10004cfe <SoundBlaster16::resetDSP()+0x34>
10004d03:	ba 2a 02 00 00       	mov    edx,0x22a
10004d08:	ec                   	in     al,dx
10004d09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004d0d:	88 81 f8 01 00 00    	mov    BYTE PTR [ecx+0x1f8],al
10004d13:	ec                   	in     al,dx
10004d14:	eb 13                	jmp    10004d29 <SoundBlaster16::resetDSP()+0x5f>
10004d16:	0f b6 c0             	movzx  eax,al
10004d19:	51                   	push   ecx
10004d1a:	51                   	push   ecx
10004d1b:	50                   	push   eax
10004d1c:	68 00 00 00 00       	push   0x0	10004d1d: R_386_32	badVer
10004d21:	e8 fc ff ff ff       	call   10004d22 <SoundBlaster16::resetDSP()+0x58>	10004d22: R_386_PC32	Dbg::kprintf(char const*, ...)
10004d26:	83 c4 10             	add    esp,0x10
10004d29:	83 c4 08             	add    esp,0x8
10004d2c:	5b                   	pop    ebx
10004d2d:	c3                   	ret    

10004d2e <SoundBlaster16::DSPOut(unsigned short, unsigned char)>:
10004d2e:	53                   	push   ebx
10004d2f:	ba 2c 02 00 00       	mov    edx,0x22c
10004d34:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10004d38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10004d3c:	ec                   	in     al,dx
10004d3d:	84 c0                	test   al,al
10004d3f:	78 fb                	js     10004d3c <SoundBlaster16::DSPOut(unsigned short, unsigned char)+0xe>
10004d41:	88 c8                	mov    al,cl
10004d43:	89 da                	mov    edx,ebx
10004d45:	ee                   	out    dx,al
10004d46:	5b                   	pop    ebx
10004d47:	c3                   	ret    

10004d48 <SoundBlaster16::turnSpeakerOn(bool)>:
10004d48:	53                   	push   ebx
10004d49:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
10004d4d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
10004d52:	75 54                	jne    10004da8 <SoundBlaster16::turnSpeakerOn(bool)+0x60>
10004d54:	31 c0                	xor    eax,eax
10004d56:	83 bb dc 01 00 00 10 	cmp    DWORD PTR [ebx+0x1dc],0x10
10004d5d:	0f 94 c0             	sete   al
10004d60:	8d 84 80 d0 00 00 00 	lea    eax,[eax+eax*4+0xd0]
10004d67:	50                   	push   eax
10004d68:	68 2c 02 00 00       	push   0x22c
10004d6d:	53                   	push   ebx
10004d6e:	e8 fc ff ff ff       	call   10004d6f <SoundBlaster16::turnSpeakerOn(bool)+0x27>	10004d6f: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004d73:	83 c4 0c             	add    esp,0xc
10004d76:	31 c0                	xor    eax,eax
10004d78:	83 bb dc 01 00 00 10 	cmp    DWORD PTR [ebx+0x1dc],0x10
10004d7f:	0f 95 c0             	setne  al
10004d82:	05 d9 00 00 00       	add    eax,0xd9
10004d87:	50                   	push   eax
10004d88:	68 2c 02 00 00       	push   0x22c
10004d8d:	53                   	push   ebx
10004d8e:	e8 fc ff ff ff       	call   10004d8f <SoundBlaster16::turnSpeakerOn(bool)+0x47>	10004d8f: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004d93:	68 d3 00 00 00       	push   0xd3
10004d98:	68 2c 02 00 00       	push   0x22c
10004d9d:	53                   	push   ebx
10004d9e:	e8 fc ff ff ff       	call   10004d9f <SoundBlaster16::turnSpeakerOn(bool)+0x57>	10004d9f: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004da3:	83 c4 18             	add    esp,0x18
10004da6:	eb 13                	jmp    10004dbb <SoundBlaster16::turnSpeakerOn(bool)+0x73>
10004da8:	68 d1 00 00 00       	push   0xd1
10004dad:	68 2c 02 00 00       	push   0x22c
10004db2:	53                   	push   ebx
10004db3:	e8 fc ff ff ff       	call   10004db4 <SoundBlaster16::turnSpeakerOn(bool)+0x6c>	10004db4: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004db8:	83 c4 0c             	add    esp,0xc
10004dbb:	5b                   	pop    ebx
10004dbc:	c3                   	ret    
10004dbd:	90                   	nop

10004dbe <SoundBlaster16::SoundBlaster16()>:
10004dbe:	55                   	push   ebp
10004dbf:	89 e5                	mov    ebp,esp
10004dc1:	83 ec 08             	sub    esp,0x8
10004dc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004dc7:	83 ec 08             	sub    esp,0x8
10004dca:	68 23 6b 00 10       	push   0x10006b23	10004dcb: R_386_32	.text
10004dcf:	50                   	push   eax
10004dd0:	e8 fc ff ff ff       	call   10004dd1 <SoundBlaster16::SoundBlaster16()+0x13>	10004dd1: R_386_PC32	SoundCard::SoundCard(char const*)
10004dd5:	83 c4 10             	add    esp,0x10
10004dd8:	ba 08 00 00 00       	mov    edx,0x8	10004dd9: R_386_32	vtable for SoundBlaster16
10004ddd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004de0:	89 10                	mov    DWORD PTR [eax],edx
10004de2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004de5:	c6 80 f8 01 00 00 00 	mov    BYTE PTR [eax+0x1f8],0x0
10004dec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004def:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10004df5:	0f b6 d0             	movzx  edx,al
10004df8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004dfb:	66 c7 44 90 04 20 02 	mov    WORD PTR [eax+edx*4+0x4],0x220
10004e02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004e05:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10004e0b:	0f b6 d0             	movzx  edx,al
10004e0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004e11:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
10004e16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004e19:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10004e1f:	8d 50 01             	lea    edx,[eax+0x1]
10004e22:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10004e25:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10004e2b:	0f b6 d0             	movzx  edx,al
10004e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004e31:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10004e35:	83 e1 3f             	and    ecx,0x3f
10004e38:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10004e3c:	90                   	nop
10004e3d:	c9                   	leave  
10004e3e:	c3                   	ret    
10004e3f:	90                   	nop

10004e40 <SoundBlaster16::handleIRQ()>:
10004e40:	53                   	push   ebx
10004e41:	83 ec 14             	sub    esp,0x14
10004e44:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10004e48:	68 33 6b 00 10       	push   0x10006b33	10004e49: R_386_32	.text
10004e4d:	e8 fc ff ff ff       	call   10004e4e <SoundBlaster16::handleIRQ()+0xe>	10004e4e: R_386_PC32	Dbg::kprintf(char const*, ...)
10004e52:	83 c4 10             	add    esp,0x10
10004e55:	ba 2e 02 00 00       	mov    edx,0x22e
10004e5a:	83 bb dc 01 00 00 08 	cmp    DWORD PTR [ebx+0x1dc],0x8
10004e61:	74 17                	je     10004e7a <SoundBlaster16::handleIRQ()+0x3a>
10004e63:	b0 82                	mov    al,0x82
10004e65:	ba 24 02 00 00       	mov    edx,0x224
10004e6a:	ee                   	out    dx,al
10004e6b:	ba 25 02 00 00       	mov    edx,0x225
10004e70:	ec                   	in     al,dx
10004e71:	a8 02                	test   al,0x2
10004e73:	74 06                	je     10004e7b <SoundBlaster16::handleIRQ()+0x3b>
10004e75:	ba 2f 02 00 00       	mov    edx,0x22f
10004e7a:	ec                   	in     al,dx
10004e7b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10004e7f:	83 c4 08             	add    esp,0x8
10004e82:	5b                   	pop    ebx
10004e83:	e9 d2 04 00 00       	jmp    1000535a <SoundBlaster16::onInterrupt()>

10004e88 <sb16Handler(regs*, void*)>:
10004e88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004e8c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10004e90:	eb ae                	jmp    10004e40 <SoundBlaster16::handleIRQ()>

10004e92 <SoundBlaster16::beginPlayback()>:
10004e92:	57                   	push   edi
10004e93:	56                   	push   esi
10004e94:	53                   	push   ebx
10004e95:	52                   	push   edx
10004e96:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10004e9a:	8b bb e4 01 00 00    	mov    edi,DWORD PTR [ebx+0x1e4]
10004ea0:	6a 01                	push   0x1
10004ea2:	53                   	push   ebx
10004ea3:	e8 fc ff ff ff       	call   10004ea4 <SoundBlaster16::beginPlayback()+0x12>	10004ea4: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
10004ea8:	31 c0                	xor    eax,eax
10004eaa:	59                   	pop    ecx
10004eab:	83 ff 02             	cmp    edi,0x2
10004eae:	5e                   	pop    esi
10004eaf:	0f 94 c0             	sete   al
10004eb2:	c1 e0 05             	shl    eax,0x5
10004eb5:	89 c6                	mov    esi,eax
10004eb7:	83 ce 10             	or     esi,0x10
10004eba:	83 bb dc 01 00 00 10 	cmp    DWORD PTR [ebx+0x1dc],0x10
10004ec1:	89 f0                	mov    eax,esi
10004ec3:	0f be f0             	movsx  esi,al
10004ec6:	75 7c                	jne    10004f44 <SoundBlaster16::beginPlayback()+0xb2>
10004ec8:	6a 41                	push   0x41
10004eca:	68 2c 02 00 00       	push   0x22c
10004ecf:	53                   	push   ebx
10004ed0:	e8 fc ff ff ff       	call   10004ed1 <SoundBlaster16::beginPlayback()+0x3f>	10004ed1: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004ed5:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
10004edb:	0f b6 c4             	movzx  eax,ah
10004ede:	50                   	push   eax
10004edf:	68 2c 02 00 00       	push   0x22c
10004ee4:	53                   	push   ebx
10004ee5:	e8 fc ff ff ff       	call   10004ee6 <SoundBlaster16::beginPlayback()+0x54>	10004ee6: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004eea:	0f b6 83 e0 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1e0]
10004ef1:	50                   	push   eax
10004ef2:	68 2c 02 00 00       	push   0x22c
10004ef7:	53                   	push   ebx
10004ef8:	e8 fc ff ff ff       	call   10004ef9 <SoundBlaster16::beginPlayback()+0x67>	10004ef9: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004efd:	83 c4 24             	add    esp,0x24
10004f00:	68 b6 00 00 00       	push   0xb6
10004f05:	68 2c 02 00 00       	push   0x22c
10004f0a:	53                   	push   ebx
10004f0b:	e8 fc ff ff ff       	call   10004f0c <SoundBlaster16::beginPlayback()+0x7a>	10004f0c: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f10:	56                   	push   esi
10004f11:	68 2c 02 00 00       	push   0x22c
10004f16:	53                   	push   ebx
10004f17:	e8 fc ff ff ff       	call   10004f18 <SoundBlaster16::beginPlayback()+0x86>	10004f18: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f1c:	68 ff 00 00 00       	push   0xff
10004f21:	68 2c 02 00 00       	push   0x22c
10004f26:	53                   	push   ebx
10004f27:	e8 fc ff ff ff       	call   10004f28 <SoundBlaster16::beginPlayback()+0x96>	10004f28: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f2c:	83 c4 24             	add    esp,0x24
10004f2f:	6a 0f                	push   0xf
10004f31:	68 2c 02 00 00       	push   0x22c
10004f36:	53                   	push   ebx
10004f37:	e8 fc ff ff ff       	call   10004f38 <SoundBlaster16::beginPlayback()+0xa6>	10004f38: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f3c:	83 c4 0c             	add    esp,0xc
10004f3f:	e9 c7 00 00 00       	jmp    1000500b <SoundBlaster16::beginPlayback()+0x179>
10004f44:	83 ff 02             	cmp    edi,0x2
10004f47:	74 05                	je     10004f4e <SoundBlaster16::beginPlayback()+0xbc>
10004f49:	bf 01 00 00 00       	mov    edi,0x1
10004f4e:	0f af bb e0 01 00 00 	imul   edi,DWORD PTR [ebx+0x1e0]
10004f55:	b8 c0 bd f0 ff       	mov    eax,0xfff0bdc0
10004f5a:	99                   	cdq    
10004f5b:	f7 ff                	idiv   edi
10004f5d:	89 04 24             	mov    DWORD PTR [esp],eax
10004f60:	6a 40                	push   0x40
10004f62:	68 2c 02 00 00       	push   0x22c
10004f67:	53                   	push   ebx
10004f68:	e8 fc ff ff ff       	call   10004f69 <SoundBlaster16::beginPlayback()+0xd7>	10004f69: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f6d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
10004f72:	50                   	push   eax
10004f73:	68 2c 02 00 00       	push   0x22c
10004f78:	53                   	push   ebx
10004f79:	e8 fc ff ff ff       	call   10004f7a <SoundBlaster16::beginPlayback()+0xe8>	10004f7a: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004f7e:	83 c4 18             	add    esp,0x18
10004f81:	31 c0                	xor    eax,eax
10004f83:	83 bb dc 01 00 00 10 	cmp    DWORD PTR [ebx+0x1dc],0x10
10004f8a:	0f 95 c0             	setne  al
10004f8d:	48                   	dec    eax
10004f8e:	83 e0 f0             	and    eax,0xfffffff0
10004f91:	05 c0 00 00 00       	add    eax,0xc0
10004f96:	50                   	push   eax
10004f97:	68 2c 02 00 00       	push   0x22c
10004f9c:	53                   	push   ebx
10004f9d:	e8 fc ff ff ff       	call   10004f9e <SoundBlaster16::beginPlayback()+0x10c>	10004f9e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004fa2:	56                   	push   esi
10004fa3:	68 2c 02 00 00       	push   0x22c
10004fa8:	53                   	push   ebx
10004fa9:	e8 fc ff ff ff       	call   10004faa <SoundBlaster16::beginPlayback()+0x118>	10004faa: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004fae:	68 ff 00 00 00       	push   0xff
10004fb3:	68 2c 02 00 00       	push   0x22c
10004fb8:	53                   	push   ebx
10004fb9:	e8 fc ff ff ff       	call   10004fba <SoundBlaster16::beginPlayback()+0x128>	10004fba: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004fbe:	83 c4 24             	add    esp,0x24
10004fc1:	6a 1f                	push   0x1f
10004fc3:	68 2c 02 00 00       	push   0x22c
10004fc8:	53                   	push   ebx
10004fc9:	e8 fc ff ff ff       	call   10004fca <SoundBlaster16::beginPlayback()+0x138>	10004fca: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004fce:	6a 48                	push   0x48
10004fd0:	68 2c 02 00 00       	push   0x22c
10004fd5:	53                   	push   ebx
10004fd6:	e8 fc ff ff ff       	call   10004fd7 <SoundBlaster16::beginPlayback()+0x145>	10004fd7: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004fdb:	68 ff 00 00 00       	push   0xff
10004fe0:	68 2c 02 00 00       	push   0x22c
10004fe5:	53                   	push   ebx
10004fe6:	e8 fc ff ff ff       	call   10004fe7 <SoundBlaster16::beginPlayback()+0x155>	10004fe7: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004feb:	83 c4 24             	add    esp,0x24
10004fee:	6a 1f                	push   0x1f
10004ff0:	68 2c 02 00 00       	push   0x22c
10004ff5:	53                   	push   ebx
10004ff6:	e8 fc ff ff ff       	call   10004ff7 <SoundBlaster16::beginPlayback()+0x165>	10004ff7: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10004ffb:	6a 1c                	push   0x1c
10004ffd:	68 2c 02 00 00       	push   0x22c
10005002:	53                   	push   ebx
10005003:	e8 fc ff ff ff       	call   10005004 <SoundBlaster16::beginPlayback()+0x172>	10005004: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005008:	83 c4 18             	add    esp,0x18
1000500b:	58                   	pop    eax
1000500c:	5b                   	pop    ebx
1000500d:	5e                   	pop    esi
1000500e:	5f                   	pop    edi
1000500f:	c3                   	ret    

10005010 <SoundBlaster16::stopPlayback()>:
10005010:	6a 00                	push   0x0
10005012:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10005016:	e8 fc ff ff ff       	call   10005017 <SoundBlaster16::stopPlayback()+0x7>	10005017: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
1000501b:	58                   	pop    eax
1000501c:	5a                   	pop    edx
1000501d:	c3                   	ret    

1000501e <SoundBlaster16::open(int, int, void*)>:
1000501e:	31 c0                	xor    eax,eax
10005020:	c3                   	ret    
10005021:	90                   	nop

10005022 <SoundBlaster16::_open(int, int, void*)>:
10005022:	56                   	push   esi
10005023:	be 25 02 00 00       	mov    esi,0x225
10005028:	53                   	push   ebx
10005029:	83 ec 14             	sub    esp,0x14
1000502c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10005030:	68 80 00 00 00       	push   0x80
10005035:	68 24 02 00 00       	push   0x224
1000503a:	53                   	push   ebx
1000503b:	e8 fc ff ff ff       	call   1000503c <SoundBlaster16::_open(int, int, void*)+0x1a>	1000503c: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005040:	89 f2                	mov    edx,esi
10005042:	ec                   	in     al,dx
10005043:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
10005047:	68 80 00 00 00       	push   0x80
1000504c:	68 24 02 00 00       	push   0x224
10005051:	53                   	push   ebx
10005052:	e8 fc ff ff ff       	call   10005053 <SoundBlaster16::_open(int, int, void*)+0x31>	10005053: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005057:	83 c4 18             	add    esp,0x18
1000505a:	31 c0                	xor    eax,eax
1000505c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
10005061:	0f 95 c0             	setne  al
10005064:	40                   	inc    eax
10005065:	50                   	push   eax
10005066:	68 25 02 00 00       	push   0x225
1000506b:	53                   	push   ebx
1000506c:	e8 fc ff ff ff       	call   1000506d <SoundBlaster16::_open(int, int, void*)+0x4b>	1000506d: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005071:	68 80 00 00 00       	push   0x80
10005076:	68 24 02 00 00       	push   0x224
1000507b:	53                   	push   ebx
1000507c:	e8 fc ff ff ff       	call   1000507d <SoundBlaster16::_open(int, int, void*)+0x5b>	1000507d: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005081:	89 f2                	mov    edx,esi
10005083:	ec                   	in     al,dx
10005084:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
10005088:	83 c4 18             	add    esp,0x18
1000508b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
1000508f:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
10005093:	75 51                	jne    100050e6 <SoundBlaster16::_open(int, int, void*)+0xc4>
10005095:	68 81 00 00 00       	push   0x81
1000509a:	68 24 02 00 00       	push   0x224
1000509f:	53                   	push   ebx
100050a0:	e8 fc ff ff ff       	call   100050a1 <SoundBlaster16::_open(int, int, void*)+0x7f>	100050a1: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100050a5:	89 f2                	mov    edx,esi
100050a7:	ec                   	in     al,dx
100050a8:	83 e0 0a             	and    eax,0xa
100050ab:	3c 01                	cmp    al,0x1
100050ad:	19 c0                	sbb    eax,eax
100050af:	83 e0 62             	and    eax,0x62
100050b2:	40                   	inc    eax
100050b3:	89 04 24             	mov    DWORD PTR [esp],eax
100050b6:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100050b8: R_386_32	isaDMAController
100050bc:	e8 fc ff ff ff       	call   100050bd <SoundBlaster16::_open(int, int, void*)+0x9b>	100050bd: R_386_PC32	DMA::tryLockChannel(int)
100050c1:	83 c4 10             	add    esp,0x10
100050c4:	89 83 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],eax
100050ca:	85 c0                	test   eax,eax
100050cc:	75 3a                	jne    10005108 <SoundBlaster16::_open(int, int, void*)+0xe6>
100050ce:	83 ec 0c             	sub    esp,0xc
100050d1:	68 00 00 00 00       	push   0x0	100050d2: R_386_32	nodma
100050d6:	e8 fc ff ff ff       	call   100050d7 <SoundBlaster16::_open(int, int, void*)+0xb5>	100050d7: R_386_PC32	Dbg::kprintf(char const*, ...)
100050db:	83 c4 10             	add    esp,0x10
100050de:	83 c8 ff             	or     eax,0xffffffff
100050e1:	e9 6e 02 00 00       	jmp    10005354 <SoundBlaster16::_open(int, int, void*)+0x332>
100050e6:	56                   	push   esi
100050e7:	56                   	push   esi
100050e8:	6a 01                	push   0x1
100050ea:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100050ec: R_386_32	isaDMAController
100050f0:	e8 fc ff ff ff       	call   100050f1 <SoundBlaster16::_open(int, int, void*)+0xcf>	100050f1: R_386_PC32	DMA::tryLockChannel(int)
100050f5:	83 c4 10             	add    esp,0x10
100050f8:	89 83 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],eax
100050fe:	85 c0                	test   eax,eax
10005100:	75 06                	jne    10005108 <SoundBlaster16::_open(int, int, void*)+0xe6>
10005102:	51                   	push   ecx
10005103:	51                   	push   ecx
10005104:	6a 03                	push   0x3
10005106:	eb ae                	jmp    100050b6 <SoundBlaster16::_open(int, int, void*)+0x94>
10005108:	83 ec 0c             	sub    esp,0xc
1000510b:	68 3e 6b 00 10       	push   0x10006b3e	1000510c: R_386_32	.text
10005110:	e8 fc ff ff ff       	call   10005111 <SoundBlaster16::_open(int, int, void*)+0xef>	10005111: R_386_PC32	Dbg::kprintf(char const*, ...)
10005115:	58                   	pop    eax
10005116:	5a                   	pop    edx
10005117:	6a 05                	push   0x5
10005119:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000511b: R_386_32	isaDMAController
1000511f:	e8 fc ff ff ff       	call   10005120 <SoundBlaster16::_open(int, int, void*)+0xfe>	10005120: R_386_PC32	DMA::tryLockChannel(int)
10005124:	83 c4 10             	add    esp,0x10
10005127:	89 83 ec 01 00 00    	mov    DWORD PTR [ebx+0x1ec],eax
1000512d:	85 c0                	test   eax,eax
1000512f:	75 10                	jne    10005141 <SoundBlaster16::_open(int, int, void*)+0x11f>
10005131:	83 ec 0c             	sub    esp,0xc
10005134:	68 50 6b 00 10       	push   0x10006b50	10005135: R_386_32	.text
10005139:	e8 fc ff ff ff       	call   1000513a <SoundBlaster16::_open(int, int, void*)+0x118>	1000513a: R_386_PC32	Krnl::panic(char const*)
1000513e:	83 c4 10             	add    esp,0x10
10005141:	50                   	push   eax
10005142:	50                   	push   eax
10005143:	68 00 20 00 00       	push   0x2000
10005148:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
1000514e:	e8 fc ff ff ff       	call   1000514f <SoundBlaster16::_open(int, int, void*)+0x12d>	1000514f: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
10005153:	58                   	pop    eax
10005154:	5a                   	pop    edx
10005155:	6a 59                	push   0x59
10005157:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
1000515d:	e8 fc ff ff ff       	call   1000515e <SoundBlaster16::_open(int, int, void*)+0x13c>	1000515e: R_386_PC32	DMAChannel::setMode(unsigned char)
10005162:	59                   	pop    ecx
10005163:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
10005169:	e8 fc ff ff ff       	call   1000516a <SoundBlaster16::_open(int, int, void*)+0x148>	1000516a: R_386_PC32	DMAChannel::start()
1000516e:	5e                   	pop    esi
1000516f:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
10005175:	e8 fc ff ff ff       	call   10005176 <SoundBlaster16::_open(int, int, void*)+0x154>	10005176: R_386_PC32	DMAChannel::getAddress()
1000517a:	89 83 f4 01 00 00    	mov    DWORD PTR [ebx+0x1f4],eax
10005180:	c7 04 24 69 6b 00 10 	mov    DWORD PTR [esp],0x10006b69	10005183: R_386_32	.text
10005187:	e8 fc ff ff ff       	call   10005188 <SoundBlaster16::_open(int, int, void*)+0x166>	10005188: R_386_PC32	Dbg::kprintf(char const*, ...)
1000518c:	58                   	pop    eax
1000518d:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
10005193:	e8 fc ff ff ff       	call   10005194 <SoundBlaster16::_open(int, int, void*)+0x172>	10005194: R_386_PC32	DMAChannel::getAddress()
10005198:	5a                   	pop    edx
10005199:	59                   	pop    ecx
1000519a:	50                   	push   eax
1000519b:	68 7f 6b 00 10       	push   0x10006b7f	1000519c: R_386_32	.text
100051a0:	e8 fc ff ff ff       	call   100051a1 <SoundBlaster16::_open(int, int, void*)+0x17f>	100051a1: R_386_PC32	Dbg::kprintf(char const*, ...)
100051a5:	5e                   	pop    esi
100051a6:	58                   	pop    eax
100051a7:	ff b3 f4 01 00 00    	push   DWORD PTR [ebx+0x1f4]
100051ad:	68 7f 6b 00 10       	push   0x10006b7f	100051ae: R_386_32	.text
100051b2:	e8 fc ff ff ff       	call   100051b3 <SoundBlaster16::_open(int, int, void*)+0x191>	100051b3: R_386_PC32	Dbg::kprintf(char const*, ...)
100051b7:	58                   	pop    eax
100051b8:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
100051be:	e8 fc ff ff ff       	call   100051bf <SoundBlaster16::_open(int, int, void*)+0x19d>	100051bf: R_386_PC32	DMAChannel::getChannelNum()
100051c3:	5a                   	pop    edx
100051c4:	59                   	pop    ecx
100051c5:	50                   	push   eax
100051c6:	68 b0 6b 00 10       	push   0x10006bb0	100051c7: R_386_32	.text
100051cb:	e8 fc ff ff ff       	call   100051cc <SoundBlaster16::_open(int, int, void*)+0x1aa>	100051cc: R_386_PC32	Dbg::kprintf(char const*, ...)
100051d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
100051d3:	e8 fc ff ff ff       	call   100051d4 <SoundBlaster16::_open(int, int, void*)+0x1b2>	100051d4: R_386_PC32	SoundBlaster16::resetDSP()
100051d8:	5e                   	pop    esi
100051d9:	58                   	pop    eax
100051da:	6a 01                	push   0x1
100051dc:	53                   	push   ebx
100051dd:	e8 fc ff ff ff       	call   100051de <SoundBlaster16::_open(int, int, void*)+0x1bc>	100051de: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
100051e2:	83 c4 10             	add    esp,0x10
100051e5:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
100051e9:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
100051ed:	75 6f                	jne    1000525e <SoundBlaster16::_open(int, int, void*)+0x23c>
100051ef:	50                   	push   eax
100051f0:	68 80 00 00 00       	push   0x80
100051f5:	68 24 02 00 00       	push   0x224
100051fa:	53                   	push   ebx
100051fb:	e8 fc ff ff ff       	call   100051fc <SoundBlaster16::_open(int, int, void*)+0x1da>	100051fc: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005200:	ba 25 02 00 00       	mov    edx,0x225
10005205:	ec                   	in     al,dx
10005206:	83 c4 10             	add    esp,0x10
10005209:	3c 01                	cmp    al,0x1
1000520b:	75 0f                	jne    1000521c <SoundBlaster16::_open(int, int, void*)+0x1fa>
1000520d:	83 ec 0c             	sub    esp,0xc
10005210:	53                   	push   ebx
10005211:	6a 01                	push   0x1
10005213:	68 00 00 00 00       	push   0x0	10005214: R_386_32	sb16Handler(regs*, void*)
10005218:	6a 02                	push   0x2
1000521a:	eb 6f                	jmp    1000528b <SoundBlaster16::_open(int, int, void*)+0x269>
1000521c:	3c 02                	cmp    al,0x2
1000521e:	75 06                	jne    10005226 <SoundBlaster16::_open(int, int, void*)+0x204>
10005220:	83 ec 0c             	sub    esp,0xc
10005223:	53                   	push   ebx
10005224:	eb 5c                	jmp    10005282 <SoundBlaster16::_open(int, int, void*)+0x260>
10005226:	3c 04                	cmp    al,0x4
10005228:	75 0f                	jne    10005239 <SoundBlaster16::_open(int, int, void*)+0x217>
1000522a:	83 ec 0c             	sub    esp,0xc
1000522d:	53                   	push   ebx
1000522e:	6a 01                	push   0x1
10005230:	68 00 00 00 00       	push   0x0	10005231: R_386_32	sb16Handler(regs*, void*)
10005235:	6a 07                	push   0x7
10005237:	eb 52                	jmp    1000528b <SoundBlaster16::_open(int, int, void*)+0x269>
10005239:	3c 08                	cmp    al,0x8
1000523b:	75 0f                	jne    1000524c <SoundBlaster16::_open(int, int, void*)+0x22a>
1000523d:	83 ec 0c             	sub    esp,0xc
10005240:	53                   	push   ebx
10005241:	6a 01                	push   0x1
10005243:	68 00 00 00 00       	push   0x0	10005244: R_386_32	sb16Handler(regs*, void*)
10005248:	6a 0a                	push   0xa
1000524a:	eb 3f                	jmp    1000528b <SoundBlaster16::_open(int, int, void*)+0x269>
1000524c:	83 ec 0c             	sub    esp,0xc
1000524f:	68 00 00 00 00       	push   0x0	10005250: R_386_32	noirq
10005254:	e8 fc ff ff ff       	call   10005255 <SoundBlaster16::_open(int, int, void*)+0x233>	10005255: R_386_PC32	Krnl::panic(char const*)
10005259:	83 c4 10             	add    esp,0x10
1000525c:	eb 36                	jmp    10005294 <SoundBlaster16::_open(int, int, void*)+0x272>
1000525e:	56                   	push   esi
1000525f:	68 80 00 00 00       	push   0x80
10005264:	68 24 02 00 00       	push   0x224
10005269:	53                   	push   ebx
1000526a:	e8 fc ff ff ff       	call   1000526b <SoundBlaster16::_open(int, int, void*)+0x249>	1000526b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000526f:	83 c4 0c             	add    esp,0xc
10005272:	6a 02                	push   0x2
10005274:	68 25 02 00 00       	push   0x225
10005279:	53                   	push   ebx
1000527a:	e8 fc ff ff ff       	call   1000527b <SoundBlaster16::_open(int, int, void*)+0x259>	1000527b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000527f:	89 1c 24             	mov    DWORD PTR [esp],ebx
10005282:	6a 01                	push   0x1
10005284:	68 00 00 00 00       	push   0x0	10005285: R_386_32	sb16Handler(regs*, void*)
10005289:	6a 05                	push   0x5
1000528b:	53                   	push   ebx
1000528c:	e8 fc ff ff ff       	call   1000528d <SoundBlaster16::_open(int, int, void*)+0x26b>	1000528d: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10005291:	83 c4 20             	add    esp,0x20
10005294:	56                   	push   esi
10005295:	68 81 00 00 00       	push   0x81
1000529a:	68 24 02 00 00       	push   0x224
1000529f:	53                   	push   ebx
100052a0:	e8 fc ff ff ff       	call   100052a1 <SoundBlaster16::_open(int, int, void*)+0x27f>	100052a1: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100052a5:	ba 25 02 00 00       	mov    edx,0x225
100052aa:	ec                   	in     al,dx
100052ab:	89 c6                	mov    esi,eax
100052ad:	58                   	pop    eax
100052ae:	89 f0                	mov    eax,esi
100052b0:	5a                   	pop    edx
100052b1:	0f b6 c0             	movzx  eax,al
100052b4:	50                   	push   eax
100052b5:	68 e2 6b 00 10       	push   0x10006be2	100052b6: R_386_32	.text
100052ba:	e8 fc ff ff ff       	call   100052bb <SoundBlaster16::_open(int, int, void*)+0x299>	100052bb: R_386_PC32	Dbg::kprintf(char const*, ...)
100052bf:	83 c4 0c             	add    esp,0xc
100052c2:	68 81 00 00 00       	push   0x81
100052c7:	68 24 02 00 00       	push   0x224
100052cc:	53                   	push   ebx
100052cd:	e8 fc ff ff ff       	call   100052ce <SoundBlaster16::_open(int, int, void*)+0x2ac>	100052ce: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100052d2:	59                   	pop    ecx
100052d3:	ff b3 e8 01 00 00    	push   DWORD PTR [ebx+0x1e8]
100052d9:	e8 fc ff ff ff       	call   100052da <SoundBlaster16::_open(int, int, void*)+0x2b8>	100052da: R_386_PC32	DMAChannel::getChannelNum()
100052de:	83 c4 10             	add    esp,0x10
100052e1:	48                   	dec    eax
100052e2:	75 0c                	jne    100052f0 <SoundBlaster16::_open(int, int, void*)+0x2ce>
100052e4:	81 e6 f0 00 00 00    	and    esi,0xf0
100052ea:	51                   	push   ecx
100052eb:	83 ce 02             	or     esi,0x2
100052ee:	eb 20                	jmp    10005310 <SoundBlaster16::_open(int, int, void*)+0x2ee>
100052f0:	83 ec 0c             	sub    esp,0xc
100052f3:	ff b3 e8 01 00 00    	push   DWORD PTR [ebx+0x1e8]
100052f9:	e8 fc ff ff ff       	call   100052fa <SoundBlaster16::_open(int, int, void*)+0x2d8>	100052fa: R_386_PC32	DMAChannel::getChannelNum()
100052fe:	83 c4 10             	add    esp,0x10
10005301:	83 f8 03             	cmp    eax,0x3
10005304:	75 18                	jne    1000531e <SoundBlaster16::_open(int, int, void*)+0x2fc>
10005306:	81 e6 f0 00 00 00    	and    esi,0xf0
1000530c:	52                   	push   edx
1000530d:	83 ce 08             	or     esi,0x8
10005310:	56                   	push   esi
10005311:	68 25 02 00 00       	push   0x225
10005316:	53                   	push   ebx
10005317:	e8 fc ff ff ff       	call   10005318 <SoundBlaster16::_open(int, int, void*)+0x2f6>	10005318: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000531c:	eb 0d                	jmp    1000532b <SoundBlaster16::_open(int, int, void*)+0x309>
1000531e:	83 ec 0c             	sub    esp,0xc
10005321:	68 00 00 00 00       	push   0x0	10005322: R_386_32	baddma
10005326:	e8 fc ff ff ff       	call   10005327 <SoundBlaster16::_open(int, int, void*)+0x305>	10005327: R_386_PC32	Krnl::panic(char const*)
1000532b:	83 c4 10             	add    esp,0x10
1000532e:	50                   	push   eax
1000532f:	6a 22                	push   0x22
10005331:	68 24 02 00 00       	push   0x224
10005336:	53                   	push   ebx
10005337:	e8 fc ff ff ff       	call   10005338 <SoundBlaster16::_open(int, int, void*)+0x316>	10005338: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000533c:	83 c4 0c             	add    esp,0xc
1000533f:	68 ff 00 00 00       	push   0xff
10005344:	68 24 02 00 00       	push   0x224
10005349:	53                   	push   ebx
1000534a:	e8 fc ff ff ff       	call   1000534b <SoundBlaster16::_open(int, int, void*)+0x329>	1000534b: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000534f:	83 c4 10             	add    esp,0x10
10005352:	31 c0                	xor    eax,eax
10005354:	83 c4 14             	add    esp,0x14
10005357:	5b                   	pop    ebx
10005358:	5e                   	pop    esi
10005359:	c3                   	ret    

1000535a <SoundBlaster16::onInterrupt()>:
1000535a:	57                   	push   edi
1000535b:	56                   	push   esi
1000535c:	53                   	push   ebx
1000535d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10005361:	8b bb dc 01 00 00    	mov    edi,DWORD PTR [ebx+0x1dc]
10005367:	83 ff 10             	cmp    edi,0x10
1000536a:	0f 85 e8 00 00 00    	jne    10005458 <SoundBlaster16::onInterrupt()+0xfe>
10005370:	83 ec 0c             	sub    esp,0xc
10005373:	ff b3 ec 01 00 00    	push   DWORD PTR [ebx+0x1ec]
10005379:	e8 fc ff ff ff       	call   1000537a <SoundBlaster16::onInterrupt()+0x20>	1000537a: R_386_PC32	DMAChannel::getAddress()
1000537e:	83 c4 0c             	add    esp,0xc
10005381:	50                   	push   eax
10005382:	ff b3 f4 01 00 00    	push   DWORD PTR [ebx+0x1f4]
10005388:	68 05 6c 00 10       	push   0x10006c05	10005389: R_386_32	.text
1000538d:	e8 fc ff ff ff       	call   1000538e <SoundBlaster16::onInterrupt()+0x34>	1000538e: R_386_PC32	Dbg::kprintf(char const*, ...)
10005392:	80 3d ff 6e 00 10 01 	cmp    BYTE PTR ds:0x10006eff,0x1	10005394: R_386_32	.data
10005399:	5e                   	pop    esi
1000539a:	58                   	pop    eax
1000539b:	19 c0                	sbb    eax,eax
1000539d:	25 00 20 00 00       	and    eax,0x2000
100053a2:	03 83 f4 01 00 00    	add    eax,DWORD PTR [ebx+0x1f4]
100053a8:	89 c6                	mov    esi,eax
100053aa:	50                   	push   eax
100053ab:	68 2f 6c 00 10       	push   0x10006c2f	100053ac: R_386_32	.text
100053b0:	e8 fc ff ff ff       	call   100053b1 <SoundBlaster16::onInterrupt()+0x57>	100053b1: R_386_PC32	Dbg::kprintf(char const*, ...)
100053b5:	83 c4 0c             	add    esp,0xc
100053b8:	56                   	push   esi
100053b9:	68 00 10 00 00       	push   0x1000
100053be:	53                   	push   ebx
100053bf:	e8 fc ff ff ff       	call   100053c0 <SoundBlaster16::onInterrupt()+0x66>	100053c0: R_386_PC32	SoundCard::getSamples16(int, short*)
100053c4:	83 c4 10             	add    esp,0x10
100053c7:	89 c6                	mov    esi,eax
100053c9:	85 c0                	test   eax,eax
100053cb:	75 19                	jne    100053e6 <SoundBlaster16::onInterrupt()+0x8c>
100053cd:	83 ec 0c             	sub    esp,0xc
100053d0:	68 46 6c 00 10       	push   0x10006c46	100053d1: R_386_32	.text
100053d5:	e8 fc ff ff ff       	call   100053d6 <SoundBlaster16::onInterrupt()+0x7c>	100053d6: R_386_PC32	Dbg::kprintf(char const*, ...)
100053da:	5a                   	pop    edx
100053db:	59                   	pop    ecx
100053dc:	6a 00                	push   0x0
100053de:	53                   	push   ebx
100053df:	e8 fc ff ff ff       	call   100053e0 <SoundBlaster16::onInterrupt()+0x86>	100053e0: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
100053e4:	eb 6f                	jmp    10005455 <SoundBlaster16::onInterrupt()+0xfb>
100053e6:	3d ff 0f 00 00       	cmp    eax,0xfff
100053eb:	7f 6b                	jg     10005458 <SoundBlaster16::onInterrupt()+0xfe>
100053ed:	83 ec 0c             	sub    esp,0xc
100053f0:	68 56 6c 00 10       	push   0x10006c56	100053f1: R_386_32	.text
100053f5:	e8 fc ff ff ff       	call   100053f6 <SoundBlaster16::onInterrupt()+0x9c>	100053f6: R_386_PC32	Dbg::kprintf(char const*, ...)
100053fa:	83 c4 0c             	add    esp,0xc
100053fd:	68 b0 00 00 00       	push   0xb0
10005402:	68 2c 02 00 00       	push   0x22c
10005407:	53                   	push   ebx
10005408:	e8 fc ff ff ff       	call   10005409 <SoundBlaster16::onInterrupt()+0xaf>	10005409: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000540d:	83 c4 10             	add    esp,0x10
10005410:	83 bb e4 01 00 00 02 	cmp    DWORD PTR [ebx+0x1e4],0x2
10005417:	75 05                	jne    1000541e <SoundBlaster16::onInterrupt()+0xc4>
10005419:	bf 30 00 00 00       	mov    edi,0x30
1000541e:	50                   	push   eax
1000541f:	57                   	push   edi
10005420:	68 2c 02 00 00       	push   0x22c
10005425:	53                   	push   ebx
10005426:	e8 fc ff ff ff       	call   10005427 <SoundBlaster16::onInterrupt()+0xcd>	10005427: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000542b:	83 c4 0c             	add    esp,0xc
1000542e:	8d 46 ff             	lea    eax,[esi-0x1]
10005431:	0f b6 c0             	movzx  eax,al
10005434:	50                   	push   eax
10005435:	68 2c 02 00 00       	push   0x22c
1000543a:	53                   	push   ebx
1000543b:	e8 fc ff ff ff       	call   1000543c <SoundBlaster16::onInterrupt()+0xe2>	1000543c: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005440:	83 c4 0c             	add    esp,0xc
10005443:	8d 46 ff             	lea    eax,[esi-0x1]
10005446:	0f b6 f4             	movzx  esi,ah
10005449:	56                   	push   esi
1000544a:	68 2c 02 00 00       	push   0x22c
1000544f:	53                   	push   ebx
10005450:	e8 fc ff ff ff       	call   10005451 <SoundBlaster16::onInterrupt()+0xf7>	10005451: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10005455:	83 c4 10             	add    esp,0x10
10005458:	5b                   	pop    ebx
10005459:	80 35 ff 6e 00 10 01 	xor    BYTE PTR ds:0x10006eff,0x1	1000545b: R_386_32	.data
10005460:	5e                   	pop    esi
10005461:	5f                   	pop    edi
10005462:	c3                   	ret    
10005463:	90                   	nop

10005464 <SoundBlaster16::close(int, int, void*)>:
10005464:	83 ec 0c             	sub    esp,0xc
10005467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000546b:	8b 80 e8 01 00 00    	mov    eax,DWORD PTR [eax+0x1e8]
10005471:	85 c0                	test   eax,eax
10005473:	74 11                	je     10005486 <SoundBlaster16::close(int, int, void*)+0x22>
10005475:	52                   	push   edx
10005476:	52                   	push   edx
10005477:	50                   	push   eax
10005478:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000547a: R_386_32	isaDMAController
1000547e:	e8 fc ff ff ff       	call   1000547f <SoundBlaster16::close(int, int, void*)+0x1b>	1000547f: R_386_PC32	DMA::unlockChannel(DMAChannel*)
10005483:	83 c4 10             	add    esp,0x10
10005486:	31 c0                	xor    eax,eax
10005488:	83 c4 0c             	add    esp,0xc
1000548b:	c3                   	ret    

1000548c <ISA::~ISA()>:
1000548c:	55                   	push   ebp
1000548d:	89 e5                	mov    ebp,esp
1000548f:	83 ec 08             	sub    esp,0x8
10005492:	ba 08 00 00 00       	mov    edx,0x8	10005493: R_386_32	vtable for ISA
10005497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000549a:	89 10                	mov    DWORD PTR [eax],edx
1000549c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000549f:	83 ec 0c             	sub    esp,0xc
100054a2:	50                   	push   eax
100054a3:	e8 fc ff ff ff       	call   100054a4 <ISA::~ISA()+0x18>	100054a4: R_386_PC32	Bus::~Bus()
100054a8:	83 c4 10             	add    esp,0x10
100054ab:	90                   	nop
100054ac:	c9                   	leave  
100054ad:	c3                   	ret    

100054ae <ISA::~ISA()>:
100054ae:	55                   	push   ebp
100054af:	89 e5                	mov    ebp,esp
100054b1:	83 ec 08             	sub    esp,0x8
100054b4:	83 ec 0c             	sub    esp,0xc
100054b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100054ba:	e8 fc ff ff ff       	call   100054bb <ISA::~ISA()+0xd>	100054bb: R_386_PC32	ISA::~ISA()
100054bf:	83 c4 10             	add    esp,0x10
100054c2:	83 ec 08             	sub    esp,0x8
100054c5:	68 58 01 00 00       	push   0x158
100054ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100054cd:	e8 fc ff ff ff       	call   100054ce <ISA::~ISA()+0x20>	100054ce: R_386_PC32	operator delete(void*, unsigned long)
100054d2:	83 c4 10             	add    esp,0x10
100054d5:	c9                   	leave  
100054d6:	c3                   	ret    
100054d7:	90                   	nop

100054d8 <Floppy::~Floppy()>:
100054d8:	55                   	push   ebp
100054d9:	89 e5                	mov    ebp,esp
100054db:	83 ec 08             	sub    esp,0x8
100054de:	ba 08 00 00 00       	mov    edx,0x8	100054df: R_386_32	vtable for Floppy
100054e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100054e6:	89 10                	mov    DWORD PTR [eax],edx
100054e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100054eb:	83 ec 0c             	sub    esp,0xc
100054ee:	50                   	push   eax
100054ef:	e8 fc ff ff ff       	call   100054f0 <Floppy::~Floppy()+0x18>	100054f0: R_386_PC32	HardDiskController::~HardDiskController()
100054f4:	83 c4 10             	add    esp,0x10
100054f7:	90                   	nop
100054f8:	c9                   	leave  
100054f9:	c3                   	ret    

100054fa <Floppy::~Floppy()>:
100054fa:	55                   	push   ebp
100054fb:	89 e5                	mov    ebp,esp
100054fd:	83 ec 08             	sub    esp,0x8
10005500:	83 ec 0c             	sub    esp,0xc
10005503:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005506:	e8 fc ff ff ff       	call   10005507 <Floppy::~Floppy()+0xd>	10005507: R_386_PC32	Floppy::~Floppy()
1000550b:	83 c4 10             	add    esp,0x10
1000550e:	83 ec 08             	sub    esp,0x8
10005511:	68 b8 01 00 00       	push   0x1b8
10005516:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005519:	e8 fc ff ff ff       	call   1000551a <Floppy::~Floppy()+0x20>	1000551a: R_386_PC32	operator delete(void*, unsigned long)
1000551e:	83 c4 10             	add    esp,0x10
10005521:	c9                   	leave  
10005522:	c3                   	ret    
10005523:	90                   	nop

10005524 <JoystickHost::JoystickHost()>:
10005524:	55                   	push   ebp
10005525:	89 e5                	mov    ebp,esp
10005527:	ba 08 00 00 00       	mov    edx,0x8	10005528: R_386_32	vtable for JoystickHost
1000552c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000552f:	89 10                	mov    DWORD PTR [eax],edx
10005531:	90                   	nop
10005532:	5d                   	pop    ebp
10005533:	c3                   	ret    

10005534 <DMA::~DMA()>:
10005534:	55                   	push   ebp
10005535:	89 e5                	mov    ebp,esp
10005537:	83 ec 08             	sub    esp,0x8
1000553a:	ba 08 00 00 00       	mov    edx,0x8	1000553b: R_386_32	vtable for DMA
1000553f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005542:	89 10                	mov    DWORD PTR [eax],edx
10005544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005547:	83 ec 0c             	sub    esp,0xc
1000554a:	50                   	push   eax
1000554b:	e8 fc ff ff ff       	call   1000554c <DMA::~DMA()+0x18>	1000554c: R_386_PC32	Device::~Device()
10005550:	83 c4 10             	add    esp,0x10
10005553:	90                   	nop
10005554:	c9                   	leave  
10005555:	c3                   	ret    

10005556 <DMA::~DMA()>:
10005556:	55                   	push   ebp
10005557:	89 e5                	mov    ebp,esp
10005559:	83 ec 08             	sub    esp,0x8
1000555c:	83 ec 0c             	sub    esp,0xc
1000555f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005562:	e8 fc ff ff ff       	call   10005563 <DMA::~DMA()+0xd>	10005563: R_386_PC32	DMA::~DMA()
10005567:	83 c4 10             	add    esp,0x10
1000556a:	83 ec 08             	sub    esp,0x8
1000556d:	68 5c 01 00 00       	push   0x15c
10005572:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005575:	e8 fc ff ff ff       	call   10005576 <DMA::~DMA()+0x20>	10005576: R_386_PC32	operator delete(void*, unsigned long)
1000557a:	83 c4 10             	add    esp,0x10
1000557d:	c9                   	leave  
1000557e:	c3                   	ret    
1000557f:	90                   	nop

10005580 <PS2::~PS2()>:
10005580:	55                   	push   ebp
10005581:	89 e5                	mov    ebp,esp
10005583:	83 ec 08             	sub    esp,0x8
10005586:	ba 08 00 00 00       	mov    edx,0x8	10005587: R_386_32	vtable for PS2
1000558b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000558e:	89 10                	mov    DWORD PTR [eax],edx
10005590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005593:	83 ec 0c             	sub    esp,0xc
10005596:	50                   	push   eax
10005597:	e8 fc ff ff ff       	call   10005598 <PS2::~PS2()+0x18>	10005598: R_386_PC32	Bus::~Bus()
1000559c:	83 c4 10             	add    esp,0x10
1000559f:	90                   	nop
100055a0:	c9                   	leave  
100055a1:	c3                   	ret    

100055a2 <PS2::~PS2()>:
100055a2:	55                   	push   ebp
100055a3:	89 e5                	mov    ebp,esp
100055a5:	83 ec 08             	sub    esp,0x8
100055a8:	83 ec 0c             	sub    esp,0xc
100055ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100055ae:	e8 fc ff ff ff       	call   100055af <PS2::~PS2()+0xd>	100055af: R_386_PC32	PS2::~PS2()
100055b3:	83 c4 10             	add    esp,0x10
100055b6:	83 ec 08             	sub    esp,0x8
100055b9:	68 60 01 00 00       	push   0x160
100055be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100055c1:	e8 fc ff ff ff       	call   100055c2 <PS2::~PS2()+0x20>	100055c2: R_386_PC32	operator delete(void*, unsigned long)
100055c6:	83 c4 10             	add    esp,0x10
100055c9:	c9                   	leave  
100055ca:	c3                   	ret    
100055cb:	90                   	nop

100055cc <PS2Mouse::~PS2Mouse()>:
100055cc:	55                   	push   ebp
100055cd:	89 e5                	mov    ebp,esp
100055cf:	83 ec 08             	sub    esp,0x8
100055d2:	ba 08 00 00 00       	mov    edx,0x8	100055d3: R_386_32	vtable for PS2Mouse
100055d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100055da:	89 10                	mov    DWORD PTR [eax],edx
100055dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100055df:	83 ec 0c             	sub    esp,0xc
100055e2:	50                   	push   eax
100055e3:	e8 fc ff ff ff       	call   100055e4 <PS2Mouse::~PS2Mouse()+0x18>	100055e4: R_386_PC32	Mouse::~Mouse()
100055e8:	83 c4 10             	add    esp,0x10
100055eb:	90                   	nop
100055ec:	c9                   	leave  
100055ed:	c3                   	ret    

100055ee <PS2Mouse::~PS2Mouse()>:
100055ee:	55                   	push   ebp
100055ef:	89 e5                	mov    ebp,esp
100055f1:	83 ec 08             	sub    esp,0x8
100055f4:	83 ec 0c             	sub    esp,0xc
100055f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100055fa:	e8 fc ff ff ff       	call   100055fb <PS2Mouse::~PS2Mouse()+0xd>	100055fb: R_386_PC32	PS2Mouse::~PS2Mouse()
100055ff:	83 c4 10             	add    esp,0x10
10005602:	83 ec 08             	sub    esp,0x8
10005605:	68 68 01 00 00       	push   0x168
1000560a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000560d:	e8 fc ff ff ff       	call   1000560e <PS2Mouse::~PS2Mouse()+0x20>	1000560e: R_386_PC32	operator delete(void*, unsigned long)
10005612:	83 c4 10             	add    esp,0x10
10005615:	c9                   	leave  
10005616:	c3                   	ret    
10005617:	90                   	nop

10005618 <PS2Port::~PS2Port()>:
10005618:	55                   	push   ebp
10005619:	89 e5                	mov    ebp,esp
1000561b:	83 ec 08             	sub    esp,0x8
1000561e:	ba 08 00 00 00       	mov    edx,0x8	1000561f: R_386_32	vtable for PS2Port
10005623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005626:	89 10                	mov    DWORD PTR [eax],edx
10005628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000562b:	83 ec 0c             	sub    esp,0xc
1000562e:	50                   	push   eax
1000562f:	e8 fc ff ff ff       	call   10005630 <PS2Port::~PS2Port()+0x18>	10005630: R_386_PC32	Bus::~Bus()
10005634:	83 c4 10             	add    esp,0x10
10005637:	90                   	nop
10005638:	c9                   	leave  
10005639:	c3                   	ret    

1000563a <PS2Port::~PS2Port()>:
1000563a:	55                   	push   ebp
1000563b:	89 e5                	mov    ebp,esp
1000563d:	83 ec 08             	sub    esp,0x8
10005640:	83 ec 0c             	sub    esp,0xc
10005643:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005646:	e8 fc ff ff ff       	call   10005647 <PS2Port::~PS2Port()+0xd>	10005647: R_386_PC32	PS2Port::~PS2Port()
1000564b:	83 c4 10             	add    esp,0x10
1000564e:	83 ec 08             	sub    esp,0x8
10005651:	68 60 01 00 00       	push   0x160
10005656:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005659:	e8 fc ff ff ff       	call   1000565a <PS2Port::~PS2Port()+0x20>	1000565a: R_386_PC32	operator delete(void*, unsigned long)
1000565e:	83 c4 10             	add    esp,0x10
10005661:	c9                   	leave  
10005662:	c3                   	ret    
10005663:	90                   	nop

10005664 <SoundBlaster16::~SoundBlaster16()>:
10005664:	55                   	push   ebp
10005665:	89 e5                	mov    ebp,esp
10005667:	83 ec 08             	sub    esp,0x8
1000566a:	ba 08 00 00 00       	mov    edx,0x8	1000566b: R_386_32	vtable for SoundBlaster16
1000566f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005672:	89 10                	mov    DWORD PTR [eax],edx
10005674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005677:	83 ec 0c             	sub    esp,0xc
1000567a:	50                   	push   eax
1000567b:	e8 fc ff ff ff       	call   1000567c <SoundBlaster16::~SoundBlaster16()+0x18>	1000567c: R_386_PC32	SoundCard::~SoundCard()
10005680:	83 c4 10             	add    esp,0x10
10005683:	90                   	nop
10005684:	c9                   	leave  
10005685:	c3                   	ret    

10005686 <SoundBlaster16::~SoundBlaster16()>:
10005686:	55                   	push   ebp
10005687:	89 e5                	mov    ebp,esp
10005689:	83 ec 08             	sub    esp,0x8
1000568c:	83 ec 0c             	sub    esp,0xc
1000568f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005692:	e8 fc ff ff ff       	call   10005693 <SoundBlaster16::~SoundBlaster16()+0xd>	10005693: R_386_PC32	SoundBlaster16::~SoundBlaster16()
10005697:	83 c4 10             	add    esp,0x10
1000569a:	83 ec 08             	sub    esp,0x8
1000569d:	68 fc 01 00 00       	push   0x1fc
100056a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100056a5:	e8 fc ff ff ff       	call   100056a6 <SoundBlaster16::~SoundBlaster16()+0x20>	100056a6: R_386_PC32	operator delete(void*, unsigned long)
100056aa:	83 c4 10             	add    esp,0x10
100056ad:	c9                   	leave  
100056ae:	c3                   	ret    
100056af:	90                   	nop

100056b0 <PHYS_RAM_TABLE_SIZE>:
100056b0:	13 05 00 00                                         ....

100056b4 <PHYS_HIGHEST_UNUSED_ADDRESS>:
100056b4:	24 05 00 00                                         $...

100056b8 <PHYS_RAM_TABLE>:
100056b8:	00 06 00 00                                         ....

100056bc <PHYS_DMA_MEMORY_1>:
100056bc:	00 00 01 00                                         ....

100056c0 <PHYS_PHYS_PAGE_BITMAP>:
100056c0:	00 00 02 00                                         ....

100056c4 <PHYS_VIRT_PAGE_BITMAP>:
100056c4:	00 00 04 00                                         ....

100056c8 <PHYS_DMA_MEMORY_2>:
100056c8:	00 00 06 00                                         ....

100056cc <PHYS_ALLOCED_VIRT_PAGES>:
100056cc:	00 00 10 00                                         ....

100056d0 <PHYS_KRNL_PAGE_DIRECTORY>:
100056d0:	00 10 00 00                                         ....

100056d4 <VIRT_KERNEL_BASE>:
100056d4:	00 00 00 c0                                         ....

100056d8 <VIRT_LOW_MEGS>:
100056d8:	00 00 00 c2                                         ....

100056dc <VIRT_CPU_SPECIFIC>:
100056dc:	00 00 40 c2                                         ..@.

100056e0 <VIRT_RECURSIVE_SPOT_1>:
100056e0:	00 00 80 c2                                         ....

100056e4 <VIRT_RECURSIVE_SPOT_2>:
100056e4:	00 00 c0 c2                                         ....

100056e8 <VIRT_DMA_MEMORY_1>:
100056e8:	00 00 01 c2                                         ....

100056ec <SIZE_DMA_MEMORY_1>:
100056ec:	00 00 01 00                                         ....

100056f0 <VIRT_DMA_MEMORY_2>:
100056f0:	00 00 06 c2                                         ....

100056f4 <SIZE_DMA_MEMORY_2>:
100056f4:	00 00 02 00                                         ....

100056f8 <VIRT_KRNL_PAGE_DIRECTORY>:
100056f8:	00 10 00 c2                                         ....

100056fc <VIRT_PHYS_PAGE_BITMAP>:
100056fc:	00 00 02 c2                                         ....

10005700 <SIZE_PHYS_PAGE_BITMAP>:
10005700:	00 00 02 00                                         ....

10005704 <VIRT_VIRT_PAGE_BITMAP>:
10005704:	00 00 04 c2                                         ....

10005708 <SIZE_VIRT_PAGE_BITMAP>:
10005708:	00 80 00 00                                         ....

1000570c <VIRT_RAM_TABLE>:
1000570c:	00 06 00 c2                                         ....

10005710 <VIRT_RAM_TABLE_SIZE>:
10005710:	13 05 00 c2                                         ....

10005714 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005714:	24 05 00 c2                                         $...

10005718 <SIZE_APP_STACK_USER>:
10005718:	00 00 18 00                                         ....

1000571c <SIZE_APP_STACK_KRNL>:
1000571c:	00 00 08 00                                         ....

10005720 <SIZE_APP_STACK_TOTAL>:
10005720:	00 00 20 00                                         .. .

10005724 <VIRT_APP_DATA>:
10005724:	00 00 00 10                                         ....

10005728 <VIRT_APP_STACK_USER_TOP>:
10005728:	00 00 00 02                                         ....

1000572c <VIRT_APP_STACK_KRNL_TOP>:
1000572c:	00 00 e8 01                                         ....

10005730 <VIRT_HEAP_MIN>:
10005730:	00 00 00 c8                                         ....

10005734 <VIRT_HEAP_MAX>:
10005734:	ff ff ff ef                                         ....

10005738 <VIRT_SBRK_MIN>:
10005738:	00 00 00 f0                                         ....

1000573c <VIRT_SBRK_MAX>:
1000573c:	00 00 c0 ff                                         ....

10005740 <VIRT_ALLOCED_VIRT_PAGES>:
10005740:	00 00 10 c2                                         ....

10005744 <VIRT_ACPI_DRIVER>:
10005744:	00 40 48 c2                                         .@H.

10005748 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005748:	30 00 00 00                                         0...

1000574c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000574c:	80 00 00 00 49 53 41 20 42 75 73 00 53 74 61 72     ....ISA Bus.Star
1000575c:	74 69 6e 67 20 53 6f 75 6e 64 62 6c 61 73 74 65     ting Soundblaste
1000576c:	72 20 64 72 69 76 65 72 2e 2e 2e 00 43 3a 2f 42     r driver....C:/B
1000577c:	61 6e 61 6e 61 2f 53 79 73 74 65 6d 2f 73 65 74     anana/System/set
1000578c:	75 70 69 73 64 2e 6f 6e 65 00 53 74 61 72 74 69     upisd.one.Starti
1000579c:	6e 67 20 67 61 6d 65 70 6f 72 74 20 64 72 69 76     ng gameport driv
100057ac:	65 72 2e 2e 2e 00 53 74 61 72 74 69 6e 67 20 66     er....Starting f
100057bc:	6c 6f 70 70 79 20 64 72 69 76 65 72 2e 2e 2e 00     loppy driver....
100057cc:	53 74 61 72 74 69 6e 67 20 50 53 2f 32 20 64 72     Starting PS/2 dr
100057dc:	69 76 65 72 2e 2e 2e 00 53 74 61 72 74 69 6e 67     iver....Starting
100057ec:	20 44 4d 41 20 64 72 69 76 65 72 2e 2e 2e 00 90      DMA driver.....

100057fc <vtable for ISA>:
	...
	10005804: R_386_32	ISA::~ISA()
	10005808: R_386_32	ISA::~ISA()
	1000580c: R_386_32	ISA::open(int, int, void*)
	10005810: R_386_32	ISA::close(int, int, void*)
	10005814: R_386_32	Device::hibernate()
	10005818: R_386_32	Device::wake()
	1000581c: R_386_32	ISA::detect()
	10005820: R_386_32	Device::disableLegacy()
	10005824: R_386_32	Device::powerSaving(PowerSavingLevel)

10005828 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005828:	96 00 00 00                                         ....

1000582c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000582c:	2c 01 00 00                                         ,...

10005830 <PHYS_RAM_TABLE_SIZE>:
10005830:	13 05 00 00                                         ....

10005834 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005834:	24 05 00 00                                         $...

10005838 <PHYS_RAM_TABLE>:
10005838:	00 06 00 00                                         ....

1000583c <PHYS_DMA_MEMORY_1>:
1000583c:	00 00 01 00                                         ....

10005840 <PHYS_PHYS_PAGE_BITMAP>:
10005840:	00 00 02 00                                         ....

10005844 <PHYS_VIRT_PAGE_BITMAP>:
10005844:	00 00 04 00                                         ....

10005848 <PHYS_DMA_MEMORY_2>:
10005848:	00 00 06 00                                         ....

1000584c <PHYS_ALLOCED_VIRT_PAGES>:
1000584c:	00 00 10 00                                         ....

10005850 <PHYS_KRNL_PAGE_DIRECTORY>:
10005850:	00 10 00 00                                         ....

10005854 <VIRT_KERNEL_BASE>:
10005854:	00 00 00 c0                                         ....

10005858 <VIRT_LOW_MEGS>:
10005858:	00 00 00 c2                                         ....

1000585c <VIRT_CPU_SPECIFIC>:
1000585c:	00 00 40 c2                                         ..@.

10005860 <VIRT_RECURSIVE_SPOT_1>:
10005860:	00 00 80 c2                                         ....

10005864 <VIRT_RECURSIVE_SPOT_2>:
10005864:	00 00 c0 c2                                         ....

10005868 <VIRT_DMA_MEMORY_1>:
10005868:	00 00 01 c2                                         ....

1000586c <SIZE_DMA_MEMORY_1>:
1000586c:	00 00 01 00                                         ....

10005870 <VIRT_DMA_MEMORY_2>:
10005870:	00 00 06 c2                                         ....

10005874 <SIZE_DMA_MEMORY_2>:
10005874:	00 00 02 00                                         ....

10005878 <VIRT_KRNL_PAGE_DIRECTORY>:
10005878:	00 10 00 c2                                         ....

1000587c <VIRT_PHYS_PAGE_BITMAP>:
1000587c:	00 00 02 c2                                         ....

10005880 <SIZE_PHYS_PAGE_BITMAP>:
10005880:	00 00 02 00                                         ....

10005884 <VIRT_VIRT_PAGE_BITMAP>:
10005884:	00 00 04 c2                                         ....

10005888 <SIZE_VIRT_PAGE_BITMAP>:
10005888:	00 80 00 00                                         ....

1000588c <VIRT_RAM_TABLE>:
1000588c:	00 06 00 c2                                         ....

10005890 <VIRT_RAM_TABLE_SIZE>:
10005890:	13 05 00 c2                                         ....

10005894 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005894:	24 05 00 c2                                         $...

10005898 <SIZE_APP_STACK_USER>:
10005898:	00 00 18 00                                         ....

1000589c <SIZE_APP_STACK_KRNL>:
1000589c:	00 00 08 00                                         ....

100058a0 <SIZE_APP_STACK_TOTAL>:
100058a0:	00 00 20 00                                         .. .

100058a4 <VIRT_APP_DATA>:
100058a4:	00 00 00 10                                         ....

100058a8 <VIRT_APP_STACK_USER_TOP>:
100058a8:	00 00 00 02                                         ....

100058ac <VIRT_APP_STACK_KRNL_TOP>:
100058ac:	00 00 e8 01                                         ....

100058b0 <VIRT_HEAP_MIN>:
100058b0:	00 00 00 c8                                         ....

100058b4 <VIRT_HEAP_MAX>:
100058b4:	ff ff ff ef                                         ....

100058b8 <VIRT_SBRK_MIN>:
100058b8:	00 00 00 f0                                         ....

100058bc <VIRT_SBRK_MAX>:
100058bc:	00 00 c0 ff                                         ....

100058c0 <VIRT_ALLOCED_VIRT_PAGES>:
100058c0:	00 00 10 c2                                         ....

100058c4 <VIRT_ACPI_DRIVER>:
100058c4:	00 40 48 c2 54 75 72 6e 69 6e 67 20 6f 66 66 20     .@H.Turning off 
100058d4:	74 68 65 20 66 6c 6f 70 70 79 20 6d 6f 74 6f 72     the floppy motor
100058e4:	2e 2e 2e 0a 00 46 6c 6f 70 70 79 20 44 69 73 6b     .....Floppy Disk
100058f4:	20 43 6f 6e 74 72 6f 6c 6c 65 72 00 50 52 45 56      Controller.PREV
10005904:	49 4f 55 53 20 43 4f 4d 4d 41 4e 44 20 46 41 49     IOUS COMMAND FAI
10005914:	4c 45 44 2c 20 43 41 55 47 48 54 20 42 59 20 77     LED, CAUGHT BY w
10005924:	72 69 74 65 43 6f 6d 6d 61 6e 64 00 44 49 44 20     riteCommand.DID 
10005934:	4e 4f 54 20 43 48 45 43 4b 20 46 4f 52 20 46 41     NOT CHECK FOR FA
10005944:	49 4c 55 52 45 20 42 45 46 4f 52 45 20 77 72 69     ILURE BEFORE wri
10005954:	74 65 43 6f 6d 6d 61 6e 64 00 46 6c 6f 70 70 79     teCommand.Floppy
10005964:	3a 3a 64 72 69 76 65 44 65 74 65 63 74 69 6f 6e     ::driveDetection
10005974:	28 29 0a 00 44 72 69 76 65 20 74 79 70 65 20 30     ()..Drive type 0
10005984:	3a 20 30 78 25 58 0a 00 44 72 69 76 65 20 74 79     : 0x%X..Drive ty
10005994:	70 65 20 31 3a 20 30 78 25 58 0a 00 76 6f 69 64     pe 1: 0x%X..void
100059a4:	20 46 6c 6f 70 70 79 3a 3a 72 65 73 65 74 28 29      Floppy::reset()
100059b4:	0a 00 53 50 45 43 49 46 59 20 42 41 44 20 44 41     ..SPECIFY BAD DA
100059c4:	54 41 52 41 54 45 00 00 20 a1 07 00 e0 93 04 00     TARATE.. .......
100059d4:	90 d0 03 00 40 42 0f 00 73 65 6c 65 63 74 20 28     ....@B..select (
100059e4:	41 29 2e 20 25 64 0a 00 73 65 6c 65 63 74 20 28     A). %d..select (
100059f4:	42 29 2e 0a 00 73 65 6c 65 63 74 20 28 43 29 2e     B)...select (C).
10005a04:	0a 00 73 65 6c 65 63 74 20 28 44 29 2e 0a 00 00     ..select (D)....
10005a14:	55 4e 53 55 50 50 4f 52 54 45 44 20 46 4c 4f 50     UNSUPPORTED FLOP
10005a24:	50 59 20 46 4f 52 4d 41 54 20 28 44 41 54 41 52     PY FORMAT (DATAR
10005a34:	41 54 45 20 4e 4f 54 20 4b 4e 4f 57 4e 29 00 73     ATE NOT KNOWN).s
10005a44:	65 6c 65 63 74 20 28 45 29 2e 0a 00 73 70 65 63     elect (E)...spec
10005a54:	69 66 69 79 20 72 65 73 65 74 2e 0a 00 73 65 6c     ifiy reset...sel
10005a64:	65 63 74 20 28 46 29 2e 0a 00 73 65 6c 65 63 74     ect (F)...select
10005a74:	20 28 46 32 29 2e 0a 00 63 61 6c 69 62 72 61 74      (F2)...calibrat
10005a84:	65 20 72 65 73 65 74 2e 0a 00 73 65 6c 65 63 74     e reset...select
10005a94:	20 28 47 29 2e 0a 00 73 65 6c 65 63 74 20 28 48      (G)...select (H
10005aa4:	29 2e 0a 00 73 65 6c 65 63 74 20 28 49 29 2e 0a     )...select (I)..
10005ab4:	00 46 6c 6f 70 70 79 3a 3a 6d 6f 74 6f 72 0a 00     .Floppy::motor..
10005ac4:	6e 75 6d 20 3d 20 25 64 2c 20 73 74 61 74 65 20     num = %d, state 
10005ad4:	3d 20 25 64 0a 00 73 74 61 74 65 2e 0a 00 73 74     = %d..state...st
10005ae4:	61 72 74 69 6e 67 20 74 68 65 20 6d 6f 74 6f 72     arting the motor
10005af4:	2e 0a 00 64 6f 72 20 31 20 3d 20 30 78 25 58 0a     ...dor 1 = 0x%X.
10005b04:	00 64 6f 72 20 32 20 3d 20 30 78 25 58 0a 00 6d     .dor 2 = 0x%X..m
10005b14:	6f 74 6f 72 20 61 67 61 69 6e 2e 0a 00 6d 6f 74     otor again...mot
10005b24:	6f 72 20 61 67 61 69 6e 20 32 2e 0a 00 6d 6f 74     or again 2...mot
10005b34:	6f 72 20 61 67 61 69 6e 20 33 2e 0a 00 6d 6f 74     or again 3...mot
10005b44:	6f 72 20 61 67 61 69 6e 20 34 2e 0a 00 6d 6f 74     or again 4...mot
10005b54:	6f 72 20 61 67 61 69 6e 20 35 2e 0a 00 6d 6f 74     or again 5...mot
10005b64:	6f 72 20 61 67 61 69 6e 20 36 2e 0a 00 46 6c 6f     or again 6...Flo
10005b74:	70 70 79 3a 3a 6d 6f 74 6f 72 20 64 6f 6e 65 2e     ppy::motor done.
10005b84:	0a 00 46 6c 6f 70 70 79 20 44 69 73 6b 20 44 72     ..Floppy Disk Dr
10005b94:	69 76 65 00 46 6c 6f 70 70 79 44 72 69 76 65 3a     ive.FloppyDrive:
10005ba4:	3a 6d 6f 74 6f 72 4f 6e 20 6e 75 6d 20 3d 20 25     :motorOn num = %
10005bb4:	64 0a 00 6e 75 6d 20 3d 20 25 64 0a 00 73 69 7a     d..num = %d..siz
10005bc4:	65 20 69 6e 20 4b 42 73 20 3d 20 25 64 0a 00 46     e in KBs = %d..F
10005bd4:	6c 6f 70 70 79 44 72 69 76 65 3a 3a 5f 6f 70 65     loppyDrive::_ope
10005be4:	6e 20 31 0a 00 46 6c 6f 70 70 79 44 72 69 76 65     n 1..FloppyDrive
10005bf4:	3a 3a 5f 6f 70 65 6e 20 32 0a 00 46 6c 6f 70 70     ::_open 2..Flopp
10005c04:	79 44 72 69 76 65 3a 3a 5f 6f 70 65 6e 20 33 0a     yDrive::_open 3.
10005c14:	00 46 6c 6f 70 70 79 44 72 69 76 65 3a 3a 73 65     .FloppyDrive::se
10005c24:	6c 65 63 74 0a 00 00 00 73 65 6c 65 63 74 69 6f     lect....selectio
10005c34:	6e 20 6c 6f 63 6b 65 64 20 6f 72 20 66 61 69 6c     n locked or fail
10005c44:	65 64 2e 2e 2e 0a 00 00 73 65 65 6b 3a 20 35 20     ed......seek: 5 
10005c54:	72 65 74 72 69 65 73 2c 20 63 6f 75 6c 64 20 6e     retries, could n
10005c64:	6f 74 20 63 61 6c 69 62 72 61 74 65 2e 0a 00 73     ot calibrate...s
10005c74:	65 65 6b 20 28 73 65 6c 29 20 25 64 2e 0a 00 73     eek (sel) %d...s
10005c84:	65 65 6b 20 28 6f 6e 29 20 25 64 2e 0a 00 73 65     eek (on) %d...se
10005c94:	65 6b 20 28 31 29 2e 0a 00 73 65 65 6b 20 28 61     ek (1)...seek (a
10005ca4:	61 29 2e 0a 00 73 65 65 6b 20 28 62 62 29 2e 0a     a)...seek (bb)..
10005cb4:	00 73 65 65 6b 20 28 32 29 2e 0a 00 73 65 65 6b     .seek (2)...seek
10005cc4:	20 28 33 29 2e 0a 00 73 65 65 6b 20 28 34 29 2e      (3)...seek (4).
10005cd4:	0a 00 73 65 65 6b 20 28 6e 69 72 71 29 2e 0a 00     ..seek (nirq)...
10005ce4:	73 65 65 6b 20 28 35 29 2e 0a 00 73 65 65 6b 20     seek (5)...seek 
10005cf4:	28 73 69 64 29 2e 0a 00 73 65 65 6b 20 28 6f 66     (sid)...seek (of
10005d04:	66 29 2e 0a 00 73 65 65 6b 20 28 75 6e 29 2e 0a     f)...seek (un)..
10005d14:	00 00 00 00 63 61 6c 69 62 72 61 74 65 3a 20 35     ....calibrate: 5
10005d24:	20 72 65 74 72 69 65 73 2c 20 63 6f 75 6c 64 20      retries, could 
10005d34:	6e 6f 74 20 63 61 6c 69 62 72 61 74 65 2e 0a 00     not calibrate...
10005d44:	63 61 6c 20 28 6f 6e 29 2c 20 25 64 0a 00 63 61     cal (on), %d..ca
10005d54:	6c 20 28 30 29 0a 00 63 61 6c 20 28 31 29 0a 00     l (0)..cal (1)..
10005d64:	63 61 6c 20 28 32 29 0a 00 63 61 6c 20 28 33 29     cal (2)..cal (3)
10005d74:	0a 00 63 61 6c 20 28 34 29 0a 00 63 61 6c 20 28     ..cal (4)..cal (
10005d84:	35 29 0a 00 20 72 65 74 72 79 3a 20 0a 00 41 62     5).. retry: ..Ab
10005d94:	6f 75 74 20 74 6f 20 73 65 65 6b 2e 0a 00 53 65     out to seek...Se
10005da4:	65 6b 20 64 6f 6e 65 2e 0a 00 4d 6f 74 6f 72 20     ek done...Motor 
10005db4:	6f 6e 2e 0a 00 53 65 6c 65 63 74 65 64 2e 0a 00     on...Selected...
10005dc4:	44 4d 41 20 69 6e 69 74 27 64 2e 0a 00 73 6c 65     DMA init'd...sle
10005dd4:	65 70 20 64 6f 6e 65 0a 00 61 62 6f 75 74 20 74     ep done..about t
10005de4:	6f 20 77 61 69 74 49 52 51 2e 0a 00 6e 6f 20 49     o waitIRQ...no I
10005df4:	52 51 2e 0a 00 67 6f 74 20 49 52 51 2e 0a 00 66     RQ...got IRQ...f
10005e04:	61 69 6c 75 72 65 20 72 65 61 64 69 6e 67 20 73     ailure reading s
10005e14:	74 61 74 75 73 2e 0a 00 72 65 61 64 20 72 65 73     tatus...read res
10005e24:	75 6c 74 20 62 79 74 65 73 2e 0a 00 6d 6f 74 6f     ult bytes...moto
10005e34:	72 20 6f 66 66 0a 00 75 6e 73 65 6c 65 63 74 2e     r off..unselect.
10005e44:	0a 00 43 61 63 68 65 73 20 68 61 76 65 20 62 65     ..Caches have be
10005e54:	65 6e 20 70 75 72 67 65 64 2e 0a 00 66 6c 6f 70     en purged...flop
10005e64:	70 79 20 72 65 61 64 20 63 6f 75 6e 74 20 6e 6f     py read count no
10005e74:	74 20 31 00 46 6c 6f 70 70 79 44 72 69 76 65 3a     t 1.FloppyDrive:
10005e84:	3a 72 65 61 64 20 63 61 6c 6c 65 64 2e 0a 00 43     :read called...C
10005e94:	20 30 78 25 58 2c 20 48 20 30 78 25 58 2c 20 53      0x%X, H 0x%X, S
10005ea4:	20 30 78 25 58 0a 00 72 65 61 64 69 6e 67 20 74      0x%X..reading t
10005eb4:	72 61 63 6b 2e 0a 00 90                             rack....

10005ebc <vtable for FloppyDrive>:
	...
	10005ec4: R_386_32	FloppyDrive::~FloppyDrive()
	10005ec8: R_386_32	FloppyDrive::~FloppyDrive()
	10005ecc: R_386_32	FloppyDrive::open(int, int, void*)
	10005ed0: R_386_32	FloppyDrive::close(int, int, void*)
	10005ed4: R_386_32	Device::hibernate()
	10005ed8: R_386_32	Device::wake()
	10005edc: R_386_32	Device::detect()
	10005ee0: R_386_32	Device::disableLegacy()
	10005ee4: R_386_32	Device::powerSaving(PowerSavingLevel)
	10005ee8: R_386_32	FloppyDrive::eject()
	10005eec: R_386_32	FloppyDrive::read(unsigned long long, int, void*)
	10005ef0: R_386_32	FloppyDrive::write(unsigned long long, int, void*)

10005ef4 <vtable for Floppy>:
	...
	10005efc: R_386_32	Floppy::~Floppy()
	10005f00: R_386_32	Floppy::~Floppy()
	10005f04: R_386_32	Floppy::open(int, int, void*)
	10005f08: R_386_32	Floppy::close(int, int, void*)
	10005f0c: R_386_32	Device::hibernate()
	10005f10: R_386_32	Device::wake()
	10005f14: R_386_32	Device::detect()
	10005f18: R_386_32	Device::disableLegacy()
	10005f1c: R_386_32	Device::powerSaving(PowerSavingLevel)

10005f20 <PHYS_RAM_TABLE_SIZE>:
10005f20:	13 05 00 00                                         ....

10005f24 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005f24:	24 05 00 00                                         $...

10005f28 <PHYS_RAM_TABLE>:
10005f28:	00 06 00 00                                         ....

10005f2c <PHYS_DMA_MEMORY_1>:
10005f2c:	00 00 01 00                                         ....

10005f30 <PHYS_PHYS_PAGE_BITMAP>:
10005f30:	00 00 02 00                                         ....

10005f34 <PHYS_VIRT_PAGE_BITMAP>:
10005f34:	00 00 04 00                                         ....

10005f38 <PHYS_DMA_MEMORY_2>:
10005f38:	00 00 06 00                                         ....

10005f3c <PHYS_ALLOCED_VIRT_PAGES>:
10005f3c:	00 00 10 00                                         ....

10005f40 <PHYS_KRNL_PAGE_DIRECTORY>:
10005f40:	00 10 00 00                                         ....

10005f44 <VIRT_KERNEL_BASE>:
10005f44:	00 00 00 c0                                         ....

10005f48 <VIRT_LOW_MEGS>:
10005f48:	00 00 00 c2                                         ....

10005f4c <VIRT_CPU_SPECIFIC>:
10005f4c:	00 00 40 c2                                         ..@.

10005f50 <VIRT_RECURSIVE_SPOT_1>:
10005f50:	00 00 80 c2                                         ....

10005f54 <VIRT_RECURSIVE_SPOT_2>:
10005f54:	00 00 c0 c2                                         ....

10005f58 <VIRT_DMA_MEMORY_1>:
10005f58:	00 00 01 c2                                         ....

10005f5c <SIZE_DMA_MEMORY_1>:
10005f5c:	00 00 01 00                                         ....

10005f60 <VIRT_DMA_MEMORY_2>:
10005f60:	00 00 06 c2                                         ....

10005f64 <SIZE_DMA_MEMORY_2>:
10005f64:	00 00 02 00                                         ....

10005f68 <VIRT_KRNL_PAGE_DIRECTORY>:
10005f68:	00 10 00 c2                                         ....

10005f6c <VIRT_PHYS_PAGE_BITMAP>:
10005f6c:	00 00 02 c2                                         ....

10005f70 <SIZE_PHYS_PAGE_BITMAP>:
10005f70:	00 00 02 00                                         ....

10005f74 <VIRT_VIRT_PAGE_BITMAP>:
10005f74:	00 00 04 c2                                         ....

10005f78 <SIZE_VIRT_PAGE_BITMAP>:
10005f78:	00 80 00 00                                         ....

10005f7c <VIRT_RAM_TABLE>:
10005f7c:	00 06 00 c2                                         ....

10005f80 <VIRT_RAM_TABLE_SIZE>:
10005f80:	13 05 00 c2                                         ....

10005f84 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005f84:	24 05 00 c2                                         $...

10005f88 <SIZE_APP_STACK_USER>:
10005f88:	00 00 18 00                                         ....

10005f8c <SIZE_APP_STACK_KRNL>:
10005f8c:	00 00 08 00                                         ....

10005f90 <SIZE_APP_STACK_TOTAL>:
10005f90:	00 00 20 00                                         .. .

10005f94 <VIRT_APP_DATA>:
10005f94:	00 00 00 10                                         ....

10005f98 <VIRT_APP_STACK_USER_TOP>:
10005f98:	00 00 00 02                                         ....

10005f9c <VIRT_APP_STACK_KRNL_TOP>:
10005f9c:	00 00 e8 01                                         ....

10005fa0 <VIRT_HEAP_MIN>:
10005fa0:	00 00 00 c8                                         ....

10005fa4 <VIRT_HEAP_MAX>:
10005fa4:	ff ff ff ef                                         ....

10005fa8 <VIRT_SBRK_MIN>:
10005fa8:	00 00 00 f0                                         ....

10005fac <VIRT_SBRK_MAX>:
10005fac:	00 00 c0 ff                                         ....

10005fb0 <VIRT_ALLOCED_VIRT_PAGES>:
10005fb0:	00 00 10 c2                                         ....

10005fb4 <VIRT_ACPI_DRIVER>:
10005fb4:	00 40 48 c2                                         .@H.

10005fb8 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005fb8:	96 00 00 00                                         ....

10005fbc <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005fbc:	2c 01 00 00 47 61 6d 65 70 6f 72 74 00 66 90 90     ,...Gameport.f..

10005fcc <vtable for Gameport>:
	...
	10005fd4: R_386_32	Gameport::~Gameport()
	10005fd8: R_386_32	Gameport::~Gameport()
	10005fdc: R_386_32	Gameport::open(int, int, void*)
	10005fe0: R_386_32	Gameport::close(int, int, void*)
	10005fe4: R_386_32	Device::hibernate()
	10005fe8: R_386_32	Device::wake()
	10005fec: R_386_32	Gameport::detect()
	10005ff0: R_386_32	Device::disableLegacy()
	10005ff4: R_386_32	Device::powerSaving(PowerSavingLevel)
	10005ff8: R_386_32	Gameport::read(int)
10005ffc:	a8 fe ff ff 00 00 00 00 00 00 00 00                 ............	10006004: R_386_32	non-virtual thunk to Gameport::read(int)

10006008 <vtable for JoystickHost>:
	...
	10006010: R_386_32	__cxa_pure_virtual

10006014 <PHYS_RAM_TABLE_SIZE>:
10006014:	13 05 00 00                                         ....

10006018 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10006018:	24 05 00 00                                         $...

1000601c <PHYS_RAM_TABLE>:
1000601c:	00 06 00 00                                         ....

10006020 <PHYS_DMA_MEMORY_1>:
10006020:	00 00 01 00                                         ....

10006024 <PHYS_PHYS_PAGE_BITMAP>:
10006024:	00 00 02 00                                         ....

10006028 <PHYS_VIRT_PAGE_BITMAP>:
10006028:	00 00 04 00                                         ....

1000602c <PHYS_DMA_MEMORY_2>:
1000602c:	00 00 06 00                                         ....

10006030 <PHYS_ALLOCED_VIRT_PAGES>:
10006030:	00 00 10 00                                         ....

10006034 <PHYS_KRNL_PAGE_DIRECTORY>:
10006034:	00 10 00 00                                         ....

10006038 <VIRT_KERNEL_BASE>:
10006038:	00 00 00 c0                                         ....

1000603c <VIRT_LOW_MEGS>:
1000603c:	00 00 00 c2                                         ....

10006040 <VIRT_CPU_SPECIFIC>:
10006040:	00 00 40 c2                                         ..@.

10006044 <VIRT_RECURSIVE_SPOT_1>:
10006044:	00 00 80 c2                                         ....

10006048 <VIRT_RECURSIVE_SPOT_2>:
10006048:	00 00 c0 c2                                         ....

1000604c <VIRT_DMA_MEMORY_1>:
1000604c:	00 00 01 c2                                         ....

10006050 <SIZE_DMA_MEMORY_1>:
10006050:	00 00 01 00                                         ....

10006054 <VIRT_DMA_MEMORY_2>:
10006054:	00 00 06 c2                                         ....

10006058 <SIZE_DMA_MEMORY_2>:
10006058:	00 00 02 00                                         ....

1000605c <VIRT_KRNL_PAGE_DIRECTORY>:
1000605c:	00 10 00 c2                                         ....

10006060 <VIRT_PHYS_PAGE_BITMAP>:
10006060:	00 00 02 c2                                         ....

10006064 <SIZE_PHYS_PAGE_BITMAP>:
10006064:	00 00 02 00                                         ....

10006068 <VIRT_VIRT_PAGE_BITMAP>:
10006068:	00 00 04 c2                                         ....

1000606c <SIZE_VIRT_PAGE_BITMAP>:
1000606c:	00 80 00 00                                         ....

10006070 <VIRT_RAM_TABLE>:
10006070:	00 06 00 c2                                         ....

10006074 <VIRT_RAM_TABLE_SIZE>:
10006074:	13 05 00 c2                                         ....

10006078 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10006078:	24 05 00 c2                                         $...

1000607c <SIZE_APP_STACK_USER>:
1000607c:	00 00 18 00                                         ....

10006080 <SIZE_APP_STACK_KRNL>:
10006080:	00 00 08 00                                         ....

10006084 <SIZE_APP_STACK_TOTAL>:
10006084:	00 00 20 00                                         .. .

10006088 <VIRT_APP_DATA>:
10006088:	00 00 00 10                                         ....

1000608c <VIRT_APP_STACK_USER_TOP>:
1000608c:	00 00 00 02                                         ....

10006090 <VIRT_APP_STACK_KRNL_TOP>:
10006090:	00 00 e8 01                                         ....

10006094 <VIRT_HEAP_MIN>:
10006094:	00 00 00 c8                                         ....

10006098 <VIRT_HEAP_MAX>:
10006098:	ff ff ff ef                                         ....

1000609c <VIRT_SBRK_MIN>:
1000609c:	00 00 00 f0                                         ....

100060a0 <VIRT_SBRK_MAX>:
100060a0:	00 00 c0 ff                                         ....

100060a4 <VIRT_ALLOCED_VIRT_PAGES>:
100060a4:	00 00 10 c2                                         ....

100060a8 <VIRT_ACPI_DRIVER>:
100060a8:	00 40 48 c2                                         .@H.

100060ac <TERMINAL_KEYBUFFER_IN_SIZE>:
100060ac:	96 00 00 00                                         ....

100060b0 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100060b0:	2c 01 00 00                                         ,...

100060b4 <CSWTCH.11>:
100060b4:	00 02 04 06 c0 c4 c8 cc                             ........

100060bc <CSWTCH.12>:
100060bc:	01 03 05 07 c2 c6 ca ce                             ........

100060c4 <CSWTCH.13>:
100060c4:	87 83 81 82 8f 8b 89 8a 4e 6f 74 20 69 6e 20 72     ........Not in r
100060d4:	61 6e 67 65 2e 0a 00 90                             ange....

100060dc <vtable for DMA>:
	...
	100060e4: R_386_32	DMA::~DMA()
	100060e8: R_386_32	DMA::~DMA()
	100060ec: R_386_32	DMA::open(int, int, void*)
	100060f0: R_386_32	DMA::close(int, int, void*)
	100060f4: R_386_32	Device::hibernate()
	100060f8: R_386_32	Device::wake()
	100060fc: R_386_32	Device::detect()
	10006100: R_386_32	Device::disableLegacy()
	10006104: R_386_32	Device::powerSaving(PowerSavingLevel)

10006108 <PHYS_RAM_TABLE_SIZE>:
10006108:	13 05 00 00                                         ....

1000610c <PHYS_HIGHEST_UNUSED_ADDRESS>:
1000610c:	24 05 00 00                                         $...

10006110 <PHYS_RAM_TABLE>:
10006110:	00 06 00 00                                         ....

10006114 <PHYS_DMA_MEMORY_1>:
10006114:	00 00 01 00                                         ....

10006118 <PHYS_PHYS_PAGE_BITMAP>:
10006118:	00 00 02 00                                         ....

1000611c <PHYS_VIRT_PAGE_BITMAP>:
1000611c:	00 00 04 00                                         ....

10006120 <PHYS_DMA_MEMORY_2>:
10006120:	00 00 06 00                                         ....

10006124 <PHYS_ALLOCED_VIRT_PAGES>:
10006124:	00 00 10 00                                         ....

10006128 <PHYS_KRNL_PAGE_DIRECTORY>:
10006128:	00 10 00 00                                         ....

1000612c <VIRT_KERNEL_BASE>:
1000612c:	00 00 00 c0                                         ....

10006130 <VIRT_LOW_MEGS>:
10006130:	00 00 00 c2                                         ....

10006134 <VIRT_CPU_SPECIFIC>:
10006134:	00 00 40 c2                                         ..@.

10006138 <VIRT_RECURSIVE_SPOT_1>:
10006138:	00 00 80 c2                                         ....

1000613c <VIRT_RECURSIVE_SPOT_2>:
1000613c:	00 00 c0 c2                                         ....

10006140 <VIRT_DMA_MEMORY_1>:
10006140:	00 00 01 c2                                         ....

10006144 <SIZE_DMA_MEMORY_1>:
10006144:	00 00 01 00                                         ....

10006148 <VIRT_DMA_MEMORY_2>:
10006148:	00 00 06 c2                                         ....

1000614c <SIZE_DMA_MEMORY_2>:
1000614c:	00 00 02 00                                         ....

10006150 <VIRT_KRNL_PAGE_DIRECTORY>:
10006150:	00 10 00 c2                                         ....

10006154 <VIRT_PHYS_PAGE_BITMAP>:
10006154:	00 00 02 c2                                         ....

10006158 <SIZE_PHYS_PAGE_BITMAP>:
10006158:	00 00 02 00                                         ....

1000615c <VIRT_VIRT_PAGE_BITMAP>:
1000615c:	00 00 04 c2                                         ....

10006160 <SIZE_VIRT_PAGE_BITMAP>:
10006160:	00 80 00 00                                         ....

10006164 <VIRT_RAM_TABLE>:
10006164:	00 06 00 c2                                         ....

10006168 <VIRT_RAM_TABLE_SIZE>:
10006168:	13 05 00 c2                                         ....

1000616c <VIRT_HIGHEST_UNUSED_ADDRESS>:
1000616c:	24 05 00 c2                                         $...

10006170 <SIZE_APP_STACK_USER>:
10006170:	00 00 18 00                                         ....

10006174 <SIZE_APP_STACK_KRNL>:
10006174:	00 00 08 00                                         ....

10006178 <SIZE_APP_STACK_TOTAL>:
10006178:	00 00 20 00                                         .. .

1000617c <VIRT_APP_DATA>:
1000617c:	00 00 00 10                                         ....

10006180 <VIRT_APP_STACK_USER_TOP>:
10006180:	00 00 00 02                                         ....

10006184 <VIRT_APP_STACK_KRNL_TOP>:
10006184:	00 00 e8 01                                         ....

10006188 <VIRT_HEAP_MIN>:
10006188:	00 00 00 c8                                         ....

1000618c <VIRT_HEAP_MAX>:
1000618c:	ff ff ff ef                                         ....

10006190 <VIRT_SBRK_MIN>:
10006190:	00 00 00 f0                                         ....

10006194 <VIRT_SBRK_MAX>:
10006194:	00 00 c0 ff                                         ....

10006198 <VIRT_ALLOCED_VIRT_PAGES>:
10006198:	00 00 10 c2                                         ....

1000619c <VIRT_ACPI_DRIVER>:
1000619c:	00 40 48 c2                                         .@H.

100061a0 <TERMINAL_KEYBUFFER_IN_SIZE>:
100061a0:	96 00 00 00                                         ....

100061a4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
100061a4:	2c 01 00 00                                         ,...

100061a8 <vtable for PS2>:
	...
	100061b0: R_386_32	PS2::~PS2()
	100061b4: R_386_32	PS2::~PS2()
	100061b8: R_386_32	PS2::open(int, int, void*)
	100061bc: R_386_32	PS2::close(int, int, void*)
	100061c0: R_386_32	Device::hibernate()
	100061c4: R_386_32	Device::wake()
	100061c8: R_386_32	PS2::detect()
	100061cc: R_386_32	Device::disableLegacy()
	100061d0: R_386_32	Device::powerSaving(PowerSavingLevel)
100061d4:	66 90 66 90 66 90 66 90 66 90 66 90                 f.f.f.f.f.f.

100061e0 <PHYS_RAM_TABLE_SIZE>:
100061e0:	13 05 00 00                                         ....

100061e4 <PHYS_HIGHEST_UNUSED_ADDRESS>:
100061e4:	24 05 00 00                                         $...

100061e8 <PHYS_RAM_TABLE>:
100061e8:	00 06 00 00                                         ....

100061ec <PHYS_DMA_MEMORY_1>:
100061ec:	00 00 01 00                                         ....

100061f0 <PHYS_PHYS_PAGE_BITMAP>:
100061f0:	00 00 02 00                                         ....

100061f4 <PHYS_VIRT_PAGE_BITMAP>:
100061f4:	00 00 04 00                                         ....

100061f8 <PHYS_DMA_MEMORY_2>:
100061f8:	00 00 06 00                                         ....

100061fc <PHYS_ALLOCED_VIRT_PAGES>:
100061fc:	00 00 10 00                                         ....

10006200 <PHYS_KRNL_PAGE_DIRECTORY>:
10006200:	00 10 00 00                                         ....

10006204 <VIRT_KERNEL_BASE>:
10006204:	00 00 00 c0                                         ....

10006208 <VIRT_LOW_MEGS>:
10006208:	00 00 00 c2                                         ....

1000620c <VIRT_CPU_SPECIFIC>:
1000620c:	00 00 40 c2                                         ..@.

10006210 <VIRT_RECURSIVE_SPOT_1>:
10006210:	00 00 80 c2                                         ....

10006214 <VIRT_RECURSIVE_SPOT_2>:
10006214:	00 00 c0 c2                                         ....

10006218 <VIRT_DMA_MEMORY_1>:
10006218:	00 00 01 c2                                         ....

1000621c <SIZE_DMA_MEMORY_1>:
1000621c:	00 00 01 00                                         ....

10006220 <VIRT_DMA_MEMORY_2>:
10006220:	00 00 06 c2                                         ....

10006224 <SIZE_DMA_MEMORY_2>:
10006224:	00 00 02 00                                         ....

10006228 <VIRT_KRNL_PAGE_DIRECTORY>:
10006228:	00 10 00 c2                                         ....

1000622c <VIRT_PHYS_PAGE_BITMAP>:
1000622c:	00 00 02 c2                                         ....

10006230 <SIZE_PHYS_PAGE_BITMAP>:
10006230:	00 00 02 00                                         ....

10006234 <VIRT_VIRT_PAGE_BITMAP>:
10006234:	00 00 04 c2                                         ....

10006238 <SIZE_VIRT_PAGE_BITMAP>:
10006238:	00 80 00 00                                         ....

1000623c <VIRT_RAM_TABLE>:
1000623c:	00 06 00 c2                                         ....

10006240 <VIRT_RAM_TABLE_SIZE>:
10006240:	13 05 00 c2                                         ....

10006244 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10006244:	24 05 00 c2                                         $...

10006248 <SIZE_APP_STACK_USER>:
10006248:	00 00 18 00                                         ....

1000624c <SIZE_APP_STACK_KRNL>:
1000624c:	00 00 08 00                                         ....

10006250 <SIZE_APP_STACK_TOTAL>:
10006250:	00 00 20 00                                         .. .

10006254 <VIRT_APP_DATA>:
10006254:	00 00 00 10                                         ....

10006258 <VIRT_APP_STACK_USER_TOP>:
10006258:	00 00 00 02                                         ....

1000625c <VIRT_APP_STACK_KRNL_TOP>:
1000625c:	00 00 e8 01                                         ....

10006260 <VIRT_HEAP_MIN>:
10006260:	00 00 00 c8                                         ....

10006264 <VIRT_HEAP_MAX>:
10006264:	ff ff ff ef                                         ....

10006268 <VIRT_SBRK_MIN>:
10006268:	00 00 00 f0                                         ....

1000626c <VIRT_SBRK_MAX>:
1000626c:	00 00 c0 ff                                         ....

10006270 <VIRT_ALLOCED_VIRT_PAGES>:
10006270:	00 00 10 c2                                         ....

10006274 <VIRT_ACPI_DRIVER>:
10006274:	00 40 48 c2                                         .@H.

10006278 <TERMINAL_KEYBUFFER_IN_SIZE>:
10006278:	96 00 00 00                                         ....

1000627c <TERMINAL_KEYBUFFER_OUT_SIZE>:
1000627c:	2c 01 00 00                                         ,...

10006280 <PS2Keyboard::internalMapperLower>:
10006280:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10006290:	20 20 20 20 20 71 31 20 20 20 7a 73 61 77 32 20          q1   zsaw2 
100062a0:	20 63 78 64 65 34 33 20 20 20 76 66 74 72 35 20      cxde43   vftr5 
100062b0:	20 6e 62 68 67 79 36 20 20 20 6d 6a 75 37 38 20      nbhgy6   mju78 
100062c0:	20 2c 6b 69 6f 30 39 20 20 2e 2f 6c 3b 70 2d 20      ,kio09  ./l;p- 
100062d0:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
100062e0:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
100062f0:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10006300:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10006380 <PS2Keyboard::internalMapperUpper>:
10006380:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10006390:	20 20 20 20 20 51 21 20 20 20 5a 53 41 57 40 20          Q!   ZSAW@ 
100063a0:	20 43 58 44 45 24 23 20 20 20 56 46 54 52 25 20      CXDE$#   VFTR% 
100063b0:	20 4e 42 48 47 59 5e 20 20 20 4d 4a 55 26 2a 20      NBHGY^   MJU&* 
100063c0:	20 3c 4b 49 4f 29 28 20 20 3e 3f 4c 3a 50 5f 20      <KIO)(  >?L:P_ 
100063d0:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
100063e0:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
100063f0:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10006400:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10006480 <PS2Keyboard::internalMapCapLower>:
10006480:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10006490:	20 20 20 20 20 51 31 20 20 20 5a 53 41 57 32 20          Q1   ZSAW2 
100064a0:	20 43 58 44 45 34 33 20 20 20 56 46 54 52 35 20      CXDE43   VFTR5 
100064b0:	20 4e 42 48 47 59 36 20 20 20 4d 4a 55 37 38 20      NBHGY6   MJU78 
100064c0:	20 2c 4b 49 4f 30 39 20 20 2e 2f 4c 3b 50 2d 20      ,KIO09  ./L;P- 
100064d0:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
100064e0:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
100064f0:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10006500:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10006580 <PS2Keyboard::internalMapCapUpper>:
10006580:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10006590:	20 20 20 20 20 51 21 20 20 20 7a 73 61 77 40 20          Q!   zsaw@ 
100065a0:	20 63 78 64 65 24 23 20 20 20 76 66 74 72 25 20      cxde$#   vftr% 
100065b0:	20 6e 62 68 67 79 5e 20 20 20 6d 6a 75 26 2a 20      nbhgy^   mju&* 
100065c0:	20 3c 6b 69 6f 29 28 20 20 3e 3f 6c 3a 70 5f 20      <kio)(  >?l:p_ 
100065d0:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
100065e0:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
100065f0:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10006600:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10006680 <PS2Keyboard::internalMapperLowerBad>:
10006680:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10006690:	71 77 65 72 74 79 75 69 6f 70 5b 5d 20 20 61 73     qwertyuiop[]  as
100066a0:	64 66 67 68 6a 6b 6c 3b 27 60 20 5c 7a 78 63 76     dfghjkl;'` \zxcv
100066b0:	62 6e 6d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     bnm,./ *        
100066c0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
100066d0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
100066e0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100066f0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006700:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10006710:	51 57 45 52 54 59 55 49 4f 50 7b 7d 20 20 41 53     QWERTYUIOP{}  AS
10006720:	44 46 47 48 4a 4b 4c 3a 22 7e 20 7c 5a 58 43 56     DFGHJKL:"~ |ZXCV
10006730:	42 4e 4d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     BNM<>? *        
10006740:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10006750:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006760:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006770:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006780:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10006790:	51 57 45 52 54 59 55 49 4f 50 5b 5d 20 20 41 53     QWERTYUIOP[]  AS
100067a0:	44 46 47 48 4a 4b 4c 3b 27 60 20 5c 5a 58 43 56     DFGHJKL;'` \ZXCV
100067b0:	42 4e 4d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     BNM,./ *        
100067c0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
100067d0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
100067e0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100067f0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006800:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10006810:	71 77 65 72 74 79 75 69 6f 70 7b 7d 20 20 61 73     qwertyuiop{}  as
10006820:	64 66 67 68 6a 6b 6c 3a 22 7e 20 7c 7a 78 63 76     dfghjkl:"~ |zxcv
10006830:	62 6e 6d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     bnm<>? *        
10006840:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10006850:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10006860:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006870:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10006880:	00 66 90 90                                         .f..

10006884 <vtable for PS2Keyboard>:
	...
	1000688c: R_386_32	PS2Keyboard::~PS2Keyboard()
	10006890: R_386_32	PS2Keyboard::~PS2Keyboard()
	10006894: R_386_32	PS2Keyboard::open(int, int, void*)
	10006898: R_386_32	PS2Keyboard::close(int, int, void*)
	1000689c: R_386_32	Device::hibernate()
	100068a0: R_386_32	Device::wake()
	100068a4: R_386_32	Device::detect()
	100068a8: R_386_32	Device::disableLegacy()
	100068ac: R_386_32	Device::powerSaving(PowerSavingLevel)
	100068b0: R_386_32	PS2Keyboard::setRepeatRate(int)
	100068b4: R_386_32	PS2Keyboard::setRepeatDelay(int)

100068b8 <PHYS_RAM_TABLE_SIZE>:
100068b8:	13 05 00 00                                         ....

100068bc <PHYS_HIGHEST_UNUSED_ADDRESS>:
100068bc:	24 05 00 00                                         $...

100068c0 <PHYS_RAM_TABLE>:
100068c0:	00 06 00 00                                         ....

100068c4 <PHYS_DMA_MEMORY_1>:
100068c4:	00 00 01 00                                         ....

100068c8 <PHYS_PHYS_PAGE_BITMAP>:
100068c8:	00 00 02 00                                         ....

100068cc <PHYS_VIRT_PAGE_BITMAP>:
100068cc:	00 00 04 00                                         ....

100068d0 <PHYS_DMA_MEMORY_2>:
100068d0:	00 00 06 00                                         ....

100068d4 <PHYS_ALLOCED_VIRT_PAGES>:
100068d4:	00 00 10 00                                         ....

100068d8 <PHYS_KRNL_PAGE_DIRECTORY>:
100068d8:	00 10 00 00                                         ....

100068dc <VIRT_KERNEL_BASE>:
100068dc:	00 00 00 c0                                         ....

100068e0 <VIRT_LOW_MEGS>:
100068e0:	00 00 00 c2                                         ....

100068e4 <VIRT_CPU_SPECIFIC>:
100068e4:	00 00 40 c2                                         ..@.

100068e8 <VIRT_RECURSIVE_SPOT_1>:
100068e8:	00 00 80 c2                                         ....

100068ec <VIRT_RECURSIVE_SPOT_2>:
100068ec:	00 00 c0 c2                                         ....

100068f0 <VIRT_DMA_MEMORY_1>:
100068f0:	00 00 01 c2                                         ....

100068f4 <SIZE_DMA_MEMORY_1>:
100068f4:	00 00 01 00                                         ....

100068f8 <VIRT_DMA_MEMORY_2>:
100068f8:	00 00 06 c2                                         ....

100068fc <SIZE_DMA_MEMORY_2>:
100068fc:	00 00 02 00                                         ....

10006900 <VIRT_KRNL_PAGE_DIRECTORY>:
10006900:	00 10 00 c2                                         ....

10006904 <VIRT_PHYS_PAGE_BITMAP>:
10006904:	00 00 02 c2                                         ....

10006908 <SIZE_PHYS_PAGE_BITMAP>:
10006908:	00 00 02 00                                         ....

1000690c <VIRT_VIRT_PAGE_BITMAP>:
1000690c:	00 00 04 c2                                         ....

10006910 <SIZE_VIRT_PAGE_BITMAP>:
10006910:	00 80 00 00                                         ....

10006914 <VIRT_RAM_TABLE>:
10006914:	00 06 00 c2                                         ....

10006918 <VIRT_RAM_TABLE_SIZE>:
10006918:	13 05 00 c2                                         ....

1000691c <VIRT_HIGHEST_UNUSED_ADDRESS>:
1000691c:	24 05 00 c2                                         $...

10006920 <SIZE_APP_STACK_USER>:
10006920:	00 00 18 00                                         ....

10006924 <SIZE_APP_STACK_KRNL>:
10006924:	00 00 08 00                                         ....

10006928 <SIZE_APP_STACK_TOTAL>:
10006928:	00 00 20 00                                         .. .

1000692c <VIRT_APP_DATA>:
1000692c:	00 00 00 10                                         ....

10006930 <VIRT_APP_STACK_USER_TOP>:
10006930:	00 00 00 02                                         ....

10006934 <VIRT_APP_STACK_KRNL_TOP>:
10006934:	00 00 e8 01                                         ....

10006938 <VIRT_HEAP_MIN>:
10006938:	00 00 00 c8                                         ....

1000693c <VIRT_HEAP_MAX>:
1000693c:	ff ff ff ef                                         ....

10006940 <VIRT_SBRK_MIN>:
10006940:	00 00 00 f0                                         ....

10006944 <VIRT_SBRK_MAX>:
10006944:	00 00 c0 ff                                         ....

10006948 <VIRT_ALLOCED_VIRT_PAGES>:
10006948:	00 00 10 c2                                         ....

1000694c <VIRT_ACPI_DRIVER>:
1000694c:	00 40 48 c2                                         .@H.

10006950 <TERMINAL_KEYBUFFER_IN_SIZE>:
10006950:	96 00 00 00                                         ....

10006954 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10006954:	2c 01 00 00                                         ,...

10006958 <vtable for PS2Mouse>:
	...
	10006960: R_386_32	PS2Mouse::~PS2Mouse()
	10006964: R_386_32	PS2Mouse::~PS2Mouse()
	10006968: R_386_32	PS2Mouse::open(int, int, void*)
	1000696c: R_386_32	PS2Mouse::close(int, int, void*)
	10006970: R_386_32	Device::hibernate()
	10006974: R_386_32	Device::wake()
	10006978: R_386_32	PS2Mouse::detect()
	1000697c: R_386_32	Device::disableLegacy()
	10006980: R_386_32	Device::powerSaving(PowerSavingLevel)

10006984 <PHYS_RAM_TABLE_SIZE>:
10006984:	13 05 00 00                                         ....

10006988 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10006988:	24 05 00 00                                         $...

1000698c <PHYS_RAM_TABLE>:
1000698c:	00 06 00 00                                         ....

10006990 <PHYS_DMA_MEMORY_1>:
10006990:	00 00 01 00                                         ....

10006994 <PHYS_PHYS_PAGE_BITMAP>:
10006994:	00 00 02 00                                         ....

10006998 <PHYS_VIRT_PAGE_BITMAP>:
10006998:	00 00 04 00                                         ....

1000699c <PHYS_DMA_MEMORY_2>:
1000699c:	00 00 06 00                                         ....

100069a0 <PHYS_ALLOCED_VIRT_PAGES>:
100069a0:	00 00 10 00                                         ....

100069a4 <PHYS_KRNL_PAGE_DIRECTORY>:
100069a4:	00 10 00 00                                         ....

100069a8 <VIRT_KERNEL_BASE>:
100069a8:	00 00 00 c0                                         ....

100069ac <VIRT_LOW_MEGS>:
100069ac:	00 00 00 c2                                         ....

100069b0 <VIRT_CPU_SPECIFIC>:
100069b0:	00 00 40 c2                                         ..@.

100069b4 <VIRT_RECURSIVE_SPOT_1>:
100069b4:	00 00 80 c2                                         ....

100069b8 <VIRT_RECURSIVE_SPOT_2>:
100069b8:	00 00 c0 c2                                         ....

100069bc <VIRT_DMA_MEMORY_1>:
100069bc:	00 00 01 c2                                         ....

100069c0 <SIZE_DMA_MEMORY_1>:
100069c0:	00 00 01 00                                         ....

100069c4 <VIRT_DMA_MEMORY_2>:
100069c4:	00 00 06 c2                                         ....

100069c8 <SIZE_DMA_MEMORY_2>:
100069c8:	00 00 02 00                                         ....

100069cc <VIRT_KRNL_PAGE_DIRECTORY>:
100069cc:	00 10 00 c2                                         ....

100069d0 <VIRT_PHYS_PAGE_BITMAP>:
100069d0:	00 00 02 c2                                         ....

100069d4 <SIZE_PHYS_PAGE_BITMAP>:
100069d4:	00 00 02 00                                         ....

100069d8 <VIRT_VIRT_PAGE_BITMAP>:
100069d8:	00 00 04 c2                                         ....

100069dc <SIZE_VIRT_PAGE_BITMAP>:
100069dc:	00 80 00 00                                         ....

100069e0 <VIRT_RAM_TABLE>:
100069e0:	00 06 00 c2                                         ....

100069e4 <VIRT_RAM_TABLE_SIZE>:
100069e4:	13 05 00 c2                                         ....

100069e8 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100069e8:	24 05 00 c2                                         $...

100069ec <SIZE_APP_STACK_USER>:
100069ec:	00 00 18 00                                         ....

100069f0 <SIZE_APP_STACK_KRNL>:
100069f0:	00 00 08 00                                         ....

100069f4 <SIZE_APP_STACK_TOTAL>:
100069f4:	00 00 20 00                                         .. .

100069f8 <VIRT_APP_DATA>:
100069f8:	00 00 00 10                                         ....

100069fc <VIRT_APP_STACK_USER_TOP>:
100069fc:	00 00 00 02                                         ....

10006a00 <VIRT_APP_STACK_KRNL_TOP>:
10006a00:	00 00 e8 01                                         ....

10006a04 <VIRT_HEAP_MIN>:
10006a04:	00 00 00 c8                                         ....

10006a08 <VIRT_HEAP_MAX>:
10006a08:	ff ff ff ef                                         ....

10006a0c <VIRT_SBRK_MIN>:
10006a0c:	00 00 00 f0                                         ....

10006a10 <VIRT_SBRK_MAX>:
10006a10:	00 00 c0 ff                                         ....

10006a14 <VIRT_ALLOCED_VIRT_PAGES>:
10006a14:	00 00 10 c2                                         ....

10006a18 <VIRT_ACPI_DRIVER>:
10006a18:	00 40 48 c2                                         .@H.

10006a1c <TERMINAL_KEYBUFFER_IN_SIZE>:
10006a1c:	96 00 00 00                                         ....

10006a20 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10006a20:	2c 01 00 00                                         ,...

10006a24 <vtable for PS2Port>:
	...
	10006a2c: R_386_32	PS2Port::~PS2Port()
	10006a30: R_386_32	PS2Port::~PS2Port()
	10006a34: R_386_32	PS2Port::open(int, int, void*)
	10006a38: R_386_32	PS2Port::close(int, int, void*)
	10006a3c: R_386_32	Device::hibernate()
	10006a40: R_386_32	Device::wake()
	10006a44: R_386_32	PS2Port::detect()
	10006a48: R_386_32	Device::disableLegacy()
	10006a4c: R_386_32	Device::powerSaving(PowerSavingLevel)

10006a50 <PHYS_RAM_TABLE_SIZE>:
10006a50:	13 05 00 00                                         ....

10006a54 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10006a54:	24 05 00 00                                         $...

10006a58 <PHYS_RAM_TABLE>:
10006a58:	00 06 00 00                                         ....

10006a5c <PHYS_DMA_MEMORY_1>:
10006a5c:	00 00 01 00                                         ....

10006a60 <PHYS_PHYS_PAGE_BITMAP>:
10006a60:	00 00 02 00                                         ....

10006a64 <PHYS_VIRT_PAGE_BITMAP>:
10006a64:	00 00 04 00                                         ....

10006a68 <PHYS_DMA_MEMORY_2>:
10006a68:	00 00 06 00                                         ....

10006a6c <PHYS_ALLOCED_VIRT_PAGES>:
10006a6c:	00 00 10 00                                         ....

10006a70 <PHYS_KRNL_PAGE_DIRECTORY>:
10006a70:	00 10 00 00                                         ....

10006a74 <VIRT_KERNEL_BASE>:
10006a74:	00 00 00 c0                                         ....

10006a78 <VIRT_LOW_MEGS>:
10006a78:	00 00 00 c2                                         ....

10006a7c <VIRT_CPU_SPECIFIC>:
10006a7c:	00 00 40 c2                                         ..@.

10006a80 <VIRT_RECURSIVE_SPOT_1>:
10006a80:	00 00 80 c2                                         ....

10006a84 <VIRT_RECURSIVE_SPOT_2>:
10006a84:	00 00 c0 c2                                         ....

10006a88 <VIRT_DMA_MEMORY_1>:
10006a88:	00 00 01 c2                                         ....

10006a8c <SIZE_DMA_MEMORY_1>:
10006a8c:	00 00 01 00                                         ....

10006a90 <VIRT_DMA_MEMORY_2>:
10006a90:	00 00 06 c2                                         ....

10006a94 <SIZE_DMA_MEMORY_2>:
10006a94:	00 00 02 00                                         ....

10006a98 <VIRT_KRNL_PAGE_DIRECTORY>:
10006a98:	00 10 00 c2                                         ....

10006a9c <VIRT_PHYS_PAGE_BITMAP>:
10006a9c:	00 00 02 c2                                         ....

10006aa0 <SIZE_PHYS_PAGE_BITMAP>:
10006aa0:	00 00 02 00                                         ....

10006aa4 <VIRT_VIRT_PAGE_BITMAP>:
10006aa4:	00 00 04 c2                                         ....

10006aa8 <SIZE_VIRT_PAGE_BITMAP>:
10006aa8:	00 80 00 00                                         ....

10006aac <VIRT_RAM_TABLE>:
10006aac:	00 06 00 c2                                         ....

10006ab0 <VIRT_RAM_TABLE_SIZE>:
10006ab0:	13 05 00 c2                                         ....

10006ab4 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10006ab4:	24 05 00 c2                                         $...

10006ab8 <SIZE_APP_STACK_USER>:
10006ab8:	00 00 18 00                                         ....

10006abc <SIZE_APP_STACK_KRNL>:
10006abc:	00 00 08 00                                         ....

10006ac0 <SIZE_APP_STACK_TOTAL>:
10006ac0:	00 00 20 00                                         .. .

10006ac4 <VIRT_APP_DATA>:
10006ac4:	00 00 00 10                                         ....

10006ac8 <VIRT_APP_STACK_USER_TOP>:
10006ac8:	00 00 00 02                                         ....

10006acc <VIRT_APP_STACK_KRNL_TOP>:
10006acc:	00 00 e8 01                                         ....

10006ad0 <VIRT_HEAP_MIN>:
10006ad0:	00 00 00 c8                                         ....

10006ad4 <VIRT_HEAP_MAX>:
10006ad4:	ff ff ff ef                                         ....

10006ad8 <VIRT_SBRK_MIN>:
10006ad8:	00 00 00 f0                                         ....

10006adc <VIRT_SBRK_MAX>:
10006adc:	00 00 c0 ff                                         ....

10006ae0 <VIRT_ALLOCED_VIRT_PAGES>:
10006ae0:	00 00 10 c2                                         ....

10006ae4 <VIRT_ACPI_DRIVER>:
10006ae4:	00 40 48 c2                                         .@H.

10006ae8 <TERMINAL_KEYBUFFER_IN_SIZE>:
10006ae8:	96 00 00 00                                         ....

10006aec <TERMINAL_KEYBUFFER_OUT_SIZE>:
10006aec:	2c 01 00 00 43 3a 2f 42 61 6e 61 6e 61 2f 41 75     ,...C:/Banana/Au
10006afc:	64 69 6f 2f 77 69 6e 39 38 73 6e 64 2e 77 61 76     dio/win98snd.wav
10006b0c:	00 53 4f 4e 47 20 53 48 4f 55 4c 44 20 42 45 20     .SONG SHOULD BE 
10006b1c:	44 4f 4e 45 2e 0a 00 53 6f 75 6e 64 42 6c 61 73     DONE...SoundBlas
10006b2c:	74 65 72 20 31 36 00 53 42 31 36 20 49 52 51 2e     ter 16.SB16 IRQ.
10006b3c:	0a 00 73 6f 75 6e 64 62 6c 61 73 74 65 72 20 31     ..soundblaster 1
10006b4c:	36 2e 0a 00 43 41 4e 27 54 20 47 45 54 20 44 4d     6...CAN'T GET DM
10006b5c:	41 20 43 48 41 4e 4e 45 4c 20 35 21 00 73 6f 75     A CHANNEL 5!.sou
10006b6c:	6e 64 62 6c 61 73 74 65 72 20 31 36 20 2d 20 42     ndblaster 16 - B
10006b7c:	2e 0a 00 73 6f 75 6e 64 62 6c 61 73 74 65 72 3a     ...soundblaster:
10006b8c:	20 44 4d 41 20 63 68 61 6e 6e 65 6c 20 35 20 68      DMA channel 5 h
10006b9c:	61 73 20 61 64 64 72 65 73 73 20 6f 66 20 30 78     as address of 0x
10006bac:	25 58 0a 00 73 6f 75 6e 64 62 6c 61 73 74 65 72     %X..soundblaster
10006bbc:	3a 20 44 4d 41 20 63 68 61 6e 6e 65 6c 20 35 20     : DMA channel 5 
10006bcc:	68 61 73 20 63 68 2e 20 6e 75 6d 2e 20 6f 66 20     has ch. num. of 
10006bdc:	30 78 25 58 0a 00 53 42 31 36 3a 20 63 75 72 72     0x%X..SB16: curr
10006bec:	65 6e 74 20 44 4d 41 20 72 65 67 69 73 74 65 72     ent DMA register
10006bfc:	20 3d 20 30 78 25 78 0a 00 6f 6e 20 69 72 71 2c      = 0x%x..on irq,
10006c0c:	20 64 6d 61 31 36 41 64 64 72 20 3d 20 30 78 25      dma16Addr = 0x%
10006c1c:	58 2c 20 35 3a 3a 61 64 64 72 20 3d 20 30 78 25     X, 5::addr = 0x%
10006c2c:	58 0a 00 77 72 69 74 65 20 6c 6f 63 61 74 69 6f     X..write locatio
10006c3c:	6e 20 3d 20 30 78 25 58 0a 00 68 65 6c 6c 6f 20     n = 0x%X..hello 
10006c4c:	77 6f 72 6c 64 20 41 21 0a 00 68 65 6c 6c 6f 20     world A!..hello 
10006c5c:	77 6f 72 6c 64 20 42 21 0a 00 66 90                 world B!..f.

10006c68 <vtable for SoundBlaster16>:
	...
	10006c70: R_386_32	SoundBlaster16::~SoundBlaster16()
	10006c74: R_386_32	SoundBlaster16::~SoundBlaster16()
	10006c78: R_386_32	SoundBlaster16::open(int, int, void*)
	10006c7c: R_386_32	SoundBlaster16::close(int, int, void*)
	10006c80: R_386_32	Device::hibernate()
	10006c84: R_386_32	Device::wake()
	10006c88: R_386_32	Device::detect()
	10006c8c: R_386_32	Device::disableLegacy()
	10006c90: R_386_32	Device::powerSaving(PowerSavingLevel)
	10006c94: R_386_32	SoundBlaster16::beginPlayback()
	10006c98: R_386_32	SoundBlaster16::stopPlayback()
