
packages/system/32/0002/legacy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	realstart(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <realstart(void*)>:
10000017:	53                   	push   ebx
10000018:	83 ec 14             	sub    esp,0x14
1000001b:	68 58 01 00 00       	push   0x158
10000020:	e8 fc ff ff ff       	call   10000021 <realstart(void*)+0xa>	10000021: R_386_PC32	malloc
10000025:	89 04 24             	mov    DWORD PTR [esp],eax
10000028:	89 c3                	mov    ebx,eax
1000002a:	e8 fc ff ff ff       	call   1000002b <realstart(void*)+0x14>	1000002b: R_386_PC32	ISA::ISA()
1000002f:	58                   	pop    eax
10000030:	5a                   	pop    edx
10000031:	53                   	push   ebx
10000032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000036:	e8 fc ff ff ff       	call   10000037 <realstart(void*)+0x20>	10000037: R_386_PC32	Device::addChild(Device*)
1000003b:	6a 00                	push   0x0
1000003d:	8b 03                	mov    eax,DWORD PTR [ebx]
1000003f:	6a 00                	push   0x0
10000041:	6a 00                	push   0x0
10000043:	53                   	push   ebx
10000044:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000047:	83 c4 28             	add    esp,0x28
1000004a:	5b                   	pop    ebx
1000004b:	c3                   	ret    

1000004c <ISA::ISA()>:
1000004c:	55                   	push   ebp
1000004d:	89 e5                	mov    ebp,esp
1000004f:	83 ec 08             	sub    esp,0x8
10000052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000055:	83 ec 08             	sub    esp,0x8
10000058:	68 b4 2b 00 10       	push   0x10002bb4	10000059: R_386_32	.text
1000005d:	50                   	push   eax
1000005e:	e8 fc ff ff ff       	call   1000005f <ISA::ISA()+0x13>	1000005f: R_386_PC32	Bus::Bus(char const*)
10000063:	83 c4 10             	add    esp,0x10
10000066:	ba 08 00 00 00       	mov    edx,0x8	10000067: R_386_32	vtable for ISA
1000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000006e:	89 10                	mov    DWORD PTR [eax],edx
10000070:	90                   	nop
10000071:	c9                   	leave  
10000072:	c3                   	ret    
10000073:	90                   	nop

10000074 <ISA::open(int, int, void*)>:
10000074:	83 ec 18             	sub    esp,0x18
10000077:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000007b:	8b 10                	mov    edx,DWORD PTR [eax]
1000007d:	50                   	push   eax
1000007e:	ff 52 18             	call   DWORD PTR [edx+0x18]
10000081:	31 c0                	xor    eax,eax
10000083:	83 c4 1c             	add    esp,0x1c
10000086:	c3                   	ret    
10000087:	90                   	nop

10000088 <ISA::close(int, int, void*)>:
10000088:	31 c0                	xor    eax,eax
1000008a:	c3                   	ret    
1000008b:	90                   	nop

1000008c <ISA::doSpeaker()>:
1000008c:	c3                   	ret    
1000008d:	90                   	nop

1000008e <ISA::doSoundblaster()>:
1000008e:	c3                   	ret    
1000008f:	90                   	nop

10000090 <ISA::doSerial()>:
10000090:	c3                   	ret    
10000091:	90                   	nop

10000092 <ISA::doParallel()>:
10000092:	c3                   	ret    
10000093:	90                   	nop

10000094 <ISA::doGameport()>:
10000094:	53                   	push   ebx
10000095:	83 ec 14             	sub    esp,0x14
10000098:	68 80 01 00 00       	push   0x180
1000009d:	e8 fc ff ff ff       	call   1000009e <ISA::doGameport()+0xa>	1000009e: R_386_PC32	malloc
100000a2:	89 04 24             	mov    DWORD PTR [esp],eax
100000a5:	89 c3                	mov    ebx,eax
100000a7:	e8 fc ff ff ff       	call   100000a8 <ISA::doGameport()+0x14>	100000a8: R_386_PC32	Gameport::Gameport()
100000ac:	58                   	pop    eax
100000ad:	5a                   	pop    edx
100000ae:	53                   	push   ebx
100000af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000b3:	e8 fc ff ff ff       	call   100000b4 <ISA::doGameport()+0x20>	100000b4: R_386_PC32	Device::addChild(Device*)
100000b8:	6a 00                	push   0x0
100000ba:	8b 03                	mov    eax,DWORD PTR [ebx]
100000bc:	6a 00                	push   0x0
100000be:	6a 00                	push   0x0
100000c0:	53                   	push   ebx
100000c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
100000c4:	83 c4 28             	add    esp,0x28
100000c7:	5b                   	pop    ebx
100000c8:	c3                   	ret    
100000c9:	90                   	nop

100000ca <ISA::doFloppy()>:
100000ca:	f6 05 10 04 00 00 01 	test   BYTE PTR ds:0x410,0x1
100000d1:	74 1f                	je     100000f2 <ISA::doFloppy()+0x28>
100000d3:	83 ec 14             	sub    esp,0x14
100000d6:	6a 01                	push   0x1
100000d8:	68 bc 2b 00 10       	push   0x10002bbc	100000d9: R_386_32	.text
100000dd:	e8 fc ff ff ff       	call   100000de <ISA::doFloppy()+0x14>	100000de: R_386_PC32	Thr::loadDLL(char const*, bool)
100000e2:	5a                   	pop    edx
100000e3:	59                   	pop    ecx
100000e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100000e8:	50                   	push   eax
100000e9:	e8 fc ff ff ff       	call   100000ea <ISA::doFloppy()+0x20>	100000ea: R_386_PC32	Thr::executeDLL(unsigned long, void*)
100000ee:	83 c4 1c             	add    esp,0x1c
100000f1:	c3                   	ret    
100000f2:	c3                   	ret    
100000f3:	90                   	nop

100000f4 <ISA::doATA()>:
100000f4:	c3                   	ret    
100000f5:	90                   	nop

100000f6 <ISA::doPS2()>:
100000f6:	53                   	push   ebx
100000f7:	83 ec 14             	sub    esp,0x14
100000fa:	68 00 00 00 00       	push   0x0	100000fb: R_386_32	str_ps2
100000ff:	e8 fc ff ff ff       	call   10000100 <ISA::doPS2()+0xa>	10000100: R_386_PC32	Dbg::kprintf(char const*, ...)
10000104:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000107: R_386_32	str_ps2
1000010b:	e8 fc ff ff ff       	call   1000010c <ISA::doPS2()+0x16>	1000010c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000110:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000113: R_386_32	str_ps2
10000117:	e8 fc ff ff ff       	call   10000118 <ISA::doPS2()+0x22>	10000118: R_386_PC32	Dbg::kprintf(char const*, ...)
1000011c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	1000011f: R_386_32	str_ps2
10000123:	e8 fc ff ff ff       	call   10000124 <ISA::doPS2()+0x2e>	10000124: R_386_PC32	Dbg::kprintf(char const*, ...)
10000128:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
1000012f:	e8 fc ff ff ff       	call   10000130 <ISA::doPS2()+0x3a>	10000130: R_386_PC32	malloc
10000134:	89 04 24             	mov    DWORD PTR [esp],eax
10000137:	89 c3                	mov    ebx,eax
10000139:	e8 fc ff ff ff       	call   1000013a <ISA::doPS2()+0x44>	1000013a: R_386_PC32	PS2::PS2()
1000013e:	58                   	pop    eax
1000013f:	5a                   	pop    edx
10000140:	53                   	push   ebx
10000141:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000145:	e8 fc ff ff ff       	call   10000146 <ISA::doPS2()+0x50>	10000146: R_386_PC32	Device::addChild(Device*)
1000014a:	6a 00                	push   0x0
1000014c:	8b 03                	mov    eax,DWORD PTR [ebx]
1000014e:	6a 00                	push   0x0
10000150:	6a 00                	push   0x0
10000152:	53                   	push   ebx
10000153:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000156:	83 c4 28             	add    esp,0x28
10000159:	5b                   	pop    ebx
1000015a:	c3                   	ret    
1000015b:	90                   	nop

1000015c <ISA::doRTC()>:
1000015c:	c3                   	ret    
1000015d:	90                   	nop

1000015e <ISA::detect()>:
1000015e:	57                   	push   edi
1000015f:	56                   	push   esi
10000160:	53                   	push   ebx
10000161:	83 ec 2c             	sub    esp,0x2c
10000164:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
10000168:	68 5c 01 00 00       	push   0x15c
1000016d:	e8 fc ff ff ff       	call   1000016e <ISA::detect()+0x10>	1000016e: R_386_PC32	malloc
10000172:	89 04 24             	mov    DWORD PTR [esp],eax
10000175:	89 c3                	mov    ebx,eax
10000177:	e8 fc ff ff ff       	call   10000178 <ISA::detect()+0x1a>	10000178: R_386_PC32	DMA::DMA()
1000017c:	59                   	pop    ecx
1000017d:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	1000017f: R_386_32	isaDMAController
10000183:	5e                   	pop    esi
10000184:	53                   	push   ebx
10000185:	57                   	push   edi
10000186:	e8 fc ff ff ff       	call   10000187 <ISA::detect()+0x29>	10000187: R_386_PC32	Device::addChild(Device*)
1000018b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000018c: R_386_32	isaDMAController
10000190:	8b 10                	mov    edx,DWORD PTR [eax]
10000192:	6a 00                	push   0x0
10000194:	6a 00                	push   0x0
10000196:	6a 00                	push   0x0
10000198:	50                   	push   eax
10000199:	ff 52 08             	call   DWORD PTR [edx+0x8]
1000019c:	83 c4 20             	add    esp,0x20
1000019f:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100001a1: R_386_32	detectDone
100001a6:	0f 85 eb 00 00 00    	jne    10000297 <ISA::detect()+0x139>
100001ac:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100001ae: R_386_32	detectDone
100001b3:	31 db                	xor    ebx,ebx
100001b5:	52                   	push   edx
100001b6:	6a 01                	push   0x1
100001b8:	68 00 00 00 00       	push   0x0	100001b9: R_386_32	str_isadonesafe
100001bd:	68 00 00 00 00       	push   0x0	100001be: R_386_32	str_isa
100001c2:	e8 fc ff ff ff       	call   100001c3 <ISA::detect()+0x65>	100001c3: R_386_PC32	Reg::readBoolWithDefault(char*, char*, bool)
100001c7:	83 c4 10             	add    esp,0x10
100001ca:	50                   	push   eax
100001cb:	50                   	push   eax
100001cc:	68 00 00 00 00       	push   0x0	100001cd: R_386_32	str_devices
100001d1:	8d 74 24 0c          	lea    esi,[esp+0xc]
100001d5:	56                   	push   esi
100001d6:	e8 fc ff ff ff       	call   100001d7 <ISA::detect()+0x79>	100001d7: R_386_PC32	strcpy
100001db:	83 c4 10             	add    esp,0x10
100001de:	85 db                	test   ebx,ebx
100001e0:	75 09                	jne    100001eb <ISA::detect()+0x8d>
100001e2:	50                   	push   eax
100001e3:	50                   	push   eax
100001e4:	68 00 00 00 00       	push   0x0	100001e5: R_386_32	str_spk
100001e9:	eb 52                	jmp    1000023d <ISA::detect()+0xdf>
100001eb:	83 fb 01             	cmp    ebx,0x1
100001ee:	75 09                	jne    100001f9 <ISA::detect()+0x9b>
100001f0:	50                   	push   eax
100001f1:	50                   	push   eax
100001f2:	68 00 00 00 00       	push   0x0	100001f3: R_386_32	str_rtc
100001f7:	eb 44                	jmp    1000023d <ISA::detect()+0xdf>
100001f9:	83 fb 02             	cmp    ebx,0x2
100001fc:	75 09                	jne    10000207 <ISA::detect()+0xa9>
100001fe:	50                   	push   eax
100001ff:	50                   	push   eax
10000200:	68 00 00 00 00       	push   0x0	10000201: R_386_32	str_ps2
10000205:	eb 36                	jmp    1000023d <ISA::detect()+0xdf>
10000207:	83 fb 03             	cmp    ebx,0x3
1000020a:	75 09                	jne    10000215 <ISA::detect()+0xb7>
1000020c:	50                   	push   eax
1000020d:	50                   	push   eax
1000020e:	68 00 00 00 00       	push   0x0	1000020f: R_386_32	str_floppy
10000213:	eb 28                	jmp    1000023d <ISA::detect()+0xdf>
10000215:	83 fb 04             	cmp    ebx,0x4
10000218:	75 09                	jne    10000223 <ISA::detect()+0xc5>
1000021a:	50                   	push   eax
1000021b:	50                   	push   eax
1000021c:	68 00 00 00 00       	push   0x0	1000021d: R_386_32	str_sb16
10000221:	eb 1a                	jmp    1000023d <ISA::detect()+0xdf>
10000223:	83 fb 05             	cmp    ebx,0x5
10000226:	75 09                	jne    10000231 <ISA::detect()+0xd3>
10000228:	51                   	push   ecx
10000229:	51                   	push   ecx
1000022a:	68 00 00 00 00       	push   0x0	1000022b: R_386_32	str_isaata
1000022f:	eb 0c                	jmp    1000023d <ISA::detect()+0xdf>
10000231:	83 fb 06             	cmp    ebx,0x6
10000234:	75 10                	jne    10000246 <ISA::detect()+0xe8>
10000236:	52                   	push   edx
10000237:	52                   	push   edx
10000238:	68 00 00 00 00       	push   0x0	10000239: R_386_32	str_gp
1000023d:	56                   	push   esi
1000023e:	e8 fc ff ff ff       	call   1000023f <ISA::detect()+0xe1>	1000023f: R_386_PC32	strcat
10000243:	83 c4 10             	add    esp,0x10
10000246:	50                   	push   eax
10000247:	6a ff                	push   0xffffffff
10000249:	56                   	push   esi
1000024a:	68 00 00 00 00       	push   0x0	1000024b: R_386_32	str_isa
1000024f:	e8 fc ff ff ff       	call   10000250 <ISA::detect()+0xf2>	10000250: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
10000254:	83 c4 10             	add    esp,0x10
10000257:	83 f8 fe             	cmp    eax,0xfffffffe
1000025a:	74 31                	je     1000028d <ISA::detect()+0x12f>
1000025c:	83 fb 02             	cmp    ebx,0x2
1000025f:	75 0b                	jne    1000026c <ISA::detect()+0x10e>
10000261:	83 ec 0c             	sub    esp,0xc
10000264:	57                   	push   edi
10000265:	e8 fc ff ff ff       	call   10000266 <ISA::detect()+0x108>	10000266: R_386_PC32	ISA::doPS2()
1000026a:	eb 1e                	jmp    1000028a <ISA::detect()+0x12c>
1000026c:	83 fb 03             	cmp    ebx,0x3
1000026f:	75 0b                	jne    1000027c <ISA::detect()+0x11e>
10000271:	83 ec 0c             	sub    esp,0xc
10000274:	57                   	push   edi
10000275:	e8 fc ff ff ff       	call   10000276 <ISA::detect()+0x118>	10000276: R_386_PC32	ISA::doFloppy()
1000027a:	eb 0e                	jmp    1000028a <ISA::detect()+0x12c>
1000027c:	83 fb 06             	cmp    ebx,0x6
1000027f:	75 0c                	jne    1000028d <ISA::detect()+0x12f>
10000281:	83 ec 0c             	sub    esp,0xc
10000284:	57                   	push   edi
10000285:	e8 fc ff ff ff       	call   10000286 <ISA::detect()+0x128>	10000286: R_386_PC32	ISA::doGameport()
1000028a:	83 c4 10             	add    esp,0x10
1000028d:	43                   	inc    ebx
1000028e:	83 fb 07             	cmp    ebx,0x7
10000291:	0f 85 33 ff ff ff    	jne    100001ca <ISA::detect()+0x6c>
10000297:	83 c4 20             	add    esp,0x20
1000029a:	5b                   	pop    ebx
1000029b:	5e                   	pop    esi
1000029c:	5f                   	pop    edi
1000029d:	c3                   	ret    

1000029e <Gameport::Gameport()>:
1000029e:	55                   	push   ebp
1000029f:	89 e5                	mov    ebp,esp
100002a1:	83 ec 08             	sub    esp,0x8
100002a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002a7:	83 ec 08             	sub    esp,0x8
100002aa:	68 a8 2c 00 10       	push   0x10002ca8	100002ab: R_386_32	.text
100002af:	50                   	push   eax
100002b0:	e8 fc ff ff ff       	call   100002b1 <Gameport::Gameport()+0x13>	100002b1: R_386_PC32	Device::Device(char const*)
100002b5:	83 c4 10             	add    esp,0x10
100002b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002bb:	05 58 01 00 00       	add    eax,0x158
100002c0:	83 ec 0c             	sub    esp,0xc
100002c3:	50                   	push   eax
100002c4:	e8 fc ff ff ff       	call   100002c5 <Gameport::Gameport()+0x27>	100002c5: R_386_PC32	JoystickHost::JoystickHost()
100002c9:	83 c4 10             	add    esp,0x10
100002cc:	ba 08 00 00 00       	mov    edx,0x8	100002cd: R_386_32	vtable for Gameport
100002d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002d4:	89 10                	mov    DWORD PTR [eax],edx
100002d6:	ba 38 00 00 00       	mov    edx,0x38	100002d7: R_386_32	vtable for Gameport
100002db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002de:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
100002e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002e7:	c7 80 5c 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x15c],0x14a
100002f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002f4:	c7 80 60 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x160],0x14a
100002fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000301:	c7 80 64 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x164],0x14a
1000030b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000030e:	c7 80 68 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x168],0x14a
10000318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000031b:	c7 80 6c 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x16c],0x3d4
10000325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000328:	c7 80 70 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x170],0x3d4
10000332:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000335:	c7 80 74 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x174],0x3d4
1000033f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000342:	c7 80 78 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x178],0x3d4
1000034c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000034f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
10000356:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000359:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10000360:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000363:	c6 80 7e 01 00 00 00 	mov    BYTE PTR [eax+0x17e],0x0
1000036a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000036d:	c6 80 7f 01 00 00 00 	mov    BYTE PTR [eax+0x17f],0x0
10000374:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000377:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
1000037e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000381:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10000388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000038b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000391:	0f b6 d0             	movzx  edx,al
10000394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000397:	66 c7 44 90 04 01 02 	mov    WORD PTR [eax+edx*4+0x4],0x201
1000039e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100003a7:	0f b6 d0             	movzx  edx,al
100003aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003ad:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100003b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003b5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100003bb:	8d 50 01             	lea    edx,[eax+0x1]
100003be:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100003c1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100003c7:	0f b6 d0             	movzx  edx,al
100003ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003cd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100003d1:	83 e1 3f             	and    ecx,0x3f
100003d4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100003d8:	90                   	nop
100003d9:	c9                   	leave  
100003da:	c3                   	ret    
100003db:	90                   	nop

100003dc <Gameport::~Gameport()>:
100003dc:	55                   	push   ebp
100003dd:	89 e5                	mov    ebp,esp
100003df:	83 ec 08             	sub    esp,0x8
100003e2:	ba 08 00 00 00       	mov    edx,0x8	100003e3: R_386_32	vtable for Gameport
100003e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003ea:	89 10                	mov    DWORD PTR [eax],edx
100003ec:	ba 38 00 00 00       	mov    edx,0x38	100003ed: R_386_32	vtable for Gameport
100003f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003f4:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
100003fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003fd:	83 ec 0c             	sub    esp,0xc
10000400:	50                   	push   eax
10000401:	e8 fc ff ff ff       	call   10000402 <Gameport::~Gameport()+0x26>	10000402: R_386_PC32	Device::~Device()
10000406:	83 c4 10             	add    esp,0x10
10000409:	90                   	nop
1000040a:	c9                   	leave  
1000040b:	c3                   	ret    

1000040c <Gameport::~Gameport()>:
1000040c:	55                   	push   ebp
1000040d:	89 e5                	mov    ebp,esp
1000040f:	83 ec 08             	sub    esp,0x8
10000412:	83 ec 0c             	sub    esp,0xc
10000415:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000418:	e8 fc ff ff ff       	call   10000419 <Gameport::~Gameport()+0xd>	10000419: R_386_PC32	Gameport::~Gameport()
1000041d:	83 c4 10             	add    esp,0x10
10000420:	83 ec 08             	sub    esp,0x8
10000423:	68 80 01 00 00       	push   0x180
10000428:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000042b:	e8 fc ff ff ff       	call   1000042c <Gameport::~Gameport()+0x20>	1000042c: R_386_PC32	operator delete(void*, unsigned long)
10000430:	83 c4 10             	add    esp,0x10
10000433:	c9                   	leave  
10000434:	c3                   	ret    
10000435:	90                   	nop

10000436 <Gameport::calibration(int)>:
10000436:	57                   	push   edi
10000437:	56                   	push   esi
10000438:	53                   	push   ebx
10000439:	81 ec d0 00 00 00    	sub    esp,0xd0
1000043f:	8b 9c 24 e0 00 00 00 	mov    ebx,DWORD PTR [esp+0xe0]
10000446:	8b b4 24 e4 00 00 00 	mov    esi,DWORD PTR [esp+0xe4]
1000044d:	80 bb 7e 01 00 00 00 	cmp    BYTE PTR [ebx+0x17e],0x0
10000454:	74 0c                	je     10000462 <Gameport::calibration(int)+0x2c>
10000456:	c6 83 7f 01 00 00 01 	mov    BYTE PTR [ebx+0x17f],0x1
1000045d:	e9 09 01 00 00       	jmp    1000056b <Gameport::calibration(int)+0x135>
10000462:	8d bc 24 9c 00 00 00 	lea    edi,[esp+0x9c]
10000469:	50                   	push   eax
1000046a:	56                   	push   esi
1000046b:	53                   	push   ebx
1000046c:	57                   	push   edi
1000046d:	e8 fc ff ff ff       	call   1000046e <Gameport::calibration(int)+0x38>	1000046e: R_386_PC32	Gameport::readRaw(int)
10000472:	83 ec 0c             	sub    esp,0xc
10000475:	6a 00                	push   0x0
10000477:	68 40 42 0f 00       	push   0xf4240
1000047c:	e8 fc ff ff ff       	call   1000047d <Gameport::calibration(int)+0x47>	1000047d: R_386_PC32	nanoSleep(unsigned long long)
10000481:	8d 44 24 20          	lea    eax,[esp+0x20]
10000485:	83 c4 1c             	add    esp,0x1c
10000488:	56                   	push   esi
10000489:	53                   	push   ebx
1000048a:	50                   	push   eax
1000048b:	e8 fc ff ff ff       	call   1000048c <Gameport::calibration(int)+0x56>	1000048c: R_386_PC32	Gameport::readRaw(int)
10000490:	83 ec 0c             	sub    esp,0xc
10000493:	6a 00                	push   0x0
10000495:	68 40 42 0f 00       	push   0xf4240
1000049a:	e8 fc ff ff ff       	call   1000049b <Gameport::calibration(int)+0x65>	1000049b: R_386_PC32	nanoSleep(unsigned long long)
1000049f:	8d 44 24 54          	lea    eax,[esp+0x54]
100004a3:	83 c4 1c             	add    esp,0x1c
100004a6:	56                   	push   esi
100004a7:	53                   	push   ebx
100004a8:	50                   	push   eax
100004a9:	e8 fc ff ff ff       	call   100004aa <Gameport::calibration(int)+0x74>	100004aa: R_386_PC32	Gameport::readRaw(int)
100004ae:	83 ec 0c             	sub    esp,0xc
100004b1:	6a 00                	push   0x0
100004b3:	68 40 42 0f 00       	push   0xf4240
100004b8:	e8 fc ff ff ff       	call   100004b9 <Gameport::calibration(int)+0x83>	100004b9: R_386_PC32	nanoSleep(unsigned long long)
100004bd:	8d 84 24 88 00 00 00 	lea    eax,[esp+0x88]
100004c4:	83 c4 1c             	add    esp,0x1c
100004c7:	56                   	push   esi
100004c8:	53                   	push   ebx
100004c9:	50                   	push   eax
100004ca:	e8 fc ff ff ff       	call   100004cb <Gameport::calibration(int)+0x95>	100004cb: R_386_PC32	Gameport::readRaw(int)
100004cf:	83 ec 0c             	sub    esp,0xc
100004d2:	6a 00                	push   0x0
100004d4:	68 40 42 0f 00       	push   0xf4240
100004d9:	e8 fc ff ff ff       	call   100004da <Gameport::calibration(int)+0xa4>	100004da: R_386_PC32	nanoSleep(unsigned long long)
100004de:	83 c4 1c             	add    esp,0x1c
100004e1:	56                   	push   esi
100004e2:	53                   	push   ebx
100004e3:	57                   	push   edi
100004e4:	bf 03 00 00 00       	mov    edi,0x3
100004e9:	e8 fc ff ff ff       	call   100004ea <Gameport::calibration(int)+0xb4>	100004ea: R_386_PC32	Gameport::readRaw(int)
100004ee:	31 d2                	xor    edx,edx
100004f0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100004f4:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
100004f8:	03 84 24 88 00 00 00 	add    eax,DWORD PTR [esp+0x88]
100004ff:	f7 f7                	div    edi
10000501:	31 d2                	xor    edx,edx
10000503:	89 c1                	mov    ecx,eax
10000505:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10000509:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
1000050d:	03 84 24 8c 00 00 00 	add    eax,DWORD PTR [esp+0x8c]
10000514:	83 c4 0c             	add    esp,0xc
10000517:	f7 f7                	div    edi
10000519:	85 f6                	test   esi,esi
1000051b:	75 0e                	jne    1000052b <Gameport::calibration(int)+0xf5>
1000051d:	89 8b 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],ecx
10000523:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10000529:	eb 0c                	jmp    10000537 <Gameport::calibration(int)+0x101>
1000052b:	89 8b 64 01 00 00    	mov    DWORD PTR [ebx+0x164],ecx
10000531:	89 83 68 01 00 00    	mov    DWORD PTR [ebx+0x168],eax
10000537:	6b 83 5c 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x15c],0x3
1000053e:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
10000544:	6b 83 60 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x160],0x3
1000054b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
10000551:	6b 83 64 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x164],0x3
10000558:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
1000055e:	6b 83 68 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x168],0x3
10000565:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
1000056b:	81 c4 d0 00 00 00    	add    esp,0xd0
10000571:	5b                   	pop    ebx
10000572:	5e                   	pop    esi
10000573:	5f                   	pop    edi
10000574:	c3                   	ret    
10000575:	90                   	nop

10000576 <Gameport::detect()>:
10000576:	53                   	push   ebx
10000577:	81 ec 88 00 00 00    	sub    esp,0x88
1000057d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
10000584:	8d 44 24 18          	lea    eax,[esp+0x18]
10000588:	51                   	push   ecx
10000589:	6a 00                	push   0x0
1000058b:	53                   	push   ebx
1000058c:	50                   	push   eax
1000058d:	e8 fc ff ff ff       	call   1000058e <Gameport::detect()+0x18>	1000058e: R_386_PC32	Gameport::readRaw(int)
10000592:	8d 44 24 58          	lea    eax,[esp+0x58]
10000596:	52                   	push   edx
10000597:	52                   	push   edx
10000598:	6a 01                	push   0x1
1000059a:	53                   	push   ebx
1000059b:	50                   	push   eax
1000059c:	e8 fc ff ff ff       	call   1000059d <Gameport::detect()+0x27>	1000059d: R_386_PC32	Gameport::readRaw(int)
100005a1:	83 c4 1c             	add    esp,0x1c
100005a4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
100005ab:	75 14                	jne    100005c1 <Gameport::detect()+0x4b>
100005ad:	f6 44 24 18 10       	test   BYTE PTR [esp+0x18],0x10
100005b2:	74 0d                	je     100005c1 <Gameport::detect()+0x4b>
100005b4:	52                   	push   edx
100005b5:	52                   	push   edx
100005b6:	6a 00                	push   0x0
100005b8:	53                   	push   ebx
100005b9:	e8 fc ff ff ff       	call   100005ba <Gameport::detect()+0x44>	100005ba: R_386_PC32	Gameport::calibration(int)
100005be:	83 c4 10             	add    esp,0x10
100005c1:	8a 54 24 4c          	mov    dl,BYTE PTR [esp+0x4c]
100005c5:	83 e2 10             	and    edx,0x10
100005c8:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
100005cf:	75 19                	jne    100005ea <Gameport::detect()+0x74>
100005d1:	84 d2                	test   dl,dl
100005d3:	74 15                	je     100005ea <Gameport::detect()+0x74>
100005d5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
100005d9:	50                   	push   eax
100005da:	50                   	push   eax
100005db:	6a 01                	push   0x1
100005dd:	53                   	push   ebx
100005de:	e8 fc ff ff ff       	call   100005df <Gameport::detect()+0x69>	100005df: R_386_PC32	Gameport::calibration(int)
100005e3:	83 c4 10             	add    esp,0x10
100005e6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
100005ea:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
100005ee:	c0 e8 04             	shr    al,0x4
100005f1:	83 e0 01             	and    eax,0x1
100005f4:	84 d2                	test   dl,dl
100005f6:	88 83 7c 01 00 00    	mov    BYTE PTR [ebx+0x17c],al
100005fc:	0f 95 83 7d 01 00 00 	setne  BYTE PTR [ebx+0x17d]
10000603:	81 c4 88 00 00 00    	add    esp,0x88
10000609:	5b                   	pop    ebx
1000060a:	c3                   	ret    
1000060b:	90                   	nop

1000060c <Gameport::read(int)>:
1000060c:	57                   	push   edi
1000060d:	56                   	push   esi
1000060e:	53                   	push   ebx
1000060f:	83 ec 50             	sub    esp,0x50
10000612:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10000616:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
1000061a:	85 f6                	test   esi,esi
1000061c:	75 09                	jne    10000627 <Gameport::read(int)+0x1b>
1000061e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10000625:	eb 0c                	jmp    10000633 <Gameport::read(int)+0x27>
10000627:	83 fe 01             	cmp    esi,0x1
1000062a:	75 15                	jne    10000641 <Gameport::read(int)+0x35>
1000062c:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10000633:	75 0c                	jne    10000641 <Gameport::read(int)+0x35>
10000635:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10000639:	80 20 ef             	and    BYTE PTR [eax],0xef
1000063c:	e9 b0 00 00 00       	jmp    100006f1 <Gameport::read(int)+0xe5>
10000641:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10000645:	52                   	push   edx
10000646:	56                   	push   esi
10000647:	53                   	push   ebx
10000648:	50                   	push   eax
10000649:	e8 fc ff ff ff       	call   1000064a <Gameport::read(int)+0x3e>	1000064a: R_386_PC32	Gameport::readRaw(int)
1000064e:	83 c4 0c             	add    esp,0xc
10000651:	4e                   	dec    esi
10000652:	75 1a                	jne    1000066e <Gameport::read(int)+0x62>
10000654:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
1000065a:	8b b3 68 01 00 00    	mov    esi,DWORD PTR [ebx+0x168]
10000660:	8b 93 74 01 00 00    	mov    edx,DWORD PTR [ebx+0x174]
10000666:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
1000066c:	eb 18                	jmp    10000686 <Gameport::read(int)+0x7a>
1000066e:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
10000674:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
1000067a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
10000680:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10000686:	85 ff                	test   edi,edi
10000688:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000068c:	0f 94 c0             	sete   al
1000068f:	85 f6                	test   esi,esi
10000691:	0f 94 c1             	sete   cl
10000694:	09 c1                	or     ecx,eax
10000696:	39 d7                	cmp    edi,edx
10000698:	0f 94 c0             	sete   al
1000069b:	08 c1                	or     cl,al
1000069d:	75 96                	jne    10000635 <Gameport::read(int)+0x29>
1000069f:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
100006a3:	74 90                	je     10000635 <Gameport::read(int)+0x29>
100006a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100006a9:	89 d9                	mov    ecx,ebx
100006ab:	29 f1                	sub    ecx,esi
100006ad:	6b c9 7f             	imul   ecx,ecx,0x7f
100006b0:	39 fb                	cmp    ebx,edi
100006b2:	7e 1a                	jle    100006ce <Gameport::read(int)+0xc2>
100006b4:	29 fb                	sub    ebx,edi
100006b6:	29 fa                	sub    edx,edi
100006b8:	6b db 7f             	imul   ebx,ebx,0x7f
100006bb:	89 d7                	mov    edi,edx
100006bd:	89 d8                	mov    eax,ebx
100006bf:	99                   	cdq    
100006c0:	f7 ff                	idiv   edi
100006c2:	89 c3                	mov    ebx,eax
100006c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100006c8:	29 f0                	sub    eax,esi
100006ca:	89 c6                	mov    esi,eax
100006cc:	eb 07                	jmp    100006d5 <Gameport::read(int)+0xc9>
100006ce:	89 c8                	mov    eax,ecx
100006d0:	99                   	cdq    
100006d1:	f7 ff                	idiv   edi
100006d3:	89 c3                	mov    ebx,eax
100006d5:	89 c8                	mov    eax,ecx
100006d7:	88 5c 24 2d          	mov    BYTE PTR [esp+0x2d],bl
100006db:	99                   	cdq    
100006dc:	b9 0d 00 00 00       	mov    ecx,0xd
100006e1:	f7 fe                	idiv   esi
100006e3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
100006e7:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
100006eb:	8d 74 24 1c          	lea    esi,[esp+0x1c]
100006ef:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100006f1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100006f5:	83 c4 50             	add    esp,0x50
100006f8:	5b                   	pop    ebx
100006f9:	5e                   	pop    esi
100006fa:	5f                   	pop    edi
100006fb:	c2 04 00             	ret    0x4

100006fe <non-virtual thunk to Gameport::read(int)>:
100006fe:	81 6c 24 08 58 01 00 00 	sub    DWORD PTR [esp+0x8],0x158
10000706:	e9 01 ff ff ff       	jmp    1000060c <Gameport::read(int)>
1000070b:	90                   	nop

1000070c <Gameport::readRaw(int)>:
1000070c:	57                   	push   edi
1000070d:	ba 01 02 00 00       	mov    edx,0x201
10000712:	56                   	push   esi
10000713:	53                   	push   ebx
10000714:	83 ec 10             	sub    esp,0x10
10000717:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
1000071b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
1000071f:	8a 03                	mov    al,BYTE PTR [ebx]
10000721:	83 e0 e0             	and    eax,0xffffffe0
10000724:	83 c8 12             	or     eax,0x12
10000727:	88 03                	mov    BYTE PTR [ebx],al
10000729:	ec                   	in     al,dx
1000072a:	88 c2                	mov    dl,al
1000072c:	85 f6                	test   esi,esi
1000072e:	75 11                	jne    10000741 <Gameport::readRaw(int)+0x35>
10000730:	c0 ea 04             	shr    dl,0x4
10000733:	c0 e8 05             	shr    al,0x5
10000736:	83 e2 01             	and    edx,0x1
10000739:	83 e0 01             	and    eax,0x1
1000073c:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
1000073f:	eb 0c                	jmp    1000074d <Gameport::readRaw(int)+0x41>
10000741:	c0 ea 06             	shr    dl,0x6
10000744:	c0 e8 07             	shr    al,0x7
10000747:	83 e2 01             	and    edx,0x1
1000074a:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
1000074d:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
10000750:	ba 01 02 00 00       	mov    edx,0x201
10000755:	b0 ff                	mov    al,0xff
10000757:	ee                   	out    dx,al
10000758:	e8 fc ff ff ff       	call   10000759 <Gameport::readRaw(int)+0x4d>	10000759: R_386_PC32	lockScheduler()
1000075d:	4e                   	dec    esi
1000075e:	c7 44 24 0c ff ff 00 00 	mov    DWORD PTR [esp+0xc],0xffff
10000766:	0f 94 c1             	sete   cl
10000769:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
1000076e:	0f b6 f1             	movzx  esi,cl
10000771:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
10000776:	0f b6 c9             	movzx  ecx,cl
10000779:	8d 74 76 01          	lea    esi,[esi+esi*2+0x1]
1000077d:	49                   	dec    ecx
1000077e:	31 ff                	xor    edi,edi
10000780:	83 e1 fa             	and    ecx,0xfffffffa
10000783:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
1000078b:	83 c1 08             	add    ecx,0x8
1000078e:	ba 01 02 00 00       	mov    edx,0x201
10000793:	ec                   	in     al,dx
10000794:	0f b6 c0             	movzx  eax,al
10000797:	85 f0                	test   eax,esi
10000799:	0f 94 c2             	sete   dl
1000079c:	08 54 24 0a          	or     BYTE PTR [esp+0xa],dl
100007a0:	80 7c 24 0a 01       	cmp    BYTE PTR [esp+0xa],0x1
100007a5:	83 54 24 04 00       	adc    DWORD PTR [esp+0x4],0x0
100007aa:	85 c8                	test   eax,ecx
100007ac:	0f 94 c0             	sete   al
100007af:	08 44 24 0b          	or     BYTE PTR [esp+0xb],al
100007b3:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
100007b8:	83 d7 00             	adc    edi,0x0
100007bb:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
100007bf:	75 19                	jne    100007da <Gameport::readRaw(int)+0xce>
100007c1:	e8 fc ff ff ff       	call   100007c2 <Gameport::readRaw(int)+0xb6>	100007c2: R_386_PC32	unlockScheduler()
100007c6:	81 ff ff ff 00 00    	cmp    edi,0xffff
100007cc:	74 1c                	je     100007ea <Gameport::readRaw(int)+0xde>
100007ce:	81 7c 24 04 ff ff 00 00 	cmp    DWORD PTR [esp+0x4],0xffff
100007d6:	75 15                	jne    100007ed <Gameport::readRaw(int)+0xe1>
100007d8:	eb 10                	jmp    100007ea <Gameport::readRaw(int)+0xde>
100007da:	80 7c 24 0a 00       	cmp    BYTE PTR [esp+0xa],0x0
100007df:	74 ad                	je     1000078e <Gameport::readRaw(int)+0x82>
100007e1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
100007e6:	74 a6                	je     1000078e <Gameport::readRaw(int)+0x82>
100007e8:	eb d7                	jmp    100007c1 <Gameport::readRaw(int)+0xb5>
100007ea:	80 23 ef             	and    BYTE PTR [ebx],0xef
100007ed:	89 7b 18             	mov    DWORD PTR [ebx+0x18],edi
100007f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100007f4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
100007f7:	83 c4 10             	add    esp,0x10
100007fa:	89 d8                	mov    eax,ebx
100007fc:	5b                   	pop    ebx
100007fd:	5e                   	pop    esi
100007fe:	5f                   	pop    edi
100007ff:	c2 04 00             	ret    0x4

10000802 <Gameport::open(int, int, void*)>:
10000802:	31 c0                	xor    eax,eax
10000804:	c3                   	ret    
10000805:	90                   	nop

10000806 <Gameport::close(int, int, void*)>:
10000806:	31 c0                	xor    eax,eax
10000808:	c3                   	ret    
10000809:	90                   	nop

1000080a <DMAChannel::DMAChannel(int)>:
1000080a:	55                   	push   ebp
1000080b:	89 e5                	mov    ebp,esp
1000080d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000810:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10000817:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000081a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10000821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000824:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000827:	89 10                	mov    DWORD PTR [eax],edx
10000829:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000082c:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10000833:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000836:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
1000083d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000840:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
10000844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000847:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
1000084b:	83 7d 0c 03          	cmp    DWORD PTR [ebp+0xc],0x3
1000084f:	0f 9f c2             	setg   dl
10000852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000855:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
10000858:	90                   	nop
10000859:	5d                   	pop    ebp
1000085a:	c3                   	ret    
1000085b:	90                   	nop

1000085c <DMAChannel::~DMAChannel()>:
1000085c:	55                   	push   ebp
1000085d:	89 e5                	mov    ebp,esp
1000085f:	83 ec 08             	sub    esp,0x8
10000862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000865:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10000868:	85 c0                	test   eax,eax
1000086a:	74 19                	je     10000885 <DMAChannel::~DMAChannel()+0x29>
1000086c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000086f:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
10000872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000875:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10000878:	83 ec 08             	sub    esp,0x8
1000087b:	52                   	push   edx
1000087c:	50                   	push   eax
1000087d:	e8 fc ff ff ff       	call   1000087e <DMAChannel::~DMAChannel()+0x22>	1000087e: R_386_PC32	Phys::freeDMA(unsigned long, unsigned long)
10000882:	83 c4 10             	add    esp,0x10
10000885:	90                   	nop
10000886:	c9                   	leave  
10000887:	c3                   	ret    

10000888 <DMAChannel::getAddress()>:
10000888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000088c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000088f:	c3                   	ret    

10000890 <DMAChannel::getChannelNum()>:
10000890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000894:	8b 00                	mov    eax,DWORD PTR [eax]
10000896:	c3                   	ret    
10000897:	90                   	nop

10000898 <DMAChannel::setLength(unsigned int)>:
10000898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000089c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
100008a0:	3d 00 00 01 00       	cmp    eax,0x10000
100008a5:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
100008a8:	76 0d                	jbe    100008b7 <DMAChannel::setLength(unsigned int)+0x1f>
100008aa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	100008ae: R_386_32	dmaLong
100008b2:	e9 fc ff ff ff       	jmp    100008b3 <DMAChannel::setLength(unsigned int)+0x1b>	100008b3: R_386_PC32	Krnl::panic(char const*)
100008b7:	c3                   	ret    

100008b8 <DMAChannel::setAddress(unsigned int)>:
100008b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100008bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
100008c0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100008c3:	c3                   	ret    

100008c4 <DMAChannel::allocateAddressAndSet(unsigned short)>:
100008c4:	56                   	push   esi
100008c5:	53                   	push   ebx
100008c6:	83 ec 10             	sub    esp,0x10
100008c9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100008cd:	0f b7 74 24 20       	movzx  esi,WORD PTR [esp+0x20]
100008d2:	56                   	push   esi
100008d3:	e8 fc ff ff ff       	call   100008d4 <DMAChannel::allocateAddressAndSet(unsigned short)+0x10>	100008d4: R_386_PC32	Phys::allocateDMA(unsigned long)
100008d8:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
100008db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
100008de:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100008e1:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
100008e4:	83 c4 14             	add    esp,0x14
100008e7:	5b                   	pop    ebx
100008e8:	5e                   	pop    esi
100008e9:	c3                   	ret    

100008ea <DMAChannel::setMode(unsigned char)>:
100008ea:	53                   	push   ebx
100008eb:	83 ec 08             	sub    esp,0x8
100008ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100008f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100008f6:	80 7b 0d 00          	cmp    BYTE PTR [ebx+0xd],0x0
100008fa:	88 43 0f             	mov    BYTE PTR [ebx+0xf],al
100008fd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
10000901:	74 2a                	je     1000092d <DMAChannel::setMode(unsigned char)+0x43>
10000903:	51                   	push   ecx
10000904:	51                   	push   ecx
10000905:	6a 01                	push   0x1
10000907:	53                   	push   ebx
10000908:	e8 fc ff ff ff       	call   10000909 <DMAChannel::setMode(unsigned char)+0x1f>	10000909: R_386_PC32	DMAChannel::mask(bool)
1000090d:	80 7b 0e 01          	cmp    BYTE PTR [ebx+0xe],0x1
10000911:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
10000914:	19 d2                	sbb    edx,edx
10000916:	80 e2 35             	and    dl,0x35
10000919:	81 c2 d6 00 00 00    	add    edx,0xd6
1000091f:	ee                   	out    dx,al
10000920:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
10000924:	83 c4 18             	add    esp,0x18
10000927:	5b                   	pop    ebx
10000928:	e9 ff 00 00 00       	jmp    10000a2c <DMAChannel::unmask()>
1000092d:	83 c4 08             	add    esp,0x8
10000930:	5b                   	pop    ebx
10000931:	c3                   	ret    

10000932 <DMAChannel::start()>:
10000932:	57                   	push   edi
10000933:	56                   	push   esi
10000934:	53                   	push   ebx
10000935:	83 ec 10             	sub    esp,0x10
10000938:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
1000093c:	8b 06                	mov    eax,DWORD PTR [esi]
1000093e:	83 f8 07             	cmp    eax,0x7
10000941:	0f 87 96 00 00 00    	ja     100009dd <DMAChannel::start()+0xab>
10000947:	8a 98 9c 2d 00 10    	mov    bl,BYTE PTR [eax+0x10002d9c]	10000949: R_386_32	.text
1000094d:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
10000951:	8a 98 a4 2d 00 10    	mov    bl,BYTE PTR [eax+0x10002da4]	10000953: R_386_32	.text
10000957:	8a 80 ac 2d 00 10    	mov    al,BYTE PTR [eax+0x10002dac]	10000959: R_386_32	.text
1000095d:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
10000961:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
10000965:	e8 fc ff ff ff       	call   10000966 <DMAChannel::start()+0x34>	10000966: R_386_PC32	lockScheduler()
1000096a:	50                   	push   eax
1000096b:	50                   	push   eax
1000096c:	6a 01                	push   0x1
1000096e:	56                   	push   esi
1000096f:	e8 fc ff ff ff       	call   10000970 <DMAChannel::start()+0x3e>	10000970: R_386_PC32	DMAChannel::mask(bool)
10000974:	8a 5e 0e             	mov    bl,BYTE PTR [esi+0xe]
10000977:	83 c4 10             	add    esp,0x10
1000097a:	80 fb 01             	cmp    bl,0x1
1000097d:	19 c9                	sbb    ecx,ecx
1000097f:	31 ff                	xor    edi,edi
10000981:	80 e1 34             	and    cl,0x34
10000984:	89 f8                	mov    eax,edi
10000986:	81 c1 d8 00 00 00    	add    ecx,0xd8
1000098c:	89 ca                	mov    edx,ecx
1000098e:	ee                   	out    dx,al
1000098f:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
10000994:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
10000997:	ee                   	out    dx,al
10000998:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
1000099b:	c1 e8 08             	shr    eax,0x8
1000099e:	ee                   	out    dx,al
1000099f:	89 f8                	mov    eax,edi
100009a1:	89 ca                	mov    edx,ecx
100009a3:	ee                   	out    dx,al
100009a4:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
100009a7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
100009ac:	8d 41 ff             	lea    eax,[ecx-0x1]
100009af:	ee                   	out    dx,al
100009b0:	8d 41 ff             	lea    eax,[ecx-0x1]
100009b3:	c1 e8 08             	shr    eax,0x8
100009b6:	ee                   	out    dx,al
100009b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
100009ba:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
100009bf:	c1 e8 10             	shr    eax,0x10
100009c2:	ee                   	out    dx,al
100009c3:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
100009c7:	74 27                	je     100009f0 <DMAChannel::start()+0xbe>
100009c9:	80 fb 01             	cmp    bl,0x1
100009cc:	8a 46 0f             	mov    al,BYTE PTR [esi+0xf]
100009cf:	19 d2                	sbb    edx,edx
100009d1:	80 e2 35             	and    dl,0x35
100009d4:	81 c2 d6 00 00 00    	add    edx,0xd6
100009da:	ee                   	out    dx,al
100009db:	eb 13                	jmp    100009f0 <DMAChannel::start()+0xbe>
100009dd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	100009e1: R_386_32	dmaConfused
100009e5:	83 c4 10             	add    esp,0x10
100009e8:	5b                   	pop    ebx
100009e9:	5e                   	pop    esi
100009ea:	5f                   	pop    edi
100009eb:	e9 fc ff ff ff       	jmp    100009ec <DMAChannel::start()+0xba>	100009ec: R_386_PC32	Krnl::panic(char const*)
100009f0:	c6 46 0d 01          	mov    BYTE PTR [esi+0xd],0x1
100009f4:	83 ec 0c             	sub    esp,0xc
100009f7:	56                   	push   esi
100009f8:	e8 fc ff ff ff       	call   100009f9 <DMAChannel::start()+0xc7>	100009f9: R_386_PC32	DMAChannel::unmask()
100009fd:	83 c4 20             	add    esp,0x20
10000a00:	5b                   	pop    ebx
10000a01:	5e                   	pop    esi
10000a02:	5f                   	pop    edi
10000a03:	e9 fc ff ff ff       	jmp    10000a04 <DMAChannel::start()+0xd2>	10000a04: R_386_PC32	unlockScheduler()

10000a08 <DMAChannel::stop()>:
10000a08:	c3                   	ret    
10000a09:	90                   	nop

10000a0a <DMAChannel::mask(bool)>:
10000a0a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
10000a0f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
10000a13:	0f 95 c0             	setne  al
10000a16:	c1 e0 02             	shl    eax,0x2
10000a19:	0b 02                	or     eax,DWORD PTR [edx]
10000a1b:	80 7a 0e 01          	cmp    BYTE PTR [edx+0xe],0x1
10000a1f:	19 d2                	sbb    edx,edx
10000a21:	80 e2 36             	and    dl,0x36
10000a24:	81 c2 d4 00 00 00    	add    edx,0xd4
10000a2a:	ee                   	out    dx,al
10000a2b:	c3                   	ret    

10000a2c <DMAChannel::unmask()>:
10000a2c:	6a 00                	push   0x0
10000a2e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10000a32:	e8 fc ff ff ff       	call   10000a33 <DMAChannel::unmask()+0x7>	10000a33: R_386_PC32	DMAChannel::mask(bool)
10000a37:	58                   	pop    eax
10000a38:	5a                   	pop    edx
10000a39:	c3                   	ret    

10000a3a <DMA::DMA()>:
10000a3a:	55                   	push   ebp
10000a3b:	89 e5                	mov    ebp,esp
10000a3d:	83 ec 08             	sub    esp,0x8
10000a40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a43:	83 ec 08             	sub    esp,0x8
10000a46:	68 00 00 00 00       	push   0x0	10000a47: R_386_32	dmaCtrlName
10000a4b:	50                   	push   eax
10000a4c:	e8 fc ff ff ff       	call   10000a4d <DMA::DMA()+0x13>	10000a4d: R_386_PC32	Device::Device(char const*)
10000a51:	83 c4 10             	add    esp,0x10
10000a54:	ba 08 00 00 00       	mov    edx,0x8	10000a55: R_386_32	vtable for DMA
10000a59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a5c:	89 10                	mov    DWORD PTR [eax],edx
10000a5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a61:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
10000a68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a6b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000a71:	0f b6 d0             	movzx  edx,al
10000a74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a77:	66 c7 44 90 04 00 00 	mov    WORD PTR [eax+edx*4+0x4],0x0
10000a7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a81:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000a87:	0f b6 d0             	movzx  edx,al
10000a8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a8d:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
10000a92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000a95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000a9b:	8d 50 01             	lea    edx,[eax+0x1]
10000a9e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000aa1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000aa7:	0f b6 d0             	movzx  edx,al
10000aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000aad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000ab1:	83 e1 3f             	and    ecx,0x3f
10000ab4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000ab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000abb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000ac1:	0f b6 d0             	movzx  edx,al
10000ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ac7:	66 c7 44 90 04 c0 00 	mov    WORD PTR [eax+edx*4+0x4],0xc0
10000ace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ad1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000ad7:	0f b6 d0             	movzx  edx,al
10000ada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000add:	c6 44 90 06 20       	mov    BYTE PTR [eax+edx*4+0x6],0x20
10000ae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ae5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000aeb:	8d 50 01             	lea    edx,[eax+0x1]
10000aee:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000af1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000af7:	0f b6 d0             	movzx  edx,al
10000afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000afd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000b01:	83 e1 3f             	and    ecx,0x3f
10000b04:	83 c9 40             	or     ecx,0x40
10000b07:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000b0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b0e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000b14:	0f b6 d0             	movzx  edx,al
10000b17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b1a:	66 c7 44 90 04 81 00 	mov    WORD PTR [eax+edx*4+0x4],0x81
10000b21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b24:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000b2a:	0f b6 d0             	movzx  edx,al
10000b2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b30:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
10000b35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b38:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000b3e:	8d 50 01             	lea    edx,[eax+0x1]
10000b41:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000b44:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000b4a:	0f b6 d0             	movzx  edx,al
10000b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b50:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000b54:	83 e1 3f             	and    ecx,0x3f
10000b57:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000b5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b5e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000b64:	0f b6 d0             	movzx  edx,al
10000b67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b6a:	66 c7 44 90 04 87 00 	mov    WORD PTR [eax+edx*4+0x4],0x87
10000b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b74:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000b7a:	0f b6 d0             	movzx  edx,al
10000b7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b80:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000b85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000b8e:	8d 50 01             	lea    edx,[eax+0x1]
10000b91:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000b94:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000b9a:	0f b6 d0             	movzx  edx,al
10000b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ba0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000ba4:	83 e1 3f             	and    ecx,0x3f
10000ba7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000bab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000bb4:	0f b6 d0             	movzx  edx,al
10000bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bba:	66 c7 44 90 04 89 00 	mov    WORD PTR [eax+edx*4+0x4],0x89
10000bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bc4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000bca:	0f b6 d0             	movzx  edx,al
10000bcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bd0:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
10000bd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bd8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000bde:	8d 50 01             	lea    edx,[eax+0x1]
10000be1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000be4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000bea:	0f b6 d0             	movzx  edx,al
10000bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bf0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000bf4:	83 e1 3f             	and    ecx,0x3f
10000bf7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bfe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000c04:	0f b6 d0             	movzx  edx,al
10000c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c0a:	66 c7 44 90 04 8f 00 	mov    WORD PTR [eax+edx*4+0x4],0x8f
10000c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c14:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000c1a:	0f b6 d0             	movzx  edx,al
10000c1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c20:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000c25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000c2e:	8d 50 01             	lea    edx,[eax+0x1]
10000c31:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000c34:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000c3a:	0f b6 d0             	movzx  edx,al
10000c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c40:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000c44:	83 e1 3f             	and    ecx,0x3f
10000c47:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000c4b:	90                   	nop
10000c4c:	c9                   	leave  
10000c4d:	c3                   	ret    

10000c4e <DMA::getAvailable()>:
10000c4e:	53                   	push   ebx
10000c4f:	31 db                	xor    ebx,ebx
10000c51:	83 ec 08             	sub    esp,0x8
10000c54:	e8 fc ff ff ff       	call   10000c55 <DMA::getAvailable()+0x7>	10000c55: R_386_PC32	lockScheduler()
10000c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000c5d:	0f b6 80 58 01 00 00 	movzx  eax,BYTE PTR [eax+0x158]
10000c64:	0f a3 d8             	bt     eax,ebx
10000c67:	73 07                	jae    10000c70 <DMA::getAvailable()+0x22>
10000c69:	e8 fc ff ff ff       	call   10000c6a <DMA::getAvailable()+0x1c>	10000c6a: R_386_PC32	unlockScheduler()
10000c6e:	eb 0e                	jmp    10000c7e <DMA::getAvailable()+0x30>
10000c70:	43                   	inc    ebx
10000c71:	83 fb 08             	cmp    ebx,0x8
10000c74:	75 ee                	jne    10000c64 <DMA::getAvailable()+0x16>
10000c76:	e8 fc ff ff ff       	call   10000c77 <DMA::getAvailable()+0x29>	10000c77: R_386_PC32	unlockScheduler()
10000c7b:	83 cb ff             	or     ebx,0xffffffff
10000c7e:	89 d8                	mov    eax,ebx
10000c80:	83 c4 08             	add    esp,0x8
10000c83:	5b                   	pop    ebx
10000c84:	c3                   	ret    
10000c85:	90                   	nop

10000c86 <DMA::open(int, int, void*)>:
10000c86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000c8a:	c6 80 58 01 00 00 ee 	mov    BYTE PTR [eax+0x158],0xee
10000c91:	31 c0                	xor    eax,eax
10000c93:	e6 0d                	out    0xd,al
10000c95:	e6 da                	out    0xda,al
10000c97:	31 c0                	xor    eax,eax
10000c99:	c3                   	ret    

10000c9a <DMA::close(int, int, void*)>:
10000c9a:	31 c0                	xor    eax,eax
10000c9c:	c3                   	ret    
10000c9d:	90                   	nop

10000c9e <DMA::tryLockChannelWithBase(int)>:
10000c9e:	56                   	push   esi
10000c9f:	53                   	push   ebx
10000ca0:	83 ec 14             	sub    esp,0x14
10000ca3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10000ca7:	e8 fc ff ff ff       	call   10000ca8 <DMA::tryLockChannelWithBase(int)+0xa>	10000ca8: R_386_PC32	lockScheduler()
10000cac:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10000cb0:	8d 43 03             	lea    eax,[ebx+0x3]
10000cb3:	39 d8                	cmp    eax,ebx
10000cb5:	7c 47                	jl     10000cfe <DMA::tryLockChannelWithBase(int)+0x60>
10000cb7:	0f b6 8e 58 01 00 00 	movzx  ecx,BYTE PTR [esi+0x158]
10000cbe:	89 ca                	mov    edx,ecx
10000cc0:	0f a3 d9             	bt     ecx,ebx
10000cc3:	73 36                	jae    10000cfb <DMA::tryLockChannelWithBase(int)+0x5d>
10000cc5:	83 ec 0c             	sub    esp,0xc
10000cc8:	88 d9                	mov    cl,bl
10000cca:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10000ccf:	d3 c0                	rol    eax,cl
10000cd1:	21 d0                	and    eax,edx
10000cd3:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10000cd9:	6a 18                	push   0x18
10000cdb:	e8 fc ff ff ff       	call   10000cdc <DMA::tryLockChannelWithBase(int)+0x3e>	10000cdc: R_386_PC32	operator new(unsigned long)
10000ce0:	5a                   	pop    edx
10000ce1:	59                   	pop    ecx
10000ce2:	53                   	push   ebx
10000ce3:	50                   	push   eax
10000ce4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000ce8:	e8 fc ff ff ff       	call   10000ce9 <DMA::tryLockChannelWithBase(int)+0x4b>	10000ce9: R_386_PC32	DMAChannel::DMAChannel(int)
10000ced:	e8 fc ff ff ff       	call   10000cee <DMA::tryLockChannelWithBase(int)+0x50>	10000cee: R_386_PC32	unlockScheduler()
10000cf2:	83 c4 10             	add    esp,0x10
10000cf5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10000cf9:	eb 0a                	jmp    10000d05 <DMA::tryLockChannelWithBase(int)+0x67>
10000cfb:	43                   	inc    ebx
10000cfc:	eb b5                	jmp    10000cb3 <DMA::tryLockChannelWithBase(int)+0x15>
10000cfe:	e8 fc ff ff ff       	call   10000cff <DMA::tryLockChannelWithBase(int)+0x61>	10000cff: R_386_PC32	unlockScheduler()
10000d03:	31 c0                	xor    eax,eax
10000d05:	83 c4 14             	add    esp,0x14
10000d08:	5b                   	pop    ebx
10000d09:	5e                   	pop    esi
10000d0a:	c3                   	ret    
10000d0b:	90                   	nop

10000d0c <DMA::lockChannelWithBase(int)>:
10000d0c:	83 ec 0c             	sub    esp,0xc
10000d0f:	50                   	push   eax
10000d10:	50                   	push   eax
10000d11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000d15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000d19:	e8 fc ff ff ff       	call   10000d1a <DMA::lockChannelWithBase(int)+0xe>	10000d1a: R_386_PC32	DMA::tryLockChannelWithBase(int)
10000d1e:	83 c4 10             	add    esp,0x10
10000d21:	85 c0                	test   eax,eax
10000d23:	74 ea                	je     10000d0f <DMA::lockChannelWithBase(int)+0x3>
10000d25:	83 c4 0c             	add    esp,0xc
10000d28:	c3                   	ret    
10000d29:	90                   	nop

10000d2a <DMA::tryLockChannel8()>:
10000d2a:	83 ec 14             	sub    esp,0x14
10000d2d:	6a 00                	push   0x0
10000d2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000d33:	e8 fc ff ff ff       	call   10000d34 <DMA::tryLockChannel8()+0xa>	10000d34: R_386_PC32	DMA::tryLockChannelWithBase(int)
10000d38:	83 c4 1c             	add    esp,0x1c
10000d3b:	c3                   	ret    

10000d3c <DMA::tryLockChannel16()>:
10000d3c:	83 ec 14             	sub    esp,0x14
10000d3f:	6a 04                	push   0x4
10000d41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000d45:	e8 fc ff ff ff       	call   10000d46 <DMA::tryLockChannel16()+0xa>	10000d46: R_386_PC32	DMA::tryLockChannelWithBase(int)
10000d4a:	83 c4 1c             	add    esp,0x1c
10000d4d:	c3                   	ret    

10000d4e <DMA::tryLockChannel(int)>:
10000d4e:	56                   	push   esi
10000d4f:	53                   	push   ebx
10000d50:	83 ec 14             	sub    esp,0x14
10000d53:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10000d57:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10000d5b:	83 fb 07             	cmp    ebx,0x7
10000d5e:	76 12                	jbe    10000d72 <DMA::tryLockChannel(int)+0x24>
10000d60:	83 ec 0c             	sub    esp,0xc
10000d63:	68 b4 2d 00 10       	push   0x10002db4	10000d64: R_386_32	.text
10000d68:	e8 fc ff ff ff       	call   10000d69 <DMA::tryLockChannel(int)+0x1b>	10000d69: R_386_PC32	Dbg::kprintf(char const*, ...)
10000d6d:	83 c4 10             	add    esp,0x10
10000d70:	eb 4e                	jmp    10000dc0 <DMA::tryLockChannel(int)+0x72>
10000d72:	e8 fc ff ff ff       	call   10000d73 <DMA::tryLockChannel(int)+0x25>	10000d73: R_386_PC32	lockScheduler()
10000d77:	0f b6 86 58 01 00 00 	movzx  eax,BYTE PTR [esi+0x158]
10000d7e:	89 c2                	mov    edx,eax
10000d80:	0f a3 d8             	bt     eax,ebx
10000d83:	73 36                	jae    10000dbb <DMA::tryLockChannel(int)+0x6d>
10000d85:	83 ec 0c             	sub    esp,0xc
10000d88:	88 d9                	mov    cl,bl
10000d8a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10000d8f:	d3 c0                	rol    eax,cl
10000d91:	21 d0                	and    eax,edx
10000d93:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10000d99:	6a 18                	push   0x18
10000d9b:	e8 fc ff ff ff       	call   10000d9c <DMA::tryLockChannel(int)+0x4e>	10000d9c: R_386_PC32	operator new(unsigned long)
10000da0:	5a                   	pop    edx
10000da1:	59                   	pop    ecx
10000da2:	53                   	push   ebx
10000da3:	50                   	push   eax
10000da4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000da8:	e8 fc ff ff ff       	call   10000da9 <DMA::tryLockChannel(int)+0x5b>	10000da9: R_386_PC32	DMAChannel::DMAChannel(int)
10000dad:	e8 fc ff ff ff       	call   10000dae <DMA::tryLockChannel(int)+0x60>	10000dae: R_386_PC32	unlockScheduler()
10000db2:	83 c4 10             	add    esp,0x10
10000db5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10000db9:	eb 07                	jmp    10000dc2 <DMA::tryLockChannel(int)+0x74>
10000dbb:	e8 fc ff ff ff       	call   10000dbc <DMA::tryLockChannel(int)+0x6e>	10000dbc: R_386_PC32	unlockScheduler()
10000dc0:	31 c0                	xor    eax,eax
10000dc2:	83 c4 14             	add    esp,0x14
10000dc5:	5b                   	pop    ebx
10000dc6:	5e                   	pop    esi
10000dc7:	c3                   	ret    

10000dc8 <DMA::lockChannel8()>:
10000dc8:	83 ec 14             	sub    esp,0x14
10000dcb:	6a 00                	push   0x0
10000dcd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000dd1:	e8 fc ff ff ff       	call   10000dd2 <DMA::lockChannel8()+0xa>	10000dd2: R_386_PC32	DMA::lockChannelWithBase(int)
10000dd6:	83 c4 1c             	add    esp,0x1c
10000dd9:	c3                   	ret    

10000dda <DMA::lockChannel16()>:
10000dda:	83 ec 14             	sub    esp,0x14
10000ddd:	6a 04                	push   0x4
10000ddf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000de3:	e8 fc ff ff ff       	call   10000de4 <DMA::lockChannel16()+0xa>	10000de4: R_386_PC32	DMA::lockChannelWithBase(int)
10000de8:	83 c4 1c             	add    esp,0x1c
10000deb:	c3                   	ret    

10000dec <DMA::lockChannel(int)>:
10000dec:	83 ec 0c             	sub    esp,0xc
10000def:	50                   	push   eax
10000df0:	50                   	push   eax
10000df1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000df5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000df9:	e8 fc ff ff ff       	call   10000dfa <DMA::lockChannel(int)+0xe>	10000dfa: R_386_PC32	DMA::tryLockChannel(int)
10000dfe:	83 c4 10             	add    esp,0x10
10000e01:	85 c0                	test   eax,eax
10000e03:	74 ea                	je     10000def <DMA::lockChannel(int)+0x3>
10000e05:	83 c4 0c             	add    esp,0xc
10000e08:	c3                   	ret    
10000e09:	90                   	nop

10000e0a <DMA::unlockChannel(DMAChannel*)>:
10000e0a:	56                   	push   esi
10000e0b:	53                   	push   ebx
10000e0c:	53                   	push   ebx
10000e0d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10000e11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10000e15:	85 db                	test   ebx,ebx
10000e17:	75 10                	jne    10000e29 <DMA::unlockChannel(DMAChannel*)+0x1f>
10000e19:	83 ec 0c             	sub    esp,0xc
10000e1c:	68 00 00 00 00       	push   0x0	10000e1d: R_386_32	badDma
10000e21:	e8 fc ff ff ff       	call   10000e22 <DMA::unlockChannel(DMAChannel*)+0x18>	10000e22: R_386_PC32	Krnl::panic(char const*)
10000e26:	83 c4 10             	add    esp,0x10
10000e29:	e8 fc ff ff ff       	call   10000e2a <DMA::unlockChannel(DMAChannel*)+0x20>	10000e2a: R_386_PC32	lockScheduler()
10000e2e:	0f b6 96 58 01 00 00 	movzx  edx,BYTE PTR [esi+0x158]
10000e35:	8b 0b                	mov    ecx,DWORD PTR [ebx]
10000e37:	89 d0                	mov    eax,edx
10000e39:	0f a3 ca             	bt     edx,ecx
10000e3c:	72 24                	jb     10000e62 <DMA::unlockChannel(DMAChannel*)+0x58>
10000e3e:	83 ec 0c             	sub    esp,0xc
10000e41:	ba 01 00 00 00       	mov    edx,0x1
10000e46:	d3 e2                	shl    edx,cl
10000e48:	09 d0                	or     eax,edx
10000e4a:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10000e50:	53                   	push   ebx
10000e51:	e8 fc ff ff ff       	call   10000e52 <DMA::unlockChannel(DMAChannel*)+0x48>	10000e52: R_386_PC32	DMAChannel::~DMAChannel()
10000e56:	5a                   	pop    edx
10000e57:	59                   	pop    ecx
10000e58:	6a 18                	push   0x18
10000e5a:	53                   	push   ebx
10000e5b:	e8 fc ff ff ff       	call   10000e5c <DMA::unlockChannel(DMAChannel*)+0x52>	10000e5c: R_386_PC32	operator delete(void*, unsigned long)
10000e60:	eb 0d                	jmp    10000e6f <DMA::unlockChannel(DMAChannel*)+0x65>
10000e62:	83 ec 0c             	sub    esp,0xc
10000e65:	68 00 00 00 00       	push   0x0	10000e66: R_386_32	badBook
10000e6a:	e8 fc ff ff ff       	call   10000e6b <DMA::unlockChannel(DMAChannel*)+0x61>	10000e6b: R_386_PC32	Krnl::panic(char const*)
10000e6f:	83 c4 10             	add    esp,0x10
10000e72:	58                   	pop    eax
10000e73:	5b                   	pop    ebx
10000e74:	5e                   	pop    esi
10000e75:	e9 fc ff ff ff       	jmp    10000e76 <DMA::unlockChannel(DMAChannel*)+0x6c>	10000e76: R_386_PC32	unlockScheduler()

10000e7a <PS2::PS2()>:
10000e7a:	55                   	push   ebp
10000e7b:	89 e5                	mov    ebp,esp
10000e7d:	83 ec 08             	sub    esp,0x8
10000e80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e83:	83 ec 08             	sub    esp,0x8
10000e86:	68 00 00 00 00       	push   0x0	10000e87: R_386_32	ps2ctrlname
10000e8b:	50                   	push   eax
10000e8c:	e8 fc ff ff ff       	call   10000e8d <PS2::PS2()+0x13>	10000e8d: R_386_PC32	Bus::Bus(char const*)
10000e91:	83 c4 10             	add    esp,0x10
10000e94:	ba 08 00 00 00       	mov    edx,0x8	10000e95: R_386_32	vtable for PS2
10000e99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000e9c:	89 10                	mov    DWORD PTR [eax],edx
10000e9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ea1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000ea7:	0f b6 d0             	movzx  edx,al
10000eaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ead:	66 c7 44 90 04 60 00 	mov    WORD PTR [eax+edx*4+0x4],0x60
10000eb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000eb7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000ebd:	0f b6 d0             	movzx  edx,al
10000ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ec3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000ec8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ecb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000ed1:	8d 50 01             	lea    edx,[eax+0x1]
10000ed4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000ed7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000edd:	0f b6 d0             	movzx  edx,al
10000ee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ee3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000ee7:	83 e1 3f             	and    ecx,0x3f
10000eea:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000eee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ef1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000ef7:	0f b6 d0             	movzx  edx,al
10000efa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000efd:	66 c7 44 90 04 64 00 	mov    WORD PTR [eax+edx*4+0x4],0x64
10000f04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000f0d:	0f b6 d0             	movzx  edx,al
10000f10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f13:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000f18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f1b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000f21:	8d 50 01             	lea    edx,[eax+0x1]
10000f24:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000f27:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000f2d:	0f b6 d0             	movzx  edx,al
10000f30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f33:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000f37:	83 e1 3f             	and    ecx,0x3f
10000f3a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10000f3e:	90                   	nop
10000f3f:	c9                   	leave  
10000f40:	c3                   	ret    
10000f41:	90                   	nop

10000f42 <PS2::open(int, int, void*)>:
10000f42:	55                   	push   ebp
10000f43:	89 e5                	mov    ebp,esp
10000f45:	53                   	push   ebx
10000f46:	83 ec 24             	sub    esp,0x24
10000f49:	e8 fc ff ff ff       	call   10000f4a <PS2::open(int, int, void*)+0x8>	10000f4a: R_386_PC32	lockScheduler()
10000f4e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000f55:	83 ec 08             	sub    esp,0x8
10000f58:	68 ad 00 00 00       	push   0xad
10000f5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f60:	e8 fc ff ff ff       	call   10000f61 <PS2::open(int, int, void*)+0x1f>	10000f61: R_386_PC32	PS2::controllerWrite(unsigned char)
10000f65:	83 c4 10             	add    esp,0x10
10000f68:	83 ec 08             	sub    esp,0x8
10000f6b:	68 a7 00 00 00       	push   0xa7
10000f70:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f73:	e8 fc ff ff ff       	call   10000f74 <PS2::open(int, int, void*)+0x32>	10000f74: R_386_PC32	PS2::controllerWrite(unsigned char)
10000f78:	83 c4 10             	add    esp,0x10
10000f7b:	66 c7 45 e4 60 00    	mov    WORD PTR [ebp-0x1c],0x60
10000f81:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000f84:	89 c2                	mov    edx,eax
10000f86:	ec                   	in     al,dx
10000f87:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
10000f8a:	66 c7 45 e8 60 00    	mov    WORD PTR [ebp-0x18],0x60
10000f90:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10000f93:	89 c2                	mov    edx,eax
10000f95:	ec                   	in     al,dx
10000f96:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
10000f99:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10000f9f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000fa2:	89 c2                	mov    edx,eax
10000fa4:	ec                   	in     al,dx
10000fa5:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10000fa8:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10000fae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000fb1:	89 c2                	mov    edx,eax
10000fb3:	ec                   	in     al,dx
10000fb4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000fb7:	83 ec 08             	sub    esp,0x8
10000fba:	68 aa 00 00 00       	push   0xaa
10000fbf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000fc2:	e8 fc ff ff ff       	call   10000fc3 <PS2::open(int, int, void*)+0x81>	10000fc3: R_386_PC32	PS2::controllerWrite(unsigned char)
10000fc7:	83 c4 10             	add    esp,0x10
10000fca:	83 ec 0c             	sub    esp,0xc
10000fcd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000fd0:	e8 fc ff ff ff       	call   10000fd1 <PS2::open(int, int, void*)+0x8f>	10000fd1: R_386_PC32	PS2::controllerRead()
10000fd5:	83 c4 10             	add    esp,0x10
10000fd8:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000fdb:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000fdf:	74 65                	je     10001046 <PS2::open(int, int, void*)+0x104>
10000fe1:	83 ec 0c             	sub    esp,0xc
10000fe4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000fe7:	e8 fc ff ff ff       	call   10000fe8 <PS2::open(int, int, void*)+0xa6>	10000fe8: R_386_PC32	PS2::controllerRead()
10000fec:	83 c4 10             	add    esp,0x10
10000fef:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10000ff2:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10000ff6:	74 4e                	je     10001046 <PS2::open(int, int, void*)+0x104>
10000ff8:	83 ec 08             	sub    esp,0x8
10000ffb:	68 aa 00 00 00       	push   0xaa
10001000:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001003:	e8 fc ff ff ff       	call   10001004 <PS2::open(int, int, void*)+0xc2>	10001004: R_386_PC32	PS2::controllerWrite(unsigned char)
10001008:	83 c4 10             	add    esp,0x10
1000100b:	83 ec 08             	sub    esp,0x8
1000100e:	68 aa 00 00 00       	push   0xaa
10001013:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001016:	e8 fc ff ff ff       	call   10001017 <PS2::open(int, int, void*)+0xd5>	10001017: R_386_PC32	PS2::controllerWrite(unsigned char)
1000101b:	83 c4 10             	add    esp,0x10
1000101e:	83 ec 0c             	sub    esp,0xc
10001021:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001024:	e8 fc ff ff ff       	call   10001025 <PS2::open(int, int, void*)+0xe3>	10001025: R_386_PC32	PS2::controllerRead()
10001029:	83 c4 10             	add    esp,0x10
1000102c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000102f:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10001033:	74 11                	je     10001046 <PS2::open(int, int, void*)+0x104>
10001035:	83 ec 0c             	sub    esp,0xc
10001038:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000103b:	e8 fc ff ff ff       	call   1000103c <PS2::open(int, int, void*)+0xfa>	1000103c: R_386_PC32	PS2::controllerRead()
10001040:	83 c4 10             	add    esp,0x10
10001043:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001046:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
1000104d:	83 ec 08             	sub    esp,0x8
10001050:	6a 20                	push   0x20
10001052:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001055:	e8 fc ff ff ff       	call   10001056 <PS2::open(int, int, void*)+0x114>	10001056: R_386_PC32	PS2::controllerWrite(unsigned char)
1000105a:	83 c4 10             	add    esp,0x10
1000105d:	83 ec 0c             	sub    esp,0xc
10001060:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001063:	e8 fc ff ff ff       	call   10001064 <PS2::open(int, int, void*)+0x122>	10001064: R_386_PC32	PS2::controllerRead()
10001068:	83 c4 10             	add    esp,0x10
1000106b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
1000106e:	80 4d f2 01          	or     BYTE PTR [ebp-0xe],0x1
10001072:	80 4d f2 02          	or     BYTE PTR [ebp-0xe],0x2
10001076:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
1000107a:	83 ec 04             	sub    esp,0x4
1000107d:	50                   	push   eax
1000107e:	6a 60                	push   0x60
10001080:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001083:	e8 fc ff ff ff       	call   10001084 <PS2::open(int, int, void*)+0x142>	10001084: R_386_PC32	PS2::controllerWrite(unsigned char, unsigned char)
10001088:	83 c4 10             	add    esp,0x10
1000108b:	83 ec 08             	sub    esp,0x8
1000108e:	68 ae 00 00 00       	push   0xae
10001093:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001096:	e8 fc ff ff ff       	call   10001097 <PS2::open(int, int, void*)+0x155>	10001097: R_386_PC32	PS2::controllerWrite(unsigned char)
1000109b:	83 c4 10             	add    esp,0x10
1000109e:	83 ec 08             	sub    esp,0x8
100010a1:	68 a8 00 00 00       	push   0xa8
100010a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100010a9:	e8 fc ff ff ff       	call   100010aa <PS2::open(int, int, void*)+0x168>	100010aa: R_386_PC32	PS2::controllerWrite(unsigned char)
100010ae:	83 c4 10             	add    esp,0x10
100010b1:	e8 fc ff ff ff       	call   100010b2 <PS2::open(int, int, void*)+0x170>	100010b2: R_386_PC32	unlockScheduler()
100010b6:	83 ec 0c             	sub    esp,0xc
100010b9:	68 60 01 00 00       	push   0x160
100010be:	e8 fc ff ff ff       	call   100010bf <PS2::open(int, int, void*)+0x17d>	100010bf: R_386_PC32	operator new(unsigned long)
100010c3:	83 c4 10             	add    esp,0x10
100010c6:	89 c3                	mov    ebx,eax
100010c8:	83 ec 0c             	sub    esp,0xc
100010cb:	53                   	push   ebx
100010cc:	e8 fc ff ff ff       	call   100010cd <PS2::open(int, int, void*)+0x18b>	100010cd: R_386_PC32	PS2Port::PS2Port()
100010d1:	83 c4 10             	add    esp,0x10
100010d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010d7:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
100010dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010e0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100010e3:	8b 92 58 01 00 00    	mov    edx,DWORD PTR [edx+0x158]
100010e9:	83 ec 08             	sub    esp,0x8
100010ec:	52                   	push   edx
100010ed:	50                   	push   eax
100010ee:	e8 fc ff ff ff       	call   100010ef <PS2::open(int, int, void*)+0x1ad>	100010ef: R_386_PC32	Device::addChild(Device*)
100010f3:	83 c4 10             	add    esp,0x10
100010f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100010f9:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
100010ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001102:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10001108:	8b 00                	mov    eax,DWORD PTR [eax]
1000110a:	83 c0 08             	add    eax,0x8
1000110d:	8b 00                	mov    eax,DWORD PTR [eax]
1000110f:	6a 00                	push   0x0
10001111:	6a 00                	push   0x0
10001113:	6a 00                	push   0x0
10001115:	52                   	push   edx
10001116:	ff d0                	call   eax
10001118:	83 c4 10             	add    esp,0x10
1000111b:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
1000111f:	75 65                	jne    10001186 <PS2::open(int, int, void*)+0x244>
10001121:	83 ec 0c             	sub    esp,0xc
10001124:	68 60 01 00 00       	push   0x160
10001129:	e8 fc ff ff ff       	call   1000112a <PS2::open(int, int, void*)+0x1e8>	1000112a: R_386_PC32	operator new(unsigned long)
1000112e:	83 c4 10             	add    esp,0x10
10001131:	89 c3                	mov    ebx,eax
10001133:	83 ec 0c             	sub    esp,0xc
10001136:	53                   	push   ebx
10001137:	e8 fc ff ff ff       	call   10001138 <PS2::open(int, int, void*)+0x1f6>	10001138: R_386_PC32	PS2Port::PS2Port()
1000113c:	83 c4 10             	add    esp,0x10
1000113f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001142:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
10001148:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000114b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000114e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10001154:	83 ec 08             	sub    esp,0x8
10001157:	52                   	push   edx
10001158:	50                   	push   eax
10001159:	e8 fc ff ff ff       	call   1000115a <PS2::open(int, int, void*)+0x218>	1000115a: R_386_PC32	Device::addChild(Device*)
1000115e:	83 c4 10             	add    esp,0x10
10001161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001164:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
1000116a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000116d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001173:	8b 00                	mov    eax,DWORD PTR [eax]
10001175:	83 c0 08             	add    eax,0x8
10001178:	8b 00                	mov    eax,DWORD PTR [eax]
1000117a:	6a 00                	push   0x0
1000117c:	6a 00                	push   0x0
1000117e:	6a 01                	push   0x1
10001180:	52                   	push   edx
10001181:	ff d0                	call   eax
10001183:	83 c4 10             	add    esp,0x10
10001186:	b8 00 00 00 00       	mov    eax,0x0
1000118b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000118e:	c9                   	leave  
1000118f:	c3                   	ret    

10001190 <PS2::close(int, int, void*)>:
10001190:	b8 00 00 00 00       	mov    eax,0x0
10001195:	c3                   	ret    

10001196 <PS2::detect()>:
10001196:	90                   	nop
10001197:	c3                   	ret    

10001198 <PS2::controllerWrite(unsigned char)>:
10001198:	55                   	push   ebp
10001199:	89 e5                	mov    ebp,esp
1000119b:	83 ec 14             	sub    esp,0x14
1000119e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100011a1:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
100011a4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
100011ab:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
100011b1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100011b4:	89 c2                	mov    edx,eax
100011b6:	ec                   	in     al,dx
100011b7:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100011ba:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
100011bd:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
100011c0:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
100011c4:	83 e0 40             	and    eax,0x40
100011c7:	85 c0                	test   eax,eax
100011c9:	75 2d                	jne    100011f8 <PS2::controllerWrite(unsigned char)+0x60>
100011cb:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
100011ce:	84 c0                	test   al,al
100011d0:	78 26                	js     100011f8 <PS2::controllerWrite(unsigned char)+0x60>
100011d2:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
100011d6:	83 e0 02             	and    eax,0x2
100011d9:	85 c0                	test   eax,eax
100011db:	74 17                	je     100011f4 <PS2::controllerWrite(unsigned char)+0x5c>
100011dd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100011e0:	8d 50 01             	lea    edx,[eax+0x1]
100011e3:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
100011e6:	3d 20 03 00 00       	cmp    eax,0x320
100011eb:	0f 94 c0             	sete   al
100011ee:	84 c0                	test   al,al
100011f0:	75 05                	jne    100011f7 <PS2::controllerWrite(unsigned char)+0x5f>
100011f2:	eb b7                	jmp    100011ab <PS2::controllerWrite(unsigned char)+0x13>
100011f4:	90                   	nop
100011f5:	eb 01                	jmp    100011f8 <PS2::controllerWrite(unsigned char)+0x60>
100011f7:	90                   	nop
100011f8:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
100011fc:	66 c7 45 f4 64 00    	mov    WORD PTR [ebp-0xc],0x64
10001202:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001205:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001208:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000120b:	ee                   	out    dx,al
1000120c:	b0 01                	mov    al,0x1
1000120e:	c9                   	leave  
1000120f:	c3                   	ret    

10001210 <PS2::controllerWrite(unsigned char, unsigned char)>:
10001210:	55                   	push   ebp
10001211:	89 e5                	mov    ebp,esp
10001213:	83 ec 28             	sub    esp,0x28
10001216:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001219:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
1000121c:	88 55 dc             	mov    BYTE PTR [ebp-0x24],dl
1000121f:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
10001222:	0f b6 45 dc          	movzx  eax,BYTE PTR [ebp-0x24]
10001226:	50                   	push   eax
10001227:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000122a:	e8 fc ff ff ff       	call   1000122b <PS2::controllerWrite(unsigned char, unsigned char)+0x1b>	1000122b: R_386_PC32	PS2::controllerWrite(unsigned char)
1000122f:	83 c4 08             	add    esp,0x8
10001232:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10001239:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
1000123f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10001242:	89 c2                	mov    edx,eax
10001244:	ec                   	in     al,dx
10001245:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10001248:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000124b:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
1000124e:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10001252:	83 e0 40             	and    eax,0x40
10001255:	85 c0                	test   eax,eax
10001257:	75 07                	jne    10001260 <PS2::controllerWrite(unsigned char, unsigned char)+0x50>
10001259:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
1000125c:	84 c0                	test   al,al
1000125e:	79 18                	jns    10001278 <PS2::controllerWrite(unsigned char, unsigned char)+0x68>
10001260:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10001264:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
1000126a:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000126d:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001270:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10001273:	ee                   	out    dx,al
10001274:	b0 00                	mov    al,0x0
10001276:	eb 4f                	jmp    100012c7 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10001278:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
1000127c:	83 e0 02             	and    eax,0x2
1000127f:	85 c0                	test   eax,eax
10001281:	74 2d                	je     100012b0 <PS2::controllerWrite(unsigned char, unsigned char)+0xa0>
10001283:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10001286:	8d 50 01             	lea    edx,[eax+0x1]
10001289:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
1000128c:	3d 20 03 00 00       	cmp    eax,0x320
10001291:	0f 94 c0             	sete   al
10001294:	84 c0                	test   al,al
10001296:	74 a1                	je     10001239 <PS2::controllerWrite(unsigned char, unsigned char)+0x29>
10001298:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
1000129c:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
100012a2:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100012a5:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
100012a8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100012ab:	ee                   	out    dx,al
100012ac:	b0 00                	mov    al,0x0
100012ae:	eb 17                	jmp    100012c7 <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
100012b0:	90                   	nop
100012b1:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
100012b5:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
100012bb:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
100012be:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
100012c1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100012c4:	ee                   	out    dx,al
100012c5:	b0 01                	mov    al,0x1
100012c7:	c9                   	leave  
100012c8:	c3                   	ret    
100012c9:	90                   	nop

100012ca <PS2::controllerRead()>:
100012ca:	55                   	push   ebp
100012cb:	89 e5                	mov    ebp,esp
100012cd:	83 ec 20             	sub    esp,0x20
100012d0:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
100012d7:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
100012dd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100012e0:	89 c2                	mov    edx,eax
100012e2:	ec                   	in     al,dx
100012e3:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100012e6:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
100012e9:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
100012ec:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
100012f0:	83 e0 40             	and    eax,0x40
100012f3:	85 c0                	test   eax,eax
100012f5:	75 07                	jne    100012fe <PS2::controllerRead()+0x34>
100012f7:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
100012fa:	84 c0                	test   al,al
100012fc:	79 04                	jns    10001302 <PS2::controllerRead()+0x38>
100012fe:	b0 00                	mov    al,0x0
10001300:	eb 48                	jmp    1000134a <PS2::controllerRead()+0x80>
10001302:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10001306:	83 e0 01             	and    eax,0x1
10001309:	85 c0                	test   eax,eax
1000130b:	75 29                	jne    10001336 <PS2::controllerRead()+0x6c>
1000130d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10001310:	8d 50 01             	lea    edx,[eax+0x1]
10001313:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10001316:	3d 40 06 00 00       	cmp    eax,0x640
1000131b:	0f 94 c0             	sete   al
1000131e:	84 c0                	test   al,al
10001320:	74 b5                	je     100012d7 <PS2::controllerRead()+0xd>
10001322:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10001328:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000132b:	89 c2                	mov    edx,eax
1000132d:	ec                   	in     al,dx
1000132e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001331:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001334:	eb 14                	jmp    1000134a <PS2::controllerRead()+0x80>
10001336:	90                   	nop
10001337:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
1000133d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10001340:	89 c2                	mov    edx,eax
10001342:	ec                   	in     al,dx
10001343:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10001346:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10001349:	90                   	nop
1000134a:	c9                   	leave  
1000134b:	c3                   	ret    

1000134c <PS2Keyboard::PS2Keyboard()>:
1000134c:	55                   	push   ebp
1000134d:	89 e5                	mov    ebp,esp
1000134f:	83 ec 08             	sub    esp,0x8
10001352:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001355:	83 ec 08             	sub    esp,0x8
10001358:	68 00 00 00 00       	push   0x0	10001359: R_386_32	ps2keyname
1000135d:	50                   	push   eax
1000135e:	e8 fc ff ff ff       	call   1000135f <PS2Keyboard::PS2Keyboard()+0x13>	1000135f: R_386_PC32	Keyboard::Keyboard(char const*)
10001363:	83 c4 10             	add    esp,0x10
10001366:	ba 08 00 00 00       	mov    edx,0x8	10001367: R_386_32	vtable for PS2Keyboard
1000136b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000136e:	89 10                	mov    DWORD PTR [eax],edx
10001370:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001373:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
1000137a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000137d:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10001384:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001387:	c6 80 66 01 00 00 00 	mov    BYTE PTR [eax+0x166],0x0
1000138e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001391:	c6 80 67 01 00 00 00 	mov    BYTE PTR [eax+0x167],0x0
10001398:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000139b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
100013a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013a5:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
100013ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013af:	c6 80 6a 01 00 00 00 	mov    BYTE PTR [eax+0x16a],0x0
100013b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013b9:	c6 80 6b 01 00 00 00 	mov    BYTE PTR [eax+0x16b],0x0
100013c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013c3:	c6 80 6c 01 00 00 00 	mov    BYTE PTR [eax+0x16c],0x0
100013ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013cd:	c6 80 6d 01 00 00 00 	mov    BYTE PTR [eax+0x16d],0x0
100013d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013d7:	c6 80 6e 01 00 00 00 	mov    BYTE PTR [eax+0x16e],0x0
100013de:	90                   	nop
100013df:	c9                   	leave  
100013e0:	c3                   	ret    
100013e1:	90                   	nop

100013e2 <PS2Keyboard::~PS2Keyboard()>:
100013e2:	55                   	push   ebp
100013e3:	89 e5                	mov    ebp,esp
100013e5:	83 ec 08             	sub    esp,0x8
100013e8:	ba 08 00 00 00       	mov    edx,0x8	100013e9: R_386_32	vtable for PS2Keyboard
100013ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013f0:	89 10                	mov    DWORD PTR [eax],edx
100013f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013f5:	83 ec 0c             	sub    esp,0xc
100013f8:	50                   	push   eax
100013f9:	e8 fc ff ff ff       	call   100013fa <PS2Keyboard::~PS2Keyboard()+0x18>	100013fa: R_386_PC32	Keyboard::~Keyboard()
100013fe:	83 c4 10             	add    esp,0x10
10001401:	90                   	nop
10001402:	c9                   	leave  
10001403:	c3                   	ret    

10001404 <PS2Keyboard::~PS2Keyboard()>:
10001404:	55                   	push   ebp
10001405:	89 e5                	mov    ebp,esp
10001407:	83 ec 08             	sub    esp,0x8
1000140a:	83 ec 0c             	sub    esp,0xc
1000140d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001410:	e8 fc ff ff ff       	call   10001411 <PS2Keyboard::~PS2Keyboard()+0xd>	10001411: R_386_PC32	PS2Keyboard::~PS2Keyboard()
10001415:	83 c4 10             	add    esp,0x10
10001418:	83 ec 08             	sub    esp,0x8
1000141b:	68 70 01 00 00       	push   0x170
10001420:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001423:	e8 fc ff ff ff       	call   10001424 <PS2Keyboard::~PS2Keyboard()+0x20>	10001424: R_386_PC32	operator delete(void*, unsigned long)
10001428:	83 c4 10             	add    esp,0x10
1000142b:	c9                   	leave  
1000142c:	c3                   	ret    
1000142d:	90                   	nop

1000142e <PS2Keyboard::setRepeatRate(int)>:
1000142e:	c3                   	ret    
1000142f:	90                   	nop

10001430 <PS2Keyboard::setRepeatDelay(int)>:
10001430:	c3                   	ret    
10001431:	90                   	nop

10001432 <PS2Keyboard::sendKey(unsigned short, bool)>:
10001432:	83 ec 1c             	sub    esp,0x1c
10001435:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10001439:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
1000143d:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10001441:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10001445:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
1000144a:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10001451:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10001457:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
1000145c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10001460:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10001464:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001468:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
1000146d:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10001472:	83 c4 1c             	add    esp,0x1c
10001475:	e9 fc ff ff ff       	jmp    10001476 <PS2Keyboard::sendKey(unsigned short, bool)+0x44>	10001476: R_386_PC32	sendKeyboardToken(KeyboardToken)

1000147a <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)>:
1000147a:	83 ec 1c             	sub    esp,0x1c
1000147d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10001481:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10001485:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10001489:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
1000148d:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10001492:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10001499:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
1000149f:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
100014a4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100014a8:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
100014ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100014b0:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
100014b5:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
100014ba:	83 c4 1c             	add    esp,0x1c
100014bd:	e9 fc ff ff ff       	jmp    100014be <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)+0x44>	100014be: R_386_PC32	sendKeyboardToken(KeyboardToken)

100014c2 <PS2Keyboard::updateKeyboardLEDs()>:
100014c2:	56                   	push   esi
100014c3:	53                   	push   ebx
100014c4:	83 ec 0c             	sub    esp,0xc
100014c7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
100014cb:	8a 96 69 01 00 00    	mov    dl,BYTE PTR [esi+0x169]
100014d1:	0f b6 9e 6a 01 00 00 	movzx  ebx,BYTE PTR [esi+0x16a]
100014d8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
100014db:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
100014e2:	09 c3                	or     ebx,eax
100014e4:	0a 9e 6b 01 00 00    	or     bl,BYTE PTR [esi+0x16b]
100014ea:	68 ed 00 00 00       	push   0xed
100014ef:	0f b6 db             	movzx  ebx,bl
100014f2:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
100014f8:	e8 fc ff ff ff       	call   100014f9 <PS2Keyboard::updateKeyboardLEDs()+0x37>	100014f9: R_386_PC32	PS2Port::deviceWrite(unsigned char)
100014fd:	58                   	pop    eax
100014fe:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10001504:	e8 fc ff ff ff       	call   10001505 <PS2Keyboard::updateKeyboardLEDs()+0x43>	10001505: R_386_PC32	PS2Port::deviceRead()
10001509:	5a                   	pop    edx
1000150a:	59                   	pop    ecx
1000150b:	53                   	push   ebx
1000150c:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10001512:	e8 fc ff ff ff       	call   10001513 <PS2Keyboard::updateKeyboardLEDs()+0x51>	10001513: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10001517:	8b 86 60 01 00 00    	mov    eax,DWORD PTR [esi+0x160]
1000151d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001521:	83 c4 14             	add    esp,0x14
10001524:	5b                   	pop    ebx
10001525:	5e                   	pop    esi
10001526:	e9 fc ff ff ff       	jmp    10001527 <PS2Keyboard::updateKeyboardLEDs()+0x65>	10001527: R_386_PC32	PS2Port::deviceRead()

1000152b <ps2KeyboardHandler(regs*, void*)>:
1000152b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000152f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001533:	eb 01                	jmp    10001536 <PS2Keyboard::handler()>
10001535:	90                   	nop

10001536 <PS2Keyboard::handler()>:
10001536:	57                   	push   edi
10001537:	56                   	push   esi
10001538:	53                   	push   ebx
10001539:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
1000153d:	e4 60                	in     al,0x60
1000153f:	80 be 6e 01 00 00 00 	cmp    BYTE PTR [esi+0x16e],0x0
10001546:	74 29                	je     10001571 <PS2Keyboard::handler()+0x3b>
10001548:	88 c2                	mov    dl,al
1000154a:	3c e0                	cmp    al,0xe0
1000154c:	75 0c                	jne    1000155a <PS2Keyboard::handler()+0x24>
1000154e:	c6 86 64 01 00 00 01 	mov    BYTE PTR [esi+0x164],0x1
10001555:	e9 17 07 00 00       	jmp    10001c71 <PS2Keyboard::handler()+0x73b>
1000155a:	84 c0                	test   al,al
1000155c:	0f 89 52 01 00 00    	jns    100016b4 <PS2Keyboard::handler()+0x17e>
10001562:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10001569:	83 e2 7f             	and    edx,0x7f
1000156c:	e9 43 01 00 00       	jmp    100016b4 <PS2Keyboard::handler()+0x17e>
10001571:	3c e0                	cmp    al,0xe0
10001573:	74 d9                	je     1000154e <PS2Keyboard::handler()+0x18>
10001575:	3c f0                	cmp    al,0xf0
10001577:	75 0c                	jne    10001585 <PS2Keyboard::handler()+0x4f>
10001579:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10001580:	e9 ec 06 00 00       	jmp    10001c71 <PS2Keyboard::handler()+0x73b>
10001585:	3c 12                	cmp    al,0x12
10001587:	75 1f                	jne    100015a8 <PS2Keyboard::handler()+0x72>
10001589:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
1000158f:	83 f0 01             	xor    eax,0x1
10001592:	88 86 67 01 00 00    	mov    BYTE PTR [esi+0x167],al
10001598:	52                   	push   edx
10001599:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100015a0:	50                   	push   eax
100015a1:	68 04 01 00 00       	push   0x104
100015a6:	eb 23                	jmp    100015cb <PS2Keyboard::handler()+0x95>
100015a8:	76 3d                	jbe    100015e7 <PS2Keyboard::handler()+0xb1>
100015aa:	3c 14                	cmp    al,0x14
100015ac:	75 62                	jne    10001610 <PS2Keyboard::handler()+0xda>
100015ae:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
100015b4:	83 f0 01             	xor    eax,0x1
100015b7:	88 86 68 01 00 00    	mov    BYTE PTR [esi+0x168],al
100015bd:	51                   	push   ecx
100015be:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100015c5:	50                   	push   eax
100015c6:	68 00 01 00 00       	push   0x100
100015cb:	56                   	push   esi
100015cc:	e8 fc ff ff ff       	call   100015cd <PS2Keyboard::handler()+0x97>	100015cd: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
100015d1:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
100015d8:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
100015df:	83 c4 10             	add    esp,0x10
100015e2:	e9 8a 06 00 00       	jmp    10001c71 <PS2Keyboard::handler()+0x73b>
100015e7:	3c 11                	cmp    al,0x11
100015e9:	75 2d                	jne    10001618 <PS2Keyboard::handler()+0xe2>
100015eb:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
100015f1:	83 f0 01             	xor    eax,0x1
100015f4:	88 86 6d 01 00 00    	mov    BYTE PTR [esi+0x16d],al
100015fa:	88 86 6c 01 00 00    	mov    BYTE PTR [esi+0x16c],al
10001600:	50                   	push   eax
10001601:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001608:	50                   	push   eax
10001609:	68 01 01 00 00       	push   0x101
1000160e:	eb bb                	jmp    100015cb <PS2Keyboard::handler()+0x95>
10001610:	3c 59                	cmp    al,0x59
10001612:	0f 84 71 ff ff ff    	je     10001589 <PS2Keyboard::handler()+0x53>
10001618:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
1000161f:	0f 84 b1 01 00 00    	je     100017d6 <PS2Keyboard::handler()+0x2a0>
10001625:	3c 6b                	cmp    al,0x6b
10001627:	0f 84 f2 00 00 00    	je     1000171f <PS2Keyboard::handler()+0x1e9>
1000162d:	77 50                	ja     1000167f <PS2Keyboard::handler()+0x149>
1000162f:	3c 51                	cmp    al,0x51
10001631:	0f 84 37 01 00 00    	je     1000176e <PS2Keyboard::handler()+0x238>
10001637:	77 23                	ja     1000165c <PS2Keyboard::handler()+0x126>
10001639:	3c 49                	cmp    al,0x49
1000163b:	0f 84 0d 01 00 00    	je     1000174e <PS2Keyboard::handler()+0x218>
10001641:	3c 4a                	cmp    al,0x4a
10001643:	0f 85 29 04 00 00    	jne    10001a72 <PS2Keyboard::handler()+0x53c>
10001649:	50                   	push   eax
1000164a:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001651:	50                   	push   eax
10001652:	68 1f 03 00 00       	push   0x31f
10001657:	e9 c6 03 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
1000165c:	3c 5a                	cmp    al,0x5a
1000165e:	0f 84 5f 01 00 00    	je     100017c3 <PS2Keyboard::handler()+0x28d>
10001664:	3c 69                	cmp    al,0x69
10001666:	0f 85 06 04 00 00    	jne    10001a72 <PS2Keyboard::handler()+0x53c>
1000166c:	51                   	push   ecx
1000166d:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001674:	50                   	push   eax
10001675:	68 01 02 00 00       	push   0x201
1000167a:	e9 a3 03 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
1000167f:	3c 71                	cmp    al,0x71
10001681:	0f 84 16 01 00 00    	je     1000179d <PS2Keyboard::handler()+0x267>
10001687:	77 15                	ja     1000169e <PS2Keyboard::handler()+0x168>
10001689:	3c 6c                	cmp    al,0x6c
1000168b:	0f 84 f0 00 00 00    	je     10001781 <PS2Keyboard::handler()+0x24b>
10001691:	3c 70                	cmp    al,0x70
10001693:	0f 84 17 01 00 00    	je     100017b0 <PS2Keyboard::handler()+0x27a>
10001699:	e9 d4 03 00 00       	jmp    10001a72 <PS2Keyboard::handler()+0x53c>
1000169e:	3c 74                	cmp    al,0x74
100016a0:	0f 84 8c 00 00 00    	je     10001732 <PS2Keyboard::handler()+0x1fc>
100016a6:	3c 75                	cmp    al,0x75
100016a8:	74 4a                	je     100016f4 <PS2Keyboard::handler()+0x1be>
100016aa:	3c 72                	cmp    al,0x72
100016ac:	0f 85 c0 03 00 00    	jne    10001a72 <PS2Keyboard::handler()+0x53c>
100016b2:	eb 58                	jmp    1000170c <PS2Keyboard::handler()+0x1d6>
100016b4:	80 fa 2a             	cmp    dl,0x2a
100016b7:	0f 84 cc fe ff ff    	je     10001589 <PS2Keyboard::handler()+0x53>
100016bd:	0f 87 97 05 00 00    	ja     10001c5a <PS2Keyboard::handler()+0x724>
100016c3:	80 fa 1d             	cmp    dl,0x1d
100016c6:	0f 84 e2 fe ff ff    	je     100015ae <PS2Keyboard::handler()+0x78>
100016cc:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
100016d3:	0f 84 ce 03 00 00    	je     10001aa7 <PS2Keyboard::handler()+0x571>
100016d9:	80 fa 4b             	cmp    dl,0x4b
100016dc:	74 41                	je     1000171f <PS2Keyboard::handler()+0x1e9>
100016de:	77 27                	ja     10001707 <PS2Keyboard::handler()+0x1d1>
100016e0:	80 fa 47             	cmp    dl,0x47
100016e3:	0f 84 98 00 00 00    	je     10001781 <PS2Keyboard::handler()+0x24b>
100016e9:	0f 86 96 03 00 00    	jbe    10001a85 <PS2Keyboard::handler()+0x54f>
100016ef:	80 fa 48             	cmp    dl,0x48
100016f2:	75 51                	jne    10001745 <PS2Keyboard::handler()+0x20f>
100016f4:	50                   	push   eax
100016f5:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100016fc:	50                   	push   eax
100016fd:	68 0b 02 00 00       	push   0x20b
10001702:	e9 1b 03 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001707:	80 fa 50             	cmp    dl,0x50
1000170a:	75 55                	jne    10001761 <PS2Keyboard::handler()+0x22b>
1000170c:	50                   	push   eax
1000170d:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001714:	50                   	push   eax
10001715:	68 0c 02 00 00       	push   0x20c
1000171a:	e9 03 03 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
1000171f:	50                   	push   eax
10001720:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001727:	50                   	push   eax
10001728:	68 0d 02 00 00       	push   0x20d
1000172d:	e9 f0 02 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001732:	50                   	push   eax
10001733:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000173a:	50                   	push   eax
1000173b:	68 0e 02 00 00       	push   0x20e
10001740:	e9 dd 02 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001745:	80 fa 49             	cmp    dl,0x49
10001748:	0f 85 24 03 00 00    	jne    10001a72 <PS2Keyboard::handler()+0x53c>
1000174e:	50                   	push   eax
1000174f:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001756:	50                   	push   eax
10001757:	68 04 02 00 00       	push   0x204
1000175c:	e9 c1 02 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001761:	0f 86 2f 03 00 00    	jbe    10001a96 <PS2Keyboard::handler()+0x560>
10001767:	80 fa 52             	cmp    dl,0x52
1000176a:	74 44                	je     100017b0 <PS2Keyboard::handler()+0x27a>
1000176c:	73 26                	jae    10001794 <PS2Keyboard::handler()+0x25e>
1000176e:	57                   	push   edi
1000176f:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001776:	50                   	push   eax
10001777:	68 05 02 00 00       	push   0x205
1000177c:	e9 a1 02 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001781:	53                   	push   ebx
10001782:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001789:	50                   	push   eax
1000178a:	68 00 02 00 00       	push   0x200
1000178f:	e9 8e 02 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001794:	80 fa 53             	cmp    dl,0x53
10001797:	0f 85 d5 02 00 00    	jne    10001a72 <PS2Keyboard::handler()+0x53c>
1000179d:	52                   	push   edx
1000179e:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100017a5:	50                   	push   eax
100017a6:	68 03 02 00 00       	push   0x203
100017ab:	e9 72 02 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100017b0:	50                   	push   eax
100017b1:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100017b8:	50                   	push   eax
100017b9:	68 02 02 00 00       	push   0x202
100017be:	e9 5f 02 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100017c3:	50                   	push   eax
100017c4:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100017cb:	50                   	push   eax
100017cc:	68 1d 03 00 00       	push   0x31d
100017d1:	e9 4c 02 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100017d6:	0f b6 96 66 01 00 00 	movzx  edx,BYTE PTR [esi+0x166]
100017dd:	3c 66                	cmp    al,0x66
100017df:	75 09                	jne    100017ea <PS2Keyboard::handler()+0x2b4>
100017e1:	50                   	push   eax
100017e2:	52                   	push   edx
100017e3:	6a 08                	push   0x8
100017e5:	e9 38 02 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100017ea:	3c 0d                	cmp    al,0xd
100017ec:	75 09                	jne    100017f7 <PS2Keyboard::handler()+0x2c1>
100017ee:	50                   	push   eax
100017ef:	52                   	push   edx
100017f0:	6a 09                	push   0x9
100017f2:	e9 2b 02 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100017f7:	3c 58                	cmp    al,0x58
100017f9:	75 2a                	jne    10001825 <PS2Keyboard::handler()+0x2ef>
100017fb:	84 d2                	test   dl,dl
100017fd:	75 13                	jne    10001812 <PS2Keyboard::handler()+0x2dc>
100017ff:	83 ec 0c             	sub    esp,0xc
10001802:	80 b6 69 01 00 00 01 	xor    BYTE PTR [esi+0x169],0x1
10001809:	56                   	push   esi
1000180a:	e8 fc ff ff ff       	call   1000180b <PS2Keyboard::handler()+0x2d5>	1000180b: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
1000180f:	83 c4 10             	add    esp,0x10
10001812:	50                   	push   eax
10001813:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000181a:	50                   	push   eax
1000181b:	68 80 02 00 00       	push   0x280
10001820:	e9 fd 01 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001825:	3c 77                	cmp    al,0x77
10001827:	75 2a                	jne    10001853 <PS2Keyboard::handler()+0x31d>
10001829:	84 d2                	test   dl,dl
1000182b:	75 13                	jne    10001840 <PS2Keyboard::handler()+0x30a>
1000182d:	83 ec 0c             	sub    esp,0xc
10001830:	80 b6 6a 01 00 00 01 	xor    BYTE PTR [esi+0x16a],0x1
10001837:	56                   	push   esi
10001838:	e8 fc ff ff ff       	call   10001839 <PS2Keyboard::handler()+0x303>	10001839: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
1000183d:	83 c4 10             	add    esp,0x10
10001840:	50                   	push   eax
10001841:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001848:	50                   	push   eax
10001849:	68 81 02 00 00       	push   0x281
1000184e:	e9 cf 01 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001853:	3c 7e                	cmp    al,0x7e
10001855:	75 2a                	jne    10001881 <PS2Keyboard::handler()+0x34b>
10001857:	84 d2                	test   dl,dl
10001859:	75 13                	jne    1000186e <PS2Keyboard::handler()+0x338>
1000185b:	83 ec 0c             	sub    esp,0xc
1000185e:	80 b6 6b 01 00 00 01 	xor    BYTE PTR [esi+0x16b],0x1
10001865:	56                   	push   esi
10001866:	e8 fc ff ff ff       	call   10001867 <PS2Keyboard::handler()+0x331>	10001867: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
1000186b:	83 c4 10             	add    esp,0x10
1000186e:	57                   	push   edi
1000186f:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10001876:	50                   	push   eax
10001877:	68 82 02 00 00       	push   0x282
1000187c:	e9 a1 01 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001881:	3c 05                	cmp    al,0x5
10001883:	75 0c                	jne    10001891 <PS2Keyboard::handler()+0x35b>
10001885:	53                   	push   ebx
10001886:	52                   	push   edx
10001887:	68 00 03 00 00       	push   0x300
1000188c:	e9 91 01 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001891:	3c 06                	cmp    al,0x6
10001893:	75 0c                	jne    100018a1 <PS2Keyboard::handler()+0x36b>
10001895:	51                   	push   ecx
10001896:	52                   	push   edx
10001897:	68 01 03 00 00       	push   0x301
1000189c:	e9 81 01 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100018a1:	3c 04                	cmp    al,0x4
100018a3:	75 0c                	jne    100018b1 <PS2Keyboard::handler()+0x37b>
100018a5:	50                   	push   eax
100018a6:	52                   	push   edx
100018a7:	68 02 03 00 00       	push   0x302
100018ac:	e9 71 01 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100018b1:	3c 0c                	cmp    al,0xc
100018b3:	75 0c                	jne    100018c1 <PS2Keyboard::handler()+0x38b>
100018b5:	50                   	push   eax
100018b6:	52                   	push   edx
100018b7:	68 03 03 00 00       	push   0x303
100018bc:	e9 61 01 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100018c1:	3c 03                	cmp    al,0x3
100018c3:	75 0c                	jne    100018d1 <PS2Keyboard::handler()+0x39b>
100018c5:	50                   	push   eax
100018c6:	52                   	push   edx
100018c7:	68 04 03 00 00       	push   0x304
100018cc:	e9 51 01 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100018d1:	3c 0b                	cmp    al,0xb
100018d3:	75 0c                	jne    100018e1 <PS2Keyboard::handler()+0x3ab>
100018d5:	50                   	push   eax
100018d6:	52                   	push   edx
100018d7:	68 05 03 00 00       	push   0x305
100018dc:	e9 41 01 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100018e1:	3c 02                	cmp    al,0x2
100018e3:	74 04                	je     100018e9 <PS2Keyboard::handler()+0x3b3>
100018e5:	3c 83                	cmp    al,0x83
100018e7:	75 0c                	jne    100018f5 <PS2Keyboard::handler()+0x3bf>
100018e9:	50                   	push   eax
100018ea:	52                   	push   edx
100018eb:	68 06 03 00 00       	push   0x306
100018f0:	e9 2d 01 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100018f5:	3c 0a                	cmp    al,0xa
100018f7:	75 0c                	jne    10001905 <PS2Keyboard::handler()+0x3cf>
100018f9:	50                   	push   eax
100018fa:	52                   	push   edx
100018fb:	68 07 03 00 00       	push   0x307
10001900:	e9 1d 01 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001905:	3c 01                	cmp    al,0x1
10001907:	75 0c                	jne    10001915 <PS2Keyboard::handler()+0x3df>
10001909:	57                   	push   edi
1000190a:	52                   	push   edx
1000190b:	68 08 03 00 00       	push   0x308
10001910:	e9 0d 01 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001915:	3c 09                	cmp    al,0x9
10001917:	75 0c                	jne    10001925 <PS2Keyboard::handler()+0x3ef>
10001919:	53                   	push   ebx
1000191a:	52                   	push   edx
1000191b:	68 09 03 00 00       	push   0x309
10001920:	e9 fd 00 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001925:	3c 78                	cmp    al,0x78
10001927:	75 0c                	jne    10001935 <PS2Keyboard::handler()+0x3ff>
10001929:	51                   	push   ecx
1000192a:	52                   	push   edx
1000192b:	68 0a 03 00 00       	push   0x30a
10001930:	e9 ed 00 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001935:	3c 07                	cmp    al,0x7
10001937:	75 0c                	jne    10001945 <PS2Keyboard::handler()+0x40f>
10001939:	50                   	push   eax
1000193a:	52                   	push   edx
1000193b:	68 0b 03 00 00       	push   0x30b
10001940:	e9 dd 00 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001945:	3c 5a                	cmp    al,0x5a
10001947:	75 09                	jne    10001952 <PS2Keyboard::handler()+0x41c>
10001949:	50                   	push   eax
1000194a:	52                   	push   edx
1000194b:	6a 0a                	push   0xa
1000194d:	e9 d0 00 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001952:	3c 76                	cmp    al,0x76
10001954:	75 0c                	jne    10001962 <PS2Keyboard::handler()+0x42c>
10001956:	50                   	push   eax
10001957:	52                   	push   edx
10001958:	68 0a 02 00 00       	push   0x20a
1000195d:	e9 c0 00 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001962:	3c 70                	cmp    al,0x70
10001964:	75 0c                	jne    10001972 <PS2Keyboard::handler()+0x43c>
10001966:	50                   	push   eax
10001967:	52                   	push   edx
10001968:	68 10 03 00 00       	push   0x310
1000196d:	e9 b0 00 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001972:	3c 69                	cmp    al,0x69
10001974:	75 0c                	jne    10001982 <PS2Keyboard::handler()+0x44c>
10001976:	50                   	push   eax
10001977:	52                   	push   edx
10001978:	68 11 03 00 00       	push   0x311
1000197d:	e9 a0 00 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001982:	3c 72                	cmp    al,0x72
10001984:	75 0c                	jne    10001992 <PS2Keyboard::handler()+0x45c>
10001986:	50                   	push   eax
10001987:	52                   	push   edx
10001988:	68 12 03 00 00       	push   0x312
1000198d:	e9 90 00 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001992:	3c 7a                	cmp    al,0x7a
10001994:	75 0c                	jne    100019a2 <PS2Keyboard::handler()+0x46c>
10001996:	57                   	push   edi
10001997:	52                   	push   edx
10001998:	68 13 03 00 00       	push   0x313
1000199d:	e9 80 00 00 00       	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100019a2:	3c 6b                	cmp    al,0x6b
100019a4:	75 09                	jne    100019af <PS2Keyboard::handler()+0x479>
100019a6:	53                   	push   ebx
100019a7:	52                   	push   edx
100019a8:	68 14 03 00 00       	push   0x314
100019ad:	eb 73                	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100019af:	3c 73                	cmp    al,0x73
100019b1:	75 09                	jne    100019bc <PS2Keyboard::handler()+0x486>
100019b3:	51                   	push   ecx
100019b4:	52                   	push   edx
100019b5:	68 15 03 00 00       	push   0x315
100019ba:	eb 66                	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100019bc:	3c 74                	cmp    al,0x74
100019be:	75 09                	jne    100019c9 <PS2Keyboard::handler()+0x493>
100019c0:	50                   	push   eax
100019c1:	52                   	push   edx
100019c2:	68 16 03 00 00       	push   0x316
100019c7:	eb 59                	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100019c9:	3c 6c                	cmp    al,0x6c
100019cb:	75 09                	jne    100019d6 <PS2Keyboard::handler()+0x4a0>
100019cd:	50                   	push   eax
100019ce:	52                   	push   edx
100019cf:	68 17 03 00 00       	push   0x317
100019d4:	eb 4c                	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100019d6:	3c 75                	cmp    al,0x75
100019d8:	75 09                	jne    100019e3 <PS2Keyboard::handler()+0x4ad>
100019da:	50                   	push   eax
100019db:	52                   	push   edx
100019dc:	68 18 03 00 00       	push   0x318
100019e1:	eb 3f                	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100019e3:	3c 7d                	cmp    al,0x7d
100019e5:	75 09                	jne    100019f0 <PS2Keyboard::handler()+0x4ba>
100019e7:	50                   	push   eax
100019e8:	52                   	push   edx
100019e9:	68 19 03 00 00       	push   0x319
100019ee:	eb 32                	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100019f0:	3c 71                	cmp    al,0x71
100019f2:	75 09                	jne    100019fd <PS2Keyboard::handler()+0x4c7>
100019f4:	50                   	push   eax
100019f5:	52                   	push   edx
100019f6:	68 1a 03 00 00       	push   0x31a
100019fb:	eb 25                	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
100019fd:	3c 7b                	cmp    al,0x7b
100019ff:	75 09                	jne    10001a0a <PS2Keyboard::handler()+0x4d4>
10001a01:	50                   	push   eax
10001a02:	52                   	push   edx
10001a03:	68 1c 03 00 00       	push   0x31c
10001a08:	eb 18                	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001a0a:	3c 79                	cmp    al,0x79
10001a0c:	75 09                	jne    10001a17 <PS2Keyboard::handler()+0x4e1>
10001a0e:	57                   	push   edi
10001a0f:	52                   	push   edx
10001a10:	68 1b 03 00 00       	push   0x31b
10001a15:	eb 0b                	jmp    10001a22 <PS2Keyboard::handler()+0x4ec>
10001a17:	3c 7c                	cmp    al,0x7c
10001a19:	75 0f                	jne    10001a2a <PS2Keyboard::handler()+0x4f4>
10001a1b:	53                   	push   ebx
10001a1c:	52                   	push   edx
10001a1d:	68 1e 03 00 00       	push   0x31e
10001a22:	56                   	push   esi
10001a23:	e8 fc ff ff ff       	call   10001a24 <PS2Keyboard::handler()+0x4ee>	10001a24: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
10001a28:	eb 45                	jmp    10001a6f <PS2Keyboard::handler()+0x539>
10001a2a:	0f b6 c0             	movzx  eax,al
10001a2d:	8a 8e 69 01 00 00    	mov    cl,BYTE PTR [esi+0x169]
10001a33:	80 be 67 01 00 00 00 	cmp    BYTE PTR [esi+0x167],0x0
10001a3a:	74 16                	je     10001a52 <PS2Keyboard::handler()+0x51c>
10001a3c:	84 c9                	test   cl,cl
10001a3e:	74 09                	je     10001a49 <PS2Keyboard::handler()+0x513>
10001a40:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10001a43: R_386_32	PS2Keyboard::internalMapCapUpper
10001a47:	eb 1d                	jmp    10001a66 <PS2Keyboard::handler()+0x530>
10001a49:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10001a4c: R_386_32	PS2Keyboard::internalMapperUpper
10001a50:	eb 14                	jmp    10001a66 <PS2Keyboard::handler()+0x530>
10001a52:	84 c9                	test   cl,cl
10001a54:	74 09                	je     10001a5f <PS2Keyboard::handler()+0x529>
10001a56:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10001a59: R_386_32	PS2Keyboard::internalMapCapLower
10001a5d:	eb 07                	jmp    10001a66 <PS2Keyboard::handler()+0x530>
10001a5f:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10001a62: R_386_32	PS2Keyboard::internalMapperLower
10001a66:	51                   	push   ecx
10001a67:	52                   	push   edx
10001a68:	50                   	push   eax
10001a69:	56                   	push   esi
10001a6a:	e8 fc ff ff ff       	call   10001a6b <PS2Keyboard::handler()+0x535>	10001a6b: R_386_PC32	PS2Keyboard::sendKey(unsigned short, bool)
10001a6f:	83 c4 10             	add    esp,0x10
10001a72:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10001a79:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10001a80:	e9 ec 01 00 00       	jmp    10001c71 <PS2Keyboard::handler()+0x73b>
10001a85:	80 fa 1c             	cmp    dl,0x1c
10001a88:	0f 84 35 fd ff ff    	je     100017c3 <PS2Keyboard::handler()+0x28d>
10001a8e:	80 fa 35             	cmp    dl,0x35
10001a91:	e9 ad fb ff ff       	jmp    10001643 <PS2Keyboard::handler()+0x10d>
10001a96:	80 fa 4d             	cmp    dl,0x4d
10001a99:	0f 84 93 fc ff ff    	je     10001732 <PS2Keyboard::handler()+0x1fc>
10001a9f:	80 fa 4f             	cmp    dl,0x4f
10001aa2:	e9 bf fb ff ff       	jmp    10001666 <PS2Keyboard::handler()+0x130>
10001aa7:	0f b6 8e 66 01 00 00 	movzx  ecx,BYTE PTR [esi+0x166]
10001aae:	80 fa 0e             	cmp    dl,0xe
10001ab1:	75 07                	jne    10001aba <PS2Keyboard::handler()+0x584>
10001ab3:	50                   	push   eax
10001ab4:	51                   	push   ecx
10001ab5:	e9 29 fd ff ff       	jmp    100017e3 <PS2Keyboard::handler()+0x2ad>
10001aba:	80 fa 0f             	cmp    dl,0xf
10001abd:	75 07                	jne    10001ac6 <PS2Keyboard::handler()+0x590>
10001abf:	57                   	push   edi
10001ac0:	51                   	push   ecx
10001ac1:	e9 2a fd ff ff       	jmp    100017f0 <PS2Keyboard::handler()+0x2ba>
10001ac6:	80 fa 3a             	cmp    dl,0x3a
10001ac9:	75 07                	jne    10001ad2 <PS2Keyboard::handler()+0x59c>
10001acb:	84 c9                	test   cl,cl
10001acd:	e9 2b fd ff ff       	jmp    100017fd <PS2Keyboard::handler()+0x2c7>
10001ad2:	80 fa 45             	cmp    dl,0x45
10001ad5:	75 07                	jne    10001ade <PS2Keyboard::handler()+0x5a8>
10001ad7:	84 c9                	test   cl,cl
10001ad9:	e9 4d fd ff ff       	jmp    1000182b <PS2Keyboard::handler()+0x2f5>
10001ade:	80 fa 46             	cmp    dl,0x46
10001ae1:	75 07                	jne    10001aea <PS2Keyboard::handler()+0x5b4>
10001ae3:	84 c9                	test   cl,cl
10001ae5:	e9 6f fd ff ff       	jmp    10001859 <PS2Keyboard::handler()+0x323>
10001aea:	80 fa 3b             	cmp    dl,0x3b
10001aed:	75 07                	jne    10001af6 <PS2Keyboard::handler()+0x5c0>
10001aef:	53                   	push   ebx
10001af0:	51                   	push   ecx
10001af1:	e9 91 fd ff ff       	jmp    10001887 <PS2Keyboard::handler()+0x351>
10001af6:	80 fa 3c             	cmp    dl,0x3c
10001af9:	75 07                	jne    10001b02 <PS2Keyboard::handler()+0x5cc>
10001afb:	52                   	push   edx
10001afc:	51                   	push   ecx
10001afd:	e9 95 fd ff ff       	jmp    10001897 <PS2Keyboard::handler()+0x361>
10001b02:	80 fa 3d             	cmp    dl,0x3d
10001b05:	75 07                	jne    10001b0e <PS2Keyboard::handler()+0x5d8>
10001b07:	50                   	push   eax
10001b08:	51                   	push   ecx
10001b09:	e9 99 fd ff ff       	jmp    100018a7 <PS2Keyboard::handler()+0x371>
10001b0e:	80 fa 3e             	cmp    dl,0x3e
10001b11:	75 07                	jne    10001b1a <PS2Keyboard::handler()+0x5e4>
10001b13:	50                   	push   eax
10001b14:	51                   	push   ecx
10001b15:	e9 9d fd ff ff       	jmp    100018b7 <PS2Keyboard::handler()+0x381>
10001b1a:	80 fa 3f             	cmp    dl,0x3f
10001b1d:	75 07                	jne    10001b26 <PS2Keyboard::handler()+0x5f0>
10001b1f:	50                   	push   eax
10001b20:	51                   	push   ecx
10001b21:	e9 a1 fd ff ff       	jmp    100018c7 <PS2Keyboard::handler()+0x391>
10001b26:	80 fa 40             	cmp    dl,0x40
10001b29:	75 07                	jne    10001b32 <PS2Keyboard::handler()+0x5fc>
10001b2b:	50                   	push   eax
10001b2c:	51                   	push   ecx
10001b2d:	e9 a5 fd ff ff       	jmp    100018d7 <PS2Keyboard::handler()+0x3a1>
10001b32:	80 fa 41             	cmp    dl,0x41
10001b35:	75 07                	jne    10001b3e <PS2Keyboard::handler()+0x608>
10001b37:	50                   	push   eax
10001b38:	51                   	push   ecx
10001b39:	e9 ad fd ff ff       	jmp    100018eb <PS2Keyboard::handler()+0x3b5>
10001b3e:	80 fa 42             	cmp    dl,0x42
10001b41:	75 07                	jne    10001b4a <PS2Keyboard::handler()+0x614>
10001b43:	50                   	push   eax
10001b44:	51                   	push   ecx
10001b45:	e9 b1 fd ff ff       	jmp    100018fb <PS2Keyboard::handler()+0x3c5>
10001b4a:	80 fa 43             	cmp    dl,0x43
10001b4d:	75 07                	jne    10001b56 <PS2Keyboard::handler()+0x620>
10001b4f:	57                   	push   edi
10001b50:	51                   	push   ecx
10001b51:	e9 b5 fd ff ff       	jmp    1000190b <PS2Keyboard::handler()+0x3d5>
10001b56:	80 fa 44             	cmp    dl,0x44
10001b59:	75 07                	jne    10001b62 <PS2Keyboard::handler()+0x62c>
10001b5b:	53                   	push   ebx
10001b5c:	51                   	push   ecx
10001b5d:	e9 b9 fd ff ff       	jmp    1000191b <PS2Keyboard::handler()+0x3e5>
10001b62:	84 d2                	test   dl,dl
10001b64:	75 07                	jne    10001b6d <PS2Keyboard::handler()+0x637>
10001b66:	52                   	push   edx
10001b67:	51                   	push   ecx
10001b68:	e9 be fd ff ff       	jmp    1000192b <PS2Keyboard::handler()+0x3f5>
10001b6d:	80 fa 1c             	cmp    dl,0x1c
10001b70:	75 07                	jne    10001b79 <PS2Keyboard::handler()+0x643>
10001b72:	50                   	push   eax
10001b73:	51                   	push   ecx
10001b74:	e9 d2 fd ff ff       	jmp    1000194b <PS2Keyboard::handler()+0x415>
10001b79:	80 fa 01             	cmp    dl,0x1
10001b7c:	75 07                	jne    10001b85 <PS2Keyboard::handler()+0x64f>
10001b7e:	50                   	push   eax
10001b7f:	51                   	push   ecx
10001b80:	e9 d3 fd ff ff       	jmp    10001958 <PS2Keyboard::handler()+0x422>
10001b85:	80 fa 52             	cmp    dl,0x52
10001b88:	75 07                	jne    10001b91 <PS2Keyboard::handler()+0x65b>
10001b8a:	50                   	push   eax
10001b8b:	51                   	push   ecx
10001b8c:	e9 d7 fd ff ff       	jmp    10001968 <PS2Keyboard::handler()+0x432>
10001b91:	80 fa 4f             	cmp    dl,0x4f
10001b94:	75 07                	jne    10001b9d <PS2Keyboard::handler()+0x667>
10001b96:	50                   	push   eax
10001b97:	51                   	push   ecx
10001b98:	e9 db fd ff ff       	jmp    10001978 <PS2Keyboard::handler()+0x442>
10001b9d:	80 fa 50             	cmp    dl,0x50
10001ba0:	75 07                	jne    10001ba9 <PS2Keyboard::handler()+0x673>
10001ba2:	50                   	push   eax
10001ba3:	51                   	push   ecx
10001ba4:	e9 df fd ff ff       	jmp    10001988 <PS2Keyboard::handler()+0x452>
10001ba9:	80 fa 51             	cmp    dl,0x51
10001bac:	75 07                	jne    10001bb5 <PS2Keyboard::handler()+0x67f>
10001bae:	50                   	push   eax
10001baf:	51                   	push   ecx
10001bb0:	e9 e3 fd ff ff       	jmp    10001998 <PS2Keyboard::handler()+0x462>
10001bb5:	80 fa 4b             	cmp    dl,0x4b
10001bb8:	75 07                	jne    10001bc1 <PS2Keyboard::handler()+0x68b>
10001bba:	57                   	push   edi
10001bbb:	51                   	push   ecx
10001bbc:	e9 e7 fd ff ff       	jmp    100019a8 <PS2Keyboard::handler()+0x472>
10001bc1:	80 fa 4c             	cmp    dl,0x4c
10001bc4:	75 07                	jne    10001bcd <PS2Keyboard::handler()+0x697>
10001bc6:	53                   	push   ebx
10001bc7:	51                   	push   ecx
10001bc8:	e9 e8 fd ff ff       	jmp    100019b5 <PS2Keyboard::handler()+0x47f>
10001bcd:	80 fa 4d             	cmp    dl,0x4d
10001bd0:	75 07                	jne    10001bd9 <PS2Keyboard::handler()+0x6a3>
10001bd2:	52                   	push   edx
10001bd3:	51                   	push   ecx
10001bd4:	e9 e9 fd ff ff       	jmp    100019c2 <PS2Keyboard::handler()+0x48c>
10001bd9:	80 fa 47             	cmp    dl,0x47
10001bdc:	75 07                	jne    10001be5 <PS2Keyboard::handler()+0x6af>
10001bde:	50                   	push   eax
10001bdf:	51                   	push   ecx
10001be0:	e9 ea fd ff ff       	jmp    100019cf <PS2Keyboard::handler()+0x499>
10001be5:	80 fa 48             	cmp    dl,0x48
10001be8:	75 07                	jne    10001bf1 <PS2Keyboard::handler()+0x6bb>
10001bea:	50                   	push   eax
10001beb:	51                   	push   ecx
10001bec:	e9 eb fd ff ff       	jmp    100019dc <PS2Keyboard::handler()+0x4a6>
10001bf1:	80 fa 49             	cmp    dl,0x49
10001bf4:	75 07                	jne    10001bfd <PS2Keyboard::handler()+0x6c7>
10001bf6:	50                   	push   eax
10001bf7:	51                   	push   ecx
10001bf8:	e9 ec fd ff ff       	jmp    100019e9 <PS2Keyboard::handler()+0x4b3>
10001bfd:	80 fa 53             	cmp    dl,0x53
10001c00:	75 07                	jne    10001c09 <PS2Keyboard::handler()+0x6d3>
10001c02:	50                   	push   eax
10001c03:	51                   	push   ecx
10001c04:	e9 ed fd ff ff       	jmp    100019f6 <PS2Keyboard::handler()+0x4c0>
10001c09:	80 fa 4a             	cmp    dl,0x4a
10001c0c:	75 07                	jne    10001c15 <PS2Keyboard::handler()+0x6df>
10001c0e:	50                   	push   eax
10001c0f:	51                   	push   ecx
10001c10:	e9 ee fd ff ff       	jmp    10001a03 <PS2Keyboard::handler()+0x4cd>
10001c15:	80 fa 4e             	cmp    dl,0x4e
10001c18:	75 07                	jne    10001c21 <PS2Keyboard::handler()+0x6eb>
10001c1a:	50                   	push   eax
10001c1b:	51                   	push   ecx
10001c1c:	e9 ef fd ff ff       	jmp    10001a10 <PS2Keyboard::handler()+0x4da>
10001c21:	80 fa 37             	cmp    dl,0x37
10001c24:	75 07                	jne    10001c2d <PS2Keyboard::handler()+0x6f7>
10001c26:	57                   	push   edi
10001c27:	51                   	push   ecx
10001c28:	e9 f0 fd ff ff       	jmp    10001a1d <PS2Keyboard::handler()+0x4e7>
10001c2d:	0f b6 be 67 01 00 00 	movzx  edi,BYTE PTR [esi+0x167]
10001c34:	0f b6 86 69 01 00 00 	movzx  eax,BYTE PTR [esi+0x169]
10001c3b:	c1 e7 07             	shl    edi,0x7
10001c3e:	c1 e0 08             	shl    eax,0x8
10001c41:	8d bc 07 00 00 00 00 	lea    edi,[edi+eax*1+0x0]	10001c44: R_386_32	PS2Keyboard::internalMapperLowerBad
10001c48:	88 d0                	mov    al,dl
10001c4a:	89 fb                	mov    ebx,edi
10001c4c:	d7                   	xlat   BYTE PTR ds:[ebx]
10001c4d:	88 c2                	mov    dl,al
10001c4f:	0f b6 d2             	movzx  edx,dl
10001c52:	53                   	push   ebx
10001c53:	51                   	push   ecx
10001c54:	52                   	push   edx
10001c55:	e9 0f fe ff ff       	jmp    10001a69 <PS2Keyboard::handler()+0x533>
10001c5a:	80 fa 36             	cmp    dl,0x36
10001c5d:	0f 84 26 f9 ff ff    	je     10001589 <PS2Keyboard::handler()+0x53>
10001c63:	80 fa 38             	cmp    dl,0x38
10001c66:	0f 84 7f f9 ff ff    	je     100015eb <PS2Keyboard::handler()+0xb5>
10001c6c:	e9 5b fa ff ff       	jmp    100016cc <PS2Keyboard::handler()+0x196>
10001c71:	5b                   	pop    ebx
10001c72:	5e                   	pop    esi
10001c73:	5f                   	pop    edi
10001c74:	c3                   	ret    
10001c75:	90                   	nop

10001c76 <PS2Keyboard::open(int, int, void*)>:
10001c76:	53                   	push   ebx
10001c77:	83 ec 14             	sub    esp,0x14
10001c7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001c7e:	8b 83 c8 00 00 00    	mov    eax,DWORD PTR [ebx+0xc8]
10001c84:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10001c8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001c8e:	89 83 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],eax
10001c94:	53                   	push   ebx
10001c95:	6a 01                	push   0x1
10001c97:	68 00 00 00 00       	push   0x0	10001c98: R_386_32	ps2KeyboardHandler(regs*, void*)
10001c9c:	6a 01                	push   0x1
10001c9e:	53                   	push   ebx
10001c9f:	e8 fc ff ff ff       	call   10001ca0 <PS2Keyboard::open(int, int, void*)+0x2a>	10001ca0: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10001ca4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
10001caa:	a1 00 00 00 00       	mov    eax,ds:0x0	10001cab: R_386_32	sysBootSettings
10001caf:	c1 e8 02             	shr    eax,0x2
10001cb2:	83 f0 01             	xor    eax,0x1
10001cb5:	83 e0 01             	and    eax,0x1
10001cb8:	88 83 6e 01 00 00    	mov    BYTE PTR [ebx+0x16e],al
10001cbe:	31 c0                	xor    eax,eax
10001cc0:	83 c4 28             	add    esp,0x28
10001cc3:	5b                   	pop    ebx
10001cc4:	c3                   	ret    
10001cc5:	90                   	nop

10001cc6 <PS2Keyboard::close(int, int, void*)>:
10001cc6:	83 c8 ff             	or     eax,0xffffffff
10001cc9:	c3                   	ret    

10001cca <PS2Mouse::PS2Mouse()>:
10001cca:	55                   	push   ebp
10001ccb:	89 e5                	mov    ebp,esp
10001ccd:	83 ec 08             	sub    esp,0x8
10001cd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cd3:	83 ec 08             	sub    esp,0x8
10001cd6:	68 00 00 00 00       	push   0x0	10001cd7: R_386_32	ps2mousename
10001cdb:	50                   	push   eax
10001cdc:	e8 fc ff ff ff       	call   10001cdd <PS2Mouse::PS2Mouse()+0x13>	10001cdd: R_386_PC32	Mouse::Mouse(char const*)
10001ce1:	83 c4 10             	add    esp,0x10
10001ce4:	ba 08 00 00 00       	mov    edx,0x8	10001ce5: R_386_32	vtable for PS2Mouse
10001ce9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cec:	89 10                	mov    DWORD PTR [eax],edx
10001cee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cf1:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001cf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001cfb:	c7 80 62 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x162],0x0
10001d05:	90                   	nop
10001d06:	c9                   	leave  
10001d07:	c3                   	ret    

10001d08 <ps2MouseHandler(regs*, void*)>:
10001d08:	55                   	push   ebp
10001d09:	89 e5                	mov    ebp,esp
10001d0b:	83 ec 08             	sub    esp,0x8
10001d0e:	83 ec 0c             	sub    esp,0xc
10001d11:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001d14:	e8 fc ff ff ff       	call   10001d15 <ps2MouseHandler(regs*, void*)+0xd>	10001d15: R_386_PC32	PS2Mouse::handler()
10001d19:	83 c4 10             	add    esp,0x10
10001d1c:	90                   	nop
10001d1d:	c9                   	leave  
10001d1e:	c3                   	ret    
10001d1f:	90                   	nop

10001d20 <PS2Mouse::handler()>:
10001d20:	55                   	push   ebp
10001d21:	89 e5                	mov    ebp,esp
10001d23:	83 ec 28             	sub    esp,0x28
10001d26:	66 c7 45 ea 64 00    	mov    WORD PTR [ebp-0x16],0x64
10001d2c:	66 8b 45 ea          	mov    ax,WORD PTR [ebp-0x16]
10001d30:	89 c2                	mov    edx,eax
10001d32:	ec                   	in     al,dx
10001d33:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
10001d36:	8a 45 e9             	mov    al,BYTE PTR [ebp-0x17]
10001d39:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10001d3c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10001d40:	83 e0 01             	and    eax,0x1
10001d43:	85 c0                	test   eax,eax
10001d45:	0f 84 8d 01 00 00    	je     10001ed8 <PS2Mouse::handler()+0x1b8>
10001d4b:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10001d4f:	83 e0 20             	and    eax,0x20
10001d52:	85 c0                	test   eax,eax
10001d54:	0f 84 81 01 00 00    	je     10001edb <PS2Mouse::handler()+0x1bb>
10001d5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d5d:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10001d63:	8d 50 01             	lea    edx,[eax+0x1]
10001d66:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10001d69:	88 91 61 01 00 00    	mov    BYTE PTR [ecx+0x161],dl
10001d6f:	0f b6 c8             	movzx  ecx,al
10001d72:	66 c7 45 e6 60 00    	mov    WORD PTR [ebp-0x1a],0x60
10001d78:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
10001d7c:	89 c2                	mov    edx,eax
10001d7e:	ec                   	in     al,dx
10001d7f:	88 45 e5             	mov    BYTE PTR [ebp-0x1b],al
10001d82:	8a 55 e5             	mov    dl,BYTE PTR [ebp-0x1b]
10001d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d88:	88 94 08 62 01 00 00 	mov    BYTE PTR [eax+ecx*1+0x162],dl
10001d8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001d92:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001d98:	0f b6 c0             	movzx  eax,al
10001d9b:	83 e0 08             	and    eax,0x8
10001d9e:	85 c0                	test   eax,eax
10001da0:	75 0f                	jne    10001db1 <PS2Mouse::handler()+0x91>
10001da2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001da5:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001dac:	e9 2b 01 00 00       	jmp    10001edc <PS2Mouse::handler()+0x1bc>
10001db1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001db4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10001dba:	84 c0                	test   al,al
10001dbc:	75 0d                	jne    10001dcb <PS2Mouse::handler()+0xab>
10001dbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dc1:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10001dc7:	3c 02                	cmp    al,0x2
10001dc9:	77 2f                	ja     10001dfa <PS2Mouse::handler()+0xda>
10001dcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dce:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10001dd4:	3c 03                	cmp    al,0x3
10001dd6:	74 11                	je     10001de9 <PS2Mouse::handler()+0xc9>
10001dd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ddb:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10001de1:	3c 04                	cmp    al,0x4
10001de3:	0f 85 f3 00 00 00    	jne    10001edc <PS2Mouse::handler()+0x1bc>
10001de9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dec:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10001df2:	3c 03                	cmp    al,0x3
10001df4:	0f 86 e2 00 00 00    	jbe    10001edc <PS2Mouse::handler()+0x1bc>
10001dfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001dfd:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001e04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e07:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001e0d:	84 c0                	test   al,al
10001e0f:	78 13                	js     10001e24 <PS2Mouse::handler()+0x104>
10001e11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e14:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001e1a:	0f b6 c0             	movzx  eax,al
10001e1d:	83 e0 40             	and    eax,0x40
10001e20:	85 c0                	test   eax,eax
10001e22:	74 37                	je     10001e5b <PS2Mouse::handler()+0x13b>
10001e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e27:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e31:	c6 80 62 01 00 00 00 	mov    BYTE PTR [eax+0x162],0x0
10001e38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e3b:	c6 80 63 01 00 00 00 	mov    BYTE PTR [eax+0x163],0x0
10001e42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e45:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10001e4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e4f:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10001e56:	e9 81 00 00 00       	jmp    10001edc <PS2Mouse::handler()+0x1bc>
10001e5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e5e:	8a 80 63 01 00 00    	mov    al,BYTE PTR [eax+0x163]
10001e64:	0f b6 d0             	movzx  edx,al
10001e67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e6a:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001e70:	0f b6 c0             	movzx  eax,al
10001e73:	c1 e0 04             	shl    eax,0x4
10001e76:	25 00 01 00 00       	and    eax,0x100
10001e7b:	29 c2                	sub    edx,eax
10001e7d:	89 d0                	mov    eax,edx
10001e7f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10001e82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e85:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10001e8b:	0f b6 c0             	movzx  eax,al
10001e8e:	c1 e0 03             	shl    eax,0x3
10001e91:	25 00 01 00 00       	and    eax,0x100
10001e96:	89 c2                	mov    edx,eax
10001e98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e9b:	8a 80 64 01 00 00    	mov    al,BYTE PTR [eax+0x164]
10001ea1:	0f b6 c0             	movzx  eax,al
10001ea4:	29 c2                	sub    edx,eax
10001ea6:	89 d0                	mov    eax,edx
10001ea8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10001eab:	a1 00 00 00 00       	mov    eax,ds:0x0	10001eac: R_386_32	guiMouseHandler
10001eb0:	85 c0                	test   eax,eax
10001eb2:	74 28                	je     10001edc <PS2Mouse::handler()+0x1bc>
10001eb4:	a1 00 00 00 00       	mov    eax,ds:0x0	10001eb5: R_386_32	guiMouseHandler
10001eb9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001ebc:	8a 92 62 01 00 00    	mov    dl,BYTE PTR [edx+0x162]
10001ec2:	0f b6 d2             	movzx  edx,dl
10001ec5:	83 e2 01             	and    edx,0x1
10001ec8:	6a 00                	push   0x0
10001eca:	52                   	push   edx
10001ecb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10001ece:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10001ed1:	ff d0                	call   eax
10001ed3:	83 c4 10             	add    esp,0x10
10001ed6:	eb 04                	jmp    10001edc <PS2Mouse::handler()+0x1bc>
10001ed8:	90                   	nop
10001ed9:	eb 01                	jmp    10001edc <PS2Mouse::handler()+0x1bc>
10001edb:	90                   	nop
10001edc:	c9                   	leave  
10001edd:	c3                   	ret    

10001ede <PS2Mouse::open(int, int, void*)>:
10001ede:	55                   	push   ebp
10001edf:	89 e5                	mov    ebp,esp
10001ee1:	83 ec 08             	sub    esp,0x8
10001ee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ee7:	8b 90 c8 00 00 00    	mov    edx,DWORD PTR [eax+0xc8]
10001eed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ef0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10001ef6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ef9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001efc:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10001f02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f05:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001f0b:	83 ec 08             	sub    esp,0x8
10001f0e:	68 f6 00 00 00       	push   0xf6
10001f13:	50                   	push   eax
10001f14:	e8 fc ff ff ff       	call   10001f15 <PS2Mouse::open(int, int, void*)+0x37>	10001f15: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10001f19:	83 c4 10             	add    esp,0x10
10001f1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f1f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001f25:	83 ec 0c             	sub    esp,0xc
10001f28:	50                   	push   eax
10001f29:	e8 fc ff ff ff       	call   10001f2a <PS2Mouse::open(int, int, void*)+0x4c>	10001f2a: R_386_PC32	PS2Port::deviceRead()
10001f2e:	83 c4 10             	add    esp,0x10
10001f31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f34:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001f3a:	83 ec 08             	sub    esp,0x8
10001f3d:	68 f4 00 00 00       	push   0xf4
10001f42:	50                   	push   eax
10001f43:	e8 fc ff ff ff       	call   10001f44 <PS2Mouse::open(int, int, void*)+0x66>	10001f44: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10001f48:	83 c4 10             	add    esp,0x10
10001f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f4e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10001f54:	83 ec 0c             	sub    esp,0xc
10001f57:	50                   	push   eax
10001f58:	e8 fc ff ff ff       	call   10001f59 <PS2Mouse::open(int, int, void*)+0x7b>	10001f59: R_386_PC32	PS2Port::deviceRead()
10001f5d:	83 c4 10             	add    esp,0x10
10001f60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f63:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10001f6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f6d:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
10001f74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f77:	83 ec 0c             	sub    esp,0xc
10001f7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001f7d:	6a 01                	push   0x1
10001f7f:	68 00 00 00 00       	push   0x0	10001f80: R_386_32	ps2MouseHandler(regs*, void*)
10001f84:	6a 0c                	push   0xc
10001f86:	50                   	push   eax
10001f87:	e8 fc ff ff ff       	call   10001f88 <PS2Mouse::open(int, int, void*)+0xaa>	10001f88: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
10001f8c:	83 c4 20             	add    esp,0x20
10001f8f:	b8 00 00 00 00       	mov    eax,0x0
10001f94:	c9                   	leave  
10001f95:	c3                   	ret    

10001f96 <PS2Mouse::close(int, int, void*)>:
10001f96:	b8 00 00 00 00       	mov    eax,0x0
10001f9b:	c3                   	ret    

10001f9c <PS2Mouse::detect()>:
10001f9c:	90                   	nop
10001f9d:	c3                   	ret    

10001f9e <PS2Port::PS2Port()>:
10001f9e:	55                   	push   ebp
10001f9f:	89 e5                	mov    ebp,esp
10001fa1:	83 ec 08             	sub    esp,0x8
10001fa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fa7:	83 ec 08             	sub    esp,0x8
10001faa:	68 00 00 00 00       	push   0x0	10001fab: R_386_32	ps2portname
10001faf:	50                   	push   eax
10001fb0:	e8 fc ff ff ff       	call   10001fb1 <PS2Port::PS2Port()+0x13>	10001fb1: R_386_PC32	Bus::Bus(char const*)
10001fb5:	83 c4 10             	add    esp,0x10
10001fb8:	ba 08 00 00 00       	mov    edx,0x8	10001fb9: R_386_32	vtable for PS2Port
10001fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fc0:	89 10                	mov    DWORD PTR [eax],edx
10001fc2:	90                   	nop
10001fc3:	c9                   	leave  
10001fc4:	c3                   	ret    
10001fc5:	90                   	nop

10001fc6 <PS2Port::open(int, int, void*)>:
10001fc6:	55                   	push   ebp
10001fc7:	89 e5                	mov    ebp,esp
10001fc9:	83 ec 08             	sub    esp,0x8
10001fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fcf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001fd2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10001fd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fdb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001fde:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
10001fe4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fe7:	8b 00                	mov    eax,DWORD PTR [eax]
10001fe9:	83 c0 18             	add    eax,0x18
10001fec:	8b 00                	mov    eax,DWORD PTR [eax]
10001fee:	83 ec 0c             	sub    esp,0xc
10001ff1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001ff4:	ff d0                	call   eax
10001ff6:	83 c4 10             	add    esp,0x10
10001ff9:	b8 00 00 00 00       	mov    eax,0x0
10001ffe:	c9                   	leave  
10001fff:	c3                   	ret    

10002000 <PS2Port::close(int, int, void*)>:
10002000:	b8 00 00 00 00       	mov    eax,0x0
10002005:	c3                   	ret    

10002006 <PS2Port::detect()>:
10002006:	55                   	push   ebp
10002007:	89 e5                	mov    ebp,esp
10002009:	53                   	push   ebx
1000200a:	83 ec 14             	sub    esp,0x14
1000200d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002010:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10002016:	85 c0                	test   eax,eax
10002018:	75 55                	jne    1000206f <PS2Port::detect()+0x69>
1000201a:	83 ec 0c             	sub    esp,0xc
1000201d:	68 70 01 00 00       	push   0x170
10002022:	e8 fc ff ff ff       	call   10002023 <PS2Port::detect()+0x1d>	10002023: R_386_PC32	operator new(unsigned long)
10002027:	83 c4 10             	add    esp,0x10
1000202a:	89 c3                	mov    ebx,eax
1000202c:	83 ec 0c             	sub    esp,0xc
1000202f:	53                   	push   ebx
10002030:	e8 fc ff ff ff       	call   10002031 <PS2Port::detect()+0x2b>	10002031: R_386_PC32	PS2Keyboard::PS2Keyboard()
10002035:	83 c4 10             	add    esp,0x10
10002038:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
1000203b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000203e:	83 ec 08             	sub    esp,0x8
10002041:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10002044:	50                   	push   eax
10002045:	e8 fc ff ff ff       	call   10002046 <PS2Port::detect()+0x40>	10002046: R_386_PC32	Device::addChild(Device*)
1000204a:	83 c4 10             	add    esp,0x10
1000204d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002050:	8b 00                	mov    eax,DWORD PTR [eax]
10002052:	83 c0 08             	add    eax,0x8
10002055:	8b 00                	mov    eax,DWORD PTR [eax]
10002057:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000205a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10002060:	52                   	push   edx
10002061:	6a 00                	push   0x0
10002063:	6a 00                	push   0x0
10002065:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
10002068:	ff d0                	call   eax
1000206a:	83 c4 10             	add    esp,0x10
1000206d:	eb 61                	jmp    100020d0 <PS2Port::detect()+0xca>
1000206f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002072:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10002078:	83 f8 01             	cmp    eax,0x1
1000207b:	75 53                	jne    100020d0 <PS2Port::detect()+0xca>
1000207d:	83 ec 0c             	sub    esp,0xc
10002080:	68 68 01 00 00       	push   0x168
10002085:	e8 fc ff ff ff       	call   10002086 <PS2Port::detect()+0x80>	10002086: R_386_PC32	operator new(unsigned long)
1000208a:	83 c4 10             	add    esp,0x10
1000208d:	89 c3                	mov    ebx,eax
1000208f:	83 ec 0c             	sub    esp,0xc
10002092:	53                   	push   ebx
10002093:	e8 fc ff ff ff       	call   10002094 <PS2Port::detect()+0x8e>	10002094: R_386_PC32	PS2Mouse::PS2Mouse()
10002098:	83 c4 10             	add    esp,0x10
1000209b:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
1000209e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020a1:	83 ec 08             	sub    esp,0x8
100020a4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100020a7:	50                   	push   eax
100020a8:	e8 fc ff ff ff       	call   100020a9 <PS2Port::detect()+0xa3>	100020a9: R_386_PC32	Device::addChild(Device*)
100020ad:	83 c4 10             	add    esp,0x10
100020b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100020b3:	8b 00                	mov    eax,DWORD PTR [eax]
100020b5:	83 c0 08             	add    eax,0x8
100020b8:	8b 00                	mov    eax,DWORD PTR [eax]
100020ba:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100020bd:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
100020c3:	52                   	push   edx
100020c4:	6a 00                	push   0x0
100020c6:	6a 01                	push   0x1
100020c8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100020cb:	ff d0                	call   eax
100020cd:	83 c4 10             	add    esp,0x10
100020d0:	90                   	nop
100020d1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100020d4:	c9                   	leave  
100020d5:	c3                   	ret    

100020d6 <PS2Port::deviceWrite(unsigned char)>:
100020d6:	55                   	push   ebp
100020d7:	89 e5                	mov    ebp,esp
100020d9:	83 ec 28             	sub    esp,0x28
100020dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100020df:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
100020e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020e5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100020eb:	83 f8 01             	cmp    eax,0x1
100020ee:	75 1a                	jne    1000210a <PS2Port::deviceWrite(unsigned char)+0x34>
100020f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020f3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100020f9:	83 ec 08             	sub    esp,0x8
100020fc:	68 d4 00 00 00       	push   0xd4
10002101:	50                   	push   eax
10002102:	e8 fc ff ff ff       	call   10002103 <PS2Port::deviceWrite(unsigned char)+0x2d>	10002103: R_386_PC32	PS2::controllerWrite(unsigned char)
10002107:	83 c4 10             	add    esp,0x10
1000210a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10002111:	66 c7 45 f0 64 00    	mov    WORD PTR [ebp-0x10],0x64
10002117:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000211a:	89 c2                	mov    edx,eax
1000211c:	ec                   	in     al,dx
1000211d:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10002120:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10002123:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10002126:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
1000212a:	83 e0 02             	and    eax,0x2
1000212d:	85 c0                	test   eax,eax
1000212f:	74 29                	je     1000215a <PS2Port::deviceWrite(unsigned char)+0x84>
10002131:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10002135:	83 e0 40             	and    eax,0x40
10002138:	85 c0                	test   eax,eax
1000213a:	75 22                	jne    1000215e <PS2Port::deviceWrite(unsigned char)+0x88>
1000213c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000213f:	84 c0                	test   al,al
10002141:	78 1b                	js     1000215e <PS2Port::deviceWrite(unsigned char)+0x88>
10002143:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10002146:	8d 50 01             	lea    edx,[eax+0x1]
10002149:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000214c:	3d 40 06 00 00       	cmp    eax,0x640
10002151:	0f 94 c0             	sete   al
10002154:	84 c0                	test   al,al
10002156:	75 05                	jne    1000215d <PS2Port::deviceWrite(unsigned char)+0x87>
10002158:	eb b7                	jmp    10002111 <PS2Port::deviceWrite(unsigned char)+0x3b>
1000215a:	90                   	nop
1000215b:	eb 01                	jmp    1000215e <PS2Port::deviceWrite(unsigned char)+0x88>
1000215d:	90                   	nop
1000215e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
10002162:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10002168:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
1000216b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
1000216e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10002171:	ee                   	out    dx,al
10002172:	b0 01                	mov    al,0x1
10002174:	c9                   	leave  
10002175:	c3                   	ret    

10002176 <PS2Port::deviceRead()>:
10002176:	55                   	push   ebp
10002177:	89 e5                	mov    ebp,esp
10002179:	83 ec 08             	sub    esp,0x8
1000217c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000217f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10002185:	83 ec 0c             	sub    esp,0xc
10002188:	50                   	push   eax
10002189:	e8 fc ff ff ff       	call   1000218a <PS2Port::deviceRead()+0x14>	1000218a: R_386_PC32	PS2::controllerRead()
1000218e:	83 c4 10             	add    esp,0x10
10002191:	c9                   	leave  
10002192:	c3                   	ret    
10002193:	90                   	nop

10002194 <sb16Demo(void*)>:
10002194:	55                   	push   ebp
10002195:	57                   	push   edi
10002196:	56                   	push   esi
10002197:	53                   	push   ebx
10002198:	83 ec 1c             	sub    esp,0x1c
1000219b:	e8 fc ff ff ff       	call   1000219c <sb16Demo(void*)+0x8>	1000219c: R_386_PC32	unlockScheduler()
100021a0:	83 ec 0c             	sub    esp,0xc
100021a3:	6a 2c                	push   0x2c
100021a5:	e8 fc ff ff ff       	call   100021a6 <sb16Demo(void*)+0x12>	100021a6: R_386_PC32	malloc
100021aa:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
100021b1:	89 c3                	mov    ebx,eax
100021b3:	6a 5a                	push   0x5a
100021b5:	6a 08                	push   0x8
100021b7:	68 40 1f 00 00       	push   0x1f40
100021bc:	50                   	push   eax
100021bd:	e8 fc ff ff ff       	call   100021be <sb16Demo(void*)+0x2a>	100021be: R_386_PC32	SoundChannel::SoundChannel(int, int, int, int)
100021c2:	83 c4 14             	add    esp,0x14
100021c5:	68 14 01 00 00       	push   0x114
100021ca:	e8 fc ff ff ff       	call   100021cb <sb16Demo(void*)+0x37>	100021cb: R_386_PC32	malloc
100021cf:	83 c4 0c             	add    esp,0xc
100021d2:	89 c6                	mov    esi,eax
100021d4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100021d6: R_386_32	kernelProcess
100021da:	68 00 00 00 00       	push   0x0	100021db: R_386_32	egFile
100021df:	50                   	push   eax
100021e0:	e8 fc ff ff ff       	call   100021e1 <sb16Demo(void*)+0x4d>	100021e1: R_386_PC32	File::File(char const*, Process*)
100021e5:	5f                   	pop    edi
100021e6:	5d                   	pop    ebp
100021e7:	31 ed                	xor    ebp,ebp
100021e9:	6a 01                	push   0x1
100021eb:	56                   	push   esi
100021ec:	e8 fc ff ff ff       	call   100021ed <sb16Demo(void*)+0x59>	100021ed: R_386_PC32	File::open(FileOpenMode)
100021f1:	83 c4 10             	add    esp,0x10
100021f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
100021fc:	8b 06                	mov    eax,DWORD PTR [esi]
100021fe:	83 ec 0c             	sub    esp,0xc
10002201:	8d 54 24 18          	lea    edx,[esp+0x18]
10002205:	52                   	push   edx
10002206:	68 00 00 00 00       	push   0x0	10002207: R_386_32	buf
1000220b:	6a 00                	push   0x0
1000220d:	68 00 10 00 00       	push   0x1000
10002212:	56                   	push   esi
10002213:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10002216:	83 c4 20             	add    esp,0x20
10002219:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
1000221e:	74 04                	je     10002224 <sb16Demo(void*)+0x90>
10002220:	85 c0                	test   eax,eax
10002222:	74 15                	je     10002239 <sb16Demo(void*)+0xa5>
10002224:	83 ec 0c             	sub    esp,0xc
10002227:	68 d0 37 00 10       	push   0x100037d0	10002228: R_386_32	.text
1000222c:	e8 fc ff ff ff       	call   1000222d <sb16Demo(void*)+0x99>	1000222d: R_386_PC32	Dbg::kprintf(char const*, ...)
10002231:	83 c4 2c             	add    esp,0x2c
10002234:	5b                   	pop    ebx
10002235:	5e                   	pop    esi
10002236:	5f                   	pop    edi
10002237:	5d                   	pop    ebp
10002238:	c3                   	ret    
10002239:	e8 fc ff ff ff       	call   1000223a <sb16Demo(void*)+0xa6>	1000223a: R_386_PC32	lockScheduler()
1000223e:	e8 fc ff ff ff       	call   1000223f <sb16Demo(void*)+0xab>	1000223f: R_386_PC32	schedule()
10002243:	e8 fc ff ff ff       	call   10002244 <sb16Demo(void*)+0xb0>	10002244: R_386_PC32	unlockScheduler()
10002248:	83 ec 0c             	sub    esp,0xc
1000224b:	53                   	push   ebx
1000224c:	e8 fc ff ff ff       	call   1000224d <sb16Demo(void*)+0xb9>	1000224d: R_386_PC32	SoundChannel::getBufferUsed()
10002251:	89 1c 24             	mov    DWORD PTR [esp],ebx
10002254:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
10002258:	89 c7                	mov    edi,eax
1000225a:	e8 fc ff ff ff       	call   1000225b <sb16Demo(void*)+0xc7>	1000225b: R_386_PC32	SoundChannel::getBufferSize()
1000225f:	83 c4 10             	add    esp,0x10
10002262:	39 c7                	cmp    edi,eax
10002264:	7c 10                	jl     10002276 <sb16Demo(void*)+0xe2>
10002266:	51                   	push   ecx
10002267:	51                   	push   ecx
10002268:	6a 00                	push   0x0
1000226a:	6a 01                	push   0x1
1000226c:	e8 fc ff ff ff       	call   1000226d <sb16Demo(void*)+0xd9>	1000226d: R_386_PC32	sleep(unsigned long long)
10002271:	83 c4 10             	add    esp,0x10
10002274:	eb d2                	jmp    10002248 <sb16Demo(void*)+0xb4>
10002276:	52                   	push   edx
10002277:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
1000227b:	68 00 00 00 00       	push   0x0	1000227c: R_386_32	buf
10002280:	53                   	push   ebx
10002281:	e8 fc ff ff ff       	call   10002282 <sb16Demo(void*)+0xee>	10002282: R_386_PC32	SoundChannel::buffer8(unsigned char*, int)
10002286:	83 c4 10             	add    esp,0x10
10002289:	89 e8                	mov    eax,ebp
1000228b:	84 c0                	test   al,al
1000228d:	75 17                	jne    100022a6 <sb16Demo(void*)+0x112>
1000228f:	50                   	push   eax
10002290:	50                   	push   eax
10002291:	53                   	push   ebx
10002292:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10002296:	e8 fc ff ff ff       	call   10002297 <sb16Demo(void*)+0x103>	10002297: R_386_PC32	SoundDevice::addChannel(SoundChannel*)
1000229b:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000229e:	e8 fc ff ff ff       	call   1000229f <sb16Demo(void*)+0x10b>	1000229f: R_386_PC32	SoundChannel::play()
100022a3:	83 c4 10             	add    esp,0x10
100022a6:	bd 01 00 00 00       	mov    ebp,0x1
100022ab:	e9 44 ff ff ff       	jmp    100021f4 <sb16Demo(void*)+0x60>

100022b0 <SoundBlaster16::resetDSP()>:
100022b0:	53                   	push   ebx
100022b1:	b0 01                	mov    al,0x1
100022b3:	83 ec 10             	sub    esp,0x10
100022b6:	bb 26 02 00 00       	mov    ebx,0x226
100022bb:	89 da                	mov    edx,ebx
100022bd:	ee                   	out    dx,al
100022be:	6a 00                	push   0x0
100022c0:	68 c0 c6 2d 00       	push   0x2dc6c0
100022c5:	e8 fc ff ff ff       	call   100022c6 <SoundBlaster16::resetDSP()+0x16>	100022c6: R_386_PC32	nanoSleep(unsigned long long)
100022ca:	31 c0                	xor    eax,eax
100022cc:	89 da                	mov    edx,ebx
100022ce:	ee                   	out    dx,al
100022cf:	ba 2a 02 00 00       	mov    edx,0x22a
100022d4:	ec                   	in     al,dx
100022d5:	83 c4 10             	add    esp,0x10
100022d8:	3c aa                	cmp    al,0xaa
100022da:	75 25                	jne    10002301 <SoundBlaster16::resetDSP()+0x51>
100022dc:	b0 e1                	mov    al,0xe1
100022de:	ba 2c 02 00 00       	mov    edx,0x22c
100022e3:	ee                   	out    dx,al
100022e4:	ba 2e 02 00 00       	mov    edx,0x22e
100022e9:	ec                   	in     al,dx
100022ea:	84 c0                	test   al,al
100022ec:	79 fb                	jns    100022e9 <SoundBlaster16::resetDSP()+0x39>
100022ee:	ba 2a 02 00 00       	mov    edx,0x22a
100022f3:	ec                   	in     al,dx
100022f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100022f8:	88 81 f8 01 00 00    	mov    BYTE PTR [ecx+0x1f8],al
100022fe:	ec                   	in     al,dx
100022ff:	eb 13                	jmp    10002314 <SoundBlaster16::resetDSP()+0x64>
10002301:	0f b6 c0             	movzx  eax,al
10002304:	51                   	push   ecx
10002305:	51                   	push   ecx
10002306:	50                   	push   eax
10002307:	68 00 00 00 00       	push   0x0	10002308: R_386_32	badVer
1000230c:	e8 fc ff ff ff       	call   1000230d <SoundBlaster16::resetDSP()+0x5d>	1000230d: R_386_PC32	Dbg::kprintf(char const*, ...)
10002311:	83 c4 10             	add    esp,0x10
10002314:	83 c4 08             	add    esp,0x8
10002317:	5b                   	pop    ebx
10002318:	c3                   	ret    
10002319:	90                   	nop

1000231a <SoundBlaster16::DSPOut(unsigned short, unsigned char)>:
1000231a:	53                   	push   ebx
1000231b:	ba 2c 02 00 00       	mov    edx,0x22c
10002320:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10002324:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10002328:	ec                   	in     al,dx
10002329:	84 c0                	test   al,al
1000232b:	78 fb                	js     10002328 <SoundBlaster16::DSPOut(unsigned short, unsigned char)+0xe>
1000232d:	88 c8                	mov    al,cl
1000232f:	89 da                	mov    edx,ebx
10002331:	ee                   	out    dx,al
10002332:	5b                   	pop    ebx
10002333:	c3                   	ret    

10002334 <SoundBlaster16::turnSpeakerOn(bool)>:
10002334:	53                   	push   ebx
10002335:	52                   	push   edx
10002336:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000233a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
1000233e:	80 fa 01             	cmp    dl,0x1
10002341:	89 14 24             	mov    DWORD PTR [esp],edx
10002344:	19 c0                	sbb    eax,eax
10002346:	83 e0 02             	and    eax,0x2
10002349:	05 d1 00 00 00       	add    eax,0xd1
1000234e:	50                   	push   eax
1000234f:	68 2c 02 00 00       	push   0x22c
10002354:	53                   	push   ebx
10002355:	e8 fc ff ff ff       	call   10002356 <SoundBlaster16::turnSpeakerOn(bool)+0x22>	10002356: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000235a:	83 c4 0c             	add    esp,0xc
1000235d:	8b 14 24             	mov    edx,DWORD PTR [esp]
10002360:	84 d2                	test   dl,dl
10002362:	75 23                	jne    10002387 <SoundBlaster16::turnSpeakerOn(bool)+0x53>
10002364:	68 d0 00 00 00       	push   0xd0
10002369:	68 2c 02 00 00       	push   0x22c
1000236e:	53                   	push   ebx
1000236f:	e8 fc ff ff ff       	call   10002370 <SoundBlaster16::turnSpeakerOn(bool)+0x3c>	10002370: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002374:	68 d3 00 00 00       	push   0xd3
10002379:	68 2c 02 00 00       	push   0x22c
1000237e:	53                   	push   ebx
1000237f:	e8 fc ff ff ff       	call   10002380 <SoundBlaster16::turnSpeakerOn(bool)+0x4c>	10002380: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002384:	83 c4 18             	add    esp,0x18
10002387:	58                   	pop    eax
10002388:	5b                   	pop    ebx
10002389:	c3                   	ret    

1000238a <SoundBlaster16::SoundBlaster16()>:
1000238a:	55                   	push   ebp
1000238b:	89 e5                	mov    ebp,esp
1000238d:	83 ec 08             	sub    esp,0x8
10002390:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002393:	83 ec 08             	sub    esp,0x8
10002396:	68 00 00 00 00       	push   0x0	10002397: R_386_32	sb16name
1000239b:	50                   	push   eax
1000239c:	e8 fc ff ff ff       	call   1000239d <SoundBlaster16::SoundBlaster16()+0x13>	1000239d: R_386_PC32	SoundDevice::SoundDevice(char const*)
100023a1:	83 c4 10             	add    esp,0x10
100023a4:	ba 08 00 00 00       	mov    edx,0x8	100023a5: R_386_32	vtable for SoundBlaster16
100023a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023ac:	89 10                	mov    DWORD PTR [eax],edx
100023ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023b1:	c7 80 e8 01 00 00 40 1f 00 00 	mov    DWORD PTR [eax+0x1e8],0x1f40
100023bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023be:	c7 80 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x1ec],0x8
100023c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023cb:	c6 80 f0 01 00 00 01 	mov    BYTE PTR [eax+0x1f0],0x1
100023d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023d5:	c6 80 f1 01 00 00 00 	mov    BYTE PTR [eax+0x1f1],0x0
100023dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023df:	c6 80 f2 01 00 00 00 	mov    BYTE PTR [eax+0x1f2],0x0
100023e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023e9:	c6 80 f8 01 00 00 00 	mov    BYTE PTR [eax+0x1f8],0x0
100023f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023f3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100023f9:	0f b6 d0             	movzx  edx,al
100023fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023ff:	66 c7 44 90 04 20 02 	mov    WORD PTR [eax+edx*4+0x4],0x220
10002406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002409:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000240f:	0f b6 d0             	movzx  edx,al
10002412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002415:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
1000241a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000241d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002423:	8d 50 01             	lea    edx,[eax+0x1]
10002426:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10002429:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
1000242f:	0f b6 d0             	movzx  edx,al
10002432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002435:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10002439:	83 e1 3f             	and    ecx,0x3f
1000243c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10002440:	a1 00 00 00 00       	mov    eax,ds:0x0	10002441: R_386_32	tempBuffer
10002445:	85 c0                	test   eax,eax
10002447:	75 2a                	jne    10002473 <SoundBlaster16::SoundBlaster16()+0xe9>
10002449:	83 ec 0c             	sub    esp,0xc
1000244c:	68 00 80 00 00       	push   0x8000
10002451:	e8 fc ff ff ff       	call   10002452 <SoundBlaster16::SoundBlaster16()+0xc8>	10002452: R_386_PC32	malloc
10002456:	83 c4 10             	add    esp,0x10
10002459:	a3 00 00 00 00       	mov    ds:0x0,eax	1000245a: R_386_32	tempBuffer
1000245e:	83 ec 0c             	sub    esp,0xc
10002461:	68 00 80 00 00       	push   0x8000
10002466:	e8 fc ff ff ff       	call   10002467 <SoundBlaster16::SoundBlaster16()+0xdd>	10002467: R_386_PC32	malloc
1000246b:	83 c4 10             	add    esp,0x10
1000246e:	a3 00 00 00 00       	mov    ds:0x0,eax	1000246f: R_386_32	outputBuffer
10002473:	90                   	nop
10002474:	c9                   	leave  
10002475:	c3                   	ret    

10002476 <SoundBlaster16::handleIRQ()>:
10002476:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
1000247a:	ba 2e 02 00 00       	mov    edx,0x22e
1000247f:	83 b9 e0 01 00 00 08 	cmp    DWORD PTR [ecx+0x1e0],0x8
10002486:	74 17                	je     1000249f <SoundBlaster16::handleIRQ()+0x29>
10002488:	b0 82                	mov    al,0x82
1000248a:	ba 24 02 00 00       	mov    edx,0x224
1000248f:	ee                   	out    dx,al
10002490:	ba 25 02 00 00       	mov    edx,0x225
10002495:	ec                   	in     al,dx
10002496:	a8 02                	test   al,0x2
10002498:	74 06                	je     100024a0 <SoundBlaster16::handleIRQ()+0x2a>
1000249a:	ba 2f 02 00 00       	mov    edx,0x22f
1000249f:	ec                   	in     al,dx
100024a0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
100024a4:	e9 c7 03 00 00       	jmp    10002870 <SoundBlaster16::onInterrupt()>

100024a9 <sb16Handler(regs*, void*)>:
100024a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100024ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100024b1:	eb c3                	jmp    10002476 <SoundBlaster16::handleIRQ()>
100024b3:	90                   	nop

100024b4 <SoundBlaster16::getNumHwChannels()>:
100024b4:	b8 01 00 00 00       	mov    eax,0x1
100024b9:	c3                   	ret    

100024ba <SoundBlaster16::beginPlayback(int, int)>:
100024ba:	53                   	push   ebx
100024bb:	50                   	push   eax
100024bc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
100024c0:	6a 01                	push   0x1
100024c2:	53                   	push   ebx
100024c3:	e8 fc ff ff ff       	call   100024c4 <SoundBlaster16::beginPlayback(int, int)+0xa>	100024c4: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
100024c8:	80 bb f0 01 00 00 01 	cmp    BYTE PTR [ebx+0x1f0],0x1
100024cf:	5a                   	pop    edx
100024d0:	19 c0                	sbb    eax,eax
100024d2:	59                   	pop    ecx
100024d3:	83 c0 02             	add    eax,0x2
100024d6:	0f af 83 e8 01 00 00 	imul   eax,DWORD PTR [ebx+0x1e8]
100024dd:	89 c1                	mov    ecx,eax
100024df:	b8 c0 bd f0 ff       	mov    eax,0xfff0bdc0
100024e4:	99                   	cdq    
100024e5:	f7 f9                	idiv   ecx
100024e7:	89 04 24             	mov    DWORD PTR [esp],eax
100024ea:	6a 40                	push   0x40
100024ec:	68 2c 02 00 00       	push   0x22c
100024f1:	53                   	push   ebx
100024f2:	e8 fc ff ff ff       	call   100024f3 <SoundBlaster16::beginPlayback(int, int)+0x39>	100024f3: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100024f7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
100024fc:	50                   	push   eax
100024fd:	68 2c 02 00 00       	push   0x22c
10002502:	53                   	push   ebx
10002503:	e8 fc ff ff ff       	call   10002504 <SoundBlaster16::beginPlayback(int, int)+0x4a>	10002504: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002508:	68 c0 00 00 00       	push   0xc0
1000250d:	68 2c 02 00 00       	push   0x22c
10002512:	53                   	push   ebx
10002513:	e8 fc ff ff ff       	call   10002514 <SoundBlaster16::beginPlayback(int, int)+0x5a>	10002514: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002518:	83 c4 24             	add    esp,0x24
1000251b:	0f b6 83 f0 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1f0]
10002522:	0f b6 93 f1 01 00 00 	movzx  edx,BYTE PTR [ebx+0x1f1]
10002529:	c1 e0 05             	shl    eax,0x5
1000252c:	c1 e2 04             	shl    edx,0x4
1000252f:	09 d0                	or     eax,edx
10002531:	0f be c0             	movsx  eax,al
10002534:	50                   	push   eax
10002535:	68 2c 02 00 00       	push   0x22c
1000253a:	53                   	push   ebx
1000253b:	e8 fc ff ff ff       	call   1000253c <SoundBlaster16::beginPlayback(int, int)+0x82>	1000253c: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002540:	68 ff 00 00 00       	push   0xff
10002545:	68 2c 02 00 00       	push   0x22c
1000254a:	53                   	push   ebx
1000254b:	e8 fc ff ff ff       	call   1000254c <SoundBlaster16::beginPlayback(int, int)+0x92>	1000254c: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002550:	6a 1f                	push   0x1f
10002552:	68 2c 02 00 00       	push   0x22c
10002557:	53                   	push   ebx
10002558:	e8 fc ff ff ff       	call   10002559 <SoundBlaster16::beginPlayback(int, int)+0x9f>	10002559: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000255d:	83 c4 24             	add    esp,0x24
10002560:	6a 48                	push   0x48
10002562:	68 2c 02 00 00       	push   0x22c
10002567:	53                   	push   ebx
10002568:	e8 fc ff ff ff       	call   10002569 <SoundBlaster16::beginPlayback(int, int)+0xaf>	10002569: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000256d:	68 ff 00 00 00       	push   0xff
10002572:	68 2c 02 00 00       	push   0x22c
10002577:	53                   	push   ebx
10002578:	e8 fc ff ff ff       	call   10002579 <SoundBlaster16::beginPlayback(int, int)+0xbf>	10002579: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000257d:	6a 1f                	push   0x1f
1000257f:	68 2c 02 00 00       	push   0x22c
10002584:	53                   	push   ebx
10002585:	e8 fc ff ff ff       	call   10002586 <SoundBlaster16::beginPlayback(int, int)+0xcc>	10002586: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
1000258a:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
1000258e:	c7 44 24 38 1c 00 00 00 	mov    DWORD PTR [esp+0x38],0x1c
10002596:	c7 44 24 34 2c 02 00 00 	mov    DWORD PTR [esp+0x34],0x22c
1000259e:	83 c4 28             	add    esp,0x28
100025a1:	5b                   	pop    ebx
100025a2:	e9 73 fd ff ff       	jmp    1000231a <SoundBlaster16::DSPOut(unsigned short, unsigned char)>
100025a7:	90                   	nop

100025a8 <SoundBlaster16::stopPlayback()>:
100025a8:	6a 00                	push   0x0
100025aa:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
100025ae:	e8 fc ff ff ff       	call   100025af <SoundBlaster16::stopPlayback()+0x7>	100025af: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
100025b3:	58                   	pop    eax
100025b4:	5a                   	pop    edx
100025b5:	c3                   	ret    

100025b6 <SoundBlaster16::open(int, int, void*)>:
100025b6:	56                   	push   esi
100025b7:	be 25 02 00 00       	mov    esi,0x225
100025bc:	53                   	push   ebx
100025bd:	83 ec 14             	sub    esp,0x14
100025c0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
100025c4:	c7 83 e8 01 00 00 40 1f 00 00 	mov    DWORD PTR [ebx+0x1e8],0x1f40
100025ce:	c7 83 ec 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x1ec],0x8
100025d8:	66 c7 83 f0 01 00 00 00 01 	mov    WORD PTR [ebx+0x1f0],0x100
100025e1:	68 80 00 00 00       	push   0x80
100025e6:	68 24 02 00 00       	push   0x224
100025eb:	53                   	push   ebx
100025ec:	e8 fc ff ff ff       	call   100025ed <SoundBlaster16::open(int, int, void*)+0x37>	100025ed: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100025f1:	89 f2                	mov    edx,esi
100025f3:	ec                   	in     al,dx
100025f4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
100025f8:	68 80 00 00 00       	push   0x80
100025fd:	68 24 02 00 00       	push   0x224
10002602:	53                   	push   ebx
10002603:	e8 fc ff ff ff       	call   10002604 <SoundBlaster16::open(int, int, void*)+0x4e>	10002604: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002608:	83 c4 18             	add    esp,0x18
1000260b:	31 c0                	xor    eax,eax
1000260d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
10002612:	0f 95 c0             	setne  al
10002615:	40                   	inc    eax
10002616:	50                   	push   eax
10002617:	68 25 02 00 00       	push   0x225
1000261c:	53                   	push   ebx
1000261d:	e8 fc ff ff ff       	call   1000261e <SoundBlaster16::open(int, int, void*)+0x68>	1000261e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002622:	68 80 00 00 00       	push   0x80
10002627:	68 24 02 00 00       	push   0x224
1000262c:	53                   	push   ebx
1000262d:	e8 fc ff ff ff       	call   1000262e <SoundBlaster16::open(int, int, void*)+0x78>	1000262e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002632:	89 f2                	mov    edx,esi
10002634:	ec                   	in     al,dx
10002635:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
10002639:	83 c4 18             	add    esp,0x18
1000263c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
10002640:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
10002644:	75 51                	jne    10002697 <SoundBlaster16::open(int, int, void*)+0xe1>
10002646:	68 81 00 00 00       	push   0x81
1000264b:	68 24 02 00 00       	push   0x224
10002650:	53                   	push   ebx
10002651:	e8 fc ff ff ff       	call   10002652 <SoundBlaster16::open(int, int, void*)+0x9c>	10002652: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002656:	89 f2                	mov    edx,esi
10002658:	ec                   	in     al,dx
10002659:	83 e0 0a             	and    eax,0xa
1000265c:	3c 01                	cmp    al,0x1
1000265e:	19 c0                	sbb    eax,eax
10002660:	83 e0 62             	and    eax,0x62
10002663:	40                   	inc    eax
10002664:	89 04 24             	mov    DWORD PTR [esp],eax
10002667:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10002669: R_386_32	isaDMAController
1000266d:	e8 fc ff ff ff       	call   1000266e <SoundBlaster16::open(int, int, void*)+0xb8>	1000266e: R_386_PC32	DMA::tryLockChannel(int)
10002672:	83 c4 10             	add    esp,0x10
10002675:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
1000267b:	85 c0                	test   eax,eax
1000267d:	75 3a                	jne    100026b9 <SoundBlaster16::open(int, int, void*)+0x103>
1000267f:	83 ec 0c             	sub    esp,0xc
10002682:	68 00 00 00 00       	push   0x0	10002683: R_386_32	nodma
10002687:	e8 fc ff ff ff       	call   10002688 <SoundBlaster16::open(int, int, void*)+0xd2>	10002688: R_386_PC32	Dbg::kprintf(char const*, ...)
1000268c:	83 c4 10             	add    esp,0x10
1000268f:	83 c8 ff             	or     eax,0xffffffff
10002692:	e9 d3 01 00 00       	jmp    1000286a <SoundBlaster16::open(int, int, void*)+0x2b4>
10002697:	56                   	push   esi
10002698:	56                   	push   esi
10002699:	6a 01                	push   0x1
1000269b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000269d: R_386_32	isaDMAController
100026a1:	e8 fc ff ff ff       	call   100026a2 <SoundBlaster16::open(int, int, void*)+0xec>	100026a2: R_386_PC32	DMA::tryLockChannel(int)
100026a6:	83 c4 10             	add    esp,0x10
100026a9:	89 83 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],eax
100026af:	85 c0                	test   eax,eax
100026b1:	75 06                	jne    100026b9 <SoundBlaster16::open(int, int, void*)+0x103>
100026b3:	51                   	push   ecx
100026b4:	51                   	push   ecx
100026b5:	6a 03                	push   0x3
100026b7:	eb ae                	jmp    10002667 <SoundBlaster16::open(int, int, void*)+0xb1>
100026b9:	50                   	push   eax
100026ba:	50                   	push   eax
100026bb:	68 00 40 00 00       	push   0x4000
100026c0:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100026c6:	e8 fc ff ff ff       	call   100026c7 <SoundBlaster16::open(int, int, void*)+0x111>	100026c7: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
100026cb:	58                   	pop    eax
100026cc:	5a                   	pop    edx
100026cd:	6a 59                	push   0x59
100026cf:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100026d5:	e8 fc ff ff ff       	call   100026d6 <SoundBlaster16::open(int, int, void*)+0x120>	100026d6: R_386_PC32	DMAChannel::setMode(unsigned char)
100026da:	59                   	pop    ecx
100026db:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100026e1:	e8 fc ff ff ff       	call   100026e2 <SoundBlaster16::open(int, int, void*)+0x12c>	100026e2: R_386_PC32	DMAChannel::start()
100026e6:	5e                   	pop    esi
100026e7:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100026ed:	e8 fc ff ff ff       	call   100026ee <SoundBlaster16::open(int, int, void*)+0x138>	100026ee: R_386_PC32	DMAChannel::getAddress()
100026f2:	89 83 f4 01 00 00    	mov    DWORD PTR [ebx+0x1f4],eax
100026f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
100026fb:	e8 fc ff ff ff       	call   100026fc <SoundBlaster16::open(int, int, void*)+0x146>	100026fc: R_386_PC32	SoundBlaster16::resetDSP()
10002700:	58                   	pop    eax
10002701:	5a                   	pop    edx
10002702:	6a 01                	push   0x1
10002704:	53                   	push   ebx
10002705:	e8 fc ff ff ff       	call   10002706 <SoundBlaster16::open(int, int, void*)+0x150>	10002706: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
1000270a:	83 c4 10             	add    esp,0x10
1000270d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
10002711:	38 4c 24 0e          	cmp    BYTE PTR [esp+0xe],cl
10002715:	75 6f                	jne    10002786 <SoundBlaster16::open(int, int, void*)+0x1d0>
10002717:	50                   	push   eax
10002718:	68 80 00 00 00       	push   0x80
1000271d:	68 24 02 00 00       	push   0x224
10002722:	53                   	push   ebx
10002723:	e8 fc ff ff ff       	call   10002724 <SoundBlaster16::open(int, int, void*)+0x16e>	10002724: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002728:	ba 25 02 00 00       	mov    edx,0x225
1000272d:	ec                   	in     al,dx
1000272e:	83 c4 10             	add    esp,0x10
10002731:	3c 01                	cmp    al,0x1
10002733:	75 0f                	jne    10002744 <SoundBlaster16::open(int, int, void*)+0x18e>
10002735:	83 ec 0c             	sub    esp,0xc
10002738:	53                   	push   ebx
10002739:	6a 01                	push   0x1
1000273b:	68 00 00 00 00       	push   0x0	1000273c: R_386_32	sb16Handler(regs*, void*)
10002740:	6a 02                	push   0x2
10002742:	eb 6f                	jmp    100027b3 <SoundBlaster16::open(int, int, void*)+0x1fd>
10002744:	3c 02                	cmp    al,0x2
10002746:	75 06                	jne    1000274e <SoundBlaster16::open(int, int, void*)+0x198>
10002748:	83 ec 0c             	sub    esp,0xc
1000274b:	53                   	push   ebx
1000274c:	eb 5c                	jmp    100027aa <SoundBlaster16::open(int, int, void*)+0x1f4>
1000274e:	3c 04                	cmp    al,0x4
10002750:	75 0f                	jne    10002761 <SoundBlaster16::open(int, int, void*)+0x1ab>
10002752:	83 ec 0c             	sub    esp,0xc
10002755:	53                   	push   ebx
10002756:	6a 01                	push   0x1
10002758:	68 00 00 00 00       	push   0x0	10002759: R_386_32	sb16Handler(regs*, void*)
1000275d:	6a 07                	push   0x7
1000275f:	eb 52                	jmp    100027b3 <SoundBlaster16::open(int, int, void*)+0x1fd>
10002761:	3c 08                	cmp    al,0x8
10002763:	75 0f                	jne    10002774 <SoundBlaster16::open(int, int, void*)+0x1be>
10002765:	83 ec 0c             	sub    esp,0xc
10002768:	53                   	push   ebx
10002769:	6a 01                	push   0x1
1000276b:	68 00 00 00 00       	push   0x0	1000276c: R_386_32	sb16Handler(regs*, void*)
10002770:	6a 0a                	push   0xa
10002772:	eb 3f                	jmp    100027b3 <SoundBlaster16::open(int, int, void*)+0x1fd>
10002774:	83 ec 0c             	sub    esp,0xc
10002777:	68 00 00 00 00       	push   0x0	10002778: R_386_32	noirq
1000277c:	e8 fc ff ff ff       	call   1000277d <SoundBlaster16::open(int, int, void*)+0x1c7>	1000277d: R_386_PC32	Krnl::panic(char const*)
10002781:	83 c4 10             	add    esp,0x10
10002784:	eb 36                	jmp    100027bc <SoundBlaster16::open(int, int, void*)+0x206>
10002786:	50                   	push   eax
10002787:	68 80 00 00 00       	push   0x80
1000278c:	68 24 02 00 00       	push   0x224
10002791:	53                   	push   ebx
10002792:	e8 fc ff ff ff       	call   10002793 <SoundBlaster16::open(int, int, void*)+0x1dd>	10002793: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002797:	83 c4 0c             	add    esp,0xc
1000279a:	6a 02                	push   0x2
1000279c:	68 25 02 00 00       	push   0x225
100027a1:	53                   	push   ebx
100027a2:	e8 fc ff ff ff       	call   100027a3 <SoundBlaster16::open(int, int, void*)+0x1ed>	100027a3: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100027a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
100027aa:	6a 01                	push   0x1
100027ac:	68 00 00 00 00       	push   0x0	100027ad: R_386_32	sb16Handler(regs*, void*)
100027b1:	6a 05                	push   0x5
100027b3:	53                   	push   ebx
100027b4:	e8 fc ff ff ff       	call   100027b5 <SoundBlaster16::open(int, int, void*)+0x1ff>	100027b5: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
100027b9:	83 c4 20             	add    esp,0x20
100027bc:	56                   	push   esi
100027bd:	68 81 00 00 00       	push   0x81
100027c2:	68 24 02 00 00       	push   0x224
100027c7:	53                   	push   ebx
100027c8:	e8 fc ff ff ff       	call   100027c9 <SoundBlaster16::open(int, int, void*)+0x213>	100027c9: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100027cd:	ba 25 02 00 00       	mov    edx,0x225
100027d2:	ec                   	in     al,dx
100027d3:	83 c4 0c             	add    esp,0xc
100027d6:	89 c6                	mov    esi,eax
100027d8:	68 81 00 00 00       	push   0x81
100027dd:	68 24 02 00 00       	push   0x224
100027e2:	53                   	push   ebx
100027e3:	e8 fc ff ff ff       	call   100027e4 <SoundBlaster16::open(int, int, void*)+0x22e>	100027e4: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100027e8:	58                   	pop    eax
100027e9:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
100027ef:	e8 fc ff ff ff       	call   100027f0 <SoundBlaster16::open(int, int, void*)+0x23a>	100027f0: R_386_PC32	DMAChannel::getChannelNum()
100027f4:	83 c4 10             	add    esp,0x10
100027f7:	48                   	dec    eax
100027f8:	75 0c                	jne    10002806 <SoundBlaster16::open(int, int, void*)+0x250>
100027fa:	81 e6 f0 00 00 00    	and    esi,0xf0
10002800:	51                   	push   ecx
10002801:	83 ce 02             	or     esi,0x2
10002804:	eb 20                	jmp    10002826 <SoundBlaster16::open(int, int, void*)+0x270>
10002806:	83 ec 0c             	sub    esp,0xc
10002809:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
1000280f:	e8 fc ff ff ff       	call   10002810 <SoundBlaster16::open(int, int, void*)+0x25a>	10002810: R_386_PC32	DMAChannel::getChannelNum()
10002814:	83 c4 10             	add    esp,0x10
10002817:	83 f8 03             	cmp    eax,0x3
1000281a:	75 18                	jne    10002834 <SoundBlaster16::open(int, int, void*)+0x27e>
1000281c:	81 e6 f0 00 00 00    	and    esi,0xf0
10002822:	52                   	push   edx
10002823:	83 ce 08             	or     esi,0x8
10002826:	56                   	push   esi
10002827:	68 25 02 00 00       	push   0x225
1000282c:	53                   	push   ebx
1000282d:	e8 fc ff ff ff       	call   1000282e <SoundBlaster16::open(int, int, void*)+0x278>	1000282e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002832:	eb 0d                	jmp    10002841 <SoundBlaster16::open(int, int, void*)+0x28b>
10002834:	83 ec 0c             	sub    esp,0xc
10002837:	68 00 00 00 00       	push   0x0	10002838: R_386_32	baddma
1000283c:	e8 fc ff ff ff       	call   1000283d <SoundBlaster16::open(int, int, void*)+0x287>	1000283d: R_386_PC32	Krnl::panic(char const*)
10002841:	83 c4 10             	add    esp,0x10
10002844:	50                   	push   eax
10002845:	6a 22                	push   0x22
10002847:	68 24 02 00 00       	push   0x224
1000284c:	53                   	push   ebx
1000284d:	e8 fc ff ff ff       	call   1000284e <SoundBlaster16::open(int, int, void*)+0x298>	1000284e: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002852:	83 c4 0c             	add    esp,0xc
10002855:	68 ff 00 00 00       	push   0xff
1000285a:	68 24 02 00 00       	push   0x224
1000285f:	53                   	push   ebx
10002860:	e8 fc ff ff ff       	call   10002861 <SoundBlaster16::open(int, int, void*)+0x2ab>	10002861: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002865:	83 c4 10             	add    esp,0x10
10002868:	31 c0                	xor    eax,eax
1000286a:	83 c4 14             	add    esp,0x14
1000286d:	5b                   	pop    ebx
1000286e:	5e                   	pop    esi
1000286f:	c3                   	ret    

10002870 <SoundBlaster16::onInterrupt()>:
10002870:	56                   	push   esi
10002871:	53                   	push   ebx
10002872:	53                   	push   ebx
10002873:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002877:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10002879: R_386_32	outputBuffer
1000287d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000287f: R_386_32	tempBuffer
10002883:	68 00 20 00 00       	push   0x2000
10002888:	56                   	push   esi
10002889:	e8 fc ff ff ff       	call   1000288a <SoundBlaster16::onInterrupt()+0x1a>	1000288a: R_386_PC32	SoundDevice::getAudio(int, float*, float*)
1000288e:	83 c4 10             	add    esp,0x10
10002891:	89 c3                	mov    ebx,eax
10002893:	80 3d ff 39 00 10 01 	cmp    BYTE PTR ds:0x100039ff,0x1	10002895: R_386_32	.data
1000289a:	53                   	push   ebx
1000289b:	19 c0                	sbb    eax,eax
1000289d:	25 00 20 00 00       	and    eax,0x2000
100028a2:	03 86 f4 01 00 00    	add    eax,DWORD PTR [esi+0x1f4]
100028a8:	50                   	push   eax
100028a9:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100028ab: R_386_32	outputBuffer
100028af:	56                   	push   esi
100028b0:	e8 fc ff ff ff       	call   100028b1 <SoundBlaster16::onInterrupt()+0x41>	100028b1: R_386_PC32	SoundDevice::floatTo8(float*, unsigned char*, int)
100028b5:	83 c4 10             	add    esp,0x10
100028b8:	85 db                	test   ebx,ebx
100028ba:	75 0c                	jne    100028c8 <SoundBlaster16::onInterrupt()+0x58>
100028bc:	51                   	push   ecx
100028bd:	51                   	push   ecx
100028be:	6a 00                	push   0x0
100028c0:	56                   	push   esi
100028c1:	e8 fc ff ff ff       	call   100028c2 <SoundBlaster16::onInterrupt()+0x52>	100028c2: R_386_PC32	SoundBlaster16::turnSpeakerOn(bool)
100028c6:	eb 3e                	jmp    10002906 <SoundBlaster16::onInterrupt()+0x96>
100028c8:	81 fb ff 1f 00 00    	cmp    ebx,0x1fff
100028ce:	7f 39                	jg     10002909 <SoundBlaster16::onInterrupt()+0x99>
100028d0:	52                   	push   edx
100028d1:	6a 24                	push   0x24
100028d3:	68 2c 02 00 00       	push   0x22c
100028d8:	56                   	push   esi
100028d9:	e8 fc ff ff ff       	call   100028da <SoundBlaster16::onInterrupt()+0x6a>	100028da: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100028de:	83 c4 0c             	add    esp,0xc
100028e1:	8d 43 ff             	lea    eax,[ebx-0x1]
100028e4:	4b                   	dec    ebx
100028e5:	0f b6 c0             	movzx  eax,al
100028e8:	0f b6 df             	movzx  ebx,bh
100028eb:	50                   	push   eax
100028ec:	68 2c 02 00 00       	push   0x22c
100028f1:	56                   	push   esi
100028f2:	e8 fc ff ff ff       	call   100028f3 <SoundBlaster16::onInterrupt()+0x83>	100028f3: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
100028f7:	83 c4 0c             	add    esp,0xc
100028fa:	53                   	push   ebx
100028fb:	68 2c 02 00 00       	push   0x22c
10002900:	56                   	push   esi
10002901:	e8 fc ff ff ff       	call   10002902 <SoundBlaster16::onInterrupt()+0x92>	10002902: R_386_PC32	SoundBlaster16::DSPOut(unsigned short, unsigned char)
10002906:	83 c4 10             	add    esp,0x10
10002909:	80 35 ff 39 00 10 01 	xor    BYTE PTR ds:0x100039ff,0x1	1000290b: R_386_32	.data
10002910:	58                   	pop    eax
10002911:	5b                   	pop    ebx
10002912:	5e                   	pop    esi
10002913:	c3                   	ret    

10002914 <SoundBlaster16::close(int, int, void*)>:
10002914:	83 ec 0c             	sub    esp,0xc
10002917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000291b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
10002921:	85 c0                	test   eax,eax
10002923:	74 11                	je     10002936 <SoundBlaster16::close(int, int, void*)+0x22>
10002925:	52                   	push   edx
10002926:	52                   	push   edx
10002927:	50                   	push   eax
10002928:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000292a: R_386_32	isaDMAController
1000292e:	e8 fc ff ff ff       	call   1000292f <SoundBlaster16::close(int, int, void*)+0x1b>	1000292f: R_386_PC32	DMA::unlockChannel(DMAChannel*)
10002933:	83 c4 10             	add    esp,0x10
10002936:	31 c0                	xor    eax,eax
10002938:	83 c4 0c             	add    esp,0xc
1000293b:	c3                   	ret    

1000293c <ISA::~ISA()>:
1000293c:	55                   	push   ebp
1000293d:	89 e5                	mov    ebp,esp
1000293f:	83 ec 08             	sub    esp,0x8
10002942:	ba 08 00 00 00       	mov    edx,0x8	10002943: R_386_32	vtable for ISA
10002947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000294a:	89 10                	mov    DWORD PTR [eax],edx
1000294c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000294f:	83 ec 0c             	sub    esp,0xc
10002952:	50                   	push   eax
10002953:	e8 fc ff ff ff       	call   10002954 <ISA::~ISA()+0x18>	10002954: R_386_PC32	Bus::~Bus()
10002958:	83 c4 10             	add    esp,0x10
1000295b:	90                   	nop
1000295c:	c9                   	leave  
1000295d:	c3                   	ret    

1000295e <ISA::~ISA()>:
1000295e:	55                   	push   ebp
1000295f:	89 e5                	mov    ebp,esp
10002961:	83 ec 08             	sub    esp,0x8
10002964:	83 ec 0c             	sub    esp,0xc
10002967:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000296a:	e8 fc ff ff ff       	call   1000296b <ISA::~ISA()+0xd>	1000296b: R_386_PC32	ISA::~ISA()
1000296f:	83 c4 10             	add    esp,0x10
10002972:	83 ec 08             	sub    esp,0x8
10002975:	68 58 01 00 00       	push   0x158
1000297a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000297d:	e8 fc ff ff ff       	call   1000297e <ISA::~ISA()+0x20>	1000297e: R_386_PC32	operator delete(void*, unsigned long)
10002982:	83 c4 10             	add    esp,0x10
10002985:	c9                   	leave  
10002986:	c3                   	ret    
10002987:	90                   	nop

10002988 <JoystickHost::JoystickHost()>:
10002988:	55                   	push   ebp
10002989:	89 e5                	mov    ebp,esp
1000298b:	ba 08 00 00 00       	mov    edx,0x8	1000298c: R_386_32	vtable for JoystickHost
10002990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002993:	89 10                	mov    DWORD PTR [eax],edx
10002995:	90                   	nop
10002996:	5d                   	pop    ebp
10002997:	c3                   	ret    

10002998 <DMA::~DMA()>:
10002998:	55                   	push   ebp
10002999:	89 e5                	mov    ebp,esp
1000299b:	83 ec 08             	sub    esp,0x8
1000299e:	ba 08 00 00 00       	mov    edx,0x8	1000299f: R_386_32	vtable for DMA
100029a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029a6:	89 10                	mov    DWORD PTR [eax],edx
100029a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029ab:	83 ec 0c             	sub    esp,0xc
100029ae:	50                   	push   eax
100029af:	e8 fc ff ff ff       	call   100029b0 <DMA::~DMA()+0x18>	100029b0: R_386_PC32	Device::~Device()
100029b4:	83 c4 10             	add    esp,0x10
100029b7:	90                   	nop
100029b8:	c9                   	leave  
100029b9:	c3                   	ret    

100029ba <DMA::~DMA()>:
100029ba:	55                   	push   ebp
100029bb:	89 e5                	mov    ebp,esp
100029bd:	83 ec 08             	sub    esp,0x8
100029c0:	83 ec 0c             	sub    esp,0xc
100029c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100029c6:	e8 fc ff ff ff       	call   100029c7 <DMA::~DMA()+0xd>	100029c7: R_386_PC32	DMA::~DMA()
100029cb:	83 c4 10             	add    esp,0x10
100029ce:	83 ec 08             	sub    esp,0x8
100029d1:	68 5c 01 00 00       	push   0x15c
100029d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100029d9:	e8 fc ff ff ff       	call   100029da <DMA::~DMA()+0x20>	100029da: R_386_PC32	operator delete(void*, unsigned long)
100029de:	83 c4 10             	add    esp,0x10
100029e1:	c9                   	leave  
100029e2:	c3                   	ret    
100029e3:	90                   	nop

100029e4 <PS2::~PS2()>:
100029e4:	55                   	push   ebp
100029e5:	89 e5                	mov    ebp,esp
100029e7:	83 ec 08             	sub    esp,0x8
100029ea:	ba 08 00 00 00       	mov    edx,0x8	100029eb: R_386_32	vtable for PS2
100029ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029f2:	89 10                	mov    DWORD PTR [eax],edx
100029f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100029f7:	83 ec 0c             	sub    esp,0xc
100029fa:	50                   	push   eax
100029fb:	e8 fc ff ff ff       	call   100029fc <PS2::~PS2()+0x18>	100029fc: R_386_PC32	Bus::~Bus()
10002a00:	83 c4 10             	add    esp,0x10
10002a03:	90                   	nop
10002a04:	c9                   	leave  
10002a05:	c3                   	ret    

10002a06 <PS2::~PS2()>:
10002a06:	55                   	push   ebp
10002a07:	89 e5                	mov    ebp,esp
10002a09:	83 ec 08             	sub    esp,0x8
10002a0c:	83 ec 0c             	sub    esp,0xc
10002a0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a12:	e8 fc ff ff ff       	call   10002a13 <PS2::~PS2()+0xd>	10002a13: R_386_PC32	PS2::~PS2()
10002a17:	83 c4 10             	add    esp,0x10
10002a1a:	83 ec 08             	sub    esp,0x8
10002a1d:	68 60 01 00 00       	push   0x160
10002a22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a25:	e8 fc ff ff ff       	call   10002a26 <PS2::~PS2()+0x20>	10002a26: R_386_PC32	operator delete(void*, unsigned long)
10002a2a:	83 c4 10             	add    esp,0x10
10002a2d:	c9                   	leave  
10002a2e:	c3                   	ret    
10002a2f:	90                   	nop

10002a30 <PS2Mouse::~PS2Mouse()>:
10002a30:	55                   	push   ebp
10002a31:	89 e5                	mov    ebp,esp
10002a33:	83 ec 08             	sub    esp,0x8
10002a36:	ba 08 00 00 00       	mov    edx,0x8	10002a37: R_386_32	vtable for PS2Mouse
10002a3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a3e:	89 10                	mov    DWORD PTR [eax],edx
10002a40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a43:	83 ec 0c             	sub    esp,0xc
10002a46:	50                   	push   eax
10002a47:	e8 fc ff ff ff       	call   10002a48 <PS2Mouse::~PS2Mouse()+0x18>	10002a48: R_386_PC32	Mouse::~Mouse()
10002a4c:	83 c4 10             	add    esp,0x10
10002a4f:	90                   	nop
10002a50:	c9                   	leave  
10002a51:	c3                   	ret    

10002a52 <PS2Mouse::~PS2Mouse()>:
10002a52:	55                   	push   ebp
10002a53:	89 e5                	mov    ebp,esp
10002a55:	83 ec 08             	sub    esp,0x8
10002a58:	83 ec 0c             	sub    esp,0xc
10002a5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a5e:	e8 fc ff ff ff       	call   10002a5f <PS2Mouse::~PS2Mouse()+0xd>	10002a5f: R_386_PC32	PS2Mouse::~PS2Mouse()
10002a63:	83 c4 10             	add    esp,0x10
10002a66:	83 ec 08             	sub    esp,0x8
10002a69:	68 68 01 00 00       	push   0x168
10002a6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a71:	e8 fc ff ff ff       	call   10002a72 <PS2Mouse::~PS2Mouse()+0x20>	10002a72: R_386_PC32	operator delete(void*, unsigned long)
10002a76:	83 c4 10             	add    esp,0x10
10002a79:	c9                   	leave  
10002a7a:	c3                   	ret    
10002a7b:	90                   	nop

10002a7c <PS2Port::~PS2Port()>:
10002a7c:	55                   	push   ebp
10002a7d:	89 e5                	mov    ebp,esp
10002a7f:	83 ec 08             	sub    esp,0x8
10002a82:	ba 08 00 00 00       	mov    edx,0x8	10002a83: R_386_32	vtable for PS2Port
10002a87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a8a:	89 10                	mov    DWORD PTR [eax],edx
10002a8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a8f:	83 ec 0c             	sub    esp,0xc
10002a92:	50                   	push   eax
10002a93:	e8 fc ff ff ff       	call   10002a94 <PS2Port::~PS2Port()+0x18>	10002a94: R_386_PC32	Bus::~Bus()
10002a98:	83 c4 10             	add    esp,0x10
10002a9b:	90                   	nop
10002a9c:	c9                   	leave  
10002a9d:	c3                   	ret    

10002a9e <PS2Port::~PS2Port()>:
10002a9e:	55                   	push   ebp
10002a9f:	89 e5                	mov    ebp,esp
10002aa1:	83 ec 08             	sub    esp,0x8
10002aa4:	83 ec 0c             	sub    esp,0xc
10002aa7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002aaa:	e8 fc ff ff ff       	call   10002aab <PS2Port::~PS2Port()+0xd>	10002aab: R_386_PC32	PS2Port::~PS2Port()
10002aaf:	83 c4 10             	add    esp,0x10
10002ab2:	83 ec 08             	sub    esp,0x8
10002ab5:	68 60 01 00 00       	push   0x160
10002aba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002abd:	e8 fc ff ff ff       	call   10002abe <PS2Port::~PS2Port()+0x20>	10002abe: R_386_PC32	operator delete(void*, unsigned long)
10002ac2:	83 c4 10             	add    esp,0x10
10002ac5:	c9                   	leave  
10002ac6:	c3                   	ret    
10002ac7:	90                   	nop

10002ac8 <SoundBlaster16::~SoundBlaster16()>:
10002ac8:	55                   	push   ebp
10002ac9:	89 e5                	mov    ebp,esp
10002acb:	83 ec 08             	sub    esp,0x8
10002ace:	ba 08 00 00 00       	mov    edx,0x8	10002acf: R_386_32	vtable for SoundBlaster16
10002ad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ad6:	89 10                	mov    DWORD PTR [eax],edx
10002ad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002adb:	83 ec 0c             	sub    esp,0xc
10002ade:	50                   	push   eax
10002adf:	e8 fc ff ff ff       	call   10002ae0 <SoundBlaster16::~SoundBlaster16()+0x18>	10002ae0: R_386_PC32	SoundDevice::~SoundDevice()
10002ae4:	83 c4 10             	add    esp,0x10
10002ae7:	90                   	nop
10002ae8:	c9                   	leave  
10002ae9:	c3                   	ret    

10002aea <SoundBlaster16::~SoundBlaster16()>:
10002aea:	55                   	push   ebp
10002aeb:	89 e5                	mov    ebp,esp
10002aed:	83 ec 08             	sub    esp,0x8
10002af0:	83 ec 0c             	sub    esp,0xc
10002af3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002af6:	e8 fc ff ff ff       	call   10002af7 <SoundBlaster16::~SoundBlaster16()+0xd>	10002af7: R_386_PC32	SoundBlaster16::~SoundBlaster16()
10002afb:	83 c4 10             	add    esp,0x10
10002afe:	83 ec 08             	sub    esp,0x8
10002b01:	68 fc 01 00 00       	push   0x1fc
10002b06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002b09:	e8 fc ff ff ff       	call   10002b0a <SoundBlaster16::~SoundBlaster16()+0x20>	10002b0a: R_386_PC32	operator delete(void*, unsigned long)
10002b0e:	83 c4 10             	add    esp,0x10
10002b11:	c9                   	leave  
10002b12:	c3                   	ret    
10002b13:	90                   	nop

10002b14 <PHYS_RAM_TABLE_SIZE>:
10002b14:	13 05 00 00                                         ....

10002b18 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002b18:	24 05 00 00                                         $...

10002b1c <PHYS_RAM_TABLE>:
10002b1c:	00 06 00 00                                         ....

10002b20 <PHYS_DMA_MEMORY_1>:
10002b20:	00 00 01 00                                         ....

10002b24 <PHYS_PHYS_PAGE_BITMAP>:
10002b24:	00 00 02 00                                         ....

10002b28 <PHYS_VIRT_PAGE_BITMAP>:
10002b28:	00 00 04 00                                         ....

10002b2c <PHYS_DMA_MEMORY_2>:
10002b2c:	00 00 06 00                                         ....

10002b30 <PHYS_ALLOCED_VIRT_PAGES>:
10002b30:	00 00 10 00                                         ....

10002b34 <PHYS_KRNL_PAGE_DIRECTORY>:
10002b34:	00 10 00 00                                         ....

10002b38 <VIRT_KERNEL_BASE>:
10002b38:	00 00 00 c0                                         ....

10002b3c <VIRT_LOW_MEGS>:
10002b3c:	00 00 00 c2                                         ....

10002b40 <VIRT_CPU_SPECIFIC>:
10002b40:	00 00 40 c2                                         ..@.

10002b44 <VIRT_RECURSIVE_SPOT_1>:
10002b44:	00 00 80 c2                                         ....

10002b48 <VIRT_RECURSIVE_SPOT_2>:
10002b48:	00 00 c0 c2                                         ....

10002b4c <VIRT_DMA_MEMORY_1>:
10002b4c:	00 00 01 c2                                         ....

10002b50 <SIZE_DMA_MEMORY_1>:
10002b50:	00 00 01 00                                         ....

10002b54 <VIRT_DMA_MEMORY_2>:
10002b54:	00 00 06 c2                                         ....

10002b58 <SIZE_DMA_MEMORY_2>:
10002b58:	00 00 02 00                                         ....

10002b5c <VIRT_KRNL_PAGE_DIRECTORY>:
10002b5c:	00 10 00 c2                                         ....

10002b60 <VIRT_PHYS_PAGE_BITMAP>:
10002b60:	00 00 02 c2                                         ....

10002b64 <SIZE_PHYS_PAGE_BITMAP>:
10002b64:	00 00 02 00                                         ....

10002b68 <VIRT_VIRT_PAGE_BITMAP>:
10002b68:	00 00 04 c2                                         ....

10002b6c <SIZE_VIRT_PAGE_BITMAP>:
10002b6c:	00 80 00 00                                         ....

10002b70 <VIRT_RAM_TABLE>:
10002b70:	00 06 00 c2                                         ....

10002b74 <VIRT_RAM_TABLE_SIZE>:
10002b74:	13 05 00 c2                                         ....

10002b78 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002b78:	24 05 00 c2                                         $...

10002b7c <SIZE_APP_STACK_USER>:
10002b7c:	00 00 18 00                                         ....

10002b80 <SIZE_APP_STACK_KRNL>:
10002b80:	00 00 08 00                                         ....

10002b84 <SIZE_APP_STACK_TOTAL>:
10002b84:	00 00 20 00                                         .. .

10002b88 <VIRT_APP_DATA>:
10002b88:	00 00 00 10                                         ....

10002b8c <VIRT_APP_STACK_USER_TOP>:
10002b8c:	00 00 00 02                                         ....

10002b90 <VIRT_APP_STACK_KRNL_TOP>:
10002b90:	00 00 e8 01                                         ....

10002b94 <VIRT_HEAP_MIN>:
10002b94:	00 00 00 c8                                         ....

10002b98 <VIRT_HEAP_MAX>:
10002b98:	ff ff ff ef                                         ....

10002b9c <VIRT_SBRK_MIN>:
10002b9c:	00 00 00 f0                                         ....

10002ba0 <VIRT_SBRK_MAX>:
10002ba0:	00 00 c0 ff                                         ....

10002ba4 <VIRT_ALLOCED_VIRT_PAGES>:
10002ba4:	00 00 10 c2                                         ....

10002ba8 <VIRT_ACPI_DRIVER>:
10002ba8:	00 40 48 c2                                         .@H.

10002bac <TERMINAL_KEYBUFFER_IN_SIZE>:
10002bac:	96 00 00 00                                         ....

10002bb0 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002bb0:	2c 01 00 00 49 53 41 20 42 75 73 00 43 3a 2f 42     ,...ISA Bus.C:/B
10002bc0:	61 6e 61 6e 61 2f 44 72 69 76 65 72 73 2f 66 6c     anana/Drivers/fl
10002bd0:	6f 70 70 79 2e 73 79 73 00 66 90 90                 oppy.sys.f..

10002bdc <vtable for ISA>:
	...
	10002be4: R_386_32	ISA::~ISA()
	10002be8: R_386_32	ISA::~ISA()
	10002bec: R_386_32	ISA::open(int, int, void*)
	10002bf0: R_386_32	ISA::close(int, int, void*)
	10002bf4: R_386_32	Device::hibernate()
	10002bf8: R_386_32	Device::wake()
	10002bfc: R_386_32	ISA::detect()
	10002c00: R_386_32	Device::disableLegacy()
	10002c04: R_386_32	Device::powerSaving(PowerSavingLevel)

10002c08 <PHYS_RAM_TABLE_SIZE>:
10002c08:	13 05 00 00                                         ....

10002c0c <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002c0c:	24 05 00 00                                         $...

10002c10 <PHYS_RAM_TABLE>:
10002c10:	00 06 00 00                                         ....

10002c14 <PHYS_DMA_MEMORY_1>:
10002c14:	00 00 01 00                                         ....

10002c18 <PHYS_PHYS_PAGE_BITMAP>:
10002c18:	00 00 02 00                                         ....

10002c1c <PHYS_VIRT_PAGE_BITMAP>:
10002c1c:	00 00 04 00                                         ....

10002c20 <PHYS_DMA_MEMORY_2>:
10002c20:	00 00 06 00                                         ....

10002c24 <PHYS_ALLOCED_VIRT_PAGES>:
10002c24:	00 00 10 00                                         ....

10002c28 <PHYS_KRNL_PAGE_DIRECTORY>:
10002c28:	00 10 00 00                                         ....

10002c2c <VIRT_KERNEL_BASE>:
10002c2c:	00 00 00 c0                                         ....

10002c30 <VIRT_LOW_MEGS>:
10002c30:	00 00 00 c2                                         ....

10002c34 <VIRT_CPU_SPECIFIC>:
10002c34:	00 00 40 c2                                         ..@.

10002c38 <VIRT_RECURSIVE_SPOT_1>:
10002c38:	00 00 80 c2                                         ....

10002c3c <VIRT_RECURSIVE_SPOT_2>:
10002c3c:	00 00 c0 c2                                         ....

10002c40 <VIRT_DMA_MEMORY_1>:
10002c40:	00 00 01 c2                                         ....

10002c44 <SIZE_DMA_MEMORY_1>:
10002c44:	00 00 01 00                                         ....

10002c48 <VIRT_DMA_MEMORY_2>:
10002c48:	00 00 06 c2                                         ....

10002c4c <SIZE_DMA_MEMORY_2>:
10002c4c:	00 00 02 00                                         ....

10002c50 <VIRT_KRNL_PAGE_DIRECTORY>:
10002c50:	00 10 00 c2                                         ....

10002c54 <VIRT_PHYS_PAGE_BITMAP>:
10002c54:	00 00 02 c2                                         ....

10002c58 <SIZE_PHYS_PAGE_BITMAP>:
10002c58:	00 00 02 00                                         ....

10002c5c <VIRT_VIRT_PAGE_BITMAP>:
10002c5c:	00 00 04 c2                                         ....

10002c60 <SIZE_VIRT_PAGE_BITMAP>:
10002c60:	00 80 00 00                                         ....

10002c64 <VIRT_RAM_TABLE>:
10002c64:	00 06 00 c2                                         ....

10002c68 <VIRT_RAM_TABLE_SIZE>:
10002c68:	13 05 00 c2                                         ....

10002c6c <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002c6c:	24 05 00 c2                                         $...

10002c70 <SIZE_APP_STACK_USER>:
10002c70:	00 00 18 00                                         ....

10002c74 <SIZE_APP_STACK_KRNL>:
10002c74:	00 00 08 00                                         ....

10002c78 <SIZE_APP_STACK_TOTAL>:
10002c78:	00 00 20 00                                         .. .

10002c7c <VIRT_APP_DATA>:
10002c7c:	00 00 00 10                                         ....

10002c80 <VIRT_APP_STACK_USER_TOP>:
10002c80:	00 00 00 02                                         ....

10002c84 <VIRT_APP_STACK_KRNL_TOP>:
10002c84:	00 00 e8 01                                         ....

10002c88 <VIRT_HEAP_MIN>:
10002c88:	00 00 00 c8                                         ....

10002c8c <VIRT_HEAP_MAX>:
10002c8c:	ff ff ff ef                                         ....

10002c90 <VIRT_SBRK_MIN>:
10002c90:	00 00 00 f0                                         ....

10002c94 <VIRT_SBRK_MAX>:
10002c94:	00 00 c0 ff                                         ....

10002c98 <VIRT_ALLOCED_VIRT_PAGES>:
10002c98:	00 00 10 c2                                         ....

10002c9c <VIRT_ACPI_DRIVER>:
10002c9c:	00 40 48 c2                                         .@H.

10002ca0 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002ca0:	96 00 00 00                                         ....

10002ca4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002ca4:	2c 01 00 00 47 61 6d 65 70 6f 72 74 00 66 90 90     ,...Gameport.f..

10002cb4 <vtable for Gameport>:
	...
	10002cbc: R_386_32	Gameport::~Gameport()
	10002cc0: R_386_32	Gameport::~Gameport()
	10002cc4: R_386_32	Gameport::open(int, int, void*)
	10002cc8: R_386_32	Gameport::close(int, int, void*)
	10002ccc: R_386_32	Device::hibernate()
	10002cd0: R_386_32	Device::wake()
	10002cd4: R_386_32	Gameport::detect()
	10002cd8: R_386_32	Device::disableLegacy()
	10002cdc: R_386_32	Device::powerSaving(PowerSavingLevel)
	10002ce0: R_386_32	Gameport::read(int)
10002ce4:	a8 fe ff ff 00 00 00 00 00 00 00 00                 ............	10002cec: R_386_32	non-virtual thunk to Gameport::read(int)

10002cf0 <vtable for JoystickHost>:
	...
	10002cf8: R_386_32	__cxa_pure_virtual

10002cfc <PHYS_RAM_TABLE_SIZE>:
10002cfc:	13 05 00 00                                         ....

10002d00 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002d00:	24 05 00 00                                         $...

10002d04 <PHYS_RAM_TABLE>:
10002d04:	00 06 00 00                                         ....

10002d08 <PHYS_DMA_MEMORY_1>:
10002d08:	00 00 01 00                                         ....

10002d0c <PHYS_PHYS_PAGE_BITMAP>:
10002d0c:	00 00 02 00                                         ....

10002d10 <PHYS_VIRT_PAGE_BITMAP>:
10002d10:	00 00 04 00                                         ....

10002d14 <PHYS_DMA_MEMORY_2>:
10002d14:	00 00 06 00                                         ....

10002d18 <PHYS_ALLOCED_VIRT_PAGES>:
10002d18:	00 00 10 00                                         ....

10002d1c <PHYS_KRNL_PAGE_DIRECTORY>:
10002d1c:	00 10 00 00                                         ....

10002d20 <VIRT_KERNEL_BASE>:
10002d20:	00 00 00 c0                                         ....

10002d24 <VIRT_LOW_MEGS>:
10002d24:	00 00 00 c2                                         ....

10002d28 <VIRT_CPU_SPECIFIC>:
10002d28:	00 00 40 c2                                         ..@.

10002d2c <VIRT_RECURSIVE_SPOT_1>:
10002d2c:	00 00 80 c2                                         ....

10002d30 <VIRT_RECURSIVE_SPOT_2>:
10002d30:	00 00 c0 c2                                         ....

10002d34 <VIRT_DMA_MEMORY_1>:
10002d34:	00 00 01 c2                                         ....

10002d38 <SIZE_DMA_MEMORY_1>:
10002d38:	00 00 01 00                                         ....

10002d3c <VIRT_DMA_MEMORY_2>:
10002d3c:	00 00 06 c2                                         ....

10002d40 <SIZE_DMA_MEMORY_2>:
10002d40:	00 00 02 00                                         ....

10002d44 <VIRT_KRNL_PAGE_DIRECTORY>:
10002d44:	00 10 00 c2                                         ....

10002d48 <VIRT_PHYS_PAGE_BITMAP>:
10002d48:	00 00 02 c2                                         ....

10002d4c <SIZE_PHYS_PAGE_BITMAP>:
10002d4c:	00 00 02 00                                         ....

10002d50 <VIRT_VIRT_PAGE_BITMAP>:
10002d50:	00 00 04 c2                                         ....

10002d54 <SIZE_VIRT_PAGE_BITMAP>:
10002d54:	00 80 00 00                                         ....

10002d58 <VIRT_RAM_TABLE>:
10002d58:	00 06 00 c2                                         ....

10002d5c <VIRT_RAM_TABLE_SIZE>:
10002d5c:	13 05 00 c2                                         ....

10002d60 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002d60:	24 05 00 c2                                         $...

10002d64 <SIZE_APP_STACK_USER>:
10002d64:	00 00 18 00                                         ....

10002d68 <SIZE_APP_STACK_KRNL>:
10002d68:	00 00 08 00                                         ....

10002d6c <SIZE_APP_STACK_TOTAL>:
10002d6c:	00 00 20 00                                         .. .

10002d70 <VIRT_APP_DATA>:
10002d70:	00 00 00 10                                         ....

10002d74 <VIRT_APP_STACK_USER_TOP>:
10002d74:	00 00 00 02                                         ....

10002d78 <VIRT_APP_STACK_KRNL_TOP>:
10002d78:	00 00 e8 01                                         ....

10002d7c <VIRT_HEAP_MIN>:
10002d7c:	00 00 00 c8                                         ....

10002d80 <VIRT_HEAP_MAX>:
10002d80:	ff ff ff ef                                         ....

10002d84 <VIRT_SBRK_MIN>:
10002d84:	00 00 00 f0                                         ....

10002d88 <VIRT_SBRK_MAX>:
10002d88:	00 00 c0 ff                                         ....

10002d8c <VIRT_ALLOCED_VIRT_PAGES>:
10002d8c:	00 00 10 c2                                         ....

10002d90 <VIRT_ACPI_DRIVER>:
10002d90:	00 40 48 c2                                         .@H.

10002d94 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002d94:	96 00 00 00                                         ....

10002d98 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002d98:	2c 01 00 00                                         ,...

10002d9c <CSWTCH.8>:
10002d9c:	00 02 04 06 c0 c4 c8 cc                             ........

10002da4 <CSWTCH.9>:
10002da4:	01 03 05 07 c2 c6 ca ce                             ........

10002dac <CSWTCH.10>:
10002dac:	87 83 81 82 8f 8b 89 8a 4e 6f 74 20 69 6e 20 72     ........Not in r
10002dbc:	61 6e 67 65 2e 0a 00 90                             ange....

10002dc4 <vtable for DMA>:
	...
	10002dcc: R_386_32	DMA::~DMA()
	10002dd0: R_386_32	DMA::~DMA()
	10002dd4: R_386_32	DMA::open(int, int, void*)
	10002dd8: R_386_32	DMA::close(int, int, void*)
	10002ddc: R_386_32	Device::hibernate()
	10002de0: R_386_32	Device::wake()
	10002de4: R_386_32	Device::detect()
	10002de8: R_386_32	Device::disableLegacy()
	10002dec: R_386_32	Device::powerSaving(PowerSavingLevel)

10002df0 <PHYS_RAM_TABLE_SIZE>:
10002df0:	13 05 00 00                                         ....

10002df4 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002df4:	24 05 00 00                                         $...

10002df8 <PHYS_RAM_TABLE>:
10002df8:	00 06 00 00                                         ....

10002dfc <PHYS_DMA_MEMORY_1>:
10002dfc:	00 00 01 00                                         ....

10002e00 <PHYS_PHYS_PAGE_BITMAP>:
10002e00:	00 00 02 00                                         ....

10002e04 <PHYS_VIRT_PAGE_BITMAP>:
10002e04:	00 00 04 00                                         ....

10002e08 <PHYS_DMA_MEMORY_2>:
10002e08:	00 00 06 00                                         ....

10002e0c <PHYS_ALLOCED_VIRT_PAGES>:
10002e0c:	00 00 10 00                                         ....

10002e10 <PHYS_KRNL_PAGE_DIRECTORY>:
10002e10:	00 10 00 00                                         ....

10002e14 <VIRT_KERNEL_BASE>:
10002e14:	00 00 00 c0                                         ....

10002e18 <VIRT_LOW_MEGS>:
10002e18:	00 00 00 c2                                         ....

10002e1c <VIRT_CPU_SPECIFIC>:
10002e1c:	00 00 40 c2                                         ..@.

10002e20 <VIRT_RECURSIVE_SPOT_1>:
10002e20:	00 00 80 c2                                         ....

10002e24 <VIRT_RECURSIVE_SPOT_2>:
10002e24:	00 00 c0 c2                                         ....

10002e28 <VIRT_DMA_MEMORY_1>:
10002e28:	00 00 01 c2                                         ....

10002e2c <SIZE_DMA_MEMORY_1>:
10002e2c:	00 00 01 00                                         ....

10002e30 <VIRT_DMA_MEMORY_2>:
10002e30:	00 00 06 c2                                         ....

10002e34 <SIZE_DMA_MEMORY_2>:
10002e34:	00 00 02 00                                         ....

10002e38 <VIRT_KRNL_PAGE_DIRECTORY>:
10002e38:	00 10 00 c2                                         ....

10002e3c <VIRT_PHYS_PAGE_BITMAP>:
10002e3c:	00 00 02 c2                                         ....

10002e40 <SIZE_PHYS_PAGE_BITMAP>:
10002e40:	00 00 02 00                                         ....

10002e44 <VIRT_VIRT_PAGE_BITMAP>:
10002e44:	00 00 04 c2                                         ....

10002e48 <SIZE_VIRT_PAGE_BITMAP>:
10002e48:	00 80 00 00                                         ....

10002e4c <VIRT_RAM_TABLE>:
10002e4c:	00 06 00 c2                                         ....

10002e50 <VIRT_RAM_TABLE_SIZE>:
10002e50:	13 05 00 c2                                         ....

10002e54 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002e54:	24 05 00 c2                                         $...

10002e58 <SIZE_APP_STACK_USER>:
10002e58:	00 00 18 00                                         ....

10002e5c <SIZE_APP_STACK_KRNL>:
10002e5c:	00 00 08 00                                         ....

10002e60 <SIZE_APP_STACK_TOTAL>:
10002e60:	00 00 20 00                                         .. .

10002e64 <VIRT_APP_DATA>:
10002e64:	00 00 00 10                                         ....

10002e68 <VIRT_APP_STACK_USER_TOP>:
10002e68:	00 00 00 02                                         ....

10002e6c <VIRT_APP_STACK_KRNL_TOP>:
10002e6c:	00 00 e8 01                                         ....

10002e70 <VIRT_HEAP_MIN>:
10002e70:	00 00 00 c8                                         ....

10002e74 <VIRT_HEAP_MAX>:
10002e74:	ff ff ff ef                                         ....

10002e78 <VIRT_SBRK_MIN>:
10002e78:	00 00 00 f0                                         ....

10002e7c <VIRT_SBRK_MAX>:
10002e7c:	00 00 c0 ff                                         ....

10002e80 <VIRT_ALLOCED_VIRT_PAGES>:
10002e80:	00 00 10 c2                                         ....

10002e84 <VIRT_ACPI_DRIVER>:
10002e84:	00 40 48 c2                                         .@H.

10002e88 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002e88:	96 00 00 00                                         ....

10002e8c <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002e8c:	2c 01 00 00                                         ,...

10002e90 <vtable for PS2>:
	...
	10002e98: R_386_32	PS2::~PS2()
	10002e9c: R_386_32	PS2::~PS2()
	10002ea0: R_386_32	PS2::open(int, int, void*)
	10002ea4: R_386_32	PS2::close(int, int, void*)
	10002ea8: R_386_32	Device::hibernate()
	10002eac: R_386_32	Device::wake()
	10002eb0: R_386_32	PS2::detect()
	10002eb4: R_386_32	Device::disableLegacy()
	10002eb8: R_386_32	Device::powerSaving(PowerSavingLevel)
10002ebc:	66 90 66 90                                         f.f.

10002ec0 <PHYS_RAM_TABLE_SIZE>:
10002ec0:	13 05 00 00                                         ....

10002ec4 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10002ec4:	24 05 00 00                                         $...

10002ec8 <PHYS_RAM_TABLE>:
10002ec8:	00 06 00 00                                         ....

10002ecc <PHYS_DMA_MEMORY_1>:
10002ecc:	00 00 01 00                                         ....

10002ed0 <PHYS_PHYS_PAGE_BITMAP>:
10002ed0:	00 00 02 00                                         ....

10002ed4 <PHYS_VIRT_PAGE_BITMAP>:
10002ed4:	00 00 04 00                                         ....

10002ed8 <PHYS_DMA_MEMORY_2>:
10002ed8:	00 00 06 00                                         ....

10002edc <PHYS_ALLOCED_VIRT_PAGES>:
10002edc:	00 00 10 00                                         ....

10002ee0 <PHYS_KRNL_PAGE_DIRECTORY>:
10002ee0:	00 10 00 00                                         ....

10002ee4 <VIRT_KERNEL_BASE>:
10002ee4:	00 00 00 c0                                         ....

10002ee8 <VIRT_LOW_MEGS>:
10002ee8:	00 00 00 c2                                         ....

10002eec <VIRT_CPU_SPECIFIC>:
10002eec:	00 00 40 c2                                         ..@.

10002ef0 <VIRT_RECURSIVE_SPOT_1>:
10002ef0:	00 00 80 c2                                         ....

10002ef4 <VIRT_RECURSIVE_SPOT_2>:
10002ef4:	00 00 c0 c2                                         ....

10002ef8 <VIRT_DMA_MEMORY_1>:
10002ef8:	00 00 01 c2                                         ....

10002efc <SIZE_DMA_MEMORY_1>:
10002efc:	00 00 01 00                                         ....

10002f00 <VIRT_DMA_MEMORY_2>:
10002f00:	00 00 06 c2                                         ....

10002f04 <SIZE_DMA_MEMORY_2>:
10002f04:	00 00 02 00                                         ....

10002f08 <VIRT_KRNL_PAGE_DIRECTORY>:
10002f08:	00 10 00 c2                                         ....

10002f0c <VIRT_PHYS_PAGE_BITMAP>:
10002f0c:	00 00 02 c2                                         ....

10002f10 <SIZE_PHYS_PAGE_BITMAP>:
10002f10:	00 00 02 00                                         ....

10002f14 <VIRT_VIRT_PAGE_BITMAP>:
10002f14:	00 00 04 c2                                         ....

10002f18 <SIZE_VIRT_PAGE_BITMAP>:
10002f18:	00 80 00 00                                         ....

10002f1c <VIRT_RAM_TABLE>:
10002f1c:	00 06 00 c2                                         ....

10002f20 <VIRT_RAM_TABLE_SIZE>:
10002f20:	13 05 00 c2                                         ....

10002f24 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10002f24:	24 05 00 c2                                         $...

10002f28 <SIZE_APP_STACK_USER>:
10002f28:	00 00 18 00                                         ....

10002f2c <SIZE_APP_STACK_KRNL>:
10002f2c:	00 00 08 00                                         ....

10002f30 <SIZE_APP_STACK_TOTAL>:
10002f30:	00 00 20 00                                         .. .

10002f34 <VIRT_APP_DATA>:
10002f34:	00 00 00 10                                         ....

10002f38 <VIRT_APP_STACK_USER_TOP>:
10002f38:	00 00 00 02                                         ....

10002f3c <VIRT_APP_STACK_KRNL_TOP>:
10002f3c:	00 00 e8 01                                         ....

10002f40 <VIRT_HEAP_MIN>:
10002f40:	00 00 00 c8                                         ....

10002f44 <VIRT_HEAP_MAX>:
10002f44:	ff ff ff ef                                         ....

10002f48 <VIRT_SBRK_MIN>:
10002f48:	00 00 00 f0                                         ....

10002f4c <VIRT_SBRK_MAX>:
10002f4c:	00 00 c0 ff                                         ....

10002f50 <VIRT_ALLOCED_VIRT_PAGES>:
10002f50:	00 00 10 c2                                         ....

10002f54 <VIRT_ACPI_DRIVER>:
10002f54:	00 40 48 c2                                         .@H.

10002f58 <TERMINAL_KEYBUFFER_IN_SIZE>:
10002f58:	96 00 00 00                                         ....

10002f5c <TERMINAL_KEYBUFFER_OUT_SIZE>:
10002f5c:	2c 01 00 00                                         ,...

10002f60 <PS2Keyboard::internalMapperLower>:
10002f60:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10002f70:	20 20 20 20 20 71 31 20 20 20 7a 73 61 77 32 20          q1   zsaw2 
10002f80:	20 63 78 64 65 34 33 20 20 20 76 66 74 72 35 20      cxde43   vftr5 
10002f90:	20 6e 62 68 67 79 36 20 20 20 6d 6a 75 37 38 20      nbhgy6   mju78 
10002fa0:	20 2c 6b 69 6f 30 39 20 20 2e 2f 6c 3b 70 2d 20      ,kio09  ./l;p- 
10002fb0:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10002fc0:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10002fd0:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10002fe0:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10003060 <PS2Keyboard::internalMapperUpper>:
10003060:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10003070:	20 20 20 20 20 51 21 20 20 20 5a 53 41 57 40 20          Q!   ZSAW@ 
10003080:	20 43 58 44 45 24 23 20 20 20 56 46 54 52 25 20      CXDE$#   VFTR% 
10003090:	20 4e 42 48 47 59 5e 20 20 20 4d 4a 55 26 2a 20      NBHGY^   MJU&* 
100030a0:	20 3c 4b 49 4f 29 28 20 20 3e 3f 4c 3a 50 5f 20      <KIO)(  >?L:P_ 
100030b0:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
100030c0:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
100030d0:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
100030e0:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10003160 <PS2Keyboard::internalMapCapLower>:
10003160:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
10003170:	20 20 20 20 20 51 31 20 20 20 5a 53 41 57 32 20          Q1   ZSAW2 
10003180:	20 43 58 44 45 34 33 20 20 20 56 46 54 52 35 20      CXDE43   VFTR5 
10003190:	20 4e 42 48 47 59 36 20 20 20 4d 4a 55 37 38 20      NBHGY6   MJU78 
100031a0:	20 2c 4b 49 4f 30 39 20 20 2e 2f 4c 3b 50 2d 20      ,KIO09  ./L;P- 
100031b0:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
100031c0:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
100031d0:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
100031e0:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

10003260 <PS2Keyboard::internalMapCapUpper>:
10003260:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
10003270:	20 20 20 20 20 51 21 20 20 20 7a 73 61 77 40 20          Q!   zsaw@ 
10003280:	20 63 78 64 65 24 23 20 20 20 76 66 74 72 25 20      cxde$#   vftr% 
10003290:	20 6e 62 68 67 79 5e 20 20 20 6d 6a 75 26 2a 20      nbhgy^   mju&* 
100032a0:	20 3c 6b 69 6f 29 28 20 20 3e 3f 6c 3a 70 5f 20      <kio)(  >?l:p_ 
100032b0:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
100032c0:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
100032d0:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
100032e0:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10003360 <PS2Keyboard::internalMapperLowerBad>:
10003360:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10003370:	71 77 65 72 74 79 75 69 6f 70 5b 5d 20 20 61 73     qwertyuiop[]  as
10003380:	64 66 67 68 6a 6b 6c 3b 27 60 20 5c 7a 78 63 76     dfghjkl;'` \zxcv
10003390:	62 6e 6d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     bnm,./ *        
100033a0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
100033b0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
100033c0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100033d0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100033e0:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
100033f0:	51 57 45 52 54 59 55 49 4f 50 7b 7d 20 20 41 53     QWERTYUIOP{}  AS
10003400:	44 46 47 48 4a 4b 4c 3a 22 7e 20 7c 5a 58 43 56     DFGHJKL:"~ |ZXCV
10003410:	42 4e 4d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     BNM<>? *        
10003420:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10003430:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10003440:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10003450:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10003460:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10003470:	51 57 45 52 54 59 55 49 4f 50 5b 5d 20 20 41 53     QWERTYUIOP[]  AS
10003480:	44 46 47 48 4a 4b 4c 3b 27 60 20 5c 5a 58 43 56     DFGHJKL;'` \ZXCV
10003490:	42 4e 4d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     BNM,./ *        
100034a0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
100034b0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
100034c0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100034d0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
100034e0:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
100034f0:	71 77 65 72 74 79 75 69 6f 70 7b 7d 20 20 61 73     qwertyuiop{}  as
10003500:	64 66 67 68 6a 6b 6c 3a 22 7e 20 7c 7a 78 63 76     dfghjkl:"~ |zxcv
10003510:	62 6e 6d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     bnm<>? *        
10003520:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10003530:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10003540:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10003550:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10003560:	00 66 90 90                                         .f..

10003564 <vtable for PS2Keyboard>:
	...
	1000356c: R_386_32	PS2Keyboard::~PS2Keyboard()
	10003570: R_386_32	PS2Keyboard::~PS2Keyboard()
	10003574: R_386_32	PS2Keyboard::open(int, int, void*)
	10003578: R_386_32	PS2Keyboard::close(int, int, void*)
	1000357c: R_386_32	Device::hibernate()
	10003580: R_386_32	Device::wake()
	10003584: R_386_32	Device::detect()
	10003588: R_386_32	Device::disableLegacy()
	1000358c: R_386_32	Device::powerSaving(PowerSavingLevel)
	10003590: R_386_32	PS2Keyboard::setRepeatRate(int)
	10003594: R_386_32	PS2Keyboard::setRepeatDelay(int)

10003598 <PHYS_RAM_TABLE_SIZE>:
10003598:	13 05 00 00                                         ....

1000359c <PHYS_HIGHEST_UNUSED_ADDRESS>:
1000359c:	24 05 00 00                                         $...

100035a0 <PHYS_RAM_TABLE>:
100035a0:	00 06 00 00                                         ....

100035a4 <PHYS_DMA_MEMORY_1>:
100035a4:	00 00 01 00                                         ....

100035a8 <PHYS_PHYS_PAGE_BITMAP>:
100035a8:	00 00 02 00                                         ....

100035ac <PHYS_VIRT_PAGE_BITMAP>:
100035ac:	00 00 04 00                                         ....

100035b0 <PHYS_DMA_MEMORY_2>:
100035b0:	00 00 06 00                                         ....

100035b4 <PHYS_ALLOCED_VIRT_PAGES>:
100035b4:	00 00 10 00                                         ....

100035b8 <PHYS_KRNL_PAGE_DIRECTORY>:
100035b8:	00 10 00 00                                         ....

100035bc <VIRT_KERNEL_BASE>:
100035bc:	00 00 00 c0                                         ....

100035c0 <VIRT_LOW_MEGS>:
100035c0:	00 00 00 c2                                         ....

100035c4 <VIRT_CPU_SPECIFIC>:
100035c4:	00 00 40 c2                                         ..@.

100035c8 <VIRT_RECURSIVE_SPOT_1>:
100035c8:	00 00 80 c2                                         ....

100035cc <VIRT_RECURSIVE_SPOT_2>:
100035cc:	00 00 c0 c2                                         ....

100035d0 <VIRT_DMA_MEMORY_1>:
100035d0:	00 00 01 c2                                         ....

100035d4 <SIZE_DMA_MEMORY_1>:
100035d4:	00 00 01 00                                         ....

100035d8 <VIRT_DMA_MEMORY_2>:
100035d8:	00 00 06 c2                                         ....

100035dc <SIZE_DMA_MEMORY_2>:
100035dc:	00 00 02 00                                         ....

100035e0 <VIRT_KRNL_PAGE_DIRECTORY>:
100035e0:	00 10 00 c2                                         ....

100035e4 <VIRT_PHYS_PAGE_BITMAP>:
100035e4:	00 00 02 c2                                         ....

100035e8 <SIZE_PHYS_PAGE_BITMAP>:
100035e8:	00 00 02 00                                         ....

100035ec <VIRT_VIRT_PAGE_BITMAP>:
100035ec:	00 00 04 c2                                         ....

100035f0 <SIZE_VIRT_PAGE_BITMAP>:
100035f0:	00 80 00 00                                         ....

100035f4 <VIRT_RAM_TABLE>:
100035f4:	00 06 00 c2                                         ....

100035f8 <VIRT_RAM_TABLE_SIZE>:
100035f8:	13 05 00 c2                                         ....

100035fc <VIRT_HIGHEST_UNUSED_ADDRESS>:
100035fc:	24 05 00 c2                                         $...

10003600 <SIZE_APP_STACK_USER>:
10003600:	00 00 18 00                                         ....

10003604 <SIZE_APP_STACK_KRNL>:
10003604:	00 00 08 00                                         ....

10003608 <SIZE_APP_STACK_TOTAL>:
10003608:	00 00 20 00                                         .. .

1000360c <VIRT_APP_DATA>:
1000360c:	00 00 00 10                                         ....

10003610 <VIRT_APP_STACK_USER_TOP>:
10003610:	00 00 00 02                                         ....

10003614 <VIRT_APP_STACK_KRNL_TOP>:
10003614:	00 00 e8 01                                         ....

10003618 <VIRT_HEAP_MIN>:
10003618:	00 00 00 c8                                         ....

1000361c <VIRT_HEAP_MAX>:
1000361c:	ff ff ff ef                                         ....

10003620 <VIRT_SBRK_MIN>:
10003620:	00 00 00 f0                                         ....

10003624 <VIRT_SBRK_MAX>:
10003624:	00 00 c0 ff                                         ....

10003628 <VIRT_ALLOCED_VIRT_PAGES>:
10003628:	00 00 10 c2                                         ....

1000362c <VIRT_ACPI_DRIVER>:
1000362c:	00 40 48 c2                                         .@H.

10003630 <TERMINAL_KEYBUFFER_IN_SIZE>:
10003630:	96 00 00 00                                         ....

10003634 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10003634:	2c 01 00 00                                         ,...

10003638 <vtable for PS2Mouse>:
	...
	10003640: R_386_32	PS2Mouse::~PS2Mouse()
	10003644: R_386_32	PS2Mouse::~PS2Mouse()
	10003648: R_386_32	PS2Mouse::open(int, int, void*)
	1000364c: R_386_32	PS2Mouse::close(int, int, void*)
	10003650: R_386_32	Device::hibernate()
	10003654: R_386_32	Device::wake()
	10003658: R_386_32	PS2Mouse::detect()
	1000365c: R_386_32	Device::disableLegacy()
	10003660: R_386_32	Device::powerSaving(PowerSavingLevel)

10003664 <PHYS_RAM_TABLE_SIZE>:
10003664:	13 05 00 00                                         ....

10003668 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10003668:	24 05 00 00                                         $...

1000366c <PHYS_RAM_TABLE>:
1000366c:	00 06 00 00                                         ....

10003670 <PHYS_DMA_MEMORY_1>:
10003670:	00 00 01 00                                         ....

10003674 <PHYS_PHYS_PAGE_BITMAP>:
10003674:	00 00 02 00                                         ....

10003678 <PHYS_VIRT_PAGE_BITMAP>:
10003678:	00 00 04 00                                         ....

1000367c <PHYS_DMA_MEMORY_2>:
1000367c:	00 00 06 00                                         ....

10003680 <PHYS_ALLOCED_VIRT_PAGES>:
10003680:	00 00 10 00                                         ....

10003684 <PHYS_KRNL_PAGE_DIRECTORY>:
10003684:	00 10 00 00                                         ....

10003688 <VIRT_KERNEL_BASE>:
10003688:	00 00 00 c0                                         ....

1000368c <VIRT_LOW_MEGS>:
1000368c:	00 00 00 c2                                         ....

10003690 <VIRT_CPU_SPECIFIC>:
10003690:	00 00 40 c2                                         ..@.

10003694 <VIRT_RECURSIVE_SPOT_1>:
10003694:	00 00 80 c2                                         ....

10003698 <VIRT_RECURSIVE_SPOT_2>:
10003698:	00 00 c0 c2                                         ....

1000369c <VIRT_DMA_MEMORY_1>:
1000369c:	00 00 01 c2                                         ....

100036a0 <SIZE_DMA_MEMORY_1>:
100036a0:	00 00 01 00                                         ....

100036a4 <VIRT_DMA_MEMORY_2>:
100036a4:	00 00 06 c2                                         ....

100036a8 <SIZE_DMA_MEMORY_2>:
100036a8:	00 00 02 00                                         ....

100036ac <VIRT_KRNL_PAGE_DIRECTORY>:
100036ac:	00 10 00 c2                                         ....

100036b0 <VIRT_PHYS_PAGE_BITMAP>:
100036b0:	00 00 02 c2                                         ....

100036b4 <SIZE_PHYS_PAGE_BITMAP>:
100036b4:	00 00 02 00                                         ....

100036b8 <VIRT_VIRT_PAGE_BITMAP>:
100036b8:	00 00 04 c2                                         ....

100036bc <SIZE_VIRT_PAGE_BITMAP>:
100036bc:	00 80 00 00                                         ....

100036c0 <VIRT_RAM_TABLE>:
100036c0:	00 06 00 c2                                         ....

100036c4 <VIRT_RAM_TABLE_SIZE>:
100036c4:	13 05 00 c2                                         ....

100036c8 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100036c8:	24 05 00 c2                                         $...

100036cc <SIZE_APP_STACK_USER>:
100036cc:	00 00 18 00                                         ....

100036d0 <SIZE_APP_STACK_KRNL>:
100036d0:	00 00 08 00                                         ....

100036d4 <SIZE_APP_STACK_TOTAL>:
100036d4:	00 00 20 00                                         .. .

100036d8 <VIRT_APP_DATA>:
100036d8:	00 00 00 10                                         ....

100036dc <VIRT_APP_STACK_USER_TOP>:
100036dc:	00 00 00 02                                         ....

100036e0 <VIRT_APP_STACK_KRNL_TOP>:
100036e0:	00 00 e8 01                                         ....

100036e4 <VIRT_HEAP_MIN>:
100036e4:	00 00 00 c8                                         ....

100036e8 <VIRT_HEAP_MAX>:
100036e8:	ff ff ff ef                                         ....

100036ec <VIRT_SBRK_MIN>:
100036ec:	00 00 00 f0                                         ....

100036f0 <VIRT_SBRK_MAX>:
100036f0:	00 00 c0 ff                                         ....

100036f4 <VIRT_ALLOCED_VIRT_PAGES>:
100036f4:	00 00 10 c2                                         ....

100036f8 <VIRT_ACPI_DRIVER>:
100036f8:	00 40 48 c2                                         .@H.

100036fc <TERMINAL_KEYBUFFER_IN_SIZE>:
100036fc:	96 00 00 00                                         ....

10003700 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10003700:	2c 01 00 00                                         ,...

10003704 <vtable for PS2Port>:
	...
	1000370c: R_386_32	PS2Port::~PS2Port()
	10003710: R_386_32	PS2Port::~PS2Port()
	10003714: R_386_32	PS2Port::open(int, int, void*)
	10003718: R_386_32	PS2Port::close(int, int, void*)
	1000371c: R_386_32	Device::hibernate()
	10003720: R_386_32	Device::wake()
	10003724: R_386_32	PS2Port::detect()
	10003728: R_386_32	Device::disableLegacy()
	1000372c: R_386_32	Device::powerSaving(PowerSavingLevel)

10003730 <PHYS_RAM_TABLE_SIZE>:
10003730:	13 05 00 00                                         ....

10003734 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10003734:	24 05 00 00                                         $...

10003738 <PHYS_RAM_TABLE>:
10003738:	00 06 00 00                                         ....

1000373c <PHYS_DMA_MEMORY_1>:
1000373c:	00 00 01 00                                         ....

10003740 <PHYS_PHYS_PAGE_BITMAP>:
10003740:	00 00 02 00                                         ....

10003744 <PHYS_VIRT_PAGE_BITMAP>:
10003744:	00 00 04 00                                         ....

10003748 <PHYS_DMA_MEMORY_2>:
10003748:	00 00 06 00                                         ....

1000374c <PHYS_ALLOCED_VIRT_PAGES>:
1000374c:	00 00 10 00                                         ....

10003750 <PHYS_KRNL_PAGE_DIRECTORY>:
10003750:	00 10 00 00                                         ....

10003754 <VIRT_KERNEL_BASE>:
10003754:	00 00 00 c0                                         ....

10003758 <VIRT_LOW_MEGS>:
10003758:	00 00 00 c2                                         ....

1000375c <VIRT_CPU_SPECIFIC>:
1000375c:	00 00 40 c2                                         ..@.

10003760 <VIRT_RECURSIVE_SPOT_1>:
10003760:	00 00 80 c2                                         ....

10003764 <VIRT_RECURSIVE_SPOT_2>:
10003764:	00 00 c0 c2                                         ....

10003768 <VIRT_DMA_MEMORY_1>:
10003768:	00 00 01 c2                                         ....

1000376c <SIZE_DMA_MEMORY_1>:
1000376c:	00 00 01 00                                         ....

10003770 <VIRT_DMA_MEMORY_2>:
10003770:	00 00 06 c2                                         ....

10003774 <SIZE_DMA_MEMORY_2>:
10003774:	00 00 02 00                                         ....

10003778 <VIRT_KRNL_PAGE_DIRECTORY>:
10003778:	00 10 00 c2                                         ....

1000377c <VIRT_PHYS_PAGE_BITMAP>:
1000377c:	00 00 02 c2                                         ....

10003780 <SIZE_PHYS_PAGE_BITMAP>:
10003780:	00 00 02 00                                         ....

10003784 <VIRT_VIRT_PAGE_BITMAP>:
10003784:	00 00 04 c2                                         ....

10003788 <SIZE_VIRT_PAGE_BITMAP>:
10003788:	00 80 00 00                                         ....

1000378c <VIRT_RAM_TABLE>:
1000378c:	00 06 00 c2                                         ....

10003790 <VIRT_RAM_TABLE_SIZE>:
10003790:	13 05 00 c2                                         ....

10003794 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10003794:	24 05 00 c2                                         $...

10003798 <SIZE_APP_STACK_USER>:
10003798:	00 00 18 00                                         ....

1000379c <SIZE_APP_STACK_KRNL>:
1000379c:	00 00 08 00                                         ....

100037a0 <SIZE_APP_STACK_TOTAL>:
100037a0:	00 00 20 00                                         .. .

100037a4 <VIRT_APP_DATA>:
100037a4:	00 00 00 10                                         ....

100037a8 <VIRT_APP_STACK_USER_TOP>:
100037a8:	00 00 00 02                                         ....

100037ac <VIRT_APP_STACK_KRNL_TOP>:
100037ac:	00 00 e8 01                                         ....

100037b0 <VIRT_HEAP_MIN>:
100037b0:	00 00 00 c8                                         ....

100037b4 <VIRT_HEAP_MAX>:
100037b4:	ff ff ff ef                                         ....

100037b8 <VIRT_SBRK_MIN>:
100037b8:	00 00 00 f0                                         ....

100037bc <VIRT_SBRK_MAX>:
100037bc:	00 00 c0 ff                                         ....

100037c0 <VIRT_ALLOCED_VIRT_PAGES>:
100037c0:	00 00 10 c2                                         ....

100037c4 <VIRT_ACPI_DRIVER>:
100037c4:	00 40 48 c2                                         .@H.

100037c8 <TERMINAL_KEYBUFFER_IN_SIZE>:
100037c8:	96 00 00 00                                         ....

100037cc <TERMINAL_KEYBUFFER_OUT_SIZE>:
100037cc:	2c 01 00 00 53 4f 4e 47 20 53 48 4f 55 4c 44 20     ,...SONG SHOULD 
100037dc:	42 45 20 44 4f 4e 45 2e 0a 00 66 90                 BE DONE...f.

100037e8 <vtable for SoundBlaster16>:
	...
	100037f0: R_386_32	SoundBlaster16::~SoundBlaster16()
	100037f4: R_386_32	SoundBlaster16::~SoundBlaster16()
	100037f8: R_386_32	SoundBlaster16::open(int, int, void*)
	100037fc: R_386_32	SoundBlaster16::close(int, int, void*)
	10003800: R_386_32	Device::hibernate()
	10003804: R_386_32	Device::wake()
	10003808: R_386_32	Device::detect()
	1000380c: R_386_32	Device::disableLegacy()
	10003810: R_386_32	Device::powerSaving(PowerSavingLevel)
	10003814: R_386_32	SoundBlaster16::getNumHwChannels()
	10003818: R_386_32	SoundBlaster16::beginPlayback(int, int)
	1000381c: R_386_32	SoundBlaster16::stopPlayback()
