
packages/system/32/0002/legacy.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <start(void*)+0xd>	1000000d: R_386_PC32	realstart(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <realstart(void*)>:
10000017:	53                   	push   ebx
10000018:	83 ec 14             	sub    esp,0x14
1000001b:	68 58 01 00 00       	push   0x158
10000020:	e8 fc ff ff ff       	call   10000021 <realstart(void*)+0xa>	10000021: R_386_PC32	malloc
10000025:	89 04 24             	mov    DWORD PTR [esp],eax
10000028:	89 c3                	mov    ebx,eax
1000002a:	e8 fc ff ff ff       	call   1000002b <realstart(void*)+0x14>	1000002b: R_386_PC32	ISA::ISA()
1000002f:	58                   	pop    eax
10000030:	5a                   	pop    edx
10000031:	53                   	push   ebx
10000032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000036:	e8 fc ff ff ff       	call   10000037 <realstart(void*)+0x20>	10000037: R_386_PC32	Device::addChild(Device*)
1000003b:	6a 00                	push   0x0
1000003d:	8b 03                	mov    eax,DWORD PTR [ebx]
1000003f:	6a 00                	push   0x0
10000041:	6a 00                	push   0x0
10000043:	53                   	push   ebx
10000044:	ff 50 08             	call   DWORD PTR [eax+0x8]
10000047:	83 c4 28             	add    esp,0x28
1000004a:	5b                   	pop    ebx
1000004b:	c3                   	ret    

1000004c <ISA::ISA()>:
1000004c:	55                   	push   ebp
1000004d:	89 e5                	mov    ebp,esp
1000004f:	83 ec 08             	sub    esp,0x8
10000052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000055:	83 ec 08             	sub    esp,0x8
10000058:	68 4c 4c 00 10       	push   0x10004c4c	10000059: R_386_32	.text
1000005d:	50                   	push   eax
1000005e:	e8 fc ff ff ff       	call   1000005f <ISA::ISA()+0x13>	1000005f: R_386_PC32	Bus::Bus(char const*)
10000063:	83 c4 10             	add    esp,0x10
10000066:	ba 08 00 00 00       	mov    edx,0x8	10000067: R_386_32	vtable for ISA
1000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000006e:	89 10                	mov    DWORD PTR [eax],edx
10000070:	90                   	nop
10000071:	c9                   	leave  
10000072:	c3                   	ret    
10000073:	90                   	nop

10000074 <ISA::open(int, int, void*)>:
10000074:	83 ec 18             	sub    esp,0x18
10000077:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000007b:	8b 10                	mov    edx,DWORD PTR [eax]
1000007d:	50                   	push   eax
1000007e:	ff 52 18             	call   DWORD PTR [edx+0x18]
10000081:	31 c0                	xor    eax,eax
10000083:	83 c4 1c             	add    esp,0x1c
10000086:	c3                   	ret    
10000087:	90                   	nop

10000088 <ISA::close(int, int, void*)>:
10000088:	31 c0                	xor    eax,eax
1000008a:	c3                   	ret    
1000008b:	90                   	nop

1000008c <ISA::doSpeaker()>:
1000008c:	c3                   	ret    
1000008d:	90                   	nop

1000008e <ISA::doSoundblaster()>:
1000008e:	c3                   	ret    
1000008f:	90                   	nop

10000090 <ISA::doSerial()>:
10000090:	c3                   	ret    
10000091:	90                   	nop

10000092 <ISA::doParallel()>:
10000092:	c3                   	ret    
10000093:	90                   	nop

10000094 <ISA::doGameport()>:
10000094:	53                   	push   ebx
10000095:	83 ec 14             	sub    esp,0x14
10000098:	68 80 01 00 00       	push   0x180
1000009d:	e8 fc ff ff ff       	call   1000009e <ISA::doGameport()+0xa>	1000009e: R_386_PC32	malloc
100000a2:	89 04 24             	mov    DWORD PTR [esp],eax
100000a5:	89 c3                	mov    ebx,eax
100000a7:	e8 fc ff ff ff       	call   100000a8 <ISA::doGameport()+0x14>	100000a8: R_386_PC32	Gameport::Gameport()
100000ac:	58                   	pop    eax
100000ad:	5a                   	pop    edx
100000ae:	53                   	push   ebx
100000af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000b3:	e8 fc ff ff ff       	call   100000b4 <ISA::doGameport()+0x20>	100000b4: R_386_PC32	Device::addChild(Device*)
100000b8:	6a 00                	push   0x0
100000ba:	8b 03                	mov    eax,DWORD PTR [ebx]
100000bc:	6a 00                	push   0x0
100000be:	6a 00                	push   0x0
100000c0:	53                   	push   ebx
100000c1:	ff 50 08             	call   DWORD PTR [eax+0x8]
100000c4:	83 c4 28             	add    esp,0x28
100000c7:	5b                   	pop    ebx
100000c8:	c3                   	ret    
100000c9:	90                   	nop

100000ca <ISA::doFloppy()>:
100000ca:	f6 05 10 04 00 00 01 	test   BYTE PTR ds:0x410,0x1
100000d1:	74 38                	je     1000010b <ISA::doFloppy()+0x41>
100000d3:	53                   	push   ebx
100000d4:	83 ec 14             	sub    esp,0x14
100000d7:	68 b8 01 00 00       	push   0x1b8
100000dc:	e8 fc ff ff ff       	call   100000dd <ISA::doFloppy()+0x13>	100000dd: R_386_PC32	malloc
100000e1:	89 04 24             	mov    DWORD PTR [esp],eax
100000e4:	89 c3                	mov    ebx,eax
100000e6:	e8 fc ff ff ff       	call   100000e7 <ISA::doFloppy()+0x1d>	100000e7: R_386_PC32	Floppy::Floppy()
100000eb:	58                   	pop    eax
100000ec:	5a                   	pop    edx
100000ed:	53                   	push   ebx
100000ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100000f2:	e8 fc ff ff ff       	call   100000f3 <ISA::doFloppy()+0x29>	100000f3: R_386_PC32	Device::addChild(Device*)
100000f7:	6a 00                	push   0x0
100000f9:	6a 00                	push   0x0
100000fb:	68 f0 03 00 00       	push   0x3f0
10000100:	53                   	push   ebx
10000101:	e8 fc ff ff ff       	call   10000102 <ISA::doFloppy()+0x38>	10000102: R_386_PC32	Floppy::_open(int, int, void*)
10000106:	83 c4 28             	add    esp,0x28
10000109:	5b                   	pop    ebx
1000010a:	c3                   	ret    
1000010b:	c3                   	ret    

1000010c <ISA::doATA()>:
1000010c:	c3                   	ret    
1000010d:	90                   	nop

1000010e <ISA::doPS2()>:
1000010e:	53                   	push   ebx
1000010f:	83 ec 14             	sub    esp,0x14
10000112:	68 00 00 00 00       	push   0x0	10000113: R_386_32	str_ps2
10000117:	e8 fc ff ff ff       	call   10000118 <ISA::doPS2()+0xa>	10000118: R_386_PC32	Dbg::kprintf(char const*, ...)
1000011c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	1000011f: R_386_32	str_ps2
10000123:	e8 fc ff ff ff       	call   10000124 <ISA::doPS2()+0x16>	10000124: R_386_PC32	Dbg::kprintf(char const*, ...)
10000128:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	1000012b: R_386_32	str_ps2
1000012f:	e8 fc ff ff ff       	call   10000130 <ISA::doPS2()+0x22>	10000130: R_386_PC32	Dbg::kprintf(char const*, ...)
10000134:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10000137: R_386_32	str_ps2
1000013b:	e8 fc ff ff ff       	call   1000013c <ISA::doPS2()+0x2e>	1000013c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000140:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
10000147:	e8 fc ff ff ff       	call   10000148 <ISA::doPS2()+0x3a>	10000148: R_386_PC32	malloc
1000014c:	89 04 24             	mov    DWORD PTR [esp],eax
1000014f:	89 c3                	mov    ebx,eax
10000151:	e8 fc ff ff ff       	call   10000152 <ISA::doPS2()+0x44>	10000152: R_386_PC32	PS2::PS2()
10000156:	58                   	pop    eax
10000157:	5a                   	pop    edx
10000158:	53                   	push   ebx
10000159:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000015d:	e8 fc ff ff ff       	call   1000015e <ISA::doPS2()+0x50>	1000015e: R_386_PC32	Device::addChild(Device*)
10000162:	6a 00                	push   0x0
10000164:	8b 03                	mov    eax,DWORD PTR [ebx]
10000166:	6a 00                	push   0x0
10000168:	6a 00                	push   0x0
1000016a:	53                   	push   ebx
1000016b:	ff 50 08             	call   DWORD PTR [eax+0x8]
1000016e:	83 c4 28             	add    esp,0x28
10000171:	5b                   	pop    ebx
10000172:	c3                   	ret    
10000173:	90                   	nop

10000174 <ISA::doRTC()>:
10000174:	c3                   	ret    
10000175:	90                   	nop

10000176 <ISA::detect()>:
10000176:	57                   	push   edi
10000177:	56                   	push   esi
10000178:	53                   	push   ebx
10000179:	83 ec 2c             	sub    esp,0x2c
1000017c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
10000180:	68 5c 01 00 00       	push   0x15c
10000185:	e8 fc ff ff ff       	call   10000186 <ISA::detect()+0x10>	10000186: R_386_PC32	malloc
1000018a:	89 04 24             	mov    DWORD PTR [esp],eax
1000018d:	89 c3                	mov    ebx,eax
1000018f:	e8 fc ff ff ff       	call   10000190 <ISA::detect()+0x1a>	10000190: R_386_PC32	DMA::DMA()
10000194:	59                   	pop    ecx
10000195:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000197: R_386_32	isaDMAController
1000019b:	5e                   	pop    esi
1000019c:	53                   	push   ebx
1000019d:	57                   	push   edi
1000019e:	e8 fc ff ff ff       	call   1000019f <ISA::detect()+0x29>	1000019f: R_386_PC32	Device::addChild(Device*)
100001a3:	a1 00 00 00 00       	mov    eax,ds:0x0	100001a4: R_386_32	isaDMAController
100001a8:	8b 10                	mov    edx,DWORD PTR [eax]
100001aa:	6a 00                	push   0x0
100001ac:	6a 00                	push   0x0
100001ae:	6a 00                	push   0x0
100001b0:	50                   	push   eax
100001b1:	ff 52 08             	call   DWORD PTR [edx+0x8]
100001b4:	83 c4 20             	add    esp,0x20
100001b7:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100001b9: R_386_32	detectDone
100001be:	0f 85 eb 00 00 00    	jne    100002af <ISA::detect()+0x139>
100001c4:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100001c6: R_386_32	detectDone
100001cb:	31 db                	xor    ebx,ebx
100001cd:	52                   	push   edx
100001ce:	6a 01                	push   0x1
100001d0:	68 00 00 00 00       	push   0x0	100001d1: R_386_32	str_isadonesafe
100001d5:	68 00 00 00 00       	push   0x0	100001d6: R_386_32	str_isa
100001da:	e8 fc ff ff ff       	call   100001db <ISA::detect()+0x65>	100001db: R_386_PC32	Reg::readBoolWithDefault(char*, char*, bool)
100001df:	83 c4 10             	add    esp,0x10
100001e2:	50                   	push   eax
100001e3:	50                   	push   eax
100001e4:	68 00 00 00 00       	push   0x0	100001e5: R_386_32	str_devices
100001e9:	8d 74 24 0c          	lea    esi,[esp+0xc]
100001ed:	56                   	push   esi
100001ee:	e8 fc ff ff ff       	call   100001ef <ISA::detect()+0x79>	100001ef: R_386_PC32	strcpy
100001f3:	83 c4 10             	add    esp,0x10
100001f6:	85 db                	test   ebx,ebx
100001f8:	75 09                	jne    10000203 <ISA::detect()+0x8d>
100001fa:	50                   	push   eax
100001fb:	50                   	push   eax
100001fc:	68 00 00 00 00       	push   0x0	100001fd: R_386_32	str_spk
10000201:	eb 52                	jmp    10000255 <ISA::detect()+0xdf>
10000203:	83 fb 01             	cmp    ebx,0x1
10000206:	75 09                	jne    10000211 <ISA::detect()+0x9b>
10000208:	50                   	push   eax
10000209:	50                   	push   eax
1000020a:	68 00 00 00 00       	push   0x0	1000020b: R_386_32	str_rtc
1000020f:	eb 44                	jmp    10000255 <ISA::detect()+0xdf>
10000211:	83 fb 02             	cmp    ebx,0x2
10000214:	75 09                	jne    1000021f <ISA::detect()+0xa9>
10000216:	50                   	push   eax
10000217:	50                   	push   eax
10000218:	68 00 00 00 00       	push   0x0	10000219: R_386_32	str_ps2
1000021d:	eb 36                	jmp    10000255 <ISA::detect()+0xdf>
1000021f:	83 fb 03             	cmp    ebx,0x3
10000222:	75 09                	jne    1000022d <ISA::detect()+0xb7>
10000224:	50                   	push   eax
10000225:	50                   	push   eax
10000226:	68 00 00 00 00       	push   0x0	10000227: R_386_32	str_floppy
1000022b:	eb 28                	jmp    10000255 <ISA::detect()+0xdf>
1000022d:	83 fb 04             	cmp    ebx,0x4
10000230:	75 09                	jne    1000023b <ISA::detect()+0xc5>
10000232:	50                   	push   eax
10000233:	50                   	push   eax
10000234:	68 00 00 00 00       	push   0x0	10000235: R_386_32	str_sb16
10000239:	eb 1a                	jmp    10000255 <ISA::detect()+0xdf>
1000023b:	83 fb 05             	cmp    ebx,0x5
1000023e:	75 09                	jne    10000249 <ISA::detect()+0xd3>
10000240:	51                   	push   ecx
10000241:	51                   	push   ecx
10000242:	68 00 00 00 00       	push   0x0	10000243: R_386_32	str_isaata
10000247:	eb 0c                	jmp    10000255 <ISA::detect()+0xdf>
10000249:	83 fb 06             	cmp    ebx,0x6
1000024c:	75 10                	jne    1000025e <ISA::detect()+0xe8>
1000024e:	52                   	push   edx
1000024f:	52                   	push   edx
10000250:	68 00 00 00 00       	push   0x0	10000251: R_386_32	str_gp
10000255:	56                   	push   esi
10000256:	e8 fc ff ff ff       	call   10000257 <ISA::detect()+0xe1>	10000257: R_386_PC32	strcat
1000025b:	83 c4 10             	add    esp,0x10
1000025e:	50                   	push   eax
1000025f:	6a ff                	push   0xffffffff
10000261:	56                   	push   esi
10000262:	68 00 00 00 00       	push   0x0	10000263: R_386_32	str_isa
10000267:	e8 fc ff ff ff       	call   10000268 <ISA::detect()+0xf2>	10000268: R_386_PC32	Reg::readIntWithDefault(char*, char*, int)
1000026c:	83 c4 10             	add    esp,0x10
1000026f:	83 f8 fe             	cmp    eax,0xfffffffe
10000272:	74 31                	je     100002a5 <ISA::detect()+0x12f>
10000274:	83 fb 02             	cmp    ebx,0x2
10000277:	75 0b                	jne    10000284 <ISA::detect()+0x10e>
10000279:	83 ec 0c             	sub    esp,0xc
1000027c:	57                   	push   edi
1000027d:	e8 fc ff ff ff       	call   1000027e <ISA::detect()+0x108>	1000027e: R_386_PC32	ISA::doPS2()
10000282:	eb 1e                	jmp    100002a2 <ISA::detect()+0x12c>
10000284:	83 fb 03             	cmp    ebx,0x3
10000287:	75 0b                	jne    10000294 <ISA::detect()+0x11e>
10000289:	83 ec 0c             	sub    esp,0xc
1000028c:	57                   	push   edi
1000028d:	e8 fc ff ff ff       	call   1000028e <ISA::detect()+0x118>	1000028e: R_386_PC32	ISA::doFloppy()
10000292:	eb 0e                	jmp    100002a2 <ISA::detect()+0x12c>
10000294:	83 fb 06             	cmp    ebx,0x6
10000297:	75 0c                	jne    100002a5 <ISA::detect()+0x12f>
10000299:	83 ec 0c             	sub    esp,0xc
1000029c:	57                   	push   edi
1000029d:	e8 fc ff ff ff       	call   1000029e <ISA::detect()+0x128>	1000029e: R_386_PC32	ISA::doGameport()
100002a2:	83 c4 10             	add    esp,0x10
100002a5:	43                   	inc    ebx
100002a6:	83 fb 07             	cmp    ebx,0x7
100002a9:	0f 85 33 ff ff ff    	jne    100001e2 <ISA::detect()+0x6c>
100002af:	83 c4 20             	add    esp,0x20
100002b2:	5b                   	pop    ebx
100002b3:	5e                   	pop    esi
100002b4:	5f                   	pop    edi
100002b5:	c3                   	ret    

100002b6 <floppyMotorFunction(void*)>:
100002b6:	55                   	push   ebp
100002b7:	89 e5                	mov    ebp,esp
100002b9:	83 ec 18             	sub    esp,0x18
100002bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002bf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100002c2:	a1 00 00 00 00       	mov    eax,ds:0x0	100002c3: R_386_32	irqDisableCounter
100002c7:	48                   	dec    eax
100002c8:	a3 00 00 00 00       	mov    ds:0x0,eax	100002c9: R_386_32	irqDisableCounter
100002cd:	a1 00 00 00 00       	mov    eax,ds:0x0	100002ce: R_386_32	irqDisableCounter
100002d2:	85 c0                	test   eax,eax
100002d4:	75 01                	jne    100002d7 <floppyMotorFunction(void*)+0x21>
100002d6:	fb                   	sti    
100002d7:	83 ec 08             	sub    esp,0x8
100002da:	6a 00                	push   0x0
100002dc:	68 00 84 d7 17       	push   0x17d78400
100002e1:	e8 fc ff ff ff       	call   100002e2 <floppyMotorFunction(void*)+0x2c>	100002e2: R_386_PC32	nanoSleep(unsigned long long)
100002e6:	83 c4 10             	add    esp,0x10
100002e9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100002f0:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
100002f4:	7f e1                	jg     100002d7 <floppyMotorFunction(void*)+0x21>
100002f6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100002f9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100002fc:	83 c2 58             	add    edx,0x58
100002ff:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000303:	83 f8 02             	cmp    eax,0x2
10000306:	0f 85 b5 00 00 00    	jne    100003c1 <floppyMotorFunction(void*)+0x10b>
1000030c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000030f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000312:	83 c2 5c             	add    edx,0x5c
10000315:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000319:	8d 88 70 fe ff ff    	lea    ecx,[eax-0x190]
1000031f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000322:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000325:	83 c2 5c             	add    edx,0x5c
10000328:	89 4c 90 0c          	mov    DWORD PTR [eax+edx*4+0xc],ecx
1000032c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000032f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000332:	83 c2 5c             	add    edx,0x5c
10000335:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10000339:	85 c0                	test   eax,eax
1000033b:	0f 8f 80 00 00 00    	jg     100003c1 <floppyMotorFunction(void*)+0x10b>
10000341:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000344:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10000347:	83 c2 58             	add    edx,0x58
1000034a:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
10000352:	83 ec 0c             	sub    esp,0xc
10000355:	68 20 4d 00 10       	push   0x10004d20	10000356: R_386_32	.text
1000035a:	e8 fc ff ff ff       	call   1000035b <floppyMotorFunction(void*)+0xa5>	1000035b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000035f:	83 c4 10             	add    esp,0x10
10000362:	fa                   	cli    
10000363:	a1 00 00 00 00       	mov    eax,ds:0x0	10000364: R_386_32	irqDisableCounter
10000368:	40                   	inc    eax
10000369:	a3 00 00 00 00       	mov    ds:0x0,eax	1000036a: R_386_32	irqDisableCounter
1000036e:	83 ec 08             	sub    esp,0x8
10000371:	6a 02                	push   0x2
10000373:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10000376:	e8 fc ff ff ff       	call   10000377 <floppyMotorFunction(void*)+0xc1>	10000377: R_386_PC32	Floppy::readPort(FloppyReg)
1000037b:	83 c4 10             	add    esp,0x10
1000037e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000381:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000384:	ba 10 00 00 00       	mov    edx,0x10
10000389:	88 c1                	mov    cl,al
1000038b:	d3 e2                	shl    edx,cl
1000038d:	89 d0                	mov    eax,edx
1000038f:	f7 d0                	not    eax
10000391:	88 c2                	mov    dl,al
10000393:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000396:	21 d0                	and    eax,edx
10000398:	0f b6 c0             	movzx  eax,al
1000039b:	83 ec 04             	sub    esp,0x4
1000039e:	50                   	push   eax
1000039f:	6a 02                	push   0x2
100003a1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100003a4:	e8 fc ff ff ff       	call   100003a5 <floppyMotorFunction(void*)+0xef>	100003a5: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100003a9:	83 c4 10             	add    esp,0x10
100003ac:	a1 00 00 00 00       	mov    eax,ds:0x0	100003ad: R_386_32	irqDisableCounter
100003b1:	48                   	dec    eax
100003b2:	a3 00 00 00 00       	mov    ds:0x0,eax	100003b3: R_386_32	irqDisableCounter
100003b7:	a1 00 00 00 00       	mov    eax,ds:0x0	100003b8: R_386_32	irqDisableCounter
100003bc:	85 c0                	test   eax,eax
100003be:	75 01                	jne    100003c1 <floppyMotorFunction(void*)+0x10b>
100003c0:	fb                   	sti    
100003c1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100003c4:	e9 27 ff ff ff       	jmp    100002f0 <floppyMotorFunction(void*)+0x3a>

100003c9 <floppyIRQHandler(regs*, void*)>:
100003c9:	55                   	push   ebp
100003ca:	89 e5                	mov    ebp,esp
100003cc:	83 ec 10             	sub    esp,0x10
100003cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100003d2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100003d5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100003d8:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
100003df:	90                   	nop
100003e0:	c9                   	leave  
100003e1:	c3                   	ret    

100003e2 <Floppy::Floppy()>:
100003e2:	55                   	push   ebp
100003e3:	89 e5                	mov    ebp,esp
100003e5:	83 ec 08             	sub    esp,0x8
100003e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100003eb:	83 ec 08             	sub    esp,0x8
100003ee:	68 41 4d 00 10       	push   0x10004d41	100003ef: R_386_32	.text
100003f3:	50                   	push   eax
100003f4:	e8 fc ff ff ff       	call   100003f5 <Floppy::Floppy()+0x13>	100003f5: R_386_PC32	HardDiskController::HardDiskController(char const*)
100003f9:	83 c4 10             	add    esp,0x10
100003fc:	ba 08 00 00 00       	mov    edx,0x8	100003fd: R_386_32	vtable for Floppy
10000401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000404:	89 10                	mov    DWORD PTR [eax],edx
10000406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000409:	66 c7 80 58 01 00 00 f0 03 	mov    WORD PTR [eax+0x158],0x3f0
10000412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000415:	c6 80 8c 01 00 00 01 	mov    BYTE PTR [eax+0x18c],0x1
1000041c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000041f:	c6 80 8d 01 00 00 00 	mov    BYTE PTR [eax+0x18d],0x0
10000426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000429:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000433:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
1000043a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000043d:	c6 80 90 01 00 00 01 	mov    BYTE PTR [eax+0x190],0x1
10000444:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000447:	c6 80 91 01 00 00 01 	mov    BYTE PTR [eax+0x191],0x1
1000044e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000451:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000045b:	c7 80 94 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x194],0xffffffff
10000465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000468:	83 ec 0c             	sub    esp,0xc
1000046b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000046e:	6a 01                	push   0x1
10000470:	68 00 00 00 00       	push   0x0	10000471: R_386_32	floppyIRQHandler(regs*, void*)
10000475:	6a 06                	push   0x6
10000477:	50                   	push   eax
10000478:	e8 fc ff ff ff       	call   10000479 <Floppy::Floppy()+0x97>	10000479: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
1000047d:	83 c4 20             	add    esp,0x20
10000480:	89 c2                	mov    edx,eax
10000482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000485:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
1000048b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000048c: R_386_32	kernelProcess
10000490:	68 d2 00 00 00       	push   0xd2
10000495:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000498:	68 00 00 00 00       	push   0x0	10000499: R_386_32	floppyMotorFunction(void*)
1000049d:	50                   	push   eax
1000049e:	e8 fc ff ff ff       	call   1000049f <Floppy::Floppy()+0xbd>	1000049f: R_386_PC32	Process::createThread(void (*)(void*), void*, int)
100004a3:	83 c4 10             	add    esp,0x10
100004a6:	89 c2                	mov    edx,eax
100004a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004ab:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
100004b1:	a1 00 00 00 00       	mov    eax,ds:0x0	100004b2: R_386_32	isaDMAController
100004b6:	83 ec 08             	sub    esp,0x8
100004b9:	6a 02                	push   0x2
100004bb:	50                   	push   eax
100004bc:	e8 fc ff ff ff       	call   100004bd <Floppy::Floppy()+0xdb>	100004bd: R_386_PC32	DMA::tryLockChannel(int)
100004c1:	83 c4 10             	add    esp,0x10
100004c4:	89 c2                	mov    edx,eax
100004c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004c9:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
100004cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004d2:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
100004d8:	83 ec 08             	sub    esp,0x8
100004db:	68 00 48 00 00       	push   0x4800
100004e0:	50                   	push   eax
100004e1:	e8 fc ff ff ff       	call   100004e2 <Floppy::Floppy()+0x100>	100004e2: R_386_PC32	DMAChannel::allocateAddressAndSet(unsigned short)
100004e6:	83 c4 10             	add    esp,0x10
100004e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100004ec:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
100004f2:	83 ec 0c             	sub    esp,0xc
100004f5:	50                   	push   eax
100004f6:	e8 fc ff ff ff       	call   100004f7 <Floppy::Floppy()+0x115>	100004f7: R_386_PC32	DMAChannel::getAddress()
100004fb:	83 c4 10             	add    esp,0x10
100004fe:	89 c2                	mov    edx,eax
10000500:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000503:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
10000509:	90                   	nop
1000050a:	c9                   	leave  
1000050b:	c3                   	ret    

1000050c <Floppy::wasFailure()>:
1000050c:	55                   	push   ebp
1000050d:	89 e5                	mov    ebp,esp
1000050f:	83 ec 10             	sub    esp,0x10
10000512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000515:	c6 80 8f 01 00 00 01 	mov    BYTE PTR [eax+0x18f],0x1
1000051c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000051f:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
10000525:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000528:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000052b:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000532:	8a 45 ff             	mov    al,BYTE PTR [ebp-0x1]
10000535:	c9                   	leave  
10000536:	c3                   	ret    
10000537:	90                   	nop

10000538 <Floppy::writeCommand(unsigned char)>:
10000538:	55                   	push   ebp
10000539:	89 e5                	mov    ebp,esp
1000053b:	83 ec 28             	sub    esp,0x28
1000053e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000541:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000547:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
1000054d:	84 c0                	test   al,al
1000054f:	74 10                	je     10000561 <Floppy::writeCommand(unsigned char)+0x29>
10000551:	83 ec 0c             	sub    esp,0xc
10000554:	68 58 4d 00 10       	push   0x10004d58	10000555: R_386_32	.text
10000559:	e8 fc ff ff ff       	call   1000055a <Floppy::writeCommand(unsigned char)+0x22>	1000055a: R_386_PC32	Krnl::panic(char const*)
1000055e:	83 c4 10             	add    esp,0x10
10000561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000564:	8a 80 8f 01 00 00    	mov    al,BYTE PTR [eax+0x18f]
1000056a:	83 f0 01             	xor    eax,0x1
1000056d:	84 c0                	test   al,al
1000056f:	74 10                	je     10000581 <Floppy::writeCommand(unsigned char)+0x49>
10000571:	83 ec 0c             	sub    esp,0xc
10000574:	68 88 4d 00 10       	push   0x10004d88	10000575: R_386_32	.text
10000579:	e8 fc ff ff ff       	call   1000057a <Floppy::writeCommand(unsigned char)+0x42>	1000057a: R_386_PC32	Krnl::panic(char const*)
1000057e:	83 c4 10             	add    esp,0x10
10000581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000584:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
1000058b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000058e:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000595:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000059c:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
100005a0:	7f 53                	jg     100005f5 <Floppy::writeCommand(unsigned char)+0xbd>
100005a2:	83 ec 08             	sub    esp,0x8
100005a5:	6a 00                	push   0x0
100005a7:	68 80 96 98 00       	push   0x989680
100005ac:	e8 fc ff ff ff       	call   100005ad <Floppy::writeCommand(unsigned char)+0x75>	100005ad: R_386_PC32	nanoSleep(unsigned long long)
100005b1:	83 c4 10             	add    esp,0x10
100005b4:	83 ec 08             	sub    esp,0x8
100005b7:	6a 04                	push   0x4
100005b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005bc:	e8 fc ff ff ff       	call   100005bd <Floppy::writeCommand(unsigned char)+0x85>	100005bd: R_386_PC32	Floppy::readPort(FloppyReg)
100005c1:	83 c4 10             	add    esp,0x10
100005c4:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
100005c7:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
100005ca:	84 c0                	test   al,al
100005cc:	79 22                	jns    100005f0 <Floppy::writeCommand(unsigned char)+0xb8>
100005ce:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
100005d2:	83 e0 40             	and    eax,0x40
100005d5:	85 c0                	test   eax,eax
100005d7:	75 17                	jne    100005f0 <Floppy::writeCommand(unsigned char)+0xb8>
100005d9:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
100005dd:	83 ec 04             	sub    esp,0x4
100005e0:	50                   	push   eax
100005e1:	6a 05                	push   0x5
100005e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100005e6:	e8 fc ff ff ff       	call   100005e7 <Floppy::writeCommand(unsigned char)+0xaf>	100005e7: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
100005eb:	83 c4 10             	add    esp,0x10
100005ee:	eb 0f                	jmp    100005ff <Floppy::writeCommand(unsigned char)+0xc7>
100005f0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100005f3:	eb a7                	jmp    1000059c <Floppy::writeCommand(unsigned char)+0x64>
100005f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005f8:	c6 80 8e 01 00 00 01 	mov    BYTE PTR [eax+0x18e],0x1
100005ff:	c9                   	leave  
10000600:	c3                   	ret    
10000601:	90                   	nop

10000602 <Floppy::readData()>:
10000602:	55                   	push   ebp
10000603:	89 e5                	mov    ebp,esp
10000605:	83 ec 18             	sub    esp,0x18
10000608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000060b:	8a 80 8e 01 00 00    	mov    al,BYTE PTR [eax+0x18e]
10000611:	84 c0                	test   al,al
10000613:	74 10                	je     10000625 <Floppy::readData()+0x23>
10000615:	83 ec 0c             	sub    esp,0xc
10000618:	68 58 4d 00 10       	push   0x10004d58	10000619: R_386_32	.text
1000061d:	e8 fc ff ff ff       	call   1000061e <Floppy::readData()+0x1c>	1000061e: R_386_PC32	Krnl::panic(char const*)
10000622:	83 c4 10             	add    esp,0x10
10000625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000628:	8a 80 8f 01 00 00    	mov    al,BYTE PTR [eax+0x18f]
1000062e:	83 f0 01             	xor    eax,0x1
10000631:	84 c0                	test   al,al
10000633:	74 10                	je     10000645 <Floppy::readData()+0x43>
10000635:	83 ec 0c             	sub    esp,0xc
10000638:	68 88 4d 00 10       	push   0x10004d88	10000639: R_386_32	.text
1000063d:	e8 fc ff ff ff       	call   1000063e <Floppy::readData()+0x3c>	1000063e: R_386_PC32	Krnl::panic(char const*)
10000642:	83 c4 10             	add    esp,0x10
10000645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000648:	c6 80 8f 01 00 00 00 	mov    BYTE PTR [eax+0x18f],0x0
1000064f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000652:	c6 80 8e 01 00 00 00 	mov    BYTE PTR [eax+0x18e],0x0
10000659:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000660:	83 7d f4 31          	cmp    DWORD PTR [ebp-0xc],0x31
10000664:	7f 4e                	jg     100006b4 <Floppy::readData()+0xb2>
10000666:	83 ec 08             	sub    esp,0x8
10000669:	6a 00                	push   0x0
1000066b:	68 80 96 98 00       	push   0x989680
10000670:	e8 fc ff ff ff       	call   10000671 <Floppy::readData()+0x6f>	10000671: R_386_PC32	nanoSleep(unsigned long long)
10000675:	83 c4 10             	add    esp,0x10
10000678:	83 ec 08             	sub    esp,0x8
1000067b:	6a 04                	push   0x4
1000067d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000680:	e8 fc ff ff ff       	call   10000681 <Floppy::readData()+0x7f>	10000681: R_386_PC32	Floppy::readPort(FloppyReg)
10000685:	83 c4 10             	add    esp,0x10
10000688:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000068b:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000068e:	84 c0                	test   al,al
10000690:	79 1d                	jns    100006af <Floppy::readData()+0xad>
10000692:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10000696:	83 e0 40             	and    eax,0x40
10000699:	85 c0                	test   eax,eax
1000069b:	74 12                	je     100006af <Floppy::readData()+0xad>
1000069d:	83 ec 08             	sub    esp,0x8
100006a0:	6a 05                	push   0x5
100006a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100006a5:	e8 fc ff ff ff       	call   100006a6 <Floppy::readData()+0xa4>	100006a6: R_386_PC32	Floppy::readPort(FloppyReg)
100006aa:	83 c4 10             	add    esp,0x10
100006ad:	eb 11                	jmp    100006c0 <Floppy::readData()+0xbe>
100006af:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100006b2:	eb ac                	jmp    10000660 <Floppy::readData()+0x5e>
100006b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006b7:	c6 80 8e 01 00 00 01 	mov    BYTE PTR [eax+0x18e],0x1
100006be:	b0 00                	mov    al,0x0
100006c0:	c9                   	leave  
100006c1:	c3                   	ret    

100006c2 <Floppy::readPort(FloppyReg)>:
100006c2:	55                   	push   ebp
100006c3:	89 e5                	mov    ebp,esp
100006c5:	83 ec 10             	sub    esp,0x10
100006c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006cb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100006d1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100006d4:	01 d0                	add    eax,edx
100006d6:	0f b7 c0             	movzx  eax,ax
100006d9:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
100006dd:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
100006e1:	89 c2                	mov    edx,eax
100006e3:	ec                   	in     al,dx
100006e4:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
100006e7:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
100006ea:	90                   	nop
100006eb:	c9                   	leave  
100006ec:	c3                   	ret    
100006ed:	90                   	nop

100006ee <Floppy::writePort(FloppyReg, unsigned char)>:
100006ee:	55                   	push   ebp
100006ef:	89 e5                	mov    ebp,esp
100006f1:	83 ec 14             	sub    esp,0x14
100006f4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100006f7:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
100006fa:	0f b6 4d ec          	movzx  ecx,BYTE PTR [ebp-0x14]
100006fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000701:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000707:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000070a:	01 d0                	add    eax,edx
1000070c:	0f b7 c0             	movzx  eax,ax
1000070f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
10000713:	88 4d fd             	mov    BYTE PTR [ebp-0x3],cl
10000716:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
10000719:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
1000071d:	ee                   	out    dx,al
1000071e:	90                   	nop
1000071f:	c9                   	leave  
10000720:	c3                   	ret    
10000721:	90                   	nop

10000722 <Floppy::driveDetection()>:
10000722:	55                   	push   ebp
10000723:	89 e5                	mov    ebp,esp
10000725:	53                   	push   ebx
10000726:	83 ec 24             	sub    esp,0x24
10000729:	83 ec 0c             	sub    esp,0xc
1000072c:	68 b6 4d 00 10       	push   0x10004db6	1000072d: R_386_32	.text
10000731:	e8 fc ff ff ff       	call   10000732 <Floppy::driveDetection()+0x10>	10000732: R_386_PC32	Dbg::kprintf(char const*, ...)
10000736:	83 c4 10             	add    esp,0x10
10000739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000073c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10000742:	66 3d f0 03          	cmp    ax,0x3f0
10000746:	0f 85 28 01 00 00    	jne    10000874 <Floppy::driveDetection()+0x152>
1000074c:	a1 00 00 00 00       	mov    eax,ds:0x0	1000074d: R_386_32	Krnl::computer
10000751:	83 ec 08             	sub    esp,0x8
10000754:	6a 10                	push   0x10
10000756:	50                   	push   eax
10000757:	e8 fc ff ff ff       	call   10000758 <Floppy::driveDetection()+0x36>	10000758: R_386_PC32	Computer::readCMOS(unsigned char)
1000075c:	83 c4 10             	add    esp,0x10
1000075f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000762:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000766:	c1 f8 04             	sar    eax,0x4
10000769:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000076c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000770:	83 e0 0f             	and    eax,0xf
10000773:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000776:	83 ec 08             	sub    esp,0x8
10000779:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000077c:	68 d0 4d 00 10       	push   0x10004dd0	1000077d: R_386_32	.text
10000781:	e8 fc ff ff ff       	call   10000782 <Floppy::driveDetection()+0x60>	10000782: R_386_PC32	Dbg::kprintf(char const*, ...)
10000786:	83 c4 10             	add    esp,0x10
10000789:	83 ec 08             	sub    esp,0x8
1000078c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000078f:	68 e4 4d 00 10       	push   0x10004de4	10000790: R_386_32	.text
10000794:	e8 fc ff ff ff       	call   10000795 <Floppy::driveDetection()+0x73>	10000795: R_386_PC32	Dbg::kprintf(char const*, ...)
10000799:	83 c4 10             	add    esp,0x10
1000079c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100007a0:	74 63                	je     10000805 <Floppy::driveDetection()+0xe3>
100007a2:	c7 45 e0 74 01 00 00 	mov    DWORD PTR [ebp-0x20],0x174
100007a9:	83 ec 0c             	sub    esp,0xc
100007ac:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100007af:	e8 fc ff ff ff       	call   100007b0 <Floppy::driveDetection()+0x8e>	100007b0: R_386_PC32	malloc
100007b4:	83 c4 10             	add    esp,0x10
100007b7:	89 c3                	mov    ebx,eax
100007b9:	83 ec 0c             	sub    esp,0xc
100007bc:	53                   	push   ebx
100007bd:	e8 fc ff ff ff       	call   100007be <Floppy::driveDetection()+0x9c>	100007be: R_386_PC32	FloppyDrive::FloppyDrive()
100007c2:	83 c4 10             	add    esp,0x10
100007c5:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
100007c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007cb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100007ce:	89 90 98 01 00 00    	mov    DWORD PTR [eax+0x198],edx
100007d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007d7:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
100007da:	89 90 a8 01 00 00    	mov    DWORD PTR [eax+0x1a8],edx
100007e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100007e3:	83 ec 08             	sub    esp,0x8
100007e6:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007e9:	50                   	push   eax
100007ea:	e8 fc ff ff ff       	call   100007eb <Floppy::driveDetection()+0xc9>	100007eb: R_386_PC32	Device::addChild(Device*)
100007ef:	83 c4 10             	add    esp,0x10
100007f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100007f5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100007f8:	6a 00                	push   0x0
100007fa:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100007fd:	e8 fc ff ff ff       	call   100007fe <Floppy::driveDetection()+0xdc>	100007fe: R_386_PC32	FloppyDrive::_open(int, int, void*)
10000802:	83 c4 10             	add    esp,0x10
10000805:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10000809:	74 69                	je     10000874 <Floppy::driveDetection()+0x152>
1000080b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
1000080f:	74 63                	je     10000874 <Floppy::driveDetection()+0x152>
10000811:	c7 45 dc 74 01 00 00 	mov    DWORD PTR [ebp-0x24],0x174
10000818:	83 ec 0c             	sub    esp,0xc
1000081b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000081e:	e8 fc ff ff ff       	call   1000081f <Floppy::driveDetection()+0xfd>	1000081f: R_386_PC32	malloc
10000823:	83 c4 10             	add    esp,0x10
10000826:	89 c3                	mov    ebx,eax
10000828:	83 ec 0c             	sub    esp,0xc
1000082b:	53                   	push   ebx
1000082c:	e8 fc ff ff ff       	call   1000082d <Floppy::driveDetection()+0x10b>	1000082d: R_386_PC32	FloppyDrive::FloppyDrive()
10000831:	83 c4 10             	add    esp,0x10
10000834:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10000837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000083a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
1000083d:	89 90 9c 01 00 00    	mov    DWORD PTR [eax+0x19c],edx
10000843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000846:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10000849:	89 90 ac 01 00 00    	mov    DWORD PTR [eax+0x1ac],edx
1000084f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000852:	83 ec 08             	sub    esp,0x8
10000855:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000858:	50                   	push   eax
10000859:	e8 fc ff ff ff       	call   1000085a <Floppy::driveDetection()+0x138>	1000085a: R_386_PC32	Device::addChild(Device*)
1000085e:	83 c4 10             	add    esp,0x10
10000861:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000864:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10000867:	6a 01                	push   0x1
10000869:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000086c:	e8 fc ff ff ff       	call   1000086d <Floppy::driveDetection()+0x14b>	1000086d: R_386_PC32	FloppyDrive::_open(int, int, void*)
10000871:	83 c4 10             	add    esp,0x10
10000874:	90                   	nop
10000875:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000878:	c9                   	leave  
10000879:	c3                   	ret    

1000087a <Floppy::close(int, int, void*)>:
1000087a:	b8 00 00 00 00       	mov    eax,0x0
1000087f:	c3                   	ret    

10000880 <Floppy::open(int, int, void*)>:
10000880:	b8 00 00 00 00       	mov    eax,0x0
10000885:	c3                   	ret    

10000886 <Floppy::_open(int, int, void*)>:
10000886:	55                   	push   ebp
10000887:	89 e5                	mov    ebp,esp
10000889:	83 ec 18             	sub    esp,0x18
1000088c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000088f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10000892:	66 89 82 58 01 00 00 	mov    WORD PTR [edx+0x158],ax
10000899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000089c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100008a2:	0f b6 c8             	movzx  ecx,al
100008a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008a8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100008ae:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008b1:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
100008b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100008bf:	0f b6 d0             	movzx  edx,al
100008c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008c5:	c6 44 90 06 06       	mov    BYTE PTR [eax+edx*4+0x6],0x6
100008ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008cd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100008d3:	8d 50 01             	lea    edx,[eax+0x1]
100008d6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100008d9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100008df:	0f b6 d0             	movzx  edx,al
100008e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008e5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100008e9:	83 e1 3f             	and    ecx,0x3f
100008ec:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100008f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100008f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100008f9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100008fc:	8a 92 c4 00 00 00    	mov    dl,BYTE PTR [edx+0xc4]
10000902:	0f b6 ca             	movzx  ecx,dl
10000905:	83 c0 07             	add    eax,0x7
10000908:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000090b:	66 89 44 8a 04       	mov    WORD PTR [edx+ecx*4+0x4],ax
10000910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000913:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10000919:	0f b6 d0             	movzx  edx,al
1000091c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000091f:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10000924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000927:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000092d:	8d 50 01             	lea    edx,[eax+0x1]
10000930:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10000933:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10000939:	0f b6 d0             	movzx  edx,al
1000093c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000093f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10000943:	83 e1 3f             	and    ecx,0x3f
10000946:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000094a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000951:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
10000955:	7f 27                	jg     1000097e <Floppy::_open(int, int, void*)+0xf8>
10000957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000095a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000095d:	83 c2 68             	add    edx,0x68
10000960:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
10000968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000096b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000096e:	83 c2 58             	add    edx,0x58
10000971:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
10000979:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000097c:	eb d3                	jmp    10000951 <Floppy::_open(int, int, void*)+0xcb>
1000097e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000981:	e8 fc ff ff ff       	call   10000982 <Floppy::_open(int, int, void*)+0xfc>	10000982: R_386_PC32	Floppy::wasFailure()
10000986:	83 c4 04             	add    esp,0x4
10000989:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000098c:	c6 80 91 01 00 00 01 	mov    BYTE PTR [eax+0x191],0x1
10000993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000996:	c6 80 8d 01 00 00 00 	mov    BYTE PTR [eax+0x18d],0x0
1000099d:	83 ec 0c             	sub    esp,0xc
100009a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009a3:	e8 fc ff ff ff       	call   100009a4 <Floppy::_open(int, int, void*)+0x11e>	100009a4: R_386_PC32	Floppy::reset()
100009a8:	83 c4 10             	add    esp,0x10
100009ab:	83 ec 0c             	sub    esp,0xc
100009ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009b1:	e8 fc ff ff ff       	call   100009b2 <Floppy::_open(int, int, void*)+0x12c>	100009b2: R_386_PC32	Floppy::driveDetection()
100009b6:	83 c4 10             	add    esp,0x10
100009b9:	b8 00 00 00 00       	mov    eax,0x0
100009be:	c9                   	leave  
100009bf:	c3                   	ret    

100009c0 <Floppy::senseInterrupt(int*, int*)>:
100009c0:	55                   	push   ebp
100009c1:	89 e5                	mov    ebp,esp
100009c3:	83 ec 08             	sub    esp,0x8
100009c6:	83 ec 08             	sub    esp,0x8
100009c9:	6a 08                	push   0x8
100009cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009ce:	e8 fc ff ff ff       	call   100009cf <Floppy::senseInterrupt(int*, int*)+0xf>	100009cf: R_386_PC32	Floppy::writeCommand(unsigned char)
100009d3:	83 c4 10             	add    esp,0x10
100009d6:	83 ec 0c             	sub    esp,0xc
100009d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009dc:	e8 fc ff ff ff       	call   100009dd <Floppy::senseInterrupt(int*, int*)+0x1d>	100009dd: R_386_PC32	Floppy::wasFailure()
100009e1:	83 c4 10             	add    esp,0x10
100009e4:	84 c0                	test   al,al
100009e6:	74 04                	je     100009ec <Floppy::senseInterrupt(int*, int*)+0x2c>
100009e8:	b0 00                	mov    al,0x0
100009ea:	eb 5a                	jmp    10000a46 <Floppy::senseInterrupt(int*, int*)+0x86>
100009ec:	83 ec 0c             	sub    esp,0xc
100009ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100009f2:	e8 fc ff ff ff       	call   100009f3 <Floppy::senseInterrupt(int*, int*)+0x33>	100009f3: R_386_PC32	Floppy::readData()
100009f7:	83 c4 10             	add    esp,0x10
100009fa:	0f b6 d0             	movzx  edx,al
100009fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000a00:	89 10                	mov    DWORD PTR [eax],edx
10000a02:	83 ec 0c             	sub    esp,0xc
10000a05:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a08:	e8 fc ff ff ff       	call   10000a09 <Floppy::senseInterrupt(int*, int*)+0x49>	10000a09: R_386_PC32	Floppy::wasFailure()
10000a0d:	83 c4 10             	add    esp,0x10
10000a10:	84 c0                	test   al,al
10000a12:	74 04                	je     10000a18 <Floppy::senseInterrupt(int*, int*)+0x58>
10000a14:	b0 00                	mov    al,0x0
10000a16:	eb 2e                	jmp    10000a46 <Floppy::senseInterrupt(int*, int*)+0x86>
10000a18:	83 ec 0c             	sub    esp,0xc
10000a1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a1e:	e8 fc ff ff ff       	call   10000a1f <Floppy::senseInterrupt(int*, int*)+0x5f>	10000a1f: R_386_PC32	Floppy::readData()
10000a23:	83 c4 10             	add    esp,0x10
10000a26:	0f b6 d0             	movzx  edx,al
10000a29:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000a2c:	89 10                	mov    DWORD PTR [eax],edx
10000a2e:	83 ec 0c             	sub    esp,0xc
10000a31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a34:	e8 fc ff ff ff       	call   10000a35 <Floppy::senseInterrupt(int*, int*)+0x75>	10000a35: R_386_PC32	Floppy::wasFailure()
10000a39:	83 c4 10             	add    esp,0x10
10000a3c:	84 c0                	test   al,al
10000a3e:	74 04                	je     10000a44 <Floppy::senseInterrupt(int*, int*)+0x84>
10000a40:	b0 00                	mov    al,0x0
10000a42:	eb 02                	jmp    10000a46 <Floppy::senseInterrupt(int*, int*)+0x86>
10000a44:	b0 01                	mov    al,0x1
10000a46:	c9                   	leave  
10000a47:	c3                   	ret    

10000a48 <Floppy::lock()>:
10000a48:	55                   	push   ebp
10000a49:	89 e5                	mov    ebp,esp
10000a4b:	83 ec 08             	sub    esp,0x8
10000a4e:	83 ec 08             	sub    esp,0x8
10000a51:	6a 14                	push   0x14
10000a53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a56:	e8 fc ff ff ff       	call   10000a57 <Floppy::lock()+0xf>	10000a57: R_386_PC32	Floppy::writeCommand(unsigned char)
10000a5b:	83 c4 10             	add    esp,0x10
10000a5e:	83 ec 0c             	sub    esp,0xc
10000a61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a64:	e8 fc ff ff ff       	call   10000a65 <Floppy::lock()+0x1d>	10000a65: R_386_PC32	Floppy::wasFailure()
10000a69:	83 c4 10             	add    esp,0x10
10000a6c:	84 c0                	test   al,al
10000a6e:	74 04                	je     10000a74 <Floppy::lock()+0x2c>
10000a70:	b0 00                	mov    al,0x0
10000a72:	eb 26                	jmp    10000a9a <Floppy::lock()+0x52>
10000a74:	83 ec 0c             	sub    esp,0xc
10000a77:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a7a:	e8 fc ff ff ff       	call   10000a7b <Floppy::lock()+0x33>	10000a7b: R_386_PC32	Floppy::readData()
10000a7f:	83 c4 10             	add    esp,0x10
10000a82:	83 ec 0c             	sub    esp,0xc
10000a85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000a88:	e8 fc ff ff ff       	call   10000a89 <Floppy::lock()+0x41>	10000a89: R_386_PC32	Floppy::wasFailure()
10000a8d:	83 c4 10             	add    esp,0x10
10000a90:	84 c0                	test   al,al
10000a92:	74 04                	je     10000a98 <Floppy::lock()+0x50>
10000a94:	b0 00                	mov    al,0x0
10000a96:	eb 02                	jmp    10000a9a <Floppy::lock()+0x52>
10000a98:	b0 01                	mov    al,0x1
10000a9a:	c9                   	leave  
10000a9b:	c3                   	ret    

10000a9c <Floppy::waitIRQ(int)>:
10000a9c:	55                   	push   ebp
10000a9d:	89 e5                	mov    ebp,esp
10000a9f:	83 ec 18             	sub    esp,0x18
10000aa2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10000aa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000aac:	8a 80 68 01 00 00    	mov    al,BYTE PTR [eax+0x168]
10000ab2:	84 c0                	test   al,al
10000ab4:	75 21                	jne    10000ad7 <Floppy::waitIRQ(int)+0x3b>
10000ab6:	83 ec 08             	sub    esp,0x8
10000ab9:	6a 00                	push   0x0
10000abb:	68 80 f0 fa 02       	push   0x2faf080
10000ac0:	e8 fc ff ff ff       	call   10000ac1 <Floppy::waitIRQ(int)+0x25>	10000ac1: R_386_PC32	nanoSleep(unsigned long long)
10000ac5:	83 c4 10             	add    esp,0x10
10000ac8:	83 45 f4 32          	add    DWORD PTR [ebp-0xc],0x32
10000acc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000acf:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
10000ad2:	7d 02                	jge    10000ad6 <Floppy::waitIRQ(int)+0x3a>
10000ad4:	eb d3                	jmp    10000aa9 <Floppy::waitIRQ(int)+0xd>
10000ad6:	90                   	nop
10000ad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ada:	8a 80 68 01 00 00    	mov    al,BYTE PTR [eax+0x168]
10000ae0:	c9                   	leave  
10000ae1:	c3                   	ret    

10000ae2 <Floppy::reset()>:
10000ae2:	55                   	push   ebp
10000ae3:	89 e5                	mov    ebp,esp
10000ae5:	83 ec 28             	sub    esp,0x28
10000ae8:	83 ec 0c             	sub    esp,0xc
10000aeb:	68 f8 4d 00 10       	push   0x10004df8	10000aec: R_386_32	.text
10000af0:	e8 fc ff ff ff       	call   10000af1 <Floppy::reset()+0xf>	10000af1: R_386_PC32	Dbg::kprintf(char const*, ...)
10000af5:	83 c4 10             	add    esp,0x10
10000af8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000afb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10000b02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b05:	c7 80 94 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x194],0xffffffff
10000b0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000b12:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000b19:	83 ec 08             	sub    esp,0x8
10000b1c:	6a 02                	push   0x2
10000b1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b21:	e8 fc ff ff ff       	call   10000b22 <Floppy::reset()+0x40>	10000b22: R_386_PC32	Floppy::readPort(FloppyReg)
10000b26:	83 c4 10             	add    esp,0x10
10000b29:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10000b2c:	83 ec 04             	sub    esp,0x4
10000b2f:	6a 00                	push   0x0
10000b31:	6a 02                	push   0x2
10000b33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b36:	e8 fc ff ff ff       	call   10000b37 <Floppy::reset()+0x55>	10000b37: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000b3b:	83 c4 10             	add    esp,0x10
10000b3e:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000b41:	83 c8 0c             	or     eax,0xc
10000b44:	0f b6 c0             	movzx  eax,al
10000b47:	83 ec 04             	sub    esp,0x4
10000b4a:	50                   	push   eax
10000b4b:	6a 02                	push   0x2
10000b4d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b50:	e8 fc ff ff ff       	call   10000b51 <Floppy::reset()+0x6f>	10000b51: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000b55:	83 c4 10             	add    esp,0x10
10000b58:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
10000b5c:	83 e0 08             	and    eax,0x8
10000b5f:	85 c0                	test   eax,eax
10000b61:	74 3f                	je     10000ba2 <Floppy::reset()+0xc0>
10000b63:	83 ec 08             	sub    esp,0x8
10000b66:	68 90 01 00 00       	push   0x190
10000b6b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b6e:	e8 fc ff ff ff       	call   10000b6f <Floppy::reset()+0x8d>	10000b6f: R_386_PC32	Floppy::waitIRQ(int)
10000b73:	83 c4 10             	add    esp,0x10
10000b76:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
10000b79:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
10000b7c:	83 f0 01             	xor    eax,0x1
10000b7f:	84 c0                	test   al,al
10000b81:	74 3e                	je     10000bc1 <Floppy::reset()+0xdf>
10000b83:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000b86:	83 c8 0c             	or     eax,0xc
10000b89:	0f b6 c0             	movzx  eax,al
10000b8c:	83 ec 04             	sub    esp,0x4
10000b8f:	50                   	push   eax
10000b90:	6a 02                	push   0x2
10000b92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000b95:	e8 fc ff ff ff       	call   10000b96 <Floppy::reset()+0xb4>	10000b96: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000b9a:	83 c4 10             	add    esp,0x10
10000b9d:	e9 56 ff ff ff       	jmp    10000af8 <Floppy::reset()+0x16>
10000ba2:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10000ba5:	83 c8 0c             	or     eax,0xc
10000ba8:	0f b6 c0             	movzx  eax,al
10000bab:	83 ec 04             	sub    esp,0x4
10000bae:	50                   	push   eax
10000baf:	6a 02                	push   0x2
10000bb1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bb4:	e8 fc ff ff ff       	call   10000bb5 <Floppy::reset()+0xd3>	10000bb5: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000bb9:	83 c4 10             	add    esp,0x10
10000bbc:	e9 37 ff ff ff       	jmp    10000af8 <Floppy::reset()+0x16>
10000bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000bc4:	8a 80 91 01 00 00    	mov    al,BYTE PTR [eax+0x191]
10000bca:	84 c0                	test   al,al
10000bcc:	0f 84 8f 00 00 00    	je     10000c61 <Floppy::reset()+0x17f>
10000bd2:	83 ec 04             	sub    esp,0x4
10000bd5:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000bd8:	50                   	push   eax
10000bd9:	8d 45 e8             	lea    eax,[ebp-0x18]
10000bdc:	50                   	push   eax
10000bdd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000be0:	e8 fc ff ff ff       	call   10000be1 <Floppy::reset()+0xff>	10000be1: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000be5:	83 c4 10             	add    esp,0x10
10000be8:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000beb:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000bef:	74 19                	je     10000c0a <Floppy::reset()+0x128>
10000bf1:	83 ec 04             	sub    esp,0x4
10000bf4:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000bf7:	50                   	push   eax
10000bf8:	8d 45 e8             	lea    eax,[ebp-0x18]
10000bfb:	50                   	push   eax
10000bfc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000bff:	e8 fc ff ff ff       	call   10000c00 <Floppy::reset()+0x11e>	10000c00: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000c04:	83 c4 10             	add    esp,0x10
10000c07:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c0a:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000c0e:	74 19                	je     10000c29 <Floppy::reset()+0x147>
10000c10:	83 ec 04             	sub    esp,0x4
10000c13:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000c16:	50                   	push   eax
10000c17:	8d 45 e8             	lea    eax,[ebp-0x18]
10000c1a:	50                   	push   eax
10000c1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c1e:	e8 fc ff ff ff       	call   10000c1f <Floppy::reset()+0x13d>	10000c1f: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000c23:	83 c4 10             	add    esp,0x10
10000c26:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c29:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10000c2d:	74 19                	je     10000c48 <Floppy::reset()+0x166>
10000c2f:	83 ec 04             	sub    esp,0x4
10000c32:	8d 45 e4             	lea    eax,[ebp-0x1c]
10000c35:	50                   	push   eax
10000c36:	8d 45 e8             	lea    eax,[ebp-0x18]
10000c39:	50                   	push   eax
10000c3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000c3d:	e8 fc ff ff ff       	call   10000c3e <Floppy::reset()+0x15c>	10000c3e: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10000c42:	83 c4 10             	add    esp,0x10
10000c45:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000c48:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000c4b:	83 f0 01             	xor    eax,0x1
10000c4e:	84 c0                	test   al,al
10000c50:	74 0f                	je     10000c61 <Floppy::reset()+0x17f>
10000c52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c55:	c6 80 91 01 00 00 00 	mov    BYTE PTR [eax+0x191],0x0
10000c5c:	e9 97 fe ff ff       	jmp    10000af8 <Floppy::reset()+0x16>
10000c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c64:	8a 80 8c 01 00 00    	mov    al,BYTE PTR [eax+0x18c]
10000c6a:	84 c0                	test   al,al
10000c6c:	75 14                	jne    10000c82 <Floppy::reset()+0x1a0>
10000c6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c71:	8a 80 8d 01 00 00    	mov    al,BYTE PTR [eax+0x18d]
10000c77:	83 f0 01             	xor    eax,0x1
10000c7a:	84 c0                	test   al,al
10000c7c:	0f 84 91 00 00 00    	je     10000d13 <Floppy::reset()+0x231>
10000c82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c85:	8a 80 90 01 00 00    	mov    al,BYTE PTR [eax+0x190]
10000c8b:	84 c0                	test   al,al
10000c8d:	74 3c                	je     10000ccb <Floppy::reset()+0x1e9>
10000c8f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
10000c96:	83 7d f0 03          	cmp    DWORD PTR [ebp-0x10],0x3
10000c9a:	7f 2f                	jg     10000ccb <Floppy::reset()+0x1e9>
10000c9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000c9f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000ca2:	83 c2 68             	add    edx,0x68
10000ca5:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000ca9:	85 c0                	test   eax,eax
10000cab:	74 19                	je     10000cc6 <Floppy::reset()+0x1e4>
10000cad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cb0:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10000cb3:	83 c2 68             	add    edx,0x68
10000cb6:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10000cba:	83 ec 0c             	sub    esp,0xc
10000cbd:	50                   	push   eax
10000cbe:	e8 fc ff ff ff       	call   10000cbf <Floppy::reset()+0x1dd>	10000cbf: R_386_PC32	FloppyDrive::floppyConfigure()
10000cc3:	83 c4 10             	add    esp,0x10
10000cc6:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
10000cc9:	eb cb                	jmp    10000c96 <Floppy::reset()+0x1b4>
10000ccb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cce:	8a 80 8d 01 00 00    	mov    al,BYTE PTR [eax+0x18d]
10000cd4:	83 f0 01             	xor    eax,0x1
10000cd7:	84 c0                	test   al,al
10000cd9:	74 38                	je     10000d13 <Floppy::reset()+0x231>
10000cdb:	83 ec 0c             	sub    esp,0xc
10000cde:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ce1:	e8 fc ff ff ff       	call   10000ce2 <Floppy::reset()+0x200>	10000ce2: R_386_PC32	Floppy::lock()
10000ce6:	83 c4 10             	add    esp,0x10
10000ce9:	83 f0 01             	xor    eax,0x1
10000cec:	88 c2                	mov    dl,al
10000cee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cf1:	88 90 8c 01 00 00    	mov    BYTE PTR [eax+0x18c],dl
10000cf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000cfa:	c6 80 8d 01 00 00 01 	mov    BYTE PTR [eax+0x18d],0x1
10000d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d04:	8a 80 8c 01 00 00    	mov    al,BYTE PTR [eax+0x18c]
10000d0a:	84 c0                	test   al,al
10000d0c:	74 05                	je     10000d13 <Floppy::reset()+0x231>
10000d0e:	e9 e5 fd ff ff       	jmp    10000af8 <Floppy::reset()+0x16>
10000d13:	90                   	nop
10000d14:	c9                   	leave  
10000d15:	c3                   	ret    

10000d16 <Floppy::dmaInit(bool)>:
10000d16:	55                   	push   ebp
10000d17:	89 e5                	mov    ebp,esp
10000d19:	83 ec 18             	sub    esp,0x18
10000d1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000d1f:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
10000d22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d25:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000d2b:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
10000d2f:	74 07                	je     10000d38 <Floppy::dmaInit(bool)+0x22>
10000d31:	ba 4a 00 00 00       	mov    edx,0x4a
10000d36:	eb 05                	jmp    10000d3d <Floppy::dmaInit(bool)+0x27>
10000d38:	ba 46 00 00 00       	mov    edx,0x46
10000d3d:	83 ec 08             	sub    esp,0x8
10000d40:	52                   	push   edx
10000d41:	50                   	push   eax
10000d42:	e8 fc ff ff ff       	call   10000d43 <Floppy::dmaInit(bool)+0x2d>	10000d43: R_386_PC32	DMAChannel::setMode(unsigned char)
10000d47:	83 c4 10             	add    esp,0x10
10000d4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d4d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
10000d53:	83 ec 0c             	sub    esp,0xc
10000d56:	50                   	push   eax
10000d57:	e8 fc ff ff ff       	call   10000d58 <Floppy::dmaInit(bool)+0x42>	10000d58: R_386_PC32	DMAChannel::start()
10000d5c:	83 c4 10             	add    esp,0x10
10000d5f:	90                   	nop
10000d60:	c9                   	leave  
10000d61:	c3                   	ret    

10000d62 <Floppy::specify(int)>:
10000d62:	55                   	push   ebp
10000d63:	89 e5                	mov    ebp,esp
10000d65:	57                   	push   edi
10000d66:	56                   	push   esi
10000d67:	53                   	push   ebx
10000d68:	83 ec 3c             	sub    esp,0x3c
10000d6b:	8d 45 c0             	lea    eax,[ebp-0x40]
10000d6e:	bb 24 4e 00 10       	mov    ebx,0x10004e24	10000d6f: R_386_32	.text
10000d73:	ba 04 00 00 00       	mov    edx,0x4
10000d78:	89 c7                	mov    edi,eax
10000d7a:	89 de                	mov    esi,ebx
10000d7c:	89 d1                	mov    ecx,edx
10000d7e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000d83:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000d86:	83 c2 64             	add    edx,0x64
10000d89:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10000d8d:	89 d0                	mov    eax,edx
10000d8f:	c1 e0 02             	shl    eax,0x2
10000d92:	01 d0                	add    eax,edx
10000d94:	c1 e0 02             	shl    eax,0x2
10000d97:	01 d0                	add    eax,edx
10000d99:	05 10 00 00 00       	add    eax,0x10	10000d9a: R_386_32	floppyTable
10000d9e:	8a 00                	mov    al,BYTE PTR [eax]
10000da0:	0f be c0             	movsx  eax,al
10000da3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10000da6:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
10000daa:	75 10                	jne    10000dbc <Floppy::specify(int)+0x5a>
10000dac:	83 ec 0c             	sub    esp,0xc
10000daf:	68 0e 4e 00 10       	push   0x10004e0e	10000db0: R_386_32	.text
10000db4:	e8 fc ff ff ff       	call   10000db5 <Floppy::specify(int)+0x53>	10000db5: R_386_PC32	Krnl::panic(char const*)
10000db9:	83 c4 10             	add    esp,0x10
10000dbc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000dbf:	8b 44 85 c0          	mov    eax,DWORD PTR [ebp+eax*4-0x40]
10000dc3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000dc6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000dc9:	89 c2                	mov    edx,eax
10000dcb:	c1 e0 03             	shl    eax,0x3
10000dce:	89 d1                	mov    ecx,edx
10000dd0:	29 c1                	sub    ecx,eax
10000dd2:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000dd7:	f7 e9                	imul   ecx
10000dd9:	c1 fa 11             	sar    edx,0x11
10000ddc:	89 c8                	mov    eax,ecx
10000dde:	c1 f8 1f             	sar    eax,0x1f
10000de1:	29 c2                	sub    edx,eax
10000de3:	89 d0                	mov    eax,edx
10000de5:	83 c0 10             	add    eax,0x10
10000de8:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10000deb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10000dee:	89 d0                	mov    eax,edx
10000df0:	01 c0                	add    eax,eax
10000df2:	01 d0                	add    eax,edx
10000df4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10000dfb:	01 d0                	add    eax,edx
10000dfd:	01 c0                	add    eax,eax
10000dff:	89 c1                	mov    ecx,eax
10000e01:	b8 83 de 1b 43       	mov    eax,0x431bde83
10000e06:	f7 e9                	imul   ecx
10000e08:	c1 fa 12             	sar    edx,0x12
10000e0b:	89 c8                	mov    eax,ecx
10000e0d:	c1 f8 1f             	sar    eax,0x1f
10000e10:	29 c2                	sub    edx,eax
10000e12:	89 d0                	mov    eax,edx
10000e14:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10000e17:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
10000e1e:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
10000e25:	83 ec 08             	sub    esp,0x8
10000e28:	6a 03                	push   0x3
10000e2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e2d:	e8 fc ff ff ff       	call   10000e2e <Floppy::specify(int)+0xcc>	10000e2e: R_386_PC32	Floppy::writeCommand(unsigned char)
10000e32:	83 c4 10             	add    esp,0x10
10000e35:	83 ec 0c             	sub    esp,0xc
10000e38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e3b:	e8 fc ff ff ff       	call   10000e3c <Floppy::specify(int)+0xda>	10000e3c: R_386_PC32	Floppy::wasFailure()
10000e40:	83 c4 10             	add    esp,0x10
10000e43:	84 c0                	test   al,al
10000e45:	74 04                	je     10000e4b <Floppy::specify(int)+0xe9>
10000e47:	b0 00                	mov    al,0x0
10000e49:	eb 6b                	jmp    10000eb6 <Floppy::specify(int)+0x154>
10000e4b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000e4e:	c1 e0 04             	shl    eax,0x4
10000e51:	88 c2                	mov    dl,al
10000e53:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10000e56:	09 d0                	or     eax,edx
10000e58:	0f b6 c0             	movzx  eax,al
10000e5b:	83 ec 08             	sub    esp,0x8
10000e5e:	50                   	push   eax
10000e5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e62:	e8 fc ff ff ff       	call   10000e63 <Floppy::specify(int)+0x101>	10000e63: R_386_PC32	Floppy::writeCommand(unsigned char)
10000e67:	83 c4 10             	add    esp,0x10
10000e6a:	83 ec 0c             	sub    esp,0xc
10000e6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e70:	e8 fc ff ff ff       	call   10000e71 <Floppy::specify(int)+0x10f>	10000e71: R_386_PC32	Floppy::wasFailure()
10000e75:	83 c4 10             	add    esp,0x10
10000e78:	84 c0                	test   al,al
10000e7a:	74 04                	je     10000e80 <Floppy::specify(int)+0x11e>
10000e7c:	b0 00                	mov    al,0x0
10000e7e:	eb 36                	jmp    10000eb6 <Floppy::specify(int)+0x154>
10000e80:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000e83:	01 c0                	add    eax,eax
10000e85:	88 c2                	mov    dl,al
10000e87:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000e8a:	09 d0                	or     eax,edx
10000e8c:	0f b6 c0             	movzx  eax,al
10000e8f:	83 ec 08             	sub    esp,0x8
10000e92:	50                   	push   eax
10000e93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000e96:	e8 fc ff ff ff       	call   10000e97 <Floppy::specify(int)+0x135>	10000e97: R_386_PC32	Floppy::writeCommand(unsigned char)
10000e9b:	83 c4 10             	add    esp,0x10
10000e9e:	83 ec 0c             	sub    esp,0xc
10000ea1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000ea4:	e8 fc ff ff ff       	call   10000ea5 <Floppy::specify(int)+0x143>	10000ea5: R_386_PC32	Floppy::wasFailure()
10000ea9:	83 c4 10             	add    esp,0x10
10000eac:	84 c0                	test   al,al
10000eae:	74 04                	je     10000eb4 <Floppy::specify(int)+0x152>
10000eb0:	b0 00                	mov    al,0x0
10000eb2:	eb 02                	jmp    10000eb6 <Floppy::specify(int)+0x154>
10000eb4:	b0 01                	mov    al,0x1
10000eb6:	8d 65 f4             	lea    esp,[ebp-0xc]
10000eb9:	5b                   	pop    ebx
10000eba:	5e                   	pop    esi
10000ebb:	5f                   	pop    edi
10000ebc:	5d                   	pop    ebp
10000ebd:	c3                   	ret    

10000ebe <Floppy::select(int, bool)>:
10000ebe:	55                   	push   ebp
10000ebf:	89 e5                	mov    ebp,esp
10000ec1:	83 ec 28             	sub    esp,0x28
10000ec4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10000ec7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10000eca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ecd:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000ed3:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000ed6:	75 27                	jne    10000eff <Floppy::select(int, bool)+0x41>
10000ed8:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
10000edb:	83 f0 01             	xor    eax,0x1
10000ede:	84 c0                	test   al,al
10000ee0:	74 1d                	je     10000eff <Floppy::select(int, bool)+0x41>
10000ee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ee5:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000eeb:	83 f8 ff             	cmp    eax,0xffffffff
10000eee:	74 0f                	je     10000eff <Floppy::select(int, bool)+0x41>
10000ef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000ef3:	c6 80 92 01 00 00 00 	mov    BYTE PTR [eax+0x192],0x0
10000efa:	e9 36 02 00 00       	jmp    10001135 <Floppy::select(int, bool)+0x277>
10000eff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f02:	8a 80 92 01 00 00    	mov    al,BYTE PTR [eax+0x192]
10000f08:	83 f0 01             	xor    eax,0x1
10000f0b:	84 c0                	test   al,al
10000f0d:	75 12                	jne    10000f21 <Floppy::select(int, bool)+0x63>
10000f0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f12:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000f18:	83 f8 ff             	cmp    eax,0xffffffff
10000f1b:	0f 85 14 02 00 00    	jne    10001135 <Floppy::select(int, bool)+0x277>
10000f21:	83 ec 08             	sub    esp,0x8
10000f24:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000f27:	68 34 4e 00 10       	push   0x10004e34	10000f28: R_386_32	.text
10000f2c:	e8 fc ff ff ff       	call   10000f2d <Floppy::select(int, bool)+0x6f>	10000f2d: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f31:	83 c4 10             	add    esp,0x10
10000f34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000f37:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
10000f3d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10000f40:	0f 84 b7 01 00 00    	je     100010fd <Floppy::select(int, bool)+0x23f>
10000f46:	83 ec 0c             	sub    esp,0xc
10000f49:	68 44 4e 00 10       	push   0x10004e44	10000f4a: R_386_32	.text
10000f4e:	e8 fc ff ff ff       	call   10000f4f <Floppy::select(int, bool)+0x91>	10000f4f: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f53:	83 c4 10             	add    esp,0x10
10000f56:	fa                   	cli    
10000f57:	a1 00 00 00 00       	mov    eax,ds:0x0	10000f58: R_386_32	irqDisableCounter
10000f5c:	40                   	inc    eax
10000f5d:	a3 00 00 00 00       	mov    ds:0x0,eax	10000f5e: R_386_32	irqDisableCounter
10000f62:	83 ec 0c             	sub    esp,0xc
10000f65:	68 51 4e 00 10       	push   0x10004e51	10000f66: R_386_32	.text
10000f6a:	e8 fc ff ff ff       	call   10000f6b <Floppy::select(int, bool)+0xad>	10000f6b: R_386_PC32	Dbg::kprintf(char const*, ...)
10000f6f:	83 c4 10             	add    esp,0x10
10000f72:	83 ec 08             	sub    esp,0x8
10000f75:	6a 02                	push   0x2
10000f77:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000f7a:	e8 fc ff ff ff       	call   10000f7b <Floppy::select(int, bool)+0xbd>	10000f7b: R_386_PC32	Floppy::readPort(FloppyReg)
10000f7f:	83 c4 10             	add    esp,0x10
10000f82:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000f85:	80 65 f7 fc          	and    BYTE PTR [ebp-0x9],0xfc
10000f89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10000f8c:	88 c2                	mov    dl,al
10000f8e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10000f91:	09 d0                	or     eax,edx
10000f93:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10000f96:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10000f9a:	83 ec 04             	sub    esp,0x4
10000f9d:	50                   	push   eax
10000f9e:	6a 02                	push   0x2
10000fa0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000fa3:	e8 fc ff ff ff       	call   10000fa4 <Floppy::select(int, bool)+0xe6>	10000fa4: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
10000fa8:	83 c4 10             	add    esp,0x10
10000fab:	83 ec 08             	sub    esp,0x8
10000fae:	6a 00                	push   0x0
10000fb0:	68 00 b4 c4 04       	push   0x4c4b400
10000fb5:	e8 fc ff ff ff       	call   10000fb6 <Floppy::select(int, bool)+0xf8>	10000fb6: R_386_PC32	nanoSleep(unsigned long long)
10000fba:	83 c4 10             	add    esp,0x10
10000fbd:	83 ec 0c             	sub    esp,0xc
10000fc0:	68 5e 4e 00 10       	push   0x10004e5e	10000fc1: R_386_32	.text
10000fc5:	e8 fc ff ff ff       	call   10000fc6 <Floppy::select(int, bool)+0x108>	10000fc6: R_386_PC32	Dbg::kprintf(char const*, ...)
10000fca:	83 c4 10             	add    esp,0x10
10000fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000fd0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000fd3:	83 c2 64             	add    edx,0x64
10000fd6:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10000fda:	89 d0                	mov    eax,edx
10000fdc:	c1 e0 02             	shl    eax,0x2
10000fdf:	01 d0                	add    eax,edx
10000fe1:	c1 e0 02             	shl    eax,0x2
10000fe4:	01 d0                	add    eax,edx
10000fe6:	05 10 00 00 00       	add    eax,0x10	10000fe7: R_386_32	floppyTable
10000feb:	8a 00                	mov    al,BYTE PTR [eax]
10000fed:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
10000ff0:	80 7d f6 ff          	cmp    BYTE PTR [ebp-0xa],0xff
10000ff4:	75 10                	jne    10001006 <Floppy::select(int, bool)+0x148>
10000ff6:	83 ec 0c             	sub    esp,0xc
10000ff9:	68 6c 4e 00 10       	push   0x10004e6c	10000ffa: R_386_32	.text
10000ffe:	e8 fc ff ff ff       	call   10000fff <Floppy::select(int, bool)+0x141>	10000fff: R_386_PC32	Krnl::panic(char const*)
10001003:	83 c4 10             	add    esp,0x10
10001006:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
10001009:	0f b6 c0             	movzx  eax,al
1000100c:	83 ec 04             	sub    esp,0x4
1000100f:	50                   	push   eax
10001010:	6a 07                	push   0x7
10001012:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001015:	e8 fc ff ff ff       	call   10001016 <Floppy::select(int, bool)+0x158>	10001016: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
1000101a:	83 c4 10             	add    esp,0x10
1000101d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000101e: R_386_32	irqDisableCounter
10001022:	48                   	dec    eax
10001023:	a3 00 00 00 00       	mov    ds:0x0,eax	10001024: R_386_32	irqDisableCounter
10001028:	a1 00 00 00 00       	mov    eax,ds:0x0	10001029: R_386_32	irqDisableCounter
1000102d:	85 c0                	test   eax,eax
1000102f:	75 01                	jne    10001032 <Floppy::select(int, bool)+0x174>
10001031:	fb                   	sti    
10001032:	83 ec 0c             	sub    esp,0xc
10001035:	68 9b 4e 00 10       	push   0x10004e9b	10001036: R_386_32	.text
1000103a:	e8 fc ff ff ff       	call   1000103b <Floppy::select(int, bool)+0x17d>	1000103b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000103f:	83 c4 10             	add    esp,0x10
10001042:	83 ec 08             	sub    esp,0x8
10001045:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001048:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000104b:	e8 fc ff ff ff       	call   1000104c <Floppy::select(int, bool)+0x18e>	1000104c: R_386_PC32	Floppy::specify(int)
10001050:	83 c4 10             	add    esp,0x10
10001053:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
10001056:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
10001059:	83 f0 01             	xor    eax,0x1
1000105c:	84 c0                	test   al,al
1000105e:	74 25                	je     10001085 <Floppy::select(int, bool)+0x1c7>
10001060:	83 ec 0c             	sub    esp,0xc
10001063:	68 a8 4e 00 10       	push   0x10004ea8	10001064: R_386_32	.text
10001068:	e8 fc ff ff ff       	call   10001069 <Floppy::select(int, bool)+0x1ab>	10001069: R_386_PC32	Dbg::kprintf(char const*, ...)
1000106d:	83 c4 10             	add    esp,0x10
10001070:	83 ec 0c             	sub    esp,0xc
10001073:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001076:	e8 fc ff ff ff       	call   10001077 <Floppy::select(int, bool)+0x1b9>	10001077: R_386_PC32	Floppy::reset()
1000107b:	83 c4 10             	add    esp,0x10
1000107e:	b0 00                	mov    al,0x0
10001080:	e9 d2 00 00 00       	jmp    10001157 <Floppy::select(int, bool)+0x299>
10001085:	83 ec 0c             	sub    esp,0xc
10001088:	68 b9 4e 00 10       	push   0x10004eb9	10001089: R_386_32	.text
1000108d:	e8 fc ff ff ff       	call   1000108e <Floppy::select(int, bool)+0x1d0>	1000108e: R_386_PC32	Dbg::kprintf(char const*, ...)
10001092:	83 c4 10             	add    esp,0x10
10001095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001098:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000109b:	83 c2 68             	add    edx,0x68
1000109e:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
100010a2:	83 ec 0c             	sub    esp,0xc
100010a5:	50                   	push   eax
100010a6:	e8 fc ff ff ff       	call   100010a7 <Floppy::select(int, bool)+0x1e9>	100010a7: R_386_PC32	FloppyDrive::calibrate()
100010ab:	83 c4 10             	add    esp,0x10
100010ae:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
100010b1:	83 ec 0c             	sub    esp,0xc
100010b4:	68 c6 4e 00 10       	push   0x10004ec6	100010b5: R_386_32	.text
100010b9:	e8 fc ff ff ff       	call   100010ba <Floppy::select(int, bool)+0x1fc>	100010ba: R_386_PC32	Dbg::kprintf(char const*, ...)
100010be:	83 c4 10             	add    esp,0x10
100010c1:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
100010c4:	83 f0 01             	xor    eax,0x1
100010c7:	84 c0                	test   al,al
100010c9:	74 22                	je     100010ed <Floppy::select(int, bool)+0x22f>
100010cb:	83 ec 0c             	sub    esp,0xc
100010ce:	68 d4 4e 00 10       	push   0x10004ed4	100010cf: R_386_32	.text
100010d3:	e8 fc ff ff ff       	call   100010d4 <Floppy::select(int, bool)+0x216>	100010d4: R_386_PC32	Dbg::kprintf(char const*, ...)
100010d8:	83 c4 10             	add    esp,0x10
100010db:	83 ec 0c             	sub    esp,0xc
100010de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100010e1:	e8 fc ff ff ff       	call   100010e2 <Floppy::select(int, bool)+0x224>	100010e2: R_386_PC32	Floppy::reset()
100010e6:	83 c4 10             	add    esp,0x10
100010e9:	b0 00                	mov    al,0x0
100010eb:	eb 6a                	jmp    10001157 <Floppy::select(int, bool)+0x299>
100010ed:	83 ec 0c             	sub    esp,0xc
100010f0:	68 e6 4e 00 10       	push   0x10004ee6	100010f1: R_386_32	.text
100010f5:	e8 fc ff ff ff       	call   100010f6 <Floppy::select(int, bool)+0x238>	100010f6: R_386_PC32	Dbg::kprintf(char const*, ...)
100010fa:	83 c4 10             	add    esp,0x10
100010fd:	83 ec 0c             	sub    esp,0xc
10001100:	68 f3 4e 00 10       	push   0x10004ef3	10001101: R_386_32	.text
10001105:	e8 fc ff ff ff       	call   10001106 <Floppy::select(int, bool)+0x248>	10001106: R_386_PC32	Dbg::kprintf(char const*, ...)
1000110a:	83 c4 10             	add    esp,0x10
1000110d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001110:	8a 55 e4             	mov    dl,BYTE PTR [ebp-0x1c]
10001113:	88 90 92 01 00 00    	mov    BYTE PTR [eax+0x192],dl
10001119:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000111c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000111f:	89 90 94 01 00 00    	mov    DWORD PTR [eax+0x194],edx
10001125:	83 ec 0c             	sub    esp,0xc
10001128:	68 00 4f 00 10       	push   0x10004f00	10001129: R_386_32	.text
1000112d:	e8 fc ff ff ff       	call   1000112e <Floppy::select(int, bool)+0x270>	1000112e: R_386_PC32	Dbg::kprintf(char const*, ...)
10001132:	83 c4 10             	add    esp,0x10
10001135:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001138:	8a 80 92 01 00 00    	mov    al,BYTE PTR [eax+0x192]
1000113e:	84 c0                	test   al,al
10001140:	74 12                	je     10001154 <Floppy::select(int, bool)+0x296>
10001142:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001145:	8b 80 94 01 00 00    	mov    eax,DWORD PTR [eax+0x194]
1000114b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
1000114e:	75 04                	jne    10001154 <Floppy::select(int, bool)+0x296>
10001150:	b0 01                	mov    al,0x1
10001152:	eb 02                	jmp    10001156 <Floppy::select(int, bool)+0x298>
10001154:	b0 00                	mov    al,0x0
10001156:	90                   	nop
10001157:	c9                   	leave  
10001158:	c3                   	ret    
10001159:	90                   	nop

1000115a <Floppy::motor(int, bool)>:
1000115a:	55                   	push   ebp
1000115b:	89 e5                	mov    ebp,esp
1000115d:	53                   	push   ebx
1000115e:	83 ec 24             	sub    esp,0x24
10001161:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001164:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10001167:	83 ec 0c             	sub    esp,0xc
1000116a:	68 0d 4f 00 10       	push   0x10004f0d	1000116b: R_386_32	.text
1000116f:	e8 fc ff ff ff       	call   10001170 <Floppy::motor(int, bool)+0x16>	10001170: R_386_PC32	Dbg::kprintf(char const*, ...)
10001174:	83 c4 10             	add    esp,0x10
10001177:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
1000117b:	83 ec 04             	sub    esp,0x4
1000117e:	50                   	push   eax
1000117f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001182:	68 1c 4f 00 10       	push   0x10004f1c	10001183: R_386_32	.text
10001187:	e8 fc ff ff ff       	call   10001188 <Floppy::motor(int, bool)+0x2e>	10001188: R_386_PC32	Dbg::kprintf(char const*, ...)
1000118c:	83 c4 10             	add    esp,0x10
1000118f:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
10001193:	0f 84 7f 01 00 00    	je     10001318 <Floppy::motor(int, bool)+0x1be>
10001199:	83 ec 0c             	sub    esp,0xc
1000119c:	68 32 4f 00 10       	push   0x10004f32	1000119d: R_386_32	.text
100011a1:	e8 fc ff ff ff       	call   100011a2 <Floppy::motor(int, bool)+0x48>	100011a2: R_386_PC32	Dbg::kprintf(char const*, ...)
100011a6:	83 c4 10             	add    esp,0x10
100011a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100011ac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100011af:	83 c2 58             	add    edx,0x58
100011b2:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100011b6:	85 c0                	test   eax,eax
100011b8:	0f 85 25 01 00 00    	jne    100012e3 <Floppy::motor(int, bool)+0x189>
100011be:	83 ec 0c             	sub    esp,0xc
100011c1:	68 3a 4f 00 10       	push   0x10004f3a	100011c2: R_386_32	.text
100011c6:	e8 fc ff ff ff       	call   100011c7 <Floppy::motor(int, bool)+0x6d>	100011c7: R_386_PC32	Dbg::kprintf(char const*, ...)
100011cb:	83 c4 10             	add    esp,0x10
100011ce:	fa                   	cli    
100011cf:	a1 00 00 00 00       	mov    eax,ds:0x0	100011d0: R_386_32	irqDisableCounter
100011d4:	40                   	inc    eax
100011d5:	a3 00 00 00 00       	mov    ds:0x0,eax	100011d6: R_386_32	irqDisableCounter
100011da:	83 ec 08             	sub    esp,0x8
100011dd:	6a 02                	push   0x2
100011df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100011e2:	e8 fc ff ff ff       	call   100011e3 <Floppy::motor(int, bool)+0x89>	100011e3: R_386_PC32	Floppy::readPort(FloppyReg)
100011e7:	83 c4 10             	add    esp,0x10
100011ea:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100011ed:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
100011f1:	83 ec 08             	sub    esp,0x8
100011f4:	50                   	push   eax
100011f5:	68 4f 4f 00 10       	push   0x10004f4f	100011f6: R_386_32	.text
100011fa:	e8 fc ff ff ff       	call   100011fb <Floppy::motor(int, bool)+0xa1>	100011fb: R_386_PC32	Dbg::kprintf(char const*, ...)
100011ff:	83 c4 10             	add    esp,0x10
10001202:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
10001206:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10001209:	bb 10 00 00 00       	mov    ebx,0x10
1000120e:	88 c1                	mov    cl,al
10001210:	d3 e3                	shl    ebx,cl
10001212:	89 d8                	mov    eax,ebx
10001214:	09 d0                	or     eax,edx
10001216:	83 ec 08             	sub    esp,0x8
10001219:	50                   	push   eax
1000121a:	68 5d 4f 00 10       	push   0x10004f5d	1000121b: R_386_32	.text
1000121f:	e8 fc ff ff ff       	call   10001220 <Floppy::motor(int, bool)+0xc6>	10001220: R_386_PC32	Dbg::kprintf(char const*, ...)
10001224:	83 c4 10             	add    esp,0x10
10001227:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000122a:	ba 10 00 00 00       	mov    edx,0x10
1000122f:	88 c1                	mov    cl,al
10001231:	d3 e2                	shl    edx,cl
10001233:	89 d0                	mov    eax,edx
10001235:	88 c2                	mov    dl,al
10001237:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
1000123a:	09 d0                	or     eax,edx
1000123c:	0f b6 c0             	movzx  eax,al
1000123f:	83 ec 04             	sub    esp,0x4
10001242:	50                   	push   eax
10001243:	6a 02                	push   0x2
10001245:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001248:	e8 fc ff ff ff       	call   10001249 <Floppy::motor(int, bool)+0xef>	10001249: R_386_PC32	Floppy::writePort(FloppyReg, unsigned char)
1000124d:	83 c4 10             	add    esp,0x10
10001250:	a1 00 00 00 00       	mov    eax,ds:0x0	10001251: R_386_32	irqDisableCounter
10001255:	48                   	dec    eax
10001256:	a3 00 00 00 00       	mov    ds:0x0,eax	10001257: R_386_32	irqDisableCounter
1000125b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000125c: R_386_32	irqDisableCounter
10001260:	85 c0                	test   eax,eax
10001262:	75 01                	jne    10001265 <Floppy::motor(int, bool)+0x10b>
10001264:	fb                   	sti    
10001265:	83 ec 0c             	sub    esp,0xc
10001268:	68 6b 4f 00 10       	push   0x10004f6b	10001269: R_386_32	.text
1000126d:	e8 fc ff ff ff       	call   1000126e <Floppy::motor(int, bool)+0x114>	1000126e: R_386_PC32	Dbg::kprintf(char const*, ...)
10001272:	83 c4 10             	add    esp,0x10
10001275:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001278:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000127b:	83 c2 64             	add    edx,0x64
1000127e:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
10001282:	83 f8 04             	cmp    eax,0x4
10001285:	75 14                	jne    1000129b <Floppy::motor(int, bool)+0x141>
10001287:	83 ec 08             	sub    esp,0x8
1000128a:	6a 00                	push   0x0
1000128c:	68 00 a3 e1 11       	push   0x11e1a300
10001291:	e8 fc ff ff ff       	call   10001292 <Floppy::motor(int, bool)+0x138>	10001292: R_386_PC32	nanoSleep(unsigned long long)
10001296:	83 c4 10             	add    esp,0x10
10001299:	eb 12                	jmp    100012ad <Floppy::motor(int, bool)+0x153>
1000129b:	83 ec 08             	sub    esp,0x8
1000129e:	6a 00                	push   0x0
100012a0:	68 00 65 cd 1d       	push   0x1dcd6500
100012a5:	e8 fc ff ff ff       	call   100012a6 <Floppy::motor(int, bool)+0x14c>	100012a6: R_386_PC32	nanoSleep(unsigned long long)
100012aa:	83 c4 10             	add    esp,0x10
100012ad:	83 ec 0c             	sub    esp,0xc
100012b0:	68 79 4f 00 10       	push   0x10004f79	100012b1: R_386_32	.text
100012b5:	e8 fc ff ff ff       	call   100012b6 <Floppy::motor(int, bool)+0x15c>	100012b6: R_386_PC32	Dbg::kprintf(char const*, ...)
100012ba:	83 c4 10             	add    esp,0x10
100012bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100012c3:	83 c2 58             	add    edx,0x58
100012c6:	c7 44 90 0c 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x1
100012ce:	83 ec 0c             	sub    esp,0xc
100012d1:	68 89 4f 00 10       	push   0x10004f89	100012d2: R_386_32	.text
100012d6:	e8 fc ff ff ff       	call   100012d7 <Floppy::motor(int, bool)+0x17d>	100012d7: R_386_PC32	Dbg::kprintf(char const*, ...)
100012db:	83 c4 10             	add    esp,0x10
100012de:	e9 89 00 00 00       	jmp    1000136c <Floppy::motor(int, bool)+0x212>
100012e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100012e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100012e9:	83 c2 58             	add    edx,0x58
100012ec:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
100012f0:	83 f8 02             	cmp    eax,0x2
100012f3:	75 77                	jne    1000136c <Floppy::motor(int, bool)+0x212>
100012f5:	83 ec 0c             	sub    esp,0xc
100012f8:	68 99 4f 00 10       	push   0x10004f99	100012f9: R_386_32	.text
100012fd:	e8 fc ff ff ff       	call   100012fe <Floppy::motor(int, bool)+0x1a4>	100012fe: R_386_PC32	Dbg::kprintf(char const*, ...)
10001302:	83 c4 10             	add    esp,0x10
10001305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001308:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000130b:	83 c2 58             	add    edx,0x58
1000130e:	c7 44 90 0c 01 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x1
10001316:	eb 54                	jmp    1000136c <Floppy::motor(int, bool)+0x212>
10001318:	83 ec 0c             	sub    esp,0xc
1000131b:	68 a9 4f 00 10       	push   0x10004fa9	1000131c: R_386_32	.text
10001320:	e8 fc ff ff ff       	call   10001321 <Floppy::motor(int, bool)+0x1c7>	10001321: R_386_PC32	Dbg::kprintf(char const*, ...)
10001325:	83 c4 10             	add    esp,0x10
10001328:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000132b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000132e:	83 c2 58             	add    edx,0x58
10001331:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
10001335:	83 f8 01             	cmp    eax,0x1
10001338:	75 32                	jne    1000136c <Floppy::motor(int, bool)+0x212>
1000133a:	83 ec 0c             	sub    esp,0xc
1000133d:	68 b9 4f 00 10       	push   0x10004fb9	1000133e: R_386_32	.text
10001342:	e8 fc ff ff ff       	call   10001343 <Floppy::motor(int, bool)+0x1e9>	10001343: R_386_PC32	Dbg::kprintf(char const*, ...)
10001347:	83 c4 10             	add    esp,0x10
1000134a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000134d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001350:	83 c2 58             	add    edx,0x58
10001353:	c7 44 90 0c 02 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x2
1000135b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000135e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001361:	83 c2 5c             	add    edx,0x5c
10001364:	c7 44 90 0c c4 09 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x9c4
1000136c:	83 ec 0c             	sub    esp,0xc
1000136f:	68 c9 4f 00 10       	push   0x10004fc9	10001370: R_386_32	.text
10001374:	e8 fc ff ff ff       	call   10001375 <Floppy::motor(int, bool)+0x21b>	10001375: R_386_PC32	Dbg::kprintf(char const*, ...)
10001379:	83 c4 10             	add    esp,0x10
1000137c:	90                   	nop
1000137d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10001380:	c9                   	leave  
10001381:	c3                   	ret    

10001382 <FloppyDrive::FloppyDrive()>:
10001382:	55                   	push   ebp
10001383:	89 e5                	mov    ebp,esp
10001385:	83 ec 08             	sub    esp,0x8
10001388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000138b:	83 ec 04             	sub    esp,0x4
1000138e:	68 00 02 00 00       	push   0x200
10001393:	68 de 4f 00 10       	push   0x10004fde	10001394: R_386_32	.text
10001398:	50                   	push   eax
10001399:	e8 fc ff ff ff       	call   1000139a <FloppyDrive::FloppyDrive()+0x18>	1000139a: R_386_PC32	PhysicalDisk::PhysicalDisk(char const*, int)
1000139e:	83 c4 10             	add    esp,0x10
100013a1:	ba 08 00 00 00       	mov    edx,0x8	100013a2: R_386_32	vtable for FloppyDrive
100013a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013a9:	89 10                	mov    DWORD PTR [eax],edx
100013ab:	90                   	nop
100013ac:	c9                   	leave  
100013ad:	c3                   	ret    

100013ae <FloppyDrive::motorOn()>:
100013ae:	55                   	push   ebp
100013af:	89 e5                	mov    ebp,esp
100013b1:	83 ec 08             	sub    esp,0x8
100013b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013b7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
100013bd:	83 ec 08             	sub    esp,0x8
100013c0:	50                   	push   eax
100013c1:	68 f0 4f 00 10       	push   0x10004ff0	100013c2: R_386_32	.text
100013c6:	e8 fc ff ff ff       	call   100013c7 <FloppyDrive::motorOn()+0x19>	100013c7: R_386_PC32	Dbg::kprintf(char const*, ...)
100013cb:	83 c4 10             	add    esp,0x10
100013ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013d1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100013d7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100013da:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100013e0:	83 ec 04             	sub    esp,0x4
100013e3:	6a 01                	push   0x1
100013e5:	52                   	push   edx
100013e6:	50                   	push   eax
100013e7:	e8 fc ff ff ff       	call   100013e8 <FloppyDrive::motorOn()+0x3a>	100013e8: R_386_PC32	Floppy::motor(int, bool)
100013ec:	83 c4 10             	add    esp,0x10
100013ef:	90                   	nop
100013f0:	c9                   	leave  
100013f1:	c3                   	ret    

100013f2 <FloppyDrive::motorOff()>:
100013f2:	55                   	push   ebp
100013f3:	89 e5                	mov    ebp,esp
100013f5:	83 ec 08             	sub    esp,0x8
100013f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100013fb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001401:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001404:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
1000140a:	83 ec 04             	sub    esp,0x4
1000140d:	6a 00                	push   0x0
1000140f:	52                   	push   edx
10001410:	50                   	push   eax
10001411:	e8 fc ff ff ff       	call   10001412 <FloppyDrive::motorOff()+0x20>	10001412: R_386_PC32	Floppy::motor(int, bool)
10001416:	83 c4 10             	add    esp,0x10
10001419:	90                   	nop
1000141a:	c9                   	leave  
1000141b:	c3                   	ret    

1000141c <FloppyDrive::floppyConfigure()>:
1000141c:	55                   	push   ebp
1000141d:	89 e5                	mov    ebp,esp
1000141f:	83 ec 18             	sub    esp,0x18
10001422:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
10001426:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
1000142a:	c6 45 f5 01          	mov    BYTE PTR [ebp-0xb],0x1
1000142e:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
10001435:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
1000143c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000143f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001445:	83 ec 08             	sub    esp,0x8
10001448:	6a 13                	push   0x13
1000144a:	50                   	push   eax
1000144b:	e8 fc ff ff ff       	call   1000144c <FloppyDrive::floppyConfigure()+0x30>	1000144c: R_386_PC32	Floppy::writeCommand(unsigned char)
10001450:	83 c4 10             	add    esp,0x10
10001453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001456:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000145c:	83 ec 0c             	sub    esp,0xc
1000145f:	50                   	push   eax
10001460:	e8 fc ff ff ff       	call   10001461 <FloppyDrive::floppyConfigure()+0x45>	10001461: R_386_PC32	Floppy::wasFailure()
10001465:	83 c4 10             	add    esp,0x10
10001468:	84 c0                	test   al,al
1000146a:	74 07                	je     10001473 <FloppyDrive::floppyConfigure()+0x57>
1000146c:	b0 00                	mov    al,0x0
1000146e:	e9 de 00 00 00       	jmp    10001551 <FloppyDrive::floppyConfigure()+0x135>
10001473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001476:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000147c:	83 ec 08             	sub    esp,0x8
1000147f:	6a 00                	push   0x0
10001481:	50                   	push   eax
10001482:	e8 fc ff ff ff       	call   10001483 <FloppyDrive::floppyConfigure()+0x67>	10001483: R_386_PC32	Floppy::writeCommand(unsigned char)
10001487:	83 c4 10             	add    esp,0x10
1000148a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000148d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001493:	83 ec 0c             	sub    esp,0xc
10001496:	50                   	push   eax
10001497:	e8 fc ff ff ff       	call   10001498 <FloppyDrive::floppyConfigure()+0x7c>	10001498: R_386_PC32	Floppy::wasFailure()
1000149c:	83 c4 10             	add    esp,0x10
1000149f:	84 c0                	test   al,al
100014a1:	74 07                	je     100014aa <FloppyDrive::floppyConfigure()+0x8e>
100014a3:	b0 00                	mov    al,0x0
100014a5:	e9 a7 00 00 00       	jmp    10001551 <FloppyDrive::floppyConfigure()+0x135>
100014aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014ad:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014b3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
100014b7:	c1 e2 06             	shl    edx,0x6
100014ba:	88 d1                	mov    cl,dl
100014bc:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
100014c0:	c1 e2 05             	shl    edx,0x5
100014c3:	09 d1                	or     ecx,edx
100014c5:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
100014c9:	c1 e2 04             	shl    edx,0x4
100014cc:	09 d1                	or     ecx,edx
100014ce:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
100014d1:	4a                   	dec    edx
100014d2:	09 ca                	or     edx,ecx
100014d4:	0f b6 d2             	movzx  edx,dl
100014d7:	83 ec 08             	sub    esp,0x8
100014da:	52                   	push   edx
100014db:	50                   	push   eax
100014dc:	e8 fc ff ff ff       	call   100014dd <FloppyDrive::floppyConfigure()+0xc1>	100014dd: R_386_PC32	Floppy::writeCommand(unsigned char)
100014e1:	83 c4 10             	add    esp,0x10
100014e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100014e7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100014ed:	83 ec 0c             	sub    esp,0xc
100014f0:	50                   	push   eax
100014f1:	e8 fc ff ff ff       	call   100014f2 <FloppyDrive::floppyConfigure()+0xd6>	100014f2: R_386_PC32	Floppy::wasFailure()
100014f6:	83 c4 10             	add    esp,0x10
100014f9:	84 c0                	test   al,al
100014fb:	74 04                	je     10001501 <FloppyDrive::floppyConfigure()+0xe5>
100014fd:	b0 00                	mov    al,0x0
100014ff:	eb 50                	jmp    10001551 <FloppyDrive::floppyConfigure()+0x135>
10001501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001504:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000150a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
1000150d:	0f b6 d2             	movzx  edx,dl
10001510:	83 ec 08             	sub    esp,0x8
10001513:	52                   	push   edx
10001514:	50                   	push   eax
10001515:	e8 fc ff ff ff       	call   10001516 <FloppyDrive::floppyConfigure()+0xfa>	10001516: R_386_PC32	Floppy::writeCommand(unsigned char)
1000151a:	83 c4 10             	add    esp,0x10
1000151d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001520:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001526:	83 ec 0c             	sub    esp,0xc
10001529:	50                   	push   eax
1000152a:	e8 fc ff ff ff       	call   1000152b <FloppyDrive::floppyConfigure()+0x10f>	1000152b: R_386_PC32	Floppy::wasFailure()
1000152f:	83 c4 10             	add    esp,0x10
10001532:	84 c0                	test   al,al
10001534:	74 04                	je     1000153a <FloppyDrive::floppyConfigure()+0x11e>
10001536:	b0 00                	mov    al,0x0
10001538:	eb 17                	jmp    10001551 <FloppyDrive::floppyConfigure()+0x135>
1000153a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000153d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001543:	8a 55 f5             	mov    dl,BYTE PTR [ebp-0xb]
10001546:	83 f2 01             	xor    edx,0x1
10001549:	88 90 91 01 00 00    	mov    BYTE PTR [eax+0x191],dl
1000154f:	b0 01                	mov    al,0x1
10001551:	c9                   	leave  
10001552:	c3                   	ret    
10001553:	90                   	nop

10001554 <FloppyDrive::open(int, int, void*)>:
10001554:	b8 00 00 00 00       	mov    eax,0x0
10001559:	c3                   	ret    

1000155a <FloppyDrive::_open(int, int, void*)>:
1000155a:	55                   	push   ebp
1000155b:	89 e5                	mov    ebp,esp
1000155d:	83 ec 08             	sub    esp,0x8
10001560:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001563:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10001566:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
1000156c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000156f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001572:	89 90 70 01 00 00    	mov    DWORD PTR [eax+0x170],edx
10001578:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000157b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001581:	83 ec 08             	sub    esp,0x8
10001584:	50                   	push   eax
10001585:	68 0f 50 00 10       	push   0x1000500f	10001586: R_386_32	.text
1000158a:	e8 fc ff ff ff       	call   1000158b <FloppyDrive::_open(int, int, void*)+0x31>	1000158b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000158f:	83 c4 10             	add    esp,0x10
10001592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001595:	c7 80 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x15c],0x200
1000159f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100015a2:	c6 80 68 01 00 00 01 	mov    BYTE PTR [eax+0x168],0x1
100015a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100015ac:	c6 80 69 01 00 00 01 	mov    BYTE PTR [eax+0x169],0x1
100015b3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100015b6:	89 d0                	mov    eax,edx
100015b8:	c1 e0 02             	shl    eax,0x2
100015bb:	01 d0                	add    eax,edx
100015bd:	c1 e0 02             	shl    eax,0x2
100015c0:	01 d0                	add    eax,edx
100015c2:	05 11 00 00 00       	add    eax,0x11	100015c3: R_386_32	floppyTable
100015c7:	8a 00                	mov    al,BYTE PTR [eax]
100015c9:	0f b6 c8             	movzx  ecx,al
100015cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100015cf:	89 d0                	mov    eax,edx
100015d1:	c1 e0 02             	shl    eax,0x2
100015d4:	01 d0                	add    eax,edx
100015d6:	c1 e0 02             	shl    eax,0x2
100015d9:	01 d0                	add    eax,edx
100015db:	05 13 00 00 00       	add    eax,0x13	100015dc: R_386_32	floppyTable
100015e0:	8a 00                	mov    al,BYTE PTR [eax]
100015e2:	0f b6 c0             	movzx  eax,al
100015e5:	0f af c8             	imul   ecx,eax
100015e8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100015eb:	89 d0                	mov    eax,edx
100015ed:	c1 e0 02             	shl    eax,0x2
100015f0:	01 d0                	add    eax,edx
100015f2:	c1 e0 02             	shl    eax,0x2
100015f5:	01 d0                	add    eax,edx
100015f7:	05 12 00 00 00       	add    eax,0x12	100015f8: R_386_32	floppyTable
100015fc:	8a 00                	mov    al,BYTE PTR [eax]
100015fe:	0f b6 c0             	movzx  eax,al
10001601:	0f af c1             	imul   eax,ecx
10001604:	89 c2                	mov    edx,eax
10001606:	c1 ea 1f             	shr    edx,0x1f
10001609:	01 d0                	add    eax,edx
1000160b:	d1 f8                	sar    eax,1
1000160d:	99                   	cdq    
1000160e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10001611:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
10001617:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
1000161d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001620:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
10001626:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
1000162c:	83 ec 04             	sub    esp,0x4
1000162f:	52                   	push   edx
10001630:	50                   	push   eax
10001631:	68 19 50 00 10       	push   0x10005019	10001632: R_386_32	.text
10001636:	e8 fc ff ff ff       	call   10001637 <FloppyDrive::_open(int, int, void*)+0xdd>	10001637: R_386_PC32	Dbg::kprintf(char const*, ...)
1000163b:	83 c4 10             	add    esp,0x10
1000163e:	83 ec 0c             	sub    esp,0xc
10001641:	68 2b 50 00 10       	push   0x1000502b	10001642: R_386_32	.text
10001646:	e8 fc ff ff ff       	call   10001647 <FloppyDrive::_open(int, int, void*)+0xed>	10001647: R_386_PC32	Dbg::kprintf(char const*, ...)
1000164b:	83 c4 10             	add    esp,0x10
1000164e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001651:	83 ec 0c             	sub    esp,0xc
10001654:	50                   	push   eax
10001655:	e8 fc ff ff ff       	call   10001656 <FloppyDrive::_open(int, int, void*)+0xfc>	10001656: R_386_PC32	PhysicalDisk::startCache()
1000165a:	83 c4 10             	add    esp,0x10
1000165d:	83 ec 0c             	sub    esp,0xc
10001660:	68 41 50 00 10       	push   0x10005041	10001661: R_386_32	.text
10001665:	e8 fc ff ff ff       	call   10001666 <FloppyDrive::_open(int, int, void*)+0x10c>	10001666: R_386_PC32	Dbg::kprintf(char const*, ...)
1000166a:	83 c4 10             	add    esp,0x10
1000166d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001670:	83 ec 0c             	sub    esp,0xc
10001673:	50                   	push   eax
10001674:	e8 fc ff ff ff       	call   10001675 <FloppyDrive::_open(int, int, void*)+0x11b>	10001675: R_386_PC32	createPartitionsForDisk(PhysicalDisk*)
10001679:	83 c4 10             	add    esp,0x10
1000167c:	83 ec 0c             	sub    esp,0xc
1000167f:	68 57 50 00 10       	push   0x10005057	10001680: R_386_32	.text
10001684:	e8 fc ff ff ff       	call   10001685 <FloppyDrive::_open(int, int, void*)+0x12b>	10001685: R_386_PC32	Dbg::kprintf(char const*, ...)
10001689:	83 c4 10             	add    esp,0x10
1000168c:	b8 00 00 00 00       	mov    eax,0x0
10001691:	c9                   	leave  
10001692:	c3                   	ret    
10001693:	90                   	nop

10001694 <FloppyDrive::close(int, int, void*)>:
10001694:	b8 00 00 00 00       	mov    eax,0x0
10001699:	c3                   	ret    

1000169a <FloppyDrive::unselect()>:
1000169a:	55                   	push   ebp
1000169b:	89 e5                	mov    ebp,esp
1000169d:	83 ec 08             	sub    esp,0x8
100016a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100016a3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100016a9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100016ac:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100016b2:	83 ec 04             	sub    esp,0x4
100016b5:	6a 00                	push   0x0
100016b7:	52                   	push   edx
100016b8:	50                   	push   eax
100016b9:	e8 fc ff ff ff       	call   100016ba <FloppyDrive::unselect()+0x20>	100016ba: R_386_PC32	Floppy::select(int, bool)
100016be:	83 c4 10             	add    esp,0x10
100016c1:	90                   	nop
100016c2:	c9                   	leave  
100016c3:	c3                   	ret    

100016c4 <FloppyDrive::select()>:
100016c4:	55                   	push   ebp
100016c5:	89 e5                	mov    ebp,esp
100016c7:	83 ec 18             	sub    esp,0x18
100016ca:	83 ec 0c             	sub    esp,0xc
100016cd:	68 6d 50 00 10       	push   0x1000506d	100016ce: R_386_32	.text
100016d2:	e8 fc ff ff ff       	call   100016d3 <FloppyDrive::select()+0xf>	100016d3: R_386_PC32	Dbg::kprintf(char const*, ...)
100016d7:	83 c4 10             	add    esp,0x10
100016da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100016dd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100016e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100016e6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100016ec:	83 ec 04             	sub    esp,0x4
100016ef:	6a 01                	push   0x1
100016f1:	52                   	push   edx
100016f2:	50                   	push   eax
100016f3:	e8 fc ff ff ff       	call   100016f4 <FloppyDrive::select()+0x30>	100016f4: R_386_PC32	Floppy::select(int, bool)
100016f8:	83 c4 10             	add    esp,0x10
100016fb:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100016fe:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10001702:	75 24                	jne    10001728 <FloppyDrive::select()+0x64>
10001704:	83 ec 0c             	sub    esp,0xc
10001707:	68 84 50 00 10       	push   0x10005084	10001708: R_386_32	.text
1000170c:	e8 fc ff ff ff       	call   1000170d <FloppyDrive::select()+0x49>	1000170d: R_386_PC32	Dbg::kprintf(char const*, ...)
10001711:	83 c4 10             	add    esp,0x10
10001714:	83 ec 08             	sub    esp,0x8
10001717:	6a 00                	push   0x0
10001719:	68 80 d1 f0 08       	push   0x8f0d180
1000171e:	e8 fc ff ff ff       	call   1000171f <FloppyDrive::select()+0x5b>	1000171f: R_386_PC32	nanoSleep(unsigned long long)
10001723:	83 c4 10             	add    esp,0x10
10001726:	eb a2                	jmp    100016ca <FloppyDrive::select()+0x6>
10001728:	90                   	nop
10001729:	c9                   	leave  
1000172a:	c3                   	ret    
1000172b:	90                   	nop

1000172c <FloppyDrive::seek(int, int)>:
1000172c:	55                   	push   ebp
1000172d:	89 e5                	mov    ebp,esp
1000172f:	83 ec 18             	sub    esp,0x18
10001732:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001739:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
1000173d:	7e 33                	jle    10001772 <FloppyDrive::seek(int, int)+0x46>
1000173f:	83 ec 0c             	sub    esp,0xc
10001742:	68 a4 50 00 10       	push   0x100050a4	10001743: R_386_32	.text
10001747:	e8 fc ff ff ff       	call   10001748 <FloppyDrive::seek(int, int)+0x1c>	10001748: R_386_PC32	Dbg::kprintf(char const*, ...)
1000174c:	83 c4 10             	add    esp,0x10
1000174f:	83 ec 0c             	sub    esp,0xc
10001752:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001755:	e8 fc ff ff ff       	call   10001756 <FloppyDrive::seek(int, int)+0x2a>	10001756: R_386_PC32	FloppyDrive::motorOff()
1000175a:	83 c4 10             	add    esp,0x10
1000175d:	83 ec 0c             	sub    esp,0xc
10001760:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001763:	e8 fc ff ff ff       	call   10001764 <FloppyDrive::seek(int, int)+0x38>	10001764: R_386_PC32	FloppyDrive::unselect()
10001768:	83 c4 10             	add    esp,0x10
1000176b:	b0 00                	mov    al,0x0
1000176d:	e9 da 02 00 00       	jmp    10001a4c <FloppyDrive::seek(int, int)+0x320>
10001772:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001775:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
1000177b:	83 ec 08             	sub    esp,0x8
1000177e:	50                   	push   eax
1000177f:	68 cb 50 00 10       	push   0x100050cb	10001780: R_386_32	.text
10001784:	e8 fc ff ff ff       	call   10001785 <FloppyDrive::seek(int, int)+0x59>	10001785: R_386_PC32	Dbg::kprintf(char const*, ...)
10001789:	83 c4 10             	add    esp,0x10
1000178c:	83 ec 0c             	sub    esp,0xc
1000178f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001792:	e8 fc ff ff ff       	call   10001793 <FloppyDrive::seek(int, int)+0x67>	10001793: R_386_PC32	FloppyDrive::select()
10001797:	83 c4 10             	add    esp,0x10
1000179a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000179d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
100017a3:	83 ec 08             	sub    esp,0x8
100017a6:	50                   	push   eax
100017a7:	68 db 50 00 10       	push   0x100050db	100017a8: R_386_32	.text
100017ac:	e8 fc ff ff ff       	call   100017ad <FloppyDrive::seek(int, int)+0x81>	100017ad: R_386_PC32	Dbg::kprintf(char const*, ...)
100017b1:	83 c4 10             	add    esp,0x10
100017b4:	83 ec 0c             	sub    esp,0xc
100017b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100017ba:	e8 fc ff ff ff       	call   100017bb <FloppyDrive::seek(int, int)+0x8f>	100017bb: R_386_PC32	FloppyDrive::motorOn()
100017bf:	83 c4 10             	add    esp,0x10
100017c2:	83 ec 0c             	sub    esp,0xc
100017c5:	68 ea 50 00 10       	push   0x100050ea	100017c6: R_386_32	.text
100017ca:	e8 fc ff ff ff       	call   100017cb <FloppyDrive::seek(int, int)+0x9f>	100017cb: R_386_PC32	Dbg::kprintf(char const*, ...)
100017cf:	83 c4 10             	add    esp,0x10
100017d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017d5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100017db:	83 ec 08             	sub    esp,0x8
100017de:	6a 0f                	push   0xf
100017e0:	50                   	push   eax
100017e1:	e8 fc ff ff ff       	call   100017e2 <FloppyDrive::seek(int, int)+0xb6>	100017e2: R_386_PC32	Floppy::writeCommand(unsigned char)
100017e6:	83 c4 10             	add    esp,0x10
100017e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100017ec:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100017f2:	83 ec 0c             	sub    esp,0xc
100017f5:	50                   	push   eax
100017f6:	e8 fc ff ff ff       	call   100017f7 <FloppyDrive::seek(int, int)+0xcb>	100017f7: R_386_PC32	Floppy::wasFailure()
100017fb:	83 c4 10             	add    esp,0x10
100017fe:	84 c0                	test   al,al
10001800:	74 3d                	je     1000183f <FloppyDrive::seek(int, int)+0x113>
10001802:	83 ec 0c             	sub    esp,0xc
10001805:	68 f5 50 00 10       	push   0x100050f5	10001806: R_386_32	.text
1000180a:	e8 fc ff ff ff       	call   1000180b <FloppyDrive::seek(int, int)+0xdf>	1000180b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000180f:	83 c4 10             	add    esp,0x10
10001812:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001815:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000181b:	83 ec 0c             	sub    esp,0xc
1000181e:	50                   	push   eax
1000181f:	e8 fc ff ff ff       	call   10001820 <FloppyDrive::seek(int, int)+0xf4>	10001820: R_386_PC32	Floppy::reset()
10001824:	83 c4 10             	add    esp,0x10
10001827:	83 ec 0c             	sub    esp,0xc
1000182a:	68 01 51 00 10       	push   0x10005101	1000182b: R_386_32	.text
1000182f:	e8 fc ff ff ff       	call   10001830 <FloppyDrive::seek(int, int)+0x104>	10001830: R_386_PC32	Dbg::kprintf(char const*, ...)
10001834:	83 c4 10             	add    esp,0x10
10001837:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000183a:	e9 fa fe ff ff       	jmp    10001739 <FloppyDrive::seek(int, int)+0xd>
1000183f:	83 ec 0c             	sub    esp,0xc
10001842:	68 0d 51 00 10       	push   0x1000510d	10001843: R_386_32	.text
10001847:	e8 fc ff ff ff       	call   10001848 <FloppyDrive::seek(int, int)+0x11c>	10001848: R_386_PC32	Dbg::kprintf(char const*, ...)
1000184c:	83 c4 10             	add    esp,0x10
1000184f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001852:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001858:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
1000185f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001862:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001868:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000186b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001871:	88 d1                	mov    cl,dl
10001873:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10001876:	c1 e2 02             	shl    edx,0x2
10001879:	09 ca                	or     edx,ecx
1000187b:	0f b6 d2             	movzx  edx,dl
1000187e:	83 ec 08             	sub    esp,0x8
10001881:	52                   	push   edx
10001882:	50                   	push   eax
10001883:	e8 fc ff ff ff       	call   10001884 <FloppyDrive::seek(int, int)+0x158>	10001884: R_386_PC32	Floppy::writeCommand(unsigned char)
10001888:	83 c4 10             	add    esp,0x10
1000188b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000188e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001894:	83 ec 0c             	sub    esp,0xc
10001897:	50                   	push   eax
10001898:	e8 fc ff ff ff       	call   10001899 <FloppyDrive::seek(int, int)+0x16d>	10001899: R_386_PC32	Floppy::wasFailure()
1000189d:	83 c4 10             	add    esp,0x10
100018a0:	84 c0                	test   al,al
100018a2:	74 1d                	je     100018c1 <FloppyDrive::seek(int, int)+0x195>
100018a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018a7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018ad:	83 ec 0c             	sub    esp,0xc
100018b0:	50                   	push   eax
100018b1:	e8 fc ff ff ff       	call   100018b2 <FloppyDrive::seek(int, int)+0x186>	100018b2: R_386_PC32	Floppy::reset()
100018b6:	83 c4 10             	add    esp,0x10
100018b9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100018bc:	e9 78 fe ff ff       	jmp    10001739 <FloppyDrive::seek(int, int)+0xd>
100018c1:	83 ec 0c             	sub    esp,0xc
100018c4:	68 18 51 00 10       	push   0x10005118	100018c5: R_386_32	.text
100018c9:	e8 fc ff ff ff       	call   100018ca <FloppyDrive::seek(int, int)+0x19e>	100018ca: R_386_PC32	Dbg::kprintf(char const*, ...)
100018ce:	83 c4 10             	add    esp,0x10
100018d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018d4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018da:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100018dd:	0f b6 d2             	movzx  edx,dl
100018e0:	83 ec 08             	sub    esp,0x8
100018e3:	52                   	push   edx
100018e4:	50                   	push   eax
100018e5:	e8 fc ff ff ff       	call   100018e6 <FloppyDrive::seek(int, int)+0x1ba>	100018e6: R_386_PC32	Floppy::writeCommand(unsigned char)
100018ea:	83 c4 10             	add    esp,0x10
100018ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100018f0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100018f6:	83 ec 0c             	sub    esp,0xc
100018f9:	50                   	push   eax
100018fa:	e8 fc ff ff ff       	call   100018fb <FloppyDrive::seek(int, int)+0x1cf>	100018fb: R_386_PC32	Floppy::wasFailure()
100018ff:	83 c4 10             	add    esp,0x10
10001902:	84 c0                	test   al,al
10001904:	74 1d                	je     10001923 <FloppyDrive::seek(int, int)+0x1f7>
10001906:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001909:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000190f:	83 ec 0c             	sub    esp,0xc
10001912:	50                   	push   eax
10001913:	e8 fc ff ff ff       	call   10001914 <FloppyDrive::seek(int, int)+0x1e8>	10001914: R_386_PC32	Floppy::reset()
10001918:	83 c4 10             	add    esp,0x10
1000191b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
1000191e:	e9 16 fe ff ff       	jmp    10001739 <FloppyDrive::seek(int, int)+0xd>
10001923:	83 ec 0c             	sub    esp,0xc
10001926:	68 23 51 00 10       	push   0x10005123	10001927: R_386_32	.text
1000192b:	e8 fc ff ff ff       	call   1000192c <FloppyDrive::seek(int, int)+0x200>	1000192c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001930:	83 c4 10             	add    esp,0x10
10001933:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001936:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000193c:	83 ec 08             	sub    esp,0x8
1000193f:	68 dc 05 00 00       	push   0x5dc
10001944:	50                   	push   eax
10001945:	e8 fc ff ff ff       	call   10001946 <FloppyDrive::seek(int, int)+0x21a>	10001946: R_386_PC32	Floppy::waitIRQ(int)
1000194a:	83 c4 10             	add    esp,0x10
1000194d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001950:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001953:	83 f0 01             	xor    eax,0x1
10001956:	84 c0                	test   al,al
10001958:	74 2d                	je     10001987 <FloppyDrive::seek(int, int)+0x25b>
1000195a:	83 ec 0c             	sub    esp,0xc
1000195d:	68 2e 51 00 10       	push   0x1000512e	1000195e: R_386_32	.text
10001962:	e8 fc ff ff ff       	call   10001963 <FloppyDrive::seek(int, int)+0x237>	10001963: R_386_PC32	Dbg::kprintf(char const*, ...)
10001967:	83 c4 10             	add    esp,0x10
1000196a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000196d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001973:	83 ec 0c             	sub    esp,0xc
10001976:	50                   	push   eax
10001977:	e8 fc ff ff ff       	call   10001978 <FloppyDrive::seek(int, int)+0x24c>	10001978: R_386_PC32	Floppy::reset()
1000197c:	83 c4 10             	add    esp,0x10
1000197f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001982:	e9 b2 fd ff ff       	jmp    10001739 <FloppyDrive::seek(int, int)+0xd>
10001987:	83 ec 0c             	sub    esp,0xc
1000198a:	68 3c 51 00 10       	push   0x1000513c	1000198b: R_386_32	.text
1000198f:	e8 fc ff ff ff       	call   10001990 <FloppyDrive::seek(int, int)+0x264>	10001990: R_386_PC32	Dbg::kprintf(char const*, ...)
10001994:	83 c4 10             	add    esp,0x10
10001997:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
1000199e:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
100019a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019a8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019ae:	83 ec 04             	sub    esp,0x4
100019b1:	8d 55 e8             	lea    edx,[ebp-0x18]
100019b4:	52                   	push   edx
100019b5:	8d 55 ec             	lea    edx,[ebp-0x14]
100019b8:	52                   	push   edx
100019b9:	50                   	push   eax
100019ba:	e8 fc ff ff ff       	call   100019bb <FloppyDrive::seek(int, int)+0x28f>	100019bb: R_386_PC32	Floppy::senseInterrupt(int*, int*)
100019bf:	83 c4 10             	add    esp,0x10
100019c2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
100019c5:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
100019c8:	83 f0 01             	xor    eax,0x1
100019cb:	84 c0                	test   al,al
100019cd:	74 15                	je     100019e4 <FloppyDrive::seek(int, int)+0x2b8>
100019cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100019d2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100019d8:	83 ec 0c             	sub    esp,0xc
100019db:	50                   	push   eax
100019dc:	e8 fc ff ff ff       	call   100019dd <FloppyDrive::seek(int, int)+0x2b1>	100019dd: R_386_PC32	Floppy::reset()
100019e1:	83 c4 10             	add    esp,0x10
100019e4:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
100019e7:	83 f0 01             	xor    eax,0x1
100019ea:	84 c0                	test   al,al
100019ec:	75 08                	jne    100019f6 <FloppyDrive::seek(int, int)+0x2ca>
100019ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100019f1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
100019f4:	74 08                	je     100019fe <FloppyDrive::seek(int, int)+0x2d2>
100019f6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100019f9:	e9 3b fd ff ff       	jmp    10001739 <FloppyDrive::seek(int, int)+0xd>
100019fe:	83 ec 0c             	sub    esp,0xc
10001a01:	68 47 51 00 10       	push   0x10005147	10001a02: R_386_32	.text
10001a06:	e8 fc ff ff ff       	call   10001a07 <FloppyDrive::seek(int, int)+0x2db>	10001a07: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a0b:	83 c4 10             	add    esp,0x10
10001a0e:	83 ec 0c             	sub    esp,0xc
10001a11:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a14:	e8 fc ff ff ff       	call   10001a15 <FloppyDrive::seek(int, int)+0x2e9>	10001a15: R_386_PC32	FloppyDrive::motorOff()
10001a19:	83 c4 10             	add    esp,0x10
10001a1c:	83 ec 0c             	sub    esp,0xc
10001a1f:	68 54 51 00 10       	push   0x10005154	10001a20: R_386_32	.text
10001a24:	e8 fc ff ff ff       	call   10001a25 <FloppyDrive::seek(int, int)+0x2f9>	10001a25: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a29:	83 c4 10             	add    esp,0x10
10001a2c:	83 ec 0c             	sub    esp,0xc
10001a2f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a32:	e8 fc ff ff ff       	call   10001a33 <FloppyDrive::seek(int, int)+0x307>	10001a33: R_386_PC32	FloppyDrive::unselect()
10001a37:	83 c4 10             	add    esp,0x10
10001a3a:	83 ec 0c             	sub    esp,0xc
10001a3d:	68 61 51 00 10       	push   0x10005161	10001a3e: R_386_32	.text
10001a42:	e8 fc ff ff ff       	call   10001a43 <FloppyDrive::seek(int, int)+0x317>	10001a43: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a47:	83 c4 10             	add    esp,0x10
10001a4a:	b0 01                	mov    al,0x1
10001a4c:	c9                   	leave  
10001a4d:	c3                   	ret    

10001a4e <FloppyDrive::calibrate()>:
10001a4e:	55                   	push   ebp
10001a4f:	89 e5                	mov    ebp,esp
10001a51:	83 ec 18             	sub    esp,0x18
10001a54:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10001a5b:	83 7d f4 04          	cmp    DWORD PTR [ebp-0xc],0x4
10001a5f:	7e 25                	jle    10001a86 <FloppyDrive::calibrate()+0x38>
10001a61:	83 ec 0c             	sub    esp,0xc
10001a64:	68 70 51 00 10       	push   0x10005170	10001a65: R_386_32	.text
10001a69:	e8 fc ff ff ff       	call   10001a6a <FloppyDrive::calibrate()+0x1c>	10001a6a: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a6e:	83 c4 10             	add    esp,0x10
10001a71:	83 ec 0c             	sub    esp,0xc
10001a74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001a77:	e8 fc ff ff ff       	call   10001a78 <FloppyDrive::calibrate()+0x2a>	10001a78: R_386_PC32	FloppyDrive::motorOff()
10001a7c:	83 c4 10             	add    esp,0x10
10001a7f:	b0 00                	mov    al,0x0
10001a81:	e9 01 02 00 00       	jmp    10001c87 <FloppyDrive::calibrate()+0x239>
10001a86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001a89:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
10001a8f:	83 ec 08             	sub    esp,0x8
10001a92:	50                   	push   eax
10001a93:	68 9c 51 00 10       	push   0x1000519c	10001a94: R_386_32	.text
10001a98:	e8 fc ff ff ff       	call   10001a99 <FloppyDrive::calibrate()+0x4b>	10001a99: R_386_PC32	Dbg::kprintf(char const*, ...)
10001a9d:	83 c4 10             	add    esp,0x10
10001aa0:	83 ec 0c             	sub    esp,0xc
10001aa3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001aa6:	e8 fc ff ff ff       	call   10001aa7 <FloppyDrive::calibrate()+0x59>	10001aa7: R_386_PC32	FloppyDrive::motorOn()
10001aab:	83 c4 10             	add    esp,0x10
10001aae:	83 ec 0c             	sub    esp,0xc
10001ab1:	68 aa 51 00 10       	push   0x100051aa	10001ab2: R_386_32	.text
10001ab6:	e8 fc ff ff ff       	call   10001ab7 <FloppyDrive::calibrate()+0x69>	10001ab7: R_386_PC32	Dbg::kprintf(char const*, ...)
10001abb:	83 c4 10             	add    esp,0x10
10001abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ac1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ac7:	83 ec 08             	sub    esp,0x8
10001aca:	6a 07                	push   0x7
10001acc:	50                   	push   eax
10001acd:	e8 fc ff ff ff       	call   10001ace <FloppyDrive::calibrate()+0x80>	10001ace: R_386_PC32	Floppy::writeCommand(unsigned char)
10001ad2:	83 c4 10             	add    esp,0x10
10001ad5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ad8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ade:	83 ec 0c             	sub    esp,0xc
10001ae1:	50                   	push   eax
10001ae2:	e8 fc ff ff ff       	call   10001ae3 <FloppyDrive::calibrate()+0x95>	10001ae3: R_386_PC32	Floppy::wasFailure()
10001ae7:	83 c4 10             	add    esp,0x10
10001aea:	84 c0                	test   al,al
10001aec:	74 1d                	je     10001b0b <FloppyDrive::calibrate()+0xbd>
10001aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001af1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001af7:	83 ec 0c             	sub    esp,0xc
10001afa:	50                   	push   eax
10001afb:	e8 fc ff ff ff       	call   10001afc <FloppyDrive::calibrate()+0xae>	10001afc: R_386_PC32	Floppy::reset()
10001b00:	83 c4 10             	add    esp,0x10
10001b03:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001b06:	e9 50 ff ff ff       	jmp    10001a5b <FloppyDrive::calibrate()+0xd>
10001b0b:	83 ec 0c             	sub    esp,0xc
10001b0e:	68 b3 51 00 10       	push   0x100051b3	10001b0f: R_386_32	.text
10001b13:	e8 fc ff ff ff       	call   10001b14 <FloppyDrive::calibrate()+0xc6>	10001b14: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b18:	83 c4 10             	add    esp,0x10
10001b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b1e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b24:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10001b2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b2e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b34:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001b37:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001b3d:	0f b6 d2             	movzx  edx,dl
10001b40:	83 ec 08             	sub    esp,0x8
10001b43:	52                   	push   edx
10001b44:	50                   	push   eax
10001b45:	e8 fc ff ff ff       	call   10001b46 <FloppyDrive::calibrate()+0xf8>	10001b46: R_386_PC32	Floppy::writeCommand(unsigned char)
10001b4a:	83 c4 10             	add    esp,0x10
10001b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b50:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b56:	83 ec 0c             	sub    esp,0xc
10001b59:	50                   	push   eax
10001b5a:	e8 fc ff ff ff       	call   10001b5b <FloppyDrive::calibrate()+0x10d>	10001b5b: R_386_PC32	Floppy::wasFailure()
10001b5f:	83 c4 10             	add    esp,0x10
10001b62:	84 c0                	test   al,al
10001b64:	74 1d                	je     10001b83 <FloppyDrive::calibrate()+0x135>
10001b66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b69:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b6f:	83 ec 0c             	sub    esp,0xc
10001b72:	50                   	push   eax
10001b73:	e8 fc ff ff ff       	call   10001b74 <FloppyDrive::calibrate()+0x126>	10001b74: R_386_PC32	Floppy::reset()
10001b78:	83 c4 10             	add    esp,0x10
10001b7b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001b7e:	e9 d8 fe ff ff       	jmp    10001a5b <FloppyDrive::calibrate()+0xd>
10001b83:	83 ec 0c             	sub    esp,0xc
10001b86:	68 bc 51 00 10       	push   0x100051bc	10001b87: R_386_32	.text
10001b8b:	e8 fc ff ff ff       	call   10001b8c <FloppyDrive::calibrate()+0x13e>	10001b8c: R_386_PC32	Dbg::kprintf(char const*, ...)
10001b90:	83 c4 10             	add    esp,0x10
10001b93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001b96:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001b9c:	83 ec 08             	sub    esp,0x8
10001b9f:	68 dc 05 00 00       	push   0x5dc
10001ba4:	50                   	push   eax
10001ba5:	e8 fc ff ff ff       	call   10001ba6 <FloppyDrive::calibrate()+0x158>	10001ba6: R_386_PC32	Floppy::waitIRQ(int)
10001baa:	83 c4 10             	add    esp,0x10
10001bad:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10001bb0:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10001bb3:	83 f0 01             	xor    eax,0x1
10001bb6:	84 c0                	test   al,al
10001bb8:	74 1d                	je     10001bd7 <FloppyDrive::calibrate()+0x189>
10001bba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bbd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bc3:	83 ec 0c             	sub    esp,0xc
10001bc6:	50                   	push   eax
10001bc7:	e8 fc ff ff ff       	call   10001bc8 <FloppyDrive::calibrate()+0x17a>	10001bc8: R_386_PC32	Floppy::reset()
10001bcc:	83 c4 10             	add    esp,0x10
10001bcf:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001bd2:	e9 84 fe ff ff       	jmp    10001a5b <FloppyDrive::calibrate()+0xd>
10001bd7:	83 ec 0c             	sub    esp,0xc
10001bda:	68 c5 51 00 10       	push   0x100051c5	10001bdb: R_386_32	.text
10001bdf:	e8 fc ff ff ff       	call   10001be0 <FloppyDrive::calibrate()+0x192>	10001be0: R_386_PC32	Dbg::kprintf(char const*, ...)
10001be4:	83 c4 10             	add    esp,0x10
10001be7:	c7 45 ec c0 00 00 00 	mov    DWORD PTR [ebp-0x14],0xc0
10001bee:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
10001bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001bf8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001bfe:	83 ec 04             	sub    esp,0x4
10001c01:	8d 55 e8             	lea    edx,[ebp-0x18]
10001c04:	52                   	push   edx
10001c05:	8d 55 ec             	lea    edx,[ebp-0x14]
10001c08:	52                   	push   edx
10001c09:	50                   	push   eax
10001c0a:	e8 fc ff ff ff       	call   10001c0b <FloppyDrive::calibrate()+0x1bd>	10001c0b: R_386_PC32	Floppy::senseInterrupt(int*, int*)
10001c0f:	83 c4 10             	add    esp,0x10
10001c12:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
10001c15:	83 ec 0c             	sub    esp,0xc
10001c18:	68 ce 51 00 10       	push   0x100051ce	10001c19: R_386_32	.text
10001c1d:	e8 fc ff ff ff       	call   10001c1e <FloppyDrive::calibrate()+0x1d0>	10001c1e: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c22:	83 c4 10             	add    esp,0x10
10001c25:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001c28:	83 f0 01             	xor    eax,0x1
10001c2b:	84 c0                	test   al,al
10001c2d:	74 15                	je     10001c44 <FloppyDrive::calibrate()+0x1f6>
10001c2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001c32:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001c38:	83 ec 0c             	sub    esp,0xc
10001c3b:	50                   	push   eax
10001c3c:	e8 fc ff ff ff       	call   10001c3d <FloppyDrive::calibrate()+0x1ef>	10001c3d: R_386_PC32	Floppy::reset()
10001c41:	83 c4 10             	add    esp,0x10
10001c44:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
10001c47:	83 f0 01             	xor    eax,0x1
10001c4a:	84 c0                	test   al,al
10001c4c:	75 11                	jne    10001c5f <FloppyDrive::calibrate()+0x211>
10001c4e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
10001c51:	85 c0                	test   eax,eax
10001c53:	75 0a                	jne    10001c5f <FloppyDrive::calibrate()+0x211>
10001c55:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10001c58:	83 e0 20             	and    eax,0x20
10001c5b:	85 c0                	test   eax,eax
10001c5d:	75 08                	jne    10001c67 <FloppyDrive::calibrate()+0x219>
10001c5f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10001c62:	e9 f4 fd ff ff       	jmp    10001a5b <FloppyDrive::calibrate()+0xd>
10001c67:	83 ec 0c             	sub    esp,0xc
10001c6a:	68 d7 51 00 10       	push   0x100051d7	10001c6b: R_386_32	.text
10001c6f:	e8 fc ff ff ff       	call   10001c70 <FloppyDrive::calibrate()+0x222>	10001c70: R_386_PC32	Dbg::kprintf(char const*, ...)
10001c74:	83 c4 10             	add    esp,0x10
10001c77:	83 ec 0c             	sub    esp,0xc
10001c7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001c7d:	e8 fc ff ff ff       	call   10001c7e <FloppyDrive::calibrate()+0x230>	10001c7e: R_386_PC32	FloppyDrive::motorOff()
10001c82:	83 c4 10             	add    esp,0x10
10001c85:	b0 01                	mov    al,0x1
10001c87:	c9                   	leave  
10001c88:	c3                   	ret    
10001c89:	90                   	nop

10001c8a <FloppyDrive::doTrack(int, bool, unsigned char*)>:
10001c8a:	55                   	push   ebp
10001c8b:	89 e5                	mov    ebp,esp
10001c8d:	57                   	push   edi
10001c8e:	56                   	push   esi
10001c8f:	53                   	push   ebx
10001c90:	83 ec 6c             	sub    esp,0x6c
10001c93:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10001c96:	88 45 94             	mov    BYTE PTR [ebp-0x6c],al
10001c99:	80 7d 94 00          	cmp    BYTE PTR [ebp-0x6c],0x0
10001c9d:	74 43                	je     10001ce2 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x58>
10001c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ca2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ca8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
10001cae:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10001cb1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001cb4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10001cb7:	c7 45 cc 00 48 00 00 	mov    DWORD PTR [ebp-0x34],0x4800
10001cbe:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10001cc1:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001cc4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10001cc7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10001cca:	8b 4d cc             	mov    ecx,DWORD PTR [ebp-0x34]
10001ccd:	89 c6                	mov    esi,eax
10001ccf:	89 d7                	mov    edi,edx
10001cd1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10001cd3:	89 c8                	mov    eax,ecx
10001cd5:	89 fa                	mov    edx,edi
10001cd7:	89 f3                	mov    ebx,esi
10001cd9:	89 5d c4             	mov    DWORD PTR [ebp-0x3c],ebx
10001cdc:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
10001cdf:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
10001ce2:	80 7d 94 00          	cmp    BYTE PTR [ebp-0x6c],0x0
10001ce6:	74 07                	je     10001cef <FloppyDrive::doTrack(int, bool, unsigned char*)+0x65>
10001ce8:	b8 c5 00 00 00       	mov    eax,0xc5
10001ced:	eb 05                	jmp    10001cf4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6a>
10001cef:	b8 c6 00 00 00       	mov    eax,0xc6
10001cf4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10001cf7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10001cfe:	83 ec 0c             	sub    esp,0xc
10001d01:	68 e0 51 00 10       	push   0x100051e0	10001d02: R_386_32	.text
10001d06:	e8 fc ff ff ff       	call   10001d07 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7d>	10001d07: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d0b:	83 c4 10             	add    esp,0x10
10001d0e:	83 7d e4 14          	cmp    DWORD PTR [ebp-0x1c],0x14
10001d12:	75 26                	jne    10001d3a <FloppyDrive::doTrack(int, bool, unsigned char*)+0xb0>
10001d14:	83 ec 0c             	sub    esp,0xc
10001d17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d1a:	e8 fc ff ff ff       	call   10001d1b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x91>	10001d1b: R_386_PC32	FloppyDrive::motorOff()
10001d1f:	83 c4 10             	add    esp,0x10
10001d22:	83 ec 0c             	sub    esp,0xc
10001d25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d28:	e8 fc ff ff ff       	call   10001d29 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x9f>	10001d29: R_386_PC32	FloppyDrive::unselect()
10001d2d:	83 c4 10             	add    esp,0x10
10001d30:	b8 fe ff ff ff       	mov    eax,0xfffffffe
10001d35:	e9 73 07 00 00       	jmp    100024ad <FloppyDrive::doTrack(int, bool, unsigned char*)+0x823>
10001d3a:	83 ec 0c             	sub    esp,0xc
10001d3d:	68 ea 51 00 10       	push   0x100051ea	10001d3e: R_386_32	.text
10001d42:	e8 fc ff ff ff       	call   10001d43 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xb9>	10001d43: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d47:	83 c4 10             	add    esp,0x10
10001d4a:	83 ec 04             	sub    esp,0x4
10001d4d:	6a 00                	push   0x0
10001d4f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001d52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d55:	e8 fc ff ff ff       	call   10001d56 <FloppyDrive::doTrack(int, bool, unsigned char*)+0xcc>	10001d56: R_386_PC32	FloppyDrive::seek(int, int)
10001d5a:	83 c4 10             	add    esp,0x10
10001d5d:	83 f0 01             	xor    eax,0x1
10001d60:	84 c0                	test   al,al
10001d62:	74 0a                	je     10001d6e <FloppyDrive::doTrack(int, bool, unsigned char*)+0xe4>
10001d64:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001d69:	e9 3f 07 00 00       	jmp    100024ad <FloppyDrive::doTrack(int, bool, unsigned char*)+0x823>
10001d6e:	83 ec 04             	sub    esp,0x4
10001d71:	6a 01                	push   0x1
10001d73:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10001d76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001d79:	e8 fc ff ff ff       	call   10001d7a <FloppyDrive::doTrack(int, bool, unsigned char*)+0xf0>	10001d7a: R_386_PC32	FloppyDrive::seek(int, int)
10001d7e:	83 c4 10             	add    esp,0x10
10001d81:	83 f0 01             	xor    eax,0x1
10001d84:	84 c0                	test   al,al
10001d86:	74 0a                	je     10001d92 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x108>
10001d88:	b8 ff ff ff ff       	mov    eax,0xffffffff
10001d8d:	e9 1b 07 00 00       	jmp    100024ad <FloppyDrive::doTrack(int, bool, unsigned char*)+0x823>
10001d92:	83 ec 0c             	sub    esp,0xc
10001d95:	68 fa 51 00 10       	push   0x100051fa	10001d96: R_386_32	.text
10001d9a:	e8 fc ff ff ff       	call   10001d9b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x111>	10001d9b: R_386_PC32	Dbg::kprintf(char const*, ...)
10001d9f:	83 c4 10             	add    esp,0x10
10001da2:	83 ec 0c             	sub    esp,0xc
10001da5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001da8:	e8 fc ff ff ff       	call   10001da9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x11f>	10001da9: R_386_PC32	FloppyDrive::motorOn()
10001dad:	83 c4 10             	add    esp,0x10
10001db0:	83 ec 0c             	sub    esp,0xc
10001db3:	68 06 52 00 10       	push   0x10005206	10001db4: R_386_32	.text
10001db8:	e8 fc ff ff ff       	call   10001db9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x12f>	10001db9: R_386_PC32	Dbg::kprintf(char const*, ...)
10001dbd:	83 c4 10             	add    esp,0x10
10001dc0:	83 ec 0c             	sub    esp,0xc
10001dc3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10001dc6:	e8 fc ff ff ff       	call   10001dc7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x13d>	10001dc7: R_386_PC32	FloppyDrive::select()
10001dcb:	83 c4 10             	add    esp,0x10
10001dce:	83 ec 0c             	sub    esp,0xc
10001dd1:	68 11 52 00 10       	push   0x10005211	10001dd2: R_386_32	.text
10001dd6:	e8 fc ff ff ff       	call   10001dd7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x14d>	10001dd7: R_386_PC32	Dbg::kprintf(char const*, ...)
10001ddb:	83 c4 10             	add    esp,0x10
10001dde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001de1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001de7:	0f b6 55 94          	movzx  edx,BYTE PTR [ebp-0x6c]
10001deb:	83 ec 08             	sub    esp,0x8
10001dee:	52                   	push   edx
10001def:	50                   	push   eax
10001df0:	e8 fc ff ff ff       	call   10001df1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x167>	10001df1: R_386_PC32	Floppy::dmaInit(bool)
10001df5:	83 c4 10             	add    esp,0x10
10001df8:	83 ec 0c             	sub    esp,0xc
10001dfb:	68 1c 52 00 10       	push   0x1000521c	10001dfc: R_386_32	.text
10001e00:	e8 fc ff ff ff       	call   10001e01 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x177>	10001e01: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e05:	83 c4 10             	add    esp,0x10
10001e08:	83 ec 08             	sub    esp,0x8
10001e0b:	6a 00                	push   0x0
10001e0d:	68 00 e1 f5 05       	push   0x5f5e100
10001e12:	e8 fc ff ff ff       	call   10001e13 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x189>	10001e13: R_386_PC32	nanoSleep(unsigned long long)
10001e17:	83 c4 10             	add    esp,0x10
10001e1a:	83 ec 0c             	sub    esp,0xc
10001e1d:	68 29 52 00 10       	push   0x10005229	10001e1e: R_386_32	.text
10001e22:	e8 fc ff ff ff       	call   10001e23 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x199>	10001e23: R_386_PC32	Dbg::kprintf(char const*, ...)
10001e27:	83 c4 10             	add    esp,0x10
10001e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e2d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e33:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
10001e36:	0f b6 d2             	movzx  edx,dl
10001e39:	83 ec 08             	sub    esp,0x8
10001e3c:	52                   	push   edx
10001e3d:	50                   	push   eax
10001e3e:	e8 fc ff ff ff       	call   10001e3f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1b5>	10001e3f: R_386_PC32	Floppy::writeCommand(unsigned char)
10001e43:	83 c4 10             	add    esp,0x10
10001e46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e49:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e4f:	83 ec 0c             	sub    esp,0xc
10001e52:	50                   	push   eax
10001e53:	e8 fc ff ff ff       	call   10001e54 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1ca>	10001e54: R_386_PC32	Floppy::wasFailure()
10001e58:	83 c4 10             	add    esp,0x10
10001e5b:	84 c0                	test   al,al
10001e5d:	74 1d                	je     10001e7c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1f2>
10001e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e62:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e68:	83 ec 0c             	sub    esp,0xc
10001e6b:	50                   	push   eax
10001e6c:	e8 fc ff ff ff       	call   10001e6d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x1e3>	10001e6d: R_386_PC32	Floppy::reset()
10001e71:	83 c4 10             	add    esp,0x10
10001e74:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001e77:	e9 82 fe ff ff       	jmp    10001cfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001e7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001e7f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001e85:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10001e88:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
10001e8e:	0f b6 d2             	movzx  edx,dl
10001e91:	83 ec 08             	sub    esp,0x8
10001e94:	52                   	push   edx
10001e95:	50                   	push   eax
10001e96:	e8 fc ff ff ff       	call   10001e97 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x20d>	10001e97: R_386_PC32	Floppy::writeCommand(unsigned char)
10001e9b:	83 c4 10             	add    esp,0x10
10001e9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ea1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ea7:	83 ec 0c             	sub    esp,0xc
10001eaa:	50                   	push   eax
10001eab:	e8 fc ff ff ff       	call   10001eac <FloppyDrive::doTrack(int, bool, unsigned char*)+0x222>	10001eac: R_386_PC32	Floppy::wasFailure()
10001eb0:	83 c4 10             	add    esp,0x10
10001eb3:	84 c0                	test   al,al
10001eb5:	74 1d                	je     10001ed4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x24a>
10001eb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001eba:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ec0:	83 ec 0c             	sub    esp,0xc
10001ec3:	50                   	push   eax
10001ec4:	e8 fc ff ff ff       	call   10001ec5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x23b>	10001ec5: R_386_PC32	Floppy::reset()
10001ec9:	83 c4 10             	add    esp,0x10
10001ecc:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001ecf:	e9 2a fe ff ff       	jmp    10001cfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001ed4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ed7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001edd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10001ee0:	0f b6 d2             	movzx  edx,dl
10001ee3:	83 ec 08             	sub    esp,0x8
10001ee6:	52                   	push   edx
10001ee7:	50                   	push   eax
10001ee8:	e8 fc ff ff ff       	call   10001ee9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x25f>	10001ee9: R_386_PC32	Floppy::writeCommand(unsigned char)
10001eed:	83 c4 10             	add    esp,0x10
10001ef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ef3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ef9:	83 ec 0c             	sub    esp,0xc
10001efc:	50                   	push   eax
10001efd:	e8 fc ff ff ff       	call   10001efe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x274>	10001efe: R_386_PC32	Floppy::wasFailure()
10001f02:	83 c4 10             	add    esp,0x10
10001f05:	84 c0                	test   al,al
10001f07:	74 1d                	je     10001f26 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x29c>
10001f09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f0c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f12:	83 ec 0c             	sub    esp,0xc
10001f15:	50                   	push   eax
10001f16:	e8 fc ff ff ff       	call   10001f17 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x28d>	10001f17: R_386_PC32	Floppy::reset()
10001f1b:	83 c4 10             	add    esp,0x10
10001f1e:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001f21:	e9 d8 fd ff ff       	jmp    10001cfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001f26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f29:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f2f:	83 ec 08             	sub    esp,0x8
10001f32:	6a 00                	push   0x0
10001f34:	50                   	push   eax
10001f35:	e8 fc ff ff ff       	call   10001f36 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2ac>	10001f36: R_386_PC32	Floppy::writeCommand(unsigned char)
10001f3a:	83 c4 10             	add    esp,0x10
10001f3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f40:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f46:	83 ec 0c             	sub    esp,0xc
10001f49:	50                   	push   eax
10001f4a:	e8 fc ff ff ff       	call   10001f4b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2c1>	10001f4b: R_386_PC32	Floppy::wasFailure()
10001f4f:	83 c4 10             	add    esp,0x10
10001f52:	84 c0                	test   al,al
10001f54:	74 1d                	je     10001f73 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2e9>
10001f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f59:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f5f:	83 ec 0c             	sub    esp,0xc
10001f62:	50                   	push   eax
10001f63:	e8 fc ff ff ff       	call   10001f64 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2da>	10001f64: R_386_PC32	Floppy::reset()
10001f68:	83 c4 10             	add    esp,0x10
10001f6b:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001f6e:	e9 8b fd ff ff       	jmp    10001cfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f76:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f7c:	83 ec 08             	sub    esp,0x8
10001f7f:	6a 01                	push   0x1
10001f81:	50                   	push   eax
10001f82:	e8 fc ff ff ff       	call   10001f83 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x2f9>	10001f83: R_386_PC32	Floppy::writeCommand(unsigned char)
10001f87:	83 c4 10             	add    esp,0x10
10001f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001f8d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001f93:	83 ec 0c             	sub    esp,0xc
10001f96:	50                   	push   eax
10001f97:	e8 fc ff ff ff       	call   10001f98 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x30e>	10001f98: R_386_PC32	Floppy::wasFailure()
10001f9c:	83 c4 10             	add    esp,0x10
10001f9f:	84 c0                	test   al,al
10001fa1:	74 1d                	je     10001fc0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x336>
10001fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fa6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fac:	83 ec 0c             	sub    esp,0xc
10001faf:	50                   	push   eax
10001fb0:	e8 fc ff ff ff       	call   10001fb1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x327>	10001fb1: R_386_PC32	Floppy::reset()
10001fb5:	83 c4 10             	add    esp,0x10
10001fb8:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10001fbb:	e9 3e fd ff ff       	jmp    10001cfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10001fc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fc3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fc9:	83 ec 08             	sub    esp,0x8
10001fcc:	6a 02                	push   0x2
10001fce:	50                   	push   eax
10001fcf:	e8 fc ff ff ff       	call   10001fd0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x346>	10001fd0: R_386_PC32	Floppy::writeCommand(unsigned char)
10001fd4:	83 c4 10             	add    esp,0x10
10001fd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001fda:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001fe0:	83 ec 0c             	sub    esp,0xc
10001fe3:	50                   	push   eax
10001fe4:	e8 fc ff ff ff       	call   10001fe5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x35b>	10001fe5: R_386_PC32	Floppy::wasFailure()
10001fe9:	83 c4 10             	add    esp,0x10
10001fec:	84 c0                	test   al,al
10001fee:	74 1d                	je     1000200d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x383>
10001ff0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10001ff3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10001ff9:	83 ec 0c             	sub    esp,0xc
10001ffc:	50                   	push   eax
10001ffd:	e8 fc ff ff ff       	call   10001ffe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x374>	10001ffe: R_386_PC32	Floppy::reset()
10002002:	83 c4 10             	add    esp,0x10
10002005:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002008:	e9 f1 fc ff ff       	jmp    10001cfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000200d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002010:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002016:	83 ec 08             	sub    esp,0x8
10002019:	6a 12                	push   0x12
1000201b:	50                   	push   eax
1000201c:	e8 fc ff ff ff       	call   1000201d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x393>	1000201d: R_386_PC32	Floppy::writeCommand(unsigned char)
10002021:	83 c4 10             	add    esp,0x10
10002024:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002027:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000202d:	83 ec 0c             	sub    esp,0xc
10002030:	50                   	push   eax
10002031:	e8 fc ff ff ff       	call   10002032 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3a8>	10002032: R_386_PC32	Floppy::wasFailure()
10002036:	83 c4 10             	add    esp,0x10
10002039:	84 c0                	test   al,al
1000203b:	74 1d                	je     1000205a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3d0>
1000203d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002040:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002046:	83 ec 0c             	sub    esp,0xc
10002049:	50                   	push   eax
1000204a:	e8 fc ff ff ff       	call   1000204b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3c1>	1000204b: R_386_PC32	Floppy::reset()
1000204f:	83 c4 10             	add    esp,0x10
10002052:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002055:	e9 a4 fc ff ff       	jmp    10001cfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000205a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000205d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002063:	83 ec 08             	sub    esp,0x8
10002066:	6a 1b                	push   0x1b
10002068:	50                   	push   eax
10002069:	e8 fc ff ff ff       	call   1000206a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3e0>	1000206a: R_386_PC32	Floppy::writeCommand(unsigned char)
1000206e:	83 c4 10             	add    esp,0x10
10002071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002074:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000207a:	83 ec 0c             	sub    esp,0xc
1000207d:	50                   	push   eax
1000207e:	e8 fc ff ff ff       	call   1000207f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x3f5>	1000207f: R_386_PC32	Floppy::wasFailure()
10002083:	83 c4 10             	add    esp,0x10
10002086:	84 c0                	test   al,al
10002088:	74 1d                	je     100020a7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x41d>
1000208a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000208d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002093:	83 ec 0c             	sub    esp,0xc
10002096:	50                   	push   eax
10002097:	e8 fc ff ff ff       	call   10002098 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x40e>	10002098: R_386_PC32	Floppy::reset()
1000209c:	83 c4 10             	add    esp,0x10
1000209f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100020a2:	e9 57 fc ff ff       	jmp    10001cfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100020a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020aa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020b0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
100020b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ba:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020c0:	83 ec 08             	sub    esp,0x8
100020c3:	68 ff 00 00 00       	push   0xff
100020c8:	50                   	push   eax
100020c9:	e8 fc ff ff ff       	call   100020ca <FloppyDrive::doTrack(int, bool, unsigned char*)+0x440>	100020ca: R_386_PC32	Floppy::writeCommand(unsigned char)
100020ce:	83 c4 10             	add    esp,0x10
100020d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020d4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020da:	83 ec 0c             	sub    esp,0xc
100020dd:	50                   	push   eax
100020de:	e8 fc ff ff ff       	call   100020df <FloppyDrive::doTrack(int, bool, unsigned char*)+0x455>	100020df: R_386_PC32	Floppy::wasFailure()
100020e3:	83 c4 10             	add    esp,0x10
100020e6:	84 c0                	test   al,al
100020e8:	74 1d                	je     10002107 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x47d>
100020ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100020ed:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100020f3:	83 ec 0c             	sub    esp,0xc
100020f6:	50                   	push   eax
100020f7:	e8 fc ff ff ff       	call   100020f8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x46e>	100020f8: R_386_PC32	Floppy::reset()
100020fc:	83 c4 10             	add    esp,0x10
100020ff:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002102:	e9 f7 fb ff ff       	jmp    10001cfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002107:	83 ec 0c             	sub    esp,0xc
1000210a:	68 35 52 00 10       	push   0x10005235	1000210b: R_386_32	.text
1000210f:	e8 fc ff ff ff       	call   10002110 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x486>	10002110: R_386_PC32	Dbg::kprintf(char const*, ...)
10002114:	83 c4 10             	add    esp,0x10
10002117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000211a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002120:	83 ec 08             	sub    esp,0x8
10002123:	68 e8 03 00 00       	push   0x3e8
10002128:	50                   	push   eax
10002129:	e8 fc ff ff ff       	call   1000212a <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4a0>	1000212a: R_386_PC32	Floppy::waitIRQ(int)
1000212e:	83 c4 10             	add    esp,0x10
10002131:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
10002134:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
10002137:	83 f0 01             	xor    eax,0x1
1000213a:	84 c0                	test   al,al
1000213c:	74 2d                	je     1000216b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4e1>
1000213e:	83 ec 0c             	sub    esp,0xc
10002141:	68 48 52 00 10       	push   0x10005248	10002142: R_386_32	.text
10002146:	e8 fc ff ff ff       	call   10002147 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4bd>	10002147: R_386_PC32	Dbg::kprintf(char const*, ...)
1000214b:	83 c4 10             	add    esp,0x10
1000214e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002151:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002157:	83 ec 0c             	sub    esp,0xc
1000215a:	50                   	push   eax
1000215b:	e8 fc ff ff ff       	call   1000215c <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4d2>	1000215c: R_386_PC32	Floppy::reset()
10002160:	83 c4 10             	add    esp,0x10
10002163:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002166:	e9 93 fb ff ff       	jmp    10001cfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000216b:	83 ec 0c             	sub    esp,0xc
1000216e:	68 51 52 00 10       	push   0x10005251	1000216f: R_386_32	.text
10002173:	e8 fc ff ff ff       	call   10002174 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4ea>	10002174: R_386_PC32	Dbg::kprintf(char const*, ...)
10002178:	83 c4 10             	add    esp,0x10
1000217b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000217e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002184:	83 ec 0c             	sub    esp,0xc
10002187:	50                   	push   eax
10002188:	e8 fc ff ff ff       	call   10002189 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x4ff>	10002189: R_386_PC32	Floppy::readData()
1000218d:	83 c4 10             	add    esp,0x10
10002190:	88 45 de             	mov    BYTE PTR [ebp-0x22],al
10002193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002196:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000219c:	83 ec 0c             	sub    esp,0xc
1000219f:	50                   	push   eax
100021a0:	e8 fc ff ff ff       	call   100021a1 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x517>	100021a1: R_386_PC32	Floppy::wasFailure()
100021a5:	83 c4 10             	add    esp,0x10
100021a8:	84 c0                	test   al,al
100021aa:	74 2d                	je     100021d9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x54f>
100021ac:	83 ec 0c             	sub    esp,0xc
100021af:	68 5b 52 00 10       	push   0x1000525b	100021b0: R_386_32	.text
100021b4:	e8 fc ff ff ff       	call   100021b5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x52b>	100021b5: R_386_PC32	Dbg::kprintf(char const*, ...)
100021b9:	83 c4 10             	add    esp,0x10
100021bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021bf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021c5:	83 ec 0c             	sub    esp,0xc
100021c8:	50                   	push   eax
100021c9:	e8 fc ff ff ff       	call   100021ca <FloppyDrive::doTrack(int, bool, unsigned char*)+0x540>	100021ca: R_386_PC32	Floppy::reset()
100021ce:	83 c4 10             	add    esp,0x10
100021d1:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100021d4:	e9 25 fb ff ff       	jmp    10001cfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100021d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021dc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021e2:	83 ec 0c             	sub    esp,0xc
100021e5:	50                   	push   eax
100021e6:	e8 fc ff ff ff       	call   100021e7 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x55d>	100021e7: R_386_PC32	Floppy::readData()
100021eb:	83 c4 10             	add    esp,0x10
100021ee:	88 45 dd             	mov    BYTE PTR [ebp-0x23],al
100021f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100021f4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100021fa:	83 ec 0c             	sub    esp,0xc
100021fd:	50                   	push   eax
100021fe:	e8 fc ff ff ff       	call   100021ff <FloppyDrive::doTrack(int, bool, unsigned char*)+0x575>	100021ff: R_386_PC32	Floppy::wasFailure()
10002203:	83 c4 10             	add    esp,0x10
10002206:	84 c0                	test   al,al
10002208:	74 2d                	je     10002237 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5ad>
1000220a:	83 ec 0c             	sub    esp,0xc
1000220d:	68 5b 52 00 10       	push   0x1000525b	1000220e: R_386_32	.text
10002212:	e8 fc ff ff ff       	call   10002213 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x589>	10002213: R_386_PC32	Dbg::kprintf(char const*, ...)
10002217:	83 c4 10             	add    esp,0x10
1000221a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000221d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002223:	83 ec 0c             	sub    esp,0xc
10002226:	50                   	push   eax
10002227:	e8 fc ff ff ff       	call   10002228 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x59e>	10002228: R_386_PC32	Floppy::reset()
1000222c:	83 c4 10             	add    esp,0x10
1000222f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002232:	e9 c7 fa ff ff       	jmp    10001cfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000223a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002240:	83 ec 0c             	sub    esp,0xc
10002243:	50                   	push   eax
10002244:	e8 fc ff ff ff       	call   10002245 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5bb>	10002245: R_386_PC32	Floppy::readData()
10002249:	83 c4 10             	add    esp,0x10
1000224c:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
1000224f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002252:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002258:	83 ec 0c             	sub    esp,0xc
1000225b:	50                   	push   eax
1000225c:	e8 fc ff ff ff       	call   1000225d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5d3>	1000225d: R_386_PC32	Floppy::wasFailure()
10002261:	83 c4 10             	add    esp,0x10
10002264:	84 c0                	test   al,al
10002266:	74 2d                	je     10002295 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x60b>
10002268:	83 ec 0c             	sub    esp,0xc
1000226b:	68 5b 52 00 10       	push   0x1000525b	1000226c: R_386_32	.text
10002270:	e8 fc ff ff ff       	call   10002271 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5e7>	10002271: R_386_PC32	Dbg::kprintf(char const*, ...)
10002275:	83 c4 10             	add    esp,0x10
10002278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000227b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002281:	83 ec 0c             	sub    esp,0xc
10002284:	50                   	push   eax
10002285:	e8 fc ff ff ff       	call   10002286 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x5fc>	10002286: R_386_PC32	Floppy::reset()
1000228a:	83 c4 10             	add    esp,0x10
1000228d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002290:	e9 69 fa ff ff       	jmp    10001cfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002298:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000229e:	83 ec 0c             	sub    esp,0xc
100022a1:	50                   	push   eax
100022a2:	e8 fc ff ff ff       	call   100022a3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x619>	100022a3: R_386_PC32	Floppy::readData()
100022a7:	83 c4 10             	add    esp,0x10
100022aa:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
100022ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022b0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022b6:	83 ec 0c             	sub    esp,0xc
100022b9:	50                   	push   eax
100022ba:	e8 fc ff ff ff       	call   100022bb <FloppyDrive::doTrack(int, bool, unsigned char*)+0x631>	100022bb: R_386_PC32	Floppy::wasFailure()
100022bf:	83 c4 10             	add    esp,0x10
100022c2:	84 c0                	test   al,al
100022c4:	74 2d                	je     100022f3 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x669>
100022c6:	83 ec 0c             	sub    esp,0xc
100022c9:	68 5b 52 00 10       	push   0x1000525b	100022ca: R_386_32	.text
100022ce:	e8 fc ff ff ff       	call   100022cf <FloppyDrive::doTrack(int, bool, unsigned char*)+0x645>	100022cf: R_386_PC32	Dbg::kprintf(char const*, ...)
100022d3:	83 c4 10             	add    esp,0x10
100022d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022d9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022df:	83 ec 0c             	sub    esp,0xc
100022e2:	50                   	push   eax
100022e3:	e8 fc ff ff ff       	call   100022e4 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x65a>	100022e4: R_386_PC32	Floppy::reset()
100022e8:	83 c4 10             	add    esp,0x10
100022eb:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100022ee:	e9 0b fa ff ff       	jmp    10001cfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100022f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100022f6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100022fc:	83 ec 0c             	sub    esp,0xc
100022ff:	50                   	push   eax
10002300:	e8 fc ff ff ff       	call   10002301 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x677>	10002301: R_386_PC32	Floppy::readData()
10002305:	83 c4 10             	add    esp,0x10
10002308:	88 45 da             	mov    BYTE PTR [ebp-0x26],al
1000230b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000230e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002314:	83 ec 0c             	sub    esp,0xc
10002317:	50                   	push   eax
10002318:	e8 fc ff ff ff       	call   10002319 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x68f>	10002319: R_386_PC32	Floppy::wasFailure()
1000231d:	83 c4 10             	add    esp,0x10
10002320:	84 c0                	test   al,al
10002322:	74 2d                	je     10002351 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6c7>
10002324:	83 ec 0c             	sub    esp,0xc
10002327:	68 5b 52 00 10       	push   0x1000525b	10002328: R_386_32	.text
1000232c:	e8 fc ff ff ff       	call   1000232d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6a3>	1000232d: R_386_PC32	Dbg::kprintf(char const*, ...)
10002331:	83 c4 10             	add    esp,0x10
10002334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002337:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000233d:	83 ec 0c             	sub    esp,0xc
10002340:	50                   	push   eax
10002341:	e8 fc ff ff ff       	call   10002342 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6b8>	10002342: R_386_PC32	Floppy::reset()
10002346:	83 c4 10             	add    esp,0x10
10002349:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
1000234c:	e9 ad f9 ff ff       	jmp    10001cfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
10002351:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002354:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000235a:	83 ec 0c             	sub    esp,0xc
1000235d:	50                   	push   eax
1000235e:	e8 fc ff ff ff       	call   1000235f <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6d5>	1000235f: R_386_PC32	Floppy::readData()
10002363:	83 c4 10             	add    esp,0x10
10002366:	88 45 d9             	mov    BYTE PTR [ebp-0x27],al
10002369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000236c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
10002372:	83 ec 0c             	sub    esp,0xc
10002375:	50                   	push   eax
10002376:	e8 fc ff ff ff       	call   10002377 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x6ed>	10002377: R_386_PC32	Floppy::wasFailure()
1000237b:	83 c4 10             	add    esp,0x10
1000237e:	84 c0                	test   al,al
10002380:	74 2d                	je     100023af <FloppyDrive::doTrack(int, bool, unsigned char*)+0x725>
10002382:	83 ec 0c             	sub    esp,0xc
10002385:	68 5b 52 00 10       	push   0x1000525b	10002386: R_386_32	.text
1000238a:	e8 fc ff ff ff       	call   1000238b <FloppyDrive::doTrack(int, bool, unsigned char*)+0x701>	1000238b: R_386_PC32	Dbg::kprintf(char const*, ...)
1000238f:	83 c4 10             	add    esp,0x10
10002392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002395:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000239b:	83 ec 0c             	sub    esp,0xc
1000239e:	50                   	push   eax
1000239f:	e8 fc ff ff ff       	call   100023a0 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x716>	100023a0: R_386_PC32	Floppy::reset()
100023a4:	83 c4 10             	add    esp,0x10
100023a7:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100023aa:	e9 4f f9 ff ff       	jmp    10001cfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
100023af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023b2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023b8:	83 ec 0c             	sub    esp,0xc
100023bb:	50                   	push   eax
100023bc:	e8 fc ff ff ff       	call   100023bd <FloppyDrive::doTrack(int, bool, unsigned char*)+0x733>	100023bd: R_386_PC32	Floppy::readData()
100023c1:	83 c4 10             	add    esp,0x10
100023c4:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
100023c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023ca:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023d0:	83 ec 0c             	sub    esp,0xc
100023d3:	50                   	push   eax
100023d4:	e8 fc ff ff ff       	call   100023d5 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74b>	100023d5: R_386_PC32	Floppy::wasFailure()
100023d9:	83 c4 10             	add    esp,0x10
100023dc:	84 c0                	test   al,al
100023de:	74 2d                	je     1000240d <FloppyDrive::doTrack(int, bool, unsigned char*)+0x783>
100023e0:	83 ec 0c             	sub    esp,0xc
100023e3:	68 5b 52 00 10       	push   0x1000525b	100023e4: R_386_32	.text
100023e8:	e8 fc ff ff ff       	call   100023e9 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x75f>	100023e9: R_386_PC32	Dbg::kprintf(char const*, ...)
100023ed:	83 c4 10             	add    esp,0x10
100023f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100023f3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100023f9:	83 ec 0c             	sub    esp,0xc
100023fc:	50                   	push   eax
100023fd:	e8 fc ff ff ff       	call   100023fe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x774>	100023fe: R_386_PC32	Floppy::reset()
10002402:	83 c4 10             	add    esp,0x10
10002405:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002408:	e9 f1 f8 ff ff       	jmp    10001cfe <FloppyDrive::doTrack(int, bool, unsigned char*)+0x74>
1000240d:	83 ec 0c             	sub    esp,0xc
10002410:	68 74 52 00 10       	push   0x10005274	10002411: R_386_32	.text
10002415:	e8 fc ff ff ff       	call   10002416 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x78c>	10002416: R_386_PC32	Dbg::kprintf(char const*, ...)
1000241a:	83 c4 10             	add    esp,0x10
1000241d:	83 ec 0c             	sub    esp,0xc
10002420:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002423:	e8 fc ff ff ff       	call   10002424 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x79a>	10002424: R_386_PC32	FloppyDrive::motorOff()
10002428:	83 c4 10             	add    esp,0x10
1000242b:	83 ec 0c             	sub    esp,0xc
1000242e:	68 88 52 00 10       	push   0x10005288	1000242f: R_386_32	.text
10002433:	e8 fc ff ff ff       	call   10002434 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7aa>	10002434: R_386_PC32	Dbg::kprintf(char const*, ...)
10002438:	83 c4 10             	add    esp,0x10
1000243b:	83 ec 0c             	sub    esp,0xc
1000243e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002441:	e8 fc ff ff ff       	call   10002442 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7b8>	10002442: R_386_PC32	FloppyDrive::unselect()
10002446:	83 c4 10             	add    esp,0x10
10002449:	83 ec 0c             	sub    esp,0xc
1000244c:	68 93 52 00 10       	push   0x10005293	1000244d: R_386_32	.text
10002451:	e8 fc ff ff ff       	call   10002452 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x7c8>	10002452: R_386_PC32	Dbg::kprintf(char const*, ...)
10002456:	83 c4 10             	add    esp,0x10
10002459:	8a 45 94             	mov    al,BYTE PTR [ebp-0x6c]
1000245c:	83 f0 01             	xor    eax,0x1
1000245f:	84 c0                	test   al,al
10002461:	74 45                	je     100024a8 <FloppyDrive::doTrack(int, bool, unsigned char*)+0x81e>
10002463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002466:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
1000246c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
10002472:	89 c2                	mov    edx,eax
10002474:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10002477:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
1000247a:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
1000247d:	c7 45 b0 00 48 00 00 	mov    DWORD PTR [ebp-0x50],0x4800
10002484:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
10002487:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
1000248a:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
1000248d:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10002490:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
10002493:	89 c6                	mov    esi,eax
10002495:	89 d7                	mov    edi,edx
10002497:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002499:	89 c8                	mov    eax,ecx
1000249b:	89 fa                	mov    edx,edi
1000249d:	89 f3                	mov    ebx,esi
1000249f:	89 5d a8             	mov    DWORD PTR [ebp-0x58],ebx
100024a2:	89 55 a4             	mov    DWORD PTR [ebp-0x5c],edx
100024a5:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
100024a8:	b8 00 00 00 00       	mov    eax,0x0
100024ad:	8d 65 f4             	lea    esp,[ebp-0xc]
100024b0:	5b                   	pop    ebx
100024b1:	5e                   	pop    esi
100024b2:	5f                   	pop    edi
100024b3:	5d                   	pop    ebp
100024b4:	c3                   	ret    
100024b5:	90                   	nop

100024b6 <FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)>:
100024b6:	55                   	push   ebp
100024b7:	89 e5                	mov    ebp,esp
100024b9:	83 ec 10             	sub    esp,0x10
100024bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100024bf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100024c5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100024c8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100024ce:	83 c2 64             	add    edx,0x64
100024d1:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
100024d5:	89 d0                	mov    eax,edx
100024d7:	c1 e0 02             	shl    eax,0x2
100024da:	01 d0                	add    eax,edx
100024dc:	c1 e0 02             	shl    eax,0x2
100024df:	01 d0                	add    eax,edx
100024e1:	05 13 00 00 00       	add    eax,0x13	100024e2: R_386_32	floppyTable
100024e6:	8a 00                	mov    al,BYTE PTR [eax]
100024e8:	0f b6 c0             	movzx  eax,al
100024eb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
100024ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
100024f1:	01 c0                	add    eax,eax
100024f3:	89 c1                	mov    ecx,eax
100024f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100024f8:	ba 00 00 00 00       	mov    edx,0x0
100024fd:	f7 f1                	div    ecx
100024ff:	89 c2                	mov    edx,eax
10002501:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10002504:	89 10                	mov    DWORD PTR [eax],edx
10002506:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10002509:	01 c0                	add    eax,eax
1000250b:	89 c1                	mov    ecx,eax
1000250d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002510:	ba 00 00 00 00       	mov    edx,0x0
10002515:	f7 f1                	div    ecx
10002517:	89 d0                	mov    eax,edx
10002519:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
1000251c:	ba 00 00 00 00       	mov    edx,0x0
10002521:	f7 f1                	div    ecx
10002523:	89 c2                	mov    edx,eax
10002525:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10002528:	89 10                	mov    DWORD PTR [eax],edx
1000252a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000252d:	01 c0                	add    eax,eax
1000252f:	89 c1                	mov    ecx,eax
10002531:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10002534:	ba 00 00 00 00       	mov    edx,0x0
10002539:	f7 f1                	div    ecx
1000253b:	89 d0                	mov    eax,edx
1000253d:	8b 4d fc             	mov    ecx,DWORD PTR [ebp-0x4]
10002540:	ba 00 00 00 00       	mov    edx,0x0
10002545:	f7 f1                	div    ecx
10002547:	89 d0                	mov    eax,edx
10002549:	40                   	inc    eax
1000254a:	89 c2                	mov    edx,eax
1000254c:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000254f:	89 10                	mov    DWORD PTR [eax],edx
10002551:	90                   	nop
10002552:	c9                   	leave  
10002553:	c3                   	ret    

10002554 <FloppyDrive::eject()>:
10002554:	55                   	push   ebp
10002555:	89 e5                	mov    ebp,esp
10002557:	57                   	push   edi
10002558:	56                   	push   esi
10002559:	53                   	push   ebx
1000255a:	83 ec 2c             	sub    esp,0x2c
1000255d:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000255f: R_386_32	hasCyl0Bf
10002564:	c7 05 00 00 00 00 ff ff ff ff 	mov    DWORD PTR ds:0x0,0xffffffff	10002566: R_386_32	_TEMP_cyl
1000256e:	8d 45 ce             	lea    eax,[ebp-0x32]
10002571:	bb 9e 52 00 10       	mov    ebx,0x1000529e	10002572: R_386_32	.text
10002576:	ba 1a 00 00 00       	mov    edx,0x1a
1000257b:	89 c7                	mov    edi,eax
1000257d:	89 de                	mov    esi,ebx
1000257f:	89 d1                	mov    ecx,edx
10002581:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002583:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002585: R_386_32	activeTerminal
10002589:	a1 00 00 00 00       	mov    eax,ds:0x0	1000258a: R_386_32	activeTerminal
1000258e:	8b 00                	mov    eax,DWORD PTR [eax]
10002590:	83 c0 10             	add    eax,0x10
10002593:	8b 00                	mov    eax,DWORD PTR [eax]
10002595:	83 ec 0c             	sub    esp,0xc
10002598:	8d 4d c8             	lea    ecx,[ebp-0x38]
1000259b:	51                   	push   ecx
1000259c:	8d 4d ce             	lea    ecx,[ebp-0x32]
1000259f:	51                   	push   ecx
100025a0:	6a 00                	push   0x0
100025a2:	6a 1a                	push   0x1a
100025a4:	52                   	push   edx
100025a5:	ff d0                	call   eax
100025a7:	83 c4 20             	add    esp,0x20
100025aa:	b8 00 00 00 00       	mov    eax,0x0
100025af:	8d 65 f4             	lea    esp,[ebp-0xc]
100025b2:	5b                   	pop    ebx
100025b3:	5e                   	pop    esi
100025b4:	5f                   	pop    edi
100025b5:	5d                   	pop    ebp
100025b6:	c3                   	ret    
100025b7:	90                   	nop

100025b8 <FloppyDrive::read(unsigned long long, int, void*)>:
100025b8:	55                   	push   ebp
100025b9:	89 e5                	mov    ebp,esp
100025bb:	57                   	push   edi
100025bc:	56                   	push   esi
100025bd:	53                   	push   ebx
100025be:	83 ec 6c             	sub    esp,0x6c
100025c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100025c4:	89 45 90             	mov    DWORD PTR [ebp-0x70],eax
100025c7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100025ca:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
100025cd:	a0 00 00 00 00       	mov    al,ds:0x0	100025ce: R_386_32	_TEMP_allocated
100025d2:	83 f0 01             	xor    eax,0x1
100025d5:	84 c0                	test   al,al
100025d7:	74 46                	je     1000261f <FloppyDrive::read(unsigned long long, int, void*)+0x67>
100025d9:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100025db: R_386_32	_TEMP_allocated
100025e0:	83 ec 0c             	sub    esp,0xc
100025e3:	68 00 48 00 00       	push   0x4800
100025e8:	e8 fc ff ff ff       	call   100025e9 <FloppyDrive::read(unsigned long long, int, void*)+0x31>	100025e9: R_386_PC32	malloc
100025ed:	83 c4 10             	add    esp,0x10
100025f0:	a3 00 00 00 00       	mov    ds:0x0,eax	100025f1: R_386_32	_TEMP_trackBuffer
100025f5:	83 ec 0c             	sub    esp,0xc
100025f8:	68 00 48 00 00       	push   0x4800
100025fd:	e8 fc ff ff ff       	call   100025fe <FloppyDrive::read(unsigned long long, int, void*)+0x46>	100025fe: R_386_PC32	malloc
10002602:	83 c4 10             	add    esp,0x10
10002605:	a3 00 00 00 00       	mov    ds:0x0,eax	10002606: R_386_32	_TEMP_cylinder0_bf
1000260a:	83 ec 0c             	sub    esp,0xc
1000260d:	68 00 48 00 00       	push   0x4800
10002612:	e8 fc ff ff ff       	call   10002613 <FloppyDrive::read(unsigned long long, int, void*)+0x5b>	10002613: R_386_PC32	malloc
10002617:	83 c4 10             	add    esp,0x10
1000261a:	a3 00 00 00 00       	mov    ds:0x0,eax	1000261b: R_386_32	_TEMP_write_bf
1000261f:	83 7d 14 01          	cmp    DWORD PTR [ebp+0x14],0x1
10002623:	74 10                	je     10002635 <FloppyDrive::read(unsigned long long, int, void*)+0x7d>
10002625:	83 ec 0c             	sub    esp,0xc
10002628:	68 b8 52 00 10       	push   0x100052b8	10002629: R_386_32	.text
1000262d:	e8 fc ff ff ff       	call   1000262e <FloppyDrive::read(unsigned long long, int, void*)+0x76>	1000262e: R_386_PC32	Krnl::panic(char const*)
10002632:	83 c4 10             	add    esp,0x10
10002635:	83 ec 0c             	sub    esp,0xc
10002638:	68 d0 52 00 10       	push   0x100052d0	10002639: R_386_32	.text
1000263d:	e8 fc ff ff ff       	call   1000263e <FloppyDrive::read(unsigned long long, int, void*)+0x86>	1000263e: R_386_PC32	Dbg::kprintf(char const*, ...)
10002642:	83 c4 10             	add    esp,0x10
10002645:	8b 45 90             	mov    eax,DWORD PTR [ebp-0x70]
10002648:	83 ec 0c             	sub    esp,0xc
1000264b:	8d 55 a0             	lea    edx,[ebp-0x60]
1000264e:	52                   	push   edx
1000264f:	8d 55 a4             	lea    edx,[ebp-0x5c]
10002652:	52                   	push   edx
10002653:	8d 55 a8             	lea    edx,[ebp-0x58]
10002656:	52                   	push   edx
10002657:	50                   	push   eax
10002658:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000265b:	e8 fc ff ff ff       	call   1000265c <FloppyDrive::read(unsigned long long, int, void*)+0xa4>	1000265c: R_386_PC32	FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)
10002660:	83 c4 20             	add    esp,0x20
10002663:	8b 4d a0             	mov    ecx,DWORD PTR [ebp-0x60]
10002666:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
10002669:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
1000266c:	51                   	push   ecx
1000266d:	52                   	push   edx
1000266e:	50                   	push   eax
1000266f:	68 eb 52 00 10       	push   0x100052eb	10002670: R_386_32	.text
10002674:	e8 fc ff ff ff       	call   10002675 <FloppyDrive::read(unsigned long long, int, void*)+0xbd>	10002675: R_386_PC32	Dbg::kprintf(char const*, ...)
10002679:	83 c4 10             	add    esp,0x10
1000267c:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
1000267f:	85 c0                	test   eax,eax
10002681:	75 2a                	jne    100026ad <FloppyDrive::read(unsigned long long, int, void*)+0xf5>
10002683:	a0 00 00 00 00       	mov    al,ds:0x0	10002684: R_386_32	hasCyl0Bf
10002688:	83 f0 01             	xor    eax,0x1
1000268b:	84 c0                	test   al,al
1000268d:	74 5a                	je     100026e9 <FloppyDrive::read(unsigned long long, int, void*)+0x131>
1000268f:	a1 00 00 00 00       	mov    eax,ds:0x0	10002690: R_386_32	_TEMP_cylinder0_bf
10002694:	50                   	push   eax
10002695:	6a 00                	push   0x0
10002697:	6a 00                	push   0x0
10002699:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000269c:	e8 fc ff ff ff       	call   1000269d <FloppyDrive::read(unsigned long long, int, void*)+0xe5>	1000269d: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
100026a1:	83 c4 10             	add    esp,0x10
100026a4:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100026a6: R_386_32	hasCyl0Bf
100026ab:	eb 3c                	jmp    100026e9 <FloppyDrive::read(unsigned long long, int, void*)+0x131>
100026ad:	8b 55 a8             	mov    edx,DWORD PTR [ebp-0x58]
100026b0:	a1 00 00 00 00       	mov    eax,ds:0x0	100026b1: R_386_32	_TEMP_cyl
100026b5:	39 c2                	cmp    edx,eax
100026b7:	74 30                	je     100026e9 <FloppyDrive::read(unsigned long long, int, void*)+0x131>
100026b9:	83 ec 0c             	sub    esp,0xc
100026bc:	68 03 53 00 10       	push   0x10005303	100026bd: R_386_32	.text
100026c1:	e8 fc ff ff ff       	call   100026c2 <FloppyDrive::read(unsigned long long, int, void*)+0x10a>	100026c2: R_386_PC32	Dbg::kprintf(char const*, ...)
100026c6:	83 c4 10             	add    esp,0x10
100026c9:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100026cb: R_386_32	_TEMP_trackBuffer
100026cf:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
100026d2:	52                   	push   edx
100026d3:	6a 00                	push   0x0
100026d5:	50                   	push   eax
100026d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100026d9:	e8 fc ff ff ff       	call   100026da <FloppyDrive::read(unsigned long long, int, void*)+0x122>	100026da: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
100026de:	83 c4 10             	add    esp,0x10
100026e1:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
100026e4:	a3 00 00 00 00       	mov    ds:0x0,eax	100026e5: R_386_32	_TEMP_cyl
100026e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100026ec:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100026f2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100026f5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100026fb:	83 c2 64             	add    edx,0x64
100026fe:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
10002702:	89 d0                	mov    eax,edx
10002704:	c1 e0 02             	shl    eax,0x2
10002707:	01 d0                	add    eax,edx
10002709:	c1 e0 02             	shl    eax,0x2
1000270c:	01 d0                	add    eax,edx
1000270e:	05 13 00 00 00       	add    eax,0x13	1000270f: R_386_32	floppyTable
10002713:	8a 00                	mov    al,BYTE PTR [eax]
10002715:	0f b6 c0             	movzx  eax,al
10002718:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000271b:	8b 45 a8             	mov    eax,DWORD PTR [ebp-0x58]
1000271e:	85 c0                	test   eax,eax
10002720:	75 53                	jne    10002775 <FloppyDrive::read(unsigned long long, int, void*)+0x1bd>
10002722:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002724: R_386_32	_TEMP_cylinder0_bf
10002728:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000272b:	48                   	dec    eax
1000272c:	c1 e0 09             	shl    eax,0x9
1000272f:	89 c1                	mov    ecx,eax
10002731:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10002734:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
10002738:	c1 e0 09             	shl    eax,0x9
1000273b:	01 c8                	add    eax,ecx
1000273d:	01 c2                	add    edx,eax
1000273f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002742:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10002745:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
10002748:	c7 45 d8 00 02 00 00 	mov    DWORD PTR [ebp-0x28],0x200
1000274f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10002752:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10002755:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10002758:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
1000275b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
1000275e:	89 c6                	mov    esi,eax
10002760:	89 d7                	mov    edi,edx
10002762:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002764:	89 c8                	mov    eax,ecx
10002766:	89 fa                	mov    edx,edi
10002768:	89 f3                	mov    ebx,esi
1000276a:	89 5d d0             	mov    DWORD PTR [ebp-0x30],ebx
1000276d:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10002770:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10002773:	eb 51                	jmp    100027c6 <FloppyDrive::read(unsigned long long, int, void*)+0x20e>
10002775:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002777: R_386_32	_TEMP_trackBuffer
1000277b:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
1000277e:	48                   	dec    eax
1000277f:	c1 e0 09             	shl    eax,0x9
10002782:	89 c1                	mov    ecx,eax
10002784:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10002787:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
1000278b:	c1 e0 09             	shl    eax,0x9
1000278e:	01 c8                	add    eax,ecx
10002790:	01 c2                	add    edx,eax
10002792:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002795:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10002798:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
1000279b:	c7 45 bc 00 02 00 00 	mov    DWORD PTR [ebp-0x44],0x200
100027a2:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100027a5:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
100027a8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100027ab:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
100027ae:	8b 4d bc             	mov    ecx,DWORD PTR [ebp-0x44]
100027b1:	89 c6                	mov    esi,eax
100027b3:	89 d7                	mov    edi,edx
100027b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100027b7:	89 c8                	mov    eax,ecx
100027b9:	89 fa                	mov    edx,edi
100027bb:	89 f3                	mov    ebx,esi
100027bd:	89 5d b4             	mov    DWORD PTR [ebp-0x4c],ebx
100027c0:	89 55 b0             	mov    DWORD PTR [ebp-0x50],edx
100027c3:	89 45 ac             	mov    DWORD PTR [ebp-0x54],eax
100027c6:	b8 00 00 00 00       	mov    eax,0x0
100027cb:	8d 65 f4             	lea    esp,[ebp-0xc]
100027ce:	5b                   	pop    ebx
100027cf:	5e                   	pop    esi
100027d0:	5f                   	pop    edi
100027d1:	5d                   	pop    ebp
100027d2:	c3                   	ret    
100027d3:	90                   	nop

100027d4 <FloppyDrive::write(unsigned long long, int, void*)>:
100027d4:	55                   	push   ebp
100027d5:	89 e5                	mov    ebp,esp
100027d7:	57                   	push   edi
100027d8:	56                   	push   esi
100027d9:	53                   	push   ebx
100027da:	81 ec 8c 00 00 00    	sub    esp,0x8c
100027e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100027e3:	89 85 70 ff ff ff    	mov    DWORD PTR [ebp-0x90],eax
100027e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100027ec:	89 85 74 ff ff ff    	mov    DWORD PTR [ebp-0x8c],eax
100027f2:	a0 00 00 00 00       	mov    al,ds:0x0	100027f3: R_386_32	_TEMP_allocated
100027f7:	83 f0 01             	xor    eax,0x1
100027fa:	84 c0                	test   al,al
100027fc:	74 46                	je     10002844 <FloppyDrive::write(unsigned long long, int, void*)+0x70>
100027fe:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	10002800: R_386_32	_TEMP_allocated
10002805:	83 ec 0c             	sub    esp,0xc
10002808:	68 00 48 00 00       	push   0x4800
1000280d:	e8 fc ff ff ff       	call   1000280e <FloppyDrive::write(unsigned long long, int, void*)+0x3a>	1000280e: R_386_PC32	malloc
10002812:	83 c4 10             	add    esp,0x10
10002815:	a3 00 00 00 00       	mov    ds:0x0,eax	10002816: R_386_32	_TEMP_trackBuffer
1000281a:	83 ec 0c             	sub    esp,0xc
1000281d:	68 00 48 00 00       	push   0x4800
10002822:	e8 fc ff ff ff       	call   10002823 <FloppyDrive::write(unsigned long long, int, void*)+0x4f>	10002823: R_386_PC32	malloc
10002827:	83 c4 10             	add    esp,0x10
1000282a:	a3 00 00 00 00       	mov    ds:0x0,eax	1000282b: R_386_32	_TEMP_cylinder0_bf
1000282f:	83 ec 0c             	sub    esp,0xc
10002832:	68 00 48 00 00       	push   0x4800
10002837:	e8 fc ff ff ff       	call   10002838 <FloppyDrive::write(unsigned long long, int, void*)+0x64>	10002838: R_386_PC32	malloc
1000283c:	83 c4 10             	add    esp,0x10
1000283f:	a3 00 00 00 00       	mov    ds:0x0,eax	10002840: R_386_32	_TEMP_write_bf
10002844:	83 7d 14 01          	cmp    DWORD PTR [ebp+0x14],0x1
10002848:	74 5b                	je     100028a5 <FloppyDrive::write(unsigned long long, int, void*)+0xd1>
1000284a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10002851:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10002854:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
10002857:	7d 42                	jge    1000289b <FloppyDrive::write(unsigned long long, int, void*)+0xc7>
10002859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000285c:	8b 00                	mov    eax,DWORD PTR [eax]
1000285e:	83 c0 2c             	add    eax,0x2c
10002861:	8b 30                	mov    esi,DWORD PTR [eax]
10002863:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10002866:	89 c1                	mov    ecx,eax
10002868:	89 c3                	mov    ebx,eax
1000286a:	c1 fb 1f             	sar    ebx,0x1f
1000286d:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [ebp-0x90]
10002873:	8b 95 74 ff ff ff    	mov    edx,DWORD PTR [ebp-0x8c]
10002879:	01 c8                	add    eax,ecx
1000287b:	11 da                	adc    edx,ebx
1000287d:	83 ec 0c             	sub    esp,0xc
10002880:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10002883:	6a 01                	push   0x1
10002885:	52                   	push   edx
10002886:	50                   	push   eax
10002887:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000288a:	ff d6                	call   esi
1000288c:	83 c4 20             	add    esp,0x20
1000288f:	81 45 18 00 02 00 00 	add    DWORD PTR [ebp+0x18],0x200
10002896:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
10002899:	eb b6                	jmp    10002851 <FloppyDrive::write(unsigned long long, int, void*)+0x7d>
1000289b:	b8 00 00 00 00       	mov    eax,0x0
100028a0:	e9 d1 01 00 00       	jmp    10002a76 <FloppyDrive::write(unsigned long long, int, void*)+0x2a2>
100028a5:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [ebp-0x90]
100028ab:	83 ec 0c             	sub    esp,0xc
100028ae:	8d 55 80             	lea    edx,[ebp-0x80]
100028b1:	52                   	push   edx
100028b2:	8d 55 84             	lea    edx,[ebp-0x7c]
100028b5:	52                   	push   edx
100028b6:	8d 55 88             	lea    edx,[ebp-0x78]
100028b9:	52                   	push   edx
100028ba:	50                   	push   eax
100028bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100028be:	e8 fc ff ff ff       	call   100028bf <FloppyDrive::write(unsigned long long, int, void*)+0xeb>	100028bf: R_386_PC32	FloppyDrive::lbaToCHS(unsigned int, int*, int*, int*)
100028c3:	83 c4 20             	add    esp,0x20
100028c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100028c9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
100028cf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100028d2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
100028d8:	83 c2 64             	add    edx,0x64
100028db:	8b 54 90 08          	mov    edx,DWORD PTR [eax+edx*4+0x8]
100028df:	89 d0                	mov    eax,edx
100028e1:	c1 e0 02             	shl    eax,0x2
100028e4:	01 d0                	add    eax,edx
100028e6:	c1 e0 02             	shl    eax,0x2
100028e9:	01 d0                	add    eax,edx
100028eb:	05 13 00 00 00       	add    eax,0x13	100028ec: R_386_32	floppyTable
100028f0:	8a 00                	mov    al,BYTE PTR [eax]
100028f2:	0f b6 c0             	movzx  eax,al
100028f5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100028f8:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
100028fb:	85 c0                	test   eax,eax
100028fd:	75 77                	jne    10002976 <FloppyDrive::write(unsigned long long, int, void*)+0x1a2>
100028ff:	a0 00 00 00 00       	mov    al,ds:0x0	10002900: R_386_32	hasCyl0Bf
10002904:	84 c0                	test   al,al
10002906:	74 6e                	je     10002976 <FloppyDrive::write(unsigned long long, int, void*)+0x1a2>
10002908:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000290a: R_386_32	_TEMP_cylinder0_bf
1000290e:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002911:	48                   	dec    eax
10002912:	c1 e0 09             	shl    eax,0x9
10002915:	89 c1                	mov    ecx,eax
10002917:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
1000291a:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
1000291e:	c1 e0 09             	shl    eax,0x9
10002921:	01 c8                	add    eax,ecx
10002923:	01 d0                	add    eax,edx
10002925:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10002928:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000292b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
1000292e:	c7 45 d4 00 02 00 00 	mov    DWORD PTR [ebp-0x2c],0x200
10002935:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10002938:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
1000293b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
1000293e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
10002941:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
10002944:	89 c6                	mov    esi,eax
10002946:	89 d7                	mov    edi,edx
10002948:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000294a:	89 c8                	mov    eax,ecx
1000294c:	89 fa                	mov    edx,edi
1000294e:	89 f3                	mov    ebx,esi
10002950:	89 5d cc             	mov    DWORD PTR [ebp-0x34],ebx
10002953:	89 55 c8             	mov    DWORD PTR [ebp-0x38],edx
10002956:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10002959:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000295b: R_386_32	_TEMP_cylinder0_bf
1000295f:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002962:	52                   	push   edx
10002963:	6a 01                	push   0x1
10002965:	50                   	push   eax
10002966:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002969:	e8 fc ff ff ff       	call   1000296a <FloppyDrive::write(unsigned long long, int, void*)+0x196>	1000296a: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
1000296e:	83 c4 10             	add    esp,0x10
10002971:	e9 fb 00 00 00       	jmp    10002a71 <FloppyDrive::write(unsigned long long, int, void*)+0x29d>
10002976:	8b 55 88             	mov    edx,DWORD PTR [ebp-0x78]
10002979:	a1 00 00 00 00       	mov    eax,ds:0x0	1000297a: R_386_32	_TEMP_cyl
1000297e:	39 c2                	cmp    edx,eax
10002980:	75 6e                	jne    100029f0 <FloppyDrive::write(unsigned long long, int, void*)+0x21c>
10002982:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002984: R_386_32	_TEMP_trackBuffer
10002988:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
1000298b:	48                   	dec    eax
1000298c:	c1 e0 09             	shl    eax,0x9
1000298f:	89 c1                	mov    ecx,eax
10002991:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
10002994:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
10002998:	c1 e0 09             	shl    eax,0x9
1000299b:	01 c8                	add    eax,ecx
1000299d:	01 d0                	add    eax,edx
1000299f:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
100029a2:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100029a5:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
100029a8:	c7 45 b8 00 02 00 00 	mov    DWORD PTR [ebp-0x48],0x200
100029af:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100029b2:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
100029b5:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
100029b8:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
100029bb:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
100029be:	89 c6                	mov    esi,eax
100029c0:	89 d7                	mov    edi,edx
100029c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100029c4:	89 c8                	mov    eax,ecx
100029c6:	89 fa                	mov    edx,edi
100029c8:	89 f3                	mov    ebx,esi
100029ca:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
100029cd:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100029d0:	89 45 a8             	mov    DWORD PTR [ebp-0x58],eax
100029d3:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100029d5: R_386_32	_TEMP_trackBuffer
100029d9:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
100029dc:	52                   	push   edx
100029dd:	6a 01                	push   0x1
100029df:	50                   	push   eax
100029e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100029e3:	e8 fc ff ff ff       	call   100029e4 <FloppyDrive::write(unsigned long long, int, void*)+0x210>	100029e4: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
100029e8:	83 c4 10             	add    esp,0x10
100029eb:	e9 81 00 00 00       	jmp    10002a71 <FloppyDrive::write(unsigned long long, int, void*)+0x29d>
100029f0:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100029f2: R_386_32	_TEMP_write_bf
100029f6:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
100029f9:	52                   	push   edx
100029fa:	6a 00                	push   0x0
100029fc:	50                   	push   eax
100029fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a00:	e8 fc ff ff ff       	call   10002a01 <FloppyDrive::write(unsigned long long, int, void*)+0x22d>	10002a01: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002a05:	83 c4 10             	add    esp,0x10
10002a08:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002a0a: R_386_32	_TEMP_write_bf
10002a0e:	8b 45 80             	mov    eax,DWORD PTR [ebp-0x80]
10002a11:	48                   	dec    eax
10002a12:	c1 e0 09             	shl    eax,0x9
10002a15:	89 c1                	mov    ecx,eax
10002a17:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
10002a1a:	0f af 45 e0          	imul   eax,DWORD PTR [ebp-0x20]
10002a1e:	c1 e0 09             	shl    eax,0x9
10002a21:	01 c8                	add    eax,ecx
10002a23:	01 d0                	add    eax,edx
10002a25:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
10002a28:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002a2b:	89 45 a0             	mov    DWORD PTR [ebp-0x60],eax
10002a2e:	c7 45 9c 00 02 00 00 	mov    DWORD PTR [ebp-0x64],0x200
10002a35:	8b 45 a4             	mov    eax,DWORD PTR [ebp-0x5c]
10002a38:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10002a3b:	8b 45 a0             	mov    eax,DWORD PTR [ebp-0x60]
10002a3e:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
10002a41:	8b 4d 9c             	mov    ecx,DWORD PTR [ebp-0x64]
10002a44:	89 c6                	mov    esi,eax
10002a46:	89 d7                	mov    edi,edx
10002a48:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10002a4a:	89 c8                	mov    eax,ecx
10002a4c:	89 fa                	mov    edx,edi
10002a4e:	89 f3                	mov    ebx,esi
10002a50:	89 5d 94             	mov    DWORD PTR [ebp-0x6c],ebx
10002a53:	89 55 90             	mov    DWORD PTR [ebp-0x70],edx
10002a56:	89 45 8c             	mov    DWORD PTR [ebp-0x74],eax
10002a59:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10002a5b: R_386_32	_TEMP_write_bf
10002a5f:	8b 45 88             	mov    eax,DWORD PTR [ebp-0x78]
10002a62:	52                   	push   edx
10002a63:	6a 01                	push   0x1
10002a65:	50                   	push   eax
10002a66:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002a69:	e8 fc ff ff ff       	call   10002a6a <FloppyDrive::write(unsigned long long, int, void*)+0x296>	10002a6a: R_386_PC32	FloppyDrive::doTrack(int, bool, unsigned char*)
10002a6e:	83 c4 10             	add    esp,0x10
10002a71:	b8 00 00 00 00       	mov    eax,0x0
10002a76:	8d 65 f4             	lea    esp,[ebp-0xc]
10002a79:	5b                   	pop    ebx
10002a7a:	5e                   	pop    esi
10002a7b:	5f                   	pop    edi
10002a7c:	5d                   	pop    ebp
10002a7d:	c3                   	ret    

10002a7e <FloppyDrive::~FloppyDrive()>:
10002a7e:	55                   	push   ebp
10002a7f:	89 e5                	mov    ebp,esp
10002a81:	83 ec 08             	sub    esp,0x8
10002a84:	ba 08 00 00 00       	mov    edx,0x8	10002a85: R_386_32	vtable for FloppyDrive
10002a89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a8c:	89 10                	mov    DWORD PTR [eax],edx
10002a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002a91:	83 ec 0c             	sub    esp,0xc
10002a94:	50                   	push   eax
10002a95:	e8 fc ff ff ff       	call   10002a96 <FloppyDrive::~FloppyDrive()+0x18>	10002a96: R_386_PC32	PhysicalDisk::~PhysicalDisk()
10002a9a:	83 c4 10             	add    esp,0x10
10002a9d:	90                   	nop
10002a9e:	c9                   	leave  
10002a9f:	c3                   	ret    

10002aa0 <FloppyDrive::~FloppyDrive()>:
10002aa0:	55                   	push   ebp
10002aa1:	89 e5                	mov    ebp,esp
10002aa3:	83 ec 08             	sub    esp,0x8
10002aa6:	83 ec 0c             	sub    esp,0xc
10002aa9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002aac:	e8 fc ff ff ff       	call   10002aad <FloppyDrive::~FloppyDrive()+0xd>	10002aad: R_386_PC32	FloppyDrive::~FloppyDrive()
10002ab1:	83 c4 10             	add    esp,0x10
10002ab4:	83 ec 08             	sub    esp,0x8
10002ab7:	68 74 01 00 00       	push   0x174
10002abc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002abf:	e8 fc ff ff ff       	call   10002ac0 <FloppyDrive::~FloppyDrive()+0x20>	10002ac0: R_386_PC32	operator delete(void*, unsigned long)
10002ac4:	83 c4 10             	add    esp,0x10
10002ac7:	c9                   	leave  
10002ac8:	c3                   	ret    
10002ac9:	90                   	nop

10002aca <Gameport::Gameport()>:
10002aca:	55                   	push   ebp
10002acb:	89 e5                	mov    ebp,esp
10002acd:	83 ec 08             	sub    esp,0x8
10002ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ad3:	83 ec 08             	sub    esp,0x8
10002ad6:	68 18 54 00 10       	push   0x10005418	10002ad7: R_386_32	.text
10002adb:	50                   	push   eax
10002adc:	e8 fc ff ff ff       	call   10002add <Gameport::Gameport()+0x13>	10002add: R_386_PC32	Device::Device(char const*)
10002ae1:	83 c4 10             	add    esp,0x10
10002ae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ae7:	05 58 01 00 00       	add    eax,0x158
10002aec:	83 ec 0c             	sub    esp,0xc
10002aef:	50                   	push   eax
10002af0:	e8 fc ff ff ff       	call   10002af1 <Gameport::Gameport()+0x27>	10002af1: R_386_PC32	JoystickHost::JoystickHost()
10002af5:	83 c4 10             	add    esp,0x10
10002af8:	ba 08 00 00 00       	mov    edx,0x8	10002af9: R_386_32	vtable for Gameport
10002afd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b00:	89 10                	mov    DWORD PTR [eax],edx
10002b02:	ba 38 00 00 00       	mov    edx,0x38	10002b03: R_386_32	vtable for Gameport
10002b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b0a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10002b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b13:	c7 80 5c 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x15c],0x14a
10002b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b20:	c7 80 60 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x160],0x14a
10002b2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b2d:	c7 80 64 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x164],0x14a
10002b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b3a:	c7 80 68 01 00 00 4a 01 00 00 	mov    DWORD PTR [eax+0x168],0x14a
10002b44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b47:	c7 80 6c 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x16c],0x3d4
10002b51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b54:	c7 80 70 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x170],0x3d4
10002b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b61:	c7 80 74 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x174],0x3d4
10002b6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b6e:	c7 80 78 01 00 00 d4 03 00 00 	mov    DWORD PTR [eax+0x178],0x3d4
10002b78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b7b:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
10002b82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b85:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10002b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b8f:	c6 80 7e 01 00 00 00 	mov    BYTE PTR [eax+0x17e],0x0
10002b96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002b99:	c6 80 7f 01 00 00 00 	mov    BYTE PTR [eax+0x17f],0x0
10002ba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002ba3:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
10002baa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bad:	c6 80 7d 01 00 00 00 	mov    BYTE PTR [eax+0x17d],0x0
10002bb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bb7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002bbd:	0f b6 d0             	movzx  edx,al
10002bc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bc3:	66 c7 44 90 04 01 02 	mov    WORD PTR [eax+edx*4+0x4],0x201
10002bca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bcd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002bd3:	0f b6 d0             	movzx  edx,al
10002bd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bd9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10002bde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002be1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10002be7:	8d 50 01             	lea    edx,[eax+0x1]
10002bea:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10002bed:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10002bf3:	0f b6 d0             	movzx  edx,al
10002bf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002bf9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10002bfd:	83 e1 3f             	and    ecx,0x3f
10002c00:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10002c04:	90                   	nop
10002c05:	c9                   	leave  
10002c06:	c3                   	ret    
10002c07:	90                   	nop

10002c08 <Gameport::~Gameport()>:
10002c08:	55                   	push   ebp
10002c09:	89 e5                	mov    ebp,esp
10002c0b:	83 ec 08             	sub    esp,0x8
10002c0e:	ba 08 00 00 00       	mov    edx,0x8	10002c0f: R_386_32	vtable for Gameport
10002c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c16:	89 10                	mov    DWORD PTR [eax],edx
10002c18:	ba 38 00 00 00       	mov    edx,0x38	10002c19: R_386_32	vtable for Gameport
10002c1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c20:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10002c26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10002c29:	83 ec 0c             	sub    esp,0xc
10002c2c:	50                   	push   eax
10002c2d:	e8 fc ff ff ff       	call   10002c2e <Gameport::~Gameport()+0x26>	10002c2e: R_386_PC32	Device::~Device()
10002c32:	83 c4 10             	add    esp,0x10
10002c35:	90                   	nop
10002c36:	c9                   	leave  
10002c37:	c3                   	ret    

10002c38 <Gameport::~Gameport()>:
10002c38:	55                   	push   ebp
10002c39:	89 e5                	mov    ebp,esp
10002c3b:	83 ec 08             	sub    esp,0x8
10002c3e:	83 ec 0c             	sub    esp,0xc
10002c41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002c44:	e8 fc ff ff ff       	call   10002c45 <Gameport::~Gameport()+0xd>	10002c45: R_386_PC32	Gameport::~Gameport()
10002c49:	83 c4 10             	add    esp,0x10
10002c4c:	83 ec 08             	sub    esp,0x8
10002c4f:	68 80 01 00 00       	push   0x180
10002c54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10002c57:	e8 fc ff ff ff       	call   10002c58 <Gameport::~Gameport()+0x20>	10002c58: R_386_PC32	operator delete(void*, unsigned long)
10002c5c:	83 c4 10             	add    esp,0x10
10002c5f:	c9                   	leave  
10002c60:	c3                   	ret    
10002c61:	90                   	nop

10002c62 <Gameport::calibration(int)>:
10002c62:	57                   	push   edi
10002c63:	56                   	push   esi
10002c64:	53                   	push   ebx
10002c65:	81 ec d0 00 00 00    	sub    esp,0xd0
10002c6b:	8b 9c 24 e0 00 00 00 	mov    ebx,DWORD PTR [esp+0xe0]
10002c72:	8b b4 24 e4 00 00 00 	mov    esi,DWORD PTR [esp+0xe4]
10002c79:	80 bb 7e 01 00 00 00 	cmp    BYTE PTR [ebx+0x17e],0x0
10002c80:	74 0c                	je     10002c8e <Gameport::calibration(int)+0x2c>
10002c82:	c6 83 7f 01 00 00 01 	mov    BYTE PTR [ebx+0x17f],0x1
10002c89:	e9 09 01 00 00       	jmp    10002d97 <Gameport::calibration(int)+0x135>
10002c8e:	8d bc 24 9c 00 00 00 	lea    edi,[esp+0x9c]
10002c95:	50                   	push   eax
10002c96:	56                   	push   esi
10002c97:	53                   	push   ebx
10002c98:	57                   	push   edi
10002c99:	e8 fc ff ff ff       	call   10002c9a <Gameport::calibration(int)+0x38>	10002c9a: R_386_PC32	Gameport::readRaw(int)
10002c9e:	83 ec 0c             	sub    esp,0xc
10002ca1:	6a 00                	push   0x0
10002ca3:	68 40 42 0f 00       	push   0xf4240
10002ca8:	e8 fc ff ff ff       	call   10002ca9 <Gameport::calibration(int)+0x47>	10002ca9: R_386_PC32	nanoSleep(unsigned long long)
10002cad:	8d 44 24 20          	lea    eax,[esp+0x20]
10002cb1:	83 c4 1c             	add    esp,0x1c
10002cb4:	56                   	push   esi
10002cb5:	53                   	push   ebx
10002cb6:	50                   	push   eax
10002cb7:	e8 fc ff ff ff       	call   10002cb8 <Gameport::calibration(int)+0x56>	10002cb8: R_386_PC32	Gameport::readRaw(int)
10002cbc:	83 ec 0c             	sub    esp,0xc
10002cbf:	6a 00                	push   0x0
10002cc1:	68 40 42 0f 00       	push   0xf4240
10002cc6:	e8 fc ff ff ff       	call   10002cc7 <Gameport::calibration(int)+0x65>	10002cc7: R_386_PC32	nanoSleep(unsigned long long)
10002ccb:	8d 44 24 54          	lea    eax,[esp+0x54]
10002ccf:	83 c4 1c             	add    esp,0x1c
10002cd2:	56                   	push   esi
10002cd3:	53                   	push   ebx
10002cd4:	50                   	push   eax
10002cd5:	e8 fc ff ff ff       	call   10002cd6 <Gameport::calibration(int)+0x74>	10002cd6: R_386_PC32	Gameport::readRaw(int)
10002cda:	83 ec 0c             	sub    esp,0xc
10002cdd:	6a 00                	push   0x0
10002cdf:	68 40 42 0f 00       	push   0xf4240
10002ce4:	e8 fc ff ff ff       	call   10002ce5 <Gameport::calibration(int)+0x83>	10002ce5: R_386_PC32	nanoSleep(unsigned long long)
10002ce9:	8d 84 24 88 00 00 00 	lea    eax,[esp+0x88]
10002cf0:	83 c4 1c             	add    esp,0x1c
10002cf3:	56                   	push   esi
10002cf4:	53                   	push   ebx
10002cf5:	50                   	push   eax
10002cf6:	e8 fc ff ff ff       	call   10002cf7 <Gameport::calibration(int)+0x95>	10002cf7: R_386_PC32	Gameport::readRaw(int)
10002cfb:	83 ec 0c             	sub    esp,0xc
10002cfe:	6a 00                	push   0x0
10002d00:	68 40 42 0f 00       	push   0xf4240
10002d05:	e8 fc ff ff ff       	call   10002d06 <Gameport::calibration(int)+0xa4>	10002d06: R_386_PC32	nanoSleep(unsigned long long)
10002d0a:	83 c4 1c             	add    esp,0x1c
10002d0d:	56                   	push   esi
10002d0e:	53                   	push   ebx
10002d0f:	57                   	push   edi
10002d10:	bf 03 00 00 00       	mov    edi,0x3
10002d15:	e8 fc ff ff ff       	call   10002d16 <Gameport::calibration(int)+0xb4>	10002d16: R_386_PC32	Gameport::readRaw(int)
10002d1a:	31 d2                	xor    edx,edx
10002d1c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10002d20:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
10002d24:	03 84 24 88 00 00 00 	add    eax,DWORD PTR [esp+0x88]
10002d2b:	f7 f7                	div    edi
10002d2d:	31 d2                	xor    edx,edx
10002d2f:	89 c1                	mov    ecx,eax
10002d31:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10002d35:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10002d39:	03 84 24 8c 00 00 00 	add    eax,DWORD PTR [esp+0x8c]
10002d40:	83 c4 0c             	add    esp,0xc
10002d43:	f7 f7                	div    edi
10002d45:	85 f6                	test   esi,esi
10002d47:	75 0e                	jne    10002d57 <Gameport::calibration(int)+0xf5>
10002d49:	89 8b 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],ecx
10002d4f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
10002d55:	eb 0c                	jmp    10002d63 <Gameport::calibration(int)+0x101>
10002d57:	89 8b 64 01 00 00    	mov    DWORD PTR [ebx+0x164],ecx
10002d5d:	89 83 68 01 00 00    	mov    DWORD PTR [ebx+0x168],eax
10002d63:	6b 83 5c 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x15c],0x3
10002d6a:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
10002d70:	6b 83 60 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x160],0x3
10002d77:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
10002d7d:	6b 83 64 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x164],0x3
10002d84:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
10002d8a:	6b 83 68 01 00 00 03 	imul   eax,DWORD PTR [ebx+0x168],0x3
10002d91:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
10002d97:	81 c4 d0 00 00 00    	add    esp,0xd0
10002d9d:	5b                   	pop    ebx
10002d9e:	5e                   	pop    esi
10002d9f:	5f                   	pop    edi
10002da0:	c3                   	ret    
10002da1:	90                   	nop

10002da2 <Gameport::detect()>:
10002da2:	53                   	push   ebx
10002da3:	81 ec 88 00 00 00    	sub    esp,0x88
10002da9:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
10002db0:	8d 44 24 18          	lea    eax,[esp+0x18]
10002db4:	51                   	push   ecx
10002db5:	6a 00                	push   0x0
10002db7:	53                   	push   ebx
10002db8:	50                   	push   eax
10002db9:	e8 fc ff ff ff       	call   10002dba <Gameport::detect()+0x18>	10002dba: R_386_PC32	Gameport::readRaw(int)
10002dbe:	8d 44 24 58          	lea    eax,[esp+0x58]
10002dc2:	52                   	push   edx
10002dc3:	52                   	push   edx
10002dc4:	6a 01                	push   0x1
10002dc6:	53                   	push   ebx
10002dc7:	50                   	push   eax
10002dc8:	e8 fc ff ff ff       	call   10002dc9 <Gameport::detect()+0x27>	10002dc9: R_386_PC32	Gameport::readRaw(int)
10002dcd:	83 c4 1c             	add    esp,0x1c
10002dd0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10002dd7:	75 14                	jne    10002ded <Gameport::detect()+0x4b>
10002dd9:	f6 44 24 18 10       	test   BYTE PTR [esp+0x18],0x10
10002dde:	74 0d                	je     10002ded <Gameport::detect()+0x4b>
10002de0:	52                   	push   edx
10002de1:	52                   	push   edx
10002de2:	6a 00                	push   0x0
10002de4:	53                   	push   ebx
10002de5:	e8 fc ff ff ff       	call   10002de6 <Gameport::detect()+0x44>	10002de6: R_386_PC32	Gameport::calibration(int)
10002dea:	83 c4 10             	add    esp,0x10
10002ded:	8a 54 24 4c          	mov    dl,BYTE PTR [esp+0x4c]
10002df1:	83 e2 10             	and    edx,0x10
10002df4:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10002dfb:	75 19                	jne    10002e16 <Gameport::detect()+0x74>
10002dfd:	84 d2                	test   dl,dl
10002dff:	74 15                	je     10002e16 <Gameport::detect()+0x74>
10002e01:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
10002e05:	50                   	push   eax
10002e06:	50                   	push   eax
10002e07:	6a 01                	push   0x1
10002e09:	53                   	push   ebx
10002e0a:	e8 fc ff ff ff       	call   10002e0b <Gameport::detect()+0x69>	10002e0b: R_386_PC32	Gameport::calibration(int)
10002e0f:	83 c4 10             	add    esp,0x10
10002e12:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
10002e16:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
10002e1a:	c0 e8 04             	shr    al,0x4
10002e1d:	83 e0 01             	and    eax,0x1
10002e20:	84 d2                	test   dl,dl
10002e22:	88 83 7c 01 00 00    	mov    BYTE PTR [ebx+0x17c],al
10002e28:	0f 95 83 7d 01 00 00 	setne  BYTE PTR [ebx+0x17d]
10002e2f:	81 c4 88 00 00 00    	add    esp,0x88
10002e35:	5b                   	pop    ebx
10002e36:	c3                   	ret    
10002e37:	90                   	nop

10002e38 <Gameport::read(int)>:
10002e38:	57                   	push   edi
10002e39:	56                   	push   esi
10002e3a:	53                   	push   ebx
10002e3b:	83 ec 50             	sub    esp,0x50
10002e3e:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10002e42:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002e46:	85 f6                	test   esi,esi
10002e48:	75 09                	jne    10002e53 <Gameport::read(int)+0x1b>
10002e4a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
10002e51:	eb 0c                	jmp    10002e5f <Gameport::read(int)+0x27>
10002e53:	83 fe 01             	cmp    esi,0x1
10002e56:	75 15                	jne    10002e6d <Gameport::read(int)+0x35>
10002e58:	80 bb 7d 01 00 00 00 	cmp    BYTE PTR [ebx+0x17d],0x0
10002e5f:	75 0c                	jne    10002e6d <Gameport::read(int)+0x35>
10002e61:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002e65:	80 20 ef             	and    BYTE PTR [eax],0xef
10002e68:	e9 b0 00 00 00       	jmp    10002f1d <Gameport::read(int)+0xe5>
10002e6d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10002e71:	52                   	push   edx
10002e72:	56                   	push   esi
10002e73:	53                   	push   ebx
10002e74:	50                   	push   eax
10002e75:	e8 fc ff ff ff       	call   10002e76 <Gameport::read(int)+0x3e>	10002e76: R_386_PC32	Gameport::readRaw(int)
10002e7a:	83 c4 0c             	add    esp,0xc
10002e7d:	4e                   	dec    esi
10002e7e:	75 1a                	jne    10002e9a <Gameport::read(int)+0x62>
10002e80:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
10002e86:	8b b3 68 01 00 00    	mov    esi,DWORD PTR [ebx+0x168]
10002e8c:	8b 93 74 01 00 00    	mov    edx,DWORD PTR [ebx+0x174]
10002e92:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
10002e98:	eb 18                	jmp    10002eb2 <Gameport::read(int)+0x7a>
10002e9a:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
10002ea0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
10002ea6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
10002eac:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
10002eb2:	85 ff                	test   edi,edi
10002eb4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002eb8:	0f 94 c0             	sete   al
10002ebb:	85 f6                	test   esi,esi
10002ebd:	0f 94 c1             	sete   cl
10002ec0:	09 c1                	or     ecx,eax
10002ec2:	39 d7                	cmp    edi,edx
10002ec4:	0f 94 c0             	sete   al
10002ec7:	08 c1                	or     cl,al
10002ec9:	75 96                	jne    10002e61 <Gameport::read(int)+0x29>
10002ecb:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
10002ecf:	74 90                	je     10002e61 <Gameport::read(int)+0x29>
10002ed1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002ed5:	89 d9                	mov    ecx,ebx
10002ed7:	29 f1                	sub    ecx,esi
10002ed9:	6b c9 7f             	imul   ecx,ecx,0x7f
10002edc:	39 fb                	cmp    ebx,edi
10002ede:	7e 1a                	jle    10002efa <Gameport::read(int)+0xc2>
10002ee0:	29 fb                	sub    ebx,edi
10002ee2:	29 fa                	sub    edx,edi
10002ee4:	6b db 7f             	imul   ebx,ebx,0x7f
10002ee7:	89 d7                	mov    edi,edx
10002ee9:	89 d8                	mov    eax,ebx
10002eeb:	99                   	cdq    
10002eec:	f7 ff                	idiv   edi
10002eee:	89 c3                	mov    ebx,eax
10002ef0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002ef4:	29 f0                	sub    eax,esi
10002ef6:	89 c6                	mov    esi,eax
10002ef8:	eb 07                	jmp    10002f01 <Gameport::read(int)+0xc9>
10002efa:	89 c8                	mov    eax,ecx
10002efc:	99                   	cdq    
10002efd:	f7 ff                	idiv   edi
10002eff:	89 c3                	mov    ebx,eax
10002f01:	89 c8                	mov    eax,ecx
10002f03:	88 5c 24 2d          	mov    BYTE PTR [esp+0x2d],bl
10002f07:	99                   	cdq    
10002f08:	b9 0d 00 00 00       	mov    ecx,0xd
10002f0d:	f7 fe                	idiv   esi
10002f0f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
10002f13:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
10002f17:	8d 74 24 1c          	lea    esi,[esp+0x1c]
10002f1b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002f1d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002f21:	83 c4 50             	add    esp,0x50
10002f24:	5b                   	pop    ebx
10002f25:	5e                   	pop    esi
10002f26:	5f                   	pop    edi
10002f27:	c2 04 00             	ret    0x4

10002f2a <non-virtual thunk to Gameport::read(int)>:
10002f2a:	81 6c 24 08 58 01 00 00 	sub    DWORD PTR [esp+0x8],0x158
10002f32:	e9 01 ff ff ff       	jmp    10002e38 <Gameport::read(int)>
10002f37:	90                   	nop

10002f38 <Gameport::readRaw(int)>:
10002f38:	57                   	push   edi
10002f39:	ba 01 02 00 00       	mov    edx,0x201
10002f3e:	56                   	push   esi
10002f3f:	53                   	push   ebx
10002f40:	83 ec 10             	sub    esp,0x10
10002f43:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10002f47:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10002f4b:	8a 03                	mov    al,BYTE PTR [ebx]
10002f4d:	83 e0 e0             	and    eax,0xffffffe0
10002f50:	83 c8 12             	or     eax,0x12
10002f53:	88 03                	mov    BYTE PTR [ebx],al
10002f55:	ec                   	in     al,dx
10002f56:	88 c2                	mov    dl,al
10002f58:	85 f6                	test   esi,esi
10002f5a:	75 11                	jne    10002f6d <Gameport::readRaw(int)+0x35>
10002f5c:	c0 ea 04             	shr    dl,0x4
10002f5f:	c0 e8 05             	shr    al,0x5
10002f62:	83 e2 01             	and    edx,0x1
10002f65:	83 e0 01             	and    eax,0x1
10002f68:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
10002f6b:	eb 0c                	jmp    10002f79 <Gameport::readRaw(int)+0x41>
10002f6d:	c0 ea 06             	shr    dl,0x6
10002f70:	c0 e8 07             	shr    al,0x7
10002f73:	83 e2 01             	and    edx,0x1
10002f76:	88 53 01             	mov    BYTE PTR [ebx+0x1],dl
10002f79:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
10002f7c:	ba 01 02 00 00       	mov    edx,0x201
10002f81:	b0 ff                	mov    al,0xff
10002f83:	ee                   	out    dx,al
10002f84:	e8 fc ff ff ff       	call   10002f85 <Gameport::readRaw(int)+0x4d>	10002f85: R_386_PC32	lockScheduler()
10002f89:	4e                   	dec    esi
10002f8a:	c7 44 24 0c ff ff 00 00 	mov    DWORD PTR [esp+0xc],0xffff
10002f92:	0f 94 c1             	sete   cl
10002f95:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
10002f9a:	0f b6 f1             	movzx  esi,cl
10002f9d:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
10002fa2:	0f b6 c9             	movzx  ecx,cl
10002fa5:	8d 74 76 01          	lea    esi,[esi+esi*2+0x1]
10002fa9:	49                   	dec    ecx
10002faa:	31 ff                	xor    edi,edi
10002fac:	83 e1 fa             	and    ecx,0xfffffffa
10002faf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
10002fb7:	83 c1 08             	add    ecx,0x8
10002fba:	ba 01 02 00 00       	mov    edx,0x201
10002fbf:	ec                   	in     al,dx
10002fc0:	0f b6 c0             	movzx  eax,al
10002fc3:	85 f0                	test   eax,esi
10002fc5:	0f 94 c2             	sete   dl
10002fc8:	08 54 24 0a          	or     BYTE PTR [esp+0xa],dl
10002fcc:	80 7c 24 0a 01       	cmp    BYTE PTR [esp+0xa],0x1
10002fd1:	83 54 24 04 00       	adc    DWORD PTR [esp+0x4],0x0
10002fd6:	85 c8                	test   eax,ecx
10002fd8:	0f 94 c0             	sete   al
10002fdb:	08 44 24 0b          	or     BYTE PTR [esp+0xb],al
10002fdf:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
10002fe4:	83 d7 00             	adc    edi,0x0
10002fe7:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
10002feb:	75 19                	jne    10003006 <Gameport::readRaw(int)+0xce>
10002fed:	e8 fc ff ff ff       	call   10002fee <Gameport::readRaw(int)+0xb6>	10002fee: R_386_PC32	unlockScheduler()
10002ff2:	81 ff ff ff 00 00    	cmp    edi,0xffff
10002ff8:	74 1c                	je     10003016 <Gameport::readRaw(int)+0xde>
10002ffa:	81 7c 24 04 ff ff 00 00 	cmp    DWORD PTR [esp+0x4],0xffff
10003002:	75 15                	jne    10003019 <Gameport::readRaw(int)+0xe1>
10003004:	eb 10                	jmp    10003016 <Gameport::readRaw(int)+0xde>
10003006:	80 7c 24 0a 00       	cmp    BYTE PTR [esp+0xa],0x0
1000300b:	74 ad                	je     10002fba <Gameport::readRaw(int)+0x82>
1000300d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
10003012:	74 a6                	je     10002fba <Gameport::readRaw(int)+0x82>
10003014:	eb d7                	jmp    10002fed <Gameport::readRaw(int)+0xb5>
10003016:	80 23 ef             	and    BYTE PTR [ebx],0xef
10003019:	89 7b 18             	mov    DWORD PTR [ebx+0x18],edi
1000301c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003020:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10003023:	83 c4 10             	add    esp,0x10
10003026:	89 d8                	mov    eax,ebx
10003028:	5b                   	pop    ebx
10003029:	5e                   	pop    esi
1000302a:	5f                   	pop    edi
1000302b:	c2 04 00             	ret    0x4

1000302e <Gameport::open(int, int, void*)>:
1000302e:	31 c0                	xor    eax,eax
10003030:	c3                   	ret    
10003031:	90                   	nop

10003032 <Gameport::close(int, int, void*)>:
10003032:	31 c0                	xor    eax,eax
10003034:	c3                   	ret    
10003035:	90                   	nop

10003036 <DMAChannel::DMAChannel(int)>:
10003036:	55                   	push   ebp
10003037:	89 e5                	mov    ebp,esp
10003039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000303c:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10003043:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003046:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
1000304d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003050:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10003053:	89 10                	mov    DWORD PTR [eax],edx
10003055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003058:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
1000305f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003062:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10003069:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000306c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
10003070:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003073:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
10003077:	83 7d 0c 03          	cmp    DWORD PTR [ebp+0xc],0x3
1000307b:	0f 9f c2             	setg   dl
1000307e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003081:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
10003084:	90                   	nop
10003085:	5d                   	pop    ebp
10003086:	c3                   	ret    
10003087:	90                   	nop

10003088 <DMAChannel::~DMAChannel()>:
10003088:	55                   	push   ebp
10003089:	89 e5                	mov    ebp,esp
1000308b:	83 ec 08             	sub    esp,0x8
1000308e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003091:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10003094:	85 c0                	test   eax,eax
10003096:	74 19                	je     100030b1 <DMAChannel::~DMAChannel()+0x29>
10003098:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000309b:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
1000309e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100030a1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100030a4:	83 ec 08             	sub    esp,0x8
100030a7:	52                   	push   edx
100030a8:	50                   	push   eax
100030a9:	e8 fc ff ff ff       	call   100030aa <DMAChannel::~DMAChannel()+0x22>	100030aa: R_386_PC32	Phys::freeDMA(unsigned long, unsigned long)
100030ae:	83 c4 10             	add    esp,0x10
100030b1:	90                   	nop
100030b2:	c9                   	leave  
100030b3:	c3                   	ret    

100030b4 <DMAChannel::getAddress()>:
100030b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100030b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100030bb:	c3                   	ret    

100030bc <DMAChannel::getChannelNum()>:
100030bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100030c0:	8b 00                	mov    eax,DWORD PTR [eax]
100030c2:	c3                   	ret    
100030c3:	90                   	nop

100030c4 <DMAChannel::setLength(unsigned int)>:
100030c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100030c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
100030cc:	3d 00 00 01 00       	cmp    eax,0x10000
100030d1:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
100030d4:	76 0d                	jbe    100030e3 <DMAChannel::setLength(unsigned int)+0x1f>
100030d6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	100030da: R_386_32	dmaLong
100030de:	e9 fc ff ff ff       	jmp    100030df <DMAChannel::setLength(unsigned int)+0x1b>	100030df: R_386_PC32	Krnl::panic(char const*)
100030e3:	c3                   	ret    

100030e4 <DMAChannel::setAddress(unsigned int)>:
100030e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100030e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
100030ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100030ef:	c3                   	ret    

100030f0 <DMAChannel::allocateAddressAndSet(unsigned short)>:
100030f0:	56                   	push   esi
100030f1:	53                   	push   ebx
100030f2:	83 ec 10             	sub    esp,0x10
100030f5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100030f9:	0f b7 74 24 20       	movzx  esi,WORD PTR [esp+0x20]
100030fe:	56                   	push   esi
100030ff:	e8 fc ff ff ff       	call   10003100 <DMAChannel::allocateAddressAndSet(unsigned short)+0x10>	10003100: R_386_PC32	Phys::allocateDMA(unsigned long)
10003104:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
10003107:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
1000310a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
1000310d:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10003110:	83 c4 14             	add    esp,0x14
10003113:	5b                   	pop    ebx
10003114:	5e                   	pop    esi
10003115:	c3                   	ret    

10003116 <DMAChannel::setMode(unsigned char)>:
10003116:	53                   	push   ebx
10003117:	83 ec 08             	sub    esp,0x8
1000311a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000311e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003122:	80 7b 0d 00          	cmp    BYTE PTR [ebx+0xd],0x0
10003126:	88 43 0f             	mov    BYTE PTR [ebx+0xf],al
10003129:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
1000312d:	74 2a                	je     10003159 <DMAChannel::setMode(unsigned char)+0x43>
1000312f:	51                   	push   ecx
10003130:	51                   	push   ecx
10003131:	6a 01                	push   0x1
10003133:	53                   	push   ebx
10003134:	e8 fc ff ff ff       	call   10003135 <DMAChannel::setMode(unsigned char)+0x1f>	10003135: R_386_PC32	DMAChannel::mask(bool)
10003139:	80 7b 0e 01          	cmp    BYTE PTR [ebx+0xe],0x1
1000313d:	8a 43 0f             	mov    al,BYTE PTR [ebx+0xf]
10003140:	19 d2                	sbb    edx,edx
10003142:	80 e2 35             	and    dl,0x35
10003145:	81 c2 d6 00 00 00    	add    edx,0xd6
1000314b:	ee                   	out    dx,al
1000314c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
10003150:	83 c4 18             	add    esp,0x18
10003153:	5b                   	pop    ebx
10003154:	e9 ff 00 00 00       	jmp    10003258 <DMAChannel::unmask()>
10003159:	83 c4 08             	add    esp,0x8
1000315c:	5b                   	pop    ebx
1000315d:	c3                   	ret    

1000315e <DMAChannel::start()>:
1000315e:	57                   	push   edi
1000315f:	56                   	push   esi
10003160:	53                   	push   ebx
10003161:	83 ec 10             	sub    esp,0x10
10003164:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10003168:	8b 06                	mov    eax,DWORD PTR [esi]
1000316a:	83 f8 07             	cmp    eax,0x7
1000316d:	0f 87 96 00 00 00    	ja     10003209 <DMAChannel::start()+0xab>
10003173:	8a 98 0c 55 00 10    	mov    bl,BYTE PTR [eax+0x1000550c]	10003175: R_386_32	.text
10003179:	88 5c 24 0d          	mov    BYTE PTR [esp+0xd],bl
1000317d:	8a 98 14 55 00 10    	mov    bl,BYTE PTR [eax+0x10005514]	1000317f: R_386_32	.text
10003183:	8a 80 1c 55 00 10    	mov    al,BYTE PTR [eax+0x1000551c]	10003185: R_386_32	.text
10003189:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
1000318d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
10003191:	e8 fc ff ff ff       	call   10003192 <DMAChannel::start()+0x34>	10003192: R_386_PC32	lockScheduler()
10003196:	50                   	push   eax
10003197:	50                   	push   eax
10003198:	6a 01                	push   0x1
1000319a:	56                   	push   esi
1000319b:	e8 fc ff ff ff       	call   1000319c <DMAChannel::start()+0x3e>	1000319c: R_386_PC32	DMAChannel::mask(bool)
100031a0:	8a 5e 0e             	mov    bl,BYTE PTR [esi+0xe]
100031a3:	83 c4 10             	add    esp,0x10
100031a6:	80 fb 01             	cmp    bl,0x1
100031a9:	19 c9                	sbb    ecx,ecx
100031ab:	31 ff                	xor    edi,edi
100031ad:	80 e1 34             	and    cl,0x34
100031b0:	89 f8                	mov    eax,edi
100031b2:	81 c1 d8 00 00 00    	add    ecx,0xd8
100031b8:	89 ca                	mov    edx,ecx
100031ba:	ee                   	out    dx,al
100031bb:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
100031c0:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
100031c3:	ee                   	out    dx,al
100031c4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
100031c7:	c1 e8 08             	shr    eax,0x8
100031ca:	ee                   	out    dx,al
100031cb:	89 f8                	mov    eax,edi
100031cd:	89 ca                	mov    edx,ecx
100031cf:	ee                   	out    dx,al
100031d0:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
100031d3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
100031d8:	8d 41 ff             	lea    eax,[ecx-0x1]
100031db:	ee                   	out    dx,al
100031dc:	8d 41 ff             	lea    eax,[ecx-0x1]
100031df:	c1 e8 08             	shr    eax,0x8
100031e2:	ee                   	out    dx,al
100031e3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
100031e6:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
100031eb:	c1 e8 10             	shr    eax,0x10
100031ee:	ee                   	out    dx,al
100031ef:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
100031f3:	74 27                	je     1000321c <DMAChannel::start()+0xbe>
100031f5:	80 fb 01             	cmp    bl,0x1
100031f8:	8a 46 0f             	mov    al,BYTE PTR [esi+0xf]
100031fb:	19 d2                	sbb    edx,edx
100031fd:	80 e2 35             	and    dl,0x35
10003200:	81 c2 d6 00 00 00    	add    edx,0xd6
10003206:	ee                   	out    dx,al
10003207:	eb 13                	jmp    1000321c <DMAChannel::start()+0xbe>
10003209:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	1000320d: R_386_32	dmaConfused
10003211:	83 c4 10             	add    esp,0x10
10003214:	5b                   	pop    ebx
10003215:	5e                   	pop    esi
10003216:	5f                   	pop    edi
10003217:	e9 fc ff ff ff       	jmp    10003218 <DMAChannel::start()+0xba>	10003218: R_386_PC32	Krnl::panic(char const*)
1000321c:	c6 46 0d 01          	mov    BYTE PTR [esi+0xd],0x1
10003220:	83 ec 0c             	sub    esp,0xc
10003223:	56                   	push   esi
10003224:	e8 fc ff ff ff       	call   10003225 <DMAChannel::start()+0xc7>	10003225: R_386_PC32	DMAChannel::unmask()
10003229:	83 c4 20             	add    esp,0x20
1000322c:	5b                   	pop    ebx
1000322d:	5e                   	pop    esi
1000322e:	5f                   	pop    edi
1000322f:	e9 fc ff ff ff       	jmp    10003230 <DMAChannel::start()+0xd2>	10003230: R_386_PC32	unlockScheduler()

10003234 <DMAChannel::stop()>:
10003234:	c3                   	ret    
10003235:	90                   	nop

10003236 <DMAChannel::mask(bool)>:
10003236:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
1000323b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
1000323f:	0f 95 c0             	setne  al
10003242:	c1 e0 02             	shl    eax,0x2
10003245:	0b 02                	or     eax,DWORD PTR [edx]
10003247:	80 7a 0e 01          	cmp    BYTE PTR [edx+0xe],0x1
1000324b:	19 d2                	sbb    edx,edx
1000324d:	80 e2 36             	and    dl,0x36
10003250:	81 c2 d4 00 00 00    	add    edx,0xd4
10003256:	ee                   	out    dx,al
10003257:	c3                   	ret    

10003258 <DMAChannel::unmask()>:
10003258:	6a 00                	push   0x0
1000325a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
1000325e:	e8 fc ff ff ff       	call   1000325f <DMAChannel::unmask()+0x7>	1000325f: R_386_PC32	DMAChannel::mask(bool)
10003263:	58                   	pop    eax
10003264:	5a                   	pop    edx
10003265:	c3                   	ret    

10003266 <DMA::DMA()>:
10003266:	55                   	push   ebp
10003267:	89 e5                	mov    ebp,esp
10003269:	83 ec 08             	sub    esp,0x8
1000326c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000326f:	83 ec 08             	sub    esp,0x8
10003272:	68 00 00 00 00       	push   0x0	10003273: R_386_32	dmaCtrlName
10003277:	50                   	push   eax
10003278:	e8 fc ff ff ff       	call   10003279 <DMA::DMA()+0x13>	10003279: R_386_PC32	Device::Device(char const*)
1000327d:	83 c4 10             	add    esp,0x10
10003280:	ba 08 00 00 00       	mov    edx,0x8	10003281: R_386_32	vtable for DMA
10003285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003288:	89 10                	mov    DWORD PTR [eax],edx
1000328a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000328d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
10003294:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003297:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000329d:	0f b6 d0             	movzx  edx,al
100032a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032a3:	66 c7 44 90 04 00 00 	mov    WORD PTR [eax+edx*4+0x4],0x0
100032aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032ad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100032b3:	0f b6 d0             	movzx  edx,al
100032b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032b9:	c6 44 90 06 10       	mov    BYTE PTR [eax+edx*4+0x6],0x10
100032be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032c1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100032c7:	8d 50 01             	lea    edx,[eax+0x1]
100032ca:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100032cd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100032d3:	0f b6 d0             	movzx  edx,al
100032d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032d9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100032dd:	83 e1 3f             	and    ecx,0x3f
100032e0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100032e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100032ed:	0f b6 d0             	movzx  edx,al
100032f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032f3:	66 c7 44 90 04 c0 00 	mov    WORD PTR [eax+edx*4+0x4],0xc0
100032fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100032fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003303:	0f b6 d0             	movzx  edx,al
10003306:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003309:	c6 44 90 06 20       	mov    BYTE PTR [eax+edx*4+0x6],0x20
1000330e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003311:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003317:	8d 50 01             	lea    edx,[eax+0x1]
1000331a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000331d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003323:	0f b6 d0             	movzx  edx,al
10003326:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003329:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
1000332d:	83 e1 3f             	and    ecx,0x3f
10003330:	83 c9 40             	or     ecx,0x40
10003333:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000333a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003340:	0f b6 d0             	movzx  edx,al
10003343:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003346:	66 c7 44 90 04 81 00 	mov    WORD PTR [eax+edx*4+0x4],0x81
1000334d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003350:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003356:	0f b6 d0             	movzx  edx,al
10003359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000335c:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
10003361:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003364:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000336a:	8d 50 01             	lea    edx,[eax+0x1]
1000336d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003370:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003376:	0f b6 d0             	movzx  edx,al
10003379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000337c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003380:	83 e1 3f             	and    ecx,0x3f
10003383:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003387:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000338a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003390:	0f b6 d0             	movzx  edx,al
10003393:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003396:	66 c7 44 90 04 87 00 	mov    WORD PTR [eax+edx*4+0x4],0x87
1000339d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033a6:	0f b6 d0             	movzx  edx,al
100033a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033ac:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100033b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033b4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033ba:	8d 50 01             	lea    edx,[eax+0x1]
100033bd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
100033c0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
100033c6:	0f b6 d0             	movzx  edx,al
100033c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033cc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
100033d0:	83 e1 3f             	and    ecx,0x3f
100033d3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
100033d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033e0:	0f b6 d0             	movzx  edx,al
100033e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033e6:	66 c7 44 90 04 89 00 	mov    WORD PTR [eax+edx*4+0x4],0x89
100033ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033f0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100033f6:	0f b6 d0             	movzx  edx,al
100033f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100033fc:	c6 44 90 06 03       	mov    BYTE PTR [eax+edx*4+0x6],0x3
10003401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003404:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000340a:	8d 50 01             	lea    edx,[eax+0x1]
1000340d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003410:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003416:	0f b6 d0             	movzx  edx,al
10003419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000341c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003420:	83 e1 3f             	and    ecx,0x3f
10003423:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003427:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000342a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003430:	0f b6 d0             	movzx  edx,al
10003433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003436:	66 c7 44 90 04 8f 00 	mov    WORD PTR [eax+edx*4+0x4],0x8f
1000343d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003440:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003446:	0f b6 d0             	movzx  edx,al
10003449:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000344c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10003451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003454:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000345a:	8d 50 01             	lea    edx,[eax+0x1]
1000345d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003460:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003466:	0f b6 d0             	movzx  edx,al
10003469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000346c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003470:	83 e1 3f             	and    ecx,0x3f
10003473:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
10003477:	90                   	nop
10003478:	c9                   	leave  
10003479:	c3                   	ret    

1000347a <DMA::getAvailable()>:
1000347a:	53                   	push   ebx
1000347b:	31 db                	xor    ebx,ebx
1000347d:	83 ec 08             	sub    esp,0x8
10003480:	e8 fc ff ff ff       	call   10003481 <DMA::getAvailable()+0x7>	10003481: R_386_PC32	lockScheduler()
10003485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003489:	0f b6 80 58 01 00 00 	movzx  eax,BYTE PTR [eax+0x158]
10003490:	0f a3 d8             	bt     eax,ebx
10003493:	73 07                	jae    1000349c <DMA::getAvailable()+0x22>
10003495:	e8 fc ff ff ff       	call   10003496 <DMA::getAvailable()+0x1c>	10003496: R_386_PC32	unlockScheduler()
1000349a:	eb 0e                	jmp    100034aa <DMA::getAvailable()+0x30>
1000349c:	43                   	inc    ebx
1000349d:	83 fb 08             	cmp    ebx,0x8
100034a0:	75 ee                	jne    10003490 <DMA::getAvailable()+0x16>
100034a2:	e8 fc ff ff ff       	call   100034a3 <DMA::getAvailable()+0x29>	100034a3: R_386_PC32	unlockScheduler()
100034a7:	83 cb ff             	or     ebx,0xffffffff
100034aa:	89 d8                	mov    eax,ebx
100034ac:	83 c4 08             	add    esp,0x8
100034af:	5b                   	pop    ebx
100034b0:	c3                   	ret    
100034b1:	90                   	nop

100034b2 <DMA::open(int, int, void*)>:
100034b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100034b6:	c6 80 58 01 00 00 ee 	mov    BYTE PTR [eax+0x158],0xee
100034bd:	31 c0                	xor    eax,eax
100034bf:	e6 0d                	out    0xd,al
100034c1:	e6 da                	out    0xda,al
100034c3:	31 c0                	xor    eax,eax
100034c5:	c3                   	ret    

100034c6 <DMA::close(int, int, void*)>:
100034c6:	31 c0                	xor    eax,eax
100034c8:	c3                   	ret    
100034c9:	90                   	nop

100034ca <DMA::tryLockChannelWithBase(int)>:
100034ca:	56                   	push   esi
100034cb:	53                   	push   ebx
100034cc:	83 ec 14             	sub    esp,0x14
100034cf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
100034d3:	e8 fc ff ff ff       	call   100034d4 <DMA::tryLockChannelWithBase(int)+0xa>	100034d4: R_386_PC32	lockScheduler()
100034d8:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100034dc:	8d 43 03             	lea    eax,[ebx+0x3]
100034df:	39 d8                	cmp    eax,ebx
100034e1:	7c 47                	jl     1000352a <DMA::tryLockChannelWithBase(int)+0x60>
100034e3:	0f b6 8e 58 01 00 00 	movzx  ecx,BYTE PTR [esi+0x158]
100034ea:	89 ca                	mov    edx,ecx
100034ec:	0f a3 d9             	bt     ecx,ebx
100034ef:	73 36                	jae    10003527 <DMA::tryLockChannelWithBase(int)+0x5d>
100034f1:	83 ec 0c             	sub    esp,0xc
100034f4:	88 d9                	mov    cl,bl
100034f6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
100034fb:	d3 c0                	rol    eax,cl
100034fd:	21 d0                	and    eax,edx
100034ff:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
10003505:	6a 18                	push   0x18
10003507:	e8 fc ff ff ff       	call   10003508 <DMA::tryLockChannelWithBase(int)+0x3e>	10003508: R_386_PC32	malloc
1000350c:	5a                   	pop    edx
1000350d:	59                   	pop    ecx
1000350e:	53                   	push   ebx
1000350f:	50                   	push   eax
10003510:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003514:	e8 fc ff ff ff       	call   10003515 <DMA::tryLockChannelWithBase(int)+0x4b>	10003515: R_386_PC32	DMAChannel::DMAChannel(int)
10003519:	e8 fc ff ff ff       	call   1000351a <DMA::tryLockChannelWithBase(int)+0x50>	1000351a: R_386_PC32	unlockScheduler()
1000351e:	83 c4 10             	add    esp,0x10
10003521:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003525:	eb 0a                	jmp    10003531 <DMA::tryLockChannelWithBase(int)+0x67>
10003527:	43                   	inc    ebx
10003528:	eb b5                	jmp    100034df <DMA::tryLockChannelWithBase(int)+0x15>
1000352a:	e8 fc ff ff ff       	call   1000352b <DMA::tryLockChannelWithBase(int)+0x61>	1000352b: R_386_PC32	unlockScheduler()
1000352f:	31 c0                	xor    eax,eax
10003531:	83 c4 14             	add    esp,0x14
10003534:	5b                   	pop    ebx
10003535:	5e                   	pop    esi
10003536:	c3                   	ret    
10003537:	90                   	nop

10003538 <DMA::lockChannelWithBase(int)>:
10003538:	83 ec 0c             	sub    esp,0xc
1000353b:	50                   	push   eax
1000353c:	50                   	push   eax
1000353d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003541:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003545:	e8 fc ff ff ff       	call   10003546 <DMA::lockChannelWithBase(int)+0xe>	10003546: R_386_PC32	DMA::tryLockChannelWithBase(int)
1000354a:	83 c4 10             	add    esp,0x10
1000354d:	85 c0                	test   eax,eax
1000354f:	74 ea                	je     1000353b <DMA::lockChannelWithBase(int)+0x3>
10003551:	83 c4 0c             	add    esp,0xc
10003554:	c3                   	ret    
10003555:	90                   	nop

10003556 <DMA::tryLockChannel8()>:
10003556:	83 ec 14             	sub    esp,0x14
10003559:	6a 00                	push   0x0
1000355b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000355f:	e8 fc ff ff ff       	call   10003560 <DMA::tryLockChannel8()+0xa>	10003560: R_386_PC32	DMA::tryLockChannelWithBase(int)
10003564:	83 c4 1c             	add    esp,0x1c
10003567:	c3                   	ret    

10003568 <DMA::tryLockChannel16()>:
10003568:	83 ec 14             	sub    esp,0x14
1000356b:	6a 04                	push   0x4
1000356d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003571:	e8 fc ff ff ff       	call   10003572 <DMA::tryLockChannel16()+0xa>	10003572: R_386_PC32	DMA::tryLockChannelWithBase(int)
10003576:	83 c4 1c             	add    esp,0x1c
10003579:	c3                   	ret    

1000357a <DMA::tryLockChannel(int)>:
1000357a:	56                   	push   esi
1000357b:	53                   	push   ebx
1000357c:	83 ec 14             	sub    esp,0x14
1000357f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10003583:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10003587:	83 fb 07             	cmp    ebx,0x7
1000358a:	76 12                	jbe    1000359e <DMA::tryLockChannel(int)+0x24>
1000358c:	83 ec 0c             	sub    esp,0xc
1000358f:	68 24 55 00 10       	push   0x10005524	10003590: R_386_32	.text
10003594:	e8 fc ff ff ff       	call   10003595 <DMA::tryLockChannel(int)+0x1b>	10003595: R_386_PC32	Dbg::kprintf(char const*, ...)
10003599:	83 c4 10             	add    esp,0x10
1000359c:	eb 4e                	jmp    100035ec <DMA::tryLockChannel(int)+0x72>
1000359e:	e8 fc ff ff ff       	call   1000359f <DMA::tryLockChannel(int)+0x25>	1000359f: R_386_PC32	lockScheduler()
100035a3:	0f b6 86 58 01 00 00 	movzx  eax,BYTE PTR [esi+0x158]
100035aa:	89 c2                	mov    edx,eax
100035ac:	0f a3 d8             	bt     eax,ebx
100035af:	73 36                	jae    100035e7 <DMA::tryLockChannel(int)+0x6d>
100035b1:	83 ec 0c             	sub    esp,0xc
100035b4:	88 d9                	mov    cl,bl
100035b6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
100035bb:	d3 c0                	rol    eax,cl
100035bd:	21 d0                	and    eax,edx
100035bf:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
100035c5:	6a 18                	push   0x18
100035c7:	e8 fc ff ff ff       	call   100035c8 <DMA::tryLockChannel(int)+0x4e>	100035c8: R_386_PC32	malloc
100035cc:	5a                   	pop    edx
100035cd:	59                   	pop    ecx
100035ce:	53                   	push   ebx
100035cf:	50                   	push   eax
100035d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100035d4:	e8 fc ff ff ff       	call   100035d5 <DMA::tryLockChannel(int)+0x5b>	100035d5: R_386_PC32	DMAChannel::DMAChannel(int)
100035d9:	e8 fc ff ff ff       	call   100035da <DMA::tryLockChannel(int)+0x60>	100035da: R_386_PC32	unlockScheduler()
100035de:	83 c4 10             	add    esp,0x10
100035e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100035e5:	eb 07                	jmp    100035ee <DMA::tryLockChannel(int)+0x74>
100035e7:	e8 fc ff ff ff       	call   100035e8 <DMA::tryLockChannel(int)+0x6e>	100035e8: R_386_PC32	unlockScheduler()
100035ec:	31 c0                	xor    eax,eax
100035ee:	83 c4 14             	add    esp,0x14
100035f1:	5b                   	pop    ebx
100035f2:	5e                   	pop    esi
100035f3:	c3                   	ret    

100035f4 <DMA::lockChannel8()>:
100035f4:	83 ec 14             	sub    esp,0x14
100035f7:	6a 00                	push   0x0
100035f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
100035fd:	e8 fc ff ff ff       	call   100035fe <DMA::lockChannel8()+0xa>	100035fe: R_386_PC32	DMA::lockChannelWithBase(int)
10003602:	83 c4 1c             	add    esp,0x1c
10003605:	c3                   	ret    

10003606 <DMA::lockChannel16()>:
10003606:	83 ec 14             	sub    esp,0x14
10003609:	6a 04                	push   0x4
1000360b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000360f:	e8 fc ff ff ff       	call   10003610 <DMA::lockChannel16()+0xa>	10003610: R_386_PC32	DMA::lockChannelWithBase(int)
10003614:	83 c4 1c             	add    esp,0x1c
10003617:	c3                   	ret    

10003618 <DMA::lockChannel(int)>:
10003618:	83 ec 0c             	sub    esp,0xc
1000361b:	50                   	push   eax
1000361c:	50                   	push   eax
1000361d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003625:	e8 fc ff ff ff       	call   10003626 <DMA::lockChannel(int)+0xe>	10003626: R_386_PC32	DMA::tryLockChannel(int)
1000362a:	83 c4 10             	add    esp,0x10
1000362d:	85 c0                	test   eax,eax
1000362f:	74 ea                	je     1000361b <DMA::lockChannel(int)+0x3>
10003631:	83 c4 0c             	add    esp,0xc
10003634:	c3                   	ret    
10003635:	90                   	nop

10003636 <DMA::unlockChannel(DMAChannel*)>:
10003636:	56                   	push   esi
10003637:	53                   	push   ebx
10003638:	53                   	push   ebx
10003639:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000363d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10003641:	85 db                	test   ebx,ebx
10003643:	75 10                	jne    10003655 <DMA::unlockChannel(DMAChannel*)+0x1f>
10003645:	83 ec 0c             	sub    esp,0xc
10003648:	68 00 00 00 00       	push   0x0	10003649: R_386_32	badDma
1000364d:	e8 fc ff ff ff       	call   1000364e <DMA::unlockChannel(DMAChannel*)+0x18>	1000364e: R_386_PC32	Krnl::panic(char const*)
10003652:	83 c4 10             	add    esp,0x10
10003655:	e8 fc ff ff ff       	call   10003656 <DMA::unlockChannel(DMAChannel*)+0x20>	10003656: R_386_PC32	lockScheduler()
1000365a:	0f b6 96 58 01 00 00 	movzx  edx,BYTE PTR [esi+0x158]
10003661:	8b 0b                	mov    ecx,DWORD PTR [ebx]
10003663:	89 d0                	mov    eax,edx
10003665:	0f a3 ca             	bt     edx,ecx
10003668:	72 24                	jb     1000368e <DMA::unlockChannel(DMAChannel*)+0x58>
1000366a:	83 ec 0c             	sub    esp,0xc
1000366d:	ba 01 00 00 00       	mov    edx,0x1
10003672:	d3 e2                	shl    edx,cl
10003674:	09 d0                	or     eax,edx
10003676:	88 86 58 01 00 00    	mov    BYTE PTR [esi+0x158],al
1000367c:	53                   	push   ebx
1000367d:	e8 fc ff ff ff       	call   1000367e <DMA::unlockChannel(DMAChannel*)+0x48>	1000367e: R_386_PC32	DMAChannel::~DMAChannel()
10003682:	5a                   	pop    edx
10003683:	59                   	pop    ecx
10003684:	6a 18                	push   0x18
10003686:	53                   	push   ebx
10003687:	e8 fc ff ff ff       	call   10003688 <DMA::unlockChannel(DMAChannel*)+0x52>	10003688: R_386_PC32	operator delete(void*, unsigned long)
1000368c:	eb 0d                	jmp    1000369b <DMA::unlockChannel(DMAChannel*)+0x65>
1000368e:	83 ec 0c             	sub    esp,0xc
10003691:	68 00 00 00 00       	push   0x0	10003692: R_386_32	badBook
10003696:	e8 fc ff ff ff       	call   10003697 <DMA::unlockChannel(DMAChannel*)+0x61>	10003697: R_386_PC32	Krnl::panic(char const*)
1000369b:	83 c4 10             	add    esp,0x10
1000369e:	58                   	pop    eax
1000369f:	5b                   	pop    ebx
100036a0:	5e                   	pop    esi
100036a1:	e9 fc ff ff ff       	jmp    100036a2 <DMA::unlockChannel(DMAChannel*)+0x6c>	100036a2: R_386_PC32	unlockScheduler()

100036a6 <PS2::PS2()>:
100036a6:	55                   	push   ebp
100036a7:	89 e5                	mov    ebp,esp
100036a9:	83 ec 08             	sub    esp,0x8
100036ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100036af:	83 ec 08             	sub    esp,0x8
100036b2:	68 00 00 00 00       	push   0x0	100036b3: R_386_32	ps2ctrlname
100036b7:	50                   	push   eax
100036b8:	e8 fc ff ff ff       	call   100036b9 <PS2::PS2()+0x13>	100036b9: R_386_PC32	Bus::Bus(char const*)
100036bd:	83 c4 10             	add    esp,0x10
100036c0:	ba 08 00 00 00       	mov    edx,0x8	100036c1: R_386_32	vtable for PS2
100036c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100036c8:	89 10                	mov    DWORD PTR [eax],edx
100036ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100036cd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100036d3:	0f b6 d0             	movzx  edx,al
100036d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100036d9:	66 c7 44 90 04 60 00 	mov    WORD PTR [eax+edx*4+0x4],0x60
100036e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100036e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100036e9:	0f b6 d0             	movzx  edx,al
100036ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100036ef:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
100036f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100036f7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
100036fd:	8d 50 01             	lea    edx,[eax+0x1]
10003700:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003703:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003709:	0f b6 d0             	movzx  edx,al
1000370c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000370f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003713:	83 e1 3f             	and    ecx,0x3f
10003716:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000371a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000371d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003723:	0f b6 d0             	movzx  edx,al
10003726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003729:	66 c7 44 90 04 64 00 	mov    WORD PTR [eax+edx*4+0x4],0x64
10003730:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003733:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
10003739:	0f b6 d0             	movzx  edx,al
1000373c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000373f:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
10003744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003747:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
1000374d:	8d 50 01             	lea    edx,[eax+0x1]
10003750:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10003753:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
10003759:	0f b6 d0             	movzx  edx,al
1000375c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000375f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
10003763:	83 e1 3f             	and    ecx,0x3f
10003766:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
1000376a:	90                   	nop
1000376b:	c9                   	leave  
1000376c:	c3                   	ret    
1000376d:	90                   	nop

1000376e <PS2::open(int, int, void*)>:
1000376e:	55                   	push   ebp
1000376f:	89 e5                	mov    ebp,esp
10003771:	53                   	push   ebx
10003772:	83 ec 24             	sub    esp,0x24
10003775:	e8 fc ff ff ff       	call   10003776 <PS2::open(int, int, void*)+0x8>	10003776: R_386_PC32	lockScheduler()
1000377a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10003781:	83 ec 08             	sub    esp,0x8
10003784:	68 ad 00 00 00       	push   0xad
10003789:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000378c:	e8 fc ff ff ff       	call   1000378d <PS2::open(int, int, void*)+0x1f>	1000378d: R_386_PC32	PS2::controllerWrite(unsigned char)
10003791:	83 c4 10             	add    esp,0x10
10003794:	83 ec 08             	sub    esp,0x8
10003797:	68 a7 00 00 00       	push   0xa7
1000379c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000379f:	e8 fc ff ff ff       	call   100037a0 <PS2::open(int, int, void*)+0x32>	100037a0: R_386_PC32	PS2::controllerWrite(unsigned char)
100037a4:	83 c4 10             	add    esp,0x10
100037a7:	66 c7 45 e4 60 00    	mov    WORD PTR [ebp-0x1c],0x60
100037ad:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100037b0:	89 c2                	mov    edx,eax
100037b2:	ec                   	in     al,dx
100037b3:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
100037b6:	66 c7 45 e8 60 00    	mov    WORD PTR [ebp-0x18],0x60
100037bc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
100037bf:	89 c2                	mov    edx,eax
100037c1:	ec                   	in     al,dx
100037c2:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
100037c5:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
100037cb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100037ce:	89 c2                	mov    edx,eax
100037d0:	ec                   	in     al,dx
100037d1:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
100037d4:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
100037da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100037dd:	89 c2                	mov    edx,eax
100037df:	ec                   	in     al,dx
100037e0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
100037e3:	83 ec 08             	sub    esp,0x8
100037e6:	68 aa 00 00 00       	push   0xaa
100037eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100037ee:	e8 fc ff ff ff       	call   100037ef <PS2::open(int, int, void*)+0x81>	100037ef: R_386_PC32	PS2::controllerWrite(unsigned char)
100037f3:	83 c4 10             	add    esp,0x10
100037f6:	83 ec 0c             	sub    esp,0xc
100037f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100037fc:	e8 fc ff ff ff       	call   100037fd <PS2::open(int, int, void*)+0x8f>	100037fd: R_386_PC32	PS2::controllerRead()
10003801:	83 c4 10             	add    esp,0x10
10003804:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003807:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
1000380b:	74 65                	je     10003872 <PS2::open(int, int, void*)+0x104>
1000380d:	83 ec 0c             	sub    esp,0xc
10003810:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003813:	e8 fc ff ff ff       	call   10003814 <PS2::open(int, int, void*)+0xa6>	10003814: R_386_PC32	PS2::controllerRead()
10003818:	83 c4 10             	add    esp,0x10
1000381b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000381e:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
10003822:	74 4e                	je     10003872 <PS2::open(int, int, void*)+0x104>
10003824:	83 ec 08             	sub    esp,0x8
10003827:	68 aa 00 00 00       	push   0xaa
1000382c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000382f:	e8 fc ff ff ff       	call   10003830 <PS2::open(int, int, void*)+0xc2>	10003830: R_386_PC32	PS2::controllerWrite(unsigned char)
10003834:	83 c4 10             	add    esp,0x10
10003837:	83 ec 08             	sub    esp,0x8
1000383a:	68 aa 00 00 00       	push   0xaa
1000383f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003842:	e8 fc ff ff ff       	call   10003843 <PS2::open(int, int, void*)+0xd5>	10003843: R_386_PC32	PS2::controllerWrite(unsigned char)
10003847:	83 c4 10             	add    esp,0x10
1000384a:	83 ec 0c             	sub    esp,0xc
1000384d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003850:	e8 fc ff ff ff       	call   10003851 <PS2::open(int, int, void*)+0xe3>	10003851: R_386_PC32	PS2::controllerRead()
10003855:	83 c4 10             	add    esp,0x10
10003858:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
1000385b:	80 7d f3 55          	cmp    BYTE PTR [ebp-0xd],0x55
1000385f:	74 11                	je     10003872 <PS2::open(int, int, void*)+0x104>
10003861:	83 ec 0c             	sub    esp,0xc
10003864:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003867:	e8 fc ff ff ff       	call   10003868 <PS2::open(int, int, void*)+0xfa>	10003868: R_386_PC32	PS2::controllerRead()
1000386c:	83 c4 10             	add    esp,0x10
1000386f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003872:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
10003879:	83 ec 08             	sub    esp,0x8
1000387c:	6a 20                	push   0x20
1000387e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003881:	e8 fc ff ff ff       	call   10003882 <PS2::open(int, int, void*)+0x114>	10003882: R_386_PC32	PS2::controllerWrite(unsigned char)
10003886:	83 c4 10             	add    esp,0x10
10003889:	83 ec 0c             	sub    esp,0xc
1000388c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000388f:	e8 fc ff ff ff       	call   10003890 <PS2::open(int, int, void*)+0x122>	10003890: R_386_PC32	PS2::controllerRead()
10003894:	83 c4 10             	add    esp,0x10
10003897:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
1000389a:	80 4d f2 01          	or     BYTE PTR [ebp-0xe],0x1
1000389e:	80 4d f2 02          	or     BYTE PTR [ebp-0xe],0x2
100038a2:	0f b6 45 f2          	movzx  eax,BYTE PTR [ebp-0xe]
100038a6:	83 ec 04             	sub    esp,0x4
100038a9:	50                   	push   eax
100038aa:	6a 60                	push   0x60
100038ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100038af:	e8 fc ff ff ff       	call   100038b0 <PS2::open(int, int, void*)+0x142>	100038b0: R_386_PC32	PS2::controllerWrite(unsigned char, unsigned char)
100038b4:	83 c4 10             	add    esp,0x10
100038b7:	83 ec 08             	sub    esp,0x8
100038ba:	68 ae 00 00 00       	push   0xae
100038bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100038c2:	e8 fc ff ff ff       	call   100038c3 <PS2::open(int, int, void*)+0x155>	100038c3: R_386_PC32	PS2::controllerWrite(unsigned char)
100038c7:	83 c4 10             	add    esp,0x10
100038ca:	83 ec 08             	sub    esp,0x8
100038cd:	68 a8 00 00 00       	push   0xa8
100038d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100038d5:	e8 fc ff ff ff       	call   100038d6 <PS2::open(int, int, void*)+0x168>	100038d6: R_386_PC32	PS2::controllerWrite(unsigned char)
100038da:	83 c4 10             	add    esp,0x10
100038dd:	e8 fc ff ff ff       	call   100038de <PS2::open(int, int, void*)+0x170>	100038de: R_386_PC32	unlockScheduler()
100038e2:	c7 45 dc 60 01 00 00 	mov    DWORD PTR [ebp-0x24],0x160
100038e9:	83 ec 0c             	sub    esp,0xc
100038ec:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100038ef:	e8 fc ff ff ff       	call   100038f0 <PS2::open(int, int, void*)+0x182>	100038f0: R_386_PC32	malloc
100038f4:	83 c4 10             	add    esp,0x10
100038f7:	89 c3                	mov    ebx,eax
100038f9:	83 ec 0c             	sub    esp,0xc
100038fc:	53                   	push   ebx
100038fd:	e8 fc ff ff ff       	call   100038fe <PS2::open(int, int, void*)+0x190>	100038fe: R_386_PC32	PS2Port::PS2Port()
10003902:	83 c4 10             	add    esp,0x10
10003905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003908:	89 98 58 01 00 00    	mov    DWORD PTR [eax+0x158],ebx
1000390e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003911:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10003914:	8b 92 58 01 00 00    	mov    edx,DWORD PTR [edx+0x158]
1000391a:	83 ec 08             	sub    esp,0x8
1000391d:	52                   	push   edx
1000391e:	50                   	push   eax
1000391f:	e8 fc ff ff ff       	call   10003920 <PS2::open(int, int, void*)+0x1b2>	10003920: R_386_PC32	Device::addChild(Device*)
10003924:	83 c4 10             	add    esp,0x10
10003927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000392a:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
10003930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003933:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
10003939:	8b 00                	mov    eax,DWORD PTR [eax]
1000393b:	83 c0 08             	add    eax,0x8
1000393e:	8b 00                	mov    eax,DWORD PTR [eax]
10003940:	6a 00                	push   0x0
10003942:	6a 00                	push   0x0
10003944:	6a 00                	push   0x0
10003946:	52                   	push   edx
10003947:	ff d0                	call   eax
10003949:	83 c4 10             	add    esp,0x10
1000394c:	83 7d f4 02          	cmp    DWORD PTR [ebp-0xc],0x2
10003950:	75 6a                	jne    100039bc <PS2::open(int, int, void*)+0x24e>
10003952:	c7 45 d8 60 01 00 00 	mov    DWORD PTR [ebp-0x28],0x160
10003959:	83 ec 0c             	sub    esp,0xc
1000395c:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000395f:	e8 fc ff ff ff       	call   10003960 <PS2::open(int, int, void*)+0x1f2>	10003960: R_386_PC32	malloc
10003964:	83 c4 10             	add    esp,0x10
10003967:	89 c3                	mov    ebx,eax
10003969:	83 ec 0c             	sub    esp,0xc
1000396c:	53                   	push   ebx
1000396d:	e8 fc ff ff ff       	call   1000396e <PS2::open(int, int, void*)+0x200>	1000396e: R_386_PC32	PS2Port::PS2Port()
10003972:	83 c4 10             	add    esp,0x10
10003975:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003978:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
1000397e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003981:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10003984:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
1000398a:	83 ec 08             	sub    esp,0x8
1000398d:	52                   	push   edx
1000398e:	50                   	push   eax
1000398f:	e8 fc ff ff ff       	call   10003990 <PS2::open(int, int, void*)+0x222>	10003990: R_386_PC32	Device::addChild(Device*)
10003994:	83 c4 10             	add    esp,0x10
10003997:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000399a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
100039a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100039a3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100039a9:	8b 00                	mov    eax,DWORD PTR [eax]
100039ab:	83 c0 08             	add    eax,0x8
100039ae:	8b 00                	mov    eax,DWORD PTR [eax]
100039b0:	6a 00                	push   0x0
100039b2:	6a 00                	push   0x0
100039b4:	6a 01                	push   0x1
100039b6:	52                   	push   edx
100039b7:	ff d0                	call   eax
100039b9:	83 c4 10             	add    esp,0x10
100039bc:	b8 00 00 00 00       	mov    eax,0x0
100039c1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100039c4:	c9                   	leave  
100039c5:	c3                   	ret    

100039c6 <PS2::close(int, int, void*)>:
100039c6:	b8 00 00 00 00       	mov    eax,0x0
100039cb:	c3                   	ret    

100039cc <PS2::detect()>:
100039cc:	90                   	nop
100039cd:	c3                   	ret    

100039ce <PS2::controllerWrite(unsigned char)>:
100039ce:	55                   	push   ebp
100039cf:	89 e5                	mov    ebp,esp
100039d1:	83 ec 14             	sub    esp,0x14
100039d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100039d7:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
100039da:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
100039e1:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
100039e7:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
100039ea:	89 c2                	mov    edx,eax
100039ec:	ec                   	in     al,dx
100039ed:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
100039f0:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
100039f3:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
100039f6:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
100039fa:	83 e0 40             	and    eax,0x40
100039fd:	85 c0                	test   eax,eax
100039ff:	75 2d                	jne    10003a2e <PS2::controllerWrite(unsigned char)+0x60>
10003a01:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003a04:	84 c0                	test   al,al
10003a06:	78 26                	js     10003a2e <PS2::controllerWrite(unsigned char)+0x60>
10003a08:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003a0c:	83 e0 02             	and    eax,0x2
10003a0f:	85 c0                	test   eax,eax
10003a11:	74 17                	je     10003a2a <PS2::controllerWrite(unsigned char)+0x5c>
10003a13:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003a16:	8d 50 01             	lea    edx,[eax+0x1]
10003a19:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003a1c:	3d 20 03 00 00       	cmp    eax,0x320
10003a21:	0f 94 c0             	sete   al
10003a24:	84 c0                	test   al,al
10003a26:	75 05                	jne    10003a2d <PS2::controllerWrite(unsigned char)+0x5f>
10003a28:	eb b7                	jmp    100039e1 <PS2::controllerWrite(unsigned char)+0x13>
10003a2a:	90                   	nop
10003a2b:	eb 01                	jmp    10003a2e <PS2::controllerWrite(unsigned char)+0x60>
10003a2d:	90                   	nop
10003a2e:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
10003a32:	66 c7 45 f4 64 00    	mov    WORD PTR [ebp-0xc],0x64
10003a38:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003a3b:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003a3e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003a41:	ee                   	out    dx,al
10003a42:	b0 01                	mov    al,0x1
10003a44:	c9                   	leave  
10003a45:	c3                   	ret    

10003a46 <PS2::controllerWrite(unsigned char, unsigned char)>:
10003a46:	55                   	push   ebp
10003a47:	89 e5                	mov    ebp,esp
10003a49:	83 ec 28             	sub    esp,0x28
10003a4c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10003a4f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
10003a52:	88 55 dc             	mov    BYTE PTR [ebp-0x24],dl
10003a55:	88 45 d8             	mov    BYTE PTR [ebp-0x28],al
10003a58:	0f b6 45 dc          	movzx  eax,BYTE PTR [ebp-0x24]
10003a5c:	50                   	push   eax
10003a5d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003a60:	e8 fc ff ff ff       	call   10003a61 <PS2::controllerWrite(unsigned char, unsigned char)+0x1b>	10003a61: R_386_PC32	PS2::controllerWrite(unsigned char)
10003a65:	83 c4 08             	add    esp,0x8
10003a68:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003a6f:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003a75:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003a78:	89 c2                	mov    edx,eax
10003a7a:	ec                   	in     al,dx
10003a7b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003a7e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003a81:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003a84:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003a88:	83 e0 40             	and    eax,0x40
10003a8b:	85 c0                	test   eax,eax
10003a8d:	75 07                	jne    10003a96 <PS2::controllerWrite(unsigned char, unsigned char)+0x50>
10003a8f:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003a92:	84 c0                	test   al,al
10003a94:	79 18                	jns    10003aae <PS2::controllerWrite(unsigned char, unsigned char)+0x68>
10003a96:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003a9a:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10003aa0:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003aa3:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003aa6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10003aa9:	ee                   	out    dx,al
10003aaa:	b0 00                	mov    al,0x0
10003aac:	eb 4f                	jmp    10003afd <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10003aae:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003ab2:	83 e0 02             	and    eax,0x2
10003ab5:	85 c0                	test   eax,eax
10003ab7:	74 2d                	je     10003ae6 <PS2::controllerWrite(unsigned char, unsigned char)+0xa0>
10003ab9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003abc:	8d 50 01             	lea    edx,[eax+0x1]
10003abf:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003ac2:	3d 20 03 00 00       	cmp    eax,0x320
10003ac7:	0f 94 c0             	sete   al
10003aca:	84 c0                	test   al,al
10003acc:	74 a1                	je     10003a6f <PS2::controllerWrite(unsigned char, unsigned char)+0x29>
10003ace:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003ad2:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003ad8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003adb:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10003ade:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10003ae1:	ee                   	out    dx,al
10003ae2:	b0 00                	mov    al,0x0
10003ae4:	eb 17                	jmp    10003afd <PS2::controllerWrite(unsigned char, unsigned char)+0xb7>
10003ae6:	90                   	nop
10003ae7:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
10003aeb:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
10003af1:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
10003af4:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
10003af7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
10003afa:	ee                   	out    dx,al
10003afb:	b0 01                	mov    al,0x1
10003afd:	c9                   	leave  
10003afe:	c3                   	ret    
10003aff:	90                   	nop

10003b00 <PS2::controllerRead()>:
10003b00:	55                   	push   ebp
10003b01:	89 e5                	mov    ebp,esp
10003b03:	83 ec 20             	sub    esp,0x20
10003b06:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
10003b0d:	66 c7 45 f8 64 00    	mov    WORD PTR [ebp-0x8],0x64
10003b13:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10003b16:	89 c2                	mov    edx,eax
10003b18:	ec                   	in     al,dx
10003b19:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10003b1c:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
10003b1f:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
10003b22:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003b26:	83 e0 40             	and    eax,0x40
10003b29:	85 c0                	test   eax,eax
10003b2b:	75 07                	jne    10003b34 <PS2::controllerRead()+0x34>
10003b2d:	8a 45 fb             	mov    al,BYTE PTR [ebp-0x5]
10003b30:	84 c0                	test   al,al
10003b32:	79 04                	jns    10003b38 <PS2::controllerRead()+0x38>
10003b34:	b0 00                	mov    al,0x0
10003b36:	eb 48                	jmp    10003b80 <PS2::controllerRead()+0x80>
10003b38:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
10003b3c:	83 e0 01             	and    eax,0x1
10003b3f:	85 c0                	test   eax,eax
10003b41:	75 29                	jne    10003b6c <PS2::controllerRead()+0x6c>
10003b43:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
10003b46:	8d 50 01             	lea    edx,[eax+0x1]
10003b49:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
10003b4c:	3d 40 06 00 00       	cmp    eax,0x640
10003b51:	0f 94 c0             	sete   al
10003b54:	84 c0                	test   al,al
10003b56:	74 b5                	je     10003b0d <PS2::controllerRead()+0xd>
10003b58:	66 c7 45 f4 60 00    	mov    WORD PTR [ebp-0xc],0x60
10003b5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10003b61:	89 c2                	mov    edx,eax
10003b63:	ec                   	in     al,dx
10003b64:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10003b67:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
10003b6a:	eb 14                	jmp    10003b80 <PS2::controllerRead()+0x80>
10003b6c:	90                   	nop
10003b6d:	66 c7 45 f0 60 00    	mov    WORD PTR [ebp-0x10],0x60
10003b73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10003b76:	89 c2                	mov    edx,eax
10003b78:	ec                   	in     al,dx
10003b79:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10003b7c:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10003b7f:	90                   	nop
10003b80:	c9                   	leave  
10003b81:	c3                   	ret    

10003b82 <PS2Keyboard::PS2Keyboard()>:
10003b82:	55                   	push   ebp
10003b83:	89 e5                	mov    ebp,esp
10003b85:	83 ec 08             	sub    esp,0x8
10003b88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003b8b:	83 ec 08             	sub    esp,0x8
10003b8e:	68 00 00 00 00       	push   0x0	10003b8f: R_386_32	ps2keyname
10003b93:	50                   	push   eax
10003b94:	e8 fc ff ff ff       	call   10003b95 <PS2Keyboard::PS2Keyboard()+0x13>	10003b95: R_386_PC32	Keyboard::Keyboard(char const*)
10003b99:	83 c4 10             	add    esp,0x10
10003b9c:	ba 08 00 00 00       	mov    edx,0x8	10003b9d: R_386_32	vtable for PS2Keyboard
10003ba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003ba4:	89 10                	mov    DWORD PTR [eax],edx
10003ba6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003ba9:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10003bb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003bb3:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
10003bba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003bbd:	c6 80 66 01 00 00 00 	mov    BYTE PTR [eax+0x166],0x0
10003bc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003bc7:	c6 80 67 01 00 00 00 	mov    BYTE PTR [eax+0x167],0x0
10003bce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003bd1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
10003bd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003bdb:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
10003be2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003be5:	c6 80 6a 01 00 00 00 	mov    BYTE PTR [eax+0x16a],0x0
10003bec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003bef:	c6 80 6b 01 00 00 00 	mov    BYTE PTR [eax+0x16b],0x0
10003bf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003bf9:	c6 80 6c 01 00 00 00 	mov    BYTE PTR [eax+0x16c],0x0
10003c00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003c03:	c6 80 6d 01 00 00 00 	mov    BYTE PTR [eax+0x16d],0x0
10003c0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003c0d:	c6 80 6e 01 00 00 00 	mov    BYTE PTR [eax+0x16e],0x0
10003c14:	90                   	nop
10003c15:	c9                   	leave  
10003c16:	c3                   	ret    
10003c17:	90                   	nop

10003c18 <PS2Keyboard::~PS2Keyboard()>:
10003c18:	55                   	push   ebp
10003c19:	89 e5                	mov    ebp,esp
10003c1b:	83 ec 08             	sub    esp,0x8
10003c1e:	ba 08 00 00 00       	mov    edx,0x8	10003c1f: R_386_32	vtable for PS2Keyboard
10003c23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003c26:	89 10                	mov    DWORD PTR [eax],edx
10003c28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10003c2b:	83 ec 0c             	sub    esp,0xc
10003c2e:	50                   	push   eax
10003c2f:	e8 fc ff ff ff       	call   10003c30 <PS2Keyboard::~PS2Keyboard()+0x18>	10003c30: R_386_PC32	Keyboard::~Keyboard()
10003c34:	83 c4 10             	add    esp,0x10
10003c37:	90                   	nop
10003c38:	c9                   	leave  
10003c39:	c3                   	ret    

10003c3a <PS2Keyboard::~PS2Keyboard()>:
10003c3a:	55                   	push   ebp
10003c3b:	89 e5                	mov    ebp,esp
10003c3d:	83 ec 08             	sub    esp,0x8
10003c40:	83 ec 0c             	sub    esp,0xc
10003c43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003c46:	e8 fc ff ff ff       	call   10003c47 <PS2Keyboard::~PS2Keyboard()+0xd>	10003c47: R_386_PC32	PS2Keyboard::~PS2Keyboard()
10003c4b:	83 c4 10             	add    esp,0x10
10003c4e:	83 ec 08             	sub    esp,0x8
10003c51:	68 70 01 00 00       	push   0x170
10003c56:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10003c59:	e8 fc ff ff ff       	call   10003c5a <PS2Keyboard::~PS2Keyboard()+0x20>	10003c5a: R_386_PC32	operator delete(void*, unsigned long)
10003c5e:	83 c4 10             	add    esp,0x10
10003c61:	c9                   	leave  
10003c62:	c3                   	ret    
10003c63:	90                   	nop

10003c64 <PS2Keyboard::setRepeatRate(int)>:
10003c64:	c3                   	ret    
10003c65:	90                   	nop

10003c66 <PS2Keyboard::setRepeatDelay(int)>:
10003c66:	c3                   	ret    
10003c67:	90                   	nop

10003c68 <PS2Keyboard::sendKey(unsigned short, bool)>:
10003c68:	83 ec 1c             	sub    esp,0x1c
10003c6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003c6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10003c73:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10003c77:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003c7b:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10003c80:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10003c87:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10003c8d:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10003c92:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10003c96:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10003c9a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003c9e:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10003ca3:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10003ca8:	83 c4 1c             	add    esp,0x1c
10003cab:	e9 fc ff ff ff       	jmp    10003cac <PS2Keyboard::sendKey(unsigned short, bool)+0x44>	10003cac: R_386_PC32	sendKeyboardToken(KeyboardToken)

10003cb0 <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)>:
10003cb0:	83 ec 1c             	sub    esp,0x1c
10003cb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10003cb7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
10003cbb:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
10003cbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003cc3:	66 89 54 24 0a       	mov    WORD PTR [esp+0xa],dx
10003cc8:	66 8b 90 6a 01 00 00 	mov    dx,WORD PTR [eax+0x16a]
10003ccf:	8a 80 69 01 00 00    	mov    al,BYTE PTR [eax+0x169]
10003cd5:	66 89 54 24 0d       	mov    WORD PTR [esp+0xd],dx
10003cda:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10003cde:	8b 44 24 0a          	mov    eax,DWORD PTR [esp+0xa]
10003ce2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003ce6:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
10003ceb:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
10003cf0:	83 c4 1c             	add    esp,0x1c
10003cf3:	e9 fc ff ff ff       	jmp    10003cf4 <PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)+0x44>	10003cf4: R_386_PC32	sendKeyboardToken(KeyboardToken)

10003cf8 <PS2Keyboard::updateKeyboardLEDs()>:
10003cf8:	56                   	push   esi
10003cf9:	53                   	push   ebx
10003cfa:	83 ec 0c             	sub    esp,0xc
10003cfd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10003d01:	8a 96 69 01 00 00    	mov    dl,BYTE PTR [esi+0x169]
10003d07:	0f b6 9e 6a 01 00 00 	movzx  ebx,BYTE PTR [esi+0x16a]
10003d0e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
10003d11:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
10003d18:	09 c3                	or     ebx,eax
10003d1a:	0a 9e 6b 01 00 00    	or     bl,BYTE PTR [esi+0x16b]
10003d20:	68 ed 00 00 00       	push   0xed
10003d25:	0f b6 db             	movzx  ebx,bl
10003d28:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003d2e:	e8 fc ff ff ff       	call   10003d2f <PS2Keyboard::updateKeyboardLEDs()+0x37>	10003d2f: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10003d33:	58                   	pop    eax
10003d34:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003d3a:	e8 fc ff ff ff       	call   10003d3b <PS2Keyboard::updateKeyboardLEDs()+0x43>	10003d3b: R_386_PC32	PS2Port::deviceRead()
10003d3f:	5a                   	pop    edx
10003d40:	59                   	pop    ecx
10003d41:	53                   	push   ebx
10003d42:	ff b6 60 01 00 00    	push   DWORD PTR [esi+0x160]
10003d48:	e8 fc ff ff ff       	call   10003d49 <PS2Keyboard::updateKeyboardLEDs()+0x51>	10003d49: R_386_PC32	PS2Port::deviceWrite(unsigned char)
10003d4d:	8b 86 60 01 00 00    	mov    eax,DWORD PTR [esi+0x160]
10003d53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10003d57:	83 c4 14             	add    esp,0x14
10003d5a:	5b                   	pop    ebx
10003d5b:	5e                   	pop    esi
10003d5c:	e9 fc ff ff ff       	jmp    10003d5d <PS2Keyboard::updateKeyboardLEDs()+0x65>	10003d5d: R_386_PC32	PS2Port::deviceRead()

10003d61 <ps2KeyboardHandler(regs*, void*)>:
10003d61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003d65:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003d69:	eb 01                	jmp    10003d6c <PS2Keyboard::handler()>
10003d6b:	90                   	nop

10003d6c <PS2Keyboard::handler()>:
10003d6c:	57                   	push   edi
10003d6d:	56                   	push   esi
10003d6e:	53                   	push   ebx
10003d6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10003d73:	e4 60                	in     al,0x60
10003d75:	80 be 6e 01 00 00 00 	cmp    BYTE PTR [esi+0x16e],0x0
10003d7c:	74 29                	je     10003da7 <PS2Keyboard::handler()+0x3b>
10003d7e:	88 c2                	mov    dl,al
10003d80:	3c e0                	cmp    al,0xe0
10003d82:	75 0c                	jne    10003d90 <PS2Keyboard::handler()+0x24>
10003d84:	c6 86 64 01 00 00 01 	mov    BYTE PTR [esi+0x164],0x1
10003d8b:	e9 17 07 00 00       	jmp    100044a7 <PS2Keyboard::handler()+0x73b>
10003d90:	84 c0                	test   al,al
10003d92:	0f 89 52 01 00 00    	jns    10003eea <PS2Keyboard::handler()+0x17e>
10003d98:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10003d9f:	83 e2 7f             	and    edx,0x7f
10003da2:	e9 43 01 00 00       	jmp    10003eea <PS2Keyboard::handler()+0x17e>
10003da7:	3c e0                	cmp    al,0xe0
10003da9:	74 d9                	je     10003d84 <PS2Keyboard::handler()+0x18>
10003dab:	3c f0                	cmp    al,0xf0
10003dad:	75 0c                	jne    10003dbb <PS2Keyboard::handler()+0x4f>
10003daf:	c6 86 66 01 00 00 01 	mov    BYTE PTR [esi+0x166],0x1
10003db6:	e9 ec 06 00 00       	jmp    100044a7 <PS2Keyboard::handler()+0x73b>
10003dbb:	3c 12                	cmp    al,0x12
10003dbd:	75 1f                	jne    10003dde <PS2Keyboard::handler()+0x72>
10003dbf:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003dc5:	83 f0 01             	xor    eax,0x1
10003dc8:	88 86 67 01 00 00    	mov    BYTE PTR [esi+0x167],al
10003dce:	52                   	push   edx
10003dcf:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003dd6:	50                   	push   eax
10003dd7:	68 04 01 00 00       	push   0x104
10003ddc:	eb 23                	jmp    10003e01 <PS2Keyboard::handler()+0x95>
10003dde:	76 3d                	jbe    10003e1d <PS2Keyboard::handler()+0xb1>
10003de0:	3c 14                	cmp    al,0x14
10003de2:	75 62                	jne    10003e46 <PS2Keyboard::handler()+0xda>
10003de4:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003dea:	83 f0 01             	xor    eax,0x1
10003ded:	88 86 68 01 00 00    	mov    BYTE PTR [esi+0x168],al
10003df3:	51                   	push   ecx
10003df4:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003dfb:	50                   	push   eax
10003dfc:	68 00 01 00 00       	push   0x100
10003e01:	56                   	push   esi
10003e02:	e8 fc ff ff ff       	call   10003e03 <PS2Keyboard::handler()+0x97>	10003e03: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
10003e07:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
10003e0e:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
10003e15:	83 c4 10             	add    esp,0x10
10003e18:	e9 8a 06 00 00       	jmp    100044a7 <PS2Keyboard::handler()+0x73b>
10003e1d:	3c 11                	cmp    al,0x11
10003e1f:	75 2d                	jne    10003e4e <PS2Keyboard::handler()+0xe2>
10003e21:	8a 86 66 01 00 00    	mov    al,BYTE PTR [esi+0x166]
10003e27:	83 f0 01             	xor    eax,0x1
10003e2a:	88 86 6d 01 00 00    	mov    BYTE PTR [esi+0x16d],al
10003e30:	88 86 6c 01 00 00    	mov    BYTE PTR [esi+0x16c],al
10003e36:	50                   	push   eax
10003e37:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003e3e:	50                   	push   eax
10003e3f:	68 01 01 00 00       	push   0x101
10003e44:	eb bb                	jmp    10003e01 <PS2Keyboard::handler()+0x95>
10003e46:	3c 59                	cmp    al,0x59
10003e48:	0f 84 71 ff ff ff    	je     10003dbf <PS2Keyboard::handler()+0x53>
10003e4e:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
10003e55:	0f 84 b1 01 00 00    	je     1000400c <PS2Keyboard::handler()+0x2a0>
10003e5b:	3c 6b                	cmp    al,0x6b
10003e5d:	0f 84 f2 00 00 00    	je     10003f55 <PS2Keyboard::handler()+0x1e9>
10003e63:	77 50                	ja     10003eb5 <PS2Keyboard::handler()+0x149>
10003e65:	3c 51                	cmp    al,0x51
10003e67:	0f 84 37 01 00 00    	je     10003fa4 <PS2Keyboard::handler()+0x238>
10003e6d:	77 23                	ja     10003e92 <PS2Keyboard::handler()+0x126>
10003e6f:	3c 49                	cmp    al,0x49
10003e71:	0f 84 0d 01 00 00    	je     10003f84 <PS2Keyboard::handler()+0x218>
10003e77:	3c 4a                	cmp    al,0x4a
10003e79:	0f 85 29 04 00 00    	jne    100042a8 <PS2Keyboard::handler()+0x53c>
10003e7f:	50                   	push   eax
10003e80:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003e87:	50                   	push   eax
10003e88:	68 1f 03 00 00       	push   0x31f
10003e8d:	e9 c6 03 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10003e92:	3c 5a                	cmp    al,0x5a
10003e94:	0f 84 5f 01 00 00    	je     10003ff9 <PS2Keyboard::handler()+0x28d>
10003e9a:	3c 69                	cmp    al,0x69
10003e9c:	0f 85 06 04 00 00    	jne    100042a8 <PS2Keyboard::handler()+0x53c>
10003ea2:	51                   	push   ecx
10003ea3:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003eaa:	50                   	push   eax
10003eab:	68 01 02 00 00       	push   0x201
10003eb0:	e9 a3 03 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10003eb5:	3c 71                	cmp    al,0x71
10003eb7:	0f 84 16 01 00 00    	je     10003fd3 <PS2Keyboard::handler()+0x267>
10003ebd:	77 15                	ja     10003ed4 <PS2Keyboard::handler()+0x168>
10003ebf:	3c 6c                	cmp    al,0x6c
10003ec1:	0f 84 f0 00 00 00    	je     10003fb7 <PS2Keyboard::handler()+0x24b>
10003ec7:	3c 70                	cmp    al,0x70
10003ec9:	0f 84 17 01 00 00    	je     10003fe6 <PS2Keyboard::handler()+0x27a>
10003ecf:	e9 d4 03 00 00       	jmp    100042a8 <PS2Keyboard::handler()+0x53c>
10003ed4:	3c 74                	cmp    al,0x74
10003ed6:	0f 84 8c 00 00 00    	je     10003f68 <PS2Keyboard::handler()+0x1fc>
10003edc:	3c 75                	cmp    al,0x75
10003ede:	74 4a                	je     10003f2a <PS2Keyboard::handler()+0x1be>
10003ee0:	3c 72                	cmp    al,0x72
10003ee2:	0f 85 c0 03 00 00    	jne    100042a8 <PS2Keyboard::handler()+0x53c>
10003ee8:	eb 58                	jmp    10003f42 <PS2Keyboard::handler()+0x1d6>
10003eea:	80 fa 2a             	cmp    dl,0x2a
10003eed:	0f 84 cc fe ff ff    	je     10003dbf <PS2Keyboard::handler()+0x53>
10003ef3:	0f 87 97 05 00 00    	ja     10004490 <PS2Keyboard::handler()+0x724>
10003ef9:	80 fa 1d             	cmp    dl,0x1d
10003efc:	0f 84 e2 fe ff ff    	je     10003de4 <PS2Keyboard::handler()+0x78>
10003f02:	80 be 64 01 00 00 00 	cmp    BYTE PTR [esi+0x164],0x0
10003f09:	0f 84 ce 03 00 00    	je     100042dd <PS2Keyboard::handler()+0x571>
10003f0f:	80 fa 4b             	cmp    dl,0x4b
10003f12:	74 41                	je     10003f55 <PS2Keyboard::handler()+0x1e9>
10003f14:	77 27                	ja     10003f3d <PS2Keyboard::handler()+0x1d1>
10003f16:	80 fa 47             	cmp    dl,0x47
10003f19:	0f 84 98 00 00 00    	je     10003fb7 <PS2Keyboard::handler()+0x24b>
10003f1f:	0f 86 96 03 00 00    	jbe    100042bb <PS2Keyboard::handler()+0x54f>
10003f25:	80 fa 48             	cmp    dl,0x48
10003f28:	75 51                	jne    10003f7b <PS2Keyboard::handler()+0x20f>
10003f2a:	50                   	push   eax
10003f2b:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f32:	50                   	push   eax
10003f33:	68 0b 02 00 00       	push   0x20b
10003f38:	e9 1b 03 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10003f3d:	80 fa 50             	cmp    dl,0x50
10003f40:	75 55                	jne    10003f97 <PS2Keyboard::handler()+0x22b>
10003f42:	50                   	push   eax
10003f43:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f4a:	50                   	push   eax
10003f4b:	68 0c 02 00 00       	push   0x20c
10003f50:	e9 03 03 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10003f55:	50                   	push   eax
10003f56:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f5d:	50                   	push   eax
10003f5e:	68 0d 02 00 00       	push   0x20d
10003f63:	e9 f0 02 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10003f68:	50                   	push   eax
10003f69:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f70:	50                   	push   eax
10003f71:	68 0e 02 00 00       	push   0x20e
10003f76:	e9 dd 02 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10003f7b:	80 fa 49             	cmp    dl,0x49
10003f7e:	0f 85 24 03 00 00    	jne    100042a8 <PS2Keyboard::handler()+0x53c>
10003f84:	50                   	push   eax
10003f85:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003f8c:	50                   	push   eax
10003f8d:	68 04 02 00 00       	push   0x204
10003f92:	e9 c1 02 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10003f97:	0f 86 2f 03 00 00    	jbe    100042cc <PS2Keyboard::handler()+0x560>
10003f9d:	80 fa 52             	cmp    dl,0x52
10003fa0:	74 44                	je     10003fe6 <PS2Keyboard::handler()+0x27a>
10003fa2:	73 26                	jae    10003fca <PS2Keyboard::handler()+0x25e>
10003fa4:	57                   	push   edi
10003fa5:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003fac:	50                   	push   eax
10003fad:	68 05 02 00 00       	push   0x205
10003fb2:	e9 a1 02 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10003fb7:	53                   	push   ebx
10003fb8:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003fbf:	50                   	push   eax
10003fc0:	68 00 02 00 00       	push   0x200
10003fc5:	e9 8e 02 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10003fca:	80 fa 53             	cmp    dl,0x53
10003fcd:	0f 85 d5 02 00 00    	jne    100042a8 <PS2Keyboard::handler()+0x53c>
10003fd3:	52                   	push   edx
10003fd4:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003fdb:	50                   	push   eax
10003fdc:	68 03 02 00 00       	push   0x203
10003fe1:	e9 72 02 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10003fe6:	50                   	push   eax
10003fe7:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10003fee:	50                   	push   eax
10003fef:	68 02 02 00 00       	push   0x202
10003ff4:	e9 5f 02 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10003ff9:	50                   	push   eax
10003ffa:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004001:	50                   	push   eax
10004002:	68 1d 03 00 00       	push   0x31d
10004007:	e9 4c 02 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
1000400c:	0f b6 96 66 01 00 00 	movzx  edx,BYTE PTR [esi+0x166]
10004013:	3c 66                	cmp    al,0x66
10004015:	75 09                	jne    10004020 <PS2Keyboard::handler()+0x2b4>
10004017:	50                   	push   eax
10004018:	52                   	push   edx
10004019:	6a 08                	push   0x8
1000401b:	e9 38 02 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10004020:	3c 0d                	cmp    al,0xd
10004022:	75 09                	jne    1000402d <PS2Keyboard::handler()+0x2c1>
10004024:	50                   	push   eax
10004025:	52                   	push   edx
10004026:	6a 09                	push   0x9
10004028:	e9 2b 02 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
1000402d:	3c 58                	cmp    al,0x58
1000402f:	75 2a                	jne    1000405b <PS2Keyboard::handler()+0x2ef>
10004031:	84 d2                	test   dl,dl
10004033:	75 13                	jne    10004048 <PS2Keyboard::handler()+0x2dc>
10004035:	83 ec 0c             	sub    esp,0xc
10004038:	80 b6 69 01 00 00 01 	xor    BYTE PTR [esi+0x169],0x1
1000403f:	56                   	push   esi
10004040:	e8 fc ff ff ff       	call   10004041 <PS2Keyboard::handler()+0x2d5>	10004041: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
10004045:	83 c4 10             	add    esp,0x10
10004048:	50                   	push   eax
10004049:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
10004050:	50                   	push   eax
10004051:	68 80 02 00 00       	push   0x280
10004056:	e9 fd 01 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
1000405b:	3c 77                	cmp    al,0x77
1000405d:	75 2a                	jne    10004089 <PS2Keyboard::handler()+0x31d>
1000405f:	84 d2                	test   dl,dl
10004061:	75 13                	jne    10004076 <PS2Keyboard::handler()+0x30a>
10004063:	83 ec 0c             	sub    esp,0xc
10004066:	80 b6 6a 01 00 00 01 	xor    BYTE PTR [esi+0x16a],0x1
1000406d:	56                   	push   esi
1000406e:	e8 fc ff ff ff       	call   1000406f <PS2Keyboard::handler()+0x303>	1000406f: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
10004073:	83 c4 10             	add    esp,0x10
10004076:	50                   	push   eax
10004077:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
1000407e:	50                   	push   eax
1000407f:	68 81 02 00 00       	push   0x281
10004084:	e9 cf 01 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10004089:	3c 7e                	cmp    al,0x7e
1000408b:	75 2a                	jne    100040b7 <PS2Keyboard::handler()+0x34b>
1000408d:	84 d2                	test   dl,dl
1000408f:	75 13                	jne    100040a4 <PS2Keyboard::handler()+0x338>
10004091:	83 ec 0c             	sub    esp,0xc
10004094:	80 b6 6b 01 00 00 01 	xor    BYTE PTR [esi+0x16b],0x1
1000409b:	56                   	push   esi
1000409c:	e8 fc ff ff ff       	call   1000409d <PS2Keyboard::handler()+0x331>	1000409d: R_386_PC32	PS2Keyboard::updateKeyboardLEDs()
100040a1:	83 c4 10             	add    esp,0x10
100040a4:	57                   	push   edi
100040a5:	0f b6 86 66 01 00 00 	movzx  eax,BYTE PTR [esi+0x166]
100040ac:	50                   	push   eax
100040ad:	68 82 02 00 00       	push   0x282
100040b2:	e9 a1 01 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
100040b7:	3c 05                	cmp    al,0x5
100040b9:	75 0c                	jne    100040c7 <PS2Keyboard::handler()+0x35b>
100040bb:	53                   	push   ebx
100040bc:	52                   	push   edx
100040bd:	68 00 03 00 00       	push   0x300
100040c2:	e9 91 01 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
100040c7:	3c 06                	cmp    al,0x6
100040c9:	75 0c                	jne    100040d7 <PS2Keyboard::handler()+0x36b>
100040cb:	51                   	push   ecx
100040cc:	52                   	push   edx
100040cd:	68 01 03 00 00       	push   0x301
100040d2:	e9 81 01 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
100040d7:	3c 04                	cmp    al,0x4
100040d9:	75 0c                	jne    100040e7 <PS2Keyboard::handler()+0x37b>
100040db:	50                   	push   eax
100040dc:	52                   	push   edx
100040dd:	68 02 03 00 00       	push   0x302
100040e2:	e9 71 01 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
100040e7:	3c 0c                	cmp    al,0xc
100040e9:	75 0c                	jne    100040f7 <PS2Keyboard::handler()+0x38b>
100040eb:	50                   	push   eax
100040ec:	52                   	push   edx
100040ed:	68 03 03 00 00       	push   0x303
100040f2:	e9 61 01 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
100040f7:	3c 03                	cmp    al,0x3
100040f9:	75 0c                	jne    10004107 <PS2Keyboard::handler()+0x39b>
100040fb:	50                   	push   eax
100040fc:	52                   	push   edx
100040fd:	68 04 03 00 00       	push   0x304
10004102:	e9 51 01 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10004107:	3c 0b                	cmp    al,0xb
10004109:	75 0c                	jne    10004117 <PS2Keyboard::handler()+0x3ab>
1000410b:	50                   	push   eax
1000410c:	52                   	push   edx
1000410d:	68 05 03 00 00       	push   0x305
10004112:	e9 41 01 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10004117:	3c 02                	cmp    al,0x2
10004119:	74 04                	je     1000411f <PS2Keyboard::handler()+0x3b3>
1000411b:	3c 83                	cmp    al,0x83
1000411d:	75 0c                	jne    1000412b <PS2Keyboard::handler()+0x3bf>
1000411f:	50                   	push   eax
10004120:	52                   	push   edx
10004121:	68 06 03 00 00       	push   0x306
10004126:	e9 2d 01 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
1000412b:	3c 0a                	cmp    al,0xa
1000412d:	75 0c                	jne    1000413b <PS2Keyboard::handler()+0x3cf>
1000412f:	50                   	push   eax
10004130:	52                   	push   edx
10004131:	68 07 03 00 00       	push   0x307
10004136:	e9 1d 01 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
1000413b:	3c 01                	cmp    al,0x1
1000413d:	75 0c                	jne    1000414b <PS2Keyboard::handler()+0x3df>
1000413f:	57                   	push   edi
10004140:	52                   	push   edx
10004141:	68 08 03 00 00       	push   0x308
10004146:	e9 0d 01 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
1000414b:	3c 09                	cmp    al,0x9
1000414d:	75 0c                	jne    1000415b <PS2Keyboard::handler()+0x3ef>
1000414f:	53                   	push   ebx
10004150:	52                   	push   edx
10004151:	68 09 03 00 00       	push   0x309
10004156:	e9 fd 00 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
1000415b:	3c 78                	cmp    al,0x78
1000415d:	75 0c                	jne    1000416b <PS2Keyboard::handler()+0x3ff>
1000415f:	51                   	push   ecx
10004160:	52                   	push   edx
10004161:	68 0a 03 00 00       	push   0x30a
10004166:	e9 ed 00 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
1000416b:	3c 07                	cmp    al,0x7
1000416d:	75 0c                	jne    1000417b <PS2Keyboard::handler()+0x40f>
1000416f:	50                   	push   eax
10004170:	52                   	push   edx
10004171:	68 0b 03 00 00       	push   0x30b
10004176:	e9 dd 00 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
1000417b:	3c 5a                	cmp    al,0x5a
1000417d:	75 09                	jne    10004188 <PS2Keyboard::handler()+0x41c>
1000417f:	50                   	push   eax
10004180:	52                   	push   edx
10004181:	6a 0a                	push   0xa
10004183:	e9 d0 00 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10004188:	3c 76                	cmp    al,0x76
1000418a:	75 0c                	jne    10004198 <PS2Keyboard::handler()+0x42c>
1000418c:	50                   	push   eax
1000418d:	52                   	push   edx
1000418e:	68 0a 02 00 00       	push   0x20a
10004193:	e9 c0 00 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10004198:	3c 70                	cmp    al,0x70
1000419a:	75 0c                	jne    100041a8 <PS2Keyboard::handler()+0x43c>
1000419c:	50                   	push   eax
1000419d:	52                   	push   edx
1000419e:	68 10 03 00 00       	push   0x310
100041a3:	e9 b0 00 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
100041a8:	3c 69                	cmp    al,0x69
100041aa:	75 0c                	jne    100041b8 <PS2Keyboard::handler()+0x44c>
100041ac:	50                   	push   eax
100041ad:	52                   	push   edx
100041ae:	68 11 03 00 00       	push   0x311
100041b3:	e9 a0 00 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
100041b8:	3c 72                	cmp    al,0x72
100041ba:	75 0c                	jne    100041c8 <PS2Keyboard::handler()+0x45c>
100041bc:	50                   	push   eax
100041bd:	52                   	push   edx
100041be:	68 12 03 00 00       	push   0x312
100041c3:	e9 90 00 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
100041c8:	3c 7a                	cmp    al,0x7a
100041ca:	75 0c                	jne    100041d8 <PS2Keyboard::handler()+0x46c>
100041cc:	57                   	push   edi
100041cd:	52                   	push   edx
100041ce:	68 13 03 00 00       	push   0x313
100041d3:	e9 80 00 00 00       	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
100041d8:	3c 6b                	cmp    al,0x6b
100041da:	75 09                	jne    100041e5 <PS2Keyboard::handler()+0x479>
100041dc:	53                   	push   ebx
100041dd:	52                   	push   edx
100041de:	68 14 03 00 00       	push   0x314
100041e3:	eb 73                	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
100041e5:	3c 73                	cmp    al,0x73
100041e7:	75 09                	jne    100041f2 <PS2Keyboard::handler()+0x486>
100041e9:	51                   	push   ecx
100041ea:	52                   	push   edx
100041eb:	68 15 03 00 00       	push   0x315
100041f0:	eb 66                	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
100041f2:	3c 74                	cmp    al,0x74
100041f4:	75 09                	jne    100041ff <PS2Keyboard::handler()+0x493>
100041f6:	50                   	push   eax
100041f7:	52                   	push   edx
100041f8:	68 16 03 00 00       	push   0x316
100041fd:	eb 59                	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
100041ff:	3c 6c                	cmp    al,0x6c
10004201:	75 09                	jne    1000420c <PS2Keyboard::handler()+0x4a0>
10004203:	50                   	push   eax
10004204:	52                   	push   edx
10004205:	68 17 03 00 00       	push   0x317
1000420a:	eb 4c                	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
1000420c:	3c 75                	cmp    al,0x75
1000420e:	75 09                	jne    10004219 <PS2Keyboard::handler()+0x4ad>
10004210:	50                   	push   eax
10004211:	52                   	push   edx
10004212:	68 18 03 00 00       	push   0x318
10004217:	eb 3f                	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10004219:	3c 7d                	cmp    al,0x7d
1000421b:	75 09                	jne    10004226 <PS2Keyboard::handler()+0x4ba>
1000421d:	50                   	push   eax
1000421e:	52                   	push   edx
1000421f:	68 19 03 00 00       	push   0x319
10004224:	eb 32                	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10004226:	3c 71                	cmp    al,0x71
10004228:	75 09                	jne    10004233 <PS2Keyboard::handler()+0x4c7>
1000422a:	50                   	push   eax
1000422b:	52                   	push   edx
1000422c:	68 1a 03 00 00       	push   0x31a
10004231:	eb 25                	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10004233:	3c 7b                	cmp    al,0x7b
10004235:	75 09                	jne    10004240 <PS2Keyboard::handler()+0x4d4>
10004237:	50                   	push   eax
10004238:	52                   	push   edx
10004239:	68 1c 03 00 00       	push   0x31c
1000423e:	eb 18                	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
10004240:	3c 79                	cmp    al,0x79
10004242:	75 09                	jne    1000424d <PS2Keyboard::handler()+0x4e1>
10004244:	57                   	push   edi
10004245:	52                   	push   edx
10004246:	68 1b 03 00 00       	push   0x31b
1000424b:	eb 0b                	jmp    10004258 <PS2Keyboard::handler()+0x4ec>
1000424d:	3c 7c                	cmp    al,0x7c
1000424f:	75 0f                	jne    10004260 <PS2Keyboard::handler()+0x4f4>
10004251:	53                   	push   ebx
10004252:	52                   	push   edx
10004253:	68 1e 03 00 00       	push   0x31e
10004258:	56                   	push   esi
10004259:	e8 fc ff ff ff       	call   1000425a <PS2Keyboard::handler()+0x4ee>	1000425a: R_386_PC32	PS2Keyboard::sendKey(KeyboardSpecialKeys, bool)
1000425e:	eb 45                	jmp    100042a5 <PS2Keyboard::handler()+0x539>
10004260:	0f b6 c0             	movzx  eax,al
10004263:	8a 8e 69 01 00 00    	mov    cl,BYTE PTR [esi+0x169]
10004269:	80 be 67 01 00 00 00 	cmp    BYTE PTR [esi+0x167],0x0
10004270:	74 16                	je     10004288 <PS2Keyboard::handler()+0x51c>
10004272:	84 c9                	test   cl,cl
10004274:	74 09                	je     1000427f <PS2Keyboard::handler()+0x513>
10004276:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10004279: R_386_32	PS2Keyboard::internalMapCapUpper
1000427d:	eb 1d                	jmp    1000429c <PS2Keyboard::handler()+0x530>
1000427f:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10004282: R_386_32	PS2Keyboard::internalMapperUpper
10004286:	eb 14                	jmp    1000429c <PS2Keyboard::handler()+0x530>
10004288:	84 c9                	test   cl,cl
1000428a:	74 09                	je     10004295 <PS2Keyboard::handler()+0x529>
1000428c:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	1000428f: R_386_32	PS2Keyboard::internalMapCapLower
10004293:	eb 07                	jmp    1000429c <PS2Keyboard::handler()+0x530>
10004295:	0f b6 80 00 00 00 00 	movzx  eax,BYTE PTR [eax+0x0]	10004298: R_386_32	PS2Keyboard::internalMapperLower
1000429c:	51                   	push   ecx
1000429d:	52                   	push   edx
1000429e:	50                   	push   eax
1000429f:	56                   	push   esi
100042a0:	e8 fc ff ff ff       	call   100042a1 <PS2Keyboard::handler()+0x535>	100042a1: R_386_PC32	PS2Keyboard::sendKey(unsigned short, bool)
100042a5:	83 c4 10             	add    esp,0x10
100042a8:	c6 86 66 01 00 00 00 	mov    BYTE PTR [esi+0x166],0x0
100042af:	c6 86 64 01 00 00 00 	mov    BYTE PTR [esi+0x164],0x0
100042b6:	e9 ec 01 00 00       	jmp    100044a7 <PS2Keyboard::handler()+0x73b>
100042bb:	80 fa 1c             	cmp    dl,0x1c
100042be:	0f 84 35 fd ff ff    	je     10003ff9 <PS2Keyboard::handler()+0x28d>
100042c4:	80 fa 35             	cmp    dl,0x35
100042c7:	e9 ad fb ff ff       	jmp    10003e79 <PS2Keyboard::handler()+0x10d>
100042cc:	80 fa 4d             	cmp    dl,0x4d
100042cf:	0f 84 93 fc ff ff    	je     10003f68 <PS2Keyboard::handler()+0x1fc>
100042d5:	80 fa 4f             	cmp    dl,0x4f
100042d8:	e9 bf fb ff ff       	jmp    10003e9c <PS2Keyboard::handler()+0x130>
100042dd:	0f b6 8e 66 01 00 00 	movzx  ecx,BYTE PTR [esi+0x166]
100042e4:	80 fa 0e             	cmp    dl,0xe
100042e7:	75 07                	jne    100042f0 <PS2Keyboard::handler()+0x584>
100042e9:	50                   	push   eax
100042ea:	51                   	push   ecx
100042eb:	e9 29 fd ff ff       	jmp    10004019 <PS2Keyboard::handler()+0x2ad>
100042f0:	80 fa 0f             	cmp    dl,0xf
100042f3:	75 07                	jne    100042fc <PS2Keyboard::handler()+0x590>
100042f5:	57                   	push   edi
100042f6:	51                   	push   ecx
100042f7:	e9 2a fd ff ff       	jmp    10004026 <PS2Keyboard::handler()+0x2ba>
100042fc:	80 fa 3a             	cmp    dl,0x3a
100042ff:	75 07                	jne    10004308 <PS2Keyboard::handler()+0x59c>
10004301:	84 c9                	test   cl,cl
10004303:	e9 2b fd ff ff       	jmp    10004033 <PS2Keyboard::handler()+0x2c7>
10004308:	80 fa 45             	cmp    dl,0x45
1000430b:	75 07                	jne    10004314 <PS2Keyboard::handler()+0x5a8>
1000430d:	84 c9                	test   cl,cl
1000430f:	e9 4d fd ff ff       	jmp    10004061 <PS2Keyboard::handler()+0x2f5>
10004314:	80 fa 46             	cmp    dl,0x46
10004317:	75 07                	jne    10004320 <PS2Keyboard::handler()+0x5b4>
10004319:	84 c9                	test   cl,cl
1000431b:	e9 6f fd ff ff       	jmp    1000408f <PS2Keyboard::handler()+0x323>
10004320:	80 fa 3b             	cmp    dl,0x3b
10004323:	75 07                	jne    1000432c <PS2Keyboard::handler()+0x5c0>
10004325:	53                   	push   ebx
10004326:	51                   	push   ecx
10004327:	e9 91 fd ff ff       	jmp    100040bd <PS2Keyboard::handler()+0x351>
1000432c:	80 fa 3c             	cmp    dl,0x3c
1000432f:	75 07                	jne    10004338 <PS2Keyboard::handler()+0x5cc>
10004331:	52                   	push   edx
10004332:	51                   	push   ecx
10004333:	e9 95 fd ff ff       	jmp    100040cd <PS2Keyboard::handler()+0x361>
10004338:	80 fa 3d             	cmp    dl,0x3d
1000433b:	75 07                	jne    10004344 <PS2Keyboard::handler()+0x5d8>
1000433d:	50                   	push   eax
1000433e:	51                   	push   ecx
1000433f:	e9 99 fd ff ff       	jmp    100040dd <PS2Keyboard::handler()+0x371>
10004344:	80 fa 3e             	cmp    dl,0x3e
10004347:	75 07                	jne    10004350 <PS2Keyboard::handler()+0x5e4>
10004349:	50                   	push   eax
1000434a:	51                   	push   ecx
1000434b:	e9 9d fd ff ff       	jmp    100040ed <PS2Keyboard::handler()+0x381>
10004350:	80 fa 3f             	cmp    dl,0x3f
10004353:	75 07                	jne    1000435c <PS2Keyboard::handler()+0x5f0>
10004355:	50                   	push   eax
10004356:	51                   	push   ecx
10004357:	e9 a1 fd ff ff       	jmp    100040fd <PS2Keyboard::handler()+0x391>
1000435c:	80 fa 40             	cmp    dl,0x40
1000435f:	75 07                	jne    10004368 <PS2Keyboard::handler()+0x5fc>
10004361:	50                   	push   eax
10004362:	51                   	push   ecx
10004363:	e9 a5 fd ff ff       	jmp    1000410d <PS2Keyboard::handler()+0x3a1>
10004368:	80 fa 41             	cmp    dl,0x41
1000436b:	75 07                	jne    10004374 <PS2Keyboard::handler()+0x608>
1000436d:	50                   	push   eax
1000436e:	51                   	push   ecx
1000436f:	e9 ad fd ff ff       	jmp    10004121 <PS2Keyboard::handler()+0x3b5>
10004374:	80 fa 42             	cmp    dl,0x42
10004377:	75 07                	jne    10004380 <PS2Keyboard::handler()+0x614>
10004379:	50                   	push   eax
1000437a:	51                   	push   ecx
1000437b:	e9 b1 fd ff ff       	jmp    10004131 <PS2Keyboard::handler()+0x3c5>
10004380:	80 fa 43             	cmp    dl,0x43
10004383:	75 07                	jne    1000438c <PS2Keyboard::handler()+0x620>
10004385:	57                   	push   edi
10004386:	51                   	push   ecx
10004387:	e9 b5 fd ff ff       	jmp    10004141 <PS2Keyboard::handler()+0x3d5>
1000438c:	80 fa 44             	cmp    dl,0x44
1000438f:	75 07                	jne    10004398 <PS2Keyboard::handler()+0x62c>
10004391:	53                   	push   ebx
10004392:	51                   	push   ecx
10004393:	e9 b9 fd ff ff       	jmp    10004151 <PS2Keyboard::handler()+0x3e5>
10004398:	84 d2                	test   dl,dl
1000439a:	75 07                	jne    100043a3 <PS2Keyboard::handler()+0x637>
1000439c:	52                   	push   edx
1000439d:	51                   	push   ecx
1000439e:	e9 be fd ff ff       	jmp    10004161 <PS2Keyboard::handler()+0x3f5>
100043a3:	80 fa 1c             	cmp    dl,0x1c
100043a6:	75 07                	jne    100043af <PS2Keyboard::handler()+0x643>
100043a8:	50                   	push   eax
100043a9:	51                   	push   ecx
100043aa:	e9 d2 fd ff ff       	jmp    10004181 <PS2Keyboard::handler()+0x415>
100043af:	80 fa 01             	cmp    dl,0x1
100043b2:	75 07                	jne    100043bb <PS2Keyboard::handler()+0x64f>
100043b4:	50                   	push   eax
100043b5:	51                   	push   ecx
100043b6:	e9 d3 fd ff ff       	jmp    1000418e <PS2Keyboard::handler()+0x422>
100043bb:	80 fa 52             	cmp    dl,0x52
100043be:	75 07                	jne    100043c7 <PS2Keyboard::handler()+0x65b>
100043c0:	50                   	push   eax
100043c1:	51                   	push   ecx
100043c2:	e9 d7 fd ff ff       	jmp    1000419e <PS2Keyboard::handler()+0x432>
100043c7:	80 fa 4f             	cmp    dl,0x4f
100043ca:	75 07                	jne    100043d3 <PS2Keyboard::handler()+0x667>
100043cc:	50                   	push   eax
100043cd:	51                   	push   ecx
100043ce:	e9 db fd ff ff       	jmp    100041ae <PS2Keyboard::handler()+0x442>
100043d3:	80 fa 50             	cmp    dl,0x50
100043d6:	75 07                	jne    100043df <PS2Keyboard::handler()+0x673>
100043d8:	50                   	push   eax
100043d9:	51                   	push   ecx
100043da:	e9 df fd ff ff       	jmp    100041be <PS2Keyboard::handler()+0x452>
100043df:	80 fa 51             	cmp    dl,0x51
100043e2:	75 07                	jne    100043eb <PS2Keyboard::handler()+0x67f>
100043e4:	50                   	push   eax
100043e5:	51                   	push   ecx
100043e6:	e9 e3 fd ff ff       	jmp    100041ce <PS2Keyboard::handler()+0x462>
100043eb:	80 fa 4b             	cmp    dl,0x4b
100043ee:	75 07                	jne    100043f7 <PS2Keyboard::handler()+0x68b>
100043f0:	57                   	push   edi
100043f1:	51                   	push   ecx
100043f2:	e9 e7 fd ff ff       	jmp    100041de <PS2Keyboard::handler()+0x472>
100043f7:	80 fa 4c             	cmp    dl,0x4c
100043fa:	75 07                	jne    10004403 <PS2Keyboard::handler()+0x697>
100043fc:	53                   	push   ebx
100043fd:	51                   	push   ecx
100043fe:	e9 e8 fd ff ff       	jmp    100041eb <PS2Keyboard::handler()+0x47f>
10004403:	80 fa 4d             	cmp    dl,0x4d
10004406:	75 07                	jne    1000440f <PS2Keyboard::handler()+0x6a3>
10004408:	52                   	push   edx
10004409:	51                   	push   ecx
1000440a:	e9 e9 fd ff ff       	jmp    100041f8 <PS2Keyboard::handler()+0x48c>
1000440f:	80 fa 47             	cmp    dl,0x47
10004412:	75 07                	jne    1000441b <PS2Keyboard::handler()+0x6af>
10004414:	50                   	push   eax
10004415:	51                   	push   ecx
10004416:	e9 ea fd ff ff       	jmp    10004205 <PS2Keyboard::handler()+0x499>
1000441b:	80 fa 48             	cmp    dl,0x48
1000441e:	75 07                	jne    10004427 <PS2Keyboard::handler()+0x6bb>
10004420:	50                   	push   eax
10004421:	51                   	push   ecx
10004422:	e9 eb fd ff ff       	jmp    10004212 <PS2Keyboard::handler()+0x4a6>
10004427:	80 fa 49             	cmp    dl,0x49
1000442a:	75 07                	jne    10004433 <PS2Keyboard::handler()+0x6c7>
1000442c:	50                   	push   eax
1000442d:	51                   	push   ecx
1000442e:	e9 ec fd ff ff       	jmp    1000421f <PS2Keyboard::handler()+0x4b3>
10004433:	80 fa 53             	cmp    dl,0x53
10004436:	75 07                	jne    1000443f <PS2Keyboard::handler()+0x6d3>
10004438:	50                   	push   eax
10004439:	51                   	push   ecx
1000443a:	e9 ed fd ff ff       	jmp    1000422c <PS2Keyboard::handler()+0x4c0>
1000443f:	80 fa 4a             	cmp    dl,0x4a
10004442:	75 07                	jne    1000444b <PS2Keyboard::handler()+0x6df>
10004444:	50                   	push   eax
10004445:	51                   	push   ecx
10004446:	e9 ee fd ff ff       	jmp    10004239 <PS2Keyboard::handler()+0x4cd>
1000444b:	80 fa 4e             	cmp    dl,0x4e
1000444e:	75 07                	jne    10004457 <PS2Keyboard::handler()+0x6eb>
10004450:	50                   	push   eax
10004451:	51                   	push   ecx
10004452:	e9 ef fd ff ff       	jmp    10004246 <PS2Keyboard::handler()+0x4da>
10004457:	80 fa 37             	cmp    dl,0x37
1000445a:	75 07                	jne    10004463 <PS2Keyboard::handler()+0x6f7>
1000445c:	57                   	push   edi
1000445d:	51                   	push   ecx
1000445e:	e9 f0 fd ff ff       	jmp    10004253 <PS2Keyboard::handler()+0x4e7>
10004463:	0f b6 be 67 01 00 00 	movzx  edi,BYTE PTR [esi+0x167]
1000446a:	0f b6 86 69 01 00 00 	movzx  eax,BYTE PTR [esi+0x169]
10004471:	c1 e7 07             	shl    edi,0x7
10004474:	c1 e0 08             	shl    eax,0x8
10004477:	8d bc 07 00 00 00 00 	lea    edi,[edi+eax*1+0x0]	1000447a: R_386_32	PS2Keyboard::internalMapperLowerBad
1000447e:	88 d0                	mov    al,dl
10004480:	89 fb                	mov    ebx,edi
10004482:	d7                   	xlat   BYTE PTR ds:[ebx]
10004483:	88 c2                	mov    dl,al
10004485:	0f b6 d2             	movzx  edx,dl
10004488:	53                   	push   ebx
10004489:	51                   	push   ecx
1000448a:	52                   	push   edx
1000448b:	e9 0f fe ff ff       	jmp    1000429f <PS2Keyboard::handler()+0x533>
10004490:	80 fa 36             	cmp    dl,0x36
10004493:	0f 84 26 f9 ff ff    	je     10003dbf <PS2Keyboard::handler()+0x53>
10004499:	80 fa 38             	cmp    dl,0x38
1000449c:	0f 84 7f f9 ff ff    	je     10003e21 <PS2Keyboard::handler()+0xb5>
100044a2:	e9 5b fa ff ff       	jmp    10003f02 <PS2Keyboard::handler()+0x196>
100044a7:	5b                   	pop    ebx
100044a8:	5e                   	pop    esi
100044a9:	5f                   	pop    edi
100044aa:	c3                   	ret    
100044ab:	90                   	nop

100044ac <PS2Keyboard::open(int, int, void*)>:
100044ac:	53                   	push   ebx
100044ad:	83 ec 14             	sub    esp,0x14
100044b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100044b4:	8b 83 c8 00 00 00    	mov    eax,DWORD PTR [ebx+0xc8]
100044ba:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
100044c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
100044c4:	89 83 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],eax
100044ca:	53                   	push   ebx
100044cb:	6a 01                	push   0x1
100044cd:	68 00 00 00 00       	push   0x0	100044ce: R_386_32	ps2KeyboardHandler(regs*, void*)
100044d2:	6a 01                	push   0x1
100044d4:	53                   	push   ebx
100044d5:	e8 fc ff ff ff       	call   100044d6 <PS2Keyboard::open(int, int, void*)+0x2a>	100044d6: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
100044da:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
100044e0:	a1 00 00 00 00       	mov    eax,ds:0x0	100044e1: R_386_32	sysBootSettings
100044e5:	c1 e8 02             	shr    eax,0x2
100044e8:	83 f0 01             	xor    eax,0x1
100044eb:	83 e0 01             	and    eax,0x1
100044ee:	88 83 6e 01 00 00    	mov    BYTE PTR [ebx+0x16e],al
100044f4:	31 c0                	xor    eax,eax
100044f6:	83 c4 28             	add    esp,0x28
100044f9:	5b                   	pop    ebx
100044fa:	c3                   	ret    
100044fb:	90                   	nop

100044fc <PS2Keyboard::close(int, int, void*)>:
100044fc:	83 c8 ff             	or     eax,0xffffffff
100044ff:	c3                   	ret    

10004500 <PS2Mouse::PS2Mouse()>:
10004500:	55                   	push   ebp
10004501:	89 e5                	mov    ebp,esp
10004503:	83 ec 08             	sub    esp,0x8
10004506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004509:	83 ec 08             	sub    esp,0x8
1000450c:	68 00 00 00 00       	push   0x0	1000450d: R_386_32	ps2mousename
10004511:	50                   	push   eax
10004512:	e8 fc ff ff ff       	call   10004513 <PS2Mouse::PS2Mouse()+0x13>	10004513: R_386_PC32	Mouse::Mouse(char const*)
10004517:	83 c4 10             	add    esp,0x10
1000451a:	ba 08 00 00 00       	mov    edx,0x8	1000451b: R_386_32	vtable for PS2Mouse
1000451f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004522:	89 10                	mov    DWORD PTR [eax],edx
10004524:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004527:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
1000452e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004531:	c7 80 62 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x162],0x0
1000453b:	90                   	nop
1000453c:	c9                   	leave  
1000453d:	c3                   	ret    

1000453e <ps2MouseHandler(regs*, void*)>:
1000453e:	55                   	push   ebp
1000453f:	89 e5                	mov    ebp,esp
10004541:	83 ec 08             	sub    esp,0x8
10004544:	83 ec 0c             	sub    esp,0xc
10004547:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000454a:	e8 fc ff ff ff       	call   1000454b <ps2MouseHandler(regs*, void*)+0xd>	1000454b: R_386_PC32	PS2Mouse::handler()
1000454f:	83 c4 10             	add    esp,0x10
10004552:	90                   	nop
10004553:	c9                   	leave  
10004554:	c3                   	ret    
10004555:	90                   	nop

10004556 <PS2Mouse::handler()>:
10004556:	55                   	push   ebp
10004557:	89 e5                	mov    ebp,esp
10004559:	83 ec 28             	sub    esp,0x28
1000455c:	66 c7 45 ea 64 00    	mov    WORD PTR [ebp-0x16],0x64
10004562:	66 8b 45 ea          	mov    ax,WORD PTR [ebp-0x16]
10004566:	89 c2                	mov    edx,eax
10004568:	ec                   	in     al,dx
10004569:	88 45 e9             	mov    BYTE PTR [ebp-0x17],al
1000456c:	8a 45 e9             	mov    al,BYTE PTR [ebp-0x17]
1000456f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10004572:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10004576:	83 e0 01             	and    eax,0x1
10004579:	85 c0                	test   eax,eax
1000457b:	0f 84 8d 01 00 00    	je     1000470e <PS2Mouse::handler()+0x1b8>
10004581:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
10004585:	83 e0 20             	and    eax,0x20
10004588:	85 c0                	test   eax,eax
1000458a:	0f 84 81 01 00 00    	je     10004711 <PS2Mouse::handler()+0x1bb>
10004590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004593:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10004599:	8d 50 01             	lea    edx,[eax+0x1]
1000459c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
1000459f:	88 91 61 01 00 00    	mov    BYTE PTR [ecx+0x161],dl
100045a5:	0f b6 c8             	movzx  ecx,al
100045a8:	66 c7 45 e6 60 00    	mov    WORD PTR [ebp-0x1a],0x60
100045ae:	66 8b 45 e6          	mov    ax,WORD PTR [ebp-0x1a]
100045b2:	89 c2                	mov    edx,eax
100045b4:	ec                   	in     al,dx
100045b5:	88 45 e5             	mov    BYTE PTR [ebp-0x1b],al
100045b8:	8a 55 e5             	mov    dl,BYTE PTR [ebp-0x1b]
100045bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100045be:	88 94 08 62 01 00 00 	mov    BYTE PTR [eax+ecx*1+0x162],dl
100045c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100045c8:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100045ce:	0f b6 c0             	movzx  eax,al
100045d1:	83 e0 08             	and    eax,0x8
100045d4:	85 c0                	test   eax,eax
100045d6:	75 0f                	jne    100045e7 <PS2Mouse::handler()+0x91>
100045d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100045db:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100045e2:	e9 2b 01 00 00       	jmp    10004712 <PS2Mouse::handler()+0x1bc>
100045e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100045ea:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
100045f0:	84 c0                	test   al,al
100045f2:	75 0d                	jne    10004601 <PS2Mouse::handler()+0xab>
100045f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100045f7:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
100045fd:	3c 02                	cmp    al,0x2
100045ff:	77 2f                	ja     10004630 <PS2Mouse::handler()+0xda>
10004601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004604:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
1000460a:	3c 03                	cmp    al,0x3
1000460c:	74 11                	je     1000461f <PS2Mouse::handler()+0xc9>
1000460e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004611:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
10004617:	3c 04                	cmp    al,0x4
10004619:	0f 85 f3 00 00 00    	jne    10004712 <PS2Mouse::handler()+0x1bc>
1000461f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004622:	8a 80 61 01 00 00    	mov    al,BYTE PTR [eax+0x161]
10004628:	3c 03                	cmp    al,0x3
1000462a:	0f 86 e2 00 00 00    	jbe    10004712 <PS2Mouse::handler()+0x1bc>
10004630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004633:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
1000463a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000463d:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10004643:	84 c0                	test   al,al
10004645:	78 13                	js     1000465a <PS2Mouse::handler()+0x104>
10004647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000464a:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
10004650:	0f b6 c0             	movzx  eax,al
10004653:	83 e0 40             	and    eax,0x40
10004656:	85 c0                	test   eax,eax
10004658:	74 37                	je     10004691 <PS2Mouse::handler()+0x13b>
1000465a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000465d:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
10004664:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004667:	c6 80 62 01 00 00 00 	mov    BYTE PTR [eax+0x162],0x0
1000466e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004671:	c6 80 63 01 00 00 00 	mov    BYTE PTR [eax+0x163],0x0
10004678:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000467b:	c6 80 64 01 00 00 00 	mov    BYTE PTR [eax+0x164],0x0
10004682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004685:	c6 80 65 01 00 00 00 	mov    BYTE PTR [eax+0x165],0x0
1000468c:	e9 81 00 00 00       	jmp    10004712 <PS2Mouse::handler()+0x1bc>
10004691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004694:	8a 80 63 01 00 00    	mov    al,BYTE PTR [eax+0x163]
1000469a:	0f b6 d0             	movzx  edx,al
1000469d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046a0:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100046a6:	0f b6 c0             	movzx  eax,al
100046a9:	c1 e0 04             	shl    eax,0x4
100046ac:	25 00 01 00 00       	and    eax,0x100
100046b1:	29 c2                	sub    edx,eax
100046b3:	89 d0                	mov    eax,edx
100046b5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100046b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046bb:	8a 80 62 01 00 00    	mov    al,BYTE PTR [eax+0x162]
100046c1:	0f b6 c0             	movzx  eax,al
100046c4:	c1 e0 03             	shl    eax,0x3
100046c7:	25 00 01 00 00       	and    eax,0x100
100046cc:	89 c2                	mov    edx,eax
100046ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100046d1:	8a 80 64 01 00 00    	mov    al,BYTE PTR [eax+0x164]
100046d7:	0f b6 c0             	movzx  eax,al
100046da:	29 c2                	sub    edx,eax
100046dc:	89 d0                	mov    eax,edx
100046de:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100046e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100046e2: R_386_32	guiMouseHandler
100046e6:	85 c0                	test   eax,eax
100046e8:	74 28                	je     10004712 <PS2Mouse::handler()+0x1bc>
100046ea:	a1 00 00 00 00       	mov    eax,ds:0x0	100046eb: R_386_32	guiMouseHandler
100046ef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100046f2:	8a 92 62 01 00 00    	mov    dl,BYTE PTR [edx+0x162]
100046f8:	0f b6 d2             	movzx  edx,dl
100046fb:	83 e2 01             	and    edx,0x1
100046fe:	6a 00                	push   0x0
10004700:	52                   	push   edx
10004701:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10004704:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10004707:	ff d0                	call   eax
10004709:	83 c4 10             	add    esp,0x10
1000470c:	eb 04                	jmp    10004712 <PS2Mouse::handler()+0x1bc>
1000470e:	90                   	nop
1000470f:	eb 01                	jmp    10004712 <PS2Mouse::handler()+0x1bc>
10004711:	90                   	nop
10004712:	c9                   	leave  
10004713:	c3                   	ret    

10004714 <PS2Mouse::open(int, int, void*)>:
10004714:	55                   	push   ebp
10004715:	89 e5                	mov    ebp,esp
10004717:	83 ec 08             	sub    esp,0x8
1000471a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000471d:	8b 90 c8 00 00 00    	mov    edx,DWORD PTR [eax+0xc8]
10004723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004726:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
1000472c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000472f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10004732:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
10004738:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000473b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004741:	83 ec 08             	sub    esp,0x8
10004744:	68 f6 00 00 00       	push   0xf6
10004749:	50                   	push   eax
1000474a:	e8 fc ff ff ff       	call   1000474b <PS2Mouse::open(int, int, void*)+0x37>	1000474b: R_386_PC32	PS2Port::deviceWrite(unsigned char)
1000474f:	83 c4 10             	add    esp,0x10
10004752:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004755:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000475b:	83 ec 0c             	sub    esp,0xc
1000475e:	50                   	push   eax
1000475f:	e8 fc ff ff ff       	call   10004760 <PS2Mouse::open(int, int, void*)+0x4c>	10004760: R_386_PC32	PS2Port::deviceRead()
10004764:	83 c4 10             	add    esp,0x10
10004767:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000476a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004770:	83 ec 08             	sub    esp,0x8
10004773:	68 f4 00 00 00       	push   0xf4
10004778:	50                   	push   eax
10004779:	e8 fc ff ff ff       	call   1000477a <PS2Mouse::open(int, int, void*)+0x66>	1000477a: R_386_PC32	PS2Port::deviceWrite(unsigned char)
1000477e:	83 c4 10             	add    esp,0x10
10004781:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004784:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
1000478a:	83 ec 0c             	sub    esp,0xc
1000478d:	50                   	push   eax
1000478e:	e8 fc ff ff ff       	call   1000478f <PS2Mouse::open(int, int, void*)+0x7b>	1000478f: R_386_PC32	PS2Port::deviceRead()
10004793:	83 c4 10             	add    esp,0x10
10004796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004799:	c6 80 61 01 00 00 00 	mov    BYTE PTR [eax+0x161],0x0
100047a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047a3:	c6 80 60 01 00 00 00 	mov    BYTE PTR [eax+0x160],0x0
100047aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047ad:	83 ec 0c             	sub    esp,0xc
100047b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100047b3:	6a 01                	push   0x1
100047b5:	68 00 00 00 00       	push   0x0	100047b6: R_386_32	ps2MouseHandler(regs*, void*)
100047ba:	6a 0c                	push   0xc
100047bc:	50                   	push   eax
100047bd:	e8 fc ff ff ff       	call   100047be <PS2Mouse::open(int, int, void*)+0xaa>	100047be: R_386_PC32	Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)
100047c2:	83 c4 20             	add    esp,0x20
100047c5:	b8 00 00 00 00       	mov    eax,0x0
100047ca:	c9                   	leave  
100047cb:	c3                   	ret    

100047cc <PS2Mouse::close(int, int, void*)>:
100047cc:	b8 00 00 00 00       	mov    eax,0x0
100047d1:	c3                   	ret    

100047d2 <PS2Mouse::detect()>:
100047d2:	90                   	nop
100047d3:	c3                   	ret    

100047d4 <PS2Port::PS2Port()>:
100047d4:	55                   	push   ebp
100047d5:	89 e5                	mov    ebp,esp
100047d7:	83 ec 08             	sub    esp,0x8
100047da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047dd:	83 ec 08             	sub    esp,0x8
100047e0:	68 00 00 00 00       	push   0x0	100047e1: R_386_32	ps2portname
100047e5:	50                   	push   eax
100047e6:	e8 fc ff ff ff       	call   100047e7 <PS2Port::PS2Port()+0x13>	100047e7: R_386_PC32	Bus::Bus(char const*)
100047eb:	83 c4 10             	add    esp,0x10
100047ee:	ba 08 00 00 00       	mov    edx,0x8	100047ef: R_386_32	vtable for PS2Port
100047f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100047f6:	89 10                	mov    DWORD PTR [eax],edx
100047f8:	90                   	nop
100047f9:	c9                   	leave  
100047fa:	c3                   	ret    
100047fb:	90                   	nop

100047fc <PS2Port::open(int, int, void*)>:
100047fc:	55                   	push   ebp
100047fd:	89 e5                	mov    ebp,esp
100047ff:	83 ec 08             	sub    esp,0x8
10004802:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004805:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10004808:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
1000480e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004811:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10004814:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
1000481a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000481d:	8b 00                	mov    eax,DWORD PTR [eax]
1000481f:	83 c0 18             	add    eax,0x18
10004822:	8b 00                	mov    eax,DWORD PTR [eax]
10004824:	83 ec 0c             	sub    esp,0xc
10004827:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000482a:	ff d0                	call   eax
1000482c:	83 c4 10             	add    esp,0x10
1000482f:	b8 00 00 00 00       	mov    eax,0x0
10004834:	c9                   	leave  
10004835:	c3                   	ret    

10004836 <PS2Port::close(int, int, void*)>:
10004836:	b8 00 00 00 00       	mov    eax,0x0
1000483b:	c3                   	ret    

1000483c <PS2Port::detect()>:
1000483c:	55                   	push   ebp
1000483d:	89 e5                	mov    ebp,esp
1000483f:	53                   	push   ebx
10004840:	83 ec 14             	sub    esp,0x14
10004843:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004846:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000484c:	85 c0                	test   eax,eax
1000484e:	75 5a                	jne    100048aa <PS2Port::detect()+0x6e>
10004850:	c7 45 ec 70 01 00 00 	mov    DWORD PTR [ebp-0x14],0x170
10004857:	83 ec 0c             	sub    esp,0xc
1000485a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
1000485d:	e8 fc ff ff ff       	call   1000485e <PS2Port::detect()+0x22>	1000485e: R_386_PC32	malloc
10004862:	83 c4 10             	add    esp,0x10
10004865:	89 c3                	mov    ebx,eax
10004867:	83 ec 0c             	sub    esp,0xc
1000486a:	53                   	push   ebx
1000486b:	e8 fc ff ff ff       	call   1000486c <PS2Port::detect()+0x30>	1000486c: R_386_PC32	PS2Keyboard::PS2Keyboard()
10004870:	83 c4 10             	add    esp,0x10
10004873:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
10004876:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004879:	83 ec 08             	sub    esp,0x8
1000487c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
1000487f:	50                   	push   eax
10004880:	e8 fc ff ff ff       	call   10004881 <PS2Port::detect()+0x45>	10004881: R_386_PC32	Device::addChild(Device*)
10004885:	83 c4 10             	add    esp,0x10
10004888:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000488b:	8b 00                	mov    eax,DWORD PTR [eax]
1000488d:	83 c0 08             	add    eax,0x8
10004890:	8b 00                	mov    eax,DWORD PTR [eax]
10004892:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10004895:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
1000489b:	52                   	push   edx
1000489c:	6a 00                	push   0x0
1000489e:	6a 00                	push   0x0
100048a0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
100048a3:	ff d0                	call   eax
100048a5:	83 c4 10             	add    esp,0x10
100048a8:	eb 66                	jmp    10004910 <PS2Port::detect()+0xd4>
100048aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048ad:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
100048b3:	83 f8 01             	cmp    eax,0x1
100048b6:	75 58                	jne    10004910 <PS2Port::detect()+0xd4>
100048b8:	c7 45 e8 68 01 00 00 	mov    DWORD PTR [ebp-0x18],0x168
100048bf:	83 ec 0c             	sub    esp,0xc
100048c2:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
100048c5:	e8 fc ff ff ff       	call   100048c6 <PS2Port::detect()+0x8a>	100048c6: R_386_PC32	malloc
100048ca:	83 c4 10             	add    esp,0x10
100048cd:	89 c3                	mov    ebx,eax
100048cf:	83 ec 0c             	sub    esp,0xc
100048d2:	53                   	push   ebx
100048d3:	e8 fc ff ff ff       	call   100048d4 <PS2Port::detect()+0x98>	100048d4: R_386_PC32	PS2Mouse::PS2Mouse()
100048d8:	83 c4 10             	add    esp,0x10
100048db:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
100048de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100048e1:	83 ec 08             	sub    esp,0x8
100048e4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100048e7:	50                   	push   eax
100048e8:	e8 fc ff ff ff       	call   100048e9 <PS2Port::detect()+0xad>	100048e9: R_386_PC32	Device::addChild(Device*)
100048ed:	83 c4 10             	add    esp,0x10
100048f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100048f3:	8b 00                	mov    eax,DWORD PTR [eax]
100048f5:	83 c0 08             	add    eax,0x8
100048f8:	8b 00                	mov    eax,DWORD PTR [eax]
100048fa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100048fd:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
10004903:	52                   	push   edx
10004904:	6a 00                	push   0x0
10004906:	6a 01                	push   0x1
10004908:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
1000490b:	ff d0                	call   eax
1000490d:	83 c4 10             	add    esp,0x10
10004910:	90                   	nop
10004911:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10004914:	c9                   	leave  
10004915:	c3                   	ret    

10004916 <PS2Port::deviceWrite(unsigned char)>:
10004916:	55                   	push   ebp
10004917:	89 e5                	mov    ebp,esp
10004919:	83 ec 28             	sub    esp,0x28
1000491c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000491f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
10004922:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004925:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
1000492b:	83 f8 01             	cmp    eax,0x1
1000492e:	75 1a                	jne    1000494a <PS2Port::deviceWrite(unsigned char)+0x34>
10004930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004933:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
10004939:	83 ec 08             	sub    esp,0x8
1000493c:	68 d4 00 00 00       	push   0xd4
10004941:	50                   	push   eax
10004942:	e8 fc ff ff ff       	call   10004943 <PS2Port::deviceWrite(unsigned char)+0x2d>	10004943: R_386_PC32	PS2::controllerWrite(unsigned char)
10004947:	83 c4 10             	add    esp,0x10
1000494a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10004951:	66 c7 45 f0 64 00    	mov    WORD PTR [ebp-0x10],0x64
10004957:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000495a:	89 c2                	mov    edx,eax
1000495c:	ec                   	in     al,dx
1000495d:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
10004960:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
10004963:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
10004966:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
1000496a:	83 e0 02             	and    eax,0x2
1000496d:	85 c0                	test   eax,eax
1000496f:	74 29                	je     1000499a <PS2Port::deviceWrite(unsigned char)+0x84>
10004971:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
10004975:	83 e0 40             	and    eax,0x40
10004978:	85 c0                	test   eax,eax
1000497a:	75 22                	jne    1000499e <PS2Port::deviceWrite(unsigned char)+0x88>
1000497c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
1000497f:	84 c0                	test   al,al
10004981:	78 1b                	js     1000499e <PS2Port::deviceWrite(unsigned char)+0x88>
10004983:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10004986:	8d 50 01             	lea    edx,[eax+0x1]
10004989:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
1000498c:	3d 40 06 00 00       	cmp    eax,0x640
10004991:	0f 94 c0             	sete   al
10004994:	84 c0                	test   al,al
10004996:	75 05                	jne    1000499d <PS2Port::deviceWrite(unsigned char)+0x87>
10004998:	eb b7                	jmp    10004951 <PS2Port::deviceWrite(unsigned char)+0x3b>
1000499a:	90                   	nop
1000499b:	eb 01                	jmp    1000499e <PS2Port::deviceWrite(unsigned char)+0x88>
1000499d:	90                   	nop
1000499e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
100049a2:	66 c7 45 ec 60 00    	mov    WORD PTR [ebp-0x14],0x60
100049a8:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
100049ab:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
100049ae:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
100049b1:	ee                   	out    dx,al
100049b2:	b0 01                	mov    al,0x1
100049b4:	c9                   	leave  
100049b5:	c3                   	ret    

100049b6 <PS2Port::deviceRead()>:
100049b6:	55                   	push   ebp
100049b7:	89 e5                	mov    ebp,esp
100049b9:	83 ec 08             	sub    esp,0x8
100049bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049bf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
100049c5:	83 ec 0c             	sub    esp,0xc
100049c8:	50                   	push   eax
100049c9:	e8 fc ff ff ff       	call   100049ca <PS2Port::deviceRead()+0x14>	100049ca: R_386_PC32	PS2::controllerRead()
100049ce:	83 c4 10             	add    esp,0x10
100049d1:	c9                   	leave  
100049d2:	c3                   	ret    
100049d3:	90                   	nop

100049d4 <ISA::~ISA()>:
100049d4:	55                   	push   ebp
100049d5:	89 e5                	mov    ebp,esp
100049d7:	83 ec 08             	sub    esp,0x8
100049da:	ba 08 00 00 00       	mov    edx,0x8	100049db: R_386_32	vtable for ISA
100049df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049e2:	89 10                	mov    DWORD PTR [eax],edx
100049e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100049e7:	83 ec 0c             	sub    esp,0xc
100049ea:	50                   	push   eax
100049eb:	e8 fc ff ff ff       	call   100049ec <ISA::~ISA()+0x18>	100049ec: R_386_PC32	Bus::~Bus()
100049f0:	83 c4 10             	add    esp,0x10
100049f3:	90                   	nop
100049f4:	c9                   	leave  
100049f5:	c3                   	ret    

100049f6 <ISA::~ISA()>:
100049f6:	55                   	push   ebp
100049f7:	89 e5                	mov    ebp,esp
100049f9:	83 ec 08             	sub    esp,0x8
100049fc:	83 ec 0c             	sub    esp,0xc
100049ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004a02:	e8 fc ff ff ff       	call   10004a03 <ISA::~ISA()+0xd>	10004a03: R_386_PC32	ISA::~ISA()
10004a07:	83 c4 10             	add    esp,0x10
10004a0a:	83 ec 08             	sub    esp,0x8
10004a0d:	68 58 01 00 00       	push   0x158
10004a12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004a15:	e8 fc ff ff ff       	call   10004a16 <ISA::~ISA()+0x20>	10004a16: R_386_PC32	operator delete(void*, unsigned long)
10004a1a:	83 c4 10             	add    esp,0x10
10004a1d:	c9                   	leave  
10004a1e:	c3                   	ret    
10004a1f:	90                   	nop

10004a20 <Floppy::~Floppy()>:
10004a20:	55                   	push   ebp
10004a21:	89 e5                	mov    ebp,esp
10004a23:	83 ec 08             	sub    esp,0x8
10004a26:	ba 08 00 00 00       	mov    edx,0x8	10004a27: R_386_32	vtable for Floppy
10004a2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a2e:	89 10                	mov    DWORD PTR [eax],edx
10004a30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a33:	83 ec 0c             	sub    esp,0xc
10004a36:	50                   	push   eax
10004a37:	e8 fc ff ff ff       	call   10004a38 <Floppy::~Floppy()+0x18>	10004a38: R_386_PC32	HardDiskController::~HardDiskController()
10004a3c:	83 c4 10             	add    esp,0x10
10004a3f:	90                   	nop
10004a40:	c9                   	leave  
10004a41:	c3                   	ret    

10004a42 <Floppy::~Floppy()>:
10004a42:	55                   	push   ebp
10004a43:	89 e5                	mov    ebp,esp
10004a45:	83 ec 08             	sub    esp,0x8
10004a48:	83 ec 0c             	sub    esp,0xc
10004a4b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004a4e:	e8 fc ff ff ff       	call   10004a4f <Floppy::~Floppy()+0xd>	10004a4f: R_386_PC32	Floppy::~Floppy()
10004a53:	83 c4 10             	add    esp,0x10
10004a56:	83 ec 08             	sub    esp,0x8
10004a59:	68 b8 01 00 00       	push   0x1b8
10004a5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004a61:	e8 fc ff ff ff       	call   10004a62 <Floppy::~Floppy()+0x20>	10004a62: R_386_PC32	operator delete(void*, unsigned long)
10004a66:	83 c4 10             	add    esp,0x10
10004a69:	c9                   	leave  
10004a6a:	c3                   	ret    
10004a6b:	90                   	nop

10004a6c <JoystickHost::JoystickHost()>:
10004a6c:	55                   	push   ebp
10004a6d:	89 e5                	mov    ebp,esp
10004a6f:	ba 08 00 00 00       	mov    edx,0x8	10004a70: R_386_32	vtable for JoystickHost
10004a74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a77:	89 10                	mov    DWORD PTR [eax],edx
10004a79:	90                   	nop
10004a7a:	5d                   	pop    ebp
10004a7b:	c3                   	ret    

10004a7c <DMA::~DMA()>:
10004a7c:	55                   	push   ebp
10004a7d:	89 e5                	mov    ebp,esp
10004a7f:	83 ec 08             	sub    esp,0x8
10004a82:	ba 08 00 00 00       	mov    edx,0x8	10004a83: R_386_32	vtable for DMA
10004a87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a8a:	89 10                	mov    DWORD PTR [eax],edx
10004a8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004a8f:	83 ec 0c             	sub    esp,0xc
10004a92:	50                   	push   eax
10004a93:	e8 fc ff ff ff       	call   10004a94 <DMA::~DMA()+0x18>	10004a94: R_386_PC32	Device::~Device()
10004a98:	83 c4 10             	add    esp,0x10
10004a9b:	90                   	nop
10004a9c:	c9                   	leave  
10004a9d:	c3                   	ret    

10004a9e <DMA::~DMA()>:
10004a9e:	55                   	push   ebp
10004a9f:	89 e5                	mov    ebp,esp
10004aa1:	83 ec 08             	sub    esp,0x8
10004aa4:	83 ec 0c             	sub    esp,0xc
10004aa7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004aaa:	e8 fc ff ff ff       	call   10004aab <DMA::~DMA()+0xd>	10004aab: R_386_PC32	DMA::~DMA()
10004aaf:	83 c4 10             	add    esp,0x10
10004ab2:	83 ec 08             	sub    esp,0x8
10004ab5:	68 5c 01 00 00       	push   0x15c
10004aba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004abd:	e8 fc ff ff ff       	call   10004abe <DMA::~DMA()+0x20>	10004abe: R_386_PC32	operator delete(void*, unsigned long)
10004ac2:	83 c4 10             	add    esp,0x10
10004ac5:	c9                   	leave  
10004ac6:	c3                   	ret    
10004ac7:	90                   	nop

10004ac8 <PS2::~PS2()>:
10004ac8:	55                   	push   ebp
10004ac9:	89 e5                	mov    ebp,esp
10004acb:	83 ec 08             	sub    esp,0x8
10004ace:	ba 08 00 00 00       	mov    edx,0x8	10004acf: R_386_32	vtable for PS2
10004ad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004ad6:	89 10                	mov    DWORD PTR [eax],edx
10004ad8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004adb:	83 ec 0c             	sub    esp,0xc
10004ade:	50                   	push   eax
10004adf:	e8 fc ff ff ff       	call   10004ae0 <PS2::~PS2()+0x18>	10004ae0: R_386_PC32	Bus::~Bus()
10004ae4:	83 c4 10             	add    esp,0x10
10004ae7:	90                   	nop
10004ae8:	c9                   	leave  
10004ae9:	c3                   	ret    

10004aea <PS2::~PS2()>:
10004aea:	55                   	push   ebp
10004aeb:	89 e5                	mov    ebp,esp
10004aed:	83 ec 08             	sub    esp,0x8
10004af0:	83 ec 0c             	sub    esp,0xc
10004af3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004af6:	e8 fc ff ff ff       	call   10004af7 <PS2::~PS2()+0xd>	10004af7: R_386_PC32	PS2::~PS2()
10004afb:	83 c4 10             	add    esp,0x10
10004afe:	83 ec 08             	sub    esp,0x8
10004b01:	68 60 01 00 00       	push   0x160
10004b06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004b09:	e8 fc ff ff ff       	call   10004b0a <PS2::~PS2()+0x20>	10004b0a: R_386_PC32	operator delete(void*, unsigned long)
10004b0e:	83 c4 10             	add    esp,0x10
10004b11:	c9                   	leave  
10004b12:	c3                   	ret    
10004b13:	90                   	nop

10004b14 <PS2Mouse::~PS2Mouse()>:
10004b14:	55                   	push   ebp
10004b15:	89 e5                	mov    ebp,esp
10004b17:	83 ec 08             	sub    esp,0x8
10004b1a:	ba 08 00 00 00       	mov    edx,0x8	10004b1b: R_386_32	vtable for PS2Mouse
10004b1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004b22:	89 10                	mov    DWORD PTR [eax],edx
10004b24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004b27:	83 ec 0c             	sub    esp,0xc
10004b2a:	50                   	push   eax
10004b2b:	e8 fc ff ff ff       	call   10004b2c <PS2Mouse::~PS2Mouse()+0x18>	10004b2c: R_386_PC32	Mouse::~Mouse()
10004b30:	83 c4 10             	add    esp,0x10
10004b33:	90                   	nop
10004b34:	c9                   	leave  
10004b35:	c3                   	ret    

10004b36 <PS2Mouse::~PS2Mouse()>:
10004b36:	55                   	push   ebp
10004b37:	89 e5                	mov    ebp,esp
10004b39:	83 ec 08             	sub    esp,0x8
10004b3c:	83 ec 0c             	sub    esp,0xc
10004b3f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004b42:	e8 fc ff ff ff       	call   10004b43 <PS2Mouse::~PS2Mouse()+0xd>	10004b43: R_386_PC32	PS2Mouse::~PS2Mouse()
10004b47:	83 c4 10             	add    esp,0x10
10004b4a:	83 ec 08             	sub    esp,0x8
10004b4d:	68 68 01 00 00       	push   0x168
10004b52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004b55:	e8 fc ff ff ff       	call   10004b56 <PS2Mouse::~PS2Mouse()+0x20>	10004b56: R_386_PC32	operator delete(void*, unsigned long)
10004b5a:	83 c4 10             	add    esp,0x10
10004b5d:	c9                   	leave  
10004b5e:	c3                   	ret    
10004b5f:	90                   	nop

10004b60 <PS2Port::~PS2Port()>:
10004b60:	55                   	push   ebp
10004b61:	89 e5                	mov    ebp,esp
10004b63:	83 ec 08             	sub    esp,0x8
10004b66:	ba 08 00 00 00       	mov    edx,0x8	10004b67: R_386_32	vtable for PS2Port
10004b6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004b6e:	89 10                	mov    DWORD PTR [eax],edx
10004b70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10004b73:	83 ec 0c             	sub    esp,0xc
10004b76:	50                   	push   eax
10004b77:	e8 fc ff ff ff       	call   10004b78 <PS2Port::~PS2Port()+0x18>	10004b78: R_386_PC32	Bus::~Bus()
10004b7c:	83 c4 10             	add    esp,0x10
10004b7f:	90                   	nop
10004b80:	c9                   	leave  
10004b81:	c3                   	ret    

10004b82 <PS2Port::~PS2Port()>:
10004b82:	55                   	push   ebp
10004b83:	89 e5                	mov    ebp,esp
10004b85:	83 ec 08             	sub    esp,0x8
10004b88:	83 ec 0c             	sub    esp,0xc
10004b8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004b8e:	e8 fc ff ff ff       	call   10004b8f <PS2Port::~PS2Port()+0xd>	10004b8f: R_386_PC32	PS2Port::~PS2Port()
10004b93:	83 c4 10             	add    esp,0x10
10004b96:	83 ec 08             	sub    esp,0x8
10004b99:	68 60 01 00 00       	push   0x160
10004b9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10004ba1:	e8 fc ff ff ff       	call   10004ba2 <PS2Port::~PS2Port()+0x20>	10004ba2: R_386_PC32	operator delete(void*, unsigned long)
10004ba6:	83 c4 10             	add    esp,0x10
10004ba9:	c9                   	leave  
10004baa:	c3                   	ret    
10004bab:	90                   	nop

10004bac <PHYS_RAM_TABLE_SIZE>:
10004bac:	13 05 00 00                                         ....

10004bb0 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10004bb0:	24 05 00 00                                         $...

10004bb4 <PHYS_RAM_TABLE>:
10004bb4:	00 06 00 00                                         ....

10004bb8 <PHYS_DMA_MEMORY_1>:
10004bb8:	00 00 01 00                                         ....

10004bbc <PHYS_PHYS_PAGE_BITMAP>:
10004bbc:	00 00 02 00                                         ....

10004bc0 <PHYS_VIRT_PAGE_BITMAP>:
10004bc0:	00 00 04 00                                         ....

10004bc4 <PHYS_DMA_MEMORY_2>:
10004bc4:	00 00 06 00                                         ....

10004bc8 <PHYS_ALLOCED_VIRT_PAGES>:
10004bc8:	00 00 10 00                                         ....

10004bcc <PHYS_KRNL_PAGE_DIRECTORY>:
10004bcc:	00 10 00 00                                         ....

10004bd0 <VIRT_KERNEL_BASE>:
10004bd0:	00 00 00 c0                                         ....

10004bd4 <VIRT_LOW_MEGS>:
10004bd4:	00 00 00 c2                                         ....

10004bd8 <VIRT_CPU_SPECIFIC>:
10004bd8:	00 00 40 c2                                         ..@.

10004bdc <VIRT_RECURSIVE_SPOT_1>:
10004bdc:	00 00 80 c2                                         ....

10004be0 <VIRT_RECURSIVE_SPOT_2>:
10004be0:	00 00 c0 c2                                         ....

10004be4 <VIRT_DMA_MEMORY_1>:
10004be4:	00 00 01 c2                                         ....

10004be8 <SIZE_DMA_MEMORY_1>:
10004be8:	00 00 01 00                                         ....

10004bec <VIRT_DMA_MEMORY_2>:
10004bec:	00 00 06 c2                                         ....

10004bf0 <SIZE_DMA_MEMORY_2>:
10004bf0:	00 00 02 00                                         ....

10004bf4 <VIRT_KRNL_PAGE_DIRECTORY>:
10004bf4:	00 10 00 c2                                         ....

10004bf8 <VIRT_PHYS_PAGE_BITMAP>:
10004bf8:	00 00 02 c2                                         ....

10004bfc <SIZE_PHYS_PAGE_BITMAP>:
10004bfc:	00 00 02 00                                         ....

10004c00 <VIRT_VIRT_PAGE_BITMAP>:
10004c00:	00 00 04 c2                                         ....

10004c04 <SIZE_VIRT_PAGE_BITMAP>:
10004c04:	00 80 00 00                                         ....

10004c08 <VIRT_RAM_TABLE>:
10004c08:	00 06 00 c2                                         ....

10004c0c <VIRT_RAM_TABLE_SIZE>:
10004c0c:	13 05 00 c2                                         ....

10004c10 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10004c10:	24 05 00 c2                                         $...

10004c14 <SIZE_APP_STACK_USER>:
10004c14:	00 00 18 00                                         ....

10004c18 <SIZE_APP_STACK_KRNL>:
10004c18:	00 00 08 00                                         ....

10004c1c <SIZE_APP_STACK_TOTAL>:
10004c1c:	00 00 20 00                                         .. .

10004c20 <VIRT_APP_DATA>:
10004c20:	00 00 00 10                                         ....

10004c24 <VIRT_APP_STACK_USER_TOP>:
10004c24:	00 00 00 02                                         ....

10004c28 <VIRT_APP_STACK_KRNL_TOP>:
10004c28:	00 00 e8 01                                         ....

10004c2c <VIRT_HEAP_MIN>:
10004c2c:	00 00 00 c8                                         ....

10004c30 <VIRT_HEAP_MAX>:
10004c30:	ff ff ff ef                                         ....

10004c34 <VIRT_SBRK_MIN>:
10004c34:	00 00 00 f0                                         ....

10004c38 <VIRT_SBRK_MAX>:
10004c38:	00 00 c0 ff                                         ....

10004c3c <VIRT_ALLOCED_VIRT_PAGES>:
10004c3c:	00 00 10 c2                                         ....

10004c40 <VIRT_ACPI_DRIVER>:
10004c40:	00 40 48 c2                                         .@H.

10004c44 <TERMINAL_KEYBUFFER_IN_SIZE>:
10004c44:	96 00 00 00                                         ....

10004c48 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10004c48:	2c 01 00 00 49 53 41 20 42 75 73 00                 ,...ISA Bus.

10004c54 <vtable for ISA>:
	...
	10004c5c: R_386_32	ISA::~ISA()
	10004c60: R_386_32	ISA::~ISA()
	10004c64: R_386_32	ISA::open(int, int, void*)
	10004c68: R_386_32	ISA::close(int, int, void*)
	10004c6c: R_386_32	Device::hibernate()
	10004c70: R_386_32	Device::wake()
	10004c74: R_386_32	ISA::detect()
	10004c78: R_386_32	Device::disableLegacy()
	10004c7c: R_386_32	Device::powerSaving(PowerSavingLevel)

10004c80 <TERMINAL_KEYBUFFER_IN_SIZE>:
10004c80:	96 00 00 00                                         ....

10004c84 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10004c84:	2c 01 00 00                                         ,...

10004c88 <PHYS_RAM_TABLE_SIZE>:
10004c88:	13 05 00 00                                         ....

10004c8c <PHYS_HIGHEST_UNUSED_ADDRESS>:
10004c8c:	24 05 00 00                                         $...

10004c90 <PHYS_RAM_TABLE>:
10004c90:	00 06 00 00                                         ....

10004c94 <PHYS_DMA_MEMORY_1>:
10004c94:	00 00 01 00                                         ....

10004c98 <PHYS_PHYS_PAGE_BITMAP>:
10004c98:	00 00 02 00                                         ....

10004c9c <PHYS_VIRT_PAGE_BITMAP>:
10004c9c:	00 00 04 00                                         ....

10004ca0 <PHYS_DMA_MEMORY_2>:
10004ca0:	00 00 06 00                                         ....

10004ca4 <PHYS_ALLOCED_VIRT_PAGES>:
10004ca4:	00 00 10 00                                         ....

10004ca8 <PHYS_KRNL_PAGE_DIRECTORY>:
10004ca8:	00 10 00 00                                         ....

10004cac <VIRT_KERNEL_BASE>:
10004cac:	00 00 00 c0                                         ....

10004cb0 <VIRT_LOW_MEGS>:
10004cb0:	00 00 00 c2                                         ....

10004cb4 <VIRT_CPU_SPECIFIC>:
10004cb4:	00 00 40 c2                                         ..@.

10004cb8 <VIRT_RECURSIVE_SPOT_1>:
10004cb8:	00 00 80 c2                                         ....

10004cbc <VIRT_RECURSIVE_SPOT_2>:
10004cbc:	00 00 c0 c2                                         ....

10004cc0 <VIRT_DMA_MEMORY_1>:
10004cc0:	00 00 01 c2                                         ....

10004cc4 <SIZE_DMA_MEMORY_1>:
10004cc4:	00 00 01 00                                         ....

10004cc8 <VIRT_DMA_MEMORY_2>:
10004cc8:	00 00 06 c2                                         ....

10004ccc <SIZE_DMA_MEMORY_2>:
10004ccc:	00 00 02 00                                         ....

10004cd0 <VIRT_KRNL_PAGE_DIRECTORY>:
10004cd0:	00 10 00 c2                                         ....

10004cd4 <VIRT_PHYS_PAGE_BITMAP>:
10004cd4:	00 00 02 c2                                         ....

10004cd8 <SIZE_PHYS_PAGE_BITMAP>:
10004cd8:	00 00 02 00                                         ....

10004cdc <VIRT_VIRT_PAGE_BITMAP>:
10004cdc:	00 00 04 c2                                         ....

10004ce0 <SIZE_VIRT_PAGE_BITMAP>:
10004ce0:	00 80 00 00                                         ....

10004ce4 <VIRT_RAM_TABLE>:
10004ce4:	00 06 00 c2                                         ....

10004ce8 <VIRT_RAM_TABLE_SIZE>:
10004ce8:	13 05 00 c2                                         ....

10004cec <VIRT_HIGHEST_UNUSED_ADDRESS>:
10004cec:	24 05 00 c2                                         $...

10004cf0 <SIZE_APP_STACK_USER>:
10004cf0:	00 00 18 00                                         ....

10004cf4 <SIZE_APP_STACK_KRNL>:
10004cf4:	00 00 08 00                                         ....

10004cf8 <SIZE_APP_STACK_TOTAL>:
10004cf8:	00 00 20 00                                         .. .

10004cfc <VIRT_APP_DATA>:
10004cfc:	00 00 00 10                                         ....

10004d00 <VIRT_APP_STACK_USER_TOP>:
10004d00:	00 00 00 02                                         ....

10004d04 <VIRT_APP_STACK_KRNL_TOP>:
10004d04:	00 00 e8 01                                         ....

10004d08 <VIRT_HEAP_MIN>:
10004d08:	00 00 00 c8                                         ....

10004d0c <VIRT_HEAP_MAX>:
10004d0c:	ff ff ff ef                                         ....

10004d10 <VIRT_SBRK_MIN>:
10004d10:	00 00 00 f0                                         ....

10004d14 <VIRT_SBRK_MAX>:
10004d14:	00 00 c0 ff                                         ....

10004d18 <VIRT_ALLOCED_VIRT_PAGES>:
10004d18:	00 00 10 c2                                         ....

10004d1c <VIRT_ACPI_DRIVER>:
10004d1c:	00 40 48 c2 54 75 72 6e 69 6e 67 20 6f 66 66 20     .@H.Turning off 
10004d2c:	74 68 65 20 66 6c 6f 70 70 79 20 6d 6f 74 6f 72     the floppy motor
10004d3c:	2e 2e 2e 0a 00 46 6c 6f 70 70 79 20 44 69 73 6b     .....Floppy Disk
10004d4c:	20 43 6f 6e 74 72 6f 6c 6c 65 72 00 50 52 45 56      Controller.PREV
10004d5c:	49 4f 55 53 20 43 4f 4d 4d 41 4e 44 20 46 41 49     IOUS COMMAND FAI
10004d6c:	4c 45 44 2c 20 43 41 55 47 48 54 20 42 59 20 77     LED, CAUGHT BY w
10004d7c:	72 69 74 65 43 6f 6d 6d 61 6e 64 00 44 49 44 20     riteCommand.DID 
10004d8c:	4e 4f 54 20 43 48 45 43 4b 20 46 4f 52 20 46 41     NOT CHECK FOR FA
10004d9c:	49 4c 55 52 45 20 42 45 46 4f 52 45 20 77 72 69     ILURE BEFORE wri
10004dac:	74 65 43 6f 6d 6d 61 6e 64 00 46 6c 6f 70 70 79     teCommand.Floppy
10004dbc:	3a 3a 64 72 69 76 65 44 65 74 65 63 74 69 6f 6e     ::driveDetection
10004dcc:	28 29 0a 00 44 72 69 76 65 20 74 79 70 65 20 30     ()..Drive type 0
10004ddc:	3a 20 30 78 25 58 0a 00 44 72 69 76 65 20 74 79     : 0x%X..Drive ty
10004dec:	70 65 20 31 3a 20 30 78 25 58 0a 00 76 6f 69 64     pe 1: 0x%X..void
10004dfc:	20 46 6c 6f 70 70 79 3a 3a 72 65 73 65 74 28 29      Floppy::reset()
10004e0c:	0a 00 53 50 45 43 49 46 59 20 42 41 44 20 44 41     ..SPECIFY BAD DA
10004e1c:	54 41 52 41 54 45 00 00 20 a1 07 00 e0 93 04 00     TARATE.. .......
10004e2c:	90 d0 03 00 40 42 0f 00 73 65 6c 65 63 74 20 28     ....@B..select (
10004e3c:	41 29 2e 20 25 64 0a 00 73 65 6c 65 63 74 20 28     A). %d..select (
10004e4c:	42 29 2e 0a 00 73 65 6c 65 63 74 20 28 43 29 2e     B)...select (C).
10004e5c:	0a 00 73 65 6c 65 63 74 20 28 44 29 2e 0a 00 00     ..select (D)....
10004e6c:	55 4e 53 55 50 50 4f 52 54 45 44 20 46 4c 4f 50     UNSUPPORTED FLOP
10004e7c:	50 59 20 46 4f 52 4d 41 54 20 28 44 41 54 41 52     PY FORMAT (DATAR
10004e8c:	41 54 45 20 4e 4f 54 20 4b 4e 4f 57 4e 29 00 73     ATE NOT KNOWN).s
10004e9c:	65 6c 65 63 74 20 28 45 29 2e 0a 00 73 70 65 63     elect (E)...spec
10004eac:	69 66 69 79 20 72 65 73 65 74 2e 0a 00 73 65 6c     ifiy reset...sel
10004ebc:	65 63 74 20 28 46 29 2e 0a 00 73 65 6c 65 63 74     ect (F)...select
10004ecc:	20 28 46 32 29 2e 0a 00 63 61 6c 69 62 72 61 74      (F2)...calibrat
10004edc:	65 20 72 65 73 65 74 2e 0a 00 73 65 6c 65 63 74     e reset...select
10004eec:	20 28 47 29 2e 0a 00 73 65 6c 65 63 74 20 28 48      (G)...select (H
10004efc:	29 2e 0a 00 73 65 6c 65 63 74 20 28 49 29 2e 0a     )...select (I)..
10004f0c:	00 46 6c 6f 70 70 79 3a 3a 6d 6f 74 6f 72 0a 00     .Floppy::motor..
10004f1c:	6e 75 6d 20 3d 20 25 64 2c 20 73 74 61 74 65 20     num = %d, state 
10004f2c:	3d 20 25 64 0a 00 73 74 61 74 65 2e 0a 00 73 74     = %d..state...st
10004f3c:	61 72 74 69 6e 67 20 74 68 65 20 6d 6f 74 6f 72     arting the motor
10004f4c:	2e 0a 00 64 6f 72 20 31 20 3d 20 30 78 25 58 0a     ...dor 1 = 0x%X.
10004f5c:	00 64 6f 72 20 32 20 3d 20 30 78 25 58 0a 00 6d     .dor 2 = 0x%X..m
10004f6c:	6f 74 6f 72 20 61 67 61 69 6e 2e 0a 00 6d 6f 74     otor again...mot
10004f7c:	6f 72 20 61 67 61 69 6e 20 32 2e 0a 00 6d 6f 74     or again 2...mot
10004f8c:	6f 72 20 61 67 61 69 6e 20 33 2e 0a 00 6d 6f 74     or again 3...mot
10004f9c:	6f 72 20 61 67 61 69 6e 20 34 2e 0a 00 6d 6f 74     or again 4...mot
10004fac:	6f 72 20 61 67 61 69 6e 20 35 2e 0a 00 6d 6f 74     or again 5...mot
10004fbc:	6f 72 20 61 67 61 69 6e 20 36 2e 0a 00 46 6c 6f     or again 6...Flo
10004fcc:	70 70 79 3a 3a 6d 6f 74 6f 72 20 64 6f 6e 65 2e     ppy::motor done.
10004fdc:	0a 00 46 6c 6f 70 70 79 20 44 69 73 6b 20 44 72     ..Floppy Disk Dr
10004fec:	69 76 65 00 46 6c 6f 70 70 79 44 72 69 76 65 3a     ive.FloppyDrive:
10004ffc:	3a 6d 6f 74 6f 72 4f 6e 20 6e 75 6d 20 3d 20 25     :motorOn num = %
1000500c:	64 0a 00 6e 75 6d 20 3d 20 25 64 0a 00 73 69 7a     d..num = %d..siz
1000501c:	65 20 69 6e 20 4b 42 73 20 3d 20 25 64 0a 00 46     e in KBs = %d..F
1000502c:	6c 6f 70 70 79 44 72 69 76 65 3a 3a 5f 6f 70 65     loppyDrive::_ope
1000503c:	6e 20 31 0a 00 46 6c 6f 70 70 79 44 72 69 76 65     n 1..FloppyDrive
1000504c:	3a 3a 5f 6f 70 65 6e 20 32 0a 00 46 6c 6f 70 70     ::_open 2..Flopp
1000505c:	79 44 72 69 76 65 3a 3a 5f 6f 70 65 6e 20 33 0a     yDrive::_open 3.
1000506c:	00 46 6c 6f 70 70 79 44 72 69 76 65 3a 3a 73 65     .FloppyDrive::se
1000507c:	6c 65 63 74 0a 00 00 00 73 65 6c 65 63 74 69 6f     lect....selectio
1000508c:	6e 20 6c 6f 63 6b 65 64 20 6f 72 20 66 61 69 6c     n locked or fail
1000509c:	65 64 2e 2e 2e 0a 00 00 73 65 65 6b 3a 20 35 20     ed......seek: 5 
100050ac:	72 65 74 72 69 65 73 2c 20 63 6f 75 6c 64 20 6e     retries, could n
100050bc:	6f 74 20 63 61 6c 69 62 72 61 74 65 2e 0a 00 73     ot calibrate...s
100050cc:	65 65 6b 20 28 73 65 6c 29 20 25 64 2e 0a 00 73     eek (sel) %d...s
100050dc:	65 65 6b 20 28 6f 6e 29 20 25 64 2e 0a 00 73 65     eek (on) %d...se
100050ec:	65 6b 20 28 31 29 2e 0a 00 73 65 65 6b 20 28 61     ek (1)...seek (a
100050fc:	61 29 2e 0a 00 73 65 65 6b 20 28 62 62 29 2e 0a     a)...seek (bb)..
1000510c:	00 73 65 65 6b 20 28 32 29 2e 0a 00 73 65 65 6b     .seek (2)...seek
1000511c:	20 28 33 29 2e 0a 00 73 65 65 6b 20 28 34 29 2e      (3)...seek (4).
1000512c:	0a 00 73 65 65 6b 20 28 6e 69 72 71 29 2e 0a 00     ..seek (nirq)...
1000513c:	73 65 65 6b 20 28 35 29 2e 0a 00 73 65 65 6b 20     seek (5)...seek 
1000514c:	28 73 69 64 29 2e 0a 00 73 65 65 6b 20 28 6f 66     (sid)...seek (of
1000515c:	66 29 2e 0a 00 73 65 65 6b 20 28 75 6e 29 2e 0a     f)...seek (un)..
1000516c:	00 00 00 00 63 61 6c 69 62 72 61 74 65 3a 20 35     ....calibrate: 5
1000517c:	20 72 65 74 72 69 65 73 2c 20 63 6f 75 6c 64 20      retries, could 
1000518c:	6e 6f 74 20 63 61 6c 69 62 72 61 74 65 2e 0a 00     not calibrate...
1000519c:	63 61 6c 20 28 6f 6e 29 2c 20 25 64 0a 00 63 61     cal (on), %d..ca
100051ac:	6c 20 28 30 29 0a 00 63 61 6c 20 28 31 29 0a 00     l (0)..cal (1)..
100051bc:	63 61 6c 20 28 32 29 0a 00 63 61 6c 20 28 33 29     cal (2)..cal (3)
100051cc:	0a 00 63 61 6c 20 28 34 29 0a 00 63 61 6c 20 28     ..cal (4)..cal (
100051dc:	35 29 0a 00 20 72 65 74 72 79 3a 20 0a 00 41 62     5).. retry: ..Ab
100051ec:	6f 75 74 20 74 6f 20 73 65 65 6b 2e 0a 00 53 65     out to seek...Se
100051fc:	65 6b 20 64 6f 6e 65 2e 0a 00 4d 6f 74 6f 72 20     ek done...Motor 
1000520c:	6f 6e 2e 0a 00 53 65 6c 65 63 74 65 64 2e 0a 00     on...Selected...
1000521c:	44 4d 41 20 69 6e 69 74 27 64 2e 0a 00 73 6c 65     DMA init'd...sle
1000522c:	65 70 20 64 6f 6e 65 0a 00 61 62 6f 75 74 20 74     ep done..about t
1000523c:	6f 20 77 61 69 74 49 52 51 2e 0a 00 6e 6f 20 49     o waitIRQ...no I
1000524c:	52 51 2e 0a 00 67 6f 74 20 49 52 51 2e 0a 00 66     RQ...got IRQ...f
1000525c:	61 69 6c 75 72 65 20 72 65 61 64 69 6e 67 20 73     ailure reading s
1000526c:	74 61 74 75 73 2e 0a 00 72 65 61 64 20 72 65 73     tatus...read res
1000527c:	75 6c 74 20 62 79 74 65 73 2e 0a 00 6d 6f 74 6f     ult bytes...moto
1000528c:	72 20 6f 66 66 0a 00 75 6e 73 65 6c 65 63 74 2e     r off..unselect.
1000529c:	0a 00 43 61 63 68 65 73 20 68 61 76 65 20 62 65     ..Caches have be
100052ac:	65 6e 20 70 75 72 67 65 64 2e 0a 00 66 6c 6f 70     en purged...flop
100052bc:	70 79 20 72 65 61 64 20 63 6f 75 6e 74 20 6e 6f     py read count no
100052cc:	74 20 31 00 46 6c 6f 70 70 79 44 72 69 76 65 3a     t 1.FloppyDrive:
100052dc:	3a 72 65 61 64 20 63 61 6c 6c 65 64 2e 0a 00 43     :read called...C
100052ec:	20 30 78 25 58 2c 20 48 20 30 78 25 58 2c 20 53      0x%X, H 0x%X, S
100052fc:	20 30 78 25 58 0a 00 72 65 61 64 69 6e 67 20 74      0x%X..reading t
1000530c:	72 61 63 6b 2e 0a 00 90                             rack....

10005314 <vtable for FloppyDrive>:
	...
	1000531c: R_386_32	FloppyDrive::~FloppyDrive()
	10005320: R_386_32	FloppyDrive::~FloppyDrive()
	10005324: R_386_32	FloppyDrive::open(int, int, void*)
	10005328: R_386_32	FloppyDrive::close(int, int, void*)
	1000532c: R_386_32	Device::hibernate()
	10005330: R_386_32	Device::wake()
	10005334: R_386_32	Device::detect()
	10005338: R_386_32	Device::disableLegacy()
	1000533c: R_386_32	Device::powerSaving(PowerSavingLevel)
	10005340: R_386_32	FloppyDrive::eject()
	10005344: R_386_32	FloppyDrive::read(unsigned long long, int, void*)
	10005348: R_386_32	FloppyDrive::write(unsigned long long, int, void*)

1000534c <vtable for Floppy>:
	...
	10005354: R_386_32	Floppy::~Floppy()
	10005358: R_386_32	Floppy::~Floppy()
	1000535c: R_386_32	Floppy::open(int, int, void*)
	10005360: R_386_32	Floppy::close(int, int, void*)
	10005364: R_386_32	Device::hibernate()
	10005368: R_386_32	Device::wake()
	1000536c: R_386_32	Device::detect()
	10005370: R_386_32	Device::disableLegacy()
	10005374: R_386_32	Device::powerSaving(PowerSavingLevel)

10005378 <PHYS_RAM_TABLE_SIZE>:
10005378:	13 05 00 00                                         ....

1000537c <PHYS_HIGHEST_UNUSED_ADDRESS>:
1000537c:	24 05 00 00                                         $...

10005380 <PHYS_RAM_TABLE>:
10005380:	00 06 00 00                                         ....

10005384 <PHYS_DMA_MEMORY_1>:
10005384:	00 00 01 00                                         ....

10005388 <PHYS_PHYS_PAGE_BITMAP>:
10005388:	00 00 02 00                                         ....

1000538c <PHYS_VIRT_PAGE_BITMAP>:
1000538c:	00 00 04 00                                         ....

10005390 <PHYS_DMA_MEMORY_2>:
10005390:	00 00 06 00                                         ....

10005394 <PHYS_ALLOCED_VIRT_PAGES>:
10005394:	00 00 10 00                                         ....

10005398 <PHYS_KRNL_PAGE_DIRECTORY>:
10005398:	00 10 00 00                                         ....

1000539c <VIRT_KERNEL_BASE>:
1000539c:	00 00 00 c0                                         ....

100053a0 <VIRT_LOW_MEGS>:
100053a0:	00 00 00 c2                                         ....

100053a4 <VIRT_CPU_SPECIFIC>:
100053a4:	00 00 40 c2                                         ..@.

100053a8 <VIRT_RECURSIVE_SPOT_1>:
100053a8:	00 00 80 c2                                         ....

100053ac <VIRT_RECURSIVE_SPOT_2>:
100053ac:	00 00 c0 c2                                         ....

100053b0 <VIRT_DMA_MEMORY_1>:
100053b0:	00 00 01 c2                                         ....

100053b4 <SIZE_DMA_MEMORY_1>:
100053b4:	00 00 01 00                                         ....

100053b8 <VIRT_DMA_MEMORY_2>:
100053b8:	00 00 06 c2                                         ....

100053bc <SIZE_DMA_MEMORY_2>:
100053bc:	00 00 02 00                                         ....

100053c0 <VIRT_KRNL_PAGE_DIRECTORY>:
100053c0:	00 10 00 c2                                         ....

100053c4 <VIRT_PHYS_PAGE_BITMAP>:
100053c4:	00 00 02 c2                                         ....

100053c8 <SIZE_PHYS_PAGE_BITMAP>:
100053c8:	00 00 02 00                                         ....

100053cc <VIRT_VIRT_PAGE_BITMAP>:
100053cc:	00 00 04 c2                                         ....

100053d0 <SIZE_VIRT_PAGE_BITMAP>:
100053d0:	00 80 00 00                                         ....

100053d4 <VIRT_RAM_TABLE>:
100053d4:	00 06 00 c2                                         ....

100053d8 <VIRT_RAM_TABLE_SIZE>:
100053d8:	13 05 00 c2                                         ....

100053dc <VIRT_HIGHEST_UNUSED_ADDRESS>:
100053dc:	24 05 00 c2                                         $...

100053e0 <SIZE_APP_STACK_USER>:
100053e0:	00 00 18 00                                         ....

100053e4 <SIZE_APP_STACK_KRNL>:
100053e4:	00 00 08 00                                         ....

100053e8 <SIZE_APP_STACK_TOTAL>:
100053e8:	00 00 20 00                                         .. .

100053ec <VIRT_APP_DATA>:
100053ec:	00 00 00 10                                         ....

100053f0 <VIRT_APP_STACK_USER_TOP>:
100053f0:	00 00 00 02                                         ....

100053f4 <VIRT_APP_STACK_KRNL_TOP>:
100053f4:	00 00 e8 01                                         ....

100053f8 <VIRT_HEAP_MIN>:
100053f8:	00 00 00 c8                                         ....

100053fc <VIRT_HEAP_MAX>:
100053fc:	ff ff ff ef                                         ....

10005400 <VIRT_SBRK_MIN>:
10005400:	00 00 00 f0                                         ....

10005404 <VIRT_SBRK_MAX>:
10005404:	00 00 c0 ff                                         ....

10005408 <VIRT_ALLOCED_VIRT_PAGES>:
10005408:	00 00 10 c2                                         ....

1000540c <VIRT_ACPI_DRIVER>:
1000540c:	00 40 48 c2                                         .@H.

10005410 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005410:	96 00 00 00                                         ....

10005414 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005414:	2c 01 00 00 47 61 6d 65 70 6f 72 74 00 66 90 90     ,...Gameport.f..

10005424 <vtable for Gameport>:
	...
	1000542c: R_386_32	Gameport::~Gameport()
	10005430: R_386_32	Gameport::~Gameport()
	10005434: R_386_32	Gameport::open(int, int, void*)
	10005438: R_386_32	Gameport::close(int, int, void*)
	1000543c: R_386_32	Device::hibernate()
	10005440: R_386_32	Device::wake()
	10005444: R_386_32	Gameport::detect()
	10005448: R_386_32	Device::disableLegacy()
	1000544c: R_386_32	Device::powerSaving(PowerSavingLevel)
	10005450: R_386_32	Gameport::read(int)
10005454:	a8 fe ff ff 00 00 00 00 00 00 00 00                 ............	1000545c: R_386_32	non-virtual thunk to Gameport::read(int)

10005460 <vtable for JoystickHost>:
	...
	10005468: R_386_32	__cxa_pure_virtual

1000546c <PHYS_RAM_TABLE_SIZE>:
1000546c:	13 05 00 00                                         ....

10005470 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005470:	24 05 00 00                                         $...

10005474 <PHYS_RAM_TABLE>:
10005474:	00 06 00 00                                         ....

10005478 <PHYS_DMA_MEMORY_1>:
10005478:	00 00 01 00                                         ....

1000547c <PHYS_PHYS_PAGE_BITMAP>:
1000547c:	00 00 02 00                                         ....

10005480 <PHYS_VIRT_PAGE_BITMAP>:
10005480:	00 00 04 00                                         ....

10005484 <PHYS_DMA_MEMORY_2>:
10005484:	00 00 06 00                                         ....

10005488 <PHYS_ALLOCED_VIRT_PAGES>:
10005488:	00 00 10 00                                         ....

1000548c <PHYS_KRNL_PAGE_DIRECTORY>:
1000548c:	00 10 00 00                                         ....

10005490 <VIRT_KERNEL_BASE>:
10005490:	00 00 00 c0                                         ....

10005494 <VIRT_LOW_MEGS>:
10005494:	00 00 00 c2                                         ....

10005498 <VIRT_CPU_SPECIFIC>:
10005498:	00 00 40 c2                                         ..@.

1000549c <VIRT_RECURSIVE_SPOT_1>:
1000549c:	00 00 80 c2                                         ....

100054a0 <VIRT_RECURSIVE_SPOT_2>:
100054a0:	00 00 c0 c2                                         ....

100054a4 <VIRT_DMA_MEMORY_1>:
100054a4:	00 00 01 c2                                         ....

100054a8 <SIZE_DMA_MEMORY_1>:
100054a8:	00 00 01 00                                         ....

100054ac <VIRT_DMA_MEMORY_2>:
100054ac:	00 00 06 c2                                         ....

100054b0 <SIZE_DMA_MEMORY_2>:
100054b0:	00 00 02 00                                         ....

100054b4 <VIRT_KRNL_PAGE_DIRECTORY>:
100054b4:	00 10 00 c2                                         ....

100054b8 <VIRT_PHYS_PAGE_BITMAP>:
100054b8:	00 00 02 c2                                         ....

100054bc <SIZE_PHYS_PAGE_BITMAP>:
100054bc:	00 00 02 00                                         ....

100054c0 <VIRT_VIRT_PAGE_BITMAP>:
100054c0:	00 00 04 c2                                         ....

100054c4 <SIZE_VIRT_PAGE_BITMAP>:
100054c4:	00 80 00 00                                         ....

100054c8 <VIRT_RAM_TABLE>:
100054c8:	00 06 00 c2                                         ....

100054cc <VIRT_RAM_TABLE_SIZE>:
100054cc:	13 05 00 c2                                         ....

100054d0 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100054d0:	24 05 00 c2                                         $...

100054d4 <SIZE_APP_STACK_USER>:
100054d4:	00 00 18 00                                         ....

100054d8 <SIZE_APP_STACK_KRNL>:
100054d8:	00 00 08 00                                         ....

100054dc <SIZE_APP_STACK_TOTAL>:
100054dc:	00 00 20 00                                         .. .

100054e0 <VIRT_APP_DATA>:
100054e0:	00 00 00 10                                         ....

100054e4 <VIRT_APP_STACK_USER_TOP>:
100054e4:	00 00 00 02                                         ....

100054e8 <VIRT_APP_STACK_KRNL_TOP>:
100054e8:	00 00 e8 01                                         ....

100054ec <VIRT_HEAP_MIN>:
100054ec:	00 00 00 c8                                         ....

100054f0 <VIRT_HEAP_MAX>:
100054f0:	ff ff ff ef                                         ....

100054f4 <VIRT_SBRK_MIN>:
100054f4:	00 00 00 f0                                         ....

100054f8 <VIRT_SBRK_MAX>:
100054f8:	00 00 c0 ff                                         ....

100054fc <VIRT_ALLOCED_VIRT_PAGES>:
100054fc:	00 00 10 c2                                         ....

10005500 <VIRT_ACPI_DRIVER>:
10005500:	00 40 48 c2                                         .@H.

10005504 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005504:	96 00 00 00                                         ....

10005508 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005508:	2c 01 00 00                                         ,...

1000550c <CSWTCH.8>:
1000550c:	00 02 04 06 c0 c4 c8 cc                             ........

10005514 <CSWTCH.9>:
10005514:	01 03 05 07 c2 c6 ca ce                             ........

1000551c <CSWTCH.10>:
1000551c:	87 83 81 82 8f 8b 89 8a 4e 6f 74 20 69 6e 20 72     ........Not in r
1000552c:	61 6e 67 65 2e 0a 00 90                             ange....

10005534 <vtable for DMA>:
	...
	1000553c: R_386_32	DMA::~DMA()
	10005540: R_386_32	DMA::~DMA()
	10005544: R_386_32	DMA::open(int, int, void*)
	10005548: R_386_32	DMA::close(int, int, void*)
	1000554c: R_386_32	Device::hibernate()
	10005550: R_386_32	Device::wake()
	10005554: R_386_32	Device::detect()
	10005558: R_386_32	Device::disableLegacy()
	1000555c: R_386_32	Device::powerSaving(PowerSavingLevel)

10005560 <PHYS_RAM_TABLE_SIZE>:
10005560:	13 05 00 00                                         ....

10005564 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005564:	24 05 00 00                                         $...

10005568 <PHYS_RAM_TABLE>:
10005568:	00 06 00 00                                         ....

1000556c <PHYS_DMA_MEMORY_1>:
1000556c:	00 00 01 00                                         ....

10005570 <PHYS_PHYS_PAGE_BITMAP>:
10005570:	00 00 02 00                                         ....

10005574 <PHYS_VIRT_PAGE_BITMAP>:
10005574:	00 00 04 00                                         ....

10005578 <PHYS_DMA_MEMORY_2>:
10005578:	00 00 06 00                                         ....

1000557c <PHYS_ALLOCED_VIRT_PAGES>:
1000557c:	00 00 10 00                                         ....

10005580 <PHYS_KRNL_PAGE_DIRECTORY>:
10005580:	00 10 00 00                                         ....

10005584 <VIRT_KERNEL_BASE>:
10005584:	00 00 00 c0                                         ....

10005588 <VIRT_LOW_MEGS>:
10005588:	00 00 00 c2                                         ....

1000558c <VIRT_CPU_SPECIFIC>:
1000558c:	00 00 40 c2                                         ..@.

10005590 <VIRT_RECURSIVE_SPOT_1>:
10005590:	00 00 80 c2                                         ....

10005594 <VIRT_RECURSIVE_SPOT_2>:
10005594:	00 00 c0 c2                                         ....

10005598 <VIRT_DMA_MEMORY_1>:
10005598:	00 00 01 c2                                         ....

1000559c <SIZE_DMA_MEMORY_1>:
1000559c:	00 00 01 00                                         ....

100055a0 <VIRT_DMA_MEMORY_2>:
100055a0:	00 00 06 c2                                         ....

100055a4 <SIZE_DMA_MEMORY_2>:
100055a4:	00 00 02 00                                         ....

100055a8 <VIRT_KRNL_PAGE_DIRECTORY>:
100055a8:	00 10 00 c2                                         ....

100055ac <VIRT_PHYS_PAGE_BITMAP>:
100055ac:	00 00 02 c2                                         ....

100055b0 <SIZE_PHYS_PAGE_BITMAP>:
100055b0:	00 00 02 00                                         ....

100055b4 <VIRT_VIRT_PAGE_BITMAP>:
100055b4:	00 00 04 c2                                         ....

100055b8 <SIZE_VIRT_PAGE_BITMAP>:
100055b8:	00 80 00 00                                         ....

100055bc <VIRT_RAM_TABLE>:
100055bc:	00 06 00 c2                                         ....

100055c0 <VIRT_RAM_TABLE_SIZE>:
100055c0:	13 05 00 c2                                         ....

100055c4 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100055c4:	24 05 00 c2                                         $...

100055c8 <SIZE_APP_STACK_USER>:
100055c8:	00 00 18 00                                         ....

100055cc <SIZE_APP_STACK_KRNL>:
100055cc:	00 00 08 00                                         ....

100055d0 <SIZE_APP_STACK_TOTAL>:
100055d0:	00 00 20 00                                         .. .

100055d4 <VIRT_APP_DATA>:
100055d4:	00 00 00 10                                         ....

100055d8 <VIRT_APP_STACK_USER_TOP>:
100055d8:	00 00 00 02                                         ....

100055dc <VIRT_APP_STACK_KRNL_TOP>:
100055dc:	00 00 e8 01                                         ....

100055e0 <VIRT_HEAP_MIN>:
100055e0:	00 00 00 c8                                         ....

100055e4 <VIRT_HEAP_MAX>:
100055e4:	ff ff ff ef                                         ....

100055e8 <VIRT_SBRK_MIN>:
100055e8:	00 00 00 f0                                         ....

100055ec <VIRT_SBRK_MAX>:
100055ec:	00 00 c0 ff                                         ....

100055f0 <VIRT_ALLOCED_VIRT_PAGES>:
100055f0:	00 00 10 c2                                         ....

100055f4 <VIRT_ACPI_DRIVER>:
100055f4:	00 40 48 c2                                         .@H.

100055f8 <TERMINAL_KEYBUFFER_IN_SIZE>:
100055f8:	96 00 00 00                                         ....

100055fc <TERMINAL_KEYBUFFER_OUT_SIZE>:
100055fc:	2c 01 00 00                                         ,...

10005600 <vtable for PS2>:
	...
	10005608: R_386_32	PS2::~PS2()
	1000560c: R_386_32	PS2::~PS2()
	10005610: R_386_32	PS2::open(int, int, void*)
	10005614: R_386_32	PS2::close(int, int, void*)
	10005618: R_386_32	Device::hibernate()
	1000561c: R_386_32	Device::wake()
	10005620: R_386_32	PS2::detect()
	10005624: R_386_32	Device::disableLegacy()
	10005628: R_386_32	Device::powerSaving(PowerSavingLevel)
1000562c:	66 90 66 90 66 90 66 90 66 90 66 90 66 90 66 90     f.f.f.f.f.f.f.f.
1000563c:	66 90 66 90                                         f.f.

10005640 <PHYS_RAM_TABLE_SIZE>:
10005640:	13 05 00 00                                         ....

10005644 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005644:	24 05 00 00                                         $...

10005648 <PHYS_RAM_TABLE>:
10005648:	00 06 00 00                                         ....

1000564c <PHYS_DMA_MEMORY_1>:
1000564c:	00 00 01 00                                         ....

10005650 <PHYS_PHYS_PAGE_BITMAP>:
10005650:	00 00 02 00                                         ....

10005654 <PHYS_VIRT_PAGE_BITMAP>:
10005654:	00 00 04 00                                         ....

10005658 <PHYS_DMA_MEMORY_2>:
10005658:	00 00 06 00                                         ....

1000565c <PHYS_ALLOCED_VIRT_PAGES>:
1000565c:	00 00 10 00                                         ....

10005660 <PHYS_KRNL_PAGE_DIRECTORY>:
10005660:	00 10 00 00                                         ....

10005664 <VIRT_KERNEL_BASE>:
10005664:	00 00 00 c0                                         ....

10005668 <VIRT_LOW_MEGS>:
10005668:	00 00 00 c2                                         ....

1000566c <VIRT_CPU_SPECIFIC>:
1000566c:	00 00 40 c2                                         ..@.

10005670 <VIRT_RECURSIVE_SPOT_1>:
10005670:	00 00 80 c2                                         ....

10005674 <VIRT_RECURSIVE_SPOT_2>:
10005674:	00 00 c0 c2                                         ....

10005678 <VIRT_DMA_MEMORY_1>:
10005678:	00 00 01 c2                                         ....

1000567c <SIZE_DMA_MEMORY_1>:
1000567c:	00 00 01 00                                         ....

10005680 <VIRT_DMA_MEMORY_2>:
10005680:	00 00 06 c2                                         ....

10005684 <SIZE_DMA_MEMORY_2>:
10005684:	00 00 02 00                                         ....

10005688 <VIRT_KRNL_PAGE_DIRECTORY>:
10005688:	00 10 00 c2                                         ....

1000568c <VIRT_PHYS_PAGE_BITMAP>:
1000568c:	00 00 02 c2                                         ....

10005690 <SIZE_PHYS_PAGE_BITMAP>:
10005690:	00 00 02 00                                         ....

10005694 <VIRT_VIRT_PAGE_BITMAP>:
10005694:	00 00 04 c2                                         ....

10005698 <SIZE_VIRT_PAGE_BITMAP>:
10005698:	00 80 00 00                                         ....

1000569c <VIRT_RAM_TABLE>:
1000569c:	00 06 00 c2                                         ....

100056a0 <VIRT_RAM_TABLE_SIZE>:
100056a0:	13 05 00 c2                                         ....

100056a4 <VIRT_HIGHEST_UNUSED_ADDRESS>:
100056a4:	24 05 00 c2                                         $...

100056a8 <SIZE_APP_STACK_USER>:
100056a8:	00 00 18 00                                         ....

100056ac <SIZE_APP_STACK_KRNL>:
100056ac:	00 00 08 00                                         ....

100056b0 <SIZE_APP_STACK_TOTAL>:
100056b0:	00 00 20 00                                         .. .

100056b4 <VIRT_APP_DATA>:
100056b4:	00 00 00 10                                         ....

100056b8 <VIRT_APP_STACK_USER_TOP>:
100056b8:	00 00 00 02                                         ....

100056bc <VIRT_APP_STACK_KRNL_TOP>:
100056bc:	00 00 e8 01                                         ....

100056c0 <VIRT_HEAP_MIN>:
100056c0:	00 00 00 c8                                         ....

100056c4 <VIRT_HEAP_MAX>:
100056c4:	ff ff ff ef                                         ....

100056c8 <VIRT_SBRK_MIN>:
100056c8:	00 00 00 f0                                         ....

100056cc <VIRT_SBRK_MAX>:
100056cc:	00 00 c0 ff                                         ....

100056d0 <VIRT_ALLOCED_VIRT_PAGES>:
100056d0:	00 00 10 c2                                         ....

100056d4 <VIRT_ACPI_DRIVER>:
100056d4:	00 40 48 c2                                         .@H.

100056d8 <TERMINAL_KEYBUFFER_IN_SIZE>:
100056d8:	96 00 00 00                                         ....

100056dc <TERMINAL_KEYBUFFER_OUT_SIZE>:
100056dc:	2c 01 00 00                                         ,...

100056e0 <PS2Keyboard::internalMapperLower>:
100056e0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
100056f0:	20 20 20 20 20 71 31 20 20 20 7a 73 61 77 32 20          q1   zsaw2 
10005700:	20 63 78 64 65 34 33 20 20 20 76 66 74 72 35 20      cxde43   vftr5 
10005710:	20 6e 62 68 67 79 36 20 20 20 6d 6a 75 37 38 20      nbhgy6   mju78 
10005720:	20 2c 6b 69 6f 30 39 20 20 2e 2f 6c 3b 70 2d 20      ,kio09  ./l;p- 
10005730:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10005740:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10005750:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10005760:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

100057e0 <PS2Keyboard::internalMapperUpper>:
100057e0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
100057f0:	20 20 20 20 20 51 21 20 20 20 5a 53 41 57 40 20          Q!   ZSAW@ 
10005800:	20 43 58 44 45 24 23 20 20 20 56 46 54 52 25 20      CXDE$#   VFTR% 
10005810:	20 4e 42 48 47 59 5e 20 20 20 4d 4a 55 26 2a 20      NBHGY^   MJU&* 
10005820:	20 3c 4b 49 4f 29 28 20 20 3e 3f 4c 3a 50 5f 20      <KIO)(  >?L:P_ 
10005830:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10005840:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10005850:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10005860:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

100058e0 <PS2Keyboard::internalMapCapLower>:
100058e0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 60 20                   ` 
100058f0:	20 20 20 20 20 51 31 20 20 20 5a 53 41 57 32 20          Q1   ZSAW2 
10005900:	20 43 58 44 45 34 33 20 20 20 56 46 54 52 35 20      CXDE43   VFTR5 
10005910:	20 4e 42 48 47 59 36 20 20 20 4d 4a 55 37 38 20      NBHGY6   MJU78 
10005920:	20 2c 4b 49 4f 30 39 20 20 2e 2f 4c 3b 50 2d 20      ,KIO09  ./L;P- 
10005930:	20 20 27 20 5b 3d 20 20 20 20 20 5d 20 5c 20 20       ' [=     ] \  
10005940:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10005950:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10005960:	20 20 20 20 20 20 20 20 20 20 20 2d 00 00 00 00                -....
	...

100059e0 <PS2Keyboard::internalMapCapUpper>:
100059e0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 7e 20                   ~ 
100059f0:	20 20 20 20 20 51 21 20 20 20 7a 73 61 77 40 20          Q!   zsaw@ 
10005a00:	20 63 78 64 65 24 23 20 20 20 76 66 74 72 25 20      cxde$#   vftr% 
10005a10:	20 6e 62 68 67 79 5e 20 20 20 6d 6a 75 26 2a 20      nbhgy^   mju&* 
10005a20:	20 3c 6b 69 6f 29 28 20 20 3e 3f 6c 3a 70 5f 20      <kio)(  >?l:p_ 
10005a30:	20 20 22 20 7b 2b 20 20 20 20 20 7d 20 7c 20 20       " {+     } |  
10005a40:	20 20 20 20 20 20 20 20 20 31 20 34 37 20 20 20              1 47   
10005a50:	30 2e 32 35 36 38 20 20 20 2b 33 2d 2a 39 20 20     0.2568   +3-*9  
10005a60:	20 20 20 20 20 20 20 20 20 20 20 20 00 00 00 00                 ....
	...

10005ae0 <PS2Keyboard::internalMapperLowerBad>:
10005ae0:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10005af0:	71 77 65 72 74 79 75 69 6f 70 5b 5d 20 20 61 73     qwertyuiop[]  as
10005b00:	64 66 67 68 6a 6b 6c 3b 27 60 20 5c 7a 78 63 76     dfghjkl;'` \zxcv
10005b10:	62 6e 6d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     bnm,./ *        
10005b20:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10005b30:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10005b40:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005b50:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005b60:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10005b70:	51 57 45 52 54 59 55 49 4f 50 7b 7d 20 20 41 53     QWERTYUIOP{}  AS
10005b80:	44 46 47 48 4a 4b 4c 3a 22 7e 20 7c 5a 58 43 56     DFGHJKL:"~ |ZXCV
10005b90:	42 4e 4d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     BNM<>? *        
10005ba0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10005bb0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10005bc0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005bd0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005be0:	20 20 31 32 33 34 35 36 37 38 39 30 2d 3d 20 20       1234567890-=  
10005bf0:	51 57 45 52 54 59 55 49 4f 50 5b 5d 20 20 41 53     QWERTYUIOP[]  AS
10005c00:	44 46 47 48 4a 4b 4c 3b 27 60 20 5c 5a 58 43 56     DFGHJKL;'` \ZXCV
10005c10:	42 4e 4d 2c 2e 2f 20 2a 20 20 20 20 20 20 20 20     BNM,./ *        
10005c20:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10005c30:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10005c40:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005c50:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005c60:	20 20 21 40 23 24 25 5e 26 2a 28 29 5f 2b 20 20       !@#$%^&*()_+  
10005c70:	71 77 65 72 74 79 75 69 6f 70 7b 7d 20 20 61 73     qwertyuiop{}  as
10005c80:	64 66 67 68 6a 6b 6c 3a 22 7e 20 7c 7a 78 63 76     dfghjkl:"~ |zxcv
10005c90:	62 6e 6d 3c 3e 3f 20 2a 20 20 20 20 20 20 20 20     bnm<>? *        
10005ca0:	20 20 20 20 20 20 20 37 38 39 2d 34 35 36 2b 31            789-456+1
10005cb0:	32 33 30 2e 20 20 20 20 20 20 20 20 20 20 20 20     230.            
10005cc0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005cd0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
10005ce0:	00 66 90 90                                         .f..

10005ce4 <vtable for PS2Keyboard>:
	...
	10005cec: R_386_32	PS2Keyboard::~PS2Keyboard()
	10005cf0: R_386_32	PS2Keyboard::~PS2Keyboard()
	10005cf4: R_386_32	PS2Keyboard::open(int, int, void*)
	10005cf8: R_386_32	PS2Keyboard::close(int, int, void*)
	10005cfc: R_386_32	Device::hibernate()
	10005d00: R_386_32	Device::wake()
	10005d04: R_386_32	Device::detect()
	10005d08: R_386_32	Device::disableLegacy()
	10005d0c: R_386_32	Device::powerSaving(PowerSavingLevel)
	10005d10: R_386_32	PS2Keyboard::setRepeatRate(int)
	10005d14: R_386_32	PS2Keyboard::setRepeatDelay(int)

10005d18 <PHYS_RAM_TABLE_SIZE>:
10005d18:	13 05 00 00                                         ....

10005d1c <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005d1c:	24 05 00 00                                         $...

10005d20 <PHYS_RAM_TABLE>:
10005d20:	00 06 00 00                                         ....

10005d24 <PHYS_DMA_MEMORY_1>:
10005d24:	00 00 01 00                                         ....

10005d28 <PHYS_PHYS_PAGE_BITMAP>:
10005d28:	00 00 02 00                                         ....

10005d2c <PHYS_VIRT_PAGE_BITMAP>:
10005d2c:	00 00 04 00                                         ....

10005d30 <PHYS_DMA_MEMORY_2>:
10005d30:	00 00 06 00                                         ....

10005d34 <PHYS_ALLOCED_VIRT_PAGES>:
10005d34:	00 00 10 00                                         ....

10005d38 <PHYS_KRNL_PAGE_DIRECTORY>:
10005d38:	00 10 00 00                                         ....

10005d3c <VIRT_KERNEL_BASE>:
10005d3c:	00 00 00 c0                                         ....

10005d40 <VIRT_LOW_MEGS>:
10005d40:	00 00 00 c2                                         ....

10005d44 <VIRT_CPU_SPECIFIC>:
10005d44:	00 00 40 c2                                         ..@.

10005d48 <VIRT_RECURSIVE_SPOT_1>:
10005d48:	00 00 80 c2                                         ....

10005d4c <VIRT_RECURSIVE_SPOT_2>:
10005d4c:	00 00 c0 c2                                         ....

10005d50 <VIRT_DMA_MEMORY_1>:
10005d50:	00 00 01 c2                                         ....

10005d54 <SIZE_DMA_MEMORY_1>:
10005d54:	00 00 01 00                                         ....

10005d58 <VIRT_DMA_MEMORY_2>:
10005d58:	00 00 06 c2                                         ....

10005d5c <SIZE_DMA_MEMORY_2>:
10005d5c:	00 00 02 00                                         ....

10005d60 <VIRT_KRNL_PAGE_DIRECTORY>:
10005d60:	00 10 00 c2                                         ....

10005d64 <VIRT_PHYS_PAGE_BITMAP>:
10005d64:	00 00 02 c2                                         ....

10005d68 <SIZE_PHYS_PAGE_BITMAP>:
10005d68:	00 00 02 00                                         ....

10005d6c <VIRT_VIRT_PAGE_BITMAP>:
10005d6c:	00 00 04 c2                                         ....

10005d70 <SIZE_VIRT_PAGE_BITMAP>:
10005d70:	00 80 00 00                                         ....

10005d74 <VIRT_RAM_TABLE>:
10005d74:	00 06 00 c2                                         ....

10005d78 <VIRT_RAM_TABLE_SIZE>:
10005d78:	13 05 00 c2                                         ....

10005d7c <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005d7c:	24 05 00 c2                                         $...

10005d80 <SIZE_APP_STACK_USER>:
10005d80:	00 00 18 00                                         ....

10005d84 <SIZE_APP_STACK_KRNL>:
10005d84:	00 00 08 00                                         ....

10005d88 <SIZE_APP_STACK_TOTAL>:
10005d88:	00 00 20 00                                         .. .

10005d8c <VIRT_APP_DATA>:
10005d8c:	00 00 00 10                                         ....

10005d90 <VIRT_APP_STACK_USER_TOP>:
10005d90:	00 00 00 02                                         ....

10005d94 <VIRT_APP_STACK_KRNL_TOP>:
10005d94:	00 00 e8 01                                         ....

10005d98 <VIRT_HEAP_MIN>:
10005d98:	00 00 00 c8                                         ....

10005d9c <VIRT_HEAP_MAX>:
10005d9c:	ff ff ff ef                                         ....

10005da0 <VIRT_SBRK_MIN>:
10005da0:	00 00 00 f0                                         ....

10005da4 <VIRT_SBRK_MAX>:
10005da4:	00 00 c0 ff                                         ....

10005da8 <VIRT_ALLOCED_VIRT_PAGES>:
10005da8:	00 00 10 c2                                         ....

10005dac <VIRT_ACPI_DRIVER>:
10005dac:	00 40 48 c2                                         .@H.

10005db0 <TERMINAL_KEYBUFFER_IN_SIZE>:
10005db0:	96 00 00 00                                         ....

10005db4 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005db4:	2c 01 00 00                                         ,...

10005db8 <vtable for PS2Mouse>:
	...
	10005dc0: R_386_32	PS2Mouse::~PS2Mouse()
	10005dc4: R_386_32	PS2Mouse::~PS2Mouse()
	10005dc8: R_386_32	PS2Mouse::open(int, int, void*)
	10005dcc: R_386_32	PS2Mouse::close(int, int, void*)
	10005dd0: R_386_32	Device::hibernate()
	10005dd4: R_386_32	Device::wake()
	10005dd8: R_386_32	PS2Mouse::detect()
	10005ddc: R_386_32	Device::disableLegacy()
	10005de0: R_386_32	Device::powerSaving(PowerSavingLevel)

10005de4 <PHYS_RAM_TABLE_SIZE>:
10005de4:	13 05 00 00                                         ....

10005de8 <PHYS_HIGHEST_UNUSED_ADDRESS>:
10005de8:	24 05 00 00                                         $...

10005dec <PHYS_RAM_TABLE>:
10005dec:	00 06 00 00                                         ....

10005df0 <PHYS_DMA_MEMORY_1>:
10005df0:	00 00 01 00                                         ....

10005df4 <PHYS_PHYS_PAGE_BITMAP>:
10005df4:	00 00 02 00                                         ....

10005df8 <PHYS_VIRT_PAGE_BITMAP>:
10005df8:	00 00 04 00                                         ....

10005dfc <PHYS_DMA_MEMORY_2>:
10005dfc:	00 00 06 00                                         ....

10005e00 <PHYS_ALLOCED_VIRT_PAGES>:
10005e00:	00 00 10 00                                         ....

10005e04 <PHYS_KRNL_PAGE_DIRECTORY>:
10005e04:	00 10 00 00                                         ....

10005e08 <VIRT_KERNEL_BASE>:
10005e08:	00 00 00 c0                                         ....

10005e0c <VIRT_LOW_MEGS>:
10005e0c:	00 00 00 c2                                         ....

10005e10 <VIRT_CPU_SPECIFIC>:
10005e10:	00 00 40 c2                                         ..@.

10005e14 <VIRT_RECURSIVE_SPOT_1>:
10005e14:	00 00 80 c2                                         ....

10005e18 <VIRT_RECURSIVE_SPOT_2>:
10005e18:	00 00 c0 c2                                         ....

10005e1c <VIRT_DMA_MEMORY_1>:
10005e1c:	00 00 01 c2                                         ....

10005e20 <SIZE_DMA_MEMORY_1>:
10005e20:	00 00 01 00                                         ....

10005e24 <VIRT_DMA_MEMORY_2>:
10005e24:	00 00 06 c2                                         ....

10005e28 <SIZE_DMA_MEMORY_2>:
10005e28:	00 00 02 00                                         ....

10005e2c <VIRT_KRNL_PAGE_DIRECTORY>:
10005e2c:	00 10 00 c2                                         ....

10005e30 <VIRT_PHYS_PAGE_BITMAP>:
10005e30:	00 00 02 c2                                         ....

10005e34 <SIZE_PHYS_PAGE_BITMAP>:
10005e34:	00 00 02 00                                         ....

10005e38 <VIRT_VIRT_PAGE_BITMAP>:
10005e38:	00 00 04 c2                                         ....

10005e3c <SIZE_VIRT_PAGE_BITMAP>:
10005e3c:	00 80 00 00                                         ....

10005e40 <VIRT_RAM_TABLE>:
10005e40:	00 06 00 c2                                         ....

10005e44 <VIRT_RAM_TABLE_SIZE>:
10005e44:	13 05 00 c2                                         ....

10005e48 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10005e48:	24 05 00 c2                                         $...

10005e4c <SIZE_APP_STACK_USER>:
10005e4c:	00 00 18 00                                         ....

10005e50 <SIZE_APP_STACK_KRNL>:
10005e50:	00 00 08 00                                         ....

10005e54 <SIZE_APP_STACK_TOTAL>:
10005e54:	00 00 20 00                                         .. .

10005e58 <VIRT_APP_DATA>:
10005e58:	00 00 00 10                                         ....

10005e5c <VIRT_APP_STACK_USER_TOP>:
10005e5c:	00 00 00 02                                         ....

10005e60 <VIRT_APP_STACK_KRNL_TOP>:
10005e60:	00 00 e8 01                                         ....

10005e64 <VIRT_HEAP_MIN>:
10005e64:	00 00 00 c8                                         ....

10005e68 <VIRT_HEAP_MAX>:
10005e68:	ff ff ff ef                                         ....

10005e6c <VIRT_SBRK_MIN>:
10005e6c:	00 00 00 f0                                         ....

10005e70 <VIRT_SBRK_MAX>:
10005e70:	00 00 c0 ff                                         ....

10005e74 <VIRT_ALLOCED_VIRT_PAGES>:
10005e74:	00 00 10 c2                                         ....

10005e78 <VIRT_ACPI_DRIVER>:
10005e78:	00 40 48 c2                                         .@H.

10005e7c <TERMINAL_KEYBUFFER_IN_SIZE>:
10005e7c:	96 00 00 00                                         ....

10005e80 <TERMINAL_KEYBUFFER_OUT_SIZE>:
10005e80:	2c 01 00 00                                         ,...

10005e84 <vtable for PS2Port>:
	...
	10005e8c: R_386_32	PS2Port::~PS2Port()
	10005e90: R_386_32	PS2Port::~PS2Port()
	10005e94: R_386_32	PS2Port::open(int, int, void*)
	10005e98: R_386_32	PS2Port::close(int, int, void*)
	10005e9c: R_386_32	Device::hibernate()
	10005ea0: R_386_32	Device::wake()
	10005ea4: R_386_32	PS2Port::detect()
	10005ea8: R_386_32	Device::disableLegacy()
	10005eac: R_386_32	Device::powerSaving(PowerSavingLevel)
