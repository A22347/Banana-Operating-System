
packages/system/32/0002/em8087.sys:     file format elf32-i386


Disassembly of section .text:

10000000 <start()>:
10000000:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000002: R_386_32	x87FaultIntercept
	10000006: R_386_32	x87Handler(regs*)
1000000a:	c3                   	ret    

1000000b <fpuFloatToLong(_Float80)>:
1000000b:	55                   	push   ebp
1000000c:	89 e5                	mov    ebp,esp
1000000e:	83 ec 10             	sub    esp,0x10
10000011:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000014:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000017:	e8 fc ff ff ff       	call   10000018 <fpuFloatToLong(_Float80)+0xd>	10000018: R_386_PC32	__fixdfdi
1000001c:	83 c4 10             	add    esp,0x10
1000001f:	c9                   	leave  
10000020:	c3                   	ret    

10000021 <fpuULongToFloat(unsigned long long)>:
10000021:	55                   	push   ebp
10000022:	89 e5                	mov    ebp,esp
10000024:	53                   	push   ebx
10000025:	83 ec 0c             	sub    esp,0xc
10000028:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000002b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000002e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000031:	e8 fc ff ff ff       	call   10000032 <fpuULongToFloat(unsigned long long)+0x11>	10000032: R_386_PC32	__floatundidf
10000036:	83 c4 10             	add    esp,0x10
10000039:	89 03                	mov    DWORD PTR [ebx],eax
1000003b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
1000003e:	89 d8                	mov    eax,ebx
10000040:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000043:	c9                   	leave  
10000044:	c2 04 00             	ret    0x4

10000047 <fpuLongToFloat(long long)>:
10000047:	55                   	push   ebp
10000048:	89 e5                	mov    ebp,esp
1000004a:	53                   	push   ebx
1000004b:	83 ec 0c             	sub    esp,0xc
1000004e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000051:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000054:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000057:	e8 fc ff ff ff       	call   10000058 <fpuLongToFloat(long long)+0x11>	10000058: R_386_PC32	__floatdidf
1000005c:	83 c4 10             	add    esp,0x10
1000005f:	89 03                	mov    DWORD PTR [ebx],eax
10000061:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
10000064:	89 d8                	mov    eax,ebx
10000066:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000069:	c9                   	leave  
1000006a:	c2 04 00             	ret    0x4

1000006d <fpuGet0()>:
1000006d:	55                   	push   ebp
1000006e:	89 e5                	mov    ebp,esp
10000070:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000073:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000079:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10000080:	5d                   	pop    ebp
10000081:	c2 04 00             	ret    0x4

10000084 <fpuGet1()>:
10000084:	55                   	push   ebp
10000085:	89 e5                	mov    ebp,esp
10000087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000008a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000090:	c7 40 04 00 00 f0 3f 	mov    DWORD PTR [eax+0x4],0x3ff00000
10000097:	5d                   	pop    ebp
10000098:	c2 04 00             	ret    0x4

1000009b <fpuGetPi()>:
1000009b:	55                   	push   ebp
1000009c:	89 e5                	mov    ebp,esp
1000009e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000a1:	c7 00 1f 85 eb 51    	mov    DWORD PTR [eax],0x51eb851f
100000a7:	c7 40 04 b8 1e 09 40 	mov    DWORD PTR [eax+0x4],0x40091eb8
100000ae:	5d                   	pop    ebp
100000af:	c2 04 00             	ret    0x4

100000b2 <fpuGetLog2E()>:
100000b2:	55                   	push   ebp
100000b3:	89 e5                	mov    ebp,esp
100000b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100000be:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100000c5:	5d                   	pop    ebp
100000c6:	c2 04 00             	ret    0x4

100000c9 <fpuGetLogE2()>:
100000c9:	55                   	push   ebp
100000ca:	89 e5                	mov    ebp,esp
100000cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100000d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100000dc:	5d                   	pop    ebp
100000dd:	c2 04 00             	ret    0x4

100000e0 <fpuGetLog210()>:
100000e0:	55                   	push   ebp
100000e1:	89 e5                	mov    ebp,esp
100000e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100000ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100000f3:	5d                   	pop    ebp
100000f4:	c2 04 00             	ret    0x4

100000f7 <fpuGetLog102()>:
100000f7:	55                   	push   ebp
100000f8:	89 e5                	mov    ebp,esp
100000fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100000fd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10000103:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000010a:	5d                   	pop    ebp
1000010b:	c2 04 00             	ret    0x4

1000010e <fpuIsSecondLarger(_Float80, _Float80)>:
1000010e:	55                   	push   ebp
1000010f:	89 e5                	mov    ebp,esp
10000111:	83 ec 08             	sub    esp,0x8
10000114:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000117:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000011a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000011d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000120:	e8 fc ff ff ff       	call   10000121 <fpuIsSecondLarger(_Float80, _Float80)+0x13>	10000121: R_386_PC32	__gtdf2
10000125:	83 c4 10             	add    esp,0x10
10000128:	85 c0                	test   eax,eax
1000012a:	0f 9f c0             	setg   al
1000012d:	c9                   	leave  
1000012e:	c3                   	ret    

1000012f <fpuAreEqual(_Float80, _Float80)>:
1000012f:	55                   	push   ebp
10000130:	89 e5                	mov    ebp,esp
10000132:	83 ec 08             	sub    esp,0x8
10000135:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10000138:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000013b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000013e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000141:	e8 fc ff ff ff       	call   10000142 <fpuAreEqual(_Float80, _Float80)+0x13>	10000142: R_386_PC32	__eqdf2
10000146:	83 c4 10             	add    esp,0x10
10000149:	85 c0                	test   eax,eax
1000014b:	0f 94 c0             	sete   al
1000014e:	c9                   	leave  
1000014f:	c3                   	ret    

10000150 <fpuUnorderedCompare(_Float80, _Float80)>:
10000150:	55                   	push   ebp
10000151:	89 e5                	mov    ebp,esp
10000153:	53                   	push   ebx
10000154:	50                   	push   eax
10000155:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000158:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000015b:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000015e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000161:	e8 fc ff ff ff       	call   10000162 <fpuUnorderedCompare(_Float80, _Float80)+0x12>	10000162: R_386_PC32	__eqdf2
10000166:	83 c4 10             	add    esp,0x10
10000169:	85 c0                	test   eax,eax
1000016b:	0f 94 c3             	sete   bl
1000016e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000171:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000174:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10000177:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000017a:	83 c4 10             	add    esp,0x10
1000017d:	31 d2                	xor    edx,edx
1000017f:	85 c0                	test   eax,eax
10000181:	74 19                	je     1000019c <fpuUnorderedCompare(_Float80, _Float80)+0x4c>
10000183:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000186:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000189:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000018c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000018f:	e8 fc ff ff ff       	call   10000190 <fpuUnorderedCompare(_Float80, _Float80)+0x40>	10000190: R_386_PC32	__gtdf2
10000194:	83 c4 10             	add    esp,0x10
10000197:	85 c0                	test   eax,eax
10000199:	0f 9f c2             	setg   dl
1000019c:	a0 01 00 00 00       	mov    al,ds:0x1	1000019d: R_386_32	fpuState
100001a1:	83 e0 ba             	and    eax,0xffffffba
100001a4:	c1 e3 06             	shl    ebx,0x6
100001a7:	09 d0                	or     eax,edx
100001a9:	09 d8                	or     eax,ebx
100001ab:	a2 01 00 00 00       	mov    ds:0x1,al	100001ac: R_386_32	fpuState
100001b0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100001b3:	c9                   	leave  
100001b4:	c3                   	ret    

100001b5 <fpuNormalise(_Float80)>:
100001b5:	55                   	push   ebp
100001b6:	89 e5                	mov    ebp,esp
100001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100001bb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100001be:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
100001c1:	89 10                	mov    DWORD PTR [eax],edx
100001c3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
100001c6:	5d                   	pop    ebp
100001c7:	c2 04 00             	ret    0x4

100001ca <fpuAdd(_Float80, _Float80)>:
100001ca:	55                   	push   ebp
100001cb:	89 e5                	mov    ebp,esp
100001cd:	53                   	push   ebx
100001ce:	50                   	push   eax
100001cf:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100001d2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
100001d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100001d8:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100001db:	ff 75 14             	push   DWORD PTR [ebp+0x14]
100001de:	e8 fc ff ff ff       	call   100001df <fpuAdd(_Float80, _Float80)+0x15>	100001df: R_386_PC32	__adddf3
100001e3:	83 c4 10             	add    esp,0x10
100001e6:	89 03                	mov    DWORD PTR [ebx],eax
100001e8:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
100001eb:	89 d8                	mov    eax,ebx
100001ed:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100001f0:	c9                   	leave  
100001f1:	c2 04 00             	ret    0x4

100001f4 <fpuAbs(_Float80)>:
100001f4:	55                   	push   ebp
100001f5:	89 e5                	mov    ebp,esp
100001f7:	57                   	push   edi
100001f8:	56                   	push   esi
100001f9:	53                   	push   ebx
100001fa:	83 ec 0c             	sub    esp,0xc
100001fd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000200:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
10000203:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
10000206:	6a 00                	push   0x0
10000208:	6a 00                	push   0x0
1000020a:	57                   	push   edi
1000020b:	56                   	push   esi
1000020c:	e8 fc ff ff ff       	call   1000020d <fpuAbs(_Float80)+0x19>	1000020d: R_386_PC32	__ltdf2
10000211:	83 c4 10             	add    esp,0x10
10000214:	85 c0                	test   eax,eax
10000216:	79 08                	jns    10000220 <fpuAbs(_Float80)+0x2c>
10000218:	8d 97 00 00 00 80    	lea    edx,[edi-0x80000000]
1000021e:	89 d7                	mov    edi,edx
10000220:	89 33                	mov    DWORD PTR [ebx],esi
10000222:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
10000225:	89 d8                	mov    eax,ebx
10000227:	8d 65 f4             	lea    esp,[ebp-0xc]
1000022a:	5b                   	pop    ebx
1000022b:	5e                   	pop    esi
1000022c:	5f                   	pop    edi
1000022d:	5d                   	pop    ebp
1000022e:	c2 04 00             	ret    0x4

10000231 <fpuChs(_Float80)>:
10000231:	55                   	push   ebp
10000232:	89 e5                	mov    ebp,esp
10000234:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000237:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000023a:	89 10                	mov    DWORD PTR [eax],edx
1000023c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
1000023f:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
10000245:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10000248:	5d                   	pop    ebp
10000249:	c2 04 00             	ret    0x4

1000024c <fpuSub(_Float80, _Float80)>:
1000024c:	55                   	push   ebp
1000024d:	89 e5                	mov    ebp,esp
1000024f:	53                   	push   ebx
10000250:	50                   	push   eax
10000251:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000254:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10000257:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000025a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000025d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000260:	e8 fc ff ff ff       	call   10000261 <fpuSub(_Float80, _Float80)+0x15>	10000261: R_386_PC32	__subdf3
10000265:	83 c4 10             	add    esp,0x10
10000268:	89 03                	mov    DWORD PTR [ebx],eax
1000026a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
1000026d:	89 d8                	mov    eax,ebx
1000026f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000272:	c9                   	leave  
10000273:	c2 04 00             	ret    0x4

10000276 <fpuReverseSub(_Float80, _Float80)>:
10000276:	55                   	push   ebp
10000277:	89 e5                	mov    ebp,esp
10000279:	53                   	push   ebx
1000027a:	50                   	push   eax
1000027b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000027e:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10000281:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10000284:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000287:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000028a:	e8 fc ff ff ff       	call   1000028b <fpuReverseSub(_Float80, _Float80)+0x15>	1000028b: R_386_PC32	__subdf3
1000028f:	83 c4 10             	add    esp,0x10
10000292:	89 03                	mov    DWORD PTR [ebx],eax
10000294:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
10000297:	89 d8                	mov    eax,ebx
10000299:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000029c:	c9                   	leave  
1000029d:	c2 04 00             	ret    0x4

100002a0 <fpuMultiply(_Float80, _Float80)>:
100002a0:	55                   	push   ebp
100002a1:	89 e5                	mov    ebp,esp
100002a3:	53                   	push   ebx
100002a4:	50                   	push   eax
100002a5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100002a8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
100002ab:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100002ae:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100002b1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
100002b4:	e8 fc ff ff ff       	call   100002b5 <fpuMultiply(_Float80, _Float80)+0x15>	100002b5: R_386_PC32	__muldf3
100002b9:	83 c4 10             	add    esp,0x10
100002bc:	89 03                	mov    DWORD PTR [ebx],eax
100002be:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
100002c1:	89 d8                	mov    eax,ebx
100002c3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100002c6:	c9                   	leave  
100002c7:	c2 04 00             	ret    0x4

100002ca <fpuMantissaDivision(unsigned long long, unsigned long long)>:
100002ca:	55                   	push   ebp
100002cb:	89 e5                	mov    ebp,esp
100002cd:	57                   	push   edi
100002ce:	56                   	push   esi
100002cf:	53                   	push   ebx
100002d0:	83 ec 24             	sub    esp,0x24
100002d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100002d6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100002d9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
100002dc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
100002df:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
100002e2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100002e5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100002e8:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
100002eb:	c7 45 dc 3d 00 00 00 	mov    DWORD PTR [ebp-0x24],0x3d
100002f2:	83 c8 ff             	or     eax,0xffffffff
100002f5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
100002fc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
10000303:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
1000030a:	31 d2                	xor    edx,edx
1000030c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
1000030f:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
10000312:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
10000315:	11 7d ec             	adc    DWORD PTR [ebp-0x14],edi
10000318:	83 f8 ff             	cmp    eax,0xffffffff
1000031b:	75 22                	jne    1000033f <fpuMantissaDivision(unsigned long long, unsigned long long)+0x75>
1000031d:	8b 5d d0             	mov    ebx,DWORD PTR [ebp-0x30]
10000320:	8b 75 d4             	mov    esi,DWORD PTR [ebp-0x2c]
10000323:	8a 4d dc             	mov    cl,BYTE PTR [ebp-0x24]
10000326:	0f ad f3             	shrd   ebx,esi,cl
10000329:	d3 ee                	shr    esi,cl
1000032b:	f6 c1 20             	test   cl,0x20
1000032e:	74 04                	je     10000334 <fpuMantissaDivision(unsigned long long, unsigned long long)+0x6a>
10000330:	89 f3                	mov    ebx,esi
10000332:	31 f6                	xor    esi,esi
10000334:	89 d9                	mov    ecx,ebx
10000336:	83 e1 01             	and    ecx,0x1
10000339:	0b 4d e8             	or     ecx,DWORD PTR [ebp-0x18]
1000033c:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
1000033f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
10000342:	39 75 e8             	cmp    DWORD PTR [ebp-0x18],esi
10000345:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
10000348:	1b 7d e4             	sbb    edi,DWORD PTR [ebp-0x1c]
1000034b:	72 38                	jb     10000385 <fpuMantissaDivision(unsigned long long, unsigned long long)+0xbb>
1000034d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
10000350:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
10000353:	29 75 e8             	sub    DWORD PTR [ebp-0x18],esi
10000356:	19 7d ec             	sbb    DWORD PTR [ebp-0x14],edi
10000359:	83 f8 ff             	cmp    eax,0xffffffff
1000035c:	75 0d                	jne    1000036b <fpuMantissaDivision(unsigned long long, unsigned long long)+0xa1>
1000035e:	81 ca 00 00 00 20    	or     edx,0x20000000
10000364:	b8 3d 00 00 00       	mov    eax,0x3d
10000369:	eb 1f                	jmp    1000038a <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
1000036b:	88 c1                	mov    cl,al
1000036d:	89 ce                	mov    esi,ecx
1000036f:	c1 ee 05             	shr    esi,0x5
10000372:	83 e6 01             	and    esi,0x1
10000375:	89 f3                	mov    ebx,esi
10000377:	83 f3 01             	xor    ebx,0x1
1000037a:	d3 e3                	shl    ebx,cl
1000037c:	d3 e6                	shl    esi,cl
1000037e:	09 5d d8             	or     DWORD PTR [ebp-0x28],ebx
10000381:	09 f2                	or     edx,esi
10000383:	eb 05                	jmp    1000038a <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc0>
10000385:	83 f8 ff             	cmp    eax,0xffffffff
10000388:	74 01                	je     1000038b <fpuMantissaDivision(unsigned long long, unsigned long long)+0xc1>
1000038a:	48                   	dec    eax
1000038b:	ff 4d dc             	dec    DWORD PTR [ebp-0x24]
1000038e:	85 c0                	test   eax,eax
10000390:	0f 85 76 ff ff ff    	jne    1000030c <fpuMantissaDivision(unsigned long long, unsigned long long)+0x42>
10000396:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10000399:	83 c4 24             	add    esp,0x24
1000039c:	5b                   	pop    ebx
1000039d:	5e                   	pop    esi
1000039e:	5f                   	pop    edi
1000039f:	5d                   	pop    ebp
100003a0:	c3                   	ret    

100003a1 <fpuDivide(_Float80, _Float80)>:
100003a1:	55                   	push   ebp
100003a2:	89 e5                	mov    ebp,esp
100003a4:	53                   	push   ebx
100003a5:	50                   	push   eax
100003a6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100003a9:	ff 75 18             	push   DWORD PTR [ebp+0x18]
100003ac:	ff 75 14             	push   DWORD PTR [ebp+0x14]
100003af:	ff 75 10             	push   DWORD PTR [ebp+0x10]
100003b2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100003b5:	e8 fc ff ff ff       	call   100003b6 <fpuDivide(_Float80, _Float80)+0x15>	100003b6: R_386_PC32	__divdf3
100003ba:	83 c4 10             	add    esp,0x10
100003bd:	89 03                	mov    DWORD PTR [ebx],eax
100003bf:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
100003c2:	89 d8                	mov    eax,ebx
100003c4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100003c7:	c9                   	leave  
100003c8:	c2 04 00             	ret    0x4

100003cb <fpuReciprocal(_Float80)>:
100003cb:	55                   	push   ebp
100003cc:	89 e5                	mov    ebp,esp
100003ce:	53                   	push   ebx
100003cf:	50                   	push   eax
100003d0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100003d3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
100003d6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100003d9:	68 00 00 f0 3f       	push   0x3ff00000
100003de:	6a 00                	push   0x0
100003e0:	e8 fc ff ff ff       	call   100003e1 <fpuReciprocal(_Float80)+0x16>	100003e1: R_386_PC32	__divdf3
100003e5:	83 c4 10             	add    esp,0x10
100003e8:	89 03                	mov    DWORD PTR [ebx],eax
100003ea:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
100003ed:	89 d8                	mov    eax,ebx
100003ef:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100003f2:	c9                   	leave  
100003f3:	c2 04 00             	ret    0x4

100003f6 <fpuSquare(_Float80)>:
100003f6:	55                   	push   ebp
100003f7:	89 e5                	mov    ebp,esp
100003f9:	53                   	push   ebx
100003fa:	50                   	push   eax
100003fb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
100003fe:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000401:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000404:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000407:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000040a:	e8 fc ff ff ff       	call   1000040b <fpuSquare(_Float80)+0x15>	1000040b: R_386_PC32	__muldf3
1000040f:	83 c4 10             	add    esp,0x10
10000412:	89 03                	mov    DWORD PTR [ebx],eax
10000414:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
10000417:	89 d8                	mov    eax,ebx
10000419:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000041c:	c9                   	leave  
1000041d:	c2 04 00             	ret    0x4

10000420 <fpuInverseSqrt(_Float80)>:
10000420:	55                   	push   ebp
10000421:	89 e5                	mov    ebp,esp
10000423:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10000426:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10000429:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
1000042c:	89 10                	mov    DWORD PTR [eax],edx
1000042e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000431:	5d                   	pop    ebp
10000432:	c2 04 00             	ret    0x4

10000435 <fpuSqrt(_Float80)>:
10000435:	55                   	push   ebp
10000436:	89 e5                	mov    ebp,esp
10000438:	53                   	push   ebx
10000439:	50                   	push   eax
1000043a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
1000043d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000440:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000443:	68 00 00 f0 3f       	push   0x3ff00000
10000448:	6a 00                	push   0x0
1000044a:	e8 fc ff ff ff       	call   1000044b <fpuSqrt(_Float80)+0x16>	1000044b: R_386_PC32	__divdf3
1000044f:	83 c4 10             	add    esp,0x10
10000452:	89 03                	mov    DWORD PTR [ebx],eax
10000454:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
10000457:	89 d8                	mov    eax,ebx
10000459:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000045c:	c9                   	leave  
1000045d:	c2 04 00             	ret    0x4

10000460 <fpuGetReg(int)>:
10000460:	55                   	push   ebp
10000461:	89 e5                	mov    ebp,esp
10000463:	53                   	push   ebx
10000464:	50                   	push   eax
10000465:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000468:	83 7d 0c 07          	cmp    DWORD PTR [ebp+0xc],0x7
1000046c:	76 10                	jbe    1000047e <fpuGetReg(int)+0x1e>
1000046e:	83 ec 0c             	sub    esp,0xc
10000471:	68 cf 14 00 10       	push   0x100014cf	10000472: R_386_32	.text
10000476:	e8 fc ff ff ff       	call   10000477 <fpuGetReg(int)+0x17>	10000477: R_386_PC32	Krnl::panic(char const*)
1000047b:	83 c4 10             	add    esp,0x10
1000047e:	a0 01 00 00 00       	mov    al,ds:0x1	1000047f: R_386_32	fpuState
10000483:	c0 e8 03             	shr    al,0x3
10000486:	83 e0 07             	and    eax,0x7
10000489:	03 45 0c             	add    eax,DWORD PTR [ebp+0xc]
1000048c:	b9 08 00 00 00       	mov    ecx,0x8
10000491:	99                   	cdq    
10000492:	f7 f9                	idiv   ecx
10000494:	8b 04 d5 04 00 00 00 	mov    eax,DWORD PTR [edx*8+0x4]	10000497: R_386_32	fpuState
1000049b:	8b 14 d5 08 00 00 00 	mov    edx,DWORD PTR [edx*8+0x8]	1000049e: R_386_32	fpuState
100004a2:	89 03                	mov    DWORD PTR [ebx],eax
100004a4:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
100004a7:	89 d8                	mov    eax,ebx
100004a9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100004ac:	c9                   	leave  
100004ad:	c2 04 00             	ret    0x4

100004b0 <fpuSetReg(int, _Float80)>:
100004b0:	55                   	push   ebp
100004b1:	89 e5                	mov    ebp,esp
100004b3:	53                   	push   ebx
100004b4:	50                   	push   eax
100004b5:	83 7d 08 07          	cmp    DWORD PTR [ebp+0x8],0x7
100004b9:	76 10                	jbe    100004cb <fpuSetReg(int, _Float80)+0x1b>
100004bb:	83 ec 0c             	sub    esp,0xc
100004be:	68 cf 14 00 10       	push   0x100014cf	100004bf: R_386_32	.text
100004c3:	e8 fc ff ff ff       	call   100004c4 <fpuSetReg(int, _Float80)+0x14>	100004c4: R_386_PC32	Krnl::panic(char const*)
100004c8:	83 c4 10             	add    esp,0x10
100004cb:	a0 01 00 00 00       	mov    al,ds:0x1	100004cc: R_386_32	fpuState
100004d0:	c0 e8 03             	shr    al,0x3
100004d3:	83 e0 07             	and    eax,0x7
100004d6:	03 45 08             	add    eax,DWORD PTR [ebp+0x8]
100004d9:	b9 08 00 00 00       	mov    ecx,0x8
100004de:	99                   	cdq    
100004df:	f7 f9                	idiv   ecx
100004e1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100004e4:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
100004e7:	89 0c d5 04 00 00 00 	mov    DWORD PTR [edx*8+0x4],ecx	100004ea: R_386_32	fpuState
100004ee:	89 1c d5 08 00 00 00 	mov    DWORD PTR [edx*8+0x8],ebx	100004f1: R_386_32	fpuState
100004f5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
100004f8:	c9                   	leave  
100004f9:	c3                   	ret    

100004fa <fpuInternalTo32(_Float80)>:
100004fa:	55                   	push   ebp
100004fb:	89 e5                	mov    ebp,esp
100004fd:	83 ec 10             	sub    esp,0x10
10000500:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000503:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000506:	e8 fc ff ff ff       	call   10000507 <fpuInternalTo32(_Float80)+0xd>	10000507: R_386_PC32	__fixunsdfsi
1000050b:	83 c4 10             	add    esp,0x10
1000050e:	c9                   	leave  
1000050f:	c3                   	ret    

10000510 <fpuInternalTo64(_Float80)>:
10000510:	55                   	push   ebp
10000511:	89 e5                	mov    ebp,esp
10000513:	83 ec 10             	sub    esp,0x10
10000516:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000519:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000051c:	e8 fc ff ff ff       	call   1000051d <fpuInternalTo64(_Float80)+0xd>	1000051d: R_386_PC32	__fixunsdfdi
10000521:	83 c4 10             	add    esp,0x10
10000524:	c9                   	leave  
10000525:	c3                   	ret    

10000526 <fpu32ToInternal(unsigned int)>:
10000526:	55                   	push   ebp
10000527:	89 e5                	mov    ebp,esp
10000529:	53                   	push   ebx
1000052a:	83 ec 10             	sub    esp,0x10
1000052d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000530:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000533:	e8 fc ff ff ff       	call   10000534 <fpu32ToInternal(unsigned int)+0xe>	10000534: R_386_PC32	__floatunsidf
10000538:	83 c4 10             	add    esp,0x10
1000053b:	89 03                	mov    DWORD PTR [ebx],eax
1000053d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
10000540:	89 d8                	mov    eax,ebx
10000542:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10000545:	c9                   	leave  
10000546:	c2 04 00             	ret    0x4

10000549 <fpu64ToInternal(unsigned long long)>:
10000549:	55                   	push   ebp
1000054a:	89 e5                	mov    ebp,esp
1000054c:	53                   	push   ebx
1000054d:	83 ec 0c             	sub    esp,0xc
10000550:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000553:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000556:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000559:	e8 fc ff ff ff       	call   1000055a <fpu64ToInternal(unsigned long long)+0x11>	1000055a: R_386_PC32	__floatundidf
1000055e:	83 c4 10             	add    esp,0x10
10000561:	89 03                	mov    DWORD PTR [ebx],eax
10000563:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
10000566:	89 d8                	mov    eax,ebx
10000568:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
1000056b:	c9                   	leave  
1000056c:	c2 04 00             	ret    0x4

1000056f <fpuPush(_Float80)>:
1000056f:	55                   	push   ebp
10000570:	89 e5                	mov    ebp,esp
10000572:	8a 15 01 00 00 00    	mov    dl,BYTE PTR ds:0x1	10000574: R_386_32	fpuState
10000578:	88 d0                	mov    al,dl
1000057a:	c0 e8 03             	shr    al,0x3
1000057d:	83 e0 07             	and    eax,0x7
10000580:	83 c0 07             	add    eax,0x7
10000583:	88 c1                	mov    cl,al
10000585:	83 e1 07             	and    ecx,0x7
10000588:	c1 e1 03             	shl    ecx,0x3
1000058b:	83 e2 c7             	and    edx,0xffffffc7
1000058e:	09 ca                	or     edx,ecx
10000590:	88 15 01 00 00 00    	mov    BYTE PTR ds:0x1,dl	10000592: R_386_32	fpuState
10000596:	83 e0 07             	and    eax,0x7
10000599:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
1000059c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
1000059f:	89 14 c5 04 00 00 00 	mov    DWORD PTR [eax*8+0x4],edx	100005a2: R_386_32	fpuState
100005a6:	89 0c c5 08 00 00 00 	mov    DWORD PTR [eax*8+0x8],ecx	100005a9: R_386_32	fpuState
100005ad:	a1 44 00 00 00       	mov    eax,ds:0x44	100005ae: R_386_32	fpuState
100005b2:	83 f8 08             	cmp    eax,0x8
100005b5:	75 09                	jne    100005c0 <fpuPush(_Float80)+0x51>
100005b7:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	100005b9: R_386_32	fpuState
100005be:	eb 06                	jmp    100005c6 <fpuPush(_Float80)+0x57>
100005c0:	40                   	inc    eax
100005c1:	a3 44 00 00 00       	mov    ds:0x44,eax	100005c2: R_386_32	fpuState
100005c6:	5d                   	pop    ebp
100005c7:	c3                   	ret    

100005c8 <fpuPop()>:
100005c8:	55                   	push   ebp
100005c9:	89 e5                	mov    ebp,esp
100005cb:	56                   	push   esi
100005cc:	53                   	push   ebx
100005cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100005d0:	8a 0d 01 00 00 00    	mov    cl,BYTE PTR ds:0x1	100005d2: R_386_32	fpuState
100005d6:	88 ca                	mov    dl,cl
100005d8:	c0 ea 03             	shr    dl,0x3
100005db:	83 e2 07             	and    edx,0x7
100005de:	8b 1c d5 04 00 00 00 	mov    ebx,DWORD PTR [edx*8+0x4]	100005e1: R_386_32	fpuState
100005e5:	8b 34 d5 08 00 00 00 	mov    esi,DWORD PTR [edx*8+0x8]	100005e8: R_386_32	fpuState
100005ec:	89 18                	mov    DWORD PTR [eax],ebx
100005ee:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
100005f1:	8d 14 d5 08 00 00 00 	lea    edx,[edx*8+0x8]
100005f8:	83 e2 38             	and    edx,0x38
100005fb:	83 e1 c7             	and    ecx,0xffffffc7
100005fe:	09 ca                	or     edx,ecx
10000600:	88 15 01 00 00 00    	mov    BYTE PTR ds:0x1,dl	10000602: R_386_32	fpuState
10000606:	8b 15 44 00 00 00    	mov    edx,DWORD PTR ds:0x44	10000608: R_386_32	fpuState
1000060c:	85 d2                	test   edx,edx
1000060e:	74 09                	je     10000619 <fpuPop()+0x51>
10000610:	4a                   	dec    edx
10000611:	89 15 44 00 00 00    	mov    DWORD PTR ds:0x44,edx	10000613: R_386_32	fpuState
10000617:	eb 07                	jmp    10000620 <fpuPop()+0x58>
10000619:	80 0d 00 00 00 00 40 	or     BYTE PTR ds:0x0,0x40	1000061b: R_386_32	fpuState
10000620:	5b                   	pop    ebx
10000621:	5e                   	pop    esi
10000622:	5d                   	pop    ebp
10000623:	c2 04 00             	ret    0x4

10000626 <x87Handler(regs*)>:
10000626:	55                   	push   ebp
10000627:	89 e5                	mov    ebp,esp
10000629:	57                   	push   edi
1000062a:	56                   	push   esi
1000062b:	53                   	push   ebx
1000062c:	83 ec 2c             	sub    esp,0x2c
1000062f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
10000632:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
10000635:	c6 45 e2 00          	mov    BYTE PTR [ebp-0x1e],0x0
10000639:	c7 45 e4 02 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x2
10000640:	8d 45 e3             	lea    eax,[ebp-0x1d]
10000643:	50                   	push   eax
10000644:	8d 45 e2             	lea    eax,[ebp-0x1e]
10000647:	50                   	push   eax
10000648:	8d 45 e4             	lea    eax,[ebp-0x1c]
1000064b:	50                   	push   eax
1000064c:	53                   	push   ebx
1000064d:	e8 fc ff ff ff       	call   1000064e <x87Handler(regs*)+0x28>	1000064e: R_386_PC32	CPU::decodeAddress(regs*, int*, bool*, unsigned char*)
10000652:	89 c6                	mov    esi,eax
10000654:	58                   	pop    eax
10000655:	5a                   	pop    edx
10000656:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
10000659:	68 e2 14 00 10       	push   0x100014e2	1000065a: R_386_32	.text
1000065e:	e8 fc ff ff ff       	call   1000065f <x87Handler(regs*)+0x39>	1000065f: R_386_PC32	Dbg::kprintf(char const*, ...)
10000663:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
10000667:	89 04 24             	mov    DWORD PTR [esp],eax
1000066a:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
1000066e:	50                   	push   eax
1000066f:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000673:	50                   	push   eax
10000674:	0f b6 07             	movzx  eax,BYTE PTR [edi]
10000677:	50                   	push   eax
10000678:	68 f1 14 00 10       	push   0x100014f1	10000679: R_386_32	.text
1000067d:	e8 fc ff ff ff       	call   1000067e <x87Handler(regs*)+0x58>	1000067e: R_386_PC32	Dbg::kprintf(char const*, ...)
10000682:	83 c4 18             	add    esp,0x18
10000685:	56                   	push   esi
10000686:	68 03 15 00 10       	push   0x10001503	10000687: R_386_32	.text
1000068b:	e8 fc ff ff ff       	call   1000068c <x87Handler(regs*)+0x66>	1000068c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000690:	8a 17                	mov    dl,BYTE PTR [edi]
10000692:	83 c4 10             	add    esp,0x10
10000695:	80 fa d9             	cmp    dl,0xd9
10000698:	0f 85 ac 00 00 00    	jne    1000074a <x87Handler(regs*)+0x124>
1000069e:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
100006a2:	8d 50 20             	lea    edx,[eax+0x20]
100006a5:	80 fa 0e             	cmp    dl,0xe
100006a8:	0f 87 0a 01 00 00    	ja     100007b8 <x87Handler(regs*)+0x192>
100006ae:	0f b6 d2             	movzx  edx,dl
100006b1:	ff 24 95 1c 15 00 10 	jmp    DWORD PTR [edx*4+0x1000151c]	100006b4: R_386_32	.text
100006b8:	8d 45 d0             	lea    eax,[ebp-0x30]
100006bb:	51                   	push   ecx
100006bc:	51                   	push   ecx
100006bd:	6a 00                	push   0x0
100006bf:	50                   	push   eax
100006c0:	e8 fc ff ff ff       	call   100006c1 <x87Handler(regs*)+0x9b>	100006c1: R_386_PC32	fpuGetReg(int)
100006c5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100006c8:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
100006cb:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
100006d1:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100006d4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100006d7:	56                   	push   esi
100006d8:	56                   	push   esi
100006d9:	e9 c8 00 00 00       	jmp    100007a6 <x87Handler(regs*)+0x180>
100006de:	8d 45 d0             	lea    eax,[ebp-0x30]
100006e1:	52                   	push   edx
100006e2:	52                   	push   edx
100006e3:	6a 00                	push   0x0
100006e5:	50                   	push   eax
100006e6:	e8 fc ff ff ff       	call   100006e7 <x87Handler(regs*)+0xc1>	100006e7: R_386_PC32	fpuGetReg(int)
100006eb:	8b 75 d0             	mov    esi,DWORD PTR [ebp-0x30]
100006ee:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
100006f1:	83 c4 0c             	add    esp,0xc
100006f4:	6a 00                	push   0x0
100006f6:	6a 00                	push   0x0
100006f8:	57                   	push   edi
100006f9:	56                   	push   esi
100006fa:	e8 fc ff ff ff       	call   100006fb <x87Handler(regs*)+0xd5>	100006fb: R_386_PC32	__ltdf2
100006ff:	83 c4 10             	add    esp,0x10
10000702:	85 c0                	test   eax,eax
10000704:	79 08                	jns    1000070e <x87Handler(regs*)+0xe8>
10000706:	8d 97 00 00 00 80    	lea    edx,[edi-0x80000000]
1000070c:	89 d7                	mov    edi,edx
1000070e:	50                   	push   eax
1000070f:	57                   	push   edi
10000710:	56                   	push   esi
10000711:	6a 00                	push   0x0
10000713:	e8 fc ff ff ff       	call   10000714 <x87Handler(regs*)+0xee>	10000714: R_386_PC32	fpuSetReg(int, _Float80)
10000718:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
1000071c:	83 c4 10             	add    esp,0x10
1000071f:	b0 01                	mov    al,0x1
10000721:	e9 8b 0d 00 00       	jmp    100014b1 <x87Handler(regs*)+0xe8b>
10000726:	50                   	push   eax
10000727:	50                   	push   eax
10000728:	68 00 00 f0 3f       	push   0x3ff00000
1000072d:	eb 04                	jmp    10000733 <x87Handler(regs*)+0x10d>
1000072f:	50                   	push   eax
10000730:	50                   	push   eax
10000731:	6a 00                	push   0x0
10000733:	6a 00                	push   0x0
10000735:	e8 fc ff ff ff       	call   10000736 <x87Handler(regs*)+0x110>	10000736: R_386_PC32	fpuPush(_Float80)
1000073a:	eb dc                	jmp    10000718 <x87Handler(regs*)+0xf2>
1000073c:	50                   	push   eax
1000073d:	50                   	push   eax
1000073e:	68 b8 1e 09 40       	push   0x40091eb8
10000743:	68 1f 85 eb 51       	push   0x51eb851f
10000748:	eb eb                	jmp    10000735 <x87Handler(regs*)+0x10f>
1000074a:	80 fa d8             	cmp    dl,0xd8
1000074d:	0f 85 1d 01 00 00    	jne    10000870 <x87Handler(regs*)+0x24a>
10000753:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000757:	8d 50 40             	lea    edx,[eax+0x40]
1000075a:	80 fa 07             	cmp    dl,0x7
1000075d:	0f 87 a4 01 00 00    	ja     10000907 <x87Handler(regs*)+0x2e1>
10000763:	8d 75 d0             	lea    esi,[ebp-0x30]
10000766:	57                   	push   edi
10000767:	57                   	push   edi
10000768:	2d c0 00 00 00       	sub    eax,0xc0
1000076d:	50                   	push   eax
1000076e:	56                   	push   esi
1000076f:	e8 fc ff ff ff       	call   10000770 <x87Handler(regs*)+0x14a>	10000770: R_386_PC32	fpuGetReg(int)
10000774:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000777:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
1000077a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000077d:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000780:	83 ec 0c             	sub    esp,0xc
10000783:	6a 00                	push   0x0
10000785:	56                   	push   esi
10000786:	e8 fc ff ff ff       	call   10000787 <x87Handler(regs*)+0x161>	10000787: R_386_PC32	fpuGetReg(int)
1000078b:	50                   	push   eax
1000078c:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
1000078f:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000792:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000795:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000798:	e8 fc ff ff ff       	call   10000799 <x87Handler(regs*)+0x173>	10000799: R_386_PC32	__adddf3
1000079d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100007a0:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100007a3:	83 c4 1c             	add    esp,0x1c
100007a6:	52                   	push   edx
100007a7:	50                   	push   eax
100007a8:	6a 00                	push   0x0
100007aa:	e8 fc ff ff ff       	call   100007ab <x87Handler(regs*)+0x185>	100007ab: R_386_PC32	fpuSetReg(int, _Float80)
100007af:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
100007b3:	e9 47 01 00 00       	jmp    100008ff <x87Handler(regs*)+0x2d9>
100007b8:	8d 50 40             	lea    edx,[eax+0x40]
100007bb:	80 fa 07             	cmp    dl,0x7
100007be:	77 21                	ja     100007e1 <x87Handler(regs*)+0x1bb>
100007c0:	8d 55 d0             	lea    edx,[ebp-0x30]
100007c3:	57                   	push   edi
100007c4:	57                   	push   edi
100007c5:	2d c0 00 00 00       	sub    eax,0xc0
100007ca:	50                   	push   eax
100007cb:	52                   	push   edx
100007cc:	e8 fc ff ff ff       	call   100007cd <x87Handler(regs*)+0x1a7>	100007cd: R_386_PC32	fpuGetReg(int)
100007d1:	83 ec 0c             	sub    esp,0xc
100007d4:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100007d7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100007da:	e8 fc ff ff ff       	call   100007db <x87Handler(regs*)+0x1b5>	100007db: R_386_PC32	fpuPush(_Float80)
100007df:	eb ce                	jmp    100007af <x87Handler(regs*)+0x189>
100007e1:	8d 50 38             	lea    edx,[eax+0x38]
100007e4:	80 fa 07             	cmp    dl,0x7
100007e7:	77 4d                	ja     10000836 <x87Handler(regs*)+0x210>
100007e9:	8d 75 d0             	lea    esi,[ebp-0x30]
100007ec:	52                   	push   edx
100007ed:	52                   	push   edx
100007ee:	2d c8 00 00 00       	sub    eax,0xc8
100007f3:	50                   	push   eax
100007f4:	56                   	push   esi
100007f5:	e8 fc ff ff ff       	call   100007f6 <x87Handler(regs*)+0x1d0>	100007f6: R_386_PC32	fpuGetReg(int)
100007fa:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100007fd:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000800:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000803:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000806:	83 ec 0c             	sub    esp,0xc
10000809:	6a 00                	push   0x0
1000080b:	56                   	push   esi
1000080c:	e8 fc ff ff ff       	call   1000080d <x87Handler(regs*)+0x1e7>	1000080d: R_386_PC32	fpuGetReg(int)
10000811:	59                   	pop    ecx
10000812:	5e                   	pop    esi
10000813:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000816:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000819:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
1000081d:	2d c8 00 00 00       	sub    eax,0xc8
10000822:	50                   	push   eax
10000823:	e8 fc ff ff ff       	call   10000824 <x87Handler(regs*)+0x1fe>	10000824: R_386_PC32	fpuSetReg(int, _Float80)
10000828:	83 c4 1c             	add    esp,0x1c
1000082b:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
1000082e:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000831:	e9 db fe ff ff       	jmp    10000711 <x87Handler(regs*)+0xeb>
10000836:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
10000839:	84 c0                	test   al,al
1000083b:	75 0c                	jne    10000849 <x87Handler(regs*)+0x223>
1000083d:	83 ec 0c             	sub    esp,0xc
10000840:	ff 36                	push   DWORD PTR [esi]
10000842:	e8 fc ff ff ff       	call   10000843 <x87Handler(regs*)+0x21d>	10000843: R_386_PC32	__floatunsidf
10000847:	eb 70                	jmp    100008b9 <x87Handler(regs*)+0x293>
10000849:	3c 03                	cmp    al,0x3
1000084b:	74 0d                	je     1000085a <x87Handler(regs*)+0x234>
1000084d:	3c 05                	cmp    al,0x5
1000084f:	75 14                	jne    10000865 <x87Handler(regs*)+0x23f>
10000851:	66 8b 06             	mov    ax,WORD PTR [esi]
10000854:	66 a3 02 00 00 00    	mov    ds:0x2,ax	10000856: R_386_32	fpuState
1000085a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000085d:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
10000860:	e9 ba fe ff ff       	jmp    1000071f <x87Handler(regs*)+0xf9>
10000865:	3c 07                	cmp    al,0x7
10000867:	74 f1                	je     1000085a <x87Handler(regs*)+0x234>
10000869:	31 c0                	xor    eax,eax
1000086b:	e9 41 0c 00 00       	jmp    100014b1 <x87Handler(regs*)+0xe8b>
10000870:	80 fa dc             	cmp    dl,0xdc
10000873:	0f 84 43 02 00 00    	je     10000abc <x87Handler(regs*)+0x496>
10000879:	80 fa de             	cmp    dl,0xde
1000087c:	0f 84 56 03 00 00    	je     10000bd8 <x87Handler(regs*)+0x5b2>
10000882:	80 fa dd             	cmp    dl,0xdd
10000885:	0f 84 89 05 00 00    	je     10000e14 <x87Handler(regs*)+0x7ee>
1000088b:	80 fa da             	cmp    dl,0xda
1000088e:	0f 84 74 06 00 00    	je     10000f08 <x87Handler(regs*)+0x8e2>
10000894:	80 fa df             	cmp    dl,0xdf
10000897:	0f 84 ce 06 00 00    	je     10000f6b <x87Handler(regs*)+0x945>
1000089d:	31 c0                	xor    eax,eax
1000089f:	80 fa db             	cmp    dl,0xdb
100008a2:	0f 85 09 0c 00 00    	jne    100014b1 <x87Handler(regs*)+0xe8b>
100008a8:	8a 55 e3             	mov    dl,BYTE PTR [ebp-0x1d]
100008ab:	84 d2                	test   dl,dl
100008ad:	75 24                	jne    100008d3 <x87Handler(regs*)+0x2ad>
100008af:	83 ec 0c             	sub    esp,0xc
100008b2:	ff 36                	push   DWORD PTR [esi]
100008b4:	e8 fc ff ff ff       	call   100008b5 <x87Handler(regs*)+0x28f>	100008b5: R_386_PC32	__floatunsidf
100008b9:	59                   	pop    ecx
100008ba:	5e                   	pop    esi
100008bb:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100008be:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100008c1:	52                   	push   edx
100008c2:	50                   	push   eax
100008c3:	e8 fc ff ff ff       	call   100008c4 <x87Handler(regs*)+0x29e>	100008c4: R_386_PC32	fpuPush(_Float80)
100008c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100008cb:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
100008ce:	e9 49 fe ff ff       	jmp    1000071c <x87Handler(regs*)+0xf6>
100008d3:	80 fa 02             	cmp    dl,0x2
100008d6:	0f 85 b7 08 00 00    	jne    10001193 <x87Handler(regs*)+0xb6d>
100008dc:	8d 45 d0             	lea    eax,[ebp-0x30]
100008df:	52                   	push   edx
100008e0:	52                   	push   edx
100008e1:	6a 00                	push   0x0
100008e3:	50                   	push   eax
100008e4:	e8 fc ff ff ff       	call   100008e5 <x87Handler(regs*)+0x2bf>	100008e5: R_386_PC32	fpuGetReg(int)
100008e9:	83 ec 0c             	sub    esp,0xc
100008ec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100008ef:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100008f2:	e8 fc ff ff ff       	call   100008f3 <x87Handler(regs*)+0x2cd>	100008f3: R_386_PC32	__fixdfdi
100008f7:	89 06                	mov    DWORD PTR [esi],eax
100008f9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100008fc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
100008ff:	83 c4 20             	add    esp,0x20
10000902:	e9 18 fe ff ff       	jmp    1000071f <x87Handler(regs*)+0xf9>
10000907:	8d 50 38             	lea    edx,[eax+0x38]
1000090a:	80 fa 07             	cmp    dl,0x7
1000090d:	77 3f                	ja     1000094e <x87Handler(regs*)+0x328>
1000090f:	8d 75 d0             	lea    esi,[ebp-0x30]
10000912:	51                   	push   ecx
10000913:	51                   	push   ecx
10000914:	2d c8 00 00 00       	sub    eax,0xc8
10000919:	50                   	push   eax
1000091a:	56                   	push   esi
1000091b:	e8 fc ff ff ff       	call   1000091c <x87Handler(regs*)+0x2f6>	1000091c: R_386_PC32	fpuGetReg(int)
10000920:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000923:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000926:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000929:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
1000092c:	83 ec 0c             	sub    esp,0xc
1000092f:	6a 00                	push   0x0
10000931:	56                   	push   esi
10000932:	e8 fc ff ff ff       	call   10000933 <x87Handler(regs*)+0x30d>	10000933: R_386_PC32	fpuGetReg(int)
10000937:	56                   	push   esi
10000938:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
1000093b:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
1000093e:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000941:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000944:	e8 fc ff ff ff       	call   10000945 <x87Handler(regs*)+0x31f>	10000945: R_386_PC32	__muldf3
10000949:	e9 4f fe ff ff       	jmp    1000079d <x87Handler(regs*)+0x177>
1000094e:	8d 50 30             	lea    edx,[eax+0x30]
10000951:	80 fa 07             	cmp    dl,0x7
10000954:	77 0f                	ja     10000965 <x87Handler(regs*)+0x33f>
10000956:	8d 75 d0             	lea    esi,[ebp-0x30]
10000959:	52                   	push   edx
1000095a:	52                   	push   edx
1000095b:	2d d0 00 00 00       	sub    eax,0xd0
10000960:	e9 1c 05 00 00       	jmp    10000e81 <x87Handler(regs*)+0x85b>
10000965:	8d 50 28             	lea    edx,[eax+0x28]
10000968:	80 fa 07             	cmp    dl,0x7
1000096b:	77 0f                	ja     1000097c <x87Handler(regs*)+0x356>
1000096d:	8d 75 d0             	lea    esi,[ebp-0x30]
10000970:	57                   	push   edi
10000971:	57                   	push   edi
10000972:	2d d8 00 00 00       	sub    eax,0xd8
10000977:	e9 52 05 00 00       	jmp    10000ece <x87Handler(regs*)+0x8a8>
1000097c:	8d 50 20             	lea    edx,[eax+0x20]
1000097f:	80 fa 07             	cmp    dl,0x7
10000982:	77 3f                	ja     100009c3 <x87Handler(regs*)+0x39d>
10000984:	8d 75 d0             	lea    esi,[ebp-0x30]
10000987:	52                   	push   edx
10000988:	52                   	push   edx
10000989:	2d e0 00 00 00       	sub    eax,0xe0
1000098e:	50                   	push   eax
1000098f:	56                   	push   esi
10000990:	e8 fc ff ff ff       	call   10000991 <x87Handler(regs*)+0x36b>	10000991: R_386_PC32	fpuGetReg(int)
10000995:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000998:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
1000099b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000099e:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100009a1:	83 ec 0c             	sub    esp,0xc
100009a4:	6a 00                	push   0x0
100009a6:	56                   	push   esi
100009a7:	e8 fc ff ff ff       	call   100009a8 <x87Handler(regs*)+0x382>	100009a8: R_386_PC32	fpuGetReg(int)
100009ac:	51                   	push   ecx
100009ad:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
100009b0:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
100009b3:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100009b6:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100009b9:	e8 fc ff ff ff       	call   100009ba <x87Handler(regs*)+0x394>	100009ba: R_386_PC32	__subdf3
100009be:	e9 da fd ff ff       	jmp    1000079d <x87Handler(regs*)+0x177>
100009c3:	8d 50 18             	lea    edx,[eax+0x18]
100009c6:	80 fa 07             	cmp    dl,0x7
100009c9:	77 43                	ja     10000a0e <x87Handler(regs*)+0x3e8>
100009cb:	8d 75 d0             	lea    esi,[ebp-0x30]
100009ce:	50                   	push   eax
100009cf:	50                   	push   eax
100009d0:	6a 00                	push   0x0
100009d2:	56                   	push   esi
100009d3:	e8 fc ff ff ff       	call   100009d4 <x87Handler(regs*)+0x3ae>	100009d4: R_386_PC32	fpuGetReg(int)
100009d8:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
100009db:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
100009de:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100009e1:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100009e4:	83 ec 0c             	sub    esp,0xc
100009e7:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
100009eb:	2d e8 00 00 00       	sub    eax,0xe8
100009f0:	50                   	push   eax
100009f1:	56                   	push   esi
100009f2:	e8 fc ff ff ff       	call   100009f3 <x87Handler(regs*)+0x3cd>	100009f3: R_386_PC32	fpuGetReg(int)
100009f7:	50                   	push   eax
100009f8:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
100009fb:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
100009fe:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a01:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a04:	e8 fc ff ff ff       	call   10000a05 <x87Handler(regs*)+0x3df>	10000a05: R_386_PC32	__subdf3
10000a09:	e9 8f fd ff ff       	jmp    1000079d <x87Handler(regs*)+0x177>
10000a0e:	8d 50 10             	lea    edx,[eax+0x10]
10000a11:	80 fa 07             	cmp    dl,0x7
10000a14:	77 3c                	ja     10000a52 <x87Handler(regs*)+0x42c>
10000a16:	8d 75 d0             	lea    esi,[ebp-0x30]
10000a19:	52                   	push   edx
10000a1a:	52                   	push   edx
10000a1b:	2d f0 00 00 00       	sub    eax,0xf0
10000a20:	50                   	push   eax
10000a21:	56                   	push   esi
10000a22:	e8 fc ff ff ff       	call   10000a23 <x87Handler(regs*)+0x3fd>	10000a23: R_386_PC32	fpuGetReg(int)
10000a27:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000a2a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000a2d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000a30:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000a33:	83 ec 0c             	sub    esp,0xc
10000a36:	6a 00                	push   0x0
10000a38:	56                   	push   esi
10000a39:	e8 fc ff ff ff       	call   10000a3a <x87Handler(regs*)+0x414>	10000a3a: R_386_PC32	fpuGetReg(int)
10000a3e:	51                   	push   ecx
10000a3f:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000a42:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000a45:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a48:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a4b:	e8 fc ff ff ff       	call   10000a4c <x87Handler(regs*)+0x426>	10000a4c: R_386_PC32	__divdf3
10000a50:	eb 46                	jmp    10000a98 <x87Handler(regs*)+0x472>
10000a52:	3c f7                	cmp    al,0xf7
10000a54:	0f 86 2f 05 00 00    	jbe    10000f89 <x87Handler(regs*)+0x963>
10000a5a:	8d 75 d0             	lea    esi,[ebp-0x30]
10000a5d:	50                   	push   eax
10000a5e:	50                   	push   eax
10000a5f:	6a 00                	push   0x0
10000a61:	56                   	push   esi
10000a62:	e8 fc ff ff ff       	call   10000a63 <x87Handler(regs*)+0x43d>	10000a63: R_386_PC32	fpuGetReg(int)
10000a67:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000a6a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000a6d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000a70:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000a73:	83 ec 0c             	sub    esp,0xc
10000a76:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000a7a:	2d f8 00 00 00       	sub    eax,0xf8
10000a7f:	50                   	push   eax
10000a80:	56                   	push   esi
10000a81:	e8 fc ff ff ff       	call   10000a82 <x87Handler(regs*)+0x45c>	10000a82: R_386_PC32	fpuGetReg(int)
10000a86:	50                   	push   eax
10000a87:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000a8a:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000a8d:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000a90:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000a93:	e8 fc ff ff ff       	call   10000a94 <x87Handler(regs*)+0x46e>	10000a94: R_386_PC32	__divdf3
10000a98:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000a9b:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000a9e:	83 c4 1c             	add    esp,0x1c
10000aa1:	52                   	push   edx
10000aa2:	50                   	push   eax
10000aa3:	6a 00                	push   0x0
10000aa5:	e8 fc ff ff ff       	call   10000aa6 <x87Handler(regs*)+0x480>	10000aa6: R_386_PC32	fpuSetReg(int, _Float80)
10000aaa:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000aae:	83 c4 14             	add    esp,0x14
10000ab1:	56                   	push   esi
10000ab2:	e8 fc ff ff ff       	call   10000ab3 <x87Handler(regs*)+0x48d>	10000ab3: R_386_PC32	fpuPop()
10000ab7:	e9 fc 07 00 00       	jmp    100012b8 <x87Handler(regs*)+0xc92>
10000abc:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000ac0:	8d 50 40             	lea    edx,[eax+0x40]
10000ac3:	80 fa 07             	cmp    dl,0x7
10000ac6:	77 53                	ja     10000b1b <x87Handler(regs*)+0x4f5>
10000ac8:	8d 75 d0             	lea    esi,[ebp-0x30]
10000acb:	52                   	push   edx
10000acc:	52                   	push   edx
10000acd:	2d c0 00 00 00       	sub    eax,0xc0
10000ad2:	50                   	push   eax
10000ad3:	56                   	push   esi
10000ad4:	e8 fc ff ff ff       	call   10000ad5 <x87Handler(regs*)+0x4af>	10000ad5: R_386_PC32	fpuGetReg(int)
10000ad9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000adc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000adf:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000ae2:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000ae5:	83 ec 0c             	sub    esp,0xc
10000ae8:	6a 00                	push   0x0
10000aea:	56                   	push   esi
10000aeb:	e8 fc ff ff ff       	call   10000aec <x87Handler(regs*)+0x4c6>	10000aec: R_386_PC32	fpuGetReg(int)
10000af0:	51                   	push   ecx
10000af1:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000af4:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000af7:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000afa:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000afd:	e8 fc ff ff ff       	call   10000afe <x87Handler(regs*)+0x4d8>	10000afe: R_386_PC32	__adddf3
10000b02:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000b05:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000b08:	83 c4 1c             	add    esp,0x1c
10000b0b:	52                   	push   edx
10000b0c:	50                   	push   eax
10000b0d:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000b11:	2d c0 00 00 00       	sub    eax,0xc0
10000b16:	e9 23 03 00 00       	jmp    10000e3e <x87Handler(regs*)+0x818>
10000b1b:	8d 50 38             	lea    edx,[eax+0x38]
10000b1e:	80 fa 07             	cmp    dl,0x7
10000b21:	77 53                	ja     10000b76 <x87Handler(regs*)+0x550>
10000b23:	8d 75 d0             	lea    esi,[ebp-0x30]
10000b26:	52                   	push   edx
10000b27:	52                   	push   edx
10000b28:	2d c8 00 00 00       	sub    eax,0xc8
10000b2d:	50                   	push   eax
10000b2e:	56                   	push   esi
10000b2f:	e8 fc ff ff ff       	call   10000b30 <x87Handler(regs*)+0x50a>	10000b30: R_386_PC32	fpuGetReg(int)
10000b34:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000b37:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000b3a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000b3d:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000b40:	83 ec 0c             	sub    esp,0xc
10000b43:	6a 00                	push   0x0
10000b45:	56                   	push   esi
10000b46:	e8 fc ff ff ff       	call   10000b47 <x87Handler(regs*)+0x521>	10000b47: R_386_PC32	fpuGetReg(int)
10000b4b:	51                   	push   ecx
10000b4c:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000b4f:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000b52:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000b55:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000b58:	e8 fc ff ff ff       	call   10000b59 <x87Handler(regs*)+0x533>	10000b59: R_386_PC32	__muldf3
10000b5d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000b60:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000b63:	83 c4 1c             	add    esp,0x1c
10000b66:	52                   	push   edx
10000b67:	50                   	push   eax
10000b68:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000b6c:	2d c8 00 00 00       	sub    eax,0xc8
10000b71:	e9 c8 02 00 00       	jmp    10000e3e <x87Handler(regs*)+0x818>
10000b76:	83 c0 18             	add    eax,0x18
10000b79:	3c 07                	cmp    al,0x7
10000b7b:	0f 87 3c 06 00 00    	ja     100011bd <x87Handler(regs*)+0xb97>
10000b81:	8d 75 d0             	lea    esi,[ebp-0x30]
10000b84:	50                   	push   eax
10000b85:	50                   	push   eax
10000b86:	6a 00                	push   0x0
10000b88:	56                   	push   esi
10000b89:	e8 fc ff ff ff       	call   10000b8a <x87Handler(regs*)+0x564>	10000b8a: R_386_PC32	fpuGetReg(int)
10000b8e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000b91:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000b94:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000b97:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000b9a:	83 ec 0c             	sub    esp,0xc
10000b9d:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000ba1:	2d e8 00 00 00       	sub    eax,0xe8
10000ba6:	50                   	push   eax
10000ba7:	56                   	push   esi
10000ba8:	e8 fc ff ff ff       	call   10000ba9 <x87Handler(regs*)+0x583>	10000ba9: R_386_PC32	fpuGetReg(int)
10000bad:	50                   	push   eax
10000bae:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000bb1:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000bb4:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000bb7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000bba:	e8 fc ff ff ff       	call   10000bbb <x87Handler(regs*)+0x595>	10000bbb: R_386_PC32	__subdf3
10000bbf:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000bc2:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000bc5:	83 c4 1c             	add    esp,0x1c
10000bc8:	52                   	push   edx
10000bc9:	50                   	push   eax
10000bca:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000bce:	2d e8 00 00 00       	sub    eax,0xe8
10000bd3:	e9 66 02 00 00       	jmp    10000e3e <x87Handler(regs*)+0x818>
10000bd8:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000bdc:	8d 50 40             	lea    edx,[eax+0x40]
10000bdf:	80 fa 07             	cmp    dl,0x7
10000be2:	77 66                	ja     10000c4a <x87Handler(regs*)+0x624>
10000be4:	8d 75 d0             	lea    esi,[ebp-0x30]
10000be7:	52                   	push   edx
10000be8:	52                   	push   edx
10000be9:	2d c0 00 00 00       	sub    eax,0xc0
10000bee:	50                   	push   eax
10000bef:	56                   	push   esi
10000bf0:	e8 fc ff ff ff       	call   10000bf1 <x87Handler(regs*)+0x5cb>	10000bf1: R_386_PC32	fpuGetReg(int)
10000bf5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000bf8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000bfb:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000bfe:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000c01:	83 ec 0c             	sub    esp,0xc
10000c04:	6a 00                	push   0x0
10000c06:	56                   	push   esi
10000c07:	e8 fc ff ff ff       	call   10000c08 <x87Handler(regs*)+0x5e2>	10000c08: R_386_PC32	fpuGetReg(int)
10000c0c:	51                   	push   ecx
10000c0d:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c10:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c13:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000c16:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000c19:	e8 fc ff ff ff       	call   10000c1a <x87Handler(regs*)+0x5f4>	10000c1a: R_386_PC32	__adddf3
10000c1e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c21:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000c24:	83 c4 1c             	add    esp,0x1c
10000c27:	52                   	push   edx
10000c28:	50                   	push   eax
10000c29:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000c2d:	2d c0 00 00 00       	sub    eax,0xc0
10000c32:	50                   	push   eax
10000c33:	e8 fc ff ff ff       	call   10000c34 <x87Handler(regs*)+0x60e>	10000c34: R_386_PC32	fpuSetReg(int, _Float80)
10000c38:	83 c4 14             	add    esp,0x14
10000c3b:	56                   	push   esi
10000c3c:	e8 fc ff ff ff       	call   10000c3d <x87Handler(regs*)+0x617>	10000c3d: R_386_PC32	fpuPop()
10000c41:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000c45:	e9 6e 06 00 00       	jmp    100012b8 <x87Handler(regs*)+0xc92>
10000c4a:	8d 50 20             	lea    edx,[eax+0x20]
10000c4d:	80 fa 07             	cmp    dl,0x7
10000c50:	77 50                	ja     10000ca2 <x87Handler(regs*)+0x67c>
10000c52:	8d 75 d0             	lea    esi,[ebp-0x30]
10000c55:	52                   	push   edx
10000c56:	52                   	push   edx
10000c57:	2d e0 00 00 00       	sub    eax,0xe0
10000c5c:	50                   	push   eax
10000c5d:	56                   	push   esi
10000c5e:	e8 fc ff ff ff       	call   10000c5f <x87Handler(regs*)+0x639>	10000c5f: R_386_PC32	fpuGetReg(int)
10000c63:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000c66:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000c69:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c6c:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000c6f:	83 ec 0c             	sub    esp,0xc
10000c72:	6a 00                	push   0x0
10000c74:	56                   	push   esi
10000c75:	e8 fc ff ff ff       	call   10000c76 <x87Handler(regs*)+0x650>	10000c76: R_386_PC32	fpuGetReg(int)
10000c7a:	51                   	push   ecx
10000c7b:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000c7e:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000c81:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000c84:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000c87:	e8 fc ff ff ff       	call   10000c88 <x87Handler(regs*)+0x662>	10000c88: R_386_PC32	__subdf3
10000c8c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000c8f:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000c92:	83 c4 1c             	add    esp,0x1c
10000c95:	52                   	push   edx
10000c96:	50                   	push   eax
10000c97:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000c9b:	2d e0 00 00 00       	sub    eax,0xe0
10000ca0:	eb 90                	jmp    10000c32 <x87Handler(regs*)+0x60c>
10000ca2:	8d 50 18             	lea    edx,[eax+0x18]
10000ca5:	80 fa 07             	cmp    dl,0x7
10000ca8:	77 57                	ja     10000d01 <x87Handler(regs*)+0x6db>
10000caa:	8d 75 d0             	lea    esi,[ebp-0x30]
10000cad:	50                   	push   eax
10000cae:	50                   	push   eax
10000caf:	6a 00                	push   0x0
10000cb1:	56                   	push   esi
10000cb2:	e8 fc ff ff ff       	call   10000cb3 <x87Handler(regs*)+0x68d>	10000cb3: R_386_PC32	fpuGetReg(int)
10000cb7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000cba:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000cbd:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000cc0:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000cc3:	83 ec 0c             	sub    esp,0xc
10000cc6:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000cca:	2d e8 00 00 00       	sub    eax,0xe8
10000ccf:	50                   	push   eax
10000cd0:	56                   	push   esi
10000cd1:	e8 fc ff ff ff       	call   10000cd2 <x87Handler(regs*)+0x6ac>	10000cd2: R_386_PC32	fpuGetReg(int)
10000cd6:	50                   	push   eax
10000cd7:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000cda:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000cdd:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ce0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000ce3:	e8 fc ff ff ff       	call   10000ce4 <x87Handler(regs*)+0x6be>	10000ce4: R_386_PC32	__subdf3
10000ce8:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000ceb:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000cee:	83 c4 1c             	add    esp,0x1c
10000cf1:	52                   	push   edx
10000cf2:	50                   	push   eax
10000cf3:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000cf7:	2d e8 00 00 00       	sub    eax,0xe8
10000cfc:	e9 31 ff ff ff       	jmp    10000c32 <x87Handler(regs*)+0x60c>
10000d01:	8d 50 38             	lea    edx,[eax+0x38]
10000d04:	80 fa 07             	cmp    dl,0x7
10000d07:	77 53                	ja     10000d5c <x87Handler(regs*)+0x736>
10000d09:	8d 75 d0             	lea    esi,[ebp-0x30]
10000d0c:	52                   	push   edx
10000d0d:	52                   	push   edx
10000d0e:	2d c8 00 00 00       	sub    eax,0xc8
10000d13:	50                   	push   eax
10000d14:	56                   	push   esi
10000d15:	e8 fc ff ff ff       	call   10000d16 <x87Handler(regs*)+0x6f0>	10000d16: R_386_PC32	fpuGetReg(int)
10000d1a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000d1d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000d20:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000d23:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000d26:	83 ec 0c             	sub    esp,0xc
10000d29:	6a 00                	push   0x0
10000d2b:	56                   	push   esi
10000d2c:	e8 fc ff ff ff       	call   10000d2d <x87Handler(regs*)+0x707>	10000d2d: R_386_PC32	fpuGetReg(int)
10000d31:	51                   	push   ecx
10000d32:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000d35:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000d38:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000d3b:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000d3e:	e8 fc ff ff ff       	call   10000d3f <x87Handler(regs*)+0x719>	10000d3f: R_386_PC32	__muldf3
10000d43:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000d46:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000d49:	83 c4 1c             	add    esp,0x1c
10000d4c:	52                   	push   edx
10000d4d:	50                   	push   eax
10000d4e:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000d52:	2d c8 00 00 00       	sub    eax,0xc8
10000d57:	e9 b2 00 00 00       	jmp    10000e0e <x87Handler(regs*)+0x7e8>
10000d5c:	3c f7                	cmp    al,0xf7
10000d5e:	76 54                	jbe    10000db4 <x87Handler(regs*)+0x78e>
10000d60:	8d 75 d0             	lea    esi,[ebp-0x30]
10000d63:	50                   	push   eax
10000d64:	50                   	push   eax
10000d65:	6a 00                	push   0x0
10000d67:	56                   	push   esi
10000d68:	e8 fc ff ff ff       	call   10000d69 <x87Handler(regs*)+0x743>	10000d69: R_386_PC32	fpuGetReg(int)
10000d6d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000d70:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000d73:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000d76:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000d79:	83 ec 0c             	sub    esp,0xc
10000d7c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000d80:	2d f8 00 00 00       	sub    eax,0xf8
10000d85:	50                   	push   eax
10000d86:	56                   	push   esi
10000d87:	e8 fc ff ff ff       	call   10000d88 <x87Handler(regs*)+0x762>	10000d88: R_386_PC32	fpuGetReg(int)
10000d8c:	50                   	push   eax
10000d8d:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000d90:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000d93:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000d96:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000d99:	e8 fc ff ff ff       	call   10000d9a <x87Handler(regs*)+0x774>	10000d9a: R_386_PC32	__divdf3
10000d9e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000da1:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000da4:	83 c4 1c             	add    esp,0x1c
10000da7:	52                   	push   edx
10000da8:	50                   	push   eax
10000da9:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000dad:	2d f8 00 00 00       	sub    eax,0xf8
10000db2:	eb 5a                	jmp    10000e0e <x87Handler(regs*)+0x7e8>
10000db4:	8d 50 10             	lea    edx,[eax+0x10]
10000db7:	80 fa 07             	cmp    dl,0x7
10000dba:	0f 87 54 01 00 00    	ja     10000f14 <x87Handler(regs*)+0x8ee>
10000dc0:	8d 75 d0             	lea    esi,[ebp-0x30]
10000dc3:	52                   	push   edx
10000dc4:	52                   	push   edx
10000dc5:	2d f0 00 00 00       	sub    eax,0xf0
10000dca:	50                   	push   eax
10000dcb:	56                   	push   esi
10000dcc:	e8 fc ff ff ff       	call   10000dcd <x87Handler(regs*)+0x7a7>	10000dcd: R_386_PC32	fpuGetReg(int)
10000dd1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000dd4:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000dd7:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000dda:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000ddd:	83 ec 0c             	sub    esp,0xc
10000de0:	6a 00                	push   0x0
10000de2:	56                   	push   esi
10000de3:	e8 fc ff ff ff       	call   10000de4 <x87Handler(regs*)+0x7be>	10000de4: R_386_PC32	fpuGetReg(int)
10000de8:	51                   	push   ecx
10000de9:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000dec:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000def:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000df2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000df5:	e8 fc ff ff ff       	call   10000df6 <x87Handler(regs*)+0x7d0>	10000df6: R_386_PC32	__divdf3
10000dfa:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000dfd:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000e00:	83 c4 1c             	add    esp,0x1c
10000e03:	52                   	push   edx
10000e04:	50                   	push   eax
10000e05:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000e09:	2d f0 00 00 00       	sub    eax,0xf0
10000e0e:	50                   	push   eax
10000e0f:	e9 91 fc ff ff       	jmp    10000aa5 <x87Handler(regs*)+0x47f>
10000e14:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000e18:	8d 50 30             	lea    edx,[eax+0x30]
10000e1b:	80 fa 07             	cmp    dl,0x7
10000e1e:	77 24                	ja     10000e44 <x87Handler(regs*)+0x81e>
10000e20:	8d 45 d0             	lea    eax,[ebp-0x30]
10000e23:	52                   	push   edx
10000e24:	52                   	push   edx
10000e25:	6a 00                	push   0x0
10000e27:	50                   	push   eax
10000e28:	e8 fc ff ff ff       	call   10000e29 <x87Handler(regs*)+0x803>	10000e29: R_386_PC32	fpuGetReg(int)
10000e2d:	51                   	push   ecx
10000e2e:	51                   	push   ecx
10000e2f:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000e32:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000e35:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000e39:	2d d0 00 00 00       	sub    eax,0xd0
10000e3e:	50                   	push   eax
10000e3f:	e9 66 f9 ff ff       	jmp    100007aa <x87Handler(regs*)+0x184>
10000e44:	8d 50 28             	lea    edx,[eax+0x28]
10000e47:	80 fa 07             	cmp    dl,0x7
10000e4a:	77 23                	ja     10000e6f <x87Handler(regs*)+0x849>
10000e4c:	8d 75 d0             	lea    esi,[ebp-0x30]
10000e4f:	50                   	push   eax
10000e50:	50                   	push   eax
10000e51:	6a 00                	push   0x0
10000e53:	56                   	push   esi
10000e54:	e8 fc ff ff ff       	call   10000e55 <x87Handler(regs*)+0x82f>	10000e55: R_386_PC32	fpuGetReg(int)
10000e59:	50                   	push   eax
10000e5a:	50                   	push   eax
10000e5b:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000e5e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000e61:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10000e65:	2d d8 00 00 00       	sub    eax,0xd8
10000e6a:	e9 c3 fd ff ff       	jmp    10000c32 <x87Handler(regs*)+0x60c>
10000e6f:	8d 50 20             	lea    edx,[eax+0x20]
10000e72:	80 fa 07             	cmp    dl,0x7
10000e75:	77 41                	ja     10000eb8 <x87Handler(regs*)+0x892>
10000e77:	8d 75 d0             	lea    esi,[ebp-0x30]
10000e7a:	51                   	push   ecx
10000e7b:	51                   	push   ecx
10000e7c:	2d e0 00 00 00       	sub    eax,0xe0
10000e81:	50                   	push   eax
10000e82:	56                   	push   esi
10000e83:	e8 fc ff ff ff       	call   10000e84 <x87Handler(regs*)+0x85e>	10000e84: R_386_PC32	fpuGetReg(int)
10000e88:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000e8b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000e8e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000e91:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000e94:	83 ec 0c             	sub    esp,0xc
10000e97:	6a 00                	push   0x0
10000e99:	56                   	push   esi
10000e9a:	e8 fc ff ff ff       	call   10000e9b <x87Handler(regs*)+0x875>	10000e9b: R_386_PC32	fpuGetReg(int)
10000e9f:	83 c4 1c             	add    esp,0x1c
10000ea2:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000ea5:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000ea8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000eab:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000eae:	e8 fc ff ff ff       	call   10000eaf <x87Handler(regs*)+0x889>	10000eaf: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10000eb3:	e9 60 f8 ff ff       	jmp    10000718 <x87Handler(regs*)+0xf2>
10000eb8:	8d 50 18             	lea    edx,[eax+0x18]
10000ebb:	80 fa 07             	cmp    dl,0x7
10000ebe:	0f 87 ec 04 00 00    	ja     100013b0 <x87Handler(regs*)+0xd8a>
10000ec4:	8d 75 d0             	lea    esi,[ebp-0x30]
10000ec7:	52                   	push   edx
10000ec8:	52                   	push   edx
10000ec9:	2d e8 00 00 00       	sub    eax,0xe8
10000ece:	50                   	push   eax
10000ecf:	56                   	push   esi
10000ed0:	e8 fc ff ff ff       	call   10000ed1 <x87Handler(regs*)+0x8ab>	10000ed1: R_386_PC32	fpuGetReg(int)
10000ed5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000ed8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000edb:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000ede:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000ee1:	83 ec 0c             	sub    esp,0xc
10000ee4:	6a 00                	push   0x0
10000ee6:	56                   	push   esi
10000ee7:	e8 fc ff ff ff       	call   10000ee8 <x87Handler(regs*)+0x8c2>	10000ee8: R_386_PC32	fpuGetReg(int)
10000eec:	83 c4 1c             	add    esp,0x1c
10000eef:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000ef2:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000ef5:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ef8:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000efb:	e8 fc ff ff ff       	call   10000efc <x87Handler(regs*)+0x8d6>	10000efc: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10000f00:	89 34 24             	mov    DWORD PTR [esp],esi
10000f03:	e9 34 fd ff ff       	jmp    10000c3c <x87Handler(regs*)+0x616>
10000f08:	80 7f 01 e9          	cmp    BYTE PTR [edi+0x1],0xe9
10000f0c:	0f 85 c5 01 00 00    	jne    100010d7 <x87Handler(regs*)+0xab1>
10000f12:	eb 08                	jmp    10000f1c <x87Handler(regs*)+0x8f6>
10000f14:	3c d9                	cmp    al,0xd9
10000f16:	0f 85 fb 04 00 00    	jne    10001417 <x87Handler(regs*)+0xdf1>
10000f1c:	8d 75 d0             	lea    esi,[ebp-0x30]
10000f1f:	50                   	push   eax
10000f20:	50                   	push   eax
10000f21:	6a 01                	push   0x1
10000f23:	56                   	push   esi
10000f24:	e8 fc ff ff ff       	call   10000f25 <x87Handler(regs*)+0x8ff>	10000f25: R_386_PC32	fpuGetReg(int)
10000f29:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
10000f2c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
10000f2f:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000f32:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000f35:	83 ec 0c             	sub    esp,0xc
10000f38:	6a 00                	push   0x0
10000f3a:	56                   	push   esi
10000f3b:	e8 fc ff ff ff       	call   10000f3c <x87Handler(regs*)+0x916>	10000f3c: R_386_PC32	fpuGetReg(int)
10000f40:	83 c4 1c             	add    esp,0x1c
10000f43:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000f46:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000f49:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000f4c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000f4f:	e8 fc ff ff ff       	call   10000f50 <x87Handler(regs*)+0x92a>	10000f50: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
10000f54:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000f58:	89 34 24             	mov    DWORD PTR [esp],esi
10000f5b:	e8 fc ff ff ff       	call   10000f5c <x87Handler(regs*)+0x936>	10000f5c: R_386_PC32	fpuPop()
10000f60:	56                   	push   esi
10000f61:	e8 fc ff ff ff       	call   10000f62 <x87Handler(regs*)+0x93c>	10000f62: R_386_PC32	fpuPop()
10000f66:	e9 4d 03 00 00       	jmp    100012b8 <x87Handler(regs*)+0xc92>
10000f6b:	80 7f 01 e0          	cmp    BYTE PTR [edi+0x1],0xe0
10000f6f:	0f 85 f8 04 00 00    	jne    1000146d <x87Handler(regs*)+0xe47>
10000f75:	0f b7 05 00 00 00 00 	movzx  eax,WORD PTR ds:0x0	10000f78: R_386_32	fpuState
10000f7c:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
10000f80:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
10000f84:	e9 96 f7 ff ff       	jmp    1000071f <x87Handler(regs*)+0xf9>
10000f89:	8a 55 e3             	mov    dl,BYTE PTR [ebp-0x1d]
10000f8c:	84 d2                	test   dl,dl
10000f8e:	75 34                	jne    10000fc4 <x87Handler(regs*)+0x99e>
10000f90:	83 ec 0c             	sub    esp,0xc
10000f93:	ff 36                	push   DWORD PTR [esi]
10000f95:	e8 fc ff ff ff       	call   10000f96 <x87Handler(regs*)+0x970>	10000f96: R_386_PC32	__floatunsidf
10000f9a:	59                   	pop    ecx
10000f9b:	5e                   	pop    esi
10000f9c:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000f9f:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000fa2:	8d 45 d0             	lea    eax,[ebp-0x30]
10000fa5:	6a 00                	push   0x0
10000fa7:	50                   	push   eax
10000fa8:	e8 fc ff ff ff       	call   10000fa9 <x87Handler(regs*)+0x983>	10000fa9: R_386_PC32	fpuGetReg(int)
10000fad:	57                   	push   edi
10000fae:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000fb1:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000fb4:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000fb7:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000fba:	e8 fc ff ff ff       	call   10000fbb <x87Handler(regs*)+0x995>	10000fbb: R_386_PC32	__adddf3
10000fbf:	e9 92 04 00 00       	jmp    10001456 <x87Handler(regs*)+0xe30>
10000fc4:	80 fa 01             	cmp    dl,0x1
10000fc7:	75 34                	jne    10000ffd <x87Handler(regs*)+0x9d7>
10000fc9:	83 ec 0c             	sub    esp,0xc
10000fcc:	ff 36                	push   DWORD PTR [esi]
10000fce:	e8 fc ff ff ff       	call   10000fcf <x87Handler(regs*)+0x9a9>	10000fcf: R_386_PC32	__floatunsidf
10000fd3:	59                   	pop    ecx
10000fd4:	5e                   	pop    esi
10000fd5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10000fd8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10000fdb:	8d 45 d0             	lea    eax,[ebp-0x30]
10000fde:	6a 00                	push   0x0
10000fe0:	50                   	push   eax
10000fe1:	e8 fc ff ff ff       	call   10000fe2 <x87Handler(regs*)+0x9bc>	10000fe2: R_386_PC32	fpuGetReg(int)
10000fe6:	57                   	push   edi
10000fe7:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10000fea:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10000fed:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000ff0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10000ff3:	e8 fc ff ff ff       	call   10000ff4 <x87Handler(regs*)+0x9ce>	10000ff4: R_386_PC32	__muldf3
10000ff8:	e9 59 04 00 00       	jmp    10001456 <x87Handler(regs*)+0xe30>
10000ffd:	80 fa 04             	cmp    dl,0x4
10001000:	75 34                	jne    10001036 <x87Handler(regs*)+0xa10>
10001002:	83 ec 0c             	sub    esp,0xc
10001005:	ff 36                	push   DWORD PTR [esi]
10001007:	e8 fc ff ff ff       	call   10001008 <x87Handler(regs*)+0x9e2>	10001008: R_386_PC32	__floatunsidf
1000100c:	59                   	pop    ecx
1000100d:	5e                   	pop    esi
1000100e:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001011:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10001014:	8d 45 d0             	lea    eax,[ebp-0x30]
10001017:	6a 00                	push   0x0
10001019:	50                   	push   eax
1000101a:	e8 fc ff ff ff       	call   1000101b <x87Handler(regs*)+0x9f5>	1000101b: R_386_PC32	fpuGetReg(int)
1000101f:	57                   	push   edi
10001020:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10001023:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10001026:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10001029:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
1000102c:	e8 fc ff ff ff       	call   1000102d <x87Handler(regs*)+0xa07>	1000102d: R_386_PC32	__subdf3
10001031:	e9 20 04 00 00       	jmp    10001456 <x87Handler(regs*)+0xe30>
10001036:	80 fa 05             	cmp    dl,0x5
10001039:	75 2c                	jne    10001067 <x87Handler(regs*)+0xa41>
1000103b:	8d 45 d0             	lea    eax,[ebp-0x30]
1000103e:	52                   	push   edx
1000103f:	52                   	push   edx
10001040:	6a 00                	push   0x0
10001042:	50                   	push   eax
10001043:	e8 fc ff ff ff       	call   10001044 <x87Handler(regs*)+0xa1e>	10001044: R_386_PC32	fpuGetReg(int)
10001048:	ff 36                	push   DWORD PTR [esi]
1000104a:	e8 fc ff ff ff       	call   1000104b <x87Handler(regs*)+0xa25>	1000104b: R_386_PC32	__floatunsidf
1000104f:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001052:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10001055:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10001058:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
1000105b:	52                   	push   edx
1000105c:	50                   	push   eax
1000105d:	e8 fc ff ff ff       	call   1000105e <x87Handler(regs*)+0xa38>	1000105e: R_386_PC32	__subdf3
10001062:	e9 ef 03 00 00       	jmp    10001456 <x87Handler(regs*)+0xe30>
10001067:	80 fa 06             	cmp    dl,0x6
1000106a:	75 34                	jne    100010a0 <x87Handler(regs*)+0xa7a>
1000106c:	83 ec 0c             	sub    esp,0xc
1000106f:	ff 36                	push   DWORD PTR [esi]
10001071:	e8 fc ff ff ff       	call   10001072 <x87Handler(regs*)+0xa4c>	10001072: R_386_PC32	__floatunsidf
10001076:	59                   	pop    ecx
10001077:	5e                   	pop    esi
10001078:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000107b:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
1000107e:	8d 45 d0             	lea    eax,[ebp-0x30]
10001081:	6a 00                	push   0x0
10001083:	50                   	push   eax
10001084:	e8 fc ff ff ff       	call   10001085 <x87Handler(regs*)+0xa5f>	10001085: R_386_PC32	fpuGetReg(int)
10001089:	57                   	push   edi
1000108a:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
1000108d:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10001090:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10001093:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001096:	e8 fc ff ff ff       	call   10001097 <x87Handler(regs*)+0xa71>	10001097: R_386_PC32	__divdf3
1000109b:	e9 b6 03 00 00       	jmp    10001456 <x87Handler(regs*)+0xe30>
100010a0:	31 c0                	xor    eax,eax
100010a2:	80 fa 07             	cmp    dl,0x7
100010a5:	0f 85 06 04 00 00    	jne    100014b1 <x87Handler(regs*)+0xe8b>
100010ab:	8d 45 d0             	lea    eax,[ebp-0x30]
100010ae:	52                   	push   edx
100010af:	52                   	push   edx
100010b0:	6a 00                	push   0x0
100010b2:	50                   	push   eax
100010b3:	e8 fc ff ff ff       	call   100010b4 <x87Handler(regs*)+0xa8e>	100010b4: R_386_PC32	fpuGetReg(int)
100010b8:	ff 36                	push   DWORD PTR [esi]
100010ba:	e8 fc ff ff ff       	call   100010bb <x87Handler(regs*)+0xa95>	100010bb: R_386_PC32	__floatunsidf
100010bf:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100010c2:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100010c5:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100010c8:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100010cb:	52                   	push   edx
100010cc:	50                   	push   eax
100010cd:	e8 fc ff ff ff       	call   100010ce <x87Handler(regs*)+0xaa8>	100010ce: R_386_PC32	__divdf3
100010d2:	e9 7f 03 00 00       	jmp    10001456 <x87Handler(regs*)+0xe30>
100010d7:	8a 55 e3             	mov    dl,BYTE PTR [ebp-0x1d]
100010da:	80 fa 01             	cmp    dl,0x1
100010dd:	75 37                	jne    10001116 <x87Handler(regs*)+0xaf0>
100010df:	8b 06                	mov    eax,DWORD PTR [esi]
100010e1:	31 d2                	xor    edx,edx
100010e3:	57                   	push   edi
100010e4:	57                   	push   edi
100010e5:	52                   	push   edx
100010e6:	50                   	push   eax
100010e7:	e8 fc ff ff ff       	call   100010e8 <x87Handler(regs*)+0xac2>	100010e8: R_386_PC32	__floatdidf
100010ec:	59                   	pop    ecx
100010ed:	5e                   	pop    esi
100010ee:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100010f1:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100010f4:	8d 45 d0             	lea    eax,[ebp-0x30]
100010f7:	6a 00                	push   0x0
100010f9:	50                   	push   eax
100010fa:	e8 fc ff ff ff       	call   100010fb <x87Handler(regs*)+0xad5>	100010fb: R_386_PC32	fpuGetReg(int)
100010ff:	57                   	push   edi
10001100:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10001103:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10001106:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10001109:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
1000110c:	e8 fc ff ff ff       	call   1000110d <x87Handler(regs*)+0xae7>	1000110d: R_386_PC32	__muldf3
10001111:	e9 40 03 00 00       	jmp    10001456 <x87Handler(regs*)+0xe30>
10001116:	80 fa 04             	cmp    dl,0x4
10001119:	75 37                	jne    10001152 <x87Handler(regs*)+0xb2c>
1000111b:	8b 06                	mov    eax,DWORD PTR [esi]
1000111d:	31 d2                	xor    edx,edx
1000111f:	56                   	push   esi
10001120:	56                   	push   esi
10001121:	52                   	push   edx
10001122:	50                   	push   eax
10001123:	e8 fc ff ff ff       	call   10001124 <x87Handler(regs*)+0xafe>	10001124: R_386_PC32	__floatdidf
10001128:	5f                   	pop    edi
10001129:	59                   	pop    ecx
1000112a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000112d:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10001130:	8d 45 d0             	lea    eax,[ebp-0x30]
10001133:	6a 00                	push   0x0
10001135:	50                   	push   eax
10001136:	e8 fc ff ff ff       	call   10001137 <x87Handler(regs*)+0xb11>	10001137: R_386_PC32	fpuGetReg(int)
1000113b:	56                   	push   esi
1000113c:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
1000113f:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10001142:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10001145:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001148:	e8 fc ff ff ff       	call   10001149 <x87Handler(regs*)+0xb23>	10001149: R_386_PC32	__subdf3
1000114d:	e9 04 03 00 00       	jmp    10001456 <x87Handler(regs*)+0xe30>
10001152:	31 c0                	xor    eax,eax
10001154:	80 fa 07             	cmp    dl,0x7
10001157:	0f 85 54 03 00 00    	jne    100014b1 <x87Handler(regs*)+0xe8b>
1000115d:	8d 45 d0             	lea    eax,[ebp-0x30]
10001160:	51                   	push   ecx
10001161:	51                   	push   ecx
10001162:	6a 00                	push   0x0
10001164:	50                   	push   eax
10001165:	e8 fc ff ff ff       	call   10001166 <x87Handler(regs*)+0xb40>	10001166: R_386_PC32	fpuGetReg(int)
1000116a:	8b 06                	mov    eax,DWORD PTR [esi]
1000116c:	31 d2                	xor    edx,edx
1000116e:	83 ec 0c             	sub    esp,0xc
10001171:	52                   	push   edx
10001172:	50                   	push   eax
10001173:	e8 fc ff ff ff       	call   10001174 <x87Handler(regs*)+0xb4e>	10001174: R_386_PC32	__floatdidf
10001178:	83 c4 10             	add    esp,0x10
1000117b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000117e:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10001181:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10001184:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001187:	52                   	push   edx
10001188:	50                   	push   eax
10001189:	e8 fc ff ff ff       	call   1000118a <x87Handler(regs*)+0xb64>	1000118a: R_386_PC32	__divdf3
1000118e:	e9 c3 02 00 00       	jmp    10001456 <x87Handler(regs*)+0xe30>
10001193:	31 c0                	xor    eax,eax
10001195:	80 fa 03             	cmp    dl,0x3
10001198:	0f 85 13 03 00 00    	jne    100014b1 <x87Handler(regs*)+0xe8b>
1000119e:	8d 45 d0             	lea    eax,[ebp-0x30]
100011a1:	83 ec 0c             	sub    esp,0xc
100011a4:	50                   	push   eax
100011a5:	e8 fc ff ff ff       	call   100011a6 <x87Handler(regs*)+0xb80>	100011a6: R_386_PC32	fpuPop()
100011aa:	83 ec 0c             	sub    esp,0xc
100011ad:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100011b0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011b3:	e8 fc ff ff ff       	call   100011b4 <x87Handler(regs*)+0xb8e>	100011b4: R_386_PC32	__fixdfdi
100011b8:	e9 3a f7 ff ff       	jmp    100008f7 <x87Handler(regs*)+0x2d1>
100011bd:	8a 55 e3             	mov    dl,BYTE PTR [ebp-0x1d]
100011c0:	84 d2                	test   dl,dl
100011c2:	75 36                	jne    100011fa <x87Handler(regs*)+0xbd4>
100011c4:	50                   	push   eax
100011c5:	50                   	push   eax
100011c6:	ff 76 04             	push   DWORD PTR [esi+0x4]
100011c9:	ff 36                	push   DWORD PTR [esi]
100011cb:	e8 fc ff ff ff       	call   100011cc <x87Handler(regs*)+0xba6>	100011cc: R_386_PC32	__floatundidf
100011d0:	59                   	pop    ecx
100011d1:	5e                   	pop    esi
100011d2:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100011d5:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100011d8:	8d 45 d0             	lea    eax,[ebp-0x30]
100011db:	6a 00                	push   0x0
100011dd:	50                   	push   eax
100011de:	e8 fc ff ff ff       	call   100011df <x87Handler(regs*)+0xbb9>	100011df: R_386_PC32	fpuGetReg(int)
100011e3:	57                   	push   edi
100011e4:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
100011e7:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
100011ea:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100011ed:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100011f0:	e8 fc ff ff ff       	call   100011f1 <x87Handler(regs*)+0xbcb>	100011f1: R_386_PC32	__adddf3
100011f5:	e9 5c 02 00 00       	jmp    10001456 <x87Handler(regs*)+0xe30>
100011fa:	80 fa 01             	cmp    dl,0x1
100011fd:	75 36                	jne    10001235 <x87Handler(regs*)+0xc0f>
100011ff:	57                   	push   edi
10001200:	57                   	push   edi
10001201:	ff 76 04             	push   DWORD PTR [esi+0x4]
10001204:	ff 36                	push   DWORD PTR [esi]
10001206:	e8 fc ff ff ff       	call   10001207 <x87Handler(regs*)+0xbe1>	10001207: R_386_PC32	__floatundidf
1000120b:	59                   	pop    ecx
1000120c:	5e                   	pop    esi
1000120d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001210:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10001213:	8d 45 d0             	lea    eax,[ebp-0x30]
10001216:	6a 00                	push   0x0
10001218:	50                   	push   eax
10001219:	e8 fc ff ff ff       	call   1000121a <x87Handler(regs*)+0xbf4>	1000121a: R_386_PC32	fpuGetReg(int)
1000121e:	57                   	push   edi
1000121f:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10001222:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10001225:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10001228:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
1000122b:	e8 fc ff ff ff       	call   1000122c <x87Handler(regs*)+0xc06>	1000122c: R_386_PC32	__muldf3
10001230:	e9 21 02 00 00       	jmp    10001456 <x87Handler(regs*)+0xe30>
10001235:	80 fa 02             	cmp    dl,0x2
10001238:	75 38                	jne    10001272 <x87Handler(regs*)+0xc4c>
1000123a:	57                   	push   edi
1000123b:	57                   	push   edi
1000123c:	ff 76 04             	push   DWORD PTR [esi+0x4]
1000123f:	ff 36                	push   DWORD PTR [esi]
10001241:	e8 fc ff ff ff       	call   10001242 <x87Handler(regs*)+0xc1c>	10001242: R_386_PC32	__floatundidf
10001246:	59                   	pop    ecx
10001247:	5e                   	pop    esi
10001248:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000124b:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
1000124e:	8d 45 d0             	lea    eax,[ebp-0x30]
10001251:	6a 00                	push   0x0
10001253:	50                   	push   eax
10001254:	e8 fc ff ff ff       	call   10001255 <x87Handler(regs*)+0xc2f>	10001255: R_386_PC32	fpuGetReg(int)
10001259:	83 c4 0c             	add    esp,0xc
1000125c:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
1000125f:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10001262:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10001265:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001268:	e8 fc ff ff ff       	call   10001269 <x87Handler(regs*)+0xc43>	10001269: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
1000126d:	e9 56 f6 ff ff       	jmp    100008c8 <x87Handler(regs*)+0x2a2>
10001272:	80 fa 03             	cmp    dl,0x3
10001275:	75 49                	jne    100012c0 <x87Handler(regs*)+0xc9a>
10001277:	50                   	push   eax
10001278:	50                   	push   eax
10001279:	ff 76 04             	push   DWORD PTR [esi+0x4]
1000127c:	ff 36                	push   DWORD PTR [esi]
1000127e:	e8 fc ff ff ff       	call   1000127f <x87Handler(regs*)+0xc59>	1000127f: R_386_PC32	__floatundidf
10001283:	59                   	pop    ecx
10001284:	5e                   	pop    esi
10001285:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001288:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
1000128b:	8d 75 d0             	lea    esi,[ebp-0x30]
1000128e:	6a 00                	push   0x0
10001290:	56                   	push   esi
10001291:	e8 fc ff ff ff       	call   10001292 <x87Handler(regs*)+0xc6c>	10001292: R_386_PC32	fpuGetReg(int)
10001296:	83 c4 0c             	add    esp,0xc
10001299:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
1000129c:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
1000129f:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100012a2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100012a5:	e8 fc ff ff ff       	call   100012a6 <x87Handler(regs*)+0xc80>	100012a6: R_386_PC32	fpuUnorderedCompare(_Float80, _Float80)
100012aa:	89 34 24             	mov    DWORD PTR [esp],esi
100012ad:	e8 fc ff ff ff       	call   100012ae <x87Handler(regs*)+0xc88>	100012ae: R_386_PC32	fpuPop()
100012b2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100012b5:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
100012b8:	83 c4 0c             	add    esp,0xc
100012bb:	e9 5f f4 ff ff       	jmp    1000071f <x87Handler(regs*)+0xf9>
100012c0:	80 fa 04             	cmp    dl,0x4
100012c3:	75 36                	jne    100012fb <x87Handler(regs*)+0xcd5>
100012c5:	51                   	push   ecx
100012c6:	51                   	push   ecx
100012c7:	ff 76 04             	push   DWORD PTR [esi+0x4]
100012ca:	ff 36                	push   DWORD PTR [esi]
100012cc:	e8 fc ff ff ff       	call   100012cd <x87Handler(regs*)+0xca7>	100012cd: R_386_PC32	__floatundidf
100012d1:	5e                   	pop    esi
100012d2:	5f                   	pop    edi
100012d3:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
100012d6:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
100012d9:	8d 45 d0             	lea    eax,[ebp-0x30]
100012dc:	6a 00                	push   0x0
100012de:	50                   	push   eax
100012df:	e8 fc ff ff ff       	call   100012e0 <x87Handler(regs*)+0xcba>	100012e0: R_386_PC32	fpuGetReg(int)
100012e4:	50                   	push   eax
100012e5:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
100012e8:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
100012eb:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100012ee:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100012f1:	e8 fc ff ff ff       	call   100012f2 <x87Handler(regs*)+0xccc>	100012f2: R_386_PC32	__subdf3
100012f6:	e9 5b 01 00 00       	jmp    10001456 <x87Handler(regs*)+0xe30>
100012fb:	80 fa 05             	cmp    dl,0x5
100012fe:	75 35                	jne    10001335 <x87Handler(regs*)+0xd0f>
10001300:	8d 45 d0             	lea    eax,[ebp-0x30]
10001303:	52                   	push   edx
10001304:	52                   	push   edx
10001305:	6a 00                	push   0x0
10001307:	50                   	push   eax
10001308:	e8 fc ff ff ff       	call   10001309 <x87Handler(regs*)+0xce3>	10001309: R_386_PC32	fpuGetReg(int)
1000130d:	83 ec 0c             	sub    esp,0xc
10001310:	ff 76 04             	push   DWORD PTR [esi+0x4]
10001313:	ff 36                	push   DWORD PTR [esi]
10001315:	e8 fc ff ff ff       	call   10001316 <x87Handler(regs*)+0xcf0>	10001316: R_386_PC32	__floatundidf
1000131a:	83 c4 10             	add    esp,0x10
1000131d:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001320:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10001323:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10001326:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001329:	52                   	push   edx
1000132a:	50                   	push   eax
1000132b:	e8 fc ff ff ff       	call   1000132c <x87Handler(regs*)+0xd06>	1000132c: R_386_PC32	__subdf3
10001330:	e9 21 01 00 00       	jmp    10001456 <x87Handler(regs*)+0xe30>
10001335:	80 fa 06             	cmp    dl,0x6
10001338:	75 36                	jne    10001370 <x87Handler(regs*)+0xd4a>
1000133a:	50                   	push   eax
1000133b:	50                   	push   eax
1000133c:	ff 76 04             	push   DWORD PTR [esi+0x4]
1000133f:	ff 36                	push   DWORD PTR [esi]
10001341:	e8 fc ff ff ff       	call   10001342 <x87Handler(regs*)+0xd1c>	10001342: R_386_PC32	__floatundidf
10001346:	59                   	pop    ecx
10001347:	5e                   	pop    esi
10001348:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000134b:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
1000134e:	8d 45 d0             	lea    eax,[ebp-0x30]
10001351:	6a 00                	push   0x0
10001353:	50                   	push   eax
10001354:	e8 fc ff ff ff       	call   10001355 <x87Handler(regs*)+0xd2f>	10001355: R_386_PC32	fpuGetReg(int)
10001359:	57                   	push   edi
1000135a:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
1000135d:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
10001360:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10001363:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001366:	e8 fc ff ff ff       	call   10001367 <x87Handler(regs*)+0xd41>	10001367: R_386_PC32	__divdf3
1000136b:	e9 e6 00 00 00       	jmp    10001456 <x87Handler(regs*)+0xe30>
10001370:	31 c0                	xor    eax,eax
10001372:	80 fa 07             	cmp    dl,0x7
10001375:	0f 85 36 01 00 00    	jne    100014b1 <x87Handler(regs*)+0xe8b>
1000137b:	8d 45 d0             	lea    eax,[ebp-0x30]
1000137e:	57                   	push   edi
1000137f:	57                   	push   edi
10001380:	6a 00                	push   0x0
10001382:	50                   	push   eax
10001383:	e8 fc ff ff ff       	call   10001384 <x87Handler(regs*)+0xd5e>	10001384: R_386_PC32	fpuGetReg(int)
10001388:	83 ec 0c             	sub    esp,0xc
1000138b:	ff 76 04             	push   DWORD PTR [esi+0x4]
1000138e:	ff 36                	push   DWORD PTR [esi]
10001390:	e8 fc ff ff ff       	call   10001391 <x87Handler(regs*)+0xd6b>	10001391: R_386_PC32	__floatundidf
10001395:	83 c4 10             	add    esp,0x10
10001398:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000139b:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
1000139e:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100013a1:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100013a4:	52                   	push   edx
100013a5:	50                   	push   eax
100013a6:	e8 fc ff ff ff       	call   100013a7 <x87Handler(regs*)+0xd81>	100013a7: R_386_PC32	__divdf3
100013ab:	e9 a6 00 00 00       	jmp    10001456 <x87Handler(regs*)+0xe30>
100013b0:	8a 55 e3             	mov    dl,BYTE PTR [ebp-0x1d]
100013b3:	84 d2                	test   dl,dl
100013b5:	75 11                	jne    100013c8 <x87Handler(regs*)+0xda2>
100013b7:	51                   	push   ecx
100013b8:	51                   	push   ecx
100013b9:	ff 76 04             	push   DWORD PTR [esi+0x4]
100013bc:	ff 36                	push   DWORD PTR [esi]
100013be:	e8 fc ff ff ff       	call   100013bf <x87Handler(regs*)+0xd99>	100013bf: R_386_PC32	__floatundidf
100013c3:	e9 f1 f4 ff ff       	jmp    100008b9 <x87Handler(regs*)+0x293>
100013c8:	80 fa 02             	cmp    dl,0x2
100013cb:	75 20                	jne    100013ed <x87Handler(regs*)+0xdc7>
100013cd:	8d 45 d0             	lea    eax,[ebp-0x30]
100013d0:	52                   	push   edx
100013d1:	52                   	push   edx
100013d2:	6a 00                	push   0x0
100013d4:	50                   	push   eax
100013d5:	e8 fc ff ff ff       	call   100013d6 <x87Handler(regs*)+0xdb0>	100013d6: R_386_PC32	fpuGetReg(int)
100013da:	83 ec 0c             	sub    esp,0xc
100013dd:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
100013e0:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100013e3:	e8 fc ff ff ff       	call   100013e4 <x87Handler(regs*)+0xdbe>	100013e4: R_386_PC32	__fixunsdfdi
100013e8:	e9 ba 00 00 00       	jmp    100014a7 <x87Handler(regs*)+0xe81>
100013ed:	31 c0                	xor    eax,eax
100013ef:	80 fa 03             	cmp    dl,0x3
100013f2:	0f 85 b9 00 00 00    	jne    100014b1 <x87Handler(regs*)+0xe8b>
100013f8:	8d 45 d0             	lea    eax,[ebp-0x30]
100013fb:	83 ec 0c             	sub    esp,0xc
100013fe:	50                   	push   eax
100013ff:	e8 fc ff ff ff       	call   10001400 <x87Handler(regs*)+0xdda>	10001400: R_386_PC32	fpuPop()
10001404:	83 ec 0c             	sub    esp,0xc
10001407:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
1000140a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
1000140d:	e8 fc ff ff ff       	call   1000140e <x87Handler(regs*)+0xde8>	1000140e: R_386_PC32	__fixunsdfdi
10001412:	e9 90 00 00 00       	jmp    100014a7 <x87Handler(regs*)+0xe81>
10001417:	31 c0                	xor    eax,eax
10001419:	80 7d e3 01          	cmp    BYTE PTR [ebp-0x1d],0x1
1000141d:	0f 85 8e 00 00 00    	jne    100014b1 <x87Handler(regs*)+0xe8b>
10001423:	0f b7 06             	movzx  eax,WORD PTR [esi]
10001426:	31 d2                	xor    edx,edx
10001428:	51                   	push   ecx
10001429:	51                   	push   ecx
1000142a:	52                   	push   edx
1000142b:	50                   	push   eax
1000142c:	e8 fc ff ff ff       	call   1000142d <x87Handler(regs*)+0xe07>	1000142d: R_386_PC32	__floatdidf
10001431:	5e                   	pop    esi
10001432:	5f                   	pop    edi
10001433:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
10001436:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
10001439:	8d 45 d0             	lea    eax,[ebp-0x30]
1000143c:	6a 00                	push   0x0
1000143e:	50                   	push   eax
1000143f:	e8 fc ff ff ff       	call   10001440 <x87Handler(regs*)+0xe1a>	10001440: R_386_PC32	fpuGetReg(int)
10001444:	50                   	push   eax
10001445:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
10001448:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
1000144b:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
1000144e:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
10001451:	e8 fc ff ff ff       	call   10001452 <x87Handler(regs*)+0xe2c>	10001452: R_386_PC32	__muldf3
10001456:	83 c4 0c             	add    esp,0xc
10001459:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
1000145c:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
1000145f:	52                   	push   edx
10001460:	50                   	push   eax
10001461:	6a 00                	push   0x0
10001463:	e8 fc ff ff ff       	call   10001464 <x87Handler(regs*)+0xe3e>	10001464: R_386_PC32	fpuSetReg(int, _Float80)
10001468:	e9 8c f4 ff ff       	jmp    100008f9 <x87Handler(regs*)+0x2d3>
1000146d:	8a 55 e3             	mov    dl,BYTE PTR [ebp-0x1d]
10001470:	80 fa 05             	cmp    dl,0x5
10001473:	75 11                	jne    10001486 <x87Handler(regs*)+0xe60>
10001475:	57                   	push   edi
10001476:	57                   	push   edi
10001477:	ff 76 04             	push   DWORD PTR [esi+0x4]
1000147a:	ff 36                	push   DWORD PTR [esi]
1000147c:	e8 fc ff ff ff       	call   1000147d <x87Handler(regs*)+0xe57>	1000147d: R_386_PC32	__floatundidf
10001481:	e9 33 f4 ff ff       	jmp    100008b9 <x87Handler(regs*)+0x293>
10001486:	31 c0                	xor    eax,eax
10001488:	80 fa 07             	cmp    dl,0x7
1000148b:	75 24                	jne    100014b1 <x87Handler(regs*)+0xe8b>
1000148d:	8d 45 d0             	lea    eax,[ebp-0x30]
10001490:	83 ec 0c             	sub    esp,0xc
10001493:	50                   	push   eax
10001494:	e8 fc ff ff ff       	call   10001495 <x87Handler(regs*)+0xe6f>	10001495: R_386_PC32	fpuPop()
10001499:	83 ec 0c             	sub    esp,0xc
1000149c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
1000149f:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
100014a2:	e8 fc ff ff ff       	call   100014a3 <x87Handler(regs*)+0xe7d>	100014a3: R_386_PC32	__fixdfdi
100014a7:	89 06                	mov    DWORD PTR [esi],eax
100014a9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
100014ac:	e9 48 f4 ff ff       	jmp    100008f9 <x87Handler(regs*)+0x2d3>
100014b1:	8d 65 f4             	lea    esp,[ebp-0xc]
100014b4:	5b                   	pop    ebx
100014b5:	5e                   	pop    esi
100014b6:	5f                   	pop    edi
100014b7:	5d                   	pop    ebp
100014b8:	c3                   	ret    

100014b9 <begin()>:
100014b9:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100014bb: R_386_32	x87FaultIntercept
	100014bf: R_386_32	x87Handler(regs*)
100014c3:	c3                   	ret    

100014c4 <_GLOBAL__sub_I__Z5startv>:
100014c4:	c7 05 44 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x44,0x0	100014c6: R_386_32	fpuState
100014ce:	c3                   	ret    
100014cf:	65 6d                	gs ins DWORD PTR es:[edi],dx
100014d1:	38 30                	cmp    BYTE PTR [eax],dh
100014d3:	38 37                	cmp    BYTE PTR [edi],dh
100014d5:	20 62 61             	and    BYTE PTR [edx+0x61],ah
100014d8:	64 20 72 65          	and    BYTE PTR fs:[edx+0x65],dh
100014dc:	67 20 73 65          	and    BYTE PTR [bp+di+0x65],dh
100014e0:	74 00                	je     100014e2 <_GLOBAL__sub_I__Z5startv+0x1e>
100014e2:	72 2d                	jb     10001511 <_GLOBAL__sub_I__Z5startv+0x4d>
100014e4:	3e 65 73 70          	ds gs jae 10001558 <_GLOBAL__sub_I__Z5startv+0x94>
100014e8:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
100014ee:	58                   	pop    eax
100014ef:	0a 00                	or     al,BYTE PTR [eax]
100014f1:	78 38                	js     1000152b <_GLOBAL__sub_I__Z5startv+0x67>
100014f3:	37                   	aaa    
100014f4:	3a 20                	cmp    ah,BYTE PTR [eax]
100014f6:	25 58 20 25 58       	and    eax,0x58252058
100014fb:	20 25 58 20 25 58    	and    BYTE PTR ds:0x58252058,ah
10001501:	0a 00                	or     al,BYTE PTR [eax]
10001503:	64 65 63 6f 64       	fs arpl WORD PTR gs:[edi+0x64],bp
10001508:	65 64 20 61 64       	gs and BYTE PTR fs:[ecx+0x64],ah
1000150d:	64 72 65             	fs jb  10001575 <_DYNAMIC+0x19>
10001510:	73 73                	jae    10001585 <_DYNAMIC+0x29>
10001512:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
10001518:	58                   	pop    eax
10001519:	0a 00                	or     al,BYTE PTR [eax]
1000151b:	90                   	nop
1000151c:	b8 06 00 10 de       	mov    eax,0xde100006	1000151c: R_386_32	.text
	10001520: R_386_32	.text
10001521:	06                   	push   es
10001522:	00 10                	add    BYTE PTR [eax],dl
10001524:	b8 07 00 10 b8       	mov    eax,0xb8100007	10001524: R_386_32	.text
	10001528: R_386_32	.text
10001529:	07                   	pop    es
1000152a:	00 10                	add    BYTE PTR [eax],dl
1000152c:	b8 07 00 10 b8       	mov    eax,0xb8100007	1000152c: R_386_32	.text
	10001530: R_386_32	.text
10001531:	07                   	pop    es
10001532:	00 10                	add    BYTE PTR [eax],dl
10001534:	b8 07 00 10 b8       	mov    eax,0xb8100007	10001534: R_386_32	.text
	10001538: R_386_32	.text
10001539:	07                   	pop    es
1000153a:	00 10                	add    BYTE PTR [eax],dl
1000153c:	26 07                	es pop es	1000153c: R_386_32	.text
1000153e:	00 10                	add    BYTE PTR [eax],dl
10001540:	2f                   	das    	10001540: R_386_32	.text
10001541:	07                   	pop    es
10001542:	00 10                	add    BYTE PTR [eax],dl
10001544:	2f                   	das    	10001544: R_386_32	.text
10001545:	07                   	pop    es
10001546:	00 10                	add    BYTE PTR [eax],dl
10001548:	3c 07                	cmp    al,0x7	10001548: R_386_32	.text
1000154a:	00 10                	add    BYTE PTR [eax],dl
1000154c:	2f                   	das    	1000154c: R_386_32	.text
1000154d:	07                   	pop    es
1000154e:	00 10                	add    BYTE PTR [eax],dl
10001550:	2f                   	das    	10001550: R_386_32	.text
10001551:	07                   	pop    es
10001552:	00 10                	add    BYTE PTR [eax],dl
10001554:	2f                   	das    	10001554: R_386_32	.text
10001555:	07                   	pop    es
10001556:	00 10                	add    BYTE PTR [eax],dl
