
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 bc f9 00 00       	call   c000f9dc <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 43 74 02 00       	call   c0027468 <_init>
c0000025:	c3                   	ret    
c0000026:	bb c4 7f 02 c0       	mov    ebx,0xc0027fc4
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb d0 7f 02 c0    	cmp    ebx,0xc0027fd0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 c4 02 c0       	mov    eax,0xc002c498
c0000049:	3d 98 c4 02 c0       	cmp    eax,0xc002c498
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 c4 02 c0       	push   0xc002c498
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 c4 02 c0       	mov    eax,0xc002c498
c0000075:	2d 98 c4 02 c0       	sub    eax,0xc002c498
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 c4 02 c0       	push   0xc002c498
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002cac8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb d8 7f 02 c0       	mov    ebx,0xc0027fd8
c00000bb:	81 eb d4 7f 02 c0    	sub    ebx,0xc0027fd4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be d4 7f 02 c0       	mov    esi,0xc0027fd4
c00000ca:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc ca 02 c0       	mov    ds:0xc002cacc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc ca 02 c0       	mov    eax,ds:0xc002cacc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 c4 02 c0       	push   0xc002c498
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 ca 02 c0 01 	mov    BYTE PTR ds:0xc002cac8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 ca 02 c0       	push   0xc002cad0
c000012c:	68 98 c4 02 c0       	push   0xc002c498
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 8f c9 01 00       	call   c001cd2a <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 00 23 01 00       	call   c00126b3 <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 6d c9 01 00       	call   c001cd2a <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 bb cd 01 00       	call   c001d197 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 69 d3 01 00       	call   c001d74e <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 10 cf 02 c0 	lgdtd  ds:0xc002cf10
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 ca 3f 01 00       	call   c00145a3 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>

c000063d <memcmp>:
c000063d:	56                   	push   esi
c000063e:	53                   	push   ebx
c000063f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000643:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000647:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000064b:	01 d6                	add    esi,edx
c000064d:	39 f2                	cmp    edx,esi
c000064f:	74 0e                	je     c000065f <memcmp+0x22>
c0000651:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000654:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000657:	38 c8                	cmp    al,cl
c0000659:	75 08                	jne    c0000663 <memcmp+0x26>
c000065b:	42                   	inc    edx
c000065c:	43                   	inc    ebx
c000065d:	eb ee                	jmp    c000064d <memcmp+0x10>
c000065f:	31 c0                	xor    eax,eax
c0000661:	eb 02                	jmp    c0000665 <memcmp+0x28>
c0000663:	29 c8                	sub    eax,ecx
c0000665:	5b                   	pop    ebx
c0000666:	5e                   	pop    esi
c0000667:	c3                   	ret    

c0000668 <memmove>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000672:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000676:	39 c8                	cmp    eax,ecx
c0000678:	73 12                	jae    c000068c <memmove+0x24>
c000067a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000067d:	89 c3                	mov    ebx,eax
c000067f:	39 f1                	cmp    ecx,esi
c0000681:	74 1a                	je     c000069d <memmove+0x35>
c0000683:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000685:	43                   	inc    ebx
c0000686:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000689:	41                   	inc    ecx
c000068a:	eb f3                	jmp    c000067f <memmove+0x17>
c000068c:	76 0f                	jbe    c000069d <memmove+0x35>
c000068e:	85 d2                	test   edx,edx
c0000690:	74 0b                	je     c000069d <memmove+0x35>
c0000692:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000696:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000069a:	4a                   	dec    edx
c000069b:	eb f1                	jmp    c000068e <memmove+0x26>
c000069d:	5b                   	pop    ebx
c000069e:	5e                   	pop    esi
c000069f:	c3                   	ret    

c00006a0 <memcpy>:
c00006a0:	56                   	push   esi
c00006a1:	53                   	push   ebx
c00006a2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00006aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00006ae:	89 f1                	mov    ecx,esi
c00006b0:	01 d3                	add    ebx,edx
c00006b2:	39 da                	cmp    edx,ebx
c00006b4:	74 09                	je     c00006bf <memcpy+0x1f>
c00006b6:	8a 02                	mov    al,BYTE PTR [edx]
c00006b8:	41                   	inc    ecx
c00006b9:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00006bc:	42                   	inc    edx
c00006bd:	eb f3                	jmp    c00006b2 <memcpy+0x12>
c00006bf:	89 f0                	mov    eax,esi
c00006c1:	5b                   	pop    ebx
c00006c2:	5e                   	pop    esi
c00006c3:	c3                   	ret    

c00006c4 <memset>:
c00006c4:	53                   	push   ebx
c00006c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006cd:	89 c2                	mov    edx,eax
c00006cf:	01 c1                	add    ecx,eax
c00006d1:	39 ca                	cmp    edx,ecx
c00006d3:	74 0a                	je     c00006df <memset+0x1b>
c00006d5:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006d9:	42                   	inc    edx
c00006da:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006dd:	eb f2                	jmp    c00006d1 <memset+0xd>
c00006df:	5b                   	pop    ebx
c00006e0:	c3                   	ret    

c00006e1 <strlen>:
c00006e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006e5:	31 c0                	xor    eax,eax
c00006e7:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006eb:	74 03                	je     c00006f0 <strlen+0xf>
c00006ed:	40                   	inc    eax
c00006ee:	eb f7                	jmp    c00006e7 <strlen+0x6>
c00006f0:	c3                   	ret    

c00006f1 <strpbrk>:
c00006f1:	53                   	push   ebx
c00006f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006f6:	8a 08                	mov    cl,BYTE PTR [eax]
c00006f8:	84 c9                	test   cl,cl
c00006fa:	74 14                	je     c0000710 <strpbrk+0x1f>
c00006fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000700:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000702:	84 db                	test   bl,bl
c0000704:	74 07                	je     c000070d <strpbrk+0x1c>
c0000706:	38 cb                	cmp    bl,cl
c0000708:	74 08                	je     c0000712 <strpbrk+0x21>
c000070a:	42                   	inc    edx
c000070b:	eb f3                	jmp    c0000700 <strpbrk+0xf>
c000070d:	40                   	inc    eax
c000070e:	eb e6                	jmp    c00006f6 <strpbrk+0x5>
c0000710:	31 c0                	xor    eax,eax
c0000712:	5b                   	pop    ebx
c0000713:	c3                   	ret    

c0000714 <strtok>:
c0000714:	56                   	push   esi
c0000715:	53                   	push   ebx
c0000716:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000071a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000071e:	85 db                	test   ebx,ebx
c0000720:	75 0e                	jne    c0000730 <strtok+0x1c>
c0000722:	8b 1d e8 ca 02 c0    	mov    ebx,DWORD PTR ds:0xc002cae8
c0000728:	85 db                	test   ebx,ebx
c000072a:	75 04                	jne    c0000730 <strtok+0x1c>
c000072c:	31 db                	xor    ebx,ebx
c000072e:	eb 2e                	jmp    c000075e <strtok+0x4a>
c0000730:	56                   	push   esi
c0000731:	53                   	push   ebx
c0000732:	e8 ba ff ff ff       	call   c00006f1 <strpbrk>
c0000737:	5a                   	pop    edx
c0000738:	a3 e8 ca 02 c0       	mov    ds:0xc002cae8,eax
c000073d:	59                   	pop    ecx
c000073e:	a1 e8 ca 02 c0       	mov    eax,ds:0xc002cae8
c0000743:	39 d8                	cmp    eax,ebx
c0000745:	75 07                	jne    c000074e <strtok+0x3a>
c0000747:	43                   	inc    ebx
c0000748:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c000074c:	eb e2                	jmp    c0000730 <strtok+0x1c>
c000074e:	85 c0                	test   eax,eax
c0000750:	74 da                	je     c000072c <strtok+0x18>
c0000752:	8d 50 01             	lea    edx,[eax+0x1]
c0000755:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000758:	89 15 e8 ca 02 c0    	mov    DWORD PTR ds:0xc002cae8,edx
c000075e:	89 d8                	mov    eax,ebx
c0000760:	5b                   	pop    ebx
c0000761:	5e                   	pop    esi
c0000762:	c3                   	ret    

c0000763 <strcpy>:
c0000763:	53                   	push   ebx
c0000764:	31 d2                	xor    edx,edx
c0000766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000076a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000076e:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000771:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000774:	84 c9                	test   cl,cl
c0000776:	74 06                	je     c000077e <strcpy+0x1b>
c0000778:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c000077b:	42                   	inc    edx
c000077c:	eb ec                	jmp    c000076a <strcpy+0x7>
c000077e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000781:	5b                   	pop    ebx
c0000782:	c3                   	ret    

c0000783 <strncpy>:
c0000783:	56                   	push   esi
c0000784:	53                   	push   ebx
c0000785:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000789:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000791:	89 c3                	mov    ebx,eax
c0000793:	85 c9                	test   ecx,ecx
c0000795:	74 1a                	je     c00007b1 <strncpy+0x2e>
c0000797:	46                   	inc    esi
c0000798:	43                   	inc    ebx
c0000799:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c000079c:	49                   	dec    ecx
c000079d:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007a0:	84 d2                	test   dl,dl
c00007a2:	75 ef                	jne    c0000793 <strncpy+0x10>
c00007a4:	31 d2                	xor    edx,edx
c00007a6:	39 d1                	cmp    ecx,edx
c00007a8:	74 07                	je     c00007b1 <strncpy+0x2e>
c00007aa:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007ae:	42                   	inc    edx
c00007af:	eb f5                	jmp    c00007a6 <strncpy+0x23>
c00007b1:	5b                   	pop    ebx
c00007b2:	5e                   	pop    esi
c00007b3:	c3                   	ret    

c00007b4 <strcmp>:
c00007b4:	31 c9                	xor    ecx,ecx
c00007b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007be:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007c2:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007c6:	38 d0                	cmp    al,dl
c00007c8:	75 08                	jne    c00007d2 <strcmp+0x1e>
c00007ca:	41                   	inc    ecx
c00007cb:	84 c0                	test   al,al
c00007cd:	75 e7                	jne    c00007b6 <strcmp+0x2>
c00007cf:	31 c0                	xor    eax,eax
c00007d1:	c3                   	ret    
c00007d2:	29 d0                	sub    eax,edx
c00007d4:	c3                   	ret    

c00007d5 <strchr>:
c00007d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007d9:	8a 10                	mov    dl,BYTE PTR [eax]
c00007db:	84 d2                	test   dl,dl
c00007dd:	74 09                	je     c00007e8 <strchr+0x13>
c00007df:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007e3:	74 05                	je     c00007ea <strchr+0x15>
c00007e5:	40                   	inc    eax
c00007e6:	eb f1                	jmp    c00007d9 <strchr+0x4>
c00007e8:	31 c0                	xor    eax,eax
c00007ea:	c3                   	ret    

c00007eb <strncmp>:
c00007eb:	56                   	push   esi
c00007ec:	53                   	push   ebx
c00007ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007f9:	01 d6                	add    esi,edx
c00007fb:	39 f2                	cmp    edx,esi
c00007fd:	74 12                	je     c0000811 <strncmp+0x26>
c00007ff:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000802:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000805:	38 c8                	cmp    al,cl
c0000807:	75 0c                	jne    c0000815 <strncmp+0x2a>
c0000809:	42                   	inc    edx
c000080a:	84 c0                	test   al,al
c000080c:	74 03                	je     c0000811 <strncmp+0x26>
c000080e:	43                   	inc    ebx
c000080f:	eb ea                	jmp    c00007fb <strncmp+0x10>
c0000811:	31 c0                	xor    eax,eax
c0000813:	eb 02                	jmp    c0000817 <strncmp+0x2c>
c0000815:	29 c8                	sub    eax,ecx
c0000817:	5b                   	pop    ebx
c0000818:	5e                   	pop    esi
c0000819:	c3                   	ret    

c000081a <strcat>:
c000081a:	53                   	push   ebx
c000081b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000081f:	89 c1                	mov    ecx,eax
c0000821:	8d 51 01             	lea    edx,[ecx+0x1]
c0000824:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000828:	74 04                	je     c000082e <strcat+0x14>
c000082a:	89 d1                	mov    ecx,edx
c000082c:	eb f3                	jmp    c0000821 <strcat+0x7>
c000082e:	31 d2                	xor    edx,edx
c0000830:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000834:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000837:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000083a:	42                   	inc    edx
c000083b:	84 db                	test   bl,bl
c000083d:	75 f1                	jne    c0000830 <strcat+0x16>
c000083f:	5b                   	pop    ebx
c0000840:	c3                   	ret    

c0000841 <strncat>:
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000847:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000084f:	89 c2                	mov    edx,eax
c0000851:	85 db                	test   ebx,ebx
c0000853:	74 23                	je     c0000878 <strncat+0x37>
c0000855:	8d 72 01             	lea    esi,[edx+0x1]
c0000858:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c000085c:	74 04                	je     c0000862 <strncat+0x21>
c000085e:	89 f2                	mov    edx,esi
c0000860:	eb f3                	jmp    c0000855 <strncat+0x14>
c0000862:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000865:	41                   	inc    ecx
c0000866:	42                   	inc    edx
c0000867:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c000086a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000086d:	84 db                	test   bl,bl
c000086f:	74 07                	je     c0000878 <strncat+0x37>
c0000871:	39 f1                	cmp    ecx,esi
c0000873:	75 f0                	jne    c0000865 <strncat+0x24>
c0000875:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000878:	5b                   	pop    ebx
c0000879:	5e                   	pop    esi
c000087a:	c3                   	ret    

c000087b <strstr>:
c000087b:	57                   	push   edi
c000087c:	56                   	push   esi
c000087d:	53                   	push   ebx
c000087e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000882:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000886:	57                   	push   edi
c0000887:	e8 55 fe ff ff       	call   c00006e1 <strlen>
c000088c:	59                   	pop    ecx
c000088d:	89 c6                	mov    esi,eax
c000088f:	85 c0                	test   eax,eax
c0000891:	74 1f                	je     c00008b2 <strstr+0x37>
c0000893:	53                   	push   ebx
c0000894:	e8 48 fe ff ff       	call   c00006e1 <strlen>
c0000899:	5a                   	pop    edx
c000089a:	39 f0                	cmp    eax,esi
c000089c:	72 12                	jb     c00008b0 <strstr+0x35>
c000089e:	56                   	push   esi
c000089f:	57                   	push   edi
c00008a0:	53                   	push   ebx
c00008a1:	e8 97 fd ff ff       	call   c000063d <memcmp>
c00008a6:	83 c4 0c             	add    esp,0xc
c00008a9:	85 c0                	test   eax,eax
c00008ab:	74 05                	je     c00008b2 <strstr+0x37>
c00008ad:	43                   	inc    ebx
c00008ae:	eb e3                	jmp    c0000893 <strstr+0x18>
c00008b0:	31 db                	xor    ebx,ebx
c00008b2:	89 d8                	mov    eax,ebx
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	5f                   	pop    edi
c00008b7:	c3                   	ret    

c00008b8 <toupper>:
c00008b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008bc:	0f b6 d0             	movzx  edx,al
c00008bf:	f6 82 e0 7f 02 c0 02 	test   BYTE PTR [edx-0x3ffd8020],0x2
c00008c6:	74 03                	je     c00008cb <toupper+0x13>
c00008c8:	83 e8 20             	sub    eax,0x20
c00008cb:	c3                   	ret    

c00008cc <tolower>:
c00008cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d0:	0f b6 d0             	movzx  edx,al
c00008d3:	f6 82 e0 7f 02 c0 01 	test   BYTE PTR [edx-0x3ffd8020],0x1
c00008da:	74 03                	je     c00008df <tolower+0x13>
c00008dc:	83 c0 20             	add    eax,0x20
c00008df:	c3                   	ret    

c00008e0 <simple_strtoul>:
c00008e0:	55                   	push   ebp
c00008e1:	57                   	push   edi
c00008e2:	56                   	push   esi
c00008e3:	53                   	push   ebx
c00008e4:	83 ec 08             	sub    esp,0x8
c00008e7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ef:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008f2:	f6 82 e0 7f 02 c0 08 	test   BYTE PTR [edx-0x3ffd8020],0x8
c00008f9:	74 03                	je     c00008fe <simple_strtoul+0x1e>
c00008fb:	41                   	inc    ecx
c00008fc:	eb f1                	jmp    c00008ef <simple_strtoul+0xf>
c00008fe:	80 fa 09             	cmp    dl,0x9
c0000901:	74 f8                	je     c00008fb <simple_strtoul+0x1b>
c0000903:	80 fa 2d             	cmp    dl,0x2d
c0000906:	75 0b                	jne    c0000913 <simple_strtoul+0x33>
c0000908:	41                   	inc    ecx
c0000909:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000911:	eb 0e                	jmp    c0000921 <simple_strtoul+0x41>
c0000913:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000091b:	80 fa 2b             	cmp    dl,0x2b
c000091e:	75 01                	jne    c0000921 <simple_strtoul+0x41>
c0000920:	41                   	inc    ecx
c0000921:	85 f6                	test   esi,esi
c0000923:	75 22                	jne    c0000947 <simple_strtoul+0x67>
c0000925:	be 0a 00 00 00       	mov    esi,0xa
c000092a:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092d:	75 5a                	jne    c0000989 <simple_strtoul+0xa9>
c000092f:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000933:	50                   	push   eax
c0000934:	e8 93 ff ff ff       	call   c00008cc <tolower>
c0000939:	5a                   	pop    edx
c000093a:	83 f8 78             	cmp    eax,0x78
c000093d:	74 03                	je     c0000942 <simple_strtoul+0x62>
c000093f:	41                   	inc    ecx
c0000940:	eb 16                	jmp    c0000958 <simple_strtoul+0x78>
c0000942:	83 c1 02             	add    ecx,0x2
c0000945:	eb 22                	jmp    c0000969 <simple_strtoul+0x89>
c0000947:	8d 46 fe             	lea    eax,[esi-0x2]
c000094a:	83 f8 22             	cmp    eax,0x22
c000094d:	0f 87 b7 00 00 00    	ja     c0000a0a <simple_strtoul+0x12a>
c0000953:	83 fe 08             	cmp    esi,0x8
c0000956:	75 0c                	jne    c0000964 <simple_strtoul+0x84>
c0000958:	be 08 00 00 00       	mov    esi,0x8
c000095d:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000960:	75 27                	jne    c0000989 <simple_strtoul+0xa9>
c0000962:	eb 1f                	jmp    c0000983 <simple_strtoul+0xa3>
c0000964:	83 fe 10             	cmp    esi,0x10
c0000967:	75 20                	jne    c0000989 <simple_strtoul+0xa9>
c0000969:	be 10 00 00 00       	mov    esi,0x10
c000096e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000971:	75 16                	jne    c0000989 <simple_strtoul+0xa9>
c0000973:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000977:	50                   	push   eax
c0000978:	e8 4f ff ff ff       	call   c00008cc <tolower>
c000097d:	5d                   	pop    ebp
c000097e:	83 f8 78             	cmp    eax,0x78
c0000981:	74 03                	je     c0000986 <simple_strtoul+0xa6>
c0000983:	41                   	inc    ecx
c0000984:	eb 03                	jmp    c0000989 <simple_strtoul+0xa9>
c0000986:	83 c1 02             	add    ecx,0x2
c0000989:	31 ed                	xor    ebp,ebp
c000098b:	31 db                	xor    ebx,ebx
c000098d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000994:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000996:	84 d2                	test   dl,dl
c0000998:	74 27                	je     c00009c1 <simple_strtoul+0xe1>
c000099a:	0f b6 fa             	movzx  edi,dl
c000099d:	f6 87 e0 7f 02 c0 04 	test   BYTE PTR [edi-0x3ffd8020],0x4
c00009a4:	74 05                	je     c00009ab <simple_strtoul+0xcb>
c00009a6:	83 ef 30             	sub    edi,0x30
c00009a9:	eb 22                	jmp    c00009cd <simple_strtoul+0xed>
c00009ab:	0f be d2             	movsx  edx,dl
c00009ae:	52                   	push   edx
c00009af:	e8 04 ff ff ff       	call   c00008b8 <toupper>
c00009b4:	5f                   	pop    edi
c00009b5:	0f b6 d0             	movzx  edx,al
c00009b8:	f6 82 e0 7f 02 c0 01 	test   BYTE PTR [edx-0x3ffd8020],0x1
c00009bf:	75 09                	jne    c00009ca <simple_strtoul+0xea>
c00009c1:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009c6:	75 2d                	jne    c00009f5 <simple_strtoul+0x115>
c00009c8:	eb 57                	jmp    c0000a21 <simple_strtoul+0x141>
c00009ca:	8d 78 c9             	lea    edi,[eax-0x37]
c00009cd:	39 f7                	cmp    edi,esi
c00009cf:	73 f0                	jae    c00009c1 <simple_strtoul+0xe1>
c00009d1:	31 d2                	xor    edx,edx
c00009d3:	89 f8                	mov    eax,edi
c00009d5:	f7 d0                	not    eax
c00009d7:	f7 f6                	div    esi
c00009d9:	39 d8                	cmp    eax,ebx
c00009db:	72 0e                	jb     c00009eb <simple_strtoul+0x10b>
c00009dd:	0f af de             	imul   ebx,esi
c00009e0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e7:	01 fb                	add    ebx,edi
c00009e9:	eb 07                	jmp    c00009f2 <simple_strtoul+0x112>
c00009eb:	bd 01 00 00 00       	mov    ebp,0x1
c00009f0:	31 db                	xor    ebx,ebx
c00009f2:	41                   	inc    ecx
c00009f3:	eb 9f                	jmp    c0000994 <simple_strtoul+0xb4>
c00009f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009f8:	09 d8                	or     eax,ebx
c00009fa:	75 1f                	jne    c0000a1b <simple_strtoul+0x13b>
c00009fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a00:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a04:	31 db                	xor    ebx,ebx
c0000a06:	89 38                	mov    DWORD PTR [eax],edi
c0000a08:	eb 17                	jmp    c0000a21 <simple_strtoul+0x141>
c0000a0a:	31 db                	xor    ebx,ebx
c0000a0c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a11:	74 14                	je     c0000a27 <simple_strtoul+0x147>
c0000a13:	31 ed                	xor    ebp,ebp
c0000a15:	85 c9                	test   ecx,ecx
c0000a17:	75 e3                	jne    c00009fc <simple_strtoul+0x11c>
c0000a19:	31 db                	xor    ebx,ebx
c0000a1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a1f:	89 08                	mov    DWORD PTR [eax],ecx
c0000a21:	4d                   	dec    ebp
c0000a22:	75 03                	jne    c0000a27 <simple_strtoul+0x147>
c0000a24:	83 cb ff             	or     ebx,0xffffffff
c0000a27:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a2c:	75 02                	jne    c0000a30 <simple_strtoul+0x150>
c0000a2e:	f7 db                	neg    ebx
c0000a30:	83 c4 08             	add    esp,0x8
c0000a33:	89 d8                	mov    eax,ebx
c0000a35:	5b                   	pop    ebx
c0000a36:	5e                   	pop    esi
c0000a37:	5f                   	pop    edi
c0000a38:	5d                   	pop    ebp
c0000a39:	c3                   	ret    

c0000a3a <largebin_index>:
c0000a3a:	89 c2                	mov    edx,eax
c0000a3c:	c1 ea 08             	shr    edx,0x8
c0000a3f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a45:	77 10                	ja     c0000a57 <largebin_index+0x1d>
c0000a47:	0f bd d2             	bsr    edx,edx
c0000a4a:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a4d:	d3 e8                	shr    eax,cl
c0000a4f:	83 e0 03             	and    eax,0x3
c0000a52:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a56:	c3                   	ret    
c0000a57:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a5c:	c3                   	ret    

c0000a5d <malloc_init_state>:
c0000a5d:	53                   	push   ebx
c0000a5e:	8d 50 34             	lea    edx,[eax+0x34]
c0000a61:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a67:	89 d1                	mov    ecx,edx
c0000a69:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a6c:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a6f:	83 c2 08             	add    edx,0x8
c0000a72:	39 da                	cmp    edx,ebx
c0000a74:	75 f3                	jne    c0000a69 <malloc_init_state+0xc>
c0000a76:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a78:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a82:	83 e2 03             	and    edx,0x3
c0000a85:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a8f:	83 ca 48             	or     edx,0x48
c0000a92:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a9c:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000aa6:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aad:	89 10                	mov    DWORD PTR [eax],edx
c0000aaf:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ab2:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000abc:	5b                   	pop    ebx
c0000abd:	c3                   	ret    

c0000abe <malloc_consolidate>:
c0000abe:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ac0:	85 d2                	test   edx,edx
c0000ac2:	0f 84 d8 00 00 00    	je     c0000ba0 <malloc_consolidate+0xe2>
c0000ac8:	55                   	push   ebp
c0000ac9:	83 e2 fd             	and    edx,0xfffffffd
c0000acc:	57                   	push   edi
c0000acd:	89 c5                	mov    ebp,eax
c0000acf:	56                   	push   esi
c0000ad0:	8d 78 34             	lea    edi,[eax+0x34]
c0000ad3:	53                   	push   ebx
c0000ad4:	83 ec 10             	sub    esp,0x10
c0000ad7:	89 10                	mov    DWORD PTR [eax],edx
c0000ad9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000add:	c1 ea 03             	shr    edx,0x3
c0000ae0:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ae4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aeb:	85 d2                	test   edx,edx
c0000aed:	0f 84 98 00 00 00    	je     c0000b8b <malloc_consolidate+0xcd>
c0000af3:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000afa:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000afd:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b00:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b04:	89 f9                	mov    ecx,edi
c0000b06:	83 e1 fe             	and    ecx,0xfffffffe
c0000b09:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b0c:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b0f:	83 e3 fc             	and    ebx,0xfffffffc
c0000b12:	83 e7 01             	and    edi,0x1
c0000b15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b18:	75 14                	jne    c0000b2e <malloc_consolidate+0x70>
c0000b1a:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b1c:	29 fa                	sub    edx,edi
c0000b1e:	01 f9                	add    ecx,edi
c0000b20:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b23:	89 fb                	mov    ebx,edi
c0000b25:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b28:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b2b:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b2e:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b31:	74 40                	je     c0000b73 <malloc_consolidate+0xb5>
c0000b33:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b36:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b39:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b3d:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b40:	83 e7 01             	and    edi,0x1
c0000b43:	75 0e                	jne    c0000b53 <malloc_consolidate+0x95>
c0000b45:	01 d9                	add    ecx,ebx
c0000b47:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b4a:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b4d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b50:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b53:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b56:	89 ce                	mov    esi,ecx
c0000b58:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b5b:	83 ce 01             	or     esi,0x1
c0000b5e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b61:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b64:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b67:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b6b:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b6e:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b71:	eb 0c                	jmp    c0000b7f <malloc_consolidate+0xc1>
c0000b73:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b76:	83 c9 01             	or     ecx,0x1
c0000b79:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b7c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b83:	85 d2                	test   edx,edx
c0000b85:	0f 85 6f ff ff ff    	jne    c0000afa <malloc_consolidate+0x3c>
c0000b8b:	83 c5 04             	add    ebp,0x4
c0000b8e:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b92:	0f 85 50 ff ff ff    	jne    c0000ae8 <malloc_consolidate+0x2a>
c0000b98:	83 c4 10             	add    esp,0x10
c0000b9b:	5b                   	pop    ebx
c0000b9c:	5e                   	pop    esi
c0000b9d:	5f                   	pop    edi
c0000b9e:	5d                   	pop    ebp
c0000b9f:	c3                   	ret    
c0000ba0:	e9 b8 fe ff ff       	jmp    c0000a5d <malloc_init_state>

c0000ba5 <dlfree>:
c0000ba5:	57                   	push   edi
c0000ba6:	56                   	push   esi
c0000ba7:	53                   	push   ebx
c0000ba8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bac:	85 db                	test   ebx,ebx
c0000bae:	0f 84 e2 00 00 00    	je     c0000c96 <dlfree+0xf1>
c0000bb4:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bb7:	8b 0d 00 cb 02 c0    	mov    ecx,DWORD PTR ds:0xc002cb00
c0000bbd:	89 f0                	mov    eax,esi
c0000bbf:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bc2:	83 e0 fc             	and    eax,0xfffffffc
c0000bc5:	39 c1                	cmp    ecx,eax
c0000bc7:	72 24                	jb     c0000bed <dlfree+0x48>
c0000bc9:	83 c9 03             	or     ecx,0x3
c0000bcc:	c1 e8 03             	shr    eax,0x3
c0000bcf:	89 0d 00 cb 02 c0    	mov    DWORD PTR ds:0xc002cb00,ecx
c0000bd5:	83 e8 02             	sub    eax,0x2
c0000bd8:	8b 0c 85 04 cb 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd34fc]
c0000bdf:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000be1:	89 14 85 04 cb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd34fc],edx
c0000be8:	e9 a9 00 00 00       	jmp    c0000c96 <dlfree+0xf1>
c0000bed:	83 e6 02             	and    esi,0x2
c0000bf0:	0f 85 a0 00 00 00    	jne    c0000c96 <dlfree+0xf1>
c0000bf6:	83 c9 01             	or     ecx,0x1
c0000bf9:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bfc:	89 0d 00 cb 02 c0    	mov    DWORD PTR ds:0xc002cb00,ecx
c0000c02:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c05:	83 e1 fc             	and    ecx,0xfffffffc
c0000c08:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c0c:	75 13                	jne    c0000c21 <dlfree+0x7c>
c0000c0e:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c11:	29 da                	sub    edx,ebx
c0000c13:	01 d8                	add    eax,ebx
c0000c15:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c18:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c1b:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c1e:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c21:	39 35 2c cb 02 c0    	cmp    DWORD PTR ds:0xc002cb2c,esi
c0000c27:	74 40                	je     c0000c69 <dlfree+0xc4>
c0000c29:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c2d:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c30:	80 e3 01             	and    bl,0x1
c0000c33:	75 0e                	jne    c0000c43 <dlfree+0x9e>
c0000c35:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c38:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c3b:	01 c8                	add    eax,ecx
c0000c3d:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c40:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c43:	8b 0d 3c cb 02 c0    	mov    ecx,DWORD PTR ds:0xc002cb3c
c0000c49:	c7 42 0c 34 cb 02 c0 	mov    DWORD PTR [edx+0xc],0xc002cb34
c0000c50:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c53:	89 15 3c cb 02 c0    	mov    DWORD PTR ds:0xc002cb3c,edx
c0000c59:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c5c:	89 c1                	mov    ecx,eax
c0000c5e:	83 c9 01             	or     ecx,0x1
c0000c61:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c64:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c67:	eb 10                	jmp    c0000c79 <dlfree+0xd4>
c0000c69:	01 c8                	add    eax,ecx
c0000c6b:	89 c1                	mov    ecx,eax
c0000c6d:	83 c9 01             	or     ecx,0x1
c0000c70:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c73:	89 15 2c cb 02 c0    	mov    DWORD PTR ds:0xc002cb2c,edx
c0000c79:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c7e:	76 16                	jbe    c0000c96 <dlfree+0xf1>
c0000c80:	f6 05 00 cb 02 c0 02 	test   BYTE PTR ds:0xc002cb00,0x2
c0000c87:	74 0d                	je     c0000c96 <dlfree+0xf1>
c0000c89:	5b                   	pop    ebx
c0000c8a:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c0000c8f:	5e                   	pop    esi
c0000c90:	5f                   	pop    edi
c0000c91:	e9 28 fe ff ff       	jmp    c0000abe <malloc_consolidate>
c0000c96:	5b                   	pop    ebx
c0000c97:	5e                   	pop    esi
c0000c98:	5f                   	pop    edi
c0000c99:	c3                   	ret    

c0000c9a <sYSMALLOc>:
c0000c9a:	55                   	push   ebp
c0000c9b:	57                   	push   edi
c0000c9c:	56                   	push   esi
c0000c9d:	53                   	push   ebx
c0000c9e:	89 d3                	mov    ebx,edx
c0000ca0:	83 ec 2c             	sub    esp,0x2c
c0000ca3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ca7:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000cad:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cb0:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cb7:	74 1f                	je     c0000cd8 <sYSMALLOc+0x3e>
c0000cb9:	89 d8                	mov    eax,ebx
c0000cbb:	e8 fe fd ff ff       	call   c0000abe <malloc_consolidate>
c0000cc0:	83 ec 0c             	sub    esp,0xc
c0000cc3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000cc7:	83 e8 07             	sub    eax,0x7
c0000cca:	50                   	push   eax
c0000ccb:	e8 30 02 00 00       	call   c0000f00 <dlmalloc>
c0000cd0:	83 c4 10             	add    esp,0x10
c0000cd3:	e9 20 02 00 00       	jmp    c0000ef8 <sYSMALLOc+0x25e>
c0000cd8:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000cdb:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ce1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ce4:	83 e0 fc             	and    eax,0xfffffffc
c0000ce7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ceb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cef:	83 c0 10             	add    eax,0x10
c0000cf2:	01 c1                	add    ecx,eax
c0000cf4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cf8:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cff:	74 04                	je     c0000d05 <sYSMALLOc+0x6b>
c0000d01:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d05:	f7 da                	neg    edx
c0000d07:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d0f:	21 d1                	and    ecx,edx
c0000d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d15:	7f 07                	jg     c0000d1e <sYSMALLOc+0x84>
c0000d17:	31 c0                	xor    eax,eax
c0000d19:	e9 da 01 00 00       	jmp    c0000ef8 <sYSMALLOc+0x25e>
c0000d1e:	83 ec 0c             	sub    esp,0xc
c0000d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d25:	e8 51 e7 00 00       	call   c000f47b <sbrk>
c0000d2a:	83 c4 10             	add    esp,0x10
c0000d2d:	89 c6                	mov    esi,eax
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	74 e3                	je     c0000d17 <sYSMALLOc+0x7d>
c0000d34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d38:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d3c:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d3f:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d45:	39 f1                	cmp    ecx,esi
c0000d47:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d4d:	75 13                	jne    c0000d62 <sYSMALLOc+0xc8>
c0000d4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d53:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d57:	83 c8 01             	or     eax,0x1
c0000d5a:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d5d:	e9 3e 01 00 00       	jmp    c0000ea0 <sYSMALLOc+0x206>
c0000d62:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d68:	88 d0                	mov    al,dl
c0000d6a:	83 e0 01             	and    eax,0x1
c0000d6d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d72:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d76:	0f 95 c0             	setne  al
c0000d79:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d7d:	39 f1                	cmp    ecx,esi
c0000d7f:	76 12                	jbe    c0000d93 <sYSMALLOc+0xf9>
c0000d81:	84 c0                	test   al,al
c0000d83:	74 0e                	je     c0000d93 <sYSMALLOc+0xf9>
c0000d85:	83 e2 fe             	and    edx,0xfffffffe
c0000d88:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d8e:	e9 83 00 00 00       	jmp    c0000e16 <sYSMALLOc+0x17c>
c0000d93:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d98:	74 7c                	je     c0000e16 <sYSMALLOc+0x17c>
c0000d9a:	84 c0                	test   al,al
c0000d9c:	74 0c                	je     c0000daa <sYSMALLOc+0x110>
c0000d9e:	89 f0                	mov    eax,esi
c0000da0:	29 c8                	sub    eax,ecx
c0000da2:	01 e8                	add    eax,ebp
c0000da4:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000daa:	89 f2                	mov    edx,esi
c0000dac:	83 e2 07             	and    edx,0x7
c0000daf:	74 0c                	je     c0000dbd <sYSMALLOc+0x123>
c0000db1:	b8 08 00 00 00       	mov    eax,0x8
c0000db6:	29 d0                	sub    eax,edx
c0000db8:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000dbb:	eb 04                	jmp    c0000dc1 <sYSMALLOc+0x127>
c0000dbd:	89 f5                	mov    ebp,esi
c0000dbf:	31 c0                	xor    eax,eax
c0000dc1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000dc5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dcd:	01 c1                	add    ecx,eax
c0000dcf:	83 ec 0c             	sub    esp,0xc
c0000dd2:	01 f1                	add    ecx,esi
c0000dd4:	01 ca                	add    edx,ecx
c0000dd6:	29 c8                	sub    eax,ecx
c0000dd8:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ddc:	01 c2                	add    edx,eax
c0000dde:	52                   	push   edx
c0000ddf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000de3:	e8 93 e6 00 00       	call   c000f47b <sbrk>
c0000de8:	83 c4 10             	add    esp,0x10
c0000deb:	83 f8 ff             	cmp    eax,0xffffffff
c0000dee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000df2:	75 0f                	jne    c0000e03 <sYSMALLOc+0x169>
c0000df4:	83 ec 0c             	sub    esp,0xc
c0000df7:	6a 00                	push   0x0
c0000df9:	e8 7d e6 00 00       	call   c000f47b <sbrk>
c0000dfe:	83 c4 10             	add    esp,0x10
c0000e01:	eb 30                	jmp    c0000e33 <sYSMALLOc+0x199>
c0000e03:	39 c6                	cmp    esi,eax
c0000e05:	76 33                	jbe    c0000e3a <sYSMALLOc+0x1a0>
c0000e07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e0b:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e12:	01 f0                	add    eax,esi
c0000e14:	eb 1d                	jmp    c0000e33 <sYSMALLOc+0x199>
c0000e16:	83 ec 0c             	sub    esp,0xc
c0000e19:	89 f5                	mov    ebp,esi
c0000e1b:	6a 00                	push   0x0
c0000e1d:	e8 59 e6 00 00       	call   c000f47b <sbrk>
c0000e22:	89 c2                	mov    edx,eax
c0000e24:	29 f2                	sub    edx,esi
c0000e26:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e2a:	83 c4 10             	add    esp,0x10
c0000e2d:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e33:	31 d2                	xor    edx,edx
c0000e35:	83 f8 ff             	cmp    eax,0xffffffff
c0000e38:	74 66                	je     c0000ea0 <sYSMALLOc+0x206>
c0000e3a:	29 e8                	sub    eax,ebp
c0000e3c:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e3f:	01 d0                	add    eax,edx
c0000e41:	83 c8 01             	or     eax,0x1
c0000e44:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e47:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e4d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e52:	74 4c                	je     c0000ea0 <sYSMALLOc+0x206>
c0000e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e58:	83 e8 0c             	sub    eax,0xc
c0000e5b:	83 e0 f8             	and    eax,0xfffffff8
c0000e5e:	89 c2                	mov    edx,eax
c0000e60:	83 ca 01             	or     edx,0x1
c0000e63:	83 f8 0f             	cmp    eax,0xf
c0000e66:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e69:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e71:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e79:	76 25                	jbe    c0000ea0 <sYSMALLOc+0x206>
c0000e7b:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e81:	83 ec 0c             	sub    esp,0xc
c0000e84:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e8e:	83 c7 08             	add    edi,0x8
c0000e91:	57                   	push   edi
c0000e92:	e8 0e fd ff ff       	call   c0000ba5 <dlfree>
c0000e97:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000ea6:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000eac:	73 06                	jae    c0000eb4 <sYSMALLOc+0x21a>
c0000eae:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000eb4:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000eba:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ec0:	73 06                	jae    c0000ec8 <sYSMALLOc+0x22e>
c0000ec2:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ec8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ecb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ece:	83 e2 fc             	and    edx,0xfffffffc
c0000ed1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ed5:	0f 82 3c fe ff ff    	jb     c0000d17 <sYSMALLOc+0x7d>
c0000edb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000edf:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ee2:	29 fa                	sub    edx,edi
c0000ee4:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ee7:	83 ca 01             	or     edx,0x1
c0000eea:	89 fb                	mov    ebx,edi
c0000eec:	83 c0 08             	add    eax,0x8
c0000eef:	83 cb 01             	or     ebx,0x1
c0000ef2:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ef5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ef8:	83 c4 2c             	add    esp,0x2c
c0000efb:	5b                   	pop    ebx
c0000efc:	5e                   	pop    esi
c0000efd:	5f                   	pop    edi
c0000efe:	5d                   	pop    ebp
c0000eff:	c3                   	ret    

c0000f00 <dlmalloc>:
c0000f00:	55                   	push   ebp
c0000f01:	57                   	push   edi
c0000f02:	56                   	push   esi
c0000f03:	53                   	push   ebx
c0000f04:	83 ec 1c             	sub    esp,0x1c
c0000f07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f0b:	83 f8 df             	cmp    eax,0xffffffdf
c0000f0e:	0f 87 70 03 00 00    	ja     c0001284 <dlmalloc+0x384>
c0000f14:	83 c0 0b             	add    eax,0xb
c0000f17:	be 10 00 00 00       	mov    esi,0x10
c0000f1c:	83 f8 0f             	cmp    eax,0xf
c0000f1f:	76 05                	jbe    c0000f26 <dlmalloc+0x26>
c0000f21:	83 e0 f8             	and    eax,0xfffffff8
c0000f24:	89 c6                	mov    esi,eax
c0000f26:	8b 3d 00 cb 02 c0    	mov    edi,DWORD PTR ds:0xc002cb00
c0000f2c:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f32:	75 17                	jne    c0000f4b <dlmalloc+0x4b>
c0000f34:	85 ff                	test   edi,edi
c0000f36:	0f 85 05 03 00 00    	jne    c0001241 <dlmalloc+0x341>
c0000f3c:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c0000f41:	e8 78 fb ff ff       	call   c0000abe <malloc_consolidate>
c0000f46:	e9 f6 02 00 00       	jmp    c0001241 <dlmalloc+0x341>
c0000f4b:	39 f7                	cmp    edi,esi
c0000f4d:	72 1f                	jb     c0000f6e <dlmalloc+0x6e>
c0000f4f:	89 f2                	mov    edx,esi
c0000f51:	c1 ea 03             	shr    edx,0x3
c0000f54:	83 ea 02             	sub    edx,0x2
c0000f57:	8b 04 95 04 cb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd34fc]
c0000f5e:	85 c0                	test   eax,eax
c0000f60:	74 0c                	je     c0000f6e <dlmalloc+0x6e>
c0000f62:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f65:	89 0c 95 04 cb 02 c0 	mov    DWORD PTR [edx*4-0x3ffd34fc],ecx
c0000f6c:	eb 30                	jmp    c0000f9e <dlmalloc+0x9e>
c0000f6e:	89 f0                	mov    eax,esi
c0000f70:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f76:	77 2e                	ja     c0000fa6 <dlmalloc+0xa6>
c0000f78:	c1 e8 03             	shr    eax,0x3
c0000f7b:	8d 14 c5 34 cb 02 c0 	lea    edx,[eax*8-0x3ffd34cc]
c0000f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f86:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f89:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f8c:	39 c3                	cmp    ebx,eax
c0000f8e:	74 2e                	je     c0000fbe <dlmalloc+0xbe>
c0000f90:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f93:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f9b:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f9e:	83 c0 08             	add    eax,0x8
c0000fa1:	e9 e0 02 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0000fa6:	e8 8f fa ff ff       	call   c0000a3a <largebin_index>
c0000fab:	83 e7 02             	and    edi,0x2
c0000fae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fb2:	74 0a                	je     c0000fbe <dlmalloc+0xbe>
c0000fb4:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c0000fb9:	e8 00 fb ff ff       	call   c0000abe <malloc_consolidate>
c0000fbe:	8d 46 10             	lea    eax,[esi+0x10]
c0000fc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc5:	8b 1d 40 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb40
c0000fcb:	81 fb 34 cb 02 c0    	cmp    ebx,0xc002cb34
c0000fd1:	0f 84 13 01 00 00    	je     c00010ea <dlmalloc+0x1ea>
c0000fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fda:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fdd:	83 e7 fc             	and    edi,0xfffffffc
c0000fe0:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe6:	77 4c                	ja     c0001034 <dlmalloc+0x134>
c0000fe8:	3d 34 cb 02 c0       	cmp    eax,0xc002cb34
c0000fed:	75 45                	jne    c0001034 <dlmalloc+0x134>
c0000fef:	39 1d 30 cb 02 c0    	cmp    DWORD PTR ds:0xc002cb30,ebx
c0000ff5:	75 3d                	jne    c0001034 <dlmalloc+0x134>
c0000ff7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ffb:	73 37                	jae    c0001034 <dlmalloc+0x134>
c0000ffd:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001000:	89 fa                	mov    edx,edi
c0001002:	a3 3c cb 02 c0       	mov    ds:0xc002cb3c,eax
c0001007:	a3 40 cb 02 c0       	mov    ds:0xc002cb40,eax
c000100c:	a3 30 cb 02 c0       	mov    ds:0xc002cb30,eax
c0001011:	29 f2                	sub    edx,esi
c0001013:	c7 40 08 34 cb 02 c0 	mov    DWORD PTR [eax+0x8],0xc002cb34
c000101a:	c7 40 0c 34 cb 02 c0 	mov    DWORD PTR [eax+0xc],0xc002cb34
c0001021:	83 ce 01             	or     esi,0x1
c0001024:	89 d1                	mov    ecx,edx
c0001026:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001029:	83 c9 01             	or     ecx,0x1
c000102c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000102f:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001032:	eb 15                	jmp    c0001049 <dlmalloc+0x149>
c0001034:	a3 40 cb 02 c0       	mov    ds:0xc002cb40,eax
c0001039:	39 fe                	cmp    esi,edi
c000103b:	c7 40 08 34 cb 02 c0 	mov    DWORD PTR [eax+0x8],0xc002cb34
c0001042:	75 0d                	jne    c0001051 <dlmalloc+0x151>
c0001044:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001049:	8d 43 08             	lea    eax,[ebx+0x8]
c000104c:	e9 35 02 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001051:	89 f8                	mov    eax,edi
c0001053:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001059:	77 19                	ja     c0001074 <dlmalloc+0x174>
c000105b:	c1 e8 03             	shr    eax,0x3
c000105e:	8d 14 00             	lea    edx,[eax+eax*1]
c0001061:	83 c2 0d             	add    edx,0xd
c0001064:	8d 2c 95 f8 ca 02 c0 	lea    ebp,[edx*4-0x3ffd3508]
c000106b:	8b 14 95 00 cb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3500]
c0001072:	eb 46                	jmp    c00010ba <dlmalloc+0x1ba>
c0001074:	e8 c1 f9 ff ff       	call   c0000a3a <largebin_index>
c0001079:	8d 14 00             	lea    edx,[eax+eax*1]
c000107c:	83 c2 0d             	add    edx,0xd
c000107f:	8d 0c 95 00 cb 02 c0 	lea    ecx,[edx*4-0x3ffd3500]
c0001086:	8b 14 95 00 cb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3500]
c000108d:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001090:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001094:	89 d5                	mov    ebp,edx
c0001096:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000109a:	74 1e                	je     c00010ba <dlmalloc+0x1ba>
c000109c:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000109f:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010a2:	77 12                	ja     c00010b6 <dlmalloc+0x1b6>
c00010a4:	83 cf 01             	or     edi,0x1
c00010a7:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010aa:	76 05                	jbe    c00010b1 <dlmalloc+0x1b1>
c00010ac:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010af:	eb f6                	jmp    c00010a7 <dlmalloc+0x1a7>
c00010b1:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010b4:	eb 04                	jmp    c00010ba <dlmalloc+0x1ba>
c00010b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010ba:	89 c7                	mov    edi,eax
c00010bc:	88 c1                	mov    cl,al
c00010be:	c1 ff 05             	sar    edi,0x5
c00010c1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c5:	bf 01 00 00 00       	mov    edi,0x1
c00010ca:	d3 e7                	shl    edi,cl
c00010cc:	89 f8                	mov    eax,edi
c00010ce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010d2:	09 04 bd 34 ce 02 c0 	or     DWORD PTR [edi*4-0x3ffd31cc],eax
c00010d9:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010dc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010df:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010e2:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e5:	e9 db fe ff ff       	jmp    c0000fc5 <dlmalloc+0xc5>
c00010ea:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010f0:	76 78                	jbe    c000116a <dlmalloc+0x26a>
c00010f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f6:	8d 04 c5 34 cb 02 c0 	lea    eax,[eax*8-0x3ffd34cc]
c00010fd:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001100:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001103:	39 ca                	cmp    edx,ecx
c0001105:	74 63                	je     c000116a <dlmalloc+0x26a>
c0001107:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000110a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000110d:	83 e3 fc             	and    ebx,0xfffffffc
c0001110:	39 de                	cmp    esi,ebx
c0001112:	77 52                	ja     c0001166 <dlmalloc+0x266>
c0001114:	89 df                	mov    edi,ebx
c0001116:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001119:	29 f7                	sub    edi,esi
c000111b:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000111e:	01 d3                	add    ebx,edx
c0001120:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001123:	83 ff 0f             	cmp    edi,0xf
c0001126:	8d 42 08             	lea    eax,[edx+0x8]
c0001129:	77 09                	ja     c0001134 <dlmalloc+0x234>
c000112b:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000112f:	e9 52 01 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001134:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001137:	83 ce 01             	or     esi,0x1
c000113a:	89 0d 3c cb 02 c0    	mov    DWORD PTR ds:0xc002cb3c,ecx
c0001140:	89 0d 40 cb 02 c0    	mov    DWORD PTR ds:0xc002cb40,ecx
c0001146:	c7 41 08 34 cb 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002cb34
c000114d:	c7 41 0c 34 cb 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002cb34
c0001154:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001157:	89 fa                	mov    edx,edi
c0001159:	83 ca 01             	or     edx,0x1
c000115c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000115f:	89 3b                	mov    DWORD PTR [ebx],edi
c0001161:	e9 20 01 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001166:	89 c2                	mov    edx,eax
c0001168:	eb 99                	jmp    c0001103 <dlmalloc+0x203>
c000116a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000116e:	b8 01 00 00 00       	mov    eax,0x1
c0001173:	41                   	inc    ecx
c0001174:	89 cb                	mov    ebx,ecx
c0001176:	8d 14 cd 2c cb 02 c0 	lea    edx,[ecx*8-0x3ffd34d4]
c000117d:	c1 eb 05             	shr    ebx,0x5
c0001180:	d3 e0                	shl    eax,cl
c0001182:	8b 3c 9d 34 ce 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd31cc]
c0001189:	39 f8                	cmp    eax,edi
c000118b:	77 04                	ja     c0001191 <dlmalloc+0x291>
c000118d:	85 c0                	test   eax,eax
c000118f:	75 26                	jne    c00011b7 <dlmalloc+0x2b7>
c0001191:	43                   	inc    ebx
c0001192:	83 fb 02             	cmp    ebx,0x2
c0001195:	0f 87 a6 00 00 00    	ja     c0001241 <dlmalloc+0x341>
c000119b:	8b 3c 9d 34 ce 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd31cc]
c00011a2:	85 ff                	test   edi,edi
c00011a4:	74 eb                	je     c0001191 <dlmalloc+0x291>
c00011a6:	89 d8                	mov    eax,ebx
c00011a8:	c1 e0 06             	shl    eax,0x6
c00011ab:	8d 14 85 2c cb 02 c0 	lea    edx,[eax*4-0x3ffd34d4]
c00011b2:	b8 01 00 00 00       	mov    eax,0x1
c00011b7:	85 f8                	test   eax,edi
c00011b9:	75 07                	jne    c00011c2 <dlmalloc+0x2c2>
c00011bb:	83 c2 08             	add    edx,0x8
c00011be:	01 c0                	add    eax,eax
c00011c0:	eb f5                	jmp    c00011b7 <dlmalloc+0x2b7>
c00011c2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c5:	39 ca                	cmp    edx,ecx
c00011c7:	75 14                	jne    c00011dd <dlmalloc+0x2dd>
c00011c9:	89 c1                	mov    ecx,eax
c00011cb:	83 c2 08             	add    edx,0x8
c00011ce:	f7 d1                	not    ecx
c00011d0:	01 c0                	add    eax,eax
c00011d2:	21 cf                	and    edi,ecx
c00011d4:	89 3c 9d 34 ce 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd31cc],edi
c00011db:	eb ac                	jmp    c0001189 <dlmalloc+0x289>
c00011dd:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011e0:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011e3:	83 e0 fc             	and    eax,0xfffffffc
c00011e6:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011e9:	89 c3                	mov    ebx,eax
c00011eb:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011ee:	29 f3                	sub    ebx,esi
c00011f0:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011f3:	83 fb 0f             	cmp    ebx,0xf
c00011f6:	8d 41 08             	lea    eax,[ecx+0x8]
c00011f9:	77 09                	ja     c0001204 <dlmalloc+0x304>
c00011fb:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011ff:	e9 82 00 00 00       	jmp    c0001286 <dlmalloc+0x386>
c0001204:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001207:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120d:	89 3d 3c cb 02 c0    	mov    DWORD PTR ds:0xc002cb3c,edi
c0001213:	89 3d 40 cb 02 c0    	mov    DWORD PTR ds:0xc002cb40,edi
c0001219:	c7 47 08 34 cb 02 c0 	mov    DWORD PTR [edi+0x8],0xc002cb34
c0001220:	c7 47 0c 34 cb 02 c0 	mov    DWORD PTR [edi+0xc],0xc002cb34
c0001227:	77 06                	ja     c000122f <dlmalloc+0x32f>
c0001229:	89 3d 30 cb 02 c0    	mov    DWORD PTR ds:0xc002cb30,edi
c000122f:	83 ce 01             	or     esi,0x1
c0001232:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001235:	89 d9                	mov    ecx,ebx
c0001237:	83 c9 01             	or     ecx,0x1
c000123a:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000123d:	89 1a                	mov    DWORD PTR [edx],ebx
c000123f:	eb 45                	jmp    c0001286 <dlmalloc+0x386>
c0001241:	a1 2c cb 02 c0       	mov    eax,ds:0xc002cb2c
c0001246:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001249:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000124c:	83 e2 fc             	and    edx,0xfffffffc
c000124f:	39 d1                	cmp    ecx,edx
c0001251:	77 1e                	ja     c0001271 <dlmalloc+0x371>
c0001253:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001256:	89 f3                	mov    ebx,esi
c0001258:	89 0d 2c cb 02 c0    	mov    DWORD PTR ds:0xc002cb2c,ecx
c000125e:	83 cb 01             	or     ebx,0x1
c0001261:	29 f2                	sub    edx,esi
c0001263:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001266:	83 ca 01             	or     edx,0x1
c0001269:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000126c:	e9 2d fd ff ff       	jmp    c0000f9e <dlmalloc+0x9e>
c0001271:	83 c4 1c             	add    esp,0x1c
c0001274:	89 f0                	mov    eax,esi
c0001276:	5b                   	pop    ebx
c0001277:	ba 00 cb 02 c0       	mov    edx,0xc002cb00
c000127c:	5e                   	pop    esi
c000127d:	5f                   	pop    edi
c000127e:	5d                   	pop    ebp
c000127f:	e9 16 fa ff ff       	jmp    c0000c9a <sYSMALLOc>
c0001284:	31 c0                	xor    eax,eax
c0001286:	83 c4 1c             	add    esp,0x1c
c0001289:	5b                   	pop    ebx
c000128a:	5e                   	pop    esi
c000128b:	5f                   	pop    edi
c000128c:	5d                   	pop    ebp
c000128d:	c3                   	ret    

c000128e <iALLOc>:
c000128e:	55                   	push   ebp
c000128f:	89 c5                	mov    ebp,eax
c0001291:	57                   	push   edi
c0001292:	56                   	push   esi
c0001293:	53                   	push   ebx
c0001294:	83 ec 2c             	sub    esp,0x2c
c0001297:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000129b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000129f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012a3:	83 3d 00 cb 02 c0 00 	cmp    DWORD PTR ds:0xc002cb00,0x0
c00012aa:	75 12                	jne    c00012be <iALLOc+0x30>
c00012ac:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b0:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c00012b5:	e8 04 f8 ff ff       	call   c0000abe <malloc_consolidate>
c00012ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012c3:	74 12                	je     c00012d7 <iALLOc+0x49>
c00012c5:	85 ed                	test   ebp,ebp
c00012c7:	0f 84 64 01 00 00    	je     c0001431 <iALLOc+0x1a3>
c00012cd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d5:	eb 33                	jmp    c000130a <iALLOc+0x7c>
c00012d7:	85 ed                	test   ebp,ebp
c00012d9:	75 14                	jne    c00012ef <iALLOc+0x61>
c00012db:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012e3:	83 c4 2c             	add    esp,0x2c
c00012e6:	5b                   	pop    ebx
c00012e7:	5e                   	pop    esi
c00012e8:	5f                   	pop    edi
c00012e9:	5d                   	pop    ebp
c00012ea:	e9 11 fc ff ff       	jmp    c0000f00 <dlmalloc>
c00012ef:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f6:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012fe:	83 f8 0f             	cmp    eax,0xf
c0001301:	76 07                	jbe    c000130a <iALLOc+0x7c>
c0001303:	83 e0 f8             	and    eax,0xfffffff8
c0001306:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000130a:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000130f:	75 09                	jne    c000131a <iALLOc+0x8c>
c0001311:	89 d0                	mov    eax,edx
c0001313:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001316:	31 f6                	xor    esi,esi
c0001318:	eb 3b                	jmp    c0001355 <iALLOc+0xc7>
c000131a:	8b 02                	mov    eax,DWORD PTR [edx]
c000131c:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001324:	83 c0 0b             	add    eax,0xb
c0001327:	83 f8 0f             	cmp    eax,0xf
c000132a:	76 07                	jbe    c0001333 <iALLOc+0xa5>
c000132c:	83 e0 f8             	and    eax,0xfffffff8
c000132f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001333:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001337:	0f af f5             	imul   esi,ebp
c000133a:	eb 25                	jmp    c0001361 <iALLOc+0xd3>
c000133c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000133e:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001341:	bb 10 00 00 00       	mov    ebx,0x10
c0001346:	83 f9 0f             	cmp    ecx,0xf
c0001349:	76 05                	jbe    c0001350 <iALLOc+0xc2>
c000134b:	83 e1 f8             	and    ecx,0xfffffff8
c000134e:	89 cb                	mov    ebx,ecx
c0001350:	01 de                	add    esi,ebx
c0001352:	83 c0 04             	add    eax,0x4
c0001355:	39 c7                	cmp    edi,eax
c0001357:	75 e3                	jne    c000133c <iALLOc+0xae>
c0001359:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001361:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001365:	8b 1d 54 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002ce54
c000136b:	83 ec 0c             	sub    esp,0xc
c000136e:	c7 05 54 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce54,0x0
c0001378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000137c:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001380:	50                   	push   eax
c0001381:	e8 7a fb ff ff       	call   c0000f00 <dlmalloc>
c0001386:	83 c4 10             	add    esp,0x10
c0001389:	89 1d 54 ce 02 c0    	mov    DWORD PTR ds:0xc002ce54,ebx
c000138f:	85 c0                	test   eax,eax
c0001391:	0f 84 92 00 00 00    	je     c0001429 <iALLOc+0x19b>
c0001397:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000139a:	8d 78 f8             	lea    edi,[eax-0x8]
c000139d:	83 e3 fc             	and    ebx,0xfffffffc
c00013a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013a4:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013a9:	74 1e                	je     c00013c9 <iALLOc+0x13b>
c00013ab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013af:	89 d9                	mov    ecx,ebx
c00013b1:	52                   	push   edx
c00013b2:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b6:	83 e9 04             	sub    ecx,0x4
c00013b9:	51                   	push   ecx
c00013ba:	6a 00                	push   0x0
c00013bc:	50                   	push   eax
c00013bd:	e8 02 f3 ff ff       	call   c00006c4 <memset>
c00013c2:	83 c4 10             	add    esp,0x10
c00013c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013ce:	75 14                	jne    c00013e4 <iALLOc+0x156>
c00013d0:	8d 04 37             	lea    eax,[edi+esi*1]
c00013d3:	29 f3                	sub    ebx,esi
c00013d5:	8d 48 08             	lea    ecx,[eax+0x8]
c00013d8:	83 cb 01             	or     ebx,0x1
c00013db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013df:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013e2:	89 f3                	mov    ebx,esi
c00013e4:	31 c0                	xor    eax,eax
c00013e6:	4d                   	dec    ebp
c00013e7:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013ea:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013ee:	39 c5                	cmp    ebp,eax
c00013f0:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013f3:	74 2c                	je     c0001421 <iALLOc+0x193>
c00013f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013f9:	85 c9                	test   ecx,ecx
c00013fb:	75 15                	jne    c0001412 <iALLOc+0x184>
c00013fd:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001400:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001403:	b9 10 00 00 00       	mov    ecx,0x10
c0001408:	83 fe 0f             	cmp    esi,0xf
c000140b:	76 05                	jbe    c0001412 <iALLOc+0x184>
c000140d:	83 e6 f8             	and    esi,0xfffffff8
c0001410:	89 f1                	mov    ecx,esi
c0001412:	89 ce                	mov    esi,ecx
c0001414:	29 cb                	sub    ebx,ecx
c0001416:	83 ce 01             	or     esi,0x1
c0001419:	40                   	inc    eax
c000141a:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000141d:	01 cf                	add    edi,ecx
c000141f:	eb c6                	jmp    c00013e7 <iALLOc+0x159>
c0001421:	83 cb 01             	or     ebx,0x1
c0001424:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001427:	eb 08                	jmp    c0001431 <iALLOc+0x1a3>
c0001429:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001435:	83 c4 2c             	add    esp,0x2c
c0001438:	5b                   	pop    ebx
c0001439:	5e                   	pop    esi
c000143a:	5f                   	pop    edi
c000143b:	5d                   	pop    ebp
c000143c:	c3                   	ret    

c000143d <dlrealloc>:
c000143d:	55                   	push   ebp
c000143e:	57                   	push   edi
c000143f:	56                   	push   esi
c0001440:	53                   	push   ebx
c0001441:	83 ec 1c             	sub    esp,0x1c
c0001444:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001448:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000144c:	85 db                	test   ebx,ebx
c000144e:	75 10                	jne    c0001460 <dlrealloc+0x23>
c0001450:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001454:	83 c4 1c             	add    esp,0x1c
c0001457:	5b                   	pop    ebx
c0001458:	5e                   	pop    esi
c0001459:	5f                   	pop    edi
c000145a:	5d                   	pop    ebp
c000145b:	e9 a0 fa ff ff       	jmp    c0000f00 <dlmalloc>
c0001460:	83 f8 df             	cmp    eax,0xffffffdf
c0001463:	76 07                	jbe    c000146c <dlrealloc+0x2f>
c0001465:	31 db                	xor    ebx,ebx
c0001467:	e9 7c 01 00 00       	jmp    c00015e8 <dlrealloc+0x1ab>
c000146c:	83 c0 0b             	add    eax,0xb
c000146f:	bf 10 00 00 00       	mov    edi,0x10
c0001474:	83 f8 0f             	cmp    eax,0xf
c0001477:	76 05                	jbe    c000147e <dlrealloc+0x41>
c0001479:	83 e0 f8             	and    eax,0xfffffff8
c000147c:	89 c7                	mov    edi,eax
c000147e:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001481:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001484:	89 c6                	mov    esi,eax
c0001486:	83 e6 fc             	and    esi,0xfffffffc
c0001489:	a8 02                	test   al,0x2
c000148b:	75 d8                	jne    c0001465 <dlrealloc+0x28>
c000148d:	39 f7                	cmp    edi,esi
c000148f:	0f 86 15 01 00 00    	jbe    c00015aa <dlrealloc+0x16d>
c0001495:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001499:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000149c:	39 15 2c cb 02 c0    	cmp    DWORD PTR ds:0xc002cb2c,edx
c00014a2:	75 33                	jne    c00014d7 <dlrealloc+0x9a>
c00014a4:	83 e1 fc             	and    ecx,0xfffffffc
c00014a7:	01 f1                	add    ecx,esi
c00014a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014ad:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014b0:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014b4:	77 49                	ja     c00014ff <dlrealloc+0xc2>
c00014b6:	01 fd                	add    ebp,edi
c00014b8:	83 e0 01             	and    eax,0x1
c00014bb:	09 f8                	or     eax,edi
c00014bd:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014c0:	89 2d 2c cb 02 c0    	mov    DWORD PTR ds:0xc002cb2c,ebp
c00014c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014ca:	29 f8                	sub    eax,edi
c00014cc:	83 c8 01             	or     eax,0x1
c00014cf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014d2:	e9 11 01 00 00       	jmp    c00015e8 <dlrealloc+0x1ab>
c00014d7:	89 c8                	mov    eax,ecx
c00014d9:	83 e0 fe             	and    eax,0xfffffffe
c00014dc:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014e1:	75 1c                	jne    c00014ff <dlrealloc+0xc2>
c00014e3:	83 e1 fc             	and    ecx,0xfffffffc
c00014e6:	01 f1                	add    ecx,esi
c00014e8:	39 cf                	cmp    edi,ecx
c00014ea:	77 13                	ja     c00014ff <dlrealloc+0xc2>
c00014ec:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014ef:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014f2:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f5:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014f8:	89 ce                	mov    esi,ecx
c00014fa:	e9 ab 00 00 00       	jmp    c00015aa <dlrealloc+0x16d>
c00014ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001503:	8d 47 f9             	lea    eax,[edi-0x7]
c0001506:	83 ec 0c             	sub    esp,0xc
c0001509:	50                   	push   eax
c000150a:	e8 f1 f9 ff ff       	call   c0000f00 <dlmalloc>
c000150f:	83 c4 10             	add    esp,0x10
c0001512:	89 c1                	mov    ecx,eax
c0001514:	85 c0                	test   eax,eax
c0001516:	0f 84 49 ff ff ff    	je     c0001465 <dlrealloc+0x28>
c000151c:	8d 40 f8             	lea    eax,[eax-0x8]
c000151f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001523:	39 c2                	cmp    edx,eax
c0001525:	75 0a                	jne    c0001531 <dlrealloc+0xf4>
c0001527:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000152a:	83 e0 fc             	and    eax,0xfffffffc
c000152d:	01 c6                	add    esi,eax
c000152f:	eb 79                	jmp    c00015aa <dlrealloc+0x16d>
c0001531:	83 ee 04             	sub    esi,0x4
c0001534:	83 fe 27             	cmp    esi,0x27
c0001537:	76 16                	jbe    c000154f <dlrealloc+0x112>
c0001539:	50                   	push   eax
c000153a:	56                   	push   esi
c000153b:	53                   	push   ebx
c000153c:	51                   	push   ecx
c000153d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001541:	e8 5a f1 ff ff       	call   c00006a0 <memcpy>
c0001546:	83 c4 10             	add    esp,0x10
c0001549:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000154d:	eb 43                	jmp    c0001592 <dlrealloc+0x155>
c000154f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001551:	83 fe 13             	cmp    esi,0x13
c0001554:	89 01                	mov    DWORD PTR [ecx],eax
c0001556:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001559:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000155c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000155f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001562:	76 2e                	jbe    c0001592 <dlrealloc+0x155>
c0001564:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001567:	83 fe 1b             	cmp    esi,0x1b
c000156a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000156d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001570:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001573:	76 1d                	jbe    c0001592 <dlrealloc+0x155>
c0001575:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001578:	83 fe 23             	cmp    esi,0x23
c000157b:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000157e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001581:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001584:	76 0c                	jbe    c0001592 <dlrealloc+0x155>
c0001586:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001589:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c000158c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000158f:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001592:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001596:	83 ec 0c             	sub    esp,0xc
c0001599:	53                   	push   ebx
c000159a:	e8 06 f6 ff ff       	call   c0000ba5 <dlfree>
c000159f:	83 c4 10             	add    esp,0x10
c00015a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a6:	89 cb                	mov    ebx,ecx
c00015a8:	eb 3e                	jmp    c00015e8 <dlrealloc+0x1ab>
c00015aa:	89 f2                	mov    edx,esi
c00015ac:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015af:	29 fa                	sub    edx,edi
c00015b1:	83 e1 01             	and    ecx,0x1
c00015b4:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015b8:	83 fa 0f             	cmp    edx,0xf
c00015bb:	77 0b                	ja     c00015c8 <dlrealloc+0x18b>
c00015bd:	09 ce                	or     esi,ecx
c00015bf:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015c2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c6:	eb 20                	jmp    c00015e8 <dlrealloc+0x1ab>
c00015c8:	01 fd                	add    ebp,edi
c00015ca:	83 ec 0c             	sub    esp,0xc
c00015cd:	09 cf                	or     edi,ecx
c00015cf:	83 ca 01             	or     edx,0x1
c00015d2:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d5:	83 c5 08             	add    ebp,0x8
c00015d8:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015db:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015df:	55                   	push   ebp
c00015e0:	e8 c0 f5 ff ff       	call   c0000ba5 <dlfree>
c00015e5:	83 c4 10             	add    esp,0x10
c00015e8:	83 c4 1c             	add    esp,0x1c
c00015eb:	89 d8                	mov    eax,ebx
c00015ed:	5b                   	pop    ebx
c00015ee:	5e                   	pop    esi
c00015ef:	5f                   	pop    edi
c00015f0:	5d                   	pop    ebp
c00015f1:	c3                   	ret    

c00015f2 <dlmemalign>:
c00015f2:	55                   	push   ebp
c00015f3:	57                   	push   edi
c00015f4:	56                   	push   esi
c00015f5:	53                   	push   ebx
c00015f6:	83 ec 0c             	sub    esp,0xc
c00015f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001601:	83 fa 08             	cmp    edx,0x8
c0001604:	77 10                	ja     c0001616 <dlmemalign+0x24>
c0001606:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000160a:	83 c4 0c             	add    esp,0xc
c000160d:	5b                   	pop    ebx
c000160e:	5e                   	pop    esi
c000160f:	5f                   	pop    edi
c0001610:	5d                   	pop    ebp
c0001611:	e9 ea f8 ff ff       	jmp    c0000f00 <dlmalloc>
c0001616:	bf 10 00 00 00       	mov    edi,0x10
c000161b:	83 fa 0f             	cmp    edx,0xf
c000161e:	76 13                	jbe    c0001633 <dlmemalign+0x41>
c0001620:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001623:	85 d1                	test   ecx,edx
c0001625:	75 04                	jne    c000162b <dlmemalign+0x39>
c0001627:	89 d7                	mov    edi,edx
c0001629:	eb 08                	jmp    c0001633 <dlmemalign+0x41>
c000162b:	39 d7                	cmp    edi,edx
c000162d:	73 04                	jae    c0001633 <dlmemalign+0x41>
c000162f:	01 ff                	add    edi,edi
c0001631:	eb f8                	jmp    c000162b <dlmemalign+0x39>
c0001633:	83 f8 df             	cmp    eax,0xffffffdf
c0001636:	76 07                	jbe    c000163f <dlmemalign+0x4d>
c0001638:	31 c0                	xor    eax,eax
c000163a:	e9 ce 00 00 00       	jmp    c000170d <dlmemalign+0x11b>
c000163f:	83 c0 0b             	add    eax,0xb
c0001642:	bd 10 00 00 00       	mov    ebp,0x10
c0001647:	83 f8 0f             	cmp    eax,0xf
c000164a:	76 05                	jbe    c0001651 <dlmemalign+0x5f>
c000164c:	83 e0 f8             	and    eax,0xfffffff8
c000164f:	89 c5                	mov    ebp,eax
c0001651:	83 ec 0c             	sub    esp,0xc
c0001654:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001658:	50                   	push   eax
c0001659:	e8 a2 f8 ff ff       	call   c0000f00 <dlmalloc>
c000165e:	83 c4 10             	add    esp,0x10
c0001661:	89 c1                	mov    ecx,eax
c0001663:	85 c0                	test   eax,eax
c0001665:	74 d1                	je     c0001638 <dlmemalign+0x46>
c0001667:	31 d2                	xor    edx,edx
c0001669:	8d 70 f8             	lea    esi,[eax-0x8]
c000166c:	f7 f7                	div    edi
c000166e:	85 d2                	test   edx,edx
c0001670:	74 62                	je     c00016d4 <dlmemalign+0xe2>
c0001672:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001676:	89 f8                	mov    eax,edi
c0001678:	f7 d8                	neg    eax
c000167a:	21 c3                	and    ebx,eax
c000167c:	83 eb 08             	sub    ebx,0x8
c000167f:	89 d8                	mov    eax,ebx
c0001681:	29 f0                	sub    eax,esi
c0001683:	83 f8 0f             	cmp    eax,0xf
c0001686:	77 02                	ja     c000168a <dlmemalign+0x98>
c0001688:	01 fb                	add    ebx,edi
c000168a:	89 d8                	mov    eax,ebx
c000168c:	29 f0                	sub    eax,esi
c000168e:	89 c6                	mov    esi,eax
c0001690:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001693:	89 c2                	mov    edx,eax
c0001695:	83 e2 fc             	and    edx,0xfffffffc
c0001698:	29 f2                	sub    edx,esi
c000169a:	a8 02                	test   al,0x2
c000169c:	74 10                	je     c00016ae <dlmemalign+0xbc>
c000169e:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016a1:	83 ca 02             	or     edx,0x2
c00016a4:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a7:	89 33                	mov    DWORD PTR [ebx],esi
c00016a9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016ac:	eb 5f                	jmp    c000170d <dlmemalign+0x11b>
c00016ae:	83 ec 0c             	sub    esp,0xc
c00016b1:	89 d0                	mov    eax,edx
c00016b3:	83 c8 01             	or     eax,0x1
c00016b6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016b9:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016be:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016c1:	83 e0 01             	and    eax,0x1
c00016c4:	09 f0                	or     eax,esi
c00016c6:	89 de                	mov    esi,ebx
c00016c8:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016cb:	51                   	push   ecx
c00016cc:	e8 d4 f4 ff ff       	call   c0000ba5 <dlfree>
c00016d1:	83 c4 10             	add    esp,0x10
c00016d4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d7:	a8 02                	test   al,0x2
c00016d9:	75 2f                	jne    c000170a <dlmemalign+0x118>
c00016db:	83 e0 fc             	and    eax,0xfffffffc
c00016de:	8d 55 10             	lea    edx,[ebp+0x10]
c00016e1:	39 c2                	cmp    edx,eax
c00016e3:	73 25                	jae    c000170a <dlmemalign+0x118>
c00016e5:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016e8:	83 ec 0c             	sub    esp,0xc
c00016eb:	29 e8                	sub    eax,ebp
c00016ed:	83 c2 08             	add    edx,0x8
c00016f0:	83 c8 01             	or     eax,0x1
c00016f3:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016f9:	83 e0 01             	and    eax,0x1
c00016fc:	09 c5                	or     ebp,eax
c00016fe:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001701:	52                   	push   edx
c0001702:	e8 9e f4 ff ff       	call   c0000ba5 <dlfree>
c0001707:	83 c4 10             	add    esp,0x10
c000170a:	8d 46 08             	lea    eax,[esi+0x8]
c000170d:	83 c4 0c             	add    esp,0xc
c0001710:	5b                   	pop    ebx
c0001711:	5e                   	pop    esi
c0001712:	5f                   	pop    edi
c0001713:	5d                   	pop    ebp
c0001714:	c3                   	ret    

c0001715 <dlcalloc>:
c0001715:	53                   	push   ebx
c0001716:	83 ec 14             	sub    esp,0x14
c0001719:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000171d:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001722:	50                   	push   eax
c0001723:	e8 d8 f7 ff ff       	call   c0000f00 <dlmalloc>
c0001728:	83 c4 10             	add    esp,0x10
c000172b:	89 c3                	mov    ebx,eax
c000172d:	85 c0                	test   eax,eax
c000172f:	74 77                	je     c00017a8 <dlcalloc+0x93>
c0001731:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001734:	89 d0                	mov    eax,edx
c0001736:	83 e0 fc             	and    eax,0xfffffffc
c0001739:	80 e2 02             	and    dl,0x2
c000173c:	75 5a                	jne    c0001798 <dlcalloc+0x83>
c000173e:	83 e8 04             	sub    eax,0x4
c0001741:	83 f8 27             	cmp    eax,0x27
c0001744:	76 03                	jbe    c0001749 <dlcalloc+0x34>
c0001746:	51                   	push   ecx
c0001747:	eb 53                	jmp    c000179c <dlcalloc+0x87>
c0001749:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000174f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001756:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000175d:	83 f8 13             	cmp    eax,0x13
c0001760:	76 46                	jbe    c00017a8 <dlcalloc+0x93>
c0001762:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001769:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001770:	83 f8 1b             	cmp    eax,0x1b
c0001773:	76 33                	jbe    c00017a8 <dlcalloc+0x93>
c0001775:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000177c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001783:	83 f8 23             	cmp    eax,0x23
c0001786:	76 20                	jbe    c00017a8 <dlcalloc+0x93>
c0001788:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000178f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001796:	eb 10                	jmp    c00017a8 <dlcalloc+0x93>
c0001798:	83 e8 08             	sub    eax,0x8
c000179b:	52                   	push   edx
c000179c:	50                   	push   eax
c000179d:	6a 00                	push   0x0
c000179f:	53                   	push   ebx
c00017a0:	e8 1f ef ff ff       	call   c00006c4 <memset>
c00017a5:	83 c4 10             	add    esp,0x10
c00017a8:	89 d8                	mov    eax,ebx
c00017aa:	83 c4 08             	add    esp,0x8
c00017ad:	5b                   	pop    ebx
c00017ae:	c3                   	ret    

c00017af <dlcfree>:
c00017af:	e9 f1 f3 ff ff       	jmp    c0000ba5 <dlfree>

c00017b4 <dlindependent_calloc>:
c00017b4:	83 ec 28             	sub    esp,0x28
c00017b7:	b9 03 00 00 00       	mov    ecx,0x3
c00017bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017c8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017d0:	e8 b9 fa ff ff       	call   c000128e <iALLOc>
c00017d5:	83 c4 2c             	add    esp,0x2c
c00017d8:	c3                   	ret    

c00017d9 <dlindependent_comalloc>:
c00017d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017e1:	31 c9                	xor    ecx,ecx
c00017e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017eb:	e9 9e fa ff ff       	jmp    c000128e <iALLOc>

c00017f0 <dlvalloc>:
c00017f0:	83 ec 0c             	sub    esp,0xc
c00017f3:	83 3d 00 cb 02 c0 00 	cmp    DWORD PTR ds:0xc002cb00,0x0
c00017fa:	75 0a                	jne    c0001806 <dlvalloc+0x16>
c00017fc:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c0001801:	e8 b8 f2 ff ff       	call   c0000abe <malloc_consolidate>
c0001806:	50                   	push   eax
c0001807:	50                   	push   eax
c0001808:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000180c:	ff 35 5c ce 02 c0    	push   DWORD PTR ds:0xc002ce5c
c0001812:	e8 db fd ff ff       	call   c00015f2 <dlmemalign>
c0001817:	83 c4 1c             	add    esp,0x1c
c000181a:	c3                   	ret    

c000181b <dlpvalloc>:
c000181b:	83 ec 0c             	sub    esp,0xc
c000181e:	83 3d 00 cb 02 c0 00 	cmp    DWORD PTR ds:0xc002cb00,0x0
c0001825:	75 0a                	jne    c0001831 <dlpvalloc+0x16>
c0001827:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c000182c:	e8 8d f2 ff ff       	call   c0000abe <malloc_consolidate>
c0001831:	a1 5c ce 02 c0       	mov    eax,ds:0xc002ce5c
c0001836:	89 c1                	mov    ecx,eax
c0001838:	52                   	push   edx
c0001839:	f7 d9                	neg    ecx
c000183b:	52                   	push   edx
c000183c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001840:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001844:	21 ca                	and    edx,ecx
c0001846:	52                   	push   edx
c0001847:	50                   	push   eax
c0001848:	e8 a5 fd ff ff       	call   c00015f2 <dlmemalign>
c000184d:	83 c4 1c             	add    esp,0x1c
c0001850:	c3                   	ret    

c0001851 <dlmalloc_trim>:
c0001851:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c0001856:	e8 63 f2 ff ff       	call   c0000abe <malloc_consolidate>
c000185b:	31 c0                	xor    eax,eax
c000185d:	c3                   	ret    

c000185e <dlmalloc_usable_size>:
c000185e:	53                   	push   ebx
c000185f:	31 c0                	xor    eax,eax
c0001861:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001865:	85 c9                	test   ecx,ecx
c0001867:	74 24                	je     c000188d <dlmalloc_usable_size+0x2f>
c0001869:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000186c:	f6 c2 02             	test   dl,0x2
c000186f:	74 08                	je     c0001879 <dlmalloc_usable_size+0x1b>
c0001871:	83 e2 fc             	and    edx,0xfffffffc
c0001874:	8d 42 f8             	lea    eax,[edx-0x8]
c0001877:	eb 14                	jmp    c000188d <dlmalloc_usable_size+0x2f>
c0001879:	89 d3                	mov    ebx,edx
c000187b:	31 c0                	xor    eax,eax
c000187d:	83 e3 fe             	and    ebx,0xfffffffe
c0001880:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001885:	74 06                	je     c000188d <dlmalloc_usable_size+0x2f>
c0001887:	83 e2 fc             	and    edx,0xfffffffc
c000188a:	8d 42 fc             	lea    eax,[edx-0x4]
c000188d:	5b                   	pop    ebx
c000188e:	c3                   	ret    

c000188f <dlmallinfo>:
c000188f:	55                   	push   ebp
c0001890:	57                   	push   edi
c0001891:	56                   	push   esi
c0001892:	53                   	push   ebx
c0001893:	83 ec 08             	sub    esp,0x8
c0001896:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000189a:	83 3d 2c cb 02 c0 00 	cmp    DWORD PTR ds:0xc002cb2c,0x0
c00018a1:	75 0a                	jne    c00018ad <dlmallinfo+0x1e>
c00018a3:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c00018a8:	e8 11 f2 ff ff       	call   c0000abe <malloc_consolidate>
c00018ad:	a1 2c cb 02 c0       	mov    eax,ds:0xc002cb2c
c00018b2:	31 ed                	xor    ebp,ebp
c00018b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018b7:	31 c9                	xor    ecx,ecx
c00018b9:	83 e0 fc             	and    eax,0xfffffffc
c00018bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018c0:	31 c0                	xor    eax,eax
c00018c2:	8b 14 85 04 cb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd34fc]
c00018c9:	85 d2                	test   edx,edx
c00018cb:	74 0e                	je     c00018db <dlmallinfo+0x4c>
c00018cd:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018d0:	45                   	inc    ebp
c00018d1:	83 e6 fc             	and    esi,0xfffffffc
c00018d4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d7:	01 f1                	add    ecx,esi
c00018d9:	eb ee                	jmp    c00018c9 <dlmallinfo+0x3a>
c00018db:	40                   	inc    eax
c00018dc:	83 f8 0a             	cmp    eax,0xa
c00018df:	75 e1                	jne    c00018c2 <dlmallinfo+0x33>
c00018e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018ec:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018ef:	b8 34 cb 02 c0       	mov    eax,0xc002cb34
c00018f4:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f7:	39 f0                	cmp    eax,esi
c00018f9:	74 10                	je     c000190b <dlmallinfo+0x7c>
c00018fb:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018fe:	ff 04 24             	inc    DWORD PTR [esp]
c0001901:	83 e7 fc             	and    edi,0xfffffffc
c0001904:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001907:	01 fa                	add    edx,edi
c0001909:	eb ec                	jmp    c00018f7 <dlmallinfo+0x68>
c000190b:	83 c0 08             	add    eax,0x8
c000190e:	3d 2c ce 02 c0       	cmp    eax,0xc002ce2c
c0001913:	75 df                	jne    c00018f4 <dlmallinfo+0x65>
c0001915:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001918:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000191b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000191e:	a1 68 ce 02 c0       	mov    eax,ds:0xc002ce68
c0001923:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001926:	89 03                	mov    DWORD PTR [ebx],eax
c0001928:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000192b:	8b 35 50 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ce50
c0001931:	29 d0                	sub    eax,edx
c0001933:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001936:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001939:	8b 35 64 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ce64
c000193f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001943:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001946:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001949:	8b 35 74 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ce74
c000194f:	89 d8                	mov    eax,ebx
c0001951:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001954:	83 c4 08             	add    esp,0x8
c0001957:	5b                   	pop    ebx
c0001958:	5e                   	pop    esi
c0001959:	5f                   	pop    edi
c000195a:	5d                   	pop    ebp
c000195b:	c2 04 00             	ret    0x4

c000195e <dlmalloc_stats>:
c000195e:	83 ec 30             	sub    esp,0x30
c0001961:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001965:	50                   	push   eax
c0001966:	e8 24 ff ff ff       	call   c000188f <dlmallinfo>
c000196b:	83 c4 30             	add    esp,0x30
c000196e:	c3                   	ret    

c000196f <dlmallopt>:
c000196f:	56                   	push   esi
c0001970:	b8 00 cb 02 c0       	mov    eax,0xc002cb00
c0001975:	53                   	push   ebx
c0001976:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000197a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000197e:	e8 3b f1 ff ff       	call   c0000abe <malloc_consolidate>
c0001983:	8d 46 04             	lea    eax,[esi+0x4]
c0001986:	83 f8 05             	cmp    eax,0x5
c0001989:	77 67                	ja     c00019f2 <dlmallopt+0x83>
c000198b:	ff 24 85 e4 80 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd7f1c]
c0001992:	83 fb 50             	cmp    ebx,0x50
c0001995:	77 5b                	ja     c00019f2 <dlmallopt+0x83>
c0001997:	ba 08 00 00 00       	mov    edx,0x8
c000199c:	85 db                	test   ebx,ebx
c000199e:	74 12                	je     c00019b2 <dlmallopt+0x43>
c00019a0:	83 c3 0b             	add    ebx,0xb
c00019a3:	ba 10 00 00 00       	mov    edx,0x10
c00019a8:	83 fb 0f             	cmp    ebx,0xf
c00019ab:	76 05                	jbe    c00019b2 <dlmallopt+0x43>
c00019ad:	89 da                	mov    edx,ebx
c00019af:	83 e2 f8             	and    edx,0xfffffff8
c00019b2:	a1 00 cb 02 c0       	mov    eax,ds:0xc002cb00
c00019b7:	83 e0 03             	and    eax,0x3
c00019ba:	09 d0                	or     eax,edx
c00019bc:	a3 00 cb 02 c0       	mov    ds:0xc002cb00,eax
c00019c1:	eb 31                	jmp    c00019f4 <dlmallopt+0x85>
c00019c3:	89 1d 44 ce 02 c0    	mov    DWORD PTR ds:0xc002ce44,ebx
c00019c9:	eb 06                	jmp    c00019d1 <dlmallopt+0x62>
c00019cb:	89 1d 48 ce 02 c0    	mov    DWORD PTR ds:0xc002ce48,ebx
c00019d1:	be 01 00 00 00       	mov    esi,0x1
c00019d6:	eb 1c                	jmp    c00019f4 <dlmallopt+0x85>
c00019d8:	89 1d 4c ce 02 c0    	mov    DWORD PTR ds:0xc002ce4c,ebx
c00019de:	eb f1                	jmp    c00019d1 <dlmallopt+0x62>
c00019e0:	31 f6                	xor    esi,esi
c00019e2:	85 db                	test   ebx,ebx
c00019e4:	75 0e                	jne    c00019f4 <dlmallopt+0x85>
c00019e6:	c7 05 54 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce54,0x0
c00019f0:	eb df                	jmp    c00019d1 <dlmallopt+0x62>
c00019f2:	31 f6                	xor    esi,esi
c00019f4:	89 f0                	mov    eax,esi
c00019f6:	5b                   	pop    ebx
c00019f7:	5e                   	pop    esi
c00019f8:	c3                   	ret    

c00019f9 <disk_status>:
c00019f9:	31 c0                	xor    eax,eax
c00019fb:	c3                   	ret    

c00019fc <disk_initialize>:
c00019fc:	31 c0                	xor    eax,eax
c00019fe:	c3                   	ret    

c00019ff <disk_read>:
c00019ff:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a04:	0f b6 04 85 c0 e5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1a40]
c0001a0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a10:	e9 31 e7 01 00       	jmp    c0020146 <fatWrapperReadDisk>

c0001a15 <disk_write>:
c0001a15:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a1a:	0f b6 04 85 c0 e5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1a40]
c0001a22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a26:	e9 62 e7 01 00       	jmp    c002018d <fatWrapperWriteDisk>

c0001a2b <disk_ioctl>:
c0001a2b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a34:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a39:	0f b6 04 85 c0 e5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1a40]
c0001a41:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a45:	e9 8a e7 01 00       	jmp    c00201d4 <fatWrapperIoctl>

c0001a4a <ld_word>:
c0001a4a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a4e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a51:	c1 e2 08             	shl    edx,0x8
c0001a54:	09 d0                	or     eax,edx
c0001a56:	c3                   	ret    

c0001a57 <ld_dword>:
c0001a57:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a5b:	89 d1                	mov    ecx,edx
c0001a5d:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a61:	c1 e1 08             	shl    ecx,0x8
c0001a64:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a67:	09 ca                	or     edx,ecx
c0001a69:	c1 e2 08             	shl    edx,0x8
c0001a6c:	09 d0                	or     eax,edx
c0001a6e:	c3                   	ret    

c0001a6f <ld_qword>:
c0001a6f:	57                   	push   edi
c0001a70:	56                   	push   esi
c0001a71:	53                   	push   ebx
c0001a72:	31 db                	xor    ebx,ebx
c0001a74:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a77:	89 df                	mov    edi,ebx
c0001a79:	89 ce                	mov    esi,ecx
c0001a7b:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a7f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a83:	c1 e6 08             	shl    esi,0x8
c0001a86:	09 f2                	or     edx,esi
c0001a88:	89 d6                	mov    esi,edx
c0001a8a:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a8e:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a92:	c1 e6 08             	shl    esi,0x8
c0001a95:	09 f2                	or     edx,esi
c0001a97:	89 d6                	mov    esi,edx
c0001a99:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a9d:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aa4:	c1 e6 08             	shl    esi,0x8
c0001aa7:	89 fb                	mov    ebx,edi
c0001aa9:	09 f2                	or     edx,esi
c0001aab:	89 d1                	mov    ecx,edx
c0001aad:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ab1:	c1 e1 08             	shl    ecx,0x8
c0001ab4:	89 da                	mov    edx,ebx
c0001ab6:	09 c8                	or     eax,ecx
c0001ab8:	5b                   	pop    ebx
c0001ab9:	5e                   	pop    esi
c0001aba:	5f                   	pop    edi
c0001abb:	c3                   	ret    

c0001abc <st_word>:
c0001abc:	66 89 10             	mov    WORD PTR [eax],dx
c0001abf:	c3                   	ret    

c0001ac0 <st_dword>:
c0001ac0:	89 10                	mov    DWORD PTR [eax],edx
c0001ac2:	c3                   	ret    

c0001ac3 <st_qword>:
c0001ac3:	89 10                	mov    DWORD PTR [eax],edx
c0001ac5:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ac8:	c3                   	ret    

c0001ac9 <mem_cpy>:
c0001ac9:	85 c9                	test   ecx,ecx
c0001acb:	74 10                	je     c0001add <mem_cpy+0x14>
c0001acd:	57                   	push   edi
c0001ace:	01 c1                	add    ecx,eax
c0001ad0:	56                   	push   esi
c0001ad1:	89 c7                	mov    edi,eax
c0001ad3:	89 d6                	mov    esi,edx
c0001ad5:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad6:	39 f9                	cmp    ecx,edi
c0001ad8:	75 fb                	jne    c0001ad5 <mem_cpy+0xc>
c0001ada:	5e                   	pop    esi
c0001adb:	5f                   	pop    edi
c0001adc:	c3                   	ret    
c0001add:	c3                   	ret    

c0001ade <mem_set>:
c0001ade:	01 c1                	add    ecx,eax
c0001ae0:	40                   	inc    eax
c0001ae1:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ae4:	39 c8                	cmp    eax,ecx
c0001ae6:	75 f8                	jne    c0001ae0 <mem_set+0x2>
c0001ae8:	c3                   	ret    

c0001ae9 <mem_cmp>:
c0001ae9:	57                   	push   edi
c0001aea:	56                   	push   esi
c0001aeb:	89 c6                	mov    esi,eax
c0001aed:	53                   	push   ebx
c0001aee:	46                   	inc    esi
c0001aef:	42                   	inc    edx
c0001af0:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001af4:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001af8:	29 fb                	sub    ebx,edi
c0001afa:	89 cf                	mov    edi,ecx
c0001afc:	29 f7                	sub    edi,esi
c0001afe:	01 c7                	add    edi,eax
c0001b00:	74 04                	je     c0001b06 <mem_cmp+0x1d>
c0001b02:	85 db                	test   ebx,ebx
c0001b04:	74 e8                	je     c0001aee <mem_cmp+0x5>
c0001b06:	89 d8                	mov    eax,ebx
c0001b08:	5b                   	pop    ebx
c0001b09:	5e                   	pop    esi
c0001b0a:	5f                   	pop    edi
c0001b0b:	c3                   	ret    

c0001b0c <chk_chr>:
c0001b0c:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b0f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b12:	74 07                	je     c0001b1b <chk_chr+0xf>
c0001b14:	39 d1                	cmp    ecx,edx
c0001b16:	74 03                	je     c0001b1b <chk_chr+0xf>
c0001b18:	40                   	inc    eax
c0001b19:	eb f1                	jmp    c0001b0c <chk_chr>
c0001b1b:	89 c8                	mov    eax,ecx
c0001b1d:	c3                   	ret    

c0001b1e <dbc_1st>:
c0001b1e:	31 c0                	xor    eax,eax
c0001b20:	c3                   	ret    

c0001b21 <dbc_2nd>:
c0001b21:	31 c0                	xor    eax,eax
c0001b23:	c3                   	ret    

c0001b24 <tchar2uni>:
c0001b24:	57                   	push   edi
c0001b25:	89 c7                	mov    edi,eax
c0001b27:	56                   	push   esi
c0001b28:	53                   	push   ebx
c0001b29:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b2b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b2d:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b30:	84 c9                	test   cl,cl
c0001b32:	78 0a                	js     c0001b3e <tchar2uni+0x1a>
c0001b34:	0f b6 d1             	movzx  edx,cl
c0001b37:	89 f3                	mov    ebx,esi
c0001b39:	e9 9f 00 00 00       	jmp    c0001bdd <tchar2uni+0xb9>
c0001b3e:	88 ca                	mov    dl,cl
c0001b40:	83 e2 e0             	and    edx,0xffffffe0
c0001b43:	80 fa c0             	cmp    dl,0xc0
c0001b46:	75 0c                	jne    c0001b54 <tchar2uni+0x30>
c0001b48:	89 ca                	mov    edx,ecx
c0001b4a:	b9 01 00 00 00       	mov    ecx,0x1
c0001b4f:	83 e2 1f             	and    edx,0x1f
c0001b52:	eb 2e                	jmp    c0001b82 <tchar2uni+0x5e>
c0001b54:	88 ca                	mov    dl,cl
c0001b56:	83 e2 f0             	and    edx,0xfffffff0
c0001b59:	80 fa e0             	cmp    dl,0xe0
c0001b5c:	75 0c                	jne    c0001b6a <tchar2uni+0x46>
c0001b5e:	89 ca                	mov    edx,ecx
c0001b60:	b9 02 00 00 00       	mov    ecx,0x2
c0001b65:	83 e2 0f             	and    edx,0xf
c0001b68:	eb 18                	jmp    c0001b82 <tchar2uni+0x5e>
c0001b6a:	88 ca                	mov    dl,cl
c0001b6c:	83 e2 f8             	and    edx,0xfffffff8
c0001b6f:	88 d0                	mov    al,dl
c0001b71:	83 ca ff             	or     edx,0xffffffff
c0001b74:	3c f0                	cmp    al,0xf0
c0001b76:	75 6c                	jne    c0001be4 <tchar2uni+0xc0>
c0001b78:	89 ca                	mov    edx,ecx
c0001b7a:	b9 03 00 00 00       	mov    ecx,0x3
c0001b7f:	83 e2 07             	and    edx,0x7
c0001b82:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b86:	46                   	inc    esi
c0001b87:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b8a:	88 c8                	mov    al,cl
c0001b8c:	83 e0 c0             	and    eax,0xffffffc0
c0001b8f:	3c 80                	cmp    al,0x80
c0001b91:	75 4e                	jne    c0001be1 <tchar2uni+0xbd>
c0001b93:	c1 e2 06             	shl    edx,0x6
c0001b96:	83 e1 3f             	and    ecx,0x3f
c0001b99:	09 ca                	or     edx,ecx
c0001b9b:	39 de                	cmp    esi,ebx
c0001b9d:	75 e7                	jne    c0001b86 <tchar2uni+0x62>
c0001b9f:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ba2:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ba8:	77 37                	ja     c0001be1 <tchar2uni+0xbd>
c0001baa:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bb0:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bb6:	76 29                	jbe    c0001be1 <tchar2uni+0xbd>
c0001bb8:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bbe:	76 1d                	jbe    c0001bdd <tchar2uni+0xb9>
c0001bc0:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc6:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bcc:	c1 e1 06             	shl    ecx,0x6
c0001bcf:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd5:	09 ca                	or     edx,ecx
c0001bd7:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bdd:	89 1f                	mov    DWORD PTR [edi],ebx
c0001bdf:	eb 03                	jmp    c0001be4 <tchar2uni+0xc0>
c0001be1:	83 ca ff             	or     edx,0xffffffff
c0001be4:	5b                   	pop    ebx
c0001be5:	89 d0                	mov    eax,edx
c0001be7:	5e                   	pop    esi
c0001be8:	5f                   	pop    edi
c0001be9:	c3                   	ret    

c0001bea <put_utf>:
c0001bea:	53                   	push   ebx
c0001beb:	83 f8 7f             	cmp    eax,0x7f
c0001bee:	89 c3                	mov    ebx,eax
c0001bf0:	b0 00                	mov    al,0x0
c0001bf2:	77 11                	ja     c0001c05 <put_utf+0x1b>
c0001bf4:	85 c9                	test   ecx,ecx
c0001bf6:	0f 84 e5 00 00 00    	je     c0001ce1 <put_utf+0xf7>
c0001bfc:	88 1a                	mov    BYTE PTR [edx],bl
c0001bfe:	b0 01                	mov    al,0x1
c0001c00:	e9 dc 00 00 00       	jmp    c0001ce1 <put_utf+0xf7>
c0001c05:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c0b:	77 23                	ja     c0001c30 <put_utf+0x46>
c0001c0d:	83 f9 01             	cmp    ecx,0x1
c0001c10:	0f 86 cb 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c16:	89 d8                	mov    eax,ebx
c0001c18:	83 e3 3f             	and    ebx,0x3f
c0001c1b:	c1 e8 06             	shr    eax,0x6
c0001c1e:	83 cb 80             	or     ebx,0xffffff80
c0001c21:	83 c8 c0             	or     eax,0xffffffc0
c0001c24:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c27:	88 02                	mov    BYTE PTR [edx],al
c0001c29:	b0 02                	mov    al,0x2
c0001c2b:	e9 b1 00 00 00       	jmp    c0001ce1 <put_utf+0xf7>
c0001c30:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c36:	77 40                	ja     c0001c78 <put_utf+0x8e>
c0001c38:	83 f9 02             	cmp    ecx,0x2
c0001c3b:	0f 86 a0 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c41:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c47:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c4d:	0f 86 8e 00 00 00    	jbe    c0001ce1 <put_utf+0xf7>
c0001c53:	89 d8                	mov    eax,ebx
c0001c55:	c1 e8 0c             	shr    eax,0xc
c0001c58:	83 c8 e0             	or     eax,0xffffffe0
c0001c5b:	88 02                	mov    BYTE PTR [edx],al
c0001c5d:	89 d8                	mov    eax,ebx
c0001c5f:	83 e3 3f             	and    ebx,0x3f
c0001c62:	c1 e8 06             	shr    eax,0x6
c0001c65:	83 cb 80             	or     ebx,0xffffff80
c0001c68:	83 e0 3f             	and    eax,0x3f
c0001c6b:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c6e:	83 c8 80             	or     eax,0xffffff80
c0001c71:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c74:	b0 03                	mov    al,0x3
c0001c76:	eb 69                	jmp    c0001ce1 <put_utf+0xf7>
c0001c78:	83 f9 03             	cmp    ecx,0x3
c0001c7b:	76 64                	jbe    c0001ce1 <put_utf+0xf7>
c0001c7d:	89 d9                	mov    ecx,ebx
c0001c7f:	0f b7 c3             	movzx  eax,bx
c0001c82:	66 31 c9             	xor    cx,cx
c0001c85:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c8b:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c91:	c1 e9 06             	shr    ecx,0x6
c0001c94:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c9a:	77 43                	ja     c0001cdf <put_utf+0xf5>
c0001c9c:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ca2:	77 3b                	ja     c0001cdf <put_utf+0xf5>
c0001ca4:	09 cb                	or     ebx,ecx
c0001ca6:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cac:	89 d8                	mov    eax,ebx
c0001cae:	c1 e8 12             	shr    eax,0x12
c0001cb1:	83 c8 f0             	or     eax,0xfffffff0
c0001cb4:	88 02                	mov    BYTE PTR [edx],al
c0001cb6:	89 d8                	mov    eax,ebx
c0001cb8:	c1 e8 0c             	shr    eax,0xc
c0001cbb:	83 e0 3f             	and    eax,0x3f
c0001cbe:	83 c8 80             	or     eax,0xffffff80
c0001cc1:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cc4:	89 d8                	mov    eax,ebx
c0001cc6:	83 e3 3f             	and    ebx,0x3f
c0001cc9:	c1 e8 06             	shr    eax,0x6
c0001ccc:	83 cb 80             	or     ebx,0xffffff80
c0001ccf:	83 e0 3f             	and    eax,0x3f
c0001cd2:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cd5:	83 c8 80             	or     eax,0xffffff80
c0001cd8:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cdb:	b0 04                	mov    al,0x4
c0001cdd:	eb 02                	jmp    c0001ce1 <put_utf+0xf7>
c0001cdf:	31 c0                	xor    eax,eax
c0001ce1:	5b                   	pop    ebx
c0001ce2:	c3                   	ret    

c0001ce3 <clst2sect>:
c0001ce3:	89 c1                	mov    ecx,eax
c0001ce5:	83 ea 02             	sub    edx,0x2
c0001ce8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ceb:	83 e8 02             	sub    eax,0x2
c0001cee:	39 d0                	cmp    eax,edx
c0001cf0:	76 0d                	jbe    c0001cff <clst2sect+0x1c>
c0001cf2:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf6:	f7 e2                	mul    edx
c0001cf8:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cfb:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cfe:	c3                   	ret    
c0001cff:	31 c0                	xor    eax,eax
c0001d01:	31 d2                	xor    edx,edx
c0001d03:	c3                   	ret    

c0001d04 <clmt_clust>:
c0001d04:	57                   	push   edi
c0001d05:	89 cf                	mov    edi,ecx
c0001d07:	56                   	push   esi
c0001d08:	89 d6                	mov    esi,edx
c0001d0a:	53                   	push   ebx
c0001d0b:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d0f:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d12:	89 f2                	mov    edx,esi
c0001d14:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d16:	c1 ef 09             	shr    edi,0x9
c0001d19:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d1d:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d20:	89 f9                	mov    ecx,edi
c0001d22:	31 ff                	xor    edi,edi
c0001d24:	57                   	push   edi
c0001d25:	56                   	push   esi
c0001d26:	51                   	push   ecx
c0001d27:	52                   	push   edx
c0001d28:	e8 9f 3a 02 00       	call   c00257cc <__udivdi3>
c0001d2d:	83 c4 10             	add    esp,0x10
c0001d30:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d32:	85 d2                	test   edx,edx
c0001d34:	74 10                	je     c0001d46 <clmt_clust+0x42>
c0001d36:	39 d0                	cmp    eax,edx
c0001d38:	72 07                	jb     c0001d41 <clmt_clust+0x3d>
c0001d3a:	29 d0                	sub    eax,edx
c0001d3c:	83 c3 08             	add    ebx,0x8
c0001d3f:	eb ef                	jmp    c0001d30 <clmt_clust+0x2c>
c0001d41:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d44:	89 c2                	mov    edx,eax
c0001d46:	5b                   	pop    ebx
c0001d47:	89 d0                	mov    eax,edx
c0001d49:	5e                   	pop    esi
c0001d4a:	5f                   	pop    edi
c0001d4b:	c3                   	ret    

c0001d4c <pick_lfn>:
c0001d4c:	55                   	push   ebp
c0001d4d:	57                   	push   edi
c0001d4e:	56                   	push   esi
c0001d4f:	89 d6                	mov    esi,edx
c0001d51:	53                   	push   ebx
c0001d52:	89 c3                	mov    ebx,eax
c0001d54:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d57:	e8 ee fc ff ff       	call   c0001a4a <ld_word>
c0001d5c:	66 85 c0             	test   ax,ax
c0001d5f:	74 04                	je     c0001d65 <pick_lfn+0x19>
c0001d61:	31 c0                	xor    eax,eax
c0001d63:	eb 5c                	jmp    c0001dc1 <pick_lfn+0x75>
c0001d65:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d68:	bd 01 00 00 00       	mov    ebp,0x1
c0001d6d:	83 e1 bf             	and    ecx,0xffffffbf
c0001d70:	31 ff                	xor    edi,edi
c0001d72:	49                   	dec    ecx
c0001d73:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d76:	0f b6 87 00 82 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd7e00]
c0001d7d:	01 f0                	add    eax,esi
c0001d7f:	e8 c6 fc ff ff       	call   c0001a4a <ld_word>
c0001d84:	66 85 ed             	test   bp,bp
c0001d87:	74 11                	je     c0001d9a <pick_lfn+0x4e>
c0001d89:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d8f:	77 d0                	ja     c0001d61 <pick_lfn+0x15>
c0001d91:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d95:	89 c5                	mov    ebp,eax
c0001d97:	41                   	inc    ecx
c0001d98:	eb 04                	jmp    c0001d9e <pick_lfn+0x52>
c0001d9a:	66 40                	inc    ax
c0001d9c:	75 c3                	jne    c0001d61 <pick_lfn+0x15>
c0001d9e:	47                   	inc    edi
c0001d9f:	83 ff 0d             	cmp    edi,0xd
c0001da2:	75 d2                	jne    c0001d76 <pick_lfn+0x2a>
c0001da4:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da7:	74 13                	je     c0001dbc <pick_lfn+0x70>
c0001da9:	66 85 ed             	test   bp,bp
c0001dac:	74 0e                	je     c0001dbc <pick_lfn+0x70>
c0001dae:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db4:	77 ab                	ja     c0001d61 <pick_lfn+0x15>
c0001db6:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dbc:	b8 01 00 00 00       	mov    eax,0x1
c0001dc1:	5b                   	pop    ebx
c0001dc2:	5e                   	pop    esi
c0001dc3:	5f                   	pop    edi
c0001dc4:	5d                   	pop    ebp
c0001dc5:	c3                   	ret    

c0001dc6 <put_lfn>:
c0001dc6:	55                   	push   ebp
c0001dc7:	31 ed                	xor    ebp,ebp
c0001dc9:	57                   	push   edi
c0001dca:	89 d7                	mov    edi,edx
c0001dcc:	56                   	push   esi
c0001dcd:	31 f6                	xor    esi,esi
c0001dcf:	53                   	push   ebx
c0001dd0:	83 ec 08             	sub    esp,0x8
c0001dd3:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd6:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001dde:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001de4:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001de7:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001dea:	31 d2                	xor    edx,edx
c0001dec:	e8 cb fc ff ff       	call   c0001abc <st_word>
c0001df1:	0f b6 d9             	movzx  ebx,cl
c0001df4:	4b                   	dec    ebx
c0001df5:	6b db 0d             	imul   ebx,ebx,0xd
c0001df8:	66 83 fe ff          	cmp    si,0xffff
c0001dfc:	74 08                	je     c0001e06 <put_lfn+0x40>
c0001dfe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e01:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e05:	43                   	inc    ebx
c0001e06:	0f b6 85 00 82 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd7e00]
c0001e0d:	0f b7 d6             	movzx  edx,si
c0001e10:	01 f8                	add    eax,edi
c0001e12:	e8 a5 fc ff ff       	call   c0001abc <st_word>
c0001e17:	66 85 f6             	test   si,si
c0001e1a:	75 03                	jne    c0001e1f <put_lfn+0x59>
c0001e1c:	83 ce ff             	or     esi,0xffffffff
c0001e1f:	45                   	inc    ebp
c0001e20:	83 fd 0d             	cmp    ebp,0xd
c0001e23:	75 d3                	jne    c0001df8 <put_lfn+0x32>
c0001e25:	66 46                	inc    si
c0001e27:	74 0a                	je     c0001e33 <put_lfn+0x6d>
c0001e29:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e2c:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e31:	75 09                	jne    c0001e3c <put_lfn+0x76>
c0001e33:	88 c8                	mov    al,cl
c0001e35:	83 c8 40             	or     eax,0x40
c0001e38:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e3c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e40:	88 07                	mov    BYTE PTR [edi],al
c0001e42:	83 c4 08             	add    esp,0x8
c0001e45:	5b                   	pop    ebx
c0001e46:	5e                   	pop    esi
c0001e47:	5f                   	pop    edi
c0001e48:	5d                   	pop    ebp
c0001e49:	c3                   	ret    

c0001e4a <gen_numname>:
c0001e4a:	57                   	push   edi
c0001e4b:	89 cf                	mov    edi,ecx
c0001e4d:	56                   	push   esi
c0001e4e:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e53:	53                   	push   ebx
c0001e54:	89 c6                	mov    esi,eax
c0001e56:	83 ec 10             	sub    esp,0x10
c0001e59:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e5d:	e8 67 fc ff ff       	call   c0001ac9 <mem_cpy>
c0001e62:	83 fb 05             	cmp    ebx,0x5
c0001e65:	76 2d                	jbe    c0001e94 <gen_numname+0x4a>
c0001e67:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e6a:	66 85 c0             	test   ax,ax
c0001e6d:	74 25                	je     c0001e94 <gen_numname+0x4a>
c0001e6f:	83 c7 02             	add    edi,0x2
c0001e72:	ba 10 00 00 00       	mov    edx,0x10
c0001e77:	01 db                	add    ebx,ebx
c0001e79:	89 c1                	mov    ecx,eax
c0001e7b:	66 d1 e8             	shr    ax,1
c0001e7e:	83 e1 01             	and    ecx,0x1
c0001e81:	01 cb                	add    ebx,ecx
c0001e83:	0f ba e3 10          	bt     ebx,0x10
c0001e87:	73 06                	jae    c0001e8f <gen_numname+0x45>
c0001e89:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e8f:	4a                   	dec    edx
c0001e90:	75 e5                	jne    c0001e77 <gen_numname+0x2d>
c0001e92:	eb d3                	jmp    c0001e67 <gen_numname+0x1d>
c0001e94:	b8 07 00 00 00       	mov    eax,0x7
c0001e99:	88 d9                	mov    cl,bl
c0001e9b:	83 e1 0f             	and    ecx,0xf
c0001e9e:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ea1:	80 fa 39             	cmp    dl,0x39
c0001ea4:	76 03                	jbe    c0001ea9 <gen_numname+0x5f>
c0001ea6:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ea9:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001eac:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eb0:	89 da                	mov    edx,ebx
c0001eb2:	c1 ea 04             	shr    edx,0x4
c0001eb5:	83 fb 0f             	cmp    ebx,0xf
c0001eb8:	76 06                	jbe    c0001ec0 <gen_numname+0x76>
c0001eba:	89 c8                	mov    eax,ecx
c0001ebc:	89 d3                	mov    ebx,edx
c0001ebe:	eb d9                	jmp    c0001e99 <gen_numname+0x4f>
c0001ec0:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec5:	31 d2                	xor    edx,edx
c0001ec7:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001eca:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ecd:	39 ca                	cmp    edx,ecx
c0001ecf:	73 18                	jae    c0001ee9 <gen_numname+0x9f>
c0001ed1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed4:	3c 20                	cmp    al,0x20
c0001ed6:	74 11                	je     c0001ee9 <gen_numname+0x9f>
c0001ed8:	e8 41 fc ff ff       	call   c0001b1e <dbc_1st>
c0001edd:	85 c0                	test   eax,eax
c0001edf:	74 05                	je     c0001ee6 <gen_numname+0x9c>
c0001ee1:	39 d3                	cmp    ebx,edx
c0001ee3:	74 04                	je     c0001ee9 <gen_numname+0x9f>
c0001ee5:	42                   	inc    edx
c0001ee6:	42                   	inc    edx
c0001ee7:	eb e1                	jmp    c0001eca <gen_numname+0x80>
c0001ee9:	b0 20                	mov    al,0x20
c0001eeb:	83 f9 07             	cmp    ecx,0x7
c0001eee:	77 05                	ja     c0001ef5 <gen_numname+0xab>
c0001ef0:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ef4:	41                   	inc    ecx
c0001ef5:	42                   	inc    edx
c0001ef6:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001efa:	83 fa 07             	cmp    edx,0x7
c0001efd:	76 ea                	jbe    c0001ee9 <gen_numname+0x9f>
c0001eff:	83 c4 10             	add    esp,0x10
c0001f02:	5b                   	pop    ebx
c0001f03:	5e                   	pop    esi
c0001f04:	5f                   	pop    edi
c0001f05:	c3                   	ret    

c0001f06 <sum_sfn>:
c0001f06:	31 c9                	xor    ecx,ecx
c0001f08:	31 d2                	xor    edx,edx
c0001f0a:	d0 ca                	ror    dl,1
c0001f0c:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f0f:	41                   	inc    ecx
c0001f10:	83 f9 0b             	cmp    ecx,0xb
c0001f13:	75 f5                	jne    c0001f0a <sum_sfn+0x4>
c0001f15:	88 d0                	mov    al,dl
c0001f17:	c3                   	ret    

c0001f18 <xdir_sum>:
c0001f18:	56                   	push   esi
c0001f19:	31 c9                	xor    ecx,ecx
c0001f1b:	53                   	push   ebx
c0001f1c:	31 d2                	xor    edx,edx
c0001f1e:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f22:	43                   	inc    ebx
c0001f23:	c1 e3 05             	shl    ebx,0x5
c0001f26:	83 fa 02             	cmp    edx,0x2
c0001f29:	74 0b                	je     c0001f36 <xdir_sum+0x1e>
c0001f2b:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f2f:	66 d1 c9             	ror    cx,1
c0001f32:	01 f1                	add    ecx,esi
c0001f34:	eb 05                	jmp    c0001f3b <xdir_sum+0x23>
c0001f36:	ba 03 00 00 00       	mov    edx,0x3
c0001f3b:	42                   	inc    edx
c0001f3c:	39 d3                	cmp    ebx,edx
c0001f3e:	77 e6                	ja     c0001f26 <xdir_sum+0xe>
c0001f40:	89 c8                	mov    eax,ecx
c0001f42:	5b                   	pop    ebx
c0001f43:	5e                   	pop    esi
c0001f44:	c3                   	ret    

c0001f45 <xsum32>:
c0001f45:	d1 ca                	ror    edx,1
c0001f47:	0f b6 c0             	movzx  eax,al
c0001f4a:	01 d0                	add    eax,edx
c0001f4c:	c3                   	ret    

c0001f4d <get_xfileinfo>:
c0001f4d:	55                   	push   ebp
c0001f4e:	31 c9                	xor    ecx,ecx
c0001f50:	57                   	push   edi
c0001f51:	bd 40 00 00 00       	mov    ebp,0x40
c0001f56:	56                   	push   esi
c0001f57:	31 ff                	xor    edi,edi
c0001f59:	53                   	push   ebx
c0001f5a:	89 c6                	mov    esi,eax
c0001f5c:	83 ec 0c             	sub    esp,0xc
c0001f5f:	89 d3                	mov    ebx,edx
c0001f61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f68:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f6c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f6f:	76 6d                	jbe    c0001fde <get_xfileinfo+0x91>
c0001f71:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f77:	76 0b                	jbe    c0001f84 <get_xfileinfo+0x37>
c0001f79:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f7d:	bf 01 00 00 00       	mov    edi,0x1
c0001f82:	eb 63                	jmp    c0001fe7 <get_xfileinfo+0x9a>
c0001f84:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f8a:	75 03                	jne    c0001f8f <get_xfileinfo+0x42>
c0001f8c:	83 c5 02             	add    ebp,0x2
c0001f8f:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f92:	83 c5 02             	add    ebp,0x2
c0001f95:	e8 b0 fa ff ff       	call   c0001a4a <ld_word>
c0001f9a:	ff 04 24             	inc    DWORD PTR [esp]
c0001f9d:	66 85 c9             	test   cx,cx
c0001fa0:	75 0d                	jne    c0001faf <get_xfileinfo+0x62>
c0001fa2:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fa8:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fad:	76 2b                	jbe    c0001fda <get_xfileinfo+0x8d>
c0001faf:	c1 e1 10             	shl    ecx,0x10
c0001fb2:	ba ff 00 00 00       	mov    edx,0xff
c0001fb7:	0f b7 c0             	movzx  eax,ax
c0001fba:	29 fa                	sub    edx,edi
c0001fbc:	09 c8                	or     eax,ecx
c0001fbe:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fc2:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fc6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fca:	e8 1b fc ff ff       	call   c0001bea <put_utf>
c0001fcf:	84 c0                	test   al,al
c0001fd1:	74 a6                	je     c0001f79 <get_xfileinfo+0x2c>
c0001fd3:	0f b6 c0             	movzx  eax,al
c0001fd6:	01 c7                	add    edi,eax
c0001fd8:	31 c0                	xor    eax,eax
c0001fda:	89 c1                	mov    ecx,eax
c0001fdc:	eb 8a                	jmp    c0001f68 <get_xfileinfo+0x1b>
c0001fde:	85 ff                	test   edi,edi
c0001fe0:	74 97                	je     c0001f79 <get_xfileinfo+0x2c>
c0001fe2:	66 85 c9             	test   cx,cx
c0001fe5:	75 92                	jne    c0001f79 <get_xfileinfo+0x2c>
c0001fe7:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fec:	31 c0                	xor    eax,eax
c0001fee:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001ff2:	31 d2                	xor    edx,edx
c0001ff4:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001ff7:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ffa:	80 e1 10             	and    cl,0x10
c0001ffd:	75 08                	jne    c0002007 <get_xfileinfo+0xba>
c0001fff:	8d 46 38             	lea    eax,[esi+0x38]
c0002002:	e8 68 fa ff ff       	call   c0001a6f <ld_qword>
c0002007:	89 03                	mov    DWORD PTR [ebx],eax
c0002009:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000200c:	8d 46 0c             	lea    eax,[esi+0xc]
c000200f:	e8 36 fa ff ff       	call   c0001a4a <ld_word>
c0002014:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002018:	8d 46 0e             	lea    eax,[esi+0xe]
c000201b:	e8 2a fa ff ff       	call   c0001a4a <ld_word>
c0002020:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002024:	83 c4 0c             	add    esp,0xc
c0002027:	5b                   	pop    ebx
c0002028:	5e                   	pop    esi
c0002029:	5f                   	pop    edi
c000202a:	5d                   	pop    ebp
c000202b:	c3                   	ret    

c000202c <get_ldnumber>:
c000202c:	8b 10                	mov    edx,DWORD PTR [eax]
c000202e:	85 d2                	test   edx,edx
c0002030:	74 14                	je     c0002046 <get_ldnumber+0x1a>
c0002032:	56                   	push   esi
c0002033:	53                   	push   ebx
c0002034:	89 d3                	mov    ebx,edx
c0002036:	43                   	inc    ebx
c0002037:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000203a:	80 f9 1f             	cmp    cl,0x1f
c000203d:	76 0d                	jbe    c000204c <get_ldnumber+0x20>
c000203f:	80 f9 3a             	cmp    cl,0x3a
c0002042:	75 f2                	jne    c0002036 <get_ldnumber+0xa>
c0002044:	eb 0a                	jmp    c0002050 <get_ldnumber+0x24>
c0002046:	83 c9 ff             	or     ecx,0xffffffff
c0002049:	89 c8                	mov    eax,ecx
c000204b:	c3                   	ret    
c000204c:	31 c9                	xor    ecx,ecx
c000204e:	eb 24                	jmp    c0002074 <get_ldnumber+0x48>
c0002050:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002053:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002056:	80 f9 09             	cmp    cl,0x9
c0002059:	77 16                	ja     c0002071 <get_ldnumber+0x45>
c000205b:	83 c2 02             	add    edx,0x2
c000205e:	83 c9 ff             	or     ecx,0xffffffff
c0002061:	39 d3                	cmp    ebx,edx
c0002063:	75 0f                	jne    c0002074 <get_ldnumber+0x48>
c0002065:	89 f2                	mov    edx,esi
c0002067:	89 18                	mov    DWORD PTR [eax],ebx
c0002069:	0f be ca             	movsx  ecx,dl
c000206c:	83 e9 30             	sub    ecx,0x30
c000206f:	eb 03                	jmp    c0002074 <get_ldnumber+0x48>
c0002071:	83 c9 ff             	or     ecx,0xffffffff
c0002074:	89 c8                	mov    eax,ecx
c0002076:	5b                   	pop    ebx
c0002077:	5e                   	pop    esi
c0002078:	c3                   	ret    

c0002079 <crc32>:
c0002079:	56                   	push   esi
c000207a:	89 d6                	mov    esi,edx
c000207c:	53                   	push   ebx
c000207d:	b2 01                	mov    dl,0x1
c000207f:	bb 08 00 00 00       	mov    ebx,0x8
c0002084:	89 f1                	mov    ecx,esi
c0002086:	84 d1                	test   cl,dl
c0002088:	0f 95 c1             	setne  cl
c000208b:	0f b6 c9             	movzx  ecx,cl
c000208e:	31 c1                	xor    ecx,eax
c0002090:	89 c8                	mov    eax,ecx
c0002092:	d1 e8                	shr    eax,1
c0002094:	80 e1 01             	and    cl,0x1
c0002097:	74 05                	je     c000209e <crc32+0x25>
c0002099:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000209e:	d1 e2                	shl    edx,1
c00020a0:	4b                   	dec    ebx
c00020a1:	75 e1                	jne    c0002084 <crc32+0xb>
c00020a3:	5b                   	pop    ebx
c00020a4:	5e                   	pop    esi
c00020a5:	c3                   	ret    

c00020a6 <test_gpt_header>:
c00020a6:	55                   	push   ebp
c00020a7:	b9 10 00 00 00       	mov    ecx,0x10
c00020ac:	57                   	push   edi
c00020ad:	ba 00 81 02 c0       	mov    edx,0xc0028100
c00020b2:	56                   	push   esi
c00020b3:	31 ff                	xor    edi,edi
c00020b5:	53                   	push   ebx
c00020b6:	89 c3                	mov    ebx,eax
c00020b8:	e8 2c fa ff ff       	call   c0001ae9 <mem_cmp>
c00020bd:	85 c0                	test   eax,eax
c00020bf:	75 55                	jne    c0002116 <test_gpt_header+0x70>
c00020c1:	89 c7                	mov    edi,eax
c00020c3:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020c8:	83 ce ff             	or     esi,0xffffffff
c00020cb:	31 d2                	xor    edx,edx
c00020cd:	83 fd 03             	cmp    ebp,0x3
c00020d0:	76 05                	jbe    c00020d7 <test_gpt_header+0x31>
c00020d2:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020d7:	89 f0                	mov    eax,esi
c00020d9:	45                   	inc    ebp
c00020da:	e8 9a ff ff ff       	call   c0002079 <crc32>
c00020df:	83 fd 4c             	cmp    ebp,0x4c
c00020e2:	89 c6                	mov    esi,eax
c00020e4:	75 e5                	jne    c00020cb <test_gpt_header+0x25>
c00020e6:	8d 43 10             	lea    eax,[ebx+0x10]
c00020e9:	f7 d6                	not    esi
c00020eb:	e8 67 f9 ff ff       	call   c0001a57 <ld_dword>
c00020f0:	39 c6                	cmp    esi,eax
c00020f2:	75 22                	jne    c0002116 <test_gpt_header+0x70>
c00020f4:	8d 43 54             	lea    eax,[ebx+0x54]
c00020f7:	e8 5b f9 ff ff       	call   c0001a57 <ld_dword>
c00020fc:	83 c0 80             	add    eax,0xffffff80
c00020ff:	75 15                	jne    c0002116 <test_gpt_header+0x70>
c0002101:	8d 43 50             	lea    eax,[ebx+0x50]
c0002104:	e8 4e f9 ff ff       	call   c0001a57 <ld_dword>
c0002109:	3d 80 00 00 00       	cmp    eax,0x80
c000210e:	0f 96 c0             	setbe  al
c0002111:	0f b6 c0             	movzx  eax,al
c0002114:	89 c7                	mov    edi,eax
c0002116:	5b                   	pop    ebx
c0002117:	89 f8                	mov    eax,edi
c0002119:	5e                   	pop    esi
c000211a:	5f                   	pop    edi
c000211b:	5d                   	pop    ebp
c000211c:	c3                   	ret    

c000211d <make_rand>:
c000211d:	56                   	push   esi
c000211e:	85 c0                	test   eax,eax
c0002120:	53                   	push   ebx
c0002121:	75 05                	jne    c0002128 <make_rand+0xb>
c0002123:	b8 01 00 00 00       	mov    eax,0x1
c0002128:	01 d1                	add    ecx,edx
c000212a:	bb 08 00 00 00       	mov    ebx,0x8
c000212f:	89 c6                	mov    esi,eax
c0002131:	d1 e8                	shr    eax,1
c0002133:	83 e6 01             	and    esi,0x1
c0002136:	85 f6                	test   esi,esi
c0002138:	74 05                	je     c000213f <make_rand+0x22>
c000213a:	35 00 00 00 a3       	xor    eax,0xa3000000
c000213f:	4b                   	dec    ebx
c0002140:	75 ed                	jne    c000212f <make_rand+0x12>
c0002142:	42                   	inc    edx
c0002143:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002146:	39 ca                	cmp    edx,ecx
c0002148:	75 e0                	jne    c000212a <make_rand+0xd>
c000214a:	5b                   	pop    ebx
c000214b:	5e                   	pop    esi
c000214c:	c3                   	ret    

c000214d <validate>:
c000214d:	56                   	push   esi
c000214e:	53                   	push   ebx
c000214f:	89 d6                	mov    esi,edx
c0002151:	51                   	push   ecx
c0002152:	85 c0                	test   eax,eax
c0002154:	75 09                	jne    c000215f <validate+0x12>
c0002156:	b8 09 00 00 00       	mov    eax,0x9
c000215b:	31 c9                	xor    ecx,ecx
c000215d:	eb 2f                	jmp    c000218e <validate+0x41>
c000215f:	89 c3                	mov    ebx,eax
c0002161:	8b 00                	mov    eax,DWORD PTR [eax]
c0002163:	85 c0                	test   eax,eax
c0002165:	74 ef                	je     c0002156 <validate+0x9>
c0002167:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000216a:	74 ea                	je     c0002156 <validate+0x9>
c000216c:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002170:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002174:	75 e0                	jne    c0002156 <validate+0x9>
c0002176:	83 ec 0c             	sub    esp,0xc
c0002179:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217d:	50                   	push   eax
c000217e:	e8 76 f8 ff ff       	call   c00019f9 <disk_status>
c0002183:	83 c4 10             	add    esp,0x10
c0002186:	a8 01                	test   al,0x1
c0002188:	75 cc                	jne    c0002156 <validate+0x9>
c000218a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000218c:	31 c0                	xor    eax,eax
c000218e:	89 0e                	mov    DWORD PTR [esi],ecx
c0002190:	5a                   	pop    edx
c0002191:	5b                   	pop    ebx
c0002192:	5e                   	pop    esi
c0002193:	c3                   	ret    

c0002194 <sync_window>:
c0002194:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002198:	0f 84 85 00 00 00    	je     c0002223 <sync_window+0x8f>
c000219e:	55                   	push   ebp
c000219f:	8d 68 54             	lea    ebp,[eax+0x54]
c00021a2:	57                   	push   edi
c00021a3:	56                   	push   esi
c00021a4:	53                   	push   ebx
c00021a5:	89 c3                	mov    ebx,eax
c00021a7:	83 ec 28             	sub    esp,0x28
c00021aa:	6a 01                	push   0x1
c00021ac:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021af:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021b2:	55                   	push   ebp
c00021b3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021b7:	50                   	push   eax
c00021b8:	e8 58 f8 ff ff       	call   c0001a15 <disk_write>
c00021bd:	83 c4 20             	add    esp,0x20
c00021c0:	ba 01 00 00 00       	mov    edx,0x1
c00021c5:	85 c0                	test   eax,eax
c00021c7:	75 50                	jne    c0002219 <sync_window+0x85>
c00021c9:	31 ff                	xor    edi,edi
c00021cb:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021ce:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021d2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021d6:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021d9:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021dc:	89 c6                	mov    esi,eax
c00021de:	89 d7                	mov    edi,edx
c00021e0:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021e3:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021e7:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021ea:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021ee:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021f2:	73 23                	jae    c0002217 <sync_window+0x83>
c00021f4:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021f8:	75 1d                	jne    c0002217 <sync_window+0x83>
c00021fa:	83 ec 0c             	sub    esp,0xc
c00021fd:	6a 01                	push   0x1
c00021ff:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002203:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002207:	52                   	push   edx
c0002208:	50                   	push   eax
c0002209:	55                   	push   ebp
c000220a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000220e:	50                   	push   eax
c000220f:	e8 01 f8 ff ff       	call   c0001a15 <disk_write>
c0002214:	83 c4 20             	add    esp,0x20
c0002217:	31 d2                	xor    edx,edx
c0002219:	83 c4 1c             	add    esp,0x1c
c000221c:	89 d0                	mov    eax,edx
c000221e:	5b                   	pop    ebx
c000221f:	5e                   	pop    esi
c0002220:	5f                   	pop    edi
c0002221:	5d                   	pop    ebp
c0002222:	c3                   	ret    
c0002223:	31 d2                	xor    edx,edx
c0002225:	89 d0                	mov    eax,edx
c0002227:	c3                   	ret    

c0002228 <move_window>:
c0002228:	56                   	push   esi
c0002229:	53                   	push   ebx
c000222a:	89 c3                	mov    ebx,eax
c000222c:	83 ec 14             	sub    esp,0x14
c000222f:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002232:	75 07                	jne    c000223b <move_window+0x13>
c0002234:	31 f6                	xor    esi,esi
c0002236:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002239:	74 59                	je     c0002294 <move_window+0x6c>
c000223b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000223f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002243:	89 d8                	mov    eax,ebx
c0002245:	e8 4a ff ff ff       	call   c0002194 <sync_window>
c000224a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000224e:	89 c6                	mov    esi,eax
c0002250:	85 c0                	test   eax,eax
c0002252:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002256:	75 3c                	jne    c0002294 <move_window+0x6c>
c0002258:	83 ec 0c             	sub    esp,0xc
c000225b:	8d 43 54             	lea    eax,[ebx+0x54]
c000225e:	6a 01                	push   0x1
c0002260:	51                   	push   ecx
c0002261:	52                   	push   edx
c0002262:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002266:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000226a:	50                   	push   eax
c000226b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000226f:	50                   	push   eax
c0002270:	e8 8a f7 ff ff       	call   c00019ff <disk_read>
c0002275:	83 c4 20             	add    esp,0x20
c0002278:	85 c0                	test   eax,eax
c000227a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000227e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002282:	74 0a                	je     c000228e <move_window+0x66>
c0002284:	83 ca ff             	or     edx,0xffffffff
c0002287:	be 01 00 00 00       	mov    esi,0x1
c000228c:	89 d1                	mov    ecx,edx
c000228e:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002291:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002294:	89 f0                	mov    eax,esi
c0002296:	83 c4 14             	add    esp,0x14
c0002299:	5b                   	pop    ebx
c000229a:	5e                   	pop    esi
c000229b:	c3                   	ret    

c000229c <check_fs>:
c000229c:	53                   	push   ebx
c000229d:	89 c3                	mov    ebx,eax
c000229f:	83 ec 08             	sub    esp,0x8
c00022a2:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022a6:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022ad:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022b4:	e8 6f ff ff ff       	call   c0002228 <move_window>
c00022b9:	ba 04 00 00 00       	mov    edx,0x4
c00022be:	85 c0                	test   eax,eax
c00022c0:	0f 85 89 00 00 00    	jne    c000234f <check_fs+0xb3>
c00022c6:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022cc:	e8 79 f7 ff ff       	call   c0001a4a <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 73                	jne    c000234f <check_fs+0xb3>
c00022dc:	ba 20 82 02 c0       	mov    edx,0xc0028220
c00022e1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022e4:	b9 0b 00 00 00       	mov    ecx,0xb
c00022e9:	e8 fb f7 ff ff       	call   c0001ae9 <mem_cmp>
c00022ee:	ba 01 00 00 00       	mov    edx,0x1
c00022f3:	85 c0                	test   eax,eax
c00022f5:	74 58                	je     c000234f <check_fs+0xb3>
c00022f7:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022fa:	8d 50 18             	lea    edx,[eax+0x18]
c00022fd:	80 fa 01             	cmp    dl,0x1
c0002300:	76 09                	jbe    c000230b <check_fs+0x6f>
c0002302:	ba 02 00 00 00       	mov    edx,0x2
c0002307:	3c eb                	cmp    al,0xeb
c0002309:	75 44                	jne    c000234f <check_fs+0xb3>
c000230b:	ba 60 b3 02 c0       	mov    edx,0xc002b360
c0002310:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002316:	b9 03 00 00 00       	mov    ecx,0x3
c000231b:	e8 c9 f7 ff ff       	call   c0001ae9 <mem_cmp>
c0002320:	31 d2                	xor    edx,edx
c0002322:	85 c0                	test   eax,eax
c0002324:	74 29                	je     c000234f <check_fs+0xb3>
c0002326:	ba 2c 82 02 c0       	mov    edx,0xc002822c
c000232b:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002331:	b9 05 00 00 00       	mov    ecx,0x5
c0002336:	e8 ae f7 ff ff       	call   c0001ae9 <mem_cmp>
c000233b:	31 d2                	xor    edx,edx
c000233d:	85 c0                	test   eax,eax
c000233f:	74 0e                	je     c000234f <check_fs+0xb3>
c0002341:	31 d2                	xor    edx,edx
c0002343:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000234a:	0f 95 c2             	setne  dl
c000234d:	01 d2                	add    edx,edx
c000234f:	89 d0                	mov    eax,edx
c0002351:	83 c4 08             	add    esp,0x8
c0002354:	5b                   	pop    ebx
c0002355:	c3                   	ret    

c0002356 <find_volume>:
c0002356:	55                   	push   ebp
c0002357:	31 c9                	xor    ecx,ecx
c0002359:	57                   	push   edi
c000235a:	56                   	push   esi
c000235b:	89 d6                	mov    esi,edx
c000235d:	53                   	push   ebx
c000235e:	31 d2                	xor    edx,edx
c0002360:	83 ec 3c             	sub    esp,0x3c
c0002363:	89 c3                	mov    ebx,eax
c0002365:	e8 32 ff ff ff       	call   c000229c <check_fs>
c000236a:	83 f8 02             	cmp    eax,0x2
c000236d:	74 0e                	je     c000237d <find_volume+0x27>
c000236f:	0f 87 5d 01 00 00    	ja     c00024d2 <find_volume+0x17c>
c0002375:	85 f6                	test   esi,esi
c0002377:	0f 84 55 01 00 00    	je     c00024d2 <find_volume+0x17c>
c000237d:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002384:	0f 85 dd 00 00 00    	jne    c0002467 <find_volume+0x111>
c000238a:	31 c9                	xor    ecx,ecx
c000238c:	ba 01 00 00 00       	mov    edx,0x1
c0002391:	89 d8                	mov    eax,ebx
c0002393:	e8 90 fe ff ff       	call   c0002228 <move_window>
c0002398:	85 c0                	test   eax,eax
c000239a:	74 0a                	je     c00023a6 <find_volume+0x50>
c000239c:	b8 04 00 00 00       	mov    eax,0x4
c00023a1:	e9 2c 01 00 00       	jmp    c00024d2 <find_volume+0x17c>
c00023a6:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023a9:	89 e8                	mov    eax,ebp
c00023ab:	e8 f6 fc ff ff       	call   c00020a6 <test_gpt_header>
c00023b0:	85 c0                	test   eax,eax
c00023b2:	75 0a                	jne    c00023be <find_volume+0x68>
c00023b4:	b8 03 00 00 00       	mov    eax,0x3
c00023b9:	e9 14 01 00 00       	jmp    c00024d2 <find_volume+0x17c>
c00023be:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023c4:	e8 8e f6 ff ff       	call   c0001a57 <ld_dword>
c00023c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023cd:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023d3:	e8 97 f6 ff ff       	call   c0001a6f <ld_qword>
c00023d8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023e8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023f4:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023f8:	74 ba                	je     c00023b4 <find_volume+0x5e>
c00023fa:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023fe:	31 c9                	xor    ecx,ecx
c0002400:	c1 e7 07             	shl    edi,0x7
c0002403:	89 d8                	mov    eax,ebx
c0002405:	89 fa                	mov    edx,edi
c0002407:	c1 ea 09             	shr    edx,0x9
c000240a:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000240e:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002412:	e8 11 fe ff ff       	call   c0002228 <move_window>
c0002417:	85 c0                	test   eax,eax
c0002419:	75 81                	jne    c000239c <find_volume+0x46>
c000241b:	81 e7 80 01 00 00    	and    edi,0x180
c0002421:	b9 10 00 00 00       	mov    ecx,0x10
c0002426:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000242a:	ba 10 82 02 c0       	mov    edx,0xc0028210
c000242f:	e8 b5 f6 ff ff       	call   c0001ae9 <mem_cmp>
c0002434:	85 c0                	test   eax,eax
c0002436:	75 29                	jne    c0002461 <find_volume+0x10b>
c0002438:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000243c:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002440:	e8 2a f6 ff ff       	call   c0001a6f <ld_qword>
c0002445:	89 d1                	mov    ecx,edx
c0002447:	89 c2                	mov    edx,eax
c0002449:	89 d8                	mov    eax,ebx
c000244b:	e8 4c fe ff ff       	call   c000229c <check_fs>
c0002450:	85 f6                	test   esi,esi
c0002452:	75 07                	jne    c000245b <find_volume+0x105>
c0002454:	83 f8 01             	cmp    eax,0x1
c0002457:	77 08                	ja     c0002461 <find_volume+0x10b>
c0002459:	eb 77                	jmp    c00024d2 <find_volume+0x17c>
c000245b:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000245f:	74 71                	je     c00024d2 <find_volume+0x17c>
c0002461:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002465:	eb 89                	jmp    c00023f0 <find_volume+0x9a>
c0002467:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000246b:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002471:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002477:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000247b:	89 cd                	mov    ebp,ecx
c000247d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002481:	89 f8                	mov    eax,edi
c0002483:	83 c7 10             	add    edi,0x10
c0002486:	e8 cc f5 ff ff       	call   c0001a57 <ld_dword>
c000248b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000248f:	89 01                	mov    DWORD PTR [ecx],eax
c0002491:	83 c1 04             	add    ecx,0x4
c0002494:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002498:	75 e3                	jne    c000247d <find_volume+0x127>
c000249a:	31 ff                	xor    edi,edi
c000249c:	85 f6                	test   esi,esi
c000249e:	74 03                	je     c00024a3 <find_volume+0x14d>
c00024a0:	8d 7e ff             	lea    edi,[esi-0x1]
c00024a3:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024a7:	85 d2                	test   edx,edx
c00024a9:	74 14                	je     c00024bf <find_volume+0x169>
c00024ab:	31 c9                	xor    ecx,ecx
c00024ad:	89 d8                	mov    eax,ebx
c00024af:	e8 e8 fd ff ff       	call   c000229c <check_fs>
c00024b4:	83 f8 01             	cmp    eax,0x1
c00024b7:	76 19                	jbe    c00024d2 <find_volume+0x17c>
c00024b9:	85 f6                	test   esi,esi
c00024bb:	74 0f                	je     c00024cc <find_volume+0x176>
c00024bd:	eb 13                	jmp    c00024d2 <find_volume+0x17c>
c00024bf:	85 f6                	test   esi,esi
c00024c1:	0f 85 ed fe ff ff    	jne    c00023b4 <find_volume+0x5e>
c00024c7:	b8 03 00 00 00       	mov    eax,0x3
c00024cc:	47                   	inc    edi
c00024cd:	83 ff 03             	cmp    edi,0x3
c00024d0:	76 d1                	jbe    c00024a3 <find_volume+0x14d>
c00024d2:	83 c4 3c             	add    esp,0x3c
c00024d5:	5b                   	pop    ebx
c00024d6:	5e                   	pop    esi
c00024d7:	5f                   	pop    edi
c00024d8:	5d                   	pop    ebp
c00024d9:	c3                   	ret    

c00024da <mount_volume>:
c00024da:	55                   	push   ebp
c00024db:	57                   	push   edi
c00024dc:	89 cf                	mov    edi,ecx
c00024de:	56                   	push   esi
c00024df:	53                   	push   ebx
c00024e0:	bb 0b 00 00 00       	mov    ebx,0xb
c00024e5:	83 ec 3c             	sub    esp,0x3c
c00024e8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024f2:	e8 35 fb ff ff       	call   c000202c <get_ldnumber>
c00024f7:	85 c0                	test   eax,eax
c00024f9:	0f 88 3a 05 00 00    	js     c0002a39 <mount_volume+0x55f>
c00024ff:	8b 2c 85 a0 ce 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd3160]
c0002506:	89 c6                	mov    esi,eax
c0002508:	bb 0c 00 00 00       	mov    ebx,0xc
c000250d:	85 ed                	test   ebp,ebp
c000250f:	0f 84 24 05 00 00    	je     c0002a39 <mount_volume+0x55f>
c0002515:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002519:	83 e7 fe             	and    edi,0xfffffffe
c000251c:	89 2a                	mov    DWORD PTR [edx],ebp
c000251e:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002522:	74 32                	je     c0002556 <mount_volume+0x7c>
c0002524:	83 ec 0c             	sub    esp,0xc
c0002527:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000252b:	50                   	push   eax
c000252c:	e8 c8 f4 ff ff       	call   c00019f9 <disk_status>
c0002531:	83 c4 10             	add    esp,0x10
c0002534:	a8 01                	test   al,0x1
c0002536:	75 1e                	jne    c0002556 <mount_volume+0x7c>
c0002538:	31 db                	xor    ebx,ebx
c000253a:	89 f9                	mov    ecx,edi
c000253c:	84 c9                	test   cl,cl
c000253e:	0f 84 f5 04 00 00    	je     c0002a39 <mount_volume+0x55f>
c0002544:	a8 04                	test   al,0x4
c0002546:	0f 84 ed 04 00 00    	je     c0002a39 <mount_volume+0x55f>
c000254c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002551:	e9 e3 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c0002556:	83 ec 0c             	sub    esp,0xc
c0002559:	89 f0                	mov    eax,esi
c000255b:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000255f:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002562:	0f b6 f0             	movzx  esi,al
c0002565:	bb 03 00 00 00       	mov    ebx,0x3
c000256a:	56                   	push   esi
c000256b:	e8 8c f4 ff ff       	call   c00019fc <disk_initialize>
c0002570:	83 c4 10             	add    esp,0x10
c0002573:	a8 01                	test   al,0x1
c0002575:	0f 85 be 04 00 00    	jne    c0002a39 <mount_volume+0x55f>
c000257b:	89 f9                	mov    ecx,edi
c000257d:	84 c9                	test   cl,cl
c000257f:	74 04                	je     c0002585 <mount_volume+0xab>
c0002581:	a8 04                	test   al,0x4
c0002583:	75 c7                	jne    c000254c <mount_volume+0x72>
c0002585:	31 d2                	xor    edx,edx
c0002587:	89 e8                	mov    eax,ebp
c0002589:	e8 c8 fd ff ff       	call   c0002356 <find_volume>
c000258e:	83 f8 04             	cmp    eax,0x4
c0002591:	75 0a                	jne    c000259d <mount_volume+0xc3>
c0002593:	bb 01 00 00 00       	mov    ebx,0x1
c0002598:	e9 9c 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c000259d:	83 f8 01             	cmp    eax,0x1
c00025a0:	76 0a                	jbe    c00025ac <mount_volume+0xd2>
c00025a2:	bb 0d 00 00 00       	mov    ebx,0xd
c00025a7:	e9 8d 04 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c00025ac:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025af:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025ba:	75 17                	jne    c00025d3 <mount_volume+0xf9>
c00025bc:	b8 0b 00 00 00       	mov    eax,0xb
c00025c1:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025c6:	75 da                	jne    c00025a2 <mount_volume+0xc8>
c00025c8:	40                   	inc    eax
c00025c9:	83 f8 40             	cmp    eax,0x40
c00025cc:	75 f3                	jne    c00025c1 <mount_volume+0xe7>
c00025ce:	e9 5a 02 00 00       	jmp    c000282d <mount_volume+0x353>
c00025d3:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025d6:	e8 6f f4 ff ff       	call   c0001a4a <ld_word>
c00025db:	66 3d 00 02          	cmp    ax,0x200
c00025df:	75 c1                	jne    c00025a2 <mount_volume+0xc8>
c00025e1:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025e4:	e8 61 f4 ff ff       	call   c0001a4a <ld_word>
c00025e9:	0f b7 c0             	movzx  eax,ax
c00025ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f0:	85 c0                	test   eax,eax
c00025f2:	75 0c                	jne    c0002600 <mount_volume+0x126>
c00025f4:	8d 45 78             	lea    eax,[ebp+0x78]
c00025f7:	e8 5b f4 ff ff       	call   c0001a57 <ld_dword>
c00025fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002604:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002607:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000260a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000260e:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002611:	48                   	dec    eax
c0002612:	3c 01                	cmp    al,0x1
c0002614:	77 8c                	ja     c00025a2 <mount_volume+0xc8>
c0002616:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000261a:	89 c3                	mov    ebx,eax
c000261c:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002620:	66 85 c0             	test   ax,ax
c0002623:	0f 84 79 ff ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002629:	8d 40 ff             	lea    eax,[eax-0x1]
c000262c:	85 d8                	test   eax,ebx
c000262e:	0f 85 6e ff ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002634:	8d 45 65             	lea    eax,[ebp+0x65]
c0002637:	e8 0e f4 ff ff       	call   c0001a4a <ld_word>
c000263c:	89 c7                	mov    edi,eax
c000263e:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002642:	a8 0f                	test   al,0xf
c0002644:	0f 85 58 ff ff ff    	jne    c00025a2 <mount_volume+0xc8>
c000264a:	8d 45 67             	lea    eax,[ebp+0x67]
c000264d:	e8 f8 f3 ff ff       	call   c0001a4a <ld_word>
c0002652:	0f b7 f0             	movzx  esi,ax
c0002655:	85 f6                	test   esi,esi
c0002657:	75 0a                	jne    c0002663 <mount_volume+0x189>
c0002659:	8d 45 74             	lea    eax,[ebp+0x74]
c000265c:	e8 f6 f3 ff ff       	call   c0001a57 <ld_dword>
c0002661:	89 c6                	mov    esi,eax
c0002663:	8d 45 62             	lea    eax,[ebp+0x62]
c0002666:	e8 df f3 ff ff       	call   c0001a4a <ld_word>
c000266b:	66 85 c0             	test   ax,ax
c000266e:	0f 84 2e ff ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002674:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002679:	0f b7 c8             	movzx  ecx,ax
c000267c:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002681:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002685:	89 fa                	mov    edx,edi
c0002687:	66 c1 ea 04          	shr    dx,0x4
c000268b:	0f b7 d2             	movzx  edx,dx
c000268e:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002692:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002695:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002699:	39 c6                	cmp    esi,eax
c000269b:	0f 82 01 ff ff ff    	jb     c00025a2 <mount_volume+0xc8>
c00026a1:	29 c6                	sub    esi,eax
c00026a3:	31 d2                	xor    edx,edx
c00026a5:	89 f0                	mov    eax,esi
c00026a7:	f7 f3                	div    ebx
c00026a9:	39 de                	cmp    esi,ebx
c00026ab:	0f 82 f1 fe ff ff    	jb     c00025a2 <mount_volume+0xc8>
c00026b1:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026b6:	0f 87 e6 fe ff ff    	ja     c00025a2 <mount_volume+0xc8>
c00026bc:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026c1:	0f 86 63 03 00 00    	jbe    c0002a2a <mount_volume+0x550>
c00026c7:	bb 03 00 00 00       	mov    ebx,0x3
c00026cc:	8d 70 02             	lea    esi,[eax+0x2]
c00026cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026d7:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026da:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026dd:	31 d2                	xor    edx,edx
c00026df:	89 c8                	mov    eax,ecx
c00026e1:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026e4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026e8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026f0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026f4:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026f7:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026fe:	31 d2                	xor    edx,edx
c0002700:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002704:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002708:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000270b:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000270e:	83 fb 03             	cmp    ebx,0x3
c0002711:	75 2b                	jne    c000273e <mount_volume+0x264>
c0002713:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002716:	e8 2f f3 ff ff       	call   c0001a4a <ld_word>
c000271b:	66 09 c7             	or     di,ax
c000271e:	0f 85 7e fe ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002724:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000272a:	c1 e6 02             	shl    esi,0x2
c000272d:	e8 25 f3 ff ff       	call   c0001a57 <ld_dword>
c0002732:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002739:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000273c:	eb 30                	jmp    c000276e <mount_volume+0x294>
c000273e:	66 85 ff             	test   di,di
c0002741:	0f 84 5b fe ff ff    	je     c00025a2 <mount_volume+0xc8>
c0002747:	31 d2                	xor    edx,edx
c0002749:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000274d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002751:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002755:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002758:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000275b:	83 fb 02             	cmp    ebx,0x2
c000275e:	75 04                	jne    c0002764 <mount_volume+0x28a>
c0002760:	01 f6                	add    esi,esi
c0002762:	eb 0a                	jmp    c000276e <mount_volume+0x294>
c0002764:	8d 04 76             	lea    eax,[esi+esi*2]
c0002767:	83 e6 01             	and    esi,0x1
c000276a:	d1 e8                	shr    eax,1
c000276c:	01 c6                	add    esi,eax
c000276e:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002774:	c1 ee 09             	shr    esi,0x9
c0002777:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000277b:	0f 87 21 fe ff ff    	ja     c00025a2 <mount_volume+0xc8>
c0002781:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002788:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000278f:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002793:	83 fb 03             	cmp    ebx,0x3
c0002796:	75 7a                	jne    c0002812 <mount_volume+0x338>
c0002798:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000279e:	e8 a7 f2 ff ff       	call   c0001a4a <ld_word>
c00027a3:	66 48                	dec    ax
c00027a5:	75 6b                	jne    c0002812 <mount_volume+0x338>
c00027a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027af:	83 c2 01             	add    edx,0x1
c00027b2:	89 e8                	mov    eax,ebp
c00027b4:	83 d1 00             	adc    ecx,0x0
c00027b7:	e8 6c fa ff ff       	call   c0002228 <move_window>
c00027bc:	85 c0                	test   eax,eax
c00027be:	75 52                	jne    c0002812 <mount_volume+0x338>
c00027c0:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027c4:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027ca:	e8 7b f2 ff ff       	call   c0001a4a <ld_word>
c00027cf:	66 3d 55 aa          	cmp    ax,0xaa55
c00027d3:	75 3d                	jne    c0002812 <mount_volume+0x338>
c00027d5:	8d 45 54             	lea    eax,[ebp+0x54]
c00027d8:	e8 7a f2 ff ff       	call   c0001a57 <ld_dword>
c00027dd:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027e2:	75 2e                	jne    c0002812 <mount_volume+0x338>
c00027e4:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027ea:	e8 68 f2 ff ff       	call   c0001a57 <ld_dword>
c00027ef:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027f4:	75 1c                	jne    c0002812 <mount_volume+0x338>
c00027f6:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027fc:	e8 56 f2 ff ff       	call   c0001a57 <ld_dword>
c0002801:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002804:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000280a:	e8 48 f2 ff ff       	call   c0001a57 <ld_dword>
c000280f:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002812:	66 a1 80 ce 02 c0    	mov    ax,ds:0xc002ce80
c0002818:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000281b:	40                   	inc    eax
c000281c:	31 db                	xor    ebx,ebx
c000281e:	66 a3 80 ce 02 c0    	mov    ds:0xc002ce80,ax
c0002824:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002828:	e9 0c 02 00 00       	jmp    c0002a39 <mount_volume+0x55f>
c000282d:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002833:	e8 12 f2 ff ff       	call   c0001a4a <ld_word>
c0002838:	66 3d 00 01          	cmp    ax,0x100
c000283c:	0f 85 60 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002842:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002849:	0f 85 53 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c000284f:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002855:	e8 15 f2 ff ff       	call   c0001a6f <ld_qword>
c000285a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000285e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002862:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002868:	e8 ea f1 ff ff       	call   c0001a57 <ld_dword>
c000286d:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002870:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002876:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002879:	fe c8                	dec    al
c000287b:	0f 85 21 fd ff ff    	jne    c00025a2 <mount_volume+0xc8>
c0002881:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002888:	bb 01 00 00 00       	mov    ebx,0x1
c000288d:	d3 e3                	shl    ebx,cl
c000288f:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002893:	66 85 db             	test   bx,bx
c0002896:	0f 84 06 fd ff ff    	je     c00025a2 <mount_volume+0xc8>
c000289c:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028a2:	e8 b0 f1 ff ff       	call   c0001a57 <ld_dword>
c00028a7:	89 c6                	mov    esi,eax
c00028a9:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028ae:	0f 87 ee fc ff ff    	ja     c00025a2 <mount_volume+0xc8>
c00028b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b8:	8d 40 02             	lea    eax,[eax+0x2]
c00028bb:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028be:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028c5:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028c8:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028ce:	e8 84 f1 ff ff       	call   c0001a57 <ld_dword>
c00028d3:	31 d2                	xor    edx,edx
c00028d5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028d9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028f1:	e8 61 f1 ff ff       	call   c0001a57 <ld_dword>
c00028f6:	31 d2                	xor    edx,edx
c00028f8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028fc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002900:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002904:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002907:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000290a:	0f b7 c3             	movzx  eax,bx
c000290d:	31 d2                	xor    edx,edx
c000290f:	0f af f0             	imul   esi,eax
c0002912:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002916:	89 f0                	mov    eax,esi
c0002918:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000291c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002920:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002924:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002928:	39 c1                	cmp    ecx,eax
c000292a:	89 df                	mov    edi,ebx
c000292c:	19 d7                	sbb    edi,edx
c000292e:	0f 82 6e fc ff ff    	jb     c00025a2 <mount_volume+0xc8>
c0002934:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000293a:	31 db                	xor    ebx,ebx
c000293c:	e8 16 f1 ff ff       	call   c0001a57 <ld_dword>
c0002941:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002948:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000294b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002953:	85 db                	test   ebx,ebx
c0002955:	75 39                	jne    c0002990 <mount_volume+0x4b6>
c0002957:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000295b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000295f:	0f 86 3d fc ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c0002965:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002968:	31 ff                	xor    edi,edi
c000296a:	89 e8                	mov    eax,ebp
c000296c:	e8 72 f3 ff ff       	call   c0001ce3 <clst2sect>
c0002971:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002975:	01 c6                	add    esi,eax
c0002977:	89 e8                	mov    eax,ebp
c0002979:	11 d7                	adc    edi,edx
c000297b:	89 f2                	mov    edx,esi
c000297d:	89 f9                	mov    ecx,edi
c000297f:	e8 a4 f8 ff ff       	call   c0002228 <move_window>
c0002984:	85 c0                	test   eax,eax
c0002986:	0f 85 07 fc ff ff    	jne    c0002593 <mount_volume+0xb9>
c000298c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002990:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002995:	74 0b                	je     c00029a2 <mount_volume+0x4c8>
c0002997:	83 c3 20             	add    ebx,0x20
c000299a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029a0:	eb b1                	jmp    c0002953 <mount_volume+0x479>
c00029a2:	8d 75 54             	lea    esi,[ebp+0x54]
c00029a5:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029a9:	e8 a9 f0 ff ff       	call   c0001a57 <ld_dword>
c00029ae:	89 c3                	mov    ebx,eax
c00029b0:	83 f8 01             	cmp    eax,0x1
c00029b3:	0f 86 e9 fb ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c00029b9:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029bc:	0f 86 e0 fb ff ff    	jbe    c00025a2 <mount_volume+0xc8>
c00029c2:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029c5:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029c9:	0f af c2             	imul   eax,edx
c00029cc:	31 d2                	xor    edx,edx
c00029ce:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029d1:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029d4:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029d7:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029da:	31 c9                	xor    ecx,ecx
c00029dc:	89 da                	mov    edx,ebx
c00029de:	89 e8                	mov    eax,ebp
c00029e0:	c1 ea 07             	shr    edx,0x7
c00029e3:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029e6:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029e9:	e8 3a f8 ff ff       	call   c0002228 <move_window>
c00029ee:	85 c0                	test   eax,eax
c00029f0:	0f 85 9d fb ff ff    	jne    c0002593 <mount_volume+0xb9>
c00029f6:	89 d8                	mov    eax,ebx
c00029f8:	83 e0 7f             	and    eax,0x7f
c00029fb:	8d 04 86             	lea    eax,[esi+eax*4]
c00029fe:	e8 54 f0 ff ff       	call   c0001a57 <ld_dword>
c0002a03:	83 f8 ff             	cmp    eax,0xffffffff
c0002a06:	74 0a                	je     c0002a12 <mount_volume+0x538>
c0002a08:	43                   	inc    ebx
c0002a09:	39 d8                	cmp    eax,ebx
c0002a0b:	74 cd                	je     c00029da <mount_volume+0x500>
c0002a0d:	e9 90 fb ff ff       	jmp    c00025a2 <mount_volume+0xc8>
c0002a12:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a19:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a20:	bb 04 00 00 00       	mov    ebx,0x4
c0002a25:	e9 e8 fd ff ff       	jmp    c0002812 <mount_volume+0x338>
c0002a2a:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a2f:	19 db                	sbb    ebx,ebx
c0002a31:	83 c3 02             	add    ebx,0x2
c0002a34:	e9 93 fc ff ff       	jmp    c00026cc <mount_volume+0x1f2>
c0002a39:	83 c4 3c             	add    esp,0x3c
c0002a3c:	89 d8                	mov    eax,ebx
c0002a3e:	5b                   	pop    ebx
c0002a3f:	5e                   	pop    esi
c0002a40:	5f                   	pop    edi
c0002a41:	5d                   	pop    ebp
c0002a42:	c3                   	ret    

c0002a43 <find_bitmap>:
c0002a43:	55                   	push   ebp
c0002a44:	57                   	push   edi
c0002a45:	89 c7                	mov    edi,eax
c0002a47:	56                   	push   esi
c0002a48:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a4b:	53                   	push   ebx
c0002a4c:	83 ec 1c             	sub    esp,0x1c
c0002a4f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a52:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a56:	83 e8 02             	sub    eax,0x2
c0002a59:	39 f0                	cmp    eax,esi
c0002a5b:	77 02                	ja     c0002a5f <find_bitmap+0x1c>
c0002a5d:	31 f6                	xor    esi,esi
c0002a5f:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a63:	89 f3                	mov    ebx,esi
c0002a65:	31 ed                	xor    ebp,ebp
c0002a67:	31 c9                	xor    ecx,ecx
c0002a69:	89 da                	mov    edx,ebx
c0002a6b:	89 f8                	mov    eax,edi
c0002a6d:	c1 ea 0c             	shr    edx,0xc
c0002a70:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a73:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a76:	e8 ad f7 ff ff       	call   c0002228 <move_window>
c0002a7b:	85 c0                	test   eax,eax
c0002a7d:	75 68                	jne    c0002ae7 <find_bitmap+0xa4>
c0002a7f:	89 da                	mov    edx,ebx
c0002a81:	89 d9                	mov    ecx,ebx
c0002a83:	c1 ea 03             	shr    edx,0x3
c0002a86:	83 e1 07             	and    ecx,0x7
c0002a89:	b8 01 00 00 00       	mov    eax,0x1
c0002a8e:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a94:	d3 e0                	shl    eax,cl
c0002a96:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a99:	83 e9 02             	sub    ecx,0x2
c0002a9c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aa0:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002aa4:	43                   	inc    ebx
c0002aa5:	21 c1                	and    ecx,eax
c0002aa7:	d1 e0                	shl    eax,1
c0002aa9:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aad:	77 09                	ja     c0002ab8 <find_bitmap+0x75>
c0002aaf:	31 db                	xor    ebx,ebx
c0002ab1:	ba 00 02 00 00       	mov    edx,0x200
c0002ab6:	31 c0                	xor    eax,eax
c0002ab8:	84 c9                	test   cl,cl
c0002aba:	75 10                	jne    c0002acc <find_bitmap+0x89>
c0002abc:	45                   	inc    ebp
c0002abd:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ac1:	75 0f                	jne    c0002ad2 <find_bitmap+0x8f>
c0002ac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ac7:	83 c0 02             	add    eax,0x2
c0002aca:	eb 22                	jmp    c0002aee <find_bitmap+0xab>
c0002acc:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ad0:	31 ed                	xor    ebp,ebp
c0002ad2:	39 de                	cmp    esi,ebx
c0002ad4:	74 16                	je     c0002aec <find_bitmap+0xa9>
c0002ad6:	84 c0                	test   al,al
c0002ad8:	75 c6                	jne    c0002aa0 <find_bitmap+0x5d>
c0002ada:	42                   	inc    edx
c0002adb:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ae1:	77 84                	ja     c0002a67 <find_bitmap+0x24>
c0002ae3:	b0 01                	mov    al,0x1
c0002ae5:	eb b9                	jmp    c0002aa0 <find_bitmap+0x5d>
c0002ae7:	83 c8 ff             	or     eax,0xffffffff
c0002aea:	eb 02                	jmp    c0002aee <find_bitmap+0xab>
c0002aec:	31 c0                	xor    eax,eax
c0002aee:	83 c4 1c             	add    esp,0x1c
c0002af1:	5b                   	pop    ebx
c0002af2:	5e                   	pop    esi
c0002af3:	5f                   	pop    edi
c0002af4:	5d                   	pop    ebp
c0002af5:	c3                   	ret    

c0002af6 <change_bitmap>:
c0002af6:	55                   	push   ebp
c0002af7:	89 cd                	mov    ebp,ecx
c0002af9:	57                   	push   edi
c0002afa:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002afd:	56                   	push   esi
c0002afe:	89 c7                	mov    edi,eax
c0002b00:	53                   	push   ebx
c0002b01:	89 c8                	mov    eax,ecx
c0002b03:	83 ec 1c             	sub    esp,0x1c
c0002b06:	31 d2                	xor    edx,edx
c0002b08:	89 ce                	mov    esi,ecx
c0002b0a:	c1 e8 0c             	shr    eax,0xc
c0002b0d:	bb 01 00 00 00       	mov    ebx,0x1
c0002b12:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b15:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b18:	c1 ee 03             	shr    esi,0x3
c0002b1b:	83 e1 07             	and    ecx,0x7
c0002b1e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b24:	d3 e3                	shl    ebx,cl
c0002b26:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b2a:	89 c1                	mov    ecx,eax
c0002b2c:	89 d3                	mov    ebx,edx
c0002b2e:	83 c1 01             	add    ecx,0x1
c0002b31:	83 d3 00             	adc    ebx,0x0
c0002b34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b38:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b3c:	89 d1                	mov    ecx,edx
c0002b3e:	89 c2                	mov    edx,eax
c0002b40:	89 f8                	mov    eax,edi
c0002b42:	e8 e1 f6 ff ff       	call   c0002228 <move_window>
c0002b47:	89 c1                	mov    ecx,eax
c0002b49:	85 c0                	test   eax,eax
c0002b4b:	75 48                	jne    c0002b95 <change_bitmap+0x9f>
c0002b4d:	31 d2                	xor    edx,edx
c0002b4f:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b53:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b57:	0f 95 c2             	setne  dl
c0002b5a:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b5e:	74 3c                	je     c0002b9c <change_bitmap+0xa6>
c0002b60:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b64:	4d                   	dec    ebp
c0002b65:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b69:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b6d:	74 32                	je     c0002ba1 <change_bitmap+0xab>
c0002b6f:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b73:	75 d8                	jne    c0002b4d <change_bitmap+0x57>
c0002b75:	8d 46 01             	lea    eax,[esi+0x1]
c0002b78:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b7d:	89 c3                	mov    ebx,eax
c0002b7f:	31 f6                	xor    esi,esi
c0002b81:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b89:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b8f:	74 99                	je     c0002b2a <change_bitmap+0x34>
c0002b91:	89 de                	mov    esi,ebx
c0002b93:	eb b8                	jmp    c0002b4d <change_bitmap+0x57>
c0002b95:	b9 01 00 00 00       	mov    ecx,0x1
c0002b9a:	eb 05                	jmp    c0002ba1 <change_bitmap+0xab>
c0002b9c:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba1:	83 c4 1c             	add    esp,0x1c
c0002ba4:	89 c8                	mov    eax,ecx
c0002ba6:	5b                   	pop    ebx
c0002ba7:	5e                   	pop    esi
c0002ba8:	5f                   	pop    edi
c0002ba9:	5d                   	pop    ebp
c0002baa:	c3                   	ret    

c0002bab <put_fat>:
c0002bab:	83 fa 01             	cmp    edx,0x1
c0002bae:	0f 86 7b 01 00 00    	jbe    c0002d2f <put_fat+0x184>
c0002bb4:	55                   	push   ebp
c0002bb5:	57                   	push   edi
c0002bb6:	89 cf                	mov    edi,ecx
c0002bb8:	56                   	push   esi
c0002bb9:	b9 02 00 00 00       	mov    ecx,0x2
c0002bbe:	53                   	push   ebx
c0002bbf:	89 c6                	mov    esi,eax
c0002bc1:	83 ec 1c             	sub    esp,0x1c
c0002bc4:	89 d3                	mov    ebx,edx
c0002bc6:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bc9:	0f 86 68 01 00 00    	jbe    c0002d37 <put_fat+0x18c>
c0002bcf:	8a 00                	mov    al,BYTE PTR [eax]
c0002bd1:	3c 02                	cmp    al,0x2
c0002bd3:	0f 84 c7 00 00 00    	je     c0002ca0 <put_fat+0xf5>
c0002bd9:	77 09                	ja     c0002be4 <put_fat+0x39>
c0002bdb:	fe c8                	dec    al
c0002bdd:	74 17                	je     c0002bf6 <put_fat+0x4b>
c0002bdf:	e9 53 01 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002be4:	b9 02 00 00 00       	mov    ecx,0x2
c0002be9:	3c 04                	cmp    al,0x4
c0002beb:	0f 86 e1 00 00 00    	jbe    c0002cd2 <put_fat+0x127>
c0002bf1:	e9 41 01 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002bf6:	89 d5                	mov    ebp,edx
c0002bf8:	31 c9                	xor    ecx,ecx
c0002bfa:	d1 ed                	shr    ebp,1
c0002bfc:	89 f0                	mov    eax,esi
c0002bfe:	01 d5                	add    ebp,edx
c0002c00:	89 ea                	mov    edx,ebp
c0002c02:	c1 ea 09             	shr    edx,0x9
c0002c05:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c08:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c0b:	e8 18 f6 ff ff       	call   c0002228 <move_window>
c0002c10:	89 c1                	mov    ecx,eax
c0002c12:	85 c0                	test   eax,eax
c0002c14:	0f 85 1d 01 00 00    	jne    c0002d37 <put_fat+0x18c>
c0002c1a:	8d 46 54             	lea    eax,[esi+0x54]
c0002c1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c21:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c24:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c2e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c32:	89 f8                	mov    eax,edi
c0002c34:	83 e3 01             	and    ebx,0x1
c0002c37:	74 0d                	je     c0002c46 <put_fat+0x9b>
c0002c39:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c3c:	89 fa                	mov    edx,edi
c0002c3e:	83 e0 0f             	and    eax,0xf
c0002c41:	c1 e2 04             	shl    edx,0x4
c0002c44:	09 d0                	or     eax,edx
c0002c46:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c4d:	31 c9                	xor    ecx,ecx
c0002c4f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c53:	c1 ea 09             	shr    edx,0x9
c0002c56:	89 f0                	mov    eax,esi
c0002c58:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c5b:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c5e:	e8 c5 f5 ff ff       	call   c0002228 <move_window>
c0002c63:	89 c1                	mov    ecx,eax
c0002c65:	85 c0                	test   eax,eax
c0002c67:	0f 85 ca 00 00 00    	jne    c0002d37 <put_fat+0x18c>
c0002c6d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c71:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c77:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c7b:	85 db                	test   ebx,ebx
c0002c7d:	74 07                	je     c0002c86 <put_fat+0xdb>
c0002c7f:	c1 ef 04             	shr    edi,0x4
c0002c82:	89 fa                	mov    edx,edi
c0002c84:	eb 0e                	jmp    c0002c94 <put_fat+0xe9>
c0002c86:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c89:	c1 ef 08             	shr    edi,0x8
c0002c8c:	83 e2 f0             	and    edx,0xfffffff0
c0002c8f:	83 e7 0f             	and    edi,0xf
c0002c92:	09 fa                	or     edx,edi
c0002c94:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c97:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c9b:	e9 97 00 00 00       	jmp    c0002d37 <put_fat+0x18c>
c0002ca0:	31 c9                	xor    ecx,ecx
c0002ca2:	c1 ea 08             	shr    edx,0x8
c0002ca5:	89 f0                	mov    eax,esi
c0002ca7:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002caa:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cad:	e8 76 f5 ff ff       	call   c0002228 <move_window>
c0002cb2:	89 c1                	mov    ecx,eax
c0002cb4:	85 c0                	test   eax,eax
c0002cb6:	75 7f                	jne    c0002d37 <put_fat+0x18c>
c0002cb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cbc:	01 db                	add    ebx,ebx
c0002cbe:	0f b7 d7             	movzx  edx,di
c0002cc1:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cc7:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ccb:	e8 ec ed ff ff       	call   c0001abc <st_word>
c0002cd0:	eb 53                	jmp    c0002d25 <put_fat+0x17a>
c0002cd2:	31 c9                	xor    ecx,ecx
c0002cd4:	c1 ea 07             	shr    edx,0x7
c0002cd7:	89 f0                	mov    eax,esi
c0002cd9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cdc:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cdf:	e8 44 f5 ff ff       	call   c0002228 <move_window>
c0002ce4:	89 c1                	mov    ecx,eax
c0002ce6:	85 c0                	test   eax,eax
c0002ce8:	75 4d                	jne    c0002d37 <put_fat+0x18c>
c0002cea:	c1 e3 02             	shl    ebx,0x2
c0002ced:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cf3:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cf6:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cfa:	74 1c                	je     c0002d18 <put_fat+0x16d>
c0002cfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d00:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d06:	89 d8                	mov    eax,ebx
c0002d08:	e8 4a ed ff ff       	call   c0001a57 <ld_dword>
c0002d0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d11:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d16:	09 c7                	or     edi,eax
c0002d18:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d1c:	89 fa                	mov    edx,edi
c0002d1e:	89 d8                	mov    eax,ebx
c0002d20:	e8 9b ed ff ff       	call   c0001ac0 <st_dword>
c0002d25:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d29:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d2d:	eb 08                	jmp    c0002d37 <put_fat+0x18c>
c0002d2f:	b9 02 00 00 00       	mov    ecx,0x2
c0002d34:	89 c8                	mov    eax,ecx
c0002d36:	c3                   	ret    
c0002d37:	83 c4 1c             	add    esp,0x1c
c0002d3a:	89 c8                	mov    eax,ecx
c0002d3c:	5b                   	pop    ebx
c0002d3d:	5e                   	pop    esi
c0002d3e:	5f                   	pop    edi
c0002d3f:	5d                   	pop    ebp
c0002d40:	c3                   	ret    

c0002d41 <fill_last_frag>:
c0002d41:	57                   	push   edi
c0002d42:	89 cf                	mov    edi,ecx
c0002d44:	56                   	push   esi
c0002d45:	89 d6                	mov    esi,edx
c0002d47:	53                   	push   ebx
c0002d48:	89 c3                	mov    ebx,eax
c0002d4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d4d:	85 c0                	test   eax,eax
c0002d4f:	74 21                	je     c0002d72 <fill_last_frag+0x31>
c0002d51:	89 f9                	mov    ecx,edi
c0002d53:	83 f8 01             	cmp    eax,0x1
c0002d56:	76 05                	jbe    c0002d5d <fill_last_frag+0x1c>
c0002d58:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d5b:	29 c1                	sub    ecx,eax
c0002d5d:	8d 56 01             	lea    edx,[esi+0x1]
c0002d60:	29 c2                	sub    edx,eax
c0002d62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d64:	e8 42 fe ff ff       	call   c0002bab <put_fat>
c0002d69:	85 c0                	test   eax,eax
c0002d6b:	75 05                	jne    c0002d72 <fill_last_frag+0x31>
c0002d6d:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d70:	eb d8                	jmp    c0002d4a <fill_last_frag+0x9>
c0002d72:	5b                   	pop    ebx
c0002d73:	5e                   	pop    esi
c0002d74:	5f                   	pop    edi
c0002d75:	c3                   	ret    

c0002d76 <fill_first_frag>:
c0002d76:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d7a:	75 2d                	jne    c0002da9 <fill_first_frag+0x33>
c0002d7c:	57                   	push   edi
c0002d7d:	56                   	push   esi
c0002d7e:	53                   	push   ebx
c0002d7f:	89 c3                	mov    ebx,eax
c0002d81:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d84:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d87:	01 d7                	add    edi,edx
c0002d89:	39 fa                	cmp    edx,edi
c0002d8b:	74 14                	je     c0002da1 <fill_first_frag+0x2b>
c0002d8d:	8d 72 01             	lea    esi,[edx+0x1]
c0002d90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d92:	89 f1                	mov    ecx,esi
c0002d94:	e8 12 fe ff ff       	call   c0002bab <put_fat>
c0002d99:	89 f2                	mov    edx,esi
c0002d9b:	85 c0                	test   eax,eax
c0002d9d:	74 ea                	je     c0002d89 <fill_first_frag+0x13>
c0002d9f:	eb 0b                	jmp    c0002dac <fill_first_frag+0x36>
c0002da1:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002da5:	31 c0                	xor    eax,eax
c0002da7:	eb 03                	jmp    c0002dac <fill_first_frag+0x36>
c0002da9:	31 c0                	xor    eax,eax
c0002dab:	c3                   	ret    
c0002dac:	5b                   	pop    ebx
c0002dad:	5e                   	pop    esi
c0002dae:	5f                   	pop    edi
c0002daf:	c3                   	ret    

c0002db0 <get_fat>:
c0002db0:	83 fa 01             	cmp    edx,0x1
c0002db3:	0f 86 db 01 00 00    	jbe    c0002f94 <get_fat+0x1e4>
c0002db9:	55                   	push   ebp
c0002dba:	b9 01 00 00 00       	mov    ecx,0x1
c0002dbf:	57                   	push   edi
c0002dc0:	56                   	push   esi
c0002dc1:	53                   	push   ebx
c0002dc2:	83 ec 1c             	sub    esp,0x1c
c0002dc5:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dc7:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dca:	0f 86 cc 01 00 00    	jbe    c0002f9c <get_fat+0x1ec>
c0002dd0:	89 c3                	mov    ebx,eax
c0002dd2:	89 d6                	mov    esi,edx
c0002dd4:	8a 07                	mov    al,BYTE PTR [edi]
c0002dd6:	3c 02                	cmp    al,0x2
c0002dd8:	0f 84 99 00 00 00    	je     c0002e77 <get_fat+0xc7>
c0002dde:	77 09                	ja     c0002de9 <get_fat+0x39>
c0002de0:	fe c8                	dec    al
c0002de2:	74 1a                	je     c0002dfe <get_fat+0x4e>
c0002de4:	e9 b3 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002de9:	3c 03                	cmp    al,0x3
c0002deb:	0f 84 b5 00 00 00    	je     c0002ea6 <get_fat+0xf6>
c0002df1:	3c 04                	cmp    al,0x4
c0002df3:	0f 84 e3 00 00 00    	je     c0002edc <get_fat+0x12c>
c0002df9:	e9 9e 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002dfe:	89 d3                	mov    ebx,edx
c0002e00:	31 c9                	xor    ecx,ecx
c0002e02:	d1 eb                	shr    ebx,1
c0002e04:	89 f8                	mov    eax,edi
c0002e06:	01 d3                	add    ebx,edx
c0002e08:	89 da                	mov    edx,ebx
c0002e0a:	c1 ea 09             	shr    edx,0x9
c0002e0d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e10:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e13:	e8 10 f4 ff ff       	call   c0002228 <move_window>
c0002e18:	85 c0                	test   eax,eax
c0002e1a:	74 08                	je     c0002e24 <get_fat+0x74>
c0002e1c:	83 c9 ff             	or     ecx,0xffffffff
c0002e1f:	e9 78 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002e24:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e27:	31 c9                	xor    ecx,ecx
c0002e29:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e2f:	89 ea                	mov    edx,ebp
c0002e31:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e35:	c1 ea 09             	shr    edx,0x9
c0002e38:	89 f8                	mov    eax,edi
c0002e3a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e3d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e40:	e8 e3 f3 ff ff       	call   c0002228 <move_window>
c0002e45:	85 c0                	test   eax,eax
c0002e47:	75 d3                	jne    c0002e1c <get_fat+0x6c>
c0002e49:	0f b6 c3             	movzx  eax,bl
c0002e4c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e52:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e57:	c1 e3 08             	shl    ebx,0x8
c0002e5a:	09 c3                	or     ebx,eax
c0002e5c:	89 d9                	mov    ecx,ebx
c0002e5e:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e64:	83 e6 01             	and    esi,0x1
c0002e67:	0f 84 2f 01 00 00    	je     c0002f9c <get_fat+0x1ec>
c0002e6d:	89 d9                	mov    ecx,ebx
c0002e6f:	c1 e9 04             	shr    ecx,0x4
c0002e72:	e9 25 01 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002e77:	31 c9                	xor    ecx,ecx
c0002e79:	c1 ea 08             	shr    edx,0x8
c0002e7c:	89 f8                	mov    eax,edi
c0002e7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e84:	e8 9f f3 ff ff       	call   c0002228 <move_window>
c0002e89:	85 c0                	test   eax,eax
c0002e8b:	75 8f                	jne    c0002e1c <get_fat+0x6c>
c0002e8d:	01 f6                	add    esi,esi
c0002e8f:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e95:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e99:	e8 ac eb ff ff       	call   c0001a4a <ld_word>
c0002e9e:	0f b7 c8             	movzx  ecx,ax
c0002ea1:	e9 f6 00 00 00       	jmp    c0002f9c <get_fat+0x1ec>
c0002ea6:	31 c9                	xor    ecx,ecx
c0002ea8:	c1 ea 07             	shr    edx,0x7
c0002eab:	89 f8                	mov    eax,edi
c0002ead:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002eb0:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb3:	e8 70 f3 ff ff       	call   c0002228 <move_window>
c0002eb8:	85 c0                	test   eax,eax
c0002eba:	0f 85 5c ff ff ff    	jne    c0002e1c <get_fat+0x6c>
c0002ec0:	c1 e6 02             	shl    esi,0x2
c0002ec3:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ecd:	e8 85 eb ff ff       	call   c0001a57 <ld_dword>
c0002ed2:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ed7:	e9 b4 00 00 00       	jmp    c0002f90 <get_fat+0x1e0>
c0002edc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002edf:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ee2:	89 d1                	mov    ecx,edx
c0002ee4:	09 c1                	or     ecx,eax
c0002ee6:	74 06                	je     c0002eee <get_fat+0x13e>
c0002ee8:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eec:	75 0f                	jne    c0002efd <get_fat+0x14d>
c0002eee:	b9 01 00 00 00       	mov    ecx,0x1
c0002ef3:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ef7:	0f 85 9f 00 00 00    	jne    c0002f9c <get_fat+0x1ec>
c0002efd:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f01:	89 f5                	mov    ebp,esi
c0002f03:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f08:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f0b:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f0e:	80 f9 02             	cmp    cl,0x2
c0002f11:	75 35                	jne    c0002f48 <get_fat+0x198>
c0002f13:	83 c0 ff             	add    eax,0xffffffff
c0002f16:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f1b:	83 d2 ff             	adc    edx,0xffffffff
c0002f1e:	31 db                	xor    ebx,ebx
c0002f20:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f24:	53                   	push   ebx
c0002f25:	c1 ea 09             	shr    edx,0x9
c0002f28:	51                   	push   ecx
c0002f29:	52                   	push   edx
c0002f2a:	50                   	push   eax
c0002f2b:	e8 9c 28 02 00       	call   c00257cc <__udivdi3>
c0002f30:	83 c4 10             	add    esp,0x10
c0002f33:	b9 01 00 00 00       	mov    ecx,0x1
c0002f38:	39 c5                	cmp    ebp,eax
c0002f3a:	77 60                	ja     c0002f9c <get_fat+0x1ec>
c0002f3c:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f41:	74 59                	je     c0002f9c <get_fat+0x1ec>
c0002f43:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f46:	eb 54                	jmp    c0002f9c <get_fat+0x1ec>
c0002f48:	80 f9 03             	cmp    cl,0x3
c0002f4b:	75 05                	jne    c0002f52 <get_fat+0x1a2>
c0002f4d:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f50:	77 f1                	ja     c0002f43 <get_fat+0x193>
c0002f52:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f57:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f5b:	75 3f                	jne    c0002f9c <get_fat+0x1ec>
c0002f5d:	31 c9                	xor    ecx,ecx
c0002f5f:	89 f2                	mov    edx,esi
c0002f61:	89 f8                	mov    eax,edi
c0002f63:	c1 ea 07             	shr    edx,0x7
c0002f66:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f69:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f6c:	e8 b7 f2 ff ff       	call   c0002228 <move_window>
c0002f71:	85 c0                	test   eax,eax
c0002f73:	0f 85 a3 fe ff ff    	jne    c0002e1c <get_fat+0x6c>
c0002f79:	c1 e6 02             	shl    esi,0x2
c0002f7c:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f82:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f86:	e8 cc ea ff ff       	call   c0001a57 <ld_dword>
c0002f8b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f90:	89 c1                	mov    ecx,eax
c0002f92:	eb 08                	jmp    c0002f9c <get_fat+0x1ec>
c0002f94:	b9 01 00 00 00       	mov    ecx,0x1
c0002f99:	89 c8                	mov    eax,ecx
c0002f9b:	c3                   	ret    
c0002f9c:	83 c4 1c             	add    esp,0x1c
c0002f9f:	89 c8                	mov    eax,ecx
c0002fa1:	5b                   	pop    ebx
c0002fa2:	5e                   	pop    esi
c0002fa3:	5f                   	pop    edi
c0002fa4:	5d                   	pop    ebp
c0002fa5:	c3                   	ret    

c0002fa6 <dir_sdi>:
c0002fa6:	55                   	push   ebp
c0002fa7:	57                   	push   edi
c0002fa8:	56                   	push   esi
c0002fa9:	53                   	push   ebx
c0002faa:	89 c3                	mov    ebx,eax
c0002fac:	83 ec 1c             	sub    esp,0x1c
c0002faf:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fb1:	31 c0                	xor    eax,eax
c0002fb3:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fb6:	0f 94 c0             	sete   al
c0002fb9:	48                   	dec    eax
c0002fba:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fbf:	05 00 00 00 10       	add    eax,0x10000000
c0002fc4:	39 d0                	cmp    eax,edx
c0002fc6:	77 0a                	ja     c0002fd2 <dir_sdi+0x2c>
c0002fc8:	b8 02 00 00 00       	mov    eax,0x2
c0002fcd:	e9 c4 00 00 00       	jmp    c0003096 <dir_sdi+0xf0>
c0002fd2:	89 d6                	mov    esi,edx
c0002fd4:	f6 c2 1f             	test   dl,0x1f
c0002fd7:	75 ef                	jne    c0002fc8 <dir_sdi+0x22>
c0002fd9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fdc:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fdf:	85 c9                	test   ecx,ecx
c0002fe1:	75 2d                	jne    c0003010 <dir_sdi+0x6a>
c0002fe3:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fe6:	77 1b                	ja     c0003003 <dir_sdi+0x5d>
c0002fe8:	89 f2                	mov    edx,esi
c0002fea:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fee:	c1 ea 05             	shr    edx,0x5
c0002ff1:	39 c2                	cmp    edx,eax
c0002ff3:	73 d3                	jae    c0002fc8 <dir_sdi+0x22>
c0002ff5:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ff8:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002ffb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ffe:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003001:	eb 4b                	jmp    c000304e <dir_sdi+0xa8>
c0003003:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003006:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000300a:	85 c0                	test   eax,eax
c000300c:	74 da                	je     c0002fe8 <dir_sdi+0x42>
c000300e:	89 c1                	mov    ecx,eax
c0003010:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003014:	c1 e5 09             	shl    ebp,0x9
c0003017:	89 ca                	mov    edx,ecx
c0003019:	39 ee                	cmp    esi,ebp
c000301b:	72 1c                	jb     c0003039 <dir_sdi+0x93>
c000301d:	89 d8                	mov    eax,ebx
c000301f:	e8 8c fd ff ff       	call   c0002db0 <get_fat>
c0003024:	89 c1                	mov    ecx,eax
c0003026:	83 f8 ff             	cmp    eax,0xffffffff
c0003029:	74 66                	je     c0003091 <dir_sdi+0xeb>
c000302b:	83 f8 01             	cmp    eax,0x1
c000302e:	76 98                	jbe    c0002fc8 <dir_sdi+0x22>
c0003030:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003033:	76 93                	jbe    c0002fc8 <dir_sdi+0x22>
c0003035:	29 ee                	sub    esi,ebp
c0003037:	eb de                	jmp    c0003017 <dir_sdi+0x71>
c0003039:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000303d:	89 f8                	mov    eax,edi
c000303f:	e8 9f ec ff ff       	call   c0001ce3 <clst2sect>
c0003044:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003048:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000304b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304e:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003051:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003054:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003057:	89 d1                	mov    ecx,edx
c0003059:	09 c1                	or     ecx,eax
c000305b:	0f 84 67 ff ff ff    	je     c0002fc8 <dir_sdi+0x22>
c0003061:	89 f1                	mov    ecx,esi
c0003063:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000306b:	c1 e9 09             	shr    ecx,0x9
c000306e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003072:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003076:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000307a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000307d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003083:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003086:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000308d:	31 c0                	xor    eax,eax
c000308f:	eb 05                	jmp    c0003096 <dir_sdi+0xf0>
c0003091:	b8 01 00 00 00       	mov    eax,0x1
c0003096:	83 c4 1c             	add    esp,0x1c
c0003099:	5b                   	pop    ebx
c000309a:	5e                   	pop    esi
c000309b:	5f                   	pop    edi
c000309c:	5d                   	pop    ebp
c000309d:	c3                   	ret    

c000309e <create_chain>:
c000309e:	55                   	push   ebp
c000309f:	89 c5                	mov    ebp,eax
c00030a1:	57                   	push   edi
c00030a2:	56                   	push   esi
c00030a3:	53                   	push   ebx
c00030a4:	83 ec 1c             	sub    esp,0x1c
c00030a7:	85 d2                	test   edx,edx
c00030a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00030af:	75 0e                	jne    c00030bf <create_chain+0x21>
c00030b1:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030b4:	85 ff                	test   edi,edi
c00030b6:	74 39                	je     c00030f1 <create_chain+0x53>
c00030b8:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030bb:	77 39                	ja     c00030f6 <create_chain+0x58>
c00030bd:	eb 32                	jmp    c00030f1 <create_chain+0x53>
c00030bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030c3:	e8 e8 fc ff ff       	call   c0002db0 <get_fat>
c00030c8:	89 c3                	mov    ebx,eax
c00030ca:	83 f8 01             	cmp    eax,0x1
c00030cd:	77 0a                	ja     c00030d9 <create_chain+0x3b>
c00030cf:	bb 01 00 00 00       	mov    ebx,0x1
c00030d4:	e9 ba 01 00 00       	jmp    c0003293 <create_chain+0x1f5>
c00030d9:	83 f8 ff             	cmp    eax,0xffffffff
c00030dc:	0f 84 62 01 00 00    	je     c0003244 <create_chain+0x1a6>
c00030e2:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030e5:	0f 87 a8 01 00 00    	ja     c0003293 <create_chain+0x1f5>
c00030eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030ef:	eb 05                	jmp    c00030f6 <create_chain+0x58>
c00030f1:	bf 01 00 00 00       	mov    edi,0x1
c00030f6:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030fa:	75 07                	jne    c0003103 <create_chain+0x65>
c00030fc:	31 db                	xor    ebx,ebx
c00030fe:	e9 90 01 00 00       	jmp    c0003293 <create_chain+0x1f5>
c0003103:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003106:	75 74                	jne    c000317c <create_chain+0xde>
c0003108:	b9 01 00 00 00       	mov    ecx,0x1
c000310d:	89 fa                	mov    edx,edi
c000310f:	89 f0                	mov    eax,esi
c0003111:	e8 2d f9 ff ff       	call   c0002a43 <find_bitmap>
c0003116:	89 c3                	mov    ebx,eax
c0003118:	8d 40 ff             	lea    eax,[eax-0x1]
c000311b:	83 f8 fd             	cmp    eax,0xfffffffd
c000311e:	0f 87 6f 01 00 00    	ja     c0003293 <create_chain+0x1f5>
c0003124:	83 ec 0c             	sub    esp,0xc
c0003127:	b9 01 00 00 00       	mov    ecx,0x1
c000312c:	6a 01                	push   0x1
c000312e:	89 da                	mov    edx,ebx
c0003130:	89 f0                	mov    eax,esi
c0003132:	e8 bf f9 ff ff       	call   c0002af6 <change_bitmap>
c0003137:	83 c4 10             	add    esp,0x10
c000313a:	83 f8 02             	cmp    eax,0x2
c000313d:	74 90                	je     c00030cf <create_chain+0x31>
c000313f:	83 f8 01             	cmp    eax,0x1
c0003142:	0f 84 fc 00 00 00    	je     c0003244 <create_chain+0x1a6>
c0003148:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000314d:	75 09                	jne    c0003158 <create_chain+0xba>
c000314f:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003153:	e9 0c 01 00 00       	jmp    c0003264 <create_chain+0x1c6>
c0003158:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000315c:	0f 85 e7 00 00 00    	jne    c0003249 <create_chain+0x1ab>
c0003162:	8d 57 01             	lea    edx,[edi+0x1]
c0003165:	39 da                	cmp    edx,ebx
c0003167:	0f 84 f7 00 00 00    	je     c0003264 <create_chain+0x1c6>
c000316d:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003170:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003174:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003177:	e9 cd 00 00 00       	jmp    c0003249 <create_chain+0x1ab>
c000317c:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003180:	75 41                	jne    c00031c3 <create_chain+0x125>
c0003182:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003185:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003188:	77 05                	ja     c000318f <create_chain+0xf1>
c000318a:	bb 02 00 00 00       	mov    ebx,0x2
c000318f:	89 da                	mov    edx,ebx
c0003191:	89 e8                	mov    eax,ebp
c0003193:	e8 18 fc ff ff       	call   c0002db0 <get_fat>
c0003198:	83 f8 01             	cmp    eax,0x1
c000319b:	0f 84 2e ff ff ff    	je     c00030cf <create_chain+0x31>
c00031a1:	83 f8 ff             	cmp    eax,0xffffffff
c00031a4:	0f 84 9a 00 00 00    	je     c0003244 <create_chain+0x1a6>
c00031aa:	85 c0                	test   eax,eax
c00031ac:	74 11                	je     c00031bf <create_chain+0x121>
c00031ae:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031b1:	83 f8 01             	cmp    eax,0x1
c00031b4:	76 0d                	jbe    c00031c3 <create_chain+0x125>
c00031b6:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031b9:	76 08                	jbe    c00031c3 <create_chain+0x125>
c00031bb:	89 c7                	mov    edi,eax
c00031bd:	eb 04                	jmp    c00031c3 <create_chain+0x125>
c00031bf:	85 db                	test   ebx,ebx
c00031c1:	75 38                	jne    c00031fb <create_chain+0x15d>
c00031c3:	89 fb                	mov    ebx,edi
c00031c5:	43                   	inc    ebx
c00031c6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031c9:	77 0e                	ja     c00031d9 <create_chain+0x13b>
c00031cb:	83 ff 01             	cmp    edi,0x1
c00031ce:	0f 86 28 ff ff ff    	jbe    c00030fc <create_chain+0x5e>
c00031d4:	bb 02 00 00 00       	mov    ebx,0x2
c00031d9:	89 da                	mov    edx,ebx
c00031db:	89 e8                	mov    eax,ebp
c00031dd:	e8 ce fb ff ff       	call   c0002db0 <get_fat>
c00031e2:	85 c0                	test   eax,eax
c00031e4:	74 15                	je     c00031fb <create_chain+0x15d>
c00031e6:	83 f8 01             	cmp    eax,0x1
c00031e9:	0f 84 e0 fe ff ff    	je     c00030cf <create_chain+0x31>
c00031ef:	40                   	inc    eax
c00031f0:	74 52                	je     c0003244 <create_chain+0x1a6>
c00031f2:	39 fb                	cmp    ebx,edi
c00031f4:	75 cf                	jne    c00031c5 <create_chain+0x127>
c00031f6:	e9 01 ff ff ff       	jmp    c00030fc <create_chain+0x5e>
c00031fb:	83 c9 ff             	or     ecx,0xffffffff
c00031fe:	89 da                	mov    edx,ebx
c0003200:	89 f0                	mov    eax,esi
c0003202:	e8 a4 f9 ff ff       	call   c0002bab <put_fat>
c0003207:	85 c0                	test   eax,eax
c0003209:	75 32                	jne    c000323d <create_chain+0x19f>
c000320b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003210:	74 11                	je     c0003223 <create_chain+0x185>
c0003212:	89 d9                	mov    ecx,ebx
c0003214:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003218:	89 f0                	mov    eax,esi
c000321a:	e8 8c f9 ff ff       	call   c0002bab <put_fat>
c000321f:	85 c0                	test   eax,eax
c0003221:	75 1a                	jne    c000323d <create_chain+0x19f>
c0003223:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003226:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003229:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000322c:	8d 51 fe             	lea    edx,[ecx-0x2]
c000322f:	39 d0                	cmp    eax,edx
c0003231:	77 04                	ja     c0003237 <create_chain+0x199>
c0003233:	48                   	dec    eax
c0003234:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003237:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000323b:	eb 56                	jmp    c0003293 <create_chain+0x1f5>
c000323d:	48                   	dec    eax
c000323e:	0f 85 8b fe ff ff    	jne    c00030cf <create_chain+0x31>
c0003244:	83 cb ff             	or     ebx,0xffffffff
c0003247:	eb 4a                	jmp    c0003293 <create_chain+0x1f5>
c0003249:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000324d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003250:	41                   	inc    ecx
c0003251:	39 d9                	cmp    ecx,ebx
c0003253:	75 19                	jne    c000326e <create_chain+0x1d0>
c0003255:	b9 02 00 00 00       	mov    ecx,0x2
c000325a:	85 d2                	test   edx,edx
c000325c:	74 03                	je     c0003261 <create_chain+0x1c3>
c000325e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003261:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003264:	85 c0                	test   eax,eax
c0003266:	0f 85 63 fe ff ff    	jne    c00030cf <create_chain+0x31>
c000326c:	eb b5                	jmp    c0003223 <create_chain+0x185>
c000326e:	85 d2                	test   edx,edx
c0003270:	75 07                	jne    c0003279 <create_chain+0x1db>
c0003272:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003279:	89 d9                	mov    ecx,ebx
c000327b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000327f:	89 e8                	mov    eax,ebp
c0003281:	e8 bb fa ff ff       	call   c0002d41 <fill_last_frag>
c0003286:	85 c0                	test   eax,eax
c0003288:	75 b3                	jne    c000323d <create_chain+0x19f>
c000328a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003291:	eb 90                	jmp    c0003223 <create_chain+0x185>
c0003293:	83 c4 1c             	add    esp,0x1c
c0003296:	89 d8                	mov    eax,ebx
c0003298:	5b                   	pop    ebx
c0003299:	5e                   	pop    esi
c000329a:	5f                   	pop    edi
c000329b:	5d                   	pop    ebp
c000329c:	c3                   	ret    

c000329d <remove_chain>:
c000329d:	55                   	push   ebp
c000329e:	57                   	push   edi
c000329f:	56                   	push   esi
c00032a0:	53                   	push   ebx
c00032a1:	83 ec 1c             	sub    esp,0x1c
c00032a4:	83 fa 01             	cmp    edx,0x1
c00032a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032ab:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032ad:	77 0a                	ja     c00032b9 <remove_chain+0x1c>
c00032af:	b8 02 00 00 00       	mov    eax,0x2
c00032b4:	e9 24 01 00 00       	jmp    c00033dd <remove_chain+0x140>
c00032b9:	89 d6                	mov    esi,edx
c00032bb:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032be:	76 ef                	jbe    c00032af <remove_chain+0x12>
c00032c0:	89 c7                	mov    edi,eax
c00032c2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032c7:	75 06                	jne    c00032cf <remove_chain+0x32>
c00032c9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032cd:	eb 54                	jmp    c0003323 <remove_chain+0x86>
c00032cf:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032d2:	75 06                	jne    c00032da <remove_chain+0x3d>
c00032d4:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032d8:	74 ef                	je     c00032c9 <remove_chain+0x2c>
c00032da:	83 c9 ff             	or     ecx,0xffffffff
c00032dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032e1:	89 d8                	mov    eax,ebx
c00032e3:	e8 c3 f8 ff ff       	call   c0002bab <put_fat>
c00032e8:	85 c0                	test   eax,eax
c00032ea:	74 dd                	je     c00032c9 <remove_chain+0x2c>
c00032ec:	e9 ec 00 00 00       	jmp    c00033dd <remove_chain+0x140>
c00032f1:	83 f8 01             	cmp    eax,0x1
c00032f4:	74 b9                	je     c00032af <remove_chain+0x12>
c00032f6:	83 f8 ff             	cmp    eax,0xffffffff
c00032f9:	74 6d                	je     c0003368 <remove_chain+0xcb>
c00032fb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fe:	75 6f                	jne    c000336f <remove_chain+0xd2>
c0003300:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003303:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003306:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003309:	39 d0                	cmp    eax,edx
c000330b:	73 08                	jae    c0003315 <remove_chain+0x78>
c000330d:	40                   	inc    eax
c000330e:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003312:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003315:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003318:	39 e9                	cmp    ecx,ebp
c000331a:	75 64                	jne    c0003380 <remove_chain+0xe3>
c000331c:	89 ee                	mov    esi,ebp
c000331e:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003321:	76 0f                	jbe    c0003332 <remove_chain+0x95>
c0003323:	89 f2                	mov    edx,esi
c0003325:	89 f8                	mov    eax,edi
c0003327:	e8 84 fa ff ff       	call   c0002db0 <get_fat>
c000332c:	89 c5                	mov    ebp,eax
c000332e:	85 c0                	test   eax,eax
c0003330:	75 bf                	jne    c00032f1 <remove_chain+0x54>
c0003332:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003335:	0f 85 a0 00 00 00    	jne    c00033db <remove_chain+0x13e>
c000333b:	eb 6c                	jmp    c00033a9 <remove_chain+0x10c>
c000333d:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003340:	84 c0                	test   al,al
c0003342:	75 7d                	jne    c00033c1 <remove_chain+0x124>
c0003344:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003347:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000334b:	0f 84 86 00 00 00    	je     c00033d7 <remove_chain+0x13a>
c0003351:	89 da                	mov    edx,ebx
c0003353:	89 f8                	mov    eax,edi
c0003355:	e8 56 fa ff ff       	call   c0002db0 <get_fat>
c000335a:	83 f8 01             	cmp    eax,0x1
c000335d:	0f 86 4c ff ff ff    	jbe    c00032af <remove_chain+0x12>
c0003363:	83 f8 ff             	cmp    eax,0xffffffff
c0003366:	75 4e                	jne    c00033b6 <remove_chain+0x119>
c0003368:	b8 01 00 00 00       	mov    eax,0x1
c000336d:	eb 6e                	jmp    c00033dd <remove_chain+0x140>
c000336f:	31 c9                	xor    ecx,ecx
c0003371:	89 f2                	mov    edx,esi
c0003373:	89 d8                	mov    eax,ebx
c0003375:	e8 31 f8 ff ff       	call   c0002bab <put_fat>
c000337a:	85 c0                	test   eax,eax
c000337c:	74 82                	je     c0003300 <remove_chain+0x63>
c000337e:	eb 5d                	jmp    c00033dd <remove_chain+0x140>
c0003380:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003383:	75 1b                	jne    c00033a0 <remove_chain+0x103>
c0003385:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003389:	89 d8                	mov    eax,ebx
c000338b:	83 ec 0c             	sub    esp,0xc
c000338e:	6a 00                	push   0x0
c0003390:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003394:	e8 5d f7 ff ff       	call   c0002af6 <change_bitmap>
c0003399:	83 c4 10             	add    esp,0x10
c000339c:	85 c0                	test   eax,eax
c000339e:	75 3d                	jne    c00033dd <remove_chain+0x140>
c00033a0:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033a4:	e9 73 ff ff ff       	jmp    c000331c <remove_chain+0x7f>
c00033a9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033ae:	75 8d                	jne    c000333d <remove_chain+0xa0>
c00033b0:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033b4:	eb 25                	jmp    c00033db <remove_chain+0x13e>
c00033b6:	8d 53 01             	lea    edx,[ebx+0x1]
c00033b9:	89 c3                	mov    ebx,eax
c00033bb:	39 c2                	cmp    edx,eax
c00033bd:	74 88                	je     c0003347 <remove_chain+0xaa>
c00033bf:	eb 1a                	jmp    c00033db <remove_chain+0x13e>
c00033c1:	3c 03                	cmp    al,0x3
c00033c3:	75 16                	jne    c00033db <remove_chain+0x13e>
c00033c5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033c8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033cc:	77 0d                	ja     c00033db <remove_chain+0x13e>
c00033ce:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033d1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033d5:	72 04                	jb     c00033db <remove_chain+0x13e>
c00033d7:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033db:	31 c0                	xor    eax,eax
c00033dd:	83 c4 1c             	add    esp,0x1c
c00033e0:	5b                   	pop    ebx
c00033e1:	5e                   	pop    esi
c00033e2:	5f                   	pop    edi
c00033e3:	5d                   	pop    ebp
c00033e4:	c3                   	ret    

c00033e5 <dir_clear>:
c00033e5:	55                   	push   ebp
c00033e6:	57                   	push   edi
c00033e7:	56                   	push   esi
c00033e8:	89 c6                	mov    esi,eax
c00033ea:	53                   	push   ebx
c00033eb:	83 ec 1c             	sub    esp,0x1c
c00033ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033f2:	e8 9d ed ff ff       	call   c0002194 <sync_window>
c00033f7:	85 c0                	test   eax,eax
c00033f9:	0f 85 de 00 00 00    	jne    c00034dd <dir_clear+0xf8>
c00033ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003403:	89 f0                	mov    eax,esi
c0003405:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003408:	e8 d6 e8 ff ff       	call   c0001ce3 <clst2sect>
c000340d:	b9 00 02 00 00       	mov    ecx,0x200
c0003412:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003416:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000341a:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000341d:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003420:	89 e8                	mov    eax,ebp
c0003422:	31 d2                	xor    edx,edx
c0003424:	e8 b5 e6 ff ff       	call   c0001ade <mem_set>
c0003429:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000342d:	c1 e3 09             	shl    ebx,0x9
c0003430:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003436:	76 1f                	jbe    c0003457 <dir_clear+0x72>
c0003438:	bb 00 80 00 00       	mov    ebx,0x8000
c000343d:	eb 18                	jmp    c0003457 <dir_clear+0x72>
c000343f:	83 ec 0c             	sub    esp,0xc
c0003442:	53                   	push   ebx
c0003443:	e8 35 4e 00 00       	call   c000827d <ff_memalloc>
c0003448:	83 c4 10             	add    esp,0x10
c000344b:	89 c7                	mov    edi,eax
c000344d:	85 c0                	test   eax,eax
c000344f:	0f 85 8f 00 00 00    	jne    c00034e4 <dir_clear+0xff>
c0003455:	d1 eb                	shr    ebx,1
c0003457:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000345d:	77 e0                	ja     c000343f <dir_clear+0x5a>
c000345f:	31 db                	xor    ebx,ebx
c0003461:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003465:	39 d8                	cmp    eax,ebx
c0003467:	76 66                	jbe    c00034cf <dir_clear+0xea>
c0003469:	83 ec 0c             	sub    esp,0xc
c000346c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003470:	6a 01                	push   0x1
c0003472:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000347a:	55                   	push   ebp
c000347b:	50                   	push   eax
c000347c:	e8 94 e5 ff ff       	call   c0001a15 <disk_write>
c0003481:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003486:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000348b:	83 c4 20             	add    esp,0x20
c000348e:	85 c0                	test   eax,eax
c0003490:	75 3d                	jne    c00034cf <dir_clear+0xea>
c0003492:	43                   	inc    ebx
c0003493:	eb cc                	jmp    c0003461 <dir_clear+0x7c>
c0003495:	83 ec 0c             	sub    esp,0xc
c0003498:	31 d2                	xor    edx,edx
c000349a:	55                   	push   ebp
c000349b:	89 d8                	mov    eax,ebx
c000349d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034a1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034a5:	52                   	push   edx
c00034a6:	50                   	push   eax
c00034a7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034ab:	57                   	push   edi
c00034ac:	50                   	push   eax
c00034ad:	e8 63 e5 ff ff       	call   c0001a15 <disk_write>
c00034b2:	83 c4 20             	add    esp,0x20
c00034b5:	85 c0                	test   eax,eax
c00034b7:	75 0a                	jne    c00034c3 <dir_clear+0xde>
c00034b9:	01 eb                	add    ebx,ebp
c00034bb:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034bf:	39 d8                	cmp    eax,ebx
c00034c1:	77 d2                	ja     c0003495 <dir_clear+0xb0>
c00034c3:	83 ec 0c             	sub    esp,0xc
c00034c6:	57                   	push   edi
c00034c7:	e8 c7 4d 00 00       	call   c0008293 <ff_memfree>
c00034cc:	83 c4 10             	add    esp,0x10
c00034cf:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034d3:	39 d8                	cmp    eax,ebx
c00034d5:	0f 95 c0             	setne  al
c00034d8:	0f b6 c0             	movzx  eax,al
c00034db:	eb 19                	jmp    c00034f6 <dir_clear+0x111>
c00034dd:	b8 01 00 00 00       	mov    eax,0x1
c00034e2:	eb 12                	jmp    c00034f6 <dir_clear+0x111>
c00034e4:	89 d9                	mov    ecx,ebx
c00034e6:	31 d2                	xor    edx,edx
c00034e8:	c1 eb 09             	shr    ebx,0x9
c00034eb:	e8 ee e5 ff ff       	call   c0001ade <mem_set>
c00034f0:	89 dd                	mov    ebp,ebx
c00034f2:	31 db                	xor    ebx,ebx
c00034f4:	eb c5                	jmp    c00034bb <dir_clear+0xd6>
c00034f6:	83 c4 1c             	add    esp,0x1c
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    

c00034fe <dir_next>:
c00034fe:	55                   	push   ebp
c00034ff:	57                   	push   edi
c0003500:	56                   	push   esi
c0003501:	53                   	push   ebx
c0003502:	89 c3                	mov    ebx,eax
c0003504:	83 ec 1c             	sub    esp,0x1c
c0003507:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003509:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000350d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003510:	8d 78 20             	lea    edi,[eax+0x20]
c0003513:	31 c0                	xor    eax,eax
c0003515:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003519:	0f 94 c0             	sete   al
c000351c:	48                   	dec    eax
c000351d:	25 00 00 20 f0       	and    eax,0xf0200000
c0003522:	05 00 00 00 10       	add    eax,0x10000000
c0003527:	39 f8                	cmp    eax,edi
c0003529:	77 0e                	ja     c0003539 <dir_next+0x3b>
c000352b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003532:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003539:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000353c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000353f:	b8 04 00 00 00       	mov    eax,0x4
c0003544:	89 ce                	mov    esi,ecx
c0003546:	09 d6                	or     esi,edx
c0003548:	0f 84 da 00 00 00    	je     c0003628 <dir_next+0x12a>
c000354e:	89 f8                	mov    eax,edi
c0003550:	25 ff 01 00 00       	and    eax,0x1ff
c0003555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003559:	0f 85 b9 00 00 00    	jne    c0003618 <dir_next+0x11a>
c000355f:	83 c2 01             	add    edx,0x1
c0003562:	83 d1 00             	adc    ecx,0x0
c0003565:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003568:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000356b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000356e:	85 d2                	test   edx,edx
c0003570:	75 29                	jne    c000359b <dir_next+0x9d>
c0003572:	89 fa                	mov    edx,edi
c0003574:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003578:	c1 ea 05             	shr    edx,0x5
c000357b:	39 c2                	cmp    edx,eax
c000357d:	0f 82 95 00 00 00    	jb     c0003618 <dir_next+0x11a>
c0003583:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000358a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003591:	b8 04 00 00 00       	mov    eax,0x4
c0003596:	e9 8d 00 00 00       	jmp    c0003628 <dir_next+0x12a>
c000359b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000359f:	89 f9                	mov    ecx,edi
c00035a1:	48                   	dec    eax
c00035a2:	c1 e9 09             	shr    ecx,0x9
c00035a5:	85 c8                	test   eax,ecx
c00035a7:	75 6f                	jne    c0003618 <dir_next+0x11a>
c00035a9:	89 d8                	mov    eax,ebx
c00035ab:	e8 00 f8 ff ff       	call   c0002db0 <get_fat>
c00035b0:	89 c6                	mov    esi,eax
c00035b2:	83 f8 01             	cmp    eax,0x1
c00035b5:	77 07                	ja     c00035be <dir_next+0xc0>
c00035b7:	b8 02 00 00 00       	mov    eax,0x2
c00035bc:	eb 6a                	jmp    c0003628 <dir_next+0x12a>
c00035be:	83 f8 ff             	cmp    eax,0xffffffff
c00035c1:	75 07                	jne    c00035ca <dir_next+0xcc>
c00035c3:	b8 01 00 00 00       	mov    eax,0x1
c00035c8:	eb 5e                	jmp    c0003628 <dir_next+0x12a>
c00035ca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035cd:	77 37                	ja     c0003606 <dir_next+0x108>
c00035cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035d4:	74 ad                	je     c0003583 <dir_next+0x85>
c00035d6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035d9:	89 d8                	mov    eax,ebx
c00035db:	e8 be fa ff ff       	call   c000309e <create_chain>
c00035e0:	89 c6                	mov    esi,eax
c00035e2:	b8 07 00 00 00       	mov    eax,0x7
c00035e7:	85 f6                	test   esi,esi
c00035e9:	74 3d                	je     c0003628 <dir_next+0x12a>
c00035eb:	83 fe 01             	cmp    esi,0x1
c00035ee:	74 c7                	je     c00035b7 <dir_next+0xb9>
c00035f0:	83 fe ff             	cmp    esi,0xffffffff
c00035f3:	74 ce                	je     c00035c3 <dir_next+0xc5>
c00035f5:	89 f2                	mov    edx,esi
c00035f7:	89 e8                	mov    eax,ebp
c00035f9:	e8 e7 fd ff ff       	call   c00033e5 <dir_clear>
c00035fe:	85 c0                	test   eax,eax
c0003600:	75 c1                	jne    c00035c3 <dir_next+0xc5>
c0003602:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003606:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003609:	89 f2                	mov    edx,esi
c000360b:	89 e8                	mov    eax,ebp
c000360d:	e8 d1 e6 ff ff       	call   c0001ce3 <clst2sect>
c0003612:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003615:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000361c:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000361f:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003623:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003626:	31 c0                	xor    eax,eax
c0003628:	83 c4 1c             	add    esp,0x1c
c000362b:	5b                   	pop    ebx
c000362c:	5e                   	pop    esi
c000362d:	5f                   	pop    edi
c000362e:	5d                   	pop    ebp
c000362f:	c3                   	ret    

c0003630 <load_xdir>:
c0003630:	55                   	push   ebp
c0003631:	57                   	push   edi
c0003632:	56                   	push   esi
c0003633:	89 c6                	mov    esi,eax
c0003635:	53                   	push   ebx
c0003636:	83 ec 1c             	sub    esp,0x1c
c0003639:	8b 00                	mov    eax,DWORD PTR [eax]
c000363b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000363e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003641:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003644:	e8 df eb ff ff       	call   c0002228 <move_window>
c0003649:	89 c3                	mov    ebx,eax
c000364b:	85 c0                	test   eax,eax
c000364d:	0f 85 0c 01 00 00    	jne    c000375f <load_xdir+0x12f>
c0003653:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003656:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003659:	0f 85 fb 00 00 00    	jne    c000375a <load_xdir+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	b9 20 00 00 00       	mov    ecx,0x20
c0003666:	e8 5e e4 ff ff       	call   c0001ac9 <mem_cpy>
c000366b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000366f:	40                   	inc    eax
c0003670:	c1 e0 05             	shl    eax,0x5
c0003673:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003677:	83 e8 60             	sub    eax,0x60
c000367a:	3d 00 02 00 00       	cmp    eax,0x200
c000367f:	0f 87 d5 00 00 00    	ja     c000375a <load_xdir+0x12a>
c0003685:	31 d2                	xor    edx,edx
c0003687:	89 f0                	mov    eax,esi
c0003689:	e8 70 fe ff ff       	call   c00034fe <dir_next>
c000368e:	89 c3                	mov    ebx,eax
c0003690:	83 f8 04             	cmp    eax,0x4
c0003693:	0f 84 c1 00 00 00    	je     c000375a <load_xdir+0x12a>
c0003699:	85 c0                	test   eax,eax
c000369b:	0f 85 be 00 00 00    	jne    c000375f <load_xdir+0x12f>
c00036a1:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036a4:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036a7:	8b 06                	mov    eax,DWORD PTR [esi]
c00036a9:	e8 7a eb ff ff       	call   c0002228 <move_window>
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	85 c0                	test   eax,eax
c00036b2:	0f 85 a7 00 00 00    	jne    c000375f <load_xdir+0x12f>
c00036b8:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036bb:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036be:	0f 85 96 00 00 00    	jne    c000375a <load_xdir+0x12a>
c00036c4:	8d 47 20             	lea    eax,[edi+0x20]
c00036c7:	b9 20 00 00 00       	mov    ecx,0x20
c00036cc:	e8 f8 e3 ff ff       	call   c0001ac9 <mem_cpy>
c00036d1:	31 d2                	xor    edx,edx
c00036d3:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036d7:	b9 0f 00 00 00       	mov    ecx,0xf
c00036dc:	83 c0 2c             	add    eax,0x2c
c00036df:	f7 f1                	div    ecx
c00036e1:	c1 e0 05             	shl    eax,0x5
c00036e4:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036e8:	77 70                	ja     c000375a <load_xdir+0x12a>
c00036ea:	bd 40 00 00 00       	mov    ebp,0x40
c00036ef:	31 d2                	xor    edx,edx
c00036f1:	89 f0                	mov    eax,esi
c00036f3:	e8 06 fe ff ff       	call   c00034fe <dir_next>
c00036f8:	89 c3                	mov    ebx,eax
c00036fa:	83 f8 04             	cmp    eax,0x4
c00036fd:	74 5b                	je     c000375a <load_xdir+0x12a>
c00036ff:	85 c0                	test   eax,eax
c0003701:	75 5c                	jne    c000375f <load_xdir+0x12f>
c0003703:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003706:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003709:	8b 06                	mov    eax,DWORD PTR [esi]
c000370b:	e8 18 eb ff ff       	call   c0002228 <move_window>
c0003710:	89 c3                	mov    ebx,eax
c0003712:	85 c0                	test   eax,eax
c0003714:	75 49                	jne    c000375f <load_xdir+0x12f>
c0003716:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003719:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000371c:	75 3c                	jne    c000375a <load_xdir+0x12a>
c000371e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003724:	77 0d                	ja     c0003733 <load_xdir+0x103>
c0003726:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003729:	b9 20 00 00 00       	mov    ecx,0x20
c000372e:	e8 96 e3 ff ff       	call   c0001ac9 <mem_cpy>
c0003733:	83 c5 20             	add    ebp,0x20
c0003736:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000373a:	77 b3                	ja     c00036ef <load_xdir+0xbf>
c000373c:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003742:	77 1b                	ja     c000375f <load_xdir+0x12f>
c0003744:	89 f8                	mov    eax,edi
c0003746:	e8 cd e7 ff ff       	call   c0001f18 <xdir_sum>
c000374b:	89 c1                	mov    ecx,eax
c000374d:	8d 47 02             	lea    eax,[edi+0x2]
c0003750:	e8 f5 e2 ff ff       	call   c0001a4a <ld_word>
c0003755:	66 39 c1             	cmp    cx,ax
c0003758:	74 05                	je     c000375f <load_xdir+0x12f>
c000375a:	bb 02 00 00 00       	mov    ebx,0x2
c000375f:	83 c4 1c             	add    esp,0x1c
c0003762:	89 d8                	mov    eax,ebx
c0003764:	5b                   	pop    ebx
c0003765:	5e                   	pop    esi
c0003766:	5f                   	pop    edi
c0003767:	5d                   	pop    ebp
c0003768:	c3                   	ret    

c0003769 <load_obj_xdir>:
c0003769:	53                   	push   ebx
c000376a:	89 c3                	mov    ebx,eax
c000376c:	83 ec 08             	sub    esp,0x8
c000376f:	8b 02                	mov    eax,DWORD PTR [edx]
c0003771:	89 03                	mov    DWORD PTR [ebx],eax
c0003773:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003776:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003779:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000377c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000377f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003782:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003789:	30 c0                	xor    al,al
c000378b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003792:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003795:	89 d8                	mov    eax,ebx
c0003797:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000379a:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000379d:	e8 04 f8 ff ff       	call   c0002fa6 <dir_sdi>
c00037a2:	85 c0                	test   eax,eax
c00037a4:	75 0b                	jne    c00037b1 <load_obj_xdir+0x48>
c00037a6:	89 d8                	mov    eax,ebx
c00037a8:	83 c4 08             	add    esp,0x8
c00037ab:	5b                   	pop    ebx
c00037ac:	e9 7f fe ff ff       	jmp    c0003630 <load_xdir>
c00037b1:	83 c4 08             	add    esp,0x8
c00037b4:	5b                   	pop    ebx
c00037b5:	c3                   	ret    

c00037b6 <dir_read>:
c00037b6:	55                   	push   ebp
c00037b7:	bd 04 00 00 00       	mov    ebp,0x4
c00037bc:	57                   	push   edi
c00037bd:	56                   	push   esi
c00037be:	be ff ff ff ff       	mov    esi,0xffffffff
c00037c3:	53                   	push   ebx
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	83 ec 1c             	sub    esp,0x1c
c00037c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037cd:	8b 38                	mov    edi,DWORD PTR [eax]
c00037cf:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037d4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037d7:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037da:	89 c8                	mov    eax,ecx
c00037dc:	09 d0                	or     eax,edx
c00037de:	0f 84 25 01 00 00    	je     c0003909 <dir_read+0x153>
c00037e4:	89 f8                	mov    eax,edi
c00037e6:	e8 3d ea ff ff       	call   c0002228 <move_window>
c00037eb:	89 c5                	mov    ebp,eax
c00037ed:	85 c0                	test   eax,eax
c00037ef:	0f 85 23 01 00 00    	jne    c0003918 <dir_read+0x162>
c00037f5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037f8:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037fa:	84 c9                	test   cl,cl
c00037fc:	0f 84 11 01 00 00    	je     c0003913 <dir_read+0x15d>
c0003802:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003805:	75 48                	jne    c000384f <dir_read+0x99>
c0003807:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000380c:	74 10                	je     c000381e <dir_read+0x68>
c000380e:	80 f9 83             	cmp    cl,0x83
c0003811:	0f 85 dd 00 00 00    	jne    c00038f4 <dir_read+0x13e>
c0003817:	31 ed                	xor    ebp,ebp
c0003819:	e9 08 01 00 00       	jmp    c0003926 <dir_read+0x170>
c000381e:	80 f9 85             	cmp    cl,0x85
c0003821:	0f 85 cd 00 00 00    	jne    c00038f4 <dir_read+0x13e>
c0003827:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000382a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000382d:	89 d8                	mov    eax,ebx
c000382f:	e8 fc fd ff ff       	call   c0003630 <load_xdir>
c0003834:	89 c5                	mov    ebp,eax
c0003836:	85 c0                	test   eax,eax
c0003838:	0f 85 da 00 00 00    	jne    c0003918 <dir_read+0x162>
c000383e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003841:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003844:	83 e0 3f             	and    eax,0x3f
c0003847:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000384a:	e9 d7 00 00 00       	jmp    c0003926 <dir_read+0x170>
c000384f:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003852:	83 e0 3f             	and    eax,0x3f
c0003855:	80 f9 2e             	cmp    cl,0x2e
c0003858:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000385c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000385f:	0f 84 8a 00 00 00    	je     c00038ef <dir_read+0x139>
c0003865:	80 f9 e5             	cmp    cl,0xe5
c0003868:	0f 84 81 00 00 00    	je     c00038ef <dir_read+0x139>
c000386e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003872:	83 e0 1f             	and    eax,0x1f
c0003875:	83 f8 08             	cmp    eax,0x8
c0003878:	0f 94 c0             	sete   al
c000387b:	0f b6 c0             	movzx  eax,al
c000387e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003882:	75 6b                	jne    c00038ef <dir_read+0x139>
c0003884:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003889:	75 44                	jne    c00038cf <dir_read+0x119>
c000388b:	f6 c1 40             	test   cl,0x40
c000388e:	74 12                	je     c00038a2 <dir_read+0xec>
c0003890:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003893:	83 e1 bf             	and    ecx,0xffffffbf
c0003896:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000389a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000389d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038a0:	eb 06                	jmp    c00038a8 <dir_read+0xf2>
c00038a2:	89 f0                	mov    eax,esi
c00038a4:	38 c8                	cmp    al,cl
c00038a6:	75 47                	jne    c00038ef <dir_read+0x139>
c00038a8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038ac:	be ff ff ff ff       	mov    esi,0xffffffff
c00038b1:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038b4:	75 3e                	jne    c00038f4 <dir_read+0x13e>
c00038b6:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038ba:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038bd:	e8 8a e4 ff ff       	call   c0001d4c <pick_lfn>
c00038c2:	85 c0                	test   eax,eax
c00038c4:	74 2e                	je     c00038f4 <dir_read+0x13e>
c00038c6:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038ca:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038cd:	eb 25                	jmp    c00038f4 <dir_read+0x13e>
c00038cf:	89 f0                	mov    eax,esi
c00038d1:	84 c0                	test   al,al
c00038d3:	75 11                	jne    c00038e6 <dir_read+0x130>
c00038d5:	89 d0                	mov    eax,edx
c00038d7:	e8 2a e6 ff ff       	call   c0001f06 <sum_sfn>
c00038dc:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038e0:	0f 84 31 ff ff ff    	je     c0003817 <dir_read+0x61>
c00038e6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038ed:	eb 37                	jmp    c0003926 <dir_read+0x170>
c00038ef:	be ff ff ff ff       	mov    esi,0xffffffff
c00038f4:	31 d2                	xor    edx,edx
c00038f6:	89 d8                	mov    eax,ebx
c00038f8:	e8 01 fc ff ff       	call   c00034fe <dir_next>
c00038fd:	89 c5                	mov    ebp,eax
c00038ff:	85 c0                	test   eax,eax
c0003901:	0f 84 cd fe ff ff    	je     c00037d4 <dir_read+0x1e>
c0003907:	eb 0f                	jmp    c0003918 <dir_read+0x162>
c0003909:	85 ed                	test   ebp,ebp
c000390b:	0f 84 06 ff ff ff    	je     c0003817 <dir_read+0x61>
c0003911:	eb 05                	jmp    c0003918 <dir_read+0x162>
c0003913:	bd 04 00 00 00       	mov    ebp,0x4
c0003918:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000391f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003926:	83 c4 1c             	add    esp,0x1c
c0003929:	89 e8                	mov    eax,ebp
c000392b:	5b                   	pop    ebx
c000392c:	5e                   	pop    esi
c000392d:	5f                   	pop    edi
c000392e:	5d                   	pop    ebp
c000392f:	c3                   	ret    

c0003930 <dir_alloc>:
c0003930:	55                   	push   ebp
c0003931:	89 d5                	mov    ebp,edx
c0003933:	57                   	push   edi
c0003934:	31 d2                	xor    edx,edx
c0003936:	56                   	push   esi
c0003937:	53                   	push   ebx
c0003938:	89 c3                	mov    ebx,eax
c000393a:	83 ec 0c             	sub    esp,0xc
c000393d:	8b 38                	mov    edi,DWORD PTR [eax]
c000393f:	e8 62 f6 ff ff       	call   c0002fa6 <dir_sdi>
c0003944:	85 c0                	test   eax,eax
c0003946:	75 4e                	jne    c0003996 <dir_alloc+0x66>
c0003948:	31 f6                	xor    esi,esi
c000394a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000394d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003950:	89 f8                	mov    eax,edi
c0003952:	e8 d1 e8 ff ff       	call   c0002228 <move_window>
c0003957:	85 c0                	test   eax,eax
c0003959:	75 3b                	jne    c0003996 <dir_alloc+0x66>
c000395b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000395e:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003961:	8a 12                	mov    dl,BYTE PTR [edx]
c0003963:	75 07                	jne    c000396c <dir_alloc+0x3c>
c0003965:	f7 d2                	not    edx
c0003967:	c0 ea 07             	shr    dl,0x7
c000396a:	eb 0d                	jmp    c0003979 <dir_alloc+0x49>
c000396c:	84 d2                	test   dl,dl
c000396e:	0f 94 c1             	sete   cl
c0003971:	80 fa e5             	cmp    dl,0xe5
c0003974:	0f 94 c2             	sete   dl
c0003977:	09 ca                	or     edx,ecx
c0003979:	84 d2                	test   dl,dl
c000397b:	74 07                	je     c0003984 <dir_alloc+0x54>
c000397d:	46                   	inc    esi
c000397e:	39 ee                	cmp    esi,ebp
c0003980:	75 04                	jne    c0003986 <dir_alloc+0x56>
c0003982:	eb 1c                	jmp    c00039a0 <dir_alloc+0x70>
c0003984:	31 f6                	xor    esi,esi
c0003986:	ba 01 00 00 00       	mov    edx,0x1
c000398b:	89 d8                	mov    eax,ebx
c000398d:	e8 6c fb ff ff       	call   c00034fe <dir_next>
c0003992:	85 c0                	test   eax,eax
c0003994:	74 b4                	je     c000394a <dir_alloc+0x1a>
c0003996:	83 f8 04             	cmp    eax,0x4
c0003999:	75 05                	jne    c00039a0 <dir_alloc+0x70>
c000399b:	b8 07 00 00 00       	mov    eax,0x7
c00039a0:	83 c4 0c             	add    esp,0xc
c00039a3:	5b                   	pop    ebx
c00039a4:	5e                   	pop    esi
c00039a5:	5f                   	pop    edi
c00039a6:	5d                   	pop    ebp
c00039a7:	c3                   	ret    

c00039a8 <store_xdir>:
c00039a8:	55                   	push   ebp
c00039a9:	57                   	push   edi
c00039aa:	89 c7                	mov    edi,eax
c00039ac:	56                   	push   esi
c00039ad:	53                   	push   ebx
c00039ae:	83 ec 0c             	sub    esp,0xc
c00039b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00039b3:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039b6:	89 e8                	mov    eax,ebp
c00039b8:	e8 5b e5 ff ff       	call   c0001f18 <xdir_sum>
c00039bd:	0f b7 d0             	movzx  edx,ax
c00039c0:	8d 45 02             	lea    eax,[ebp+0x2]
c00039c3:	e8 f4 e0 ff ff       	call   c0001abc <st_word>
c00039c8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039cc:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039cf:	89 f8                	mov    eax,edi
c00039d1:	e8 d0 f5 ff ff       	call   c0002fa6 <dir_sdi>
c00039d6:	89 c6                	mov    esi,eax
c00039d8:	85 f6                	test   esi,esi
c00039da:	75 3d                	jne    c0003a19 <store_xdir+0x71>
c00039dc:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039df:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039e2:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e4:	e8 3f e8 ff ff       	call   c0002228 <move_window>
c00039e9:	89 c6                	mov    esi,eax
c00039eb:	85 c0                	test   eax,eax
c00039ed:	75 2a                	jne    c0003a19 <store_xdir+0x71>
c00039ef:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039f2:	b9 20 00 00 00       	mov    ecx,0x20
c00039f7:	89 ea                	mov    edx,ebp
c00039f9:	e8 cb e0 ff ff       	call   c0001ac9 <mem_cpy>
c00039fe:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a00:	85 db                	test   ebx,ebx
c0003a02:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a06:	74 11                	je     c0003a19 <store_xdir+0x71>
c0003a08:	31 d2                	xor    edx,edx
c0003a0a:	89 f8                	mov    eax,edi
c0003a0c:	83 c5 20             	add    ebp,0x20
c0003a0f:	e8 ea fa ff ff       	call   c00034fe <dir_next>
c0003a14:	4b                   	dec    ebx
c0003a15:	89 c6                	mov    esi,eax
c0003a17:	eb bf                	jmp    c00039d8 <store_xdir+0x30>
c0003a19:	89 f0                	mov    eax,esi
c0003a1b:	83 fe 02             	cmp    esi,0x2
c0003a1e:	76 05                	jbe    c0003a25 <store_xdir+0x7d>
c0003a20:	b8 02 00 00 00       	mov    eax,0x2
c0003a25:	83 c4 0c             	add    esp,0xc
c0003a28:	5b                   	pop    ebx
c0003a29:	5e                   	pop    esi
c0003a2a:	5f                   	pop    edi
c0003a2b:	5d                   	pop    ebp
c0003a2c:	c3                   	ret    

c0003a2d <dir_remove>:
c0003a2d:	57                   	push   edi
c0003a2e:	56                   	push   esi
c0003a2f:	53                   	push   ebx
c0003a30:	89 c3                	mov    ebx,eax
c0003a32:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a35:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a37:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a3a:	83 fa ff             	cmp    edx,0xffffffff
c0003a3d:	74 09                	je     c0003a48 <dir_remove+0x1b>
c0003a3f:	e8 62 f5 ff ff       	call   c0002fa6 <dir_sdi>
c0003a44:	85 c0                	test   eax,eax
c0003a46:	75 41                	jne    c0003a89 <dir_remove+0x5c>
c0003a48:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a4b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a4e:	89 f0                	mov    eax,esi
c0003a50:	e8 d3 e7 ff ff       	call   c0002228 <move_window>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 26                	jne    c0003a7f <dir_remove+0x52>
c0003a59:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a5c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a5f:	75 05                	jne    c0003a66 <dir_remove+0x39>
c0003a61:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a64:	eb 03                	jmp    c0003a69 <dir_remove+0x3c>
c0003a66:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a6d:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a70:	73 17                	jae    c0003a89 <dir_remove+0x5c>
c0003a72:	31 d2                	xor    edx,edx
c0003a74:	89 d8                	mov    eax,ebx
c0003a76:	e8 83 fa ff ff       	call   c00034fe <dir_next>
c0003a7b:	85 c0                	test   eax,eax
c0003a7d:	74 c9                	je     c0003a48 <dir_remove+0x1b>
c0003a7f:	83 f8 04             	cmp    eax,0x4
c0003a82:	75 05                	jne    c0003a89 <dir_remove+0x5c>
c0003a84:	b8 02 00 00 00       	mov    eax,0x2
c0003a89:	5b                   	pop    ebx
c0003a8a:	5e                   	pop    esi
c0003a8b:	5f                   	pop    edi
c0003a8c:	c3                   	ret    

c0003a8d <create_name>:
c0003a8d:	55                   	push   ebp
c0003a8e:	89 d5                	mov    ebp,edx
c0003a90:	57                   	push   edi
c0003a91:	89 c7                	mov    edi,eax
c0003a93:	56                   	push   esi
c0003a94:	31 f6                	xor    esi,esi
c0003a96:	53                   	push   ebx
c0003a97:	83 ec 3c             	sub    esp,0x3c
c0003a9a:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a9c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003aa0:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aa2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003aa5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003aa9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aad:	e8 72 e0 ff ff       	call   c0001b24 <tchar2uni>
c0003ab2:	89 c3                	mov    ebx,eax
c0003ab4:	83 f8 ff             	cmp    eax,0xffffffff
c0003ab7:	75 0a                	jne    c0003ac3 <create_name+0x36>
c0003ab9:	b8 06 00 00 00       	mov    eax,0x6
c0003abe:	e9 9e 02 00 00       	jmp    c0003d61 <create_name+0x2d4>
c0003ac3:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ac8:	76 0c                	jbe    c0003ad6 <create_name+0x49>
c0003aca:	c1 e8 10             	shr    eax,0x10
c0003acd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ad1:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ad5:	46                   	inc    esi
c0003ad6:	66 83 fb 1f          	cmp    bx,0x1f
c0003ada:	76 4f                	jbe    c0003b2b <create_name+0x9e>
c0003adc:	66 83 fb 5c          	cmp    bx,0x5c
c0003ae0:	74 35                	je     c0003b17 <create_name+0x8a>
c0003ae2:	66 83 fb 2f          	cmp    bx,0x2f
c0003ae6:	74 2f                	je     c0003b17 <create_name+0x8a>
c0003ae8:	66 83 fb 7f          	cmp    bx,0x7f
c0003aec:	77 11                	ja     c0003aff <create_name+0x72>
c0003aee:	0f b7 d3             	movzx  edx,bx
c0003af1:	b8 32 82 02 c0       	mov    eax,0xc0028232
c0003af6:	e8 11 e0 ff ff       	call   c0001b0c <chk_chr>
c0003afb:	85 c0                	test   eax,eax
c0003afd:	75 ba                	jne    c0003ab9 <create_name+0x2c>
c0003aff:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b05:	77 b2                	ja     c0003ab9 <create_name+0x2c>
c0003b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b0b:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b0f:	46                   	inc    esi
c0003b10:	eb 97                	jmp    c0003aa9 <create_name+0x1c>
c0003b12:	40                   	inc    eax
c0003b13:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b17:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b1b:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b1d:	80 fa 2f             	cmp    dl,0x2f
c0003b20:	74 f0                	je     c0003b12 <create_name+0x85>
c0003b22:	80 fa 5c             	cmp    dl,0x5c
c0003b25:	74 eb                	je     c0003b12 <create_name+0x85>
c0003b27:	31 db                	xor    ebx,ebx
c0003b29:	eb 02                	jmp    c0003b2d <create_name+0xa0>
c0003b2b:	b3 04                	mov    bl,0x4
c0003b2d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b34:	85 f6                	test   esi,esi
c0003b36:	74 18                	je     c0003b50 <create_name+0xc3>
c0003b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b3c:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b41:	66 83 f8 20          	cmp    ax,0x20
c0003b45:	74 06                	je     c0003b4d <create_name+0xc0>
c0003b47:	66 83 f8 2e          	cmp    ax,0x2e
c0003b4b:	75 03                	jne    c0003b50 <create_name+0xc3>
c0003b4d:	4e                   	dec    esi
c0003b4e:	eb e4                	jmp    c0003b34 <create_name+0xa7>
c0003b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b54:	31 ed                	xor    ebp,ebp
c0003b56:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b5c:	85 f6                	test   esi,esi
c0003b5e:	0f 84 55 ff ff ff    	je     c0003ab9 <create_name+0x2c>
c0003b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b68:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b6b:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b6f:	66 83 f8 20          	cmp    ax,0x20
c0003b73:	75 04                	jne    c0003b79 <create_name+0xec>
c0003b75:	89 d5                	mov    ebp,edx
c0003b77:	eb eb                	jmp    c0003b64 <create_name+0xd7>
c0003b79:	85 ed                	test   ebp,ebp
c0003b7b:	75 06                	jne    c0003b83 <create_name+0xf6>
c0003b7d:	66 83 f8 2e          	cmp    ax,0x2e
c0003b81:	75 08                	jne    c0003b8b <create_name+0xfe>
c0003b83:	83 cb 03             	or     ebx,0x3
c0003b86:	eb 03                	jmp    c0003b8b <create_name+0xfe>
c0003b88:	4e                   	dec    esi
c0003b89:	74 0c                	je     c0003b97 <create_name+0x10a>
c0003b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8f:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b95:	75 f1                	jne    c0003b88 <create_name+0xfb>
c0003b97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b9c:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b9f:	ba 20 00 00 00       	mov    edx,0x20
c0003ba4:	e8 35 df ff ff       	call   c0001ade <mem_set>
c0003ba9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bb1:	31 c9                	xor    ecx,ecx
c0003bb3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bb8:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bbb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bc3:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bc7:	66 85 ed             	test   bp,bp
c0003bca:	0f 84 30 01 00 00    	je     c0003d00 <create_name+0x273>
c0003bd0:	66 83 fd 20          	cmp    bp,0x20
c0003bd4:	74 10                	je     c0003be6 <create_name+0x159>
c0003bd6:	66 83 fd 2e          	cmp    bp,0x2e
c0003bda:	75 13                	jne    c0003bef <create_name+0x162>
c0003bdc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be0:	0f 84 6b 01 00 00    	je     c0003d51 <create_name+0x2c4>
c0003be6:	83 cb 03             	or     ebx,0x3
c0003be9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bed:	eb c9                	jmp    c0003bb8 <create_name+0x12b>
c0003bef:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bf3:	73 0b                	jae    c0003c00 <create_name+0x173>
c0003bf5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bf9:	75 47                	jne    c0003c42 <create_name+0x1b5>
c0003bfb:	e9 51 01 00 00       	jmp    c0003d51 <create_name+0x2c4>
c0003c00:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c05:	75 10                	jne    c0003c17 <create_name+0x18a>
c0003c07:	83 cb 03             	or     ebx,0x3
c0003c0a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c12:	e9 e9 00 00 00       	jmp    c0003d00 <create_name+0x273>
c0003c17:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c1b:	74 0d                	je     c0003c2a <create_name+0x19d>
c0003c1d:	83 cb 03             	or     ebx,0x3
c0003c20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c24:	0f 87 d6 00 00 00    	ja     c0003d00 <create_name+0x273>
c0003c2a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c2f:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c33:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c3b:	b9 08 00 00 00       	mov    ecx,0x8
c0003c40:	eb a7                	jmp    c0003be9 <create_name+0x15c>
c0003c42:	66 83 fd 7f          	cmp    bp,0x7f
c0003c46:	76 68                	jbe    c0003cb0 <create_name+0x223>
c0003c48:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c4c:	88 da                	mov    dl,bl
c0003c4e:	83 ca 02             	or     edx,0x2
c0003c51:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c55:	50                   	push   eax
c0003c56:	50                   	push   eax
c0003c57:	68 b5 01 00 00       	push   0x1b5
c0003c5c:	55                   	push   ebp
c0003c5d:	e8 48 46 00 00       	call   c00082aa <ff_uni2oem>
c0003c62:	83 c4 10             	add    esp,0x10
c0003c65:	89 c5                	mov    ebp,eax
c0003c67:	a8 80                	test   al,0x80
c0003c69:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c6d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c71:	74 0c                	je     c0003c7f <create_name+0x1f2>
c0003c73:	83 e5 7f             	and    ebp,0x7f
c0003c76:	0f b6 ad 80 81 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd7e80]
c0003c7d:	eb 2a                	jmp    c0003ca9 <create_name+0x21c>
c0003c7f:	66 3d ff 00          	cmp    ax,0xff
c0003c83:	76 24                	jbe    c0003ca9 <create_name+0x21c>
c0003c85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c89:	48                   	dec    eax
c0003c8a:	39 c8                	cmp    eax,ecx
c0003c8c:	77 0c                	ja     c0003c9a <create_name+0x20d>
c0003c8e:	83 cb 03             	or     ebx,0x3
c0003c91:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c95:	e9 4f ff ff ff       	jmp    c0003be9 <create_name+0x15c>
c0003c9a:	89 e8                	mov    eax,ebp
c0003c9c:	88 d3                	mov    bl,dl
c0003c9e:	66 c1 e8 08          	shr    ax,0x8
c0003ca2:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ca6:	41                   	inc    ecx
c0003ca7:	eb 4b                	jmp    c0003cf4 <create_name+0x267>
c0003ca9:	88 d3                	mov    bl,dl
c0003cab:	66 85 ed             	test   bp,bp
c0003cae:	74 19                	je     c0003cc9 <create_name+0x23c>
c0003cb0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cb4:	0f b7 d5             	movzx  edx,bp
c0003cb7:	b8 3b 82 02 c0       	mov    eax,0xc002823b
c0003cbc:	e8 4b de ff ff       	call   c0001b0c <chk_chr>
c0003cc1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cc5:	85 c0                	test   eax,eax
c0003cc7:	74 0a                	je     c0003cd3 <create_name+0x246>
c0003cc9:	83 cb 03             	or     ebx,0x3
c0003ccc:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cd1:	eb 21                	jmp    c0003cf4 <create_name+0x267>
c0003cd3:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cd6:	66 83 f8 19          	cmp    ax,0x19
c0003cda:	77 07                	ja     c0003ce3 <create_name+0x256>
c0003cdc:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ce1:	eb 11                	jmp    c0003cf4 <create_name+0x267>
c0003ce3:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ce6:	66 83 f8 19          	cmp    ax,0x19
c0003cea:	77 08                	ja     c0003cf4 <create_name+0x267>
c0003cec:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cf1:	83 ed 20             	sub    ebp,0x20
c0003cf4:	89 e8                	mov    eax,ebp
c0003cf6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cfa:	41                   	inc    ecx
c0003cfb:	e9 e9 fe ff ff       	jmp    c0003be9 <create_name+0x15c>
c0003d00:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d04:	75 04                	jne    c0003d0a <create_name+0x27d>
c0003d06:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d0a:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d0f:	75 05                	jne    c0003d16 <create_name+0x289>
c0003d11:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d16:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d1a:	83 e0 0c             	and    eax,0xc
c0003d1d:	3c 0c                	cmp    al,0xc
c0003d1f:	74 0b                	je     c0003d2c <create_name+0x29f>
c0003d21:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d25:	83 e0 03             	and    eax,0x3
c0003d28:	3c 03                	cmp    al,0x3
c0003d2a:	75 05                	jne    c0003d31 <create_name+0x2a4>
c0003d2c:	83 cb 02             	or     ebx,0x2
c0003d2f:	eb 19                	jmp    c0003d4a <create_name+0x2bd>
c0003d31:	f6 c3 02             	test   bl,0x2
c0003d34:	75 14                	jne    c0003d4a <create_name+0x2bd>
c0003d36:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d3b:	74 03                	je     c0003d40 <create_name+0x2b3>
c0003d3d:	83 cb 10             	or     ebx,0x10
c0003d40:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d45:	74 03                	je     c0003d4a <create_name+0x2bd>
c0003d47:	83 cb 08             	or     ebx,0x8
c0003d4a:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d4d:	31 c0                	xor    eax,eax
c0003d4f:	eb 10                	jmp    c0003d61 <create_name+0x2d4>
c0003d51:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d56:	0f 85 ce fe ff ff    	jne    c0003c2a <create_name+0x19d>
c0003d5c:	e9 a6 fe ff ff       	jmp    c0003c07 <create_name+0x17a>
c0003d61:	83 c4 3c             	add    esp,0x3c
c0003d64:	5b                   	pop    ebx
c0003d65:	5e                   	pop    esi
c0003d66:	5f                   	pop    edi
c0003d67:	5d                   	pop    ebp
c0003d68:	c3                   	ret    

c0003d69 <xname_sum>:
c0003d69:	56                   	push   esi
c0003d6a:	53                   	push   ebx
c0003d6b:	89 c6                	mov    esi,eax
c0003d6d:	51                   	push   ecx
c0003d6e:	31 db                	xor    ebx,ebx
c0003d70:	83 c6 02             	add    esi,0x2
c0003d73:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d77:	66 85 c0             	test   ax,ax
c0003d7a:	74 1f                	je     c0003d9b <xname_sum+0x32>
c0003d7c:	83 ec 0c             	sub    esp,0xc
c0003d7f:	66 d1 cb             	ror    bx,1
c0003d82:	50                   	push   eax
c0003d83:	e8 1e 46 00 00       	call   c00083a6 <ff_wtoupper>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	0f b6 d0             	movzx  edx,al
c0003d8e:	66 c1 e8 08          	shr    ax,0x8
c0003d92:	01 d3                	add    ebx,edx
c0003d94:	66 d1 cb             	ror    bx,1
c0003d97:	01 c3                	add    ebx,eax
c0003d99:	eb d5                	jmp    c0003d70 <xname_sum+0x7>
c0003d9b:	89 d8                	mov    eax,ebx
c0003d9d:	5a                   	pop    edx
c0003d9e:	5b                   	pop    ebx
c0003d9f:	5e                   	pop    esi
c0003da0:	c3                   	ret    

c0003da1 <create_xdir>:
c0003da1:	55                   	push   ebp
c0003da2:	b9 40 00 00 00       	mov    ecx,0x40
c0003da7:	57                   	push   edi
c0003da8:	bd 01 00 00 00       	mov    ebp,0x1
c0003dad:	56                   	push   esi
c0003dae:	31 ff                	xor    edi,edi
c0003db0:	53                   	push   ebx
c0003db1:	be 40 00 00 00       	mov    esi,0x40
c0003db6:	89 c3                	mov    ebx,eax
c0003db8:	83 ec 1c             	sub    esp,0x1c
c0003dbb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003dbf:	31 d2                	xor    edx,edx
c0003dc1:	e8 18 dd ff ff       	call   c0001ade <mem_set>
c0003dc6:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dc9:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dcd:	31 c9                	xor    ecx,ecx
c0003dcf:	8d 46 01             	lea    eax,[esi+0x1]
c0003dd2:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dd6:	83 c6 02             	add    esi,0x2
c0003dd9:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ddd:	66 85 ed             	test   bp,bp
c0003de0:	74 12                	je     c0003df4 <create_xdir+0x53>
c0003de2:	0f b6 c1             	movzx  eax,cl
c0003de5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003de9:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003ded:	66 83 fd 01          	cmp    bp,0x1
c0003df1:	80 d9 ff             	sbb    cl,0xff
c0003df4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003df7:	0f b7 d5             	movzx  edx,bp
c0003dfa:	83 c6 02             	add    esi,0x2
c0003dfd:	e8 ba dc ff ff       	call   c0001abc <st_word>
c0003e02:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e08:	75 d3                	jne    c0003ddd <create_xdir+0x3c>
c0003e0a:	8d 47 01             	lea    eax,[edi+0x1]
c0003e0d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e11:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e15:	0f b6 c1             	movzx  eax,cl
c0003e18:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e1d:	74 07                	je     c0003e26 <create_xdir+0x85>
c0003e1f:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e24:	eb a9                	jmp    c0003dcf <create_xdir+0x2e>
c0003e26:	8d 47 02             	lea    eax,[edi+0x2]
c0003e29:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e2c:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e2f:	89 d0                	mov    eax,edx
c0003e31:	e8 33 ff ff ff       	call   c0003d69 <xname_sum>
c0003e36:	83 c4 1c             	add    esp,0x1c
c0003e39:	0f b7 d0             	movzx  edx,ax
c0003e3c:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e3f:	5b                   	pop    ebx
c0003e40:	5e                   	pop    esi
c0003e41:	5f                   	pop    edi
c0003e42:	5d                   	pop    ebp
c0003e43:	e9 74 dc ff ff       	jmp    c0001abc <st_word>

c0003e48 <cmp_lfn>:
c0003e48:	55                   	push   ebp
c0003e49:	57                   	push   edi
c0003e4a:	89 d7                	mov    edi,edx
c0003e4c:	56                   	push   esi
c0003e4d:	53                   	push   ebx
c0003e4e:	83 ec 1c             	sub    esp,0x1c
c0003e51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e55:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e58:	e8 ed db ff ff       	call   c0001a4a <ld_word>
c0003e5d:	66 85 c0             	test   ax,ax
c0003e60:	74 07                	je     c0003e69 <cmp_lfn+0x21>
c0003e62:	31 c0                	xor    eax,eax
c0003e64:	e9 9a 00 00 00       	jmp    c0003f03 <cmp_lfn+0xbb>
c0003e69:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e6b:	bd 01 00 00 00       	mov    ebp,0x1
c0003e70:	83 e3 3f             	and    ebx,0x3f
c0003e73:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e7b:	4b                   	dec    ebx
c0003e7c:	6b db 0d             	imul   ebx,ebx,0xd
c0003e7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e83:	0f b6 80 00 82 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7e00]
c0003e8a:	01 f8                	add    eax,edi
c0003e8c:	e8 b9 db ff ff       	call   c0001a4a <ld_word>
c0003e91:	66 85 ed             	test   bp,bp
c0003e94:	89 c6                	mov    esi,eax
c0003e96:	74 3c                	je     c0003ed4 <cmp_lfn+0x8c>
c0003e98:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e9e:	77 c2                	ja     c0003e62 <cmp_lfn+0x1a>
c0003ea0:	83 ec 0c             	sub    esp,0xc
c0003ea3:	0f b7 c0             	movzx  eax,ax
c0003ea6:	50                   	push   eax
c0003ea7:	e8 fa 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003eac:	89 c5                	mov    ebp,eax
c0003eae:	8d 43 01             	lea    eax,[ebx+0x1]
c0003eb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003eb5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003eb9:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003ebd:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ec0:	e8 e1 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003ec5:	83 c4 10             	add    esp,0x10
c0003ec8:	39 c5                	cmp    ebp,eax
c0003eca:	75 96                	jne    c0003e62 <cmp_lfn+0x1a>
c0003ecc:	89 f5                	mov    ebp,esi
c0003ece:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ed2:	eb 04                	jmp    c0003ed8 <cmp_lfn+0x90>
c0003ed4:	66 46                	inc    si
c0003ed6:	75 8a                	jne    c0003e62 <cmp_lfn+0x1a>
c0003ed8:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003edc:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ee1:	75 9c                	jne    c0003e7f <cmp_lfn+0x37>
c0003ee3:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ee6:	74 16                	je     c0003efe <cmp_lfn+0xb6>
c0003ee8:	66 85 ed             	test   bp,bp
c0003eeb:	74 11                	je     c0003efe <cmp_lfn+0xb6>
c0003eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ef1:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ef6:	0f 94 c0             	sete   al
c0003ef9:	0f b6 c0             	movzx  eax,al
c0003efc:	eb 05                	jmp    c0003f03 <cmp_lfn+0xbb>
c0003efe:	b8 01 00 00 00       	mov    eax,0x1
c0003f03:	83 c4 1c             	add    esp,0x1c
c0003f06:	5b                   	pop    ebx
c0003f07:	5e                   	pop    esi
c0003f08:	5f                   	pop    edi
c0003f09:	5d                   	pop    ebp
c0003f0a:	c3                   	ret    

c0003f0b <dir_find>:
c0003f0b:	55                   	push   ebp
c0003f0c:	31 d2                	xor    edx,edx
c0003f0e:	57                   	push   edi
c0003f0f:	56                   	push   esi
c0003f10:	53                   	push   ebx
c0003f11:	89 c3                	mov    ebx,eax
c0003f13:	83 ec 1c             	sub    esp,0x1c
c0003f16:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f18:	e8 89 f0 ff ff       	call   c0002fa6 <dir_sdi>
c0003f1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 9e 01 00 00    	jne    c00040c6 <dir_find+0x1bb>
c0003f28:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f2b:	0f 85 8d 00 00 00    	jne    c0003fbe <dir_find+0xb3>
c0003f31:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f34:	e8 30 fe ff ff       	call   c0003d69 <xname_sum>
c0003f39:	89 c7                	mov    edi,eax
c0003f3b:	31 d2                	xor    edx,edx
c0003f3d:	89 d8                	mov    eax,ebx
c0003f3f:	e8 72 f8 ff ff       	call   c00037b6 <dir_read>
c0003f44:	85 c0                	test   eax,eax
c0003f46:	0f 85 5e 01 00 00    	jne    c00040aa <dir_find+0x19f>
c0003f4c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f4f:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f52:	e8 f3 da ff ff       	call   c0001a4a <ld_word>
c0003f57:	66 39 f8             	cmp    ax,di
c0003f5a:	75 df                	jne    c0003f3b <dir_find+0x30>
c0003f5c:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f5f:	31 ed                	xor    ebp,ebp
c0003f61:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f65:	ba 40 00 00 00       	mov    edx,0x40
c0003f6a:	89 e9                	mov    ecx,ebp
c0003f6c:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f70:	0f 84 42 01 00 00    	je     c00040b8 <dir_find+0x1ad>
c0003f76:	f6 c2 1f             	test   dl,0x1f
c0003f79:	75 03                	jne    c0003f7e <dir_find+0x73>
c0003f7b:	83 c2 02             	add    edx,0x2
c0003f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f82:	89 d0                	mov    eax,edx
c0003f84:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f87:	e8 be da ff ff       	call   c0001a4a <ld_word>
c0003f8c:	83 ec 0c             	sub    esp,0xc
c0003f8f:	0f b7 c0             	movzx  eax,ax
c0003f92:	50                   	push   eax
c0003f93:	e8 0e 44 00 00       	call   c00083a6 <ff_wtoupper>
c0003f98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f9c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f9f:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fa3:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fa6:	e8 fb 43 00 00       	call   c00083a6 <ff_wtoupper>
c0003fab:	83 c4 10             	add    esp,0x10
c0003fae:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fb2:	75 87                	jne    c0003f3b <dir_find+0x30>
c0003fb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fb8:	45                   	inc    ebp
c0003fb9:	83 c2 02             	add    edx,0x2
c0003fbc:	eb ac                	jmp    c0003f6a <dir_find+0x5f>
c0003fbe:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fc5:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fca:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fcf:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fd2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fd5:	89 f0                	mov    eax,esi
c0003fd7:	e8 4c e2 ff ff       	call   c0002228 <move_window>
c0003fdc:	85 c0                	test   eax,eax
c0003fde:	0f 85 c6 00 00 00    	jne    c00040aa <dir_find+0x19f>
c0003fe4:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fe7:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fea:	84 c9                	test   cl,cl
c0003fec:	0f 84 bd 00 00 00    	je     c00040af <dir_find+0x1a4>
c0003ff2:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ff5:	88 d0                	mov    al,dl
c0003ff7:	83 e0 3f             	and    eax,0x3f
c0003ffa:	80 f9 e5             	cmp    cl,0xe5
c0003ffd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004000:	0f 84 87 00 00 00    	je     c000408d <dir_find+0x182>
c0004006:	80 e2 08             	and    dl,0x8
c0004009:	74 06                	je     c0004011 <dir_find+0x106>
c000400b:	3c 0f                	cmp    al,0xf
c000400d:	75 7e                	jne    c000408d <dir_find+0x182>
c000400f:	eb 04                	jmp    c0004015 <dir_find+0x10a>
c0004011:	3c 0f                	cmp    al,0xf
c0004013:	75 4c                	jne    c0004061 <dir_find+0x156>
c0004015:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004019:	75 7e                	jne    c0004099 <dir_find+0x18e>
c000401b:	f6 c1 40             	test   cl,0x40
c000401e:	74 12                	je     c0004032 <dir_find+0x127>
c0004020:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004023:	83 e1 bf             	and    ecx,0xffffffbf
c0004026:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000402a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000402d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004030:	eb 06                	jmp    c0004038 <dir_find+0x12d>
c0004032:	89 f8                	mov    eax,edi
c0004034:	38 c8                	cmp    al,cl
c0004036:	75 5c                	jne    c0004094 <dir_find+0x189>
c0004038:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000403c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004041:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004044:	75 53                	jne    c0004099 <dir_find+0x18e>
c0004046:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000404a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000404d:	89 ea                	mov    edx,ebp
c000404f:	e8 f4 fd ff ff       	call   c0003e48 <cmp_lfn>
c0004054:	85 c0                	test   eax,eax
c0004056:	74 41                	je     c0004099 <dir_find+0x18e>
c0004058:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000405c:	8d 79 ff             	lea    edi,[ecx-0x1]
c000405f:	eb 38                	jmp    c0004099 <dir_find+0x18e>
c0004061:	89 f8                	mov    eax,edi
c0004063:	84 c0                	test   al,al
c0004065:	75 0d                	jne    c0004074 <dir_find+0x169>
c0004067:	89 e8                	mov    eax,ebp
c0004069:	e8 98 de ff ff       	call   c0001f06 <sum_sfn>
c000406e:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004072:	74 52                	je     c00040c6 <dir_find+0x1bb>
c0004074:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004078:	75 13                	jne    c000408d <dir_find+0x182>
c000407a:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000407d:	b9 0b 00 00 00       	mov    ecx,0xb
c0004082:	89 e8                	mov    eax,ebp
c0004084:	e8 60 da ff ff       	call   c0001ae9 <mem_cmp>
c0004089:	85 c0                	test   eax,eax
c000408b:	74 39                	je     c00040c6 <dir_find+0x1bb>
c000408d:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004094:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004099:	31 d2                	xor    edx,edx
c000409b:	89 d8                	mov    eax,ebx
c000409d:	e8 5c f4 ff ff       	call   c00034fe <dir_next>
c00040a2:	85 c0                	test   eax,eax
c00040a4:	0f 84 25 ff ff ff    	je     c0003fcf <dir_find+0xc4>
c00040aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040ad:	eb 17                	jmp    c00040c6 <dir_find+0x1bb>
c00040af:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040b6:	eb 0e                	jmp    c00040c6 <dir_find+0x1bb>
c00040b8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040bb:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040c0:	0f 85 75 fe ff ff    	jne    c0003f3b <dir_find+0x30>
c00040c6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040c9:	83 c4 1c             	add    esp,0x1c
c00040cc:	5b                   	pop    ebx
c00040cd:	5e                   	pop    esi
c00040ce:	5f                   	pop    edi
c00040cf:	5d                   	pop    ebp
c00040d0:	c3                   	ret    

c00040d1 <dir_register>:
c00040d1:	55                   	push   ebp
c00040d2:	57                   	push   edi
c00040d3:	56                   	push   esi
c00040d4:	be 06 00 00 00       	mov    esi,0x6
c00040d9:	53                   	push   ebx
c00040da:	83 ec 6c             	sub    esp,0x6c
c00040dd:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040e1:	0f 85 62 02 00 00    	jne    c0004349 <dir_register+0x278>
c00040e7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040e9:	31 ff                	xor    edi,edi
c00040eb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040ee:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040f3:	74 03                	je     c00040f8 <dir_register+0x27>
c00040f5:	47                   	inc    edi
c00040f6:	eb f6                	jmp    c00040ee <dir_register+0x1d>
c00040f8:	89 c3                	mov    ebx,eax
c00040fa:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040fe:	0f 85 e1 00 00 00    	jne    c00041e5 <dir_register+0x114>
c0004104:	83 c7 0e             	add    edi,0xe
c0004107:	b9 0f 00 00 00       	mov    ecx,0xf
c000410c:	89 f8                	mov    eax,edi
c000410e:	31 d2                	xor    edx,edx
c0004110:	f7 f1                	div    ecx
c0004112:	8d 50 02             	lea    edx,[eax+0x2]
c0004115:	89 c7                	mov    edi,eax
c0004117:	89 d8                	mov    eax,ebx
c0004119:	e8 12 f8 ff ff       	call   c0003930 <dir_alloc>
c000411e:	89 c6                	mov    esi,eax
c0004120:	85 c0                	test   eax,eax
c0004122:	0f 85 21 02 00 00    	jne    c0004349 <dir_register+0x278>
c0004128:	81 c7 01 00 00 08    	add    edi,0x8000001
c000412e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004131:	c1 e7 05             	shl    edi,0x5
c0004134:	29 f8                	sub    eax,edi
c0004136:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004139:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000413c:	a8 04                	test   al,0x4
c000413e:	0f 84 91 00 00 00    	je     c00041d5 <dir_register+0x104>
c0004144:	83 e0 fb             	and    eax,0xfffffffb
c0004147:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000414a:	89 d8                	mov    eax,ebx
c000414c:	e8 25 ec ff ff       	call   c0002d76 <fill_first_frag>
c0004151:	85 c0                	test   eax,eax
c0004153:	0f 85 ee 01 00 00    	jne    c0004347 <dir_register+0x276>
c0004159:	83 c9 ff             	or     ecx,0xffffffff
c000415c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000415f:	89 d8                	mov    eax,ebx
c0004161:	e8 db eb ff ff       	call   c0002d41 <fill_last_frag>
c0004166:	85 c0                	test   eax,eax
c0004168:	0f 85 d9 01 00 00    	jne    c0004347 <dir_register+0x276>
c000416e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004172:	74 61                	je     c00041d5 <dir_register+0x104>
c0004174:	89 da                	mov    edx,ebx
c0004176:	8d 44 24 14          	lea    eax,[esp+0x14]
c000417a:	e8 ea f5 ff ff       	call   c0003769 <load_obj_xdir>
c000417f:	85 c0                	test   eax,eax
c0004181:	0f 85 c0 01 00 00    	jne    c0004347 <dir_register+0x276>
c0004187:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000418b:	31 c9                	xor    ecx,ecx
c000418d:	c1 e2 09             	shl    edx,0x9
c0004190:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004193:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004196:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004199:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000419c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000419f:	83 c0 38             	add    eax,0x38
c00041a2:	e8 1c d9 ff ff       	call   c0001ac3 <st_qword>
c00041a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041aa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041ad:	83 c0 28             	add    eax,0x28
c00041b0:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041b3:	e8 0b d9 ff ff       	call   c0001ac3 <st_qword>
c00041b8:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041bb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041be:	83 c8 01             	or     eax,0x1
c00041c1:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041c8:	e8 db f7 ff ff       	call   c00039a8 <store_xdir>
c00041cd:	85 c0                	test   eax,eax
c00041cf:	0f 85 72 01 00 00    	jne    c0004347 <dir_register+0x276>
c00041d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041d8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041db:	e8 c1 fb ff ff       	call   c0003da1 <create_xdir>
c00041e0:	e9 64 01 00 00       	jmp    c0004349 <dir_register+0x278>
c00041e5:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041e8:	b9 0c 00 00 00       	mov    ecx,0xc
c00041ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041f1:	89 c2                	mov    edx,eax
c00041f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041f7:	e8 cd d8 ff ff       	call   c0001ac9 <mem_cpy>
c00041fc:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004201:	74 58                	je     c000425b <dir_register+0x18a>
c0004203:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004207:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000420f:	83 ec 0c             	sub    esp,0xc
c0004212:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004215:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004219:	8d 54 24 24          	lea    edx,[esp+0x24]
c000421d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004221:	e8 24 dc ff ff       	call   c0001e4a <gen_numname>
c0004226:	89 d8                	mov    eax,ebx
c0004228:	e8 de fc ff ff       	call   c0003f0b <dir_find>
c000422d:	83 c4 10             	add    esp,0x10
c0004230:	89 c6                	mov    esi,eax
c0004232:	85 c0                	test   eax,eax
c0004234:	75 15                	jne    c000424b <dir_register+0x17a>
c0004236:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000423a:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000423f:	75 ce                	jne    c000420f <dir_register+0x13e>
c0004241:	be 07 00 00 00       	mov    esi,0x7
c0004246:	e9 fe 00 00 00       	jmp    c0004349 <dir_register+0x278>
c000424b:	83 f8 04             	cmp    eax,0x4
c000424e:	0f 85 f5 00 00 00    	jne    c0004349 <dir_register+0x278>
c0004254:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004258:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000425b:	b9 01 00 00 00       	mov    ecx,0x1
c0004260:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004265:	74 0f                	je     c0004276 <dir_register+0x1a5>
c0004267:	b9 0d 00 00 00       	mov    ecx,0xd
c000426c:	8d 47 0c             	lea    eax,[edi+0xc]
c000426f:	31 d2                	xor    edx,edx
c0004271:	f7 f1                	div    ecx
c0004273:	8d 48 01             	lea    ecx,[eax+0x1]
c0004276:	89 ca                	mov    edx,ecx
c0004278:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000427c:	89 d8                	mov    eax,ebx
c000427e:	e8 ad f6 ff ff       	call   c0003930 <dir_alloc>
c0004283:	89 c6                	mov    esi,eax
c0004285:	85 c0                	test   eax,eax
c0004287:	0f 85 bc 00 00 00    	jne    c0004349 <dir_register+0x278>
c000428d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004291:	49                   	dec    ecx
c0004292:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004296:	74 6a                	je     c0004302 <dir_register+0x231>
c0004298:	89 c8                	mov    eax,ecx
c000429a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000429d:	c1 e0 05             	shl    eax,0x5
c00042a0:	29 c2                	sub    edx,eax
c00042a2:	89 d8                	mov    eax,ebx
c00042a4:	e8 fd ec ff ff       	call   c0002fa6 <dir_sdi>
c00042a9:	89 c6                	mov    esi,eax
c00042ab:	85 c0                	test   eax,eax
c00042ad:	0f 85 96 00 00 00    	jne    c0004349 <dir_register+0x278>
c00042b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042b7:	e8 4a dc ff ff       	call   c0001f06 <sum_sfn>
c00042bc:	0f b6 f8             	movzx  edi,al
c00042bf:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042c2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042c5:	89 e8                	mov    eax,ebp
c00042c7:	e8 5c df ff ff       	call   c0002228 <move_window>
c00042cc:	89 c6                	mov    esi,eax
c00042ce:	85 c0                	test   eax,eax
c00042d0:	75 77                	jne    c0004349 <dir_register+0x278>
c00042d2:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042d7:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042da:	83 ec 0c             	sub    esp,0xc
c00042dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042e0:	57                   	push   edi
c00042e1:	e8 e0 da ff ff       	call   c0001dc6 <put_lfn>
c00042e6:	31 d2                	xor    edx,edx
c00042e8:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042ec:	89 d8                	mov    eax,ebx
c00042ee:	e8 0b f2 ff ff       	call   c00034fe <dir_next>
c00042f3:	83 c4 10             	add    esp,0x10
c00042f6:	89 c6                	mov    esi,eax
c00042f8:	85 c0                	test   eax,eax
c00042fa:	75 4d                	jne    c0004349 <dir_register+0x278>
c00042fc:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004300:	75 bd                	jne    c00042bf <dir_register+0x1ee>
c0004302:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004305:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004308:	89 e8                	mov    eax,ebp
c000430a:	e8 19 df ff ff       	call   c0002228 <move_window>
c000430f:	89 c6                	mov    esi,eax
c0004311:	85 c0                	test   eax,eax
c0004313:	75 34                	jne    c0004349 <dir_register+0x278>
c0004315:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004318:	b9 20 00 00 00       	mov    ecx,0x20
c000431d:	31 d2                	xor    edx,edx
c000431f:	e8 ba d7 ff ff       	call   c0001ade <mem_set>
c0004324:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004327:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000432b:	b9 0b 00 00 00       	mov    ecx,0xb
c0004330:	e8 94 d7 ff ff       	call   c0001ac9 <mem_cpy>
c0004335:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004338:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000433b:	83 e0 18             	and    eax,0x18
c000433e:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004341:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004345:	eb 02                	jmp    c0004349 <dir_register+0x278>
c0004347:	89 c6                	mov    esi,eax
c0004349:	83 c4 6c             	add    esp,0x6c
c000434c:	89 f0                	mov    eax,esi
c000434e:	5b                   	pop    ebx
c000434f:	5e                   	pop    esi
c0004350:	5f                   	pop    edi
c0004351:	5d                   	pop    ebp
c0004352:	c3                   	ret    

c0004353 <sync_fs>:
c0004353:	56                   	push   esi
c0004354:	53                   	push   ebx
c0004355:	53                   	push   ebx
c0004356:	89 c3                	mov    ebx,eax
c0004358:	e8 37 de ff ff       	call   c0002194 <sync_window>
c000435d:	85 c0                	test   eax,eax
c000435f:	0f 85 b1 00 00 00    	jne    c0004416 <sync_fs+0xc3>
c0004365:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004368:	0f 85 8e 00 00 00    	jne    c00043fc <sync_fs+0xa9>
c000436e:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004372:	0f 85 84 00 00 00    	jne    c00043fc <sync_fs+0xa9>
c0004378:	b9 00 02 00 00       	mov    ecx,0x200
c000437d:	8d 73 54             	lea    esi,[ebx+0x54]
c0004380:	31 d2                	xor    edx,edx
c0004382:	89 f0                	mov    eax,esi
c0004384:	e8 55 d7 ff ff       	call   c0001ade <mem_set>
c0004389:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000438f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004394:	e8 23 d7 ff ff       	call   c0001abc <st_word>
c0004399:	ba 52 52 61 41       	mov    edx,0x41615252
c000439e:	89 f0                	mov    eax,esi
c00043a0:	e8 1b d7 ff ff       	call   c0001ac0 <st_dword>
c00043a5:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043ab:	ba 72 72 41 61       	mov    edx,0x61417272
c00043b0:	e8 0b d7 ff ff       	call   c0001ac0 <st_dword>
c00043b5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043b8:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043be:	e8 fd d6 ff ff       	call   c0001ac0 <st_dword>
c00043c3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043c6:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043cc:	e8 ef d6 ff ff       	call   c0001ac0 <st_dword>
c00043d1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043d4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043d7:	83 c0 01             	add    eax,0x1
c00043da:	83 d2 00             	adc    edx,0x0
c00043dd:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043e0:	83 ec 0c             	sub    esp,0xc
c00043e3:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043e6:	6a 01                	push   0x1
c00043e8:	52                   	push   edx
c00043e9:	50                   	push   eax
c00043ea:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043ee:	56                   	push   esi
c00043ef:	50                   	push   eax
c00043f0:	e8 20 d6 ff ff       	call   c0001a15 <disk_write>
c00043f5:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043f9:	83 c4 20             	add    esp,0x20
c00043fc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004400:	51                   	push   ecx
c0004401:	6a 00                	push   0x0
c0004403:	6a 00                	push   0x0
c0004405:	50                   	push   eax
c0004406:	e8 20 d6 ff ff       	call   c0001a2b <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	0f 95 c0             	setne  al
c0004413:	0f b6 c0             	movzx  eax,al
c0004416:	5a                   	pop    edx
c0004417:	5b                   	pop    ebx
c0004418:	5e                   	pop    esi
c0004419:	c3                   	ret    

c000441a <create_partition>:
c000441a:	55                   	push   ebp
c000441b:	0f b6 c0             	movzx  eax,al
c000441e:	57                   	push   edi
c000441f:	56                   	push   esi
c0004420:	53                   	push   ebx
c0004421:	83 ec 60             	sub    esp,0x60
c0004424:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004428:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000442c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004430:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004434:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004438:	50                   	push   eax
c0004439:	6a 01                	push   0x1
c000443b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000443f:	e8 e7 d5 ff ff       	call   c0001a2b <disk_ioctl>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	85 c0                	test   eax,eax
c0004449:	74 0a                	je     c0004455 <create_partition+0x3b>
c000444b:	b8 01 00 00 00       	mov    eax,0x1
c0004450:	e9 67 05 00 00       	jmp    c00049bc <create_partition+0x5a2>
c0004455:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004459:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000445d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004461:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004465:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000446a:	0f 86 ed 03 00 00    	jbe    c000485d <create_partition+0x443>
c0004470:	83 c0 df             	add    eax,0xffffffdf
c0004473:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000447b:	83 d2 ff             	adc    edx,0xffffffff
c000447e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004482:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004486:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000448a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000448e:	83 c0 bd             	add    eax,0xffffffbd
c0004491:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004498:	83 d2 ff             	adc    edx,0xffffffff
c000449b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000449f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044a3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044ab:	be 22 00 00 00       	mov    esi,0x22
c00044b0:	31 ff                	xor    edi,edi
c00044b2:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044ba:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044c2:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044ca:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044ce:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044d4:	75 0e                	jne    c00044e4 <create_partition+0xca>
c00044d6:	b9 00 02 00 00       	mov    ecx,0x200
c00044db:	31 d2                	xor    edx,edx
c00044dd:	89 d8                	mov    eax,ebx
c00044df:	e8 fa d5 ff ff       	call   c0001ade <mem_set>
c00044e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044e8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044f0:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044f3:	0f 84 23 01 00 00    	je     c000461c <create_partition+0x202>
c00044f9:	89 f0                	mov    eax,esi
c00044fb:	89 fa                	mov    edx,edi
c00044fd:	05 ff 07 00 00       	add    eax,0x7ff
c0004502:	83 d2 00             	adc    edx,0x0
c0004505:	89 c1                	mov    ecx,eax
c0004507:	89 d7                	mov    edi,edx
c0004509:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000450f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004513:	89 ce                	mov    esi,ecx
c0004515:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004519:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000451d:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004521:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004524:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004528:	89 04 24             	mov    DWORD PTR [esp],eax
c000452b:	b8 64 00 00 00       	mov    eax,0x64
c0004530:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004533:	b8 00 00 00 00       	mov    eax,0x0
c0004538:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000453c:	72 41                	jb     c000457f <create_partition+0x165>
c000453e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004546:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000454a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000454f:	01 c1                	add    ecx,eax
c0004551:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004555:	f7 24 24             	mul    DWORD PTR [esp]
c0004558:	6a 00                	push   0x0
c000455a:	01 ca                	add    edx,ecx
c000455c:	6a 64                	push   0x64
c000455e:	52                   	push   edx
c000455f:	50                   	push   eax
c0004560:	e8 67 12 02 00       	call   c00257cc <__udivdi3>
c0004565:	83 c4 10             	add    esp,0x10
c0004568:	05 ff 07 00 00       	add    eax,0x7ff
c000456d:	83 d2 00             	adc    edx,0x0
c0004570:	89 c1                	mov    ecx,eax
c0004572:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004576:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000457c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000457f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004582:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004586:	01 f0                	add    eax,esi
c0004588:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000458c:	11 fa                	adc    edx,edi
c000458e:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004592:	19 d1                	sbb    ecx,edx
c0004594:	73 2e                	jae    c00045c4 <create_partition+0x1aa>
c0004596:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000459a:	89 f8                	mov    eax,edi
c000459c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045a3:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045af:	73 6b                	jae    c000461c <create_partition+0x202>
c00045b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045b9:	29 f0                	sub    eax,esi
c00045bb:	19 fa                	sbb    edx,edi
c00045bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00045c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045c8:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045cb:	74 4f                	je     c000461c <create_partition+0x202>
c00045cd:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045d0:	b9 10 00 00 00       	mov    ecx,0x10
c00045d5:	ba 10 82 02 c0       	mov    edx,0xc0028210
c00045da:	e8 ea d4 ff ff       	call   c0001ac9 <mem_cpy>
c00045df:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045e3:	b9 10 00 00 00       	mov    ecx,0x10
c00045e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045ec:	e8 2c db ff ff       	call   c000211d <make_rand>
c00045f1:	89 f2                	mov    edx,esi
c00045f3:	89 f9                	mov    ecx,edi
c00045f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045f9:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045fd:	e8 c1 d4 ff ff       	call   c0001ac3 <st_qword>
c0004602:	03 34 24             	add    esi,DWORD PTR [esp]
c0004605:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004609:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000460d:	89 f2                	mov    edx,esi
c000460f:	89 f9                	mov    ecx,edi
c0004611:	83 c2 ff             	add    edx,0xffffffff
c0004614:	83 d1 ff             	adc    ecx,0xffffffff
c0004617:	e8 a7 d4 ff ff       	call   c0001ac3 <st_qword>
c000461c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004620:	83 e8 80             	sub    eax,0xffffff80
c0004623:	89 c5                	mov    ebp,eax
c0004625:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004629:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000462f:	75 6b                	jne    c000469c <create_partition+0x282>
c0004631:	45                   	inc    ebp
c0004632:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004636:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000463b:	e8 39 da ff ff       	call   c0002079 <crc32>
c0004640:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004646:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000464a:	75 e5                	jne    c0004631 <create_partition+0x217>
c000464c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004650:	31 d2                	xor    edx,edx
c0004652:	83 ec 0c             	sub    esp,0xc
c0004655:	c1 ed 09             	shr    ebp,0x9
c0004658:	6a 01                	push   0x1
c000465a:	8d 45 02             	lea    eax,[ebp+0x2]
c000465d:	52                   	push   edx
c000465e:	50                   	push   eax
c000465f:	53                   	push   ebx
c0004660:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004664:	e8 ac d3 ff ff       	call   c0001a15 <disk_write>
c0004669:	83 c4 20             	add    esp,0x20
c000466c:	85 c0                	test   eax,eax
c000466e:	0f 85 d7 fd ff ff    	jne    c000444b <create_partition+0x31>
c0004674:	83 ec 0c             	sub    esp,0xc
c0004677:	31 d2                	xor    edx,edx
c0004679:	6a 01                	push   0x1
c000467b:	89 e8                	mov    eax,ebp
c000467d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004681:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004685:	52                   	push   edx
c0004686:	50                   	push   eax
c0004687:	53                   	push   ebx
c0004688:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000468c:	e8 84 d3 ff ff       	call   c0001a15 <disk_write>
c0004691:	83 c4 20             	add    esp,0x20
c0004694:	85 c0                	test   eax,eax
c0004696:	0f 85 af fd ff ff    	jne    c000444b <create_partition+0x31>
c000469c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046a4:	3d 00 40 00 00       	cmp    eax,0x4000
c00046a9:	74 0d                	je     c00046b8 <create_partition+0x29e>
c00046ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046b3:	e9 12 fe ff ff       	jmp    c00044ca <create_partition+0xb0>
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	b9 00 02 00 00       	mov    ecx,0x200
c00046bf:	89 d8                	mov    eax,ebx
c00046c1:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046c4:	e8 15 d4 ff ff       	call   c0001ade <mem_set>
c00046c9:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046cc:	b9 10 00 00 00       	mov    ecx,0x10
c00046d1:	ba 00 81 02 c0       	mov    edx,0xc0028100
c00046d6:	89 d8                	mov    eax,ebx
c00046d8:	e8 ec d3 ff ff       	call   c0001ac9 <mem_cpy>
c00046dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046e1:	8d 43 58             	lea    eax,[ebx+0x58]
c00046e4:	f7 d2                	not    edx
c00046e6:	e8 d5 d3 ff ff       	call   c0001ac0 <st_dword>
c00046eb:	8d 43 18             	lea    eax,[ebx+0x18]
c00046ee:	31 c9                	xor    ecx,ecx
c00046f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00046f3:	ba 01 00 00 00       	mov    edx,0x1
c00046f8:	e8 c6 d3 ff ff       	call   c0001ac3 <st_qword>
c00046fd:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004701:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004705:	83 c2 ff             	add    edx,0xffffffff
c0004708:	89 e8                	mov    eax,ebp
c000470a:	83 d1 ff             	adc    ecx,0xffffffff
c000470d:	e8 b1 d3 ff ff       	call   c0001ac3 <st_qword>
c0004712:	31 c9                	xor    ecx,ecx
c0004714:	8d 43 28             	lea    eax,[ebx+0x28]
c0004717:	ba 22 00 00 00       	mov    edx,0x22
c000471c:	e8 a2 d3 ff ff       	call   c0001ac3 <st_qword>
c0004721:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004725:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004729:	83 c2 de             	add    edx,0xffffffde
c000472c:	8d 43 30             	lea    eax,[ebx+0x30]
c000472f:	83 d1 ff             	adc    ecx,0xffffffff
c0004732:	31 f6                	xor    esi,esi
c0004734:	e8 8a d3 ff ff       	call   c0001ac3 <st_qword>
c0004739:	8d 43 54             	lea    eax,[ebx+0x54]
c000473c:	ba 80 00 00 00       	mov    edx,0x80
c0004741:	e8 7a d3 ff ff       	call   c0001ac0 <st_dword>
c0004746:	8d 43 50             	lea    eax,[ebx+0x50]
c0004749:	ba 80 00 00 00       	mov    edx,0x80
c000474e:	e8 6d d3 ff ff       	call   c0001ac0 <st_dword>
c0004753:	ba 02 00 00 00       	mov    edx,0x2
c0004758:	89 f8                	mov    eax,edi
c000475a:	e8 61 d3 ff ff       	call   c0001ac0 <st_dword>
c000475f:	8d 53 38             	lea    edx,[ebx+0x38]
c0004762:	b9 10 00 00 00       	mov    ecx,0x10
c0004767:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000476b:	e8 ad d9 ff ff       	call   c000211d <make_rand>
c0004770:	83 c8 ff             	or     eax,0xffffffff
c0004773:	46                   	inc    esi
c0004774:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004779:	e8 fb d8 ff ff       	call   c0002079 <crc32>
c000477e:	83 fe 5c             	cmp    esi,0x5c
c0004781:	75 f0                	jne    c0004773 <create_partition+0x359>
c0004783:	f7 d0                	not    eax
c0004785:	8d 73 10             	lea    esi,[ebx+0x10]
c0004788:	89 c2                	mov    edx,eax
c000478a:	89 f0                	mov    eax,esi
c000478c:	e8 2f d3 ff ff       	call   c0001ac0 <st_dword>
c0004791:	83 ec 0c             	sub    esp,0xc
c0004794:	6a 01                	push   0x1
c0004796:	6a 00                	push   0x0
c0004798:	6a 01                	push   0x1
c000479a:	53                   	push   ebx
c000479b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479f:	e8 71 d2 ff ff       	call   c0001a15 <disk_write>
c00047a4:	83 c4 20             	add    esp,0x20
c00047a7:	85 c0                	test   eax,eax
c00047a9:	0f 85 9c fc ff ff    	jne    c000444b <create_partition+0x31>
c00047af:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047b3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047b7:	83 c2 ff             	add    edx,0xffffffff
c00047ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bd:	83 d1 ff             	adc    ecx,0xffffffff
c00047c0:	e8 fe d2 ff ff       	call   c0001ac3 <st_qword>
c00047c5:	ba 01 00 00 00       	mov    edx,0x1
c00047ca:	31 c9                	xor    ecx,ecx
c00047cc:	89 e8                	mov    eax,ebp
c00047ce:	e8 f0 d2 ff ff       	call   c0001ac3 <st_qword>
c00047d3:	89 f8                	mov    eax,edi
c00047d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047d9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047dd:	31 ff                	xor    edi,edi
c00047df:	e8 df d2 ff ff       	call   c0001ac3 <st_qword>
c00047e4:	89 f0                	mov    eax,esi
c00047e6:	31 d2                	xor    edx,edx
c00047e8:	e8 d3 d2 ff ff       	call   c0001ac0 <st_dword>
c00047ed:	83 c8 ff             	or     eax,0xffffffff
c00047f0:	47                   	inc    edi
c00047f1:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047f6:	e8 7e d8 ff ff       	call   c0002079 <crc32>
c00047fb:	83 ff 5c             	cmp    edi,0x5c
c00047fe:	75 f0                	jne    c00047f0 <create_partition+0x3d6>
c0004800:	f7 d0                	not    eax
c0004802:	89 c2                	mov    edx,eax
c0004804:	89 f0                	mov    eax,esi
c0004806:	e8 b5 d2 ff ff       	call   c0001ac0 <st_dword>
c000480b:	83 ec 0c             	sub    esp,0xc
c000480e:	6a 01                	push   0x1
c0004810:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004814:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004818:	83 c0 ff             	add    eax,0xffffffff
c000481b:	83 d2 ff             	adc    edx,0xffffffff
c000481e:	52                   	push   edx
c000481f:	50                   	push   eax
c0004820:	53                   	push   ebx
c0004821:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004825:	e8 eb d1 ff ff       	call   c0001a15 <disk_write>
c000482a:	83 c4 20             	add    esp,0x20
c000482d:	85 c0                	test   eax,eax
c000482f:	0f 85 16 fc ff ff    	jne    c000444b <create_partition+0x31>
c0004835:	31 d2                	xor    edx,edx
c0004837:	89 d8                	mov    eax,ebx
c0004839:	b9 00 02 00 00       	mov    ecx,0x200
c000483e:	e8 9b d2 ff ff       	call   c0001ade <mem_set>
c0004843:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004849:	b9 10 00 00 00       	mov    ecx,0x10
c000484e:	ba 10 81 02 c0       	mov    edx,0xc0028110
c0004853:	e8 71 d2 ff ff       	call   c0001ac9 <mem_cpy>
c0004858:	e9 21 01 00 00       	jmp    c000497e <create_partition+0x564>
c000485d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004861:	b9 05 00 00 00       	mov    ecx,0x5
c0004866:	89 04 24             	mov    DWORD PTR [esp],eax
c0004869:	bf 08 00 00 00       	mov    edi,0x8
c000486e:	89 f8                	mov    eax,edi
c0004870:	31 d2                	xor    edx,edx
c0004872:	0f b6 f0             	movzx  esi,al
c0004875:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004878:	f7 f6                	div    esi
c000487a:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c000487f:	76 0a                	jbe    c000488b <create_partition+0x471>
c0004881:	d1 e7                	shl    edi,1
c0004883:	49                   	dec    ecx
c0004884:	75 e8                	jne    c000486e <create_partition+0x454>
c0004886:	bf ff ff ff ff       	mov    edi,0xffffffff
c000488b:	b9 00 02 00 00       	mov    ecx,0x200
c0004890:	31 d2                	xor    edx,edx
c0004892:	89 d8                	mov    eax,ebx
c0004894:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c000489a:	e8 3f d2 ff ff       	call   c0001ade <mem_set>
c000489f:	b9 64 00 00 00       	mov    ecx,0x64
c00048a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048a7:	31 d2                	xor    edx,edx
c00048a9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048b1:	f7 f1                	div    ecx
c00048b3:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048bc:	89 f8                	mov    eax,edi
c00048be:	0f b6 c0             	movzx  eax,al
c00048c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048c5:	e9 80 00 00 00       	jmp    c000494a <create_partition+0x530>
c00048ca:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048cd:	29 cf                	sub    edi,ecx
c00048cf:	89 ca                	mov    edx,ecx
c00048d1:	89 f0                	mov    eax,esi
c00048d3:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048d8:	e8 e3 d1 ff ff       	call   c0001ac0 <st_dword>
c00048dd:	8d 46 04             	lea    eax,[esi+0x4]
c00048e0:	89 fa                	mov    edx,edi
c00048e2:	83 c6 10             	add    esi,0x10
c00048e5:	e8 d6 d1 ff ff       	call   c0001ac0 <st_dword>
c00048ea:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048f3:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048f7:	89 c8                	mov    eax,ecx
c00048f9:	01 f9                	add    ecx,edi
c00048fb:	f7 f5                	div    ebp
c00048fd:	89 d5                	mov    ebp,edx
c00048ff:	31 d2                	xor    edx,edx
c0004901:	45                   	inc    ebp
c0004902:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004906:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004909:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c000490c:	89 c2                	mov    edx,eax
c000490e:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004911:	c1 ea 02             	shr    edx,0x2
c0004914:	83 e2 c0             	and    edx,0xffffffc0
c0004917:	09 ea                	or     edx,ebp
c0004919:	bd 3f 00 00 00       	mov    ebp,0x3f
c000491e:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004921:	31 d2                	xor    edx,edx
c0004923:	f7 f5                	div    ebp
c0004925:	89 d7                	mov    edi,edx
c0004927:	31 d2                	xor    edx,edx
c0004929:	47                   	inc    edi
c000492a:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000492e:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004931:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004934:	89 c5                	mov    ebp,eax
c0004936:	c1 ed 02             	shr    ebp,0x2
c0004939:	83 e5 c0             	and    ebp,0xffffffc0
c000493c:	09 ef                	or     edi,ebp
c000493e:	89 fa                	mov    edx,edi
c0004940:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004943:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004948:	74 34                	je     c000497e <create_partition+0x564>
c000494a:	85 c9                	test   ecx,ecx
c000494c:	74 30                	je     c000497e <create_partition+0x564>
c000494e:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004951:	76 2b                	jbe    c000497e <create_partition+0x564>
c0004953:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004957:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000495b:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c000495e:	83 ff 64             	cmp    edi,0x64
c0004961:	76 4b                	jbe    c00049ae <create_partition+0x594>
c0004963:	89 f8                	mov    eax,edi
c0004965:	01 c8                	add    eax,ecx
c0004967:	0f 82 5d ff ff ff    	jb     c00048ca <create_partition+0x4b0>
c000496d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004970:	0f 87 54 ff ff ff    	ja     c00048ca <create_partition+0x4b0>
c0004976:	85 ff                	test   edi,edi
c0004978:	0f 85 51 ff ff ff    	jne    c00048cf <create_partition+0x4b5>
c000497e:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004984:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004989:	e8 2e d1 ff ff       	call   c0001abc <st_word>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	6a 01                	push   0x1
c0004993:	6a 00                	push   0x0
c0004995:	6a 00                	push   0x0
c0004997:	53                   	push   ebx
c0004998:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000499c:	e8 74 d0 ff ff       	call   c0001a15 <disk_write>
c00049a1:	83 c4 20             	add    esp,0x20
c00049a4:	85 c0                	test   eax,eax
c00049a6:	0f 95 c0             	setne  al
c00049a9:	0f b6 c0             	movzx  eax,al
c00049ac:	eb 0e                	jmp    c00049bc <create_partition+0x5a2>
c00049ae:	74 07                	je     c00049b7 <create_partition+0x59d>
c00049b0:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049b5:	eb ac                	jmp    c0004963 <create_partition+0x549>
c00049b7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049ba:	eb a7                	jmp    c0004963 <create_partition+0x549>
c00049bc:	83 c4 5c             	add    esp,0x5c
c00049bf:	5b                   	pop    ebx
c00049c0:	5e                   	pop    esi
c00049c1:	5f                   	pop    edi
c00049c2:	5d                   	pop    ebp
c00049c3:	c3                   	ret    

c00049c4 <get_fileinfo>:
c00049c4:	55                   	push   ebp
c00049c5:	57                   	push   edi
c00049c6:	56                   	push   esi
c00049c7:	53                   	push   ebx
c00049c8:	83 ec 1c             	sub    esp,0x1c
c00049cb:	8b 30                	mov    esi,DWORD PTR [eax]
c00049cd:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049d1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049d5:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049d8:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049db:	0f 84 dc 01 00 00    	je     c0004bbd <get_fileinfo+0x1f9>
c00049e1:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049e4:	75 0f                	jne    c00049f5 <get_fileinfo+0x31>
c00049e6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049e9:	83 c4 1c             	add    esp,0x1c
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	5d                   	pop    ebp
c00049f0:	e9 58 d5 ff ff       	jmp    c0001f4d <get_xfileinfo>
c00049f5:	89 d3                	mov    ebx,edx
c00049f7:	89 c6                	mov    esi,eax
c00049f9:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049fd:	74 6a                	je     c0004a69 <get_fileinfo+0xa5>
c00049ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a07:	31 ed                	xor    ebp,ebp
c0004a09:	31 ff                	xor    edi,edi
c0004a0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a0f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a13:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a16:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a1a:	66 85 d2             	test   dx,dx
c0004a1d:	74 3e                	je     c0004a5d <get_fileinfo+0x99>
c0004a1f:	66 85 ed             	test   bp,bp
c0004a22:	75 0c                	jne    c0004a30 <get_fileinfo+0x6c>
c0004a24:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a2a:	66 3d ff 07          	cmp    ax,0x7ff
c0004a2e:	76 22                	jbe    c0004a52 <get_fileinfo+0x8e>
c0004a30:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a35:	89 e8                	mov    eax,ebp
c0004a37:	29 f9                	sub    ecx,edi
c0004a39:	c1 e0 10             	shl    eax,0x10
c0004a3c:	09 d0                	or     eax,edx
c0004a3e:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a42:	e8 a3 d1 ff ff       	call   c0001bea <put_utf>
c0004a47:	84 c0                	test   al,al
c0004a49:	74 10                	je     c0004a5b <get_fileinfo+0x97>
c0004a4b:	0f b6 c0             	movzx  eax,al
c0004a4e:	31 d2                	xor    edx,edx
c0004a50:	01 c7                	add    edi,eax
c0004a52:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a57:	89 d5                	mov    ebp,edx
c0004a59:	eb b0                	jmp    c0004a0b <get_fileinfo+0x47>
c0004a5b:	31 ff                	xor    edi,edi
c0004a5d:	66 85 ed             	test   bp,bp
c0004a60:	74 02                	je     c0004a64 <get_fileinfo+0xa0>
c0004a62:	31 ff                	xor    edi,edi
c0004a64:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a69:	31 ff                	xor    edi,edi
c0004a6b:	31 c9                	xor    ecx,ecx
c0004a6d:	83 f9 0a             	cmp    ecx,0xa
c0004a70:	0f 87 ad 00 00 00    	ja     c0004b23 <get_fileinfo+0x15f>
c0004a76:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a79:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a7c:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a80:	66 83 fa 20          	cmp    dx,0x20
c0004a84:	0f 84 92 00 00 00    	je     c0004b1c <get_fileinfo+0x158>
c0004a8a:	66 83 fa 05          	cmp    dx,0x5
c0004a8e:	75 05                	jne    c0004a95 <get_fileinfo+0xd1>
c0004a90:	ba e5 00 00 00       	mov    edx,0xe5
c0004a95:	83 ff 0b             	cmp    edi,0xb
c0004a98:	77 0b                	ja     c0004aa5 <get_fileinfo+0xe1>
c0004a9a:	83 fd 09             	cmp    ebp,0x9
c0004a9d:	75 06                	jne    c0004aa5 <get_fileinfo+0xe1>
c0004a9f:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004aa4:	47                   	inc    edi
c0004aa5:	0f b7 c2             	movzx  eax,dx
c0004aa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004aac:	e8 6d d0 ff ff       	call   c0001b1e <dbc_1st>
c0004ab1:	85 c0                	test   eax,eax
c0004ab3:	74 2f                	je     c0004ae4 <get_fileinfo+0x120>
c0004ab5:	83 fd 08             	cmp    ebp,0x8
c0004ab8:	74 2a                	je     c0004ae4 <get_fileinfo+0x120>
c0004aba:	83 fd 0b             	cmp    ebp,0xb
c0004abd:	74 25                	je     c0004ae4 <get_fileinfo+0x120>
c0004abf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac2:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ac6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004aca:	e8 52 d0 ff ff       	call   c0001b21 <dbc_2nd>
c0004acf:	85 c0                	test   eax,eax
c0004ad1:	74 11                	je     c0004ae4 <get_fileinfo+0x120>
c0004ad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ad7:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004adc:	c1 e2 08             	shl    edx,0x8
c0004adf:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ae2:	09 c2                	or     edx,eax
c0004ae4:	0f b7 d2             	movzx  edx,dx
c0004ae7:	50                   	push   eax
c0004ae8:	50                   	push   eax
c0004ae9:	68 b5 01 00 00       	push   0x1b5
c0004aee:	52                   	push   edx
c0004aef:	e8 46 38 00 00       	call   c000833a <ff_oem2uni>
c0004af4:	83 c4 10             	add    esp,0x10
c0004af7:	66 85 c0             	test   ax,ax
c0004afa:	75 04                	jne    c0004b00 <get_fileinfo+0x13c>
c0004afc:	31 ff                	xor    edi,edi
c0004afe:	eb 23                	jmp    c0004b23 <get_fileinfo+0x15f>
c0004b00:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b05:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b09:	29 f9                	sub    ecx,edi
c0004b0b:	0f b7 c0             	movzx  eax,ax
c0004b0e:	e8 d7 d0 ff ff       	call   c0001bea <put_utf>
c0004b13:	84 c0                	test   al,al
c0004b15:	74 e5                	je     c0004afc <get_fileinfo+0x138>
c0004b17:	0f b6 c0             	movzx  eax,al
c0004b1a:	01 c7                	add    edi,eax
c0004b1c:	89 e9                	mov    ecx,ebp
c0004b1e:	e9 4a ff ff ff       	jmp    c0004a6d <get_fileinfo+0xa9>
c0004b23:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b28:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b2c:	75 54                	jne    c0004b82 <get_fileinfo+0x1be>
c0004b2e:	85 ff                	test   edi,edi
c0004b30:	75 0b                	jne    c0004b3d <get_fileinfo+0x179>
c0004b32:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b36:	ba 01 00 00 00       	mov    edx,0x1
c0004b3b:	eb 33                	jmp    c0004b70 <get_fileinfo+0x1ac>
c0004b3d:	b1 08                	mov    cl,0x8
c0004b3f:	31 d2                	xor    edx,edx
c0004b41:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b47:	84 c0                	test   al,al
c0004b49:	74 25                	je     c0004b70 <get_fileinfo+0x1ac>
c0004b4b:	66 83 f8 2e          	cmp    ax,0x2e
c0004b4f:	74 16                	je     c0004b67 <get_fileinfo+0x1a3>
c0004b51:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b54:	66 83 ff 19          	cmp    di,0x19
c0004b58:	77 0f                	ja     c0004b69 <get_fileinfo+0x1a5>
c0004b5a:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b5d:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b60:	74 07                	je     c0004b69 <get_fileinfo+0x1a5>
c0004b62:	83 c0 20             	add    eax,0x20
c0004b65:	eb 02                	jmp    c0004b69 <get_fileinfo+0x1a5>
c0004b67:	b1 10                	mov    cl,0x10
c0004b69:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b6d:	42                   	inc    edx
c0004b6e:	eb d1                	jmp    c0004b41 <get_fileinfo+0x17d>
c0004b70:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b7c:	75 04                	jne    c0004b82 <get_fileinfo+0x1be>
c0004b7e:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b82:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b85:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b88:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8e:	83 c0 1c             	add    eax,0x1c
c0004b91:	e8 c1 ce ff ff       	call   c0001a57 <ld_dword>
c0004b96:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b9d:	89 03                	mov    DWORD PTR [ebx],eax
c0004b9f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ba2:	83 c0 16             	add    eax,0x16
c0004ba5:	e8 a0 ce ff ff       	call   c0001a4a <ld_word>
c0004baa:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004bae:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb1:	83 c0 18             	add    eax,0x18
c0004bb4:	e8 91 ce ff ff       	call   c0001a4a <ld_word>
c0004bb9:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bbd:	83 c4 1c             	add    esp,0x1c
c0004bc0:	5b                   	pop    ebx
c0004bc1:	5e                   	pop    esi
c0004bc2:	5f                   	pop    edi
c0004bc3:	5d                   	pop    ebp
c0004bc4:	c3                   	ret    

c0004bc5 <ld_clust.isra.0>:
c0004bc5:	56                   	push   esi
c0004bc6:	89 c6                	mov    esi,eax
c0004bc8:	53                   	push   ebx
c0004bc9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bcc:	89 d3                	mov    ebx,edx
c0004bce:	e8 77 ce ff ff       	call   c0001a4a <ld_word>
c0004bd3:	0f b7 c8             	movzx  ecx,ax
c0004bd6:	89 f0                	mov    eax,esi
c0004bd8:	3c 03                	cmp    al,0x3
c0004bda:	75 0d                	jne    c0004be9 <ld_clust.isra.0+0x24>
c0004bdc:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bdf:	e8 66 ce ff ff       	call   c0001a4a <ld_word>
c0004be4:	c1 e0 10             	shl    eax,0x10
c0004be7:	09 c1                	or     ecx,eax
c0004be9:	89 c8                	mov    eax,ecx
c0004beb:	5b                   	pop    ebx
c0004bec:	5e                   	pop    esi
c0004bed:	c3                   	ret    

c0004bee <st_clust.isra.1>:
c0004bee:	56                   	push   esi
c0004bef:	89 c6                	mov    esi,eax
c0004bf1:	53                   	push   ebx
c0004bf2:	89 d3                	mov    ebx,edx
c0004bf4:	0f b7 d1             	movzx  edx,cx
c0004bf7:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bfa:	e8 bd ce ff ff       	call   c0001abc <st_word>
c0004bff:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c02:	75 0f                	jne    c0004c13 <st_clust.isra.1+0x25>
c0004c04:	c1 e9 10             	shr    ecx,0x10
c0004c07:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c0a:	89 ca                	mov    edx,ecx
c0004c0c:	5b                   	pop    ebx
c0004c0d:	5e                   	pop    esi
c0004c0e:	e9 a9 ce ff ff       	jmp    c0001abc <st_word>
c0004c13:	5b                   	pop    ebx
c0004c14:	5e                   	pop    esi
c0004c15:	c3                   	ret    

c0004c16 <init_alloc_info.isra.2>:
c0004c16:	56                   	push   esi
c0004c17:	53                   	push   ebx
c0004c18:	89 c6                	mov    esi,eax
c0004c1a:	89 d3                	mov    ebx,edx
c0004c1c:	51                   	push   ecx
c0004c1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c1f:	83 c0 34             	add    eax,0x34
c0004c22:	e8 30 ce ff ff       	call   c0001a57 <ld_dword>
c0004c27:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c2a:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c2c:	83 c0 38             	add    eax,0x38
c0004c2f:	e8 3b ce ff ff       	call   c0001a6f <ld_qword>
c0004c34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c37:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c3a:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c3c:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c3f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c46:	83 e0 02             	and    eax,0x2
c0004c49:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c4c:	5b                   	pop    ebx
c0004c4d:	5b                   	pop    ebx
c0004c4e:	5e                   	pop    esi
c0004c4f:	c3                   	ret    

c0004c50 <follow_path>:
c0004c50:	56                   	push   esi
c0004c51:	53                   	push   ebx
c0004c52:	89 c3                	mov    ebx,eax
c0004c54:	83 ec 14             	sub    esp,0x14
c0004c57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c5b:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c61:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c63:	80 fa 5c             	cmp    dl,0x5c
c0004c66:	75 07                	jne    c0004c6f <follow_path+0x1f>
c0004c68:	40                   	inc    eax
c0004c69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6d:	eb ee                	jmp    c0004c5d <follow_path+0xd>
c0004c6f:	80 fa 2f             	cmp    dl,0x2f
c0004c72:	74 f4                	je     c0004c68 <follow_path+0x18>
c0004c74:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c7b:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c82:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c85:	77 52                	ja     c0004cd9 <follow_path+0x89>
c0004c87:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c8b:	31 d2                	xor    edx,edx
c0004c8d:	89 d8                	mov    eax,ebx
c0004c8f:	e8 12 e3 ff ff       	call   c0002fa6 <dir_sdi>
c0004c94:	eb 7c                	jmp    c0004d12 <follow_path+0xc2>
c0004c96:	89 d8                	mov    eax,ebx
c0004c98:	e8 6e f2 ff ff       	call   c0003f0b <dir_find>
c0004c9d:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ca0:	85 c0                	test   eax,eax
c0004ca2:	75 46                	jne    c0004cea <follow_path+0x9a>
c0004ca4:	80 e2 04             	and    dl,0x4
c0004ca7:	75 69                	jne    c0004d12 <follow_path+0xc2>
c0004ca9:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004cad:	74 5e                	je     c0004d0d <follow_path+0xbd>
c0004caf:	8a 06                	mov    al,BYTE PTR [esi]
c0004cb1:	3c 04                	cmp    al,0x4
c0004cb3:	75 41                	jne    c0004cf6 <follow_path+0xa6>
c0004cb5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cb8:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cbc:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cbf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cc2:	30 c0                	xor    al,al
c0004cc4:	09 d0                	or     eax,edx
c0004cc6:	89 da                	mov    edx,ebx
c0004cc8:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ccb:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cce:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cd1:	8d 46 10             	lea    eax,[esi+0x10]
c0004cd4:	e8 3d ff ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0004cd9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cdd:	89 d8                	mov    eax,ebx
c0004cdf:	e8 a9 ed ff ff       	call   c0003a8d <create_name>
c0004ce4:	85 c0                	test   eax,eax
c0004ce6:	74 ae                	je     c0004c96 <follow_path+0x46>
c0004ce8:	eb 28                	jmp    c0004d12 <follow_path+0xc2>
c0004cea:	83 f8 04             	cmp    eax,0x4
c0004ced:	75 23                	jne    c0004d12 <follow_path+0xc2>
c0004cef:	80 e2 04             	and    dl,0x4
c0004cf2:	74 19                	je     c0004d0d <follow_path+0xbd>
c0004cf4:	eb 1c                	jmp    c0004d12 <follow_path+0xc2>
c0004cf6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cf9:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cff:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d03:	e8 bd fe ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0004d08:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d0b:	eb cc                	jmp    c0004cd9 <follow_path+0x89>
c0004d0d:	b8 05 00 00 00       	mov    eax,0x5
c0004d12:	83 c4 14             	add    esp,0x14
c0004d15:	5b                   	pop    ebx
c0004d16:	5e                   	pop    esi
c0004d17:	c3                   	ret    

c0004d18 <f_mount>:
c0004d18:	53                   	push   ebx
c0004d19:	83 ec 18             	sub    esp,0x18
c0004d1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d20:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d28:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d2c:	e8 fb d2 ff ff       	call   c000202c <get_ldnumber>
c0004d31:	89 c2                	mov    edx,eax
c0004d33:	b8 0b 00 00 00       	mov    eax,0xb
c0004d38:	85 d2                	test   edx,edx
c0004d3a:	78 39                	js     c0004d75 <f_mount+0x5d>
c0004d3c:	8b 04 95 a0 ce 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3160]
c0004d43:	85 c0                	test   eax,eax
c0004d45:	74 03                	je     c0004d4a <f_mount+0x32>
c0004d47:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d4e:	85 c0                	test   eax,eax
c0004d50:	74 03                	je     c0004d55 <f_mount+0x3d>
c0004d52:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d59:	89 04 95 a0 ce 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3160],eax
c0004d60:	31 c0                	xor    eax,eax
c0004d62:	84 db                	test   bl,bl
c0004d64:	74 0f                	je     c0004d75 <f_mount+0x5d>
c0004d66:	31 c9                	xor    ecx,ecx
c0004d68:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d6c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d70:	e8 65 d7 ff ff       	call   c00024da <mount_volume>
c0004d75:	83 c4 18             	add    esp,0x18
c0004d78:	5b                   	pop    ebx
c0004d79:	c3                   	ret    

c0004d7a <f_open>:
c0004d7a:	55                   	push   ebp
c0004d7b:	bd 09 00 00 00       	mov    ebp,0x9
c0004d80:	57                   	push   edi
c0004d81:	56                   	push   esi
c0004d82:	53                   	push   ebx
c0004d83:	83 ec 7c             	sub    esp,0x7c
c0004d86:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d8d:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d94:	85 db                	test   ebx,ebx
c0004d96:	0f 84 10 04 00 00    	je     c00051ac <f_open+0x432>
c0004d9c:	89 fe                	mov    esi,edi
c0004d9e:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004da2:	83 e6 3f             	and    esi,0x3f
c0004da5:	89 f0                	mov    eax,esi
c0004da7:	0f b6 c8             	movzx  ecx,al
c0004daa:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004db1:	e8 24 d7 ff ff       	call   c00024da <mount_volume>
c0004db6:	89 c5                	mov    ebp,eax
c0004db8:	85 c0                	test   eax,eax
c0004dba:	0f 85 e6 03 00 00    	jne    c00051a6 <f_open+0x42c>
c0004dc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dc4:	bd 11 00 00 00       	mov    ebp,0x11
c0004dc9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	68 60 04 00 00       	push   0x460
c0004dd5:	e8 a3 34 00 00       	call   c000827d <ff_memalloc>
c0004dda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004de6:	0f 84 c0 03 00 00    	je     c00051ac <f_open+0x432>
c0004dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004df0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004df4:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dfa:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dfd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e00:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e07:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e0b:	e8 40 fe ff ff       	call   c0004c50 <follow_path>
c0004e10:	89 c5                	mov    ebp,eax
c0004e12:	85 c0                	test   eax,eax
c0004e14:	75 0c                	jne    c0004e22 <f_open+0xa8>
c0004e16:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e1b:	79 05                	jns    c0004e22 <f_open+0xa8>
c0004e1d:	bd 06 00 00 00       	mov    ebp,0x6
c0004e22:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e28:	0f 84 84 01 00 00    	je     c0004fb2 <f_open+0x238>
c0004e2e:	85 ed                	test   ebp,ebp
c0004e30:	74 20                	je     c0004e52 <f_open+0xd8>
c0004e32:	83 fd 04             	cmp    ebp,0x4
c0004e35:	0f 85 58 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e3b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e3f:	83 ce 08             	or     esi,0x8
c0004e42:	e8 8a f2 ff ff       	call   c00040d1 <dir_register>
c0004e47:	89 c5                	mov    ebp,eax
c0004e49:	85 c0                	test   eax,eax
c0004e4b:	74 2f                	je     c0004e7c <f_open+0x102>
c0004e4d:	e9 41 03 00 00       	jmp    c0005193 <f_open+0x419>
c0004e52:	bd 07 00 00 00       	mov    ebp,0x7
c0004e57:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e5c:	0f 85 31 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e62:	bd 08 00 00 00       	mov    ebp,0x8
c0004e67:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e6d:	0f 85 20 03 00 00    	jne    c0005193 <f_open+0x419>
c0004e73:	83 e7 08             	and    edi,0x8
c0004e76:	0f 84 65 01 00 00    	je     c0004fe1 <f_open+0x267>
c0004e7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e80:	8a 02                	mov    al,BYTE PTR [edx]
c0004e82:	3c 04                	cmp    al,0x4
c0004e84:	0f 85 97 00 00 00    	jne    c0004f21 <f_open+0x1a7>
c0004e8a:	8d 42 10             	lea    eax,[edx+0x10]
c0004e8d:	89 13                	mov    DWORD PTR [ebx],edx
c0004e8f:	89 da                	mov    edx,ebx
c0004e91:	e8 80 fd ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0004e96:	31 d2                	xor    edx,edx
c0004e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9c:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004ea1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ea4:	83 c0 02             	add    eax,0x2
c0004ea7:	e8 32 cc ff ff       	call   c0001ade <mem_set>
c0004eac:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004eb1:	31 d2                	xor    edx,edx
c0004eb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eba:	83 c0 26             	add    eax,0x26
c0004ebd:	e8 1c cc ff ff       	call   c0001ade <mem_set>
c0004ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ec6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ec9:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ecd:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ed2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ed5:	83 c0 08             	add    eax,0x8
c0004ed8:	e8 e3 cb ff ff       	call   c0001ac0 <st_dword>
c0004edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ee4:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ee8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eec:	e8 b7 ea ff ff       	call   c00039a8 <store_xdir>
c0004ef1:	89 c5                	mov    ebp,eax
c0004ef3:	85 c0                	test   eax,eax
c0004ef5:	0f 85 98 02 00 00    	jne    c0005193 <f_open+0x419>
c0004efb:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004efe:	85 d2                	test   edx,edx
c0004f00:	0f 84 db 00 00 00    	je     c0004fe1 <f_open+0x267>
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	89 d8                	mov    eax,ebx
c0004f0a:	e8 8e e3 ff ff       	call   c000329d <remove_chain>
c0004f0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f13:	89 c5                	mov    ebp,eax
c0004f15:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f18:	48                   	dec    eax
c0004f19:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f1c:	e9 b8 00 00 00       	jmp    c0004fd9 <f_open+0x25f>
c0004f21:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f25:	89 ea                	mov    edx,ebp
c0004f27:	e8 99 fc ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0004f2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f31:	89 c7                	mov    edi,eax
c0004f33:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f36:	e8 85 cb ff ff       	call   c0001ac0 <st_dword>
c0004f3b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f3f:	31 c9                	xor    ecx,ecx
c0004f41:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f49:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f4d:	e8 9c fc ff ff       	call   c0004bee <st_clust.isra.1>
c0004f52:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f56:	31 d2                	xor    edx,edx
c0004f58:	83 c0 1c             	add    eax,0x1c
c0004f5b:	e8 60 cb ff ff       	call   c0001ac0 <st_dword>
c0004f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f64:	85 ff                	test   edi,edi
c0004f66:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f6a:	74 75                	je     c0004fe1 <f_open+0x267>
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	31 c9                	xor    ecx,ecx
c0004f72:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f75:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f80:	89 fa                	mov    edx,edi
c0004f82:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f86:	e8 12 e3 ff ff       	call   c000329d <remove_chain>
c0004f8b:	89 c5                	mov    ebp,eax
c0004f8d:	85 c0                	test   eax,eax
c0004f8f:	0f 85 fe 01 00 00    	jne    c0005193 <f_open+0x419>
c0004f95:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	4f                   	dec    edi
c0004fa2:	e8 81 d2 ff ff       	call   c0002228 <move_window>
c0004fa7:	89 c5                	mov    ebp,eax
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fb0:	eb 27                	jmp    c0004fd9 <f_open+0x25f>
c0004fb2:	85 ed                	test   ebp,ebp
c0004fb4:	0f 85 d9 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fba:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fbe:	bd 04 00 00 00       	mov    ebp,0x4
c0004fc3:	a8 10                	test   al,0x10
c0004fc5:	0f 85 c8 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fcb:	83 e7 02             	and    edi,0x2
c0004fce:	74 11                	je     c0004fe1 <f_open+0x267>
c0004fd0:	bd 07 00 00 00       	mov    ebp,0x7
c0004fd5:	a8 01                	test   al,0x1
c0004fd7:	eb 02                	jmp    c0004fdb <f_open+0x261>
c0004fd9:	85 ed                	test   ebp,ebp
c0004fdb:	0f 85 b2 01 00 00    	jne    c0005193 <f_open+0x419>
c0004fe1:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fe7:	74 03                	je     c0004fec <f_open+0x272>
c0004fe9:	83 ce 40             	or     esi,0x40
c0004fec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ff0:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004ff3:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004ff6:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004ff9:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004ffc:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005000:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005003:	8a 02                	mov    al,BYTE PTR [edx]
c0005005:	3c 04                	cmp    al,0x4
c0005007:	75 2a                	jne    c0005033 <f_open+0x2b9>
c0005009:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000500d:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005012:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005015:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005019:	30 c0                	xor    al,al
c000501b:	09 c8                	or     eax,ecx
c000501d:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005020:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005024:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005027:	8d 42 10             	lea    eax,[edx+0x10]
c000502a:	89 da                	mov    edx,ebx
c000502c:	e8 e5 fb ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0005031:	eb 1c                	jmp    c000504f <f_open+0x2d5>
c0005033:	89 fa                	mov    edx,edi
c0005035:	e8 8b fb ff ff       	call   c0004bc5 <ld_clust.isra.0>
c000503a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000503d:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005040:	e8 12 ca ff ff       	call   c0001a57 <ld_dword>
c0005045:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000504c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000504f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005053:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000505a:	89 03                	mov    DWORD PTR [ebx],eax
c000505c:	31 d2                	xor    edx,edx
c000505e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005062:	b9 00 02 00 00       	mov    ecx,0x200
c0005067:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000506b:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000506f:	89 f0                	mov    eax,esi
c0005071:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005078:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000507b:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005082:	8d 43 50             	lea    eax,[ebx+0x50]
c0005085:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000508c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005093:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005097:	e8 42 ca ff ff       	call   c0001ade <mem_set>
c000509c:	83 e6 20             	and    esi,0x20
c000509f:	75 07                	jne    c00050a8 <f_open+0x32e>
c00050a1:	31 ed                	xor    ebp,ebp
c00050a3:	e9 eb 00 00 00       	jmp    c0005193 <f_open+0x419>
c00050a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050ab:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050ba:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050be:	74 e1                	je     c00050a1 <f_open+0x327>
c00050c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050c8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050cb:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050d5:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050d9:	31 ff                	xor    edi,edi
c00050db:	c1 e5 09             	shl    ebp,0x9
c00050de:	89 ee                	mov    esi,ebp
c00050e0:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050e4:	89 f8                	mov    eax,edi
c00050e6:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050ea:	73 22                	jae    c000510e <f_open+0x394>
c00050ec:	89 d8                	mov    eax,ebx
c00050ee:	e8 bd dc ff ff       	call   c0002db0 <get_fat>
c00050f3:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050f7:	89 c2                	mov    edx,eax
c00050f9:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050fd:	83 f8 01             	cmp    eax,0x1
c0005100:	76 10                	jbe    c0005112 <f_open+0x398>
c0005102:	83 f8 ff             	cmp    eax,0xffffffff
c0005105:	75 d9                	jne    c00050e0 <f_open+0x366>
c0005107:	bd 01 00 00 00       	mov    ebp,0x1
c000510c:	eb 09                	jmp    c0005117 <f_open+0x39d>
c000510e:	31 ed                	xor    ebp,ebp
c0005110:	eb 05                	jmp    c0005117 <f_open+0x39d>
c0005112:	bd 02 00 00 00       	mov    ebp,0x2
c0005117:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000511a:	85 ed                	test   ebp,ebp
c000511c:	75 75                	jne    c0005193 <f_open+0x419>
c000511e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005122:	25 ff 01 00 00       	and    eax,0x1ff
c0005127:	0f 84 74 ff ff ff    	je     c00050a1 <f_open+0x327>
c000512d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005131:	bd 02 00 00 00       	mov    ebp,0x2
c0005136:	89 c8                	mov    eax,ecx
c0005138:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000513c:	e8 a2 cb ff ff       	call   c0001ce3 <clst2sect>
c0005141:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005145:	89 d7                	mov    edi,edx
c0005147:	09 c7                	or     edi,eax
c0005149:	74 48                	je     c0005193 <f_open+0x419>
c000514b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000514f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005153:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000515b:	0f ac fe 09          	shrd   esi,edi,0x9
c000515f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005163:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005167:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000516a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000516e:	83 ec 0c             	sub    esp,0xc
c0005171:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005174:	6a 01                	push   0x1
c0005176:	52                   	push   edx
c0005177:	50                   	push   eax
c0005178:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000517c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005180:	50                   	push   eax
c0005181:	e8 79 c8 ff ff       	call   c00019ff <disk_read>
c0005186:	83 c4 20             	add    esp,0x20
c0005189:	85 c0                	test   eax,eax
c000518b:	0f 95 c0             	setne  al
c000518e:	0f b6 c0             	movzx  eax,al
c0005191:	89 c5                	mov    ebp,eax
c0005193:	83 ec 0c             	sub    esp,0xc
c0005196:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000519a:	e8 f4 30 00 00       	call   c0008293 <ff_memfree>
c000519f:	83 c4 10             	add    esp,0x10
c00051a2:	85 ed                	test   ebp,ebp
c00051a4:	74 06                	je     c00051ac <f_open+0x432>
c00051a6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051ac:	83 c4 7c             	add    esp,0x7c
c00051af:	89 e8                	mov    eax,ebp
c00051b1:	5b                   	pop    ebx
c00051b2:	5e                   	pop    esi
c00051b3:	5f                   	pop    edi
c00051b4:	5d                   	pop    ebp
c00051b5:	c3                   	ret    

c00051b6 <f_read>:
c00051b6:	55                   	push   ebp
c00051b7:	57                   	push   edi
c00051b8:	56                   	push   esi
c00051b9:	53                   	push   ebx
c00051ba:	83 ec 2c             	sub    esp,0x2c
c00051bd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051c1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051c5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051cb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051cf:	89 d8                	mov    eax,ebx
c00051d1:	e8 77 cf ff ff       	call   c000214d <validate>
c00051d6:	89 c5                	mov    ebp,eax
c00051d8:	85 c0                	test   eax,eax
c00051da:	0f 85 4c 02 00 00    	jne    c000542c <f_read+0x276>
c00051e0:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051e4:	85 ed                	test   ebp,ebp
c00051e6:	0f 85 40 02 00 00    	jne    c000542c <f_read+0x276>
c00051ec:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051f0:	0f 84 31 02 00 00    	je     c0005427 <f_read+0x271>
c00051f6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051f9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051fc:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051ff:	bf 00 00 00 00       	mov    edi,0x0
c0005204:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005207:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000520b:	89 d1                	mov    ecx,edx
c000520d:	19 f9                	sbb    ecx,edi
c000520f:	0f 83 cf 00 00 00    	jae    c00052e4 <f_read+0x12e>
c0005215:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005219:	e9 c6 00 00 00       	jmp    c00052e4 <f_read+0x12e>
c000521e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005221:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005224:	89 d0                	mov    eax,edx
c0005226:	25 ff 01 00 00       	and    eax,0x1ff
c000522b:	0f 85 c9 01 00 00    	jne    c00053fa <f_read+0x244>
c0005231:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005235:	89 d6                	mov    esi,edx
c0005237:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000523b:	89 cf                	mov    edi,ecx
c000523d:	48                   	dec    eax
c000523e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005242:	21 f0                	and    eax,esi
c0005244:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005248:	0f 84 a6 00 00 00    	je     c00052f4 <f_read+0x13e>
c000524e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 c8                	mov    eax,ecx
c0005257:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000525a:	e8 84 ca ff ff       	call   c0001ce3 <clst2sect>
c000525f:	89 d7                	mov    edi,edx
c0005261:	09 c7                	or     edi,eax
c0005263:	0f 84 b4 00 00 00    	je     c000531d <f_read+0x167>
c0005269:	31 ff                	xor    edi,edi
c000526b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000526f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005272:	01 c6                	add    esi,eax
c0005274:	11 d7                	adc    edi,edx
c0005276:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000527e:	0f 86 fd 00 00 00    	jbe    c0005381 <f_read+0x1cb>
c0005284:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005288:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000528c:	c1 e8 09             	shr    eax,0x9
c000528f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005292:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005296:	03 14 24             	add    edx,DWORD PTR [esp]
c0005299:	39 c2                	cmp    edx,eax
c000529b:	76 07                	jbe    c00052a4 <f_read+0xee>
c000529d:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052ab:	57                   	push   edi
c00052ac:	56                   	push   esi
c00052ad:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052b1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052b5:	50                   	push   eax
c00052b6:	e8 44 c7 ff ff       	call   c00019ff <disk_read>
c00052bb:	83 c4 20             	add    esp,0x20
c00052be:	85 c0                	test   eax,eax
c00052c0:	75 6e                	jne    c0005330 <f_read+0x17a>
c00052c2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052c6:	78 7e                	js     c0005346 <f_read+0x190>
c00052c8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052cb:	c1 e6 09             	shl    esi,0x9
c00052ce:	31 ff                	xor    edi,edi
c00052d0:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d8:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052dc:	01 30                	add    DWORD PTR [eax],esi
c00052de:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052e1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052e4:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052e9:	0f 85 2f ff ff ff    	jne    c000521e <f_read+0x68>
c00052ef:	e9 38 01 00 00       	jmp    c000542c <f_read+0x276>
c00052f4:	89 c8                	mov    eax,ecx
c00052f6:	09 d0                	or     eax,edx
c00052f8:	75 05                	jne    c00052ff <f_read+0x149>
c00052fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052fd:	eb 19                	jmp    c0005318 <f_read+0x162>
c00052ff:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005303:	74 09                	je     c000530e <f_read+0x158>
c0005305:	89 d8                	mov    eax,ebx
c0005307:	e8 f8 c9 ff ff       	call   c0001d04 <clmt_clust>
c000530c:	eb 0a                	jmp    c0005318 <f_read+0x162>
c000530e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005311:	89 d8                	mov    eax,ebx
c0005313:	e8 98 da ff ff       	call   c0002db0 <get_fat>
c0005318:	83 f8 01             	cmp    eax,0x1
c000531b:	77 0e                	ja     c000532b <f_read+0x175>
c000531d:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005321:	bd 02 00 00 00       	mov    ebp,0x2
c0005326:	e9 01 01 00 00       	jmp    c000542c <f_read+0x276>
c000532b:	83 f8 ff             	cmp    eax,0xffffffff
c000532e:	75 0e                	jne    c000533e <f_read+0x188>
c0005330:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005334:	bd 01 00 00 00       	mov    ebp,0x1
c0005339:	e9 ee 00 00 00       	jmp    c000542c <f_read+0x276>
c000533e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005341:	e9 08 ff ff ff       	jmp    c000524e <f_read+0x98>
c0005346:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005349:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534c:	29 f0                	sub    eax,esi
c000534e:	19 fa                	sbb    edx,edi
c0005350:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005353:	89 d7                	mov    edi,edx
c0005355:	ba 00 00 00 00       	mov    edx,0x0
c000535a:	89 f9                	mov    ecx,edi
c000535c:	19 d1                	sbb    ecx,edx
c000535e:	0f 83 64 ff ff ff    	jae    c00052c8 <f_read+0x112>
c0005364:	89 c7                	mov    edi,eax
c0005366:	8d 53 50             	lea    edx,[ebx+0x50]
c0005369:	c1 e7 09             	shl    edi,0x9
c000536c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005370:	b9 00 02 00 00       	mov    ecx,0x200
c0005375:	01 f8                	add    eax,edi
c0005377:	e8 4d c7 ff ff       	call   c0001ac9 <mem_cpy>
c000537c:	e9 47 ff ff ff       	jmp    c00052c8 <f_read+0x112>
c0005381:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005384:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005387:	89 04 24             	mov    DWORD PTR [esp],eax
c000538a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000538e:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005392:	75 05                	jne    c0005399 <f_read+0x1e3>
c0005394:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005397:	74 5b                	je     c00053f4 <f_read+0x23e>
c0005399:	8d 43 50             	lea    eax,[ebx+0x50]
c000539c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053a4:	79 2a                	jns    c00053d0 <f_read+0x21a>
c00053a6:	83 ec 0c             	sub    esp,0xc
c00053a9:	6a 01                	push   0x1
c00053ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053b3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053bb:	50                   	push   eax
c00053bc:	e8 54 c6 ff ff       	call   c0001a15 <disk_write>
c00053c1:	83 c4 20             	add    esp,0x20
c00053c4:	85 c0                	test   eax,eax
c00053c6:	0f 85 64 ff ff ff    	jne    c0005330 <f_read+0x17a>
c00053cc:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053d0:	83 ec 0c             	sub    esp,0xc
c00053d3:	6a 01                	push   0x1
c00053d5:	57                   	push   edi
c00053d6:	56                   	push   esi
c00053d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053df:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053e3:	50                   	push   eax
c00053e4:	e8 16 c6 ff ff       	call   c00019ff <disk_read>
c00053e9:	83 c4 20             	add    esp,0x20
c00053ec:	85 c0                	test   eax,eax
c00053ee:	0f 85 3c ff ff ff    	jne    c0005330 <f_read+0x17a>
c00053f4:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053f7:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053fa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053fd:	ba 00 02 00 00       	mov    edx,0x200
c0005402:	25 ff 01 00 00       	and    eax,0x1ff
c0005407:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000540b:	29 c2                	sub    edx,eax
c000540d:	39 d6                	cmp    esi,edx
c000540f:	76 02                	jbe    c0005413 <f_read+0x25d>
c0005411:	89 d6                	mov    esi,edx
c0005413:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005417:	89 f1                	mov    ecx,esi
c0005419:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000541d:	e8 a7 c6 ff ff       	call   c0001ac9 <mem_cpy>
c0005422:	e9 a7 fe ff ff       	jmp    c00052ce <f_read+0x118>
c0005427:	bd 07 00 00 00       	mov    ebp,0x7
c000542c:	83 c4 2c             	add    esp,0x2c
c000542f:	89 e8                	mov    eax,ebp
c0005431:	5b                   	pop    ebx
c0005432:	5e                   	pop    esi
c0005433:	5f                   	pop    edi
c0005434:	5d                   	pop    ebp
c0005435:	c3                   	ret    

c0005436 <f_write>:
c0005436:	55                   	push   ebp
c0005437:	57                   	push   edi
c0005438:	56                   	push   esi
c0005439:	53                   	push   ebx
c000543a:	83 ec 2c             	sub    esp,0x2c
c000543d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005441:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005445:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000544b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000544f:	89 d8                	mov    eax,ebx
c0005451:	e8 f7 cc ff ff       	call   c000214d <validate>
c0005456:	89 c5                	mov    ebp,eax
c0005458:	85 c0                	test   eax,eax
c000545a:	0f 85 86 02 00 00    	jne    c00056e6 <f_write+0x2b0>
c0005460:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005464:	85 ed                	test   ebp,ebp
c0005466:	0f 85 7a 02 00 00    	jne    c00056e6 <f_write+0x2b0>
c000546c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005470:	0f 84 6b 02 00 00    	je     c00056e1 <f_write+0x2ab>
c0005476:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000547d:	0f 84 43 01 00 00    	je     c00055c6 <f_write+0x190>
c0005483:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005486:	89 c1                	mov    ecx,eax
c0005488:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000548c:	0f 83 34 01 00 00    	jae    c00055c6 <f_write+0x190>
c0005492:	f7 d0                	not    eax
c0005494:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005498:	e9 29 01 00 00       	jmp    c00055c6 <f_write+0x190>
c000549d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054a0:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054a3:	89 d0                	mov    eax,edx
c00054a5:	25 ff 01 00 00       	and    eax,0x1ff
c00054aa:	0f 85 00 02 00 00    	jne    c00056b0 <f_write+0x27a>
c00054b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054b4:	89 d6                	mov    esi,edx
c00054b6:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054ba:	89 cf                	mov    edi,ecx
c00054bc:	48                   	dec    eax
c00054bd:	0f ac fe 09          	shrd   esi,edi,0x9
c00054c1:	21 f0                	and    eax,esi
c00054c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c7:	0f 84 06 01 00 00    	je     c00055d3 <f_write+0x19d>
c00054cd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054d1:	0f 88 6e 01 00 00    	js     c0005645 <f_write+0x20f>
c00054d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054db:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054de:	89 c8                	mov    eax,ecx
c00054e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054e4:	e8 fa c7 ff ff       	call   c0001ce3 <clst2sect>
c00054e9:	89 d1                	mov    ecx,edx
c00054eb:	09 c1                	or     ecx,eax
c00054ed:	0f 84 1c 01 00 00    	je     c000560f <f_write+0x1d9>
c00054f3:	31 ff                	xor    edi,edi
c00054f5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054fd:	01 c6                	add    esi,eax
c00054ff:	11 d7                	adc    edi,edx
c0005501:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005509:	0f 86 63 01 00 00    	jbe    c0005672 <f_write+0x23c>
c000550f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005513:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005517:	c1 e8 09             	shr    eax,0x9
c000551a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000551e:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005522:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005526:	39 c2                	cmp    edx,eax
c0005528:	76 08                	jbe    c0005532 <f_write+0xfc>
c000552a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000552e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005532:	83 ec 0c             	sub    esp,0xc
c0005535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005539:	57                   	push   edi
c000553a:	56                   	push   esi
c000553b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000553f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005543:	50                   	push   eax
c0005544:	e8 cc c4 ff ff       	call   c0001a15 <disk_write>
c0005549:	83 c4 20             	add    esp,0x20
c000554c:	85 c0                	test   eax,eax
c000554e:	0f 85 ce 00 00 00    	jne    c0005622 <f_write+0x1ec>
c0005554:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005557:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000555a:	29 f0                	sub    eax,esi
c000555c:	19 fa                	sbb    edx,edi
c000555e:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005562:	89 d7                	mov    edi,edx
c0005564:	ba 00 00 00 00       	mov    edx,0x0
c0005569:	89 f9                	mov    ecx,edi
c000556b:	19 d1                	sbb    ecx,edx
c000556d:	73 1c                	jae    c000558b <f_write+0x155>
c000556f:	89 c7                	mov    edi,eax
c0005571:	b9 00 02 00 00       	mov    ecx,0x200
c0005576:	c1 e7 09             	shl    edi,0x9
c0005579:	8d 43 50             	lea    eax,[ebx+0x50]
c000557c:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005580:	89 fa                	mov    edx,edi
c0005582:	e8 42 c5 ff ff       	call   c0001ac9 <mem_cpy>
c0005587:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000558b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000558f:	c1 e6 09             	shl    esi,0x9
c0005592:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005596:	31 ff                	xor    edi,edi
c0005598:	01 30                	add    DWORD PTR [eax],esi
c000559a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000559e:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055a5:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055ab:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055ae:	89 c1                	mov    ecx,eax
c00055b0:	39 f2                	cmp    edx,esi
c00055b2:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055b5:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055b8:	19 f9                	sbb    ecx,edi
c00055ba:	73 04                	jae    c00055c0 <f_write+0x18a>
c00055bc:	89 f2                	mov    edx,esi
c00055be:	89 f8                	mov    eax,edi
c00055c0:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055c3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055c6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055cb:	0f 85 cc fe ff ff    	jne    c000549d <f_write+0x67>
c00055d1:	eb 2e                	jmp    c0005601 <f_write+0x1cb>
c00055d3:	89 c8                	mov    eax,ecx
c00055d5:	09 d0                	or     eax,edx
c00055d7:	75 0b                	jne    c00055e4 <f_write+0x1ae>
c00055d9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055dc:	31 d2                	xor    edx,edx
c00055de:	85 c0                	test   eax,eax
c00055e0:	75 28                	jne    c000560a <f_write+0x1d4>
c00055e2:	eb 12                	jmp    c00055f6 <f_write+0x1c0>
c00055e4:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055e8:	74 09                	je     c00055f3 <f_write+0x1bd>
c00055ea:	89 d8                	mov    eax,ebx
c00055ec:	e8 13 c7 ff ff       	call   c0001d04 <clmt_clust>
c00055f1:	eb 0a                	jmp    c00055fd <f_write+0x1c7>
c00055f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055f6:	89 d8                	mov    eax,ebx
c00055f8:	e8 a1 da ff ff       	call   c000309e <create_chain>
c00055fd:	85 c0                	test   eax,eax
c00055ff:	75 09                	jne    c000560a <f_write+0x1d4>
c0005601:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005605:	e9 dc 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c000560a:	83 f8 01             	cmp    eax,0x1
c000560d:	75 0e                	jne    c000561d <f_write+0x1e7>
c000560f:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005613:	bd 02 00 00 00       	mov    ebp,0x2
c0005618:	e9 c9 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c000561d:	83 f8 ff             	cmp    eax,0xffffffff
c0005620:	75 0e                	jne    c0005630 <f_write+0x1fa>
c0005622:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005626:	bd 01 00 00 00       	mov    ebp,0x1
c000562b:	e9 b6 00 00 00       	jmp    c00056e6 <f_write+0x2b0>
c0005630:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005633:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005637:	0f 85 90 fe ff ff    	jne    c00054cd <f_write+0x97>
c000563d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005640:	e9 88 fe ff ff       	jmp    c00054cd <f_write+0x97>
c0005645:	83 ec 0c             	sub    esp,0xc
c0005648:	8d 43 50             	lea    eax,[ebx+0x50]
c000564b:	6a 01                	push   0x1
c000564d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005650:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005653:	50                   	push   eax
c0005654:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005658:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000565c:	50                   	push   eax
c000565d:	e8 b3 c3 ff ff       	call   c0001a15 <disk_write>
c0005662:	83 c4 20             	add    esp,0x20
c0005665:	85 c0                	test   eax,eax
c0005667:	75 b9                	jne    c0005622 <f_write+0x1ec>
c0005669:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000566d:	e9 65 fe ff ff       	jmp    c00054d7 <f_write+0xa1>
c0005672:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005675:	75 05                	jne    c000567c <f_write+0x246>
c0005677:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000567a:	74 2e                	je     c00056aa <f_write+0x274>
c000567c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000567f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005682:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005685:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005688:	73 20                	jae    c00056aa <f_write+0x274>
c000568a:	83 ec 0c             	sub    esp,0xc
c000568d:	8d 43 50             	lea    eax,[ebx+0x50]
c0005690:	6a 01                	push   0x1
c0005692:	57                   	push   edi
c0005693:	56                   	push   esi
c0005694:	50                   	push   eax
c0005695:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005699:	50                   	push   eax
c000569a:	e8 60 c3 ff ff       	call   c00019ff <disk_read>
c000569f:	83 c4 20             	add    esp,0x20
c00056a2:	85 c0                	test   eax,eax
c00056a4:	0f 85 78 ff ff ff    	jne    c0005622 <f_write+0x1ec>
c00056aa:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056ad:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056b0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056b3:	ba 00 02 00 00       	mov    edx,0x200
c00056b8:	25 ff 01 00 00       	and    eax,0x1ff
c00056bd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056c1:	29 c2                	sub    edx,eax
c00056c3:	39 d6                	cmp    esi,edx
c00056c5:	76 02                	jbe    c00056c9 <f_write+0x293>
c00056c7:	89 d6                	mov    esi,edx
c00056c9:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056cd:	89 f1                	mov    ecx,esi
c00056cf:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056d3:	e8 f1 c3 ff ff       	call   c0001ac9 <mem_cpy>
c00056d8:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056dc:	e9 b1 fe ff ff       	jmp    c0005592 <f_write+0x15c>
c00056e1:	bd 07 00 00 00       	mov    ebp,0x7
c00056e6:	83 c4 2c             	add    esp,0x2c
c00056e9:	89 e8                	mov    eax,ebp
c00056eb:	5b                   	pop    ebx
c00056ec:	5e                   	pop    esi
c00056ed:	5f                   	pop    edi
c00056ee:	5d                   	pop    ebp
c00056ef:	c3                   	ret    

c00056f0 <f_sync>:
c00056f0:	56                   	push   esi
c00056f1:	53                   	push   ebx
c00056f2:	83 ec 64             	sub    esp,0x64
c00056f5:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056f9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056fd:	89 d8                	mov    eax,ebx
c00056ff:	e8 49 ca ff ff       	call   c000214d <validate>
c0005704:	85 c0                	test   eax,eax
c0005706:	0f 85 ba 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000570c:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000570f:	f6 c2 40             	test   dl,0x40
c0005712:	0f 84 ae 01 00 00    	je     c00058c6 <f_sync+0x1d6>
c0005718:	84 d2                	test   dl,dl
c000571a:	79 33                	jns    c000574f <f_sync+0x5f>
c000571c:	83 ec 0c             	sub    esp,0xc
c000571f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005722:	6a 01                	push   0x1
c0005724:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005727:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000572a:	50                   	push   eax
c000572b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000572f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005733:	50                   	push   eax
c0005734:	e8 dc c2 ff ff       	call   c0001a15 <disk_write>
c0005739:	83 c4 20             	add    esp,0x20
c000573c:	89 c2                	mov    edx,eax
c000573e:	b8 01 00 00 00       	mov    eax,0x1
c0005743:	85 d2                	test   edx,edx
c0005745:	0f 85 7b 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000574b:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000574f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005753:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005756:	0f 85 11 01 00 00    	jne    c000586d <f_sync+0x17d>
c000575c:	89 d8                	mov    eax,ebx
c000575e:	e8 13 d6 ff ff       	call   c0002d76 <fill_first_frag>
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 5b 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c000576b:	83 c9 ff             	or     ecx,0xffffffff
c000576e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005771:	89 d8                	mov    eax,ebx
c0005773:	e8 c9 d5 ff ff       	call   c0002d41 <fill_last_frag>
c0005778:	85 c0                	test   eax,eax
c000577a:	0f 85 46 01 00 00    	jne    c00058c6 <f_sync+0x1d6>
c0005780:	83 ec 0c             	sub    esp,0xc
c0005783:	68 60 04 00 00       	push   0x460
c0005788:	e8 f0 2a 00 00       	call   c000827d <ff_memalloc>
c000578d:	83 c4 10             	add    esp,0x10
c0005790:	89 c6                	mov    esi,eax
c0005792:	b8 11 00 00 00       	mov    eax,0x11
c0005797:	85 f6                	test   esi,esi
c0005799:	0f 84 27 01 00 00    	je     c00058c6 <f_sync+0x1d6>
c000579f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057a3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057a9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057ac:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057af:	89 da                	mov    edx,ebx
c00057b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057b5:	e8 af df ff ff       	call   c0003769 <load_obj_xdir>
c00057ba:	85 c0                	test   eax,eax
c00057bc:	0f 85 95 00 00 00    	jne    c0005857 <f_sync+0x167>
c00057c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057c6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057c9:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057cd:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057d0:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057d3:	83 ca 01             	or     edx,0x1
c00057d6:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057d9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057df:	83 c0 34             	add    eax,0x34
c00057e2:	e8 d9 c2 ff ff       	call   c0001ac0 <st_dword>
c00057e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057eb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057ee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057f1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f4:	83 c0 38             	add    eax,0x38
c00057f7:	e8 c7 c2 ff ff       	call   c0001ac3 <st_qword>
c00057fc:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005803:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005806:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005809:	83 c0 28             	add    eax,0x28
c000580c:	e8 b2 c2 ff ff       	call   c0001ac3 <st_qword>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	ba 00 00 21 50       	mov    edx,0x50210000
c000581a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000581d:	83 c0 0c             	add    eax,0xc
c0005820:	e8 9b c2 ff ff       	call   c0001ac0 <st_dword>
c0005825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005829:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000582c:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005830:	31 d2                	xor    edx,edx
c0005832:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005835:	83 c0 10             	add    eax,0x10
c0005838:	e8 83 c2 ff ff       	call   c0001ac0 <st_dword>
c000583d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005841:	e8 62 e1 ff ff       	call   c00039a8 <store_xdir>
c0005846:	85 c0                	test   eax,eax
c0005848:	75 0d                	jne    c0005857 <f_sync+0x167>
c000584a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000584e:	e8 00 eb ff ff       	call   c0004353 <sync_fs>
c0005853:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005857:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000585b:	83 ec 0c             	sub    esp,0xc
c000585e:	56                   	push   esi
c000585f:	e8 2f 2a 00 00       	call   c0008293 <ff_memfree>
c0005864:	83 c4 10             	add    esp,0x10
c0005867:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000586b:	eb 59                	jmp    c00058c6 <f_sync+0x1d6>
c000586d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005870:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005873:	e8 b0 c9 ff ff       	call   c0002228 <move_window>
c0005878:	85 c0                	test   eax,eax
c000587a:	75 4a                	jne    c00058c6 <f_sync+0x1d6>
c000587c:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c000587f:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005883:	89 f2                	mov    edx,esi
c0005885:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005888:	8b 03                	mov    eax,DWORD PTR [ebx]
c000588a:	e8 5f f3 ff ff       	call   c0004bee <st_clust.isra.1>
c000588f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005892:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005895:	e8 26 c2 ff ff       	call   c0001ac0 <st_dword>
c000589a:	8d 46 16             	lea    eax,[esi+0x16]
c000589d:	ba 00 00 21 50       	mov    edx,0x50210000
c00058a2:	e8 19 c2 ff ff       	call   c0001ac0 <st_dword>
c00058a7:	8d 46 12             	lea    eax,[esi+0x12]
c00058aa:	31 d2                	xor    edx,edx
c00058ac:	e8 0b c2 ff ff       	call   c0001abc <st_word>
c00058b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058bd:	e8 91 ea ff ff       	call   c0004353 <sync_fs>
c00058c2:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058c6:	83 c4 64             	add    esp,0x64
c00058c9:	5b                   	pop    ebx
c00058ca:	5e                   	pop    esi
c00058cb:	c3                   	ret    

c00058cc <f_close>:
c00058cc:	53                   	push   ebx
c00058cd:	83 ec 24             	sub    esp,0x24
c00058d0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058d4:	53                   	push   ebx
c00058d5:	e8 16 fe ff ff       	call   c00056f0 <f_sync>
c00058da:	83 c4 10             	add    esp,0x10
c00058dd:	85 c0                	test   eax,eax
c00058df:	75 15                	jne    c00058f6 <f_close+0x2a>
c00058e1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058e5:	89 d8                	mov    eax,ebx
c00058e7:	e8 61 c8 ff ff       	call   c000214d <validate>
c00058ec:	85 c0                	test   eax,eax
c00058ee:	75 06                	jne    c00058f6 <f_close+0x2a>
c00058f0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058f6:	83 c4 18             	add    esp,0x18
c00058f9:	5b                   	pop    ebx
c00058fa:	c3                   	ret    

c00058fb <f_lseek>:
c00058fb:	55                   	push   ebp
c00058fc:	57                   	push   edi
c00058fd:	56                   	push   esi
c00058fe:	53                   	push   ebx
c00058ff:	83 ec 3c             	sub    esp,0x3c
c0005902:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005906:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000590a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000590e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005911:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005915:	89 d8                	mov    eax,ebx
c0005917:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000591b:	e8 2d c8 ff ff       	call   c000214d <validate>
c0005920:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005924:	85 c0                	test   eax,eax
c0005926:	0f 85 7a 04 00 00    	jne    c0005da6 <f_lseek+0x4ab>
c000592c:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005930:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005934:	85 c0                	test   eax,eax
c0005936:	0f 85 6a 04 00 00    	jne    c0005da6 <f_lseek+0x4ab>
c000593c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005940:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005943:	74 0c                	je     c0005951 <f_lseek+0x56>
c0005945:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005948:	85 c0                	test   eax,eax
c000594a:	75 1f                	jne    c000596b <f_lseek+0x70>
c000594c:	e9 b5 01 00 00       	jmp    c0005b06 <f_lseek+0x20b>
c0005951:	83 c9 ff             	or     ecx,0xffffffff
c0005954:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005957:	89 d8                	mov    eax,ebx
c0005959:	e8 e3 d3 ff ff       	call   c0002d41 <fill_last_frag>
c000595e:	85 c0                	test   eax,eax
c0005960:	74 e3                	je     c0005945 <f_lseek+0x4a>
c0005962:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005966:	e9 3b 04 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c000596b:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005970:	0f 85 ac 00 00 00    	jne    c0005a22 <f_lseek+0x127>
c0005976:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c000597a:	0f 85 a2 00 00 00    	jne    c0005a22 <f_lseek+0x127>
c0005980:	8d 78 04             	lea    edi,[eax+0x4]
c0005983:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005986:	8b 00                	mov    eax,DWORD PTR [eax]
c0005988:	be 02 00 00 00       	mov    esi,0x2
c000598d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005991:	85 ed                	test   ebp,ebp
c0005993:	74 73                	je     c0005a08 <f_lseek+0x10d>
c0005995:	89 e9                	mov    ecx,ebp
c0005997:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000599e:	ff 04 24             	inc    DWORD PTR [esp]
c00059a1:	89 ca                	mov    edx,ecx
c00059a3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059a7:	89 d8                	mov    eax,ebx
c00059a9:	e8 02 d4 ff ff       	call   c0002db0 <get_fat>
c00059ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059b2:	83 f8 01             	cmp    eax,0x1
c00059b5:	77 11                	ja     c00059c8 <f_lseek+0xcd>
c00059b7:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059bb:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059c3:	e9 de 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c00059c8:	83 f8 ff             	cmp    eax,0xffffffff
c00059cb:	75 11                	jne    c00059de <f_lseek+0xe3>
c00059cd:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059d1:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059d9:	e9 c8 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c00059de:	8d 51 01             	lea    edx,[ecx+0x1]
c00059e1:	89 c1                	mov    ecx,eax
c00059e3:	39 c2                	cmp    edx,eax
c00059e5:	74 b7                	je     c000599e <f_lseek+0xa3>
c00059e7:	83 c6 02             	add    esi,0x2
c00059ea:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059ee:	72 0b                	jb     c00059fb <f_lseek+0x100>
c00059f0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059f3:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059f6:	89 0f                	mov    DWORD PTR [edi],ecx
c00059f8:	83 c7 08             	add    edi,0x8
c00059fb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059ff:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a02:	76 04                	jbe    c0005a08 <f_lseek+0x10d>
c0005a04:	89 c5                	mov    ebp,eax
c0005a06:	eb 8d                	jmp    c0005995 <f_lseek+0x9a>
c0005a08:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a0b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a0f:	89 30                	mov    DWORD PTR [eax],esi
c0005a11:	0f 87 87 03 00 00    	ja     c0005d9e <f_lseek+0x4a3>
c0005a17:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a1d:	e9 84 03 00 00       	jmp    c0005da6 <f_lseek+0x4ab>
c0005a22:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a25:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a2c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a34:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a3b:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a3f:	73 0f                	jae    c0005a50 <f_lseek+0x155>
c0005a41:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a44:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a48:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a54:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a58:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a5b:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a62:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a66:	0f 84 3a 03 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005a6c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a70:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a74:	83 c6 ff             	add    esi,0xffffffff
c0005a77:	89 d8                	mov    eax,ebx
c0005a79:	83 d7 ff             	adc    edi,0xffffffff
c0005a7c:	89 f2                	mov    edx,esi
c0005a7e:	89 f9                	mov    ecx,edi
c0005a80:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a84:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a87:	e8 78 c2 ff ff       	call   c0001d04 <clmt_clust>
c0005a8c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a90:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a93:	89 c2                	mov    edx,eax
c0005a95:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a99:	89 c8                	mov    eax,ecx
c0005a9b:	e8 43 c2 ff ff       	call   c0001ce3 <clst2sect>
c0005aa0:	89 d7                	mov    edi,edx
c0005aa2:	09 c7                	or     edi,eax
c0005aa4:	0f 84 0d ff ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005aaa:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005aae:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ab4:	0f 84 ec 02 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005aba:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005abe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ac5:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ac9:	0f ac fe 09          	shrd   esi,edi,0x9
c0005acd:	4d                   	dec    ebp
c0005ace:	31 ff                	xor    edi,edi
c0005ad0:	21 ee                	and    esi,ebp
c0005ad2:	01 c6                	add    esi,eax
c0005ad4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ad7:	11 d7                	adc    edi,edx
c0005ad9:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005adc:	39 fa                	cmp    edx,edi
c0005ade:	75 08                	jne    c0005ae8 <f_lseek+0x1ed>
c0005ae0:	39 f0                	cmp    eax,esi
c0005ae2:	0f 84 be 02 00 00    	je     c0005da6 <f_lseek+0x4ab>
c0005ae8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aeb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aef:	0f 89 80 02 00 00    	jns    c0005d75 <f_lseek+0x47a>
c0005af5:	83 ec 0c             	sub    esp,0xc
c0005af8:	6a 01                	push   0x1
c0005afa:	52                   	push   edx
c0005afb:	50                   	push   eax
c0005afc:	55                   	push   ebp
c0005afd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b01:	e9 5a 02 00 00       	jmp    c0005d60 <f_lseek+0x465>
c0005b06:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b0a:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b0d:	74 16                	je     c0005b25 <f_lseek+0x22a>
c0005b0f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b14:	76 0f                	jbe    c0005b25 <f_lseek+0x22a>
c0005b16:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b1d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b25:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b28:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b2b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b2e:	89 c7                	mov    edi,eax
c0005b30:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b34:	73 0d                	jae    c0005b43 <f_lseek+0x248>
c0005b36:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b3a:	75 07                	jne    c0005b43 <f_lseek+0x248>
c0005b3c:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b3f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b43:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b46:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b49:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b4d:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b54:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b5b:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b5e:	75 09                	jne    c0005b69 <f_lseek+0x26e>
c0005b60:	31 f6                	xor    esi,esi
c0005b62:	31 ff                	xor    edi,edi
c0005b64:	e9 af 01 00 00       	jmp    c0005d18 <f_lseek+0x41d>
c0005b69:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b6d:	89 d7                	mov    edi,edx
c0005b6f:	c1 e1 09             	shl    ecx,0x9
c0005b72:	09 c7                	or     edi,eax
c0005b74:	89 cd                	mov    ebp,ecx
c0005b76:	74 6d                	je     c0005be5 <f_lseek+0x2ea>
c0005b78:	83 c0 ff             	add    eax,0xffffffff
c0005b7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b7f:	83 d2 ff             	adc    edx,0xffffffff
c0005b82:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b89:	83 c0 ff             	add    eax,0xffffffff
c0005b8c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b90:	83 d2 ff             	adc    edx,0xffffffff
c0005b93:	31 ff                	xor    edi,edi
c0005b95:	57                   	push   edi
c0005b96:	51                   	push   ecx
c0005b97:	52                   	push   edx
c0005b98:	50                   	push   eax
c0005b99:	e8 2e fc 01 00       	call   c00257cc <__udivdi3>
c0005b9e:	83 c4 10             	add    esp,0x10
c0005ba1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ba5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005ba9:	57                   	push   edi
c0005baa:	55                   	push   ebp
c0005bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bb3:	e8 14 fc 01 00       	call   c00257cc <__udivdi3>
c0005bb8:	83 c4 10             	add    esp,0x10
c0005bbb:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bbf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bc3:	19 d1                	sbb    ecx,edx
c0005bc5:	72 1e                	jb     c0005be5 <f_lseek+0x2ea>
c0005bc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bcb:	89 e9                	mov    ecx,ebp
c0005bcd:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bd0:	f7 d9                	neg    ecx
c0005bd2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bd5:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005bd9:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005bdc:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005bdf:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005be3:	eb 28                	jmp    c0005c0d <f_lseek+0x312>
c0005be5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005be8:	85 c0                	test   eax,eax
c0005bea:	75 1e                	jne    c0005c0a <f_lseek+0x30f>
c0005bec:	31 d2                	xor    edx,edx
c0005bee:	89 d8                	mov    eax,ebx
c0005bf0:	e8 a9 d4 ff ff       	call   c000309e <create_chain>
c0005bf5:	83 f8 01             	cmp    eax,0x1
c0005bf8:	0f 84 b9 fd ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005bfe:	83 f8 ff             	cmp    eax,0xffffffff
c0005c01:	0f 84 c6 fd ff ff    	je     c00059cd <f_lseek+0xd2>
c0005c07:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c0a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c0d:	85 c0                	test   eax,eax
c0005c0f:	0f 84 4b ff ff ff    	je     c0005b60 <f_lseek+0x265>
c0005c15:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c19:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c21:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c24:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c28:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c2b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c2e:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c32:	0f 83 9d 00 00 00    	jae    c0005cd5 <f_lseek+0x3da>
c0005c38:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c3c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c40:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c43:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c47:	01 f2                	add    edx,esi
c0005c49:	11 f9                	adc    ecx,edi
c0005c4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c4f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c53:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c56:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c59:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c5c:	f6 c1 02             	test   cl,0x2
c0005c5f:	74 35                	je     c0005c96 <f_lseek+0x39b>
c0005c61:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c65:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c68:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c6b:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c6f:	73 16                	jae    c0005c87 <f_lseek+0x38c>
c0005c71:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c75:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c79:	88 ca                	mov    dl,cl
c0005c7b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c7e:	83 ca 40             	or     edx,0x40
c0005c81:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c84:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c87:	89 c2                	mov    edx,eax
c0005c89:	89 d8                	mov    eax,ebx
c0005c8b:	e8 0e d4 ff ff       	call   c000309e <create_chain>
c0005c90:	85 c0                	test   eax,eax
c0005c92:	75 0b                	jne    c0005c9f <f_lseek+0x3a4>
c0005c94:	eb 30                	jmp    c0005cc6 <f_lseek+0x3cb>
c0005c96:	89 c2                	mov    edx,eax
c0005c98:	89 d8                	mov    eax,ebx
c0005c9a:	e8 11 d1 ff ff       	call   c0002db0 <get_fat>
c0005c9f:	83 f8 ff             	cmp    eax,0xffffffff
c0005ca2:	0f 84 25 fd ff ff    	je     c00059cd <f_lseek+0xd2>
c0005ca8:	83 f8 01             	cmp    eax,0x1
c0005cab:	0f 86 06 fd ff ff    	jbe    c00059b7 <f_lseek+0xbc>
c0005cb1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cb5:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cb8:	0f 86 f9 fc ff ff    	jbe    c00059b7 <f_lseek+0xbc>
c0005cbe:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cc1:	e9 5b ff ff ff       	jmp    c0005c21 <f_lseek+0x326>
c0005cc6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ccd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cd5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005cd8:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005cdc:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005cdf:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ce2:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ce5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ceb:	0f 84 6f fe ff ff    	je     c0005b60 <f_lseek+0x265>
c0005cf1:	89 c2                	mov    edx,eax
c0005cf3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cf7:	e8 e7 bf ff ff       	call   c0001ce3 <clst2sect>
c0005cfc:	89 d7                	mov    edi,edx
c0005cfe:	09 c7                	or     edi,eax
c0005d00:	0f 84 b1 fc ff ff    	je     c00059b7 <f_lseek+0xbc>
c0005d06:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d0a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d11:	c1 ef 09             	shr    edi,0x9
c0005d14:	01 c6                	add    esi,eax
c0005d16:	11 d7                	adc    edi,edx
c0005d18:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d1b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d1e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d21:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d24:	19 d1                	sbb    ecx,edx
c0005d26:	73 0a                	jae    c0005d32 <f_lseek+0x437>
c0005d28:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d2b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d2e:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d32:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d37:	74 6d                	je     c0005da6 <f_lseek+0x4ab>
c0005d39:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d3c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d3f:	39 fa                	cmp    edx,edi
c0005d41:	75 04                	jne    c0005d47 <f_lseek+0x44c>
c0005d43:	39 f0                	cmp    eax,esi
c0005d45:	74 5f                	je     c0005da6 <f_lseek+0x4ab>
c0005d47:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d4a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d4e:	79 25                	jns    c0005d75 <f_lseek+0x47a>
c0005d50:	83 ec 0c             	sub    esp,0xc
c0005d53:	6a 01                	push   0x1
c0005d55:	52                   	push   edx
c0005d56:	50                   	push   eax
c0005d57:	55                   	push   ebp
c0005d58:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d5c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d60:	50                   	push   eax
c0005d61:	e8 af bc ff ff       	call   c0001a15 <disk_write>
c0005d66:	83 c4 20             	add    esp,0x20
c0005d69:	85 c0                	test   eax,eax
c0005d6b:	0f 85 5c fc ff ff    	jne    c00059cd <f_lseek+0xd2>
c0005d71:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d75:	83 ec 0c             	sub    esp,0xc
c0005d78:	6a 01                	push   0x1
c0005d7a:	57                   	push   edi
c0005d7b:	56                   	push   esi
c0005d7c:	55                   	push   ebp
c0005d7d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d81:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d85:	50                   	push   eax
c0005d86:	e8 74 bc ff ff       	call   c00019ff <disk_read>
c0005d8b:	83 c4 20             	add    esp,0x20
c0005d8e:	85 c0                	test   eax,eax
c0005d90:	0f 85 37 fc ff ff    	jne    c00059cd <f_lseek+0xd2>
c0005d96:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d99:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d9c:	eb 08                	jmp    c0005da6 <f_lseek+0x4ab>
c0005d9e:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005da6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005daa:	83 c4 3c             	add    esp,0x3c
c0005dad:	5b                   	pop    ebx
c0005dae:	5e                   	pop    esi
c0005daf:	5f                   	pop    edi
c0005db0:	5d                   	pop    ebp
c0005db1:	c3                   	ret    

c0005db2 <f_opendir>:
c0005db2:	56                   	push   esi
c0005db3:	b8 09 00 00 00       	mov    eax,0x9
c0005db8:	53                   	push   ebx
c0005db9:	83 ec 24             	sub    esp,0x24
c0005dbc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005dc0:	85 db                	test   ebx,ebx
c0005dc2:	0f 84 e6 00 00 00    	je     c0005eae <f_opendir+0xfc>
c0005dc8:	31 c9                	xor    ecx,ecx
c0005dca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dce:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005dd2:	e8 03 c7 ff ff       	call   c00024da <mount_volume>
c0005dd7:	85 c0                	test   eax,eax
c0005dd9:	0f 85 c9 00 00 00    	jne    c0005ea8 <f_opendir+0xf6>
c0005ddf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005de3:	83 ec 0c             	sub    esp,0xc
c0005de6:	89 03                	mov    DWORD PTR [ebx],eax
c0005de8:	68 60 04 00 00       	push   0x460
c0005ded:	e8 8b 24 00 00       	call   c000827d <ff_memalloc>
c0005df2:	83 c4 10             	add    esp,0x10
c0005df5:	89 c6                	mov    esi,eax
c0005df7:	b8 11 00 00 00       	mov    eax,0x11
c0005dfc:	85 f6                	test   esi,esi
c0005dfe:	0f 84 aa 00 00 00    	je     c0005eae <f_opendir+0xfc>
c0005e04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e08:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e0e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e11:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e14:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e18:	89 d8                	mov    eax,ebx
c0005e1a:	e8 31 ee ff ff       	call   c0004c50 <follow_path>
c0005e1f:	85 c0                	test   eax,eax
c0005e21:	75 61                	jne    c0005e84 <f_opendir+0xd2>
c0005e23:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e27:	78 46                	js     c0005e6f <f_opendir+0xbd>
c0005e29:	b8 05 00 00 00       	mov    eax,0x5
c0005e2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e32:	74 50                	je     c0005e84 <f_opendir+0xd2>
c0005e34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e38:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e3a:	3c 04                	cmp    al,0x4
c0005e3c:	75 26                	jne    c0005e64 <f_opendir+0xb2>
c0005e3e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e41:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e44:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e47:	30 d2                	xor    dl,dl
c0005e49:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e4d:	09 c2                	or     edx,eax
c0005e4f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e52:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e55:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e58:	89 da                	mov    edx,ebx
c0005e5a:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e5d:	e8 b4 ed ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0005e62:	eb 0b                	jmp    c0005e6f <f_opendir+0xbd>
c0005e64:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e67:	e8 59 ed ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0005e6c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e73:	31 d2                	xor    edx,edx
c0005e75:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e79:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e7d:	89 d8                	mov    eax,ebx
c0005e7f:	e8 22 d1 ff ff       	call   c0002fa6 <dir_sdi>
c0005e84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e88:	83 ec 0c             	sub    esp,0xc
c0005e8b:	56                   	push   esi
c0005e8c:	e8 02 24 00 00       	call   c0008293 <ff_memfree>
c0005e91:	83 c4 10             	add    esp,0x10
c0005e94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e98:	83 f8 04             	cmp    eax,0x4
c0005e9b:	74 06                	je     c0005ea3 <f_opendir+0xf1>
c0005e9d:	85 c0                	test   eax,eax
c0005e9f:	74 0d                	je     c0005eae <f_opendir+0xfc>
c0005ea1:	eb 05                	jmp    c0005ea8 <f_opendir+0xf6>
c0005ea3:	b8 05 00 00 00       	mov    eax,0x5
c0005ea8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005eae:	83 c4 24             	add    esp,0x24
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	c3                   	ret    

c0005eb4 <f_closedir>:
c0005eb4:	53                   	push   ebx
c0005eb5:	83 ec 18             	sub    esp,0x18
c0005eb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ebc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 86 c2 ff ff       	call   c000214d <validate>
c0005ec7:	85 c0                	test   eax,eax
c0005ec9:	75 06                	jne    c0005ed1 <f_closedir+0x1d>
c0005ecb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ed1:	83 c4 18             	add    esp,0x18
c0005ed4:	5b                   	pop    ebx
c0005ed5:	c3                   	ret    

c0005ed6 <f_readdir>:
c0005ed6:	57                   	push   edi
c0005ed7:	56                   	push   esi
c0005ed8:	53                   	push   ebx
c0005ed9:	83 ec 20             	sub    esp,0x20
c0005edc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ee0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ee4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ee8:	89 d8                	mov    eax,ebx
c0005eea:	e8 5e c2 ff ff       	call   c000214d <validate>
c0005eef:	85 c0                	test   eax,eax
c0005ef1:	75 77                	jne    c0005f6a <f_readdir+0x94>
c0005ef3:	85 ff                	test   edi,edi
c0005ef5:	75 0b                	jne    c0005f02 <f_readdir+0x2c>
c0005ef7:	31 d2                	xor    edx,edx
c0005ef9:	89 d8                	mov    eax,ebx
c0005efb:	e8 a6 d0 ff ff       	call   c0002fa6 <dir_sdi>
c0005f00:	eb 68                	jmp    c0005f6a <f_readdir+0x94>
c0005f02:	83 ec 0c             	sub    esp,0xc
c0005f05:	68 60 04 00 00       	push   0x460
c0005f0a:	e8 6e 23 00 00       	call   c000827d <ff_memalloc>
c0005f0f:	83 c4 10             	add    esp,0x10
c0005f12:	89 c6                	mov    esi,eax
c0005f14:	b8 11 00 00 00       	mov    eax,0x11
c0005f19:	85 f6                	test   esi,esi
c0005f1b:	74 4d                	je     c0005f6a <f_readdir+0x94>
c0005f1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f21:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f27:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f2a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f2d:	31 d2                	xor    edx,edx
c0005f2f:	89 d8                	mov    eax,ebx
c0005f31:	e8 80 d8 ff ff       	call   c00037b6 <dir_read>
c0005f36:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f3b:	75 19                	jne    c0005f56 <f_readdir+0x80>
c0005f3d:	89 fa                	mov    edx,edi
c0005f3f:	89 d8                	mov    eax,ebx
c0005f41:	e8 7e ea ff ff       	call   c00049c4 <get_fileinfo>
c0005f46:	31 d2                	xor    edx,edx
c0005f48:	89 d8                	mov    eax,ebx
c0005f4a:	e8 af d5 ff ff       	call   c00034fe <dir_next>
c0005f4f:	83 f8 04             	cmp    eax,0x4
c0005f52:	75 02                	jne    c0005f56 <f_readdir+0x80>
c0005f54:	31 c0                	xor    eax,eax
c0005f56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5a:	83 ec 0c             	sub    esp,0xc
c0005f5d:	56                   	push   esi
c0005f5e:	e8 30 23 00 00       	call   c0008293 <ff_memfree>
c0005f63:	83 c4 10             	add    esp,0x10
c0005f66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f6a:	83 c4 20             	add    esp,0x20
c0005f6d:	5b                   	pop    ebx
c0005f6e:	5e                   	pop    esi
c0005f6f:	5f                   	pop    edi
c0005f70:	c3                   	ret    

c0005f71 <f_stat>:
c0005f71:	57                   	push   edi
c0005f72:	31 c9                	xor    ecx,ecx
c0005f74:	56                   	push   esi
c0005f75:	53                   	push   ebx
c0005f76:	83 ec 50             	sub    esp,0x50
c0005f79:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f7d:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f81:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f85:	e8 50 c5 ff ff       	call   c00024da <mount_volume>
c0005f8a:	89 c3                	mov    ebx,eax
c0005f8c:	85 c0                	test   eax,eax
c0005f8e:	75 67                	jne    c0005ff7 <f_stat+0x86>
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	bb 11 00 00 00       	mov    ebx,0x11
c0005f98:	68 60 04 00 00       	push   0x460
c0005f9d:	e8 db 22 00 00       	call   c000827d <ff_memalloc>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	89 c6                	mov    esi,eax
c0005fa7:	85 c0                	test   eax,eax
c0005fa9:	74 4c                	je     c0005ff7 <f_stat+0x86>
c0005fab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005faf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fb5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fb8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fbb:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fbf:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fc3:	e8 88 ec ff ff       	call   c0004c50 <follow_path>
c0005fc8:	89 c3                	mov    ebx,eax
c0005fca:	85 c0                	test   eax,eax
c0005fcc:	75 1d                	jne    c0005feb <f_stat+0x7a>
c0005fce:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fd3:	78 11                	js     c0005fe6 <f_stat+0x75>
c0005fd5:	85 ff                	test   edi,edi
c0005fd7:	74 12                	je     c0005feb <f_stat+0x7a>
c0005fd9:	89 fa                	mov    edx,edi
c0005fdb:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fdf:	e8 e0 e9 ff ff       	call   c00049c4 <get_fileinfo>
c0005fe4:	eb 05                	jmp    c0005feb <f_stat+0x7a>
c0005fe6:	bb 06 00 00 00       	mov    ebx,0x6
c0005feb:	83 ec 0c             	sub    esp,0xc
c0005fee:	56                   	push   esi
c0005fef:	e8 9f 22 00 00       	call   c0008293 <ff_memfree>
c0005ff4:	83 c4 10             	add    esp,0x10
c0005ff7:	83 c4 50             	add    esp,0x50
c0005ffa:	89 d8                	mov    eax,ebx
c0005ffc:	5b                   	pop    ebx
c0005ffd:	5e                   	pop    esi
c0005ffe:	5f                   	pop    edi
c0005fff:	c3                   	ret    

c0006000 <f_getfree>:
c0006000:	55                   	push   ebp
c0006001:	31 c9                	xor    ecx,ecx
c0006003:	57                   	push   edi
c0006004:	56                   	push   esi
c0006005:	53                   	push   ebx
c0006006:	83 ec 5c             	sub    esp,0x5c
c0006009:	8d 54 24 24          	lea    edx,[esp+0x24]
c000600d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006011:	e8 c4 c4 ff ff       	call   c00024da <mount_volume>
c0006016:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000601a:	85 c0                	test   eax,eax
c000601c:	0f 85 9d 01 00 00    	jne    c00061bf <f_getfree+0x1bf>
c0006022:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006026:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000602a:	89 02                	mov    DWORD PTR [edx],eax
c000602c:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000602f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006032:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006035:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006039:	39 f2                	cmp    edx,esi
c000603b:	77 0b                	ja     c0006048 <f_getfree+0x48>
c000603d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006041:	89 10                	mov    DWORD PTR [eax],edx
c0006043:	e9 77 01 00 00       	jmp    c00061bf <f_getfree+0x1bf>
c0006048:	8a 10                	mov    dl,BYTE PTR [eax]
c000604a:	80 fa 01             	cmp    dl,0x1
c000604d:	75 3a                	jne    c0006089 <f_getfree+0x89>
c000604f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006053:	be 02 00 00 00       	mov    esi,0x2
c0006058:	31 db                	xor    ebx,ebx
c000605a:	89 f2                	mov    edx,esi
c000605c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006060:	e8 4b cd ff ff       	call   c0002db0 <get_fat>
c0006065:	83 f8 ff             	cmp    eax,0xffffffff
c0006068:	0f 84 28 01 00 00    	je     c0006196 <f_getfree+0x196>
c000606e:	83 f8 01             	cmp    eax,0x1
c0006071:	0f 84 29 01 00 00    	je     c00061a0 <f_getfree+0x1a0>
c0006077:	83 d3 00             	adc    ebx,0x0
c000607a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000607e:	46                   	inc    esi
c000607f:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006082:	77 d6                	ja     c000605a <f_getfree+0x5a>
c0006084:	e9 25 01 00 00       	jmp    c00061ae <f_getfree+0x1ae>
c0006089:	80 fa 04             	cmp    dl,0x4
c000608c:	0f 85 88 00 00 00    	jne    c000611a <f_getfree+0x11a>
c0006092:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006095:	31 ed                	xor    ebp,ebp
c0006097:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c000609a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000609e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060a2:	31 db                	xor    ebx,ebx
c00060a4:	85 ed                	test   ebp,ebp
c00060a6:	75 3f                	jne    c00060e7 <f_getfree+0xe7>
c00060a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060b0:	83 c0 01             	add    eax,0x1
c00060b3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060b7:	83 d2 00             	adc    edx,0x0
c00060ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060c2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060ca:	e8 59 c1 ff ff       	call   c0002228 <move_window>
c00060cf:	85 c0                	test   eax,eax
c00060d1:	0f 85 d3 00 00 00    	jne    c00061aa <f_getfree+0x1aa>
c00060d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060eb:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060ee:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060f2:	89 cf                	mov    edi,ecx
c00060f4:	85 f6                	test   esi,esi
c00060f6:	74 12                	je     c000610a <f_getfree+0x10a>
c00060f8:	88 c1                	mov    cl,al
c00060fa:	83 e1 01             	and    ecx,0x1
c00060fd:	80 f9 01             	cmp    cl,0x1
c0006100:	83 d3 00             	adc    ebx,0x0
c0006103:	d0 e8                	shr    al,1
c0006105:	4e                   	dec    esi
c0006106:	39 fe                	cmp    esi,edi
c0006108:	75 ea                	jne    c00060f4 <f_getfree+0xf4>
c000610a:	45                   	inc    ebp
c000610b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006111:	85 f6                	test   esi,esi
c0006113:	75 8f                	jne    c00060a4 <f_getfree+0xa4>
c0006115:	e9 94 00 00 00       	jmp    c00061ae <f_getfree+0x1ae>
c000611a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000611d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006120:	31 f6                	xor    esi,esi
c0006122:	31 db                	xor    ebx,ebx
c0006124:	85 f6                	test   esi,esi
c0006126:	75 1b                	jne    c0006143 <f_getfree+0x143>
c0006128:	89 d7                	mov    edi,edx
c000612a:	89 cd                	mov    ebp,ecx
c000612c:	83 c7 01             	add    edi,0x1
c000612f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006133:	83 d5 00             	adc    ebp,0x0
c0006136:	e8 ed c0 ff ff       	call   c0002228 <move_window>
c000613b:	85 c0                	test   eax,eax
c000613d:	75 6b                	jne    c00061aa <f_getfree+0x1aa>
c000613f:	89 fa                	mov    edx,edi
c0006141:	89 e9                	mov    ecx,ebp
c0006143:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006147:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000614b:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000614f:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006152:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006156:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000615a:	75 11                	jne    c000616d <f_getfree+0x16d>
c000615c:	e8 e9 b8 ff ff       	call   c0001a4a <ld_word>
c0006161:	66 83 f8 01          	cmp    ax,0x1
c0006165:	83 d3 00             	adc    ebx,0x0
c0006168:	83 c6 02             	add    esi,0x2
c000616b:	eb 13                	jmp    c0006180 <f_getfree+0x180>
c000616d:	e8 e5 b8 ff ff       	call   c0001a57 <ld_dword>
c0006172:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006177:	83 f8 01             	cmp    eax,0x1
c000617a:	83 d3 00             	adc    ebx,0x0
c000617d:	83 c6 04             	add    esi,0x4
c0006180:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006186:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000618a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000618e:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006192:	75 90                	jne    c0006124 <f_getfree+0x124>
c0006194:	eb 18                	jmp    c00061ae <f_getfree+0x1ae>
c0006196:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000619e:	eb 0e                	jmp    c00061ae <f_getfree+0x1ae>
c00061a0:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061a8:	eb 04                	jmp    c00061ae <f_getfree+0x1ae>
c00061aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061ae:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061b2:	89 18                	mov    DWORD PTR [eax],ebx
c00061b4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061b8:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061bb:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061c3:	83 c4 5c             	add    esp,0x5c
c00061c6:	5b                   	pop    ebx
c00061c7:	5e                   	pop    esi
c00061c8:	5f                   	pop    edi
c00061c9:	5d                   	pop    ebp
c00061ca:	c3                   	ret    

c00061cb <f_truncate>:
c00061cb:	56                   	push   esi
c00061cc:	53                   	push   ebx
c00061cd:	83 ec 14             	sub    esp,0x14
c00061d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061d4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061d8:	89 d8                	mov    eax,ebx
c00061da:	e8 6e bf ff ff       	call   c000214d <validate>
c00061df:	89 c6                	mov    esi,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	0f 85 d2 00 00 00    	jne    c00062bb <f_truncate+0xf0>
c00061e9:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061ed:	85 f6                	test   esi,esi
c00061ef:	0f 85 c6 00 00 00    	jne    c00062bb <f_truncate+0xf0>
c00061f5:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061f9:	0f 84 b7 00 00 00    	je     c00062b6 <f_truncate+0xeb>
c00061ff:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006202:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006205:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006208:	89 d1                	mov    ecx,edx
c000620a:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000620d:	0f 83 a8 00 00 00    	jae    c00062bb <f_truncate+0xf0>
c0006213:	09 c2                	or     edx,eax
c0006215:	75 15                	jne    c000622c <f_truncate+0x61>
c0006217:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000621a:	31 c9                	xor    ecx,ecx
c000621c:	89 d8                	mov    eax,ebx
c000621e:	e8 7a d0 ff ff       	call   c000329d <remove_chain>
c0006223:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000622a:	eb 35                	jmp    c0006261 <f_truncate+0x96>
c000622c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000622f:	89 d8                	mov    eax,ebx
c0006231:	e8 7a cb ff ff       	call   c0002db0 <get_fat>
c0006236:	89 c2                	mov    edx,eax
c0006238:	b8 01 00 00 00       	mov    eax,0x1
c000623d:	83 fa ff             	cmp    edx,0xffffffff
c0006240:	74 1f                	je     c0006261 <f_truncate+0x96>
c0006242:	b8 02 00 00 00       	mov    eax,0x2
c0006247:	83 fa 01             	cmp    edx,0x1
c000624a:	74 15                	je     c0006261 <f_truncate+0x96>
c000624c:	31 c0                	xor    eax,eax
c000624e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006252:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006255:	76 0a                	jbe    c0006261 <f_truncate+0x96>
c0006257:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000625a:	89 d8                	mov    eax,ebx
c000625c:	e8 3c d0 ff ff       	call   c000329d <remove_chain>
c0006261:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006264:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006267:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000626a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000626d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006270:	83 ca 40             	or     edx,0x40
c0006273:	85 c0                	test   eax,eax
c0006275:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006278:	75 35                	jne    c00062af <f_truncate+0xe4>
c000627a:	84 d2                	test   dl,dl
c000627c:	79 3d                	jns    c00062bb <f_truncate+0xf0>
c000627e:	83 ec 0c             	sub    esp,0xc
c0006281:	8d 43 50             	lea    eax,[ebx+0x50]
c0006284:	6a 01                	push   0x1
c0006286:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006289:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000628c:	50                   	push   eax
c000628d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006291:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006295:	50                   	push   eax
c0006296:	e8 7a b7 ff ff       	call   c0001a15 <disk_write>
c000629b:	83 c4 20             	add    esp,0x20
c000629e:	85 c0                	test   eax,eax
c00062a0:	75 08                	jne    c00062aa <f_truncate+0xdf>
c00062a2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062a6:	31 f6                	xor    esi,esi
c00062a8:	eb 11                	jmp    c00062bb <f_truncate+0xf0>
c00062aa:	b8 01 00 00 00       	mov    eax,0x1
c00062af:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062b2:	89 c6                	mov    esi,eax
c00062b4:	eb 05                	jmp    c00062bb <f_truncate+0xf0>
c00062b6:	be 07 00 00 00       	mov    esi,0x7
c00062bb:	89 f0                	mov    eax,esi
c00062bd:	83 c4 14             	add    esp,0x14
c00062c0:	5b                   	pop    ebx
c00062c1:	5e                   	pop    esi
c00062c2:	c3                   	ret    

c00062c3 <f_unlink>:
c00062c3:	56                   	push   esi
c00062c4:	b9 02 00 00 00       	mov    ecx,0x2
c00062c9:	53                   	push   ebx
c00062ca:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062d4:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062db:	e8 fa c1 ff ff       	call   c00024da <mount_volume>
c00062e0:	85 c0                	test   eax,eax
c00062e2:	0f 85 55 01 00 00    	jne    c000643d <f_unlink+0x17a>
c00062e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ec:	83 ec 0c             	sub    esp,0xc
c00062ef:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062f3:	68 60 04 00 00       	push   0x460
c00062f8:	e8 80 1f 00 00       	call   c000827d <ff_memalloc>
c00062fd:	83 c4 10             	add    esp,0x10
c0006300:	89 c3                	mov    ebx,eax
c0006302:	b8 11 00 00 00       	mov    eax,0x11
c0006307:	85 db                	test   ebx,ebx
c0006309:	0f 84 2e 01 00 00    	je     c000643d <f_unlink+0x17a>
c000630f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006313:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006319:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000631c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000631f:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006326:	8d 44 24 48          	lea    eax,[esp+0x48]
c000632a:	e8 21 e9 ff ff       	call   c0004c50 <follow_path>
c000632f:	85 c0                	test   eax,eax
c0006331:	0f 85 f2 00 00 00    	jne    c0006429 <f_unlink+0x166>
c0006337:	b8 06 00 00 00       	mov    eax,0x6
c000633c:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006344:	0f 88 df 00 00 00    	js     c0006429 <f_unlink+0x166>
c000634a:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000634f:	74 0a                	je     c000635b <f_unlink+0x98>
c0006351:	b8 07 00 00 00       	mov    eax,0x7
c0006356:	e9 ce 00 00 00       	jmp    c0006429 <f_unlink+0x166>
c000635b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000635f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006363:	8a 02                	mov    al,BYTE PTR [edx]
c0006365:	3c 04                	cmp    al,0x4
c0006367:	75 12                	jne    c000637b <f_unlink+0xb8>
c0006369:	8d 42 10             	lea    eax,[edx+0x10]
c000636c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006370:	e8 a1 e8 ff ff       	call   c0004c16 <init_alloc_info.isra.2>
c0006375:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006379:	eb 0e                	jmp    c0006389 <f_unlink+0xc6>
c000637b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006382:	e8 3e e8 ff ff       	call   c0004bc5 <ld_clust.isra.0>
c0006387:	89 c6                	mov    esi,eax
c0006389:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000638e:	75 12                	jne    c00063a2 <f_unlink+0xdf>
c0006390:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006394:	e8 94 d6 ff ff       	call   c0003a2d <dir_remove>
c0006399:	85 c0                	test   eax,eax
c000639b:	74 6c                	je     c0006409 <f_unlink+0x146>
c000639d:	e9 87 00 00 00       	jmp    c0006429 <f_unlink+0x166>
c00063a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063a6:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063ad:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063b4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063b7:	75 21                	jne    c00063da <f_unlink+0x117>
c00063b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063bd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063c1:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063c8:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063cf:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063d3:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063da:	31 d2                	xor    edx,edx
c00063dc:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063e3:	e8 be cb ff ff       	call   c0002fa6 <dir_sdi>
c00063e8:	85 c0                	test   eax,eax
c00063ea:	75 3d                	jne    c0006429 <f_unlink+0x166>
c00063ec:	31 d2                	xor    edx,edx
c00063ee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063f5:	e8 bc d3 ff ff       	call   c00037b6 <dir_read>
c00063fa:	85 c0                	test   eax,eax
c00063fc:	0f 84 4f ff ff ff    	je     c0006351 <f_unlink+0x8e>
c0006402:	83 f8 04             	cmp    eax,0x4
c0006405:	75 22                	jne    c0006429 <f_unlink+0x166>
c0006407:	eb 87                	jmp    c0006390 <f_unlink+0xcd>
c0006409:	85 f6                	test   esi,esi
c000640b:	75 0b                	jne    c0006418 <f_unlink+0x155>
c000640d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006411:	e8 3d df ff ff       	call   c0004353 <sync_fs>
c0006416:	eb 11                	jmp    c0006429 <f_unlink+0x166>
c0006418:	31 c9                	xor    ecx,ecx
c000641a:	89 f2                	mov    edx,esi
c000641c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006420:	e8 78 ce ff ff       	call   c000329d <remove_chain>
c0006425:	85 c0                	test   eax,eax
c0006427:	74 e4                	je     c000640d <f_unlink+0x14a>
c0006429:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000642d:	83 ec 0c             	sub    esp,0xc
c0006430:	53                   	push   ebx
c0006431:	e8 5d 1e 00 00       	call   c0008293 <ff_memfree>
c0006436:	83 c4 10             	add    esp,0x10
c0006439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000643d:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006443:	5b                   	pop    ebx
c0006444:	5e                   	pop    esi
c0006445:	c3                   	ret    

c0006446 <f_mkdir>:
c0006446:	57                   	push   edi
c0006447:	b9 02 00 00 00       	mov    ecx,0x2
c000644c:	56                   	push   esi
c000644d:	53                   	push   ebx
c000644e:	83 c4 80             	add    esp,0xffffff80
c0006451:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006455:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000645c:	e8 79 c0 ff ff       	call   c00024da <mount_volume>
c0006461:	89 c3                	mov    ebx,eax
c0006463:	85 c0                	test   eax,eax
c0006465:	0f 85 fe 01 00 00    	jne    c0006669 <f_mkdir+0x223>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	bb 11 00 00 00       	mov    ebx,0x11
c0006474:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006478:	83 ec 0c             	sub    esp,0xc
c000647b:	68 60 04 00 00       	push   0x460
c0006480:	e8 f8 1d 00 00       	call   c000827d <ff_memalloc>
c0006485:	83 c4 10             	add    esp,0x10
c0006488:	89 c7                	mov    edi,eax
c000648a:	85 c0                	test   eax,eax
c000648c:	0f 84 d7 01 00 00    	je     c0006669 <f_mkdir+0x223>
c0006492:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006496:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c000649c:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000649f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064a2:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064a9:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064ad:	e8 9e e7 ff ff       	call   c0004c50 <follow_path>
c00064b2:	89 c3                	mov    ebx,eax
c00064b4:	85 c0                	test   eax,eax
c00064b6:	74 3e                	je     c00064f6 <f_mkdir+0xb0>
c00064b8:	83 f8 04             	cmp    eax,0x4
c00064bb:	75 3e                	jne    c00064fb <f_mkdir+0xb5>
c00064bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c1:	31 d2                	xor    edx,edx
c00064c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064c7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064cb:	e8 ce cb ff ff       	call   c000309e <create_chain>
c00064d0:	89 c6                	mov    esi,eax
c00064d2:	85 c0                	test   eax,eax
c00064d4:	74 0c                	je     c00064e2 <f_mkdir+0x9c>
c00064d6:	bb 02 00 00 00       	mov    ebx,0x2
c00064db:	83 f8 01             	cmp    eax,0x1
c00064de:	74 07                	je     c00064e7 <f_mkdir+0xa1>
c00064e0:	eb 2a                	jmp    c000650c <f_mkdir+0xc6>
c00064e2:	bb 07 00 00 00       	mov    ebx,0x7
c00064e7:	31 c9                	xor    ecx,ecx
c00064e9:	89 f2                	mov    edx,esi
c00064eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064ef:	e8 a9 cd ff ff       	call   c000329d <remove_chain>
c00064f4:	eb 05                	jmp    c00064fb <f_mkdir+0xb5>
c00064f6:	bb 08 00 00 00       	mov    ebx,0x8
c00064fb:	83 ec 0c             	sub    esp,0xc
c00064fe:	57                   	push   edi
c00064ff:	e8 8f 1d 00 00       	call   c0008293 <ff_memfree>
c0006504:	83 c4 10             	add    esp,0x10
c0006507:	e9 5d 01 00 00       	jmp    c0006669 <f_mkdir+0x223>
c000650c:	bb 01 00 00 00       	mov    ebx,0x1
c0006511:	83 f8 ff             	cmp    eax,0xffffffff
c0006514:	74 d1                	je     c00064e7 <f_mkdir+0xa1>
c0006516:	89 f2                	mov    edx,esi
c0006518:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651c:	e8 c4 ce ff ff       	call   c00033e5 <dir_clear>
c0006521:	89 c3                	mov    ebx,eax
c0006523:	85 c0                	test   eax,eax
c0006525:	75 c0                	jne    c00064e7 <f_mkdir+0xa1>
c0006527:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000652b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000652e:	74 69                	je     c0006599 <f_mkdir+0x153>
c0006530:	b9 0b 00 00 00       	mov    ecx,0xb
c0006535:	83 c0 54             	add    eax,0x54
c0006538:	ba 20 00 00 00       	mov    edx,0x20
c000653d:	e8 9c b5 ff ff       	call   c0001ade <mem_set>
c0006542:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006546:	ba 00 00 21 50       	mov    edx,0x50210000
c000654b:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000654f:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006553:	83 c0 6a             	add    eax,0x6a
c0006556:	e8 65 b5 ff ff       	call   c0001ac0 <st_dword>
c000655b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655f:	89 f1                	mov    ecx,esi
c0006561:	8d 50 54             	lea    edx,[eax+0x54]
c0006564:	e8 85 e6 ff ff       	call   c0004bee <st_clust.isra.1>
c0006569:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000656d:	b9 20 00 00 00       	mov    ecx,0x20
c0006572:	8d 50 54             	lea    edx,[eax+0x54]
c0006575:	83 c0 74             	add    eax,0x74
c0006578:	e8 4c b5 ff ff       	call   c0001ac9 <mem_cpy>
c000657d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006581:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006585:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006589:	8d 50 74             	lea    edx,[eax+0x74]
c000658c:	e8 5d e6 ff ff       	call   c0004bee <st_clust.isra.1>
c0006591:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006595:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006599:	8d 44 24 34          	lea    eax,[esp+0x34]
c000659d:	e8 2f db ff ff       	call   c00040d1 <dir_register>
c00065a2:	89 c3                	mov    ebx,eax
c00065a4:	85 c0                	test   eax,eax
c00065a6:	0f 85 3b ff ff ff    	jne    c00064e7 <f_mkdir+0xa1>
c00065ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065b3:	75 74                	jne    c0006629 <f_mkdir+0x1e3>
c00065b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065b8:	ba 00 00 21 50       	mov    edx,0x50210000
c00065bd:	83 c0 0c             	add    eax,0xc
c00065c0:	e8 fb b4 ff ff       	call   c0001ac0 <st_dword>
c00065c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065c9:	89 f2                	mov    edx,esi
c00065cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ce:	83 c0 34             	add    eax,0x34
c00065d1:	e8 ea b4 ff ff       	call   c0001ac0 <st_dword>
c00065d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065da:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065e1:	c1 e2 09             	shl    edx,0x9
c00065e4:	83 c0 38             	add    eax,0x38
c00065e7:	e8 d4 b4 ff ff       	call   c0001ac0 <st_dword>
c00065ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f0:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065f4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065f7:	c1 e2 09             	shl    edx,0x9
c00065fa:	83 c0 28             	add    eax,0x28
c00065fd:	e8 be b4 ff ff       	call   c0001ac0 <st_dword>
c0006602:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006606:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006609:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000660d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006610:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006614:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006618:	e8 8b d3 ff ff       	call   c00039a8 <store_xdir>
c000661d:	89 c3                	mov    ebx,eax
c000661f:	85 c0                	test   eax,eax
c0006621:	0f 85 d4 fe ff ff    	jne    c00064fb <f_mkdir+0xb5>
c0006627:	eb 30                	jmp    c0006659 <f_mkdir+0x213>
c0006629:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000662d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006632:	83 c0 16             	add    eax,0x16
c0006635:	e8 86 b4 ff ff       	call   c0001ac0 <st_dword>
c000663a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663e:	89 f1                	mov    ecx,esi
c0006640:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006644:	e8 a5 e5 ff ff       	call   c0004bee <st_clust.isra.1>
c0006649:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000664d:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006651:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006655:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006659:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000665d:	e8 f1 dc ff ff       	call   c0004353 <sync_fs>
c0006662:	89 c3                	mov    ebx,eax
c0006664:	e9 92 fe ff ff       	jmp    c00064fb <f_mkdir+0xb5>
c0006669:	83 ec 80             	sub    esp,0xffffff80
c000666c:	89 d8                	mov    eax,ebx
c000666e:	5b                   	pop    ebx
c000666f:	5e                   	pop    esi
c0006670:	5f                   	pop    edi
c0006671:	c3                   	ret    

c0006672 <f_rename>:
c0006672:	55                   	push   ebp
c0006673:	57                   	push   edi
c0006674:	56                   	push   esi
c0006675:	53                   	push   ebx
c0006676:	81 ec fc 00 00 00    	sub    esp,0xfc
c000667c:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006683:	e8 a4 b9 ff ff       	call   c000202c <get_ldnumber>
c0006688:	b9 02 00 00 00       	mov    ecx,0x2
c000668d:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006691:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006698:	e8 3d be ff ff       	call   c00024da <mount_volume>
c000669d:	85 c0                	test   eax,eax
c000669f:	0f 85 b5 02 00 00    	jne    c000695a <f_rename+0x2e8>
c00066a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066a9:	83 ec 0c             	sub    esp,0xc
c00066ac:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066b0:	68 60 04 00 00       	push   0x460
c00066b5:	e8 c3 1b 00 00       	call   c000827d <ff_memalloc>
c00066ba:	83 c4 10             	add    esp,0x10
c00066bd:	89 c3                	mov    ebx,eax
c00066bf:	b8 11 00 00 00       	mov    eax,0x11
c00066c4:	85 db                	test   ebx,ebx
c00066c6:	0f 84 8e 02 00 00    	je     c000695a <f_rename+0x2e8>
c00066cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066d6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066d9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066dc:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066e3:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066e7:	e8 64 e5 ff ff       	call   c0004c50 <follow_path>
c00066ec:	85 c0                	test   eax,eax
c00066ee:	0f 85 52 02 00 00    	jne    c0006946 <f_rename+0x2d4>
c00066f4:	b8 06 00 00 00       	mov    eax,0x6
c00066f9:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006701:	0f 85 3f 02 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006707:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670e:	0f 85 05 01 00 00    	jne    c0006819 <f_rename+0x1a7>
c0006714:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006717:	b9 40 00 00 00       	mov    ecx,0x40
c000671c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006720:	e8 a4 b3 ff ff       	call   c0001ac9 <mem_cpy>
c0006725:	b9 4c 00 00 00       	mov    ecx,0x4c
c000672a:	8d 54 24 58          	lea    edx,[esp+0x58]
c000672e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006735:	e8 8f b3 ff ff       	call   c0001ac9 <mem_cpy>
c000673a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006741:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006748:	e8 03 e5 ff ff       	call   c0004c50 <follow_path>
c000674d:	85 c0                	test   eax,eax
c000674f:	75 29                	jne    c000677a <f_rename+0x108>
c0006751:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006755:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000675c:	74 0a                	je     c0006768 <f_rename+0xf6>
c000675e:	b8 08 00 00 00       	mov    eax,0x8
c0006763:	e9 de 01 00 00       	jmp    c0006946 <f_rename+0x2d4>
c0006768:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000676f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006776:	75 e6                	jne    c000675e <f_rename+0xec>
c0006778:	eb 09                	jmp    c0006783 <f_rename+0x111>
c000677a:	83 f8 04             	cmp    eax,0x4
c000677d:	0f 85 c3 01 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006783:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000678a:	e8 42 d9 ff ff       	call   c00040d1 <dir_register>
c000678f:	85 c0                	test   eax,eax
c0006791:	0f 85 af 01 00 00    	jne    c0006946 <f_rename+0x2d4>
c0006797:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679b:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000679e:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067a1:	89 c5                	mov    ebp,eax
c00067a3:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067a6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067aa:	8d 46 24             	lea    eax,[esi+0x24]
c00067ad:	e8 98 b2 ff ff       	call   c0001a4a <ld_word>
c00067b2:	b9 40 00 00 00       	mov    ecx,0x40
c00067b7:	89 c7                	mov    edi,eax
c00067b9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067bd:	89 f0                	mov    eax,esi
c00067bf:	e8 05 b3 ff ff       	call   c0001ac9 <mem_cpy>
c00067c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067c8:	89 e9                	mov    ecx,ebp
c00067ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cd:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067d0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067db:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067de:	0f b7 d7             	movzx  edx,di
c00067e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e4:	83 c0 24             	add    eax,0x24
c00067e7:	e8 d0 b2 ff ff       	call   c0001abc <st_word>
c00067ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067f3:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067f6:	a8 10                	test   al,0x10
c00067f8:	75 06                	jne    c0006800 <f_rename+0x18e>
c00067fa:	83 c8 20             	or     eax,0x20
c00067fd:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006800:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006807:	e8 9c d1 ff ff       	call   c00039a8 <store_xdir>
c000680c:	85 c0                	test   eax,eax
c000680e:	0f 84 1c 01 00 00    	je     c0006930 <f_rename+0x2be>
c0006814:	e9 2d 01 00 00       	jmp    c0006946 <f_rename+0x2d4>
c0006819:	b9 20 00 00 00       	mov    ecx,0x20
c000681e:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006825:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006829:	e8 9b b2 ff ff       	call   c0001ac9 <mem_cpy>
c000682e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006833:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006837:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683e:	e8 86 b2 ff ff       	call   c0001ac9 <mem_cpy>
c0006843:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006851:	e8 fa e3 ff ff       	call   c0004c50 <follow_path>
c0006856:	85 c0                	test   eax,eax
c0006858:	75 27                	jne    c0006881 <f_rename+0x20f>
c000685a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006865:	0f 85 f3 fe ff ff    	jne    c000675e <f_rename+0xec>
c000686b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006872:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006879:	0f 85 df fe ff ff    	jne    c000675e <f_rename+0xec>
c000687f:	eb 09                	jmp    c000688a <f_rename+0x218>
c0006881:	83 f8 04             	cmp    eax,0x4
c0006884:	0f 85 bc 00 00 00    	jne    c0006946 <f_rename+0x2d4>
c000688a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006891:	e8 3b d8 ff ff       	call   c00040d1 <dir_register>
c0006896:	85 c0                	test   eax,eax
c0006898:	0f 85 a8 00 00 00    	jne    c0006946 <f_rename+0x2d4>
c000689e:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068a5:	b9 13 00 00 00       	mov    ecx,0x13
c00068aa:	8d 46 0d             	lea    eax,[esi+0xd]
c00068ad:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068b1:	e8 13 b2 ff ff       	call   c0001ac9 <mem_cpy>
c00068b6:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068ba:	a8 10                	test   al,0x10
c00068bc:	75 03                	jne    c00068c1 <f_rename+0x24f>
c00068be:	83 c8 20             	or     eax,0x20
c00068c1:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068cc:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068d0:	74 5e                	je     c0006930 <f_rename+0x2be>
c00068d2:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068d9:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068dd:	74 51                	je     c0006930 <f_rename+0x2be>
c00068df:	89 f2                	mov    edx,esi
c00068e1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068e5:	8a 07                	mov    al,BYTE PTR [edi]
c00068e7:	e8 d9 e2 ff ff       	call   c0004bc5 <ld_clust.isra.0>
c00068ec:	89 c2                	mov    edx,eax
c00068ee:	89 f8                	mov    eax,edi
c00068f0:	e8 ee b3 ff ff       	call   c0001ce3 <clst2sect>
c00068f5:	89 c6                	mov    esi,eax
c00068f7:	89 d1                	mov    ecx,edx
c00068f9:	b8 02 00 00 00       	mov    eax,0x2
c00068fe:	09 f2                	or     edx,esi
c0006900:	74 44                	je     c0006946 <f_rename+0x2d4>
c0006902:	89 f2                	mov    edx,esi
c0006904:	89 f8                	mov    eax,edi
c0006906:	e8 1d b9 ff ff       	call   c0002228 <move_window>
c000690b:	85 c0                	test   eax,eax
c000690d:	75 37                	jne    c0006946 <f_rename+0x2d4>
c000690f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006913:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006917:	75 17                	jne    c0006930 <f_rename+0x2be>
c0006919:	8d 50 74             	lea    edx,[eax+0x74]
c000691c:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006923:	e8 c6 e2 ff ff       	call   c0004bee <st_clust.isra.1>
c0006928:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000692c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006930:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006934:	e8 f4 d0 ff ff       	call   c0003a2d <dir_remove>
c0006939:	85 c0                	test   eax,eax
c000693b:	75 09                	jne    c0006946 <f_rename+0x2d4>
c000693d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006941:	e8 0d da ff ff       	call   c0004353 <sync_fs>
c0006946:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000694a:	83 ec 0c             	sub    esp,0xc
c000694d:	53                   	push   ebx
c000694e:	e8 40 19 00 00       	call   c0008293 <ff_memfree>
c0006953:	83 c4 10             	add    esp,0x10
c0006956:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000695a:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006960:	5b                   	pop    ebx
c0006961:	5e                   	pop    esi
c0006962:	5f                   	pop    edi
c0006963:	5d                   	pop    ebp
c0006964:	c3                   	ret    

c0006965 <f_chmod>:
c0006965:	57                   	push   edi
c0006966:	b9 02 00 00 00       	mov    ecx,0x2
c000696b:	56                   	push   esi
c000696c:	53                   	push   ebx
c000696d:	83 ec 60             	sub    esp,0x60
c0006970:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006974:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006978:	8d 54 24 10          	lea    edx,[esp+0x10]
c000697c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006980:	e8 55 bb ff ff       	call   c00024da <mount_volume>
c0006985:	85 c0                	test   eax,eax
c0006987:	0f 85 af 00 00 00    	jne    c0006a3c <f_chmod+0xd7>
c000698d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006991:	83 ec 0c             	sub    esp,0xc
c0006994:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006998:	68 60 04 00 00       	push   0x460
c000699d:	e8 db 18 00 00       	call   c000827d <ff_memalloc>
c00069a2:	83 c4 10             	add    esp,0x10
c00069a5:	89 c6                	mov    esi,eax
c00069a7:	b8 11 00 00 00       	mov    eax,0x11
c00069ac:	85 f6                	test   esi,esi
c00069ae:	0f 84 88 00 00 00    	je     c0006a3c <f_chmod+0xd7>
c00069b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069b8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069be:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069c4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069cc:	e8 7f e2 ff ff       	call   c0004c50 <follow_path>
c00069d1:	85 c0                	test   eax,eax
c00069d3:	75 53                	jne    c0006a28 <f_chmod+0xc3>
c00069d5:	b8 06 00 00 00       	mov    eax,0x6
c00069da:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069df:	75 47                	jne    c0006a28 <f_chmod+0xc3>
c00069e1:	89 f9                	mov    ecx,edi
c00069e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069e7:	83 e1 27             	and    ecx,0x27
c00069ea:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069ed:	75 1d                	jne    c0006a0c <f_chmod+0xa7>
c00069ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069f2:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069f5:	21 cb                	and    ebx,ecx
c00069f7:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069fa:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a01:	e8 a2 cf ff ff       	call   c00039a8 <store_xdir>
c0006a06:	85 c0                	test   eax,eax
c0006a08:	75 1e                	jne    c0006a28 <f_chmod+0xc3>
c0006a0a:	eb 13                	jmp    c0006a1f <f_chmod+0xba>
c0006a0c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a10:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a13:	21 cb                	and    ebx,ecx
c0006a15:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a18:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a23:	e8 2b d9 ff ff       	call   c0004353 <sync_fs>
c0006a28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a2c:	83 ec 0c             	sub    esp,0xc
c0006a2f:	56                   	push   esi
c0006a30:	e8 5e 18 00 00       	call   c0008293 <ff_memfree>
c0006a35:	83 c4 10             	add    esp,0x10
c0006a38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a3c:	83 c4 60             	add    esp,0x60
c0006a3f:	5b                   	pop    ebx
c0006a40:	5e                   	pop    esi
c0006a41:	5f                   	pop    edi
c0006a42:	c3                   	ret    

c0006a43 <f_utime>:
c0006a43:	56                   	push   esi
c0006a44:	b9 02 00 00 00       	mov    ecx,0x2
c0006a49:	53                   	push   ebx
c0006a4a:	83 ec 64             	sub    esp,0x64
c0006a4d:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a51:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a59:	e8 7c ba ff ff       	call   c00024da <mount_volume>
c0006a5e:	85 c0                	test   eax,eax
c0006a60:	0f 85 b5 00 00 00    	jne    c0006b1b <f_utime+0xd8>
c0006a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a6a:	83 ec 0c             	sub    esp,0xc
c0006a6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a71:	68 60 04 00 00       	push   0x460
c0006a76:	e8 02 18 00 00       	call   c000827d <ff_memalloc>
c0006a7b:	83 c4 10             	add    esp,0x10
c0006a7e:	89 c3                	mov    ebx,eax
c0006a80:	b8 11 00 00 00       	mov    eax,0x11
c0006a85:	85 db                	test   ebx,ebx
c0006a87:	0f 84 8e 00 00 00    	je     c0006b1b <f_utime+0xd8>
c0006a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a91:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a97:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a9a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a9d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006aa1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa5:	e8 a6 e1 ff ff       	call   c0004c50 <follow_path>
c0006aaa:	85 c0                	test   eax,eax
c0006aac:	75 59                	jne    c0006b07 <f_utime+0xc4>
c0006aae:	b8 06 00 00 00       	mov    eax,0x6
c0006ab3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ab8:	75 4d                	jne    c0006b07 <f_utime+0xc4>
c0006aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006abe:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006ac2:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ac6:	c1 e2 10             	shl    edx,0x10
c0006ac9:	09 ca                	or     edx,ecx
c0006acb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ace:	75 1a                	jne    c0006aea <f_utime+0xa7>
c0006ad0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ad3:	83 c0 0c             	add    eax,0xc
c0006ad6:	e8 e5 af ff ff       	call   c0001ac0 <st_dword>
c0006adb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006adf:	e8 c4 ce ff ff       	call   c00039a8 <store_xdir>
c0006ae4:	85 c0                	test   eax,eax
c0006ae6:	75 1f                	jne    c0006b07 <f_utime+0xc4>
c0006ae8:	eb 14                	jmp    c0006afe <f_utime+0xbb>
c0006aea:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aee:	83 c0 16             	add    eax,0x16
c0006af1:	e8 ca af ff ff       	call   c0001ac0 <st_dword>
c0006af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006afa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b02:	e8 4c d8 ff ff       	call   c0004353 <sync_fs>
c0006b07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b0b:	83 ec 0c             	sub    esp,0xc
c0006b0e:	53                   	push   ebx
c0006b0f:	e8 7f 17 00 00       	call   c0008293 <ff_memfree>
c0006b14:	83 c4 10             	add    esp,0x10
c0006b17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b1b:	83 c4 64             	add    esp,0x64
c0006b1e:	5b                   	pop    ebx
c0006b1f:	5e                   	pop    esi
c0006b20:	c3                   	ret    

c0006b21 <f_getlabel>:
c0006b21:	55                   	push   ebp
c0006b22:	31 c9                	xor    ecx,ecx
c0006b24:	57                   	push   edi
c0006b25:	56                   	push   esi
c0006b26:	53                   	push   ebx
c0006b27:	83 ec 6c             	sub    esp,0x6c
c0006b2a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b35:	e8 a0 b9 ff ff       	call   c00024da <mount_volume>
c0006b3a:	89 c6                	mov    esi,eax
c0006b3c:	85 c0                	test   eax,eax
c0006b3e:	0f 85 c1 01 00 00    	jne    c0006d05 <f_getlabel+0x1e4>
c0006b44:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b4c:	0f 84 5f 01 00 00    	je     c0006cb1 <f_getlabel+0x190>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	31 d2                	xor    edx,edx
c0006b58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b5c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b64:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b68:	e8 39 c4 ff ff       	call   c0002fa6 <dir_sdi>
c0006b6d:	85 c0                	test   eax,eax
c0006b6f:	0f 85 2d 01 00 00    	jne    c0006ca2 <f_getlabel+0x181>
c0006b75:	ba 01 00 00 00       	mov    edx,0x1
c0006b7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b7e:	e8 33 cc ff ff       	call   c00037b6 <dir_read>
c0006b83:	85 c0                	test   eax,eax
c0006b85:	0f 85 17 01 00 00    	jne    c0006ca2 <f_getlabel+0x181>
c0006b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b8f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b92:	74 09                	je     c0006b9d <f_getlabel+0x7c>
c0006b94:	31 db                	xor    ebx,ebx
c0006b96:	31 c9                	xor    ecx,ecx
c0006b98:	e9 c8 00 00 00       	jmp    c0006c65 <f_getlabel+0x144>
c0006b9d:	31 ed                	xor    ebp,ebp
c0006b9f:	31 db                	xor    ebx,ebx
c0006ba1:	31 ff                	xor    edi,edi
c0006ba3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ba7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bab:	39 fa                	cmp    edx,edi
c0006bad:	76 4b                	jbe    c0006bfa <f_getlabel+0xd9>
c0006baf:	47                   	inc    edi
c0006bb0:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bb3:	01 d0                	add    eax,edx
c0006bb5:	e8 90 ae ff ff       	call   c0001a4a <ld_word>
c0006bba:	66 85 ed             	test   bp,bp
c0006bbd:	75 0d                	jne    c0006bcc <f_getlabel+0xab>
c0006bbf:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bc5:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bca:	76 28                	jbe    c0006bf4 <f_getlabel+0xd3>
c0006bcc:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bd3:	89 e9                	mov    ecx,ebp
c0006bd5:	01 da                	add    edx,ebx
c0006bd7:	c1 e1 10             	shl    ecx,0x10
c0006bda:	0f b7 c0             	movzx  eax,ax
c0006bdd:	09 c8                	or     eax,ecx
c0006bdf:	b9 04 00 00 00       	mov    ecx,0x4
c0006be4:	e8 01 b0 ff ff       	call   c0001bea <put_utf>
c0006be9:	84 c0                	test   al,al
c0006beb:	74 0b                	je     c0006bf8 <f_getlabel+0xd7>
c0006bed:	0f b6 c0             	movzx  eax,al
c0006bf0:	01 c3                	add    ebx,eax
c0006bf2:	31 c0                	xor    eax,eax
c0006bf4:	89 c5                	mov    ebp,eax
c0006bf6:	eb ab                	jmp    c0006ba3 <f_getlabel+0x82>
c0006bf8:	31 db                	xor    ebx,ebx
c0006bfa:	66 85 ed             	test   bp,bp
c0006bfd:	74 02                	je     c0006c01 <f_getlabel+0xe0>
c0006bff:	31 db                	xor    ebx,ebx
c0006c01:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c08:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c0c:	e9 a0 00 00 00       	jmp    c0006cb1 <f_getlabel+0x190>
c0006c11:	83 ff 0b             	cmp    edi,0xb
c0006c14:	74 11                	je     c0006c27 <f_getlabel+0x106>
c0006c16:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c1f:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c22:	c1 e0 08             	shl    eax,0x8
c0006c25:	09 c2                	or     edx,eax
c0006c27:	0f b7 d2             	movzx  edx,dx
c0006c2a:	50                   	push   eax
c0006c2b:	50                   	push   eax
c0006c2c:	68 b5 01 00 00       	push   0x1b5
c0006c31:	52                   	push   edx
c0006c32:	e8 03 17 00 00       	call   c000833a <ff_oem2uni>
c0006c37:	83 c4 10             	add    esp,0x10
c0006c3a:	66 85 c0             	test   ax,ax
c0006c3d:	74 46                	je     c0006c85 <f_getlabel+0x164>
c0006c3f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c46:	0f b7 c0             	movzx  eax,ax
c0006c49:	01 da                	add    edx,ebx
c0006c4b:	b9 04 00 00 00       	mov    ecx,0x4
c0006c50:	e8 95 af ff ff       	call   c0001bea <put_utf>
c0006c55:	84 c0                	test   al,al
c0006c57:	74 2c                	je     c0006c85 <f_getlabel+0x164>
c0006c59:	0f b6 c0             	movzx  eax,al
c0006c5c:	01 c3                	add    ebx,eax
c0006c5e:	83 ff 0b             	cmp    edi,0xb
c0006c61:	74 24                	je     c0006c87 <f_getlabel+0x166>
c0006c63:	89 f9                	mov    ecx,edi
c0006c65:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c69:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c6c:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c71:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c7a:	e8 9f ae ff ff       	call   c0001b1e <dbc_1st>
c0006c7f:	85 c0                	test   eax,eax
c0006c81:	74 a4                	je     c0006c27 <f_getlabel+0x106>
c0006c83:	eb 8c                	jmp    c0006c11 <f_getlabel+0xf0>
c0006c85:	31 db                	xor    ebx,ebx
c0006c87:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c8e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c91:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c98:	74 17                	je     c0006cb1 <f_getlabel+0x190>
c0006c9a:	4b                   	dec    ebx
c0006c9b:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c9e:	74 ee                	je     c0006c8e <f_getlabel+0x16d>
c0006ca0:	eb 0f                	jmp    c0006cb1 <f_getlabel+0x190>
c0006ca2:	83 f8 04             	cmp    eax,0x4
c0006ca5:	75 5c                	jne    c0006d03 <f_getlabel+0x1e2>
c0006ca7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006cae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cb1:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cb9:	74 4a                	je     c0006d05 <f_getlabel+0x1e4>
c0006cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cbf:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cc2:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006cc5:	e8 5e b5 ff ff       	call   c0002228 <move_window>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	85 c0                	test   eax,eax
c0006cce:	75 35                	jne    c0006d05 <f_getlabel+0x1e4>
c0006cd0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cd4:	b8 43 00 00 00       	mov    eax,0x43
c0006cd9:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006cdb:	80 f9 03             	cmp    cl,0x3
c0006cde:	74 0f                	je     c0006cef <f_getlabel+0x1ce>
c0006ce0:	31 c0                	xor    eax,eax
c0006ce2:	80 f9 04             	cmp    cl,0x4
c0006ce5:	0f 94 c0             	sete   al
c0006ce8:	48                   	dec    eax
c0006ce9:	83 e0 c3             	and    eax,0xffffffc3
c0006cec:	83 c0 64             	add    eax,0x64
c0006cef:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cf3:	e8 5f ad ff ff       	call   c0001a57 <ld_dword>
c0006cf8:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cff:	89 07                	mov    DWORD PTR [edi],eax
c0006d01:	eb 02                	jmp    c0006d05 <f_getlabel+0x1e4>
c0006d03:	89 c6                	mov    esi,eax
c0006d05:	83 c4 6c             	add    esp,0x6c
c0006d08:	89 f0                	mov    eax,esi
c0006d0a:	5b                   	pop    ebx
c0006d0b:	5e                   	pop    esi
c0006d0c:	5f                   	pop    edi
c0006d0d:	5d                   	pop    ebp
c0006d0e:	c3                   	ret    

c0006d0f <f_setlabel>:
c0006d0f:	56                   	push   esi
c0006d10:	b9 02 00 00 00       	mov    ecx,0x2
c0006d15:	53                   	push   ebx
c0006d16:	83 ec 74             	sub    esp,0x74
c0006d19:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d1d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d24:	e8 b1 b7 ff ff       	call   c00024da <mount_volume>
c0006d29:	89 c6                	mov    esi,eax
c0006d2b:	85 c0                	test   eax,eax
c0006d2d:	0f 85 41 02 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006d33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d37:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d3a:	0f 85 8e 00 00 00    	jne    c0006dce <f_setlabel+0xbf>
c0006d40:	b9 16 00 00 00       	mov    ecx,0x16
c0006d45:	31 d2                	xor    edx,edx
c0006d47:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d4b:	31 db                	xor    ebx,ebx
c0006d4d:	e8 8c ad ff ff       	call   c0001ade <mem_set>
c0006d52:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d59:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d5c:	0f 86 0a 01 00 00    	jbe    c0006e6c <f_setlabel+0x15d>
c0006d62:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d69:	e8 b6 ad ff ff       	call   c0001b24 <tchar2uni>
c0006d6e:	89 c6                	mov    esi,eax
c0006d70:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d75:	76 2a                	jbe    c0006da1 <f_setlabel+0x92>
c0006d77:	83 f8 ff             	cmp    eax,0xffffffff
c0006d7a:	74 05                	je     c0006d81 <f_setlabel+0x72>
c0006d7c:	83 fb 09             	cmp    ebx,0x9
c0006d7f:	76 0a                	jbe    c0006d8b <f_setlabel+0x7c>
c0006d81:	be 06 00 00 00       	mov    esi,0x6
c0006d86:	e9 e9 01 00 00       	jmp    c0006f74 <f_setlabel+0x265>
c0006d8b:	89 c2                	mov    edx,eax
c0006d8d:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d91:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d94:	c1 ea 10             	shr    edx,0x10
c0006d97:	01 c8                	add    eax,ecx
c0006d99:	43                   	inc    ebx
c0006d9a:	e8 1d ad ff ff       	call   c0001abc <st_word>
c0006d9f:	eb 04                	jmp    c0006da5 <f_setlabel+0x96>
c0006da1:	85 c0                	test   eax,eax
c0006da3:	74 dc                	je     c0006d81 <f_setlabel+0x72>
c0006da5:	89 f2                	mov    edx,esi
c0006da7:	b8 57 81 02 c0       	mov    eax,0xc0028157
c0006dac:	e8 5b ad ff ff       	call   c0001b0c <chk_chr>
c0006db1:	85 c0                	test   eax,eax
c0006db3:	75 cc                	jne    c0006d81 <f_setlabel+0x72>
c0006db5:	83 fb 0a             	cmp    ebx,0xa
c0006db8:	77 c7                	ja     c0006d81 <f_setlabel+0x72>
c0006dba:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006dbd:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006dc1:	0f b7 d6             	movzx  edx,si
c0006dc4:	01 c8                	add    eax,ecx
c0006dc6:	43                   	inc    ebx
c0006dc7:	e8 f0 ac ff ff       	call   c0001abc <st_word>
c0006dcc:	eb 84                	jmp    c0006d52 <f_setlabel+0x43>
c0006dce:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dd3:	ba 20 00 00 00       	mov    edx,0x20
c0006dd8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	e8 fb ac ff ff       	call   c0001ade <mem_set>
c0006de3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006dea:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ded:	76 60                	jbe    c0006e4f <f_setlabel+0x140>
c0006def:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006df6:	e8 29 ad ff ff       	call   c0001b24 <tchar2uni>
c0006dfb:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e00:	0f 87 7b ff ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006e06:	83 ec 0c             	sub    esp,0xc
c0006e09:	50                   	push   eax
c0006e0a:	e8 97 15 00 00       	call   c00083a6 <ff_wtoupper>
c0006e0f:	5a                   	pop    edx
c0006e10:	59                   	pop    ecx
c0006e11:	68 b5 01 00 00       	push   0x1b5
c0006e16:	50                   	push   eax
c0006e17:	e8 8e 14 00 00       	call   c00082aa <ff_uni2oem>
c0006e1c:	83 c4 10             	add    esp,0x10
c0006e1f:	89 c6                	mov    esi,eax
c0006e21:	66 85 c0             	test   ax,ax
c0006e24:	0f 84 57 ff ff ff    	je     c0006d81 <f_setlabel+0x72>
c0006e2a:	0f b7 d0             	movzx  edx,ax
c0006e2d:	b8 50 81 02 c0       	mov    eax,0xc0028150
c0006e32:	e8 d5 ac ff ff       	call   c0001b0c <chk_chr>
c0006e37:	85 c0                	test   eax,eax
c0006e39:	0f 85 42 ff ff ff    	jne    c0006d81 <f_setlabel+0x72>
c0006e3f:	66 81 fe ff 00       	cmp    si,0xff
c0006e44:	0f 87 14 01 00 00    	ja     c0006f5e <f_setlabel+0x24f>
c0006e4a:	e9 fa 00 00 00       	jmp    c0006f49 <f_setlabel+0x23a>
c0006e4f:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e54:	0f 84 27 ff ff ff    	je     c0006d81 <f_setlabel+0x72>
c0006e5a:	85 db                	test   ebx,ebx
c0006e5c:	74 0e                	je     c0006e6c <f_setlabel+0x15d>
c0006e5e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e61:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e66:	75 04                	jne    c0006e6c <f_setlabel+0x15d>
c0006e68:	89 c3                	mov    ebx,eax
c0006e6a:	eb ee                	jmp    c0006e5a <f_setlabel+0x14b>
c0006e6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e70:	31 d2                	xor    edx,edx
c0006e72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e76:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e7e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e82:	e8 1f c1 ff ff       	call   c0002fa6 <dir_sdi>
c0006e87:	89 c6                	mov    esi,eax
c0006e89:	85 c0                	test   eax,eax
c0006e8b:	0f 85 e3 00 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006e91:	ba 01 00 00 00       	mov    edx,0x1
c0006e96:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e9a:	e8 17 c9 ff ff       	call   c00037b6 <dir_read>
c0006e9f:	85 c0                	test   eax,eax
c0006ea1:	75 21                	jne    c0006ec4 <f_setlabel+0x1b5>
c0006ea3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ea7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eab:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006eae:	74 5d                	je     c0006f0d <f_setlabel+0x1fe>
c0006eb0:	85 db                	test   ebx,ebx
c0006eb2:	74 0b                	je     c0006ebf <f_setlabel+0x1b0>
c0006eb4:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eb9:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ebd:	eb 70                	jmp    c0006f2f <f_setlabel+0x220>
c0006ebf:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006ec2:	eb 70                	jmp    c0006f34 <f_setlabel+0x225>
c0006ec4:	83 f8 04             	cmp    eax,0x4
c0006ec7:	75 7c                	jne    c0006f45 <f_setlabel+0x236>
c0006ec9:	85 db                	test   ebx,ebx
c0006ecb:	0f 84 a3 00 00 00    	je     c0006f74 <f_setlabel+0x265>
c0006ed1:	ba 01 00 00 00       	mov    edx,0x1
c0006ed6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006eda:	e8 51 ca ff ff       	call   c0003930 <dir_alloc>
c0006edf:	89 c6                	mov    esi,eax
c0006ee1:	85 c0                	test   eax,eax
c0006ee3:	0f 85 8b 00 00 00    	jne    c0006f74 <f_setlabel+0x265>
c0006ee9:	31 d2                	xor    edx,edx
c0006eeb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eef:	b9 20 00 00 00       	mov    ecx,0x20
c0006ef4:	e8 e5 ab ff ff       	call   c0001ade <mem_set>
c0006ef9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006efd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f00:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f04:	75 18                	jne    c0006f1e <f_setlabel+0x20f>
c0006f06:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f09:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f0d:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f10:	b9 16 00 00 00       	mov    ecx,0x16
c0006f15:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f19:	83 c0 02             	add    eax,0x2
c0006f1c:	eb 9b                	jmp    c0006eb9 <f_setlabel+0x1aa>
c0006f1e:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f22:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f27:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f2b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f2f:	e8 95 ab ff ff       	call   c0001ac9 <mem_cpy>
c0006f34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f38:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f40:	e8 0e d4 ff ff       	call   c0004353 <sync_fs>
c0006f45:	89 c6                	mov    esi,eax
c0006f47:	eb 2b                	jmp    c0006f74 <f_setlabel+0x265>
c0006f49:	83 fb 0a             	cmp    ebx,0xa
c0006f4c:	0f 87 2f fe ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006f52:	89 f0                	mov    eax,esi
c0006f54:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f58:	43                   	inc    ebx
c0006f59:	e9 85 fe ff ff       	jmp    c0006de3 <f_setlabel+0xd4>
c0006f5e:	83 fb 09             	cmp    ebx,0x9
c0006f61:	0f 87 1a fe ff ff    	ja     c0006d81 <f_setlabel+0x72>
c0006f67:	89 f0                	mov    eax,esi
c0006f69:	66 c1 e8 08          	shr    ax,0x8
c0006f6d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f71:	43                   	inc    ebx
c0006f72:	eb de                	jmp    c0006f52 <f_setlabel+0x243>
c0006f74:	89 f0                	mov    eax,esi
c0006f76:	83 c4 74             	add    esp,0x74
c0006f79:	5b                   	pop    ebx
c0006f7a:	5e                   	pop    esi
c0006f7b:	c3                   	ret    

c0006f7c <f_forward>:
c0006f7c:	55                   	push   ebp
c0006f7d:	57                   	push   edi
c0006f7e:	56                   	push   esi
c0006f7f:	53                   	push   ebx
c0006f80:	83 ec 2c             	sub    esp,0x2c
c0006f83:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f87:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f8b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f95:	89 d8                	mov    eax,ebx
c0006f97:	e8 b1 b1 ff ff       	call   c000214d <validate>
c0006f9c:	89 c5                	mov    ebp,eax
c0006f9e:	85 c0                	test   eax,eax
c0006fa0:	0f 85 aa 01 00 00    	jne    c0007150 <f_forward+0x1d4>
c0006fa6:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006faa:	85 ed                	test   ebp,ebp
c0006fac:	0f 85 9e 01 00 00    	jne    c0007150 <f_forward+0x1d4>
c0006fb2:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fb6:	0f 84 8f 01 00 00    	je     c000714b <f_forward+0x1cf>
c0006fbc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fbf:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fc2:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fc5:	bf 00 00 00 00       	mov    edi,0x0
c0006fca:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fcd:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fd1:	89 d1                	mov    ecx,edx
c0006fd3:	19 f9                	sbb    ecx,edi
c0006fd5:	0f 83 cf 00 00 00    	jae    c00070aa <f_forward+0x12e>
c0006fdb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fdf:	e9 c6 00 00 00       	jmp    c00070aa <f_forward+0x12e>
c0006fe4:	50                   	push   eax
c0006fe5:	50                   	push   eax
c0006fe6:	6a 00                	push   0x0
c0006fe8:	6a 00                	push   0x0
c0006fea:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fee:	83 c4 10             	add    esp,0x10
c0006ff1:	85 c0                	test   eax,eax
c0006ff3:	0f 84 57 01 00 00    	je     c0007150 <f_forward+0x1d4>
c0006ff9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006ffc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007000:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007003:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007007:	89 d7                	mov    edi,edx
c0007009:	8d 4e ff             	lea    ecx,[esi-0x1]
c000700c:	89 c6                	mov    esi,eax
c000700e:	0f ac fe 09          	shrd   esi,edi,0x9
c0007012:	21 ce                	and    esi,ecx
c0007014:	89 c1                	mov    ecx,eax
c0007016:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000701c:	0f 84 98 00 00 00    	je     c00070ba <f_forward+0x13e>
c0007022:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007026:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007029:	89 c8                	mov    eax,ecx
c000702b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000702f:	e8 af ac ff ff       	call   c0001ce3 <clst2sect>
c0007034:	89 d7                	mov    edi,edx
c0007036:	09 c7                	or     edi,eax
c0007038:	0f 84 9e 00 00 00    	je     c00070dc <f_forward+0x160>
c000703e:	31 ff                	xor    edi,edi
c0007040:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007043:	01 c6                	add    esi,eax
c0007045:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007049:	11 d7                	adc    edi,edx
c000704b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000704e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007051:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007055:	39 fa                	cmp    edx,edi
c0007057:	0f 85 a2 00 00 00    	jne    c00070ff <f_forward+0x183>
c000705d:	39 f0                	cmp    eax,esi
c000705f:	0f 85 9a 00 00 00    	jne    c00070ff <f_forward+0x183>
c0007065:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007068:	ba 00 02 00 00       	mov    edx,0x200
c000706d:	25 ff 01 00 00       	and    eax,0x1ff
c0007072:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007076:	29 c2                	sub    edx,eax
c0007078:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000707b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000707e:	39 d1                	cmp    ecx,edx
c0007080:	76 02                	jbe    c0007084 <f_forward+0x108>
c0007082:	89 d1                	mov    ecx,edx
c0007084:	8d 73 50             	lea    esi,[ebx+0x50]
c0007087:	52                   	push   edx
c0007088:	01 c6                	add    esi,eax
c000708a:	52                   	push   edx
c000708b:	51                   	push   ecx
c000708c:	56                   	push   esi
c000708d:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007091:	83 c4 10             	add    esp,0x10
c0007094:	85 c0                	test   eax,eax
c0007096:	74 44                	je     c00070dc <f_forward+0x160>
c0007098:	31 ff                	xor    edi,edi
c000709a:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000709d:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070a0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070a4:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070a8:	01 07                	add    DWORD PTR [edi],eax
c00070aa:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070af:	0f 85 2f ff ff ff    	jne    c0006fe4 <f_forward+0x68>
c00070b5:	e9 96 00 00 00       	jmp    c0007150 <f_forward+0x1d4>
c00070ba:	85 f6                	test   esi,esi
c00070bc:	0f 85 60 ff ff ff    	jne    c0007022 <f_forward+0xa6>
c00070c2:	89 d7                	mov    edi,edx
c00070c4:	09 c7                	or     edi,eax
c00070c6:	75 05                	jne    c00070cd <f_forward+0x151>
c00070c8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070cb:	eb 0a                	jmp    c00070d7 <f_forward+0x15b>
c00070cd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070d0:	89 d8                	mov    eax,ebx
c00070d2:	e8 d9 bc ff ff       	call   c0002db0 <get_fat>
c00070d7:	83 f8 01             	cmp    eax,0x1
c00070da:	77 0b                	ja     c00070e7 <f_forward+0x16b>
c00070dc:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070e0:	bd 02 00 00 00       	mov    ebp,0x2
c00070e5:	eb 69                	jmp    c0007150 <f_forward+0x1d4>
c00070e7:	83 f8 ff             	cmp    eax,0xffffffff
c00070ea:	75 0b                	jne    c00070f7 <f_forward+0x17b>
c00070ec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070f0:	bd 01 00 00 00       	mov    ebp,0x1
c00070f5:	eb 59                	jmp    c0007150 <f_forward+0x1d4>
c00070f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070fa:	e9 23 ff ff ff       	jmp    c0007022 <f_forward+0xa6>
c00070ff:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007103:	79 20                	jns    c0007125 <f_forward+0x1a9>
c0007105:	83 ec 0c             	sub    esp,0xc
c0007108:	6a 01                	push   0x1
c000710a:	52                   	push   edx
c000710b:	50                   	push   eax
c000710c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007110:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007114:	50                   	push   eax
c0007115:	e8 fb a8 ff ff       	call   c0001a15 <disk_write>
c000711a:	83 c4 20             	add    esp,0x20
c000711d:	85 c0                	test   eax,eax
c000711f:	75 cb                	jne    c00070ec <f_forward+0x170>
c0007121:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007125:	83 ec 0c             	sub    esp,0xc
c0007128:	6a 01                	push   0x1
c000712a:	57                   	push   edi
c000712b:	56                   	push   esi
c000712c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007130:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007134:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007138:	50                   	push   eax
c0007139:	e8 c1 a8 ff ff       	call   c00019ff <disk_read>
c000713e:	83 c4 20             	add    esp,0x20
c0007141:	85 c0                	test   eax,eax
c0007143:	0f 84 1c ff ff ff    	je     c0007065 <f_forward+0xe9>
c0007149:	eb a1                	jmp    c00070ec <f_forward+0x170>
c000714b:	bd 07 00 00 00       	mov    ebp,0x7
c0007150:	83 c4 2c             	add    esp,0x2c
c0007153:	89 e8                	mov    eax,ebp
c0007155:	5b                   	pop    ebx
c0007156:	5e                   	pop    esi
c0007157:	5f                   	pop    edi
c0007158:	5d                   	pop    ebp
c0007159:	c3                   	ret    

c000715a <f_mkfs>:
c000715a:	55                   	push   ebp
c000715b:	57                   	push   edi
c000715c:	56                   	push   esi
c000715d:	53                   	push   ebx
c000715e:	bb 0b 00 00 00       	mov    ebx,0xb
c0007163:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007169:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007170:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007177:	e8 b0 ae ff ff       	call   c000202c <get_ldnumber>
c000717c:	85 c0                	test   eax,eax
c000717e:	0f 88 ec 10 00 00    	js     c0008270 <f_mkfs+0x1116>
c0007184:	8b 14 85 a0 ce 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3160]
c000718b:	85 d2                	test   edx,edx
c000718d:	74 03                	je     c0007192 <f_mkfs+0x38>
c000718f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007192:	85 f6                	test   esi,esi
c0007194:	75 05                	jne    c000719b <f_mkfs+0x41>
c0007196:	be 40 81 02 c0       	mov    esi,0xc0028140
c000719b:	83 ec 0c             	sub    esp,0xc
c000719e:	0f b6 c0             	movzx  eax,al
c00071a1:	bb 03 00 00 00       	mov    ebx,0x3
c00071a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ae:	e8 49 a8 ff ff       	call   c00019fc <disk_initialize>
c00071b3:	83 c4 10             	add    esp,0x10
c00071b6:	a8 01                	test   al,0x1
c00071b8:	0f 85 b2 10 00 00    	jne    c0008270 <f_mkfs+0x1116>
c00071be:	bb 0a 00 00 00       	mov    ebx,0xa
c00071c3:	a8 04                	test   al,0x4
c00071c5:	0f 85 a5 10 00 00    	jne    c0008270 <f_mkfs+0x1116>
c00071cb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071ce:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071d2:	85 c0                	test   eax,eax
c00071d4:	75 20                	jne    c00071f6 <f_mkfs+0x9c>
c00071d6:	51                   	push   ecx
c00071d7:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071db:	50                   	push   eax
c00071dc:	6a 03                	push   0x3
c00071de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071e2:	e8 44 a8 ff ff       	call   c0001a2b <disk_ioctl>
c00071e7:	83 c4 10             	add    esp,0x10
c00071ea:	85 c0                	test   eax,eax
c00071ec:	74 08                	je     c00071f6 <f_mkfs+0x9c>
c00071ee:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071f6:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071fa:	8d 42 ff             	lea    eax,[edx-0x1]
c00071fd:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007202:	77 04                	ja     c0007208 <f_mkfs+0xae>
c0007204:	85 c2                	test   edx,eax
c0007206:	74 08                	je     c0007210 <f_mkfs+0xb6>
c0007208:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007210:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007213:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007217:	48                   	dec    eax
c0007218:	3c 01                	cmp    al,0x1
c000721a:	76 05                	jbe    c0007221 <f_mkfs+0xc7>
c000721c:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007221:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007224:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007228:	48                   	dec    eax
c0007229:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000722e:	77 07                	ja     c0007237 <f_mkfs+0xdd>
c0007230:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007235:	74 08                	je     c000723f <f_mkfs+0xe5>
c0007237:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000723f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007242:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007248:	77 07                	ja     c0007251 <f_mkfs+0xf7>
c000724a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000724d:	85 d8                	test   eax,ebx
c000724f:	74 02                	je     c0007253 <f_mkfs+0xf9>
c0007251:	31 db                	xor    ebx,ebx
c0007253:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000725e:	77 0a                	ja     c000726a <f_mkfs+0x110>
c0007260:	bb 11 00 00 00       	mov    ebx,0x11
c0007265:	e9 06 10 00 00       	jmp    c0008270 <f_mkfs+0x1116>
c000726a:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007271:	8b 36                	mov    esi,DWORD PTR [esi]
c0007273:	85 ed                	test   ebp,ebp
c0007275:	75 1e                	jne    c0007295 <f_mkfs+0x13b>
c0007277:	83 ec 0c             	sub    esp,0xc
c000727a:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007281:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007286:	50                   	push   eax
c0007287:	e8 f1 0f 00 00       	call   c000827d <ff_memalloc>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	89 c5                	mov    ebp,eax
c0007291:	85 c0                	test   eax,eax
c0007293:	74 cb                	je     c0007260 <f_mkfs+0x106>
c0007295:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000729d:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072a5:	52                   	push   edx
c00072a6:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072aa:	50                   	push   eax
c00072ab:	6a 01                	push   0x1
c00072ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b1:	e8 75 a7 ff ff       	call   c0001a2b <disk_ioctl>
c00072b6:	83 c4 10             	add    esp,0x10
c00072b9:	85 c0                	test   eax,eax
c00072bb:	0f 85 4a 0f 00 00    	jne    c000820b <f_mkfs+0x10b1>
c00072c1:	89 f1                	mov    ecx,esi
c00072c3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072cb:	83 e1 0f             	and    ecx,0xf
c00072ce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072d6:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072da:	83 e6 08             	and    esi,0x8
c00072dd:	75 56                	jne    c0007335 <f_mkfs+0x1db>
c00072df:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072e3:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072e7:	83 ff 00             	cmp    edi,0x0
c00072ea:	76 20                	jbe    c000730c <f_mkfs+0x1b2>
c00072ec:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072f1:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072f9:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072ff:	83 d7 ff             	adc    edi,0xffffffff
c0007302:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007306:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000730a:	eb 21                	jmp    c000732d <f_mkfs+0x1d3>
c000730c:	ba 3f 00 00 00       	mov    edx,0x3f
c0007311:	39 f2                	cmp    edx,esi
c0007313:	19 f8                	sbb    eax,edi
c0007315:	73 1e                	jae    c0007335 <f_mkfs+0x1db>
c0007317:	83 c6 c1             	add    esi,0xffffffc1
c000731a:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007322:	83 d7 ff             	adc    edi,0xffffffff
c0007325:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007329:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000732d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007335:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007339:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000733d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007340:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007344:	31 c0                	xor    eax,eax
c0007346:	ba 7f 00 00 00       	mov    edx,0x7f
c000734b:	89 c7                	mov    edi,eax
c000734d:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007350:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007354:	0f 83 c5 0a 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c000735a:	89 df                	mov    edi,ebx
c000735c:	c1 ef 09             	shr    edi,0x9
c000735f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007363:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000736a:	c1 ef 09             	shr    edi,0x9
c000736d:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007372:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007376:	74 29                	je     c00073a1 <f_mkfs+0x247>
c0007378:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000737e:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007383:	0f 97 c2             	seta   dl
c0007386:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007389:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000738d:	0f 92 c0             	setb   al
c0007390:	08 c2                	or     dl,al
c0007392:	75 5b                	jne    c00073ef <f_mkfs+0x295>
c0007394:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007398:	83 e0 07             	and    eax,0x7
c000739b:	3c 04                	cmp    al,0x4
c000739d:	74 50                	je     c00073ef <f_mkfs+0x295>
c000739f:	eb 1b                	jmp    c00073bc <f_mkfs+0x262>
c00073a1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073a6:	0f 87 73 0a 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c00073ac:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073b2:	76 08                	jbe    c00073bc <f_mkfs+0x262>
c00073b4:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073bc:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073c0:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073c4:	83 e0 01             	and    eax,0x1
c00073c7:	80 e1 02             	and    cl,0x2
c00073ca:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073ce:	74 0d                	je     c00073dd <f_mkfs+0x283>
c00073d0:	84 c0                	test   al,al
c00073d2:	0f 84 53 09 00 00    	je     c0007d2b <f_mkfs+0xbd1>
c00073d8:	e9 12 08 00 00       	jmp    c0007bef <f_mkfs+0xa95>
c00073dd:	bb 13 00 00 00       	mov    ebx,0x13
c00073e2:	84 c0                	test   al,al
c00073e4:	0f 85 05 08 00 00    	jne    c0007bef <f_mkfs+0xa95>
c00073ea:	e9 39 0e 00 00       	jmp    c0008228 <f_mkfs+0x10ce>
c00073ef:	31 c0                	xor    eax,eax
c00073f1:	ba ff 0f 00 00       	mov    edx,0xfff
c00073f6:	89 c7                	mov    edi,eax
c00073f8:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073fb:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073ff:	0f 83 1a 0a 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c0007405:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000740b:	77 39                	ja     c0007446 <f_mkfs+0x2ec>
c000740d:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007412:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000741a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000741d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007421:	73 08                	jae    c000742b <f_mkfs+0x2d1>
c0007423:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000742b:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007430:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007433:	b8 00 00 00 00       	mov    eax,0x0
c0007438:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000743c:	73 08                	jae    c0007446 <f_mkfs+0x2ec>
c000743e:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000744a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000744e:	83 c0 20             	add    eax,0x20
c0007451:	83 d2 00             	adc    edx,0x0
c0007454:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007458:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000745c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007460:	31 d2                	xor    edx,edx
c0007462:	31 ff                	xor    edi,edi
c0007464:	52                   	push   edx
c0007465:	89 fb                	mov    ebx,edi
c0007467:	50                   	push   eax
c0007468:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000746c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007470:	e8 57 e3 01 00       	call   c00257cc <__udivdi3>
c0007475:	83 c4 10             	add    esp,0x10
c0007478:	c1 e0 02             	shl    eax,0x2
c000747b:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000747f:	05 07 02 00 00       	add    eax,0x207
c0007484:	89 f1                	mov    ecx,esi
c0007486:	c1 e8 09             	shr    eax,0x9
c0007489:	83 c1 ff             	add    ecx,0xffffffff
c000748c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007490:	83 d3 ff             	adc    ebx,0xffffffff
c0007493:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007497:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c000749b:	31 d2                	xor    edx,edx
c000749d:	01 c8                	add    eax,ecx
c000749f:	11 da                	adc    edx,ebx
c00074a1:	89 c1                	mov    ecx,eax
c00074a3:	f7 de                	neg    esi
c00074a5:	89 d0                	mov    eax,edx
c00074a7:	83 d7 00             	adc    edi,0x0
c00074aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074ae:	f7 df                	neg    edi
c00074b0:	21 f1                	and    ecx,esi
c00074b2:	21 f8                	and    eax,edi
c00074b4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074bc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074c4:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074cb:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074cf:	0f ac d0 01          	shrd   eax,edx,0x1
c00074d3:	89 df                	mov    edi,ebx
c00074d5:	d1 ea                	shr    edx,1
c00074d7:	39 c1                	cmp    ecx,eax
c00074d9:	19 d7                	sbb    edi,edx
c00074db:	0f 83 3e 09 00 00    	jae    c0007e1f <f_mkfs+0xcc5>
c00074e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074e5:	31 d2                	xor    edx,edx
c00074e7:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074ef:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074f6:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074fa:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074fe:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007502:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007506:	83 f8 0f             	cmp    eax,0xf
c0007509:	0f 86 10 09 00 00    	jbe    c0007e1f <f_mkfs+0xcc5>
c000750f:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007517:	0f 87 02 09 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c000751d:	31 d2                	xor    edx,edx
c000751f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007523:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000752b:	83 c0 07             	add    eax,0x7
c000752e:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007536:	c1 e8 03             	shr    eax,0x3
c0007539:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007540:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007548:	c1 e0 09             	shl    eax,0x9
c000754b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000754f:	48                   	dec    eax
c0007550:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007554:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007558:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000755c:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007560:	31 d2                	xor    edx,edx
c0007562:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007566:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000756d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007571:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007576:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000757a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000757e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007582:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007586:	31 ff                	xor    edi,edi
c0007588:	31 f6                	xor    esi,esi
c000758a:	31 db                	xor    ebx,ebx
c000758c:	85 ff                	test   edi,edi
c000758e:	74 05                	je     c0007595 <f_mkfs+0x43b>
c0007590:	4f                   	dec    edi
c0007591:	74 44                	je     c00075d7 <f_mkfs+0x47d>
c0007593:	eb 4f                	jmp    c00075e4 <f_mkfs+0x48a>
c0007595:	83 ec 0c             	sub    esp,0xc
c0007598:	0f b7 c3             	movzx  eax,bx
c000759b:	50                   	push   eax
c000759c:	e8 05 0e 00 00       	call   c00083a6 <ff_wtoupper>
c00075a1:	83 c4 10             	add    esp,0x10
c00075a4:	89 c1                	mov    ecx,eax
c00075a6:	8d 53 01             	lea    edx,[ebx+0x1]
c00075a9:	66 39 c3             	cmp    bx,ax
c00075ac:	75 3e                	jne    c00075ec <f_mkfs+0x492>
c00075ae:	be 01 00 00 00       	mov    esi,0x1
c00075b3:	89 df                	mov    edi,ebx
c00075b5:	66 01 f7             	add    di,si
c00075b8:	75 07                	jne    c00075c1 <f_mkfs+0x467>
c00075ba:	83 fe 7f             	cmp    esi,0x7f
c00075bd:	77 31                	ja     c00075f0 <f_mkfs+0x496>
c00075bf:	eb 16                	jmp    c00075d7 <f_mkfs+0x47d>
c00075c1:	83 ec 0c             	sub    esp,0xc
c00075c4:	0f b7 ff             	movzx  edi,di
c00075c7:	57                   	push   edi
c00075c8:	e8 d9 0d 00 00       	call   c00083a6 <ff_wtoupper>
c00075cd:	83 c4 10             	add    esp,0x10
c00075d0:	39 c7                	cmp    edi,eax
c00075d2:	75 e6                	jne    c00075ba <f_mkfs+0x460>
c00075d4:	46                   	inc    esi
c00075d5:	eb dc                	jmp    c00075b3 <f_mkfs+0x459>
c00075d7:	31 c0                	xor    eax,eax
c00075d9:	89 d9                	mov    ecx,ebx
c00075db:	4e                   	dec    esi
c00075dc:	0f 95 c0             	setne  al
c00075df:	43                   	inc    ebx
c00075e0:	89 c7                	mov    edi,eax
c00075e2:	eb 14                	jmp    c00075f8 <f_mkfs+0x49e>
c00075e4:	89 f1                	mov    ecx,esi
c00075e6:	01 f3                	add    ebx,esi
c00075e8:	31 ff                	xor    edi,edi
c00075ea:	eb 0c                	jmp    c00075f8 <f_mkfs+0x49e>
c00075ec:	89 d3                	mov    ebx,edx
c00075ee:	eb 08                	jmp    c00075f8 <f_mkfs+0x49e>
c00075f0:	bf 02 00 00 00       	mov    edi,0x2
c00075f5:	83 c9 ff             	or     ecx,0xffffffff
c00075f8:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075fc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075ff:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007603:	0f b6 c1             	movzx  eax,cl
c0007606:	e8 3a a9 ff ff       	call   c0001f45 <xsum32>
c000760b:	66 c1 e9 08          	shr    cx,0x8
c000760f:	89 c2                	mov    edx,eax
c0007611:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007614:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007618:	0f b7 c1             	movzx  eax,cx
c000761b:	e8 25 a9 ff ff       	call   c0001f45 <xsum32>
c0007620:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007625:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007629:	66 85 db             	test   bx,bx
c000762c:	74 1f                	je     c000764d <f_mkfs+0x4f3>
c000762e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007631:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007638:	83 c0 02             	add    eax,0x2
c000763b:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007641:	39 c2                	cmp    edx,eax
c0007643:	74 08                	je     c000764d <f_mkfs+0x4f3>
c0007645:	89 04 24             	mov    DWORD PTR [esp],eax
c0007648:	e9 3f ff ff ff       	jmp    c000758c <f_mkfs+0x432>
c000764d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007650:	83 ec 0c             	sub    esp,0xc
c0007653:	05 01 02 00 00       	add    eax,0x201
c0007658:	c1 e8 09             	shr    eax,0x9
c000765b:	50                   	push   eax
c000765c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007660:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007664:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007668:	55                   	push   ebp
c0007669:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000766d:	e8 a3 a3 ff ff       	call   c0001a15 <disk_write>
c0007672:	83 c4 20             	add    esp,0x20
c0007675:	85 c0                	test   eax,eax
c0007677:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000767a:	0f 85 8b 0b 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007680:	89 d0                	mov    eax,edx
c0007682:	31 d2                	xor    edx,edx
c0007684:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007688:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c000768c:	66 85 db             	test   bx,bx
c000768f:	74 04                	je     c0007695 <f_mkfs+0x53b>
c0007691:	31 c0                	xor    eax,eax
c0007693:	eb b0                	jmp    c0007645 <f_mkfs+0x4eb>
c0007695:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007699:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000769d:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076a1:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076a7:	31 d2                	xor    edx,edx
c00076a9:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076b4:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076b8:	c1 eb 09             	shr    ebx,0x9
c00076bb:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076c6:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076ce:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076d2:	8d 70 01             	lea    esi,[eax+0x1]
c00076d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076dd:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076e4:	31 d2                	xor    edx,edx
c00076e6:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00076ee:	89 c1                	mov    ecx,eax
c00076f0:	89 e8                	mov    eax,ebp
c00076f2:	e8 e7 a3 ff ff       	call   c0001ade <mem_set>
c00076f7:	31 c0                	xor    eax,eax
c00076f9:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076fc:	76 10                	jbe    c000770e <f_mkfs+0x5b4>
c00076fe:	83 fe 07             	cmp    esi,0x7
c0007701:	76 0b                	jbe    c000770e <f_mkfs+0x5b4>
c0007703:	40                   	inc    eax
c0007704:	83 ee 08             	sub    esi,0x8
c0007707:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000770c:	eb eb                	jmp    c00076f9 <f_mkfs+0x59f>
c000770e:	b2 01                	mov    dl,0x1
c0007710:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007714:	85 f6                	test   esi,esi
c0007716:	74 0c                	je     c0007724 <f_mkfs+0x5ca>
c0007718:	39 04 24             	cmp    DWORD PTR [esp],eax
c000771b:	76 07                	jbe    c0007724 <f_mkfs+0x5ca>
c000771d:	08 11                	or     BYTE PTR [ecx],dl
c000771f:	4e                   	dec    esi
c0007720:	d1 e2                	shl    edx,1
c0007722:	eb f0                	jmp    c0007714 <f_mkfs+0x5ba>
c0007724:	89 df                	mov    edi,ebx
c0007726:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000772a:	76 04                	jbe    c0007730 <f_mkfs+0x5d6>
c000772c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007730:	83 ec 0c             	sub    esp,0xc
c0007733:	57                   	push   edi
c0007734:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007738:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000773c:	55                   	push   ebp
c000773d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007741:	e8 cf a2 ff ff       	call   c0001a15 <disk_write>
c0007746:	83 c4 20             	add    esp,0x20
c0007749:	85 c0                	test   eax,eax
c000774b:	0f 85 ba 0a 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007751:	31 d2                	xor    edx,edx
c0007753:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007757:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000775b:	29 fb                	sub    ebx,edi
c000775d:	0f 85 7a ff ff ff    	jne    c00076dd <f_mkfs+0x583>
c0007763:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007767:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000776f:	31 f6                	xor    esi,esi
c0007771:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007775:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007778:	31 d2                	xor    edx,edx
c000777a:	89 e8                	mov    eax,ebp
c000777c:	e8 5d a3 ff ff       	call   c0001ade <mem_set>
c0007781:	31 c9                	xor    ecx,ecx
c0007783:	85 db                	test   ebx,ebx
c0007785:	75 40                	jne    c00077c7 <f_mkfs+0x66d>
c0007787:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000778c:	89 e8                	mov    eax,ebp
c000778e:	bb 02 00 00 00       	mov    ebx,0x2
c0007793:	e8 28 a3 ff ff       	call   c0001ac0 <st_dword>
c0007798:	8d 45 04             	lea    eax,[ebp+0x4]
c000779b:	83 ca ff             	or     edx,0xffffffff
c000779e:	e8 1d a3 ff ff       	call   c0001ac0 <st_dword>
c00077a3:	b9 08 00 00 00       	mov    ecx,0x8
c00077a8:	eb 1d                	jmp    c00077c7 <f_mkfs+0x66d>
c00077aa:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077ad:	76 3b                	jbe    c00077ea <f_mkfs+0x690>
c00077af:	43                   	inc    ebx
c00077b0:	83 fe 01             	cmp    esi,0x1
c00077b3:	89 da                	mov    edx,ebx
c00077b5:	77 03                	ja     c00077ba <f_mkfs+0x660>
c00077b7:	83 ca ff             	or     edx,0xffffffff
c00077ba:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077be:	4e                   	dec    esi
c00077bf:	e8 fc a2 ff ff       	call   c0001ac0 <st_dword>
c00077c4:	83 c1 04             	add    ecx,0x4
c00077c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077cb:	85 f6                	test   esi,esi
c00077cd:	75 db                	jne    c00077aa <f_mkfs+0x650>
c00077cf:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077d4:	77 14                	ja     c00077ea <f_mkfs+0x690>
c00077d6:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077da:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077e1:	85 f6                	test   esi,esi
c00077e3:	74 05                	je     c00077ea <f_mkfs+0x690>
c00077e5:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077e8:	77 dd                	ja     c00077c7 <f_mkfs+0x66d>
c00077ea:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f2:	39 cf                	cmp    edi,ecx
c00077f4:	76 02                	jbe    c00077f8 <f_mkfs+0x69e>
c00077f6:	89 cf                	mov    edi,ecx
c00077f8:	83 ec 0c             	sub    esp,0xc
c00077fb:	57                   	push   edi
c00077fc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007800:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007804:	55                   	push   ebp
c0007805:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007809:	e8 07 a2 ff ff       	call   c0001a15 <disk_write>
c000780e:	83 c4 20             	add    esp,0x20
c0007811:	85 c0                	test   eax,eax
c0007813:	0f 85 f2 09 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007819:	31 d2                	xor    edx,edx
c000781b:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c000781f:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007823:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007827:	0f 85 48 ff ff ff    	jne    c0007775 <f_mkfs+0x61b>
c000782d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007830:	31 d2                	xor    edx,edx
c0007832:	89 e8                	mov    eax,ebp
c0007834:	31 ff                	xor    edi,edi
c0007836:	e8 a3 a2 ff ff       	call   c0001ade <mem_set>
c000783b:	8d 45 34             	lea    eax,[ebp+0x34]
c000783e:	ba 02 00 00 00       	mov    edx,0x2
c0007843:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007847:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000784b:	e8 70 a2 ff ff       	call   c0001ac0 <st_dword>
c0007850:	8d 45 38             	lea    eax,[ebp+0x38]
c0007853:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007857:	e8 64 a2 ff ff       	call   c0001ac0 <st_dword>
c000785c:	8d 45 44             	lea    eax,[ebp+0x44]
c000785f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007863:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007867:	e8 54 a2 ff ff       	call   c0001ac0 <st_dword>
c000786c:	8d 45 54             	lea    eax,[ebp+0x54]
c000786f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007873:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007877:	83 c2 02             	add    edx,0x2
c000787a:	e8 41 a2 ff ff       	call   c0001ac0 <st_dword>
c000787f:	8d 45 58             	lea    eax,[ebp+0x58]
c0007882:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007886:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000788a:	e8 31 a2 ff ff       	call   c0001ac0 <st_dword>
c000788f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007893:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007898:	89 c6                	mov    esi,eax
c000789a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789e:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00078a5:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078a9:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078b0:	39 cb                	cmp    ebx,ecx
c00078b2:	76 02                	jbe    c00078b6 <f_mkfs+0x75c>
c00078b4:	89 cb                	mov    ebx,ecx
c00078b6:	83 ec 0c             	sub    esp,0xc
c00078b9:	53                   	push   ebx
c00078ba:	57                   	push   edi
c00078bb:	56                   	push   esi
c00078bc:	55                   	push   ebp
c00078bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078c1:	e8 4f a1 ff ff       	call   c0001a15 <disk_write>
c00078c6:	83 c4 20             	add    esp,0x20
c00078c9:	85 c0                	test   eax,eax
c00078cb:	0f 85 3a 09 00 00    	jne    c000820b <f_mkfs+0x10b1>
c00078d1:	31 d2                	xor    edx,edx
c00078d3:	b9 00 02 00 00       	mov    ecx,0x200
c00078d8:	89 e8                	mov    eax,ebp
c00078da:	e8 ff a1 ff ff       	call   c0001ade <mem_set>
c00078df:	31 d2                	xor    edx,edx
c00078e1:	01 de                	add    esi,ebx
c00078e3:	11 d7                	adc    edi,edx
c00078e5:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078e8:	75 bf                	jne    c00078a9 <f_mkfs+0x74f>
c00078ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078ee:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078f2:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078fa:	b9 00 02 00 00       	mov    ecx,0x200
c00078ff:	31 d2                	xor    edx,edx
c0007901:	89 e8                	mov    eax,ebp
c0007903:	e8 d6 a1 ff ff       	call   c0001ade <mem_set>
c0007908:	b9 0b 00 00 00       	mov    ecx,0xb
c000790d:	ba 20 82 02 c0       	mov    edx,0xc0028220
c0007912:	89 e8                	mov    eax,ebp
c0007914:	e8 b0 a1 ff ff       	call   c0001ac9 <mem_cpy>
c0007919:	8d 45 40             	lea    eax,[ebp+0x40]
c000791c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007920:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007924:	e8 9a a1 ff ff       	call   c0001ac3 <st_qword>
c0007929:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000792d:	8d 45 48             	lea    eax,[ebp+0x48]
c0007930:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007934:	e8 8a a1 ff ff       	call   c0001ac3 <st_qword>
c0007939:	8d 45 50             	lea    eax,[ebp+0x50]
c000793c:	ba 20 00 00 00       	mov    edx,0x20
c0007941:	e8 7a a1 ff ff       	call   c0001ac0 <st_dword>
c0007946:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000794a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000794e:	e8 6d a1 ff ff       	call   c0001ac0 <st_dword>
c0007953:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007957:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000795b:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c000795f:	e8 5c a1 ff ff       	call   c0001ac0 <st_dword>
c0007964:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007967:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000796b:	e8 50 a1 ff ff       	call   c0001ac0 <st_dword>
c0007970:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007974:	8d 50 02             	lea    edx,[eax+0x2]
c0007977:	8d 45 60             	lea    eax,[ebp+0x60]
c000797a:	e8 41 a1 ff ff       	call   c0001ac0 <st_dword>
c000797f:	8d 45 64             	lea    eax,[ebp+0x64]
c0007982:	ba 00 00 21 50       	mov    edx,0x50210000
c0007987:	e8 34 a1 ff ff       	call   c0001ac0 <st_dword>
c000798c:	8d 45 68             	lea    eax,[ebp+0x68]
c000798f:	ba 00 01 00 00       	mov    edx,0x100
c0007994:	e8 23 a1 ff ff       	call   c0001abc <st_word>
c0007999:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c000799d:	b8 0a 00 00 00       	mov    eax,0xa
c00079a2:	48                   	dec    eax
c00079a3:	74 05                	je     c00079aa <f_mkfs+0x850>
c00079a5:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079a8:	eb f8                	jmp    c00079a2 <f_mkfs+0x848>
c00079aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079ae:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079b6:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079ba:	74 05                	je     c00079c1 <f_mkfs+0x867>
c00079bc:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079bf:	eb f5                	jmp    c00079b6 <f_mkfs+0x85c>
c00079c1:	8d 45 78             	lea    eax,[ebp+0x78]
c00079c4:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079c9:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079cf:	31 db                	xor    ebx,ebx
c00079d1:	e8 e6 a0 ff ff       	call   c0001abc <st_word>
c00079d6:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079dc:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00079e4:	e8 d3 a0 ff ff       	call   c0001abc <st_word>
c00079e9:	31 c9                	xor    ecx,ecx
c00079eb:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079ee:	83 f8 01             	cmp    eax,0x1
c00079f1:	76 13                	jbe    c0007a06 <f_mkfs+0x8ac>
c00079f3:	83 f9 70             	cmp    ecx,0x70
c00079f6:	74 0e                	je     c0007a06 <f_mkfs+0x8ac>
c00079f8:	89 da                	mov    edx,ebx
c00079fa:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079ff:	e8 41 a5 ff ff       	call   c0001f45 <xsum32>
c0007a04:	89 c3                	mov    ebx,eax
c0007a06:	41                   	inc    ecx
c0007a07:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a0d:	75 dc                	jne    c00079eb <f_mkfs+0x891>
c0007a0f:	89 f0                	mov    eax,esi
c0007a11:	89 fa                	mov    edx,edi
c0007a13:	83 c0 01             	add    eax,0x1
c0007a16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1a:	83 d2 00             	adc    edx,0x0
c0007a1d:	83 ec 0c             	sub    esp,0xc
c0007a20:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a24:	6a 01                	push   0x1
c0007a26:	57                   	push   edi
c0007a27:	56                   	push   esi
c0007a28:	55                   	push   ebp
c0007a29:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2d:	e8 e3 9f ff ff       	call   c0001a15 <disk_write>
c0007a32:	83 c4 20             	add    esp,0x20
c0007a35:	85 c0                	test   eax,eax
c0007a37:	0f 85 ce 07 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007a3d:	31 d2                	xor    edx,edx
c0007a3f:	b9 00 02 00 00       	mov    ecx,0x200
c0007a44:	89 e8                	mov    eax,ebp
c0007a46:	e8 93 a0 ff ff       	call   c0001ade <mem_set>
c0007a4b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a50:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a53:	e8 64 a0 ff ff       	call   c0001abc <st_word>
c0007a58:	89 f0                	mov    eax,esi
c0007a5a:	89 fa                	mov    edx,edi
c0007a5c:	83 c0 09             	add    eax,0x9
c0007a5f:	83 d2 00             	adc    edx,0x0
c0007a62:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a69:	31 c9                	xor    ecx,ecx
c0007a6b:	41                   	inc    ecx
c0007a6c:	89 da                	mov    edx,ebx
c0007a6e:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a73:	e8 cd a4 ff ff       	call   c0001f45 <xsum32>
c0007a78:	89 c3                	mov    ebx,eax
c0007a7a:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a80:	75 e9                	jne    c0007a6b <f_mkfs+0x911>
c0007a82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a86:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a8a:	83 c0 01             	add    eax,0x1
c0007a8d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a91:	83 d2 00             	adc    edx,0x0
c0007a94:	83 ec 0c             	sub    esp,0xc
c0007a97:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a9b:	6a 01                	push   0x1
c0007a9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa5:	55                   	push   ebp
c0007aa6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007aaa:	e8 66 9f ff ff       	call   c0001a15 <disk_write>
c0007aaf:	83 c4 20             	add    esp,0x20
c0007ab2:	85 c0                	test   eax,eax
c0007ab4:	0f 85 51 07 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007aba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007abe:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007ac2:	75 09                	jne    c0007acd <f_mkfs+0x973>
c0007ac4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ac7:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007acb:	74 12                	je     c0007adf <f_mkfs+0x985>
c0007acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ad1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ad5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007ad9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007add:	eb 8a                	jmp    c0007a69 <f_mkfs+0x90f>
c0007adf:	31 d2                	xor    edx,edx
c0007ae1:	b9 00 02 00 00       	mov    ecx,0x200
c0007ae6:	89 e8                	mov    eax,ebp
c0007ae8:	e8 f1 9f ff ff       	call   c0001ade <mem_set>
c0007aed:	83 c6 0b             	add    esi,0xb
c0007af0:	83 d7 00             	adc    edi,0x0
c0007af3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007af7:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007afb:	31 c9                	xor    ecx,ecx
c0007afd:	41                   	inc    ecx
c0007afe:	89 da                	mov    edx,ebx
c0007b00:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b05:	e8 3b a4 ff ff       	call   c0001f45 <xsum32>
c0007b0a:	89 c3                	mov    ebx,eax
c0007b0c:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b12:	75 e9                	jne    c0007afd <f_mkfs+0x9a3>
c0007b14:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b1b:	83 c6 01             	add    esi,0x1
c0007b1e:	83 d7 00             	adc    edi,0x0
c0007b21:	83 ec 0c             	sub    esp,0xc
c0007b24:	6a 01                	push   0x1
c0007b26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b2e:	55                   	push   ebp
c0007b2f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b33:	e8 dd 9e ff ff       	call   c0001a15 <disk_write>
c0007b38:	83 c4 20             	add    esp,0x20
c0007b3b:	85 c0                	test   eax,eax
c0007b3d:	0f 85 c8 06 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007b43:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b47:	75 06                	jne    c0007b4f <f_mkfs+0x9f5>
c0007b49:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b4d:	74 09                	je     c0007b58 <f_mkfs+0x9fe>
c0007b4f:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b52:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b56:	eb a3                	jmp    c0007afb <f_mkfs+0x9a1>
c0007b58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b5c:	89 da                	mov    edx,ebx
c0007b5e:	01 e8                	add    eax,ebp
c0007b60:	e8 5b 9f ff ff       	call   c0001ac0 <st_dword>
c0007b65:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b6a:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b72:	75 e4                	jne    c0007b58 <f_mkfs+0x9fe>
c0007b74:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b77:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b7b:	83 c6 02             	add    esi,0x2
c0007b7e:	83 d7 00             	adc    edi,0x0
c0007b81:	83 ec 0c             	sub    esp,0xc
c0007b84:	6a 01                	push   0x1
c0007b86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b8e:	55                   	push   ebp
c0007b8f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b93:	e8 7d 9e ff ff       	call   c0001a15 <disk_write>
c0007b98:	83 c4 20             	add    esp,0x20
c0007b9b:	85 c0                	test   eax,eax
c0007b9d:	0f 85 68 06 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007ba3:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ba8:	74 0d                	je     c0007bb7 <f_mkfs+0xa5d>
c0007baa:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bb2:	e9 43 fd ff ff       	jmp    c00078fa <f_mkfs+0x7a0>
c0007bb7:	b1 07                	mov    cl,0x7
c0007bb9:	e9 e3 05 00 00       	jmp    c00081a1 <f_mkfs+0x1047>
c0007bbe:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bc3:	0f 85 4f 02 00 00    	jne    c0007e18 <f_mkfs+0xcbe>
c0007bc9:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bce:	0f 86 22 02 00 00    	jbe    c0007df6 <f_mkfs+0xc9c>
c0007bd4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bd9:	0f 85 81 06 00 00    	jne    c0008260 <f_mkfs+0x1106>
c0007bdf:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007be2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007be6:	83 f8 40             	cmp    eax,0x40
c0007be9:	0f 87 51 06 00 00    	ja     c0008240 <f_mkfs+0x10e6>
c0007bef:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bf3:	85 ff                	test   edi,edi
c0007bf5:	75 1c                	jne    c0007c13 <f_mkfs+0xab9>
c0007bf7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bfa:	ba 20 81 02 c0       	mov    edx,0xc0028120
c0007bff:	c1 e9 0c             	shr    ecx,0xc
c0007c02:	bf 01 00 00 00       	mov    edi,0x1
c0007c07:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c0a:	66 85 c0             	test   ax,ax
c0007c0d:	0f 85 95 01 00 00    	jne    c0007da8 <f_mkfs+0xc4e>
c0007c13:	31 d2                	xor    edx,edx
c0007c15:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c18:	f7 f7                	div    edi
c0007c1a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c1f:	0f 86 95 01 00 00    	jbe    c0007dba <f_mkfs+0xc60>
c0007c25:	83 c0 02             	add    eax,0x2
c0007c28:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c2d:	01 c0                	add    eax,eax
c0007c2f:	05 ff 01 00 00       	add    eax,0x1ff
c0007c34:	be 01 00 00 00       	mov    esi,0x1
c0007c39:	c1 e8 09             	shr    eax,0x9
c0007c3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c44:	c1 e0 05             	shl    eax,0x5
c0007c47:	c1 e8 09             	shr    eax,0x9
c0007c4a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c4e:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c53:	31 d2                	xor    edx,edx
c0007c55:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c59:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c5d:	89 f0                	mov    eax,esi
c0007c5f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c63:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c67:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c6b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c6f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c73:	31 d2                	xor    edx,edx
c0007c75:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c7a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c7e:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c82:	31 db                	xor    ebx,ebx
c0007c84:	01 c8                	add    eax,ecx
c0007c86:	11 da                	adc    edx,ebx
c0007c88:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c8c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c90:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c94:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c98:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c9c:	f7 da                	neg    edx
c0007c9e:	21 d1                	and    ecx,edx
c0007ca0:	29 d9                	sub    ecx,ebx
c0007ca2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ca7:	0f 85 20 01 00 00    	jne    c0007dcd <f_mkfs+0xc73>
c0007cad:	31 db                	xor    ebx,ebx
c0007caf:	01 ce                	add    esi,ecx
c0007cb1:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cb5:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cb9:	31 d2                	xor    edx,edx
c0007cbb:	89 f8                	mov    eax,edi
c0007cbd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007cc1:	c1 e0 04             	shl    eax,0x4
c0007cc4:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cc8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ccc:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cd0:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cd4:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007cd7:	19 d3                	sbb    ebx,edx
c0007cd9:	0f 82 40 01 00 00    	jb     c0007e1f <f_mkfs+0xcc5>
c0007cdf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ce6:	89 c8                	mov    eax,ecx
c0007ce8:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ced:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cf1:	29 f0                	sub    eax,esi
c0007cf3:	29 d0                	sub    eax,edx
c0007cf5:	31 d2                	xor    edx,edx
c0007cf7:	f7 f7                	div    edi
c0007cf9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cfe:	89 c3                	mov    ebx,eax
c0007d00:	0f 85 b8 fe ff ff    	jne    c0007bbe <f_mkfs+0xa64>
c0007d06:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d0b:	0f 87 1d 01 00 00    	ja     c0007e2e <f_mkfs+0xcd4>
c0007d11:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d16:	0f 85 03 01 00 00    	jne    c0007e1f <f_mkfs+0xcc5>
c0007d1c:	83 ff 01             	cmp    edi,0x1
c0007d1f:	0f 86 fa 00 00 00    	jbe    c0007e1f <f_mkfs+0xcc5>
c0007d25:	d1 ef                	shr    edi,1
c0007d27:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d2b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d2f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d32:	85 db                	test   ebx,ebx
c0007d34:	75 2d                	jne    c0007d63 <f_mkfs+0xc09>
c0007d36:	89 cb                	mov    ebx,ecx
c0007d38:	ba 30 81 02 c0       	mov    edx,0xc0028130
c0007d3d:	c1 eb 11             	shr    ebx,0x11
c0007d40:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d48:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d4b:	66 85 c0             	test   ax,ax
c0007d4e:	74 11                	je     c0007d61 <f_mkfs+0xc07>
c0007d50:	83 c2 02             	add    edx,0x2
c0007d53:	39 d8                	cmp    eax,ebx
c0007d55:	77 0a                	ja     c0007d61 <f_mkfs+0xc07>
c0007d57:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d5b:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d5f:	eb e7                	jmp    c0007d48 <f_mkfs+0xbee>
c0007d61:	31 db                	xor    ebx,ebx
c0007d63:	31 d2                	xor    edx,edx
c0007d65:	89 c8                	mov    eax,ecx
c0007d67:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d6b:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d72:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d77:	c1 ea 09             	shr    edx,0x9
c0007d7a:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d7f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d83:	0f 87 96 00 00 00    	ja     c0007e1f <f_mkfs+0xcc5>
c0007d89:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d8d:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d95:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d99:	be 20 00 00 00       	mov    esi,0x20
c0007d9e:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007da3:	e9 a6 fe ff ff       	jmp    c0007c4e <f_mkfs+0xaf4>
c0007da8:	83 c2 02             	add    edx,0x2
c0007dab:	39 c8                	cmp    eax,ecx
c0007dad:	0f 87 60 fe ff ff    	ja     c0007c13 <f_mkfs+0xab9>
c0007db3:	01 ff                	add    edi,edi
c0007db5:	e9 4d fe ff ff       	jmp    c0007c07 <f_mkfs+0xaad>
c0007dba:	8d 04 40             	lea    eax,[eax+eax*2]
c0007dbd:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dc2:	40                   	inc    eax
c0007dc3:	d1 e8                	shr    eax,1
c0007dc5:	83 c0 03             	add    eax,0x3
c0007dc8:	e9 62 fe ff ff       	jmp    c0007c2f <f_mkfs+0xad5>
c0007dcd:	31 d2                	xor    edx,edx
c0007dcf:	89 c8                	mov    eax,ecx
c0007dd1:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007dd5:	85 d2                	test   edx,edx
c0007dd7:	74 0c                	je     c0007de5 <f_mkfs+0xc8b>
c0007dd9:	49                   	dec    ecx
c0007dda:	46                   	inc    esi
c0007ddb:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007de0:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007de5:	89 c8                	mov    eax,ecx
c0007de7:	31 d2                	xor    edx,edx
c0007de9:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ded:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007df1:	e9 c3 fe ff ff       	jmp    c0007cb9 <f_mkfs+0xb5f>
c0007df6:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfb:	77 31                	ja     c0007e2e <f_mkfs+0xcd4>
c0007dfd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e02:	75 1b                	jne    c0007e1f <f_mkfs+0xcc5>
c0007e04:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e0b:	3d 80 00 00 00       	cmp    eax,0x80
c0007e10:	0f 86 d9 fd ff ff    	jbe    c0007bef <f_mkfs+0xa95>
c0007e16:	eb 07                	jmp    c0007e1f <f_mkfs+0xcc5>
c0007e18:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e1d:	76 0a                	jbe    c0007e29 <f_mkfs+0xccf>
c0007e1f:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e24:	e9 ff 03 00 00       	jmp    c0008228 <f_mkfs+0x10ce>
c0007e29:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e2e:	31 d2                	xor    edx,edx
c0007e30:	b9 00 02 00 00       	mov    ecx,0x200
c0007e35:	89 e8                	mov    eax,ebp
c0007e37:	e8 a2 9c ff ff       	call   c0001ade <mem_set>
c0007e3c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e41:	ba 42 82 02 c0       	mov    edx,0xc0028242
c0007e46:	89 e8                	mov    eax,ebp
c0007e48:	e8 7c 9c ff ff       	call   c0001ac9 <mem_cpy>
c0007e4d:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e50:	ba 00 02 00 00       	mov    edx,0x200
c0007e55:	e8 62 9c ff ff       	call   c0001abc <st_word>
c0007e5a:	89 f8                	mov    eax,edi
c0007e5c:	0f b7 d6             	movzx  edx,si
c0007e5f:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e62:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e65:	e8 52 9c ff ff       	call   c0001abc <st_word>
c0007e6a:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e6e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e73:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e76:	75 08                	jne    c0007e80 <f_mkfs+0xd26>
c0007e78:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e80:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e83:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e87:	e8 30 9c ff ff       	call   c0001abc <st_word>
c0007e8c:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e91:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e95:	39 d0                	cmp    eax,edx
c0007e97:	b8 00 00 00 00       	mov    eax,0x0
c0007e9c:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007ea0:	72 0a                	jb     c0007eac <f_mkfs+0xd52>
c0007ea2:	8d 45 13             	lea    eax,[ebp+0x13]
c0007ea5:	e8 12 9c ff ff       	call   c0001abc <st_word>
c0007eaa:	eb 08                	jmp    c0007eb4 <f_mkfs+0xd5a>
c0007eac:	8d 45 20             	lea    eax,[ebp+0x20]
c0007eaf:	e8 0c 9c ff ff       	call   c0001ac0 <st_dword>
c0007eb4:	8d 45 18             	lea    eax,[ebp+0x18]
c0007eb7:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ebc:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ec0:	e8 f7 9b ff ff       	call   c0001abc <st_word>
c0007ec5:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ec8:	ba ff 00 00 00       	mov    edx,0xff
c0007ecd:	e8 ea 9b ff ff       	call   c0001abc <st_word>
c0007ed2:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007ed5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ed9:	e8 e2 9b ff ff       	call   c0001ac0 <st_dword>
c0007ede:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ee3:	75 57                	jne    c0007f3c <f_mkfs+0xde2>
c0007ee5:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ee8:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eed:	e8 ce 9b ff ff       	call   c0001ac0 <st_dword>
c0007ef2:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ef5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ef9:	e8 c2 9b ff ff       	call   c0001ac0 <st_dword>
c0007efe:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f01:	ba 02 00 00 00       	mov    edx,0x2
c0007f06:	e8 b5 9b ff ff       	call   c0001ac0 <st_dword>
c0007f0b:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f0e:	ba 01 00 00 00       	mov    edx,0x1
c0007f13:	e8 a4 9b ff ff       	call   c0001abc <st_word>
c0007f18:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f1b:	ba 06 00 00 00       	mov    edx,0x6
c0007f20:	e8 97 9b ff ff       	call   c0001abc <st_word>
c0007f25:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f29:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f2d:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f30:	b9 13 00 00 00       	mov    ecx,0x13
c0007f35:	ba 4e 82 02 c0       	mov    edx,0xc002824e
c0007f3a:	eb 2f                	jmp    c0007f6b <f_mkfs+0xe11>
c0007f3c:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f3f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f44:	e8 77 9b ff ff       	call   c0001ac0 <st_dword>
c0007f49:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f4e:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f51:	e8 66 9b ff ff       	call   c0001abc <st_word>
c0007f56:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f5a:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f5e:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f61:	b9 13 00 00 00       	mov    ecx,0x13
c0007f66:	ba 62 82 02 c0       	mov    edx,0xc0028262
c0007f6b:	e8 59 9b ff ff       	call   c0001ac9 <mem_cpy>
c0007f70:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f76:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f7b:	89 f0                	mov    eax,esi
c0007f7d:	e8 3a 9b ff ff       	call   c0001abc <st_word>
c0007f82:	83 ec 0c             	sub    esp,0xc
c0007f85:	6a 01                	push   0x1
c0007f87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f8b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f8f:	55                   	push   ebp
c0007f90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f94:	e8 7c 9a ff ff       	call   c0001a15 <disk_write>
c0007f99:	83 c4 20             	add    esp,0x20
c0007f9c:	85 c0                	test   eax,eax
c0007f9e:	0f 85 67 02 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0007fa4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fa9:	0f 85 b7 00 00 00    	jne    c0008066 <f_mkfs+0xf0c>
c0007faf:	83 ec 0c             	sub    esp,0xc
c0007fb2:	6a 01                	push   0x1
c0007fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fb8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fbc:	83 c0 06             	add    eax,0x6
c0007fbf:	83 d2 00             	adc    edx,0x0
c0007fc2:	52                   	push   edx
c0007fc3:	50                   	push   eax
c0007fc4:	55                   	push   ebp
c0007fc5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fc9:	e8 47 9a ff ff       	call   c0001a15 <disk_write>
c0007fce:	83 c4 20             	add    esp,0x20
c0007fd1:	b9 00 02 00 00       	mov    ecx,0x200
c0007fd6:	31 d2                	xor    edx,edx
c0007fd8:	89 e8                	mov    eax,ebp
c0007fda:	e8 ff 9a ff ff       	call   c0001ade <mem_set>
c0007fdf:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fe4:	89 e8                	mov    eax,ebp
c0007fe6:	e8 d5 9a ff ff       	call   c0001ac0 <st_dword>
c0007feb:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007ff1:	ba 72 72 41 61       	mov    edx,0x61417272
c0007ff6:	e8 c5 9a ff ff       	call   c0001ac0 <st_dword>
c0007ffb:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007ffe:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008004:	e8 b7 9a ff ff       	call   c0001ac0 <st_dword>
c0008009:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000800f:	ba 02 00 00 00       	mov    edx,0x2
c0008014:	e8 a7 9a ff ff       	call   c0001ac0 <st_dword>
c0008019:	ba 55 aa 00 00       	mov    edx,0xaa55
c000801e:	89 f0                	mov    eax,esi
c0008020:	e8 97 9a ff ff       	call   c0001abc <st_word>
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	6a 01                	push   0x1
c000802a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000802e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008032:	83 c0 07             	add    eax,0x7
c0008035:	83 d2 00             	adc    edx,0x0
c0008038:	52                   	push   edx
c0008039:	50                   	push   eax
c000803a:	55                   	push   ebp
c000803b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000803f:	e8 d1 99 ff ff       	call   c0001a15 <disk_write>
c0008044:	83 c4 14             	add    esp,0x14
c0008047:	6a 01                	push   0x1
c0008049:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000804d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008051:	83 c0 01             	add    eax,0x1
c0008054:	83 d2 00             	adc    edx,0x0
c0008057:	52                   	push   edx
c0008058:	50                   	push   eax
c0008059:	55                   	push   ebp
c000805a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000805e:	e8 b2 99 ff ff       	call   c0001a15 <disk_write>
c0008063:	83 c4 20             	add    esp,0x20
c0008066:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000806d:	31 d2                	xor    edx,edx
c000806f:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008075:	31 db                	xor    ebx,ebx
c0008077:	89 e8                	mov    eax,ebp
c0008079:	e8 60 9a ff ff       	call   c0001ade <mem_set>
c000807e:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008083:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000808a:	0f 94 c3             	sete   bl
c000808d:	4b                   	dec    ebx
c000808e:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008094:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c000809a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000809f:	75 21                	jne    c00080c2 <f_mkfs+0xf68>
c00080a1:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080a6:	89 e8                	mov    eax,ebp
c00080a8:	e8 13 9a ff ff       	call   c0001ac0 <st_dword>
c00080ad:	8d 45 04             	lea    eax,[ebp+0x4]
c00080b0:	83 ca ff             	or     edx,0xffffffff
c00080b3:	e8 08 9a ff ff       	call   c0001ac0 <st_dword>
c00080b8:	8d 45 08             	lea    eax,[ebp+0x8]
c00080bb:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080c0:	eb 04                	jmp    c00080c6 <f_mkfs+0xf6c>
c00080c2:	89 da                	mov    edx,ebx
c00080c4:	89 e8                	mov    eax,ebp
c00080c6:	e8 f5 99 ff ff       	call   c0001ac0 <st_dword>
c00080cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080d3:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080d7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080db:	39 ce                	cmp    esi,ecx
c00080dd:	76 02                	jbe    c00080e1 <f_mkfs+0xf87>
c00080df:	89 ce                	mov    esi,ecx
c00080e1:	83 ec 0c             	sub    esp,0xc
c00080e4:	56                   	push   esi
c00080e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080e9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080ed:	55                   	push   ebp
c00080ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080f2:	e8 1e 99 ff ff       	call   c0001a15 <disk_write>
c00080f7:	83 c4 20             	add    esp,0x20
c00080fa:	85 c0                	test   eax,eax
c00080fc:	0f 85 09 01 00 00    	jne    c000820b <f_mkfs+0x10b1>
c0008102:	31 d2                	xor    edx,edx
c0008104:	b9 00 02 00 00       	mov    ecx,0x200
c0008109:	89 e8                	mov    eax,ebp
c000810b:	e8 ce 99 ff ff       	call   c0001ade <mem_set>
c0008110:	31 d2                	xor    edx,edx
c0008112:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008116:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000811a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000811e:	75 b3                	jne    c00080d3 <f_mkfs+0xf79>
c0008120:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008123:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000812a:	40                   	inc    eax
c000812b:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000812f:	0f 87 65 ff ff ff    	ja     c000809a <f_mkfs+0xf40>
c0008135:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000813a:	74 04                	je     c0008140 <f_mkfs+0xfe6>
c000813c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008140:	89 fb                	mov    ebx,edi
c0008142:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008146:	76 04                	jbe    c000814c <f_mkfs+0xff2>
c0008148:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000814c:	83 ec 0c             	sub    esp,0xc
c000814f:	53                   	push   ebx
c0008150:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008154:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008158:	55                   	push   ebp
c0008159:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000815d:	e8 b3 98 ff ff       	call   c0001a15 <disk_write>
c0008162:	83 c4 20             	add    esp,0x20
c0008165:	85 c0                	test   eax,eax
c0008167:	0f 85 9e 00 00 00    	jne    c000820b <f_mkfs+0x10b1>
c000816d:	31 d2                	xor    edx,edx
c000816f:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008173:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008177:	29 df                	sub    edi,ebx
c0008179:	75 c5                	jne    c0008140 <f_mkfs+0xfe6>
c000817b:	b1 0c                	mov    cl,0xc
c000817d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008182:	74 1d                	je     c00081a1 <f_mkfs+0x1047>
c0008184:	b8 ff ff 00 00       	mov    eax,0xffff
c0008189:	b1 06                	mov    cl,0x6
c000818b:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000818f:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008193:	72 0c                	jb     c00081a1 <f_mkfs+0x1047>
c0008195:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c000819a:	0f 94 c1             	sete   cl
c000819d:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081a1:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081a6:	75 4c                	jne    c00081f4 <f_mkfs+0x109a>
c00081a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081ac:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081b0:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081b7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081be:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081c9:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081d4:	0f b6 c9             	movzx  ecx,cl
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	55                   	push   ebp
c00081db:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081e6:	e8 2f c2 ff ff       	call   c000441a <create_partition>
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	89 c3                	mov    ebx,eax
c00081f0:	85 c0                	test   eax,eax
c00081f2:	75 34                	jne    c0008228 <f_mkfs+0x10ce>
c00081f4:	31 db                	xor    ebx,ebx
c00081f6:	50                   	push   eax
c00081f7:	6a 00                	push   0x0
c00081f9:	6a 00                	push   0x0
c00081fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081ff:	e8 27 98 ff ff       	call   c0001a2b <disk_ioctl>
c0008204:	83 c4 10             	add    esp,0x10
c0008207:	85 c0                	test   eax,eax
c0008209:	74 1d                	je     c0008228 <f_mkfs+0x10ce>
c000820b:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008213:	75 0c                	jne    c0008221 <f_mkfs+0x10c7>
c0008215:	83 ec 0c             	sub    esp,0xc
c0008218:	55                   	push   ebp
c0008219:	e8 75 00 00 00       	call   c0008293 <ff_memfree>
c000821e:	83 c4 10             	add    esp,0x10
c0008221:	bb 01 00 00 00       	mov    ebx,0x1
c0008226:	eb 48                	jmp    c0008270 <f_mkfs+0x1116>
c0008228:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008230:	75 3e                	jne    c0008270 <f_mkfs+0x1116>
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	55                   	push   ebp
c0008236:	e8 58 00 00 00       	call   c0008293 <ff_memfree>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	eb 30                	jmp    c0008270 <f_mkfs+0x1116>
c0008240:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008245:	0f 85 eb fa ff ff    	jne    c0007d36 <f_mkfs+0xbdc>
c000824b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000824f:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008255:	0f 86 b8 f9 ff ff    	jbe    c0007c13 <f_mkfs+0xab9>
c000825b:	e9 bf fb ff ff       	jmp    c0007e1f <f_mkfs+0xcc5>
c0008260:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008265:	0f 85 c0 fa ff ff    	jne    c0007d2b <f_mkfs+0xbd1>
c000826b:	e9 af fb ff ff       	jmp    c0007e1f <f_mkfs+0xcc5>
c0008270:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008276:	89 d8                	mov    eax,ebx
c0008278:	5b                   	pop    ebx
c0008279:	5e                   	pop    esi
c000827a:	5f                   	pop    edi
c000827b:	5d                   	pop    ebp
c000827c:	c3                   	ret    

c000827d <ff_memalloc>:
c000827d:	83 ec 0c             	sub    esp,0xc
c0008280:	83 ec 0c             	sub    esp,0xc
c0008283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008287:	e8 98 73 00 00       	call   c000f624 <malloc>
c000828c:	83 c4 10             	add    esp,0x10
c000828f:	83 c4 0c             	add    esp,0xc
c0008292:	c3                   	ret    

c0008293 <ff_memfree>:
c0008293:	83 ec 0c             	sub    esp,0xc
c0008296:	83 ec 0c             	sub    esp,0xc
c0008299:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000829d:	e8 92 73 00 00       	call   c000f634 <free>
c00082a2:	83 c4 10             	add    esp,0x10
c00082a5:	90                   	nop
c00082a6:	83 c4 0c             	add    esp,0xc
c00082a9:	c3                   	ret    

c00082aa <ff_uni2oem>:
c00082aa:	83 ec 14             	sub    esp,0x14
c00082ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082b1:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082b5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082bc:	c7 44 24 0c 80 85 02 c0 	mov    DWORD PTR [esp+0xc],0xc0028580
c00082c4:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082c9:	77 0b                	ja     c00082d6 <ff_uni2oem+0x2c>
c00082cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082cf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082d4:	eb 5b                	jmp    c0008331 <ff_uni2oem+0x87>
c00082d6:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082de:	77 51                	ja     c0008331 <ff_uni2oem+0x87>
c00082e0:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082e6:	75 49                	jne    c0008331 <ff_uni2oem+0x87>
c00082e8:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082ef:	eb 0b                	jmp    c00082fc <ff_uni2oem+0x52>
c00082f1:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082f6:	40                   	inc    eax
c00082f7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082fc:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008302:	77 1b                	ja     c000831f <ff_uni2oem+0x75>
c0008304:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008309:	01 c0                	add    eax,eax
c000830b:	89 c2                	mov    edx,eax
c000830d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008311:	01 d0                	add    eax,edx
c0008313:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008316:	0f b7 c0             	movzx  eax,ax
c0008319:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000831d:	75 d2                	jne    c00082f1 <ff_uni2oem+0x47>
c000831f:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008324:	83 e8 80             	sub    eax,0xffffff80
c0008327:	25 ff 00 00 00       	and    eax,0xff
c000832c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008331:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008336:	83 c4 14             	add    esp,0x14
c0008339:	c3                   	ret    

c000833a <ff_oem2uni>:
c000833a:	83 ec 18             	sub    esp,0x18
c000833d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008345:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000834a:	66 89 04 24          	mov    WORD PTR [esp],ax
c000834e:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008355:	c7 44 24 10 80 85 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028580
c000835d:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008363:	77 0b                	ja     c0008370 <ff_oem2uni+0x36>
c0008365:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008369:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000836e:	eb 2d                	jmp    c000839d <ff_oem2uni+0x63>
c0008370:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008376:	75 25                	jne    c000839d <ff_oem2uni+0x63>
c0008378:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000837f:	77 1c                	ja     c000839d <ff_oem2uni+0x63>
c0008381:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008386:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000838b:	01 c0                	add    eax,eax
c000838d:	89 c2                	mov    edx,eax
c000838f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008393:	01 d0                	add    eax,edx
c0008395:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008398:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000839d:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083a2:	83 c4 18             	add    esp,0x18
c00083a5:	c3                   	ret    

c00083a6 <ff_wtoupper>:
c00083a6:	83 ec 10             	sub    esp,0x10
c00083a9:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083b1:	0f 87 3e 01 00 00    	ja     c00084f5 <ff_wtoupper+0x14f>
c00083b7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083bb:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c0:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083c7:	77 07                	ja     c00083d0 <ff_wtoupper+0x2a>
c00083c9:	b8 80 83 02 c0       	mov    eax,0xc0028380
c00083ce:	eb 05                	jmp    c00083d5 <ff_wtoupper+0x2f>
c00083d0:	b8 c0 82 02 c0       	mov    eax,0xc00282c0
c00083d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083dd:	8d 50 02             	lea    edx,[eax+0x2]
c00083e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083e4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083e7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083ec:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083f2:	0f 84 f4 00 00 00    	je     c00084ec <ff_wtoupper+0x146>
c00083f8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083fd:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008402:	0f 82 e4 00 00 00    	jb     c00084ec <ff_wtoupper+0x146>
c0008408:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000840c:	8d 50 02             	lea    edx,[eax+0x2]
c000840f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008413:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008416:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000841b:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008420:	66 c1 e8 08          	shr    ax,0x8
c0008424:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008429:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000843a:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000843f:	01 ca                	add    edx,ecx
c0008441:	39 d0                	cmp    eax,edx
c0008443:	0f 8d 86 00 00 00    	jge    c00084cf <ff_wtoupper+0x129>
c0008449:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000844e:	83 f8 08             	cmp    eax,0x8
c0008451:	0f 87 94 00 00 00    	ja     c00084eb <ff_wtoupper+0x145>
c0008457:	8b 04 85 80 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7d80]
c000845e:	ff e0                	jmp    eax
c0008460:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008465:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000846a:	29 c2                	sub    edx,eax
c000846c:	89 d0                	mov    eax,edx
c000846e:	01 c0                	add    eax,eax
c0008470:	89 c2                	mov    edx,eax
c0008472:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008476:	01 d0                	add    eax,edx
c0008478:	66 8b 00             	mov    ax,WORD PTR [eax]
c000847b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008480:	eb 4b                	jmp    c00084cd <ff_wtoupper+0x127>
c0008482:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008487:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000848b:	83 e0 01             	and    eax,0x1
c000848e:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008493:	eb 38                	jmp    c00084cd <ff_wtoupper+0x127>
c0008495:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000849b:	eb 30                	jmp    c00084cd <ff_wtoupper+0x127>
c000849d:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084a3:	eb 28                	jmp    c00084cd <ff_wtoupper+0x127>
c00084a5:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084ab:	eb 20                	jmp    c00084cd <ff_wtoupper+0x127>
c00084ad:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084b3:	eb 18                	jmp    c00084cd <ff_wtoupper+0x127>
c00084b5:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084bb:	eb 10                	jmp    c00084cd <ff_wtoupper+0x127>
c00084bd:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084c3:	eb 08                	jmp    c00084cd <ff_wtoupper+0x127>
c00084c5:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084cc:	90                   	nop
c00084cd:	eb 1c                	jmp    c00084eb <ff_wtoupper+0x145>
c00084cf:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084d5:	0f 85 fe fe ff ff    	jne    c00083d9 <ff_wtoupper+0x33>
c00084db:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084e0:	01 c0                	add    eax,eax
c00084e2:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084e6:	e9 ee fe ff ff       	jmp    c00083d9 <ff_wtoupper+0x33>
c00084eb:	90                   	nop
c00084ec:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084f9:	83 c4 10             	add    esp,0x10
c00084fc:	c3                   	ret    

c00084fd <psrc_set_converter>:
c00084fd:	56                   	push   esi
c00084fe:	89 d6                	mov    esi,edx
c0008500:	53                   	push   ebx
c0008501:	89 c3                	mov    ebx,eax
c0008503:	83 ec 0c             	sub    esp,0xc
c0008506:	52                   	push   edx
c0008507:	50                   	push   eax
c0008508:	e8 6f 55 00 00       	call   c000da7c <sinc_set_converter>
c000850d:	83 c4 10             	add    esp,0x10
c0008510:	85 c0                	test   eax,eax
c0008512:	74 25                	je     c0008539 <psrc_set_converter+0x3c>
c0008514:	50                   	push   eax
c0008515:	50                   	push   eax
c0008516:	56                   	push   esi
c0008517:	53                   	push   ebx
c0008518:	e8 17 5d 00 00       	call   c000e234 <zoh_set_converter>
c000851d:	83 c4 10             	add    esp,0x10
c0008520:	85 c0                	test   eax,eax
c0008522:	74 15                	je     c0008539 <psrc_set_converter+0x3c>
c0008524:	51                   	push   ecx
c0008525:	51                   	push   ecx
c0008526:	56                   	push   esi
c0008527:	53                   	push   ebx
c0008528:	e8 0f 11 00 00       	call   c000963c <linear_set_converter>
c000852d:	83 c4 10             	add    esp,0x10
c0008530:	ba 0a 00 00 00       	mov    edx,0xa
c0008535:	85 c0                	test   eax,eax
c0008537:	75 02                	jne    c000853b <psrc_set_converter+0x3e>
c0008539:	31 d2                	xor    edx,edx
c000853b:	89 d0                	mov    eax,edx
c000853d:	5a                   	pop    edx
c000853e:	5b                   	pop    ebx
c000853f:	5e                   	pop    esi
c0008540:	c3                   	ret    

c0008541 <src_delete>:
c0008541:	53                   	push   ebx
c0008542:	83 ec 08             	sub    esp,0x8
c0008545:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008549:	85 db                	test   ebx,ebx
c000854b:	74 29                	je     c0008576 <src_delete+0x35>
c000854d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008550:	85 c0                	test   eax,eax
c0008552:	74 0c                	je     c0008560 <src_delete+0x1f>
c0008554:	83 ec 0c             	sub    esp,0xc
c0008557:	50                   	push   eax
c0008558:	e8 d7 70 00 00       	call   c000f634 <free>
c000855d:	83 c4 10             	add    esp,0x10
c0008560:	50                   	push   eax
c0008561:	6a 3c                	push   0x3c
c0008563:	6a 00                	push   0x0
c0008565:	53                   	push   ebx
c0008566:	e8 59 81 ff ff       	call   c00006c4 <memset>
c000856b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000856e:	e8 c1 70 00 00       	call   c000f634 <free>
c0008573:	83 c4 10             	add    esp,0x10
c0008576:	31 c0                	xor    eax,eax
c0008578:	83 c4 08             	add    esp,0x8
c000857b:	5b                   	pop    ebx
c000857c:	c3                   	ret    

c000857d <src_process>:
c000857d:	55                   	push   ebp
c000857e:	57                   	push   edi
c000857f:	56                   	push   esi
c0008580:	53                   	push   ebx
c0008581:	83 ec 1c             	sub    esp,0x1c
c0008584:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008588:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000858c:	85 ed                	test   ebp,ebp
c000858e:	0f 84 6f 01 00 00    	je     c0008703 <src_process+0x186>
c0008594:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008598:	0f 84 6c 01 00 00    	je     c000870a <src_process+0x18d>
c000859e:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00085a2:	0f 84 62 01 00 00    	je     c000870a <src_process+0x18d>
c00085a8:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00085af:	0f 85 5c 01 00 00    	jne    c0008711 <src_process+0x194>
c00085b5:	85 db                	test   ebx,ebx
c00085b7:	0f 84 5b 01 00 00    	je     c0008718 <src_process+0x19b>
c00085bd:	8b 33                	mov    esi,DWORD PTR [ebx]
c00085bf:	85 f6                	test   esi,esi
c00085c1:	0f 84 58 01 00 00    	je     c000871f <src_process+0x1a2>
c00085c7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00085ca:	85 ff                	test   edi,edi
c00085cc:	0f 84 4d 01 00 00    	je     c000871f <src_process+0x1a2>
c00085d2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085d5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00085d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085e0:	68 00 00 70 3f       	push   0x3f700000
c00085e5:	6a 00                	push   0x0
c00085e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085ef:	e8 ab ec 01 00       	call   c002729f <__ltdf2>
c00085f4:	83 c4 10             	add    esp,0x10
c00085f7:	85 c0                	test   eax,eax
c00085f9:	0f 88 27 01 00 00    	js     c0008726 <src_process+0x1a9>
c00085ff:	68 00 00 70 40       	push   0x40700000
c0008604:	6a 00                	push   0x0
c0008606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000860a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000860e:	e8 6e ec 01 00       	call   c0027281 <__gtdf2>
c0008613:	83 c4 10             	add    esp,0x10
c0008616:	85 c0                	test   eax,eax
c0008618:	0f 8f 08 01 00 00    	jg     c0008726 <src_process+0x1a9>
c000861e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008622:	79 07                	jns    c000862b <src_process+0xae>
c0008624:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000862b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000862e:	85 c0                	test   eax,eax
c0008630:	79 50                	jns    c0008682 <src_process+0x105>
c0008632:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008639:	39 fe                	cmp    esi,edi
c000863b:	72 37                	jb     c0008674 <src_process+0xf7>
c000863d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008644:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000864b:	68 00 00 70 3f       	push   0x3f700000
c0008650:	6a 00                	push   0x0
c0008652:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008655:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008658:	e8 42 ec 01 00       	call   c002729f <__ltdf2>
c000865d:	83 c4 10             	add    esp,0x10
c0008660:	85 c0                	test   eax,eax
c0008662:	79 37                	jns    c000869b <src_process+0x11e>
c0008664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008668:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000866c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000866f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008672:	eb 27                	jmp    c000869b <src_process+0x11e>
c0008674:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008677:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000867b:	8d 04 86             	lea    eax,[esi+eax*4]
c000867e:	39 c7                	cmp    edi,eax
c0008680:	eb 0d                	jmp    c000868f <src_process+0x112>
c0008682:	39 fe                	cmp    esi,edi
c0008684:	72 ee                	jb     c0008674 <src_process+0xf7>
c0008686:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000868a:	8d 04 87             	lea    eax,[edi+eax*4]
c000868d:	39 c6                	cmp    esi,eax
c000868f:	73 ac                	jae    c000863d <src_process+0xc0>
c0008691:	b8 10 00 00 00       	mov    eax,0x10
c0008696:	e9 90 00 00 00       	jmp    c000872b <src_process+0x1ae>
c000869b:	83 ec 10             	sub    esp,0x10
c000869e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00086a1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00086a4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00086a7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00086aa:	e8 f5 e2 01 00       	call   c00269a4 <__subdf3>
c00086af:	83 c4 18             	add    esp,0x18
c00086b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00086ba:	52                   	push   edx
c00086bb:	50                   	push   eax
c00086bc:	e8 6f ed 01 00       	call   c0027430 <fabs>
c00086c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086c9:	83 c4 10             	add    esp,0x10
c00086cc:	68 af 03 d2 3c       	push   0x3cd203af
c00086d1:	68 16 56 e7 9e       	push   0x9ee75616
c00086d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086de:	e8 bc eb 01 00       	call   c002729f <__ltdf2>
c00086e3:	83 c4 10             	add    esp,0x10
c00086e6:	85 c0                	test   eax,eax
c00086e8:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086ec:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086f0:	79 05                	jns    c00086f7 <src_process+0x17a>
c00086f2:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086f5:	eb 03                	jmp    c00086fa <src_process+0x17d>
c00086f7:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086fa:	83 c4 1c             	add    esp,0x1c
c00086fd:	5b                   	pop    ebx
c00086fe:	5e                   	pop    esi
c00086ff:	5f                   	pop    edi
c0008700:	5d                   	pop    ebp
c0008701:	ff e0                	jmp    eax
c0008703:	b8 02 00 00 00       	mov    eax,0x2
c0008708:	eb 21                	jmp    c000872b <src_process+0x1ae>
c000870a:	b8 07 00 00 00       	mov    eax,0x7
c000870f:	eb 1a                	jmp    c000872b <src_process+0x1ae>
c0008711:	b8 12 00 00 00       	mov    eax,0x12
c0008716:	eb 13                	jmp    c000872b <src_process+0x1ae>
c0008718:	b8 03 00 00 00       	mov    eax,0x3
c000871d:	eb 0c                	jmp    c000872b <src_process+0x1ae>
c000871f:	b8 04 00 00 00       	mov    eax,0x4
c0008724:	eb 05                	jmp    c000872b <src_process+0x1ae>
c0008726:	b8 06 00 00 00       	mov    eax,0x6
c000872b:	83 c4 1c             	add    esp,0x1c
c000872e:	5b                   	pop    ebx
c000872f:	5e                   	pop    esi
c0008730:	5f                   	pop    edi
c0008731:	5d                   	pop    ebp
c0008732:	c3                   	ret    

c0008733 <src_callback_read>:
c0008733:	55                   	push   ebp
c0008734:	57                   	push   edi
c0008735:	56                   	push   esi
c0008736:	53                   	push   ebx
c0008737:	83 ec 3c             	sub    esp,0x3c
c000873a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000873e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008742:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008746:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c000874a:	85 ed                	test   ebp,ebp
c000874c:	0f 8e 52 01 00 00    	jle    c00088a4 <src_callback_read+0x171>
c0008752:	85 db                	test   ebx,ebx
c0008754:	0f 84 4a 01 00 00    	je     c00088a4 <src_callback_read+0x171>
c000875a:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008761:	74 0c                	je     c000876f <src_callback_read+0x3c>
c0008763:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c000876a:	e9 35 01 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c000876f:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008773:	75 0c                	jne    c0008781 <src_callback_read+0x4e>
c0008775:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000877c:	e9 23 01 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c0008781:	51                   	push   ecx
c0008782:	6a 24                	push   0x24
c0008784:	6a 00                	push   0x0
c0008786:	8d 44 24 18          	lea    eax,[esp+0x18]
c000878a:	50                   	push   eax
c000878b:	e8 34 7f ff ff       	call   c00006c4 <memset>
c0008790:	83 c4 10             	add    esp,0x10
c0008793:	68 00 00 70 3f       	push   0x3f700000
c0008798:	6a 00                	push   0x0
c000879a:	57                   	push   edi
c000879b:	56                   	push   esi
c000879c:	e8 fe ea 01 00       	call   c002729f <__ltdf2>
c00087a1:	83 c4 10             	add    esp,0x10
c00087a4:	85 c0                	test   eax,eax
c00087a6:	78 3e                	js     c00087e6 <src_callback_read+0xb3>
c00087a8:	68 00 00 70 40       	push   0x40700000
c00087ad:	6a 00                	push   0x0
c00087af:	57                   	push   edi
c00087b0:	56                   	push   esi
c00087b1:	e8 cb ea 01 00       	call   c0027281 <__gtdf2>
c00087b6:	83 c4 10             	add    esp,0x10
c00087b9:	85 c0                	test   eax,eax
c00087bb:	7f 29                	jg     c00087e6 <src_callback_read+0xb3>
c00087bd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087c1:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00087c9:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00087cd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00087d0:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00087d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087d8:	31 f6                	xor    esi,esi
c00087da:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087e1:	e9 97 00 00 00       	jmp    c000887d <src_callback_read+0x14a>
c00087e6:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087ed:	e9 b2 00 00 00       	jmp    c00088a4 <src_callback_read+0x171>
c00087f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087fa:	52                   	push   edx
c00087fb:	52                   	push   edx
c00087fc:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008800:	50                   	push   eax
c0008801:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008804:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008807:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000880b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000880f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008813:	83 c4 10             	add    esp,0x10
c0008816:	85 c0                	test   eax,eax
c0008818:	75 08                	jne    c0008822 <src_callback_read+0xef>
c000881a:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008822:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008829:	50                   	push   eax
c000882a:	50                   	push   eax
c000882b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000882f:	50                   	push   eax
c0008830:	53                   	push   ebx
c0008831:	e8 47 fd ff ff       	call   c000857d <src_process>
c0008836:	83 c4 10             	add    esp,0x10
c0008839:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008840:	85 c0                	test   eax,eax
c0008842:	75 49                	jne    c000888d <src_callback_read+0x15a>
c0008844:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008848:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000884b:	89 f9                	mov    ecx,edi
c000884d:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008851:	0f af ca             	imul   ecx,edx
c0008854:	c1 e1 02             	shl    ecx,0x2
c0008857:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c000885b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000885f:	0f af d1             	imul   edx,ecx
c0008862:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008866:	c1 e2 02             	shl    edx,0x2
c0008869:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c000886d:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008870:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008875:	74 12                	je     c0008889 <src_callback_read+0x156>
c0008877:	39 d5                	cmp    ebp,edx
c0008879:	7e 14                	jle    c000888f <src_callback_read+0x15c>
c000887b:	89 d6                	mov    esi,edx
c000887d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008882:	75 9e                	jne    c0008822 <src_callback_read+0xef>
c0008884:	e9 69 ff ff ff       	jmp    c00087f2 <src_callback_read+0xbf>
c0008889:	85 c9                	test   ecx,ecx
c000888b:	75 ea                	jne    c0008877 <src_callback_read+0x144>
c000888d:	89 f2                	mov    edx,esi
c000888f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008893:	85 c0                	test   eax,eax
c0008895:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008898:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000889c:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000889f:	74 05                	je     c00088a6 <src_callback_read+0x173>
c00088a1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00088a4:	31 d2                	xor    edx,edx
c00088a6:	83 c4 3c             	add    esp,0x3c
c00088a9:	89 d0                	mov    eax,edx
c00088ab:	5b                   	pop    ebx
c00088ac:	5e                   	pop    esi
c00088ad:	5f                   	pop    edi
c00088ae:	5d                   	pop    ebp
c00088af:	c3                   	ret    

c00088b0 <src_set_ratio>:
c00088b0:	57                   	push   edi
c00088b1:	ba 02 00 00 00       	mov    edx,0x2
c00088b6:	56                   	push   esi
c00088b7:	53                   	push   ebx
c00088b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088c4:	85 db                	test   ebx,ebx
c00088c6:	74 4c                	je     c0008914 <src_set_ratio+0x64>
c00088c8:	ba 07 00 00 00       	mov    edx,0x7
c00088cd:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088d1:	74 41                	je     c0008914 <src_set_ratio+0x64>
c00088d3:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088d7:	74 3b                	je     c0008914 <src_set_ratio+0x64>
c00088d9:	68 00 00 70 3f       	push   0x3f700000
c00088de:	6a 00                	push   0x0
c00088e0:	57                   	push   edi
c00088e1:	56                   	push   esi
c00088e2:	e8 b8 e9 01 00       	call   c002729f <__ltdf2>
c00088e7:	83 c4 10             	add    esp,0x10
c00088ea:	ba 06 00 00 00       	mov    edx,0x6
c00088ef:	85 c0                	test   eax,eax
c00088f1:	78 21                	js     c0008914 <src_set_ratio+0x64>
c00088f3:	68 00 00 70 40       	push   0x40700000
c00088f8:	6a 00                	push   0x0
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	e8 80 e9 01 00       	call   c0027281 <__gtdf2>
c0008901:	83 c4 10             	add    esp,0x10
c0008904:	ba 06 00 00 00       	mov    edx,0x6
c0008909:	85 c0                	test   eax,eax
c000890b:	7f 07                	jg     c0008914 <src_set_ratio+0x64>
c000890d:	89 33                	mov    DWORD PTR [ebx],esi
c000890f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008912:	31 d2                	xor    edx,edx
c0008914:	5b                   	pop    ebx
c0008915:	89 d0                	mov    eax,edx
c0008917:	5e                   	pop    esi
c0008918:	5f                   	pop    edi
c0008919:	c3                   	ret    

c000891a <src_get_channels>:
c000891a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000891e:	b8 02 00 00 00       	mov    eax,0x2
c0008923:	85 d2                	test   edx,edx
c0008925:	74 14                	je     c000893b <src_get_channels+0x21>
c0008927:	b8 07 00 00 00       	mov    eax,0x7
c000892c:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008930:	74 09                	je     c000893b <src_get_channels+0x21>
c0008932:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008936:	74 03                	je     c000893b <src_get_channels+0x21>
c0008938:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000893b:	c3                   	ret    

c000893c <src_reset>:
c000893c:	53                   	push   ebx
c000893d:	b8 02 00 00 00       	mov    eax,0x2
c0008942:	83 ec 08             	sub    esp,0x8
c0008945:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008949:	85 db                	test   ebx,ebx
c000894b:	74 36                	je     c0008983 <src_reset+0x47>
c000894d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008950:	85 c0                	test   eax,eax
c0008952:	74 09                	je     c000895d <src_reset+0x21>
c0008954:	83 ec 0c             	sub    esp,0xc
c0008957:	53                   	push   ebx
c0008958:	ff d0                	call   eax
c000895a:	83 c4 10             	add    esp,0x10
c000895d:	31 c0                	xor    eax,eax
c000895f:	31 d2                	xor    edx,edx
c0008961:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008964:	89 03                	mov    DWORD PTR [ebx],eax
c0008966:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008969:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000896c:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008973:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000897a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008981:	31 c0                	xor    eax,eax
c0008983:	83 c4 08             	add    esp,0x8
c0008986:	5b                   	pop    ebx
c0008987:	c3                   	ret    

c0008988 <src_new>:
c0008988:	57                   	push   edi
c0008989:	56                   	push   esi
c000898a:	53                   	push   ebx
c000898b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000898f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008993:	85 f6                	test   esi,esi
c0008995:	74 73                	je     c0008a0a <src_new+0x82>
c0008997:	85 ff                	test   edi,edi
c0008999:	7f 08                	jg     c00089a3 <src_new+0x1b>
c000899b:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c00089a1:	eb 1e                	jmp    c00089c1 <src_new+0x39>
c00089a3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00089a9:	50                   	push   eax
c00089aa:	50                   	push   eax
c00089ab:	6a 3c                	push   0x3c
c00089ad:	6a 01                	push   0x1
c00089af:	e8 a0 6c 00 00       	call   c000f654 <calloc>
c00089b4:	83 c4 10             	add    esp,0x10
c00089b7:	89 c3                	mov    ebx,eax
c00089b9:	85 c0                	test   eax,eax
c00089bb:	75 10                	jne    c00089cd <src_new+0x45>
c00089bd:	85 f6                	test   esi,esi
c00089bf:	75 04                	jne    c00089c5 <src_new+0x3d>
c00089c1:	31 db                	xor    ebx,ebx
c00089c3:	eb 4b                	jmp    c0008a10 <src_new+0x88>
c00089c5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089cb:	eb 43                	jmp    c0008a10 <src_new+0x88>
c00089cd:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089d0:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089db:	e8 1d fb ff ff       	call   c00084fd <psrc_set_converter>
c00089e0:	85 c0                	test   eax,eax
c00089e2:	74 18                	je     c00089fc <src_new+0x74>
c00089e4:	85 f6                	test   esi,esi
c00089e6:	74 06                	je     c00089ee <src_new+0x66>
c00089e8:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089ee:	83 ec 0c             	sub    esp,0xc
c00089f1:	53                   	push   ebx
c00089f2:	31 db                	xor    ebx,ebx
c00089f4:	e8 3b 6c 00 00       	call   c000f634 <free>
c00089f9:	83 c4 10             	add    esp,0x10
c00089fc:	83 ec 0c             	sub    esp,0xc
c00089ff:	53                   	push   ebx
c0008a00:	e8 37 ff ff ff       	call   c000893c <src_reset>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	eb 06                	jmp    c0008a10 <src_new+0x88>
c0008a0a:	85 ff                	test   edi,edi
c0008a0c:	7f 9b                	jg     c00089a9 <src_new+0x21>
c0008a0e:	eb b1                	jmp    c00089c1 <src_new+0x39>
c0008a10:	89 d8                	mov    eax,ebx
c0008a12:	5b                   	pop    ebx
c0008a13:	5e                   	pop    esi
c0008a14:	5f                   	pop    edi
c0008a15:	c3                   	ret    

c0008a16 <src_callback_new>:
c0008a16:	56                   	push   esi
c0008a17:	53                   	push   ebx
c0008a18:	53                   	push   ebx
c0008a19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008a1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a21:	85 f6                	test   esi,esi
c0008a23:	75 0e                	jne    c0008a33 <src_callback_new+0x1d>
c0008a25:	31 db                	xor    ebx,ebx
c0008a27:	85 c0                	test   eax,eax
c0008a29:	74 47                	je     c0008a72 <src_callback_new+0x5c>
c0008a2b:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a31:	eb 3f                	jmp    c0008a72 <src_callback_new+0x5c>
c0008a33:	85 c0                	test   eax,eax
c0008a35:	74 06                	je     c0008a3d <src_callback_new+0x27>
c0008a37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a3d:	51                   	push   ecx
c0008a3e:	50                   	push   eax
c0008a3f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a43:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a47:	e8 3c ff ff ff       	call   c0008988 <src_new>
c0008a4c:	83 c4 10             	add    esp,0x10
c0008a4f:	89 c3                	mov    ebx,eax
c0008a51:	85 c0                	test   eax,eax
c0008a53:	74 1d                	je     c0008a72 <src_callback_new+0x5c>
c0008a55:	83 ec 0c             	sub    esp,0xc
c0008a58:	50                   	push   eax
c0008a59:	e8 de fe ff ff       	call   c000893c <src_reset>
c0008a5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a62:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a69:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a6c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a6f:	83 c4 10             	add    esp,0x10
c0008a72:	89 d8                	mov    eax,ebx
c0008a74:	5a                   	pop    edx
c0008a75:	5b                   	pop    ebx
c0008a76:	5e                   	pop    esi
c0008a77:	c3                   	ret    

c0008a78 <src_get_name>:
c0008a78:	53                   	push   ebx
c0008a79:	83 ec 14             	sub    esp,0x14
c0008a7c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a80:	53                   	push   ebx
c0008a81:	e8 d0 4f 00 00       	call   c000da56 <sinc_get_name>
c0008a86:	83 c4 10             	add    esp,0x10
c0008a89:	85 c0                	test   eax,eax
c0008a8b:	75 1d                	jne    c0008aaa <src_get_name+0x32>
c0008a8d:	83 ec 0c             	sub    esp,0xc
c0008a90:	53                   	push   ebx
c0008a91:	e8 80 57 00 00       	call   c000e216 <zoh_get_name>
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	85 c0                	test   eax,eax
c0008a9b:	75 0d                	jne    c0008aaa <src_get_name+0x32>
c0008a9d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008aa1:	83 c4 08             	add    esp,0x8
c0008aa4:	5b                   	pop    ebx
c0008aa5:	e9 74 0b 00 00       	jmp    c000961e <linear_get_name>
c0008aaa:	83 c4 08             	add    esp,0x8
c0008aad:	5b                   	pop    ebx
c0008aae:	c3                   	ret    

c0008aaf <src_get_description>:
c0008aaf:	53                   	push   ebx
c0008ab0:	83 ec 14             	sub    esp,0x14
c0008ab3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008ab7:	53                   	push   ebx
c0008ab8:	e8 ac 4f 00 00       	call   c000da69 <sinc_get_description>
c0008abd:	83 c4 10             	add    esp,0x10
c0008ac0:	85 c0                	test   eax,eax
c0008ac2:	75 1d                	jne    c0008ae1 <src_get_description+0x32>
c0008ac4:	83 ec 0c             	sub    esp,0xc
c0008ac7:	53                   	push   ebx
c0008ac8:	e8 58 57 00 00       	call   c000e225 <zoh_get_description>
c0008acd:	83 c4 10             	add    esp,0x10
c0008ad0:	85 c0                	test   eax,eax
c0008ad2:	75 0d                	jne    c0008ae1 <src_get_description+0x32>
c0008ad4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ad8:	83 c4 08             	add    esp,0x8
c0008adb:	5b                   	pop    ebx
c0008adc:	e9 4c 0b 00 00       	jmp    c000962d <linear_get_description>
c0008ae1:	83 c4 08             	add    esp,0x8
c0008ae4:	5b                   	pop    ebx
c0008ae5:	c3                   	ret    

c0008ae6 <src_get_version>:
c0008ae6:	b8 80 86 02 c0       	mov    eax,0xc0028680
c0008aeb:	c3                   	ret    

c0008aec <src_is_valid_ratio>:
c0008aec:	83 ec 1c             	sub    esp,0x1c
c0008aef:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008af3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008af7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008afb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008aff:	68 00 00 70 3f       	push   0x3f700000
c0008b04:	6a 00                	push   0x0
c0008b06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b0e:	e8 8c e7 01 00       	call   c002729f <__ltdf2>
c0008b13:	83 c4 10             	add    esp,0x10
c0008b16:	31 d2                	xor    edx,edx
c0008b18:	85 c0                	test   eax,eax
c0008b1a:	78 1e                	js     c0008b3a <src_is_valid_ratio+0x4e>
c0008b1c:	68 00 00 70 40       	push   0x40700000
c0008b21:	6a 00                	push   0x0
c0008b23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b2b:	e8 51 e7 01 00       	call   c0027281 <__gtdf2>
c0008b30:	31 d2                	xor    edx,edx
c0008b32:	83 c4 10             	add    esp,0x10
c0008b35:	85 c0                	test   eax,eax
c0008b37:	0f 9e c2             	setle  dl
c0008b3a:	89 d0                	mov    eax,edx
c0008b3c:	83 c4 1c             	add    esp,0x1c
c0008b3f:	c3                   	ret    

c0008b40 <src_error>:
c0008b40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b44:	31 c0                	xor    eax,eax
c0008b46:	85 d2                	test   edx,edx
c0008b48:	74 03                	je     c0008b4d <src_error+0xd>
c0008b4a:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b4d:	c3                   	ret    

c0008b4e <src_strerror>:
c0008b4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b52:	31 c0                	xor    eax,eax
c0008b54:	83 fa 17             	cmp    edx,0x17
c0008b57:	77 07                	ja     c0008b60 <src_strerror+0x12>
c0008b59:	8b 04 95 e0 8a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7520]
c0008b60:	c3                   	ret    

c0008b61 <src_simple>:
c0008b61:	56                   	push   esi
c0008b62:	53                   	push   ebx
c0008b63:	83 ec 18             	sub    esp,0x18
c0008b66:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b6a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b6e:	50                   	push   eax
c0008b6f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b73:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b77:	e8 0c fe ff ff       	call   c0008988 <src_new>
c0008b7c:	83 c4 10             	add    esp,0x10
c0008b7f:	85 c0                	test   eax,eax
c0008b81:	75 06                	jne    c0008b89 <src_simple+0x28>
c0008b83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b87:	eb 25                	jmp    c0008bae <src_simple+0x4d>
c0008b89:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b90:	89 c3                	mov    ebx,eax
c0008b92:	50                   	push   eax
c0008b93:	50                   	push   eax
c0008b94:	56                   	push   esi
c0008b95:	53                   	push   ebx
c0008b96:	e8 e2 f9 ff ff       	call   c000857d <src_process>
c0008b9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ba2:	e8 9a f9 ff ff       	call   c0008541 <src_delete>
c0008ba7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bab:	83 c4 10             	add    esp,0x10
c0008bae:	83 c4 14             	add    esp,0x14
c0008bb1:	5b                   	pop    ebx
c0008bb2:	5e                   	pop    esi
c0008bb3:	c3                   	ret    

c0008bb4 <src_short_to_float_array>:
c0008bb4:	53                   	push   ebx
c0008bb5:	83 ec 18             	sub    esp,0x18
c0008bb8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bbc:	85 db                	test   ebx,ebx
c0008bbe:	74 54                	je     c0008c14 <src_short_to_float_array+0x60>
c0008bc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bc4:	4b                   	dec    ebx
c0008bc5:	83 ec 0c             	sub    esp,0xc
c0008bc8:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008bcc:	50                   	push   eax
c0008bcd:	e8 61 e4 01 00       	call   c0027033 <__floatsidf>
c0008bd2:	83 c4 10             	add    esp,0x10
c0008bd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bdd:	68 00 00 00 3f       	push   0x3f000000
c0008be2:	6a 00                	push   0x0
c0008be4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008be8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bec:	e8 df dd 01 00       	call   c00269d0 <__muldf3>
c0008bf1:	59                   	pop    ecx
c0008bf2:	59                   	pop    ecx
c0008bf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bf7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c03:	e8 9b e6 01 00       	call   c00272a3 <__truncdfsf2>
c0008c08:	83 c4 10             	add    esp,0x10
c0008c0b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008c0f:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008c12:	eb a8                	jmp    c0008bbc <src_short_to_float_array+0x8>
c0008c14:	83 c4 18             	add    esp,0x18
c0008c17:	5b                   	pop    ebx
c0008c18:	c3                   	ret    

c0008c19 <src_float_to_short_array>:
c0008c19:	56                   	push   esi
c0008c1a:	53                   	push   ebx
c0008c1b:	83 ec 14             	sub    esp,0x14
c0008c1e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008c22:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c26:	85 db                	test   ebx,ebx
c0008c28:	0f 84 a4 00 00 00    	je     c0008cd2 <src_float_to_short_array+0xb9>
c0008c2e:	83 ec 0c             	sub    esp,0xc
c0008c31:	4b                   	dec    ebx
c0008c32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c36:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c39:	e8 89 e7 01 00       	call   c00273c7 <__extendsfdf2>
c0008c3e:	83 c4 10             	add    esp,0x10
c0008c41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c49:	68 00 00 e0 41       	push   0x41e00000
c0008c4e:	6a 00                	push   0x0
c0008c50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c58:	e8 73 dd 01 00       	call   c00269d0 <__muldf3>
c0008c5d:	83 c4 10             	add    esp,0x10
c0008c60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c68:	68 ff ff df 41       	push   0x41dfffff
c0008c6d:	68 00 00 c0 ff       	push   0xffc00000
c0008c72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c7a:	e8 1e e6 01 00       	call   c002729d <__gedf2>
c0008c7f:	83 c4 10             	add    esp,0x10
c0008c82:	85 c0                	test   eax,eax
c0008c84:	78 08                	js     c0008c8e <src_float_to_short_array+0x75>
c0008c86:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c8c:	eb 98                	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008c8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008c93:	6a 00                	push   0x0
c0008c95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c9d:	e8 ff e5 01 00       	call   c00272a1 <__ledf2>
c0008ca2:	83 c4 10             	add    esp,0x10
c0008ca5:	85 c0                	test   eax,eax
c0008ca7:	7f 0b                	jg     c0008cb4 <src_float_to_short_array+0x9b>
c0008ca9:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008caf:	e9 72 ff ff ff       	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008cb4:	50                   	push   eax
c0008cb5:	50                   	push   eax
c0008cb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cbe:	e8 8d e7 01 00       	call   c0027450 <lrint>
c0008cc3:	83 c4 10             	add    esp,0x10
c0008cc6:	c1 f8 10             	sar    eax,0x10
c0008cc9:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ccd:	e9 54 ff ff ff       	jmp    c0008c26 <src_float_to_short_array+0xd>
c0008cd2:	83 c4 14             	add    esp,0x14
c0008cd5:	5b                   	pop    ebx
c0008cd6:	5e                   	pop    esi
c0008cd7:	c3                   	ret    

c0008cd8 <src_int_to_float_array>:
c0008cd8:	53                   	push   ebx
c0008cd9:	83 ec 18             	sub    esp,0x18
c0008cdc:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ce0:	85 db                	test   ebx,ebx
c0008ce2:	74 52                	je     c0008d36 <src_int_to_float_array+0x5e>
c0008ce4:	83 ec 0c             	sub    esp,0xc
c0008ce7:	4b                   	dec    ebx
c0008ce8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cec:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cef:	e8 3f e3 01 00       	call   c0027033 <__floatsidf>
c0008cf4:	83 c4 10             	add    esp,0x10
c0008cf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cfb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cff:	68 00 00 00 3e       	push   0x3e000000
c0008d04:	6a 00                	push   0x0
c0008d06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d0e:	e8 bd dc 01 00       	call   c00269d0 <__muldf3>
c0008d13:	59                   	pop    ecx
c0008d14:	59                   	pop    ecx
c0008d15:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008d19:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 79 e5 01 00       	call   c00272a3 <__truncdfsf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d31:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008d34:	eb aa                	jmp    c0008ce0 <src_int_to_float_array+0x8>
c0008d36:	83 c4 18             	add    esp,0x18
c0008d39:	5b                   	pop    ebx
c0008d3a:	c3                   	ret    

c0008d3b <src_float_to_int_array>:
c0008d3b:	56                   	push   esi
c0008d3c:	53                   	push   ebx
c0008d3d:	83 ec 14             	sub    esp,0x14
c0008d40:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d44:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d48:	85 db                	test   ebx,ebx
c0008d4a:	0f 84 a2 00 00 00    	je     c0008df2 <src_float_to_int_array+0xb7>
c0008d50:	83 ec 0c             	sub    esp,0xc
c0008d53:	4b                   	dec    ebx
c0008d54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d58:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d5b:	e8 67 e6 01 00       	call   c00273c7 <__extendsfdf2>
c0008d60:	83 c4 10             	add    esp,0x10
c0008d63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d6b:	68 00 00 e0 41       	push   0x41e00000
c0008d70:	6a 00                	push   0x0
c0008d72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d7a:	e8 51 dc 01 00       	call   c00269d0 <__muldf3>
c0008d7f:	83 c4 10             	add    esp,0x10
c0008d82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d8a:	68 ff ff df 41       	push   0x41dfffff
c0008d8f:	68 00 00 c0 ff       	push   0xffc00000
c0008d94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d9c:	e8 fc e4 01 00       	call   c002729d <__gedf2>
c0008da1:	83 c4 10             	add    esp,0x10
c0008da4:	85 c0                	test   eax,eax
c0008da6:	78 09                	js     c0008db1 <src_float_to_int_array+0x76>
c0008da8:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008daf:	eb 97                	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008db1:	68 00 00 e0 c1       	push   0xc1e00000
c0008db6:	6a 00                	push   0x0
c0008db8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc0:	e8 dc e4 01 00       	call   c00272a1 <__ledf2>
c0008dc5:	83 c4 10             	add    esp,0x10
c0008dc8:	85 c0                	test   eax,eax
c0008dca:	7f 0c                	jg     c0008dd8 <src_float_to_int_array+0x9d>
c0008dcc:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008dd3:	e9 70 ff ff ff       	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008dd8:	50                   	push   eax
c0008dd9:	50                   	push   eax
c0008dda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de2:	e8 69 e6 01 00       	call   c0027450 <lrint>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008ded:	e9 56 ff ff ff       	jmp    c0008d48 <src_float_to_int_array+0xd>
c0008df2:	83 c4 14             	add    esp,0x14
c0008df5:	5b                   	pop    ebx
c0008df6:	5e                   	pop    esi
c0008df7:	c3                   	ret    

c0008df8 <linear_vari_process>:
c0008df8:	55                   	push   ebp
c0008df9:	31 d2                	xor    edx,edx
c0008dfb:	57                   	push   edi
c0008dfc:	56                   	push   esi
c0008dfd:	53                   	push   ebx
c0008dfe:	83 ec 3c             	sub    esp,0x3c
c0008e01:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008e05:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008e09:	0f 8e d3 07 00 00    	jle    c00095e2 <linear_vari_process+0x7ea>
c0008e0f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e13:	ba 05 00 00 00       	mov    edx,0x5
c0008e18:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008e1b:	85 db                	test   ebx,ebx
c0008e1d:	0f 84 bf 07 00 00    	je     c00095e2 <linear_vari_process+0x7ea>
c0008e23:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008e26:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008e2a:	74 19                	je     c0008e45 <linear_vari_process+0x4d>
c0008e2c:	31 d2                	xor    edx,edx
c0008e2e:	39 c2                	cmp    edx,eax
c0008e30:	7d 0c                	jge    c0008e3e <linear_vari_process+0x46>
c0008e32:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e34:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008e37:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e3b:	42                   	inc    edx
c0008e3c:	eb f0                	jmp    c0008e2e <linear_vari_process+0x36>
c0008e3e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e45:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e48:	0f af d0             	imul   edx,eax
c0008e4b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e4e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e52:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e59:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e5c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e63:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e67:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e6c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e74:	68 00 00 70 3f       	push   0x3f700000
c0008e79:	6a 00                	push   0x0
c0008e7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e83:	e8 17 e4 01 00       	call   c002729f <__ltdf2>
c0008e88:	83 c4 10             	add    esp,0x10
c0008e8b:	ba 16 00 00 00       	mov    edx,0x16
c0008e90:	85 c0                	test   eax,eax
c0008e92:	0f 88 4a 07 00 00    	js     c00095e2 <linear_vari_process+0x7ea>
c0008e98:	68 00 00 70 40       	push   0x40700000
c0008e9d:	6a 00                	push   0x0
c0008e9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ea7:	e8 d5 e3 01 00       	call   c0027281 <__gtdf2>
c0008eac:	83 c4 10             	add    esp,0x10
c0008eaf:	ba 16 00 00 00       	mov    edx,0x16
c0008eb4:	85 c0                	test   eax,eax
c0008eb6:	0f 8f 26 07 00 00    	jg     c00095e2 <linear_vari_process+0x7ea>
c0008ebc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ec0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008ec3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008ec6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008eca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ece:	68 00 00 f0 3f       	push   0x3ff00000
c0008ed3:	6a 00                	push   0x0
c0008ed5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008edd:	e8 bd e3 01 00       	call   c002729f <__ltdf2>
c0008ee2:	83 c4 10             	add    esp,0x10
c0008ee5:	85 c0                	test   eax,eax
c0008ee7:	0f 89 89 02 00 00    	jns    c0009176 <linear_vari_process+0x37e>
c0008eed:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008ef0:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008ef3:	0f 8d 7d 02 00 00    	jge    c0009176 <linear_vari_process+0x37e>
c0008ef9:	83 ec 0c             	sub    esp,0xc
c0008efc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008eff:	e8 2f e1 01 00       	call   c0027033 <__floatsidf>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f0a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f0e:	68 00 00 f0 3f       	push   0x3ff00000
c0008f13:	6a 00                	push   0x0
c0008f15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	e8 31 d4 01 00       	call   c0026353 <__adddf3>
c0008f22:	83 c4 10             	add    esp,0x10
c0008f25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f2d:	52                   	push   edx
c0008f2e:	50                   	push   eax
c0008f2f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f33:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f37:	e8 94 da 01 00       	call   c00269d0 <__muldf3>
c0008f3c:	5d                   	pop    ebp
c0008f3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f41:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f45:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f48:	e8 e6 e0 01 00       	call   c0027033 <__floatsidf>
c0008f4d:	83 c4 10             	add    esp,0x10
c0008f50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f54:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f58:	52                   	push   edx
c0008f59:	50                   	push   eax
c0008f5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f62:	e8 ec d3 01 00       	call   c0026353 <__adddf3>
c0008f67:	59                   	pop    ecx
c0008f68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f6c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f70:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f73:	e8 bb e0 01 00       	call   c0027033 <__floatsidf>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f83:	52                   	push   edx
c0008f84:	50                   	push   eax
c0008f85:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f89:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f8d:	e8 0b e3 01 00       	call   c002729d <__gedf2>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	85 c0                	test   eax,eax
c0008f97:	0f 89 d9 01 00 00    	jns    c0009176 <linear_vari_process+0x37e>
c0008f9d:	85 ff                	test   edi,edi
c0008f9f:	0f 8e f4 00 00 00    	jle    c0009099 <linear_vari_process+0x2a1>
c0008fa5:	83 ec 10             	sub    esp,0x10
c0008fa8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fab:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fae:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008fb2:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008fb5:	ff 30                	push   DWORD PTR [eax]
c0008fb7:	e8 e8 d9 01 00       	call   c00269a4 <__subdf3>
c0008fbc:	83 c4 18             	add    esp,0x18
c0008fbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fc7:	52                   	push   edx
c0008fc8:	50                   	push   eax
c0008fc9:	e8 62 e4 01 00       	call   c0027430 <fabs>
c0008fce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008fd6:	83 c4 10             	add    esp,0x10
c0008fd9:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fde:	68 23 42 92 0c       	push   0xc924223
c0008fe3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008feb:	e8 91 e2 01 00       	call   c0027281 <__gtdf2>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	85 c0                	test   eax,eax
c0008ff5:	0f 8e 9e 00 00 00    	jle    c0009099 <linear_vari_process+0x2a1>
c0008ffb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fff:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009002:	8b 00                	mov    eax,DWORD PTR [eax]
c0009004:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009008:	89 04 24             	mov    DWORD PTR [esp],eax
c000900b:	52                   	push   edx
c000900c:	50                   	push   eax
c000900d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009010:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009013:	e8 8c d9 01 00       	call   c00269a4 <__subdf3>
c0009018:	59                   	pop    ecx
c0009019:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000901d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009021:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009024:	e8 0a e0 01 00       	call   c0027033 <__floatsidf>
c0009029:	83 c4 10             	add    esp,0x10
c000902c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009030:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009034:	52                   	push   edx
c0009035:	50                   	push   eax
c0009036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000903e:	e8 8d d9 01 00       	call   c00269d0 <__muldf3>
c0009043:	5f                   	pop    edi
c0009044:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009048:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000904c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000904f:	e8 df df 01 00       	call   c0027033 <__floatsidf>
c0009054:	83 c4 10             	add    esp,0x10
c0009057:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000905b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000905f:	52                   	push   edx
c0009060:	50                   	push   eax
c0009061:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009065:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009069:	e8 46 dc 01 00       	call   c0026cb4 <__divdf3>
c000906e:	83 c4 10             	add    esp,0x10
c0009071:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009075:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009079:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000907d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009081:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009085:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009089:	e8 c5 d2 01 00       	call   c0026353 <__adddf3>
c000908e:	83 c4 10             	add    esp,0x10
c0009091:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009095:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009099:	31 ff                	xor    edi,edi
c000909b:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000909e:	0f 8e 9d 00 00 00    	jle    c0009141 <linear_vari_process+0x349>
c00090a4:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00090a7:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00090ab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00090ae:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00090b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090b5:	8b 06                	mov    eax,DWORD PTR [esi]
c00090b7:	52                   	push   edx
c00090b8:	52                   	push   edx
c00090b9:	55                   	push   ebp
c00090ba:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00090bd:	47                   	inc    edi
c00090be:	e8 25 cc 01 00       	call   c0025ce8 <__subsf3>
c00090c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00090c6:	e8 fc e2 01 00       	call   c00273c7 <__extendsfdf2>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090e6:	e8 e5 d8 01 00       	call   c00269d0 <__muldf3>
c00090eb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090ee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090f2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090f6:	e8 cc e2 01 00       	call   c00273c7 <__extendsfdf2>
c00090fb:	83 c4 10             	add    esp,0x10
c00090fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009102:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009106:	52                   	push   edx
c0009107:	50                   	push   eax
c0009108:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000910c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009110:	e8 3e d2 01 00       	call   c0026353 <__adddf3>
c0009115:	59                   	pop    ecx
c0009116:	5d                   	pop    ebp
c0009117:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000911b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000911f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009123:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009127:	e8 77 e1 01 00       	call   c00272a3 <__truncdfsf2>
c000912c:	83 c4 10             	add    esp,0x10
c000912f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009132:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009136:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009139:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000913c:	e9 5a ff ff ff       	jmp    c000909b <linear_vari_process+0x2a3>
c0009141:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009145:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009149:	68 00 00 f0 3f       	push   0x3ff00000
c000914e:	6a 00                	push   0x0
c0009150:	e8 5f db 01 00       	call   c0026cb4 <__divdf3>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 04 24             	mov    DWORD PTR [esp],eax
c000915b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000915f:	52                   	push   edx
c0009160:	50                   	push   eax
c0009161:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009165:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009169:	e8 e5 d1 01 00       	call   c0026353 <__adddf3>
c000916e:	83 c4 10             	add    esp,0x10
c0009171:	e9 50 fd ff ff       	jmp    c0008ec6 <linear_vari_process+0xce>
c0009176:	50                   	push   eax
c0009177:	50                   	push   eax
c0009178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000917c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009180:	e8 cb e2 01 00       	call   c0027450 <lrint>
c0009185:	83 ec 0c             	sub    esp,0xc
c0009188:	50                   	push   eax
c0009189:	e8 a5 de 01 00       	call   c0027033 <__floatsidf>
c000918e:	83 c4 10             	add    esp,0x10
c0009191:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009195:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009199:	52                   	push   edx
c000919a:	50                   	push   eax
c000919b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000919f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091a3:	e8 fc d7 01 00       	call   c00269a4 <__subdf3>
c00091a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091ac:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091b0:	83 c4 20             	add    esp,0x20
c00091b3:	6a 00                	push   0x0
c00091b5:	6a 00                	push   0x0
c00091b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091bf:	e8 db e0 01 00       	call   c002729f <__ltdf2>
c00091c4:	83 c4 10             	add    esp,0x10
c00091c7:	85 c0                	test   eax,eax
c00091c9:	79 1e                	jns    c00091e9 <linear_vari_process+0x3f1>
c00091cb:	68 00 00 f0 3f       	push   0x3ff00000
c00091d0:	6a 00                	push   0x0
c00091d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091da:	e8 74 d1 01 00       	call   c0026353 <__adddf3>
c00091df:	83 c4 10             	add    esp,0x10
c00091e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091ec:	83 ec 10             	sub    esp,0x10
c00091ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091ff:	e8 a0 d7 01 00       	call   c00269a4 <__subdf3>
c0009204:	83 c4 18             	add    esp,0x18
c0009207:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000920b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000920f:	52                   	push   edx
c0009210:	50                   	push   eax
c0009211:	e8 3a e2 01 00       	call   c0027450 <lrint>
c0009216:	83 c4 10             	add    esp,0x10
c0009219:	0f af f8             	imul   edi,eax
c000921c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000921f:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009222:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009225:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009228:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000922b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000922f:	0f 8d 13 03 00 00    	jge    c0009548 <linear_vari_process+0x750>
c0009235:	83 ec 0c             	sub    esp,0xc
c0009238:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000923b:	e8 f3 dd 01 00       	call   c0027033 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009247:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000924b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000924f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009253:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009257:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000925b:	e8 70 d7 01 00       	call   c00269d0 <__muldf3>
c0009260:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009263:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009267:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926b:	e8 c3 dd 01 00       	call   c0027033 <__floatsidf>
c0009270:	83 c4 10             	add    esp,0x10
c0009273:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009277:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000927b:	52                   	push   edx
c000927c:	50                   	push   eax
c000927d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009281:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009285:	e8 c9 d0 01 00       	call   c0026353 <__adddf3>
c000928a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000928d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009291:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009295:	e8 99 dd 01 00       	call   c0027033 <__floatsidf>
c000929a:	83 c4 10             	add    esp,0x10
c000929d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092a5:	52                   	push   edx
c00092a6:	50                   	push   eax
c00092a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092af:	e8 eb df 01 00       	call   c002729f <__ltdf2>
c00092b4:	83 c4 10             	add    esp,0x10
c00092b7:	85 c0                	test   eax,eax
c00092b9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00092bd:	0f 89 85 02 00 00    	jns    c0009548 <linear_vari_process+0x750>
c00092c3:	85 c9                	test   ecx,ecx
c00092c5:	0f 8e f5 00 00 00    	jle    c00093c0 <linear_vari_process+0x5c8>
c00092cb:	83 ec 10             	sub    esp,0x10
c00092ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092d4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00092d8:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092db:	ff 30                	push   DWORD PTR [eax]
c00092dd:	e8 c2 d6 01 00       	call   c00269a4 <__subdf3>
c00092e2:	83 c4 18             	add    esp,0x18
c00092e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092ed:	52                   	push   edx
c00092ee:	50                   	push   eax
c00092ef:	e8 3c e1 01 00       	call   c0027430 <fabs>
c00092f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092fc:	83 c4 10             	add    esp,0x10
c00092ff:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009304:	68 23 42 92 0c       	push   0xc924223
c0009309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000930d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009311:	e8 6b df 01 00       	call   c0027281 <__gtdf2>
c0009316:	83 c4 10             	add    esp,0x10
c0009319:	85 c0                	test   eax,eax
c000931b:	0f 8e 9f 00 00 00    	jle    c00093c0 <linear_vari_process+0x5c8>
c0009321:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009325:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009328:	8b 00                	mov    eax,DWORD PTR [eax]
c000932a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000932e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009332:	52                   	push   edx
c0009333:	50                   	push   eax
c0009334:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009337:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000933a:	e8 65 d6 01 00       	call   c00269a4 <__subdf3>
c000933f:	5f                   	pop    edi
c0009340:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009344:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009348:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000934b:	e8 e3 dc 01 00       	call   c0027033 <__floatsidf>
c0009350:	83 c4 10             	add    esp,0x10
c0009353:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009357:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000935b:	52                   	push   edx
c000935c:	50                   	push   eax
c000935d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009365:	e8 66 d6 01 00       	call   c00269d0 <__muldf3>
c000936a:	5d                   	pop    ebp
c000936b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000936f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009373:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009376:	e8 b8 dc 01 00       	call   c0027033 <__floatsidf>
c000937b:	83 c4 10             	add    esp,0x10
c000937e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009382:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009386:	52                   	push   edx
c0009387:	50                   	push   eax
c0009388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000938c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009390:	e8 1f d9 01 00       	call   c0026cb4 <__divdf3>
c0009395:	83 c4 10             	add    esp,0x10
c0009398:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000939c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093b0:	e8 9e cf 01 00       	call   c0026353 <__adddf3>
c00093b5:	83 c4 10             	add    esp,0x10
c00093b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093c0:	31 ff                	xor    edi,edi
c00093c2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093c5:	39 f8                	cmp    eax,edi
c00093c7:	0f 8e ac 00 00 00    	jle    c0009479 <linear_vari_process+0x681>
c00093cd:	8b 16                	mov    edx,DWORD PTR [esi]
c00093cf:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093d2:	29 c1                	sub    ecx,eax
c00093d4:	89 c8                	mov    eax,ecx
c00093d6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093d9:	01 f8                	add    eax,edi
c00093db:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093df:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093e2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093e9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093ec:	51                   	push   ecx
c00093ed:	01 f8                	add    eax,edi
c00093ef:	51                   	push   ecx
c00093f0:	47                   	inc    edi
c00093f1:	55                   	push   ebp
c00093f2:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093f5:	e8 ee c8 01 00       	call   c0025ce8 <__subsf3>
c00093fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fd:	e8 c5 df 01 00       	call   c00273c7 <__extendsfdf2>
c0009402:	83 c4 10             	add    esp,0x10
c0009405:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009409:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000940d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009411:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009415:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009419:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000941d:	e8 ae d5 01 00       	call   c00269d0 <__muldf3>
c0009422:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000942d:	e8 95 df 01 00       	call   c00273c7 <__extendsfdf2>
c0009432:	83 c4 10             	add    esp,0x10
c0009435:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009439:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000943d:	52                   	push   edx
c000943e:	50                   	push   eax
c000943f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009443:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009447:	e8 07 cf 01 00       	call   c0026353 <__adddf3>
c000944c:	5d                   	pop    ebp
c000944d:	59                   	pop    ecx
c000944e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009452:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009456:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000945a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000945e:	e8 40 de 01 00       	call   c00272a3 <__truncdfsf2>
c0009463:	83 c4 10             	add    esp,0x10
c0009466:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000946a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000946e:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009471:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009474:	e9 49 ff ff ff       	jmp    c00093c2 <linear_vari_process+0x5ca>
c0009479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009481:	68 00 00 f0 3f       	push   0x3ff00000
c0009486:	6a 00                	push   0x0
c0009488:	e8 27 d8 01 00       	call   c0026cb4 <__divdf3>
c000948d:	83 c4 10             	add    esp,0x10
c0009490:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009494:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009498:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000949c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a8:	e8 a6 ce 01 00       	call   c0026353 <__adddf3>
c00094ad:	59                   	pop    ecx
c00094ae:	5f                   	pop    edi
c00094af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094bf:	e8 8c df 01 00       	call   c0027450 <lrint>
c00094c4:	83 ec 0c             	sub    esp,0xc
c00094c7:	50                   	push   eax
c00094c8:	e8 66 db 01 00       	call   c0027033 <__floatsidf>
c00094cd:	83 c4 10             	add    esp,0x10
c00094d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094d4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094d8:	52                   	push   edx
c00094d9:	50                   	push   eax
c00094da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094e2:	e8 bd d4 01 00       	call   c00269a4 <__subdf3>
c00094e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094eb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094ef:	83 c4 20             	add    esp,0x20
c00094f2:	6a 00                	push   0x0
c00094f4:	6a 00                	push   0x0
c00094f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094fe:	e8 9c dd 01 00       	call   c002729f <__ltdf2>
c0009503:	83 c4 10             	add    esp,0x10
c0009506:	85 c0                	test   eax,eax
c0009508:	79 1e                	jns    c0009528 <linear_vari_process+0x730>
c000950a:	68 00 00 f0 3f       	push   0x3ff00000
c000950f:	6a 00                	push   0x0
c0009511:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009515:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009519:	e8 35 ce 01 00       	call   c0026353 <__adddf3>
c000951e:	83 c4 10             	add    esp,0x10
c0009521:	89 04 24             	mov    DWORD PTR [esp],eax
c0009524:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009528:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000952b:	83 ec 10             	sub    esp,0x10
c000952e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009532:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009536:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000953e:	e8 61 d4 01 00       	call   c00269a4 <__subdf3>
c0009543:	e9 bc fc ff ff       	jmp    c0009204 <linear_vari_process+0x40c>
c0009548:	39 fd                	cmp    ebp,edi
c000954a:	7d 38                	jge    c0009584 <linear_vari_process+0x78c>
c000954c:	83 ec 0c             	sub    esp,0xc
c000954f:	89 f8                	mov    eax,edi
c0009551:	29 e8                	sub    eax,ebp
c0009553:	99                   	cdq    
c0009554:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009557:	50                   	push   eax
c0009558:	e8 d6 da 01 00       	call   c0027033 <__floatsidf>
c000955d:	83 c4 10             	add    esp,0x10
c0009560:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009564:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009568:	52                   	push   edx
c0009569:	50                   	push   eax
c000956a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000956e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009572:	e8 dc cd 01 00       	call   c0026353 <__adddf3>
c0009577:	83 c4 10             	add    esp,0x10
c000957a:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000957d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009580:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009584:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009588:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000958b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000958f:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009592:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009595:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009598:	85 c0                	test   eax,eax
c000959a:	7f 29                	jg     c00095c5 <linear_vari_process+0x7cd>
c000959c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00095a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00095a8:	89 01                	mov    DWORD PTR [ecx],eax
c00095aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00095ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095b0:	99                   	cdq    
c00095b1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095b4:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00095b7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095ba:	99                   	cdq    
c00095bb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00095be:	31 d2                	xor    edx,edx
c00095c0:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00095c3:	eb 1d                	jmp    c00095e2 <linear_vari_process+0x7ea>
c00095c5:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00095c8:	31 d2                	xor    edx,edx
c00095ca:	29 c8                	sub    eax,ecx
c00095cc:	c1 e0 02             	shl    eax,0x2
c00095cf:	39 d1                	cmp    ecx,edx
c00095d1:	7e c9                	jle    c000959c <linear_vari_process+0x7a4>
c00095d3:	8b 3e                	mov    edi,DWORD PTR [esi]
c00095d5:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00095d8:	83 c0 04             	add    eax,0x4
c00095db:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095df:	42                   	inc    edx
c00095e0:	eb ed                	jmp    c00095cf <linear_vari_process+0x7d7>
c00095e2:	83 c4 3c             	add    esp,0x3c
c00095e5:	89 d0                	mov    eax,edx
c00095e7:	5b                   	pop    ebx
c00095e8:	5e                   	pop    esi
c00095e9:	5f                   	pop    edi
c00095ea:	5d                   	pop    ebp
c00095eb:	c3                   	ret    

c00095ec <linear_reset>:
c00095ec:	83 ec 0c             	sub    esp,0xc
c00095ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095f3:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095f6:	85 c0                	test   eax,eax
c00095f8:	74 20                	je     c000961a <linear_reset+0x2e>
c00095fa:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095fd:	83 c0 1c             	add    eax,0x1c
c0009600:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009603:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000960a:	c1 e2 02             	shl    edx,0x2
c000960d:	51                   	push   ecx
c000960e:	52                   	push   edx
c000960f:	6a 00                	push   0x0
c0009611:	50                   	push   eax
c0009612:	e8 ad 70 ff ff       	call   c00006c4 <memset>
c0009617:	83 c4 10             	add    esp,0x10
c000961a:	83 c4 0c             	add    esp,0xc
c000961d:	c3                   	ret    

c000961e <linear_get_name>:
c000961e:	31 c0                	xor    eax,eax
c0009620:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009625:	75 05                	jne    c000962c <linear_get_name+0xe>
c0009627:	b8 40 8b 02 c0       	mov    eax,0xc0028b40
c000962c:	c3                   	ret    

c000962d <linear_get_description>:
c000962d:	31 c0                	xor    eax,eax
c000962f:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009634:	75 05                	jne    c000963b <linear_get_description+0xe>
c0009636:	b8 54 8b 02 c0       	mov    eax,0xc0028b54
c000963b:	c3                   	ret    

c000963c <linear_set_converter>:
c000963c:	53                   	push   ebx
c000963d:	b8 0a 00 00 00       	mov    eax,0xa
c0009642:	83 ec 08             	sub    esp,0x8
c0009645:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009649:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000964e:	75 6e                	jne    c00096be <linear_set_converter+0x82>
c0009650:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009653:	85 c0                	test   eax,eax
c0009655:	74 13                	je     c000966a <linear_set_converter+0x2e>
c0009657:	83 ec 0c             	sub    esp,0xc
c000965a:	50                   	push   eax
c000965b:	e8 d4 5f 00 00       	call   c000f634 <free>
c0009660:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009667:	83 c4 10             	add    esp,0x10
c000966a:	50                   	push   eax
c000966b:	50                   	push   eax
c000966c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000966f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009676:	50                   	push   eax
c0009677:	6a 01                	push   0x1
c0009679:	e8 d6 5f 00 00       	call   c000f654 <calloc>
c000967e:	83 c4 10             	add    esp,0x10
c0009681:	89 c2                	mov    edx,eax
c0009683:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009686:	85 d2                	test   edx,edx
c0009688:	b8 01 00 00 00       	mov    eax,0x1
c000968d:	74 2f                	je     c00096be <linear_set_converter+0x82>
c000968f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009692:	83 ec 0c             	sub    esp,0xc
c0009695:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009698:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000969e:	c7 43 24 f8 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008df8
c00096a5:	c7 43 20 f8 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008df8
c00096ac:	c7 43 28 ec 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095ec
c00096b3:	53                   	push   ebx
c00096b4:	e8 33 ff ff ff       	call   c00095ec <linear_reset>
c00096b9:	83 c4 10             	add    esp,0x10
c00096bc:	31 c0                	xor    eax,eax
c00096be:	83 c4 08             	add    esp,0x8
c00096c1:	5b                   	pop    ebx
c00096c2:	c3                   	ret    

c00096c3 <int_to_fp>:
c00096c3:	c1 e0 0c             	shl    eax,0xc
c00096c6:	c3                   	ret    

c00096c7 <fp_to_int>:
c00096c7:	c1 f8 0c             	sar    eax,0xc
c00096ca:	c3                   	ret    

c00096cb <fp_fraction_part>:
c00096cb:	25 ff 0f 00 00       	and    eax,0xfff
c00096d0:	c3                   	ret    

c00096d1 <fp_to_double>:
c00096d1:	83 ec 1c             	sub    esp,0x1c
c00096d4:	e8 f2 ff ff ff       	call   c00096cb <fp_fraction_part>
c00096d9:	83 ec 0c             	sub    esp,0xc
c00096dc:	50                   	push   eax
c00096dd:	e8 51 d9 01 00       	call   c0027033 <__floatsidf>
c00096e2:	83 c4 10             	add    esp,0x10
c00096e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096ed:	68 00 00 30 3f       	push   0x3f300000
c00096f2:	6a 00                	push   0x0
c00096f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096fc:	e8 cf d2 01 00       	call   c00269d0 <__muldf3>
c0009701:	83 c4 2c             	add    esp,0x2c
c0009704:	c3                   	ret    

c0009705 <calc_output_single>:
c0009705:	55                   	push   ebp
c0009706:	57                   	push   edi
c0009707:	56                   	push   esi
c0009708:	89 c6                	mov    esi,eax
c000970a:	53                   	push   ebx
c000970b:	89 d3                	mov    ebx,edx
c000970d:	83 ec 4c             	sub    esp,0x4c
c0009710:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009714:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009717:	e8 a7 ff ff ff       	call   c00096c3 <int_to_fp>
c000971c:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000971f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009723:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009727:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000972b:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000972e:	99                   	cdq    
c000972f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009737:	f7 fb                	idiv   ebx
c0009739:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009741:	89 da                	mov    edx,ebx
c0009743:	0f af d0             	imul   edx,eax
c0009746:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000974a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000974e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009752:	29 c2                	sub    edx,eax
c0009754:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000975b:	83 c5 04             	add    ebp,0x4
c000975e:	e8 6e ff ff ff       	call   c00096d1 <fp_to_double>
c0009763:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009767:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000976b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000976f:	e8 53 ff ff ff       	call   c00096c7 <fp_to_int>
c0009774:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009777:	52                   	push   edx
c0009778:	52                   	push   edx
c0009779:	51                   	push   ecx
c000977a:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000977e:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009782:	e8 61 c5 01 00       	call   c0025ce8 <__subsf3>
c0009787:	89 04 24             	mov    DWORD PTR [esp],eax
c000978a:	e8 38 dc 01 00       	call   c00273c7 <__extendsfdf2>
c000978f:	83 c4 10             	add    esp,0x10
c0009792:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009796:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000979a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000979e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097aa:	e8 21 d2 01 00       	call   c00269d0 <__muldf3>
c00097af:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00097b3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00097b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097ba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097be:	e8 04 dc 01 00       	call   c00273c7 <__extendsfdf2>
c00097c3:	83 c4 10             	add    esp,0x10
c00097c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097ce:	52                   	push   edx
c00097cf:	50                   	push   eax
c00097d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097d8:	e8 76 cb 01 00       	call   c0026353 <__adddf3>
c00097dd:	59                   	pop    ecx
c00097de:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097e2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097e6:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097ec:	e8 d6 db 01 00       	call   c00273c7 <__extendsfdf2>
c00097f1:	83 c4 10             	add    esp,0x10
c00097f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097f8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097fc:	52                   	push   edx
c00097fd:	50                   	push   eax
c00097fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009802:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009806:	e8 c5 d1 01 00       	call   c00269d0 <__muldf3>
c000980b:	83 c4 10             	add    esp,0x10
c000980e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009812:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009816:	52                   	push   edx
c0009817:	50                   	push   eax
c0009818:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000981c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009820:	e8 2e cb 01 00       	call   c0026353 <__adddf3>
c0009825:	83 c4 10             	add    esp,0x10
c0009828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000982c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009830:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009834:	0f 89 1d ff ff ff    	jns    c0009757 <calc_output_single+0x52>
c000983a:	89 d9                	mov    ecx,ebx
c000983c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009840:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009844:	89 dd                	mov    ebp,ebx
c0009846:	29 c8                	sub    eax,ecx
c0009848:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009850:	99                   	cdq    
c0009851:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009859:	f7 fb                	idiv   ebx
c000985b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000985f:	0f af e8             	imul   ebp,eax
c0009862:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009866:	01 cd                	add    ebp,ecx
c0009868:	8d 34 86             	lea    esi,[esi+eax*4]
c000986b:	89 e8                	mov    eax,ebp
c000986d:	83 ee 04             	sub    esi,0x4
c0009870:	e8 5c fe ff ff       	call   c00096d1 <fp_to_double>
c0009875:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009879:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000987d:	89 e8                	mov    eax,ebp
c000987f:	29 dd                	sub    ebp,ebx
c0009881:	e8 41 fe ff ff       	call   c00096c7 <fp_to_int>
c0009886:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009889:	52                   	push   edx
c000988a:	52                   	push   edx
c000988b:	51                   	push   ecx
c000988c:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009890:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009894:	e8 4f c4 01 00       	call   c0025ce8 <__subsf3>
c0009899:	89 04 24             	mov    DWORD PTR [esp],eax
c000989c:	e8 26 db 01 00       	call   c00273c7 <__extendsfdf2>
c00098a1:	83 c4 10             	add    esp,0x10
c00098a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098bc:	e8 0f d1 01 00       	call   c00269d0 <__muldf3>
c00098c1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00098c9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00098cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00098d0:	e8 f2 da 01 00       	call   c00273c7 <__extendsfdf2>
c00098d5:	83 c4 10             	add    esp,0x10
c00098d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098dc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098e0:	52                   	push   edx
c00098e1:	50                   	push   eax
c00098e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ea:	e8 64 ca 01 00       	call   c0026353 <__adddf3>
c00098ef:	59                   	pop    ecx
c00098f0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098f4:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098f8:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098fe:	e8 c4 da 01 00       	call   c00273c7 <__extendsfdf2>
c0009903:	83 c4 10             	add    esp,0x10
c0009906:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000990a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000990e:	52                   	push   edx
c000990f:	50                   	push   eax
c0009910:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009914:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009918:	e8 b3 d0 01 00       	call   c00269d0 <__muldf3>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009924:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009928:	52                   	push   edx
c0009929:	50                   	push   eax
c000992a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000992e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009932:	e8 1c ca 01 00       	call   c0026353 <__adddf3>
c0009937:	83 c4 10             	add    esp,0x10
c000993a:	85 ed                	test   ebp,ebp
c000993c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009940:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009944:	0f 8f 21 ff ff ff    	jg     c000986b <calc_output_single+0x166>
c000994a:	52                   	push   edx
c000994b:	50                   	push   eax
c000994c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009950:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009954:	e8 fa c9 01 00       	call   c0026353 <__adddf3>
c0009959:	83 c4 5c             	add    esp,0x5c
c000995c:	5b                   	pop    ebx
c000995d:	5e                   	pop    esi
c000995e:	5f                   	pop    edi
c000995f:	5d                   	pop    ebp
c0009960:	c3                   	ret    

c0009961 <calc_output_stereo>:
c0009961:	55                   	push   ebp
c0009962:	89 cd                	mov    ebp,ecx
c0009964:	57                   	push   edi
c0009965:	56                   	push   esi
c0009966:	53                   	push   ebx
c0009967:	89 c3                	mov    ebx,eax
c0009969:	83 ec 6c             	sub    esp,0x6c
c000996c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009970:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009977:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000997e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009982:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009986:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009989:	e8 35 fd ff ff       	call   c00096c3 <int_to_fp>
c000998e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009996:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000999a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00099a2:	29 c8                	sub    eax,ecx
c00099a4:	99                   	cdq    
c00099a5:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099ad:	0f af d0             	imul   edx,eax
c00099b0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00099b3:	31 d2                	xor    edx,edx
c00099b5:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099bd:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099c0:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099c4:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099c7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00099cb:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00099cf:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c00099d2:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00099d7:	29 c1                	sub    ecx,eax
c00099d9:	31 c0                	xor    eax,eax
c00099db:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099e6:	83 c7 08             	add    edi,0x8
c00099e9:	e8 e3 fc ff ff       	call   c00096d1 <fp_to_double>
c00099ee:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099fa:	e8 c8 fc ff ff       	call   c00096c7 <fp_to_int>
c00099ff:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009a02:	52                   	push   edx
c0009a03:	52                   	push   edx
c0009a04:	51                   	push   ecx
c0009a05:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a09:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a0d:	e8 d6 c2 01 00       	call   c0025ce8 <__subsf3>
c0009a12:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a15:	e8 ad d9 01 00       	call   c00273c7 <__extendsfdf2>
c0009a1a:	83 c4 10             	add    esp,0x10
c0009a1d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a21:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a29:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a2d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a31:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a35:	e8 96 cf 01 00       	call   c00269d0 <__muldf3>
c0009a3a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a3e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a42:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a45:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a49:	e8 79 d9 01 00       	call   c00273c7 <__extendsfdf2>
c0009a4e:	83 c4 10             	add    esp,0x10
c0009a51:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a55:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a59:	52                   	push   edx
c0009a5a:	50                   	push   eax
c0009a5b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a5f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a63:	e8 eb c8 01 00       	call   c0026353 <__adddf3>
c0009a68:	59                   	pop    ecx
c0009a69:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a6d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a71:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a77:	e8 4b d9 01 00       	call   c00273c7 <__extendsfdf2>
c0009a7c:	83 c4 10             	add    esp,0x10
c0009a7f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a83:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a8b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a8f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a93:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a97:	e8 34 cf 01 00       	call   c00269d0 <__muldf3>
c0009a9c:	83 c4 10             	add    esp,0x10
c0009a9f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009aa3:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009aa7:	52                   	push   edx
c0009aa8:	50                   	push   eax
c0009aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ab1:	e8 9d c8 01 00       	call   c0026353 <__adddf3>
c0009ab6:	59                   	pop    ecx
c0009ab7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009abb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009abf:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ac5:	e8 fd d8 01 00       	call   c00273c7 <__extendsfdf2>
c0009aca:	83 c4 10             	add    esp,0x10
c0009acd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ad1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ad5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ad9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009add:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ae5:	e8 e6 ce 01 00       	call   c00269d0 <__muldf3>
c0009aea:	83 c4 10             	add    esp,0x10
c0009aed:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009af1:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009af5:	52                   	push   edx
c0009af6:	50                   	push   eax
c0009af7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009afb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009aff:	e8 4f c8 01 00       	call   c0026353 <__adddf3>
c0009b04:	83 c4 10             	add    esp,0x10
c0009b07:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b13:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b17:	0f 89 c5 fe ff ff    	jns    c00099e2 <calc_output_stereo+0x81>
c0009b1d:	29 e9                	sub    ecx,ebp
c0009b1f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b23:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b27:	29 c8                	sub    eax,ecx
c0009b29:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b31:	99                   	cdq    
c0009b32:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b36:	31 d2                	xor    edx,edx
c0009b38:	0f af f8             	imul   edi,eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	40                   	inc    eax
c0009b40:	01 cf                	add    edi,ecx
c0009b42:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b47:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b4b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b53:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b56:	31 c0                	xor    eax,eax
c0009b58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b5c:	89 f8                	mov    eax,edi
c0009b5e:	83 eb 08             	sub    ebx,0x8
c0009b61:	e8 6b fb ff ff       	call   c00096d1 <fp_to_double>
c0009b66:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b6e:	89 f8                	mov    eax,edi
c0009b70:	e8 52 fb ff ff       	call   c00096c7 <fp_to_int>
c0009b75:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b78:	52                   	push   edx
c0009b79:	52                   	push   edx
c0009b7a:	55                   	push   ebp
c0009b7b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b7f:	e8 64 c1 01 00       	call   c0025ce8 <__subsf3>
c0009b84:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b87:	e8 3b d8 01 00       	call   c00273c7 <__extendsfdf2>
c0009b8c:	83 c4 10             	add    esp,0x10
c0009b8f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b93:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b9f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ba3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ba7:	e8 24 ce 01 00       	call   c00269d0 <__muldf3>
c0009bac:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009baf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009bb3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009bb7:	e8 0b d8 01 00       	call   c00273c7 <__extendsfdf2>
c0009bbc:	83 c4 10             	add    esp,0x10
c0009bbf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bc3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bc7:	52                   	push   edx
c0009bc8:	50                   	push   eax
c0009bc9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bcd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009bd1:	e8 7d c7 01 00       	call   c0026353 <__adddf3>
c0009bd6:	59                   	pop    ecx
c0009bd7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009bdb:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009bdf:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009be5:	e8 dd d7 01 00       	call   c00273c7 <__extendsfdf2>
c0009bea:	83 c4 10             	add    esp,0x10
c0009bed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bf9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bfd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c05:	e8 c6 cd 01 00       	call   c00269d0 <__muldf3>
c0009c0a:	83 c4 10             	add    esp,0x10
c0009c0d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c11:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c15:	52                   	push   edx
c0009c16:	50                   	push   eax
c0009c17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c1f:	e8 2f c7 01 00       	call   c0026353 <__adddf3>
c0009c24:	5d                   	pop    ebp
c0009c25:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c29:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c2d:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c33:	e8 8f d7 01 00       	call   c00273c7 <__extendsfdf2>
c0009c38:	83 c4 10             	add    esp,0x10
c0009c3b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c3f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c4b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c4f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c53:	e8 78 cd 01 00       	call   c00269d0 <__muldf3>
c0009c58:	83 c4 10             	add    esp,0x10
c0009c5b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c5f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c63:	52                   	push   edx
c0009c64:	50                   	push   eax
c0009c65:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c6d:	e8 e1 c6 01 00       	call   c0026353 <__adddf3>
c0009c72:	83 c4 10             	add    esp,0x10
c0009c75:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c79:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c81:	85 ff                	test   edi,edi
c0009c83:	0f 8f d3 fe ff ff    	jg     c0009b5c <calc_output_stereo+0x1fb>
c0009c89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c99:	e8 b5 c6 01 00       	call   c0026353 <__adddf3>
c0009c9e:	83 c4 10             	add    esp,0x10
c0009ca1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ca5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ca9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cb9:	e8 12 cd 01 00       	call   c00269d0 <__muldf3>
c0009cbe:	59                   	pop    ecx
c0009cbf:	5b                   	pop    ebx
c0009cc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cc4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ccc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd0:	e8 ce d5 01 00       	call   c00272a3 <__truncdfsf2>
c0009cd5:	83 c4 10             	add    esp,0x10
c0009cd8:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009cdf:	89 03                	mov    DWORD PTR [ebx],eax
c0009ce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ce9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ced:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf1:	e8 5d c6 01 00       	call   c0026353 <__adddf3>
c0009cf6:	83 c4 10             	add    esp,0x10
c0009cf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d01:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d05:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d11:	e8 ba cc 01 00       	call   c00269d0 <__muldf3>
c0009d16:	5e                   	pop    esi
c0009d17:	5f                   	pop    edi
c0009d18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d28:	e8 76 d5 01 00       	call   c00272a3 <__truncdfsf2>
c0009d2d:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d34:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d37:	83 c4 7c             	add    esp,0x7c
c0009d3a:	5b                   	pop    ebx
c0009d3b:	5e                   	pop    esi
c0009d3c:	5f                   	pop    edi
c0009d3d:	5d                   	pop    ebp
c0009d3e:	c3                   	ret    

c0009d3f <calc_output_quad>:
c0009d3f:	55                   	push   ebp
c0009d40:	57                   	push   edi
c0009d41:	56                   	push   esi
c0009d42:	89 c6                	mov    esi,eax
c0009d44:	53                   	push   ebx
c0009d45:	83 ec 7c             	sub    esp,0x7c
c0009d48:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d4c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d50:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d57:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d62:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d66:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d69:	e8 55 f9 ff ff       	call   c00096c3 <int_to_fp>
c0009d6e:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d71:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d74:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d78:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d7c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d80:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d84:	99                   	cdq    
c0009d85:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d89:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d8d:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d90:	31 d2                	xor    edx,edx
c0009d92:	0f af d8             	imul   ebx,eax
c0009d95:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d9d:	0f af c7             	imul   eax,edi
c0009da0:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009da4:	29 c1                	sub    ecx,eax
c0009da6:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009dae:	31 c0                	xor    eax,eax
c0009db0:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009db3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009db7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009dbb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dbf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009dc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009dcb:	89 d8                	mov    eax,ebx
c0009dcd:	83 c7 10             	add    edi,0x10
c0009dd0:	e8 fc f8 ff ff       	call   c00096d1 <fp_to_double>
c0009dd5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009dd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ddd:	89 d8                	mov    eax,ebx
c0009ddf:	e8 e3 f8 ff ff       	call   c00096c7 <fp_to_int>
c0009de4:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009de8:	52                   	push   edx
c0009de9:	52                   	push   edx
c0009dea:	51                   	push   ecx
c0009deb:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009def:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009df3:	e8 f0 be 01 00       	call   c0025ce8 <__subsf3>
c0009df8:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dfb:	e8 c7 d5 01 00       	call   c00273c7 <__extendsfdf2>
c0009e00:	83 c4 10             	add    esp,0x10
c0009e03:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e07:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e13:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e17:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e1b:	e8 b0 cb 01 00       	call   c00269d0 <__muldf3>
c0009e20:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e24:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e28:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e2f:	e8 93 d5 01 00       	call   c00273c7 <__extendsfdf2>
c0009e34:	83 c4 10             	add    esp,0x10
c0009e37:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e3b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e3f:	52                   	push   edx
c0009e40:	50                   	push   eax
c0009e41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e49:	e8 05 c5 01 00       	call   c0026353 <__adddf3>
c0009e4e:	59                   	pop    ecx
c0009e4f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e53:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e57:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e5d:	e8 65 d5 01 00       	call   c00273c7 <__extendsfdf2>
c0009e62:	83 c4 10             	add    esp,0x10
c0009e65:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e69:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e75:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e79:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e7d:	e8 4e cb 01 00       	call   c00269d0 <__muldf3>
c0009e82:	83 c4 10             	add    esp,0x10
c0009e85:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e89:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e8d:	52                   	push   edx
c0009e8e:	50                   	push   eax
c0009e8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e97:	e8 b7 c4 01 00       	call   c0026353 <__adddf3>
c0009e9c:	59                   	pop    ecx
c0009e9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009ea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009ea5:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009eab:	e8 17 d5 01 00       	call   c00273c7 <__extendsfdf2>
c0009eb0:	83 c4 10             	add    esp,0x10
c0009eb3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eb7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ebb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ebf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ec7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ecb:	e8 00 cb 01 00       	call   c00269d0 <__muldf3>
c0009ed0:	83 c4 10             	add    esp,0x10
c0009ed3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ed7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009edb:	52                   	push   edx
c0009edc:	50                   	push   eax
c0009edd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee5:	e8 69 c4 01 00       	call   c0026353 <__adddf3>
c0009eea:	59                   	pop    ecx
c0009eeb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eef:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009ef3:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ef9:	e8 c9 d4 01 00       	call   c00273c7 <__extendsfdf2>
c0009efe:	83 c4 10             	add    esp,0x10
c0009f01:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f05:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f11:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f15:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f19:	e8 b2 ca 01 00       	call   c00269d0 <__muldf3>
c0009f1e:	83 c4 10             	add    esp,0x10
c0009f21:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f25:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f29:	52                   	push   edx
c0009f2a:	50                   	push   eax
c0009f2b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f2f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f33:	e8 1b c4 01 00       	call   c0026353 <__adddf3>
c0009f38:	59                   	pop    ecx
c0009f39:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f3d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f41:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f47:	e8 7b d4 01 00       	call   c00273c7 <__extendsfdf2>
c0009f4c:	83 c4 10             	add    esp,0x10
c0009f4f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f53:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f5f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f63:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f67:	e8 64 ca 01 00       	call   c00269d0 <__muldf3>
c0009f6c:	83 c4 10             	add    esp,0x10
c0009f6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f73:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f77:	52                   	push   edx
c0009f78:	50                   	push   eax
c0009f79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f81:	e8 cd c3 01 00       	call   c0026353 <__adddf3>
c0009f86:	83 c4 10             	add    esp,0x10
c0009f89:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f8d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f91:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f95:	0f 89 30 fe ff ff    	jns    c0009dcb <calc_output_quad+0x8c>
c0009f9b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f9f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fa3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009fa7:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009fab:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009fb3:	29 c8                	sub    eax,ecx
c0009fb5:	99                   	cdq    
c0009fb6:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fba:	31 d2                	xor    edx,edx
c0009fbc:	0f af d8             	imul   ebx,eax
c0009fbf:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009fc3:	40                   	inc    eax
c0009fc4:	01 cb                	add    ebx,ecx
c0009fc6:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009fcb:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009fcf:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009fd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009fd7:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fda:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fe2:	31 c0                	xor    eax,eax
c0009fe4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009fe8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ff0:	89 d8                	mov    eax,ebx
c0009ff2:	83 ee 10             	sub    esi,0x10
c0009ff5:	e8 d7 f6 ff ff       	call   c00096d1 <fp_to_double>
c0009ffa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a002:	89 d8                	mov    eax,ebx
c000a004:	e8 be f6 ff ff       	call   c00096c7 <fp_to_int>
c000a009:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a00d:	52                   	push   edx
c000a00e:	52                   	push   edx
c000a00f:	57                   	push   edi
c000a010:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a014:	e8 cf bc 01 00       	call   c0025ce8 <__subsf3>
c000a019:	89 04 24             	mov    DWORD PTR [esp],eax
c000a01c:	e8 a6 d3 01 00       	call   c00273c7 <__extendsfdf2>
c000a021:	83 c4 10             	add    esp,0x10
c000a024:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a028:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a034:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a038:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a03c:	e8 8f c9 01 00       	call   c00269d0 <__muldf3>
c000a041:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a044:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a048:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a04c:	e8 76 d3 01 00       	call   c00273c7 <__extendsfdf2>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a058:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a05c:	52                   	push   edx
c000a05d:	50                   	push   eax
c000a05e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a062:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a066:	e8 e8 c2 01 00       	call   c0026353 <__adddf3>
c000a06b:	59                   	pop    ecx
c000a06c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a070:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a074:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a07a:	e8 48 d3 01 00       	call   c00273c7 <__extendsfdf2>
c000a07f:	83 c4 10             	add    esp,0x10
c000a082:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a086:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a08a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a092:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a096:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a09a:	e8 31 c9 01 00       	call   c00269d0 <__muldf3>
c000a09f:	83 c4 10             	add    esp,0x10
c000a0a2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0aa:	52                   	push   edx
c000a0ab:	50                   	push   eax
c000a0ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0b4:	e8 9a c2 01 00       	call   c0026353 <__adddf3>
c000a0b9:	5f                   	pop    edi
c000a0ba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0be:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0c2:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a0c8:	e8 fa d2 01 00       	call   c00273c7 <__extendsfdf2>
c000a0cd:	83 c4 10             	add    esp,0x10
c000a0d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0d4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0e0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e8:	e8 e3 c8 01 00       	call   c00269d0 <__muldf3>
c000a0ed:	83 c4 10             	add    esp,0x10
c000a0f0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f8:	52                   	push   edx
c000a0f9:	50                   	push   eax
c000a0fa:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0fe:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a102:	e8 4c c2 01 00       	call   c0026353 <__adddf3>
c000a107:	59                   	pop    ecx
c000a108:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a10c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a110:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a116:	e8 ac d2 01 00       	call   c00273c7 <__extendsfdf2>
c000a11b:	83 c4 10             	add    esp,0x10
c000a11e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a122:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a12e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a132:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a136:	e8 95 c8 01 00       	call   c00269d0 <__muldf3>
c000a13b:	83 c4 10             	add    esp,0x10
c000a13e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a142:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a146:	52                   	push   edx
c000a147:	50                   	push   eax
c000a148:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a14c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a150:	e8 fe c1 01 00       	call   c0026353 <__adddf3>
c000a155:	5f                   	pop    edi
c000a156:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a15a:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a15e:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a164:	e8 5e d2 01 00       	call   c00273c7 <__extendsfdf2>
c000a169:	83 c4 10             	add    esp,0x10
c000a16c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a170:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a174:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a17c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a180:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a184:	e8 47 c8 01 00       	call   c00269d0 <__muldf3>
c000a189:	83 c4 10             	add    esp,0x10
c000a18c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a190:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a194:	52                   	push   edx
c000a195:	50                   	push   eax
c000a196:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a19a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a19e:	e8 b0 c1 01 00       	call   c0026353 <__adddf3>
c000a1a3:	83 c4 10             	add    esp,0x10
c000a1a6:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1aa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a1ae:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a1b2:	85 db                	test   ebx,ebx
c000a1b4:	0f 8f 36 fe ff ff    	jg     c0009ff0 <calc_output_quad+0x2b1>
c000a1ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1ca:	e8 84 c1 01 00       	call   c0026353 <__adddf3>
c000a1cf:	83 c4 10             	add    esp,0x10
c000a1d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ea:	e8 e1 c7 01 00       	call   c00269d0 <__muldf3>
c000a1ef:	59                   	pop    ecx
c000a1f0:	5b                   	pop    ebx
c000a1f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	e8 9d d0 01 00       	call   c00272a3 <__truncdfsf2>
c000a206:	83 c4 10             	add    esp,0x10
c000a209:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a210:	89 06                	mov    DWORD PTR [esi],eax
c000a212:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a216:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a21a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a21e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a222:	e8 2c c1 01 00       	call   c0026353 <__adddf3>
c000a227:	83 c4 10             	add    esp,0x10
c000a22a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a22e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a232:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a236:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a242:	e8 89 c7 01 00       	call   c00269d0 <__muldf3>
c000a247:	5e                   	pop    esi
c000a248:	5f                   	pop    edi
c000a249:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a24d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a251:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a255:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a259:	e8 45 d0 01 00       	call   c00272a3 <__truncdfsf2>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a268:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a26b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a26f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a273:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a277:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a27b:	e8 d3 c0 01 00       	call   c0026353 <__adddf3>
c000a280:	83 c4 10             	add    esp,0x10
c000a283:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a287:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a28b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a293:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a297:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a29b:	e8 30 c7 01 00       	call   c00269d0 <__muldf3>
c000a2a0:	5d                   	pop    ebp
c000a2a1:	59                   	pop    ecx
c000a2a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b2:	e8 ec cf 01 00       	call   c00272a3 <__truncdfsf2>
c000a2b7:	83 c4 10             	add    esp,0x10
c000a2ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2c1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2d4:	e8 7a c0 01 00       	call   c0026353 <__adddf3>
c000a2d9:	83 c4 10             	add    esp,0x10
c000a2dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2f4:	e8 d7 c6 01 00       	call   c00269d0 <__muldf3>
c000a2f9:	5b                   	pop    ebx
c000a2fa:	5e                   	pop    esi
c000a2fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2ff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a303:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a307:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a30b:	e8 93 cf 01 00       	call   c00272a3 <__truncdfsf2>
c000a310:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a317:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a31a:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a320:	5b                   	pop    ebx
c000a321:	5e                   	pop    esi
c000a322:	5f                   	pop    edi
c000a323:	5d                   	pop    ebp
c000a324:	c3                   	ret    

c000a325 <calc_output_hex>:
c000a325:	55                   	push   ebp
c000a326:	89 cd                	mov    ebp,ecx
c000a328:	57                   	push   edi
c000a329:	56                   	push   esi
c000a32a:	53                   	push   ebx
c000a32b:	89 c3                	mov    ebx,eax
c000a32d:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a333:	89 14 24             	mov    DWORD PTR [esp],edx
c000a336:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a33d:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a344:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a348:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a34c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a34f:	e8 6f f3 ff ff       	call   c00096c3 <int_to_fp>
c000a354:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a357:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a35b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a35e:	29 c8                	sub    eax,ecx
c000a360:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a364:	99                   	cdq    
c000a365:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a36d:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a370:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a378:	0f af f8             	imul   edi,eax
c000a37b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a37e:	01 cf                	add    edi,ecx
c000a380:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a384:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a387:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a38b:	0f af c2             	imul   eax,edx
c000a38e:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a392:	29 c1                	sub    ecx,eax
c000a394:	31 d2                	xor    edx,edx
c000a396:	31 c0                	xor    eax,eax
c000a398:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a39b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a39f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a3a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a3ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a3af:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a3b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3b7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3c3:	89 f8                	mov    eax,edi
c000a3c5:	e8 07 f3 ff ff       	call   c00096d1 <fp_to_double>
c000a3ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d2:	89 f8                	mov    eax,edi
c000a3d4:	e8 ee f2 ff ff       	call   c00096c7 <fp_to_int>
c000a3d9:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3dd:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3e0:	52                   	push   edx
c000a3e1:	52                   	push   edx
c000a3e2:	51                   	push   ecx
c000a3e3:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3e7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3ee:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3f2:	e8 f1 b8 01 00       	call   c0025ce8 <__subsf3>
c000a3f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3fa:	e8 c8 cf 01 00       	call   c00273c7 <__extendsfdf2>
c000a3ff:	83 c4 10             	add    esp,0x10
c000a402:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a406:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a40a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a40e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a412:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a416:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a41a:	e8 b1 c5 01 00       	call   c00269d0 <__muldf3>
c000a41f:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a423:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a427:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a42a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a42e:	e8 94 cf 01 00       	call   c00273c7 <__extendsfdf2>
c000a433:	83 c4 10             	add    esp,0x10
c000a436:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a43e:	52                   	push   edx
c000a43f:	50                   	push   eax
c000a440:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a448:	e8 06 bf 01 00       	call   c0026353 <__adddf3>
c000a44d:	59                   	pop    ecx
c000a44e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a452:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a456:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a45c:	e8 66 cf 01 00       	call   c00273c7 <__extendsfdf2>
c000a461:	83 c4 10             	add    esp,0x10
c000a464:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a468:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a478:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a47c:	e8 4f c5 01 00       	call   c00269d0 <__muldf3>
c000a481:	83 c4 10             	add    esp,0x10
c000a484:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a488:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a48c:	52                   	push   edx
c000a48d:	50                   	push   eax
c000a48e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a492:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a496:	e8 b8 be 01 00       	call   c0026353 <__adddf3>
c000a49b:	59                   	pop    ecx
c000a49c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4a0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a4a4:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a4aa:	e8 18 cf 01 00       	call   c00273c7 <__extendsfdf2>
c000a4af:	83 c4 10             	add    esp,0x10
c000a4b2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4b6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4c6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ca:	e8 01 c5 01 00       	call   c00269d0 <__muldf3>
c000a4cf:	83 c4 10             	add    esp,0x10
c000a4d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4da:	52                   	push   edx
c000a4db:	50                   	push   eax
c000a4dc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e4:	e8 6a be 01 00       	call   c0026353 <__adddf3>
c000a4e9:	59                   	pop    ecx
c000a4ea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4ee:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4f2:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4f8:	e8 ca ce 01 00       	call   c00273c7 <__extendsfdf2>
c000a4fd:	83 c4 10             	add    esp,0x10
c000a500:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a504:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a508:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a510:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a514:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a518:	e8 b3 c4 01 00       	call   c00269d0 <__muldf3>
c000a51d:	83 c4 10             	add    esp,0x10
c000a520:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a524:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a528:	52                   	push   edx
c000a529:	50                   	push   eax
c000a52a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a52e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a532:	e8 1c be 01 00       	call   c0026353 <__adddf3>
c000a537:	59                   	pop    ecx
c000a538:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a53c:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a540:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a546:	e8 7c ce 01 00       	call   c00273c7 <__extendsfdf2>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a552:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a556:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a55a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a55e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a562:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a566:	e8 65 c4 01 00       	call   c00269d0 <__muldf3>
c000a56b:	83 c4 10             	add    esp,0x10
c000a56e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a572:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a576:	52                   	push   edx
c000a577:	50                   	push   eax
c000a578:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a57c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a580:	e8 ce bd 01 00       	call   c0026353 <__adddf3>
c000a585:	59                   	pop    ecx
c000a586:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a58a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a58e:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a594:	e8 2e ce 01 00       	call   c00273c7 <__extendsfdf2>
c000a599:	83 c4 10             	add    esp,0x10
c000a59c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ac:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5b4:	e8 17 c4 01 00       	call   c00269d0 <__muldf3>
c000a5b9:	83 c4 10             	add    esp,0x10
c000a5bc:	83 c6 18             	add    esi,0x18
c000a5bf:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5c3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5c7:	52                   	push   edx
c000a5c8:	50                   	push   eax
c000a5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a5d1:	e8 7d bd 01 00       	call   c0026353 <__adddf3>
c000a5d6:	59                   	pop    ecx
c000a5d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5db:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5df:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5e5:	e8 dd cd 01 00       	call   c00273c7 <__extendsfdf2>
c000a5ea:	83 c4 10             	add    esp,0x10
c000a5ed:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5f1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5fd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a601:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a605:	e8 c6 c3 01 00       	call   c00269d0 <__muldf3>
c000a60a:	83 c4 10             	add    esp,0x10
c000a60d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a611:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a615:	52                   	push   edx
c000a616:	50                   	push   eax
c000a617:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a61b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a61f:	e8 2f bd 01 00       	call   c0026353 <__adddf3>
c000a624:	83 c4 10             	add    esp,0x10
c000a627:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a62b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a62f:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a632:	0f 89 8b fd ff ff    	jns    c000a3c3 <calc_output_hex+0x9e>
c000a638:	31 f6                	xor    esi,esi
c000a63a:	31 ff                	xor    edi,edi
c000a63c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a640:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a643:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a647:	29 e9                	sub    ecx,ebp
c000a649:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a64d:	29 c8                	sub    eax,ecx
c000a64f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a652:	99                   	cdq    
c000a653:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a657:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a65a:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a65e:	0f af e8             	imul   ebp,eax
c000a661:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a665:	40                   	inc    eax
c000a666:	01 cd                	add    ebp,ecx
c000a668:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a66d:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a671:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a675:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a679:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a67c:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a680:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a684:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a688:	89 e8                	mov    eax,ebp
c000a68a:	e8 42 f0 ff ff       	call   c00096d1 <fp_to_double>
c000a68f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a693:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a697:	89 e8                	mov    eax,ebp
c000a699:	e8 29 f0 ff ff       	call   c00096c7 <fp_to_int>
c000a69e:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a6a2:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a6a5:	52                   	push   edx
c000a6a6:	52                   	push   edx
c000a6a7:	51                   	push   ecx
c000a6a8:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a6af:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a6b6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6ba:	e8 29 b6 01 00       	call   c0025ce8 <__subsf3>
c000a6bf:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6c2:	e8 00 cd 01 00       	call   c00273c7 <__extendsfdf2>
c000a6c7:	83 c4 10             	add    esp,0x10
c000a6ca:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6ce:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6da:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6de:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6e2:	e8 e9 c2 01 00       	call   c00269d0 <__muldf3>
c000a6e7:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6f2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6f5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6f9:	e8 c9 cc 01 00       	call   c00273c7 <__extendsfdf2>
c000a6fe:	83 c4 10             	add    esp,0x10
c000a701:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a705:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a709:	52                   	push   edx
c000a70a:	50                   	push   eax
c000a70b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a713:	e8 3b bc 01 00       	call   c0026353 <__adddf3>
c000a718:	59                   	pop    ecx
c000a719:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a71d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a721:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a727:	e8 9b cc 01 00       	call   c00273c7 <__extendsfdf2>
c000a72c:	83 c4 10             	add    esp,0x10
c000a72f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a733:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a743:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a747:	e8 84 c2 01 00       	call   c00269d0 <__muldf3>
c000a74c:	83 c4 10             	add    esp,0x10
c000a74f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a753:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a757:	52                   	push   edx
c000a758:	50                   	push   eax
c000a759:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a75d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a761:	e8 ed bb 01 00       	call   c0026353 <__adddf3>
c000a766:	59                   	pop    ecx
c000a767:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a76b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a76f:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a775:	e8 4d cc 01 00       	call   c00273c7 <__extendsfdf2>
c000a77a:	83 c4 10             	add    esp,0x10
c000a77d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a781:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a78d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a791:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a795:	e8 36 c2 01 00       	call   c00269d0 <__muldf3>
c000a79a:	83 c4 10             	add    esp,0x10
c000a79d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7a1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7a5:	52                   	push   edx
c000a7a6:	50                   	push   eax
c000a7a7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7ab:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7af:	e8 9f bb 01 00       	call   c0026353 <__adddf3>
c000a7b4:	59                   	pop    ecx
c000a7b5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7b9:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7bd:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7c3:	e8 ff cb 01 00       	call   c00273c7 <__extendsfdf2>
c000a7c8:	83 c4 10             	add    esp,0x10
c000a7cb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7cf:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7db:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7df:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7e3:	e8 e8 c1 01 00       	call   c00269d0 <__muldf3>
c000a7e8:	83 c4 10             	add    esp,0x10
c000a7eb:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7ef:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7f3:	52                   	push   edx
c000a7f4:	50                   	push   eax
c000a7f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fd:	e8 51 bb 01 00       	call   c0026353 <__adddf3>
c000a802:	59                   	pop    ecx
c000a803:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a807:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a80b:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a811:	e8 b1 cb 01 00       	call   c00273c7 <__extendsfdf2>
c000a816:	83 c4 10             	add    esp,0x10
c000a819:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a81d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a825:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a829:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a82d:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a831:	e8 9a c1 01 00       	call   c00269d0 <__muldf3>
c000a836:	83 c4 10             	add    esp,0x10
c000a839:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a83d:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a841:	52                   	push   edx
c000a842:	50                   	push   eax
c000a843:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a847:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a84b:	e8 03 bb 01 00       	call   c0026353 <__adddf3>
c000a850:	59                   	pop    ecx
c000a851:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a855:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a859:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a85f:	e8 63 cb 01 00       	call   c00273c7 <__extendsfdf2>
c000a864:	83 c4 10             	add    esp,0x10
c000a867:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a86b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a86f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a873:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a877:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a87b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a87f:	e8 4c c1 01 00       	call   c00269d0 <__muldf3>
c000a884:	83 c4 10             	add    esp,0x10
c000a887:	83 eb 18             	sub    ebx,0x18
c000a88a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a88e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a892:	52                   	push   edx
c000a893:	50                   	push   eax
c000a894:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a898:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a89c:	e8 b2 ba 01 00       	call   c0026353 <__adddf3>
c000a8a1:	59                   	pop    ecx
c000a8a2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a8a6:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a8aa:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a8b0:	e8 12 cb 01 00       	call   c00273c7 <__extendsfdf2>
c000a8b5:	83 c4 10             	add    esp,0x10
c000a8b8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8bc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8c8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8cc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d0:	e8 fb c0 01 00       	call   c00269d0 <__muldf3>
c000a8d5:	83 c4 10             	add    esp,0x10
c000a8d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8e0:	52                   	push   edx
c000a8e1:	50                   	push   eax
c000a8e2:	57                   	push   edi
c000a8e3:	56                   	push   esi
c000a8e4:	e8 6a ba 01 00       	call   c0026353 <__adddf3>
c000a8e9:	83 c4 10             	add    esp,0x10
c000a8ec:	89 c6                	mov    esi,eax
c000a8ee:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8f1:	89 d7                	mov    edi,edx
c000a8f3:	85 ed                	test   ebp,ebp
c000a8f5:	0f 8f 8d fd ff ff    	jg     c000a688 <calc_output_hex+0x363>
c000a8fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a903:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a907:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a90b:	e8 43 ba 01 00       	call   c0026353 <__adddf3>
c000a910:	83 c4 10             	add    esp,0x10
c000a913:	89 04 24             	mov    DWORD PTR [esp],eax
c000a916:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a91a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a91e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a922:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a926:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a92a:	e8 a1 c0 01 00       	call   c00269d0 <__muldf3>
c000a92f:	59                   	pop    ecx
c000a930:	5b                   	pop    ebx
c000a931:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a935:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a939:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a941:	e8 5d c9 01 00       	call   c00272a3 <__truncdfsf2>
c000a946:	83 c4 10             	add    esp,0x10
c000a949:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a950:	89 03                	mov    DWORD PTR [ebx],eax
c000a952:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a956:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a95a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a95e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a962:	e8 ec b9 01 00       	call   c0026353 <__adddf3>
c000a967:	83 c4 10             	add    esp,0x10
c000a96a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a96d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a971:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a975:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a979:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a97d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a981:	e8 4a c0 01 00       	call   c00269d0 <__muldf3>
c000a986:	5d                   	pop    ebp
c000a987:	59                   	pop    ecx
c000a988:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a98c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	e8 06 c9 01 00       	call   c00272a3 <__truncdfsf2>
c000a99d:	83 c4 10             	add    esp,0x10
c000a9a0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9a7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a9aa:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9ae:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9b2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9b6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9ba:	e8 94 b9 01 00       	call   c0026353 <__adddf3>
c000a9bf:	83 c4 10             	add    esp,0x10
c000a9c2:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9d9:	e8 f2 bf 01 00       	call   c00269d0 <__muldf3>
c000a9de:	5b                   	pop    ebx
c000a9df:	5d                   	pop    ebp
c000a9e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	e8 ae c8 01 00       	call   c00272a3 <__truncdfsf2>
c000a9f5:	83 c4 10             	add    esp,0x10
c000a9f8:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9ff:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aa02:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa06:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa0a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa0e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa12:	e8 3c b9 01 00       	call   c0026353 <__adddf3>
c000aa17:	83 c4 10             	add    esp,0x10
c000aa1a:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa31:	e8 9a bf 01 00       	call   c00269d0 <__muldf3>
c000aa36:	59                   	pop    ecx
c000aa37:	5b                   	pop    ebx
c000aa38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	e8 56 c8 01 00       	call   c00272a3 <__truncdfsf2>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa57:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa5a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa5e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa66:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa6a:	e8 e4 b8 01 00       	call   c0026353 <__adddf3>
c000aa6f:	83 c4 10             	add    esp,0x10
c000aa72:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa81:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa85:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa89:	e8 42 bf 01 00       	call   c00269d0 <__muldf3>
c000aa8e:	5d                   	pop    ebp
c000aa8f:	59                   	pop    ecx
c000aa90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa0:	e8 fe c7 01 00       	call   c00272a3 <__truncdfsf2>
c000aaa5:	83 c4 10             	add    esp,0x10
c000aaa8:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aaaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aab2:	57                   	push   edi
c000aab3:	56                   	push   esi
c000aab4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aab8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aabc:	e8 92 b8 01 00       	call   c0026353 <__adddf3>
c000aac1:	83 c4 10             	add    esp,0x10
c000aac4:	89 04 24             	mov    DWORD PTR [esp],eax
c000aac7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aacb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aacf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aadb:	e8 f0 be 01 00       	call   c00269d0 <__muldf3>
c000aae0:	5b                   	pop    ebx
c000aae1:	5e                   	pop    esi
c000aae2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aae6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaf2:	e8 ac c7 01 00       	call   c00272a3 <__truncdfsf2>
c000aaf7:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aafe:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ab01:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ab07:	5b                   	pop    ebx
c000ab08:	5e                   	pop    esi
c000ab09:	5f                   	pop    edi
c000ab0a:	5d                   	pop    ebp
c000ab0b:	c3                   	ret    

c000ab0c <sinc_reset>:
c000ab0c:	56                   	push   esi
c000ab0d:	53                   	push   ebx
c000ab0e:	51                   	push   ecx
c000ab0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab13:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab16:	85 db                	test   ebx,ebx
c000ab18:	74 59                	je     c000ab73 <sinc_reset+0x67>
c000ab1a:	31 d2                	xor    edx,edx
c000ab1c:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab23:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab26:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab29:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab30:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab37:	31 c0                	xor    eax,eax
c000ab39:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab3f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab42:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab45:	52                   	push   edx
c000ab46:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab49:	c1 e0 02             	shl    eax,0x2
c000ab4c:	50                   	push   eax
c000ab4d:	6a 00                	push   0x0
c000ab4f:	56                   	push   esi
c000ab50:	e8 6f 5b ff ff       	call   c00006c4 <memset>
c000ab55:	83 c4 0c             	add    esp,0xc
c000ab58:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab5b:	c1 e0 02             	shl    eax,0x2
c000ab5e:	50                   	push   eax
c000ab5f:	68 aa 00 00 00       	push   0xaa
c000ab64:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab67:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab6a:	50                   	push   eax
c000ab6b:	e8 54 5b ff ff       	call   c00006c4 <memset>
c000ab70:	83 c4 10             	add    esp,0x10
c000ab73:	58                   	pop    eax
c000ab74:	5b                   	pop    ebx
c000ab75:	5e                   	pop    esi
c000ab76:	c3                   	ret    

c000ab77 <calc_output_multi>:
c000ab77:	55                   	push   ebp
c000ab78:	57                   	push   edi
c000ab79:	56                   	push   esi
c000ab7a:	89 c6                	mov    esi,eax
c000ab7c:	53                   	push   ebx
c000ab7d:	83 ec 4c             	sub    esp,0x4c
c000ab80:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab84:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab88:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab8c:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab90:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab9c:	8d 46 44             	lea    eax,[esi+0x44]
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000aba8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abac:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000abaf:	e8 0f eb ff ff       	call   c00096c3 <int_to_fp>
c000abb4:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000abb7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000abbb:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000abbf:	99                   	cdq    
c000abc0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abc4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000abc8:	0f af d0             	imul   edx,eax
c000abcb:	0f af c3             	imul   eax,ebx
c000abce:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000abd2:	29 c1                	sub    ecx,eax
c000abd4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000abd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000abdc:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abe3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abe7:	57                   	push   edi
c000abe8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abec:	6a 00                	push   0x0
c000abee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf2:	e8 cd 5a ff ff       	call   c00006c4 <memset>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abfe:	89 df                	mov    edi,ebx
c000ac00:	e8 cc ea ff ff       	call   c00096d1 <fp_to_double>
c000ac05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac0d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac11:	e8 b1 ea ff ff       	call   c00096c7 <fp_to_int>
c000ac16:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac19:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac1c:	51                   	push   ecx
c000ac1d:	51                   	push   ecx
c000ac1e:	55                   	push   ebp
c000ac1f:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac23:	e8 c0 b0 01 00       	call   c0025ce8 <__subsf3>
c000ac28:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac2b:	e8 97 c7 01 00       	call   c00273c7 <__extendsfdf2>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac4b:	e8 80 bd 01 00       	call   c00269d0 <__muldf3>
c000ac50:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac57:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac5b:	e8 67 c7 01 00       	call   c00273c7 <__extendsfdf2>
c000ac60:	83 c4 10             	add    esp,0x10
c000ac63:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac67:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac6b:	52                   	push   edx
c000ac6c:	50                   	push   eax
c000ac6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac75:	e8 d9 b6 01 00       	call   c0026353 <__adddf3>
c000ac7a:	83 c4 10             	add    esp,0x10
c000ac7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac81:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac85:	89 f8                	mov    eax,edi
c000ac87:	b9 08 00 00 00       	mov    ecx,0x8
c000ac8c:	99                   	cdq    
c000ac8d:	f7 f9                	idiv   ecx
c000ac8f:	4a                   	dec    edx
c000ac90:	83 fa 06             	cmp    edx,0x6
c000ac93:	77 07                	ja     c000ac9c <calc_output_multi+0x125>
c000ac95:	ff 24 95 84 8b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd747c]
c000ac9c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac9f:	4f                   	dec    edi
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aca6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acaa:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acb1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acb5:	e8 0d c7 01 00       	call   c00273c7 <__extendsfdf2>
c000acba:	83 c4 10             	add    esp,0x10
c000acbd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acc1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000accd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acd1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acd5:	e8 f6 bc 01 00       	call   c00269d0 <__muldf3>
c000acda:	83 c4 10             	add    esp,0x10
c000acdd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ace5:	52                   	push   edx
c000ace6:	50                   	push   eax
c000ace7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acea:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aced:	e8 61 b6 01 00       	call   c0026353 <__adddf3>
c000acf2:	83 c4 10             	add    esp,0x10
c000acf5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acf8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acfb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acfe:	4f                   	dec    edi
c000acff:	83 ec 0c             	sub    esp,0xc
c000ad02:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad09:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad10:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad14:	e8 ae c6 01 00       	call   c00273c7 <__extendsfdf2>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad20:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad30:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad34:	e8 97 bc 01 00       	call   c00269d0 <__muldf3>
c000ad39:	83 c4 10             	add    esp,0x10
c000ad3c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad40:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad44:	52                   	push   edx
c000ad45:	50                   	push   eax
c000ad46:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad49:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad4c:	e8 02 b6 01 00       	call   c0026353 <__adddf3>
c000ad51:	83 c4 10             	add    esp,0x10
c000ad54:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad57:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad5a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad5d:	4f                   	dec    edi
c000ad5e:	83 ec 0c             	sub    esp,0xc
c000ad61:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad68:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad6f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad73:	e8 4f c6 01 00       	call   c00273c7 <__extendsfdf2>
c000ad78:	83 c4 10             	add    esp,0x10
c000ad7b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad7f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad8b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad93:	e8 38 bc 01 00       	call   c00269d0 <__muldf3>
c000ad98:	83 c4 10             	add    esp,0x10
c000ad9b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad9f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada3:	52                   	push   edx
c000ada4:	50                   	push   eax
c000ada5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ada8:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000adab:	e8 a3 b5 01 00       	call   c0026353 <__adddf3>
c000adb0:	83 c4 10             	add    esp,0x10
c000adb3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adb6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adb9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adbc:	4f                   	dec    edi
c000adbd:	83 ec 0c             	sub    esp,0xc
c000adc0:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adc7:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adce:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000add2:	e8 f0 c5 01 00       	call   c00273c7 <__extendsfdf2>
c000add7:	83 c4 10             	add    esp,0x10
c000adda:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adde:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ade2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ade6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adea:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adf2:	e8 d9 bb 01 00       	call   c00269d0 <__muldf3>
c000adf7:	83 c4 10             	add    esp,0x10
c000adfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae02:	52                   	push   edx
c000ae03:	50                   	push   eax
c000ae04:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae07:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae0a:	e8 44 b5 01 00       	call   c0026353 <__adddf3>
c000ae0f:	83 c4 10             	add    esp,0x10
c000ae12:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae15:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae1b:	4f                   	dec    edi
c000ae1c:	83 ec 0c             	sub    esp,0xc
c000ae1f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae26:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae2d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae31:	e8 91 c5 01 00       	call   c00273c7 <__extendsfdf2>
c000ae36:	83 c4 10             	add    esp,0x10
c000ae39:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae3d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae49:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae4d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae51:	e8 7a bb 01 00       	call   c00269d0 <__muldf3>
c000ae56:	83 c4 10             	add    esp,0x10
c000ae59:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae5d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae61:	52                   	push   edx
c000ae62:	50                   	push   eax
c000ae63:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae66:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae69:	e8 e5 b4 01 00       	call   c0026353 <__adddf3>
c000ae6e:	83 c4 10             	add    esp,0x10
c000ae71:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae74:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae77:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7a:	4f                   	dec    edi
c000ae7b:	83 ec 0c             	sub    esp,0xc
c000ae7e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae85:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae90:	e8 32 c5 01 00       	call   c00273c7 <__extendsfdf2>
c000ae95:	83 c4 10             	add    esp,0x10
c000ae98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb0:	e8 1b bb 01 00       	call   c00269d0 <__muldf3>
c000aeb5:	83 c4 10             	add    esp,0x10
c000aeb8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec0:	52                   	push   edx
c000aec1:	50                   	push   eax
c000aec2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec5:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aec8:	e8 86 b4 01 00       	call   c0026353 <__adddf3>
c000aecd:	83 c4 10             	add    esp,0x10
c000aed0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed3:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aed9:	4f                   	dec    edi
c000aeda:	83 ec 0c             	sub    esp,0xc
c000aedd:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeeb:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeef:	e8 d3 c4 01 00       	call   c00273c7 <__extendsfdf2>
c000aef4:	83 c4 10             	add    esp,0x10
c000aef7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0f:	e8 bc ba 01 00       	call   c00269d0 <__muldf3>
c000af14:	83 c4 10             	add    esp,0x10
c000af17:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af1f:	52                   	push   edx
c000af20:	50                   	push   eax
c000af21:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af24:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af27:	e8 27 b4 01 00       	call   c0026353 <__adddf3>
c000af2c:	83 c4 10             	add    esp,0x10
c000af2f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af32:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af35:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af38:	4f                   	dec    edi
c000af39:	83 ec 0c             	sub    esp,0xc
c000af3c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af43:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af4e:	e8 74 c4 01 00       	call   c00273c7 <__extendsfdf2>
c000af53:	83 c4 10             	add    esp,0x10
c000af56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6e:	e8 5d ba 01 00       	call   c00269d0 <__muldf3>
c000af73:	83 c4 10             	add    esp,0x10
c000af76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af7e:	52                   	push   edx
c000af7f:	50                   	push   eax
c000af80:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af83:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af86:	e8 c8 b3 01 00       	call   c0026353 <__adddf3>
c000af8b:	83 c4 10             	add    esp,0x10
c000af8e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af91:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af94:	85 ff                	test   edi,edi
c000af96:	0f 8f e9 fc ff ff    	jg     c000ac85 <calc_output_multi+0x10e>
c000af9c:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000afa0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000afa4:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000afa8:	0f 89 4c fc ff ff    	jns    c000abfa <calc_output_multi+0x83>
c000afae:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000afb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000afb6:	29 c8                	sub    eax,ecx
c000afb8:	99                   	cdq    
c000afb9:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000afbd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000afc1:	0f af d0             	imul   edx,eax
c000afc4:	40                   	inc    eax
c000afc5:	01 d1                	add    ecx,edx
c000afc7:	0f af c3             	imul   eax,ebx
c000afca:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000afce:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000afd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000afd5:	55                   	push   ebp
c000afd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afda:	6a 00                	push   0x0
c000afdc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afe0:	e8 df 56 ff ff       	call   c00006c4 <memset>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afec:	e8 e0 e6 ff ff       	call   c00096d1 <fp_to_double>
c000aff1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aff5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aff9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000affd:	e8 c5 e6 ff ff       	call   c00096c7 <fp_to_int>
c000b002:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b005:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b008:	57                   	push   edi
c000b009:	57                   	push   edi
c000b00a:	89 df                	mov    edi,ebx
c000b00c:	55                   	push   ebp
c000b00d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b011:	e8 d2 ac 01 00       	call   c0025ce8 <__subsf3>
c000b016:	89 04 24             	mov    DWORD PTR [esp],eax
c000b019:	e8 a9 c3 01 00       	call   c00273c7 <__extendsfdf2>
c000b01e:	83 c4 10             	add    esp,0x10
c000b021:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b025:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b029:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b02d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b031:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b035:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b039:	e8 92 b9 01 00       	call   c00269d0 <__muldf3>
c000b03e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b041:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b045:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b049:	e8 79 c3 01 00       	call   c00273c7 <__extendsfdf2>
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b055:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b059:	52                   	push   edx
c000b05a:	50                   	push   eax
c000b05b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b05f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b063:	e8 eb b2 01 00       	call   c0026353 <__adddf3>
c000b068:	83 c4 10             	add    esp,0x10
c000b06b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b06f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b073:	89 f8                	mov    eax,edi
c000b075:	b9 08 00 00 00       	mov    ecx,0x8
c000b07a:	99                   	cdq    
c000b07b:	f7 f9                	idiv   ecx
c000b07d:	4a                   	dec    edx
c000b07e:	83 fa 06             	cmp    edx,0x6
c000b081:	77 07                	ja     c000b08a <calc_output_multi+0x513>
c000b083:	ff 24 95 a0 8b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7460]
c000b08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b08e:	4f                   	dec    edi
c000b08f:	83 ec 0c             	sub    esp,0xc
c000b092:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b095:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b099:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a4:	e8 1e c3 01 00       	call   c00273c7 <__extendsfdf2>
c000b0a9:	83 c4 10             	add    esp,0x10
c000b0ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0c4:	e8 07 b9 01 00       	call   c00269d0 <__muldf3>
c000b0c9:	83 c4 10             	add    esp,0x10
c000b0cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0d4:	52                   	push   edx
c000b0d5:	50                   	push   eax
c000b0d6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0d9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0dc:	e8 72 b2 01 00       	call   c0026353 <__adddf3>
c000b0e1:	83 c4 10             	add    esp,0x10
c000b0e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0ee:	4f                   	dec    edi
c000b0ef:	83 ec 0c             	sub    esp,0xc
c000b0f2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0f9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b100:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b104:	e8 be c2 01 00       	call   c00273c7 <__extendsfdf2>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b110:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b114:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b118:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b124:	e8 a7 b8 01 00       	call   c00269d0 <__muldf3>
c000b129:	83 c4 10             	add    esp,0x10
c000b12c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b130:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b134:	52                   	push   edx
c000b135:	50                   	push   eax
c000b136:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b139:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13c:	e8 12 b2 01 00       	call   c0026353 <__adddf3>
c000b141:	83 c4 10             	add    esp,0x10
c000b144:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b147:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b14e:	4f                   	dec    edi
c000b14f:	83 ec 0c             	sub    esp,0xc
c000b152:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b155:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b159:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b160:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b164:	e8 5e c2 01 00       	call   c00273c7 <__extendsfdf2>
c000b169:	83 c4 10             	add    esp,0x10
c000b16c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b170:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b174:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b178:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b180:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b184:	e8 47 b8 01 00       	call   c00269d0 <__muldf3>
c000b189:	83 c4 10             	add    esp,0x10
c000b18c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b190:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b194:	52                   	push   edx
c000b195:	50                   	push   eax
c000b196:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b199:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19c:	e8 b2 b1 01 00       	call   c0026353 <__adddf3>
c000b1a1:	83 c4 10             	add    esp,0x10
c000b1a4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1ae:	4f                   	dec    edi
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1b9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1c0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1c4:	e8 fe c1 01 00       	call   c00273c7 <__extendsfdf2>
c000b1c9:	83 c4 10             	add    esp,0x10
c000b1cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1e4:	e8 e7 b7 01 00       	call   c00269d0 <__muldf3>
c000b1e9:	83 c4 10             	add    esp,0x10
c000b1ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1f4:	52                   	push   edx
c000b1f5:	50                   	push   eax
c000b1f6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1f9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1fc:	e8 52 b1 01 00       	call   c0026353 <__adddf3>
c000b201:	83 c4 10             	add    esp,0x10
c000b204:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b207:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b20a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b20e:	4f                   	dec    edi
c000b20f:	83 ec 0c             	sub    esp,0xc
c000b212:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b215:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b219:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b220:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b224:	e8 9e c1 01 00       	call   c00273c7 <__extendsfdf2>
c000b229:	83 c4 10             	add    esp,0x10
c000b22c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b230:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b234:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b23c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b240:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b244:	e8 87 b7 01 00       	call   c00269d0 <__muldf3>
c000b249:	83 c4 10             	add    esp,0x10
c000b24c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b250:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b254:	52                   	push   edx
c000b255:	50                   	push   eax
c000b256:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b259:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b25c:	e8 f2 b0 01 00       	call   c0026353 <__adddf3>
c000b261:	83 c4 10             	add    esp,0x10
c000b264:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b267:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b26a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26e:	4f                   	dec    edi
c000b26f:	83 ec 0c             	sub    esp,0xc
c000b272:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b275:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b279:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b280:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b284:	e8 3e c1 01 00       	call   c00273c7 <__extendsfdf2>
c000b289:	83 c4 10             	add    esp,0x10
c000b28c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b290:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b294:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b298:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b29c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a4:	e8 27 b7 01 00       	call   c00269d0 <__muldf3>
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b4:	52                   	push   edx
c000b2b5:	50                   	push   eax
c000b2b6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2bc:	e8 92 b0 01 00       	call   c0026353 <__adddf3>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2ce:	4f                   	dec    edi
c000b2cf:	83 ec 0c             	sub    esp,0xc
c000b2d2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2e0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e4:	e8 de c0 01 00       	call   c00273c7 <__extendsfdf2>
c000b2e9:	83 c4 10             	add    esp,0x10
c000b2ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b300:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b304:	e8 c7 b6 01 00       	call   c00269d0 <__muldf3>
c000b309:	83 c4 10             	add    esp,0x10
c000b30c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b310:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b314:	52                   	push   edx
c000b315:	50                   	push   eax
c000b316:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b319:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b31c:	e8 32 b0 01 00       	call   c0026353 <__adddf3>
c000b321:	83 c4 10             	add    esp,0x10
c000b324:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b327:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b32a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32e:	4f                   	dec    edi
c000b32f:	83 ec 0c             	sub    esp,0xc
c000b332:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b335:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b339:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b340:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b344:	e8 7e c0 01 00       	call   c00273c7 <__extendsfdf2>
c000b349:	83 c4 10             	add    esp,0x10
c000b34c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b350:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b354:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b35c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b360:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b364:	e8 67 b6 01 00       	call   c00269d0 <__muldf3>
c000b369:	83 c4 10             	add    esp,0x10
c000b36c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b370:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b374:	52                   	push   edx
c000b375:	50                   	push   eax
c000b376:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b379:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b37c:	e8 d2 af 01 00       	call   c0026353 <__adddf3>
c000b381:	83 c4 10             	add    esp,0x10
c000b384:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b387:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b38a:	85 ff                	test   edi,edi
c000b38c:	0f 8f e1 fc ff ff    	jg     c000b073 <calc_output_multi+0x4fc>
c000b392:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b396:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b39a:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b39e:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b3a3:	0f 8f 3f fc ff ff    	jg     c000afe8 <calc_output_multi+0x471>
c000b3a9:	be 08 00 00 00       	mov    esi,0x8
c000b3ae:	89 d8                	mov    eax,ebx
c000b3b0:	99                   	cdq    
c000b3b1:	f7 fe                	idiv   esi
c000b3b3:	4a                   	dec    edx
c000b3b4:	83 fa 06             	cmp    edx,0x6
c000b3b7:	77 07                	ja     c000b3c0 <calc_output_multi+0x849>
c000b3b9:	ff 24 95 bc 8b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7444]
c000b3c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c4:	4b                   	dec    ebx
c000b3c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3d7:	e8 77 af 01 00       	call   c0026353 <__adddf3>
c000b3dc:	83 c4 10             	add    esp,0x10
c000b3df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f7:	e8 d4 b5 01 00       	call   c00269d0 <__muldf3>
c000b3fc:	5d                   	pop    ebp
c000b3fd:	59                   	pop    ecx
c000b3fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b402:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b40e:	e8 90 be 01 00       	call   c00272a3 <__truncdfsf2>
c000b413:	83 c4 10             	add    esp,0x10
c000b416:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b41a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b41d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b421:	4b                   	dec    ebx
c000b422:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b426:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b429:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b42d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b431:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b434:	e8 1a af 01 00       	call   c0026353 <__adddf3>
c000b439:	83 c4 10             	add    esp,0x10
c000b43c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b440:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b444:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b450:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b454:	e8 77 b5 01 00       	call   c00269d0 <__muldf3>
c000b459:	59                   	pop    ecx
c000b45a:	5f                   	pop    edi
c000b45b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b45f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b463:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b46b:	e8 33 be 01 00       	call   c00272a3 <__truncdfsf2>
c000b470:	83 c4 10             	add    esp,0x10
c000b473:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b477:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b47a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b47e:	4b                   	dec    ebx
c000b47f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b483:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b48a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b48e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b491:	e8 bd ae 01 00       	call   c0026353 <__adddf3>
c000b496:	83 c4 10             	add    esp,0x10
c000b499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b49d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b1:	e8 1a b5 01 00       	call   c00269d0 <__muldf3>
c000b4b6:	5f                   	pop    edi
c000b4b7:	5d                   	pop    ebp
c000b4b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4c8:	e8 d6 bd 01 00       	call   c00272a3 <__truncdfsf2>
c000b4cd:	83 c4 10             	add    esp,0x10
c000b4d0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4d4:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4db:	4b                   	dec    ebx
c000b4dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4ee:	e8 60 ae 01 00       	call   c0026353 <__adddf3>
c000b4f3:	83 c4 10             	add    esp,0x10
c000b4f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b506:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50e:	e8 bd b4 01 00       	call   c00269d0 <__muldf3>
c000b513:	5d                   	pop    ebp
c000b514:	59                   	pop    ecx
c000b515:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b519:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b525:	e8 79 bd 01 00       	call   c00272a3 <__truncdfsf2>
c000b52a:	83 c4 10             	add    esp,0x10
c000b52d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b531:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b538:	4b                   	dec    ebx
c000b539:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b53d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b540:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b544:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b548:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b54b:	e8 03 ae 01 00       	call   c0026353 <__adddf3>
c000b550:	83 c4 10             	add    esp,0x10
c000b553:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b557:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b55b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b55f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b563:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b567:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56b:	e8 60 b4 01 00       	call   c00269d0 <__muldf3>
c000b570:	59                   	pop    ecx
c000b571:	5f                   	pop    edi
c000b572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b576:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b57a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b57e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b582:	e8 1c bd 01 00       	call   c00272a3 <__truncdfsf2>
c000b587:	83 c4 10             	add    esp,0x10
c000b58a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b58e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b591:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b595:	4b                   	dec    ebx
c000b596:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b59a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b59d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a8:	e8 a6 ad 01 00       	call   c0026353 <__adddf3>
c000b5ad:	83 c4 10             	add    esp,0x10
c000b5b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5c8:	e8 03 b4 01 00       	call   c00269d0 <__muldf3>
c000b5cd:	5f                   	pop    edi
c000b5ce:	5d                   	pop    ebp
c000b5cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5df:	e8 bf bc 01 00       	call   c00272a3 <__truncdfsf2>
c000b5e4:	83 c4 10             	add    esp,0x10
c000b5e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5f2:	4b                   	dec    ebx
c000b5f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b602:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b605:	e8 49 ad 01 00       	call   c0026353 <__adddf3>
c000b60a:	83 c4 10             	add    esp,0x10
c000b60d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b611:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b615:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b619:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 a6 b3 01 00       	call   c00269d0 <__muldf3>
c000b62a:	5d                   	pop    ebp
c000b62b:	59                   	pop    ecx
c000b62c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b630:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b634:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b638:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b63c:	e8 62 bc 01 00       	call   c00272a3 <__truncdfsf2>
c000b641:	83 c4 10             	add    esp,0x10
c000b644:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b648:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b64b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b64f:	4b                   	dec    ebx
c000b650:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b654:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b657:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b65b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b65f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b662:	e8 ec ac 01 00       	call   c0026353 <__adddf3>
c000b667:	83 c4 10             	add    esp,0x10
c000b66a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b66e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 49 b3 01 00       	call   c00269d0 <__muldf3>
c000b687:	59                   	pop    ecx
c000b688:	5f                   	pop    edi
c000b689:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b68d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b691:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b695:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b699:	e8 05 bc 01 00       	call   c00272a3 <__truncdfsf2>
c000b69e:	83 c4 10             	add    esp,0x10
c000b6a1:	85 db                	test   ebx,ebx
c000b6a3:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b6a7:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b6aa:	0f 8f fe fc ff ff    	jg     c000b3ae <calc_output_multi+0x837>
c000b6b0:	83 c4 4c             	add    esp,0x4c
c000b6b3:	5b                   	pop    ebx
c000b6b4:	5e                   	pop    esi
c000b6b5:	5f                   	pop    edi
c000b6b6:	5d                   	pop    ebp
c000b6b7:	c3                   	ret    

c000b6b8 <double_to_fp>:
c000b6b8:	83 ec 0c             	sub    esp,0xc
c000b6bb:	68 00 00 b0 40       	push   0x40b00000
c000b6c0:	6a 00                	push   0x0
c000b6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ca:	e8 01 b3 01 00       	call   c00269d0 <__muldf3>
c000b6cf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b6d3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b6d7:	83 c4 1c             	add    esp,0x1c
c000b6da:	e9 71 bd 01 00       	jmp    c0027450 <lrint>

c000b6df <prepare_data>:
c000b6df:	55                   	push   ebp
c000b6e0:	57                   	push   edi
c000b6e1:	56                   	push   esi
c000b6e2:	53                   	push   ebx
c000b6e3:	83 ec 1c             	sub    esp,0x1c
c000b6e6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6ea:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6ee:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6f2:	0f 89 57 01 00 00    	jns    c000b84f <prepare_data+0x170>
c000b6f8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6fb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6fe:	85 d2                	test   edx,edx
c000b700:	75 0d                	jne    c000b70f <prepare_data+0x30>
c000b702:	8d 14 36             	lea    edx,[esi+esi*1]
c000b705:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b708:	29 d0                	sub    eax,edx
c000b70a:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70d:	eb 44                	jmp    c000b753 <prepare_data+0x74>
c000b70f:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b712:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b715:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b718:	39 c1                	cmp    ecx,eax
c000b71a:	7d 04                	jge    c000b720 <prepare_data+0x41>
c000b71c:	29 d0                	sub    eax,edx
c000b71e:	eb 2d                	jmp    c000b74d <prepare_data+0x6e>
c000b720:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b726:	29 d7                	sub    edi,edx
c000b728:	01 f7                	add    edi,esi
c000b72a:	51                   	push   ecx
c000b72b:	29 f2                	sub    edx,esi
c000b72d:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b734:	8d 14 90             	lea    edx,[eax+edx*4]
c000b737:	51                   	push   ecx
c000b738:	52                   	push   edx
c000b739:	50                   	push   eax
c000b73a:	e8 29 4f ff ff       	call   c0000668 <memmove>
c000b73f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b742:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b745:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b748:	29 f0                	sub    eax,esi
c000b74a:	83 c4 10             	add    esp,0x10
c000b74d:	29 f0                	sub    eax,esi
c000b74f:	79 02                	jns    c000b753 <prepare_data+0x74>
c000b751:	31 c0                	xor    eax,eax
c000b753:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b756:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b759:	29 ef                	sub    edi,ebp
c000b75b:	39 c7                	cmp    edi,eax
c000b75d:	7e 02                	jle    c000b761 <prepare_data+0x82>
c000b75f:	89 c7                	mov    edi,eax
c000b761:	89 f8                	mov    eax,edi
c000b763:	99                   	cdq    
c000b764:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b767:	b8 15 00 00 00       	mov    eax,0x15
c000b76c:	29 d7                	sub    edi,edx
c000b76e:	0f 88 dd 00 00 00    	js     c000b851 <prepare_data+0x172>
c000b774:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b777:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b77a:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b77d:	0f 8f ce 00 00 00    	jg     c000b851 <prepare_data+0x172>
c000b783:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b789:	50                   	push   eax
c000b78a:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b791:	50                   	push   eax
c000b792:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b796:	8b 00                	mov    eax,DWORD PTR [eax]
c000b798:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b79b:	50                   	push   eax
c000b79c:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b79f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7a3:	50                   	push   eax
c000b7a4:	e8 f7 4e ff ff       	call   c00006a0 <memcpy>
c000b7a9:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b7ac:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b7af:	01 fd                	add    ebp,edi
c000b7b1:	01 f9                	add    ecx,edi
c000b7b3:	83 c4 10             	add    esp,0x10
c000b7b6:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b7b9:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b7bc:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b7bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7c3:	0f 85 86 00 00 00    	jne    c000b84f <prepare_data+0x170>
c000b7c9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b7cc:	89 e8                	mov    eax,ebp
c000b7ce:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b7d1:	29 c8                	sub    eax,ecx
c000b7d3:	39 f8                	cmp    eax,edi
c000b7d5:	7d 78                	jge    c000b84f <prepare_data+0x170>
c000b7d7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7db:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7df:	74 6e                	je     c000b84f <prepare_data+0x170>
c000b7e1:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7e4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7e8:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7eb:	29 ef                	sub    edi,ebp
c000b7ed:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7f1:	7c 29                	jl     c000b81c <prepare_data+0x13d>
c000b7f3:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f6:	29 f1                	sub    ecx,esi
c000b7f8:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7ff:	55                   	push   ebp
c000b800:	50                   	push   eax
c000b801:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b804:	50                   	push   eax
c000b805:	52                   	push   edx
c000b806:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b80a:	e8 59 4e ff ff       	call   c0000668 <memmove>
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b815:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b818:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b81c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b81f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b822:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b825:	83 c6 05             	add    esi,0x5
c000b828:	78 07                	js     c000b831 <prepare_data+0x152>
c000b82a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b82d:	39 cf                	cmp    edi,ecx
c000b82f:	7e 04                	jle    c000b835 <prepare_data+0x156>
c000b831:	89 ce                	mov    esi,ecx
c000b833:	29 c6                	sub    esi,eax
c000b835:	8d 04 82             	lea    eax,[edx+eax*4]
c000b838:	51                   	push   ecx
c000b839:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b840:	51                   	push   ecx
c000b841:	6a 00                	push   0x0
c000b843:	50                   	push   eax
c000b844:	e8 7b 4e ff ff       	call   c00006c4 <memset>
c000b849:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	31 c0                	xor    eax,eax
c000b851:	83 c4 1c             	add    esp,0x1c
c000b854:	5b                   	pop    ebx
c000b855:	5e                   	pop    esi
c000b856:	5f                   	pop    edi
c000b857:	5d                   	pop    ebp
c000b858:	c3                   	ret    

c000b859 <sinc_multichan_vari_process>:
c000b859:	55                   	push   ebp
c000b85a:	ba 05 00 00 00       	mov    edx,0x5
c000b85f:	57                   	push   edi
c000b860:	56                   	push   esi
c000b861:	53                   	push   ebx
c000b862:	83 ec 4c             	sub    esp,0x4c
c000b865:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b869:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b86d:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b870:	85 db                	test   ebx,ebx
c000b872:	0f 84 9b 06 00 00    	je     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b878:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b87b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b87e:	0f af c5             	imul   eax,ebp
c000b881:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b884:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b887:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b88e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b895:	0f af c5             	imul   eax,ebp
c000b898:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b89b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b89e:	8b 06                	mov    eax,DWORD PTR [esi]
c000b8a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a8:	68 00 00 70 3f       	push   0x3f700000
c000b8ad:	6a 00                	push   0x0
c000b8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b7:	e8 e3 b9 01 00       	call   c002729f <__ltdf2>
c000b8bc:	83 c4 10             	add    esp,0x10
c000b8bf:	ba 16 00 00 00       	mov    edx,0x16
c000b8c4:	85 c0                	test   eax,eax
c000b8c6:	0f 88 47 06 00 00    	js     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b8cc:	68 00 00 70 40       	push   0x40700000
c000b8d1:	6a 00                	push   0x0
c000b8d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8db:	e8 a1 b9 01 00       	call   c0027281 <__gtdf2>
c000b8e0:	83 c4 10             	add    esp,0x10
c000b8e3:	ba 16 00 00 00       	mov    edx,0x16
c000b8e8:	85 c0                	test   eax,eax
c000b8ea:	0f 8f 23 06 00 00    	jg     c000bf13 <sinc_multichan_vari_process+0x6ba>
c000b8f0:	83 ec 0c             	sub    esp,0xc
c000b8f3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8f6:	e8 38 b7 01 00       	call   c0027033 <__floatsidf>
c000b8fb:	83 c4 10             	add    esp,0x10
c000b8fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b902:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b906:	68 00 00 00 40       	push   0x40000000
c000b90b:	6a 00                	push   0x0
c000b90d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b911:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b915:	e8 39 aa 01 00       	call   c0026353 <__adddf3>
c000b91a:	59                   	pop    ecx
c000b91b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b91f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b923:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b926:	e8 08 b7 01 00       	call   c0027033 <__floatsidf>
c000b92b:	83 c4 10             	add    esp,0x10
c000b92e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b932:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b936:	52                   	push   edx
c000b937:	50                   	push   eax
c000b938:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b93c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b940:	e8 6f b3 01 00       	call   c0026cb4 <__divdf3>
c000b945:	83 c4 10             	add    esp,0x10
c000b948:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b94c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b950:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b953:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b956:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b95a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b95e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b96e:	e8 0e b9 01 00       	call   c0027281 <__gtdf2>
c000b973:	83 c4 10             	add    esp,0x10
c000b976:	85 c0                	test   eax,eax
c000b978:	7e 2d                	jle    c000b9a7 <sinc_multichan_vari_process+0x14e>
c000b97a:	68 00 00 f0 3f       	push   0x3ff00000
c000b97f:	6a 00                	push   0x0
c000b981:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b985:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b989:	e8 11 b9 01 00       	call   c002729f <__ltdf2>
c000b98e:	83 c4 10             	add    esp,0x10
c000b991:	85 c0                	test   eax,eax
c000b993:	79 4d                	jns    c000b9e2 <sinc_multichan_vari_process+0x189>
c000b995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b999:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b99d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b9a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b9a5:	eb 1b                	jmp    c000b9c2 <sinc_multichan_vari_process+0x169>
c000b9a7:	68 00 00 f0 3f       	push   0x3ff00000
c000b9ac:	6a 00                	push   0x0
c000b9ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b9b6:	e8 e4 b8 01 00       	call   c002729f <__ltdf2>
c000b9bb:	83 c4 10             	add    esp,0x10
c000b9be:	85 c0                	test   eax,eax
c000b9c0:	79 20                	jns    c000b9e2 <sinc_multichan_vari_process+0x189>
c000b9c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d2:	e8 dd b2 01 00       	call   c0026cb4 <__divdf3>
c000b9d7:	83 c4 10             	add    esp,0x10
c000b9da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e2:	50                   	push   eax
c000b9e3:	50                   	push   eax
c000b9e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9ec:	e8 5f ba 01 00       	call   c0027450 <lrint>
c000b9f1:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9f4:	40                   	inc    eax
c000b9f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9f9:	0f af c5             	imul   eax,ebp
c000b9fc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ba00:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ba03:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba07:	58                   	pop    eax
c000ba08:	5a                   	pop    edx
c000ba09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba0d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba11:	e8 3a ba 01 00       	call   c0027450 <lrint>
c000ba16:	83 ec 0c             	sub    esp,0xc
c000ba19:	50                   	push   eax
c000ba1a:	e8 14 b6 01 00       	call   c0027033 <__floatsidf>
c000ba1f:	83 c4 10             	add    esp,0x10
c000ba22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba2a:	52                   	push   edx
c000ba2b:	50                   	push   eax
c000ba2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba34:	e8 6b af 01 00       	call   c00269a4 <__subdf3>
c000ba39:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba41:	83 c4 20             	add    esp,0x20
c000ba44:	6a 00                	push   0x0
c000ba46:	6a 00                	push   0x0
c000ba48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba50:	e8 4a b8 01 00       	call   c002729f <__ltdf2>
c000ba55:	83 c4 10             	add    esp,0x10
c000ba58:	85 c0                	test   eax,eax
c000ba5a:	79 1f                	jns    c000ba7b <sinc_multichan_vari_process+0x222>
c000ba5c:	68 00 00 f0 3f       	push   0x3ff00000
c000ba61:	6a 00                	push   0x0
c000ba63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba6b:	e8 e3 a8 01 00       	call   c0026353 <__adddf3>
c000ba70:	83 c4 10             	add    esp,0x10
c000ba73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba7b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba7e:	83 ec 10             	sub    esp,0x10
c000ba81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba85:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba94:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba98:	e8 07 af 01 00       	call   c00269a4 <__subdf3>
c000ba9d:	83 c4 18             	add    esp,0x18
c000baa0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baa4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baa8:	52                   	push   edx
c000baa9:	50                   	push   eax
c000baaa:	e8 a1 b9 01 00       	call   c0027450 <lrint>
c000baaf:	0f af e8             	imul   ebp,eax
c000bab2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bab6:	01 e8                	add    eax,ebp
c000bab8:	99                   	cdq    
c000bab9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000babc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000babf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bac7:	68 00 00 f0 3f       	push   0x3ff00000
c000bacc:	6a 00                	push   0x0
c000bace:	e8 e1 b1 01 00       	call   c0026cb4 <__divdf3>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bada:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bade:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bae3:	68 23 42 92 0c       	push   0xc924223
c000bae8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baf0:	e8 5e a8 01 00       	call   c0026353 <__adddf3>
c000baf5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000baf9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bafd:	83 c4 20             	add    esp,0x20
c000bb00:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bb08:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bb10:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb13:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb16:	7d 50                	jge    c000bb68 <sinc_multichan_vari_process+0x30f>
c000bb18:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb1e:	01 c8                	add    eax,ecx
c000bb20:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb23:	99                   	cdq    
c000bb24:	f7 f9                	idiv   ecx
c000bb26:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2a:	7d 0c                	jge    c000bb38 <sinc_multichan_vari_process+0x2df>
c000bb2c:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bb2f:	85 ed                	test   ebp,ebp
c000bb31:	79 6b                	jns    c000bb9e <sinc_multichan_vari_process+0x345>
c000bb33:	e9 e6 00 00 00       	jmp    c000bc1e <sinc_multichan_vari_process+0x3c5>
c000bb38:	50                   	push   eax
c000bb39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb3d:	57                   	push   edi
c000bb3e:	53                   	push   ebx
c000bb3f:	e8 9b fb ff ff       	call   c000b6df <prepare_data>
c000bb44:	83 c4 10             	add    esp,0x10
c000bb47:	89 c2                	mov    edx,eax
c000bb49:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb4c:	85 c0                	test   eax,eax
c000bb4e:	0f 85 bf 03 00 00    	jne    c000bf13 <sinc_multichan_vari_process+0x6ba>
c000bb54:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb57:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb5a:	01 c8                	add    eax,ecx
c000bb5c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb5f:	99                   	cdq    
c000bb60:	f7 f9                	idiv   ecx
c000bb62:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb66:	7c c4                	jl     c000bb2c <sinc_multichan_vari_process+0x2d3>
c000bb68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb70:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb73:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb7a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7e:	89 06                	mov    DWORD PTR [esi],eax
c000bb80:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb86:	99                   	cdq    
c000bb87:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb8a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb90:	99                   	cdq    
c000bb91:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb94:	31 d2                	xor    edx,edx
c000bb96:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb99:	e9 75 03 00 00       	jmp    c000bf13 <sinc_multichan_vari_process+0x6ba>
c000bb9e:	83 ec 0c             	sub    esp,0xc
c000bba1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bba4:	e8 8a b4 01 00       	call   c0027033 <__floatsidf>
c000bba9:	83 c4 10             	add    esp,0x10
c000bbac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbb0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbbc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbc4:	e8 8a a7 01 00       	call   c0026353 <__adddf3>
c000bbc9:	83 c4 10             	add    esp,0x10
c000bbcc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bbd0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bbd4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbd8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bbdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbe0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbe4:	e8 6a a7 01 00       	call   c0026353 <__adddf3>
c000bbe9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbf0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbf4:	e8 3a b4 01 00       	call   c0027033 <__floatsidf>
c000bbf9:	83 c4 10             	add    esp,0x10
c000bbfc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc04:	52                   	push   edx
c000bc05:	50                   	push   eax
c000bc06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc0e:	e8 8a b6 01 00       	call   c002729d <__gedf2>
c000bc13:	83 c4 10             	add    esp,0x10
c000bc16:	85 c0                	test   eax,eax
c000bc18:	0f 89 4a ff ff ff    	jns    c000bb68 <sinc_multichan_vari_process+0x30f>
c000bc1e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc22:	0f 8e ed 00 00 00    	jle    c000bd15 <sinc_multichan_vari_process+0x4bc>
c000bc28:	83 ec 10             	sub    esp,0x10
c000bc2b:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc2e:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc31:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc34:	ff 36                	push   DWORD PTR [esi]
c000bc36:	e8 69 ad 01 00       	call   c00269a4 <__subdf3>
c000bc3b:	83 c4 18             	add    esp,0x18
c000bc3e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc42:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc46:	52                   	push   edx
c000bc47:	50                   	push   eax
c000bc48:	e8 e3 b7 01 00       	call   c0027430 <fabs>
c000bc4d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc55:	83 c4 10             	add    esp,0x10
c000bc58:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc5d:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc6a:	e8 12 b6 01 00       	call   c0027281 <__gtdf2>
c000bc6f:	83 c4 10             	add    esp,0x10
c000bc72:	85 c0                	test   eax,eax
c000bc74:	0f 8e 9b 00 00 00    	jle    c000bd15 <sinc_multichan_vari_process+0x4bc>
c000bc7a:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc7c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc7f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc83:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc87:	52                   	push   edx
c000bc88:	50                   	push   eax
c000bc89:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc8c:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc8f:	e8 10 ad 01 00       	call   c00269a4 <__subdf3>
c000bc94:	59                   	pop    ecx
c000bc95:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc99:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc9d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bca0:	e8 8e b3 01 00       	call   c0027033 <__floatsidf>
c000bca5:	83 c4 10             	add    esp,0x10
c000bca8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcb0:	52                   	push   edx
c000bcb1:	50                   	push   eax
c000bcb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcba:	e8 11 ad 01 00       	call   c00269d0 <__muldf3>
c000bcbf:	5d                   	pop    ebp
c000bcc0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bcc4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bcc8:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bccb:	e8 63 b3 01 00       	call   c0027033 <__floatsidf>
c000bcd0:	83 c4 10             	add    esp,0x10
c000bcd3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcd7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcdb:	52                   	push   edx
c000bcdc:	50                   	push   eax
c000bcdd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bce1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bce5:	e8 ca af 01 00       	call   c0026cb4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcf1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcfd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd05:	e8 49 a6 01 00       	call   c0026353 <__adddf3>
c000bd0a:	83 c4 10             	add    esp,0x10
c000bd0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd11:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bd15:	83 ec 0c             	sub    esp,0xc
c000bd18:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd1b:	e8 13 b3 01 00       	call   c0027033 <__floatsidf>
c000bd20:	83 c4 10             	add    esp,0x10
c000bd23:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd27:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd3b:	e8 5f b5 01 00       	call   c002729f <__ltdf2>
c000bd40:	83 c4 10             	add    esp,0x10
c000bd43:	85 c0                	test   eax,eax
c000bd45:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd49:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd4d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd51:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd55:	78 10                	js     c000bd67 <sinc_multichan_vari_process+0x50e>
c000bd57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd5b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd5f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd63:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd67:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd77:	e8 54 ac 01 00       	call   c00269d0 <__muldf3>
c000bd7c:	59                   	pop    ecx
c000bd7d:	5d                   	pop    ebp
c000bd7e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd82:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd8e:	e8 25 f9 ff ff       	call   c000b6b8 <double_to_fp>
c000bd93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd97:	89 c5                	mov    ebp,eax
c000bd99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd9d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bda1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bda5:	e8 26 ac 01 00       	call   c00269d0 <__muldf3>
c000bdaa:	83 c4 18             	add    esp,0x18
c000bdad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdb5:	52                   	push   edx
c000bdb6:	50                   	push   eax
c000bdb7:	e8 fc f8 ff ff       	call   c000b6b8 <double_to_fp>
c000bdbc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bdbf:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bdc3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bdc6:	8d 04 90             	lea    eax,[eax+edx*4]
c000bdc9:	50                   	push   eax
c000bdca:	50                   	push   eax
c000bdcb:	50                   	push   eax
c000bdcc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bdcf:	e8 5f b2 01 00       	call   c0027033 <__floatsidf>
c000bdd4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bdd8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bddc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bde8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdec:	e8 c3 ae 01 00       	call   c0026cb4 <__divdf3>
c000bdf1:	83 c4 1c             	add    esp,0x1c
c000bdf4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdf8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdfc:	52                   	push   edx
c000bdfd:	89 ea                	mov    edx,ebp
c000bdff:	50                   	push   eax
c000be00:	89 d8                	mov    eax,ebx
c000be02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be05:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be09:	e8 69 ed ff ff       	call   c000ab77 <calc_output_multi>
c000be0e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be11:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be14:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be24:	e8 8b ae 01 00       	call   c0026cb4 <__divdf3>
c000be29:	83 c4 10             	add    esp,0x10
c000be2c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000be30:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000be34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be44:	e8 0a a5 01 00       	call   c0026353 <__adddf3>
c000be49:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be4d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be51:	83 c4 28             	add    esp,0x28
c000be54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5c:	e8 ef b5 01 00       	call   c0027450 <lrint>
c000be61:	83 ec 0c             	sub    esp,0xc
c000be64:	50                   	push   eax
c000be65:	e8 c9 b1 01 00       	call   c0027033 <__floatsidf>
c000be6a:	83 c4 10             	add    esp,0x10
c000be6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be75:	52                   	push   edx
c000be76:	50                   	push   eax
c000be77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be7f:	e8 20 ab 01 00       	call   c00269a4 <__subdf3>
c000be84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be88:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8c:	83 c4 20             	add    esp,0x20
c000be8f:	6a 00                	push   0x0
c000be91:	6a 00                	push   0x0
c000be93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be9b:	e8 ff b3 01 00       	call   c002729f <__ltdf2>
c000bea0:	83 c4 10             	add    esp,0x10
c000bea3:	85 c0                	test   eax,eax
c000bea5:	79 20                	jns    c000bec7 <sinc_multichan_vari_process+0x66e>
c000bea7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beaf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beb7:	e8 97 a4 01 00       	call   c0026353 <__adddf3>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bec3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bec7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000beca:	83 ec 10             	sub    esp,0x10
c000becd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bed1:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bedc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bee0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bee4:	e8 bb aa 01 00       	call   c00269a4 <__subdf3>
c000bee9:	83 c4 18             	add    esp,0x18
c000beec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bef4:	52                   	push   edx
c000bef5:	50                   	push   eax
c000bef6:	e8 55 b5 01 00       	call   c0027450 <lrint>
c000befb:	0f af e8             	imul   ebp,eax
c000befe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bf02:	83 c4 10             	add    esp,0x10
c000bf05:	01 e8                	add    eax,ebp
c000bf07:	99                   	cdq    
c000bf08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bf0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bf0e:	e9 fd fb ff ff       	jmp    c000bb10 <sinc_multichan_vari_process+0x2b7>
c000bf13:	83 c4 4c             	add    esp,0x4c
c000bf16:	89 d0                	mov    eax,edx
c000bf18:	5b                   	pop    ebx
c000bf19:	5e                   	pop    esi
c000bf1a:	5f                   	pop    edi
c000bf1b:	5d                   	pop    ebp
c000bf1c:	c3                   	ret    

c000bf1d <sinc_hex_vari_process>:
c000bf1d:	55                   	push   ebp
c000bf1e:	ba 05 00 00 00       	mov    edx,0x5
c000bf23:	57                   	push   edi
c000bf24:	56                   	push   esi
c000bf25:	53                   	push   ebx
c000bf26:	83 ec 4c             	sub    esp,0x4c
c000bf29:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf2d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf31:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf34:	85 db                	test   ebx,ebx
c000bf36:	0f 84 9c 06 00 00    	je     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bf3c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf3f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf42:	0f af c7             	imul   eax,edi
c000bf45:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf48:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf4b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf52:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf59:	0f af c7             	imul   eax,edi
c000bf5c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf5f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf62:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf69:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf6d:	68 00 00 70 3f       	push   0x3f700000
c000bf72:	6a 00                	push   0x0
c000bf74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf7c:	e8 1e b3 01 00       	call   c002729f <__ltdf2>
c000bf81:	83 c4 10             	add    esp,0x10
c000bf84:	ba 16 00 00 00       	mov    edx,0x16
c000bf89:	85 c0                	test   eax,eax
c000bf8b:	0f 88 47 06 00 00    	js     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bf91:	68 00 00 70 40       	push   0x40700000
c000bf96:	6a 00                	push   0x0
c000bf98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfa0:	e8 dc b2 01 00       	call   c0027281 <__gtdf2>
c000bfa5:	83 c4 10             	add    esp,0x10
c000bfa8:	ba 16 00 00 00       	mov    edx,0x16
c000bfad:	85 c0                	test   eax,eax
c000bfaf:	0f 8f 23 06 00 00    	jg     c000c5d8 <sinc_hex_vari_process+0x6bb>
c000bfb5:	83 ec 0c             	sub    esp,0xc
c000bfb8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bfbb:	e8 73 b0 01 00       	call   c0027033 <__floatsidf>
c000bfc0:	83 c4 10             	add    esp,0x10
c000bfc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfc7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfcb:	68 00 00 00 40       	push   0x40000000
c000bfd0:	6a 00                	push   0x0
c000bfd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfda:	e8 74 a3 01 00       	call   c0026353 <__adddf3>
c000bfdf:	59                   	pop    ecx
c000bfe0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfe4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfe8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfeb:	e8 43 b0 01 00       	call   c0027033 <__floatsidf>
c000bff0:	83 c4 10             	add    esp,0x10
c000bff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bffb:	52                   	push   edx
c000bffc:	50                   	push   eax
c000bffd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c005:	e8 aa ac 01 00       	call   c0026cb4 <__divdf3>
c000c00a:	83 c4 10             	add    esp,0x10
c000c00d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c011:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c015:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c018:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c01b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c01f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c023:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c027:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c033:	e8 49 b2 01 00       	call   c0027281 <__gtdf2>
c000c038:	83 c4 10             	add    esp,0x10
c000c03b:	85 c0                	test   eax,eax
c000c03d:	7e 2d                	jle    c000c06c <sinc_hex_vari_process+0x14f>
c000c03f:	68 00 00 f0 3f       	push   0x3ff00000
c000c044:	6a 00                	push   0x0
c000c046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c04e:	e8 4c b2 01 00       	call   c002729f <__ltdf2>
c000c053:	83 c4 10             	add    esp,0x10
c000c056:	85 c0                	test   eax,eax
c000c058:	79 4d                	jns    c000c0a7 <sinc_hex_vari_process+0x18a>
c000c05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c05e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c062:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c066:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c06a:	eb 1b                	jmp    c000c087 <sinc_hex_vari_process+0x16a>
c000c06c:	68 00 00 f0 3f       	push   0x3ff00000
c000c071:	6a 00                	push   0x0
c000c073:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c077:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c07b:	e8 1f b2 01 00       	call   c002729f <__ltdf2>
c000c080:	83 c4 10             	add    esp,0x10
c000c083:	85 c0                	test   eax,eax
c000c085:	79 20                	jns    c000c0a7 <sinc_hex_vari_process+0x18a>
c000c087:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c08b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c08f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c093:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c097:	e8 18 ac 01 00       	call   c0026cb4 <__divdf3>
c000c09c:	83 c4 10             	add    esp,0x10
c000c09f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0a7:	50                   	push   eax
c000c0a8:	50                   	push   eax
c000c0a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0b1:	e8 9a b3 01 00       	call   c0027450 <lrint>
c000c0b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c0b9:	40                   	inc    eax
c000c0ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0be:	0f af c7             	imul   eax,edi
c000c0c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c0c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c0c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0cc:	58                   	pop    eax
c000c0cd:	5a                   	pop    edx
c000c0ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c0d6:	e8 75 b3 01 00       	call   c0027450 <lrint>
c000c0db:	83 ec 0c             	sub    esp,0xc
c000c0de:	50                   	push   eax
c000c0df:	e8 4f af 01 00       	call   c0027033 <__floatsidf>
c000c0e4:	83 c4 10             	add    esp,0x10
c000c0e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0ef:	52                   	push   edx
c000c0f0:	50                   	push   eax
c000c0f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0f9:	e8 a6 a8 01 00       	call   c00269a4 <__subdf3>
c000c0fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c102:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c106:	83 c4 20             	add    esp,0x20
c000c109:	6a 00                	push   0x0
c000c10b:	6a 00                	push   0x0
c000c10d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c111:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c115:	e8 85 b1 01 00       	call   c002729f <__ltdf2>
c000c11a:	83 c4 10             	add    esp,0x10
c000c11d:	85 c0                	test   eax,eax
c000c11f:	79 1f                	jns    c000c140 <sinc_hex_vari_process+0x223>
c000c121:	68 00 00 f0 3f       	push   0x3ff00000
c000c126:	6a 00                	push   0x0
c000c128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c12c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c130:	e8 1e a2 01 00       	call   c0026353 <__adddf3>
c000c135:	83 c4 10             	add    esp,0x10
c000c138:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c13c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c140:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c143:	83 ec 10             	sub    esp,0x10
c000c146:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c14a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c14d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c159:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c15d:	e8 42 a8 01 00       	call   c00269a4 <__subdf3>
c000c162:	83 c4 18             	add    esp,0x18
c000c165:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c169:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c16d:	52                   	push   edx
c000c16e:	50                   	push   eax
c000c16f:	e8 dc b2 01 00       	call   c0027450 <lrint>
c000c174:	0f af f8             	imul   edi,eax
c000c177:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c17b:	01 f8                	add    eax,edi
c000c17d:	99                   	cdq    
c000c17e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c181:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c188:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c18c:	68 00 00 f0 3f       	push   0x3ff00000
c000c191:	6a 00                	push   0x0
c000c193:	e8 1c ab 01 00       	call   c0026cb4 <__divdf3>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c19f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c1a3:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c1a8:	68 23 42 92 0c       	push   0xc924223
c000c1ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1b5:	e8 99 a1 01 00       	call   c0026353 <__adddf3>
c000c1ba:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c1be:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c1c2:	83 c4 20             	add    esp,0x20
c000c1c5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c1cd:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c1d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c1d8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1db:	7d 50                	jge    c000c22d <sinc_hex_vari_process+0x310>
c000c1dd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e3:	01 c8                	add    eax,ecx
c000c1e5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1e8:	99                   	cdq    
c000c1e9:	f7 f9                	idiv   ecx
c000c1eb:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1ef:	7d 0c                	jge    c000c1fd <sinc_hex_vari_process+0x2e0>
c000c1f1:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1f4:	85 ff                	test   edi,edi
c000c1f6:	79 6c                	jns    c000c264 <sinc_hex_vari_process+0x347>
c000c1f8:	e9 e7 00 00 00       	jmp    c000c2e4 <sinc_hex_vari_process+0x3c7>
c000c1fd:	50                   	push   eax
c000c1fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c202:	56                   	push   esi
c000c203:	53                   	push   ebx
c000c204:	e8 d6 f4 ff ff       	call   c000b6df <prepare_data>
c000c209:	83 c4 10             	add    esp,0x10
c000c20c:	89 c2                	mov    edx,eax
c000c20e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c211:	85 c0                	test   eax,eax
c000c213:	0f 85 bf 03 00 00    	jne    c000c5d8 <sinc_hex_vari_process+0x6bb>
c000c219:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c21c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c21f:	01 c8                	add    eax,ecx
c000c221:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c224:	99                   	cdq    
c000c225:	f7 f9                	idiv   ecx
c000c227:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c22b:	7c c4                	jl     c000c1f1 <sinc_hex_vari_process+0x2d4>
c000c22d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c231:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c235:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c238:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c23b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c243:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c246:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c249:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c24c:	99                   	cdq    
c000c24d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c250:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c253:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c256:	99                   	cdq    
c000c257:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c25a:	31 d2                	xor    edx,edx
c000c25c:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c25f:	e9 74 03 00 00       	jmp    c000c5d8 <sinc_hex_vari_process+0x6bb>
c000c264:	83 ec 0c             	sub    esp,0xc
c000c267:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c26a:	e8 c4 ad 01 00       	call   c0027033 <__floatsidf>
c000c26f:	83 c4 10             	add    esp,0x10
c000c272:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c276:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c27a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c27e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c282:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c286:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c28a:	e8 c4 a0 01 00       	call   c0026353 <__adddf3>
c000c28f:	83 c4 10             	add    esp,0x10
c000c292:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c296:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c29a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c29e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2aa:	e8 a4 a0 01 00       	call   c0026353 <__adddf3>
c000c2af:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c2b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2ba:	e8 74 ad 01 00       	call   c0027033 <__floatsidf>
c000c2bf:	83 c4 10             	add    esp,0x10
c000c2c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2ca:	52                   	push   edx
c000c2cb:	50                   	push   eax
c000c2cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2d4:	e8 c4 af 01 00       	call   c002729d <__gedf2>
c000c2d9:	83 c4 10             	add    esp,0x10
c000c2dc:	85 c0                	test   eax,eax
c000c2de:	0f 89 49 ff ff ff    	jns    c000c22d <sinc_hex_vari_process+0x310>
c000c2e4:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2e8:	0f 8e ef 00 00 00    	jle    c000c3dd <sinc_hex_vari_process+0x4c0>
c000c2ee:	83 ec 10             	sub    esp,0x10
c000c2f1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2f4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2f7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2fa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2fd:	e8 a2 a6 01 00       	call   c00269a4 <__subdf3>
c000c302:	83 c4 18             	add    esp,0x18
c000c305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c30d:	52                   	push   edx
c000c30e:	50                   	push   eax
c000c30f:	e8 1c b1 01 00       	call   c0027430 <fabs>
c000c314:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c318:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c31c:	83 c4 10             	add    esp,0x10
c000c31f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c324:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c329:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c32d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c331:	e8 4b af 01 00       	call   c0027281 <__gtdf2>
c000c336:	83 c4 10             	add    esp,0x10
c000c339:	85 c0                	test   eax,eax
c000c33b:	0f 8e 9c 00 00 00    	jle    c000c3dd <sinc_hex_vari_process+0x4c0>
c000c341:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c344:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c347:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c34b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c34f:	52                   	push   edx
c000c350:	50                   	push   eax
c000c351:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c354:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c357:	e8 48 a6 01 00       	call   c00269a4 <__subdf3>
c000c35c:	59                   	pop    ecx
c000c35d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c361:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c365:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c368:	e8 c6 ac 01 00       	call   c0027033 <__floatsidf>
c000c36d:	83 c4 10             	add    esp,0x10
c000c370:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c374:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c378:	52                   	push   edx
c000c379:	50                   	push   eax
c000c37a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c37e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c382:	e8 49 a6 01 00       	call   c00269d0 <__muldf3>
c000c387:	5f                   	pop    edi
c000c388:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c38c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c390:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c393:	e8 9b ac 01 00       	call   c0027033 <__floatsidf>
c000c398:	83 c4 10             	add    esp,0x10
c000c39b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c39f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3a3:	52                   	push   edx
c000c3a4:	50                   	push   eax
c000c3a5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3ad:	e8 02 a9 01 00       	call   c0026cb4 <__divdf3>
c000c3b2:	83 c4 10             	add    esp,0x10
c000c3b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3b9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c3c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3cd:	e8 81 9f 01 00       	call   c0026353 <__adddf3>
c000c3d2:	83 c4 10             	add    esp,0x10
c000c3d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3d9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3dd:	83 ec 0c             	sub    esp,0xc
c000c3e0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3e3:	e8 4b ac 01 00       	call   c0027033 <__floatsidf>
c000c3e8:	83 c4 10             	add    esp,0x10
c000c3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c403:	e8 97 ae 01 00       	call   c002729f <__ltdf2>
c000c408:	83 c4 10             	add    esp,0x10
c000c40b:	85 c0                	test   eax,eax
c000c40d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c411:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c415:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c419:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c41d:	78 10                	js     c000c42f <sinc_hex_vari_process+0x512>
c000c41f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c423:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c427:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c42b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c42f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c433:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c437:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c43b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c43f:	e8 8c a5 01 00       	call   c00269d0 <__muldf3>
c000c444:	59                   	pop    ecx
c000c445:	5f                   	pop    edi
c000c446:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c44a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c44e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c452:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c456:	e8 5d f2 ff ff       	call   c000b6b8 <double_to_fp>
c000c45b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c45f:	89 c7                	mov    edi,eax
c000c461:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c465:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c469:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c46d:	e8 5e a5 01 00       	call   c00269d0 <__muldf3>
c000c472:	83 c4 18             	add    esp,0x18
c000c475:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c479:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c47d:	52                   	push   edx
c000c47e:	50                   	push   eax
c000c47f:	e8 34 f2 ff ff       	call   c000b6b8 <double_to_fp>
c000c484:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c487:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c48b:	83 c4 0c             	add    esp,0xc
c000c48e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c491:	8d 04 90             	lea    eax,[eax+edx*4]
c000c494:	50                   	push   eax
c000c495:	50                   	push   eax
c000c496:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c499:	e8 95 ab 01 00       	call   c0027033 <__floatsidf>
c000c49e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c4a2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4b6:	e8 f9 a7 01 00       	call   c0026cb4 <__divdf3>
c000c4bb:	83 c4 18             	add    esp,0x18
c000c4be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c6:	52                   	push   edx
c000c4c7:	89 fa                	mov    edx,edi
c000c4c9:	50                   	push   eax
c000c4ca:	89 d8                	mov    eax,ebx
c000c4cc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c4d0:	e8 50 de ff ff       	call   c000a325 <calc_output_hex>
c000c4d5:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4e9:	e8 c6 a7 01 00       	call   c0026cb4 <__divdf3>
c000c4ee:	83 c4 10             	add    esp,0x10
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c501:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c505:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c509:	e8 45 9e 01 00       	call   c0026353 <__adddf3>
c000c50e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c512:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c516:	83 c4 18             	add    esp,0x18
c000c519:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c51d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c521:	e8 2a af 01 00       	call   c0027450 <lrint>
c000c526:	83 ec 0c             	sub    esp,0xc
c000c529:	50                   	push   eax
c000c52a:	e8 04 ab 01 00       	call   c0027033 <__floatsidf>
c000c52f:	83 c4 10             	add    esp,0x10
c000c532:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c536:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c53a:	52                   	push   edx
c000c53b:	50                   	push   eax
c000c53c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c540:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c544:	e8 5b a4 01 00       	call   c00269a4 <__subdf3>
c000c549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c551:	83 c4 20             	add    esp,0x20
c000c554:	6a 00                	push   0x0
c000c556:	6a 00                	push   0x0
c000c558:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c55c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c560:	e8 3a ad 01 00       	call   c002729f <__ltdf2>
c000c565:	83 c4 10             	add    esp,0x10
c000c568:	85 c0                	test   eax,eax
c000c56a:	79 20                	jns    c000c58c <sinc_hex_vari_process+0x66f>
c000c56c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c570:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c574:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c578:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c57c:	e8 d2 9d 01 00       	call   c0026353 <__adddf3>
c000c581:	83 c4 10             	add    esp,0x10
c000c584:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c588:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c58c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c58f:	83 ec 10             	sub    esp,0x10
c000c592:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c596:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c59d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5a5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5a9:	e8 f6 a3 01 00       	call   c00269a4 <__subdf3>
c000c5ae:	83 c4 18             	add    esp,0x18
c000c5b1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b9:	52                   	push   edx
c000c5ba:	50                   	push   eax
c000c5bb:	e8 90 ae 01 00       	call   c0027450 <lrint>
c000c5c0:	0f af f8             	imul   edi,eax
c000c5c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c5c7:	83 c4 10             	add    esp,0x10
c000c5ca:	01 f8                	add    eax,edi
c000c5cc:	99                   	cdq    
c000c5cd:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c5d0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c5d3:	e9 fd fb ff ff       	jmp    c000c1d5 <sinc_hex_vari_process+0x2b8>
c000c5d8:	83 c4 4c             	add    esp,0x4c
c000c5db:	89 d0                	mov    eax,edx
c000c5dd:	5b                   	pop    ebx
c000c5de:	5e                   	pop    esi
c000c5df:	5f                   	pop    edi
c000c5e0:	5d                   	pop    ebp
c000c5e1:	c3                   	ret    

c000c5e2 <sinc_quad_vari_process>:
c000c5e2:	55                   	push   ebp
c000c5e3:	ba 05 00 00 00       	mov    edx,0x5
c000c5e8:	57                   	push   edi
c000c5e9:	56                   	push   esi
c000c5ea:	53                   	push   ebx
c000c5eb:	83 ec 4c             	sub    esp,0x4c
c000c5ee:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5f2:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5f6:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5f9:	85 db                	test   ebx,ebx
c000c5fb:	0f 84 9c 06 00 00    	je     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c601:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c604:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c607:	0f af c7             	imul   eax,edi
c000c60a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c60d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c610:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c617:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c61e:	0f af c7             	imul   eax,edi
c000c621:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c624:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c627:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c62a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c62e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c632:	68 00 00 70 3f       	push   0x3f700000
c000c637:	6a 00                	push   0x0
c000c639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c641:	e8 59 ac 01 00       	call   c002729f <__ltdf2>
c000c646:	83 c4 10             	add    esp,0x10
c000c649:	ba 16 00 00 00       	mov    edx,0x16
c000c64e:	85 c0                	test   eax,eax
c000c650:	0f 88 47 06 00 00    	js     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c656:	68 00 00 70 40       	push   0x40700000
c000c65b:	6a 00                	push   0x0
c000c65d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c661:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c665:	e8 17 ac 01 00       	call   c0027281 <__gtdf2>
c000c66a:	83 c4 10             	add    esp,0x10
c000c66d:	ba 16 00 00 00       	mov    edx,0x16
c000c672:	85 c0                	test   eax,eax
c000c674:	0f 8f 23 06 00 00    	jg     c000cc9d <sinc_quad_vari_process+0x6bb>
c000c67a:	83 ec 0c             	sub    esp,0xc
c000c67d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c680:	e8 ae a9 01 00       	call   c0027033 <__floatsidf>
c000c685:	83 c4 10             	add    esp,0x10
c000c688:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c68c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c690:	68 00 00 00 40       	push   0x40000000
c000c695:	6a 00                	push   0x0
c000c697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c69f:	e8 af 9c 01 00       	call   c0026353 <__adddf3>
c000c6a4:	59                   	pop    ecx
c000c6a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6a9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 7e a9 01 00       	call   c0027033 <__floatsidf>
c000c6b5:	83 c4 10             	add    esp,0x10
c000c6b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6c0:	52                   	push   edx
c000c6c1:	50                   	push   eax
c000c6c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ca:	e8 e5 a5 01 00       	call   c0026cb4 <__divdf3>
c000c6cf:	83 c4 10             	add    esp,0x10
c000c6d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6da:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6dd:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6f8:	e8 84 ab 01 00       	call   c0027281 <__gtdf2>
c000c6fd:	83 c4 10             	add    esp,0x10
c000c700:	85 c0                	test   eax,eax
c000c702:	7e 2d                	jle    c000c731 <sinc_quad_vari_process+0x14f>
c000c704:	68 00 00 f0 3f       	push   0x3ff00000
c000c709:	6a 00                	push   0x0
c000c70b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c70f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c713:	e8 87 ab 01 00       	call   c002729f <__ltdf2>
c000c718:	83 c4 10             	add    esp,0x10
c000c71b:	85 c0                	test   eax,eax
c000c71d:	79 4d                	jns    c000c76c <sinc_quad_vari_process+0x18a>
c000c71f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c723:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c727:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c72b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c72f:	eb 1b                	jmp    c000c74c <sinc_quad_vari_process+0x16a>
c000c731:	68 00 00 f0 3f       	push   0x3ff00000
c000c736:	6a 00                	push   0x0
c000c738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c740:	e8 5a ab 01 00       	call   c002729f <__ltdf2>
c000c745:	83 c4 10             	add    esp,0x10
c000c748:	85 c0                	test   eax,eax
c000c74a:	79 20                	jns    c000c76c <sinc_quad_vari_process+0x18a>
c000c74c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c750:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c754:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c758:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75c:	e8 53 a5 01 00       	call   c0026cb4 <__divdf3>
c000c761:	83 c4 10             	add    esp,0x10
c000c764:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c768:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c76c:	50                   	push   eax
c000c76d:	50                   	push   eax
c000c76e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c772:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c776:	e8 d5 ac 01 00       	call   c0027450 <lrint>
c000c77b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c77e:	40                   	inc    eax
c000c77f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c783:	0f af c7             	imul   eax,edi
c000c786:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c78a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c791:	58                   	pop    eax
c000c792:	5a                   	pop    edx
c000c793:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c797:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c79b:	e8 b0 ac 01 00       	call   c0027450 <lrint>
c000c7a0:	83 ec 0c             	sub    esp,0xc
c000c7a3:	50                   	push   eax
c000c7a4:	e8 8a a8 01 00       	call   c0027033 <__floatsidf>
c000c7a9:	83 c4 10             	add    esp,0x10
c000c7ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7b4:	52                   	push   edx
c000c7b5:	50                   	push   eax
c000c7b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7be:	e8 e1 a1 01 00       	call   c00269a4 <__subdf3>
c000c7c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cb:	83 c4 20             	add    esp,0x20
c000c7ce:	6a 00                	push   0x0
c000c7d0:	6a 00                	push   0x0
c000c7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7da:	e8 c0 aa 01 00       	call   c002729f <__ltdf2>
c000c7df:	83 c4 10             	add    esp,0x10
c000c7e2:	85 c0                	test   eax,eax
c000c7e4:	79 1f                	jns    c000c805 <sinc_quad_vari_process+0x223>
c000c7e6:	68 00 00 f0 3f       	push   0x3ff00000
c000c7eb:	6a 00                	push   0x0
c000c7ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7f5:	e8 59 9b 01 00       	call   c0026353 <__adddf3>
c000c7fa:	83 c4 10             	add    esp,0x10
c000c7fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c801:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c805:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c808:	83 ec 10             	sub    esp,0x10
c000c80b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c80f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c81e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c822:	e8 7d a1 01 00       	call   c00269a4 <__subdf3>
c000c827:	83 c4 18             	add    esp,0x18
c000c82a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c82e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c832:	52                   	push   edx
c000c833:	50                   	push   eax
c000c834:	e8 17 ac 01 00       	call   c0027450 <lrint>
c000c839:	0f af f8             	imul   edi,eax
c000c83c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c840:	01 f8                	add    eax,edi
c000c842:	99                   	cdq    
c000c843:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c846:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c849:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c84d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c851:	68 00 00 f0 3f       	push   0x3ff00000
c000c856:	6a 00                	push   0x0
c000c858:	e8 57 a4 01 00       	call   c0026cb4 <__divdf3>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c864:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c868:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c86d:	68 23 42 92 0c       	push   0xc924223
c000c872:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c876:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c87a:	e8 d4 9a 01 00       	call   c0026353 <__adddf3>
c000c87f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c883:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c887:	83 c4 20             	add    esp,0x20
c000c88a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c892:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c89a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c89d:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c8a0:	7d 50                	jge    c000c8f2 <sinc_quad_vari_process+0x310>
c000c8a2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8a8:	01 c8                	add    eax,ecx
c000c8aa:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8ad:	99                   	cdq    
c000c8ae:	f7 f9                	idiv   ecx
c000c8b0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b4:	7d 0c                	jge    c000c8c2 <sinc_quad_vari_process+0x2e0>
c000c8b6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c8b9:	85 ff                	test   edi,edi
c000c8bb:	79 6c                	jns    c000c929 <sinc_quad_vari_process+0x347>
c000c8bd:	e9 e7 00 00 00       	jmp    c000c9a9 <sinc_quad_vari_process+0x3c7>
c000c8c2:	50                   	push   eax
c000c8c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8c7:	56                   	push   esi
c000c8c8:	53                   	push   ebx
c000c8c9:	e8 11 ee ff ff       	call   c000b6df <prepare_data>
c000c8ce:	83 c4 10             	add    esp,0x10
c000c8d1:	89 c2                	mov    edx,eax
c000c8d3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c8d6:	85 c0                	test   eax,eax
c000c8d8:	0f 85 bf 03 00 00    	jne    c000cc9d <sinc_quad_vari_process+0x6bb>
c000c8de:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8e1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8e4:	01 c8                	add    eax,ecx
c000c8e6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8e9:	99                   	cdq    
c000c8ea:	f7 f9                	idiv   ecx
c000c8ec:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8f0:	7c c4                	jl     c000c8b6 <sinc_quad_vari_process+0x2d4>
c000c8f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8fa:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8fd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c904:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c908:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c90b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c90e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c911:	99                   	cdq    
c000c912:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c915:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c918:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c91b:	99                   	cdq    
c000c91c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c91f:	31 d2                	xor    edx,edx
c000c921:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c924:	e9 74 03 00 00       	jmp    c000cc9d <sinc_quad_vari_process+0x6bb>
c000c929:	83 ec 0c             	sub    esp,0xc
c000c92c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c92f:	e8 ff a6 01 00       	call   c0027033 <__floatsidf>
c000c934:	83 c4 10             	add    esp,0x10
c000c937:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c93b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c93f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c943:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c947:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c94f:	e8 ff 99 01 00       	call   c0026353 <__adddf3>
c000c954:	83 c4 10             	add    esp,0x10
c000c957:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c95b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c963:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c967:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c96b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c96f:	e8 df 99 01 00       	call   c0026353 <__adddf3>
c000c974:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c977:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c97b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c97f:	e8 af a6 01 00       	call   c0027033 <__floatsidf>
c000c984:	83 c4 10             	add    esp,0x10
c000c987:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c98b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c98f:	52                   	push   edx
c000c990:	50                   	push   eax
c000c991:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c995:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c999:	e8 ff a8 01 00       	call   c002729d <__gedf2>
c000c99e:	83 c4 10             	add    esp,0x10
c000c9a1:	85 c0                	test   eax,eax
c000c9a3:	0f 89 49 ff ff ff    	jns    c000c8f2 <sinc_quad_vari_process+0x310>
c000c9a9:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c9ad:	0f 8e ef 00 00 00    	jle    c000caa2 <sinc_quad_vari_process+0x4c0>
c000c9b3:	83 ec 10             	sub    esp,0x10
c000c9b6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9b9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9bc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c9bf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c9c2:	e8 dd 9f 01 00       	call   c00269a4 <__subdf3>
c000c9c7:	83 c4 18             	add    esp,0x18
c000c9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9d2:	52                   	push   edx
c000c9d3:	50                   	push   eax
c000c9d4:	e8 57 aa 01 00       	call   c0027430 <fabs>
c000c9d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9e1:	83 c4 10             	add    esp,0x10
c000c9e4:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9e9:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9f6:	e8 86 a8 01 00       	call   c0027281 <__gtdf2>
c000c9fb:	83 c4 10             	add    esp,0x10
c000c9fe:	85 c0                	test   eax,eax
c000ca00:	0f 8e 9c 00 00 00    	jle    c000caa2 <sinc_quad_vari_process+0x4c0>
c000ca06:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ca09:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ca0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca10:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca14:	52                   	push   edx
c000ca15:	50                   	push   eax
c000ca16:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ca19:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ca1c:	e8 83 9f 01 00       	call   c00269a4 <__subdf3>
c000ca21:	59                   	pop    ecx
c000ca22:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca26:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca2a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ca2d:	e8 01 a6 01 00       	call   c0027033 <__floatsidf>
c000ca32:	83 c4 10             	add    esp,0x10
c000ca35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca3d:	52                   	push   edx
c000ca3e:	50                   	push   eax
c000ca3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca47:	e8 84 9f 01 00       	call   c00269d0 <__muldf3>
c000ca4c:	5f                   	pop    edi
c000ca4d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca51:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca55:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca58:	e8 d6 a5 01 00       	call   c0027033 <__floatsidf>
c000ca5d:	83 c4 10             	add    esp,0x10
c000ca60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca68:	52                   	push   edx
c000ca69:	50                   	push   eax
c000ca6a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca72:	e8 3d a2 01 00       	call   c0026cb4 <__divdf3>
c000ca77:	83 c4 10             	add    esp,0x10
c000ca7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca7e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca92:	e8 bc 98 01 00       	call   c0026353 <__adddf3>
c000ca97:	83 c4 10             	add    esp,0x10
c000ca9a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca9e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000caa2:	83 ec 0c             	sub    esp,0xc
c000caa5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000caa8:	e8 86 a5 01 00       	call   c0027033 <__floatsidf>
c000caad:	83 c4 10             	add    esp,0x10
c000cab0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cab4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cabc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac8:	e8 d2 a7 01 00       	call   c002729f <__ltdf2>
c000cacd:	83 c4 10             	add    esp,0x10
c000cad0:	85 c0                	test   eax,eax
c000cad2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cad6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cada:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cade:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cae2:	78 10                	js     c000caf4 <sinc_quad_vari_process+0x512>
c000cae4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cae8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000caec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000caf0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000caf4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cafc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb04:	e8 c7 9e 01 00       	call   c00269d0 <__muldf3>
c000cb09:	59                   	pop    ecx
c000cb0a:	5f                   	pop    edi
c000cb0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb0f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb13:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb1b:	e8 98 eb ff ff       	call   c000b6b8 <double_to_fp>
c000cb20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb24:	89 c7                	mov    edi,eax
c000cb26:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb32:	e8 99 9e 01 00       	call   c00269d0 <__muldf3>
c000cb37:	83 c4 18             	add    esp,0x18
c000cb3a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb3e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb42:	52                   	push   edx
c000cb43:	50                   	push   eax
c000cb44:	e8 6f eb ff ff       	call   c000b6b8 <double_to_fp>
c000cb49:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb4c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb50:	83 c4 0c             	add    esp,0xc
c000cb53:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb56:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb59:	50                   	push   eax
c000cb5a:	50                   	push   eax
c000cb5b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb5e:	e8 d0 a4 01 00       	call   c0027033 <__floatsidf>
c000cb63:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb67:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb7b:	e8 34 a1 01 00       	call   c0026cb4 <__divdf3>
c000cb80:	83 c4 18             	add    esp,0x18
c000cb83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb87:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb8b:	52                   	push   edx
c000cb8c:	89 fa                	mov    edx,edi
c000cb8e:	50                   	push   eax
c000cb8f:	89 d8                	mov    eax,ebx
c000cb91:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb95:	e8 a5 d1 ff ff       	call   c0009d3f <calc_output_quad>
c000cb9a:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb9e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cba2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cba6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cbae:	e8 01 a1 01 00       	call   c0026cb4 <__divdf3>
c000cbb3:	83 c4 10             	add    esp,0x10
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbc6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbce:	e8 80 97 01 00       	call   c0026353 <__adddf3>
c000cbd3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cbd7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cbdb:	83 c4 18             	add    esp,0x18
c000cbde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe6:	e8 65 a8 01 00       	call   c0027450 <lrint>
c000cbeb:	83 ec 0c             	sub    esp,0xc
c000cbee:	50                   	push   eax
c000cbef:	e8 3f a4 01 00       	call   c0027033 <__floatsidf>
c000cbf4:	83 c4 10             	add    esp,0x10
c000cbf7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbfb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbff:	52                   	push   edx
c000cc00:	50                   	push   eax
c000cc01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc09:	e8 96 9d 01 00       	call   c00269a4 <__subdf3>
c000cc0e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc12:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc16:	83 c4 20             	add    esp,0x20
c000cc19:	6a 00                	push   0x0
c000cc1b:	6a 00                	push   0x0
c000cc1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc25:	e8 75 a6 01 00       	call   c002729f <__ltdf2>
c000cc2a:	83 c4 10             	add    esp,0x10
c000cc2d:	85 c0                	test   eax,eax
c000cc2f:	79 20                	jns    c000cc51 <sinc_quad_vari_process+0x66f>
c000cc31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc41:	e8 0d 97 01 00       	call   c0026353 <__adddf3>
c000cc46:	83 c4 10             	add    esp,0x10
c000cc49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc51:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc54:	83 ec 10             	sub    esp,0x10
c000cc57:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc5b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc6e:	e8 31 9d 01 00       	call   c00269a4 <__subdf3>
c000cc73:	83 c4 18             	add    esp,0x18
c000cc76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7e:	52                   	push   edx
c000cc7f:	50                   	push   eax
c000cc80:	e8 cb a7 01 00       	call   c0027450 <lrint>
c000cc85:	0f af f8             	imul   edi,eax
c000cc88:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc8c:	83 c4 10             	add    esp,0x10
c000cc8f:	01 f8                	add    eax,edi
c000cc91:	99                   	cdq    
c000cc92:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc95:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc98:	e9 fd fb ff ff       	jmp    c000c89a <sinc_quad_vari_process+0x2b8>
c000cc9d:	83 c4 4c             	add    esp,0x4c
c000cca0:	89 d0                	mov    eax,edx
c000cca2:	5b                   	pop    ebx
c000cca3:	5e                   	pop    esi
c000cca4:	5f                   	pop    edi
c000cca5:	5d                   	pop    ebp
c000cca6:	c3                   	ret    

c000cca7 <sinc_stereo_vari_process>:
c000cca7:	55                   	push   ebp
c000cca8:	ba 05 00 00 00       	mov    edx,0x5
c000ccad:	57                   	push   edi
c000ccae:	56                   	push   esi
c000ccaf:	53                   	push   ebx
c000ccb0:	83 ec 4c             	sub    esp,0x4c
c000ccb3:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ccb7:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ccbb:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ccbe:	85 db                	test   ebx,ebx
c000ccc0:	0f 84 9c 06 00 00    	je     c000d362 <sinc_stereo_vari_process+0x6bb>
c000ccc6:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000ccc9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cccc:	0f af c7             	imul   eax,edi
c000cccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ccd2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccd5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ccdc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cce3:	0f af c7             	imul   eax,edi
c000cce6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cce9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccf3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccf7:	68 00 00 70 3f       	push   0x3f700000
c000ccfc:	6a 00                	push   0x0
c000ccfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd06:	e8 94 a5 01 00       	call   c002729f <__ltdf2>
c000cd0b:	83 c4 10             	add    esp,0x10
c000cd0e:	ba 16 00 00 00       	mov    edx,0x16
c000cd13:	85 c0                	test   eax,eax
c000cd15:	0f 88 47 06 00 00    	js     c000d362 <sinc_stereo_vari_process+0x6bb>
c000cd1b:	68 00 00 70 40       	push   0x40700000
c000cd20:	6a 00                	push   0x0
c000cd22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd2a:	e8 52 a5 01 00       	call   c0027281 <__gtdf2>
c000cd2f:	83 c4 10             	add    esp,0x10
c000cd32:	ba 16 00 00 00       	mov    edx,0x16
c000cd37:	85 c0                	test   eax,eax
c000cd39:	0f 8f 23 06 00 00    	jg     c000d362 <sinc_stereo_vari_process+0x6bb>
c000cd3f:	83 ec 0c             	sub    esp,0xc
c000cd42:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd45:	e8 e9 a2 01 00       	call   c0027033 <__floatsidf>
c000cd4a:	83 c4 10             	add    esp,0x10
c000cd4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd55:	68 00 00 00 40       	push   0x40000000
c000cd5a:	6a 00                	push   0x0
c000cd5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd64:	e8 ea 95 01 00       	call   c0026353 <__adddf3>
c000cd69:	59                   	pop    ecx
c000cd6a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd6e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 b9 a2 01 00       	call   c0027033 <__floatsidf>
c000cd7a:	83 c4 10             	add    esp,0x10
c000cd7d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd81:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd85:	52                   	push   edx
c000cd86:	50                   	push   eax
c000cd87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd8f:	e8 20 9f 01 00       	call   c0026cb4 <__divdf3>
c000cd94:	83 c4 10             	add    esp,0x10
c000cd97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd9f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cda2:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cda5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cda9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdbd:	e8 bf a4 01 00       	call   c0027281 <__gtdf2>
c000cdc2:	83 c4 10             	add    esp,0x10
c000cdc5:	85 c0                	test   eax,eax
c000cdc7:	7e 2d                	jle    c000cdf6 <sinc_stereo_vari_process+0x14f>
c000cdc9:	68 00 00 f0 3f       	push   0x3ff00000
c000cdce:	6a 00                	push   0x0
c000cdd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd8:	e8 c2 a4 01 00       	call   c002729f <__ltdf2>
c000cddd:	83 c4 10             	add    esp,0x10
c000cde0:	85 c0                	test   eax,eax
c000cde2:	79 4d                	jns    c000ce31 <sinc_stereo_vari_process+0x18a>
c000cde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdf0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdf4:	eb 1b                	jmp    c000ce11 <sinc_stereo_vari_process+0x16a>
c000cdf6:	68 00 00 f0 3f       	push   0x3ff00000
c000cdfb:	6a 00                	push   0x0
c000cdfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce05:	e8 95 a4 01 00       	call   c002729f <__ltdf2>
c000ce0a:	83 c4 10             	add    esp,0x10
c000ce0d:	85 c0                	test   eax,eax
c000ce0f:	79 20                	jns    c000ce31 <sinc_stereo_vari_process+0x18a>
c000ce11:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce15:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ce19:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce21:	e8 8e 9e 01 00       	call   c0026cb4 <__divdf3>
c000ce26:	83 c4 10             	add    esp,0x10
c000ce29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce2d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce31:	50                   	push   eax
c000ce32:	50                   	push   eax
c000ce33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce37:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce3b:	e8 10 a6 01 00       	call   c0027450 <lrint>
c000ce40:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce43:	40                   	inc    eax
c000ce44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce48:	0f af c7             	imul   eax,edi
c000ce4b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce52:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce56:	58                   	pop    eax
c000ce57:	5a                   	pop    edx
c000ce58:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce60:	e8 eb a5 01 00       	call   c0027450 <lrint>
c000ce65:	83 ec 0c             	sub    esp,0xc
c000ce68:	50                   	push   eax
c000ce69:	e8 c5 a1 01 00       	call   c0027033 <__floatsidf>
c000ce6e:	83 c4 10             	add    esp,0x10
c000ce71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce79:	52                   	push   edx
c000ce7a:	50                   	push   eax
c000ce7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce83:	e8 1c 9b 01 00       	call   c00269a4 <__subdf3>
c000ce88:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce8c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce90:	83 c4 20             	add    esp,0x20
c000ce93:	6a 00                	push   0x0
c000ce95:	6a 00                	push   0x0
c000ce97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce9f:	e8 fb a3 01 00       	call   c002729f <__ltdf2>
c000cea4:	83 c4 10             	add    esp,0x10
c000cea7:	85 c0                	test   eax,eax
c000cea9:	79 1f                	jns    c000ceca <sinc_stereo_vari_process+0x223>
c000ceab:	68 00 00 f0 3f       	push   0x3ff00000
c000ceb0:	6a 00                	push   0x0
c000ceb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ceba:	e8 94 94 01 00       	call   c0026353 <__adddf3>
c000cebf:	83 c4 10             	add    esp,0x10
c000cec2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cec6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ceca:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cecd:	83 ec 10             	sub    esp,0x10
c000ced0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ced4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ced7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cee3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cee7:	e8 b8 9a 01 00       	call   c00269a4 <__subdf3>
c000ceec:	83 c4 18             	add    esp,0x18
c000ceef:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cef3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cef7:	52                   	push   edx
c000cef8:	50                   	push   eax
c000cef9:	e8 52 a5 01 00       	call   c0027450 <lrint>
c000cefe:	0f af f8             	imul   edi,eax
c000cf01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf05:	01 f8                	add    eax,edi
c000cf07:	99                   	cdq    
c000cf08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cf0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cf0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf16:	68 00 00 f0 3f       	push   0x3ff00000
c000cf1b:	6a 00                	push   0x0
c000cf1d:	e8 92 9d 01 00       	call   c0026cb4 <__divdf3>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf2d:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cf32:	68 23 42 92 0c       	push   0xc924223
c000cf37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf3f:	e8 0f 94 01 00       	call   c0026353 <__adddf3>
c000cf44:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf48:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf4c:	83 c4 20             	add    esp,0x20
c000cf4f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf57:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf5f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf62:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf65:	7d 50                	jge    c000cfb7 <sinc_stereo_vari_process+0x310>
c000cf67:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf6d:	01 c8                	add    eax,ecx
c000cf6f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf72:	99                   	cdq    
c000cf73:	f7 f9                	idiv   ecx
c000cf75:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf79:	7d 0c                	jge    c000cf87 <sinc_stereo_vari_process+0x2e0>
c000cf7b:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf7e:	85 ff                	test   edi,edi
c000cf80:	79 6c                	jns    c000cfee <sinc_stereo_vari_process+0x347>
c000cf82:	e9 e7 00 00 00       	jmp    c000d06e <sinc_stereo_vari_process+0x3c7>
c000cf87:	50                   	push   eax
c000cf88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf8c:	56                   	push   esi
c000cf8d:	53                   	push   ebx
c000cf8e:	e8 4c e7 ff ff       	call   c000b6df <prepare_data>
c000cf93:	83 c4 10             	add    esp,0x10
c000cf96:	89 c2                	mov    edx,eax
c000cf98:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf9b:	85 c0                	test   eax,eax
c000cf9d:	0f 85 bf 03 00 00    	jne    c000d362 <sinc_stereo_vari_process+0x6bb>
c000cfa3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cfa6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cfa9:	01 c8                	add    eax,ecx
c000cfab:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cfae:	99                   	cdq    
c000cfaf:	f7 f9                	idiv   ecx
c000cfb1:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cfb5:	7c c4                	jl     c000cf7b <sinc_stereo_vari_process+0x2d4>
c000cfb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfbf:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cfc2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cfc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfcd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cfd0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cfd3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cfd6:	99                   	cdq    
c000cfd7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfdd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfe0:	99                   	cdq    
c000cfe1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfe4:	31 d2                	xor    edx,edx
c000cfe6:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfe9:	e9 74 03 00 00       	jmp    c000d362 <sinc_stereo_vari_process+0x6bb>
c000cfee:	83 ec 0c             	sub    esp,0xc
c000cff1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cff4:	e8 3a a0 01 00       	call   c0027033 <__floatsidf>
c000cff9:	83 c4 10             	add    esp,0x10
c000cffc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d000:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d004:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d008:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d010:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d014:	e8 3a 93 01 00       	call   c0026353 <__adddf3>
c000d019:	83 c4 10             	add    esp,0x10
c000d01c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d020:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d024:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d028:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d02c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d030:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d034:	e8 1a 93 01 00       	call   c0026353 <__adddf3>
c000d039:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d03c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d040:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d044:	e8 ea 9f 01 00       	call   c0027033 <__floatsidf>
c000d049:	83 c4 10             	add    esp,0x10
c000d04c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d050:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d054:	52                   	push   edx
c000d055:	50                   	push   eax
c000d056:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d05a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d05e:	e8 3a a2 01 00       	call   c002729d <__gedf2>
c000d063:	83 c4 10             	add    esp,0x10
c000d066:	85 c0                	test   eax,eax
c000d068:	0f 89 49 ff ff ff    	jns    c000cfb7 <sinc_stereo_vari_process+0x310>
c000d06e:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d072:	0f 8e ef 00 00 00    	jle    c000d167 <sinc_stereo_vari_process+0x4c0>
c000d078:	83 ec 10             	sub    esp,0x10
c000d07b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d07e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d081:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d084:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d087:	e8 18 99 01 00       	call   c00269a4 <__subdf3>
c000d08c:	83 c4 18             	add    esp,0x18
c000d08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d093:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d097:	52                   	push   edx
c000d098:	50                   	push   eax
c000d099:	e8 92 a3 01 00       	call   c0027430 <fabs>
c000d09e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0a2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0a6:	83 c4 10             	add    esp,0x10
c000d0a9:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d0ae:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d0b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0bb:	e8 c1 a1 01 00       	call   c0027281 <__gtdf2>
c000d0c0:	83 c4 10             	add    esp,0x10
c000d0c3:	85 c0                	test   eax,eax
c000d0c5:	0f 8e 9c 00 00 00    	jle    c000d167 <sinc_stereo_vari_process+0x4c0>
c000d0cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0ce:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d0d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0d9:	52                   	push   edx
c000d0da:	50                   	push   eax
c000d0db:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0de:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0e1:	e8 be 98 01 00       	call   c00269a4 <__subdf3>
c000d0e6:	59                   	pop    ecx
c000d0e7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0eb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0ef:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0f2:	e8 3c 9f 01 00       	call   c0027033 <__floatsidf>
c000d0f7:	83 c4 10             	add    esp,0x10
c000d0fa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d102:	52                   	push   edx
c000d103:	50                   	push   eax
c000d104:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d108:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d10c:	e8 bf 98 01 00       	call   c00269d0 <__muldf3>
c000d111:	5f                   	pop    edi
c000d112:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d116:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d11a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d11d:	e8 11 9f 01 00       	call   c0027033 <__floatsidf>
c000d122:	83 c4 10             	add    esp,0x10
c000d125:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d129:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d12d:	52                   	push   edx
c000d12e:	50                   	push   eax
c000d12f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d133:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d137:	e8 78 9b 01 00       	call   c0026cb4 <__divdf3>
c000d13c:	83 c4 10             	add    esp,0x10
c000d13f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d143:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d147:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d14b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d14f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d153:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d157:	e8 f7 91 01 00       	call   c0026353 <__adddf3>
c000d15c:	83 c4 10             	add    esp,0x10
c000d15f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d163:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d167:	83 ec 0c             	sub    esp,0xc
c000d16a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d16d:	e8 c1 9e 01 00       	call   c0027033 <__floatsidf>
c000d172:	83 c4 10             	add    esp,0x10
c000d175:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d179:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d17d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d181:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d185:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d189:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d18d:	e8 0d a1 01 00       	call   c002729f <__ltdf2>
c000d192:	83 c4 10             	add    esp,0x10
c000d195:	85 c0                	test   eax,eax
c000d197:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d19b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d19f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d1a3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d1a7:	78 10                	js     c000d1b9 <sinc_stereo_vari_process+0x512>
c000d1a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d1ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d1b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1b5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1c9:	e8 02 98 01 00       	call   c00269d0 <__muldf3>
c000d1ce:	59                   	pop    ecx
c000d1cf:	5f                   	pop    edi
c000d1d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d1d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d1d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1e0:	e8 d3 e4 ff ff       	call   c000b6b8 <double_to_fp>
c000d1e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1e9:	89 c7                	mov    edi,eax
c000d1eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1f7:	e8 d4 97 01 00       	call   c00269d0 <__muldf3>
c000d1fc:	83 c4 18             	add    esp,0x18
c000d1ff:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d203:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d207:	52                   	push   edx
c000d208:	50                   	push   eax
c000d209:	e8 aa e4 ff ff       	call   c000b6b8 <double_to_fp>
c000d20e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d211:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d215:	83 c4 0c             	add    esp,0xc
c000d218:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d21b:	8d 04 90             	lea    eax,[eax+edx*4]
c000d21e:	50                   	push   eax
c000d21f:	50                   	push   eax
c000d220:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d223:	e8 0b 9e 01 00       	call   c0027033 <__floatsidf>
c000d228:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d22c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d230:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d234:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d238:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d23c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d240:	e8 6f 9a 01 00       	call   c0026cb4 <__divdf3>
c000d245:	83 c4 18             	add    esp,0x18
c000d248:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d24c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d250:	52                   	push   edx
c000d251:	89 fa                	mov    edx,edi
c000d253:	50                   	push   eax
c000d254:	89 d8                	mov    eax,ebx
c000d256:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d25a:	e8 02 c7 ff ff       	call   c0009961 <calc_output_stereo>
c000d25f:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d263:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d267:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d26b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d26f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d273:	e8 3c 9a 01 00       	call   c0026cb4 <__divdf3>
c000d278:	83 c4 10             	add    esp,0x10
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d28b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d28f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d293:	e8 bb 90 01 00       	call   c0026353 <__adddf3>
c000d298:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d29c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d2a0:	83 c4 18             	add    esp,0x18
c000d2a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ab:	e8 a0 a1 01 00       	call   c0027450 <lrint>
c000d2b0:	83 ec 0c             	sub    esp,0xc
c000d2b3:	50                   	push   eax
c000d2b4:	e8 7a 9d 01 00       	call   c0027033 <__floatsidf>
c000d2b9:	83 c4 10             	add    esp,0x10
c000d2bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d2c0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d2c4:	52                   	push   edx
c000d2c5:	50                   	push   eax
c000d2c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2ce:	e8 d1 96 01 00       	call   c00269a4 <__subdf3>
c000d2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2db:	83 c4 20             	add    esp,0x20
c000d2de:	6a 00                	push   0x0
c000d2e0:	6a 00                	push   0x0
c000d2e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ea:	e8 b0 9f 01 00       	call   c002729f <__ltdf2>
c000d2ef:	83 c4 10             	add    esp,0x10
c000d2f2:	85 c0                	test   eax,eax
c000d2f4:	79 20                	jns    c000d316 <sinc_stereo_vari_process+0x66f>
c000d2f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d302:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d306:	e8 48 90 01 00       	call   c0026353 <__adddf3>
c000d30b:	83 c4 10             	add    esp,0x10
c000d30e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d312:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d316:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d319:	83 ec 10             	sub    esp,0x10
c000d31c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d320:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d323:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d327:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d32b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d32f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d333:	e8 6c 96 01 00       	call   c00269a4 <__subdf3>
c000d338:	83 c4 18             	add    esp,0x18
c000d33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d33f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d343:	52                   	push   edx
c000d344:	50                   	push   eax
c000d345:	e8 06 a1 01 00       	call   c0027450 <lrint>
c000d34a:	0f af f8             	imul   edi,eax
c000d34d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d351:	83 c4 10             	add    esp,0x10
c000d354:	01 f8                	add    eax,edi
c000d356:	99                   	cdq    
c000d357:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d35a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d35d:	e9 fd fb ff ff       	jmp    c000cf5f <sinc_stereo_vari_process+0x2b8>
c000d362:	83 c4 4c             	add    esp,0x4c
c000d365:	89 d0                	mov    eax,edx
c000d367:	5b                   	pop    ebx
c000d368:	5e                   	pop    esi
c000d369:	5f                   	pop    edi
c000d36a:	5d                   	pop    ebp
c000d36b:	c3                   	ret    

c000d36c <sinc_mono_vari_process>:
c000d36c:	55                   	push   ebp
c000d36d:	ba 05 00 00 00       	mov    edx,0x5
c000d372:	57                   	push   edi
c000d373:	56                   	push   esi
c000d374:	53                   	push   ebx
c000d375:	83 ec 4c             	sub    esp,0x4c
c000d378:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d37c:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d380:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d383:	85 db                	test   ebx,ebx
c000d385:	0f 84 c1 06 00 00    	je     c000da4c <sinc_mono_vari_process+0x6e0>
c000d38b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d38e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d391:	0f af c7             	imul   eax,edi
c000d394:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d397:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d39a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d3a1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d3a8:	0f af c7             	imul   eax,edi
c000d3ab:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d3ae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d3b2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d3b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000d3b7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d3bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d3bf:	68 00 00 70 3f       	push   0x3f700000
c000d3c4:	6a 00                	push   0x0
c000d3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ce:	e8 cc 9e 01 00       	call   c002729f <__ltdf2>
c000d3d3:	83 c4 10             	add    esp,0x10
c000d3d6:	ba 16 00 00 00       	mov    edx,0x16
c000d3db:	85 c0                	test   eax,eax
c000d3dd:	0f 88 69 06 00 00    	js     c000da4c <sinc_mono_vari_process+0x6e0>
c000d3e3:	68 00 00 70 40       	push   0x40700000
c000d3e8:	6a 00                	push   0x0
c000d3ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3f2:	e8 8a 9e 01 00       	call   c0027281 <__gtdf2>
c000d3f7:	83 c4 10             	add    esp,0x10
c000d3fa:	ba 16 00 00 00       	mov    edx,0x16
c000d3ff:	85 c0                	test   eax,eax
c000d401:	0f 8f 45 06 00 00    	jg     c000da4c <sinc_mono_vari_process+0x6e0>
c000d407:	83 ec 0c             	sub    esp,0xc
c000d40a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d40d:	e8 21 9c 01 00       	call   c0027033 <__floatsidf>
c000d412:	83 c4 10             	add    esp,0x10
c000d415:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d419:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d41d:	68 00 00 00 40       	push   0x40000000
c000d422:	6a 00                	push   0x0
c000d424:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d428:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d42c:	e8 22 8f 01 00       	call   c0026353 <__adddf3>
c000d431:	59                   	pop    ecx
c000d432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d436:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d43a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43d:	e8 f1 9b 01 00       	call   c0027033 <__floatsidf>
c000d442:	83 c4 10             	add    esp,0x10
c000d445:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d449:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d44d:	52                   	push   edx
c000d44e:	50                   	push   eax
c000d44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d453:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d457:	e8 58 98 01 00       	call   c0026cb4 <__divdf3>
c000d45c:	83 c4 10             	add    esp,0x10
c000d45f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d463:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d467:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d46a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d46d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d471:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d47d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d485:	e8 f7 9d 01 00       	call   c0027281 <__gtdf2>
c000d48a:	83 c4 10             	add    esp,0x10
c000d48d:	85 c0                	test   eax,eax
c000d48f:	7e 2d                	jle    c000d4be <sinc_mono_vari_process+0x152>
c000d491:	68 00 00 f0 3f       	push   0x3ff00000
c000d496:	6a 00                	push   0x0
c000d498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a0:	e8 fa 9d 01 00       	call   c002729f <__ltdf2>
c000d4a5:	83 c4 10             	add    esp,0x10
c000d4a8:	85 c0                	test   eax,eax
c000d4aa:	79 4d                	jns    c000d4f9 <sinc_mono_vari_process+0x18d>
c000d4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d4b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4b8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4bc:	eb 1b                	jmp    c000d4d9 <sinc_mono_vari_process+0x16d>
c000d4be:	68 00 00 f0 3f       	push   0x3ff00000
c000d4c3:	6a 00                	push   0x0
c000d4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4cd:	e8 cd 9d 01 00       	call   c002729f <__ltdf2>
c000d4d2:	83 c4 10             	add    esp,0x10
c000d4d5:	85 c0                	test   eax,eax
c000d4d7:	79 20                	jns    c000d4f9 <sinc_mono_vari_process+0x18d>
c000d4d9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4dd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4e9:	e8 c6 97 01 00       	call   c0026cb4 <__divdf3>
c000d4ee:	83 c4 10             	add    esp,0x10
c000d4f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4f9:	50                   	push   eax
c000d4fa:	50                   	push   eax
c000d4fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d503:	e8 48 9f 01 00       	call   c0027450 <lrint>
c000d508:	40                   	inc    eax
c000d509:	0f af c7             	imul   eax,edi
c000d50c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d510:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d514:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d517:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d51a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d522:	58                   	pop    eax
c000d523:	5a                   	pop    edx
c000d524:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d528:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d52c:	e8 1f 9f 01 00       	call   c0027450 <lrint>
c000d531:	83 ec 0c             	sub    esp,0xc
c000d534:	50                   	push   eax
c000d535:	e8 f9 9a 01 00       	call   c0027033 <__floatsidf>
c000d53a:	83 c4 10             	add    esp,0x10
c000d53d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d541:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d545:	52                   	push   edx
c000d546:	50                   	push   eax
c000d547:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d54f:	e8 50 94 01 00       	call   c00269a4 <__subdf3>
c000d554:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d558:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d55c:	83 c4 20             	add    esp,0x20
c000d55f:	6a 00                	push   0x0
c000d561:	6a 00                	push   0x0
c000d563:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d567:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d56b:	e8 2f 9d 01 00       	call   c002729f <__ltdf2>
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	85 c0                	test   eax,eax
c000d575:	79 1f                	jns    c000d596 <sinc_mono_vari_process+0x22a>
c000d577:	68 00 00 f0 3f       	push   0x3ff00000
c000d57c:	6a 00                	push   0x0
c000d57e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d582:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d586:	e8 c8 8d 01 00       	call   c0026353 <__adddf3>
c000d58b:	83 c4 10             	add    esp,0x10
c000d58e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d592:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d596:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d599:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d59c:	83 ec 10             	sub    esp,0x10
c000d59f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5ab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5af:	e8 f0 93 01 00       	call   c00269a4 <__subdf3>
c000d5b4:	83 c4 18             	add    esp,0x18
c000d5b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d5bb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d5bf:	52                   	push   edx
c000d5c0:	50                   	push   eax
c000d5c1:	e8 8a 9e 01 00       	call   c0027450 <lrint>
c000d5c6:	0f af f8             	imul   edi,eax
c000d5c9:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d5cc:	31 ff                	xor    edi,edi
c000d5ce:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d5d3:	99                   	cdq    
c000d5d4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d5d7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5e2:	55                   	push   ebp
c000d5e3:	57                   	push   edi
c000d5e4:	e8 cb 96 01 00       	call   c0026cb4 <__divdf3>
c000d5e9:	83 c4 10             	add    esp,0x10
c000d5ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5f4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5f9:	68 23 42 92 0c       	push   0xc924223
c000d5fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d602:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d606:	e8 48 8d 01 00       	call   c0026353 <__adddf3>
c000d60b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d60f:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d613:	83 c4 20             	add    esp,0x20
c000d616:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d61a:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d61e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d621:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d624:	7d 54                	jge    c000d67a <sinc_mono_vari_process+0x30e>
c000d626:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d629:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d62c:	01 c8                	add    eax,ecx
c000d62e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d631:	99                   	cdq    
c000d632:	f7 f9                	idiv   ecx
c000d634:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d638:	7d 0c                	jge    c000d646 <sinc_mono_vari_process+0x2da>
c000d63a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d63d:	85 ff                	test   edi,edi
c000d63f:	79 73                	jns    c000d6b4 <sinc_mono_vari_process+0x348>
c000d641:	e9 ee 00 00 00       	jmp    c000d734 <sinc_mono_vari_process+0x3c8>
c000d646:	50                   	push   eax
c000d647:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d64b:	56                   	push   esi
c000d64c:	53                   	push   ebx
c000d64d:	e8 8d e0 ff ff       	call   c000b6df <prepare_data>
c000d652:	89 c2                	mov    edx,eax
c000d654:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d658:	83 c4 10             	add    esp,0x10
c000d65b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d65e:	85 d2                	test   edx,edx
c000d660:	0f 85 e6 03 00 00    	jne    c000da4c <sinc_mono_vari_process+0x6e0>
c000d666:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d669:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d66c:	01 c8                	add    eax,ecx
c000d66e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d671:	99                   	cdq    
c000d672:	f7 f9                	idiv   ecx
c000d674:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d678:	7c c0                	jl     c000d63a <sinc_mono_vari_process+0x2ce>
c000d67a:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d67e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d682:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d686:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d689:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d690:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d694:	89 01                	mov    DWORD PTR [ecx],eax
c000d696:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d699:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d69c:	99                   	cdq    
c000d69d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d6a0:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d6a3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d6a6:	99                   	cdq    
c000d6a7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d6aa:	31 d2                	xor    edx,edx
c000d6ac:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d6af:	e9 98 03 00 00       	jmp    c000da4c <sinc_mono_vari_process+0x6e0>
c000d6b4:	83 ec 0c             	sub    esp,0xc
c000d6b7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d6ba:	e8 74 99 01 00       	call   c0027033 <__floatsidf>
c000d6bf:	83 c4 10             	add    esp,0x10
c000d6c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6da:	e8 74 8c 01 00       	call   c0026353 <__adddf3>
c000d6df:	83 c4 10             	add    esp,0x10
c000d6e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6ee:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6fa:	e8 54 8c 01 00       	call   c0026353 <__adddf3>
c000d6ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d702:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d706:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d70a:	e8 24 99 01 00       	call   c0027033 <__floatsidf>
c000d70f:	83 c4 10             	add    esp,0x10
c000d712:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d716:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d71a:	52                   	push   edx
c000d71b:	50                   	push   eax
c000d71c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d720:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d724:	e8 58 9b 01 00       	call   c0027281 <__gtdf2>
c000d729:	83 c4 10             	add    esp,0x10
c000d72c:	85 c0                	test   eax,eax
c000d72e:	0f 8f 46 ff ff ff    	jg     c000d67a <sinc_mono_vari_process+0x30e>
c000d734:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d738:	0f 8e f5 00 00 00    	jle    c000d833 <sinc_mono_vari_process+0x4c7>
c000d73e:	83 ec 10             	sub    esp,0x10
c000d741:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d744:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d747:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d74b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d74e:	ff 30                	push   DWORD PTR [eax]
c000d750:	e8 4f 92 01 00       	call   c00269a4 <__subdf3>
c000d755:	83 c4 18             	add    esp,0x18
c000d758:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d75c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d760:	52                   	push   edx
c000d761:	50                   	push   eax
c000d762:	e8 c9 9c 01 00       	call   c0027430 <fabs>
c000d767:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d76b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d76f:	83 c4 10             	add    esp,0x10
c000d772:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d777:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d77c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d780:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d784:	e8 f8 9a 01 00       	call   c0027281 <__gtdf2>
c000d789:	83 c4 10             	add    esp,0x10
c000d78c:	85 c0                	test   eax,eax
c000d78e:	0f 8e 9f 00 00 00    	jle    c000d833 <sinc_mono_vari_process+0x4c7>
c000d794:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d798:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d79b:	8b 00                	mov    eax,DWORD PTR [eax]
c000d79d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7a5:	52                   	push   edx
c000d7a6:	50                   	push   eax
c000d7a7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d7aa:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d7ad:	e8 f2 91 01 00       	call   c00269a4 <__subdf3>
c000d7b2:	5f                   	pop    edi
c000d7b3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7b7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7bb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d7be:	e8 70 98 01 00       	call   c0027033 <__floatsidf>
c000d7c3:	83 c4 10             	add    esp,0x10
c000d7c6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7ca:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7ce:	52                   	push   edx
c000d7cf:	50                   	push   eax
c000d7d0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7d8:	e8 f3 91 01 00       	call   c00269d0 <__muldf3>
c000d7dd:	5d                   	pop    ebp
c000d7de:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7e2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7e6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7e9:	e8 45 98 01 00       	call   c0027033 <__floatsidf>
c000d7ee:	83 c4 10             	add    esp,0x10
c000d7f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7f9:	52                   	push   edx
c000d7fa:	50                   	push   eax
c000d7fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d803:	e8 ac 94 01 00       	call   c0026cb4 <__divdf3>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d80f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d813:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d817:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d81b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d823:	e8 2b 8b 01 00       	call   c0026353 <__adddf3>
c000d828:	83 c4 10             	add    esp,0x10
c000d82b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d82f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d833:	83 ec 0c             	sub    esp,0xc
c000d836:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d839:	e8 f5 97 01 00       	call   c0027033 <__floatsidf>
c000d83e:	83 c4 10             	add    esp,0x10
c000d841:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d845:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d849:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d84d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d851:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d855:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d859:	e8 41 9a 01 00       	call   c002729f <__ltdf2>
c000d85e:	83 c4 10             	add    esp,0x10
c000d861:	85 c0                	test   eax,eax
c000d863:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d867:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d86b:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d86f:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d873:	78 10                	js     c000d885 <sinc_mono_vari_process+0x519>
c000d875:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d879:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d87d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d881:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d885:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d889:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d88d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d891:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d895:	e8 36 91 01 00       	call   c00269d0 <__muldf3>
c000d89a:	59                   	pop    ecx
c000d89b:	5f                   	pop    edi
c000d89c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ac:	e8 07 de ff ff       	call   c000b6b8 <double_to_fp>
c000d8b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8b5:	89 c7                	mov    edi,eax
c000d8b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d8c3:	e8 08 91 01 00       	call   c00269d0 <__muldf3>
c000d8c8:	83 c4 18             	add    esp,0x18
c000d8cb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8d3:	52                   	push   edx
c000d8d4:	50                   	push   eax
c000d8d5:	e8 de dd ff ff       	call   c000b6b8 <double_to_fp>
c000d8da:	83 ec 0c             	sub    esp,0xc
c000d8dd:	89 c5                	mov    ebp,eax
c000d8df:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8e2:	e8 4c 97 01 00       	call   c0027033 <__floatsidf>
c000d8e7:	83 c4 10             	add    esp,0x10
c000d8ea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8ee:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8f2:	52                   	push   edx
c000d8f3:	50                   	push   eax
c000d8f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8fc:	e8 b3 93 01 00       	call   c0026cb4 <__divdf3>
c000d901:	83 c4 10             	add    esp,0x10
c000d904:	89 e9                	mov    ecx,ebp
c000d906:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d90a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d90e:	89 d8                	mov    eax,ebx
c000d910:	89 fa                	mov    edx,edi
c000d912:	e8 ee bd ff ff       	call   c0009705 <calc_output_single>
c000d917:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d91a:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d91d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d921:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d925:	52                   	push   edx
c000d926:	50                   	push   eax
c000d927:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d92b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d92f:	e8 9c 90 01 00       	call   c00269d0 <__muldf3>
c000d934:	59                   	pop    ecx
c000d935:	59                   	pop    ecx
c000d936:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d93a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d93e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d942:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d946:	e8 58 99 01 00       	call   c00272a3 <__truncdfsf2>
c000d94b:	83 c4 10             	add    esp,0x10
c000d94e:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d951:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d954:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d958:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d95c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d960:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d964:	e8 4b 93 01 00       	call   c0026cb4 <__divdf3>
c000d969:	83 c4 10             	add    esp,0x10
c000d96c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d970:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d97c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d980:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d984:	e8 ca 89 01 00       	call   c0026353 <__adddf3>
c000d989:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d98d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d991:	83 c4 18             	add    esp,0x18
c000d994:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d998:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99c:	e8 af 9a 01 00       	call   c0027450 <lrint>
c000d9a1:	83 ec 0c             	sub    esp,0xc
c000d9a4:	50                   	push   eax
c000d9a5:	e8 89 96 01 00       	call   c0027033 <__floatsidf>
c000d9aa:	83 c4 10             	add    esp,0x10
c000d9ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9b1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9b5:	52                   	push   edx
c000d9b6:	50                   	push   eax
c000d9b7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9bf:	e8 e0 8f 01 00       	call   c00269a4 <__subdf3>
c000d9c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9cc:	83 c4 20             	add    esp,0x20
c000d9cf:	6a 00                	push   0x0
c000d9d1:	6a 00                	push   0x0
c000d9d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9db:	e8 bf 98 01 00       	call   c002729f <__ltdf2>
c000d9e0:	83 c4 10             	add    esp,0x10
c000d9e3:	85 c0                	test   eax,eax
c000d9e5:	79 20                	jns    c000da07 <sinc_mono_vari_process+0x69b>
c000d9e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f7:	e8 57 89 01 00       	call   c0026353 <__adddf3>
c000d9fc:	83 c4 10             	add    esp,0x10
c000d9ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da07:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000da0a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000da0d:	83 ec 10             	sub    esp,0x10
c000da10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000da20:	e8 7f 8f 01 00       	call   c00269a4 <__subdf3>
c000da25:	83 c4 18             	add    esp,0x18
c000da28:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da2c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da30:	52                   	push   edx
c000da31:	50                   	push   eax
c000da32:	e8 19 9a 01 00       	call   c0027450 <lrint>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	0f af f8             	imul   edi,eax
c000da3d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da40:	99                   	cdq    
c000da41:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da44:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da47:	e9 d2 fb ff ff       	jmp    c000d61e <sinc_mono_vari_process+0x2b2>
c000da4c:	83 c4 4c             	add    esp,0x4c
c000da4f:	89 d0                	mov    eax,edx
c000da51:	5b                   	pop    ebx
c000da52:	5e                   	pop    esi
c000da53:	5f                   	pop    edi
c000da54:	5d                   	pop    ebp
c000da55:	c3                   	ret    

c000da56 <sinc_get_name>:
c000da56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da5a:	31 c0                	xor    eax,eax
c000da5c:	83 fa 02             	cmp    edx,0x2
c000da5f:	77 07                	ja     c000da68 <sinc_get_name+0x12>
c000da61:	8b 04 95 e4 8b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd741c]
c000da68:	c3                   	ret    

c000da69 <sinc_get_description>:
c000da69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da6d:	31 c0                	xor    eax,eax
c000da6f:	83 fa 02             	cmp    edx,0x2
c000da72:	77 07                	ja     c000da7b <sinc_get_description+0x12>
c000da74:	8b 04 95 d8 8b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7428]
c000da7b:	c3                   	ret    

c000da7c <sinc_set_converter>:
c000da7c:	53                   	push   ebx
c000da7d:	81 ec 58 08 00 00    	sub    esp,0x858
c000da83:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da8a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da8d:	85 c0                	test   eax,eax
c000da8f:	74 13                	je     c000daa4 <sinc_set_converter+0x28>
c000da91:	83 ec 0c             	sub    esp,0xc
c000da94:	50                   	push   eax
c000da95:	e8 9a 1b 00 00       	call   c000f634 <free>
c000da9a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000daa1:	83 c4 10             	add    esp,0x10
c000daa4:	50                   	push   eax
c000daa5:	68 44 08 00 00       	push   0x844
c000daaa:	6a 00                	push   0x0
c000daac:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dab0:	50                   	push   eax
c000dab1:	e8 0e 2c ff ff       	call   c00006c4 <memset>
c000dab6:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dab9:	83 c4 10             	add    esp,0x10
c000dabc:	b8 0b 00 00 00       	mov    eax,0xb
c000dac1:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dac7:	7f 6e                	jg     c000db37 <sinc_set_converter+0xbb>
c000dac9:	83 fa 01             	cmp    edx,0x1
c000dacc:	75 10                	jne    c000dade <sinc_set_converter+0x62>
c000dace:	c7 43 24 6c d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d36c
c000dad5:	c7 43 20 6c d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d36c
c000dadc:	eb 4d                	jmp    c000db2b <sinc_set_converter+0xaf>
c000dade:	83 fa 02             	cmp    edx,0x2
c000dae1:	75 10                	jne    c000daf3 <sinc_set_converter+0x77>
c000dae3:	c7 43 24 a7 cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cca7
c000daea:	c7 43 20 a7 cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cca7
c000daf1:	eb 38                	jmp    c000db2b <sinc_set_converter+0xaf>
c000daf3:	83 fa 04             	cmp    edx,0x4
c000daf6:	75 10                	jne    c000db08 <sinc_set_converter+0x8c>
c000daf8:	c7 43 24 e2 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5e2
c000daff:	c7 43 20 e2 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5e2
c000db06:	eb 23                	jmp    c000db2b <sinc_set_converter+0xaf>
c000db08:	83 fa 06             	cmp    edx,0x6
c000db0b:	75 10                	jne    c000db1d <sinc_set_converter+0xa1>
c000db0d:	c7 43 24 1d bf 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bf1d
c000db14:	c7 43 20 1d bf 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bf1d
c000db1b:	eb 0e                	jmp    c000db2b <sinc_set_converter+0xaf>
c000db1d:	c7 43 24 59 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b859
c000db24:	c7 43 20 59 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b859
c000db2b:	c7 43 28 0c ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab0c
c000db32:	b8 0a 00 00 00       	mov    eax,0xa
c000db37:	81 c4 58 08 00 00    	add    esp,0x858
c000db3d:	5b                   	pop    ebx
c000db3e:	c3                   	ret    

c000db3f <zoh_vari_process>:
c000db3f:	55                   	push   ebp
c000db40:	31 d2                	xor    edx,edx
c000db42:	57                   	push   edi
c000db43:	56                   	push   esi
c000db44:	53                   	push   ebx
c000db45:	83 ec 3c             	sub    esp,0x3c
c000db48:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db4c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db50:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db54:	0f 8e 80 06 00 00    	jle    c000e1da <zoh_vari_process+0x69b>
c000db5a:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db5d:	ba 05 00 00 00       	mov    edx,0x5
c000db62:	85 db                	test   ebx,ebx
c000db64:	0f 84 70 06 00 00    	je     c000e1da <zoh_vari_process+0x69b>
c000db6a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db6d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db71:	74 19                	je     c000db8c <zoh_vari_process+0x4d>
c000db73:	31 d2                	xor    edx,edx
c000db75:	39 c2                	cmp    edx,eax
c000db77:	7d 0c                	jge    c000db85 <zoh_vari_process+0x46>
c000db79:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db7b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db7e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db82:	42                   	inc    edx
c000db83:	eb f0                	jmp    c000db75 <zoh_vari_process+0x36>
c000db85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db8c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db8f:	0f af d0             	imul   edx,eax
c000db92:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db95:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db99:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dba0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dba3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dbaa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dbad:	8b 07                	mov    eax,DWORD PTR [edi]
c000dbaf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbb7:	68 00 00 70 3f       	push   0x3f700000
c000dbbc:	6a 00                	push   0x0
c000dbbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbc6:	e8 d4 96 01 00       	call   c002729f <__ltdf2>
c000dbcb:	83 c4 10             	add    esp,0x10
c000dbce:	ba 16 00 00 00       	mov    edx,0x16
c000dbd3:	85 c0                	test   eax,eax
c000dbd5:	0f 88 ff 05 00 00    	js     c000e1da <zoh_vari_process+0x69b>
c000dbdb:	68 00 00 70 40       	push   0x40700000
c000dbe0:	6a 00                	push   0x0
c000dbe2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbea:	e8 92 96 01 00       	call   c0027281 <__gtdf2>
c000dbef:	83 c4 10             	add    esp,0x10
c000dbf2:	ba 16 00 00 00       	mov    edx,0x16
c000dbf7:	85 c0                	test   eax,eax
c000dbf9:	0f 8f db 05 00 00    	jg     c000e1da <zoh_vari_process+0x69b>
c000dbff:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dc02:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dc05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dc0d:	68 00 00 f0 3f       	push   0x3ff00000
c000dc12:	6a 00                	push   0x0
c000dc14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc1c:	e8 7e 96 01 00       	call   c002729f <__ltdf2>
c000dc21:	83 c4 10             	add    esp,0x10
c000dc24:	85 c0                	test   eax,eax
c000dc26:	0f 89 da 01 00 00    	jns    c000de06 <zoh_vari_process+0x2c7>
c000dc2c:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dc2f:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dc32:	0f 8d ce 01 00 00    	jge    c000de06 <zoh_vari_process+0x2c7>
c000dc38:	83 ec 0c             	sub    esp,0xc
c000dc3b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc3e:	e8 f0 93 01 00       	call   c0027033 <__floatsidf>
c000dc43:	83 c4 10             	add    esp,0x10
c000dc46:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc55:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc59:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc5d:	e8 6e 8d 01 00       	call   c00269d0 <__muldf3>
c000dc62:	59                   	pop    ecx
c000dc63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc67:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc6b:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc6e:	e8 c0 93 01 00       	call   c0027033 <__floatsidf>
c000dc73:	83 c4 10             	add    esp,0x10
c000dc76:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc7a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc7e:	52                   	push   edx
c000dc7f:	50                   	push   eax
c000dc80:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc88:	e8 c6 86 01 00       	call   c0026353 <__adddf3>
c000dc8d:	59                   	pop    ecx
c000dc8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc92:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc96:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc99:	e8 95 93 01 00       	call   c0027033 <__floatsidf>
c000dc9e:	83 c4 10             	add    esp,0x10
c000dca1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dca5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dca9:	52                   	push   edx
c000dcaa:	50                   	push   eax
c000dcab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcb3:	e8 e5 95 01 00       	call   c002729d <__gedf2>
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	85 c0                	test   eax,eax
c000dcbd:	0f 89 43 01 00 00    	jns    c000de06 <zoh_vari_process+0x2c7>
c000dcc3:	85 ed                	test   ebp,ebp
c000dcc5:	0f 8e ec 00 00 00    	jle    c000ddb7 <zoh_vari_process+0x278>
c000dccb:	83 ec 10             	sub    esp,0x10
c000dcce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcd1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcd4:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dcd7:	ff 37                	push   DWORD PTR [edi]
c000dcd9:	e8 c6 8c 01 00       	call   c00269a4 <__subdf3>
c000dcde:	83 c4 18             	add    esp,0x18
c000dce1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dce5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dce9:	52                   	push   edx
c000dcea:	50                   	push   eax
c000dceb:	e8 40 97 01 00       	call   c0027430 <fabs>
c000dcf0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcf4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcf8:	83 c4 10             	add    esp,0x10
c000dcfb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dd00:	68 23 42 92 0c       	push   0xc924223
c000dd05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd0d:	e8 6f 95 01 00       	call   c0027281 <__gtdf2>
c000dd12:	83 c4 10             	add    esp,0x10
c000dd15:	85 c0                	test   eax,eax
c000dd17:	0f 8e 9a 00 00 00    	jle    c000ddb7 <zoh_vari_process+0x278>
c000dd1d:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd1f:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd22:	89 04 24             	mov    DWORD PTR [esp],eax
c000dd25:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dd29:	52                   	push   edx
c000dd2a:	50                   	push   eax
c000dd2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dd2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dd31:	e8 6e 8c 01 00       	call   c00269a4 <__subdf3>
c000dd36:	59                   	pop    ecx
c000dd37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd3b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd3f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd42:	e8 ec 92 01 00       	call   c0027033 <__floatsidf>
c000dd47:	83 c4 10             	add    esp,0x10
c000dd4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd52:	52                   	push   edx
c000dd53:	50                   	push   eax
c000dd54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd5c:	e8 6f 8c 01 00       	call   c00269d0 <__muldf3>
c000dd61:	5d                   	pop    ebp
c000dd62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd66:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd6a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd6d:	e8 c1 92 01 00       	call   c0027033 <__floatsidf>
c000dd72:	83 c4 10             	add    esp,0x10
c000dd75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd7d:	52                   	push   edx
c000dd7e:	50                   	push   eax
c000dd7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd87:	e8 28 8f 01 00       	call   c0026cb4 <__divdf3>
c000dd8c:	83 c4 10             	add    esp,0x10
c000dd8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd97:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd9b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda7:	e8 a7 85 01 00       	call   c0026353 <__adddf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddb3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddb7:	31 c0                	xor    eax,eax
c000ddb9:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ddbc:	7e 13                	jle    c000ddd1 <zoh_vari_process+0x292>
c000ddbe:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000ddc2:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ddc5:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ddc8:	40                   	inc    eax
c000ddc9:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000ddcc:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ddcf:	eb e8                	jmp    c000ddb9 <zoh_vari_process+0x27a>
c000ddd1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddd5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ddd9:	68 00 00 f0 3f       	push   0x3ff00000
c000ddde:	6a 00                	push   0x0
c000dde0:	e8 cf 8e 01 00       	call   c0026cb4 <__divdf3>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddeb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddef:	52                   	push   edx
c000ddf0:	50                   	push   eax
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 55 85 01 00       	call   c0026353 <__adddf3>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	e9 ff fd ff ff       	jmp    c000dc05 <zoh_vari_process+0xc6>
c000de06:	55                   	push   ebp
c000de07:	55                   	push   ebp
c000de08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de10:	e8 3b 96 01 00       	call   c0027450 <lrint>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	50                   	push   eax
c000de19:	e8 15 92 01 00       	call   c0027033 <__floatsidf>
c000de1e:	83 c4 10             	add    esp,0x10
c000de21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de29:	52                   	push   edx
c000de2a:	50                   	push   eax
c000de2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de33:	e8 6c 8b 01 00       	call   c00269a4 <__subdf3>
c000de38:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de3c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de40:	83 c4 20             	add    esp,0x20
c000de43:	6a 00                	push   0x0
c000de45:	6a 00                	push   0x0
c000de47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de4f:	e8 4b 94 01 00       	call   c002729f <__ltdf2>
c000de54:	83 c4 10             	add    esp,0x10
c000de57:	85 c0                	test   eax,eax
c000de59:	79 1e                	jns    c000de79 <zoh_vari_process+0x33a>
c000de5b:	68 00 00 f0 3f       	push   0x3ff00000
c000de60:	6a 00                	push   0x0
c000de62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de66:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de6a:	e8 e4 84 01 00       	call   c0026353 <__adddf3>
c000de6f:	83 c4 10             	add    esp,0x10
c000de72:	89 04 24             	mov    DWORD PTR [esp],eax
c000de75:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de79:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de7c:	83 ec 10             	sub    esp,0x10
c000de7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de8f:	e8 10 8b 01 00       	call   c00269a4 <__subdf3>
c000de94:	83 c4 18             	add    esp,0x18
c000de97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de9b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de9f:	52                   	push   edx
c000dea0:	50                   	push   eax
c000dea1:	e8 aa 95 01 00       	call   c0027450 <lrint>
c000dea6:	83 c4 10             	add    esp,0x10
c000dea9:	0f af e8             	imul   ebp,eax
c000deac:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000deaf:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000deb2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000deb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000deb9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000debc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dec0:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000dec3:	0f 8d 7a 02 00 00    	jge    c000e143 <zoh_vari_process+0x604>
c000dec9:	83 ec 0c             	sub    esp,0xc
c000decc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000decf:	e8 5f 91 01 00       	call   c0027033 <__floatsidf>
c000ded4:	83 c4 10             	add    esp,0x10
c000ded7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dedb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dedf:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dee3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dee7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deeb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deef:	e8 dc 8a 01 00       	call   c00269d0 <__muldf3>
c000def4:	59                   	pop    ecx
c000def5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000def9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000defd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df01:	e8 2d 91 01 00       	call   c0027033 <__floatsidf>
c000df06:	83 c4 10             	add    esp,0x10
c000df09:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df0d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df11:	52                   	push   edx
c000df12:	50                   	push   eax
c000df13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df1b:	e8 33 84 01 00       	call   c0026353 <__adddf3>
c000df20:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000df23:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df27:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000df2b:	e8 03 91 01 00       	call   c0027033 <__floatsidf>
c000df30:	83 c4 10             	add    esp,0x10
c000df33:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df37:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df3b:	52                   	push   edx
c000df3c:	50                   	push   eax
c000df3d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df45:	e8 57 93 01 00       	call   c00272a1 <__ledf2>
c000df4a:	83 c4 10             	add    esp,0x10
c000df4d:	85 c0                	test   eax,eax
c000df4f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df53:	0f 8f ea 01 00 00    	jg     c000e143 <zoh_vari_process+0x604>
c000df59:	85 c9                	test   ecx,ecx
c000df5b:	0f 8e ed 00 00 00    	jle    c000e04e <zoh_vari_process+0x50f>
c000df61:	83 ec 10             	sub    esp,0x10
c000df64:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df67:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df6a:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df6d:	ff 37                	push   DWORD PTR [edi]
c000df6f:	e8 30 8a 01 00       	call   c00269a4 <__subdf3>
c000df74:	83 c4 18             	add    esp,0x18
c000df77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df7b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df7f:	52                   	push   edx
c000df80:	50                   	push   eax
c000df81:	e8 aa 94 01 00       	call   c0027430 <fabs>
c000df86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df8a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df8e:	83 c4 10             	add    esp,0x10
c000df91:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df96:	68 23 42 92 0c       	push   0xc924223
c000df9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa3:	e8 d9 92 01 00       	call   c0027281 <__gtdf2>
c000dfa8:	83 c4 10             	add    esp,0x10
c000dfab:	85 c0                	test   eax,eax
c000dfad:	0f 8e 9b 00 00 00    	jle    c000e04e <zoh_vari_process+0x50f>
c000dfb3:	8b 07                	mov    eax,DWORD PTR [edi]
c000dfb5:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dfb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfbc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfc0:	52                   	push   edx
c000dfc1:	50                   	push   eax
c000dfc2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dfc5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dfc8:	e8 d7 89 01 00       	call   c00269a4 <__subdf3>
c000dfcd:	5d                   	pop    ebp
c000dfce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfd6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfd9:	e8 55 90 01 00       	call   c0027033 <__floatsidf>
c000dfde:	83 c4 10             	add    esp,0x10
c000dfe1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfe5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfe9:	52                   	push   edx
c000dfea:	50                   	push   eax
c000dfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff3:	e8 d8 89 01 00       	call   c00269d0 <__muldf3>
c000dff8:	59                   	pop    ecx
c000dff9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dffd:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e001:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e004:	e8 2a 90 01 00       	call   c0027033 <__floatsidf>
c000e009:	83 c4 10             	add    esp,0x10
c000e00c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e010:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e014:	52                   	push   edx
c000e015:	50                   	push   eax
c000e016:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e01e:	e8 91 8c 01 00       	call   c0026cb4 <__divdf3>
c000e023:	83 c4 10             	add    esp,0x10
c000e026:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e02a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e02e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e032:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e03a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e03e:	e8 10 83 01 00       	call   c0026353 <__adddf3>
c000e043:	83 c4 10             	add    esp,0x10
c000e046:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e04a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e04e:	31 d2                	xor    edx,edx
c000e050:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e053:	39 d0                	cmp    eax,edx
c000e055:	7e 1d                	jle    c000e074 <zoh_vari_process+0x535>
c000e057:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e05a:	29 c1                	sub    ecx,eax
c000e05c:	89 c8                	mov    eax,ecx
c000e05e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e060:	01 d0                	add    eax,edx
c000e062:	42                   	inc    edx
c000e063:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e066:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e069:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e06c:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e06f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e072:	eb dc                	jmp    c000e050 <zoh_vari_process+0x511>
c000e074:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e078:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07c:	68 00 00 f0 3f       	push   0x3ff00000
c000e081:	6a 00                	push   0x0
c000e083:	e8 2c 8c 01 00       	call   c0026cb4 <__divdf3>
c000e088:	83 c4 10             	add    esp,0x10
c000e08b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e08f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e093:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e097:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e09b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0a3:	e8 ab 82 01 00       	call   c0026353 <__adddf3>
c000e0a8:	5d                   	pop    ebp
c000e0a9:	59                   	pop    ecx
c000e0aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ba:	e8 91 93 01 00       	call   c0027450 <lrint>
c000e0bf:	83 ec 0c             	sub    esp,0xc
c000e0c2:	50                   	push   eax
c000e0c3:	e8 6b 8f 01 00       	call   c0027033 <__floatsidf>
c000e0c8:	83 c4 10             	add    esp,0x10
c000e0cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e0d3:	52                   	push   edx
c000e0d4:	50                   	push   eax
c000e0d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0dd:	e8 c2 88 01 00       	call   c00269a4 <__subdf3>
c000e0e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0e6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ea:	83 c4 20             	add    esp,0x20
c000e0ed:	6a 00                	push   0x0
c000e0ef:	6a 00                	push   0x0
c000e0f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0f5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0f9:	e8 a1 91 01 00       	call   c002729f <__ltdf2>
c000e0fe:	83 c4 10             	add    esp,0x10
c000e101:	85 c0                	test   eax,eax
c000e103:	79 1e                	jns    c000e123 <zoh_vari_process+0x5e4>
c000e105:	68 00 00 f0 3f       	push   0x3ff00000
c000e10a:	6a 00                	push   0x0
c000e10c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e114:	e8 3a 82 01 00       	call   c0026353 <__adddf3>
c000e119:	83 c4 10             	add    esp,0x10
c000e11c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e11f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e123:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e126:	83 ec 10             	sub    esp,0x10
c000e129:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e12d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e131:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e135:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e139:	e8 66 88 01 00       	call   c00269a4 <__subdf3>
c000e13e:	e9 51 fd ff ff       	jmp    c000de94 <zoh_vari_process+0x355>
c000e143:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e147:	7d 3a                	jge    c000e183 <zoh_vari_process+0x644>
c000e149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e14d:	83 ec 0c             	sub    esp,0xc
c000e150:	29 e8                	sub    eax,ebp
c000e152:	99                   	cdq    
c000e153:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e156:	50                   	push   eax
c000e157:	e8 d7 8e 01 00       	call   c0027033 <__floatsidf>
c000e15c:	83 c4 10             	add    esp,0x10
c000e15f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e163:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e167:	52                   	push   edx
c000e168:	50                   	push   eax
c000e169:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e16d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e171:	e8 dd 81 01 00       	call   c0026353 <__adddf3>
c000e176:	83 c4 10             	add    esp,0x10
c000e179:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e17c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e17f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e183:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e186:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e18a:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e18d:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e190:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e193:	85 c0                	test   eax,eax
c000e195:	7f 25                	jg     c000e1bc <zoh_vari_process+0x67d>
c000e197:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e19b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e19f:	89 07                	mov    DWORD PTR [edi],eax
c000e1a1:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e1a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e1a7:	99                   	cdq    
c000e1a8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1ab:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e1ae:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e1b1:	99                   	cdq    
c000e1b2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e1b5:	31 d2                	xor    edx,edx
c000e1b7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e1ba:	eb 1e                	jmp    c000e1da <zoh_vari_process+0x69b>
c000e1bc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e1bf:	31 d2                	xor    edx,edx
c000e1c1:	29 c8                	sub    eax,ecx
c000e1c3:	c1 e0 02             	shl    eax,0x2
c000e1c6:	39 d1                	cmp    ecx,edx
c000e1c8:	7e cd                	jle    c000e197 <zoh_vari_process+0x658>
c000e1ca:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e1cc:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e1d0:	83 c0 04             	add    eax,0x4
c000e1d3:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e1d7:	42                   	inc    edx
c000e1d8:	eb ec                	jmp    c000e1c6 <zoh_vari_process+0x687>
c000e1da:	83 c4 3c             	add    esp,0x3c
c000e1dd:	89 d0                	mov    eax,edx
c000e1df:	5b                   	pop    ebx
c000e1e0:	5e                   	pop    esi
c000e1e1:	5f                   	pop    edi
c000e1e2:	5d                   	pop    ebp
c000e1e3:	c3                   	ret    

c000e1e4 <zoh_reset>:
c000e1e4:	83 ec 0c             	sub    esp,0xc
c000e1e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1eb:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1ee:	85 c0                	test   eax,eax
c000e1f0:	74 20                	je     c000e212 <zoh_reset+0x2e>
c000e1f2:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1f5:	83 c0 1c             	add    eax,0x1c
c000e1f8:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1fb:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e202:	c1 e2 02             	shl    edx,0x2
c000e205:	51                   	push   ecx
c000e206:	52                   	push   edx
c000e207:	6a 00                	push   0x0
c000e209:	50                   	push   eax
c000e20a:	e8 b5 24 ff ff       	call   c00006c4 <memset>
c000e20f:	83 c4 10             	add    esp,0x10
c000e212:	83 c4 0c             	add    esp,0xc
c000e215:	c3                   	ret    

c000e216 <zoh_get_name>:
c000e216:	31 c0                	xor    eax,eax
c000e218:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e21d:	75 05                	jne    c000e224 <zoh_get_name+0xe>
c000e21f:	b8 fe 8c 02 c0       	mov    eax,0xc0028cfe
c000e224:	c3                   	ret    

c000e225 <zoh_get_description>:
c000e225:	31 c0                	xor    eax,eax
c000e227:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e22c:	75 05                	jne    c000e233 <zoh_get_description+0xe>
c000e22e:	b8 0f 8d 02 c0       	mov    eax,0xc0028d0f
c000e233:	c3                   	ret    

c000e234 <zoh_set_converter>:
c000e234:	53                   	push   ebx
c000e235:	b8 0a 00 00 00       	mov    eax,0xa
c000e23a:	83 ec 08             	sub    esp,0x8
c000e23d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e241:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e246:	75 6e                	jne    c000e2b6 <zoh_set_converter+0x82>
c000e248:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e24b:	85 c0                	test   eax,eax
c000e24d:	74 13                	je     c000e262 <zoh_set_converter+0x2e>
c000e24f:	83 ec 0c             	sub    esp,0xc
c000e252:	50                   	push   eax
c000e253:	e8 dc 13 00 00       	call   c000f634 <free>
c000e258:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e25f:	83 c4 10             	add    esp,0x10
c000e262:	50                   	push   eax
c000e263:	50                   	push   eax
c000e264:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e267:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e26e:	50                   	push   eax
c000e26f:	6a 01                	push   0x1
c000e271:	e8 de 13 00 00       	call   c000f654 <calloc>
c000e276:	83 c4 10             	add    esp,0x10
c000e279:	89 c2                	mov    edx,eax
c000e27b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e27e:	85 d2                	test   edx,edx
c000e280:	b8 01 00 00 00       	mov    eax,0x1
c000e285:	74 2f                	je     c000e2b6 <zoh_set_converter+0x82>
c000e287:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e28a:	83 ec 0c             	sub    esp,0xc
c000e28d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e290:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e296:	c7 43 24 3f db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db3f
c000e29d:	c7 43 20 3f db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db3f
c000e2a4:	c7 43 28 e4 e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1e4
c000e2ab:	53                   	push   ebx
c000e2ac:	e8 33 ff ff ff       	call   c000e1e4 <zoh_reset>
c000e2b1:	83 c4 10             	add    esp,0x10
c000e2b4:	31 c0                	xor    eax,eax
c000e2b6:	83 c4 08             	add    esp,0x8
c000e2b9:	5b                   	pop    ebx
c000e2ba:	c3                   	ret    

c000e2bb <CPU::current()>:
c000e2bb:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c000e2c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2c6:	90                   	nop
c000e2c7:	c3                   	ret    

c000e2c8 <operator new(unsigned long)>:
c000e2c8:	83 ec 0c             	sub    esp,0xc
c000e2cb:	83 ec 0c             	sub    esp,0xc
c000e2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d2:	e8 4d 13 00 00       	call   c000f624 <malloc>
c000e2d7:	83 c4 10             	add    esp,0x10
c000e2da:	83 c4 0c             	add    esp,0xc
c000e2dd:	c3                   	ret    

c000e2de <Krnl::resolveCompatibilitySymbol(char*)>:
c000e2de:	83 ec 0c             	sub    esp,0xc
c000e2e1:	83 ec 08             	sub    esp,0x8
c000e2e4:	68 46 8d 02 c0       	push   0xc0028d46
c000e2e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ed:	e8 c2 24 ff ff       	call   c00007b4 <strcmp>
c000e2f2:	83 c4 10             	add    esp,0x10
c000e2f5:	85 c0                	test   eax,eax
c000e2f7:	0f 94 c0             	sete   al
c000e2fa:	84 c0                	test   al,al
c000e2fc:	74 0a                	je     c000e308 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e2fe:	b8 08 cf 02 c0       	mov    eax,0xc002cf08
c000e303:	e9 e3 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e308:	83 ec 08             	sub    esp,0x8
c000e30b:	68 4f 8d 02 c0       	push   0xc0028d4f
c000e310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e314:	e8 9b 24 ff ff       	call   c00007b4 <strcmp>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	85 c0                	test   eax,eax
c000e31e:	0f 94 c0             	sete   al
c000e321:	84 c0                	test   al,al
c000e323:	74 0a                	je     c000e32f <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e325:	b8 cc 57 02 c0       	mov    eax,0xc00257cc
c000e32a:	e9 bc 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e32f:	83 ec 08             	sub    esp,0x8
c000e332:	68 59 8d 02 c0       	push   0xc0028d59
c000e337:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e33b:	e8 74 24 ff ff       	call   c00007b4 <strcmp>
c000e340:	83 c4 10             	add    esp,0x10
c000e343:	85 c0                	test   eax,eax
c000e345:	0f 94 c0             	sete   al
c000e348:	84 c0                	test   al,al
c000e34a:	74 0a                	je     c000e356 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e34c:	b8 00 55 02 c0       	mov    eax,0xc0025500
c000e351:	e9 95 00 00 00       	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e356:	83 ec 08             	sub    esp,0x8
c000e359:	68 62 8d 02 c0       	push   0xc0028d62
c000e35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e362:	e8 4d 24 ff ff       	call   c00007b4 <strcmp>
c000e367:	83 c4 10             	add    esp,0x10
c000e36a:	85 c0                	test   eax,eax
c000e36c:	0f 94 c0             	sete   al
c000e36f:	84 c0                	test   al,al
c000e371:	74 07                	je     c000e37a <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e373:	b8 cc 58 02 c0       	mov    eax,0xc00258cc
c000e378:	eb 71                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e37a:	83 ec 08             	sub    esp,0x8
c000e37d:	68 6c 8d 02 c0       	push   0xc0028d6c
c000e382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e386:	e8 29 24 ff ff       	call   c00007b4 <strcmp>
c000e38b:	83 c4 10             	add    esp,0x10
c000e38e:	85 c0                	test   eax,eax
c000e390:	0f 94 c0             	sete   al
c000e393:	84 c0                	test   al,al
c000e395:	74 07                	je     c000e39e <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e397:	b8 4c 56 02 c0       	mov    eax,0xc002564c
c000e39c:	eb 4d                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e39e:	83 ec 08             	sub    esp,0x8
c000e3a1:	68 75 8d 02 c0       	push   0xc0028d75
c000e3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3aa:	e8 05 24 ff ff       	call   c00007b4 <strcmp>
c000e3af:	83 c4 10             	add    esp,0x10
c000e3b2:	85 c0                	test   eax,eax
c000e3b4:	0f 94 c0             	sete   al
c000e3b7:	84 c0                	test   al,al
c000e3b9:	74 07                	je     c000e3c2 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e3bb:	b8 0c cf 02 c0       	mov    eax,0xc002cf0c
c000e3c0:	eb 29                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3c2:	83 ec 08             	sub    esp,0x8
c000e3c5:	68 82 8d 02 c0       	push   0xc0028d82
c000e3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ce:	e8 e1 23 ff ff       	call   c00007b4 <strcmp>
c000e3d3:	83 c4 10             	add    esp,0x10
c000e3d6:	85 c0                	test   eax,eax
c000e3d8:	0f 94 c0             	sete   al
c000e3db:	84 c0                	test   al,al
c000e3dd:	74 07                	je     c000e3e6 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e3df:	b8 0d cf 02 c0       	mov    eax,0xc002cf0d
c000e3e4:	eb 05                	jmp    c000e3eb <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e3e6:	b8 00 00 00 00       	mov    eax,0x0
c000e3eb:	83 c4 0c             	add    esp,0xc
c000e3ee:	c3                   	ret    
c000e3ef:	90                   	nop

c000e3f0 <Computer::close(int, int, void*)>:
c000e3f0:	57                   	push   edi
c000e3f1:	56                   	push   esi
c000e3f2:	53                   	push   ebx
c000e3f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e3fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e3ff:	83 ec 0c             	sub    esp,0xc
c000e402:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e408:	e8 65 5a 00 00       	call   c0013e72 <Device::closeAll()>
c000e40d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e413:	83 c4 10             	add    esp,0x10
c000e416:	8b 10                	mov    edx,DWORD PTR [eax]
c000e418:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e41c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e424:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e428:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e42c:	5b                   	pop    ebx
c000e42d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e430:	5e                   	pop    esi
c000e431:	5f                   	pop    edi
c000e432:	ff e0                	jmp    eax

c000e434 <Krnl::firstTask()>:
c000e434:	53                   	push   ebx
c000e435:	83 ec 14             	sub    esp,0x14
c000e438:	fb                   	sti    
c000e439:	68 3f 07 00 00       	push   0x73f
c000e43e:	e8 e1 11 00 00       	call   c000f624 <malloc>
c000e443:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e44a:	89 c3                	mov    ebx,eax
c000e44c:	ff 35 54 e4 02 c0    	push   DWORD PTR ds:0xc002e454
c000e452:	68 8f 8d 02 c0       	push   0xc0028d8f
c000e457:	6a 01                	push   0x1
c000e459:	50                   	push   eax
c000e45a:	e8 39 eb 00 00       	call   c001cf98 <Process::Process(bool, char const*, Process*, char**)>
c000e45f:	83 c4 20             	add    esp,0x20
c000e462:	68 ff 00 00 00       	push   0xff
c000e467:	6a 00                	push   0x0
c000e469:	68 b9 ef 00 c0       	push   0xc000efb9
c000e46e:	53                   	push   ebx
c000e46f:	e8 22 ee 00 00       	call   c001d296 <Process::createThread(void (*)(void*), void*, int)>
c000e474:	6a 7a                	push   0x7a
c000e476:	6a 00                	push   0x0
c000e478:	68 f4 da 01 c0       	push   0xc001daf4
c000e47d:	ff 35 54 e4 02 c0    	push   DWORD PTR ds:0xc002e454
c000e483:	e8 0e ee 00 00       	call   c001d296 <Process::createThread(void (*)(void*), void*, int)>
c000e488:	83 c4 20             	add    esp,0x20
c000e48b:	a3 08 e4 02 c0       	mov    ds:0xc002e408,eax
c000e490:	c6 05 0d cf 02 c0 01 	mov    BYTE PTR ds:0xc002cf0d,0x1
c000e497:	e8 d9 f9 00 00       	call   c001de75 <Vm::initialise8086()>
c000e49c:	e8 b9 47 00 00       	call   c0012c5a <Fs::initVFS()>
c000e4a1:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c000e4a6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e4ac:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4ae:	6a 00                	push   0x0
c000e4b0:	6a 00                	push   0x0
c000e4b2:	6a 00                	push   0x0
c000e4b4:	50                   	push   eax
c000e4b5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4b8:	e8 d5 d4 00 00       	call   c001b992 <Sys::loadSyscalls()>
c000e4bd:	e8 ba b5 00 00       	call   c0019a7c <Krnl::loadSystemEnv()>
c000e4c2:	83 c4 0c             	add    esp,0xc
c000e4c5:	6a 3a                	push   0x3a
c000e4c7:	68 9c 8d 02 c0       	push   0xc0028d9c
c000e4cc:	68 a5 8d 02 c0       	push   0xc0028da5
c000e4d1:	e8 62 c2 00 00       	call   c001a738 <Reg::readIntWithDefault(char*, char*, int)>
c000e4d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4d9:	e8 64 52 00 00       	call   c0013742 <User::loadClockSettings(int)>
c000e4de:	58                   	pop    eax
c000e4df:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c000e4e4:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e4ea:	e8 57 59 00 00       	call   c0013e46 <Device::loadDriversForAll()>
c000e4ef:	5a                   	pop    edx
c000e4f0:	8b 1d 08 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf08
c000e4f6:	59                   	pop    ecx
c000e4f7:	6a 01                	push   0x1
c000e4f9:	68 ad 8d 02 c0       	push   0xc0028dad
c000e4fe:	e8 ee e5 00 00       	call   c001caf1 <Thr::loadDLL(char const*, bool)>
c000e503:	5a                   	pop    edx
c000e504:	59                   	pop    ecx
c000e505:	53                   	push   ebx
c000e506:	50                   	push   eax
c000e507:	e8 f4 e7 00 00       	call   c001cd00 <Thr::executeDLL(unsigned long, void*)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 e1 f0 00 00       	call   c001d5fa <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Krnl::firstTask()+0xdb>

c000e51e <Computer::Computer()>:
c000e51e:	83 ec 0c             	sub    esp,0xc
c000e521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e525:	83 ec 08             	sub    esp,0x8
c000e528:	68 c9 8d 02 c0       	push   0xc0028dc9
c000e52d:	50                   	push   eax
c000e52e:	e8 b9 59 00 00       	call   c0013eec <Device::Device(char const*)>
c000e533:	83 c4 10             	add    esp,0x10
c000e536:	ba 68 8f 02 c0       	mov    edx,0xc0028f68
c000e53b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e53f:	89 10                	mov    DWORD PTR [eax],edx
c000e541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e545:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e553:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e561:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e567:	83 ca 04             	or     edx,0x4
c000e56a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e574:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e57a:	0f b6 d0             	movzx  edx,al
c000e57d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e581:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e58c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e592:	0f b6 d0             	movzx  edx,al
c000e595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e599:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e59e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5a8:	8d 50 01             	lea    edx,[eax+0x1]
c000e5ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e5af:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e5b5:	0f b6 d0             	movzx  edx,al
c000e5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5bc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e5c0:	83 e1 3f             	and    ecx,0x3f
c000e5c3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e5c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5d1:	0f b6 d0             	movzx  edx,al
c000e5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5d8:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e5df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5e9:	0f b6 d0             	movzx  edx,al
c000e5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f0:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5f9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e5ff:	8d 50 01             	lea    edx,[eax+0x1]
c000e602:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e606:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e60c:	0f b6 d0             	movzx  edx,al
c000e60f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e613:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e617:	83 e1 3f             	and    ecx,0x3f
c000e61a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e61e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e622:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e628:	0f b6 d0             	movzx  edx,al
c000e62b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62f:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e63a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e640:	0f b6 d0             	movzx  edx,al
c000e643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e647:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e650:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e656:	8d 50 01             	lea    edx,[eax+0x1]
c000e659:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e65d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e663:	0f b6 d0             	movzx  edx,al
c000e666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e66a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e66e:	83 e1 3f             	and    ecx,0x3f
c000e671:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e675:	90                   	nop
c000e676:	83 c4 0c             	add    esp,0xc
c000e679:	c3                   	ret    

c000e67a <Computer::setBootMessage(char const*)>:
c000e67a:	c3                   	ret    
c000e67b:	90                   	nop

c000e67c <Computer::detectFeatures()>:
c000e67c:	55                   	push   ebp
c000e67d:	57                   	push   edi
c000e67e:	56                   	push   esi
c000e67f:	53                   	push   ebx
c000e680:	83 ec 1c             	sub    esp,0x1c
c000e683:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e687:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e691:	e8 4e 1c ff ff       	call   c00002e4 <detectCPUID>
c000e696:	85 c0                	test   eax,eax
c000e698:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e69e:	0f 95 c2             	setne  dl
c000e6a1:	83 e0 fd             	and    eax,0xfffffffd
c000e6a4:	d1 e2                	shl    edx,1
c000e6a6:	09 d0                	or     eax,edx
c000e6a8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6ae:	a8 02                	test   al,0x2
c000e6b0:	75 46                	jne    c000e6f8 <Computer::detectFeatures()+0x7c>
c000e6b2:	f6 05 21 cf 02 c0 04 	test   BYTE PTR ds:0xc002cf21,0x4
c000e6b9:	74 07                	je     c000e6c2 <Computer::detectFeatures()+0x46>
c000e6bb:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e6c2:	e8 cf 6d 01 00       	call   c0025496 <x87Detect>
c000e6c7:	83 e0 01             	and    eax,0x1
c000e6ca:	c1 e0 04             	shl    eax,0x4
c000e6cd:	88 c2                	mov    dl,al
c000e6cf:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6d5:	83 e0 ef             	and    eax,0xffffffef
c000e6d8:	09 d0                	or     eax,edx
c000e6da:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6e0:	a8 10                	test   al,0x10
c000e6e2:	0f 85 2a 01 00 00    	jne    c000e812 <Computer::detectFeatures()+0x196>
c000e6e8:	84 c0                	test   al,al
c000e6ea:	0f 88 45 01 00 00    	js     c000e835 <Computer::detectFeatures()+0x1b9>
c000e6f0:	83 c4 1c             	add    esp,0x1c
c000e6f3:	5b                   	pop    ebx
c000e6f4:	5e                   	pop    esi
c000e6f5:	5f                   	pop    edi
c000e6f6:	5d                   	pop    ebp
c000e6f7:	c3                   	ret    
c000e6f8:	83 ec 0c             	sub    esp,0xc
c000e6fb:	6a 20                	push   0x20
c000e6fd:	e8 3c 9d 00 00       	call   c001843e <CPU::cpuidCheckEDX(unsigned int)>
c000e702:	83 e0 01             	and    eax,0x1
c000e705:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e70c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e712:	83 e0 f7             	and    eax,0xfffffff7
c000e715:	09 d0                	or     eax,edx
c000e717:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e71d:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e724:	e8 15 9d 00 00       	call   c001843e <CPU::cpuidCheckEDX(unsigned int)>
c000e729:	83 e0 01             	and    eax,0x1
c000e72c:	88 c2                	mov    dl,al
c000e72e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e734:	83 e0 fe             	and    eax,0xfffffffe
c000e737:	09 d0                	or     eax,edx
c000e739:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e73f:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e746:	e8 f3 9c 00 00       	call   c001843e <CPU::cpuidCheckEDX(unsigned int)>
c000e74b:	c1 e0 07             	shl    eax,0x7
c000e74e:	88 c2                	mov    dl,al
c000e750:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e756:	83 e0 7f             	and    eax,0x7f
c000e759:	09 d0                	or     eax,edx
c000e75b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e761:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e768:	e8 d1 9c 00 00       	call   c001843e <CPU::cpuidCheckEDX(unsigned int)>
c000e76d:	83 c4 10             	add    esp,0x10
c000e770:	83 e0 01             	and    eax,0x1
c000e773:	c1 e0 05             	shl    eax,0x5
c000e776:	88 c2                	mov    dl,al
c000e778:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e77e:	83 e0 df             	and    eax,0xffffffdf
c000e781:	09 d0                	or     eax,edx
c000e783:	f7 05 20 cf 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002cf20,0x401
c000e78d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e793:	0f 84 c2 00 00 00    	je     c000e85b <Computer::detectFeatures()+0x1df>
c000e799:	83 e0 fe             	and    eax,0xfffffffe
c000e79c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7a2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e7a8:	88 c2                	mov    dl,al
c000e7aa:	83 e2 09             	and    edx,0x9
c000e7ad:	fe ca                	dec    dl
c000e7af:	75 09                	jne    c000e7ba <Computer::detectFeatures()+0x13e>
c000e7b1:	83 e0 fe             	and    eax,0xfffffffe
c000e7b4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e7ba:	83 ec 0c             	sub    esp,0xc
c000e7bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e7c1:	50                   	push   eax
c000e7c2:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e7c6:	55                   	push   ebp
c000e7c7:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e7cb:	57                   	push   edi
c000e7cc:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e7d0:	56                   	push   esi
c000e7d1:	68 00 00 00 80       	push   0x80000000
c000e7d6:	e8 df 9b 00 00       	call   c00183ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e7db:	83 c4 20             	add    esp,0x20
c000e7de:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e7e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e7e9:	0f 86 c3 fe ff ff    	jbe    c000e6b2 <Computer::detectFeatures()+0x36>
c000e7ef:	83 ec 0c             	sub    esp,0xc
c000e7f2:	50                   	push   eax
c000e7f3:	55                   	push   ebp
c000e7f4:	57                   	push   edi
c000e7f5:	56                   	push   esi
c000e7f6:	68 01 00 00 80       	push   0x80000001
c000e7fb:	e8 ba 9b 00 00       	call   c00183ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e800:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e80a:	83 c4 20             	add    esp,0x20
c000e80d:	e9 a0 fe ff ff       	jmp    c000e6b2 <Computer::detectFeatures()+0x36>
c000e812:	e8 39 6c 01 00       	call   c0025450 <absolutelyNoChanceInHell>
c000e817:	88 c2                	mov    dl,al
c000e819:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e81f:	c1 e2 07             	shl    edx,0x7
c000e822:	83 e0 7f             	and    eax,0x7f
c000e825:	09 d0                	or     eax,edx
c000e827:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e82d:	84 c0                	test   al,al
c000e82f:	0f 89 bb fe ff ff    	jns    c000e6f0 <Computer::detectFeatures()+0x74>
c000e835:	e8 f6 6b 01 00       	call   c0025430 <avxDetect>
c000e83a:	83 e0 01             	and    eax,0x1
c000e83d:	c1 e0 05             	shl    eax,0x5
c000e840:	88 c2                	mov    dl,al
c000e842:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e848:	83 e0 df             	and    eax,0xffffffdf
c000e84b:	09 d0                	or     eax,edx
c000e84d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e853:	83 c4 1c             	add    esp,0x1c
c000e856:	5b                   	pop    ebx
c000e857:	5e                   	pop    esi
c000e858:	5f                   	pop    edi
c000e859:	5d                   	pop    ebp
c000e85a:	c3                   	ret    
c000e85b:	83 ec 0c             	sub    esp,0xc
c000e85e:	68 00 02 00 00       	push   0x200
c000e863:	e8 d6 9b 00 00       	call   c001843e <CPU::cpuidCheckEDX(unsigned int)>
c000e868:	83 c4 10             	add    esp,0x10
c000e86b:	83 e0 01             	and    eax,0x1
c000e86e:	88 c2                	mov    dl,al
c000e870:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e876:	83 e0 fe             	and    eax,0xfffffffe
c000e879:	09 d0                	or     eax,edx
c000e87b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e881:	e9 1c ff ff ff       	jmp    c000e7a2 <Computer::detectFeatures()+0x126>

c000e886 <Computer::displayFeatures()>:
c000e886:	53                   	push   ebx
c000e887:	83 ec 14             	sub    esp,0x14
c000e88a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e88e:	68 d9 8d 02 c0       	push   0xc0028dd9
c000e893:	e8 3d 40 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e898:	83 c4 10             	add    esp,0x10
c000e89b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e8a2:	0f 85 73 02 00 00    	jne    c000eb1b <Computer::displayFeatures()+0x295>
c000e8a8:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e8ad:	83 ec 08             	sub    esp,0x8
c000e8b0:	50                   	push   eax
c000e8b1:	68 ec 8d 02 c0       	push   0xc0028dec
c000e8b6:	e8 1a 40 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e8bb:	83 c4 10             	add    esp,0x10
c000e8be:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e8c5:	0f 85 8c 02 00 00    	jne    c000eb57 <Computer::displayFeatures()+0x2d1>
c000e8cb:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e8d0:	83 ec 08             	sub    esp,0x8
c000e8d3:	50                   	push   eax
c000e8d4:	68 fd 8d 02 c0       	push   0xc0028dfd
c000e8d9:	e8 f7 3f 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e8de:	83 c4 10             	add    esp,0x10
c000e8e1:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e8e8:	0f 85 5f 02 00 00    	jne    c000eb4d <Computer::displayFeatures()+0x2c7>
c000e8ee:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e8f3:	83 ec 08             	sub    esp,0x8
c000e8f6:	50                   	push   eax
c000e8f7:	68 0e 8e 02 c0       	push   0xc0028e0e
c000e8fc:	e8 d4 3f 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e901:	83 c4 10             	add    esp,0x10
c000e904:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e90b:	0f 85 32 02 00 00    	jne    c000eb43 <Computer::displayFeatures()+0x2bd>
c000e911:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e916:	83 ec 08             	sub    esp,0x8
c000e919:	50                   	push   eax
c000e91a:	68 1f 8e 02 c0       	push   0xc0028e1f
c000e91f:	e8 b1 3f 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e924:	83 c4 10             	add    esp,0x10
c000e927:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e92e:	0f 85 05 02 00 00    	jne    c000eb39 <Computer::displayFeatures()+0x2b3>
c000e934:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e939:	83 ec 08             	sub    esp,0x8
c000e93c:	50                   	push   eax
c000e93d:	68 30 8e 02 c0       	push   0xc0028e30
c000e942:	e8 8e 3f 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e947:	83 c4 10             	add    esp,0x10
c000e94a:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e951:	0f 85 d8 01 00 00    	jne    c000eb2f <Computer::displayFeatures()+0x2a9>
c000e957:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e95c:	83 ec 08             	sub    esp,0x8
c000e95f:	50                   	push   eax
c000e960:	68 41 8e 02 c0       	push   0xc0028e41
c000e965:	e8 6b 3f 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e96a:	83 c4 10             	add    esp,0x10
c000e96d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e974:	0f 85 ab 01 00 00    	jne    c000eb25 <Computer::displayFeatures()+0x29f>
c000e97a:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e97f:	83 ec 08             	sub    esp,0x8
c000e982:	50                   	push   eax
c000e983:	68 52 8e 02 c0       	push   0xc0028e52
c000e988:	e8 48 3f 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e98d:	83 c4 10             	add    esp,0x10
c000e990:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e997:	0f 88 1b 02 00 00    	js     c000ebb8 <Computer::displayFeatures()+0x332>
c000e99d:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e9a2:	83 ec 08             	sub    esp,0x8
c000e9a5:	50                   	push   eax
c000e9a6:	68 63 8e 02 c0       	push   0xc0028e63
c000e9ab:	e8 25 3f 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e9b0:	83 c4 10             	add    esp,0x10
c000e9b3:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e9ba:	0f 85 a1 01 00 00    	jne    c000eb61 <Computer::displayFeatures()+0x2db>
c000e9c0:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e9c5:	83 ec 08             	sub    esp,0x8
c000e9c8:	50                   	push   eax
c000e9c9:	68 74 8e 02 c0       	push   0xc0028e74
c000e9ce:	e8 02 3f 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e9dd:	0f 85 cb 01 00 00    	jne    c000ebae <Computer::displayFeatures()+0x328>
c000e9e3:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000e9e8:	83 ec 08             	sub    esp,0x8
c000e9eb:	50                   	push   eax
c000e9ec:	68 85 8e 02 c0       	push   0xc0028e85
c000e9f1:	e8 df 3e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000e9f6:	83 c4 10             	add    esp,0x10
c000e9f9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ea00:	0f 85 9e 01 00 00    	jne    c000eba4 <Computer::displayFeatures()+0x31e>
c000ea06:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000ea0b:	83 ec 08             	sub    esp,0x8
c000ea0e:	50                   	push   eax
c000ea0f:	68 96 8e 02 c0       	push   0xc0028e96
c000ea14:	e8 bc 3e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000ea19:	83 c4 10             	add    esp,0x10
c000ea1c:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ea23:	0f 85 71 01 00 00    	jne    c000eb9a <Computer::displayFeatures()+0x314>
c000ea29:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000ea2e:	83 ec 08             	sub    esp,0x8
c000ea31:	50                   	push   eax
c000ea32:	68 a7 8e 02 c0       	push   0xc0028ea7
c000ea37:	e8 99 3e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000ea3c:	83 c4 10             	add    esp,0x10
c000ea3f:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ea46:	0f 85 44 01 00 00    	jne    c000eb90 <Computer::displayFeatures()+0x30a>
c000ea4c:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000ea51:	83 ec 08             	sub    esp,0x8
c000ea54:	50                   	push   eax
c000ea55:	68 b8 8e 02 c0       	push   0xc0028eb8
c000ea5a:	e8 76 3e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000ea5f:	83 c4 10             	add    esp,0x10
c000ea62:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ea69:	0f 85 17 01 00 00    	jne    c000eb86 <Computer::displayFeatures()+0x300>
c000ea6f:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000ea74:	83 ec 08             	sub    esp,0x8
c000ea77:	50                   	push   eax
c000ea78:	68 c9 8e 02 c0       	push   0xc0028ec9
c000ea7d:	e8 53 3e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000ea82:	83 c4 10             	add    esp,0x10
c000ea85:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ea8c:	0f 85 ea 00 00 00    	jne    c000eb7c <Computer::displayFeatures()+0x2f6>
c000ea92:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000ea97:	83 ec 08             	sub    esp,0x8
c000ea9a:	50                   	push   eax
c000ea9b:	68 da 8e 02 c0       	push   0xc0028eda
c000eaa0:	e8 30 3e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000eaa5:	83 c4 10             	add    esp,0x10
c000eaa8:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eaaf:	0f 88 0d 01 00 00    	js     c000ebc2 <Computer::displayFeatures()+0x33c>
c000eab5:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000eaba:	83 ec 08             	sub    esp,0x8
c000eabd:	50                   	push   eax
c000eabe:	68 eb 8e 02 c0       	push   0xc0028eeb
c000eac3:	e8 0d 3e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000eac8:	83 c4 10             	add    esp,0x10
c000eacb:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ead2:	0f 85 9a 00 00 00    	jne    c000eb72 <Computer::displayFeatures()+0x2ec>
c000ead8:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000eadd:	83 ec 08             	sub    esp,0x8
c000eae0:	50                   	push   eax
c000eae1:	68 fc 8e 02 c0       	push   0xc0028efc
c000eae6:	e8 ea 3d 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000eaeb:	83 c4 10             	add    esp,0x10
c000eaee:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000eaf5:	75 74                	jne    c000eb6b <Computer::displayFeatures()+0x2e5>
c000eaf7:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c000eafc:	83 ec 08             	sub    esp,0x8
c000eaff:	50                   	push   eax
c000eb00:	68 0d 8f 02 c0       	push   0xc0028f0d
c000eb05:	e8 cb 3d 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000eb0a:	c7 44 24 20 83 a7 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a783
c000eb12:	83 c4 18             	add    esp,0x18
c000eb15:	5b                   	pop    ebx
c000eb16:	e9 ba 3d 00 00       	jmp    c00128d5 <Dbg::kprintf(char const*, ...)>
c000eb1b:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb20:	e9 88 fd ff ff       	jmp    c000e8ad <Computer::displayFeatures()+0x27>
c000eb25:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb2a:	e9 50 fe ff ff       	jmp    c000e97f <Computer::displayFeatures()+0xf9>
c000eb2f:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb34:	e9 23 fe ff ff       	jmp    c000e95c <Computer::displayFeatures()+0xd6>
c000eb39:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb3e:	e9 f6 fd ff ff       	jmp    c000e939 <Computer::displayFeatures()+0xb3>
c000eb43:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb48:	e9 c9 fd ff ff       	jmp    c000e916 <Computer::displayFeatures()+0x90>
c000eb4d:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb52:	e9 9c fd ff ff       	jmp    c000e8f3 <Computer::displayFeatures()+0x6d>
c000eb57:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb5c:	e9 6f fd ff ff       	jmp    c000e8d0 <Computer::displayFeatures()+0x4a>
c000eb61:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb66:	e9 5a fe ff ff       	jmp    c000e9c5 <Computer::displayFeatures()+0x13f>
c000eb6b:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb70:	eb 8a                	jmp    c000eafc <Computer::displayFeatures()+0x276>
c000eb72:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb77:	e9 61 ff ff ff       	jmp    c000eadd <Computer::displayFeatures()+0x257>
c000eb7c:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb81:	e9 11 ff ff ff       	jmp    c000ea97 <Computer::displayFeatures()+0x211>
c000eb86:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb8b:	e9 e4 fe ff ff       	jmp    c000ea74 <Computer::displayFeatures()+0x1ee>
c000eb90:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb95:	e9 b7 fe ff ff       	jmp    c000ea51 <Computer::displayFeatures()+0x1cb>
c000eb9a:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eb9f:	e9 8a fe ff ff       	jmp    c000ea2e <Computer::displayFeatures()+0x1a8>
c000eba4:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000eba9:	e9 5d fe ff ff       	jmp    c000ea0b <Computer::displayFeatures()+0x185>
c000ebae:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000ebb3:	e9 30 fe ff ff       	jmp    c000e9e8 <Computer::displayFeatures()+0x162>
c000ebb8:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000ebbd:	e9 e0 fd ff ff       	jmp    c000e9a2 <Computer::displayFeatures()+0x11c>
c000ebc2:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c000ebc7:	e9 ee fe ff ff       	jmp    c000eaba <Computer::displayFeatures()+0x234>

c000ebcc <Computer::rdmsr(unsigned int)>:
c000ebcc:	83 ec 0c             	sub    esp,0xc
c000ebcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebd3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ebda:	74 0a                	je     c000ebe6 <Computer::rdmsr(unsigned int)+0x1a>
c000ebdc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ebe0:	0f 32                	rdmsr  
c000ebe2:	83 c4 0c             	add    esp,0xc
c000ebe5:	c3                   	ret    
c000ebe6:	83 ec 0c             	sub    esp,0xc
c000ebe9:	68 1e 8f 02 c0       	push   0xc0028f1e
c000ebee:	e8 c2 af 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	eb e4                	jmp    c000ebdc <Computer::rdmsr(unsigned int)+0x10>

c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ebf8:	57                   	push   edi
c000ebf9:	56                   	push   esi
c000ebfa:	52                   	push   edx
c000ebfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ec03:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ec07:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ec0e:	74 0e                	je     c000ec1e <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ec10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ec14:	89 f0                	mov    eax,esi
c000ec16:	89 fa                	mov    edx,edi
c000ec18:	0f 30                	wrmsr  
c000ec1a:	58                   	pop    eax
c000ec1b:	5e                   	pop    esi
c000ec1c:	5f                   	pop    edi
c000ec1d:	c3                   	ret    
c000ec1e:	83 ec 0c             	sub    esp,0xc
c000ec21:	68 24 8f 02 c0       	push   0xc0028f24
c000ec26:	e8 8a af 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c000ec2b:	83 c4 10             	add    esp,0x10
c000ec2e:	eb e0                	jmp    c000ec10 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ec30 <Computer::nmiEnabled()>:
c000ec30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec34:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ec3a:	c3                   	ret    
c000ec3b:	90                   	nop

c000ec3c <Computer::readCMOS(unsigned char)>:
c000ec3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec40:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec47:	19 c0                	sbb    eax,eax
c000ec49:	83 e0 80             	and    eax,0xffffff80
c000ec4c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec50:	e6 70                	out    0x70,al
c000ec52:	e4 71                	in     al,0x71
c000ec54:	c3                   	ret    
c000ec55:	90                   	nop

c000ec56 <Computer::enableNMI(bool)>:
c000ec56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec5e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ec64:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ec6c:	eb ce                	jmp    c000ec3c <Computer::readCMOS(unsigned char)>

c000ec6e <Computer::open(int, int, void*)>:
c000ec6e:	56                   	push   esi
c000ec6f:	53                   	push   ebx
c000ec70:	83 ec 10             	sub    esp,0x10
c000ec73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ec77:	f6 05 20 cf 02 c0 04 	test   BYTE PTR ds:0xc002cf20,0x4
c000ec7e:	68 68 22 00 00       	push   0x2268
c000ec83:	0f 94 05 44 be 02 c0 	sete   BYTE PTR ds:0xc002be44
c000ec8a:	e8 95 09 00 00       	call   c000f624 <malloc>
c000ec8f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec92:	89 c6                	mov    esi,eax
c000ec94:	e8 23 8c 00 00       	call   c00178bc <ACPI::ACPI()>
c000ec99:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec9f:	58                   	pop    eax
c000eca0:	5a                   	pop    edx
c000eca1:	56                   	push   esi
c000eca2:	53                   	push   ebx
c000eca3:	e8 54 50 00 00       	call   c0013cfc <Device::addChild(Device*)>
c000eca8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ecab:	e8 cc f9 ff ff       	call   c000e67c <Computer::detectFeatures()>
c000ecb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ecb3:	e8 ce fb ff ff       	call   c000e886 <Computer::displayFeatures()>
c000ecb8:	59                   	pop    ecx
c000ecb9:	5e                   	pop    esi
c000ecba:	6a 01                	push   0x1
c000ecbc:	53                   	push   ebx
c000ecbd:	e8 94 ff ff ff       	call   c000ec56 <Computer::enableNMI(bool)>
c000ecc2:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ecc9:	e8 56 09 00 00       	call   c000f624 <malloc>
c000ecce:	89 04 24             	mov    DWORD PTR [esp],eax
c000ecd1:	89 c6                	mov    esi,eax
c000ecd3:	e8 1e 98 00 00       	call   c00184f6 <CPU::CPU()>
c000ecd8:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ecde:	58                   	pop    eax
c000ecdf:	5a                   	pop    edx
c000ece0:	56                   	push   esi
c000ece1:	53                   	push   ebx
c000ece2:	e8 15 50 00 00       	call   c0013cfc <Device::addChild(Device*)>
c000ece7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eced:	8b 10                	mov    edx,DWORD PTR [eax]
c000ecef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ecf3:	6a 00                	push   0x0
c000ecf5:	6a 00                	push   0x0
c000ecf7:	50                   	push   eax
c000ecf8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecfb:	83 c4 20             	add    esp,0x20
c000ecfe:	e8 6b 55 00 00       	call   c001426e <setupFPU()>
c000ed03:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ed09:	85 c0                	test   eax,eax
c000ed0b:	74 1f                	je     c000ed2c <Computer::open(int, int, void*)+0xbe>
c000ed0d:	83 ec 08             	sub    esp,0x8
c000ed10:	50                   	push   eax
c000ed11:	53                   	push   ebx
c000ed12:	e8 e5 4f 00 00       	call   c0013cfc <Device::addChild(Device*)>
c000ed17:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ed1d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed1f:	6a 00                	push   0x0
c000ed21:	6a 00                	push   0x0
c000ed23:	6a 00                	push   0x0
c000ed25:	50                   	push   eax
c000ed26:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ed29:	83 c4 20             	add    esp,0x20
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 34 e4 00 c0       	push   0xc000e434
c000ed34:	e8 5d e6 00 00       	call   c001d396 <setupMultitasking(void (*)())>
c000ed39:	83 c4 14             	add    esp,0x14
c000ed3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed41:	5b                   	pop    ebx
c000ed42:	5e                   	pop    esi
c000ed43:	c3                   	ret    

c000ed44 <Computer::disableNMI()>:
c000ed44:	6a 00                	push   0x0
c000ed46:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ed4a:	e8 07 ff ff ff       	call   c000ec56 <Computer::enableNMI(bool)>
c000ed4f:	58                   	pop    eax
c000ed50:	5a                   	pop    edx
c000ed51:	c3                   	ret    

c000ed52 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ed52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed56:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ed5d:	19 c0                	sbb    eax,eax
c000ed5f:	83 e0 80             	and    eax,0xffffff80
c000ed62:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ed66:	e6 70                	out    0x70,al
c000ed68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed6c:	e6 71                	out    0x71,al
c000ed6e:	c3                   	ret    
c000ed6f:	90                   	nop

c000ed70 <Computer::handleNMI()>:
c000ed70:	56                   	push   esi
c000ed71:	53                   	push   ebx
c000ed72:	83 ec 10             	sub    esp,0x10
c000ed75:	e4 92                	in     al,0x92
c000ed77:	89 c6                	mov    esi,eax
c000ed79:	e4 61                	in     al,0x61
c000ed7b:	68 2a 8f 02 c0       	push   0xc0028f2a
c000ed80:	88 c3                	mov    bl,al
c000ed82:	e8 4e 3b 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000ed87:	83 c4 10             	add    esp,0x10
c000ed8a:	83 e6 10             	and    esi,0x10
c000ed8d:	75 0d                	jne    c000ed9c <Computer::handleNMI()+0x2c>
c000ed8f:	f6 c3 40             	test   bl,0x40
c000ed92:	75 1d                	jne    c000edb1 <Computer::handleNMI()+0x41>
c000ed94:	84 db                	test   bl,bl
c000ed96:	78 2d                	js     c000edc5 <Computer::handleNMI()+0x55>
c000ed98:	58                   	pop    eax
c000ed99:	5b                   	pop    ebx
c000ed9a:	5e                   	pop    esi
c000ed9b:	c3                   	ret    
c000ed9c:	83 ec 0c             	sub    esp,0xc
c000ed9f:	68 3b 8f 02 c0       	push   0xc0028f3b
c000eda4:	e8 0c ae 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	f6 c3 40             	test   bl,0x40
c000edaf:	74 e3                	je     c000ed94 <Computer::handleNMI()+0x24>
c000edb1:	83 ec 0c             	sub    esp,0xc
c000edb4:	68 48 8f 02 c0       	push   0xc0028f48
c000edb9:	e8 f7 ad 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c000edbe:	83 c4 10             	add    esp,0x10
c000edc1:	84 db                	test   bl,bl
c000edc3:	79 d3                	jns    c000ed98 <Computer::handleNMI()+0x28>
c000edc5:	c7 44 24 10 52 8f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028f52
c000edcd:	5a                   	pop    edx
c000edce:	5b                   	pop    ebx
c000edcf:	5e                   	pop    esi
c000edd0:	e9 e0 ad 00 00       	jmp    c0019bb5 <Krnl::panic(char const*)>
c000edd5:	90                   	nop

c000edd6 <Computer::setDiskActivityLight(int, bool)>:
c000edd6:	56                   	push   esi
c000edd7:	53                   	push   ebx
c000edd8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eddc:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ede1:	77 1b                	ja     c000edfe <Computer::setDiskActivityLight(int, bool)+0x28>
c000ede3:	e4 92                	in     al,0x92
c000ede5:	bb 40 00 00 00       	mov    ebx,0x40
c000edea:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000edee:	89 da                	mov    edx,ebx
c000edf0:	d3 e2                	shl    edx,cl
c000edf2:	89 f1                	mov    ecx,esi
c000edf4:	f7 d2                	not    edx
c000edf6:	d3 e3                	shl    ebx,cl
c000edf8:	21 d0                	and    eax,edx
c000edfa:	09 d8                	or     eax,ebx
c000edfc:	e6 92                	out    0x92,al
c000edfe:	5b                   	pop    ebx
c000edff:	5e                   	pop    esi
c000ee00:	c3                   	ret    
c000ee01:	90                   	nop

c000ee02 <GDTEntry::setBase(unsigned int)>:
c000ee02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee06:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ee0a:	89 c1                	mov    ecx,eax
c000ee0c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ee10:	c1 e9 10             	shr    ecx,0x10
c000ee13:	c1 e8 18             	shr    eax,0x18
c000ee16:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ee19:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ee1c:	c3                   	ret    
c000ee1d:	90                   	nop

c000ee1e <GDTEntry::setLimit(unsigned int)>:
c000ee1e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ee26:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ee29:	66 89 01             	mov    WORD PTR [ecx],ax
c000ee2c:	83 e2 f0             	and    edx,0xfffffff0
c000ee2f:	c1 e8 10             	shr    eax,0x10
c000ee32:	83 e0 0f             	and    eax,0xf
c000ee35:	09 d0                	or     eax,edx
c000ee37:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ee3a:	c3                   	ret    
c000ee3b:	90                   	nop

c000ee3c <GDT::GDT()>:
c000ee3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ee50:	90                   	nop
c000ee51:	c3                   	ret    

c000ee52 <GDT::addEntry(GDTEntry)>:
c000ee52:	53                   	push   ebx
c000ee53:	83 ec 0c             	sub    esp,0xc
c000ee56:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ee5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee5c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ee63:	52                   	push   edx
c000ee64:	50                   	push   eax
c000ee65:	68 8c 8f 02 c0       	push   0xc0028f8c
c000ee6a:	e8 66 3a 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000ee6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ee71:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ee75:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ee79:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ee7d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ee81:	8d 50 01             	lea    edx,[eax+0x1]
c000ee84:	c1 e0 03             	shl    eax,0x3
c000ee87:	89 13                	mov    DWORD PTR [ebx],edx
c000ee89:	83 c4 18             	add    esp,0x18
c000ee8c:	5b                   	pop    ebx
c000ee8d:	c3                   	ret    

c000ee8e <GDT::getNumberOfEntries()>:
c000ee8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee92:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee94:	c3                   	ret    
c000ee95:	90                   	nop

c000ee96 <GDT::flush()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee9c:	83 c0 04             	add    eax,0x4
c000ee9f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000eea6:	a3 12 cf 02 c0       	mov    ds:0xc002cf12,eax
c000eeab:	66 89 15 10 cf 02 c0 	mov    WORD PTR ds:0xc002cf10,dx
c000eeb2:	e9 91 15 ff ff       	jmp    c0000448 <loadGDT>
c000eeb7:	90                   	nop

c000eeb8 <GDT::setup()>:
c000eeb8:	55                   	push   ebp
c000eeb9:	57                   	push   edi
c000eeba:	56                   	push   esi
c000eebb:	53                   	push   ebx
c000eebc:	83 ec 3c             	sub    esp,0x3c
c000eebf:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000eec3:	6a 00                	push   0x0
c000eec5:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000eec9:	53                   	push   ebx
c000eeca:	e8 33 ff ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c000eecf:	6a 00                	push   0x0
c000eed1:	53                   	push   ebx
c000eed2:	e8 47 ff ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c000eed7:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000eedf:	6a 00                	push   0x0
c000eee1:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000eee5:	53                   	push   ebx
c000eee6:	e8 17 ff ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c000eeeb:	68 ff ff ff 00       	push   0xffffff
c000eef0:	53                   	push   ebx
c000eef1:	e8 28 ff ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c000eef6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000eefa:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeff:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ef04:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef08:	83 c4 20             	add    esp,0x20
c000ef0b:	6a 00                	push   0x0
c000ef0d:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ef11:	53                   	push   ebx
c000ef12:	e8 eb fe ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c000ef17:	68 ff ff ff 00       	push   0xffffff
c000ef1c:	53                   	push   ebx
c000ef1d:	e8 fc fe ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c000ef22:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ef26:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef2a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ef2e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ef32:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ef36:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ef3b:	0d 00 92 c0 00       	or     eax,0xc09200
c000ef40:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ef44:	89 d8                	mov    eax,ebx
c000ef46:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ef4a:	80 cc 60             	or     ah,0x60
c000ef4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ef51:	83 c4 0c             	add    esp,0xc
c000ef54:	89 f8                	mov    eax,edi
c000ef56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef5a:	80 cc 60             	or     ah,0x60
c000ef5d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef61:	89 c7                	mov    edi,eax
c000ef63:	55                   	push   ebp
c000ef64:	e8 e9 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef69:	83 c4 0c             	add    esp,0xc
c000ef6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef74:	55                   	push   ebp
c000ef75:	e8 d8 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef7a:	83 c4 0c             	add    esp,0xc
c000ef7d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ef85:	55                   	push   ebp
c000ef86:	e8 c7 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef8b:	83 c4 0c             	add    esp,0xc
c000ef8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef92:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef96:	53                   	push   ebx
c000ef97:	51                   	push   ecx
c000ef98:	55                   	push   ebp
c000ef99:	e8 b4 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000ef9e:	83 c4 0c             	add    esp,0xc
c000efa1:	57                   	push   edi
c000efa2:	56                   	push   esi
c000efa3:	55                   	push   ebp
c000efa4:	e8 a9 fe ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c000efa9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000efac:	e8 e5 fe ff ff       	call   c000ee96 <GDT::flush()>
c000efb1:	83 c4 4c             	add    esp,0x4c
c000efb4:	5b                   	pop    ebx
c000efb5:	5e                   	pop    esi
c000efb6:	5f                   	pop    edi
c000efb7:	5d                   	pop    ebp
c000efb8:	c3                   	ret    

c000efb9 <idleFunction(void*)>:
c000efb9:	53                   	push   ebx
c000efba:	83 ec 08             	sub    esp,0x8
c000efbd:	e8 a4 e1 00 00       	call   c001d166 <unlockScheduler()>
c000efc2:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c000efc7:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000efcd:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000efd4:	74 3c                	je     c000f012 <idleFunction(void*)+0x59>
c000efd6:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000efdd:	74 33                	je     c000f012 <idleFunction(void*)+0x59>
c000efdf:	31 db                	xor    ebx,ebx
c000efe1:	52                   	push   edx
c000efe2:	52                   	push   edx
c000efe3:	68 e1 00 00 00       	push   0xe1
c000efe8:	50                   	push   eax
c000efe9:	e8 de fb ff ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c000efee:	53                   	push   ebx
c000efef:	83 e0 02             	and    eax,0x2
c000eff2:	50                   	push   eax
c000eff3:	68 e1 00 00 00       	push   0xe1
c000eff8:	ff 35 08 cf 02 c0    	push   DWORD PTR ds:0xc002cf08
c000effe:	e8 f5 fb ff ff       	call   c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f003:	83 c4 20             	add    esp,0x20
c000f006:	e8 74 12 ff ff       	call   c000027f <doTPAUSE>
c000f00b:	e8 c0 84 01 00       	call   c00274d0 <idleCommon()>
c000f010:	eb f4                	jmp    c000f006 <idleFunction(void*)+0x4d>
c000f012:	fb                   	sti    
c000f013:	f4                   	hlt    
c000f014:	e8 b7 84 01 00       	call   c00274d0 <idleCommon()>
c000f019:	eb f7                	jmp    c000f012 <idleFunction(void*)+0x59>
c000f01b:	90                   	nop

c000f01c <IDTEntry::IDTEntry(bool)>:
c000f01c:	83 ec 04             	sub    esp,0x4
c000f01f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f023:	88 04 24             	mov    BYTE PTR [esp],al
c000f026:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f030:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f034:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f038:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f03c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f03f:	83 e2 f0             	and    edx,0xfffffff0
c000f042:	83 ca 0e             	or     edx,0xe
c000f045:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f048:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f04c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f04f:	83 e2 ef             	and    edx,0xffffffef
c000f052:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f055:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f059:	74 04                	je     c000f05f <IDTEntry::IDTEntry(bool)+0x43>
c000f05b:	b2 03                	mov    dl,0x3
c000f05d:	eb 02                	jmp    c000f061 <IDTEntry::IDTEntry(bool)+0x45>
c000f05f:	b2 00                	mov    dl,0x0
c000f061:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f065:	83 e2 03             	and    edx,0x3
c000f068:	88 d1                	mov    cl,dl
c000f06a:	c1 e1 05             	shl    ecx,0x5
c000f06d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f070:	83 e2 9f             	and    edx,0xffffff9f
c000f073:	09 ca                	or     edx,ecx
c000f075:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f078:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f07c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f07f:	83 ca 80             	or     edx,0xffffff80
c000f082:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f085:	90                   	nop
c000f086:	83 c4 04             	add    esp,0x4
c000f089:	c3                   	ret    

c000f08a <IDTEntry::setOffset(unsigned int)>:
c000f08a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f08e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f092:	66 89 02             	mov    WORD PTR [edx],ax
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f09c:	c3                   	ret    
c000f09d:	90                   	nop

c000f09e <IDT::IDT()>:
c000f09e:	90                   	nop
c000f09f:	c3                   	ret    

c000f0a0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f0a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a4:	83 c0 30             	add    eax,0x30
c000f0a7:	c3                   	ret    

c000f0a8 <IDT::addEntry(IDTEntry, int)>:
c000f0a8:	53                   	push   ebx
c000f0a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f0b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f0b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f0b9:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f0bc:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f0c0:	5b                   	pop    ebx
c000f0c1:	c3                   	ret    

c000f0c2 <IDT::addEntry(int, void (*)(), bool)>:
c000f0c2:	53                   	push   ebx
c000f0c3:	83 ec 10             	sub    esp,0x10
c000f0c6:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f0cb:	50                   	push   eax
c000f0cc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f0d0:	53                   	push   ebx
c000f0d1:	e8 46 ff ff ff       	call   c000f01c <IDTEntry::IDTEntry(bool)>
c000f0d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f0da:	53                   	push   ebx
c000f0db:	e8 aa ff ff ff       	call   c000f08a <IDTEntry::setOffset(unsigned int)>
c000f0e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f0ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f0f0:	e8 b3 ff ff ff       	call   c000f0a8 <IDT::addEntry(IDTEntry, int)>
c000f0f5:	83 c4 30             	add    esp,0x30
c000f0f8:	5b                   	pop    ebx
c000f0f9:	c3                   	ret    

c000f0fa <IDT::flush()>:
c000f0fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0fe:	66 c7 05 18 cf 02 c0 ff 07 	mov    WORD PTR ds:0xc002cf18,0x7ff
c000f107:	a3 1a cf 02 c0       	mov    ds:0xc002cf1a,eax
c000f10c:	0f 01 1d 18 cf 02 c0 	lidtd  ds:0xc002cf18
c000f113:	c3                   	ret    

c000f114 <IDT::setup()>:
c000f114:	57                   	push   edi
c000f115:	56                   	push   esi
c000f116:	53                   	push   ebx
c000f117:	83 ec 10             	sub    esp,0x10
c000f11a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f11e:	6a 00                	push   0x0
c000f120:	68 68 04 00 c0       	push   0xc0000468
c000f125:	6a 00                	push   0x0
c000f127:	53                   	push   ebx
c000f128:	e8 95 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f12d:	6a 00                	push   0x0
c000f12f:	68 78 04 00 c0       	push   0xc0000478
c000f134:	6a 01                	push   0x1
c000f136:	53                   	push   ebx
c000f137:	e8 86 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f13c:	83 c4 20             	add    esp,0x20
c000f13f:	6a 00                	push   0x0
c000f141:	68 82 04 00 c0       	push   0xc0000482
c000f146:	6a 02                	push   0x2
c000f148:	53                   	push   ebx
c000f149:	e8 74 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f14e:	6a 00                	push   0x0
c000f150:	68 8c 04 00 c0       	push   0xc000048c
c000f155:	6a 03                	push   0x3
c000f157:	53                   	push   ebx
c000f158:	e8 65 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f15d:	83 c4 20             	add    esp,0x20
c000f160:	6a 00                	push   0x0
c000f162:	68 96 04 00 c0       	push   0xc0000496
c000f167:	6a 04                	push   0x4
c000f169:	53                   	push   ebx
c000f16a:	e8 53 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f16f:	6a 00                	push   0x0
c000f171:	68 a0 04 00 c0       	push   0xc00004a0
c000f176:	6a 05                	push   0x5
c000f178:	53                   	push   ebx
c000f179:	e8 44 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f17e:	83 c4 20             	add    esp,0x20
c000f181:	6a 00                	push   0x0
c000f183:	68 aa 04 00 c0       	push   0xc00004aa
c000f188:	6a 06                	push   0x6
c000f18a:	53                   	push   ebx
c000f18b:	e8 32 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f190:	6a 00                	push   0x0
c000f192:	68 b4 04 00 c0       	push   0xc00004b4
c000f197:	6a 07                	push   0x7
c000f199:	53                   	push   ebx
c000f19a:	e8 23 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f19f:	83 c4 20             	add    esp,0x20
c000f1a2:	6a 00                	push   0x0
c000f1a4:	68 be 04 00 c0       	push   0xc00004be
c000f1a9:	6a 08                	push   0x8
c000f1ab:	53                   	push   ebx
c000f1ac:	e8 11 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1b1:	6a 00                	push   0x0
c000f1b3:	68 c6 04 00 c0       	push   0xc00004c6
c000f1b8:	6a 09                	push   0x9
c000f1ba:	53                   	push   ebx
c000f1bb:	e8 02 ff ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1c0:	83 c4 20             	add    esp,0x20
c000f1c3:	6a 00                	push   0x0
c000f1c5:	68 d0 04 00 c0       	push   0xc00004d0
c000f1ca:	6a 0a                	push   0xa
c000f1cc:	53                   	push   ebx
c000f1cd:	e8 f0 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1d2:	6a 00                	push   0x0
c000f1d4:	68 d8 04 00 c0       	push   0xc00004d8
c000f1d9:	6a 0b                	push   0xb
c000f1db:	53                   	push   ebx
c000f1dc:	e8 e1 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1e1:	83 c4 20             	add    esp,0x20
c000f1e4:	6a 00                	push   0x0
c000f1e6:	68 e0 04 00 c0       	push   0xc00004e0
c000f1eb:	6a 0c                	push   0xc
c000f1ed:	53                   	push   ebx
c000f1ee:	e8 cf fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f1f3:	6a 00                	push   0x0
c000f1f5:	68 e8 04 00 c0       	push   0xc00004e8
c000f1fa:	6a 0d                	push   0xd
c000f1fc:	53                   	push   ebx
c000f1fd:	e8 c0 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f202:	83 c4 20             	add    esp,0x20
c000f205:	6a 00                	push   0x0
c000f207:	68 f0 04 00 c0       	push   0xc00004f0
c000f20c:	6a 0e                	push   0xe
c000f20e:	53                   	push   ebx
c000f20f:	e8 ae fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f214:	6a 00                	push   0x0
c000f216:	68 f8 04 00 c0       	push   0xc00004f8
c000f21b:	6a 0f                	push   0xf
c000f21d:	53                   	push   ebx
c000f21e:	e8 9f fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f223:	83 c4 20             	add    esp,0x20
c000f226:	6a 00                	push   0x0
c000f228:	68 02 05 00 c0       	push   0xc0000502
c000f22d:	6a 10                	push   0x10
c000f22f:	53                   	push   ebx
c000f230:	e8 8d fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f235:	6a 00                	push   0x0
c000f237:	68 0c 05 00 c0       	push   0xc000050c
c000f23c:	6a 11                	push   0x11
c000f23e:	53                   	push   ebx
c000f23f:	e8 7e fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f244:	83 c4 20             	add    esp,0x20
c000f247:	6a 00                	push   0x0
c000f249:	68 16 05 00 c0       	push   0xc0000516
c000f24e:	6a 12                	push   0x12
c000f250:	53                   	push   ebx
c000f251:	e8 6c fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f256:	6a 01                	push   0x1
c000f258:	68 b0 05 00 c0       	push   0xc00005b0
c000f25d:	6a 60                	push   0x60
c000f25f:	53                   	push   ebx
c000f260:	e8 5d fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f265:	83 c4 20             	add    esp,0x20
c000f268:	6a 00                	push   0x0
c000f26a:	68 b7 05 00 c0       	push   0xc00005b7
c000f26f:	6a 20                	push   0x20
c000f271:	53                   	push   ebx
c000f272:	e8 4b fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f277:	6a 00                	push   0x0
c000f279:	68 a2 05 00 c0       	push   0xc00005a2
c000f27e:	6a 21                	push   0x21
c000f280:	53                   	push   ebx
c000f281:	e8 3c fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f286:	83 c4 20             	add    esp,0x20
c000f289:	6a 00                	push   0x0
c000f28b:	68 a9 05 00 c0       	push   0xc00005a9
c000f290:	6a 22                	push   0x22
c000f292:	53                   	push   ebx
c000f293:	e8 2a fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f298:	6a 00                	push   0x0
c000f29a:	68 20 05 00 c0       	push   0xc0000520
c000f29f:	6a 23                	push   0x23
c000f2a1:	53                   	push   ebx
c000f2a2:	e8 1b fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2a7:	83 c4 20             	add    esp,0x20
c000f2aa:	6a 00                	push   0x0
c000f2ac:	68 2a 05 00 c0       	push   0xc000052a
c000f2b1:	6a 24                	push   0x24
c000f2b3:	53                   	push   ebx
c000f2b4:	e8 09 fe ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2b9:	6a 00                	push   0x0
c000f2bb:	68 34 05 00 c0       	push   0xc0000534
c000f2c0:	6a 25                	push   0x25
c000f2c2:	53                   	push   ebx
c000f2c3:	e8 fa fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2c8:	83 c4 20             	add    esp,0x20
c000f2cb:	6a 00                	push   0x0
c000f2cd:	68 3e 05 00 c0       	push   0xc000053e
c000f2d2:	6a 26                	push   0x26
c000f2d4:	53                   	push   ebx
c000f2d5:	e8 e8 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2da:	6a 00                	push   0x0
c000f2dc:	68 48 05 00 c0       	push   0xc0000548
c000f2e1:	6a 27                	push   0x27
c000f2e3:	53                   	push   ebx
c000f2e4:	e8 d9 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2e9:	83 c4 20             	add    esp,0x20
c000f2ec:	6a 00                	push   0x0
c000f2ee:	68 52 05 00 c0       	push   0xc0000552
c000f2f3:	6a 28                	push   0x28
c000f2f5:	53                   	push   ebx
c000f2f6:	e8 c7 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f2fb:	6a 00                	push   0x0
c000f2fd:	68 5c 05 00 c0       	push   0xc000055c
c000f302:	6a 29                	push   0x29
c000f304:	53                   	push   ebx
c000f305:	e8 b8 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f30a:	83 c4 20             	add    esp,0x20
c000f30d:	6a 00                	push   0x0
c000f30f:	68 66 05 00 c0       	push   0xc0000566
c000f314:	6a 2a                	push   0x2a
c000f316:	53                   	push   ebx
c000f317:	e8 a6 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f31c:	6a 00                	push   0x0
c000f31e:	68 70 05 00 c0       	push   0xc0000570
c000f323:	6a 2b                	push   0x2b
c000f325:	53                   	push   ebx
c000f326:	e8 97 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f32b:	83 c4 20             	add    esp,0x20
c000f32e:	6a 00                	push   0x0
c000f330:	68 7a 05 00 c0       	push   0xc000057a
c000f335:	6a 2c                	push   0x2c
c000f337:	53                   	push   ebx
c000f338:	e8 85 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f33d:	6a 00                	push   0x0
c000f33f:	68 84 05 00 c0       	push   0xc0000584
c000f344:	6a 2d                	push   0x2d
c000f346:	53                   	push   ebx
c000f347:	e8 76 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f34c:	83 c4 20             	add    esp,0x20
c000f34f:	6a 00                	push   0x0
c000f351:	68 8e 05 00 c0       	push   0xc000058e
c000f356:	6a 2e                	push   0x2e
c000f358:	53                   	push   ebx
c000f359:	e8 64 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f35e:	6a 00                	push   0x0
c000f360:	68 98 05 00 c0       	push   0xc0000598
c000f365:	6a 2f                	push   0x2f
c000f367:	53                   	push   ebx
c000f368:	e8 55 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f36d:	83 c4 20             	add    esp,0x20
c000f370:	6a 00                	push   0x0
c000f372:	68 ed 05 00 c0       	push   0xc00005ed
c000f377:	6a 30                	push   0x30
c000f379:	53                   	push   ebx
c000f37a:	e8 43 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f37f:	6a 00                	push   0x0
c000f381:	68 f7 05 00 c0       	push   0xc00005f7
c000f386:	6a 31                	push   0x31
c000f388:	53                   	push   ebx
c000f389:	e8 34 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f38e:	83 c4 20             	add    esp,0x20
c000f391:	6a 00                	push   0x0
c000f393:	68 01 06 00 c0       	push   0xc0000601
c000f398:	6a 32                	push   0x32
c000f39a:	53                   	push   ebx
c000f39b:	e8 22 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3a0:	6a 00                	push   0x0
c000f3a2:	68 0b 06 00 c0       	push   0xc000060b
c000f3a7:	6a 33                	push   0x33
c000f3a9:	53                   	push   ebx
c000f3aa:	e8 13 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3af:	83 c4 20             	add    esp,0x20
c000f3b2:	6a 00                	push   0x0
c000f3b4:	68 15 06 00 c0       	push   0xc0000615
c000f3b9:	6a 34                	push   0x34
c000f3bb:	53                   	push   ebx
c000f3bc:	e8 01 fd ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3c1:	6a 00                	push   0x0
c000f3c3:	68 1f 06 00 c0       	push   0xc000061f
c000f3c8:	6a 35                	push   0x35
c000f3ca:	53                   	push   ebx
c000f3cb:	e8 f2 fc ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3d0:	83 c4 20             	add    esp,0x20
c000f3d3:	6a 00                	push   0x0
c000f3d5:	68 29 06 00 c0       	push   0xc0000629
c000f3da:	6a 36                	push   0x36
c000f3dc:	53                   	push   ebx
c000f3dd:	e8 e0 fc ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3e2:	6a 00                	push   0x0
c000f3e4:	68 33 06 00 c0       	push   0xc0000633
c000f3e9:	6a 37                	push   0x37
c000f3eb:	53                   	push   ebx
c000f3ec:	e8 d1 fc ff ff       	call   c000f0c2 <IDT::addEntry(int, void (*)(), bool)>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	e8 7c 26 00 00       	call   c0011a75 <Virt::getAKernelVAS()>
c000f3f9:	52                   	push   edx
c000f3fa:	6a 03                	push   0x3
c000f3fc:	6a 02                	push   0x2
c000f3fe:	50                   	push   eax
c000f3ff:	e8 ac 2c 00 00       	call   c00120b0 <VAS::allocatePages(int, int)>
c000f404:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f40b:	89 c6                	mov    esi,eax
c000f40d:	e8 12 02 00 00       	call   c000f624 <malloc>
c000f412:	81 c6 00 20 00 00    	add    esi,0x2000
c000f418:	89 04 24             	mov    DWORD PTR [esp],eax
c000f41b:	89 c7                	mov    edi,eax
c000f41d:	e8 f4 1d 00 00       	call   c0011216 <TSS::TSS()>
c000f422:	83 c4 0c             	add    esp,0xc
c000f425:	68 be 04 00 c0       	push   0xc00004be
c000f42a:	56                   	push   esi
c000f42b:	57                   	push   edi
c000f42c:	e8 25 1e 00 00       	call   c0011256 <TSS::setup(unsigned long, unsigned long)>
c000f431:	59                   	pop    ecx
c000f432:	89 c6                	mov    esi,eax
c000f434:	5f                   	pop    edi
c000f435:	6a 00                	push   0x0
c000f437:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f43b:	50                   	push   eax
c000f43c:	e8 db fb ff ff       	call   c000f01c <IDTEntry::IDTEntry(bool)>
c000f441:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f445:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f44a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f451:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f457:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f45b:	80 ce 05             	or     dh,0x5
c000f45e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f461:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f465:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f469:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f46c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f46f:	e8 86 fc ff ff       	call   c000f0fa <IDT::flush()>
c000f474:	83 c4 20             	add    esp,0x20
c000f477:	5b                   	pop    ebx
c000f478:	5e                   	pop    esi
c000f479:	5f                   	pop    edi
c000f47a:	c3                   	ret    

c000f47b <sbrk>:
c000f47b:	55                   	push   ebp
c000f47c:	57                   	push   edi
c000f47d:	56                   	push   esi
c000f47e:	53                   	push   ebx
c000f47f:	83 ec 1c             	sub    esp,0x1c
c000f482:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f486:	85 c0                	test   eax,eax
c000f488:	74 3e                	je     c000f4c8 <sbrk+0x4d>
c000f48a:	78 43                	js     c000f4cf <sbrk+0x54>
c000f48c:	8b 15 08 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf08
c000f492:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f498:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f49e:	83 e2 01             	and    edx,0x1
c000f4a1:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f4a5:	8b 0d 2c be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be2c
c000f4ab:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f4af:	05 ff 0f 00 00       	add    eax,0xfff
c000f4b4:	89 c2                	mov    edx,eax
c000f4b6:	78 2f                	js     c000f4e7 <sbrk+0x6c>
c000f4b8:	c1 fa 0c             	sar    edx,0xc
c000f4bb:	89 d7                	mov    edi,edx
c000f4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f4c1:	be 00 00 00 00       	mov    esi,0x0
c000f4c6:	eb 36                	jmp    c000f4fe <sbrk+0x83>
c000f4c8:	a1 2c be 02 c0       	mov    eax,ds:0xc002be2c
c000f4cd:	eb 74                	jmp    c000f543 <sbrk+0xc8>
c000f4cf:	83 ec 08             	sub    esp,0x8
c000f4d2:	50                   	push   eax
c000f4d3:	68 a8 8f 02 c0       	push   0xc0028fa8
c000f4d8:	e8 f8 33 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000f4dd:	83 c4 10             	add    esp,0x10
c000f4e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4e5:	eb 5c                	jmp    c000f543 <sbrk+0xc8>
c000f4e7:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f4ed:	eb c9                	jmp    c000f4b8 <sbrk+0x3d>
c000f4ef:	81 05 2c be 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002be2c,0x1000
c000f4f9:	46                   	inc    esi
c000f4fa:	39 f7                	cmp    edi,esi
c000f4fc:	74 34                	je     c000f532 <sbrk+0xb7>
c000f4fe:	e8 72 25 00 00       	call   c0011a75 <Virt::getAKernelVAS()>
c000f503:	89 c3                	mov    ebx,eax
c000f505:	8b 2d 2c be 02 c0    	mov    ebp,DWORD PTR ds:0xc002be2c
c000f50b:	e8 93 07 00 00       	call   c000fca3 <Phys::allocatePage()>
c000f510:	68 01 04 00 00       	push   0x401
c000f515:	55                   	push   ebp
c000f516:	50                   	push   eax
c000f517:	53                   	push   ebx
c000f518:	e8 93 2a 00 00       	call   c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f51d:	83 c4 10             	add    esp,0x10
c000f520:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f525:	74 c8                	je     c000f4ef <sbrk+0x74>
c000f527:	8b 1d 2c be 02 c0    	mov    ebx,DWORD PTR ds:0xc002be2c
c000f52d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f530:	eb bd                	jmp    c000f4ef <sbrk+0x74>
c000f532:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f537:	75 12                	jne    c000f54b <sbrk+0xd0>
c000f539:	0f 20 d8             	mov    eax,cr3
c000f53c:	0f 22 d8             	mov    cr3,eax
c000f53f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f543:	83 c4 1c             	add    esp,0x1c
c000f546:	5b                   	pop    ebx
c000f547:	5e                   	pop    esi
c000f548:	5f                   	pop    edi
c000f549:	5d                   	pop    ebp
c000f54a:	c3                   	ret    
c000f54b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f54f:	89 cb                	mov    ebx,ecx
c000f551:	c1 eb 0a             	shr    ebx,0xa
c000f554:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f55a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f560:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f564:	c1 e0 0c             	shl    eax,0xc
c000f567:	01 c8                	add    eax,ecx
c000f569:	c1 e8 0a             	shr    eax,0xa
c000f56c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f571:	2d 00 00 40 00       	sub    eax,0x400000
c000f576:	39 c3                	cmp    ebx,eax
c000f578:	77 c5                	ja     c000f53f <sbrk+0xc4>
c000f57a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f57d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f583:	39 d8                	cmp    eax,ebx
c000f585:	73 f3                	jae    c000f57a <sbrk+0xff>
c000f587:	eb b6                	jmp    c000f53f <sbrk+0xc4>

c000f589 <mmap>:
c000f589:	83 ec 18             	sub    esp,0x18
c000f58c:	68 d8 8f 02 c0       	push   0xc0028fd8
c000f591:	e8 1f a6 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c000f596:	b8 00 00 00 00       	mov    eax,0x0
c000f59b:	83 c4 1c             	add    esp,0x1c
c000f59e:	c3                   	ret    

c000f59f <munmap>:
c000f59f:	83 ec 18             	sub    esp,0x18
c000f5a2:	68 dd 8f 02 c0       	push   0xc0028fdd
c000f5a7:	e8 09 a6 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c000f5ac:	b8 00 00 00 00       	mov    eax,0x0
c000f5b1:	83 c4 1c             	add    esp,0x1c
c000f5b4:	c3                   	ret    

c000f5b5 <liballoc_lock()>:
c000f5b5:	83 ec 0c             	sub    esp,0xc
c000f5b8:	e8 a7 db 00 00       	call   c001d164 <lockScheduler()>
c000f5bd:	b8 00 00 00 00       	mov    eax,0x0
c000f5c2:	83 c4 0c             	add    esp,0xc
c000f5c5:	c3                   	ret    

c000f5c6 <liballoc_unlock()>:
c000f5c6:	83 ec 0c             	sub    esp,0xc
c000f5c9:	e8 98 db 00 00       	call   c001d166 <unlockScheduler()>
c000f5ce:	b8 00 00 00 00       	mov    eax,0x0
c000f5d3:	83 c4 0c             	add    esp,0xc
c000f5d6:	c3                   	ret    

c000f5d7 <liballoc_alloc(int)>:
c000f5d7:	83 ec 0c             	sub    esp,0xc
c000f5da:	e8 96 24 00 00       	call   c0011a75 <Virt::getAKernelVAS()>
c000f5df:	83 ec 04             	sub    esp,0x4
c000f5e2:	6a 01                	push   0x1
c000f5e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f5e8:	50                   	push   eax
c000f5e9:	e8 c2 2a 00 00       	call   c00120b0 <VAS::allocatePages(int, int)>
c000f5ee:	83 c4 1c             	add    esp,0x1c
c000f5f1:	c3                   	ret    

c000f5f2 <liballoc_free(void*, int)>:
c000f5f2:	83 ec 0c             	sub    esp,0xc
c000f5f5:	e8 7b 24 00 00       	call   c0011a75 <Virt::getAKernelVAS()>
c000f5fa:	83 ec 08             	sub    esp,0x8
c000f5fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f601:	50                   	push   eax
c000f602:	e8 65 27 00 00       	call   c0011d6c <VAS::freeAllocatedPages(unsigned long)>
c000f607:	b8 00 00 00 00       	mov    eax,0x0
c000f60c:	83 c4 1c             	add    esp,0x1c
c000f60f:	c3                   	ret    

c000f610 <realloc>:
c000f610:	83 ec 14             	sub    esp,0x14
c000f613:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f617:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f61b:	e8 1d 1e ff ff       	call   c000143d <dlrealloc>
c000f620:	83 c4 1c             	add    esp,0x1c
c000f623:	c3                   	ret    

c000f624 <malloc>:
c000f624:	83 ec 18             	sub    esp,0x18
c000f627:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f62b:	e8 d0 18 ff ff       	call   c0000f00 <dlmalloc>
c000f630:	83 c4 1c             	add    esp,0x1c
c000f633:	c3                   	ret    

c000f634 <free>:
c000f634:	83 ec 18             	sub    esp,0x18
c000f637:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f63b:	e8 65 15 ff ff       	call   c0000ba5 <dlfree>
c000f640:	83 c4 1c             	add    esp,0x1c
c000f643:	c3                   	ret    

c000f644 <rfree>:
c000f644:	83 ec 18             	sub    esp,0x18
c000f647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f64b:	e8 55 15 ff ff       	call   c0000ba5 <dlfree>
c000f650:	83 c4 1c             	add    esp,0x1c
c000f653:	c3                   	ret    

c000f654 <calloc>:
c000f654:	56                   	push   esi
c000f655:	53                   	push   ebx
c000f656:	83 ec 10             	sub    esp,0x10
c000f659:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f65d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f662:	53                   	push   ebx
c000f663:	e8 bc ff ff ff       	call   c000f624 <malloc>
c000f668:	89 c6                	mov    esi,eax
c000f66a:	83 c4 0c             	add    esp,0xc
c000f66d:	53                   	push   ebx
c000f66e:	6a 00                	push   0x0
c000f670:	50                   	push   eax
c000f671:	e8 4e 10 ff ff       	call   c00006c4 <memset>
c000f676:	89 f0                	mov    eax,esi
c000f678:	83 c4 14             	add    esp,0x14
c000f67b:	5b                   	pop    ebx
c000f67c:	5e                   	pop    esi
c000f67d:	c3                   	ret    

c000f67e <hwTextMode_loadInData(VgaText*)>:
c000f67e:	55                   	push   ebp
c000f67f:	a1 40 be 02 c0       	mov    eax,ds:0xc002be40
c000f684:	57                   	push   edi
c000f685:	56                   	push   esi
c000f686:	53                   	push   ebx
c000f687:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f68b:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f691:	85 d2                	test   edx,edx
c000f693:	7e 2f                	jle    c000f6c4 <hwTextMode_loadInData(VgaText*)+0x46>
c000f695:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f69b:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f69e:	31 f6                	xor    esi,esi
c000f6a0:	29 fd                	sub    ebp,edi
c000f6a2:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f6a5:	31 c0                	xor    eax,eax
c000f6a7:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f6ab:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f6af:	40                   	inc    eax
c000f6b0:	83 f8 50             	cmp    eax,0x50
c000f6b3:	75 f2                	jne    c000f6a7 <hwTextMode_loadInData(VgaText*)+0x29>
c000f6b5:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f6bb:	46                   	inc    esi
c000f6bc:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f6c2:	7f de                	jg     c000f6a2 <hwTextMode_loadInData(VgaText*)+0x24>
c000f6c4:	5b                   	pop    ebx
c000f6c5:	5e                   	pop    esi
c000f6c6:	5f                   	pop    edi
c000f6c7:	5d                   	pop    ebp
c000f6c8:	c3                   	ret    

c000f6c9 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f6c9:	55                   	push   ebp
c000f6ca:	80 3d a0 cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cfa0,0x0
c000f6d1:	57                   	push   edi
c000f6d2:	56                   	push   esi
c000f6d3:	53                   	push   ebx
c000f6d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f6d8:	75 50                	jne    c000f72a <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f6da:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6e0:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f6e6:	8b 15 40 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be40
c000f6ec:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f6f0:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f6f6:	eb 0e                	jmp    c000f706 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f6f8:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f6fe:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f704:	89 da                	mov    edx,ebx
c000f706:	83 e5 0f             	and    ebp,0xf
c000f709:	c1 e0 04             	shl    eax,0x4
c000f70c:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f70f:	0f b6 c0             	movzx  eax,al
c000f712:	41                   	inc    ecx
c000f713:	09 e8                	or     eax,ebp
c000f715:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f719:	c1 e0 08             	shl    eax,0x8
c000f71c:	09 e8                	or     eax,ebp
c000f71e:	39 fb                	cmp    ebx,edi
c000f720:	66 89 02             	mov    WORD PTR [edx],ax
c000f723:	75 d3                	jne    c000f6f8 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f725:	5b                   	pop    ebx
c000f726:	5e                   	pop    esi
c000f727:	5f                   	pop    edi
c000f728:	5d                   	pop    ebp
c000f729:	c3                   	ret    
c000f72a:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f734:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f73e:	31 c0                	xor    eax,eax
c000f740:	bd 02 00 00 00       	mov    ebp,0x2
c000f745:	eb 9f                	jmp    c000f6e6 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f747 <hwTextMode_showCursor(VgaText*, bool)>:
c000f747:	56                   	push   esi
c000f748:	80 3d a0 cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cfa0,0x0
c000f74f:	53                   	push   ebx
c000f750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f754:	75 39                	jne    c000f78f <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f756:	84 c0                	test   al,al
c000f758:	74 38                	je     c000f792 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f75a:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f75f:	b0 0a                	mov    al,0xa
c000f761:	89 da                	mov    edx,ebx
c000f763:	ee                   	out    dx,al
c000f764:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f769:	89 ca                	mov    edx,ecx
c000f76b:	ec                   	in     al,dx
c000f76c:	b2 0f                	mov    dl,0xf
c000f76e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f772:	83 e0 c0             	and    eax,0xffffffc0
c000f775:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f77b:	09 d0                	or     eax,edx
c000f77d:	89 ca                	mov    edx,ecx
c000f77f:	ee                   	out    dx,al
c000f780:	b0 0b                	mov    al,0xb
c000f782:	89 da                	mov    edx,ebx
c000f784:	ee                   	out    dx,al
c000f785:	89 ca                	mov    edx,ecx
c000f787:	ec                   	in     al,dx
c000f788:	83 e0 e0             	and    eax,0xffffffe0
c000f78b:	83 c8 0f             	or     eax,0xf
c000f78e:	ee                   	out    dx,al
c000f78f:	5b                   	pop    ebx
c000f790:	5e                   	pop    esi
c000f791:	c3                   	ret    
c000f792:	b0 0a                	mov    al,0xa
c000f794:	ba d4 03 00 00       	mov    edx,0x3d4
c000f799:	ee                   	out    dx,al
c000f79a:	b0 20                	mov    al,0x20
c000f79c:	ba d5 03 00 00       	mov    edx,0x3d5
c000f7a1:	ee                   	out    dx,al
c000f7a2:	5b                   	pop    ebx
c000f7a3:	5e                   	pop    esi
c000f7a4:	c3                   	ret    

c000f7a5 <hwTextMode_update(VgaText*)>:
c000f7a5:	c3                   	ret    

c000f7a6 <hwTextMode_updateCursor(VgaText*)>:
c000f7a6:	56                   	push   esi
c000f7a7:	80 3d a0 cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cfa0,0x0
c000f7ae:	53                   	push   ebx
c000f7af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7b3:	75 3f                	jne    c000f7f4 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f7b5:	be d4 03 00 00       	mov    esi,0x3d4
c000f7ba:	b9 19 00 00 00       	mov    ecx,0x19
c000f7bf:	89 f2                	mov    edx,esi
c000f7c1:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f7c7:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f7cd:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f7d0:	c1 e1 04             	shl    ecx,0x4
c000f7d3:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f7d9:	b0 0f                	mov    al,0xf
c000f7db:	ee                   	out    dx,al
c000f7dc:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f7e1:	88 c8                	mov    al,cl
c000f7e3:	89 da                	mov    edx,ebx
c000f7e5:	ee                   	out    dx,al
c000f7e6:	b0 0e                	mov    al,0xe
c000f7e8:	89 f2                	mov    edx,esi
c000f7ea:	ee                   	out    dx,al
c000f7eb:	89 c8                	mov    eax,ecx
c000f7ed:	89 da                	mov    edx,ebx
c000f7ef:	66 c1 e8 08          	shr    ax,0x8
c000f7f3:	ee                   	out    dx,al
c000f7f4:	5b                   	pop    ebx
c000f7f5:	5e                   	pop    esi
c000f7f6:	c3                   	ret    

c000f7f7 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f7f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7fb:	80 3d a0 cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cfa0,0x0
c000f802:	75 38                	jne    c000f83c <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000f804:	ba da 03 00 00       	mov    edx,0x3da
c000f809:	84 c0                	test   al,al
c000f80b:	75 18                	jne    c000f825 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000f80d:	ec                   	in     al,dx
c000f80e:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f813:	b0 30                	mov    al,0x30
c000f815:	89 ca                	mov    edx,ecx
c000f817:	ee                   	out    dx,al
c000f818:	ba c1 03 00 00       	mov    edx,0x3c1
c000f81d:	ec                   	in     al,dx
c000f81e:	83 c8 08             	or     eax,0x8
c000f821:	89 ca                	mov    edx,ecx
c000f823:	ee                   	out    dx,al
c000f824:	c3                   	ret    
c000f825:	ec                   	in     al,dx
c000f826:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f82b:	b0 30                	mov    al,0x30
c000f82d:	89 ca                	mov    edx,ecx
c000f82f:	ee                   	out    dx,al
c000f830:	ba c1 03 00 00       	mov    edx,0x3c1
c000f835:	ec                   	in     al,dx
c000f836:	83 e0 f7             	and    eax,0xfffffff7
c000f839:	89 ca                	mov    edx,ecx
c000f83b:	ee                   	out    dx,al
c000f83c:	c3                   	ret    

c000f83d <hwTextMode_scrollScreen(VgaText*)>:
c000f83d:	55                   	push   ebp
c000f83e:	57                   	push   edi
c000f83f:	56                   	push   esi
c000f840:	53                   	push   ebx
c000f841:	83 ec 1c             	sub    esp,0x1c
c000f844:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f848:	80 3d a0 cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cfa0,0x0
c000f84f:	74 14                	je     c000f865 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000f851:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000f85b:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000f865:	a1 40 be 02 c0       	mov    eax,ds:0xc002be40
c000f86a:	bd 02 00 00 00       	mov    ebp,0x2
c000f86f:	05 a0 00 00 00       	add    eax,0xa0
c000f874:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f878:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f87c:	31 c0                	xor    eax,eax
c000f87e:	eb 0b                	jmp    c000f88b <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000f880:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f886:	74 57                	je     c000f8df <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000f888:	43                   	inc    ebx
c000f889:	89 f0                	mov    eax,esi
c000f88b:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f891:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f897:	88 13                	mov    BYTE PTR [ebx],dl
c000f899:	8d 70 01             	lea    esi,[eax+0x1]
c000f89c:	83 fd 18             	cmp    ebp,0x18
c000f89f:	75 df                	jne    c000f880 <hwTextMode_scrollScreen(VgaText*)+0x43>
c000f8a1:	a8 01                	test   al,0x1
c000f8a3:	75 13                	jne    c000f8b8 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f8a5:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f8a8:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f8ae:	75 d8                	jne    c000f888 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000f8b0:	83 c4 1c             	add    esp,0x1c
c000f8b3:	5b                   	pop    ebx
c000f8b4:	5e                   	pop    esi
c000f8b5:	5f                   	pop    edi
c000f8b6:	5d                   	pop    ebp
c000f8b7:	c3                   	ret    
c000f8b8:	83 ec 08             	sub    esp,0x8
c000f8bb:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000f8c2:	50                   	push   eax
c000f8c3:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000f8c7:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000f8ce:	50                   	push   eax
c000f8cf:	e8 14 0c 00 00       	call   c00104e8 <VgaText::combineColours(unsigned char, unsigned char)>
c000f8d4:	83 c4 10             	add    esp,0x10
c000f8d7:	88 07                	mov    BYTE PTR [edi],al
c000f8d9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f8dd:	eb c9                	jmp    c000f8a8 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000f8df:	45                   	inc    ebp
c000f8e0:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f8e8:	eb 8e                	jmp    c000f878 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000f8ea <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f8ea:	57                   	push   edi
c000f8eb:	80 3d a0 cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cfa0,0x0
c000f8f2:	56                   	push   esi
c000f8f3:	53                   	push   ebx
c000f8f4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f8f8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000f8fc:	75 65                	jne    c000f963 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000f8fe:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000f903:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000f908:	83 ec 08             	sub    esp,0x8
c000f90b:	52                   	push   edx
c000f90c:	50                   	push   eax
c000f90d:	e8 d6 0b 00 00       	call   c00104e8 <VgaText::combineColours(unsigned char, unsigned char)>
c000f912:	5a                   	pop    edx
c000f913:	0f b6 c0             	movzx  eax,al
c000f916:	59                   	pop    ecx
c000f917:	50                   	push   eax
c000f918:	0f be c3             	movsx  eax,bl
c000f91b:	50                   	push   eax
c000f91c:	e8 6d 0c 00 00       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c000f921:	83 c4 10             	add    esp,0x10
c000f924:	8b 35 40 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be40
c000f92a:	80 3d a0 cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cfa0,0x0
c000f931:	74 07                	je     c000f93a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000f933:	66 0f be c3          	movsx  ax,bl
c000f937:	80 cc 02             	or     ah,0x2
c000f93a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f93e:	ba 19 00 00 00       	mov    edx,0x19
c000f943:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f949:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000f94c:	8d 14 92             	lea    edx,[edx+edx*4]
c000f94f:	c1 e1 04             	shl    ecx,0x4
c000f952:	c1 e2 04             	shl    edx,0x4
c000f955:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000f959:	01 ca                	add    edx,ecx
c000f95b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000f95f:	5b                   	pop    ebx
c000f960:	5e                   	pop    esi
c000f961:	5f                   	pop    edi
c000f962:	c3                   	ret    
c000f963:	b8 02 00 00 00       	mov    eax,0x2
c000f968:	31 d2                	xor    edx,edx
c000f96a:	eb 9c                	jmp    c000f908 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000f96c <setupTextMode()>:
c000f96c:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f971:	83 e0 30             	and    eax,0x30
c000f974:	66 83 f8 30          	cmp    ax,0x30
c000f978:	75 11                	jne    c000f98b <setupTextMode()+0x1f>
c000f97a:	81 2d 40 be 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002be40,0x8000
c000f984:	c6 05 a0 cf 02 c0 01 	mov    BYTE PTR ds:0xc002cfa0,0x1
c000f98b:	c7 05 d8 cf 02 c0 f7 f7 00 c0 	mov    DWORD PTR ds:0xc002cfd8,0xc000f7f7
c000f995:	c7 05 c4 cf 02 c0 7e f6 00 c0 	mov    DWORD PTR ds:0xc002cfc4,0xc000f67e
c000f99f:	c7 05 c0 cf 02 c0 c9 f6 00 c0 	mov    DWORD PTR ds:0xc002cfc0,0xc000f6c9
c000f9a9:	c7 05 cc cf 02 c0 3d f8 00 c0 	mov    DWORD PTR ds:0xc002cfcc,0xc000f83d
c000f9b3:	c7 05 d4 cf 02 c0 47 f7 00 c0 	mov    DWORD PTR ds:0xc002cfd4,0xc000f747
c000f9bd:	c7 05 c8 cf 02 c0 a5 f7 00 c0 	mov    DWORD PTR ds:0xc002cfc8,0xc000f7a5
c000f9c7:	c7 05 d0 cf 02 c0 a6 f7 00 c0 	mov    DWORD PTR ds:0xc002cfd0,0xc000f7a6
c000f9d1:	c7 05 dc cf 02 c0 ea f8 00 c0 	mov    DWORD PTR ds:0xc002cfdc,0xc000f8ea
c000f9db:	c3                   	ret    

c000f9dc <kernel_main>:
c000f9dc:	57                   	push   edi
c000f9dd:	bf f9 03 00 00       	mov    edi,0x3f9
c000f9e2:	56                   	push   esi
c000f9e3:	31 f6                	xor    esi,esi
c000f9e5:	53                   	push   ebx
c000f9e6:	83 ec 10             	sub    esp,0x10
c000f9e9:	e8 54 09 00 00       	call   c0010342 <installVgaTextImplementation()>
c000f9ee:	e8 79 ff ff ff       	call   c000f96c <setupTextMode()>
c000f9f3:	89 f0                	mov    eax,esi
c000f9f5:	89 fa                	mov    edx,edi
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f9fd:	b0 80                	mov    al,0x80
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b1 03                	mov    cl,0x3
c000fa04:	ba f8 03 00 00       	mov    edx,0x3f8
c000fa09:	88 c8                	mov    al,cl
c000fa0b:	ee                   	out    dx,al
c000fa0c:	89 f0                	mov    eax,esi
c000fa0e:	89 fa                	mov    edx,edi
c000fa10:	ee                   	out    dx,al
c000fa11:	88 c8                	mov    al,cl
c000fa13:	89 da                	mov    edx,ebx
c000fa15:	ee                   	out    dx,al
c000fa16:	b0 c7                	mov    al,0xc7
c000fa18:	ba fa 03 00 00       	mov    edx,0x3fa
c000fa1d:	ee                   	out    dx,al
c000fa1e:	b0 0b                	mov    al,0xb
c000fa20:	ba fc 03 00 00       	mov    edx,0x3fc
c000fa25:	ee                   	out    dx,al
c000fa26:	83 ec 0c             	sub    esp,0xc
c000fa29:	68 e4 8f 02 c0       	push   0xc0028fe4
c000fa2e:	e8 a2 2e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000fa33:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fa38:	05 ff 0f 00 00       	add    eax,0xfff
c000fa3d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa42:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa45:	e8 b3 03 00 00       	call   c000fdfd <Phys::physicalMemorySetup(unsigned int)>
c000fa4a:	e8 a7 1f 00 00       	call   c00119f6 <Virt::virtualMemorySetup()>
c000fa4f:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fa55:	83 c4 10             	add    esp,0x10
c000fa58:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fa5e:	75 0e                	jne    c000fa6e <kernel_main+0x92>
c000fa60:	89 d8                	mov    eax,ebx
c000fa62:	25 48 03 00 00       	and    eax,0x348
c000fa67:	3d 00 03 00 00       	cmp    eax,0x300
c000fa6c:	74 10                	je     c000fa7e <kernel_main+0xa2>
c000fa6e:	83 ec 0c             	sub    esp,0xc
c000fa71:	68 84 a7 02 c0       	push   0xc002a784
c000fa76:	e8 3a a1 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c000fa7b:	83 c4 10             	add    esp,0x10
c000fa7e:	83 ec 0c             	sub    esp,0xc
c000fa81:	89 1d 20 cf 02 c0    	mov    DWORD PTR ds:0xc002cf20,ebx
c000fa87:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fa8b:	53                   	push   ebx
c000fa8c:	e8 19 21 00 00       	call   c0011baa <VAS::VAS()>
c000fa91:	89 1d 84 d0 02 c0    	mov    DWORD PTR ds:0xc002d084,ebx
c000fa97:	e8 84 05 ff ff       	call   c0000020 <callGlobalConstructors>
c000fa9c:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000faa3:	e8 7c fb ff ff       	call   c000f624 <malloc>
c000faa8:	89 04 24             	mov    DWORD PTR [esp],eax
c000faab:	89 c6                	mov    esi,eax
c000faad:	e8 6c ea ff ff       	call   c000e51e <Computer::Computer()>
c000fab2:	6a 00                	push   0x0
c000fab4:	89 35 08 cf 02 c0    	mov    DWORD PTR ds:0xc002cf08,esi
c000faba:	6a 00                	push   0x0
c000fabc:	6a 00                	push   0x0
c000fabe:	56                   	push   esi
c000fabf:	e8 aa f1 ff ff       	call   c000ec6e <Computer::open(int, int, void*)>
c000fac4:	83 c4 14             	add    esp,0x14
c000fac7:	53                   	push   ebx
c000fac8:	e8 77 23 00 00       	call   c0011e44 <VAS::~VAS()>
c000facd:	c7 04 24 fb 8f 02 c0 	mov    DWORD PTR [esp],0xc0028ffb
c000fad4:	e8 dc a0 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c000fad9:	83 c4 20             	add    esp,0x20
c000fadc:	5b                   	pop    ebx
c000fadd:	5e                   	pop    esi
c000fade:	5f                   	pop    edi
c000fadf:	c3                   	ret    

c000fae0 <Phys::allocateDMA(unsigned long)>:
c000fae0:	55                   	push   ebp
c000fae1:	31 d2                	xor    edx,edx
c000fae3:	57                   	push   edi
c000fae4:	31 ed                	xor    ebp,ebp
c000fae6:	56                   	push   esi
c000fae7:	31 c9                	xor    ecx,ecx
c000fae9:	53                   	push   ebx
c000faea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000faee:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000faf4:	31 c0                	xor    eax,eax
c000faf6:	c1 ee 0c             	shr    esi,0xc
c000faf9:	eb 17                	jmp    c000fb12 <Phys::allocateDMA(unsigned long)+0x32>
c000fafb:	85 c9                	test   ecx,ecx
c000fafd:	75 04                	jne    c000fb03 <Phys::allocateDMA(unsigned long)+0x23>
c000faff:	89 d5                	mov    ebp,edx
c000fb01:	89 d0                	mov    eax,edx
c000fb03:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fb06:	39 de                	cmp    esi,ebx
c000fb08:	74 20                	je     c000fb2a <Phys::allocateDMA(unsigned long)+0x4a>
c000fb0a:	42                   	inc    edx
c000fb0b:	89 d9                	mov    ecx,ebx
c000fb0d:	83 fa 2f             	cmp    edx,0x2f
c000fb10:	7f 11                	jg     c000fb23 <Phys::allocateDMA(unsigned long)+0x43>
c000fb12:	80 ba 60 cf 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd30a0],0x0
c000fb19:	74 e0                	je     c000fafb <Phys::allocateDMA(unsigned long)+0x1b>
c000fb1b:	31 c9                	xor    ecx,ecx
c000fb1d:	42                   	inc    edx
c000fb1e:	83 fa 2f             	cmp    edx,0x2f
c000fb21:	7e ef                	jle    c000fb12 <Phys::allocateDMA(unsigned long)+0x32>
c000fb23:	5b                   	pop    ebx
c000fb24:	31 c0                	xor    eax,eax
c000fb26:	5e                   	pop    esi
c000fb27:	5f                   	pop    edi
c000fb28:	5d                   	pop    ebp
c000fb29:	c3                   	ret    
c000fb2a:	8d 14 30             	lea    edx,[eax+esi*1]
c000fb2d:	89 d7                	mov    edi,edx
c000fb2f:	4f                   	dec    edi
c000fb30:	79 03                	jns    c000fb35 <Phys::allocateDMA(unsigned long)+0x55>
c000fb32:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fb35:	c1 ff 04             	sar    edi,0x4
c000fb38:	89 c2                	mov    edx,eax
c000fb3a:	c1 fa 04             	sar    edx,0x4
c000fb3d:	39 fa                	cmp    edx,edi
c000fb3f:	75 2f                	jne    c000fb70 <Phys::allocateDMA(unsigned long)+0x90>
c000fb41:	85 db                	test   ebx,ebx
c000fb43:	74 1a                	je     c000fb5f <Phys::allocateDMA(unsigned long)+0x7f>
c000fb45:	be 60 cf 02 c0       	mov    esi,0xc002cf60
c000fb4a:	8d 90 60 cf 02 c0    	lea    edx,[eax-0x3ffd30a0]
c000fb50:	f7 d6                	not    esi
c000fb52:	29 c6                	sub    esi,eax
c000fb54:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fb57:	42                   	inc    edx
c000fb58:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fb5b:	39 d9                	cmp    ecx,ebx
c000fb5d:	7f f5                	jg     c000fb54 <Phys::allocateDMA(unsigned long)+0x74>
c000fb5f:	85 ff                	test   edi,edi
c000fb61:	74 13                	je     c000fb76 <Phys::allocateDMA(unsigned long)+0x96>
c000fb63:	5b                   	pop    ebx
c000fb64:	05 50 20 0c 00       	add    eax,0xc2050
c000fb69:	5e                   	pop    esi
c000fb6a:	c1 e0 0c             	shl    eax,0xc
c000fb6d:	5f                   	pop    edi
c000fb6e:	5d                   	pop    ebp
c000fb6f:	c3                   	ret    
c000fb70:	89 ea                	mov    edx,ebp
c000fb72:	31 c9                	xor    ecx,ecx
c000fb74:	eb a7                	jmp    c000fb1d <Phys::allocateDMA(unsigned long)+0x3d>
c000fb76:	5b                   	pop    ebx
c000fb77:	c1 e0 0c             	shl    eax,0xc
c000fb7a:	5e                   	pop    esi
c000fb7b:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fb80:	5f                   	pop    edi
c000fb81:	5d                   	pop    ebp
c000fb82:	c3                   	ret    

c000fb83 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fb83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb87:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fb8b:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fb91:	c1 e9 0c             	shr    ecx,0xc
c000fb94:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fb99:	76 25                	jbe    c000fbc0 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fb9b:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fba0:	c1 e8 0c             	shr    eax,0xc
c000fba3:	8d 50 10             	lea    edx,[eax+0x10]
c000fba6:	85 c9                	test   ecx,ecx
c000fba8:	74 15                	je     c000fbbf <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fbaa:	8d 82 60 cf 02 c0    	lea    eax,[edx-0x3ffd30a0]
c000fbb0:	8d 94 11 60 cf 02 c0 	lea    edx,[ecx+edx*1-0x3ffd30a0]
c000fbb7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fbba:	40                   	inc    eax
c000fbbb:	39 d0                	cmp    eax,edx
c000fbbd:	75 f8                	jne    c000fbb7 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fbbf:	c3                   	ret    
c000fbc0:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fbc6:	c1 ea 0c             	shr    edx,0xc
c000fbc9:	eb db                	jmp    c000fba6 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fbcb <Phys::setPageState(unsigned long, bool)>:
c000fbcb:	56                   	push   esi
c000fbcc:	ba 01 00 00 00       	mov    edx,0x1
c000fbd1:	53                   	push   ebx
c000fbd2:	8b 35 30 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be30
c000fbd8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbdc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbe0:	89 c8                	mov    eax,ecx
c000fbe2:	83 e1 07             	and    ecx,0x7
c000fbe5:	c1 e8 03             	shr    eax,0x3
c000fbe8:	d3 e3                	shl    ebx,cl
c000fbea:	01 c6                	add    esi,eax
c000fbec:	d3 e2                	shl    edx,cl
c000fbee:	f7 d2                	not    edx
c000fbf0:	20 16                	and    BYTE PTR [esi],dl
c000fbf2:	03 05 30 be 02 c0    	add    eax,DWORD PTR ds:0xc002be30
c000fbf8:	08 18                	or     BYTE PTR [eax],bl
c000fbfa:	5b                   	pop    ebx
c000fbfb:	5e                   	pop    esi
c000fbfc:	c3                   	ret    

c000fbfd <Phys::getPageState(unsigned long)>:
c000fbfd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fc01:	8b 15 30 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be30
c000fc07:	89 c8                	mov    eax,ecx
c000fc09:	83 e1 07             	and    ecx,0x7
c000fc0c:	c1 e8 03             	shr    eax,0x3
c000fc0f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fc13:	d3 f8                	sar    eax,cl
c000fc15:	83 e0 01             	and    eax,0x1
c000fc18:	c3                   	ret    

c000fc19 <Phys::freePage(unsigned long)>:
c000fc19:	53                   	push   ebx
c000fc1a:	83 ec 08             	sub    esp,0x8
c000fc1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc21:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fc27:	76 57                	jbe    c000fc80 <Phys::freePage(unsigned long)+0x67>
c000fc29:	c1 eb 0c             	shr    ebx,0xc
c000fc2c:	53                   	push   ebx
c000fc2d:	e8 cb ff ff ff       	call   c000fbfd <Phys::getPageState(unsigned long)>
c000fc32:	5a                   	pop    edx
c000fc33:	84 c0                	test   al,al
c000fc35:	74 5b                	je     c000fc92 <Phys::freePage(unsigned long)+0x79>
c000fc37:	a1 4c cf 02 c0       	mov    eax,ds:0xc002cf4c
c000fc3c:	48                   	dec    eax
c000fc3d:	a3 4c cf 02 c0       	mov    ds:0xc002cf4c,eax
c000fc42:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc45:	8d 04 80             	lea    eax,[eax+eax*4]
c000fc48:	c1 e0 02             	shl    eax,0x2
c000fc4b:	99                   	cdq    
c000fc4c:	f7 3d 50 cf 02 c0    	idiv   DWORD PTR ds:0xc002cf50
c000fc52:	39 05 48 cf 02 c0    	cmp    DWORD PTR ds:0xc002cf48,eax
c000fc58:	75 13                	jne    c000fc6d <Phys::freePage(unsigned long)+0x54>
c000fc5a:	83 ec 08             	sub    esp,0x8
c000fc5d:	6a 00                	push   0x0
c000fc5f:	53                   	push   ebx
c000fc60:	e8 66 ff ff ff       	call   c000fbcb <Phys::setPageState(unsigned long, bool)>
c000fc65:	83 c4 10             	add    esp,0x10
c000fc68:	83 c4 08             	add    esp,0x8
c000fc6b:	5b                   	pop    ebx
c000fc6c:	c3                   	ret    
c000fc6d:	83 ec 0c             	sub    esp,0xc
c000fc70:	a3 48 cf 02 c0       	mov    ds:0xc002cf48,eax
c000fc75:	50                   	push   eax
c000fc76:	e8 5b 0a 00 00       	call   c00106d6 <VgaText::updateRAMUsageDisplay(int)>
c000fc7b:	83 c4 10             	add    esp,0x10
c000fc7e:	eb da                	jmp    c000fc5a <Phys::freePage(unsigned long)+0x41>
c000fc80:	68 00 10 00 00       	push   0x1000
c000fc85:	53                   	push   ebx
c000fc86:	e8 f8 fe ff ff       	call   c000fb83 <Phys::freeDMA(unsigned long, unsigned long)>
c000fc8b:	59                   	pop    ecx
c000fc8c:	5b                   	pop    ebx
c000fc8d:	83 c4 08             	add    esp,0x8
c000fc90:	5b                   	pop    ebx
c000fc91:	c3                   	ret    
c000fc92:	c7 44 24 10 16 90 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029016
c000fc9a:	83 c4 08             	add    esp,0x8
c000fc9d:	5b                   	pop    ebx
c000fc9e:	e9 12 9f 00 00       	jmp    c0019bb5 <Krnl::panic(char const*)>

c000fca3 <Phys::allocatePage()>:
c000fca3:	56                   	push   esi
c000fca4:	53                   	push   ebx
c000fca5:	51                   	push   ecx
c000fca6:	8b 35 40 cf 02 c0    	mov    esi,DWORD PTR ds:0xc002cf40
c000fcac:	89 f3                	mov    ebx,esi
c000fcae:	eb 0a                	jmp    c000fcba <Phys::allocatePage()+0x17>
c000fcb0:	89 1d 40 cf 02 c0    	mov    DWORD PTR ds:0xc002cf40,ebx
c000fcb6:	39 de                	cmp    esi,ebx
c000fcb8:	74 24                	je     c000fcde <Phys::allocatePage()+0x3b>
c000fcba:	53                   	push   ebx
c000fcbb:	e8 3d ff ff ff       	call   c000fbfd <Phys::getPageState(unsigned long)>
c000fcc0:	5a                   	pop    edx
c000fcc1:	84 c0                	test   al,al
c000fcc3:	74 5a                	je     c000fd1f <Phys::allocatePage()+0x7c>
c000fcc5:	43                   	inc    ebx
c000fcc6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fccc:	75 e2                	jne    c000fcb0 <Phys::allocatePage()+0xd>
c000fcce:	31 db                	xor    ebx,ebx
c000fcd0:	c7 05 40 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf40,0x0
c000fcda:	39 de                	cmp    esi,ebx
c000fcdc:	75 dc                	jne    c000fcba <Phys::allocatePage()+0x17>
c000fcde:	83 ec 0c             	sub    esp,0xc
c000fce1:	68 2c 90 02 c0       	push   0xc002902c
c000fce6:	e8 ea 2b 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000fceb:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fcf2:	e8 e9 fd ff ff       	call   c000fae0 <Phys::allocateDMA(unsigned long)>
c000fcf7:	83 c4 10             	add    esp,0x10
c000fcfa:	85 c0                	test   eax,eax
c000fcfc:	75 56                	jne    c000fd54 <Phys::allocatePage()+0xb1>
c000fcfe:	83 ec 0c             	sub    esp,0xc
c000fd01:	68 3d 90 02 c0       	push   0xc002903d
c000fd06:	e8 aa 9e 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c000fd0b:	83 c4 10             	add    esp,0x10
c000fd0e:	8b 1d 40 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf40
c000fd14:	53                   	push   ebx
c000fd15:	e8 e3 fe ff ff       	call   c000fbfd <Phys::getPageState(unsigned long)>
c000fd1a:	5a                   	pop    edx
c000fd1b:	84 c0                	test   al,al
c000fd1d:	75 a6                	jne    c000fcc5 <Phys::allocatePage()+0x22>
c000fd1f:	6a 01                	push   0x1
c000fd21:	53                   	push   ebx
c000fd22:	e8 a4 fe ff ff       	call   c000fbcb <Phys::setPageState(unsigned long, bool)>
c000fd27:	a1 4c cf 02 c0       	mov    eax,ds:0xc002cf4c
c000fd2c:	59                   	pop    ecx
c000fd2d:	40                   	inc    eax
c000fd2e:	5b                   	pop    ebx
c000fd2f:	a3 4c cf 02 c0       	mov    ds:0xc002cf4c,eax
c000fd34:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd37:	8d 04 80             	lea    eax,[eax+eax*4]
c000fd3a:	c1 e0 02             	shl    eax,0x2
c000fd3d:	99                   	cdq    
c000fd3e:	f7 3d 50 cf 02 c0    	idiv   DWORD PTR ds:0xc002cf50
c000fd44:	39 05 48 cf 02 c0    	cmp    DWORD PTR ds:0xc002cf48,eax
c000fd4a:	75 0c                	jne    c000fd58 <Phys::allocatePage()+0xb5>
c000fd4c:	a1 40 cf 02 c0       	mov    eax,ds:0xc002cf40
c000fd51:	c1 e0 0c             	shl    eax,0xc
c000fd54:	5a                   	pop    edx
c000fd55:	5b                   	pop    ebx
c000fd56:	5e                   	pop    esi
c000fd57:	c3                   	ret    
c000fd58:	83 ec 0c             	sub    esp,0xc
c000fd5b:	a3 48 cf 02 c0       	mov    ds:0xc002cf48,eax
c000fd60:	50                   	push   eax
c000fd61:	e8 70 09 00 00       	call   c00106d6 <VgaText::updateRAMUsageDisplay(int)>
c000fd66:	83 c4 10             	add    esp,0x10
c000fd69:	eb e1                	jmp    c000fd4c <Phys::allocatePage()+0xa9>

c000fd6b <Phys::allocateContiguousPages(int)>:
c000fd6b:	57                   	push   edi
c000fd6c:	56                   	push   esi
c000fd6d:	53                   	push   ebx
c000fd6e:	31 db                	xor    ebx,ebx
c000fd70:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fd74:	e8 eb d3 00 00       	call   c001d164 <lockScheduler()>
c000fd79:	85 db                	test   ebx,ebx
c000fd7b:	75 11                	jne    c000fd8e <Phys::allocateContiguousPages(int)+0x23>
c000fd7d:	e8 21 ff ff ff       	call   c000fca3 <Phys::allocatePage()>
c000fd82:	83 ff 01             	cmp    edi,0x1
c000fd85:	89 c6                	mov    esi,eax
c000fd87:	74 21                	je     c000fdaa <Phys::allocateContiguousPages(int)+0x3f>
c000fd89:	bb 01 00 00 00       	mov    ebx,0x1
c000fd8e:	e8 10 ff ff ff       	call   c000fca3 <Phys::allocatePage()>
c000fd93:	89 da                	mov    edx,ebx
c000fd95:	c1 e2 0c             	shl    edx,0xc
c000fd98:	01 f2                	add    edx,esi
c000fd9a:	39 c2                	cmp    edx,eax
c000fd9c:	74 17                	je     c000fdb5 <Phys::allocateContiguousPages(int)+0x4a>
c000fd9e:	bb 01 00 00 00       	mov    ebx,0x1
c000fda3:	89 c6                	mov    esi,eax
c000fda5:	83 ff 01             	cmp    edi,0x1
c000fda8:	75 e4                	jne    c000fd8e <Phys::allocateContiguousPages(int)+0x23>
c000fdaa:	e8 b7 d3 00 00       	call   c001d166 <unlockScheduler()>
c000fdaf:	89 f0                	mov    eax,esi
c000fdb1:	5b                   	pop    ebx
c000fdb2:	5e                   	pop    esi
c000fdb3:	5f                   	pop    edi
c000fdb4:	c3                   	ret    
c000fdb5:	43                   	inc    ebx
c000fdb6:	39 fb                	cmp    ebx,edi
c000fdb8:	75 bf                	jne    c000fd79 <Phys::allocateContiguousPages(int)+0xe>
c000fdba:	e8 a7 d3 00 00       	call   c001d166 <unlockScheduler()>
c000fdbf:	89 f0                	mov    eax,esi
c000fdc1:	5b                   	pop    ebx
c000fdc2:	5e                   	pop    esi
c000fdc3:	5f                   	pop    edi
c000fdc4:	c3                   	ret    

c000fdc5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fdc5:	56                   	push   esi
c000fdc6:	53                   	push   ebx
c000fdc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdcb:	39 1d 44 cf 02 c0    	cmp    DWORD PTR ds:0xc002cf44,ebx
c000fdd1:	73 06                	jae    c000fdd9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fdd3:	89 1d 44 cf 02 c0    	mov    DWORD PTR ds:0xc002cf44,ebx
c000fdd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fddd:	c1 eb 0c             	shr    ebx,0xc
c000fde0:	c1 e8 0c             	shr    eax,0xc
c000fde3:	39 d8                	cmp    eax,ebx
c000fde5:	73 13                	jae    c000fdfa <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fde7:	6a 00                	push   0x0
c000fde9:	8d 70 01             	lea    esi,[eax+0x1]
c000fdec:	50                   	push   eax
c000fded:	e8 d9 fd ff ff       	call   c000fbcb <Phys::setPageState(unsigned long, bool)>
c000fdf2:	5a                   	pop    edx
c000fdf3:	89 f0                	mov    eax,esi
c000fdf5:	59                   	pop    ecx
c000fdf6:	39 f3                	cmp    ebx,esi
c000fdf8:	75 ed                	jne    c000fde7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fdfa:	5b                   	pop    ebx
c000fdfb:	5e                   	pop    esi
c000fdfc:	c3                   	ret    

c000fdfd <Phys::physicalMemorySetup(unsigned int)>:
c000fdfd:	55                   	push   ebp
c000fdfe:	57                   	push   edi
c000fdff:	56                   	push   esi
c000fe00:	53                   	push   ebx
c000fe01:	31 db                	xor    ebx,ebx
c000fe03:	83 ec 40             	sub    esp,0x40
c000fe06:	6a 30                	push   0x30
c000fe08:	6a 00                	push   0x0
c000fe0a:	68 60 cf 02 c0       	push   0xc002cf60
c000fe0f:	e8 b0 08 ff ff       	call   c00006c4 <memset>
c000fe14:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fe18:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fe1d:	05 00 10 00 00       	add    eax,0x1000
c000fe22:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fe26:	83 c4 10             	add    esp,0x10
c000fe29:	83 ec 08             	sub    esp,0x8
c000fe2c:	6a 01                	push   0x1
c000fe2e:	53                   	push   ebx
c000fe2f:	43                   	inc    ebx
c000fe30:	e8 96 fd ff ff       	call   c000fbcb <Phys::setPageState(unsigned long, bool)>
c000fe35:	83 c4 10             	add    esp,0x10
c000fe38:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fe3e:	75 e9                	jne    c000fe29 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fe40:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fe47:	66 85 c0             	test   ax,ax
c000fe4a:	0f 84 8e 01 00 00    	je     c000ffde <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fe50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fe54:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fe5c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fe60:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fe65:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe69:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fe71:	eb 15                	jmp    c000fe88 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fe73:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fe77:	83 c3 18             	add    ebx,0x18
c000fe7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fe7e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fe82:	0f 84 66 01 00 00    	je     c000ffee <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fe88:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fe8b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fe8e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fe91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe95:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe99:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fe9b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fe9e:	01 f0                	add    eax,esi
c000fea0:	55                   	push   ebp
c000fea1:	11 fa                	adc    edx,edi
c000fea3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fea7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000feab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000feaf:	56                   	push   esi
c000feb0:	68 78 90 02 c0       	push   0xc0029078
c000feb5:	e8 1b 2a 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000feba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000febe:	83 c4 10             	add    esp,0x10
c000fec1:	09 f8                	or     eax,edi
c000fec3:	0f 85 25 01 00 00    	jne    c000ffee <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fec9:	4d                   	dec    ebp
c000feca:	75 a7                	jne    c000fe73 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fecc:	ba 00 00 08 00       	mov    edx,0x80000
c000fed1:	89 c1                	mov    ecx,eax
c000fed3:	39 f2                	cmp    edx,esi
c000fed5:	19 f9                	sbb    ecx,edi
c000fed7:	0f 82 a7 00 00 00    	jb     c000ff84 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fedd:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fee1:	89 c1                	mov    ecx,eax
c000fee3:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fee7:	0f 83 97 00 00 00    	jae    c000ff84 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000feed:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fef2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fef6:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fefa:	39 fa                	cmp    edx,edi
c000fefc:	19 e8                	sbb    eax,ebp
c000fefe:	0f 82 14 01 00 00    	jb     c0010018 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000ff04:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff08:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000ff0c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000ff12:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ff17:	83 d5 ff             	adc    ebp,0xffffffff
c000ff1a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000ff1e:	31 c0                	xor    eax,eax
c000ff20:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000ff24:	39 fa                	cmp    edx,edi
c000ff26:	89 c1                	mov    ecx,eax
c000ff28:	19 e9                	sbb    ecx,ebp
c000ff2a:	0f 83 43 ff ff ff    	jae    c000fe73 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff30:	be 00 00 08 00       	mov    esi,0x80000
c000ff35:	50                   	push   eax
c000ff36:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ff3a:	57                   	push   edi
c000ff3b:	56                   	push   esi
c000ff3c:	68 9c 90 02 c0       	push   0xc002909c
c000ff41:	e8 8f 29 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000ff46:	5a                   	pop    edx
c000ff47:	59                   	pop    ecx
c000ff48:	57                   	push   edi
c000ff49:	56                   	push   esi
c000ff4a:	e8 76 fe ff ff       	call   c000fdc5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000ff4f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ff53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff57:	83 c4 0c             	add    esp,0xc
c000ff5a:	0f ac d0 0c          	shrd   eax,edx,0xc
c000ff5e:	03 05 50 cf 02 c0    	add    eax,DWORD PTR ds:0xc002cf50
c000ff64:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ff6b:	a3 50 cf 02 c0       	mov    ds:0xc002cf50,eax
c000ff70:	52                   	push   edx
c000ff71:	50                   	push   eax
c000ff72:	68 59 90 02 c0       	push   0xc0029059
c000ff77:	e8 59 29 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	e9 ef fe ff ff       	jmp    c000fe73 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff84:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000ff88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff90:	39 ea                	cmp    edx,ebp
c000ff92:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000ff96:	0f 82 d7 fe ff ff    	jb     c000fe73 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ff9c:	ba ff 1f 00 00       	mov    edx,0x1fff
c000ffa1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000ffa5:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000ffa9:	0f 83 c4 fe ff ff    	jae    c000fe73 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000ffaf:	39 ee                	cmp    esi,ebp
c000ffb1:	89 f8                	mov    eax,edi
c000ffb3:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000ffb7:	0f 83 78 ff ff ff    	jae    c000ff35 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ffbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffc1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ffc5:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ffc9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000ffcd:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000ffd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ffd5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ffd9:	e9 57 ff ff ff       	jmp    c000ff35 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000ffde:	83 ec 0c             	sub    esp,0xc
c000ffe1:	68 4b 90 02 c0       	push   0xc002904b
c000ffe6:	e8 ca 9b 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c000ffeb:	83 c4 10             	add    esp,0x10
c000ffee:	bb 40 01 00 00       	mov    ebx,0x140
c000fff3:	83 ec 08             	sub    esp,0x8
c000fff6:	6a 00                	push   0x0
c000fff8:	53                   	push   ebx
c000fff9:	43                   	inc    ebx
c000fffa:	e8 cc fb ff ff       	call   c000fbcb <Phys::setPageState(unsigned long, bool)>
c000ffff:	ff 05 50 cf 02 c0    	inc    DWORD PTR ds:0xc002cf50
c0010005:	83 c4 10             	add    esp,0x10
c0010008:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001000e:	75 e3                	jne    c000fff3 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010010:	83 c4 3c             	add    esp,0x3c
c0010013:	5b                   	pop    ebx
c0010014:	5e                   	pop    esi
c0010015:	5f                   	pop    edi
c0010016:	5d                   	pop    ebp
c0010017:	c3                   	ret    
c0010018:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010020:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010028:	e9 d7 fe ff ff       	jmp    c000ff04 <Phys::physicalMemorySetup(unsigned int)+0x107>
c001002d:	90                   	nop

c001002e <Pipe::isAtty()>:
c001002e:	31 c0                	xor    eax,eax
c0010030:	c3                   	ret    
c0010031:	90                   	nop

c0010032 <Pipe::~Pipe()>:
c0010032:	83 ec 0c             	sub    esp,0xc
c0010035:	ba 08 91 02 c0       	mov    edx,0xc0029108
c001003a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001003e:	89 10                	mov    DWORD PTR [eax],edx
c0010040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010044:	83 ec 0c             	sub    esp,0xc
c0010047:	50                   	push   eax
c0010048:	e8 37 16 00 00       	call   c0011684 <UnixFile::~UnixFile()>
c001004d:	83 c4 10             	add    esp,0x10
c0010050:	90                   	nop
c0010051:	83 c4 0c             	add    esp,0xc
c0010054:	c3                   	ret    
c0010055:	90                   	nop

c0010056 <Pipe::~Pipe()>:
c0010056:	83 ec 0c             	sub    esp,0xc
c0010059:	83 ec 0c             	sub    esp,0xc
c001005c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010060:	e8 cd ff ff ff       	call   c0010032 <Pipe::~Pipe()>
c0010065:	83 c4 10             	add    esp,0x10
c0010068:	83 ec 08             	sub    esp,0x8
c001006b:	6a 20                	push   0x20
c001006d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010071:	e8 7f 27 00 00       	call   c00127f5 <operator delete(void*, unsigned long)>
c0010076:	83 c4 10             	add    esp,0x10
c0010079:	83 c4 0c             	add    esp,0xc
c001007c:	c3                   	ret    
c001007d:	90                   	nop

c001007e <Pipe::read(unsigned long long, void*, int*)>:
c001007e:	55                   	push   ebp
c001007f:	57                   	push   edi
c0010080:	56                   	push   esi
c0010081:	53                   	push   ebx
c0010082:	83 ec 1c             	sub    esp,0x1c
c0010085:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010089:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001008d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010091:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010094:	89 c8                	mov    eax,ecx
c0010096:	99                   	cdq    
c0010097:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001009b:	74 19                	je     c00100b6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001009d:	39 f9                	cmp    ecx,edi
c001009f:	89 d1                	mov    ecx,edx
c00100a1:	19 f1                	sbb    ecx,esi
c00100a3:	73 11                	jae    c00100b6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c00100a5:	e8 ba d0 00 00       	call   c001d164 <lockScheduler()>
c00100aa:	e8 f1 d3 00 00       	call   c001d4a0 <schedule()>
c00100af:	e8 b2 d0 00 00       	call   c001d166 <unlockScheduler()>
c00100b4:	eb db                	jmp    c0010091 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00100b6:	39 f8                	cmp    eax,edi
c00100b8:	89 d1                	mov    ecx,edx
c00100ba:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00100be:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00100c2:	19 f1                	sbb    ecx,esi
c00100c4:	73 08                	jae    c00100ce <Pipe::read(unsigned long long, void*, int*)+0x50>
c00100c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00100ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00100ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00100d1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00100d4:	29 c6                	sub    esi,eax
c00100d6:	89 f1                	mov    ecx,esi
c00100d8:	c1 f9 1f             	sar    ecx,0x1f
c00100db:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00100df:	89 ca                	mov    edx,ecx
c00100e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00100e5:	19 d1                	sbb    ecx,edx
c00100e7:	73 04                	jae    c00100ed <Pipe::read(unsigned long long, void*, int*)+0x6f>
c00100e9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00100ed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00100f1:	89 fd                	mov    ebp,edi
c00100f3:	29 f5                	sub    ebp,esi
c00100f5:	85 f6                	test   esi,esi
c00100f7:	74 12                	je     c001010b <Pipe::read(unsigned long long, void*, int*)+0x8d>
c00100f9:	52                   	push   edx
c00100fa:	56                   	push   esi
c00100fb:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c00100fe:	50                   	push   eax
c00100ff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010103:	e8 98 05 ff ff       	call   c00006a0 <memcpy>
c0010108:	83 c4 10             	add    esp,0x10
c001010b:	85 ed                	test   ebp,ebp
c001010d:	74 12                	je     c0010121 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c001010f:	50                   	push   eax
c0010110:	55                   	push   ebp
c0010111:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010114:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010118:	56                   	push   esi
c0010119:	e8 82 05 ff ff       	call   c00006a0 <memcpy>
c001011e:	83 c4 10             	add    esp,0x10
c0010121:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010124:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010127:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001012a:	99                   	cdq    
c001012b:	89 f7                	mov    edi,esi
c001012d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010135:	c1 ff 1f             	sar    edi,0x1f
c0010138:	57                   	push   edi
c0010139:	56                   	push   esi
c001013a:	52                   	push   edx
c001013b:	50                   	push   eax
c001013c:	e8 8b 57 01 00       	call   c00258cc <__umoddi3>
c0010141:	83 c4 10             	add    esp,0x10
c0010144:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010147:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001014c:	75 10                	jne    c001015e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c001014e:	83 ec 0c             	sub    esp,0xc
c0010151:	68 c5 90 02 c0       	push   0xc00290c5
c0010156:	e8 5a 9a 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c001015b:	83 c4 10             	add    esp,0x10
c001015e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010162:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010166:	89 10                	mov    DWORD PTR [eax],edx
c0010168:	83 c4 1c             	add    esp,0x1c
c001016b:	31 c0                	xor    eax,eax
c001016d:	5b                   	pop    ebx
c001016e:	5e                   	pop    esi
c001016f:	5f                   	pop    edi
c0010170:	5d                   	pop    ebp
c0010171:	c3                   	ret    

c0010172 <Pipe::write(unsigned long long, void*, int*)>:
c0010172:	55                   	push   ebp
c0010173:	57                   	push   edi
c0010174:	56                   	push   esi
c0010175:	53                   	push   ebx
c0010176:	83 ec 1c             	sub    esp,0x1c
c0010179:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001017d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010181:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010185:	89 04 24             	mov    DWORD PTR [esp],eax
c0010188:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001018b:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001018e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010192:	89 de                	mov    esi,ebx
c0010194:	89 df                	mov    edi,ebx
c0010196:	c1 ff 1f             	sar    edi,0x1f
c0010199:	01 c6                	add    esi,eax
c001019b:	89 c8                	mov    eax,ecx
c001019d:	11 d7                	adc    edi,edx
c001019f:	99                   	cdq    
c00101a0:	39 f1                	cmp    ecx,esi
c00101a2:	89 d0                	mov    eax,edx
c00101a4:	19 f8                	sbb    eax,edi
c00101a6:	b8 01 00 00 00       	mov    eax,0x1
c00101ab:	0f 82 80 00 00 00    	jb     c0010231 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00101b1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00101b4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00101b7:	01 d8                	add    eax,ebx
c00101b9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00101bd:	99                   	cdq    
c00101be:	f7 f9                	idiv   ecx
c00101c0:	29 d1                	sub    ecx,edx
c00101c2:	89 d7                	mov    edi,edx
c00101c4:	89 c8                	mov    eax,ecx
c00101c6:	99                   	cdq    
c00101c7:	39 ce                	cmp    esi,ecx
c00101c9:	19 d3                	sbb    ebx,edx
c00101cb:	bb 00 00 00 00       	mov    ebx,0x0
c00101d0:	72 04                	jb     c00101d6 <Pipe::write(unsigned long long, void*, int*)+0x64>
c00101d2:	89 f3                	mov    ebx,esi
c00101d4:	29 cb                	sub    ebx,ecx
c00101d6:	89 f1                	mov    ecx,esi
c00101d8:	29 d9                	sub    ecx,ebx
c00101da:	74 1a                	je     c00101f6 <Pipe::write(unsigned long long, void*, int*)+0x84>
c00101dc:	52                   	push   edx
c00101dd:	51                   	push   ecx
c00101de:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00101e2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00101e6:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00101e9:	57                   	push   edi
c00101ea:	e8 b1 04 ff ff       	call   c00006a0 <memcpy>
c00101ef:	83 c4 10             	add    esp,0x10
c00101f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00101f6:	85 db                	test   ebx,ebx
c00101f8:	74 12                	je     c001020c <Pipe::write(unsigned long long, void*, int*)+0x9a>
c00101fa:	50                   	push   eax
c00101fb:	53                   	push   ebx
c00101fc:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010200:	51                   	push   ecx
c0010201:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010204:	e8 97 04 ff ff       	call   c00006a0 <memcpy>
c0010209:	83 c4 10             	add    esp,0x10
c001020c:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001020f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010214:	75 10                	jne    c0010226 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010216:	83 ec 0c             	sub    esp,0xc
c0010219:	68 e1 90 02 c0       	push   0xc00290e1
c001021e:	e8 92 99 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c0010223:	83 c4 10             	add    esp,0x10
c0010226:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001022a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001022d:	89 38                	mov    DWORD PTR [eax],edi
c001022f:	31 c0                	xor    eax,eax
c0010231:	83 c4 1c             	add    esp,0x1c
c0010234:	5b                   	pop    ebx
c0010235:	5e                   	pop    esi
c0010236:	5f                   	pop    edi
c0010237:	5d                   	pop    ebp
c0010238:	c3                   	ret    
c0010239:	90                   	nop

c001023a <Pipe::Pipe(int)>:
c001023a:	83 ec 0c             	sub    esp,0xc
c001023d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010241:	83 ec 08             	sub    esp,0x8
c0010244:	6a 00                	push   0x0
c0010246:	50                   	push   eax
c0010247:	e8 56 12 00 00       	call   c00114a2 <UnixFile::UnixFile(int)>
c001024c:	83 c4 10             	add    esp,0x10
c001024f:	ba 08 91 02 c0       	mov    edx,0xc0029108
c0010254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010258:	89 10                	mov    DWORD PTR [eax],edx
c001025a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001025e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010262:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010269:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0010270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010274:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001027b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001027f:	83 ec 0c             	sub    esp,0xc
c0010282:	50                   	push   eax
c0010283:	e8 9c f3 ff ff       	call   c000f624 <malloc>
c0010288:	83 c4 10             	add    esp,0x10
c001028b:	89 c2                	mov    edx,eax
c001028d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010291:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010298:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c001029c:	90                   	nop
c001029d:	83 c4 0c             	add    esp,0xc
c00102a0:	c3                   	ret    
c00102a1:	90                   	nop

c00102a2 <VgaText::isAtty()>:
c00102a2:	b0 01                	mov    al,0x1
c00102a4:	c3                   	ret    
c00102a5:	90                   	nop

c00102a6 <VgaText::~VgaText()>:
c00102a6:	83 ec 0c             	sub    esp,0xc
c00102a9:	ba c4 91 02 c0       	mov    edx,0xc00291c4
c00102ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b2:	89 10                	mov    DWORD PTR [eax],edx
c00102b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102b8:	83 ec 0c             	sub    esp,0xc
c00102bb:	50                   	push   eax
c00102bc:	e8 c3 13 00 00       	call   c0011684 <UnixFile::~UnixFile()>
c00102c1:	83 c4 10             	add    esp,0x10
c00102c4:	90                   	nop
c00102c5:	83 c4 0c             	add    esp,0xc
c00102c8:	c3                   	ret    
c00102c9:	90                   	nop

c00102ca <VgaText::~VgaText()>:
c00102ca:	83 ec 0c             	sub    esp,0xc
c00102cd:	83 ec 0c             	sub    esp,0xc
c00102d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102d4:	e8 cd ff ff ff       	call   c00102a6 <VgaText::~VgaText()>
c00102d9:	83 c4 10             	add    esp,0x10
c00102dc:	83 ec 08             	sub    esp,0x8
c00102df:	68 60 12 00 00       	push   0x1260
c00102e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102e8:	e8 08 25 00 00       	call   c00127f5 <operator delete(void*, unsigned long)>
c00102ed:	83 c4 10             	add    esp,0x10
c00102f0:	83 c4 0c             	add    esp,0xc
c00102f3:	c3                   	ret    

c00102f4 <VgaText::read(unsigned long long, void*, int*)>:
c00102f4:	83 ec 10             	sub    esp,0x10
c00102f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102fb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00102ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010303:	e8 39 58 00 00       	call   c0015b41 <readKeyboard(VgaText*, char*, unsigned long)>
c0010308:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001030c:	89 02                	mov    DWORD PTR [edx],eax
c001030e:	31 c0                	xor    eax,eax
c0010310:	83 c4 1c             	add    esp,0x1c
c0010313:	c3                   	ret    

c0010314 <setTerminalScrollLock(bool)>:
c0010314:	c3                   	ret    

c0010315 <addToTerminalCycle(VgaText*)>:
c0010315:	8b 15 e0 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cfe0
c001031b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001031f:	85 d2                	test   edx,edx
c0010321:	75 0c                	jne    c001032f <addToTerminalCycle(VgaText*)+0x1a>
c0010323:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c0010329:	a3 e0 cf 02 c0       	mov    ds:0xc002cfe0,eax
c001032e:	c3                   	ret    
c001032f:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010335:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c001033b:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010341:	c3                   	ret    

c0010342 <installVgaTextImplementation()>:
c0010342:	83 ec 10             	sub    esp,0x10
c0010345:	6a 20                	push   0x20
c0010347:	6a 00                	push   0x0
c0010349:	68 c0 cf 02 c0       	push   0xc002cfc0
c001034e:	e8 71 03 ff ff       	call   c00006c4 <memset>
c0010353:	83 c4 1c             	add    esp,0x1c
c0010356:	c3                   	ret    

c0010357 <scrollTerminalScrollLock(int)>:
c0010357:	c3                   	ret    

c0010358 <VgaText::load()>:
c0010358:	53                   	push   ebx
c0010359:	31 c0                	xor    eax,eax
c001035b:	83 ec 58             	sub    esp,0x58
c001035e:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010362:	89 e2                	mov    edx,esp
c0010364:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010368:	40                   	inc    eax
c0010369:	83 f8 50             	cmp    eax,0x50
c001036c:	75 f6                	jne    c0010364 <VgaText::load()+0xc>
c001036e:	31 c0                	xor    eax,eax
c0010370:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010377:	84 c9                	test   cl,cl
c0010379:	74 06                	je     c0010381 <VgaText::load()+0x29>
c001037b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001037e:	40                   	inc    eax
c001037f:	eb ef                	jmp    c0010370 <VgaText::load()+0x18>
c0010381:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010387:	85 c0                	test   eax,eax
c0010389:	74 09                	je     c0010394 <VgaText::load()+0x3c>
c001038b:	51                   	push   ecx
c001038c:	51                   	push   ecx
c001038d:	52                   	push   edx
c001038e:	53                   	push   ebx
c001038f:	ff d0                	call   eax
c0010391:	83 c4 10             	add    esp,0x10
c0010394:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c001039a:	85 c0                	test   eax,eax
c001039c:	74 09                	je     c00103a7 <VgaText::load()+0x4f>
c001039e:	83 ec 0c             	sub    esp,0xc
c00103a1:	53                   	push   ebx
c00103a2:	ff d0                	call   eax
c00103a4:	83 c4 10             	add    esp,0x10
c00103a7:	83 c4 58             	add    esp,0x58
c00103aa:	5b                   	pop    ebx
c00103ab:	c3                   	ret    

c00103ac <VgaText::updateCursor()>:
c00103ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103b0:	39 05 e4 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfe4,eax
c00103b6:	75 0c                	jne    c00103c4 <VgaText::updateCursor()+0x18>
c00103b8:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c00103be:	85 c0                	test   eax,eax
c00103c0:	74 02                	je     c00103c4 <VgaText::updateCursor()+0x18>
c00103c2:	ff e0                	jmp    eax
c00103c4:	c3                   	ret    
c00103c5:	90                   	nop

c00103c6 <VgaText::showCursor(bool)>:
c00103c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103ce:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c00103d4:	c3                   	ret    
c00103d5:	90                   	nop

c00103d6 <VgaText::disableBlink(bool)>:
c00103d6:	56                   	push   esi
c00103d7:	53                   	push   ebx
c00103d8:	51                   	push   ecx
c00103d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103e1:	39 1d e4 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfe4,ebx
c00103e7:	75 18                	jne    c0010401 <VgaText::disableBlink(bool)+0x2b>
c00103e9:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c00103ef:	85 c0                	test   eax,eax
c00103f1:	74 0e                	je     c0010401 <VgaText::disableBlink(bool)+0x2b>
c00103f3:	89 f1                	mov    ecx,esi
c00103f5:	52                   	push   edx
c00103f6:	52                   	push   edx
c00103f7:	0f b6 d1             	movzx  edx,cl
c00103fa:	52                   	push   edx
c00103fb:	53                   	push   ebx
c00103fc:	ff d0                	call   eax
c00103fe:	83 c4 10             	add    esp,0x10
c0010401:	89 f0                	mov    eax,esi
c0010403:	83 f0 01             	xor    eax,0x1
c0010406:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001040c:	58                   	pop    eax
c001040d:	5b                   	pop    ebx
c001040e:	5e                   	pop    esi
c001040f:	c3                   	ret    

c0010410 <VgaText::doANSI_SGR(int)>:
c0010410:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010414:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010418:	85 d2                	test   edx,edx
c001041a:	75 14                	jne    c0010430 <VgaText::doANSI_SGR(int)+0x20>
c001041c:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010422:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010428:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001042e:	eb 65                	jmp    c0010495 <VgaText::doANSI_SGR(int)+0x85>
c0010430:	83 fa 07             	cmp    edx,0x7
c0010433:	75 14                	jne    c0010449 <VgaText::doANSI_SGR(int)+0x39>
c0010435:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c001043b:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010441:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010447:	eb 4c                	jmp    c0010495 <VgaText::doANSI_SGR(int)+0x85>
c0010449:	83 fa 1b             	cmp    edx,0x1b
c001044c:	74 ce                	je     c001041c <VgaText::doANSI_SGR(int)+0xc>
c001044e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010451:	83 f9 07             	cmp    ecx,0x7
c0010454:	77 09                	ja     c001045f <VgaText::doANSI_SGR(int)+0x4f>
c0010456:	8b 14 8d 60 be 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd41a0]
c001045d:	eb 20                	jmp    c001047f <VgaText::doANSI_SGR(int)+0x6f>
c001045f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010462:	83 f9 07             	cmp    ecx,0x7
c0010465:	77 09                	ja     c0010470 <VgaText::doANSI_SGR(int)+0x60>
c0010467:	8b 14 8d 60 be 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd41a0]
c001046e:	eb 25                	jmp    c0010495 <VgaText::doANSI_SGR(int)+0x85>
c0010470:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010473:	83 f9 07             	cmp    ecx,0x7
c0010476:	77 0e                	ja     c0010486 <VgaText::doANSI_SGR(int)+0x76>
c0010478:	8b 14 95 18 bd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd42e8]
c001047f:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010485:	c3                   	ret    
c0010486:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010489:	83 f9 07             	cmp    ecx,0x7
c001048c:	77 0d                	ja     c001049b <VgaText::doANSI_SGR(int)+0x8b>
c001048e:	8b 14 95 f0 bc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4310]
c0010495:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001049b:	c3                   	ret    

c001049c <VgaText::setDefaultBgColour(VgaColour)>:
c001049c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104a4:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00104aa:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00104b0:	c3                   	ret    
c00104b1:	90                   	nop

c00104b2 <VgaText::setDefaultFgColour(VgaColour)>:
c00104b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104ba:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00104c0:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00104c6:	c3                   	ret    
c00104c7:	90                   	nop

c00104c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00104c8:	53                   	push   ebx
c00104c9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00104cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00104d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104d5:	51                   	push   ecx
c00104d6:	e8 c1 ff ff ff       	call   c001049c <VgaText::setDefaultBgColour(VgaColour)>
c00104db:	58                   	pop    eax
c00104dc:	5a                   	pop    edx
c00104dd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00104e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00104e5:	5b                   	pop    ebx
c00104e6:	eb ca                	jmp    c00104b2 <VgaText::setDefaultFgColour(VgaColour)>

c00104e8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00104e8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00104ec:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00104f1:	83 e0 0f             	and    eax,0xf
c00104f4:	c1 e2 04             	shl    edx,0x4
c00104f7:	09 d0                	or     eax,edx
c00104f9:	c3                   	ret    

c00104fa <VgaText::scrollScreen()>:
c00104fa:	57                   	push   edi
c00104fb:	56                   	push   esi
c00104fc:	be 01 00 00 00       	mov    esi,0x1
c0010501:	53                   	push   ebx
c0010502:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010506:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001050c:	31 ff                	xor    edi,edi
c001050e:	01 d9                	add    ecx,ebx
c0010510:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010513:	83 fe 17             	cmp    esi,0x17
c0010516:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001051c:	75 28                	jne    c0010546 <VgaText::scrollScreen()+0x4c>
c001051e:	f7 c7 01 00 00 00    	test   edi,0x1
c0010524:	74 1c                	je     c0010542 <VgaText::scrollScreen()+0x48>
c0010526:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001052d:	50                   	push   eax
c001052e:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010535:	50                   	push   eax
c0010536:	e8 ad ff ff ff       	call   c00104e8 <VgaText::combineColours(unsigned char, unsigned char)>
c001053b:	5a                   	pop    edx
c001053c:	5a                   	pop    edx
c001053d:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010540:	eb 04                	jmp    c0010546 <VgaText::scrollScreen()+0x4c>
c0010542:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010546:	47                   	inc    edi
c0010547:	41                   	inc    ecx
c0010548:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001054e:	75 c0                	jne    c0010510 <VgaText::scrollScreen()+0x16>
c0010550:	46                   	inc    esi
c0010551:	83 fe 18             	cmp    esi,0x18
c0010554:	75 b0                	jne    c0010506 <VgaText::scrollScreen()+0xc>
c0010556:	39 1d e4 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfe4,ebx
c001055c:	75 24                	jne    c0010582 <VgaText::scrollScreen()+0x88>
c001055e:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010565:	74 08                	je     c001056f <VgaText::scrollScreen()+0x75>
c0010567:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001056d:	eb 13                	jmp    c0010582 <VgaText::scrollScreen()+0x88>
c001056f:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010575:	85 c0                	test   eax,eax
c0010577:	74 09                	je     c0010582 <VgaText::scrollScreen()+0x88>
c0010579:	83 ec 0c             	sub    esp,0xc
c001057c:	53                   	push   ebx
c001057d:	ff d0                	call   eax
c001057f:	83 c4 10             	add    esp,0x10
c0010582:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010586:	5b                   	pop    ebx
c0010587:	5e                   	pop    esi
c0010588:	5f                   	pop    edi
c0010589:	e9 1e fe ff ff       	jmp    c00103ac <VgaText::updateCursor()>

c001058e <VgaText::combineCharAndColour(char, unsigned char)>:
c001058e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010593:	c1 e0 08             	shl    eax,0x8
c0010596:	89 c2                	mov    edx,eax
c0010598:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001059d:	09 d0                	or     eax,edx
c001059f:	c3                   	ret    

c00105a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00105a0:	53                   	push   ebx
c00105a1:	83 ec 08             	sub    esp,0x8
c00105a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00105a8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105ad:	50                   	push   eax
c00105ae:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00105b3:	50                   	push   eax
c00105b4:	e8 2f ff ff ff       	call   c00104e8 <VgaText::combineColours(unsigned char, unsigned char)>
c00105b9:	5a                   	pop    edx
c00105ba:	0f b6 c0             	movzx  eax,al
c00105bd:	5b                   	pop    ebx
c00105be:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00105c3:	50                   	push   eax
c00105c4:	53                   	push   ebx
c00105c5:	e8 c4 ff ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c00105ca:	5a                   	pop    edx
c00105cb:	5a                   	pop    edx
c00105cc:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00105d2:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00105d6:	0f b7 d2             	movzx  edx,dx
c00105d9:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00105de:	39 0d e4 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfe4,ecx
c00105e4:	75 14                	jne    c00105fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00105e6:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00105ec:	85 c0                	test   eax,eax
c00105ee:	74 0a                	je     c00105fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00105f0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105f4:	83 c4 08             	add    esp,0x8
c00105f7:	5b                   	pop    ebx
c00105f8:	ff e0                	jmp    eax
c00105fa:	83 c4 08             	add    esp,0x8
c00105fd:	5b                   	pop    ebx
c00105fe:	c3                   	ret    
c00105ff:	90                   	nop

c0010600 <VgaText::getCursorX()>:
c0010600:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010604:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c001060a:	c3                   	ret    
c001060b:	90                   	nop

c001060c <VgaText::getCursorY()>:
c001060c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010610:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010616:	c3                   	ret    
c0010617:	90                   	nop

c0010618 <VgaText::setCursor(int, int)>:
c0010618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001061c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010620:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010626:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001062a:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010630:	e9 77 fd ff ff       	jmp    c00103ac <VgaText::updateCursor()>
c0010635:	90                   	nop

c0010636 <VgaText::setCursorX(int)>:
c0010636:	83 ec 10             	sub    esp,0x10
c0010639:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001063d:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010643:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010647:	50                   	push   eax
c0010648:	e8 cb ff ff ff       	call   c0010618 <VgaText::setCursor(int, int)>
c001064d:	83 c4 1c             	add    esp,0x1c
c0010650:	c3                   	ret    
c0010651:	90                   	nop

c0010652 <VgaText::setCursorY(int)>:
c0010652:	83 ec 10             	sub    esp,0x10
c0010655:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010659:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001065d:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010663:	50                   	push   eax
c0010664:	e8 af ff ff ff       	call   c0010618 <VgaText::setCursor(int, int)>
c0010669:	83 c4 1c             	add    esp,0x1c
c001066c:	c3                   	ret    
c001066d:	90                   	nop

c001066e <VgaText::incrementCursor(bool)>:
c001066e:	56                   	push   esi
c001066f:	53                   	push   ebx
c0010670:	51                   	push   ecx
c0010671:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010675:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010679:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001067f:	40                   	inc    eax
c0010680:	83 f8 50             	cmp    eax,0x50
c0010683:	74 08                	je     c001068d <VgaText::incrementCursor(bool)+0x1f>
c0010685:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001068b:	eb 33                	jmp    c00106c0 <VgaText::incrementCursor(bool)+0x52>
c001068d:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010693:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001069d:	8d 50 01             	lea    edx,[eax+0x1]
c00106a0:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00106a6:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00106ac:	75 12                	jne    c00106c0 <VgaText::incrementCursor(bool)+0x52>
c00106ae:	83 ec 0c             	sub    esp,0xc
c00106b1:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00106b7:	53                   	push   ebx
c00106b8:	e8 3d fe ff ff       	call   c00104fa <VgaText::scrollScreen()>
c00106bd:	83 c4 10             	add    esp,0x10
c00106c0:	89 f0                	mov    eax,esi
c00106c2:	84 c0                	test   al,al
c00106c4:	74 0c                	je     c00106d2 <VgaText::incrementCursor(bool)+0x64>
c00106c6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00106ca:	5a                   	pop    edx
c00106cb:	5b                   	pop    ebx
c00106cc:	5e                   	pop    esi
c00106cd:	e9 da fc ff ff       	jmp    c00103ac <VgaText::updateCursor()>
c00106d2:	58                   	pop    eax
c00106d3:	5b                   	pop    ebx
c00106d4:	5e                   	pop    esi
c00106d5:	c3                   	ret    

c00106d6 <VgaText::updateRAMUsageDisplay(int)>:
c00106d6:	56                   	push   esi
c00106d7:	8b 35 40 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be40
c00106dd:	53                   	push   ebx
c00106de:	bb 0a 00 00 00       	mov    ebx,0xa
c00106e3:	6a 0f                	push   0xf
c00106e5:	6a 00                	push   0x0
c00106e7:	e8 fc fd ff ff       	call   c00104e8 <VgaText::combineColours(unsigned char, unsigned char)>
c00106ec:	5a                   	pop    edx
c00106ed:	59                   	pop    ecx
c00106ee:	0f b6 c8             	movzx  ecx,al
c00106f1:	51                   	push   ecx
c00106f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106f6:	99                   	cdq    
c00106f7:	f7 fb                	idiv   ebx
c00106f9:	89 d3                	mov    ebx,edx
c00106fb:	83 c0 30             	add    eax,0x30
c00106fe:	83 c3 30             	add    ebx,0x30
c0010701:	0f be c0             	movsx  eax,al
c0010704:	0f b6 db             	movzx  ebx,bl
c0010707:	50                   	push   eax
c0010708:	e8 81 fe ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c001070d:	5a                   	pop    edx
c001070e:	5a                   	pop    edx
c001070f:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010716:	51                   	push   ecx
c0010717:	53                   	push   ebx
c0010718:	e8 71 fe ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c001071d:	5b                   	pop    ebx
c001071e:	5a                   	pop    edx
c001071f:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010726:	51                   	push   ecx
c0010727:	6a 25                	push   0x25
c0010729:	e8 60 fe ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c001072e:	59                   	pop    ecx
c001072f:	5b                   	pop    ebx
c0010730:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010737:	5b                   	pop    ebx
c0010738:	5e                   	pop    esi
c0010739:	c3                   	ret    

c001073a <VgaText::updateDiskUsage()>:
c001073a:	55                   	push   ebp
c001073b:	bd 10 27 00 00       	mov    ebp,0x2710
c0010740:	57                   	push   edi
c0010741:	8b 3d 40 be 02 c0    	mov    edi,DWORD PTR ds:0xc002be40
c0010747:	56                   	push   esi
c0010748:	53                   	push   ebx
c0010749:	6a 0f                	push   0xf
c001074b:	6a 00                	push   0x0
c001074d:	e8 96 fd ff ff       	call   c00104e8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010752:	5a                   	pop    edx
c0010753:	0f b6 d8             	movzx  ebx,al
c0010756:	59                   	pop    ecx
c0010757:	8b 35 48 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f248
c001075d:	53                   	push   ebx
c001075e:	b9 0a 00 00 00       	mov    ecx,0xa
c0010763:	89 f0                	mov    eax,esi
c0010765:	99                   	cdq    
c0010766:	f7 fd                	idiv   ebp
c0010768:	99                   	cdq    
c0010769:	f7 f9                	idiv   ecx
c001076b:	8d 42 30             	lea    eax,[edx+0x30]
c001076e:	0f b6 c0             	movzx  eax,al
c0010771:	50                   	push   eax
c0010772:	e8 17 fe ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c0010777:	5d                   	pop    ebp
c0010778:	bd e8 03 00 00       	mov    ebp,0x3e8
c001077d:	5a                   	pop    edx
c001077e:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010782:	53                   	push   ebx
c0010783:	89 f0                	mov    eax,esi
c0010785:	99                   	cdq    
c0010786:	f7 fd                	idiv   ebp
c0010788:	99                   	cdq    
c0010789:	f7 f9                	idiv   ecx
c001078b:	8d 42 30             	lea    eax,[edx+0x30]
c001078e:	0f b6 c0             	movzx  eax,al
c0010791:	50                   	push   eax
c0010792:	e8 f7 fd ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c0010797:	5d                   	pop    ebp
c0010798:	bd 64 00 00 00       	mov    ebp,0x64
c001079d:	5a                   	pop    edx
c001079e:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00107a5:	53                   	push   ebx
c00107a6:	89 f0                	mov    eax,esi
c00107a8:	99                   	cdq    
c00107a9:	f7 fd                	idiv   ebp
c00107ab:	99                   	cdq    
c00107ac:	f7 f9                	idiv   ecx
c00107ae:	8d 42 30             	lea    eax,[edx+0x30]
c00107b1:	0f b6 c0             	movzx  eax,al
c00107b4:	50                   	push   eax
c00107b5:	e8 d4 fd ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c00107ba:	5d                   	pop    ebp
c00107bb:	5a                   	pop    edx
c00107bc:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00107c3:	53                   	push   ebx
c00107c4:	89 f0                	mov    eax,esi
c00107c6:	99                   	cdq    
c00107c7:	f7 f9                	idiv   ecx
c00107c9:	89 d6                	mov    esi,edx
c00107cb:	99                   	cdq    
c00107cc:	f7 f9                	idiv   ecx
c00107ce:	8d 42 30             	lea    eax,[edx+0x30]
c00107d1:	0f b6 c0             	movzx  eax,al
c00107d4:	50                   	push   eax
c00107d5:	e8 b4 fd ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c00107da:	5d                   	pop    ebp
c00107db:	5a                   	pop    edx
c00107dc:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00107e3:	53                   	push   ebx
c00107e4:	8d 46 30             	lea    eax,[esi+0x30]
c00107e7:	0f b6 f0             	movzx  esi,al
c00107ea:	56                   	push   esi
c00107eb:	e8 9e fd ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c00107f0:	5e                   	pop    esi
c00107f1:	8b 35 44 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f244
c00107f7:	5d                   	pop    ebp
c00107f8:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c00107ff:	bd 10 27 00 00       	mov    ebp,0x2710
c0010804:	53                   	push   ebx
c0010805:	89 f0                	mov    eax,esi
c0010807:	99                   	cdq    
c0010808:	f7 fd                	idiv   ebp
c001080a:	99                   	cdq    
c001080b:	f7 f9                	idiv   ecx
c001080d:	8d 42 30             	lea    eax,[edx+0x30]
c0010810:	0f b6 c0             	movzx  eax,al
c0010813:	50                   	push   eax
c0010814:	e8 75 fd ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c0010819:	5a                   	pop    edx
c001081a:	5d                   	pop    ebp
c001081b:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010822:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010827:	53                   	push   ebx
c0010828:	89 f0                	mov    eax,esi
c001082a:	99                   	cdq    
c001082b:	f7 fd                	idiv   ebp
c001082d:	99                   	cdq    
c001082e:	f7 f9                	idiv   ecx
c0010830:	8d 42 30             	lea    eax,[edx+0x30]
c0010833:	0f b6 c0             	movzx  eax,al
c0010836:	50                   	push   eax
c0010837:	e8 52 fd ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c001083c:	5a                   	pop    edx
c001083d:	5d                   	pop    ebp
c001083e:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010845:	bd 64 00 00 00       	mov    ebp,0x64
c001084a:	53                   	push   ebx
c001084b:	89 f0                	mov    eax,esi
c001084d:	99                   	cdq    
c001084e:	f7 fd                	idiv   ebp
c0010850:	99                   	cdq    
c0010851:	f7 f9                	idiv   ecx
c0010853:	83 c2 30             	add    edx,0x30
c0010856:	0f b6 d2             	movzx  edx,dl
c0010859:	52                   	push   edx
c001085a:	e8 2f fd ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c001085f:	5a                   	pop    edx
c0010860:	5d                   	pop    ebp
c0010861:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010868:	53                   	push   ebx
c0010869:	89 f0                	mov    eax,esi
c001086b:	99                   	cdq    
c001086c:	f7 f9                	idiv   ecx
c001086e:	89 d6                	mov    esi,edx
c0010870:	99                   	cdq    
c0010871:	f7 f9                	idiv   ecx
c0010873:	8d 42 30             	lea    eax,[edx+0x30]
c0010876:	0f b6 c0             	movzx  eax,al
c0010879:	50                   	push   eax
c001087a:	e8 0f fd ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c001087f:	5a                   	pop    edx
c0010880:	59                   	pop    ecx
c0010881:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010888:	53                   	push   ebx
c0010889:	8d 46 30             	lea    eax,[esi+0x30]
c001088c:	0f b6 f0             	movzx  esi,al
c001088f:	56                   	push   esi
c0010890:	e8 f9 fc ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c0010895:	5b                   	pop    ebx
c0010896:	5e                   	pop    esi
c0010897:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c001089e:	5b                   	pop    ebx
c001089f:	5e                   	pop    esi
c00108a0:	5f                   	pop    edi
c00108a1:	5d                   	pop    ebp
c00108a2:	c3                   	ret    
c00108a3:	90                   	nop

c00108a4 <VgaText::updateTitle()>:
c00108a4:	53                   	push   ebx
c00108a5:	31 c0                	xor    eax,eax
c00108a7:	83 ec 58             	sub    esp,0x58
c00108aa:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00108ae:	89 e1                	mov    ecx,esp
c00108b0:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00108b4:	40                   	inc    eax
c00108b5:	83 f8 50             	cmp    eax,0x50
c00108b8:	75 f6                	jne    c00108b0 <VgaText::updateTitle()+0xc>
c00108ba:	31 c0                	xor    eax,eax
c00108bc:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00108c3:	84 db                	test   bl,bl
c00108c5:	74 06                	je     c00108cd <VgaText::updateTitle()+0x29>
c00108c7:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00108ca:	40                   	inc    eax
c00108cb:	eb ef                	jmp    c00108bc <VgaText::updateTitle()+0x18>
c00108cd:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00108d3:	85 c0                	test   eax,eax
c00108d5:	74 09                	je     c00108e0 <VgaText::updateTitle()+0x3c>
c00108d7:	53                   	push   ebx
c00108d8:	53                   	push   ebx
c00108d9:	51                   	push   ecx
c00108da:	52                   	push   edx
c00108db:	ff d0                	call   eax
c00108dd:	83 c4 10             	add    esp,0x10
c00108e0:	e8 55 fe ff ff       	call   c001073a <VgaText::updateDiskUsage()>
c00108e5:	83 c4 58             	add    esp,0x58
c00108e8:	5b                   	pop    ebx
c00108e9:	c3                   	ret    

c00108ea <VgaText::setTitleTextColour(VgaColour)>:
c00108ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108f2:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00108f8:	eb aa                	jmp    c00108a4 <VgaText::updateTitle()>

c00108fa <VgaText::setTitleColour(VgaColour)>:
c00108fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010902:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010908:	eb 9a                	jmp    c00108a4 <VgaText::updateTitle()>

c001090a <VgaText::setTitle(char*)>:
c001090a:	53                   	push   ebx
c001090b:	83 ec 10             	sub    esp,0x10
c001090e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010916:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c001091c:	50                   	push   eax
c001091d:	e8 41 fe fe ff       	call   c0000763 <strcpy>
c0010922:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010926:	83 c4 18             	add    esp,0x18
c0010929:	5b                   	pop    ebx
c001092a:	e9 75 ff ff ff       	jmp    c00108a4 <VgaText::updateTitle()>
c001092f:	90                   	nop

c0010930 <VgaText::decrementCursor(bool)>:
c0010930:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010934:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010938:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c001093e:	85 c0                	test   eax,eax
c0010940:	74 07                	je     c0010949 <VgaText::decrementCursor(bool)+0x19>
c0010942:	48                   	dec    eax
c0010943:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010949:	84 c9                	test   cl,cl
c001094b:	74 09                	je     c0010956 <VgaText::decrementCursor(bool)+0x26>
c001094d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010951:	e9 56 fa ff ff       	jmp    c00103ac <VgaText::updateCursor()>
c0010956:	c3                   	ret    
c0010957:	90                   	nop

c0010958 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010958:	53                   	push   ebx
c0010959:	83 ec 08             	sub    esp,0x8
c001095c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010960:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010964:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010968:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001096c:	3c 07                	cmp    al,0x7
c001096e:	75 2a                	jne    c001099a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010970:	a1 8c d0 02 c0       	mov    eax,ds:0xc002d08c
c0010975:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001097d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010985:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001098d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010991:	83 c4 08             	add    esp,0x8
c0010994:	5b                   	pop    ebx
c0010995:	e9 3a 2d 00 00       	jmp    c00136d4 <Buzzer::beep(int, int, bool)>
c001099a:	3c 0d                	cmp    al,0xd
c001099c:	75 0c                	jne    c00109aa <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c001099e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109a8:	eb 3b                	jmp    c00109e5 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c00109aa:	3c 0a                	cmp    al,0xa
c00109ac:	75 40                	jne    c00109ee <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00109ae:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00109b4:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00109be:	8d 50 01             	lea    edx,[eax+0x1]
c00109c1:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00109c7:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00109cd:	75 12                	jne    c00109e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00109cf:	83 ec 0c             	sub    esp,0xc
c00109d2:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00109d8:	53                   	push   ebx
c00109d9:	e8 1c fb ff ff       	call   c00104fa <VgaText::scrollScreen()>
c00109de:	83 c4 10             	add    esp,0x10
c00109e1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00109e5:	83 c4 08             	add    esp,0x8
c00109e8:	5b                   	pop    ebx
c00109e9:	e9 be f9 ff ff       	jmp    c00103ac <VgaText::updateCursor()>
c00109ee:	3c 08                	cmp    al,0x8
c00109f0:	75 31                	jne    c0010a23 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00109f2:	50                   	push   eax
c00109f3:	50                   	push   eax
c00109f4:	6a 01                	push   0x1
c00109f6:	53                   	push   ebx
c00109f7:	e8 34 ff ff ff       	call   c0010930 <VgaText::decrementCursor(bool)>
c00109fc:	5a                   	pop    edx
c00109fd:	59                   	pop    ecx
c00109fe:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a04:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a0a:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010a10:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010a16:	6a 20                	push   0x20
c0010a18:	53                   	push   ebx
c0010a19:	e8 82 fb ff ff       	call   c00105a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a1e:	83 c4 28             	add    esp,0x28
c0010a21:	5b                   	pop    ebx
c0010a22:	c3                   	ret    
c0010a23:	83 ec 08             	sub    esp,0x8
c0010a26:	0f be c0             	movsx  eax,al
c0010a29:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010a2f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010a35:	51                   	push   ecx
c0010a36:	52                   	push   edx
c0010a37:	50                   	push   eax
c0010a38:	53                   	push   ebx
c0010a39:	e8 62 fb ff ff       	call   c00105a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010a3e:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010a42:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010a4a:	83 c4 28             	add    esp,0x28
c0010a4d:	5b                   	pop    ebx
c0010a4e:	e9 1b fc ff ff       	jmp    c001066e <VgaText::incrementCursor(bool)>
c0010a53:	90                   	nop

c0010a54 <VgaText::isShowingCursor()>:
c0010a54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a58:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010a5e:	c3                   	ret    
c0010a5f:	90                   	nop

c0010a60 <VgaText::isBlinkDisabled()>:
c0010a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a64:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010a6a:	83 f0 01             	xor    eax,0x1
c0010a6d:	c3                   	ret    

c0010a6e <VgaText::setCursorHeight(int)>:
c0010a6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a76:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010a7c:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010a83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010a87:	e9 3a f9 ff ff       	jmp    c00103c6 <VgaText::showCursor(bool)>

c0010a8c <VgaText::getCursorHeight()>:
c0010a8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a90:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010a96:	c3                   	ret    

c0010a97 <setActiveTerminal(VgaText*)>:
c0010a97:	53                   	push   ebx
c0010a98:	83 ec 08             	sub    esp,0x8
c0010a9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a9f:	85 db                	test   ebx,ebx
c0010aa1:	75 11                	jne    c0010ab4 <setActiveTerminal(VgaText*)+0x1d>
c0010aa3:	c7 44 24 10 1c 91 02 c0 	mov    DWORD PTR [esp+0x10],0xc002911c
c0010aab:	83 c4 08             	add    esp,0x8
c0010aae:	5b                   	pop    ebx
c0010aaf:	e9 01 91 00 00       	jmp    c0019bb5 <Krnl::panic(char const*)>
c0010ab4:	50                   	push   eax
c0010ab5:	50                   	push   eax
c0010ab6:	53                   	push   ebx
c0010ab7:	68 2a 91 02 c0       	push   0xc002912a
c0010abc:	e8 14 1e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0010ac1:	a1 e4 cf 02 c0       	mov    eax,ds:0xc002cfe4
c0010ac6:	83 c4 10             	add    esp,0x10
c0010ac9:	85 c0                	test   eax,eax
c0010acb:	74 0c                	je     c0010ad9 <setActiveTerminal(VgaText*)+0x42>
c0010acd:	83 ec 0c             	sub    esp,0xc
c0010ad0:	50                   	push   eax
c0010ad1:	e8 d6 f8 ff ff       	call   c00103ac <VgaText::updateCursor()>
c0010ad6:	83 c4 10             	add    esp,0x10
c0010ad9:	89 1d e4 cf 02 c0    	mov    DWORD PTR ds:0xc002cfe4,ebx
c0010adf:	51                   	push   ecx
c0010ae0:	51                   	push   ecx
c0010ae1:	53                   	push   ebx
c0010ae2:	68 42 91 02 c0       	push   0xc0029142
c0010ae7:	e8 e9 1d 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0010aec:	83 c4 0c             	add    esp,0xc
c0010aef:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010af5:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010afb:	53                   	push   ebx
c0010afc:	e8 17 fb ff ff       	call   c0010618 <VgaText::setCursor(int, int)>
c0010b01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b04:	e8 57 ff ff ff       	call   c0010a60 <VgaText::isBlinkDisabled()>
c0010b09:	5a                   	pop    edx
c0010b0a:	0f b6 c0             	movzx  eax,al
c0010b0d:	59                   	pop    ecx
c0010b0e:	50                   	push   eax
c0010b0f:	53                   	push   ebx
c0010b10:	e8 c1 f8 ff ff       	call   c00103d6 <VgaText::disableBlink(bool)>
c0010b15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b18:	e8 6f ff ff ff       	call   c0010a8c <VgaText::getCursorHeight()>
c0010b1d:	5a                   	pop    edx
c0010b1e:	59                   	pop    ecx
c0010b1f:	50                   	push   eax
c0010b20:	53                   	push   ebx
c0010b21:	e8 48 ff ff ff       	call   c0010a6e <VgaText::setCursorHeight(int)>
c0010b26:	83 c4 10             	add    esp,0x10
c0010b29:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010b30:	75 0a                	jne    c0010b3c <setActiveTerminal(VgaText*)+0xa5>
c0010b32:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010b3c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010b40:	83 c4 08             	add    esp,0x8
c0010b43:	5b                   	pop    ebx
c0010b44:	e9 0f f8 ff ff       	jmp    c0010358 <VgaText::load()>

c0010b49 <doTerminalCycle()>:
c0010b49:	83 ec 18             	sub    esp,0x18
c0010b4c:	a1 e0 cf 02 c0       	mov    eax,ds:0xc002cfe0
c0010b51:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010b57:	50                   	push   eax
c0010b58:	a3 e0 cf 02 c0       	mov    ds:0xc002cfe0,eax
c0010b5d:	e8 35 ff ff ff       	call   c0010a97 <setActiveTerminal(VgaText*)>
c0010b62:	83 c4 1c             	add    esp,0x1c
c0010b65:	c3                   	ret    

c0010b66 <VgaText::doUpdate()>:
c0010b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b6a:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010b70:	85 c0                	test   eax,eax
c0010b72:	74 02                	je     c0010b76 <VgaText::doUpdate()+0x10>
c0010b74:	ff e0                	jmp    eax
c0010b76:	c3                   	ret    
c0010b77:	90                   	nop

c0010b78 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010b78:	55                   	push   ebp
c0010b79:	57                   	push   edi
c0010b7a:	56                   	push   esi
c0010b7b:	53                   	push   ebx
c0010b7c:	83 ec 1c             	sub    esp,0x1c
c0010b7f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010b83:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010b88:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010b8f:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010b92:	50                   	push   eax
c0010b93:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010b98:	50                   	push   eax
c0010b99:	e8 4a f9 ff ff       	call   c00104e8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010b9e:	59                   	pop    ecx
c0010b9f:	0f b6 c0             	movzx  eax,al
c0010ba2:	5b                   	pop    ebx
c0010ba3:	31 c9                	xor    ecx,ecx
c0010ba5:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010bad:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010bb1:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010bb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010bbb:	0f b7 db             	movzx  ebx,bx
c0010bbe:	01 db                	add    ebx,ebx
c0010bc0:	01 fb                	add    ebx,edi
c0010bc2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010bc5:	84 c0                	test   al,al
c0010bc7:	0f 84 38 01 00 00    	je     c0010d05 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010bcd:	3c 0d                	cmp    al,0xd
c0010bcf:	75 0f                	jne    c0010be0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010bd1:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010bdb:	e9 1f 01 00 00       	jmp    c0010cff <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010be0:	3c 0a                	cmp    al,0xa
c0010be2:	75 5b                	jne    c0010c3f <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010be4:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010bea:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010bf4:	8d 48 01             	lea    ecx,[eax+0x1]
c0010bf7:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010bfd:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010c03:	75 12                	jne    c0010c17 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010c05:	83 ec 0c             	sub    esp,0xc
c0010c08:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010c0e:	55                   	push   ebp
c0010c0f:	e8 e6 f8 ff ff       	call   c00104fa <VgaText::scrollScreen()>
c0010c14:	83 c4 10             	add    esp,0x10
c0010c17:	83 ec 0c             	sub    esp,0xc
c0010c1a:	55                   	push   ebp
c0010c1b:	e8 8c f7 ff ff       	call   c00103ac <VgaText::updateCursor()>
c0010c20:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c28:	83 c4 10             	add    esp,0x10
c0010c2b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010c31:	31 c9                	xor    ecx,ecx
c0010c33:	0f b7 db             	movzx  ebx,bx
c0010c36:	01 db                	add    ebx,ebx
c0010c38:	01 fb                	add    ebx,edi
c0010c3a:	e9 c0 00 00 00       	jmp    c0010cff <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010c3f:	3c 08                	cmp    al,0x8
c0010c41:	75 4e                	jne    c0010c91 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010c43:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010c47:	53                   	push   ebx
c0010c48:	53                   	push   ebx
c0010c49:	6a 01                	push   0x1
c0010c4b:	55                   	push   ebp
c0010c4c:	e8 df fc ff ff       	call   c0010930 <VgaText::decrementCursor(bool)>
c0010c51:	58                   	pop    eax
c0010c52:	5a                   	pop    edx
c0010c53:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010c59:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010c5f:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010c65:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010c6b:	6a 20                	push   0x20
c0010c6d:	55                   	push   ebp
c0010c6e:	e8 2d f9 ff ff       	call   c00105a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c73:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010c7b:	83 c4 20             	add    esp,0x20
c0010c7e:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010c84:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010c88:	0f b7 db             	movzx  ebx,bx
c0010c8b:	01 db                	add    ebx,ebx
c0010c8d:	01 fb                	add    ebx,edi
c0010c8f:	eb 6e                	jmp    c0010cff <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010c91:	51                   	push   ecx
c0010c92:	51                   	push   ecx
c0010c93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010c97:	50                   	push   eax
c0010c98:	e8 f1 f8 ff ff       	call   c001058e <VgaText::combineCharAndColour(char, unsigned char)>
c0010c9d:	83 c4 10             	add    esp,0x10
c0010ca0:	66 89 03             	mov    WORD PTR [ebx],ax
c0010ca3:	39 2d e4 cf 02 c0    	cmp    DWORD PTR ds:0xc002cfe4,ebp
c0010ca9:	75 2a                	jne    c0010cd5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cab:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010cb1:	85 c0                	test   eax,eax
c0010cb3:	74 20                	je     c0010cd5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010cb5:	52                   	push   edx
c0010cb6:	52                   	push   edx
c0010cb7:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010cbd:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010cc3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010cc7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ccb:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010cce:	51                   	push   ecx
c0010ccf:	55                   	push   ebp
c0010cd0:	ff d0                	call   eax
c0010cd2:	83 c4 20             	add    esp,0x20
c0010cd5:	83 c3 02             	add    ebx,0x2
c0010cd8:	50                   	push   eax
c0010cd9:	50                   	push   eax
c0010cda:	6a 00                	push   0x0
c0010cdc:	55                   	push   ebp
c0010cdd:	e8 8c f9 ff ff       	call   c001066e <VgaText::incrementCursor(bool)>
c0010ce2:	83 c4 10             	add    esp,0x10
c0010ce5:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010cec:	75 0f                	jne    c0010cfd <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010cee:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010cf6:	0f b7 db             	movzx  ebx,bx
c0010cf9:	01 db                	add    ebx,ebx
c0010cfb:	01 fb                	add    ebx,edi
c0010cfd:	b1 01                	mov    cl,0x1
c0010cff:	46                   	inc    esi
c0010d00:	e9 bd fe ff ff       	jmp    c0010bc2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010d05:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010d09:	83 ec 0c             	sub    esp,0xc
c0010d0c:	55                   	push   ebp
c0010d0d:	e8 9a f6 ff ff       	call   c00103ac <VgaText::updateCursor()>
c0010d12:	83 c4 10             	add    esp,0x10
c0010d15:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010d19:	84 c9                	test   cl,cl
c0010d1b:	74 0c                	je     c0010d29 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010d1d:	83 ec 0c             	sub    esp,0xc
c0010d20:	55                   	push   ebp
c0010d21:	e8 40 fe ff ff       	call   c0010b66 <VgaText::doUpdate()>
c0010d26:	83 c4 10             	add    esp,0x10
c0010d29:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010d30:	83 c4 1c             	add    esp,0x1c
c0010d33:	5b                   	pop    ebx
c0010d34:	5e                   	pop    esi
c0010d35:	5f                   	pop    edi
c0010d36:	5d                   	pop    ebp
c0010d37:	c3                   	ret    

c0010d38 <VgaText::clearScreen()>:
c0010d38:	57                   	push   edi
c0010d39:	56                   	push   esi
c0010d3a:	31 f6                	xor    esi,esi
c0010d3c:	53                   	push   ebx
c0010d3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d41:	52                   	push   edx
c0010d42:	6a 00                	push   0x0
c0010d44:	6a 00                	push   0x0
c0010d46:	53                   	push   ebx
c0010d47:	e8 cc f8 ff ff       	call   c0010618 <VgaText::setCursor(int, int)>
c0010d4c:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010d53:	83 c4 10             	add    esp,0x10
c0010d56:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010d5c:	7e 26                	jle    c0010d84 <VgaText::clearScreen()+0x4c>
c0010d5e:	31 ff                	xor    edi,edi
c0010d60:	50                   	push   eax
c0010d61:	50                   	push   eax
c0010d62:	56                   	push   esi
c0010d63:	57                   	push   edi
c0010d64:	47                   	inc    edi
c0010d65:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d6b:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d71:	6a 20                	push   0x20
c0010d73:	53                   	push   ebx
c0010d74:	e8 27 f8 ff ff       	call   c00105a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010d79:	83 c4 20             	add    esp,0x20
c0010d7c:	83 ff 50             	cmp    edi,0x50
c0010d7f:	75 df                	jne    c0010d60 <VgaText::clearScreen()+0x28>
c0010d81:	46                   	inc    esi
c0010d82:	eb d2                	jmp    c0010d56 <VgaText::clearScreen()+0x1e>
c0010d84:	83 ec 0c             	sub    esp,0xc
c0010d87:	53                   	push   ebx
c0010d88:	e8 d9 fd ff ff       	call   c0010b66 <VgaText::doUpdate()>
c0010d8d:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010d94:	83 c4 10             	add    esp,0x10
c0010d97:	5b                   	pop    ebx
c0010d98:	5e                   	pop    esi
c0010d99:	5f                   	pop    edi
c0010d9a:	c3                   	ret    
c0010d9b:	90                   	nop

c0010d9c <VgaText::putchar(char)>:
c0010d9c:	56                   	push   esi
c0010d9d:	53                   	push   ebx
c0010d9e:	83 ec 14             	sub    esp,0x14
c0010da1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010da5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010da9:	3c 5b                	cmp    al,0x5b
c0010dab:	75 21                	jne    c0010dce <VgaText::putchar(char)+0x32>
c0010dad:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010db4:	74 28                	je     c0010dde <VgaText::putchar(char)+0x42>
c0010db6:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010dbf:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010dc9:	e9 e2 00 00 00       	jmp    c0010eb0 <VgaText::putchar(char)+0x114>
c0010dce:	3c 1b                	cmp    al,0x1b
c0010dd0:	75 0c                	jne    c0010dde <VgaText::putchar(char)+0x42>
c0010dd2:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010dd9:	e9 d2 00 00 00       	jmp    c0010eb0 <VgaText::putchar(char)+0x114>
c0010dde:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010de4:	84 c9                	test   cl,cl
c0010de6:	0f 84 ab 00 00 00    	je     c0010e97 <VgaText::putchar(char)+0xfb>
c0010dec:	8d 50 c0             	lea    edx,[eax-0x40]
c0010def:	80 fa 3e             	cmp    dl,0x3e
c0010df2:	0f 87 82 00 00 00    	ja     c0010e7a <VgaText::putchar(char)+0xde>
c0010df8:	3c 6d                	cmp    al,0x6d
c0010dfa:	75 4d                	jne    c0010e49 <VgaText::putchar(char)+0xad>
c0010dfc:	31 f6                	xor    esi,esi
c0010dfe:	31 d2                	xor    edx,edx
c0010e00:	31 c0                	xor    eax,eax
c0010e02:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010e08:	7e 30                	jle    c0010e3a <VgaText::putchar(char)+0x9e>
c0010e0a:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010e12:	80 fa 3b             	cmp    dl,0x3b
c0010e15:	75 17                	jne    c0010e2e <VgaText::putchar(char)+0x92>
c0010e17:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010e1b:	50                   	push   eax
c0010e1c:	53                   	push   ebx
c0010e1d:	e8 ee f5 ff ff       	call   c0010410 <VgaText::doANSI_SGR(int)>
c0010e22:	59                   	pop    ecx
c0010e23:	31 d2                	xor    edx,edx
c0010e25:	58                   	pop    eax
c0010e26:	31 c0                	xor    eax,eax
c0010e28:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010e2c:	eb 09                	jmp    c0010e37 <VgaText::putchar(char)+0x9b>
c0010e2e:	6b c0 0a             	imul   eax,eax,0xa
c0010e31:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010e35:	88 ca                	mov    dl,cl
c0010e37:	46                   	inc    esi
c0010e38:	eb c8                	jmp    c0010e02 <VgaText::putchar(char)+0x66>
c0010e3a:	84 d2                	test   dl,dl
c0010e3c:	74 31                	je     c0010e6f <VgaText::putchar(char)+0xd3>
c0010e3e:	50                   	push   eax
c0010e3f:	53                   	push   ebx
c0010e40:	e8 cb f5 ff ff       	call   c0010410 <VgaText::doANSI_SGR(int)>
c0010e45:	58                   	pop    eax
c0010e46:	5a                   	pop    edx
c0010e47:	eb 26                	jmp    c0010e6f <VgaText::putchar(char)+0xd3>
c0010e49:	3c 4a                	cmp    al,0x4a
c0010e4b:	75 22                	jne    c0010e6f <VgaText::putchar(char)+0xd3>
c0010e4d:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010e54:	75 19                	jne    c0010e6f <VgaText::putchar(char)+0xd3>
c0010e56:	83 ec 0c             	sub    esp,0xc
c0010e59:	53                   	push   ebx
c0010e5a:	e8 d9 fe ff ff       	call   c0010d38 <VgaText::clearScreen()>
c0010e5f:	83 c4 0c             	add    esp,0xc
c0010e62:	6a 00                	push   0x0
c0010e64:	6a 00                	push   0x0
c0010e66:	53                   	push   ebx
c0010e67:	e8 ac f7 ff ff       	call   c0010618 <VgaText::setCursor(int, int)>
c0010e6c:	83 c4 10             	add    esp,0x10
c0010e6f:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010e78:	eb 36                	jmp    c0010eb0 <VgaText::putchar(char)+0x114>
c0010e7a:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010e80:	83 fa 0e             	cmp    edx,0xe
c0010e83:	7f 2b                	jg     c0010eb0 <VgaText::putchar(char)+0x114>
c0010e85:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010e88:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010e8e:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010e95:	eb 19                	jmp    c0010eb0 <VgaText::putchar(char)+0x114>
c0010e97:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010e9d:	0f be c0             	movsx  eax,al
c0010ea0:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010ea6:	50                   	push   eax
c0010ea7:	53                   	push   ebx
c0010ea8:	e8 ab fa ff ff       	call   c0010958 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010ead:	83 c4 10             	add    esp,0x10
c0010eb0:	83 c4 14             	add    esp,0x14
c0010eb3:	5b                   	pop    ebx
c0010eb4:	5e                   	pop    esi
c0010eb5:	c3                   	ret    

c0010eb6 <VgaText::puts(char const*)>:
c0010eb6:	53                   	push   ebx
c0010eb7:	83 ec 08             	sub    esp,0x8
c0010eba:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ebe:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010ec1:	84 c0                	test   al,al
c0010ec3:	74 12                	je     c0010ed7 <VgaText::puts(char const*)+0x21>
c0010ec5:	43                   	inc    ebx
c0010ec6:	51                   	push   ecx
c0010ec7:	51                   	push   ecx
c0010ec8:	50                   	push   eax
c0010ec9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ecd:	e8 ca fe ff ff       	call   c0010d9c <VgaText::putchar(char)>
c0010ed2:	83 c4 10             	add    esp,0x10
c0010ed5:	eb e7                	jmp    c0010ebe <VgaText::puts(char const*)+0x8>
c0010ed7:	83 c4 08             	add    esp,0x8
c0010eda:	5b                   	pop    ebx
c0010edb:	c3                   	ret    

c0010edc <VgaText::putx(unsigned int)>:
c0010edc:	57                   	push   edi
c0010edd:	b9 11 00 00 00       	mov    ecx,0x11
c0010ee2:	56                   	push   esi
c0010ee3:	be 5e 91 02 c0       	mov    esi,0xc002915e
c0010ee8:	53                   	push   ebx
c0010ee9:	83 ec 20             	sub    esp,0x20
c0010eec:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ef0:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010ef4:	fc                   	cld    
c0010ef5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ef7:	be 08 00 00 00       	mov    esi,0x8
c0010efc:	50                   	push   eax
c0010efd:	50                   	push   eax
c0010efe:	89 d8                	mov    eax,ebx
c0010f00:	c1 e3 04             	shl    ebx,0x4
c0010f03:	c1 e8 1c             	shr    eax,0x1c
c0010f06:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010f0b:	50                   	push   eax
c0010f0c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010f10:	e8 87 fe ff ff       	call   c0010d9c <VgaText::putchar(char)>
c0010f15:	83 c4 10             	add    esp,0x10
c0010f18:	4e                   	dec    esi
c0010f19:	75 e1                	jne    c0010efc <VgaText::putx(unsigned int)+0x20>
c0010f1b:	83 c4 20             	add    esp,0x20
c0010f1e:	5b                   	pop    ebx
c0010f1f:	5e                   	pop    esi
c0010f20:	5f                   	pop    edi
c0010f21:	c3                   	ret    

c0010f22 <VgaText::VgaText(char const*)>:
c0010f22:	57                   	push   edi
c0010f23:	56                   	push   esi
c0010f24:	53                   	push   ebx
c0010f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f29:	83 ec 08             	sub    esp,0x8
c0010f2c:	6a 00                	push   0x0
c0010f2e:	50                   	push   eax
c0010f2f:	e8 6e 05 00 00       	call   c00114a2 <UnixFile::UnixFile(int)>
c0010f34:	83 c4 10             	add    esp,0x10
c0010f37:	ba c4 91 02 c0       	mov    edx,0xc00291c4
c0010f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f40:	89 10                	mov    DWORD PTR [eax],edx
c0010f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f46:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f54:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f62:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f6d:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f78:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f86:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f94:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f9f:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010faa:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010fb0:	bb c0 cf 02 c0       	mov    ebx,0xc002cfc0
c0010fb5:	b8 08 00 00 00       	mov    eax,0x8
c0010fba:	fc                   	cld    
c0010fbb:	89 d7                	mov    edi,edx
c0010fbd:	89 de                	mov    esi,ebx
c0010fbf:	89 c1                	mov    ecx,eax
c0010fc1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc7:	05 1e 10 00 00       	add    eax,0x101e
c0010fcc:	83 ec 08             	sub    esp,0x8
c0010fcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fd3:	50                   	push   eax
c0010fd4:	e8 8a f7 fe ff       	call   c0000763 <strcpy>
c0010fd9:	83 c4 10             	add    esp,0x10
c0010fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fe0:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fee:	83 c0 0c             	add    eax,0xc
c0010ff1:	83 ec 04             	sub    esp,0x4
c0010ff4:	68 00 0f 00 00       	push   0xf00
c0010ff9:	6a 00                	push   0x0
c0010ffb:	50                   	push   eax
c0010ffc:	e8 c3 f6 fe ff       	call   c00006c4 <memset>
c0011001:	83 c4 10             	add    esp,0x10
c0011004:	83 ec 04             	sub    esp,0x4
c0011007:	6a 00                	push   0x0
c0011009:	6a 07                	push   0x7
c001100b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001100f:	e8 b4 f4 ff ff       	call   c00104c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011014:	83 c4 10             	add    esp,0x10
c0011017:	83 ec 08             	sub    esp,0x8
c001101a:	6a 02                	push   0x2
c001101c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011020:	e8 49 fa ff ff       	call   c0010a6e <VgaText::setCursorHeight(int)>
c0011025:	83 c4 10             	add    esp,0x10
c0011028:	83 ec 04             	sub    esp,0x4
c001102b:	6a 00                	push   0x0
c001102d:	6a 00                	push   0x0
c001102f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011033:	e8 e0 f5 ff ff       	call   c0010618 <VgaText::setCursor(int, int)>
c0011038:	83 c4 10             	add    esp,0x10
c001103b:	83 ec 08             	sub    esp,0x8
c001103e:	6a 01                	push   0x1
c0011040:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011044:	e8 7d f3 ff ff       	call   c00103c6 <VgaText::showCursor(bool)>
c0011049:	83 c4 10             	add    esp,0x10
c001104c:	83 ec 08             	sub    esp,0x8
c001104f:	6a 01                	push   0x1
c0011051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011055:	e8 7c f3 ff ff       	call   c00103d6 <VgaText::disableBlink(bool)>
c001105a:	83 c4 10             	add    esp,0x10
c001105d:	83 ec 0c             	sub    esp,0xc
c0011060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011064:	e8 cf fc ff ff       	call   c0010d38 <VgaText::clearScreen()>
c0011069:	83 c4 10             	add    esp,0x10
c001106c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011070:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001107b:	05 9e 10 00 00       	add    eax,0x109e
c0011080:	83 ec 04             	sub    esp,0x4
c0011083:	68 96 00 00 00       	push   0x96
c0011088:	6a 00                	push   0x0
c001108a:	50                   	push   eax
c001108b:	e8 34 f6 fe ff       	call   c00006c4 <memset>
c0011090:	83 c4 10             	add    esp,0x10
c0011093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011097:	05 34 11 00 00       	add    eax,0x1134
c001109c:	83 ec 04             	sub    esp,0x4
c001109f:	68 2c 01 00 00       	push   0x12c
c00110a4:	6a 00                	push   0x0
c00110a6:	50                   	push   eax
c00110a7:	e8 18 f6 fe ff       	call   c00006c4 <memset>
c00110ac:	83 c4 10             	add    esp,0x10
c00110af:	90                   	nop
c00110b0:	5b                   	pop    ebx
c00110b1:	5e                   	pop    esi
c00110b2:	5f                   	pop    edi
c00110b3:	c3                   	ret    

c00110b4 <VgaText::receiveKey(unsigned char)>:
c00110b4:	55                   	push   ebp
c00110b5:	57                   	push   edi
c00110b6:	56                   	push   esi
c00110b7:	53                   	push   ebx
c00110b8:	83 ec 1c             	sub    esp,0x1c
c00110bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00110bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00110c3:	84 db                	test   bl,bl
c00110c5:	0f 84 c9 00 00 00    	je     c0011194 <VgaText::receiveKey(unsigned char)+0xe0>
c00110cb:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c00110d1:	80 fb 08             	cmp    bl,0x8
c00110d4:	75 2c                	jne    c0011102 <VgaText::receiveKey(unsigned char)+0x4e>
c00110d6:	83 ec 0c             	sub    esp,0xc
c00110d9:	57                   	push   edi
c00110da:	e8 02 f6 fe ff       	call   c00006e1 <strlen>
c00110df:	83 c4 10             	add    esp,0x10
c00110e2:	85 c0                	test   eax,eax
c00110e4:	74 41                	je     c0011127 <VgaText::receiveKey(unsigned char)+0x73>
c00110e6:	50                   	push   eax
c00110e7:	50                   	push   eax
c00110e8:	6a 08                	push   0x8
c00110ea:	56                   	push   esi
c00110eb:	e8 ac fc ff ff       	call   c0010d9c <VgaText::putchar(char)>
c00110f0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110f3:	e8 e9 f5 fe ff       	call   c00006e1 <strlen>
c00110f8:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0011100:	eb 22                	jmp    c0011124 <VgaText::receiveKey(unsigned char)+0x70>
c0011102:	0f be c3             	movsx  eax,bl
c0011105:	52                   	push   edx
c0011106:	52                   	push   edx
c0011107:	50                   	push   eax
c0011108:	56                   	push   esi
c0011109:	e8 8e fc ff ff       	call   c0010d9c <VgaText::putchar(char)>
c001110e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011112:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011117:	59                   	pop    ecx
c0011118:	5d                   	pop    ebp
c0011119:	8d 44 24 16          	lea    eax,[esp+0x16]
c001111d:	50                   	push   eax
c001111e:	57                   	push   edi
c001111f:	e8 f6 f6 fe ff       	call   c000081a <strcat>
c0011124:	83 c4 10             	add    esp,0x10
c0011127:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001112e:	75 05                	jne    c0011135 <VgaText::receiveKey(unsigned char)+0x81>
c0011130:	80 fb 0a             	cmp    bl,0xa
c0011133:	75 53                	jne    c0011188 <VgaText::receiveKey(unsigned char)+0xd4>
c0011135:	83 ec 0c             	sub    esp,0xc
c0011138:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001113e:	53                   	push   ebx
c001113f:	e8 9d f5 fe ff       	call   c00006e1 <strlen>
c0011144:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011147:	89 c5                	mov    ebp,eax
c0011149:	e8 93 f5 fe ff       	call   c00006e1 <strlen>
c001114e:	83 c4 10             	add    esp,0x10
c0011151:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011155:	3d 2c 01 00 00       	cmp    eax,0x12c
c001115a:	76 10                	jbe    c001116c <VgaText::receiveKey(unsigned char)+0xb8>
c001115c:	83 ec 0c             	sub    esp,0xc
c001115f:	68 6f 91 02 c0       	push   0xc002916f
c0011164:	e8 4c 8a 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c0011169:	83 c4 10             	add    esp,0x10
c001116c:	50                   	push   eax
c001116d:	50                   	push   eax
c001116e:	57                   	push   edi
c001116f:	53                   	push   ebx
c0011170:	e8 a5 f6 fe ff       	call   c000081a <strcat>
c0011175:	83 c4 0c             	add    esp,0xc
c0011178:	68 96 00 00 00       	push   0x96
c001117d:	6a 00                	push   0x0
c001117f:	57                   	push   edi
c0011180:	e8 3f f5 fe ff       	call   c00006c4 <memset>
c0011185:	83 c4 10             	add    esp,0x10
c0011188:	83 ec 0c             	sub    esp,0xc
c001118b:	56                   	push   esi
c001118c:	e8 d5 f9 ff ff       	call   c0010b66 <VgaText::doUpdate()>
c0011191:	83 c4 10             	add    esp,0x10
c0011194:	83 c4 1c             	add    esp,0x1c
c0011197:	5b                   	pop    ebx
c0011198:	5e                   	pop    esi
c0011199:	5f                   	pop    edi
c001119a:	5d                   	pop    ebp
c001119b:	c3                   	ret    

c001119c <VgaText::write(unsigned long long, void*, int*)>:
c001119c:	55                   	push   ebp
c001119d:	57                   	push   edi
c001119e:	56                   	push   esi
c001119f:	53                   	push   ebx
c00111a0:	83 ec 0c             	sub    esp,0xc
c00111a3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00111a7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00111ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00111af:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00111b6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00111b9:	39 eb                	cmp    ebx,ebp
c00111bb:	74 13                	je     c00111d0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00111bd:	43                   	inc    ebx
c00111be:	50                   	push   eax
c00111bf:	50                   	push   eax
c00111c0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00111c4:	50                   	push   eax
c00111c5:	56                   	push   esi
c00111c6:	e8 d1 fb ff ff       	call   c0010d9c <VgaText::putchar(char)>
c00111cb:	83 c4 10             	add    esp,0x10
c00111ce:	eb e9                	jmp    c00111b9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00111d0:	83 ec 0c             	sub    esp,0xc
c00111d3:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c00111da:	56                   	push   esi
c00111db:	e8 86 f9 ff ff       	call   c0010b66 <VgaText::doUpdate()>
c00111e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00111e4:	89 38                	mov    DWORD PTR [eax],edi
c00111e6:	83 c4 1c             	add    esp,0x1c
c00111e9:	31 c0                	xor    eax,eax
c00111eb:	5b                   	pop    ebx
c00111ec:	5e                   	pop    esi
c00111ed:	5f                   	pop    edi
c00111ee:	5d                   	pop    ebp
c00111ef:	c3                   	ret    

c00111f0 <newTerminal(char*)>:
c00111f0:	83 ec 28             	sub    esp,0x28
c00111f3:	68 60 12 00 00       	push   0x1260
c00111f8:	e8 27 e4 ff ff       	call   c000f624 <malloc>
c00111fd:	5a                   	pop    edx
c00111fe:	59                   	pop    ecx
c00111ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011203:	50                   	push   eax
c0011204:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011208:	e8 15 fd ff ff       	call   c0010f22 <VgaText::VgaText(char const*)>
c001120d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011211:	83 c4 2c             	add    esp,0x2c
c0011214:	c3                   	ret    
c0011215:	90                   	nop

c0011216 <TSS::TSS()>:
c0011216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001121a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011221:	90                   	nop
c0011222:	c3                   	ret    
c0011223:	90                   	nop

c0011224 <TSS::setESP(unsigned long)>:
c0011224:	55                   	push   ebp
c0011225:	89 e5                	mov    ebp,esp
c0011227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001122a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001122d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011230:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011233:	90                   	nop
c0011234:	5d                   	pop    ebp
c0011235:	c3                   	ret    

c0011236 <TSS::flush()>:
c0011236:	55                   	push   ebp
c0011237:	89 e5                	mov    ebp,esp
c0011239:	83 ec 10             	sub    esp,0x10
c001123c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001123f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011241:	83 c8 03             	or     eax,0x3
c0011244:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011248:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001124c:	66 89 d0             	mov    ax,dx
c001124f:	0f 00 d8             	ltr    ax
c0011252:	90                   	nop
c0011253:	c9                   	leave  
c0011254:	c3                   	ret    
c0011255:	90                   	nop

c0011256 <TSS::setup(unsigned long, unsigned long)>:
c0011256:	55                   	push   ebp
c0011257:	89 e5                	mov    ebp,esp
c0011259:	83 ec 18             	sub    esp,0x18
c001125c:	83 ec 0c             	sub    esp,0xc
c001125f:	6a 68                	push   0x68
c0011261:	e8 be e3 ff ff       	call   c000f624 <malloc>
c0011266:	83 c4 10             	add    esp,0x10
c0011269:	89 c2                	mov    edx,eax
c001126b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001126e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011274:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011277:	83 ec 04             	sub    esp,0x4
c001127a:	6a 68                	push   0x68
c001127c:	6a 00                	push   0x0
c001127e:	50                   	push   eax
c001127f:	e8 40 f4 fe ff       	call   c00006c4 <memset>
c0011284:	83 c4 10             	add    esp,0x10
c0011287:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001128a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001128d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011296:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011299:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001129f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112a5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00112a8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00112ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112b1:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00112b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112bd:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00112c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112c9:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00112cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112d5:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00112db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112e1:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00112e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112ed:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00112f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112f9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00112fc:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00112ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011302:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011305:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011308:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001130b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001130e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011311:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001131b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001131e:	0f 20 da             	mov    edx,cr3
c0011321:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011324:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011327:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001132a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001132d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011330:	83 ec 08             	sub    esp,0x8
c0011333:	50                   	push   eax
c0011334:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011337:	50                   	push   eax
c0011338:	e8 c5 da ff ff       	call   c000ee02 <GDTEntry::setBase(unsigned int)>
c001133d:	83 c4 10             	add    esp,0x10
c0011340:	83 ec 08             	sub    esp,0x8
c0011343:	6a 68                	push   0x68
c0011345:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011348:	50                   	push   eax
c0011349:	e8 d0 da ff ff       	call   c000ee1e <GDTEntry::setLimit(unsigned int)>
c001134e:	83 c4 10             	add    esp,0x10
c0011351:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011355:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011358:	83 e0 0f             	and    eax,0xf
c001135b:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001135e:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011361:	83 c8 40             	or     eax,0x40
c0011364:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011367:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c001136c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011372:	05 78 01 00 00       	add    eax,0x178
c0011377:	83 ec 04             	sub    esp,0x4
c001137a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001137d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011380:	50                   	push   eax
c0011381:	e8 cc da ff ff       	call   c000ee52 <GDT::addEntry(GDTEntry)>
c0011386:	83 c4 10             	add    esp,0x10
c0011389:	89 c2                	mov    edx,eax
c001138b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001138e:	89 10                	mov    DWORD PTR [eax],edx
c0011390:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0011395:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001139b:	05 78 01 00 00       	add    eax,0x178
c00113a0:	83 ec 0c             	sub    esp,0xc
c00113a3:	50                   	push   eax
c00113a4:	e8 ed da ff ff       	call   c000ee96 <GDT::flush()>
c00113a9:	83 c4 10             	add    esp,0x10
c00113ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113af:	8b 00                	mov    eax,DWORD PTR [eax]
c00113b1:	83 ec 08             	sub    esp,0x8
c00113b4:	50                   	push   eax
c00113b5:	68 d8 91 02 c0       	push   0xc00291d8
c00113ba:	e8 16 15 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00113c7:	c9                   	leave  
c00113c8:	c3                   	ret    
c00113c9:	90                   	nop

c00113ca <ReservedFilename::read(unsigned long long, void*, int*)>:
c00113ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00113ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00113d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113d5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00113da:	75 08                	jne    c00113e4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00113dc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00113e2:	eb 38                	jmp    c001141c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00113e4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00113e9:	75 17                	jne    c0011402 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00113eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113f3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00113f9:	8b 10                	mov    edx,DWORD PTR [eax]
c00113fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00113ff:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011402:	89 c1                	mov    ecx,eax
c0011404:	83 e1 fd             	and    ecx,0xfffffffd
c0011407:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c001140d:	74 cd                	je     c00113dc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001140f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011414:	83 e0 ef             	and    eax,0xffffffef
c0011417:	83 f8 08             	cmp    eax,0x8
c001141a:	76 c0                	jbe    c00113dc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001141c:	31 c0                	xor    eax,eax
c001141e:	c3                   	ret    
c001141f:	90                   	nop

c0011420 <ReservedFilename::isAtty()>:
c0011420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011424:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011427:	31 c0                	xor    eax,eax
c0011429:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001142f:	74 09                	je     c001143a <ReservedFilename::isAtty()+0x1a>
c0011431:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011437:	0f 94 c0             	sete   al
c001143a:	c3                   	ret    
c001143b:	90                   	nop

c001143c <ReservedFilename::write(unsigned long long, void*, int*)>:
c001143c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011440:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011444:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011447:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001144b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011450:	75 08                	jne    c001145a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011452:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011458:	eb 3d                	jmp    c0011497 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001145a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001145f:	75 17                	jne    c0011478 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011461:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011466:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011469:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001146f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011471:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011475:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011478:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001147d:	75 04                	jne    c0011483 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001147f:	89 0a                	mov    DWORD PTR [edx],ecx
c0011481:	eb 14                	jmp    c0011497 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011483:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011488:	74 c8                	je     c0011452 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001148a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001148f:	83 e0 ef             	and    eax,0xffffffef
c0011492:	83 f8 08             	cmp    eax,0x8
c0011495:	76 bb                	jbe    c0011452 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011497:	31 c0                	xor    eax,eax
c0011499:	c3                   	ret    

c001149a <UnixFile::getFileDescriptor()>:
c001149a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001149e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114a1:	c3                   	ret    

c00114a2 <UnixFile::UnixFile(int)>:
c00114a2:	53                   	push   ebx
c00114a3:	83 ec 28             	sub    esp,0x28
c00114a6:	ba c4 92 02 c0       	mov    edx,0xc00292c4
c00114ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114af:	89 10                	mov    DWORD PTR [eax],edx
c00114b1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00114b9:	0f 8f 8c 01 00 00    	jg     c001164b <UnixFile::UnixFile(int)+0x1a9>
c00114bf:	a1 a0 be 02 c0       	mov    eax,ds:0xc002bea0
c00114c4:	8d 50 01             	lea    edx,[eax+0x1]
c00114c7:	89 15 a0 be 02 c0    	mov    DWORD PTR ds:0xc002bea0,edx
c00114cd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114d1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114d4:	83 ec 08             	sub    esp,0x8
c00114d7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00114db:	68 78 d0 02 c0       	push   0xc002d078
c00114e0:	e8 5b 60 01 00       	call   c0027540 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00114e5:	83 c4 10             	add    esp,0x10
c00114e8:	a0 74 d0 02 c0       	mov    al,ds:0xc002d074
c00114ed:	83 f0 01             	xor    eax,0x1
c00114f0:	84 c0                	test   al,al
c00114f2:	0f 84 54 01 00 00    	je     c001164c <UnixFile::UnixFile(int)+0x1aa>
c00114f8:	c6 05 74 d0 02 c0 01 	mov    BYTE PTR ds:0xc002d074,0x1
c00114ff:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011507:	83 ec 0c             	sub    esp,0xc
c001150a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001150e:	e8 11 e1 ff ff       	call   c000f624 <malloc>
c0011513:	83 c4 10             	add    esp,0x10
c0011516:	89 c3                	mov    ebx,eax
c0011518:	83 ec 08             	sub    esp,0x8
c001151b:	68 03 ff ff 0f       	push   0xfffff03
c0011520:	53                   	push   ebx
c0011521:	e8 2c 01 00 00       	call   c0011652 <ReservedFilename::ReservedFilename(int)>
c0011526:	83 c4 10             	add    esp,0x10
c0011529:	89 1d 6c d0 02 c0    	mov    DWORD PTR ds:0xc002d06c,ebx
c001152f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011537:	83 ec 0c             	sub    esp,0xc
c001153a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001153e:	e8 e1 e0 ff ff       	call   c000f624 <malloc>
c0011543:	83 c4 10             	add    esp,0x10
c0011546:	89 c3                	mov    ebx,eax
c0011548:	83 ec 08             	sub    esp,0x8
c001154b:	68 01 ff ff 0f       	push   0xfffff01
c0011550:	53                   	push   ebx
c0011551:	e8 fc 00 00 00       	call   c0011652 <ReservedFilename::ReservedFilename(int)>
c0011556:	83 c4 10             	add    esp,0x10
c0011559:	89 1d 70 d0 02 c0    	mov    DWORD PTR ds:0xc002d070,ebx
c001155f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011567:	83 ec 0c             	sub    esp,0xc
c001156a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001156e:	e8 b1 e0 ff ff       	call   c000f624 <malloc>
c0011573:	83 c4 10             	add    esp,0x10
c0011576:	89 c3                	mov    ebx,eax
c0011578:	83 ec 08             	sub    esp,0x8
c001157b:	68 00 ff ff 0f       	push   0xfffff00
c0011580:	53                   	push   ebx
c0011581:	e8 cc 00 00 00       	call   c0011652 <ReservedFilename::ReservedFilename(int)>
c0011586:	83 c4 10             	add    esp,0x10
c0011589:	89 1d 64 d0 02 c0    	mov    DWORD PTR ds:0xc002d064,ebx
c001158f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011597:	83 ec 0c             	sub    esp,0xc
c001159a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001159e:	e8 81 e0 ff ff       	call   c000f624 <malloc>
c00115a3:	83 c4 10             	add    esp,0x10
c00115a6:	89 c3                	mov    ebx,eax
c00115a8:	83 ec 08             	sub    esp,0x8
c00115ab:	68 02 ff ff 0f       	push   0xfffff02
c00115b0:	53                   	push   ebx
c00115b1:	e8 9c 00 00 00       	call   c0011652 <ReservedFilename::ReservedFilename(int)>
c00115b6:	83 c4 10             	add    esp,0x10
c00115b9:	89 1d 68 d0 02 c0    	mov    DWORD PTR ds:0xc002d068,ebx
c00115bf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00115c7:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00115cc:	7f 7e                	jg     c001164c <UnixFile::UnixFile(int)+0x1aa>
c00115ce:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00115d6:	83 ec 0c             	sub    esp,0xc
c00115d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00115dd:	e8 42 e0 ff ff       	call   c000f624 <malloc>
c00115e2:	83 c4 10             	add    esp,0x10
c00115e5:	89 c3                	mov    ebx,eax
c00115e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115eb:	05 10 ff ff 0f       	add    eax,0xfffff10
c00115f0:	83 ec 08             	sub    esp,0x8
c00115f3:	50                   	push   eax
c00115f4:	53                   	push   ebx
c00115f5:	e8 58 00 00 00       	call   c0011652 <ReservedFilename::ReservedFilename(int)>
c00115fa:	83 c4 10             	add    esp,0x10
c00115fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011601:	89 1c 85 40 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2fc0],ebx
c0011608:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011610:	83 ec 0c             	sub    esp,0xc
c0011613:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011617:	e8 08 e0 ff ff       	call   c000f624 <malloc>
c001161c:	83 c4 10             	add    esp,0x10
c001161f:	89 c3                	mov    ebx,eax
c0011621:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011625:	05 20 ff ff 0f       	add    eax,0xfffff20
c001162a:	83 ec 08             	sub    esp,0x8
c001162d:	50                   	push   eax
c001162e:	53                   	push   ebx
c001162f:	e8 1e 00 00 00       	call   c0011652 <ReservedFilename::ReservedFilename(int)>
c0011634:	83 c4 10             	add    esp,0x10
c0011637:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001163b:	89 1c 85 00 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3000],ebx
c0011642:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011646:	e9 7c ff ff ff       	jmp    c00115c7 <UnixFile::UnixFile(int)+0x125>
c001164b:	90                   	nop
c001164c:	83 c4 28             	add    esp,0x28
c001164f:	5b                   	pop    ebx
c0011650:	c3                   	ret    
c0011651:	90                   	nop

c0011652 <ReservedFilename::ReservedFilename(int)>:
c0011652:	83 ec 0c             	sub    esp,0xc
c0011655:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011659:	83 ec 08             	sub    esp,0x8
c001165c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011660:	50                   	push   eax
c0011661:	e8 3c fe ff ff       	call   c00114a2 <UnixFile::UnixFile(int)>
c0011666:	83 c4 10             	add    esp,0x10
c0011669:	ba e0 92 02 c0       	mov    edx,0xc00292e0
c001166e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011672:	89 10                	mov    DWORD PTR [eax],edx
c0011674:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011678:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001167c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001167f:	90                   	nop
c0011680:	83 c4 0c             	add    esp,0xc
c0011683:	c3                   	ret    

c0011684 <UnixFile::~UnixFile()>:
c0011684:	83 ec 1c             	sub    esp,0x1c
c0011687:	ba c4 92 02 c0       	mov    edx,0xc00292c4
c001168c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011690:	89 10                	mov    DWORD PTR [eax],edx
c0011692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011696:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011699:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001169e:	7f 73                	jg     c0011713 <UnixFile::~UnixFile()+0x8f>
c00116a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00116a8:	83 ec 0c             	sub    esp,0xc
c00116ab:	68 78 d0 02 c0       	push   0xc002d078
c00116b0:	e8 5f 5f 01 00       	call   c0027614 <LinkedList<UnixFile>::getFirstElement()>
c00116b5:	83 c4 10             	add    esp,0x10
c00116b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00116bc:	83 ec 0c             	sub    esp,0xc
c00116bf:	68 78 d0 02 c0       	push   0xc002d078
c00116c4:	e8 53 5f 01 00       	call   c002761c <LinkedList<UnixFile>::removeFirst()>
c00116c9:	83 c4 10             	add    esp,0x10
c00116cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00116d0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00116d4:	74 40                	je     c0011716 <UnixFile::~UnixFile()+0x92>
c00116d6:	83 ec 08             	sub    esp,0x8
c00116d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00116dd:	68 78 d0 02 c0       	push   0xc002d078
c00116e2:	e8 59 5e 01 00       	call   c0027540 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00116e7:	83 c4 10             	add    esp,0x10
c00116ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116ee:	8d 50 01             	lea    edx,[eax+0x1]
c00116f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00116f5:	3d 88 13 00 00       	cmp    eax,0x1388
c00116fa:	0f 94 c0             	sete   al
c00116fd:	84 c0                	test   al,al
c00116ff:	74 a7                	je     c00116a8 <UnixFile::~UnixFile()+0x24>
c0011701:	83 ec 0c             	sub    esp,0xc
c0011704:	68 9c 92 02 c0       	push   0xc002929c
c0011709:	e8 a7 84 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c001170e:	83 c4 10             	add    esp,0x10
c0011711:	eb 95                	jmp    c00116a8 <UnixFile::~UnixFile()+0x24>
c0011713:	90                   	nop
c0011714:	eb 01                	jmp    c0011717 <UnixFile::~UnixFile()+0x93>
c0011716:	90                   	nop
c0011717:	90                   	nop
c0011718:	83 c4 1c             	add    esp,0x1c
c001171b:	c3                   	ret    

c001171c <UnixFile::~UnixFile()>:
c001171c:	83 ec 0c             	sub    esp,0xc
c001171f:	83 ec 0c             	sub    esp,0xc
c0011722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011726:	e8 59 ff ff ff       	call   c0011684 <UnixFile::~UnixFile()>
c001172b:	83 c4 10             	add    esp,0x10
c001172e:	83 ec 08             	sub    esp,0x8
c0011731:	6a 0c                	push   0xc
c0011733:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011737:	e8 b9 10 00 00       	call   c00127f5 <operator delete(void*, unsigned long)>
c001173c:	83 c4 10             	add    esp,0x10
c001173f:	83 c4 0c             	add    esp,0xc
c0011742:	c3                   	ret    
c0011743:	90                   	nop

c0011744 <ReservedFilename::~ReservedFilename()>:
c0011744:	83 ec 0c             	sub    esp,0xc
c0011747:	ba e0 92 02 c0       	mov    edx,0xc00292e0
c001174c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011750:	89 10                	mov    DWORD PTR [eax],edx
c0011752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011756:	83 ec 0c             	sub    esp,0xc
c0011759:	50                   	push   eax
c001175a:	e8 25 ff ff ff       	call   c0011684 <UnixFile::~UnixFile()>
c001175f:	83 c4 10             	add    esp,0x10
c0011762:	90                   	nop
c0011763:	83 c4 0c             	add    esp,0xc
c0011766:	c3                   	ret    
c0011767:	90                   	nop

c0011768 <ReservedFilename::~ReservedFilename()>:
c0011768:	83 ec 0c             	sub    esp,0xc
c001176b:	83 ec 0c             	sub    esp,0xc
c001176e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011772:	e8 cd ff ff ff       	call   c0011744 <ReservedFilename::~ReservedFilename()>
c0011777:	83 c4 10             	add    esp,0x10
c001177a:	83 ec 08             	sub    esp,0x8
c001177d:	6a 0c                	push   0xc
c001177f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011783:	e8 6d 10 00 00       	call   c00127f5 <operator delete(void*, unsigned long)>
c0011788:	83 c4 10             	add    esp,0x10
c001178b:	83 c4 0c             	add    esp,0xc
c001178e:	c3                   	ret    

c001178f <getFromFileDescriptor(int)>:
c001178f:	53                   	push   ebx
c0011790:	83 ec 08             	sub    esp,0x8
c0011793:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011797:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001179d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00117a3:	7f 2c                	jg     c00117d1 <getFromFileDescriptor(int)+0x42>
c00117a5:	83 ec 0c             	sub    esp,0xc
c00117a8:	68 78 d0 02 c0       	push   0xc002d078
c00117ad:	e8 62 5e 01 00       	call   c0027614 <LinkedList<UnixFile>::getFirstElement()>
c00117b2:	83 c4 10             	add    esp,0x10
c00117b5:	85 c0                	test   eax,eax
c00117b7:	75 04                	jne    c00117bd <getFromFileDescriptor(int)+0x2e>
c00117b9:	31 c0                	xor    eax,eax
c00117bb:	eb 6e                	jmp    c001182b <getFromFileDescriptor(int)+0x9c>
c00117bd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00117c0:	74 69                	je     c001182b <getFromFileDescriptor(int)+0x9c>
c00117c2:	52                   	push   edx
c00117c3:	52                   	push   edx
c00117c4:	50                   	push   eax
c00117c5:	68 78 d0 02 c0       	push   0xc002d078
c00117ca:	e8 ef 5e 01 00       	call   c00276be <LinkedList<UnixFile>::getNext(UnixFile*)>
c00117cf:	eb e1                	jmp    c00117b2 <getFromFileDescriptor(int)+0x23>
c00117d1:	a1 6c d0 02 c0       	mov    eax,ds:0xc002d06c
c00117d6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00117dc:	74 4d                	je     c001182b <getFromFileDescriptor(int)+0x9c>
c00117de:	a1 70 d0 02 c0       	mov    eax,ds:0xc002d070
c00117e3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00117e9:	74 40                	je     c001182b <getFromFileDescriptor(int)+0x9c>
c00117eb:	a1 68 d0 02 c0       	mov    eax,ds:0xc002d068
c00117f0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00117f6:	74 33                	je     c001182b <getFromFileDescriptor(int)+0x9c>
c00117f8:	a1 64 d0 02 c0       	mov    eax,ds:0xc002d064
c00117fd:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011803:	74 26                	je     c001182b <getFromFileDescriptor(int)+0x9c>
c0011805:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001180b:	83 f8 08             	cmp    eax,0x8
c001180e:	77 09                	ja     c0011819 <getFromFileDescriptor(int)+0x8a>
c0011810:	8b 04 85 40 d0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2fc0]
c0011817:	eb 12                	jmp    c001182b <getFromFileDescriptor(int)+0x9c>
c0011819:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001181f:	83 fb 08             	cmp    ebx,0x8
c0011822:	77 95                	ja     c00117b9 <getFromFileDescriptor(int)+0x2a>
c0011824:	8b 04 9d 00 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3000]
c001182b:	83 c4 08             	add    esp,0x8
c001182e:	5b                   	pop    ebx
c001182f:	c3                   	ret    

c0011830 <__static_initialization_and_destruction_0(int, int)>:
c0011830:	83 ec 0c             	sub    esp,0xc
c0011833:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011838:	75 34                	jne    c001186e <__static_initialization_and_destruction_0(int, int)+0x3e>
c001183a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011842:	75 2a                	jne    c001186e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011844:	83 ec 0c             	sub    esp,0xc
c0011847:	68 78 d0 02 c0       	push   0xc002d078
c001184c:	e8 97 5c 01 00       	call   c00274e8 <LinkedList<UnixFile>::LinkedList()>
c0011851:	83 c4 10             	add    esp,0x10
c0011854:	83 ec 04             	sub    esp,0x4
c0011857:	68 28 be 02 c0       	push   0xc002be28
c001185c:	68 78 d0 02 c0       	push   0xc002d078
c0011861:	68 e6 74 02 c0       	push   0xc00274e6
c0011866:	e8 04 0f 00 00       	call   c001276f <__cxa_atexit>
c001186b:	83 c4 10             	add    esp,0x10
c001186e:	90                   	nop
c001186f:	83 c4 0c             	add    esp,0xc
c0011872:	c3                   	ret    

c0011873 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011873:	83 ec 0c             	sub    esp,0xc
c0011876:	83 ec 08             	sub    esp,0x8
c0011879:	68 ff ff 00 00       	push   0xffff
c001187e:	6a 01                	push   0x1
c0011880:	e8 ab ff ff ff       	call   c0011830 <__static_initialization_and_destruction_0(int, int)>
c0011885:	83 c4 10             	add    esp,0x10
c0011888:	83 c4 0c             	add    esp,0xc
c001188b:	c3                   	ret    

c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001188c:	53                   	push   ebx
c001188d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011891:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011895:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001189b:	89 c8                	mov    eax,ecx
c001189d:	d1 e8                	shr    eax,1
c001189f:	03 05 a8 be 02 c0    	add    eax,DWORD PTR ds:0xc002bea8
c00118a5:	83 e1 01             	and    ecx,0x1
c00118a8:	8a 10                	mov    dl,BYTE PTR [eax]
c00118aa:	75 09                	jne    c00118b5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00118ac:	83 e2 f0             	and    edx,0xfffffff0
c00118af:	09 da                	or     edx,ebx
c00118b1:	88 10                	mov    BYTE PTR [eax],dl
c00118b3:	5b                   	pop    ebx
c00118b4:	c3                   	ret    
c00118b5:	c1 e3 04             	shl    ebx,0x4
c00118b8:	83 e2 0f             	and    edx,0xf
c00118bb:	09 da                	or     edx,ebx
c00118bd:	88 10                	mov    BYTE PTR [eax],dl
c00118bf:	5b                   	pop    ebx
c00118c0:	c3                   	ret    

c00118c1 <Virt::getPageState(unsigned long)>:
c00118c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118c5:	8b 0d a8 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bea8
c00118cb:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00118d1:	89 d0                	mov    eax,edx
c00118d3:	d1 e8                	shr    eax,1
c00118d5:	83 e2 01             	and    edx,0x1
c00118d8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00118db:	75 04                	jne    c00118e1 <Virt::getPageState(unsigned long)+0x20>
c00118dd:	83 e0 0f             	and    eax,0xf
c00118e0:	c3                   	ret    
c00118e1:	c0 e8 04             	shr    al,0x4
c00118e4:	c3                   	ret    

c00118e5 <Virt::allocateKernelVirtualPages(int)>:
c00118e5:	55                   	push   ebp
c00118e6:	31 ed                	xor    ebp,ebp
c00118e8:	57                   	push   edi
c00118e9:	56                   	push   esi
c00118ea:	53                   	push   ebx
c00118eb:	31 db                	xor    ebx,ebx
c00118ed:	83 ec 1c             	sub    esp,0x1c
c00118f0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00118f4:	8b 3d a4 be 02 c0    	mov    edi,DWORD PTR ds:0xc002bea4
c00118fa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00118ff:	57                   	push   edi
c0011900:	e8 bc ff ff ff       	call   c00118c1 <Virt::getPageState(unsigned long)>
c0011905:	5a                   	pop    edx
c0011906:	84 c0                	test   al,al
c0011908:	75 3a                	jne    c0011944 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001190a:	85 db                	test   ebx,ebx
c001190c:	75 02                	jne    c0011910 <Virt::allocateKernelVirtualPages(int)+0x2b>
c001190e:	89 fd                	mov    ebp,edi
c0011910:	43                   	inc    ebx
c0011911:	39 f3                	cmp    ebx,esi
c0011913:	74 5a                	je     c001196f <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011915:	47                   	inc    edi
c0011916:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001191c:	76 31                	jbe    c001194f <Virt::allocateKernelVirtualPages(int)+0x6a>
c001191e:	c7 05 a4 be 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002bea4,0xc8000
c0011928:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001192d:	75 28                	jne    c0011957 <Virt::allocateKernelVirtualPages(int)+0x72>
c001192f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011934:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011939:	57                   	push   edi
c001193a:	e8 82 ff ff ff       	call   c00118c1 <Virt::getPageState(unsigned long)>
c001193f:	5a                   	pop    edx
c0011940:	84 c0                	test   al,al
c0011942:	74 c6                	je     c001190a <Virt::allocateKernelVirtualPages(int)+0x25>
c0011944:	31 db                	xor    ebx,ebx
c0011946:	47                   	inc    edi
c0011947:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001194d:	77 cf                	ja     c001191e <Virt::allocateKernelVirtualPages(int)+0x39>
c001194f:	89 3d a4 be 02 c0    	mov    DWORD PTR ds:0xc002bea4,edi
c0011955:	eb a8                	jmp    c00118ff <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011957:	83 ec 0c             	sub    esp,0xc
c001195a:	68 f4 92 02 c0       	push   0xc00292f4
c001195f:	e8 51 82 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c0011964:	8b 3d a4 be 02 c0    	mov    edi,DWORD PTR ds:0xc002bea4
c001196a:	83 c4 10             	add    esp,0x10
c001196d:	eb 90                	jmp    c00118ff <Virt::allocateKernelVirtualPages(int)+0x1a>
c001196f:	89 2d a4 be 02 c0    	mov    DWORD PTR ds:0xc002bea4,ebp
c0011975:	4b                   	dec    ebx
c0011976:	74 5f                	je     c00119d7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011978:	85 f6                	test   esi,esi
c001197a:	74 3d                	je     c00119b9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001197c:	89 e8                	mov    eax,ebp
c001197e:	31 db                	xor    ebx,ebx
c0011980:	8d 7e ff             	lea    edi,[esi-0x1]
c0011983:	eb 14                	jmp    c0011999 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011985:	6a 01                	push   0x1
c0011987:	43                   	inc    ebx
c0011988:	50                   	push   eax
c0011989:	e8 fe fe ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001198e:	58                   	pop    eax
c001198f:	39 f3                	cmp    ebx,esi
c0011991:	5a                   	pop    edx
c0011992:	74 25                	je     c00119b9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011994:	a1 a4 be 02 c0       	mov    eax,ds:0xc002bea4
c0011999:	8d 50 01             	lea    edx,[eax+0x1]
c001199c:	85 db                	test   ebx,ebx
c001199e:	89 15 a4 be 02 c0    	mov    DWORD PTR ds:0xc002bea4,edx
c00119a4:	74 20                	je     c00119c6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00119a6:	39 df                	cmp    edi,ebx
c00119a8:	75 db                	jne    c0011985 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00119aa:	6a 03                	push   0x3
c00119ac:	43                   	inc    ebx
c00119ad:	50                   	push   eax
c00119ae:	e8 d9 fe ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119b3:	59                   	pop    ecx
c00119b4:	39 f3                	cmp    ebx,esi
c00119b6:	58                   	pop    eax
c00119b7:	75 db                	jne    c0011994 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119b9:	83 c4 1c             	add    esp,0x1c
c00119bc:	89 e8                	mov    eax,ebp
c00119be:	5b                   	pop    ebx
c00119bf:	c1 e0 0c             	shl    eax,0xc
c00119c2:	5e                   	pop    esi
c00119c3:	5f                   	pop    edi
c00119c4:	5d                   	pop    ebp
c00119c5:	c3                   	ret    
c00119c6:	6a 02                	push   0x2
c00119c8:	bb 01 00 00 00       	mov    ebx,0x1
c00119cd:	50                   	push   eax
c00119ce:	e8 b9 fe ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119d3:	58                   	pop    eax
c00119d4:	5a                   	pop    edx
c00119d5:	eb bd                	jmp    c0011994 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00119d7:	6a 04                	push   0x4
c00119d9:	8d 45 01             	lea    eax,[ebp+0x1]
c00119dc:	55                   	push   ebp
c00119dd:	a3 a4 be 02 c0       	mov    ds:0xc002bea4,eax
c00119e2:	e8 a5 fe ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00119e7:	59                   	pop    ecx
c00119e8:	89 e8                	mov    eax,ebp
c00119ea:	5b                   	pop    ebx
c00119eb:	c1 e0 0c             	shl    eax,0xc
c00119ee:	83 c4 1c             	add    esp,0x1c
c00119f1:	5b                   	pop    ebx
c00119f2:	5e                   	pop    esi
c00119f3:	5f                   	pop    edi
c00119f4:	5d                   	pop    ebp
c00119f5:	c3                   	ret    

c00119f6 <Virt::virtualMemorySetup()>:
c00119f6:	53                   	push   ebx
c00119f7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00119fc:	83 ec 08             	sub    esp,0x8
c00119ff:	6a 0f                	push   0xf
c0011a01:	53                   	push   ebx
c0011a02:	43                   	inc    ebx
c0011a03:	e8 84 fe ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a08:	59                   	pop    ecx
c0011a09:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a0f:	58                   	pop    eax
c0011a10:	75 ed                	jne    c00119ff <Virt::virtualMemorySetup()+0x9>
c0011a12:	83 ec 08             	sub    esp,0x8
c0011a15:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011a1a:	68 00 00 00 c8       	push   0xc8000000
c0011a1f:	68 7b 94 02 c0       	push   0xc002947b
c0011a24:	e8 ac 0e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0011a29:	58                   	pop    eax
c0011a2a:	5a                   	pop    edx
c0011a2b:	68 00 f0 ff ef       	push   0xeffff000
c0011a30:	68 8f 94 02 c0       	push   0xc002948f
c0011a35:	e8 9b 0e 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0011a3a:	83 c4 10             	add    esp,0x10
c0011a3d:	83 ec 08             	sub    esp,0x8
c0011a40:	6a 00                	push   0x0
c0011a42:	53                   	push   ebx
c0011a43:	43                   	inc    ebx
c0011a44:	e8 43 fe ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a49:	83 c4 10             	add    esp,0x10
c0011a4c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011a52:	75 e9                	jne    c0011a3d <Virt::virtualMemorySetup()+0x47>
c0011a54:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011a59:	83 ec 08             	sub    esp,0x8
c0011a5c:	6a 0f                	push   0xf
c0011a5e:	53                   	push   ebx
c0011a5f:	43                   	inc    ebx
c0011a60:	e8 27 fe ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a65:	83 c4 10             	add    esp,0x10
c0011a68:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011a6e:	75 e9                	jne    c0011a59 <Virt::virtualMemorySetup()+0x63>
c0011a70:	83 c4 08             	add    esp,0x8
c0011a73:	5b                   	pop    ebx
c0011a74:	c3                   	ret    

c0011a75 <Virt::getAKernelVAS()>:
c0011a75:	a1 84 d0 02 c0       	mov    eax,ds:0xc002d084
c0011a7a:	c3                   	ret    

c0011a7b <Virt::setupPageSwapping(int)>:
c0011a7b:	57                   	push   edi
c0011a7c:	56                   	push   esi
c0011a7d:	53                   	push   ebx
c0011a7e:	83 ec 1c             	sub    esp,0x1c
c0011a81:	68 14 01 00 00       	push   0x114
c0011a86:	e8 99 db ff ff       	call   c000f624 <malloc>
c0011a8b:	83 c4 0c             	add    esp,0xc
c0011a8e:	89 c6                	mov    esi,eax
c0011a90:	ff 35 54 e4 02 c0    	push   DWORD PTR ds:0xc002e454
c0011a96:	68 a3 94 02 c0       	push   0xc00294a3
c0011a9b:	50                   	push   eax
c0011a9c:	e8 8d 13 00 00       	call   c0012e2e <File::File(char const*, Process*)>
c0011aa1:	89 34 24             	mov    DWORD PTR [esp],esi
c0011aa4:	e8 61 15 00 00       	call   c001300a <File::unlink()>
c0011aa9:	58                   	pop    eax
c0011aaa:	5a                   	pop    edx
c0011aab:	6a 12                	push   0x12
c0011aad:	56                   	push   esi
c0011aae:	e8 df 13 00 00       	call   c0012e92 <File::open(FileOpenMode)>
c0011ab3:	83 c4 10             	add    esp,0x10
c0011ab6:	85 c0                	test   eax,eax
c0011ab8:	0f 85 ca 00 00 00    	jne    c0011b88 <Virt::setupPageSwapping(int)+0x10d>
c0011abe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ac2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011aca:	c1 e3 08             	shl    ebx,0x8
c0011acd:	83 ec 0c             	sub    esp,0xc
c0011ad0:	68 00 00 01 00       	push   0x10000
c0011ad5:	e8 4a db ff ff       	call   c000f624 <malloc>
c0011ada:	83 c4 0c             	add    esp,0xc
c0011add:	89 c7                	mov    edi,eax
c0011adf:	68 00 00 01 00       	push   0x10000
c0011ae4:	6a 00                	push   0x0
c0011ae6:	50                   	push   eax
c0011ae7:	e8 d8 eb fe ff       	call   c00006c4 <memset>
c0011aec:	83 c4 10             	add    esp,0x10
c0011aef:	85 db                	test   ebx,ebx
c0011af1:	79 03                	jns    c0011af6 <Virt::setupPageSwapping(int)+0x7b>
c0011af3:	83 c3 0f             	add    ebx,0xf
c0011af6:	c1 fb 04             	sar    ebx,0x4
c0011af9:	4b                   	dec    ebx
c0011afa:	83 fb ff             	cmp    ebx,0xffffffff
c0011afd:	74 4b                	je     c0011b4a <Virt::setupPageSwapping(int)+0xcf>
c0011aff:	83 ec 0c             	sub    esp,0xc
c0011b02:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b04:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b08:	52                   	push   edx
c0011b09:	57                   	push   edi
c0011b0a:	6a 00                	push   0x0
c0011b0c:	68 00 00 01 00       	push   0x10000
c0011b11:	56                   	push   esi
c0011b12:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011b15:	83 c4 20             	add    esp,0x20
c0011b18:	85 c0                	test   eax,eax
c0011b1a:	75 59                	jne    c0011b75 <Virt::setupPageSwapping(int)+0xfa>
c0011b1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b20:	3d 00 00 01 00       	cmp    eax,0x10000
c0011b25:	74 d2                	je     c0011af9 <Virt::setupPageSwapping(int)+0x7e>
c0011b27:	83 ec 08             	sub    esp,0x8
c0011b2a:	4b                   	dec    ebx
c0011b2b:	50                   	push   eax
c0011b2c:	68 f6 94 02 c0       	push   0xc00294f6
c0011b31:	e8 9f 0d 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0011b36:	c7 04 24 ff 94 02 c0 	mov    DWORD PTR [esp],0xc00294ff
c0011b3d:	e8 73 80 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c0011b42:	83 c4 10             	add    esp,0x10
c0011b45:	83 fb ff             	cmp    ebx,0xffffffff
c0011b48:	75 b5                	jne    c0011aff <Virt::setupPageSwapping(int)+0x84>
c0011b4a:	83 ec 0c             	sub    esp,0xc
c0011b4d:	56                   	push   esi
c0011b4e:	e8 9d 13 00 00       	call   c0012ef0 <File::close()>
c0011b53:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011b56:	e8 e9 da ff ff       	call   c000f644 <rfree>
c0011b5b:	83 c4 10             	add    esp,0x10
c0011b5e:	85 f6                	test   esi,esi
c0011b60:	74 0c                	je     c0011b6e <Virt::setupPageSwapping(int)+0xf3>
c0011b62:	83 ec 0c             	sub    esp,0xc
c0011b65:	8b 06                	mov    eax,DWORD PTR [esi]
c0011b67:	56                   	push   esi
c0011b68:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b6b:	83 c4 10             	add    esp,0x10
c0011b6e:	83 c4 10             	add    esp,0x10
c0011b71:	5b                   	pop    ebx
c0011b72:	5e                   	pop    esi
c0011b73:	5f                   	pop    edi
c0011b74:	c3                   	ret    
c0011b75:	83 ec 08             	sub    esp,0x8
c0011b78:	50                   	push   eax
c0011b79:	68 de 94 02 c0       	push   0xc00294de
c0011b7e:	e8 52 0d 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0011b83:	83 c4 10             	add    esp,0x10
c0011b86:	eb 94                	jmp    c0011b1c <Virt::setupPageSwapping(int)+0xa1>
c0011b88:	83 ec 08             	sub    esp,0x8
c0011b8b:	50                   	push   eax
c0011b8c:	68 ba 94 02 c0       	push   0xc00294ba
c0011b91:	e8 3f 0d 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0011b96:	c7 04 24 c3 94 02 c0 	mov    DWORD PTR [esp],0xc00294c3
c0011b9d:	e8 13 80 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c0011ba2:	83 c4 10             	add    esp,0x10
c0011ba5:	e9 14 ff ff ff       	jmp    c0011abe <Virt::setupPageSwapping(int)+0x43>

c0011baa <VAS::VAS()>:
c0011baa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bae:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011bb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bb9:	a3 84 d0 02 c0       	mov    ds:0xc002d084,eax
c0011bbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc2:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011bc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bca:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011bcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bd1:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011bd8:	90                   	nop
c0011bd9:	c3                   	ret    

c0011bda <VAS::VAS(VAS*)>:
c0011bda:	83 ec 0c             	sub    esp,0xc
c0011bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011be1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011be8:	83 ec 0c             	sub    esp,0xc
c0011beb:	68 14 93 02 c0       	push   0xc0029314
c0011bf0:	e8 c0 7f 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c0011bf5:	83 c4 10             	add    esp,0x10
c0011bf8:	90                   	nop
c0011bf9:	83 c4 0c             	add    esp,0xc
c0011bfc:	c3                   	ret    
c0011bfd:	90                   	nop

c0011bfe <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011bfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c02:	89 c2                	mov    edx,eax
c0011c04:	c1 e8 0a             	shr    eax,0xa
c0011c07:	c1 ea 16             	shr    edx,0x16
c0011c0a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011c0f:	19 c9                	sbb    ecx,ecx
c0011c11:	c1 e2 0c             	shl    edx,0xc
c0011c14:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011c1a:	25 fc 0f 00 00       	and    eax,0xffc
c0011c1f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011c26:	01 d0                	add    eax,edx
c0011c28:	c3                   	ret    
c0011c29:	90                   	nop

c0011c2a <VAS::getPageTableEntry(unsigned long)>:
c0011c2a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c2e:	89 ca                	mov    edx,ecx
c0011c30:	c1 e9 0a             	shr    ecx,0xa
c0011c33:	c1 ea 16             	shr    edx,0x16
c0011c36:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011c3c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011c42:	c1 e0 0c             	shl    eax,0xc
c0011c45:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011c48:	c3                   	ret    

c0011c49 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011c49:	57                   	push   edi
c0011c4a:	56                   	push   esi
c0011c4b:	be 01 00 00 00       	mov    esi,0x1
c0011c50:	53                   	push   ebx
c0011c51:	83 ec 10             	sub    esp,0x10
c0011c54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c58:	c1 eb 0c             	shr    ebx,0xc
c0011c5b:	eb 3f                	jmp    c0011c9c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011c5d:	e8 13 fe ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c0011c62:	83 ec 08             	sub    esp,0x8
c0011c65:	57                   	push   edi
c0011c66:	50                   	push   eax
c0011c67:	e8 be ff ff ff       	call   c0011c2a <VAS::getPageTableEntry(unsigned long)>
c0011c6c:	83 c4 10             	add    esp,0x10
c0011c6f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c71:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011c75:	f6 c4 04             	test   ah,0x4
c0011c78:	75 5f                	jne    c0011cd9 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011c7a:	80 fa 04             	cmp    dl,0x4
c0011c7d:	74 78                	je     c0011cf7 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011c7f:	80 fa 02             	cmp    dl,0x2
c0011c82:	0f 84 88 00 00 00    	je     c0011d10 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011c88:	80 fa 03             	cmp    dl,0x3
c0011c8b:	0f 84 ad 00 00 00    	je     c0011d3e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011c91:	fe ca                	dec    dl
c0011c93:	0f 84 92 00 00 00    	je     c0011d2b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011c99:	43                   	inc    ebx
c0011c9a:	31 f6                	xor    esi,esi
c0011c9c:	53                   	push   ebx
c0011c9d:	e8 1f fc ff ff       	call   c00118c1 <Virt::getPageState(unsigned long)>
c0011ca2:	5f                   	pop    edi
c0011ca3:	89 df                	mov    edi,ebx
c0011ca5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011ca9:	c1 e7 0c             	shl    edi,0xc
c0011cac:	84 c0                	test   al,al
c0011cae:	75 ad                	jne    c0011c5d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011cb0:	83 ec 0c             	sub    esp,0xc
c0011cb3:	68 05 95 02 c0       	push   0xc0029505
c0011cb8:	e8 f8 7e 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c0011cbd:	e8 b3 fd ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c0011cc2:	5a                   	pop    edx
c0011cc3:	59                   	pop    ecx
c0011cc4:	57                   	push   edi
c0011cc5:	50                   	push   eax
c0011cc6:	e8 5f ff ff ff       	call   c0011c2a <VAS::getPageTableEntry(unsigned long)>
c0011ccb:	83 c4 10             	add    esp,0x10
c0011cce:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011cd4:	f6 c4 04             	test   ah,0x4
c0011cd7:	74 c0                	je     c0011c99 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011cd9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011cdd:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ce2:	83 ec 0c             	sub    esp,0xc
c0011ce5:	50                   	push   eax
c0011ce6:	e8 2e df ff ff       	call   c000fc19 <Phys::freePage(unsigned long)>
c0011ceb:	83 c4 10             	add    esp,0x10
c0011cee:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011cf2:	80 fa 04             	cmp    dl,0x4
c0011cf5:	75 88                	jne    c0011c7f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011cf7:	89 f0                	mov    eax,esi
c0011cf9:	84 c0                	test   al,al
c0011cfb:	75 47                	jne    c0011d44 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011cfd:	c7 44 24 20 38 93 02 c0 	mov    DWORD PTR [esp+0x20],0xc0029338
c0011d05:	83 c4 10             	add    esp,0x10
c0011d08:	5b                   	pop    ebx
c0011d09:	5e                   	pop    esi
c0011d0a:	5f                   	pop    edi
c0011d0b:	e9 a5 7e 00 00       	jmp    c0019bb5 <Krnl::panic(char const*)>
c0011d10:	89 f0                	mov    eax,esi
c0011d12:	84 c0                	test   al,al
c0011d14:	75 15                	jne    c0011d2b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011d16:	83 ec 0c             	sub    esp,0xc
c0011d19:	68 21 95 02 c0       	push   0xc0029521
c0011d1e:	e8 92 7e 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c0011d23:	83 c4 10             	add    esp,0x10
c0011d26:	e9 6e ff ff ff       	jmp    c0011c99 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d2b:	83 ec 08             	sub    esp,0x8
c0011d2e:	6a 00                	push   0x0
c0011d30:	53                   	push   ebx
c0011d31:	e8 56 fb ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d36:	83 c4 10             	add    esp,0x10
c0011d39:	e9 5b ff ff ff       	jmp    c0011c99 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011d3e:	89 f0                	mov    eax,esi
c0011d40:	84 c0                	test   al,al
c0011d42:	75 15                	jne    c0011d59 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011d44:	83 ec 08             	sub    esp,0x8
c0011d47:	6a 00                	push   0x0
c0011d49:	53                   	push   ebx
c0011d4a:	e8 3d fb ff ff       	call   c001188c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d4f:	83 c4 10             	add    esp,0x10
c0011d52:	83 c4 10             	add    esp,0x10
c0011d55:	5b                   	pop    ebx
c0011d56:	5e                   	pop    esi
c0011d57:	5f                   	pop    edi
c0011d58:	c3                   	ret    
c0011d59:	c7 44 24 20 3d 95 02 c0 	mov    DWORD PTR [esp+0x20],0xc002953d
c0011d61:	83 c4 10             	add    esp,0x10
c0011d64:	5b                   	pop    ebx
c0011d65:	5e                   	pop    esi
c0011d66:	5f                   	pop    edi
c0011d67:	e9 49 7e 00 00       	jmp    c0019bb5 <Krnl::panic(char const*)>

c0011d6c <VAS::freeAllocatedPages(unsigned long)>:
c0011d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d74:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011d78:	74 09                	je     c0011d83 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011d7a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011d7e:	e9 c6 fe ff ff       	jmp    c0011c49 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d83:	c7 44 24 04 5c 93 02 c0 	mov    DWORD PTR [esp+0x4],0xc002935c
c0011d8b:	e9 45 0b 00 00       	jmp    c00128d5 <Dbg::kprintf(char const*, ...)>

c0011d90 <VAS::virtualToPhysical(unsigned long)>:
c0011d90:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011d94:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011d98:	e8 8d fe ff ff       	call   c0011c2a <VAS::getPageTableEntry(unsigned long)>
c0011d9d:	5a                   	pop    edx
c0011d9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da0:	59                   	pop    ecx
c0011da1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011da6:	c3                   	ret    
c0011da7:	90                   	nop

c0011da8 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011da8:	55                   	push   ebp
c0011da9:	57                   	push   edi
c0011daa:	56                   	push   esi
c0011dab:	53                   	push   ebx
c0011dac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011db0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011db4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011db8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011dbc:	85 db                	test   ebx,ebx
c0011dbe:	7e 22                	jle    c0011de2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011dc0:	c1 e3 0c             	shl    ebx,0xc
c0011dc3:	01 f3                	add    ebx,esi
c0011dc5:	56                   	push   esi
c0011dc6:	81 c6 00 10 00 00    	add    esi,0x1000
c0011dcc:	55                   	push   ebp
c0011dcd:	e8 58 fe ff ff       	call   c0011c2a <VAS::getPageTableEntry(unsigned long)>
c0011dd2:	5a                   	pop    edx
c0011dd3:	59                   	pop    ecx
c0011dd4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011dd6:	21 f9                	and    ecx,edi
c0011dd8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011ddc:	39 f3                	cmp    ebx,esi
c0011dde:	89 08                	mov    DWORD PTR [eax],ecx
c0011de0:	75 e3                	jne    c0011dc5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011de2:	5b                   	pop    ebx
c0011de3:	5e                   	pop    esi
c0011de4:	5f                   	pop    edi
c0011de5:	5d                   	pop    ebp
c0011de6:	c3                   	ret    
c0011de7:	90                   	nop

c0011de8 <VAS::setToWriteCombining(unsigned long, int)>:
c0011de8:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0011ded:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011df3:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011dfa:	75 01                	jne    c0011dfd <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011dfc:	c3                   	ret    
c0011dfd:	68 80 00 00 00       	push   0x80
c0011e02:	6a ff                	push   0xffffffff
c0011e04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011e10:	e8 93 ff ff ff       	call   c0011da8 <VAS::reflagRange(unsigned long, int, int, int)>
c0011e15:	83 c4 14             	add    esp,0x14
c0011e18:	c3                   	ret    
c0011e19:	90                   	nop

c0011e1a <VAS::mapOtherVASIn(bool, VAS*)>:
c0011e1a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011e1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e23:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011e26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e2a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011e2d:	19 c0                	sbb    eax,eax
c0011e2f:	83 ca 03             	or     edx,0x3
c0011e32:	83 e0 fc             	and    eax,0xfffffffc
c0011e35:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011e3c:	0f 20 d8             	mov    eax,cr3
c0011e3f:	0f 22 d8             	mov    cr3,eax
c0011e42:	c3                   	ret    
c0011e43:	90                   	nop

c0011e44 <VAS::~VAS()>:
c0011e44:	83 ec 2c             	sub    esp,0x2c
c0011e47:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e4f:	e8 10 b3 00 00       	call   c001d164 <lockScheduler()>
c0011e54:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011e59:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e5b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011e5e:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011e64:	83 ec 04             	sub    esp,0x4
c0011e67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011e6b:	6a 01                	push   0x1
c0011e6d:	50                   	push   eax
c0011e6e:	e8 a7 ff ff ff       	call   c0011e1a <VAS::mapOtherVASIn(bool, VAS*)>
c0011e73:	83 c4 10             	add    esp,0x10
c0011e76:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011e7e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011e86:	0f 8f d7 00 00 00    	jg     c0011f63 <VAS::~VAS()+0x11f>
c0011e8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e90:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e93:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011e97:	c1 e2 02             	shl    edx,0x2
c0011e9a:	01 d0                	add    eax,edx
c0011e9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ea6:	83 e0 01             	and    eax,0x1
c0011ea9:	0f 84 ab 00 00 00    	je     c0011f5a <VAS::~VAS()+0x116>
c0011eaf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011eb7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011ebf:	7f 75                	jg     c0011f36 <VAS::~VAS()+0xf2>
c0011ec1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ec5:	c1 e0 0a             	shl    eax,0xa
c0011ec8:	89 c2                	mov    edx,eax
c0011eca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011ece:	01 d0                	add    eax,edx
c0011ed0:	c1 e0 0c             	shl    eax,0xc
c0011ed3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ed7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011edc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ede:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ee1:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011ee7:	83 ec 04             	sub    esp,0x4
c0011eea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011eee:	6a 01                	push   0x1
c0011ef0:	50                   	push   eax
c0011ef1:	e8 08 fd ff ff       	call   c0011bfe <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011ef6:	83 c4 10             	add    esp,0x10
c0011ef9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011efd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011f01:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011f07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f0b:	25 01 04 00 00       	and    eax,0x401
c0011f10:	3d 01 04 00 00       	cmp    eax,0x401
c0011f15:	75 19                	jne    c0011f30 <VAS::~VAS()+0xec>
c0011f17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f1b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f20:	83 ec 0c             	sub    esp,0xc
c0011f23:	50                   	push   eax
c0011f24:	e8 f0 dc ff ff       	call   c000fc19 <Phys::freePage(unsigned long)>
c0011f29:	83 c4 10             	add    esp,0x10
c0011f2c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f30:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011f34:	eb 81                	jmp    c0011eb7 <VAS::~VAS()+0x73>
c0011f36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f3a:	25 00 04 00 00       	and    eax,0x400
c0011f3f:	74 19                	je     c0011f5a <VAS::~VAS()+0x116>
c0011f41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f45:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f4a:	83 ec 0c             	sub    esp,0xc
c0011f4d:	50                   	push   eax
c0011f4e:	e8 c6 dc ff ff       	call   c000fc19 <Phys::freePage(unsigned long)>
c0011f53:	83 c4 10             	add    esp,0x10
c0011f56:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f5a:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f5e:	e9 1b ff ff ff       	jmp    c0011e7e <VAS::~VAS()+0x3a>
c0011f63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f6a:	83 ec 0c             	sub    esp,0xc
c0011f6d:	50                   	push   eax
c0011f6e:	e8 d6 fc ff ff       	call   c0011c49 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f73:	83 c4 10             	add    esp,0x10
c0011f76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f7a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f7d:	83 ec 0c             	sub    esp,0xc
c0011f80:	50                   	push   eax
c0011f81:	e8 93 dc ff ff       	call   c000fc19 <Phys::freePage(unsigned long)>
c0011f86:	83 c4 10             	add    esp,0x10
c0011f89:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f91:	c1 e0 02             	shl    eax,0x2
c0011f94:	83 ec 08             	sub    esp,0x8
c0011f97:	50                   	push   eax
c0011f98:	68 80 93 02 c0       	push   0xc0029380
c0011f9d:	e8 33 09 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0011fa2:	83 c4 10             	add    esp,0x10
c0011fa5:	e8 bc b1 00 00       	call   c001d166 <unlockScheduler()>
c0011faa:	90                   	nop
c0011fab:	83 c4 2c             	add    esp,0x2c
c0011fae:	c3                   	ret    
c0011faf:	90                   	nop

c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011fb0:	55                   	push   ebp
c0011fb1:	57                   	push   edi
c0011fb2:	56                   	push   esi
c0011fb3:	53                   	push   ebx
c0011fb4:	83 ec 1c             	sub    esp,0x1c
c0011fb7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011fbb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011fbf:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011fc5:	77 08                	ja     c0011fcf <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011fc7:	0f 20 d8             	mov    eax,cr3
c0011fca:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011fcd:	75 47                	jne    c0012016 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011fcf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fd3:	09 d8                	or     eax,ebx
c0011fd5:	a9 ff 0f 00 00       	test   eax,0xfff
c0011fda:	75 57                	jne    c0012033 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011fdc:	89 de                	mov    esi,ebx
c0011fde:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011fe1:	c1 ee 16             	shr    esi,0x16
c0011fe4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011feb:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011fef:	74 54                	je     c0012045 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011ff1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ff5:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011ffb:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011fff:	c1 e6 0c             	shl    esi,0xc
c0012002:	c1 eb 0a             	shr    ebx,0xa
c0012005:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001200b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001200e:	83 c4 1c             	add    esp,0x1c
c0012011:	5b                   	pop    ebx
c0012012:	5e                   	pop    esi
c0012013:	5f                   	pop    edi
c0012014:	5d                   	pop    ebp
c0012015:	c3                   	ret    
c0012016:	83 ec 0c             	sub    esp,0xc
c0012019:	68 a0 93 02 c0       	push   0xc00293a0
c001201e:	e8 b2 08 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0012023:	83 c4 10             	add    esp,0x10
c0012026:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001202a:	09 d8                	or     eax,ebx
c001202c:	a9 ff 0f 00 00       	test   eax,0xfff
c0012031:	74 a9                	je     c0011fdc <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012033:	83 ec 0c             	sub    esp,0xc
c0012036:	68 08 94 02 c0       	push   0xc0029408
c001203b:	e8 75 7b 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c0012040:	83 c4 10             	add    esp,0x10
c0012043:	eb 97                	jmp    c0011fdc <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012045:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012049:	e8 55 dc ff ff       	call   c000fca3 <Phys::allocatePage()>
c001204e:	89 c5                	mov    ebp,eax
c0012050:	e8 20 fa ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c0012055:	83 ec 0c             	sub    esp,0xc
c0012058:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001205c:	6a 01                	push   0x1
c001205e:	e8 82 f8 ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c0012063:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001206a:	6a 01                	push   0x1
c001206c:	50                   	push   eax
c001206d:	55                   	push   ebp
c001206e:	81 cd 07 04 00 00    	or     ebp,0x407
c0012074:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012078:	51                   	push   ecx
c0012079:	e8 26 02 00 00       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001207e:	83 c4 1c             	add    esp,0x1c
c0012081:	68 00 10 00 00       	push   0x1000
c0012086:	6a 00                	push   0x0
c0012088:	50                   	push   eax
c0012089:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001208d:	e8 32 e6 fe ff       	call   c00006c4 <memset>
c0012092:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012096:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012099:	e8 ab fb ff ff       	call   c0011c49 <Virt::freeKernelVirtualPages(unsigned long)>
c001209e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00120a5:	83 c4 10             	add    esp,0x10
c00120a8:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00120ab:	e9 41 ff ff ff       	jmp    c0011ff1 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c00120b0 <VAS::allocatePages(int, int)>:
c00120b0:	55                   	push   ebp
c00120b1:	57                   	push   edi
c00120b2:	56                   	push   esi
c00120b3:	53                   	push   ebx
c00120b4:	83 ec 1c             	sub    esp,0x1c
c00120b7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00120bb:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c00120c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120c6:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00120cc:	83 e0 01             	and    eax,0x1
c00120cf:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00120d3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00120d7:	0f 85 cc 00 00 00    	jne    c00121a9 <VAS::allocatePages(int, int)+0xf9>
c00120dd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00120e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120e4:	85 c0                	test   eax,eax
c00120e6:	0f 84 a1 00 00 00    	je     c001218d <VAS::allocatePages(int, int)+0xdd>
c00120ec:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00120f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00120f4:	c1 e6 0c             	shl    esi,0xc
c00120f7:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00120fb:	85 c0                	test   eax,eax
c00120fd:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012100:	7e 33                	jle    c0012135 <VAS::allocatePages(int, int)+0x85>
c0012102:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0012106:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001210a:	81 cd 00 04 00 00    	or     ebp,0x400
c0012110:	e8 8e db ff ff       	call   c000fca3 <Phys::allocatePage()>
c0012115:	55                   	push   ebp
c0012116:	53                   	push   ebx
c0012117:	50                   	push   eax
c0012118:	57                   	push   edi
c0012119:	e8 92 fe ff ff       	call   c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001211e:	83 c4 10             	add    esp,0x10
c0012121:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012126:	74 03                	je     c001212b <VAS::allocatePages(int, int)+0x7b>
c0012128:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001212b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012131:	39 de                	cmp    esi,ebx
c0012133:	75 db                	jne    c0012110 <VAS::allocatePages(int, int)+0x60>
c0012135:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001213a:	75 12                	jne    c001214e <VAS::allocatePages(int, int)+0x9e>
c001213c:	0f 20 d8             	mov    eax,cr3
c001213f:	0f 22 d8             	mov    cr3,eax
c0012142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012146:	83 c4 1c             	add    esp,0x1c
c0012149:	5b                   	pop    ebx
c001214a:	5e                   	pop    esi
c001214b:	5f                   	pop    edi
c001214c:	5d                   	pop    ebp
c001214d:	c3                   	ret    
c001214e:	c1 ee 0a             	shr    esi,0xa
c0012151:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012155:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001215b:	c1 eb 0a             	shr    ebx,0xa
c001215e:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012164:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001216a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012170:	39 c3                	cmp    ebx,eax
c0012172:	77 ce                	ja     c0012142 <VAS::allocatePages(int, int)+0x92>
c0012174:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012177:	81 c3 00 10 00 00    	add    ebx,0x1000
c001217d:	39 d8                	cmp    eax,ebx
c001217f:	73 f3                	jae    c0012174 <VAS::allocatePages(int, int)+0xc4>
c0012181:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012185:	83 c4 1c             	add    esp,0x1c
c0012188:	5b                   	pop    ebx
c0012189:	5e                   	pop    esi
c001218a:	5f                   	pop    edi
c001218b:	5d                   	pop    ebp
c001218c:	c3                   	ret    
c001218d:	83 ec 0c             	sub    esp,0xc
c0012190:	68 2c 94 02 c0       	push   0xc002942c
c0012195:	e8 1b 7a 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c001219a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001219d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121a1:	83 c4 10             	add    esp,0x10
c00121a4:	e9 43 ff ff ff       	jmp    c00120ec <VAS::allocatePages(int, int)+0x3c>
c00121a9:	83 ec 0c             	sub    esp,0xc
c00121ac:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00121b0:	e8 30 f7 ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c00121b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121b9:	83 c4 10             	add    esp,0x10
c00121bc:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00121c1:	0f 87 9b 00 00 00    	ja     c0012262 <VAS::allocatePages(int, int)+0x1b2>
c00121c7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00121cb:	85 d2                	test   edx,edx
c00121cd:	7e 3c                	jle    c001220b <VAS::allocatePages(int, int)+0x15b>
c00121cf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121d3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00121d7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00121db:	c1 e5 0c             	shl    ebp,0xc
c00121de:	81 ce 00 04 00 00    	or     esi,0x400
c00121e4:	01 dd                	add    ebp,ebx
c00121e6:	e8 b8 da ff ff       	call   c000fca3 <Phys::allocatePage()>
c00121eb:	56                   	push   esi
c00121ec:	53                   	push   ebx
c00121ed:	50                   	push   eax
c00121ee:	57                   	push   edi
c00121ef:	e8 bc fd ff ff       	call   c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00121f4:	83 c4 10             	add    esp,0x10
c00121f7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121fc:	74 03                	je     c0012201 <VAS::allocatePages(int, int)+0x151>
c00121fe:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012201:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012207:	39 dd                	cmp    ebp,ebx
c0012209:	75 db                	jne    c00121e6 <VAS::allocatePages(int, int)+0x136>
c001220b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012210:	0f 84 26 ff ff ff    	je     c001213c <VAS::allocatePages(int, int)+0x8c>
c0012216:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001221a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001221e:	89 d3                	mov    ebx,edx
c0012220:	c1 e0 0c             	shl    eax,0xc
c0012223:	c1 eb 0a             	shr    ebx,0xa
c0012226:	01 d0                	add    eax,edx
c0012228:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001222e:	c1 e8 0a             	shr    eax,0xa
c0012231:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012237:	25 00 f0 ff ff       	and    eax,0xfffff000
c001223c:	2d 00 00 40 00       	sub    eax,0x400000
c0012241:	39 c3                	cmp    ebx,eax
c0012243:	0f 87 f9 fe ff ff    	ja     c0012142 <VAS::allocatePages(int, int)+0x92>
c0012249:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001224c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012252:	39 d8                	cmp    eax,ebx
c0012254:	73 f3                	jae    c0012249 <VAS::allocatePages(int, int)+0x199>
c0012256:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001225a:	83 c4 1c             	add    esp,0x1c
c001225d:	5b                   	pop    ebx
c001225e:	5e                   	pop    esi
c001225f:	5f                   	pop    edi
c0012260:	5d                   	pop    ebp
c0012261:	c3                   	ret    
c0012262:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0012267:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001226d:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012274:	0f 84 4d ff ff ff    	je     c00121c7 <VAS::allocatePages(int, int)+0x117>
c001227a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012282:	e9 40 ff ff ff       	jmp    c00121c7 <VAS::allocatePages(int, int)+0x117>
c0012287:	90                   	nop

c0012288 <VAS::setCPUSpecific(unsigned long)>:
c0012288:	83 ec 0c             	sub    esp,0xc
c001228b:	6a 05                	push   0x5
c001228d:	68 00 00 40 c2       	push   0xc2400000
c0012292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001229a:	e8 11 fd ff ff       	call   c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001229f:	83 c4 1c             	add    esp,0x1c
c00122a2:	c3                   	ret    
c00122a3:	90                   	nop

c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c00122a4:	55                   	push   ebp
c00122a5:	57                   	push   edi
c00122a6:	56                   	push   esi
c00122a7:	53                   	push   ebx
c00122a8:	83 ec 1c             	sub    esp,0x1c
c00122ab:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c00122b0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00122b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122ba:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00122be:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00122c4:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00122c8:	83 e0 01             	and    eax,0x1
c00122cb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00122cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122d3:	85 c0                	test   eax,eax
c00122d5:	7e 39                	jle    c0012310 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00122d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122db:	89 f3                	mov    ebx,esi
c00122dd:	c1 e0 0c             	shl    eax,0xc
c00122e0:	01 f0                	add    eax,esi
c00122e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122e6:	55                   	push   ebp
c00122e7:	53                   	push   ebx
c00122e8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122ec:	29 f0                	sub    eax,esi
c00122ee:	01 d8                	add    eax,ebx
c00122f0:	50                   	push   eax
c00122f1:	57                   	push   edi
c00122f2:	e8 b9 fc ff ff       	call   c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00122f7:	83 c4 10             	add    esp,0x10
c00122fa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00122ff:	74 03                	je     c0012304 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012301:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012304:	81 c3 00 10 00 00    	add    ebx,0x1000
c001230a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001230e:	75 d6                	jne    c00122e6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012310:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012315:	75 10                	jne    c0012327 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012317:	0f 20 d8             	mov    eax,cr3
c001231a:	0f 22 d8             	mov    cr3,eax
c001231d:	83 c4 1c             	add    esp,0x1c
c0012320:	89 f0                	mov    eax,esi
c0012322:	5b                   	pop    ebx
c0012323:	5e                   	pop    esi
c0012324:	5f                   	pop    edi
c0012325:	5d                   	pop    ebp
c0012326:	c3                   	ret    
c0012327:	89 f3                	mov    ebx,esi
c0012329:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001232d:	c1 eb 0a             	shr    ebx,0xa
c0012330:	c1 e0 0c             	shl    eax,0xc
c0012333:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012339:	01 f0                	add    eax,esi
c001233b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012341:	c1 e8 0a             	shr    eax,0xa
c0012344:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012349:	2d 00 00 40 00       	sub    eax,0x400000
c001234e:	39 c3                	cmp    ebx,eax
c0012350:	77 cb                	ja     c001231d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012352:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012355:	81 c3 00 10 00 00    	add    ebx,0x1000
c001235b:	39 d8                	cmp    eax,ebx
c001235d:	73 f3                	jae    c0012352 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001235f:	83 c4 1c             	add    esp,0x1c
c0012362:	89 f0                	mov    eax,esi
c0012364:	5b                   	pop    ebx
c0012365:	5e                   	pop    esi
c0012366:	5f                   	pop    edi
c0012367:	5d                   	pop    ebp
c0012368:	c3                   	ret    
c0012369:	90                   	nop

c001236a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001236a:	55                   	push   ebp
c001236b:	57                   	push   edi
c001236c:	56                   	push   esi
c001236d:	53                   	push   ebx
c001236e:	83 ec 1c             	sub    esp,0x1c
c0012371:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012375:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012379:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001237d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012381:	a9 ff 0f 00 00       	test   eax,0xfff
c0012386:	75 4a                	jne    c00123d2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012388:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001238c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001238f:	c1 eb 16             	shr    ebx,0x16
c0012392:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012399:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001239d:	74 4d                	je     c00123ec <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001239f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00123a3:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00123a7:	c1 e8 0a             	shr    eax,0xa
c00123aa:	80 fa 01             	cmp    dl,0x1
c00123ad:	19 d2                	sbb    edx,edx
c00123af:	c1 e3 0c             	shl    ebx,0xc
c00123b2:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00123b6:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00123bc:	25 fc 0f 00 00       	and    eax,0xffc
c00123c1:	01 d8                	add    eax,ebx
c00123c3:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00123ca:	83 c4 1c             	add    esp,0x1c
c00123cd:	5b                   	pop    ebx
c00123ce:	5e                   	pop    esi
c00123cf:	5f                   	pop    edi
c00123d0:	5d                   	pop    ebp
c00123d1:	c3                   	ret    
c00123d2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00123d6:	83 ec 0c             	sub    esp,0xc
c00123d9:	68 58 94 02 c0       	push   0xc0029458
c00123de:	e8 d2 77 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c00123e3:	83 c4 10             	add    esp,0x10
c00123e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123ea:	eb 9c                	jmp    c0012388 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00123ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123f0:	e8 ae d8 ff ff       	call   c000fca3 <Phys::allocatePage()>
c00123f5:	89 c5                	mov    ebp,eax
c00123f7:	e8 79 f6 ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c00123fc:	83 ec 0c             	sub    esp,0xc
c00123ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012403:	6a 01                	push   0x1
c0012405:	e8 db f4 ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c001240a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012411:	6a 01                	push   0x1
c0012413:	50                   	push   eax
c0012414:	55                   	push   ebp
c0012415:	81 cd 07 04 00 00    	or     ebp,0x407
c001241b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001241f:	51                   	push   ecx
c0012420:	e8 7f fe ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012425:	83 c4 1c             	add    esp,0x1c
c0012428:	68 00 10 00 00       	push   0x1000
c001242d:	6a 00                	push   0x0
c001242f:	50                   	push   eax
c0012430:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012434:	e8 8b e2 fe ff       	call   c00006c4 <memset>
c0012439:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001243d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012440:	e8 04 f8 ff ff       	call   c0011c49 <Virt::freeKernelVirtualPages(unsigned long)>
c0012445:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012448:	83 c4 10             	add    esp,0x10
c001244b:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001244e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012452:	e9 48 ff ff ff       	jmp    c001239f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012457:	90                   	nop

c0012458 <VAS::VAS(bool)>:
c0012458:	53                   	push   ebx
c0012459:	83 ec 28             	sub    esp,0x28
c001245c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012460:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012464:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012468:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001246f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012473:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012477:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001247a:	e8 24 d8 ff ff       	call   c000fca3 <Phys::allocatePage()>
c001247f:	89 c2                	mov    edx,eax
c0012481:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012485:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012488:	e8 e8 f5 ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c001248d:	89 c3                	mov    ebx,eax
c001248f:	83 ec 0c             	sub    esp,0xc
c0012492:	6a 01                	push   0x1
c0012494:	e8 4c f4 ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c0012499:	83 c4 10             	add    esp,0x10
c001249c:	89 c2                	mov    edx,eax
c001249e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00124a5:	83 ec 0c             	sub    esp,0xc
c00124a8:	6a 03                	push   0x3
c00124aa:	6a 01                	push   0x1
c00124ac:	52                   	push   edx
c00124ad:	50                   	push   eax
c00124ae:	53                   	push   ebx
c00124af:	e8 f0 fd ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124b4:	83 c4 20             	add    esp,0x20
c00124b7:	89 c2                	mov    edx,eax
c00124b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124bd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00124c0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00124c8:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00124d0:	7f 1c                	jg     c00124ee <VAS::VAS(bool)+0x96>
c00124d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00124d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00124dd:	c1 e2 02             	shl    edx,0x2
c00124e0:	01 d0                	add    eax,edx
c00124e2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00124e8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00124ec:	eb da                	jmp    c00124c8 <VAS::VAS(bool)+0x70>
c00124ee:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00124f6:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00124fe:	7f 7a                	jg     c001257a <VAS::VAS(bool)+0x122>
c0012500:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012504:	2d 00 02 00 00       	sub    eax,0x200
c0012509:	c1 e0 0c             	shl    eax,0xc
c001250c:	83 c8 03             	or     eax,0x3
c001250f:	89 c2                	mov    edx,eax
c0012511:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0012516:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001251c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012522:	83 e0 10             	and    eax,0x10
c0012525:	84 c0                	test   al,al
c0012527:	74 07                	je     c0012530 <VAS::VAS(bool)+0xd8>
c0012529:	b8 00 01 00 00       	mov    eax,0x100
c001252e:	eb 05                	jmp    c0012535 <VAS::VAS(bool)+0xdd>
c0012530:	b8 00 00 00 00       	mov    eax,0x0
c0012535:	09 d0                	or     eax,edx
c0012537:	89 c1                	mov    ecx,eax
c0012539:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001253d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012540:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012544:	c1 e2 02             	shl    edx,0x2
c0012547:	01 d0                	add    eax,edx
c0012549:	89 ca                	mov    edx,ecx
c001254b:	89 10                	mov    DWORD PTR [eax],edx
c001254d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012551:	2d 40 03 00 00       	sub    eax,0x340
c0012556:	83 f8 7f             	cmp    eax,0x7f
c0012559:	77 16                	ja     c0012571 <VAS::VAS(bool)+0x119>
c001255b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001255f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012562:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012566:	c1 e2 02             	shl    edx,0x2
c0012569:	01 d0                	add    eax,edx
c001256b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012571:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012575:	e9 7c ff ff ff       	jmp    c00124f6 <VAS::VAS(bool)+0x9e>
c001257a:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c001257f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012585:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001258b:	83 e0 10             	and    eax,0x10
c001258e:	84 c0                	test   al,al
c0012590:	74 07                	je     c0012599 <VAS::VAS(bool)+0x141>
c0012592:	b8 03 41 00 00       	mov    eax,0x4103
c0012597:	eb 05                	jmp    c001259e <VAS::VAS(bool)+0x146>
c0012599:	b8 03 40 00 00       	mov    eax,0x4003
c001259e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00125a2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00125a5:	81 c2 20 0c 00 00    	add    edx,0xc20
c00125ab:	89 02                	mov    DWORD PTR [edx],eax
c00125ad:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c00125b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125b8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00125be:	83 ec 08             	sub    esp,0x8
c00125c1:	50                   	push   eax
c00125c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00125c6:	e8 bd fc ff ff       	call   c0012288 <VAS::setCPUSpecific(unsigned long)>
c00125cb:	83 c4 10             	add    esp,0x10
c00125ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125d2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00125d5:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c00125da:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125e0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00125e6:	83 e0 10             	and    eax,0x10
c00125e9:	84 c0                	test   al,al
c00125eb:	74 07                	je     c00125f4 <VAS::VAS(bool)+0x19c>
c00125ed:	b8 00 01 00 00       	mov    eax,0x100
c00125f2:	eb 05                	jmp    c00125f9 <VAS::VAS(bool)+0x1a1>
c00125f4:	b8 00 00 00 00       	mov    eax,0x0
c00125f9:	09 c2                	or     edx,eax
c00125fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012602:	05 fc 0f 00 00       	add    eax,0xffc
c0012607:	83 ca 03             	or     edx,0x3
c001260a:	89 10                	mov    DWORD PTR [eax],edx
c001260c:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0012611:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012617:	83 ec 0c             	sub    esp,0xc
c001261a:	50                   	push   eax
c001261b:	e8 c8 19 00 00       	call   c0013fe8 <Device::getName()>
c0012620:	83 c4 10             	add    esp,0x10
c0012623:	83 ec 08             	sub    esp,0x8
c0012626:	68 57 95 02 c0       	push   0xc0029557
c001262b:	50                   	push   eax
c001262c:	e8 83 e1 fe ff       	call   c00007b4 <strcmp>
c0012631:	83 c4 10             	add    esp,0x10
c0012634:	85 c0                	test   eax,eax
c0012636:	0f 94 c0             	sete   al
c0012639:	84 c0                	test   al,al
c001263b:	74 70                	je     c00126ad <VAS::VAS(bool)+0x255>
c001263d:	e8 05 ab 00 00       	call   c001d147 <disableIRQs()>
c0012642:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0012647:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001264d:	05 7c 09 00 00       	add    eax,0x97c
c0012652:	83 ec 0c             	sub    esp,0xc
c0012655:	50                   	push   eax
c0012656:	e8 45 ca ff ff       	call   c000f0a0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001265b:	83 c4 10             	add    esp,0x10
c001265e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012663:	89 c3                	mov    ebx,eax
c0012665:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c001266a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012670:	05 7c 09 00 00       	add    eax,0x97c
c0012675:	83 ec 0c             	sub    esp,0xc
c0012678:	50                   	push   eax
c0012679:	e8 22 ca ff ff       	call   c000f0a0 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001267e:	83 c4 10             	add    esp,0x10
c0012681:	83 ec 08             	sub    esp,0x8
c0012684:	50                   	push   eax
c0012685:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012689:	e8 9c f5 ff ff       	call   c0011c2a <VAS::getPageTableEntry(unsigned long)>
c001268e:	83 c4 10             	add    esp,0x10
c0012691:	8b 00                	mov    eax,DWORD PTR [eax]
c0012693:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012698:	6a 11                	push   0x11
c001269a:	53                   	push   ebx
c001269b:	50                   	push   eax
c001269c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00126a0:	e8 0b f9 ff ff       	call   c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00126a5:	83 c4 10             	add    esp,0x10
c00126a8:	e8 a8 aa 00 00       	call   c001d155 <enableIRQs()>
c00126ad:	90                   	nop
c00126ae:	83 c4 28             	add    esp,0x28
c00126b1:	5b                   	pop    ebx
c00126b2:	c3                   	ret    

c00126b3 <mapVASFirstTime>:
c00126b3:	55                   	push   ebp
c00126b4:	57                   	push   edi
c00126b5:	56                   	push   esi
c00126b6:	53                   	push   ebx
c00126b7:	83 ec 0c             	sub    esp,0xc
c00126ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126bf:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00126c2:	4a                   	dec    edx
c00126c3:	0f 84 8e 00 00 00    	je     c0012757 <mapVASFirstTime+0xa4>
c00126c9:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00126cc:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00126cf:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00126d4:	c1 e5 15             	shl    ebp,0x15
c00126d7:	be 00 90 e7 01       	mov    esi,0x1e79000
c00126dc:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00126e2:	29 eb                	sub    ebx,ebp
c00126e4:	29 ee                	sub    esi,ebp
c00126e6:	e8 b8 d5 ff ff       	call   c000fca3 <Phys::allocatePage()>
c00126eb:	83 ec 0c             	sub    esp,0xc
c00126ee:	68 03 04 00 00       	push   0x403
c00126f3:	6a 01                	push   0x1
c00126f5:	53                   	push   ebx
c00126f6:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00126fc:	50                   	push   eax
c00126fd:	57                   	push   edi
c00126fe:	e8 a1 fb ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012703:	83 c4 20             	add    esp,0x20
c0012706:	39 f3                	cmp    ebx,esi
c0012708:	75 dc                	jne    c00126e6 <mapVASFirstTime+0x33>
c001270a:	be 00 f0 ff 01       	mov    esi,0x1fff000
c001270f:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012714:	29 ee                	sub    esi,ebp
c0012716:	29 e8                	sub    eax,ebp
c0012718:	89 c5                	mov    ebp,eax
c001271a:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001271e:	19 db                	sbb    ebx,ebx
c0012720:	e8 7e d5 ff ff       	call   c000fca3 <Phys::allocatePage()>
c0012725:	83 e3 04             	and    ebx,0x4
c0012728:	83 ec 0c             	sub    esp,0xc
c001272b:	81 c3 03 04 00 00    	add    ebx,0x403
c0012731:	53                   	push   ebx
c0012732:	6a 01                	push   0x1
c0012734:	56                   	push   esi
c0012735:	81 ee 00 10 00 00    	sub    esi,0x1000
c001273b:	50                   	push   eax
c001273c:	57                   	push   edi
c001273d:	e8 62 fb ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012742:	83 c4 20             	add    esp,0x20
c0012745:	39 f5                	cmp    ebp,esi
c0012747:	75 d1                	jne    c001271a <mapVASFirstTime+0x67>
c0012749:	0f 20 d8             	mov    eax,cr3
c001274c:	0f 22 d8             	mov    cr3,eax
c001274f:	83 c4 0c             	add    esp,0xc
c0012752:	5b                   	pop    ebx
c0012753:	5e                   	pop    esi
c0012754:	5f                   	pop    edi
c0012755:	5d                   	pop    ebp
c0012756:	c3                   	ret    
c0012757:	83 ec 0c             	sub    esp,0xc
c001275a:	68 65 95 02 c0       	push   0xc0029565
c001275f:	e8 71 01 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0012764:	83 c4 10             	add    esp,0x10
c0012767:	83 c4 0c             	add    esp,0xc
c001276a:	5b                   	pop    ebx
c001276b:	5e                   	pop    esi
c001276c:	5f                   	pop    edi
c001276d:	5d                   	pop    ebp
c001276e:	c3                   	ret    

c001276f <__cxa_atexit>:
c001276f:	31 c0                	xor    eax,eax
c0012771:	c3                   	ret    

c0012772 <__cxa_finalize>:
c0012772:	c3                   	ret    

c0012773 <__stack_chk_fail>:
c0012773:	55                   	push   ebp
c0012774:	89 e5                	mov    ebp,esp
c0012776:	83 ec 14             	sub    esp,0x14
c0012779:	68 7e 95 02 c0       	push   0xc002957e
c001277e:	e8 52 01 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0012783:	58                   	pop    eax
c0012784:	5a                   	pop    edx
c0012785:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012788:	68 ce 95 02 c0       	push   0xc00295ce
c001278d:	e8 43 01 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0012792:	59                   	pop    ecx
c0012793:	58                   	pop    eax
c0012794:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012797:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001279a:	68 ce 95 02 c0       	push   0xc00295ce
c001279f:	e8 31 01 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00127a4:	5a                   	pop    edx
c00127a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127a8:	59                   	pop    ecx
c00127a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00127ab:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127ae:	68 ce 95 02 c0       	push   0xc00295ce
c00127b3:	e8 1d 01 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00127b8:	5a                   	pop    edx
c00127b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127bc:	59                   	pop    ecx
c00127bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00127bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00127c1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127c4:	68 ce 95 02 c0       	push   0xc00295ce
c00127c9:	e8 07 01 00 00       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00127ce:	c7 04 24 d6 95 02 c0 	mov    DWORD PTR [esp],0xc00295d6
c00127d5:	e8 db 73 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c00127da:	83 c4 10             	add    esp,0x10
c00127dd:	c9                   	leave  
c00127de:	c3                   	ret    

c00127df <__cxa_pure_virtual>:
c00127df:	83 ec 18             	sub    esp,0x18
c00127e2:	68 ee 95 02 c0       	push   0xc00295ee
c00127e7:	e8 c9 73 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c00127ec:	83 c4 1c             	add    esp,0x1c
c00127ef:	c3                   	ret    

c00127f0 <operator new[](unsigned long)>:
c00127f0:	e9 2f ce ff ff       	jmp    c000f624 <malloc>

c00127f5 <operator delete(void*, unsigned long)>:
c00127f5:	e9 4a ce ff ff       	jmp    c000f644 <rfree>

c00127fa <operator delete[](void*)>:
c00127fa:	e9 45 ce ff ff       	jmp    c000f644 <rfree>

c00127ff <operator delete[](void*, unsigned long)>:
c00127ff:	e9 40 ce ff ff       	jmp    c000f644 <rfree>

c0012804 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012804:	57                   	push   edi
c0012805:	b9 3f 00 00 00       	mov    ecx,0x3f
c001280a:	56                   	push   esi
c001280b:	be 04 96 02 c0       	mov    esi,0xc0029604
c0012810:	53                   	push   ebx
c0012811:	83 ec 40             	sub    esp,0x40
c0012814:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012818:	8d 7c 24 01          	lea    edi,[esp+0x1]
c001281c:	fc                   	cld    
c001281d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001281f:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012823:	83 f9 3e             	cmp    ecx,0x3e
c0012826:	7e 05                	jle    c001282d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012828:	b9 3e 00 00 00       	mov    ecx,0x3e
c001282d:	89 df                	mov    edi,ebx
c001282f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012833:	eb 02                	jmp    c0012837 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012835:	89 c7                	mov    edi,eax
c0012837:	31 d2                	xor    edx,edx
c0012839:	46                   	inc    esi
c001283a:	89 f8                	mov    eax,edi
c001283c:	f7 f1                	div    ecx
c001283e:	39 cf                	cmp    edi,ecx
c0012840:	73 f3                	jae    c0012835 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012842:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012845:	eb 02                	jmp    c0012849 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012847:	89 c3                	mov    ebx,eax
c0012849:	31 d2                	xor    edx,edx
c001284b:	4e                   	dec    esi
c001284c:	89 d8                	mov    eax,ebx
c001284e:	f7 f1                	div    ecx
c0012850:	39 cb                	cmp    ebx,ecx
c0012852:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012856:	88 16                	mov    BYTE PTR [esi],dl
c0012858:	73 ed                	jae    c0012847 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c001285a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001285e:	83 c4 40             	add    esp,0x40
c0012861:	5b                   	pop    ebx
c0012862:	5e                   	pop    esi
c0012863:	5f                   	pop    edi
c0012864:	c3                   	ret    

c0012865 <Dbg::logc(char)>:
c0012865:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012869:	ba fd 03 00 00       	mov    edx,0x3fd
c001286e:	ec                   	in     al,dx
c001286f:	a8 20                	test   al,0x20
c0012871:	74 fb                	je     c001286e <Dbg::logc(char)+0x9>
c0012873:	ba f8 03 00 00       	mov    edx,0x3f8
c0012878:	88 c8                	mov    al,cl
c001287a:	ee                   	out    dx,al
c001287b:	c3                   	ret    

c001287c <Dbg::logs(char*)>:
c001287c:	53                   	push   ebx
c001287d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012881:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012884:	84 c0                	test   al,al
c0012886:	74 0f                	je     c0012897 <Dbg::logs(char*)+0x1b>
c0012888:	50                   	push   eax
c0012889:	43                   	inc    ebx
c001288a:	e8 d6 ff ff ff       	call   c0012865 <Dbg::logc(char)>
c001288f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012892:	5a                   	pop    edx
c0012893:	84 c0                	test   al,al
c0012895:	75 f1                	jne    c0012888 <Dbg::logs(char*)+0xc>
c0012897:	5b                   	pop    ebx
c0012898:	c3                   	ret    

c0012899 <Dbg::logWriteInt(unsigned int)>:
c0012899:	83 ec 10             	sub    esp,0x10
c001289c:	6a 0a                	push   0xa
c001289e:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128a2:	50                   	push   eax
c00128a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128a7:	e8 58 ff ff ff       	call   c0012804 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128ac:	50                   	push   eax
c00128ad:	e8 ca ff ff ff       	call   c001287c <Dbg::logs(char*)>
c00128b2:	83 c4 20             	add    esp,0x20
c00128b5:	c3                   	ret    

c00128b6 <Dbg::logWriteIntBase(unsigned int, int)>:
c00128b6:	83 ec 10             	sub    esp,0x10
c00128b9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128bd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128c1:	50                   	push   eax
c00128c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128c6:	e8 39 ff ff ff       	call   c0012804 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128cb:	50                   	push   eax
c00128cc:	e8 ab ff ff ff       	call   c001287c <Dbg::logs(char*)>
c00128d1:	83 c4 20             	add    esp,0x20
c00128d4:	c3                   	ret    

c00128d5 <Dbg::kprintf(char const*, ...)>:
c00128d5:	55                   	push   ebp
c00128d6:	57                   	push   edi
c00128d7:	56                   	push   esi
c00128d8:	53                   	push   ebx
c00128d9:	83 ec 0c             	sub    esp,0xc
c00128dc:	8d 44 24 24          	lea    eax,[esp+0x24]
c00128e0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00128e4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128e8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00128eb:	84 c0                	test   al,al
c00128ed:	74 4a                	je     c0012939 <Dbg::kprintf(char const*, ...)+0x64>
c00128ef:	31 db                	xor    ebx,ebx
c00128f1:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00128f4:	3c 25                	cmp    al,0x25
c00128f6:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00128f9:	0f 85 e4 00 00 00    	jne    c00129e3 <Dbg::kprintf(char const*, ...)+0x10e>
c00128ff:	83 c3 02             	add    ebx,0x2
c0012902:	8a 07                	mov    al,BYTE PTR [edi]
c0012904:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012907:	83 e8 25             	sub    eax,0x25
c001290a:	3c 53                	cmp    al,0x53
c001290c:	0f 87 ba 00 00 00    	ja     c00129cc <Dbg::kprintf(char const*, ...)+0xf7>
c0012912:	0f b6 c0             	movzx  eax,al
c0012915:	ff 24 85 44 96 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd69bc]
c001291c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012920:	89 c8                	mov    eax,ecx
c0012922:	83 c1 04             	add    ecx,0x4
c0012925:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012929:	ff 30                	push   DWORD PTR [eax]
c001292b:	e8 4c ff ff ff       	call   c001287c <Dbg::logs(char*)>
c0012930:	58                   	pop    eax
c0012931:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012935:	84 c0                	test   al,al
c0012937:	75 b8                	jne    c00128f1 <Dbg::kprintf(char const*, ...)+0x1c>
c0012939:	83 c4 0c             	add    esp,0xc
c001293c:	5b                   	pop    ebx
c001293d:	5e                   	pop    esi
c001293e:	5f                   	pop    edi
c001293f:	5d                   	pop    ebp
c0012940:	c3                   	ret    
c0012941:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012945:	89 d0                	mov    eax,edx
c0012947:	83 c2 04             	add    edx,0x4
c001294a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001294e:	ff 30                	push   DWORD PTR [eax]
c0012950:	e8 44 ff ff ff       	call   c0012899 <Dbg::logWriteInt(unsigned int)>
c0012955:	58                   	pop    eax
c0012956:	eb d9                	jmp    c0012931 <Dbg::kprintf(char const*, ...)+0x5c>
c0012958:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001295c:	89 d0                	mov    eax,edx
c001295e:	83 c2 04             	add    edx,0x4
c0012961:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012964:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012968:	50                   	push   eax
c0012969:	e8 f7 fe ff ff       	call   c0012865 <Dbg::logc(char)>
c001296e:	58                   	pop    eax
c001296f:	eb c0                	jmp    c0012931 <Dbg::kprintf(char const*, ...)+0x5c>
c0012971:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012975:	89 c8                	mov    eax,ecx
c0012977:	83 c1 04             	add    ecx,0x4
c001297a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001297e:	ff 30                	push   DWORD PTR [eax]
c0012980:	e8 14 ff ff ff       	call   c0012899 <Dbg::logWriteInt(unsigned int)>
c0012985:	5f                   	pop    edi
c0012986:	eb a9                	jmp    c0012931 <Dbg::kprintf(char const*, ...)+0x5c>
c0012988:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001298c:	89 c8                	mov    eax,ecx
c001298e:	83 c1 04             	add    ecx,0x4
c0012991:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012995:	6a 10                	push   0x10
c0012997:	ff 30                	push   DWORD PTR [eax]
c0012999:	e8 18 ff ff ff       	call   c00128b6 <Dbg::logWriteIntBase(unsigned int, int)>
c001299e:	59                   	pop    ecx
c001299f:	5f                   	pop    edi
c00129a0:	eb 8f                	jmp    c0012931 <Dbg::kprintf(char const*, ...)+0x5c>
c00129a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129a6:	89 d0                	mov    eax,edx
c00129a8:	83 c2 08             	add    edx,0x8
c00129ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129af:	6a 10                	push   0x10
c00129b1:	ff 30                	push   DWORD PTR [eax]
c00129b3:	e8 fe fe ff ff       	call   c00128b6 <Dbg::logWriteIntBase(unsigned int, int)>
c00129b8:	58                   	pop    eax
c00129b9:	5a                   	pop    edx
c00129ba:	e9 72 ff ff ff       	jmp    c0012931 <Dbg::kprintf(char const*, ...)+0x5c>
c00129bf:	6a 25                	push   0x25
c00129c1:	e8 9f fe ff ff       	call   c0012865 <Dbg::logc(char)>
c00129c6:	58                   	pop    eax
c00129c7:	e9 65 ff ff ff       	jmp    c0012931 <Dbg::kprintf(char const*, ...)+0x5c>
c00129cc:	6a 25                	push   0x25
c00129ce:	e8 92 fe ff ff       	call   c0012865 <Dbg::logc(char)>
c00129d3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00129d6:	50                   	push   eax
c00129d7:	e8 89 fe ff ff       	call   c0012865 <Dbg::logc(char)>
c00129dc:	5a                   	pop    edx
c00129dd:	59                   	pop    ecx
c00129de:	e9 4e ff ff ff       	jmp    c0012931 <Dbg::kprintf(char const*, ...)+0x5c>
c00129e3:	50                   	push   eax
c00129e4:	89 eb                	mov    ebx,ebp
c00129e6:	e8 7a fe ff ff       	call   c0012865 <Dbg::logc(char)>
c00129eb:	89 fd                	mov    ebp,edi
c00129ed:	58                   	pop    eax
c00129ee:	e9 3e ff ff ff       	jmp    c0012931 <Dbg::kprintf(char const*, ...)+0x5c>
c00129f3:	90                   	nop

c00129f4 <File::read(unsigned long long, void*, int*)>:
c00129f4:	53                   	push   ebx
c00129f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129f9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129fd:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a04:	3c 19                	cmp    al,0x19
c0012a06:	77 35                	ja     c0012a3d <File::read(unsigned long long, void*, int*)+0x49>
c0012a08:	8b 04 85 20 d5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ae0]
c0012a0f:	85 c0                	test   eax,eax
c0012a11:	74 2a                	je     c0012a3d <File::read(unsigned long long, void*, int*)+0x49>
c0012a13:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a19:	85 c0                	test   eax,eax
c0012a1b:	74 20                	je     c0012a3d <File::read(unsigned long long, void*, int*)+0x49>
c0012a1d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a21:	74 21                	je     c0012a44 <File::read(unsigned long long, void*, int*)+0x50>
c0012a23:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a25:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a29:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a33:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a37:	5b                   	pop    ebx
c0012a38:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012a3b:	ff e0                	jmp    eax
c0012a3d:	b8 0b 00 00 00       	mov    eax,0xb
c0012a42:	eb 05                	jmp    c0012a49 <File::read(unsigned long long, void*, int*)+0x55>
c0012a44:	b8 05 00 00 00       	mov    eax,0x5
c0012a49:	5b                   	pop    ebx
c0012a4a:	c3                   	ret    
c0012a4b:	90                   	nop

c0012a4c <File::write(unsigned long long, void*, int*)>:
c0012a4c:	53                   	push   ebx
c0012a4d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a51:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a55:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a5c:	3c 19                	cmp    al,0x19
c0012a5e:	77 35                	ja     c0012a95 <File::write(unsigned long long, void*, int*)+0x49>
c0012a60:	8b 04 85 20 d5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ae0]
c0012a67:	85 c0                	test   eax,eax
c0012a69:	74 2a                	je     c0012a95 <File::write(unsigned long long, void*, int*)+0x49>
c0012a6b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a71:	85 c0                	test   eax,eax
c0012a73:	74 20                	je     c0012a95 <File::write(unsigned long long, void*, int*)+0x49>
c0012a75:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a79:	74 21                	je     c0012a9c <File::write(unsigned long long, void*, int*)+0x50>
c0012a7b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a7d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a81:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a8b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a8f:	5b                   	pop    ebx
c0012a90:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012a93:	ff e0                	jmp    eax
c0012a95:	b8 0b 00 00 00       	mov    eax,0xb
c0012a9a:	eb 05                	jmp    c0012aa1 <File::write(unsigned long long, void*, int*)+0x55>
c0012a9c:	b8 05 00 00 00       	mov    eax,0x5
c0012aa1:	5b                   	pop    ebx
c0012aa2:	c3                   	ret    
c0012aa3:	90                   	nop

c0012aa4 <Directory::read(unsigned long long, void*, int*)>:
c0012aa4:	53                   	push   ebx
c0012aa5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012aa9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012aad:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ab4:	3c 19                	cmp    al,0x19
c0012ab6:	77 35                	ja     c0012aed <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ab8:	8b 04 85 20 d5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ae0]
c0012abf:	85 c0                	test   eax,eax
c0012ac1:	74 2a                	je     c0012aed <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ac3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ac9:	85 c0                	test   eax,eax
c0012acb:	74 20                	je     c0012aed <Directory::read(unsigned long long, void*, int*)+0x49>
c0012acd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ad1:	74 21                	je     c0012af4 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012ad3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ad5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ad9:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012adf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ae3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ae7:	5b                   	pop    ebx
c0012ae8:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012aeb:	ff e0                	jmp    eax
c0012aed:	b8 0b 00 00 00       	mov    eax,0xb
c0012af2:	eb 05                	jmp    c0012af9 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012af4:	b8 05 00 00 00       	mov    eax,0x5
c0012af9:	5b                   	pop    ebx
c0012afa:	c3                   	ret    
c0012afb:	90                   	nop

c0012afc <Directory::write(unsigned long long, void*, int*)>:
c0012afc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b00:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012b07:	b8 0b 00 00 00       	mov    eax,0xb
c0012b0c:	80 fa 19             	cmp    dl,0x19
c0012b0f:	77 18                	ja     c0012b29 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b11:	8b 14 95 20 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ae0]
c0012b18:	85 d2                	test   edx,edx
c0012b1a:	74 0d                	je     c0012b29 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b1c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012b23:	19 c0                	sbb    eax,eax
c0012b25:	83 e0 0a             	and    eax,0xa
c0012b28:	40                   	inc    eax
c0012b29:	c3                   	ret    

c0012b2a <File::isAtty()>:
c0012b2a:	31 c0                	xor    eax,eax
c0012b2c:	c3                   	ret    
c0012b2d:	90                   	nop

c0012b2e <Directory::isAtty()>:
c0012b2e:	31 c0                	xor    eax,eax
c0012b30:	c3                   	ret    
c0012b31:	90                   	nop

c0012b32 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012b32:	b8 0a 00 00 00       	mov    eax,0xa
c0012b37:	c3                   	ret    

c0012b38 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012b38:	b8 0a 00 00 00       	mov    eax,0xa
c0012b3d:	c3                   	ret    

c0012b3e <File::~File()>:
c0012b3e:	83 ec 0c             	sub    esp,0xc
c0012b41:	ba 00 98 02 c0       	mov    edx,0xc0029800
c0012b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b4a:	89 10                	mov    DWORD PTR [eax],edx
c0012b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b50:	83 ec 0c             	sub    esp,0xc
c0012b53:	50                   	push   eax
c0012b54:	e8 2b eb ff ff       	call   c0011684 <UnixFile::~UnixFile()>
c0012b59:	83 c4 10             	add    esp,0x10
c0012b5c:	90                   	nop
c0012b5d:	83 c4 0c             	add    esp,0xc
c0012b60:	c3                   	ret    
c0012b61:	90                   	nop

c0012b62 <File::~File()>:
c0012b62:	83 ec 0c             	sub    esp,0xc
c0012b65:	83 ec 0c             	sub    esp,0xc
c0012b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b6c:	e8 cd ff ff ff       	call   c0012b3e <File::~File()>
c0012b71:	83 c4 10             	add    esp,0x10
c0012b74:	83 ec 08             	sub    esp,0x8
c0012b77:	68 14 01 00 00       	push   0x114
c0012b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b80:	e8 70 fc ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0012b85:	83 c4 10             	add    esp,0x10
c0012b88:	83 c4 0c             	add    esp,0xc
c0012b8b:	c3                   	ret    

c0012b8c <Directory::~Directory()>:
c0012b8c:	83 ec 0c             	sub    esp,0xc
c0012b8f:	ba 1c 98 02 c0       	mov    edx,0xc002981c
c0012b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b98:	89 10                	mov    DWORD PTR [eax],edx
c0012b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b9e:	83 ec 0c             	sub    esp,0xc
c0012ba1:	50                   	push   eax
c0012ba2:	e8 dd ea ff ff       	call   c0011684 <UnixFile::~UnixFile()>
c0012ba7:	83 c4 10             	add    esp,0x10
c0012baa:	90                   	nop
c0012bab:	83 c4 0c             	add    esp,0xc
c0012bae:	c3                   	ret    
c0012baf:	90                   	nop

c0012bb0 <Directory::~Directory()>:
c0012bb0:	83 ec 0c             	sub    esp,0xc
c0012bb3:	83 ec 0c             	sub    esp,0xc
c0012bb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bba:	e8 cd ff ff ff       	call   c0012b8c <Directory::~Directory()>
c0012bbf:	83 c4 10             	add    esp,0x10
c0012bc2:	83 ec 08             	sub    esp,0x8
c0012bc5:	68 14 01 00 00       	push   0x114
c0012bca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bce:	e8 22 fc ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0012bd3:	83 c4 10             	add    esp,0x10
c0012bd6:	83 c4 0c             	add    esp,0xc
c0012bd9:	c3                   	ret    

c0012bda <Filesystem::Filesystem()>:
c0012bda:	ba 9c 97 02 c0       	mov    edx,0xc002979c
c0012bdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012be3:	89 10                	mov    DWORD PTR [eax],edx
c0012be5:	8b 15 88 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d088
c0012beb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012bf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bf6:	a3 88 d0 02 c0       	mov    ds:0xc002d088,eax
c0012bfb:	90                   	nop
c0012bfc:	c3                   	ret    
c0012bfd:	90                   	nop

c0012bfe <Filesystem::~Filesystem()>:
c0012bfe:	ba 9c 97 02 c0       	mov    edx,0xc002979c
c0012c03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c07:	89 10                	mov    DWORD PTR [eax],edx
c0012c09:	90                   	nop
c0012c0a:	c3                   	ret    
c0012c0b:	90                   	nop

c0012c0c <Filesystem::~Filesystem()>:
c0012c0c:	83 ec 0c             	sub    esp,0xc
c0012c0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c13:	e8 e6 ff ff ff       	call   c0012bfe <Filesystem::~Filesystem()>
c0012c18:	83 c4 04             	add    esp,0x4
c0012c1b:	83 ec 08             	sub    esp,0x8
c0012c1e:	6a 08                	push   0x8
c0012c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c24:	e8 cc fb ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0012c29:	83 c4 10             	add    esp,0x10
c0012c2c:	83 c4 0c             	add    esp,0xc
c0012c2f:	c3                   	ret    

c0012c30 <Fs::getcwd(Process*, char*, int)>:
c0012c30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c34:	31 c0                	xor    eax,eax
c0012c36:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c39:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c3d:	7d 15                	jge    c0012c54 <Fs::getcwd(Process*, char*, int)+0x24>
c0012c3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c43:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c4a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c4d:	84 c9                	test   cl,cl
c0012c4f:	74 06                	je     c0012c57 <Fs::getcwd(Process*, char*, int)+0x27>
c0012c51:	40                   	inc    eax
c0012c52:	eb e2                	jmp    c0012c36 <Fs::getcwd(Process*, char*, int)+0x6>
c0012c54:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c57:	31 c0                	xor    eax,eax
c0012c59:	c3                   	ret    

c0012c5a <Fs::initVFS()>:
c0012c5a:	83 ec 18             	sub    esp,0x18
c0012c5d:	6a 08                	push   0x8
c0012c5f:	e8 c0 c9 ff ff       	call   c000f624 <malloc>
c0012c64:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c67:	e8 6c d6 00 00       	call   c00202d8 <FAT::FAT()>
c0012c6c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c73:	e8 ac c9 ff ff       	call   c000f624 <malloc>
c0012c78:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c7b:	e8 b0 e8 00 00       	call   c0021530 <ISO9660::ISO9660()>
c0012c80:	83 c4 1c             	add    esp,0x1c
c0012c83:	c3                   	ret    

c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012c84:	55                   	push   ebp
c0012c85:	57                   	push   edi
c0012c86:	56                   	push   esi
c0012c87:	53                   	push   ebx
c0012c88:	81 ec 10 04 00 00    	sub    esp,0x410
c0012c8e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012c95:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012c9c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012ca3:	68 00 04 00 00       	push   0x400
c0012ca8:	6a 00                	push   0x0
c0012caa:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012cae:	56                   	push   esi
c0012caf:	e8 10 da fe ff       	call   c00006c4 <memset>
c0012cb4:	83 c4 10             	add    esp,0x10
c0012cb7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012cbb:	75 0b                	jne    c0012cc8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012cbd:	50                   	push   eax
c0012cbe:	50                   	push   eax
c0012cbf:	57                   	push   edi
c0012cc0:	56                   	push   esi
c0012cc1:	e8 9d da fe ff       	call   c0000763 <strcpy>
c0012cc6:	eb 41                	jmp    c0012d09 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012cc8:	8a 07                	mov    al,BYTE PTR [edi]
c0012cca:	3c 5c                	cmp    al,0x5c
c0012ccc:	74 04                	je     c0012cd2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012cce:	3c 2f                	cmp    al,0x2f
c0012cd0:	75 18                	jne    c0012cea <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012cd2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012cd5:	3c 60                	cmp    al,0x60
c0012cd7:	7e 03                	jle    c0012cdc <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012cd9:	83 e8 20             	sub    eax,0x20
c0012cdc:	88 04 24             	mov    BYTE PTR [esp],al
c0012cdf:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ce6:	50                   	push   eax
c0012ce7:	50                   	push   eax
c0012ce8:	eb 18                	jmp    c0012d02 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012cea:	50                   	push   eax
c0012ceb:	50                   	push   eax
c0012cec:	55                   	push   ebp
c0012ced:	56                   	push   esi
c0012cee:	e8 70 da fe ff       	call   c0000763 <strcpy>
c0012cf3:	5a                   	pop    edx
c0012cf4:	59                   	pop    ecx
c0012cf5:	68 34 ad 02 c0       	push   0xc002ad34
c0012cfa:	56                   	push   esi
c0012cfb:	e8 1a db fe ff       	call   c000081a <strcat>
c0012d00:	5d                   	pop    ebp
c0012d01:	58                   	pop    eax
c0012d02:	57                   	push   edi
c0012d03:	56                   	push   esi
c0012d04:	e8 11 db fe ff       	call   c000081a <strcat>
c0012d09:	83 c4 10             	add    esp,0x10
c0012d0c:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012d0f:	3c 60                	cmp    al,0x60
c0012d11:	7e 03                	jle    c0012d16 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012d13:	83 e8 20             	sub    eax,0x20
c0012d16:	88 04 24             	mov    BYTE PTR [esp],al
c0012d19:	88 03                	mov    BYTE PTR [ebx],al
c0012d1b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d22:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012d28:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012d2c:	bf 03 00 00 00       	mov    edi,0x3
c0012d31:	b8 03 00 00 00       	mov    eax,0x3
c0012d36:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012d39:	84 d2                	test   dl,dl
c0012d3b:	0f 84 91 00 00 00    	je     c0012dd2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012d41:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012d44:	80 fa 5c             	cmp    dl,0x5c
c0012d47:	74 05                	je     c0012d4e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d49:	80 fa 2f             	cmp    dl,0x2f
c0012d4c:	75 12                	jne    c0012d60 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d4e:	89 c5                	mov    ebp,eax
c0012d50:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d55:	74 09                	je     c0012d60 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d57:	40                   	inc    eax
c0012d58:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d5c:	89 cf                	mov    edi,ecx
c0012d5e:	eb d6                	jmp    c0012d36 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d60:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d65:	75 5b                	jne    c0012dc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d67:	80 fa 2e             	cmp    dl,0x2e
c0012d6a:	75 56                	jne    c0012dc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d6c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d70:	74 19                	je     c0012d8b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d72:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d77:	74 53                	je     c0012dcc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d79:	89 f9                	mov    ecx,edi
c0012d7b:	41                   	inc    ecx
c0012d7c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d7f:	80 fa 2f             	cmp    dl,0x2f
c0012d82:	74 f7                	je     c0012d7b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d84:	80 fa 5c             	cmp    dl,0x5c
c0012d87:	74 f2                	je     c0012d7b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d89:	eb d1                	jmp    c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d8b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d90:	74 3a                	je     c0012dcc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d92:	83 f8 03             	cmp    eax,0x3
c0012d95:	74 c5                	je     c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d97:	41                   	inc    ecx
c0012d98:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d9b:	80 fa 2f             	cmp    dl,0x2f
c0012d9e:	74 f7                	je     c0012d97 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012da0:	80 fa 5c             	cmp    dl,0x5c
c0012da3:	74 f2                	je     c0012d97 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012da5:	48                   	dec    eax
c0012da6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012daa:	75 06                	jne    c0012db2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dac:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012db0:	eb f3                	jmp    c0012da5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012db2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012db6:	74 07                	je     c0012dbf <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012db8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dbc:	48                   	dec    eax
c0012dbd:	eb f3                	jmp    c0012db2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dbf:	40                   	inc    eax
c0012dc0:	eb 9a                	jmp    c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dc2:	80 fa 2f             	cmp    dl,0x2f
c0012dc5:	74 95                	je     c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dc7:	80 fa 5c             	cmp    dl,0x5c
c0012dca:	74 90                	je     c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dcc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012dcf:	40                   	inc    eax
c0012dd0:	eb 8a                	jmp    c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dd2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dd6:	83 ec 0c             	sub    esp,0xc
c0012dd9:	53                   	push   ebx
c0012dda:	e8 02 d9 fe ff       	call   c00006e1 <strlen>
c0012ddf:	83 c4 10             	add    esp,0x10
c0012de2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012de7:	75 26                	jne    c0012e0f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012de9:	83 ec 0c             	sub    esp,0xc
c0012dec:	53                   	push   ebx
c0012ded:	e8 ef d8 fe ff       	call   c00006e1 <strlen>
c0012df2:	83 c4 10             	add    esp,0x10
c0012df5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012dfa:	74 26                	je     c0012e22 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012dfc:	83 ec 0c             	sub    esp,0xc
c0012dff:	53                   	push   ebx
c0012e00:	e8 dc d8 fe ff       	call   c00006e1 <strlen>
c0012e05:	83 c4 10             	add    esp,0x10
c0012e08:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e0d:	eb c7                	jmp    c0012dd6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012e0f:	83 ec 0c             	sub    esp,0xc
c0012e12:	53                   	push   ebx
c0012e13:	e8 c9 d8 fe ff       	call   c00006e1 <strlen>
c0012e18:	83 c4 10             	add    esp,0x10
c0012e1b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e20:	74 c7                	je     c0012de9 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012e22:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012e28:	5b                   	pop    ebx
c0012e29:	5e                   	pop    esi
c0012e2a:	5f                   	pop    edi
c0012e2b:	5d                   	pop    ebp
c0012e2c:	c3                   	ret    
c0012e2d:	90                   	nop

c0012e2e <File::File(char const*, Process*)>:
c0012e2e:	83 ec 0c             	sub    esp,0xc
c0012e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e35:	83 ec 08             	sub    esp,0x8
c0012e38:	6a 00                	push   0x0
c0012e3a:	50                   	push   eax
c0012e3b:	e8 62 e6 ff ff       	call   c00114a2 <UnixFile::UnixFile(int)>
c0012e40:	83 c4 10             	add    esp,0x10
c0012e43:	ba 00 98 02 c0       	mov    edx,0xc0029800
c0012e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e4c:	89 10                	mov    DWORD PTR [eax],edx
c0012e4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e52:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e5c:	83 c0 0d             	add    eax,0xd
c0012e5f:	83 ec 04             	sub    esp,0x4
c0012e62:	52                   	push   edx
c0012e63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e67:	50                   	push   eax
c0012e68:	e8 17 fe ff ff       	call   c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e6d:	83 c4 10             	add    esp,0x10
c0012e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e74:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e77:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e7e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e88:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012e8c:	90                   	nop
c0012e8d:	83 c4 0c             	add    esp,0xc
c0012e90:	c3                   	ret    
c0012e91:	90                   	nop

c0012e92 <File::open(FileOpenMode)>:
c0012e92:	53                   	push   ebx
c0012e93:	b8 0b 00 00 00       	mov    eax,0xb
c0012e98:	83 ec 08             	sub    esp,0x8
c0012e9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e9f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ea6:	80 fa 19             	cmp    dl,0x19
c0012ea9:	77 40                	ja     c0012eeb <File::open(FileOpenMode)+0x59>
c0012eab:	8b 14 95 20 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ae0]
c0012eb2:	85 d2                	test   edx,edx
c0012eb4:	74 35                	je     c0012eeb <File::open(FileOpenMode)+0x59>
c0012eb6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ebc:	85 d2                	test   edx,edx
c0012ebe:	74 2b                	je     c0012eeb <File::open(FileOpenMode)+0x59>
c0012ec0:	b8 06 00 00 00       	mov    eax,0x6
c0012ec5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ec9:	75 20                	jne    c0012eeb <File::open(FileOpenMode)+0x59>
c0012ecb:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ecd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ed3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ed7:	51                   	push   ecx
c0012ed8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012edb:	51                   	push   ecx
c0012edc:	52                   	push   edx
c0012edd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012ee0:	83 c4 10             	add    esp,0x10
c0012ee3:	85 c0                	test   eax,eax
c0012ee5:	75 04                	jne    c0012eeb <File::open(FileOpenMode)+0x59>
c0012ee7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012eeb:	83 c4 08             	add    esp,0x8
c0012eee:	5b                   	pop    ebx
c0012eef:	c3                   	ret    

c0012ef0 <File::close()>:
c0012ef0:	53                   	push   ebx
c0012ef1:	b8 0b 00 00 00       	mov    eax,0xb
c0012ef6:	83 ec 08             	sub    esp,0x8
c0012ef9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012efd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f04:	80 fa 19             	cmp    dl,0x19
c0012f07:	77 41                	ja     c0012f4a <File::close()+0x5a>
c0012f09:	8b 1c 95 20 d5 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2ae0]
c0012f10:	85 db                	test   ebx,ebx
c0012f12:	74 36                	je     c0012f4a <File::close()+0x5a>
c0012f14:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012f1b:	74 2d                	je     c0012f4a <File::close()+0x5a>
c0012f1d:	b8 05 00 00 00       	mov    eax,0x5
c0012f22:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f26:	74 22                	je     c0012f4a <File::close()+0x5a>
c0012f28:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012f2c:	8b 04 95 20 d5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2ae0]
c0012f33:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f39:	53                   	push   ebx
c0012f3a:	53                   	push   ebx
c0012f3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f3d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f43:	50                   	push   eax
c0012f44:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f47:	83 c4 10             	add    esp,0x10
c0012f4a:	83 c4 08             	add    esp,0x8
c0012f4d:	5b                   	pop    ebx
c0012f4e:	c3                   	ret    
c0012f4f:	90                   	nop

c0012f50 <File::seek(unsigned long long)>:
c0012f50:	56                   	push   esi
c0012f51:	53                   	push   ebx
c0012f52:	b8 0b 00 00 00       	mov    eax,0xb
c0012f57:	51                   	push   ecx
c0012f58:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f60:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f67:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f6b:	80 fa 19             	cmp    dl,0x19
c0012f6e:	77 31                	ja     c0012fa1 <File::seek(unsigned long long)+0x51>
c0012f70:	8b 14 95 20 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ae0]
c0012f77:	85 d2                	test   edx,edx
c0012f79:	74 26                	je     c0012fa1 <File::seek(unsigned long long)+0x51>
c0012f7b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f81:	85 d2                	test   edx,edx
c0012f83:	74 1c                	je     c0012fa1 <File::seek(unsigned long long)+0x51>
c0012f85:	b8 05 00 00 00       	mov    eax,0x5
c0012f8a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012f8e:	74 11                	je     c0012fa1 <File::seek(unsigned long long)+0x51>
c0012f90:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f92:	53                   	push   ebx
c0012f93:	51                   	push   ecx
c0012f94:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012f9a:	52                   	push   edx
c0012f9b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012f9e:	83 c4 10             	add    esp,0x10
c0012fa1:	5a                   	pop    edx
c0012fa2:	5b                   	pop    ebx
c0012fa3:	5e                   	pop    esi
c0012fa4:	c3                   	ret    
c0012fa5:	90                   	nop

c0012fa6 <File::tell(unsigned long long*)>:
c0012fa6:	83 ec 0c             	sub    esp,0xc
c0012fa9:	b8 0b 00 00 00       	mov    eax,0xb
c0012fae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fb2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fb9:	80 fa 19             	cmp    dl,0x19
c0012fbc:	77 34                	ja     c0012ff2 <File::tell(unsigned long long*)+0x4c>
c0012fbe:	8b 14 95 20 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ae0]
c0012fc5:	85 d2                	test   edx,edx
c0012fc7:	74 29                	je     c0012ff2 <File::tell(unsigned long long*)+0x4c>
c0012fc9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fcf:	85 d2                	test   edx,edx
c0012fd1:	74 1f                	je     c0012ff2 <File::tell(unsigned long long*)+0x4c>
c0012fd3:	b8 05 00 00 00       	mov    eax,0x5
c0012fd8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012fdc:	74 14                	je     c0012ff2 <File::tell(unsigned long long*)+0x4c>
c0012fde:	50                   	push   eax
c0012fdf:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fe1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fe5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012feb:	52                   	push   edx
c0012fec:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012fef:	83 c4 10             	add    esp,0x10
c0012ff2:	83 c4 0c             	add    esp,0xc
c0012ff5:	c3                   	ret    

c0012ff6 <File::rewind()>:
c0012ff6:	83 ec 10             	sub    esp,0x10
c0012ff9:	6a 00                	push   0x0
c0012ffb:	6a 00                	push   0x0
c0012ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013001:	e8 4a ff ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c0013006:	83 c4 1c             	add    esp,0x1c
c0013009:	c3                   	ret    

c001300a <File::unlink()>:
c001300a:	83 ec 0c             	sub    esp,0xc
c001300d:	b8 0b 00 00 00       	mov    eax,0xb
c0013012:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013016:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001301d:	80 f9 19             	cmp    cl,0x19
c0013020:	77 2f                	ja     c0013051 <File::unlink()+0x47>
c0013022:	8b 0c 8d 20 d5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2ae0]
c0013029:	85 c9                	test   ecx,ecx
c001302b:	74 24                	je     c0013051 <File::unlink()+0x47>
c001302d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013033:	85 c9                	test   ecx,ecx
c0013035:	74 1a                	je     c0013051 <File::unlink()+0x47>
c0013037:	b8 06 00 00 00       	mov    eax,0x6
c001303c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013040:	75 0f                	jne    c0013051 <File::unlink()+0x47>
c0013042:	83 c2 0d             	add    edx,0xd
c0013045:	50                   	push   eax
c0013046:	50                   	push   eax
c0013047:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013049:	52                   	push   edx
c001304a:	51                   	push   ecx
c001304b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001304e:	83 c4 10             	add    esp,0x10
c0013051:	83 c4 0c             	add    esp,0xc
c0013054:	c3                   	ret    
c0013055:	90                   	nop

c0013056 <File::rename(char const*)>:
c0013056:	83 ec 0c             	sub    esp,0xc
c0013059:	b8 0b 00 00 00       	mov    eax,0xb
c001305e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013062:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013069:	80 f9 19             	cmp    cl,0x19
c001306c:	77 32                	ja     c00130a0 <File::rename(char const*)+0x4a>
c001306e:	8b 0c 8d 20 d5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2ae0]
c0013075:	85 c9                	test   ecx,ecx
c0013077:	74 27                	je     c00130a0 <File::rename(char const*)+0x4a>
c0013079:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001307f:	85 c9                	test   ecx,ecx
c0013081:	74 1d                	je     c00130a0 <File::rename(char const*)+0x4a>
c0013083:	b8 06 00 00 00       	mov    eax,0x6
c0013088:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001308c:	75 12                	jne    c00130a0 <File::rename(char const*)+0x4a>
c001308e:	83 c2 0d             	add    edx,0xd
c0013091:	50                   	push   eax
c0013092:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013094:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013098:	52                   	push   edx
c0013099:	51                   	push   ecx
c001309a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001309d:	83 c4 10             	add    esp,0x10
c00130a0:	83 c4 0c             	add    esp,0xc
c00130a3:	c3                   	ret    

c00130a4 <File::chfatattr(unsigned char, unsigned char)>:
c00130a4:	57                   	push   edi
c00130a5:	b8 0b 00 00 00       	mov    eax,0xb
c00130aa:	56                   	push   esi
c00130ab:	53                   	push   ebx
c00130ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130b0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00130b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130bb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130bf:	80 f9 19             	cmp    cl,0x19
c00130c2:	77 37                	ja     c00130fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130c4:	8b 0c 8d 20 d5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2ae0]
c00130cb:	85 c9                	test   ecx,ecx
c00130cd:	74 2c                	je     c00130fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130cf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130d5:	85 c9                	test   ecx,ecx
c00130d7:	74 22                	je     c00130fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130d9:	b8 06 00 00 00       	mov    eax,0x6
c00130de:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130e2:	75 17                	jne    c00130fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130e4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00130e6:	89 f0                	mov    eax,esi
c00130e8:	83 c2 0d             	add    edx,0xd
c00130eb:	0f b6 f0             	movzx  esi,al
c00130ee:	0f b6 db             	movzx  ebx,bl
c00130f1:	56                   	push   esi
c00130f2:	53                   	push   ebx
c00130f3:	52                   	push   edx
c00130f4:	51                   	push   ecx
c00130f5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00130f8:	83 c4 10             	add    esp,0x10
c00130fb:	5b                   	pop    ebx
c00130fc:	5e                   	pop    esi
c00130fd:	5f                   	pop    edi
c00130fe:	c3                   	ret    
c00130ff:	90                   	nop

c0013100 <File::exists()>:
c0013100:	83 ec 0c             	sub    esp,0xc
c0013103:	31 c0                	xor    eax,eax
c0013105:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013109:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013110:	80 f9 19             	cmp    cl,0x19
c0013113:	77 24                	ja     c0013139 <File::exists()+0x39>
c0013115:	8b 0c 8d 20 d5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2ae0]
c001311c:	85 c9                	test   ecx,ecx
c001311e:	74 19                	je     c0013139 <File::exists()+0x39>
c0013120:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013126:	85 c9                	test   ecx,ecx
c0013128:	74 0f                	je     c0013139 <File::exists()+0x39>
c001312a:	83 c2 0d             	add    edx,0xd
c001312d:	50                   	push   eax
c001312e:	50                   	push   eax
c001312f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013131:	52                   	push   edx
c0013132:	51                   	push   ecx
c0013133:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013136:	83 c4 10             	add    esp,0x10
c0013139:	83 c4 0c             	add    esp,0xc
c001313c:	c3                   	ret    
c001313d:	90                   	nop

c001313e <File::stat(unsigned long long*, bool*)>:
c001313e:	56                   	push   esi
c001313f:	53                   	push   ebx
c0013140:	50                   	push   eax
c0013141:	b8 0b 00 00 00       	mov    eax,0xb
c0013146:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001314a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001314e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013155:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013159:	80 f9 19             	cmp    cl,0x19
c001315c:	77 3d                	ja     c001319b <File::stat(unsigned long long*, bool*)+0x5d>
c001315e:	8b 0c 8d 20 d5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2ae0]
c0013165:	85 c9                	test   ecx,ecx
c0013167:	74 32                	je     c001319b <File::stat(unsigned long long*, bool*)+0x5d>
c0013169:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001316f:	85 c9                	test   ecx,ecx
c0013171:	74 28                	je     c001319b <File::stat(unsigned long long*, bool*)+0x5d>
c0013173:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013175:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013179:	74 13                	je     c001318e <File::stat(unsigned long long*, bool*)+0x50>
c001317b:	83 ec 04             	sub    esp,0x4
c001317e:	56                   	push   esi
c001317f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013185:	51                   	push   ecx
c0013186:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013189:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001318c:	eb 0a                	jmp    c0013198 <File::stat(unsigned long long*, bool*)+0x5a>
c001318e:	53                   	push   ebx
c001318f:	83 c2 0d             	add    edx,0xd
c0013192:	56                   	push   esi
c0013193:	52                   	push   edx
c0013194:	51                   	push   ecx
c0013195:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013198:	83 c4 10             	add    esp,0x10
c001319b:	5a                   	pop    edx
c001319c:	5b                   	pop    ebx
c001319d:	5e                   	pop    esi
c001319e:	c3                   	ret    

c001319f <Fs::setcwd(Process*, char*)>:
c001319f:	55                   	push   ebp
c00131a0:	57                   	push   edi
c00131a1:	56                   	push   esi
c00131a2:	53                   	push   ebx
c00131a3:	81 ec 20 02 00 00    	sub    esp,0x220
c00131a9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00131b0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00131b6:	57                   	push   edi
c00131b7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00131be:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00131c2:	56                   	push   esi
c00131c3:	e8 bc fa ff ff       	call   c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>
c00131c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00131cb:	e8 11 d5 fe ff       	call   c00006e1 <strlen>
c00131d0:	83 c4 10             	add    esp,0x10
c00131d3:	83 f8 02             	cmp    eax,0x2
c00131d6:	77 17                	ja     c00131ef <Fs::setcwd(Process*, char*)+0x50>
c00131d8:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00131dd:	83 e8 41             	sub    eax,0x41
c00131e0:	83 f8 19             	cmp    eax,0x19
c00131e3:	76 24                	jbe    c0013209 <Fs::setcwd(Process*, char*)+0x6a>
c00131e5:	b8 03 00 00 00       	mov    eax,0x3
c00131ea:	e9 e0 00 00 00       	jmp    c00132cf <Fs::setcwd(Process*, char*)+0x130>
c00131ef:	83 ec 0c             	sub    esp,0xc
c00131f2:	56                   	push   esi
c00131f3:	e8 e9 d4 fe ff       	call   c00006e1 <strlen>
c00131f8:	83 c4 10             	add    esp,0x10
c00131fb:	83 f8 03             	cmp    eax,0x3
c00131fe:	75 34                	jne    c0013234 <Fs::setcwd(Process*, char*)+0x95>
c0013200:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013205:	75 2d                	jne    c0013234 <Fs::setcwd(Process*, char*)+0x95>
c0013207:	eb cf                	jmp    c00131d8 <Fs::setcwd(Process*, char*)+0x39>
c0013209:	8b 14 85 20 d5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2ae0]
c0013210:	b8 05 00 00 00       	mov    eax,0x5
c0013215:	85 d2                	test   edx,edx
c0013217:	0f 84 b2 00 00 00    	je     c00132cf <Fs::setcwd(Process*, char*)+0x130>
c001321d:	b8 06 00 00 00       	mov    eax,0x6
c0013222:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013229:	0f 85 92 00 00 00    	jne    c00132c1 <Fs::setcwd(Process*, char*)+0x122>
c001322f:	e9 9b 00 00 00       	jmp    c00132cf <Fs::setcwd(Process*, char*)+0x130>
c0013234:	83 ec 0c             	sub    esp,0xc
c0013237:	68 14 01 00 00       	push   0x114
c001323c:	e8 e3 c3 ff ff       	call   c000f624 <malloc>
c0013241:	83 c4 0c             	add    esp,0xc
c0013244:	89 c3                	mov    ebx,eax
c0013246:	55                   	push   ebp
c0013247:	56                   	push   esi
c0013248:	50                   	push   eax
c0013249:	e8 e0 fb ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001324e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013253:	83 c4 0c             	add    esp,0xc
c0013256:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001325a:	50                   	push   eax
c001325b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001325f:	50                   	push   eax
c0013260:	53                   	push   ebx
c0013261:	e8 d8 fe ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c0013266:	83 c4 10             	add    esp,0x10
c0013269:	83 f8 02             	cmp    eax,0x2
c001326c:	74 04                	je     c0013272 <Fs::setcwd(Process*, char*)+0xd3>
c001326e:	85 c0                	test   eax,eax
c0013270:	74 1c                	je     c001328e <Fs::setcwd(Process*, char*)+0xef>
c0013272:	b8 01 00 00 00       	mov    eax,0x1
c0013277:	85 db                	test   ebx,ebx
c0013279:	74 54                	je     c00132cf <Fs::setcwd(Process*, char*)+0x130>
c001327b:	83 ec 0c             	sub    esp,0xc
c001327e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013280:	53                   	push   ebx
c0013281:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013284:	83 c4 10             	add    esp,0x10
c0013287:	b8 01 00 00 00       	mov    eax,0x1
c001328c:	eb 41                	jmp    c00132cf <Fs::setcwd(Process*, char*)+0x130>
c001328e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013293:	75 1c                	jne    c00132b1 <Fs::setcwd(Process*, char*)+0x112>
c0013295:	b8 02 00 00 00       	mov    eax,0x2
c001329a:	85 db                	test   ebx,ebx
c001329c:	74 31                	je     c00132cf <Fs::setcwd(Process*, char*)+0x130>
c001329e:	83 ec 0c             	sub    esp,0xc
c00132a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132a3:	53                   	push   ebx
c00132a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132a7:	83 c4 10             	add    esp,0x10
c00132aa:	b8 02 00 00 00       	mov    eax,0x2
c00132af:	eb 1e                	jmp    c00132cf <Fs::setcwd(Process*, char*)+0x130>
c00132b1:	85 db                	test   ebx,ebx
c00132b3:	74 0c                	je     c00132c1 <Fs::setcwd(Process*, char*)+0x122>
c00132b5:	83 ec 0c             	sub    esp,0xc
c00132b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132ba:	53                   	push   ebx
c00132bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132be:	83 c4 10             	add    esp,0x10
c00132c1:	50                   	push   eax
c00132c2:	50                   	push   eax
c00132c3:	56                   	push   esi
c00132c4:	57                   	push   edi
c00132c5:	e8 99 d4 fe ff       	call   c0000763 <strcpy>
c00132ca:	83 c4 10             	add    esp,0x10
c00132cd:	31 c0                	xor    eax,eax
c00132cf:	81 c4 1c 02 00 00    	add    esp,0x21c
c00132d5:	5b                   	pop    ebx
c00132d6:	5e                   	pop    esi
c00132d7:	5f                   	pop    edi
c00132d8:	5d                   	pop    ebp
c00132d9:	c3                   	ret    

c00132da <Directory::Directory(char const*, Process*)>:
c00132da:	83 ec 0c             	sub    esp,0xc
c00132dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e1:	83 ec 08             	sub    esp,0x8
c00132e4:	6a 00                	push   0x0
c00132e6:	50                   	push   eax
c00132e7:	e8 b6 e1 ff ff       	call   c00114a2 <UnixFile::UnixFile(int)>
c00132ec:	83 c4 10             	add    esp,0x10
c00132ef:	ba 1c 98 02 c0       	mov    edx,0xc002981c
c00132f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132f8:	89 10                	mov    DWORD PTR [eax],edx
c00132fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132fe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013308:	83 c0 0d             	add    eax,0xd
c001330b:	83 ec 04             	sub    esp,0x4
c001330e:	52                   	push   edx
c001330f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013313:	50                   	push   eax
c0013314:	e8 6b f9 ff ff       	call   c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013319:	83 c4 10             	add    esp,0x10
c001331c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013320:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013323:	8d 50 bf             	lea    edx,[eax-0x41]
c0013326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001332a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013334:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013338:	90                   	nop
c0013339:	83 c4 0c             	add    esp,0xc
c001333c:	c3                   	ret    
c001333d:	90                   	nop

c001333e <Directory::open()>:
c001333e:	53                   	push   ebx
c001333f:	b8 0b 00 00 00       	mov    eax,0xb
c0013344:	83 ec 08             	sub    esp,0x8
c0013347:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001334b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013352:	80 fa 19             	cmp    dl,0x19
c0013355:	77 3d                	ja     c0013394 <Directory::open()+0x56>
c0013357:	8b 14 95 20 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ae0]
c001335e:	85 d2                	test   edx,edx
c0013360:	74 32                	je     c0013394 <Directory::open()+0x56>
c0013362:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013368:	85 d2                	test   edx,edx
c001336a:	74 28                	je     c0013394 <Directory::open()+0x56>
c001336c:	b8 06 00 00 00       	mov    eax,0x6
c0013371:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013375:	75 1d                	jne    c0013394 <Directory::open()+0x56>
c0013377:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001337d:	50                   	push   eax
c001337e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013380:	51                   	push   ecx
c0013381:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013384:	51                   	push   ecx
c0013385:	52                   	push   edx
c0013386:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013389:	83 c4 10             	add    esp,0x10
c001338c:	85 c0                	test   eax,eax
c001338e:	75 04                	jne    c0013394 <Directory::open()+0x56>
c0013390:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013394:	83 c4 08             	add    esp,0x8
c0013397:	5b                   	pop    ebx
c0013398:	c3                   	ret    
c0013399:	90                   	nop

c001339a <Directory::close()>:
c001339a:	53                   	push   ebx
c001339b:	b8 0b 00 00 00       	mov    eax,0xb
c00133a0:	83 ec 08             	sub    esp,0x8
c00133a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133a7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133ae:	80 fa 19             	cmp    dl,0x19
c00133b1:	77 41                	ja     c00133f4 <Directory::close()+0x5a>
c00133b3:	8b 1c 95 20 d5 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2ae0]
c00133ba:	85 db                	test   ebx,ebx
c00133bc:	74 36                	je     c00133f4 <Directory::close()+0x5a>
c00133be:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133c5:	74 2d                	je     c00133f4 <Directory::close()+0x5a>
c00133c7:	b8 05 00 00 00       	mov    eax,0x5
c00133cc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133d0:	74 22                	je     c00133f4 <Directory::close()+0x5a>
c00133d2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133d6:	8b 04 95 20 d5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2ae0]
c00133dd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00133e3:	53                   	push   ebx
c00133e4:	53                   	push   ebx
c00133e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00133e7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00133ed:	50                   	push   eax
c00133ee:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00133f1:	83 c4 10             	add    esp,0x10
c00133f4:	83 c4 08             	add    esp,0x8
c00133f7:	5b                   	pop    ebx
c00133f8:	c3                   	ret    
c00133f9:	90                   	nop

c00133fa <Directory::unlink()>:
c00133fa:	83 ec 0c             	sub    esp,0xc
c00133fd:	b8 0b 00 00 00       	mov    eax,0xb
c0013402:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013406:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001340d:	80 f9 19             	cmp    cl,0x19
c0013410:	77 2f                	ja     c0013441 <Directory::unlink()+0x47>
c0013412:	8b 0c 8d 20 d5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2ae0]
c0013419:	85 c9                	test   ecx,ecx
c001341b:	74 24                	je     c0013441 <Directory::unlink()+0x47>
c001341d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013423:	85 c9                	test   ecx,ecx
c0013425:	74 1a                	je     c0013441 <Directory::unlink()+0x47>
c0013427:	b8 06 00 00 00       	mov    eax,0x6
c001342c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013430:	75 0f                	jne    c0013441 <Directory::unlink()+0x47>
c0013432:	83 c2 0d             	add    edx,0xd
c0013435:	50                   	push   eax
c0013436:	50                   	push   eax
c0013437:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013439:	52                   	push   edx
c001343a:	51                   	push   ecx
c001343b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001343e:	83 c4 10             	add    esp,0x10
c0013441:	83 c4 0c             	add    esp,0xc
c0013444:	c3                   	ret    
c0013445:	90                   	nop

c0013446 <Directory::rename(char const*)>:
c0013446:	83 ec 0c             	sub    esp,0xc
c0013449:	b8 0b 00 00 00       	mov    eax,0xb
c001344e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013452:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013459:	80 f9 19             	cmp    cl,0x19
c001345c:	77 32                	ja     c0013490 <Directory::rename(char const*)+0x4a>
c001345e:	8b 0c 8d 20 d5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2ae0]
c0013465:	85 c9                	test   ecx,ecx
c0013467:	74 27                	je     c0013490 <Directory::rename(char const*)+0x4a>
c0013469:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001346f:	85 c9                	test   ecx,ecx
c0013471:	74 1d                	je     c0013490 <Directory::rename(char const*)+0x4a>
c0013473:	b8 06 00 00 00       	mov    eax,0x6
c0013478:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001347c:	75 12                	jne    c0013490 <Directory::rename(char const*)+0x4a>
c001347e:	83 c2 0d             	add    edx,0xd
c0013481:	50                   	push   eax
c0013482:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013488:	52                   	push   edx
c0013489:	51                   	push   ecx
c001348a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001348d:	83 c4 10             	add    esp,0x10
c0013490:	83 c4 0c             	add    esp,0xc
c0013493:	c3                   	ret    

c0013494 <Directory::exists()>:
c0013494:	83 ec 0c             	sub    esp,0xc
c0013497:	31 c0                	xor    eax,eax
c0013499:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001349d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134a4:	80 f9 19             	cmp    cl,0x19
c00134a7:	77 24                	ja     c00134cd <Directory::exists()+0x39>
c00134a9:	8b 0c 8d 20 d5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2ae0]
c00134b0:	85 c9                	test   ecx,ecx
c00134b2:	74 19                	je     c00134cd <Directory::exists()+0x39>
c00134b4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134ba:	85 c9                	test   ecx,ecx
c00134bc:	74 0f                	je     c00134cd <Directory::exists()+0x39>
c00134be:	83 c2 0d             	add    edx,0xd
c00134c1:	50                   	push   eax
c00134c2:	50                   	push   eax
c00134c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134c5:	52                   	push   edx
c00134c6:	51                   	push   ecx
c00134c7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00134ca:	83 c4 10             	add    esp,0x10
c00134cd:	83 c4 0c             	add    esp,0xc
c00134d0:	c3                   	ret    
c00134d1:	90                   	nop

c00134d2 <Directory::read(dirent*)>:
c00134d2:	83 ec 1c             	sub    esp,0x1c
c00134d5:	b8 0b 00 00 00       	mov    eax,0xb
c00134da:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00134de:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134e5:	80 fa 19             	cmp    dl,0x19
c00134e8:	77 30                	ja     c001351a <Directory::read(dirent*)+0x48>
c00134ea:	8b 14 95 20 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2ae0]
c00134f1:	85 d2                	test   edx,edx
c00134f3:	74 25                	je     c001351a <Directory::read(dirent*)+0x48>
c00134f5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00134fc:	74 1c                	je     c001351a <Directory::read(dirent*)+0x48>
c00134fe:	83 ec 0c             	sub    esp,0xc
c0013501:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013503:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013507:	52                   	push   edx
c0013508:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001350c:	6a 00                	push   0x0
c001350e:	68 10 01 00 00       	push   0x110
c0013513:	51                   	push   ecx
c0013514:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013517:	83 c4 20             	add    esp,0x20
c001351a:	83 c4 1c             	add    esp,0x1c
c001351d:	c3                   	ret    

c001351e <Directory::create()>:
c001351e:	83 ec 0c             	sub    esp,0xc
c0013521:	b8 0b 00 00 00       	mov    eax,0xb
c0013526:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001352a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013531:	80 f9 19             	cmp    cl,0x19
c0013534:	77 2f                	ja     c0013565 <Directory::create()+0x47>
c0013536:	8b 0c 8d 20 d5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2ae0]
c001353d:	85 c9                	test   ecx,ecx
c001353f:	74 24                	je     c0013565 <Directory::create()+0x47>
c0013541:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013547:	85 c9                	test   ecx,ecx
c0013549:	74 1a                	je     c0013565 <Directory::create()+0x47>
c001354b:	b8 06 00 00 00       	mov    eax,0x6
c0013550:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013554:	75 0f                	jne    c0013565 <Directory::create()+0x47>
c0013556:	83 c2 0d             	add    edx,0xd
c0013559:	50                   	push   eax
c001355a:	50                   	push   eax
c001355b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001355d:	52                   	push   edx
c001355e:	51                   	push   ecx
c001355f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013562:	83 c4 10             	add    esp,0x10
c0013565:	83 c4 0c             	add    esp,0xc
c0013568:	c3                   	ret    
c0013569:	90                   	nop

c001356a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001356a:	b8 0a 00 00 00       	mov    eax,0xa
c001356f:	c3                   	ret    

c0013570 <Bus::Bus(char const*)>:
c0013570:	83 ec 0c             	sub    esp,0xc
c0013573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013577:	83 ec 08             	sub    esp,0x8
c001357a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001357e:	50                   	push   eax
c001357f:	e8 68 09 00 00       	call   c0013eec <Device::Device(char const*)>
c0013584:	83 c4 10             	add    esp,0x10
c0013587:	ba 38 98 02 c0       	mov    edx,0xc0029838
c001358c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013590:	89 10                	mov    DWORD PTR [eax],edx
c0013592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013596:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00135a0:	90                   	nop
c00135a1:	83 c4 0c             	add    esp,0xc
c00135a4:	c3                   	ret    
c00135a5:	90                   	nop

c00135a6 <Bus::~Bus()>:
c00135a6:	83 ec 0c             	sub    esp,0xc
c00135a9:	ba 38 98 02 c0       	mov    edx,0xc0029838
c00135ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b2:	89 10                	mov    DWORD PTR [eax],edx
c00135b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b8:	83 ec 0c             	sub    esp,0xc
c00135bb:	50                   	push   eax
c00135bc:	e8 0d 06 00 00       	call   c0013bce <Device::~Device()>
c00135c1:	83 c4 10             	add    esp,0x10
c00135c4:	90                   	nop
c00135c5:	83 c4 0c             	add    esp,0xc
c00135c8:	c3                   	ret    
c00135c9:	90                   	nop

c00135ca <Bus::~Bus()>:
c00135ca:	83 ec 0c             	sub    esp,0xc
c00135cd:	83 ec 0c             	sub    esp,0xc
c00135d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135d4:	e8 cd ff ff ff       	call   c00135a6 <Bus::~Bus()>
c00135d9:	83 c4 10             	add    esp,0x10
c00135dc:	83 ec 08             	sub    esp,0x8
c00135df:	68 58 01 00 00       	push   0x158
c00135e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135e8:	e8 08 f2 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c00135ed:	83 c4 10             	add    esp,0x10
c00135f0:	83 c4 0c             	add    esp,0xc
c00135f3:	c3                   	ret    

c00135f4 <Buzzer::Buzzer(char const*)>:
c00135f4:	83 ec 0c             	sub    esp,0xc
c00135f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135fb:	83 ec 08             	sub    esp,0x8
c00135fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013602:	50                   	push   eax
c0013603:	e8 e4 08 00 00       	call   c0013eec <Device::Device(char const*)>
c0013608:	83 c4 10             	add    esp,0x10
c001360b:	ba 64 98 02 c0       	mov    edx,0xc0029864
c0013610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013614:	89 10                	mov    DWORD PTR [eax],edx
c0013616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001361a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013628:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013632:	90                   	nop
c0013633:	83 c4 0c             	add    esp,0xc
c0013636:	c3                   	ret    
c0013637:	90                   	nop

c0013638 <Buzzer::~Buzzer()>:
c0013638:	83 ec 0c             	sub    esp,0xc
c001363b:	ba 64 98 02 c0       	mov    edx,0xc0029864
c0013640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013644:	89 10                	mov    DWORD PTR [eax],edx
c0013646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001364a:	83 ec 0c             	sub    esp,0xc
c001364d:	50                   	push   eax
c001364e:	e8 7b 05 00 00       	call   c0013bce <Device::~Device()>
c0013653:	83 c4 10             	add    esp,0x10
c0013656:	90                   	nop
c0013657:	83 c4 0c             	add    esp,0xc
c001365a:	c3                   	ret    
c001365b:	90                   	nop

c001365c <Buzzer::~Buzzer()>:
c001365c:	83 ec 0c             	sub    esp,0xc
c001365f:	83 ec 0c             	sub    esp,0xc
c0013662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013666:	e8 cd ff ff ff       	call   c0013638 <Buzzer::~Buzzer()>
c001366b:	83 c4 10             	add    esp,0x10
c001366e:	83 ec 08             	sub    esp,0x8
c0013671:	68 5c 01 00 00       	push   0x15c
c0013676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001367a:	e8 76 f1 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c001367f:	83 c4 10             	add    esp,0x10
c0013682:	83 c4 0c             	add    esp,0xc
c0013685:	c3                   	ret    

c0013686 <Buzzer::stop()>:
c0013686:	83 ec 14             	sub    esp,0x14
c0013689:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001368d:	8b 10                	mov    edx,DWORD PTR [eax]
c001368f:	6a 00                	push   0x0
c0013691:	50                   	push   eax
c0013692:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013695:	83 c4 1c             	add    esp,0x1c
c0013698:	c3                   	ret    

c0013699 <beepThread(void*)>:
c0013699:	53                   	push   ebx
c001369a:	83 ec 08             	sub    esp,0x8
c001369d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136a1:	e8 c0 9a 00 00       	call   c001d166 <unlockScheduler()>
c00136a6:	b8 40 42 0f 00       	mov    eax,0xf4240
c00136ab:	52                   	push   edx
c00136ac:	52                   	push   edx
c00136ad:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00136b3:	52                   	push   edx
c00136b4:	50                   	push   eax
c00136b5:	e8 fa 9f 00 00       	call   c001d6b4 <nanoSleep(unsigned long long)>
c00136ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136bd:	e8 c4 ff ff ff       	call   c0013686 <Buzzer::stop()>
c00136c2:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00136ca:	83 c4 18             	add    esp,0x18
c00136cd:	5b                   	pop    ebx
c00136ce:	e9 27 9f 00 00       	jmp    c001d5fa <blockTask(TaskState)>
c00136d3:	90                   	nop

c00136d4 <Buzzer::beep(int, int, bool)>:
c00136d4:	57                   	push   edi
c00136d5:	56                   	push   esi
c00136d6:	53                   	push   ebx
c00136d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136db:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00136df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136e3:	52                   	push   edx
c00136e4:	52                   	push   edx
c00136e5:	8b 06                	mov    eax,DWORD PTR [esi]
c00136e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136eb:	56                   	push   esi
c00136ec:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136ef:	83 c4 10             	add    esp,0x10
c00136f2:	89 f8                	mov    eax,edi
c00136f4:	84 c0                	test   al,al
c00136f6:	74 1f                	je     c0013717 <Buzzer::beep(int, int, bool)+0x43>
c00136f8:	50                   	push   eax
c00136f9:	50                   	push   eax
c00136fa:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013700:	99                   	cdq    
c0013701:	52                   	push   edx
c0013702:	50                   	push   eax
c0013703:	e8 ac 9f 00 00       	call   c001d6b4 <nanoSleep(unsigned long long)>
c0013708:	83 c4 10             	add    esp,0x10
c001370b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001370f:	5b                   	pop    ebx
c0013710:	5e                   	pop    esi
c0013711:	5f                   	pop    edi
c0013712:	e9 6f ff ff ff       	jmp    c0013686 <Buzzer::stop()>
c0013717:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001371d:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0013722:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001372a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001372e:	c7 44 24 14 99 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013699
c0013736:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001373a:	5b                   	pop    ebx
c001373b:	5e                   	pop    esi
c001373c:	5f                   	pop    edi
c001373d:	e9 54 9b 00 00       	jmp    c001d296 <Process::createThread(void (*)(void*), void*, int)>

c0013742 <User::loadClockSettings(int)>:
c0013742:	53                   	push   ebx
c0013743:	83 ec 14             	sub    esp,0x14
c0013746:	68 14 01 00 00       	push   0x114
c001374b:	e8 d4 be ff ff       	call   c000f624 <malloc>
c0013750:	83 c4 0c             	add    esp,0xc
c0013753:	89 c3                	mov    ebx,eax
c0013755:	ff 35 54 e4 02 c0    	push   DWORD PTR ds:0xc002e454
c001375b:	68 8c 98 02 c0       	push   0xc002988c
c0013760:	50                   	push   eax
c0013761:	e8 c8 f6 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c0013766:	58                   	pop    eax
c0013767:	5a                   	pop    edx
c0013768:	6a 01                	push   0x1
c001376a:	53                   	push   ebx
c001376b:	e8 22 f7 ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c0013770:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013773:	e8 78 f7 ff ff       	call   c0012ef0 <File::close()>
c0013778:	83 c4 10             	add    esp,0x10
c001377b:	85 db                	test   ebx,ebx
c001377d:	74 0f                	je     c001378e <User::loadClockSettings(int)+0x4c>
c001377f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013781:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013785:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013788:	83 c4 08             	add    esp,0x8
c001378b:	5b                   	pop    ebx
c001378c:	ff e0                	jmp    eax
c001378e:	83 c4 08             	add    esp,0x8
c0013791:	5b                   	pop    ebx
c0013792:	c3                   	ret    
c0013793:	90                   	nop

c0013794 <Clock::Clock(char const*)>:
c0013794:	83 ec 0c             	sub    esp,0xc
c0013797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001379b:	83 ec 08             	sub    esp,0x8
c001379e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137a2:	50                   	push   eax
c00137a3:	e8 44 07 00 00       	call   c0013eec <Device::Device(char const*)>
c00137a8:	83 c4 10             	add    esp,0x10
c00137ab:	ba b4 98 02 c0       	mov    edx,0xc00298b4
c00137b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137b4:	89 10                	mov    DWORD PTR [eax],edx
c00137b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ba:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00137c4:	90                   	nop
c00137c5:	83 c4 0c             	add    esp,0xc
c00137c8:	c3                   	ret    
c00137c9:	90                   	nop

c00137ca <Clock::~Clock()>:
c00137ca:	83 ec 0c             	sub    esp,0xc
c00137cd:	ba b4 98 02 c0       	mov    edx,0xc00298b4
c00137d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d6:	89 10                	mov    DWORD PTR [eax],edx
c00137d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137dc:	83 ec 0c             	sub    esp,0xc
c00137df:	50                   	push   eax
c00137e0:	e8 e9 03 00 00       	call   c0013bce <Device::~Device()>
c00137e5:	83 c4 10             	add    esp,0x10
c00137e8:	90                   	nop
c00137e9:	83 c4 0c             	add    esp,0xc
c00137ec:	c3                   	ret    
c00137ed:	90                   	nop

c00137ee <Clock::~Clock()>:
c00137ee:	83 ec 0c             	sub    esp,0xc
c00137f1:	83 ec 0c             	sub    esp,0xc
c00137f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137f8:	e8 cd ff ff ff       	call   c00137ca <Clock::~Clock()>
c00137fd:	83 c4 10             	add    esp,0x10
c0013800:	83 ec 08             	sub    esp,0x8
c0013803:	68 58 01 00 00       	push   0x158
c0013808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001380c:	e8 e4 ef ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0013811:	83 c4 10             	add    esp,0x10
c0013814:	83 c4 0c             	add    esp,0xc
c0013817:	c3                   	ret    

c0013818 <Clock::timeInSecondsLocal()>:
c0013818:	53                   	push   ebx
c0013819:	83 ec 14             	sub    esp,0x14
c001381c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013820:	8b 10                	mov    edx,DWORD PTR [eax]
c0013822:	50                   	push   eax
c0013823:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013826:	0f b6 0d 90 d0 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d090
c001382d:	03 0d 94 d0 02 c0    	add    ecx,DWORD PTR ds:0xc002d094
c0013833:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013839:	89 cb                	mov    ebx,ecx
c001383b:	c1 fb 1f             	sar    ebx,0x1f
c001383e:	01 c8                	add    eax,ecx
c0013840:	11 da                	adc    edx,ebx
c0013842:	83 c4 10             	add    esp,0x10
c0013845:	31 c9                	xor    ecx,ecx
c0013847:	80 3d 91 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d091,0x0
c001384e:	74 05                	je     c0013855 <Clock::timeInSecondsLocal()+0x3d>
c0013850:	b9 08 07 00 00       	mov    ecx,0x708
c0013855:	31 db                	xor    ebx,ebx
c0013857:	01 c8                	add    eax,ecx
c0013859:	11 da                	adc    edx,ebx
c001385b:	83 c4 08             	add    esp,0x8
c001385e:	5b                   	pop    ebx
c001385f:	c3                   	ret    

c0013860 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013860:	57                   	push   edi
c0013861:	56                   	push   esi
c0013862:	53                   	push   ebx
c0013863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013867:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001386b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001386d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013871:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013874:	0f b6 05 90 d0 02 c0 	movzx  eax,BYTE PTR ds:0xc002d090
c001387b:	03 05 94 d0 02 c0    	add    eax,DWORD PTR ds:0xc002d094
c0013881:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013887:	99                   	cdq    
c0013888:	29 c6                	sub    esi,eax
c001388a:	19 d7                	sbb    edi,edx
c001388c:	89 f0                	mov    eax,esi
c001388e:	89 fa                	mov    edx,edi
c0013890:	31 f6                	xor    esi,esi
c0013892:	80 3d 91 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d091,0x0
c0013899:	74 05                	je     c00138a0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001389b:	be 08 07 00 00       	mov    esi,0x708
c00138a0:	31 ff                	xor    edi,edi
c00138a2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00138a6:	29 f0                	sub    eax,esi
c00138a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138ac:	19 fa                	sbb    edx,edi
c00138ae:	89 d8                	mov    eax,ebx
c00138b0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138b4:	5b                   	pop    ebx
c00138b5:	5e                   	pop    esi
c00138b6:	5f                   	pop    edi
c00138b7:	ff e0                	jmp    eax

c00138b9 <datetimeToSeconds(datetime_t)>:
c00138b9:	55                   	push   ebp
c00138ba:	57                   	push   edi
c00138bb:	56                   	push   esi
c00138bc:	53                   	push   ebx
c00138bd:	83 ec 14             	sub    esp,0x14
c00138c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138c4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00138c8:	89 d3                	mov    ebx,edx
c00138ca:	0f b6 c6             	movzx  eax,dh
c00138cd:	c1 eb 10             	shr    ebx,0x10
c00138d0:	48                   	dec    eax
c00138d1:	66 81 eb 6c 07       	sub    bx,0x76c
c00138d6:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00138da:	0f b6 f5             	movzx  esi,ch
c00138dd:	89 cf                	mov    edi,ecx
c00138df:	6b f6 3c             	imul   esi,esi,0x3c
c00138e2:	c1 ef 10             	shr    edi,0x10
c00138e5:	0f b6 c9             	movzx  ecx,cl
c00138e8:	89 f8                	mov    eax,edi
c00138ea:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138f0:	0f b6 f8             	movzx  edi,al
c00138f3:	0f b6 d2             	movzx  edx,dl
c00138f6:	01 fe                	add    esi,edi
c00138f8:	01 f1                	add    ecx,esi
c00138fa:	0f b7 f3             	movzx  esi,bx
c00138fd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013901:	c1 f9 1f             	sar    ecx,0x1f
c0013904:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013909:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001390d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013912:	8b 0c 8d 00 99 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6700]
c0013919:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001391d:	76 29                	jbe    c0013948 <datetimeToSeconds(datetime_t)+0x8f>
c001391f:	f6 c3 03             	test   bl,0x3
c0013922:	75 24                	jne    c0013948 <datetimeToSeconds(datetime_t)+0x8f>
c0013924:	31 d2                	xor    edx,edx
c0013926:	bf 64 00 00 00       	mov    edi,0x64
c001392b:	89 d8                	mov    eax,ebx
c001392d:	66 f7 f7             	div    di
c0013930:	66 85 d2             	test   dx,dx
c0013933:	75 12                	jne    c0013947 <datetimeToSeconds(datetime_t)+0x8e>
c0013935:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001393b:	bf 90 01 00 00       	mov    edi,0x190
c0013940:	99                   	cdq    
c0013941:	f7 ff                	idiv   edi
c0013943:	85 d2                	test   edx,edx
c0013945:	75 01                	jne    c0013948 <datetimeToSeconds(datetime_t)+0x8f>
c0013947:	41                   	inc    ecx
c0013948:	66 83 fb 46          	cmp    bx,0x46
c001394c:	76 45                	jbe    c0013993 <datetimeToSeconds(datetime_t)+0xda>
c001394e:	bb 46 00 00 00       	mov    ebx,0x46
c0013953:	bf 64 00 00 00       	mov    edi,0x64
c0013958:	bd 90 01 00 00       	mov    ebp,0x190
c001395d:	b8 6d 01 00 00       	mov    eax,0x16d
c0013962:	f6 c3 03             	test   bl,0x3
c0013965:	75 23                	jne    c001398a <datetimeToSeconds(datetime_t)+0xd1>
c0013967:	89 d8                	mov    eax,ebx
c0013969:	99                   	cdq    
c001396a:	f7 ff                	idiv   edi
c001396c:	b8 6e 01 00 00       	mov    eax,0x16e
c0013971:	85 d2                	test   edx,edx
c0013973:	75 15                	jne    c001398a <datetimeToSeconds(datetime_t)+0xd1>
c0013975:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001397b:	99                   	cdq    
c001397c:	f7 fd                	idiv   ebp
c001397e:	83 fa 01             	cmp    edx,0x1
c0013981:	19 c0                	sbb    eax,eax
c0013983:	f7 d0                	not    eax
c0013985:	05 6e 01 00 00       	add    eax,0x16e
c001398a:	01 c1                	add    ecx,eax
c001398c:	43                   	inc    ebx
c001398d:	39 f3                	cmp    ebx,esi
c001398f:	7c cc                	jl     c001395d <datetimeToSeconds(datetime_t)+0xa4>
c0013991:	eb 35                	jmp    c00139c8 <datetimeToSeconds(datetime_t)+0x10f>
c0013993:	74 33                	je     c00139c8 <datetimeToSeconds(datetime_t)+0x10f>
c0013995:	b8 45 00 00 00       	mov    eax,0x45
c001399a:	89 c2                	mov    edx,eax
c001399c:	83 e2 03             	and    edx,0x3
c001399f:	39 f0                	cmp    eax,esi
c00139a1:	7e 0f                	jle    c00139b2 <datetimeToSeconds(datetime_t)+0xf9>
c00139a3:	83 fa 01             	cmp    edx,0x1
c00139a6:	19 d2                	sbb    edx,edx
c00139a8:	48                   	dec    eax
c00139a9:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00139b0:	eb e8                	jmp    c001399a <datetimeToSeconds(datetime_t)+0xe1>
c00139b2:	b8 6d 01 00 00       	mov    eax,0x16d
c00139b7:	85 d2                	test   edx,edx
c00139b9:	75 0b                	jne    c00139c6 <datetimeToSeconds(datetime_t)+0x10d>
c00139bb:	66 83 fb 01          	cmp    bx,0x1
c00139bf:	19 c0                	sbb    eax,eax
c00139c1:	05 6e 01 00 00       	add    eax,0x16e
c00139c6:	29 c1                	sub    ecx,eax
c00139c8:	b8 80 51 01 00       	mov    eax,0x15180
c00139cd:	f7 e9                	imul   ecx
c00139cf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00139d3:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00139d7:	83 c4 14             	add    esp,0x14
c00139da:	5b                   	pop    ebx
c00139db:	5e                   	pop    esi
c00139dc:	5f                   	pop    edi
c00139dd:	5d                   	pop    ebp
c00139de:	c3                   	ret    
c00139df:	90                   	nop

c00139e0 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00139e0:	57                   	push   edi
c00139e1:	56                   	push   esi
c00139e2:	53                   	push   ebx
c00139e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00139e9:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00139ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139f4:	e8 c0 fe ff ff       	call   c00138b9 <datetimeToSeconds(datetime_t)>
c00139f9:	59                   	pop    ecx
c00139fa:	0f b6 0d 90 d0 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d090
c0013a01:	5b                   	pop    ebx
c0013a02:	03 0d 94 d0 02 c0    	add    ecx,DWORD PTR ds:0xc002d094
c0013a08:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a0e:	89 cb                	mov    ebx,ecx
c0013a10:	c1 fb 1f             	sar    ebx,0x1f
c0013a13:	29 c8                	sub    eax,ecx
c0013a15:	19 da                	sbb    edx,ebx
c0013a17:	31 c9                	xor    ecx,ecx
c0013a19:	80 3d 91 d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d091,0x0
c0013a20:	74 05                	je     c0013a27 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013a22:	b9 08 07 00 00       	mov    ecx,0x708
c0013a27:	31 db                	xor    ebx,ebx
c0013a29:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013a2d:	29 c8                	sub    eax,ecx
c0013a2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a33:	19 da                	sbb    edx,ebx
c0013a35:	89 f8                	mov    eax,edi
c0013a37:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a3b:	5b                   	pop    ebx
c0013a3c:	5e                   	pop    esi
c0013a3d:	5f                   	pop    edi
c0013a3e:	ff e0                	jmp    eax

c0013a40 <secondsToDatetime(unsigned long long)>:
c0013a40:	55                   	push   ebp
c0013a41:	57                   	push   edi
c0013a42:	56                   	push   esi
c0013a43:	53                   	push   ebx
c0013a44:	83 ec 1c             	sub    esp,0x1c
c0013a47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a4b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a4f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a53:	6a 00                	push   0x0
c0013a55:	68 80 51 01 00       	push   0x15180
c0013a5a:	55                   	push   ebp
c0013a5b:	57                   	push   edi
c0013a5c:	e8 6b 1d 01 00       	call   c00257cc <__udivdi3>
c0013a61:	83 c4 10             	add    esp,0x10
c0013a64:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a6e:	6a 00                	push   0x0
c0013a70:	68 80 51 01 00       	push   0x15180
c0013a75:	55                   	push   ebp
c0013a76:	57                   	push   edi
c0013a77:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a7c:	e8 4b 1e 01 00       	call   c00258cc <__umoddi3>
c0013a81:	83 c4 10             	add    esp,0x10
c0013a84:	99                   	cdq    
c0013a85:	f7 ff                	idiv   edi
c0013a87:	bf 3c 00 00 00       	mov    edi,0x3c
c0013a8c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013a8f:	89 d0                	mov    eax,edx
c0013a91:	99                   	cdq    
c0013a92:	f7 ff                	idiv   edi
c0013a94:	85 db                	test   ebx,ebx
c0013a96:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013a99:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013a9c:	79 11                	jns    c0013aaf <secondsToDatetime(unsigned long long)+0x6f>
c0013a9e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013aa2:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013aa8:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013aad:	eb 07                	jmp    c0013ab6 <secondsToDatetime(unsigned long long)+0x76>
c0013aaf:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ab4:	89 d8                	mov    eax,ebx
c0013ab6:	bf b4 05 00 00       	mov    edi,0x5b4
c0013abb:	99                   	cdq    
c0013abc:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013ac1:	f7 f9                	idiv   ecx
c0013ac3:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013ac8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013acc:	31 d2                	xor    edx,edx
c0013ace:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013ad6:	01 c3                	add    ebx,eax
c0013ad8:	89 d8                	mov    eax,ebx
c0013ada:	f7 f1                	div    ecx
c0013adc:	31 d2                	xor    edx,edx
c0013ade:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013ae1:	89 d8                	mov    eax,ebx
c0013ae3:	f7 f7                	div    edi
c0013ae5:	31 d2                	xor    edx,edx
c0013ae7:	29 c1                	sub    ecx,eax
c0013ae9:	89 d8                	mov    eax,ebx
c0013aeb:	f7 f5                	div    ebp
c0013aed:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013af2:	29 c1                	sub    ecx,eax
c0013af4:	31 d2                	xor    edx,edx
c0013af6:	89 c8                	mov    eax,ecx
c0013af8:	f7 f5                	div    ebp
c0013afa:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013aff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b03:	31 d2                	xor    edx,edx
c0013b05:	89 c8                	mov    eax,ecx
c0013b07:	f7 f5                	div    ebp
c0013b09:	31 d2                	xor    edx,edx
c0013b0b:	01 c3                	add    ebx,eax
c0013b0d:	89 c8                	mov    eax,ecx
c0013b0f:	f7 f7                	div    edi
c0013b11:	bf 99 00 00 00       	mov    edi,0x99
c0013b16:	29 c3                	sub    ebx,eax
c0013b18:	31 d2                	xor    edx,edx
c0013b1a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013b22:	29 c3                	sub    ebx,eax
c0013b24:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013b27:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013b2a:	bb 05 00 00 00       	mov    ebx,0x5
c0013b2f:	83 c1 02             	add    ecx,0x2
c0013b32:	89 c8                	mov    eax,ecx
c0013b34:	f7 f7                	div    edi
c0013b36:	31 d2                	xor    edx,edx
c0013b38:	89 c7                	mov    edi,eax
c0013b3a:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b40:	83 c0 02             	add    eax,0x2
c0013b43:	f7 f3                	div    ebx
c0013b45:	89 eb                	mov    ebx,ebp
c0013b47:	29 c3                	sub    ebx,eax
c0013b49:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b4f:	88 1e                	mov    BYTE PTR [esi],bl
c0013b51:	19 c0                	sbb    eax,eax
c0013b53:	31 d2                	xor    edx,edx
c0013b55:	83 e0 0c             	and    eax,0xc
c0013b58:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b5c:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b64:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b68:	83 f9 01             	cmp    ecx,0x1
c0013b6b:	0f 96 c2             	setbe  dl
c0013b6e:	41                   	inc    ecx
c0013b6f:	01 d0                	add    eax,edx
c0013b71:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b74:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b78:	83 c4 1c             	add    esp,0x1c
c0013b7b:	89 f0                	mov    eax,esi
c0013b7d:	5b                   	pop    ebx
c0013b7e:	5e                   	pop    esi
c0013b7f:	5f                   	pop    edi
c0013b80:	5d                   	pop    ebp
c0013b81:	c2 04 00             	ret    0x4

c0013b84 <Clock::timeInDatetimeLocal()>:
c0013b84:	53                   	push   ebx
c0013b85:	83 ec 14             	sub    esp,0x14
c0013b88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b8c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013b90:	e8 83 fc ff ff       	call   c0013818 <Clock::timeInSecondsLocal()>
c0013b95:	83 c4 0c             	add    esp,0xc
c0013b98:	52                   	push   edx
c0013b99:	50                   	push   eax
c0013b9a:	53                   	push   ebx
c0013b9b:	e8 a0 fe ff ff       	call   c0013a40 <secondsToDatetime(unsigned long long)>
c0013ba0:	89 d8                	mov    eax,ebx
c0013ba2:	83 c4 14             	add    esp,0x14
c0013ba5:	5b                   	pop    ebx
c0013ba6:	c2 04 00             	ret    0x4
c0013ba9:	90                   	nop

c0013baa <Device::hibernate()>:
c0013baa:	c3                   	ret    
c0013bab:	90                   	nop

c0013bac <Device::wake()>:
c0013bac:	c3                   	ret    
c0013bad:	90                   	nop

c0013bae <Device::detect()>:
c0013bae:	c3                   	ret    
c0013baf:	90                   	nop

c0013bb0 <Device::disableLegacy()>:
c0013bb0:	c3                   	ret    
c0013bb1:	90                   	nop

c0013bb2 <Device::powerSaving(PowerSavingLevel)>:
c0013bb2:	c3                   	ret    
c0013bb3:	90                   	nop

c0013bb4 <DriverlessDevice::close(int, int, void*)>:
c0013bb4:	31 c0                	xor    eax,eax
c0013bb6:	c3                   	ret    
c0013bb7:	90                   	nop

c0013bb8 <DriverlessDevice::detect()>:
c0013bb8:	c3                   	ret    
c0013bb9:	90                   	nop

c0013bba <DriverlessDevice::open(int, int, void*)>:
c0013bba:	83 ec 18             	sub    esp,0x18
c0013bbd:	68 30 99 02 c0       	push   0xc0029930
c0013bc2:	e8 ee 5f 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c0013bc7:	83 c8 ff             	or     eax,0xffffffff
c0013bca:	83 c4 1c             	add    esp,0x1c
c0013bcd:	c3                   	ret    

c0013bce <Device::~Device()>:
c0013bce:	ba 58 99 02 c0       	mov    edx,0xc0029958
c0013bd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bd7:	89 10                	mov    DWORD PTR [eax],edx
c0013bd9:	90                   	nop
c0013bda:	c3                   	ret    
c0013bdb:	90                   	nop

c0013bdc <Device::~Device()>:
c0013bdc:	83 ec 0c             	sub    esp,0xc
c0013bdf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013be3:	e8 e6 ff ff ff       	call   c0013bce <Device::~Device()>
c0013be8:	83 c4 04             	add    esp,0x4
c0013beb:	83 ec 08             	sub    esp,0x8
c0013bee:	68 58 01 00 00       	push   0x158
c0013bf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bf7:	e8 f9 eb ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0013bfc:	83 c4 10             	add    esp,0x10
c0013bff:	83 c4 0c             	add    esp,0xc
c0013c02:	c3                   	ret    
c0013c03:	90                   	nop

c0013c04 <Device::findAndLoadDriver()>:
c0013c04:	c3                   	ret    
c0013c05:	90                   	nop

c0013c06 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013c06:	57                   	push   edi
c0013c07:	b9 09 00 00 00       	mov    ecx,0x9
c0013c0c:	56                   	push   esi
c0013c0d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c11:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013c15:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013c1f:	81 c7 18 01 00 00    	add    edi,0x118
c0013c25:	fc                   	cld    
c0013c26:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c28:	5e                   	pop    esi
c0013c29:	5f                   	pop    edi
c0013c2a:	c3                   	ret    
c0013c2b:	90                   	nop

c0013c2c <Device::preOpenACPI(void*, char*, char*)>:
c0013c2c:	56                   	push   esi
c0013c2d:	53                   	push   ebx
c0013c2e:	83 ec 08             	sub    esp,0x8
c0013c31:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013c35:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013c39:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013c43:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c47:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013c4d:	6a 1e                	push   0x1e
c0013c4f:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013c55:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013c59:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013c5f:	50                   	push   eax
c0013c60:	e8 3b ca fe ff       	call   c00006a0 <memcpy>
c0013c65:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013c69:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013c6d:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013c75:	83 c4 14             	add    esp,0x14
c0013c78:	5b                   	pop    ebx
c0013c79:	5e                   	pop    esi
c0013c7a:	e9 21 ca fe ff       	jmp    c00006a0 <memcpy>
c0013c7f:	90                   	nop

c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c84:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c89:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c90:	75 0b                	jne    c0013c9d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013c92:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c94:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c98:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013c9b:	eb 1e                	jmp    c0013cbb <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013c9d:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0013ca2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ca8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cae:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cb0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cb8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013cbb:	ff e0                	jmp    eax
c0013cbd:	90                   	nop

c0013cbe <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013cbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cc2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013cc7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cce:	75 0b                	jne    c0013cdb <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013cd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cd2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cd6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013cd9:	eb 1e                	jmp    c0013cf9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013cdb:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0013ce0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ce6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cec:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cee:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cf2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cf6:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013cf9:	ff e0                	jmp    eax
c0013cfb:	90                   	nop

c0013cfc <Device::addChild(Device*)>:
c0013cfc:	53                   	push   ebx
c0013cfd:	83 ec 08             	sub    esp,0x8
c0013d00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d08:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013d0e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013d14:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013d16:	85 d2                	test   edx,edx
c0013d18:	74 04                	je     c0013d1e <Device::addChild(Device*)+0x22>
c0013d1a:	89 d3                	mov    ebx,edx
c0013d1c:	eb f6                	jmp    c0013d14 <Device::addChild(Device*)+0x18>
c0013d1e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013d21:	83 ec 0c             	sub    esp,0xc
c0013d24:	6a 08                	push   0x8
c0013d26:	e8 f9 b8 ff ff       	call   c000f624 <malloc>
c0013d2b:	89 03                	mov    DWORD PTR [ebx],eax
c0013d2d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d3a:	83 c4 18             	add    esp,0x18
c0013d3d:	5b                   	pop    ebx
c0013d3e:	c3                   	ret    
c0013d3f:	90                   	nop

c0013d40 <Device::removeAllChildren()>:
c0013d40:	56                   	push   esi
c0013d41:	53                   	push   ebx
c0013d42:	52                   	push   edx
c0013d43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d47:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d4d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d50:	74 17                	je     c0013d69 <Device::removeAllChildren()+0x29>
c0013d52:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d55:	85 c0                	test   eax,eax
c0013d57:	74 0c                	je     c0013d65 <Device::removeAllChildren()+0x25>
c0013d59:	83 ec 0c             	sub    esp,0xc
c0013d5c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d5e:	50                   	push   eax
c0013d5f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d62:	83 c4 10             	add    esp,0x10
c0013d65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d67:	eb e4                	jmp    c0013d4d <Device::removeAllChildren()+0xd>
c0013d69:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d6f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d75:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d82:	58                   	pop    eax
c0013d83:	5b                   	pop    ebx
c0013d84:	5e                   	pop    esi
c0013d85:	c3                   	ret    

c0013d86 <Device::hibernateAll()>:
c0013d86:	53                   	push   ebx
c0013d87:	83 ec 14             	sub    esp,0x14
c0013d8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d90:	53                   	push   ebx
c0013d91:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013d94:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d9a:	83 c4 10             	add    esp,0x10
c0013d9d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013da0:	74 0f                	je     c0013db1 <Device::hibernateAll()+0x2b>
c0013da2:	83 ec 0c             	sub    esp,0xc
c0013da5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013da8:	e8 d9 ff ff ff       	call   c0013d86 <Device::hibernateAll()>
c0013dad:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013daf:	eb e9                	jmp    c0013d9a <Device::hibernateAll()+0x14>
c0013db1:	83 c4 08             	add    esp,0x8
c0013db4:	5b                   	pop    ebx
c0013db5:	c3                   	ret    

c0013db6 <Device::wakeAll()>:
c0013db6:	53                   	push   ebx
c0013db7:	83 ec 14             	sub    esp,0x14
c0013dba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dc0:	53                   	push   ebx
c0013dc1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013dc4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dca:	83 c4 10             	add    esp,0x10
c0013dcd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dd0:	74 0f                	je     c0013de1 <Device::wakeAll()+0x2b>
c0013dd2:	83 ec 0c             	sub    esp,0xc
c0013dd5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dd8:	e8 d9 ff ff ff       	call   c0013db6 <Device::wakeAll()>
c0013ddd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ddf:	eb e9                	jmp    c0013dca <Device::wakeAll()+0x14>
c0013de1:	83 c4 08             	add    esp,0x8
c0013de4:	5b                   	pop    ebx
c0013de5:	c3                   	ret    

c0013de6 <Device::detectAll()>:
c0013de6:	53                   	push   ebx
c0013de7:	83 ec 14             	sub    esp,0x14
c0013dea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dee:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013df0:	53                   	push   ebx
c0013df1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013df4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dfa:	83 c4 10             	add    esp,0x10
c0013dfd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e00:	74 0f                	je     c0013e11 <Device::detectAll()+0x2b>
c0013e02:	83 ec 0c             	sub    esp,0xc
c0013e05:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e08:	e8 d9 ff ff ff       	call   c0013de6 <Device::detectAll()>
c0013e0d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e0f:	eb e9                	jmp    c0013dfa <Device::detectAll()+0x14>
c0013e11:	83 c4 08             	add    esp,0x8
c0013e14:	5b                   	pop    ebx
c0013e15:	c3                   	ret    

c0013e16 <Device::disableLegacyAll()>:
c0013e16:	53                   	push   ebx
c0013e17:	83 ec 14             	sub    esp,0x14
c0013e1a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e20:	53                   	push   ebx
c0013e21:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013e24:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e2a:	83 c4 10             	add    esp,0x10
c0013e2d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e30:	74 0f                	je     c0013e41 <Device::disableLegacyAll()+0x2b>
c0013e32:	83 ec 0c             	sub    esp,0xc
c0013e35:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e38:	e8 d9 ff ff ff       	call   c0013e16 <Device::disableLegacyAll()>
c0013e3d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e3f:	eb e9                	jmp    c0013e2a <Device::disableLegacyAll()+0x14>
c0013e41:	83 c4 08             	add    esp,0x8
c0013e44:	5b                   	pop    ebx
c0013e45:	c3                   	ret    

c0013e46 <Device::loadDriversForAll()>:
c0013e46:	53                   	push   ebx
c0013e47:	83 ec 08             	sub    esp,0x8
c0013e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4e:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e54:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013e56:	85 db                	test   ebx,ebx
c0013e58:	74 12                	je     c0013e6c <Device::loadDriversForAll()+0x26>
c0013e5a:	83 ec 0c             	sub    esp,0xc
c0013e5d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013e60:	e8 e1 ff ff ff       	call   c0013e46 <Device::loadDriversForAll()>
c0013e65:	83 c4 10             	add    esp,0x10
c0013e68:	89 d8                	mov    eax,ebx
c0013e6a:	eb e8                	jmp    c0013e54 <Device::loadDriversForAll()+0xe>
c0013e6c:	83 c4 08             	add    esp,0x8
c0013e6f:	5b                   	pop    ebx
c0013e70:	c3                   	ret    
c0013e71:	90                   	nop

c0013e72 <Device::closeAll()>:
c0013e72:	53                   	push   ebx
c0013e73:	83 ec 08             	sub    esp,0x8
c0013e76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e7c:	6a 00                	push   0x0
c0013e7e:	6a 00                	push   0x0
c0013e80:	6a 00                	push   0x0
c0013e82:	53                   	push   ebx
c0013e83:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e86:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e8c:	83 c4 10             	add    esp,0x10
c0013e8f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e92:	74 0f                	je     c0013ea3 <Device::closeAll()+0x31>
c0013e94:	83 ec 0c             	sub    esp,0xc
c0013e97:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e9a:	e8 d3 ff ff ff       	call   c0013e72 <Device::closeAll()>
c0013e9f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ea1:	eb e9                	jmp    c0013e8c <Device::closeAll()+0x1a>
c0013ea3:	83 c4 08             	add    esp,0x8
c0013ea6:	5b                   	pop    ebx
c0013ea7:	c3                   	ret    

c0013ea8 <Device::powerSavingAll(PowerSavingLevel)>:
c0013ea8:	56                   	push   esi
c0013ea9:	53                   	push   ebx
c0013eaa:	83 ec 0c             	sub    esp,0xc
c0013ead:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013eb1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013eb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013eb7:	56                   	push   esi
c0013eb8:	53                   	push   ebx
c0013eb9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013ebc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ec2:	83 c4 10             	add    esp,0x10
c0013ec5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ec8:	74 0f                	je     c0013ed9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013eca:	52                   	push   edx
c0013ecb:	52                   	push   edx
c0013ecc:	56                   	push   esi
c0013ecd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ed0:	e8 d3 ff ff ff       	call   c0013ea8 <Device::powerSavingAll(PowerSavingLevel)>
c0013ed5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ed7:	eb e9                	jmp    c0013ec2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013ed9:	58                   	pop    eax
c0013eda:	5b                   	pop    ebx
c0013edb:	5e                   	pop    esi
c0013edc:	c3                   	ret    
c0013edd:	90                   	nop

c0013ede <Device::setName(char const*)>:
c0013ede:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013ee6:	e9 78 c8 fe ff       	jmp    c0000763 <strcpy>
c0013eeb:	90                   	nop

c0013eec <Device::Device(char const*)>:
c0013eec:	83 ec 1c             	sub    esp,0x1c
c0013eef:	ba 58 99 02 c0       	mov    edx,0xc0029958
c0013ef4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ef8:	89 10                	mov    DWORD PTR [eax],edx
c0013efa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013efe:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013f08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f0c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f1a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f28:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f32:	83 ec 08             	sub    esp,0x8
c0013f35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f3d:	e8 9c ff ff ff       	call   c0013ede <Device::setName(char const*)>
c0013f42:	83 c4 10             	add    esp,0x10
c0013f45:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f4d:	83 ec 0c             	sub    esp,0xc
c0013f50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f54:	e8 cb b6 ff ff       	call   c000f624 <malloc>
c0013f59:	83 c4 10             	add    esp,0x10
c0013f5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f69:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f6d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f77:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f7d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f87:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f8d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f98:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013f9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013faa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fae:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fbc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fca:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd8:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013fe2:	90                   	nop
c0013fe3:	83 c4 1c             	add    esp,0x1c
c0013fe6:	c3                   	ret    
c0013fe7:	90                   	nop

c0013fe8 <Device::getName()>:
c0013fe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013fec:	05 d0 00 00 00       	add    eax,0xd0
c0013ff1:	c3                   	ret    

c0013ff2 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013ff2:	83 ec 0c             	sub    esp,0xc
c0013ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ff9:	83 ec 08             	sub    esp,0x8
c0013ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014000:	50                   	push   eax
c0014001:	e8 e6 fe ff ff       	call   c0013eec <Device::Device(char const*)>
c0014006:	83 c4 10             	add    esp,0x10
c0014009:	ba 84 99 02 c0       	mov    edx,0xc0029984
c001400e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014012:	89 10                	mov    DWORD PTR [eax],edx
c0014014:	90                   	nop
c0014015:	83 c4 0c             	add    esp,0xc
c0014018:	c3                   	ret    
c0014019:	90                   	nop

c001401a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001401a:	57                   	push   edi
c001401b:	56                   	push   esi
c001401c:	53                   	push   ebx
c001401d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014021:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014025:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014029:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001402f:	75 0c                	jne    c001403d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014031:	52                   	push   edx
c0014032:	52                   	push   edx
c0014033:	53                   	push   ebx
c0014034:	56                   	push   esi
c0014035:	e8 d0 36 01 00       	call   c002770a <LinkedList<Device>::addElement(Device*)>
c001403a:	83 c4 10             	add    esp,0x10
c001403d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014043:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014046:	74 12                	je     c001405a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014048:	50                   	push   eax
c0014049:	57                   	push   edi
c001404a:	56                   	push   esi
c001404b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001404e:	e8 c7 ff ff ff       	call   c001401a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014053:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014055:	83 c4 10             	add    esp,0x10
c0014058:	eb e9                	jmp    c0014043 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001405a:	5b                   	pop    ebx
c001405b:	5e                   	pop    esi
c001405c:	5f                   	pop    edi
c001405d:	c3                   	ret    

c001405e <getDevicesOfType(DeviceType)>:
c001405e:	53                   	push   ebx
c001405f:	83 ec 14             	sub    esp,0x14
c0014062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014066:	53                   	push   ebx
c0014067:	e8 7a 37 01 00       	call   c00277e6 <LinkedList<Device>::LinkedList()>
c001406c:	83 c4 0c             	add    esp,0xc
c001406f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014073:	53                   	push   ebx
c0014074:	ff 35 08 cf 02 c0    	push   DWORD PTR ds:0xc002cf08
c001407a:	e8 9b ff ff ff       	call   c001401a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001407f:	89 d8                	mov    eax,ebx
c0014081:	83 c4 18             	add    esp,0x18
c0014084:	5b                   	pop    ebx
c0014085:	c2 04 00             	ret    0x4

c0014088 <HardDiskController::HardDiskController(char const*)>:
c0014088:	83 ec 0c             	sub    esp,0xc
c001408b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001408f:	83 ec 08             	sub    esp,0x8
c0014092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014096:	50                   	push   eax
c0014097:	e8 50 fe ff ff       	call   c0013eec <Device::Device(char const*)>
c001409c:	83 c4 10             	add    esp,0x10
c001409f:	ba b0 99 02 c0       	mov    edx,0xc00299b0
c00140a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140a8:	89 10                	mov    DWORD PTR [eax],edx
c00140aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ae:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00140b8:	90                   	nop
c00140b9:	83 c4 0c             	add    esp,0xc
c00140bc:	c3                   	ret    
c00140bd:	90                   	nop

c00140be <HardDiskController::~HardDiskController()>:
c00140be:	83 ec 0c             	sub    esp,0xc
c00140c1:	ba b0 99 02 c0       	mov    edx,0xc00299b0
c00140c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ca:	89 10                	mov    DWORD PTR [eax],edx
c00140cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140d0:	83 ec 0c             	sub    esp,0xc
c00140d3:	50                   	push   eax
c00140d4:	e8 f5 fa ff ff       	call   c0013bce <Device::~Device()>
c00140d9:	83 c4 10             	add    esp,0x10
c00140dc:	90                   	nop
c00140dd:	83 c4 0c             	add    esp,0xc
c00140e0:	c3                   	ret    
c00140e1:	90                   	nop

c00140e2 <HardDiskController::~HardDiskController()>:
c00140e2:	83 ec 0c             	sub    esp,0xc
c00140e5:	83 ec 0c             	sub    esp,0xc
c00140e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ec:	e8 cd ff ff ff       	call   c00140be <HardDiskController::~HardDiskController()>
c00140f1:	83 c4 10             	add    esp,0x10
c00140f4:	83 ec 08             	sub    esp,0x8
c00140f7:	68 58 01 00 00       	push   0x158
c00140fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014100:	e8 f0 e6 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0014105:	83 c4 10             	add    esp,0x10
c0014108:	83 c4 0c             	add    esp,0xc
c001410b:	c3                   	ret    

c001410c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001410c:	83 ec 0c             	sub    esp,0xc
c001410f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014113:	83 ec 08             	sub    esp,0x8
c0014116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001411a:	50                   	push   eax
c001411b:	e8 cc fd ff ff       	call   c0013eec <Device::Device(char const*)>
c0014120:	83 c4 10             	add    esp,0x10
c0014123:	ba dc 99 02 c0       	mov    edx,0xc00299dc
c0014128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001412c:	89 10                	mov    DWORD PTR [eax],edx
c001412e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014132:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001413d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014148:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014156:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001415a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014164:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001416e:	90                   	nop
c001416f:	83 c4 0c             	add    esp,0xc
c0014172:	c3                   	ret    
c0014173:	90                   	nop

c0014174 <PhysicalDisk::startCache()>:
c0014174:	56                   	push   esi
c0014175:	53                   	push   ebx
c0014176:	83 ec 10             	sub    esp,0x10
c0014179:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001417d:	6a 30                	push   0x30
c001417f:	e8 a0 b4 ff ff       	call   c000f624 <malloc>
c0014184:	89 c6                	mov    esi,eax
c0014186:	58                   	pop    eax
c0014187:	5a                   	pop    edx
c0014188:	53                   	push   ebx
c0014189:	56                   	push   esi
c001418a:	e8 dd 25 00 00       	call   c001676c <VCache::VCache(PhysicalDisk*)>
c001418f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014195:	83 c4 14             	add    esp,0x14
c0014198:	5b                   	pop    ebx
c0014199:	5e                   	pop    esi
c001419a:	c3                   	ret    
c001419b:	90                   	nop

c001419c <PhysicalDisk::~PhysicalDisk()>:
c001419c:	83 ec 0c             	sub    esp,0xc
c001419f:	ba dc 99 02 c0       	mov    edx,0xc00299dc
c00141a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141a8:	89 10                	mov    DWORD PTR [eax],edx
c00141aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ae:	83 ec 0c             	sub    esp,0xc
c00141b1:	50                   	push   eax
c00141b2:	e8 17 fa ff ff       	call   c0013bce <Device::~Device()>
c00141b7:	83 c4 10             	add    esp,0x10
c00141ba:	90                   	nop
c00141bb:	83 c4 0c             	add    esp,0xc
c00141be:	c3                   	ret    
c00141bf:	90                   	nop

c00141c0 <PhysicalDisk::~PhysicalDisk()>:
c00141c0:	83 ec 0c             	sub    esp,0xc
c00141c3:	83 ec 0c             	sub    esp,0xc
c00141c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141ca:	e8 cd ff ff ff       	call   c001419c <PhysicalDisk::~PhysicalDisk()>
c00141cf:	83 c4 10             	add    esp,0x10
c00141d2:	83 ec 08             	sub    esp,0x8
c00141d5:	68 6c 01 00 00       	push   0x16c
c00141da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141de:	e8 12 e6 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c00141e3:	83 c4 10             	add    esp,0x10
c00141e6:	83 c4 0c             	add    esp,0xc
c00141e9:	c3                   	ret    

c00141ea <FPU::FPU(char const*)>:
c00141ea:	83 ec 0c             	sub    esp,0xc
c00141ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141f1:	83 ec 08             	sub    esp,0x8
c00141f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141f8:	50                   	push   eax
c00141f9:	e8 ee fc ff ff       	call   c0013eec <Device::Device(char const*)>
c00141fe:	83 c4 10             	add    esp,0x10
c0014201:	ba 1c 9a 02 c0       	mov    edx,0xc0029a1c
c0014206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001420a:	89 10                	mov    DWORD PTR [eax],edx
c001420c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014210:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001421a:	90                   	nop
c001421b:	83 c4 0c             	add    esp,0xc
c001421e:	c3                   	ret    
c001421f:	90                   	nop

c0014220 <FPU::~FPU()>:
c0014220:	83 ec 0c             	sub    esp,0xc
c0014223:	ba 1c 9a 02 c0       	mov    edx,0xc0029a1c
c0014228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001422c:	89 10                	mov    DWORD PTR [eax],edx
c001422e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014232:	83 ec 0c             	sub    esp,0xc
c0014235:	50                   	push   eax
c0014236:	e8 93 f9 ff ff       	call   c0013bce <Device::~Device()>
c001423b:	83 c4 10             	add    esp,0x10
c001423e:	90                   	nop
c001423f:	83 c4 0c             	add    esp,0xc
c0014242:	c3                   	ret    
c0014243:	90                   	nop

c0014244 <FPU::~FPU()>:
c0014244:	83 ec 0c             	sub    esp,0xc
c0014247:	83 ec 0c             	sub    esp,0xc
c001424a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001424e:	e8 cd ff ff ff       	call   c0014220 <FPU::~FPU()>
c0014253:	83 c4 10             	add    esp,0x10
c0014256:	83 ec 08             	sub    esp,0x8
c0014259:	68 58 01 00 00       	push   0x158
c001425e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014262:	e8 8e e5 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0014267:	83 c4 10             	add    esp,0x10
c001426a:	83 c4 0c             	add    esp,0xc
c001426d:	c3                   	ret    

c001426e <setupFPU()>:
c001426e:	53                   	push   ebx
c001426f:	83 ec 08             	sub    esp,0x8
c0014272:	8b 15 08 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf08
c0014278:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001427f:	74 19                	je     c001429a <setupFPU()+0x2c>
c0014281:	83 ec 0c             	sub    esp,0xc
c0014284:	68 58 01 00 00       	push   0x158
c0014289:	e8 96 b3 ff ff       	call   c000f624 <malloc>
c001428e:	89 c3                	mov    ebx,eax
c0014290:	89 04 24             	mov    DWORD PTR [esp],eax
c0014293:	e8 c0 00 01 00       	call   c0024358 <AVX::AVX()>
c0014298:	eb 5b                	jmp    c00142f5 <setupFPU()+0x87>
c001429a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142a0:	84 c0                	test   al,al
c00142a2:	79 19                	jns    c00142bd <setupFPU()+0x4f>
c00142a4:	83 ec 0c             	sub    esp,0xc
c00142a7:	68 58 01 00 00       	push   0x158
c00142ac:	e8 73 b3 ff ff       	call   c000f624 <malloc>
c00142b1:	89 c3                	mov    ebx,eax
c00142b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00142b6:	e8 c3 01 01 00       	call   c002447e <SSE::SSE()>
c00142bb:	eb 38                	jmp    c00142f5 <setupFPU()+0x87>
c00142bd:	a8 20                	test   al,0x20
c00142bf:	74 19                	je     c00142da <setupFPU()+0x6c>
c00142c1:	83 ec 0c             	sub    esp,0xc
c00142c4:	68 58 01 00 00       	push   0x158
c00142c9:	e8 56 b3 ff ff       	call   c000f624 <malloc>
c00142ce:	89 c3                	mov    ebx,eax
c00142d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00142d3:	e8 10 01 01 00       	call   c00243e8 <MMX::MMX()>
c00142d8:	eb 1b                	jmp    c00142f5 <setupFPU()+0x87>
c00142da:	a8 10                	test   al,0x10
c00142dc:	74 1c                	je     c00142fa <setupFPU()+0x8c>
c00142de:	83 ec 0c             	sub    esp,0xc
c00142e1:	68 58 01 00 00       	push   0x158
c00142e6:	e8 39 b3 ff ff       	call   c000f624 <malloc>
c00142eb:	89 c3                	mov    ebx,eax
c00142ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00142f0:	e8 17 02 01 00       	call   c002450c <x87::x87()>
c00142f5:	83 c4 10             	add    esp,0x10
c00142f8:	eb 24                	jmp    c001431e <setupFPU()+0xb0>
c00142fa:	83 e0 ef             	and    eax,0xffffffef
c00142fd:	83 ec 0c             	sub    esp,0xc
c0014300:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014306:	68 08 9a 02 c0       	push   0xc0029a08
c001430b:	e8 c5 e5 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014310:	0f 20 c0             	mov    eax,cr0
c0014313:	83 c8 04             	or     eax,0x4
c0014316:	0f 22 c0             	mov    cr0,eax
c0014319:	31 db                	xor    ebx,ebx
c001431b:	83 c4 10             	add    esp,0x10
c001431e:	89 d8                	mov    eax,ebx
c0014320:	83 c4 08             	add    esp,0x8
c0014323:	5b                   	pop    ebx
c0014324:	c3                   	ret    
c0014325:	90                   	nop

c0014326 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014326:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001432a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001432e:	c1 e0 04             	shl    eax,0x4
c0014331:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014335:	8d 50 10             	lea    edx,[eax+0x10]
c0014338:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001433e:	74 08                	je     c0014348 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014340:	83 c0 04             	add    eax,0x4
c0014343:	39 d0                	cmp    eax,edx
c0014345:	75 f1                	jne    c0014338 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014347:	c3                   	ret    
c0014348:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014352:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001435c:	eb e2                	jmp    c0014340 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001435e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001435e:	57                   	push   edi
c001435f:	31 c0                	xor    eax,eax
c0014361:	56                   	push   esi
c0014362:	53                   	push   ebx
c0014363:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014367:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001436b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001436f:	89 da                	mov    edx,ebx
c0014371:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014375:	c1 e2 04             	shl    edx,0x4
c0014378:	01 ca                	add    edx,ecx
c001437a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014382:	74 16                	je     c001439a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014384:	40                   	inc    eax
c0014385:	83 f8 04             	cmp    eax,0x4
c0014388:	75 f0                	jne    c001437a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001438a:	c7 44 24 10 4c 9a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029a4c
c0014392:	5b                   	pop    ebx
c0014393:	5e                   	pop    esi
c0014394:	5f                   	pop    edi
c0014395:	e9 1b 58 00 00       	jmp    c0019bb5 <Krnl::panic(char const*)>
c001439a:	8d 04 98             	lea    eax,[eax+ebx*4]
c001439d:	8d 04 81             	lea    eax,[ecx+eax*4]
c00143a0:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00143a6:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00143ac:	5b                   	pop    ebx
c00143ad:	5e                   	pop    esi
c00143ae:	5f                   	pop    edi
c00143af:	c3                   	ret    

c00143b0 <doubleFault(regs*, void*)>:
c00143b0:	55                   	push   ebp
c00143b1:	89 e5                	mov    ebp,esp
c00143b3:	83 ec 08             	sub    esp,0x8
c00143b6:	83 ec 0c             	sub    esp,0xc
c00143b9:	68 87 9a 02 c0       	push   0xc0029a87
c00143be:	e8 f2 57 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c00143c3:	83 c4 10             	add    esp,0x10
c00143c6:	90                   	nop
c00143c7:	c9                   	leave  
c00143c8:	c3                   	ret    
c00143c9:	90                   	nop

c00143ca <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00143ca:	56                   	push   esi
c00143cb:	53                   	push   ebx
c00143cc:	50                   	push   eax
c00143cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143d5:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143da:	75 35                	jne    c0014411 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00143dc:	8d 43 20             	lea    eax,[ebx+0x20]
c00143df:	31 d2                	xor    edx,edx
c00143e1:	89 c1                	mov    ecx,eax
c00143e3:	c1 e1 04             	shl    ecx,0x4
c00143e6:	01 f1                	add    ecx,esi
c00143e8:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00143f0:	74 3e                	je     c0014430 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00143f2:	42                   	inc    edx
c00143f3:	83 fa 04             	cmp    edx,0x4
c00143f6:	75 f0                	jne    c00143e8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00143f8:	83 ec 0c             	sub    esp,0xc
c00143fb:	68 cc 9a 02 c0       	push   0xc0029acc
c0014400:	e8 b0 57 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c0014405:	83 c4 10             	add    esp,0x10
c0014408:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001440d:	5a                   	pop    edx
c001440e:	5b                   	pop    ebx
c001440f:	5e                   	pop    esi
c0014410:	c3                   	ret    
c0014411:	83 ec 0c             	sub    esp,0xc
c0014414:	56                   	push   esi
c0014415:	e8 ce fb ff ff       	call   c0013fe8 <Device::getName()>
c001441a:	83 c4 10             	add    esp,0x10
c001441d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014420:	75 ba                	jne    c00143dc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014422:	83 fb 0f             	cmp    ebx,0xf
c0014425:	7f 29                	jg     c0014450 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014427:	0f b6 9b 60 c1 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3ea0]
c001442e:	eb ac                	jmp    c00143dc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014430:	8d 04 82             	lea    eax,[edx+eax*4]
c0014433:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014437:	8d 04 86             	lea    eax,[esi+eax*4]
c001443a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014440:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014444:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001444a:	89 d8                	mov    eax,ebx
c001444c:	5a                   	pop    edx
c001444d:	5b                   	pop    ebx
c001444e:	5e                   	pop    esi
c001444f:	c3                   	ret    
c0014450:	83 ec 0c             	sub    esp,0xc
c0014453:	68 94 9a 02 c0       	push   0xc0029a94
c0014458:	e8 58 57 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c001445d:	83 c4 10             	add    esp,0x10
c0014460:	e9 77 ff ff ff       	jmp    c00143dc <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014465:	90                   	nop

c0014466 <InterruptController::clearAllHandlers(int, bool)>:
c0014466:	56                   	push   esi
c0014467:	53                   	push   ebx
c0014468:	52                   	push   edx
c0014469:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001446d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014471:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014476:	75 61                	jne    c00144d9 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014478:	8d 46 20             	lea    eax,[esi+0x20]
c001447b:	c1 e6 04             	shl    esi,0x4
c001447e:	c1 e0 04             	shl    eax,0x4
c0014481:	01 de                	add    esi,ebx
c0014483:	01 d8                	add    eax,ebx
c0014485:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001448f:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014499:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00144a3:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00144ad:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00144b7:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00144c1:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00144cb:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00144d5:	58                   	pop    eax
c00144d6:	5b                   	pop    ebx
c00144d7:	5e                   	pop    esi
c00144d8:	c3                   	ret    
c00144d9:	83 ec 0c             	sub    esp,0xc
c00144dc:	53                   	push   ebx
c00144dd:	e8 06 fb ff ff       	call   c0013fe8 <Device::getName()>
c00144e2:	83 c4 10             	add    esp,0x10
c00144e5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00144e8:	75 8e                	jne    c0014478 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144ea:	83 fe 0f             	cmp    esi,0xf
c00144ed:	7f 09                	jg     c00144f8 <InterruptController::clearAllHandlers(int, bool)+0x92>
c00144ef:	0f b6 b6 60 c1 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3ea0]
c00144f6:	eb 80                	jmp    c0014478 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144f8:	83 ec 0c             	sub    esp,0xc
c00144fb:	68 08 9b 02 c0       	push   0xc0029b08
c0014500:	e8 b0 56 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c0014505:	83 c4 10             	add    esp,0x10
c0014508:	e9 6b ff ff ff       	jmp    c0014478 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001450d:	90                   	nop

c001450e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001450e:	56                   	push   esi
c001450f:	53                   	push   ebx
c0014510:	52                   	push   edx
c0014511:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014515:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014519:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001451e:	75 3a                	jne    c001455a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014520:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014524:	8d 50 20             	lea    edx,[eax+0x20]
c0014527:	c1 e2 04             	shl    edx,0x4
c001452a:	8d 04 16             	lea    eax,[esi+edx*1]
c001452d:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014531:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014537:	74 0b                	je     c0014544 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014539:	83 c0 04             	add    eax,0x4
c001453c:	39 d0                	cmp    eax,edx
c001453e:	75 f1                	jne    c0014531 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014540:	58                   	pop    eax
c0014541:	5b                   	pop    ebx
c0014542:	5e                   	pop    esi
c0014543:	c3                   	ret    
c0014544:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001454e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014558:	eb df                	jmp    c0014539 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001455a:	83 ec 0c             	sub    esp,0xc
c001455d:	56                   	push   esi
c001455e:	e8 85 fa ff ff       	call   c0013fe8 <Device::getName()>
c0014563:	83 c4 10             	add    esp,0x10
c0014566:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014569:	75 b5                	jne    c0014520 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001456b:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014570:	7f 11                	jg     c0014583 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014572:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014576:	0f b6 80 60 c1 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3ea0]
c001457d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014581:	eb 9d                	jmp    c0014520 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014583:	83 ec 0c             	sub    esp,0xc
c0014586:	68 08 9b 02 c0       	push   0xc0029b08
c001458b:	e8 25 56 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c0014590:	83 c4 10             	add    esp,0x10
c0014593:	eb 8b                	jmp    c0014520 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014595 <nmiHandler(regs*, void*)>:
c0014595:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c001459a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001459e:	e9 cd a7 ff ff       	jmp    c000ed70 <Computer::handleNMI()>

c00145a3 <int_handler>:
c00145a3:	55                   	push   ebp
c00145a4:	57                   	push   edi
c00145a5:	56                   	push   esi
c00145a6:	53                   	push   ebx
c00145a7:	83 ec 0c             	sub    esp,0xc
c00145aa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145ae:	80 3d 40 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da40,0x0
c00145b5:	74 0b                	je     c00145c2 <int_handler+0x1f>
c00145b7:	fa                   	cli    
c00145b8:	f4                   	hlt    
c00145b9:	80 3d 40 da 02 c0 00 	cmp    BYTE PTR ds:0xc002da40,0x0
c00145c0:	75 f5                	jne    c00145b7 <int_handler+0x14>
c00145c2:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c00145c7:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00145ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00145d0:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00145d6:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145d9:	83 f8 17             	cmp    eax,0x17
c00145dc:	77 13                	ja     c00145f1 <int_handler+0x4e>
c00145de:	83 ec 08             	sub    esp,0x8
c00145e1:	8b 17                	mov    edx,DWORD PTR [edi]
c00145e3:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145e6:	0f b6 c0             	movzx  eax,al
c00145e9:	50                   	push   eax
c00145ea:	57                   	push   edi
c00145eb:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00145ee:	83 c4 10             	add    esp,0x10
c00145f1:	83 c3 15             	add    ebx,0x15
c00145f4:	c1 e3 04             	shl    ebx,0x4
c00145f7:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00145fb:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014602:	31 db                	xor    ebx,ebx
c0014604:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014608:	85 c0                	test   eax,eax
c001460a:	74 13                	je     c001461f <int_handler+0x7c>
c001460c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001460f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014613:	74 1c                	je     c0014631 <int_handler+0x8e>
c0014615:	83 ec 08             	sub    esp,0x8
c0014618:	52                   	push   edx
c0014619:	56                   	push   esi
c001461a:	ff d0                	call   eax
c001461c:	83 c4 10             	add    esp,0x10
c001461f:	43                   	inc    ebx
c0014620:	83 fb 04             	cmp    ebx,0x4
c0014623:	75 df                	jne    c0014604 <int_handler+0x61>
c0014625:	83 c4 0c             	add    esp,0xc
c0014628:	31 c0                	xor    eax,eax
c001462a:	5b                   	pop    ebx
c001462b:	31 d2                	xor    edx,edx
c001462d:	5e                   	pop    esi
c001462e:	5f                   	pop    edi
c001462f:	5d                   	pop    ebp
c0014630:	c3                   	ret    
c0014631:	83 ec 08             	sub    esp,0x8
c0014634:	52                   	push   edx
c0014635:	56                   	push   esi
c0014636:	ff d0                	call   eax
c0014638:	83 c4 10             	add    esp,0x10
c001463b:	83 c4 0c             	add    esp,0xc
c001463e:	5b                   	pop    ebx
c001463f:	5e                   	pop    esi
c0014640:	5f                   	pop    edi
c0014641:	5d                   	pop    ebp
c0014642:	c3                   	ret    
c0014643:	90                   	nop

c0014644 <InterruptController::InterruptController(char const*)>:
c0014644:	83 ec 1c             	sub    esp,0x1c
c0014647:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001464b:	83 ec 08             	sub    esp,0x8
c001464e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014652:	50                   	push   eax
c0014653:	e8 94 f8 ff ff       	call   c0013eec <Device::Device(char const*)>
c0014658:	83 c4 10             	add    esp,0x10
c001465b:	ba 3c 9d 02 c0       	mov    edx,0xc0029d3c
c0014660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014664:	89 10                	mov    DWORD PTR [eax],edx
c0014666:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001466a:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014674:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001467c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014684:	7f 5e                	jg     c00146e4 <InterruptController::InterruptController(char const*)+0xa0>
c0014686:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001468e:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014693:	7f 49                	jg     c00146de <InterruptController::InterruptController(char const*)+0x9a>
c0014695:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014699:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001469d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146a8:	01 ca                	add    edx,ecx
c00146aa:	83 c2 54             	add    edx,0x54
c00146ad:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146bd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146c8:	01 ca                	add    edx,ecx
c00146ca:	81 c2 54 04 00 00    	add    edx,0x454
c00146d0:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146d8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00146dc:	eb b0                	jmp    c001468e <InterruptController::InterruptController(char const*)+0x4a>
c00146de:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00146e2:	eb 98                	jmp    c001467c <InterruptController::InterruptController(char const*)+0x38>
c00146e4:	90                   	nop
c00146e5:	83 c4 1c             	add    esp,0x1c
c00146e8:	c3                   	ret    
c00146e9:	90                   	nop

c00146ea <InterruptController::~InterruptController()>:
c00146ea:	83 ec 0c             	sub    esp,0xc
c00146ed:	ba 3c 9d 02 c0       	mov    edx,0xc0029d3c
c00146f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f6:	89 10                	mov    DWORD PTR [eax],edx
c00146f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146fc:	83 ec 0c             	sub    esp,0xc
c00146ff:	50                   	push   eax
c0014700:	e8 c9 f4 ff ff       	call   c0013bce <Device::~Device()>
c0014705:	83 c4 10             	add    esp,0x10
c0014708:	90                   	nop
c0014709:	83 c4 0c             	add    esp,0xc
c001470c:	c3                   	ret    
c001470d:	90                   	nop

c001470e <InterruptController::~InterruptController()>:
c001470e:	83 ec 0c             	sub    esp,0xc
c0014711:	83 ec 0c             	sub    esp,0xc
c0014714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014718:	e8 cd ff ff ff       	call   c00146ea <InterruptController::~InterruptController()>
c001471d:	83 c4 10             	add    esp,0x10
c0014720:	83 ec 08             	sub    esp,0x8
c0014723:	68 58 21 00 00       	push   0x2158
c0014728:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001472c:	e8 c4 e0 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0014731:	83 c4 10             	add    esp,0x10
c0014734:	83 c4 0c             	add    esp,0xc
c0014737:	c3                   	ret    

c0014738 <displayDebugInfo(regs*)>:
c0014738:	55                   	push   ebp
c0014739:	57                   	push   edi
c001473a:	56                   	push   esi
c001473b:	53                   	push   ebx
c001473c:	83 ec 24             	sub    esp,0x24
c001473f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014743:	0f 20 c2             	mov    edx,cr0
c0014746:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001474a:	0f 20 d7             	mov    edi,cr2
c001474d:	0f 20 de             	mov    esi,cr3
c0014750:	0f 20 e5             	mov    ebp,cr4
c0014753:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014756:	68 42 9b 02 c0       	push   0xc0029b42
c001475b:	e8 75 e1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014760:	58                   	pop    eax
c0014761:	5a                   	pop    edx
c0014762:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014765:	68 4d 9b 02 c0       	push   0xc0029b4d
c001476a:	e8 66 e1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001476f:	59                   	pop    ecx
c0014770:	58                   	pop    eax
c0014771:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014774:	68 58 9b 02 c0       	push   0xc0029b58
c0014779:	e8 57 e1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001477e:	58                   	pop    eax
c001477f:	5a                   	pop    edx
c0014780:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014783:	68 63 9b 02 c0       	push   0xc0029b63
c0014788:	e8 48 e1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001478d:	59                   	pop    ecx
c001478e:	58                   	pop    eax
c001478f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014792:	68 6e 9b 02 c0       	push   0xc0029b6e
c0014797:	e8 39 e1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001479c:	58                   	pop    eax
c001479d:	5a                   	pop    edx
c001479e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00147a1:	68 79 9b 02 c0       	push   0xc0029b79
c00147a6:	e8 2a e1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00147ab:	59                   	pop    ecx
c00147ac:	58                   	pop    eax
c00147ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147b0:	68 84 9b 02 c0       	push   0xc0029b84
c00147b5:	e8 1b e1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00147ba:	58                   	pop    eax
c00147bb:	5a                   	pop    edx
c00147bc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00147bf:	68 8f 9b 02 c0       	push   0xc0029b8f
c00147c4:	e8 0c e1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00147c9:	59                   	pop    ecx
c00147ca:	58                   	pop    eax
c00147cb:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147ce:	68 9a 9b 02 c0       	push   0xc0029b9a
c00147d3:	e8 fd e0 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00147d8:	58                   	pop    eax
c00147d9:	5a                   	pop    edx
c00147da:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00147dd:	68 a9 9b 02 c0       	push   0xc0029ba9
c00147e2:	e8 ee e0 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00147e7:	59                   	pop    ecx
c00147e8:	58                   	pop    eax
c00147e9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00147ec:	68 b4 9b 02 c0       	push   0xc0029bb4
c00147f1:	e8 df e0 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00147f6:	58                   	pop    eax
c00147f7:	5a                   	pop    edx
c00147f8:	57                   	push   edi
c00147f9:	68 bf 9b 02 c0       	push   0xc0029bbf
c00147fe:	e8 d2 e0 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014803:	59                   	pop    ecx
c0014804:	58                   	pop    eax
c0014805:	56                   	push   esi
c0014806:	68 ca 9b 02 c0       	push   0xc0029bca
c001480b:	e8 c5 e0 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014810:	58                   	pop    eax
c0014811:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014816:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001481c:	e8 76 c2 ff ff       	call   c0010a97 <setActiveTerminal(VgaText*)>
c0014821:	58                   	pop    eax
c0014822:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014825:	5a                   	pop    edx
c0014826:	c1 e0 05             	shl    eax,0x5
c0014829:	05 c0 be 02 c0       	add    eax,0xc002bec0
c001482e:	50                   	push   eax
c001482f:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014834:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483a:	e8 77 c6 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c001483f:	59                   	pop    ecx
c0014840:	58                   	pop    eax
c0014841:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014846:	68 d5 9b 02 c0       	push   0xc0029bd5
c001484b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014851:	e8 60 c6 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014856:	58                   	pop    eax
c0014857:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001485c:	5a                   	pop    edx
c001485d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014860:	83 c0 0c             	add    eax,0xc
c0014863:	50                   	push   eax
c0014864:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014869:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001486f:	e8 42 c6 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014874:	59                   	pop    ecx
c0014875:	58                   	pop    eax
c0014876:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c001487b:	68 de 9b 02 c0       	push   0xc0029bde
c0014880:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014886:	e8 2b c6 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c001488b:	58                   	pop    eax
c001488c:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014891:	5a                   	pop    edx
c0014892:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014895:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001489b:	e8 3c c6 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c00148a0:	59                   	pop    ecx
c00148a1:	58                   	pop    eax
c00148a2:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c00148a7:	68 e6 9b 02 c0       	push   0xc0029be6
c00148ac:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b2:	e8 ff c5 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c00148b7:	58                   	pop    eax
c00148b8:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c00148bd:	5a                   	pop    edx
c00148be:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00148c1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c7:	e8 10 c6 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c00148cc:	59                   	pop    ecx
c00148cd:	58                   	pop    eax
c00148ce:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c00148d3:	68 ee 9b 02 c0       	push   0xc0029bee
c00148d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148de:	e8 d3 c5 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c00148e3:	58                   	pop    eax
c00148e4:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c00148e9:	5a                   	pop    edx
c00148ea:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00148ed:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f3:	e8 e4 c5 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c00148f8:	59                   	pop    ecx
c00148f9:	58                   	pop    eax
c00148fa:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c00148ff:	68 f6 9b 02 c0       	push   0xc0029bf6
c0014904:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001490a:	e8 a7 c5 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c001490f:	58                   	pop    eax
c0014910:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014915:	5a                   	pop    edx
c0014916:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014919:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491f:	e8 b8 c5 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014924:	59                   	pop    ecx
c0014925:	58                   	pop    eax
c0014926:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c001492b:	68 fe 9b 02 c0       	push   0xc0029bfe
c0014930:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014936:	e8 7b c5 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c001493b:	58                   	pop    eax
c001493c:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014941:	5a                   	pop    edx
c0014942:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014945:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001494b:	e8 8c c5 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014950:	59                   	pop    ecx
c0014951:	58                   	pop    eax
c0014952:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014957:	68 06 9c 02 c0       	push   0xc0029c06
c001495c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014962:	e8 4f c5 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014967:	58                   	pop    eax
c0014968:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c001496d:	5a                   	pop    edx
c001496e:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014971:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014977:	e8 60 c5 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c001497c:	59                   	pop    ecx
c001497d:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014982:	5b                   	pop    ebx
c0014983:	68 0e 9c 02 c0       	push   0xc0029c0e
c0014988:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001498e:	e8 23 c5 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014993:	58                   	pop    eax
c0014994:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014999:	5a                   	pop    edx
c001499a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001499e:	52                   	push   edx
c001499f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a5:	e8 32 c5 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c00149aa:	59                   	pop    ecx
c00149ab:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c00149b0:	5b                   	pop    ebx
c00149b1:	68 17 9c 02 c0       	push   0xc0029c17
c00149b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149bc:	e8 f5 c4 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c00149c1:	58                   	pop    eax
c00149c2:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c00149c7:	5a                   	pop    edx
c00149c8:	57                   	push   edi
c00149c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149cf:	e8 08 c5 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c00149d4:	59                   	pop    ecx
c00149d5:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c00149da:	5b                   	pop    ebx
c00149db:	68 1f 9c 02 c0       	push   0xc0029c1f
c00149e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e6:	e8 cb c4 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c00149eb:	5f                   	pop    edi
c00149ec:	58                   	pop    eax
c00149ed:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c00149f2:	56                   	push   esi
c00149f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149f9:	e8 de c4 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c00149fe:	58                   	pop    eax
c00149ff:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014a04:	5a                   	pop    edx
c0014a05:	68 27 9c 02 c0       	push   0xc0029c27
c0014a0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a10:	e8 a1 c4 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014a15:	59                   	pop    ecx
c0014a16:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014a1b:	5b                   	pop    ebx
c0014a1c:	55                   	push   ebp
c0014a1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a23:	e8 b4 c4 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014a28:	5e                   	pop    esi
c0014a29:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014a2e:	5f                   	pop    edi
c0014a2f:	68 2f 9c 02 c0       	push   0xc0029c2f
c0014a34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a3a:	e8 77 c4 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014a3f:	0f 21 c0             	mov    eax,db0
c0014a42:	5d                   	pop    ebp
c0014a43:	5a                   	pop    edx
c0014a44:	50                   	push   eax
c0014a45:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014a4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a50:	e8 87 c4 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014a55:	59                   	pop    ecx
c0014a56:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014a5b:	5b                   	pop    ebx
c0014a5c:	68 38 9c 02 c0       	push   0xc0029c38
c0014a61:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a67:	e8 4a c4 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014a6c:	0f 21 c8             	mov    eax,db1
c0014a6f:	5e                   	pop    esi
c0014a70:	5f                   	pop    edi
c0014a71:	50                   	push   eax
c0014a72:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014a77:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a7d:	e8 5a c4 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014a82:	5d                   	pop    ebp
c0014a83:	58                   	pop    eax
c0014a84:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014a89:	68 40 9c 02 c0       	push   0xc0029c40
c0014a8e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a94:	e8 1d c4 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014a99:	0f 21 d0             	mov    eax,db2
c0014a9c:	5a                   	pop    edx
c0014a9d:	59                   	pop    ecx
c0014a9e:	50                   	push   eax
c0014a9f:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014aa4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aaa:	e8 2d c4 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014aaf:	5b                   	pop    ebx
c0014ab0:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014ab5:	5e                   	pop    esi
c0014ab6:	68 48 9c 02 c0       	push   0xc0029c48
c0014abb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac1:	e8 f0 c3 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014ac6:	0f 21 d8             	mov    eax,db3
c0014ac9:	5f                   	pop    edi
c0014aca:	5d                   	pop    ebp
c0014acb:	50                   	push   eax
c0014acc:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014ad1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad7:	e8 00 c4 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014adc:	58                   	pop    eax
c0014add:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014ae2:	5a                   	pop    edx
c0014ae3:	68 50 9c 02 c0       	push   0xc0029c50
c0014ae8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aee:	e8 c3 c3 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014af3:	0f 21 f0             	mov    eax,db6
c0014af6:	59                   	pop    ecx
c0014af7:	5b                   	pop    ebx
c0014af8:	50                   	push   eax
c0014af9:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014afe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b04:	e8 d3 c3 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014b09:	5e                   	pop    esi
c0014b0a:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014b0f:	5f                   	pop    edi
c0014b10:	68 58 9c 02 c0       	push   0xc0029c58
c0014b15:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b1b:	e8 96 c3 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0014b20:	0f 21 f8             	mov    eax,db7
c0014b23:	5d                   	pop    ebp
c0014b24:	5a                   	pop    edx
c0014b25:	50                   	push   eax
c0014b26:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0014b2b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b31:	e8 a6 c3 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0014b36:	fa                   	cli    
c0014b37:	f4                   	hlt    
c0014b38:	83 c4 10             	add    esp,0x10
c0014b3b:	eb fe                	jmp    c0014b3b <displayDebugInfo(regs*)+0x403>

c0014b3d <x87EmulHandler(regs*, void*)>:
c0014b3d:	53                   	push   ebx
c0014b3e:	83 ec 14             	sub    esp,0x14
c0014b41:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014b45:	53                   	push   ebx
c0014b46:	e8 ad a2 00 00       	call   c001edf8 <Vm::x87Handler(regs*)>
c0014b4b:	83 c4 10             	add    esp,0x10
c0014b4e:	84 c0                	test   al,al
c0014b50:	74 05                	je     c0014b57 <x87EmulHandler(regs*, void*)+0x1a>
c0014b52:	83 c4 08             	add    esp,0x8
c0014b55:	5b                   	pop    ebx
c0014b56:	c3                   	ret    
c0014b57:	83 ec 0c             	sub    esp,0xc
c0014b5a:	68 60 9c 02 c0       	push   0xc0029c60
c0014b5f:	e8 71 dd ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014b64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b67:	e8 cc fb ff ff       	call   c0014738 <displayDebugInfo(regs*)>

c0014b6c <gpFault(regs*, void*)>:
c0014b6c:	53                   	push   ebx
c0014b6d:	83 ec 14             	sub    esp,0x14
c0014b70:	c7 05 b0 d0 02 c0 75 e1 01 c0 	mov    DWORD PTR ds:0xc002d0b0,0xc001e175
c0014b7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014b7e:	53                   	push   ebx
c0014b7f:	e8 f1 95 00 00       	call   c001e175 <Vm::faultHandler(regs*)>
c0014b84:	83 c4 10             	add    esp,0x10
c0014b87:	84 c0                	test   al,al
c0014b89:	74 05                	je     c0014b90 <gpFault(regs*, void*)+0x24>
c0014b8b:	83 c4 08             	add    esp,0x8
c0014b8e:	5b                   	pop    ebx
c0014b8f:	c3                   	ret    
c0014b90:	83 ec 0c             	sub    esp,0xc
c0014b93:	68 76 9c 02 c0       	push   0xc0029c76
c0014b98:	e8 38 dd ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014b9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ba0:	e8 93 fb ff ff       	call   c0014738 <displayDebugInfo(regs*)>

c0014ba5 <pgFault(regs*, void*)>:
c0014ba5:	83 ec 18             	sub    esp,0x18
c0014ba8:	68 91 9c 02 c0       	push   0xc0029c91
c0014bad:	e8 23 dd ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014bb2:	58                   	pop    eax
c0014bb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014bb7:	e8 7c fb ff ff       	call   c0014738 <displayDebugInfo(regs*)>

c0014bbc <otherISRHandler(regs*, void*)>:
c0014bbc:	53                   	push   ebx
c0014bbd:	83 ec 0c             	sub    esp,0xc
c0014bc0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014bc4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014bc7:	50                   	push   eax
c0014bc8:	50                   	push   eax
c0014bc9:	68 9e 9c 02 c0       	push   0xc0029c9e
c0014bce:	e8 02 dd ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014bd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014bd6:	e8 5d fb ff ff       	call   c0014738 <displayDebugInfo(regs*)>

c0014bdb <opcodeFault(regs*, void*)>:
c0014bdb:	55                   	push   ebp
c0014bdc:	89 e5                	mov    ebp,esp
c0014bde:	56                   	push   esi
c0014bdf:	53                   	push   ebx
c0014be0:	83 ec 40             	sub    esp,0x40
c0014be3:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0014be8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014bee:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014bf4:	84 c0                	test   al,al
c0014bf6:	74 24                	je     c0014c1c <opcodeFault(regs*, void*)+0x41>
c0014bf8:	83 ec 0c             	sub    esp,0xc
c0014bfb:	68 bc 9c 02 c0       	push   0xc0029cbc
c0014c00:	e8 d0 dc ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014c05:	83 c4 10             	add    esp,0x10
c0014c08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c0b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c0e:	8d 50 19             	lea    edx,[eax+0x19]
c0014c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c14:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c17:	e9 77 05 00 00       	jmp    c0015193 <opcodeFault(regs*, void*)+0x5b8>
c0014c1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c22:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014c25:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014c29:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014c2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c30:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c33:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014c36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c39:	8a 00                	mov    al,BYTE PTR [eax]
c0014c3b:	3c f0                	cmp    al,0xf0
c0014c3d:	75 17                	jne    c0014c56 <opcodeFault(regs*, void*)+0x7b>
c0014c3f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c45:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c48:	8d 50 01             	lea    edx,[eax+0x1]
c0014c4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c51:	e9 da 00 00 00       	jmp    c0014d30 <opcodeFault(regs*, void*)+0x155>
c0014c56:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c59:	8a 00                	mov    al,BYTE PTR [eax]
c0014c5b:	3c f2                	cmp    al,0xf2
c0014c5d:	74 09                	je     c0014c68 <opcodeFault(regs*, void*)+0x8d>
c0014c5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c62:	8a 00                	mov    al,BYTE PTR [eax]
c0014c64:	3c f3                	cmp    al,0xf3
c0014c66:	75 1b                	jne    c0014c83 <opcodeFault(regs*, void*)+0xa8>
c0014c68:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c6c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c72:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c75:	8d 50 01             	lea    edx,[eax+0x1]
c0014c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c7e:	e9 ad 00 00 00       	jmp    c0014d30 <opcodeFault(regs*, void*)+0x155>
c0014c83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c86:	8a 00                	mov    al,BYTE PTR [eax]
c0014c88:	3c 66                	cmp    al,0x66
c0014c8a:	75 1f                	jne    c0014cab <opcodeFault(regs*, void*)+0xd0>
c0014c8c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c90:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014c94:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c9a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c9d:	8d 50 01             	lea    edx,[eax+0x1]
c0014ca0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ca3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ca6:	e9 85 00 00 00       	jmp    c0014d30 <opcodeFault(regs*, void*)+0x155>
c0014cab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cae:	8a 00                	mov    al,BYTE PTR [eax]
c0014cb0:	3c 67                	cmp    al,0x67
c0014cb2:	75 18                	jne    c0014ccc <opcodeFault(regs*, void*)+0xf1>
c0014cb4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014cb8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cbe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cc1:	8d 50 01             	lea    edx,[eax+0x1]
c0014cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cca:	eb 64                	jmp    c0014d30 <opcodeFault(regs*, void*)+0x155>
c0014ccc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ccf:	8a 00                	mov    al,BYTE PTR [eax]
c0014cd1:	3c 2e                	cmp    al,0x2e
c0014cd3:	74 09                	je     c0014cde <opcodeFault(regs*, void*)+0x103>
c0014cd5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cd8:	8a 00                	mov    al,BYTE PTR [eax]
c0014cda:	3c 3e                	cmp    al,0x3e
c0014cdc:	75 18                	jne    c0014cf6 <opcodeFault(regs*, void*)+0x11b>
c0014cde:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ce2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ce5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ceb:	8d 50 01             	lea    edx,[eax+0x1]
c0014cee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cf4:	eb 3a                	jmp    c0014d30 <opcodeFault(regs*, void*)+0x155>
c0014cf6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cf9:	8a 00                	mov    al,BYTE PTR [eax]
c0014cfb:	3c 36                	cmp    al,0x36
c0014cfd:	74 1b                	je     c0014d1a <opcodeFault(regs*, void*)+0x13f>
c0014cff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d02:	8a 00                	mov    al,BYTE PTR [eax]
c0014d04:	3c 26                	cmp    al,0x26
c0014d06:	74 12                	je     c0014d1a <opcodeFault(regs*, void*)+0x13f>
c0014d08:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d0b:	8a 00                	mov    al,BYTE PTR [eax]
c0014d0d:	3c 64                	cmp    al,0x64
c0014d0f:	74 09                	je     c0014d1a <opcodeFault(regs*, void*)+0x13f>
c0014d11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d14:	8a 00                	mov    al,BYTE PTR [eax]
c0014d16:	3c 65                	cmp    al,0x65
c0014d18:	75 16                	jne    c0014d30 <opcodeFault(regs*, void*)+0x155>
c0014d1a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d1e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d24:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d27:	8d 50 01             	lea    edx,[eax+0x1]
c0014d2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d33:	8a 00                	mov    al,BYTE PTR [eax]
c0014d35:	3c 0f                	cmp    al,0xf
c0014d37:	0f 85 ad 00 00 00    	jne    c0014dea <opcodeFault(regs*, void*)+0x20f>
c0014d3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d40:	40                   	inc    eax
c0014d41:	8a 00                	mov    al,BYTE PTR [eax]
c0014d43:	3c c2                	cmp    al,0xc2
c0014d45:	74 0e                	je     c0014d55 <opcodeFault(regs*, void*)+0x17a>
c0014d47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d4a:	40                   	inc    eax
c0014d4b:	8a 00                	mov    al,BYTE PTR [eax]
c0014d4d:	3c c3                	cmp    al,0xc3
c0014d4f:	0f 85 95 00 00 00    	jne    c0014dea <opcodeFault(regs*, void*)+0x20f>
c0014d55:	83 ec 0c             	sub    esp,0xc
c0014d58:	68 df 9c 02 c0       	push   0xc0029cdf
c0014d5d:	e8 73 db ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0014d62:	83 c4 10             	add    esp,0x10
c0014d65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d68:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d6b:	8d 50 01             	lea    edx,[eax+0x1]
c0014d6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d71:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d74:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d7a:	8a 00                	mov    al,BYTE PTR [eax]
c0014d7c:	8d 50 fe             	lea    edx,[eax-0x2]
c0014d7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d82:	88 10                	mov    BYTE PTR [eax],dl
c0014d84:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014d87:	50                   	push   eax
c0014d88:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014d8b:	50                   	push   eax
c0014d8c:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014d8f:	50                   	push   eax
c0014d90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d93:	e8 4e 46 00 00       	call   c00193e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d98:	83 c4 10             	add    esp,0x10
c0014d9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d9e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014da1:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014da4:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014da7:	01 d0                	add    eax,edx
c0014da9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014dac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014daf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014db2:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014db5:	48                   	dec    eax
c0014db6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014db9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014dbf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc5:	83 ec 04             	sub    esp,0x4
c0014dc8:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014dcb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014dce:	50                   	push   eax
c0014dcf:	e8 e0 b3 fe ff       	call   c00001b4 <voodooXADD>
c0014dd4:	83 c4 10             	add    esp,0x10
c0014dd7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014dda:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014ddd:	01 c2                	add    edx,eax
c0014ddf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014de5:	e9 a9 03 00 00       	jmp    c0015193 <opcodeFault(regs*, void*)+0x5b8>
c0014dea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ded:	8a 00                	mov    al,BYTE PTR [eax]
c0014def:	3c 0f                	cmp    al,0xf
c0014df1:	0f 85 8b 01 00 00    	jne    c0014f82 <opcodeFault(regs*, void*)+0x3a7>
c0014df7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dfa:	40                   	inc    eax
c0014dfb:	8a 00                	mov    al,BYTE PTR [eax]
c0014dfd:	3c c7                	cmp    al,0xc7
c0014dff:	0f 86 7d 01 00 00    	jbe    c0014f82 <opcodeFault(regs*, void*)+0x3a7>
c0014e05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e08:	40                   	inc    eax
c0014e09:	8a 00                	mov    al,BYTE PTR [eax]
c0014e0b:	3c cf                	cmp    al,0xcf
c0014e0d:	0f 87 6f 01 00 00    	ja     c0014f82 <opcodeFault(regs*, void*)+0x3a7>
c0014e13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e16:	40                   	inc    eax
c0014e17:	8a 00                	mov    al,BYTE PTR [eax]
c0014e19:	83 c0 38             	add    eax,0x38
c0014e1c:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014e1f:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e23:	75 0b                	jne    c0014e30 <opcodeFault(regs*, void*)+0x255>
c0014e25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e28:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014e2b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e2e:	eb 75                	jmp    c0014ea5 <opcodeFault(regs*, void*)+0x2ca>
c0014e30:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e34:	75 0b                	jne    c0014e41 <opcodeFault(regs*, void*)+0x266>
c0014e36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e39:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014e3c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e3f:	eb 64                	jmp    c0014ea5 <opcodeFault(regs*, void*)+0x2ca>
c0014e41:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e45:	75 0b                	jne    c0014e52 <opcodeFault(regs*, void*)+0x277>
c0014e47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014e4d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e50:	eb 53                	jmp    c0014ea5 <opcodeFault(regs*, void*)+0x2ca>
c0014e52:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e56:	75 0b                	jne    c0014e63 <opcodeFault(regs*, void*)+0x288>
c0014e58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014e5e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e61:	eb 42                	jmp    c0014ea5 <opcodeFault(regs*, void*)+0x2ca>
c0014e63:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e67:	75 0b                	jne    c0014e74 <opcodeFault(regs*, void*)+0x299>
c0014e69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6c:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014e6f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e72:	eb 31                	jmp    c0014ea5 <opcodeFault(regs*, void*)+0x2ca>
c0014e74:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e78:	75 0b                	jne    c0014e85 <opcodeFault(regs*, void*)+0x2aa>
c0014e7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014e80:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e83:	eb 20                	jmp    c0014ea5 <opcodeFault(regs*, void*)+0x2ca>
c0014e85:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e89:	75 0b                	jne    c0014e96 <opcodeFault(regs*, void*)+0x2bb>
c0014e8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014e91:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014e94:	eb 0f                	jmp    c0014ea5 <opcodeFault(regs*, void*)+0x2ca>
c0014e96:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e9a:	75 09                	jne    c0014ea5 <opcodeFault(regs*, void*)+0x2ca>
c0014e9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014ea2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ea5:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014ea9:	74 10                	je     c0014ebb <opcodeFault(regs*, void*)+0x2e0>
c0014eab:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014eb2:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014eb9:	eb 2d                	jmp    c0014ee8 <opcodeFault(regs*, void*)+0x30d>
c0014ebb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ebe:	c1 e0 18             	shl    eax,0x18
c0014ec1:	89 c2                	mov    edx,eax
c0014ec3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ec6:	c1 e0 08             	shl    eax,0x8
c0014ec9:	25 00 00 ff 00       	and    eax,0xff0000
c0014ece:	09 c2                	or     edx,eax
c0014ed0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ed3:	c1 e8 08             	shr    eax,0x8
c0014ed6:	25 00 ff 00 00       	and    eax,0xff00
c0014edb:	09 c2                	or     edx,eax
c0014edd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ee0:	c1 e8 18             	shr    eax,0x18
c0014ee3:	09 d0                	or     eax,edx
c0014ee5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ee8:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014eec:	75 0b                	jne    c0014ef9 <opcodeFault(regs*, void*)+0x31e>
c0014eee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ef4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014ef7:	eb 75                	jmp    c0014f6e <opcodeFault(regs*, void*)+0x393>
c0014ef9:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014efd:	75 0b                	jne    c0014f0a <opcodeFault(regs*, void*)+0x32f>
c0014eff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f02:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f05:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014f08:	eb 64                	jmp    c0014f6e <opcodeFault(regs*, void*)+0x393>
c0014f0a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f0e:	75 0b                	jne    c0014f1b <opcodeFault(regs*, void*)+0x340>
c0014f10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f13:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f16:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f19:	eb 53                	jmp    c0014f6e <opcodeFault(regs*, void*)+0x393>
c0014f1b:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f1f:	75 0b                	jne    c0014f2c <opcodeFault(regs*, void*)+0x351>
c0014f21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f24:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f27:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014f2a:	eb 42                	jmp    c0014f6e <opcodeFault(regs*, void*)+0x393>
c0014f2c:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f30:	75 0b                	jne    c0014f3d <opcodeFault(regs*, void*)+0x362>
c0014f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f35:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f38:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014f3b:	eb 31                	jmp    c0014f6e <opcodeFault(regs*, void*)+0x393>
c0014f3d:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f41:	75 0b                	jne    c0014f4e <opcodeFault(regs*, void*)+0x373>
c0014f43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f46:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f49:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014f4c:	eb 20                	jmp    c0014f6e <opcodeFault(regs*, void*)+0x393>
c0014f4e:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f52:	75 0b                	jne    c0014f5f <opcodeFault(regs*, void*)+0x384>
c0014f54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f57:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f5a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014f5d:	eb 0f                	jmp    c0014f6e <opcodeFault(regs*, void*)+0x393>
c0014f5f:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f63:	75 09                	jne    c0014f6e <opcodeFault(regs*, void*)+0x393>
c0014f65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f68:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014f6b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f71:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f74:	8d 50 02             	lea    edx,[eax+0x2]
c0014f77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f7a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f7d:	e9 11 02 00 00       	jmp    c0015193 <opcodeFault(regs*, void*)+0x5b8>
c0014f82:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f85:	8a 00                	mov    al,BYTE PTR [eax]
c0014f87:	3c 0f                	cmp    al,0xf
c0014f89:	0f 85 76 01 00 00    	jne    c0015105 <opcodeFault(regs*, void*)+0x52a>
c0014f8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f92:	40                   	inc    eax
c0014f93:	8a 00                	mov    al,BYTE PTR [eax]
c0014f95:	3c c7                	cmp    al,0xc7
c0014f97:	0f 85 68 01 00 00    	jne    c0015105 <opcodeFault(regs*, void*)+0x52a>
c0014f9d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fa6:	8d 50 01             	lea    edx,[eax+0x1]
c0014fa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fac:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014faf:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014fb2:	50                   	push   eax
c0014fb3:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014fb6:	50                   	push   eax
c0014fb7:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014fba:	50                   	push   eax
c0014fbb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014fbe:	e8 23 44 00 00       	call   c00193e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014fc3:	83 c4 10             	add    esp,0x10
c0014fc6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014fc9:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014fcc:	83 f0 01             	xor    eax,0x1
c0014fcf:	84 c0                	test   al,al
c0014fd1:	0f 84 2e 01 00 00    	je     c0015105 <opcodeFault(regs*, void*)+0x52a>
c0014fd7:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014fda:	3c 01                	cmp    al,0x1
c0014fdc:	0f 85 23 01 00 00    	jne    c0015105 <opcodeFault(regs*, void*)+0x52a>
c0014fe2:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014fe5:	83 f0 01             	xor    eax,0x1
c0014fe8:	84 c0                	test   al,al
c0014fea:	0f 84 15 01 00 00    	je     c0015105 <opcodeFault(regs*, void*)+0x52a>
c0014ff0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014ff6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014ff9:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015000:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015003:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015006:	89 c2                	mov    edx,eax
c0015008:	b8 00 00 00 00       	mov    eax,0x0
c001500d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015010:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015016:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015019:	ba 00 00 00 00       	mov    edx,0x0
c001501e:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015021:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015024:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015027:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001502a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001502d:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015034:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015037:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001503a:	89 c2                	mov    edx,eax
c001503c:	b8 00 00 00 00       	mov    eax,0x0
c0015041:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015044:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001504d:	ba 00 00 00 00       	mov    edx,0x0
c0015052:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015055:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015058:	e8 07 81 00 00       	call   c001d164 <lockScheduler()>
c001505d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015060:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015063:	8b 00                	mov    eax,DWORD PTR [eax]
c0015065:	89 c1                	mov    ecx,eax
c0015067:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001506a:	89 cb                	mov    ebx,ecx
c001506c:	89 d0                	mov    eax,edx
c001506e:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015071:	89 c6                	mov    esi,eax
c0015073:	89 f0                	mov    eax,esi
c0015075:	09 d8                	or     eax,ebx
c0015077:	85 c0                	test   eax,eax
c0015079:	75 21                	jne    c001509c <opcodeFault(regs*, void*)+0x4c1>
c001507b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001507e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015081:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015084:	89 01                	mov    DWORD PTR [ecx],eax
c0015086:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001508f:	83 c8 40             	or     eax,0x40
c0015092:	89 c2                	mov    edx,eax
c0015094:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015097:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001509a:	eb 3e                	jmp    c00150da <opcodeFault(regs*, void*)+0x4ff>
c001509c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001509f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00150a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00150a4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150a7:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00150aa:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00150ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00150b3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00150b6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00150b9:	89 d0                	mov    eax,edx
c00150bb:	31 d2                	xor    edx,edx
c00150bd:	89 c3                	mov    ebx,eax
c00150bf:	89 d6                	mov    esi,edx
c00150c1:	89 da                	mov    edx,ebx
c00150c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c6:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00150c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00150cf:	83 e0 bf             	and    eax,0xffffffbf
c00150d2:	89 c2                	mov    edx,eax
c00150d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d7:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00150da:	e8 87 80 00 00       	call   c001d166 <unlockScheduler()>
c00150df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150e5:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00150e8:	01 c2                	add    edx,eax
c00150ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ed:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150f0:	83 ec 0c             	sub    esp,0xc
c00150f3:	68 ee 9c 02 c0       	push   0xc0029cee
c00150f8:	e8 d8 d7 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00150fd:	83 c4 10             	add    esp,0x10
c0015100:	e9 8e 00 00 00       	jmp    c0015193 <opcodeFault(regs*, void*)+0x5b8>
c0015105:	83 ec 0c             	sub    esp,0xc
c0015108:	68 01 9d 02 c0       	push   0xc0029d01
c001510d:	e8 c3 d7 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0015112:	83 c4 10             	add    esp,0x10
c0015115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015118:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001511b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001511e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015121:	c1 e0 04             	shl    eax,0x4
c0015124:	01 d0                	add    eax,edx
c0015126:	83 c0 03             	add    eax,0x3
c0015129:	8a 00                	mov    al,BYTE PTR [eax]
c001512b:	0f b6 d8             	movzx  ebx,al
c001512e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015131:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015134:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015137:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001513a:	c1 e0 04             	shl    eax,0x4
c001513d:	01 d0                	add    eax,edx
c001513f:	83 c0 02             	add    eax,0x2
c0015142:	8a 00                	mov    al,BYTE PTR [eax]
c0015144:	0f b6 c8             	movzx  ecx,al
c0015147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001514d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015150:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015153:	c1 e0 04             	shl    eax,0x4
c0015156:	01 d0                	add    eax,edx
c0015158:	40                   	inc    eax
c0015159:	8a 00                	mov    al,BYTE PTR [eax]
c001515b:	0f b6 d0             	movzx  edx,al
c001515e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015161:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015167:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001516a:	c1 e0 04             	shl    eax,0x4
c001516d:	01 f0                	add    eax,esi
c001516f:	8a 00                	mov    al,BYTE PTR [eax]
c0015171:	0f b6 c0             	movzx  eax,al
c0015174:	83 ec 0c             	sub    esp,0xc
c0015177:	53                   	push   ebx
c0015178:	51                   	push   ecx
c0015179:	52                   	push   edx
c001517a:	50                   	push   eax
c001517b:	68 14 9d 02 c0       	push   0xc0029d14
c0015180:	e8 50 d7 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0015185:	83 c4 20             	add    esp,0x20
c0015188:	83 ec 0c             	sub    esp,0xc
c001518b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001518e:	e8 a5 f5 ff ff       	call   c0014738 <displayDebugInfo(regs*)>
c0015193:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015196:	5b                   	pop    ebx
c0015197:	5e                   	pop    esi
c0015198:	5d                   	pop    ebp
c0015199:	c3                   	ret    

c001519a <displayProgramFault(char const*)>:
c001519a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001519f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151a2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00151a8:	85 c0                	test   eax,eax
c00151aa:	74 15                	je     c00151c1 <displayProgramFault(char const*)+0x27>
c00151ac:	83 ec 0c             	sub    esp,0xc
c00151af:	6a 04                	push   0x4
c00151b1:	6a 0f                	push   0xf
c00151b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151b7:	50                   	push   eax
c00151b8:	e8 bb b9 ff ff       	call   c0010b78 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00151bd:	83 c4 1c             	add    esp,0x1c
c00151c0:	c3                   	ret    
c00151c1:	c3                   	ret    

c00151c2 <setupInterruptController()>:
c00151c2:	55                   	push   ebp
c00151c3:	89 e5                	mov    ebp,esp
c00151c5:	53                   	push   ebx
c00151c6:	83 ec 24             	sub    esp,0x24
c00151c9:	b8 00 00 00 00       	mov    eax,0x0
c00151ce:	85 c0                	test   eax,eax
c00151d0:	0f 95 c0             	setne  al
c00151d3:	84 c0                	test   al,al
c00151d5:	74 5b                	je     c0015232 <setupInterruptController()+0x70>
c00151d7:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00151de:	83 ec 0c             	sub    esp,0xc
c00151e1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00151e4:	e8 3b a4 ff ff       	call   c000f624 <malloc>
c00151e9:	83 c4 10             	add    esp,0x10
c00151ec:	89 c3                	mov    ebx,eax
c00151ee:	83 ec 0c             	sub    esp,0xc
c00151f1:	53                   	push   ebx
c00151f2:	e8 53 f5 00 00       	call   c002474a <APIC::APIC()>
c00151f7:	83 c4 10             	add    esp,0x10
c00151fa:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00151fd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015200:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015203:	8b 00                	mov    eax,DWORD PTR [eax]
c0015205:	83 c0 08             	add    eax,0x8
c0015208:	8b 00                	mov    eax,DWORD PTR [eax]
c001520a:	6a 00                	push   0x0
c001520c:	6a 00                	push   0x0
c001520e:	6a 00                	push   0x0
c0015210:	52                   	push   edx
c0015211:	ff d0                	call   eax
c0015213:	83 c4 10             	add    esp,0x10
c0015216:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c001521b:	83 ec 08             	sub    esp,0x8
c001521e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015221:	50                   	push   eax
c0015222:	e8 d5 ea ff ff       	call   c0013cfc <Device::addChild(Device*)>
c0015227:	83 c4 10             	add    esp,0x10
c001522a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001522d:	e9 52 03 00 00       	jmp    c0015584 <setupInterruptController()+0x3c2>
c0015232:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0015237:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001523d:	83 e0 01             	and    eax,0x1
c0015240:	84 c0                	test   al,al
c0015242:	0f 95 c0             	setne  al
c0015245:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015248:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001524f:	83 ec 0c             	sub    esp,0xc
c0015252:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015255:	e8 ca a3 ff ff       	call   c000f624 <malloc>
c001525a:	83 c4 10             	add    esp,0x10
c001525d:	89 c3                	mov    ebx,eax
c001525f:	83 ec 0c             	sub    esp,0xc
c0015262:	53                   	push   ebx
c0015263:	e8 3a fa 00 00       	call   c0024ca2 <PIC::PIC()>
c0015268:	83 c4 10             	add    esp,0x10
c001526b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001526e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015271:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015274:	8b 00                	mov    eax,DWORD PTR [eax]
c0015276:	83 c0 08             	add    eax,0x8
c0015279:	8b 00                	mov    eax,DWORD PTR [eax]
c001527b:	6a 00                	push   0x0
c001527d:	6a 00                	push   0x0
c001527f:	6a 00                	push   0x0
c0015281:	52                   	push   edx
c0015282:	ff d0                	call   eax
c0015284:	83 c4 10             	add    esp,0x10
c0015287:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001528b:	74 73                	je     c0015300 <setupInterruptController()+0x13e>
c001528d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015290:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015293:	8b 00                	mov    eax,DWORD PTR [eax]
c0015295:	83 c0 0c             	add    eax,0xc
c0015298:	8b 00                	mov    eax,DWORD PTR [eax]
c001529a:	6a 00                	push   0x0
c001529c:	6a 00                	push   0x0
c001529e:	6a 00                	push   0x0
c00152a0:	52                   	push   edx
c00152a1:	ff d0                	call   eax
c00152a3:	83 c4 10             	add    esp,0x10
c00152a6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00152aa:	74 15                	je     c00152c1 <setupInterruptController()+0xff>
c00152ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152af:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b1:	83 c0 04             	add    eax,0x4
c00152b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b6:	83 ec 0c             	sub    esp,0xc
c00152b9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152bc:	ff d0                	call   eax
c00152be:	83 c4 10             	add    esp,0x10
c00152c1:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00152c8:	83 ec 0c             	sub    esp,0xc
c00152cb:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00152ce:	e8 51 a3 ff ff       	call   c000f624 <malloc>
c00152d3:	83 c4 10             	add    esp,0x10
c00152d6:	89 c3                	mov    ebx,eax
c00152d8:	83 ec 0c             	sub    esp,0xc
c00152db:	53                   	push   ebx
c00152dc:	e8 69 f4 00 00       	call   c002474a <APIC::APIC()>
c00152e1:	83 c4 10             	add    esp,0x10
c00152e4:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00152e7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00152ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ef:	83 c0 08             	add    eax,0x8
c00152f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f4:	6a 00                	push   0x0
c00152f6:	6a 00                	push   0x0
c00152f8:	6a 00                	push   0x0
c00152fa:	52                   	push   edx
c00152fb:	ff d0                	call   eax
c00152fd:	83 c4 10             	add    esp,0x10
c0015300:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0015305:	83 ec 08             	sub    esp,0x8
c0015308:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001530b:	50                   	push   eax
c001530c:	e8 eb e9 ff ff       	call   c0013cfc <Device::addChild(Device*)>
c0015311:	83 c4 10             	add    esp,0x10
c0015314:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015317:	8b 00                	mov    eax,DWORD PTR [eax]
c0015319:	83 c0 24             	add    eax,0x24
c001531c:	8b 00                	mov    eax,DWORD PTR [eax]
c001531e:	6a 00                	push   0x0
c0015320:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015325:	6a 00                	push   0x0
c0015327:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001532a:	ff d0                	call   eax
c001532c:	83 c4 10             	add    esp,0x10
c001532f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015332:	8b 00                	mov    eax,DWORD PTR [eax]
c0015334:	83 c0 24             	add    eax,0x24
c0015337:	8b 00                	mov    eax,DWORD PTR [eax]
c0015339:	6a 00                	push   0x0
c001533b:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015340:	6a 01                	push   0x1
c0015342:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015345:	ff d0                	call   eax
c0015347:	83 c4 10             	add    esp,0x10
c001534a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001534d:	8b 00                	mov    eax,DWORD PTR [eax]
c001534f:	83 c0 24             	add    eax,0x24
c0015352:	8b 00                	mov    eax,DWORD PTR [eax]
c0015354:	6a 00                	push   0x0
c0015356:	68 95 45 01 c0       	push   0xc0014595
c001535b:	6a 02                	push   0x2
c001535d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015360:	ff d0                	call   eax
c0015362:	83 c4 10             	add    esp,0x10
c0015365:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015368:	8b 00                	mov    eax,DWORD PTR [eax]
c001536a:	83 c0 24             	add    eax,0x24
c001536d:	8b 00                	mov    eax,DWORD PTR [eax]
c001536f:	6a 00                	push   0x0
c0015371:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015376:	6a 03                	push   0x3
c0015378:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001537b:	ff d0                	call   eax
c001537d:	83 c4 10             	add    esp,0x10
c0015380:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015383:	8b 00                	mov    eax,DWORD PTR [eax]
c0015385:	83 c0 24             	add    eax,0x24
c0015388:	8b 00                	mov    eax,DWORD PTR [eax]
c001538a:	6a 00                	push   0x0
c001538c:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015391:	6a 04                	push   0x4
c0015393:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015396:	ff d0                	call   eax
c0015398:	83 c4 10             	add    esp,0x10
c001539b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539e:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a0:	83 c0 24             	add    eax,0x24
c00153a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a5:	6a 00                	push   0x0
c00153a7:	68 bc 4b 01 c0       	push   0xc0014bbc
c00153ac:	6a 05                	push   0x5
c00153ae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b1:	ff d0                	call   eax
c00153b3:	83 c4 10             	add    esp,0x10
c00153b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153bb:	83 c0 24             	add    eax,0x24
c00153be:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c0:	6a 00                	push   0x0
c00153c2:	68 db 4b 01 c0       	push   0xc0014bdb
c00153c7:	6a 06                	push   0x6
c00153c9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153cc:	ff d0                	call   eax
c00153ce:	83 c4 10             	add    esp,0x10
c00153d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d6:	83 c0 24             	add    eax,0x24
c00153d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153db:	6a 00                	push   0x0
c00153dd:	68 3d 4b 01 c0       	push   0xc0014b3d
c00153e2:	6a 07                	push   0x7
c00153e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153e7:	ff d0                	call   eax
c00153e9:	83 c4 10             	add    esp,0x10
c00153ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f1:	83 c0 24             	add    eax,0x24
c00153f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f6:	6a 00                	push   0x0
c00153f8:	68 b0 43 01 c0       	push   0xc00143b0
c00153fd:	6a 08                	push   0x8
c00153ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015402:	ff d0                	call   eax
c0015404:	83 c4 10             	add    esp,0x10
c0015407:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540a:	8b 00                	mov    eax,DWORD PTR [eax]
c001540c:	83 c0 24             	add    eax,0x24
c001540f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015411:	6a 00                	push   0x0
c0015413:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015418:	6a 09                	push   0x9
c001541a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001541d:	ff d0                	call   eax
c001541f:	83 c4 10             	add    esp,0x10
c0015422:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015425:	8b 00                	mov    eax,DWORD PTR [eax]
c0015427:	83 c0 24             	add    eax,0x24
c001542a:	8b 00                	mov    eax,DWORD PTR [eax]
c001542c:	6a 00                	push   0x0
c001542e:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015433:	6a 0a                	push   0xa
c0015435:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015438:	ff d0                	call   eax
c001543a:	83 c4 10             	add    esp,0x10
c001543d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015440:	8b 00                	mov    eax,DWORD PTR [eax]
c0015442:	83 c0 24             	add    eax,0x24
c0015445:	8b 00                	mov    eax,DWORD PTR [eax]
c0015447:	6a 00                	push   0x0
c0015449:	68 bc 4b 01 c0       	push   0xc0014bbc
c001544e:	6a 0b                	push   0xb
c0015450:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015453:	ff d0                	call   eax
c0015455:	83 c4 10             	add    esp,0x10
c0015458:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001545b:	8b 00                	mov    eax,DWORD PTR [eax]
c001545d:	83 c0 24             	add    eax,0x24
c0015460:	8b 00                	mov    eax,DWORD PTR [eax]
c0015462:	6a 00                	push   0x0
c0015464:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015469:	6a 0c                	push   0xc
c001546b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001546e:	ff d0                	call   eax
c0015470:	83 c4 10             	add    esp,0x10
c0015473:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015476:	8b 00                	mov    eax,DWORD PTR [eax]
c0015478:	83 c0 24             	add    eax,0x24
c001547b:	8b 00                	mov    eax,DWORD PTR [eax]
c001547d:	6a 00                	push   0x0
c001547f:	68 6c 4b 01 c0       	push   0xc0014b6c
c0015484:	6a 0d                	push   0xd
c0015486:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015489:	ff d0                	call   eax
c001548b:	83 c4 10             	add    esp,0x10
c001548e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015491:	8b 00                	mov    eax,DWORD PTR [eax]
c0015493:	83 c0 24             	add    eax,0x24
c0015496:	8b 00                	mov    eax,DWORD PTR [eax]
c0015498:	6a 00                	push   0x0
c001549a:	68 a5 4b 01 c0       	push   0xc0014ba5
c001549f:	6a 0e                	push   0xe
c00154a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154a4:	ff d0                	call   eax
c00154a6:	83 c4 10             	add    esp,0x10
c00154a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ae:	83 c0 24             	add    eax,0x24
c00154b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b3:	6a 00                	push   0x0
c00154b5:	68 bc 4b 01 c0       	push   0xc0014bbc
c00154ba:	6a 0f                	push   0xf
c00154bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154bf:	ff d0                	call   eax
c00154c1:	83 c4 10             	add    esp,0x10
c00154c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c9:	83 c0 24             	add    eax,0x24
c00154cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ce:	6a 00                	push   0x0
c00154d0:	68 bc 4b 01 c0       	push   0xc0014bbc
c00154d5:	6a 10                	push   0x10
c00154d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154da:	ff d0                	call   eax
c00154dc:	83 c4 10             	add    esp,0x10
c00154df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e4:	83 c0 24             	add    eax,0x24
c00154e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154e9:	6a 00                	push   0x0
c00154eb:	68 bc 4b 01 c0       	push   0xc0014bbc
c00154f0:	6a 11                	push   0x11
c00154f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154f5:	ff d0                	call   eax
c00154f7:	83 c4 10             	add    esp,0x10
c00154fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ff:	83 c0 24             	add    eax,0x24
c0015502:	8b 00                	mov    eax,DWORD PTR [eax]
c0015504:	6a 00                	push   0x0
c0015506:	68 bc 4b 01 c0       	push   0xc0014bbc
c001550b:	6a 12                	push   0x12
c001550d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015510:	ff d0                	call   eax
c0015512:	83 c4 10             	add    esp,0x10
c0015515:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015518:	8b 00                	mov    eax,DWORD PTR [eax]
c001551a:	83 c0 24             	add    eax,0x24
c001551d:	8b 00                	mov    eax,DWORD PTR [eax]
c001551f:	6a 00                	push   0x0
c0015521:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015526:	6a 13                	push   0x13
c0015528:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001552b:	ff d0                	call   eax
c001552d:	83 c4 10             	add    esp,0x10
c0015530:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015533:	8b 00                	mov    eax,DWORD PTR [eax]
c0015535:	83 c0 24             	add    eax,0x24
c0015538:	8b 00                	mov    eax,DWORD PTR [eax]
c001553a:	6a 00                	push   0x0
c001553c:	68 bc 4b 01 c0       	push   0xc0014bbc
c0015541:	6a 14                	push   0x14
c0015543:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015546:	ff d0                	call   eax
c0015548:	83 c4 10             	add    esp,0x10
c001554b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001554e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015550:	83 c0 24             	add    eax,0x24
c0015553:	8b 00                	mov    eax,DWORD PTR [eax]
c0015555:	6a 00                	push   0x0
c0015557:	68 bc 4b 01 c0       	push   0xc0014bbc
c001555c:	6a 1e                	push   0x1e
c001555e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015561:	ff d0                	call   eax
c0015563:	83 c4 10             	add    esp,0x10
c0015566:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015569:	8b 00                	mov    eax,DWORD PTR [eax]
c001556b:	83 c0 24             	add    eax,0x24
c001556e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015570:	6a 00                	push   0x0
c0015572:	68 5f bb 01 c0       	push   0xc001bb5f
c0015577:	6a 60                	push   0x60
c0015579:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001557c:	ff d0                	call   eax
c001557e:	83 c4 10             	add    esp,0x10
c0015581:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015584:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015587:	c9                   	leave  
c0015588:	c3                   	ret    
c0015589:	90                   	nop

c001558a <InterruptController::convertLegacyIRQNumber(int)>:
c001558a:	55                   	push   ebp
c001558b:	89 e5                	mov    ebp,esp
c001558d:	83 ec 08             	sub    esp,0x8
c0015590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015593:	83 ec 0c             	sub    esp,0xc
c0015596:	50                   	push   eax
c0015597:	e8 4c ea ff ff       	call   c0013fe8 <Device::getName()>
c001559c:	83 c4 10             	add    esp,0x10
c001559f:	8a 00                	mov    al,BYTE PTR [eax]
c00155a1:	3c 41                	cmp    al,0x41
c00155a3:	0f 94 c0             	sete   al
c00155a6:	84 c0                	test   al,al
c00155a8:	74 28                	je     c00155d2 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00155aa:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00155ae:	7f 12                	jg     c00155c2 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00155b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00155b3:	05 60 c1 02 c0       	add    eax,0xc002c160
c00155b8:	8a 00                	mov    al,BYTE PTR [eax]
c00155ba:	0f b6 c0             	movzx  eax,al
c00155bd:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00155c0:	eb 10                	jmp    c00155d2 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00155c2:	83 ec 0c             	sub    esp,0xc
c00155c5:	68 94 9a 02 c0       	push   0xc0029a94
c00155ca:	e8 e6 45 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c00155cf:	83 c4 10             	add    esp,0x10
c00155d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00155d5:	c9                   	leave  
c00155d6:	c3                   	ret    
c00155d7:	90                   	nop

c00155d8 <startGUI(void*)>:
c00155d8:	55                   	push   ebp
c00155d9:	89 e5                	mov    ebp,esp
c00155db:	53                   	push   ebx
c00155dc:	83 ec 04             	sub    esp,0x4
c00155df:	e8 82 7b 00 00       	call   c001d166 <unlockScheduler()>
c00155e4:	8b 1d 08 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf08
c00155ea:	83 ec 08             	sub    esp,0x8
c00155ed:	6a 01                	push   0x1
c00155ef:	68 7c 9d 02 c0       	push   0xc0029d7c
c00155f4:	e8 f8 74 00 00       	call   c001caf1 <Thr::loadDLL(char const*, bool)>
c00155f9:	83 c4 10             	add    esp,0x10
c00155fc:	83 ec 08             	sub    esp,0x8
c00155ff:	53                   	push   ebx
c0015600:	50                   	push   eax
c0015601:	e8 fa 76 00 00       	call   c001cd00 <Thr::executeDLL(unsigned long, void*)>
c0015606:	83 c4 10             	add    esp,0x10
c0015609:	8b 1d 08 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf08
c001560f:	83 ec 08             	sub    esp,0x8
c0015612:	6a 01                	push   0x1
c0015614:	68 96 9d 02 c0       	push   0xc0029d96
c0015619:	e8 d3 74 00 00       	call   c001caf1 <Thr::loadDLL(char const*, bool)>
c001561e:	83 c4 10             	add    esp,0x10
c0015621:	83 ec 08             	sub    esp,0x8
c0015624:	53                   	push   ebx
c0015625:	50                   	push   eax
c0015626:	e8 d5 76 00 00       	call   c001cd00 <Thr::executeDLL(unsigned long, void*)>
c001562b:	83 c4 10             	add    esp,0x10
c001562e:	90                   	nop
c001562f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015632:	c9                   	leave  
c0015633:	c3                   	ret    

c0015634 <startGUIVESA(void*)>:
c0015634:	55                   	push   ebp
c0015635:	89 e5                	mov    ebp,esp
c0015637:	53                   	push   ebx
c0015638:	83 ec 04             	sub    esp,0x4
c001563b:	e8 26 7b 00 00       	call   c001d166 <unlockScheduler()>
c0015640:	8b 1d 08 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf08
c0015646:	83 ec 08             	sub    esp,0x8
c0015649:	6a 01                	push   0x1
c001564b:	68 b0 9d 02 c0       	push   0xc0029db0
c0015650:	e8 9c 74 00 00       	call   c001caf1 <Thr::loadDLL(char const*, bool)>
c0015655:	83 c4 10             	add    esp,0x10
c0015658:	83 ec 08             	sub    esp,0x8
c001565b:	53                   	push   ebx
c001565c:	50                   	push   eax
c001565d:	e8 9e 76 00 00       	call   c001cd00 <Thr::executeDLL(unsigned long, void*)>
c0015662:	83 c4 10             	add    esp,0x10
c0015665:	8b 1d 08 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf08
c001566b:	83 ec 08             	sub    esp,0x8
c001566e:	6a 01                	push   0x1
c0015670:	68 96 9d 02 c0       	push   0xc0029d96
c0015675:	e8 77 74 00 00       	call   c001caf1 <Thr::loadDLL(char const*, bool)>
c001567a:	83 c4 10             	add    esp,0x10
c001567d:	83 ec 08             	sub    esp,0x8
c0015680:	53                   	push   ebx
c0015681:	50                   	push   eax
c0015682:	e8 79 76 00 00       	call   c001cd00 <Thr::executeDLL(unsigned long, void*)>
c0015687:	83 c4 10             	add    esp,0x10
c001568a:	90                   	nop
c001568b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001568e:	c9                   	leave  
c001568f:	c3                   	ret    

c0015690 <sendKeyToTerminal(unsigned char)>:
c0015690:	55                   	push   ebp
c0015691:	89 e5                	mov    ebp,esp
c0015693:	83 ec 28             	sub    esp,0x28
c0015696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015699:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001569c:	a1 e4 cf 02 c0       	mov    eax,ds:0xc002cfe4
c00156a1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00156a5:	83 ec 08             	sub    esp,0x8
c00156a8:	52                   	push   edx
c00156a9:	50                   	push   eax
c00156aa:	e8 05 ba ff ff       	call   c00110b4 <VgaText::receiveKey(unsigned char)>
c00156af:	83 c4 10             	add    esp,0x10
c00156b2:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00156b6:	75 41                	jne    c00156f9 <sendKeyToTerminal(unsigned char)+0x69>
c00156b8:	e8 ce 7a 00 00       	call   c001d18b <lockStuff()>
c00156bd:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c00156c2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156c5:	c7 05 c0 d0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d0c0,0x0
c00156cf:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00156d3:	74 1f                	je     c00156f4 <sendKeyToTerminal(unsigned char)+0x64>
c00156d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00156db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00156de:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156e1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156e4:	83 ec 0c             	sub    esp,0xc
c00156e7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00156ea:	e8 8d 80 00 00       	call   c001d77c <unblockTask(ThreadControlBlock*)>
c00156ef:	83 c4 10             	add    esp,0x10
c00156f2:	eb db                	jmp    c00156cf <sendKeyToTerminal(unsigned char)+0x3f>
c00156f4:	e8 2c 7e 00 00       	call   c001d525 <unlockStuff()>
c00156f9:	90                   	nop
c00156fa:	c9                   	leave  
c00156fb:	c3                   	ret    

c00156fc <sendKeyboardToken(KeyboardToken)>:
c00156fc:	55                   	push   ebp
c00156fd:	89 e5                	mov    ebp,esp
c00156ff:	83 ec 18             	sub    esp,0x18
c0015702:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015705:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015708:	0f b7 c0             	movzx  eax,ax
c001570b:	83 f2 01             	xor    edx,0x1
c001570e:	88 90 e0 d0 02 c0    	mov    BYTE PTR [eax-0x3ffd2f20],dl
c0015714:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015717:	66 3d 03 02          	cmp    ax,0x203
c001571b:	75 07                	jne    c0015724 <sendKeyboardToken(KeyboardToken)+0x28>
c001571d:	a0 e0 d1 02 c0       	mov    al,ds:0xc002d1e0
c0015722:	84 c0                	test   al,al
c0015724:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015728:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001572b:	a0 e8 d4 02 c0       	mov    al,ds:0xc002d4e8
c0015730:	38 c2                	cmp    dl,al
c0015732:	74 1c                	je     c0015750 <sendKeyboardToken(KeyboardToken)+0x54>
c0015734:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015737:	a2 e8 d4 02 c0       	mov    ds:0xc002d4e8,al
c001573c:	a0 e8 d4 02 c0       	mov    al,ds:0xc002d4e8
c0015741:	0f b6 c0             	movzx  eax,al
c0015744:	83 ec 0c             	sub    esp,0xc
c0015747:	50                   	push   eax
c0015748:	e8 c7 ab ff ff       	call   c0010314 <setTerminalScrollLock(bool)>
c001574d:	83 c4 10             	add    esp,0x10
c0015750:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015753:	84 c0                	test   al,al
c0015755:	0f 84 ae 00 00 00    	je     c0015809 <sendKeyboardToken(KeyboardToken)+0x10d>
c001575b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575e:	66 3d 10 03          	cmp    ax,0x310
c0015762:	75 06                	jne    c001576a <sendKeyboardToken(KeyboardToken)+0x6e>
c0015764:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001576a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576d:	66 3d 11 03          	cmp    ax,0x311
c0015771:	75 06                	jne    c0015779 <sendKeyboardToken(KeyboardToken)+0x7d>
c0015773:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577c:	66 3d 12 03          	cmp    ax,0x312
c0015780:	75 06                	jne    c0015788 <sendKeyboardToken(KeyboardToken)+0x8c>
c0015782:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015788:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578b:	66 3d 13 03          	cmp    ax,0x313
c001578f:	75 06                	jne    c0015797 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015791:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001579a:	66 3d 14 03          	cmp    ax,0x314
c001579e:	75 06                	jne    c00157a6 <sendKeyboardToken(KeyboardToken)+0xaa>
c00157a0:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00157a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a9:	66 3d 15 03          	cmp    ax,0x315
c00157ad:	75 06                	jne    c00157b5 <sendKeyboardToken(KeyboardToken)+0xb9>
c00157af:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00157b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b8:	66 3d 16 03          	cmp    ax,0x316
c00157bc:	75 06                	jne    c00157c4 <sendKeyboardToken(KeyboardToken)+0xc8>
c00157be:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00157c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c7:	66 3d 17 03          	cmp    ax,0x317
c00157cb:	75 06                	jne    c00157d3 <sendKeyboardToken(KeyboardToken)+0xd7>
c00157cd:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00157d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d6:	66 3d 18 03          	cmp    ax,0x318
c00157da:	75 06                	jne    c00157e2 <sendKeyboardToken(KeyboardToken)+0xe6>
c00157dc:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00157e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e5:	66 3d 19 03          	cmp    ax,0x319
c00157e9:	75 06                	jne    c00157f1 <sendKeyboardToken(KeyboardToken)+0xf5>
c00157eb:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00157f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f4:	66 3d 1a 03          	cmp    ax,0x31a
c00157f8:	0f 85 c9 00 00 00    	jne    c00158c7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00157fe:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015804:	e9 be 00 00 00       	jmp    c00158c7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580c:	66 3d 10 03          	cmp    ax,0x310
c0015810:	75 0a                	jne    c001581c <sendKeyboardToken(KeyboardToken)+0x120>
c0015812:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015818:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001581c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581f:	66 3d 11 03          	cmp    ax,0x311
c0015823:	75 0a                	jne    c001582f <sendKeyboardToken(KeyboardToken)+0x133>
c0015825:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001582b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001582f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015832:	66 3d 12 03          	cmp    ax,0x312
c0015836:	75 0a                	jne    c0015842 <sendKeyboardToken(KeyboardToken)+0x146>
c0015838:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001583e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015845:	66 3d 13 03          	cmp    ax,0x313
c0015849:	75 0a                	jne    c0015855 <sendKeyboardToken(KeyboardToken)+0x159>
c001584b:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015851:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015855:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015858:	66 3d 14 03          	cmp    ax,0x314
c001585c:	75 0a                	jne    c0015868 <sendKeyboardToken(KeyboardToken)+0x16c>
c001585e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015864:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586b:	66 3d 15 03          	cmp    ax,0x315
c001586f:	75 0a                	jne    c001587b <sendKeyboardToken(KeyboardToken)+0x17f>
c0015871:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015877:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001587b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587e:	66 3d 16 03          	cmp    ax,0x316
c0015882:	75 0a                	jne    c001588e <sendKeyboardToken(KeyboardToken)+0x192>
c0015884:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001588a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001588e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015891:	66 3d 17 03          	cmp    ax,0x317
c0015895:	75 0a                	jne    c00158a1 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0015897:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001589d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a4:	66 3d 18 03          	cmp    ax,0x318
c00158a8:	75 0a                	jne    c00158b4 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00158aa:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00158b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b7:	66 3d 19 03          	cmp    ax,0x319
c00158bb:	75 0a                	jne    c00158c7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c00158bd:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00158c3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ca:	66 3d 00 02          	cmp    ax,0x200
c00158ce:	75 2c                	jne    c00158fc <sendKeyboardToken(KeyboardToken)+0x200>
c00158d0:	a0 e0 d4 02 c0       	mov    al,ds:0xc002d4e0
c00158d5:	83 f0 01             	xor    eax,0x1
c00158d8:	84 c0                	test   al,al
c00158da:	74 20                	je     c00158fc <sendKeyboardToken(KeyboardToken)+0x200>
c00158dc:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c00158e1:	6a 01                	push   0x1
c00158e3:	6a 00                	push   0x0
c00158e5:	68 d8 55 01 c0       	push   0xc00155d8
c00158ea:	50                   	push   eax
c00158eb:	e8 a6 79 00 00       	call   c001d296 <Process::createThread(void (*)(void*), void*, int)>
c00158f0:	83 c4 10             	add    esp,0x10
c00158f3:	c6 05 e0 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d4e0,0x1
c00158fa:	eb 33                	jmp    c001592f <sendKeyboardToken(KeyboardToken)+0x233>
c00158fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ff:	66 3d 01 02          	cmp    ax,0x201
c0015903:	75 2a                	jne    c001592f <sendKeyboardToken(KeyboardToken)+0x233>
c0015905:	a0 e0 d4 02 c0       	mov    al,ds:0xc002d4e0
c001590a:	83 f0 01             	xor    eax,0x1
c001590d:	84 c0                	test   al,al
c001590f:	74 1e                	je     c001592f <sendKeyboardToken(KeyboardToken)+0x233>
c0015911:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0015916:	6a 01                	push   0x1
c0015918:	6a 00                	push   0x0
c001591a:	68 34 56 01 c0       	push   0xc0015634
c001591f:	50                   	push   eax
c0015920:	e8 71 79 00 00       	call   c001d296 <Process::createThread(void (*)(void*), void*, int)>
c0015925:	83 c4 10             	add    esp,0x10
c0015928:	c6 05 e0 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d4e0,0x1
c001592f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015932:	66 3d 1d 03          	cmp    ax,0x31d
c0015936:	75 06                	jne    c001593e <sendKeyboardToken(KeyboardToken)+0x242>
c0015938:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001593e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015941:	66 3d 1c 03          	cmp    ax,0x31c
c0015945:	75 06                	jne    c001594d <sendKeyboardToken(KeyboardToken)+0x251>
c0015947:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001594d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015950:	66 3d 1b 03          	cmp    ax,0x31b
c0015954:	75 06                	jne    c001595c <sendKeyboardToken(KeyboardToken)+0x260>
c0015956:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001595c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001595f:	66 3d 1e 03          	cmp    ax,0x31e
c0015963:	75 06                	jne    c001596b <sendKeyboardToken(KeyboardToken)+0x26f>
c0015965:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001596b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596e:	66 3d 1f 03          	cmp    ax,0x31f
c0015972:	75 06                	jne    c001597a <sendKeyboardToken(KeyboardToken)+0x27e>
c0015974:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001597a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597d:	66 3d 1a 03          	cmp    ax,0x31a
c0015981:	75 06                	jne    c0015989 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015983:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015989:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001598d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015990:	83 f0 01             	xor    eax,0x1
c0015993:	84 c0                	test   al,al
c0015995:	74 77                	je     c0015a0e <sendKeyboardToken(KeyboardToken)+0x312>
c0015997:	a0 e1 d1 02 c0       	mov    al,ds:0xc002d1e1
c001599c:	84 c0                	test   al,al
c001599e:	74 41                	je     c00159e1 <sendKeyboardToken(KeyboardToken)+0x2e5>
c00159a0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00159a4:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00159a8:	74 2b                	je     c00159d5 <sendKeyboardToken(KeyboardToken)+0x2d9>
c00159aa:	8b 15 e4 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4e4
c00159b0:	89 d0                	mov    eax,edx
c00159b2:	c1 e0 02             	shl    eax,0x2
c00159b5:	01 d0                	add    eax,edx
c00159b7:	01 c0                	add    eax,eax
c00159b9:	a3 e4 d4 02 c0       	mov    ds:0xc002d4e4,eax
c00159be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c1:	0f b7 c0             	movzx  eax,ax
c00159c4:	8d 50 d0             	lea    edx,[eax-0x30]
c00159c7:	a1 e4 d4 02 c0       	mov    eax,ds:0xc002d4e4
c00159cc:	01 d0                	add    eax,edx
c00159ce:	a3 e4 d4 02 c0       	mov    ds:0xc002d4e4,eax
c00159d3:	eb 6d                	jmp    c0015a42 <sendKeyboardToken(KeyboardToken)+0x346>
c00159d5:	c7 05 e4 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d4e4,0x0
c00159df:	eb 61                	jmp    c0015a42 <sendKeyboardToken(KeyboardToken)+0x346>
c00159e1:	a1 e4 d4 02 c0       	mov    eax,ds:0xc002d4e4
c00159e6:	85 c0                	test   eax,eax
c00159e8:	74 18                	je     c0015a02 <sendKeyboardToken(KeyboardToken)+0x306>
c00159ea:	a1 e4 d4 02 c0       	mov    eax,ds:0xc002d4e4
c00159ef:	0f b6 c0             	movzx  eax,al
c00159f2:	83 ec 0c             	sub    esp,0xc
c00159f5:	50                   	push   eax
c00159f6:	e8 95 fc ff ff       	call   c0015690 <sendKeyToTerminal(unsigned char)>
c00159fb:	83 c4 10             	add    esp,0x10
c00159fe:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a02:	c7 05 e4 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d4e4,0x0
c0015a0c:	eb 34                	jmp    c0015a42 <sendKeyboardToken(KeyboardToken)+0x346>
c0015a0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a11:	66 3d 01 01          	cmp    ax,0x101
c0015a15:	75 2b                	jne    c0015a42 <sendKeyboardToken(KeyboardToken)+0x346>
c0015a17:	a1 e4 d4 02 c0       	mov    eax,ds:0xc002d4e4
c0015a1c:	85 c0                	test   eax,eax
c0015a1e:	74 18                	je     c0015a38 <sendKeyboardToken(KeyboardToken)+0x33c>
c0015a20:	a1 e4 d4 02 c0       	mov    eax,ds:0xc002d4e4
c0015a25:	0f b6 c0             	movzx  eax,al
c0015a28:	83 ec 0c             	sub    esp,0xc
c0015a2b:	50                   	push   eax
c0015a2c:	e8 5f fc ff ff       	call   c0015690 <sendKeyToTerminal(unsigned char)>
c0015a31:	83 c4 10             	add    esp,0x10
c0015a34:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a38:	c7 05 e4 d4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d4e4,0x0
c0015a42:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015a45:	83 f0 01             	xor    eax,0x1
c0015a48:	84 c0                	test   al,al
c0015a4a:	74 4c                	je     c0015a98 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015a4c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a4f:	83 f0 01             	xor    eax,0x1
c0015a52:	84 c0                	test   al,al
c0015a54:	74 42                	je     c0015a98 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015a56:	a0 e0 d1 02 c0       	mov    al,ds:0xc002d1e0
c0015a5b:	83 f0 01             	xor    eax,0x1
c0015a5e:	84 c0                	test   al,al
c0015a60:	74 36                	je     c0015a98 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015a62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a65:	66 83 f8 1f          	cmp    ax,0x1f
c0015a69:	76 09                	jbe    c0015a74 <sendKeyboardToken(KeyboardToken)+0x378>
c0015a6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a6e:	66 83 f8 7e          	cmp    ax,0x7e
c0015a72:	76 12                	jbe    c0015a86 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015a74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a77:	66 83 f8 0a          	cmp    ax,0xa
c0015a7b:	74 09                	je     c0015a86 <sendKeyboardToken(KeyboardToken)+0x38a>
c0015a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a80:	66 83 f8 08          	cmp    ax,0x8
c0015a84:	75 12                	jne    c0015a98 <sendKeyboardToken(KeyboardToken)+0x39c>
c0015a86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a89:	0f b6 c0             	movzx  eax,al
c0015a8c:	83 ec 0c             	sub    esp,0xc
c0015a8f:	50                   	push   eax
c0015a90:	e8 fb fb ff ff       	call   c0015690 <sendKeyToTerminal(unsigned char)>
c0015a95:	83 c4 10             	add    esp,0x10
c0015a98:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015a9b:	83 f0 01             	xor    eax,0x1
c0015a9e:	84 c0                	test   al,al
c0015aa0:	74 4f                	je     c0015af1 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015aa2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015aa5:	83 f0 01             	xor    eax,0x1
c0015aa8:	84 c0                	test   al,al
c0015aaa:	74 45                	je     c0015af1 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015aac:	a0 e0 d1 02 c0       	mov    al,ds:0xc002d1e0
c0015ab1:	84 c0                	test   al,al
c0015ab3:	74 3c                	je     c0015af1 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab8:	66 83 f8 3f          	cmp    ax,0x3f
c0015abc:	76 33                	jbe    c0015af1 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac1:	66 83 f8 7f          	cmp    ax,0x7f
c0015ac5:	77 2a                	ja     c0015af1 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015ac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aca:	88 c2                	mov    dl,al
c0015acc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015acf:	66 83 f8 5f          	cmp    ax,0x5f
c0015ad3:	76 04                	jbe    c0015ad9 <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015ad5:	b0 20                	mov    al,0x20
c0015ad7:	eb 02                	jmp    c0015adb <sendKeyboardToken(KeyboardToken)+0x3df>
c0015ad9:	b0 00                	mov    al,0x0
c0015adb:	29 c2                	sub    edx,eax
c0015add:	88 d0                	mov    al,dl
c0015adf:	83 e8 40             	sub    eax,0x40
c0015ae2:	0f b6 c0             	movzx  eax,al
c0015ae5:	83 ec 0c             	sub    esp,0xc
c0015ae8:	50                   	push   eax
c0015ae9:	e8 a2 fb ff ff       	call   c0015690 <sendKeyToTerminal(unsigned char)>
c0015aee:	83 c4 10             	add    esp,0x10
c0015af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af4:	66 3d 00 03          	cmp    ax,0x300
c0015af8:	75 0f                	jne    c0015b09 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015afa:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015afd:	83 f0 01             	xor    eax,0x1
c0015b00:	84 c0                	test   al,al
c0015b02:	74 05                	je     c0015b09 <sendKeyboardToken(KeyboardToken)+0x40d>
c0015b04:	e8 40 b0 ff ff       	call   c0010b49 <doTerminalCycle()>
c0015b09:	90                   	nop
c0015b0a:	c9                   	leave  
c0015b0b:	c3                   	ret    

c0015b0c <clearInternalKeybuffer(VgaText*)>:
c0015b0c:	55                   	push   ebp
c0015b0d:	89 e5                	mov    ebp,esp
c0015b0f:	83 ec 08             	sub    esp,0x8
c0015b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b15:	05 34 11 00 00       	add    eax,0x1134
c0015b1a:	83 ec 0c             	sub    esp,0xc
c0015b1d:	50                   	push   eax
c0015b1e:	e8 be ab fe ff       	call   c00006e1 <strlen>
c0015b23:	83 c4 10             	add    esp,0x10
c0015b26:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b29:	81 c2 34 11 00 00    	add    edx,0x1134
c0015b2f:	83 ec 04             	sub    esp,0x4
c0015b32:	50                   	push   eax
c0015b33:	6a 00                	push   0x0
c0015b35:	52                   	push   edx
c0015b36:	e8 89 ab fe ff       	call   c00006c4 <memset>
c0015b3b:	83 c4 10             	add    esp,0x10
c0015b3e:	90                   	nop
c0015b3f:	c9                   	leave  
c0015b40:	c3                   	ret    

c0015b41 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015b41:	55                   	push   ebp
c0015b42:	89 e5                	mov    ebp,esp
c0015b44:	83 ec 18             	sub    esp,0x18
c0015b47:	fb                   	sti    
c0015b48:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015b4f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015b53:	0f 84 8a 00 00 00    	je     c0015be3 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015b59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b5c:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015b62:	84 c0                	test   al,al
c0015b64:	75 11                	jne    c0015b77 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015b66:	e8 f9 75 00 00       	call   c001d164 <lockScheduler()>
c0015b6b:	e8 30 79 00 00       	call   c001d4a0 <schedule()>
c0015b70:	e8 f1 75 00 00       	call   c001d166 <unlockScheduler()>
c0015b75:	eb e2                	jmp    c0015b59 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015b77:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015b7a:	8d 50 01             	lea    edx,[eax+0x1]
c0015b7d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015b80:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b83:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015b89:	88 10                	mov    BYTE PTR [eax],dl
c0015b8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b8e:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015b94:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015b97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b9a:	05 34 11 00 00       	add    eax,0x1134
c0015b9f:	83 ec 0c             	sub    esp,0xc
c0015ba2:	50                   	push   eax
c0015ba3:	e8 39 ab fe ff       	call   c00006e1 <strlen>
c0015ba8:	83 c4 10             	add    esp,0x10
c0015bab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015bae:	81 c2 34 11 00 00    	add    edx,0x1134
c0015bb4:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015bb7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015bba:	81 c2 34 11 00 00    	add    edx,0x1134
c0015bc0:	83 ec 04             	sub    esp,0x4
c0015bc3:	50                   	push   eax
c0015bc4:	51                   	push   ecx
c0015bc5:	52                   	push   edx
c0015bc6:	e8 9d aa fe ff       	call   c0000668 <memmove>
c0015bcb:	83 c4 10             	add    esp,0x10
c0015bce:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015bd1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015bd4:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015bd8:	0f 85 71 ff ff ff    	jne    c0015b4f <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015bde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be1:	eb 03                	jmp    c0015be6 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015be3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be6:	c9                   	leave  
c0015be7:	c3                   	ret    

c0015be8 <Keyboard::Keyboard(char const*)>:
c0015be8:	83 ec 0c             	sub    esp,0xc
c0015beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bef:	83 ec 08             	sub    esp,0x8
c0015bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bf6:	50                   	push   eax
c0015bf7:	e8 f0 e2 ff ff       	call   c0013eec <Device::Device(char const*)>
c0015bfc:	83 c4 10             	add    esp,0x10
c0015bff:	ba d4 9d 02 c0       	mov    edx,0xc0029dd4
c0015c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c08:	89 10                	mov    DWORD PTR [eax],edx
c0015c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c0e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015c18:	c6 05 c4 d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0c4,0x1
c0015c1f:	90                   	nop
c0015c20:	83 c4 0c             	add    esp,0xc
c0015c23:	c3                   	ret    

c0015c24 <Keyboard::~Keyboard()>:
c0015c24:	83 ec 0c             	sub    esp,0xc
c0015c27:	ba d4 9d 02 c0       	mov    edx,0xc0029dd4
c0015c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c30:	89 10                	mov    DWORD PTR [eax],edx
c0015c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c36:	83 ec 0c             	sub    esp,0xc
c0015c39:	50                   	push   eax
c0015c3a:	e8 8f df ff ff       	call   c0013bce <Device::~Device()>
c0015c3f:	83 c4 10             	add    esp,0x10
c0015c42:	90                   	nop
c0015c43:	83 c4 0c             	add    esp,0xc
c0015c46:	c3                   	ret    
c0015c47:	90                   	nop

c0015c48 <Keyboard::~Keyboard()>:
c0015c48:	83 ec 0c             	sub    esp,0xc
c0015c4b:	83 ec 0c             	sub    esp,0xc
c0015c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c52:	e8 cd ff ff ff       	call   c0015c24 <Keyboard::~Keyboard()>
c0015c57:	83 c4 10             	add    esp,0x10
c0015c5a:	83 ec 08             	sub    esp,0x8
c0015c5d:	68 5c 01 00 00       	push   0x15c
c0015c62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c66:	e8 8a cb ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0015c6b:	83 c4 10             	add    esp,0x10
c0015c6e:	83 c4 0c             	add    esp,0xc
c0015c71:	c3                   	ret    

c0015c72 <LogicalDisk::close(int, int, void*)>:
c0015c72:	83 c8 ff             	or     eax,0xffffffff
c0015c75:	c3                   	ret    

c0015c76 <LogicalDisk::~LogicalDisk()>:
c0015c76:	83 ec 0c             	sub    esp,0xc
c0015c79:	ba 84 9e 02 c0       	mov    edx,0xc0029e84
c0015c7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c82:	89 10                	mov    DWORD PTR [eax],edx
c0015c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c88:	83 ec 0c             	sub    esp,0xc
c0015c8b:	50                   	push   eax
c0015c8c:	e8 3d df ff ff       	call   c0013bce <Device::~Device()>
c0015c91:	83 c4 10             	add    esp,0x10
c0015c94:	90                   	nop
c0015c95:	83 c4 0c             	add    esp,0xc
c0015c98:	c3                   	ret    
c0015c99:	90                   	nop

c0015c9a <LogicalDisk::~LogicalDisk()>:
c0015c9a:	83 ec 0c             	sub    esp,0xc
c0015c9d:	83 ec 0c             	sub    esp,0xc
c0015ca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ca4:	e8 cd ff ff ff       	call   c0015c76 <LogicalDisk::~LogicalDisk()>
c0015ca9:	83 c4 10             	add    esp,0x10
c0015cac:	83 ec 08             	sub    esp,0x8
c0015caf:	68 74 01 00 00       	push   0x174
c0015cb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cb8:	e8 38 cb ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0015cbd:	83 c4 10             	add    esp,0x10
c0015cc0:	83 c4 0c             	add    esp,0xc
c0015cc3:	c3                   	ret    

c0015cc4 <LogicalDisk::open(int, int, void*)>:
c0015cc4:	83 ec 18             	sub    esp,0x18
c0015cc7:	68 00 9e 02 c0       	push   0xc0029e00
c0015ccc:	e8 e4 3e 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c0015cd1:	83 c8 ff             	or     eax,0xffffffff
c0015cd4:	83 c4 1c             	add    esp,0x1c
c0015cd7:	c3                   	ret    

c0015cd8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015cd8:	53                   	push   ebx
c0015cd9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015cdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015ce1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ce5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015ceb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015cf1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015cf7:	77 10                	ja     c0015d09 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015cf9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015cff:	89 d3                	mov    ebx,edx
c0015d01:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015d07:	72 05                	jb     c0015d0e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015d09:	83 c8 ff             	or     eax,0xffffffff
c0015d0c:	89 c2                	mov    edx,eax
c0015d0e:	5b                   	pop    ebx
c0015d0f:	c3                   	ret    

c0015d10 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015d10:	56                   	push   esi
c0015d11:	83 c8 ff             	or     eax,0xffffffff
c0015d14:	53                   	push   ebx
c0015d15:	89 c2                	mov    edx,eax
c0015d17:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015d1b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015d1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015d23:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015d29:	77 27                	ja     c0015d52 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015d2b:	89 d8                	mov    eax,ebx
c0015d2d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015d33:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015d39:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015d3e:	89 c2                	mov    edx,eax
c0015d40:	73 10                	jae    c0015d52 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015d42:	89 c8                	mov    eax,ecx
c0015d44:	89 da                	mov    edx,ebx
c0015d46:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015d4c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015d52:	5b                   	pop    ebx
c0015d53:	5e                   	pop    esi
c0015d54:	c3                   	ret    
c0015d55:	90                   	nop

c0015d56 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015d56:	83 ec 1c             	sub    esp,0x1c
c0015d59:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015d61:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015d6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015d70:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015d74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015d78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d7c:	83 ec 08             	sub    esp,0x8
c0015d7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d83:	50                   	push   eax
c0015d84:	e8 63 e1 ff ff       	call   c0013eec <Device::Device(char const*)>
c0015d89:	83 c4 10             	add    esp,0x10
c0015d8c:	ba 84 9e 02 c0       	mov    edx,0xc0029e84
c0015d91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d95:	89 10                	mov    DWORD PTR [eax],edx
c0015d97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d9b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015da2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015da6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015dad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015db1:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015dbb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015dbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015dc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015dc7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015dcd:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015dd3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015dd7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015dda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015dde:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015de4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015dea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015df2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015df8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dfc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015e06:	90                   	nop
c0015e07:	83 c4 1c             	add    esp,0x1c
c0015e0a:	c3                   	ret    
c0015e0b:	90                   	nop

c0015e0c <LogicalDisk::assignDriveLetter()>:
c0015e0c:	55                   	push   ebp
c0015e0d:	57                   	push   edi
c0015e0e:	56                   	push   esi
c0015e0f:	53                   	push   ebx
c0015e10:	83 ec 14             	sub    esp,0x14
c0015e13:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e17:	8b 3d 00 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d500
c0015e1d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015e23:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015e27:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015e2d:	8b 3d 04 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d504
c0015e33:	3c 01                	cmp    al,0x1
c0015e35:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015e39:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015e3d:	19 c0                	sbb    eax,eax
c0015e3f:	83 e0 02             	and    eax,0x2
c0015e42:	83 c0 41             	add    eax,0x41
c0015e45:	0f be e8             	movsx  ebp,al
c0015e48:	3c 43                	cmp    al,0x43
c0015e4a:	75 10                	jne    c0015e5c <LogicalDisk::assignDriveLetter()+0x50>
c0015e4c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015e53:	75 5d                	jne    c0015eb2 <LogicalDisk::assignDriveLetter()+0xa6>
c0015e55:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015e5a:	75 56                	jne    c0015eb2 <LogicalDisk::assignDriveLetter()+0xa6>
c0015e5c:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015e5f:	ba 01 00 00 00       	mov    edx,0x1
c0015e64:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015e68:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015e6c:	d3 e2                	shl    edx,cl
c0015e6e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e72:	89 d7                	mov    edi,edx
c0015e74:	89 d6                	mov    esi,edx
c0015e76:	c1 ff 1f             	sar    edi,0x1f
c0015e79:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015e7d:	21 f9                	and    ecx,edi
c0015e7f:	09 d1                	or     ecx,edx
c0015e81:	75 2f                	jne    c0015eb2 <LogicalDisk::assignDriveLetter()+0xa6>
c0015e83:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015e87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e8b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015e91:	09 f2                	or     edx,esi
c0015e93:	89 15 00 d5 02 c0    	mov    DWORD PTR ds:0xc002d500,edx
c0015e99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e9d:	09 fa                	or     edx,edi
c0015e9f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015ea3:	89 15 04 d5 02 c0    	mov    DWORD PTR ds:0xc002d504,edx
c0015ea9:	89 1c bd 20 d5 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2ae0],ebx
c0015eb0:	eb 08                	jmp    c0015eba <LogicalDisk::assignDriveLetter()+0xae>
c0015eb2:	45                   	inc    ebp
c0015eb3:	40                   	inc    eax
c0015eb4:	3c 5b                	cmp    al,0x5b
c0015eb6:	75 90                	jne    c0015e48 <LogicalDisk::assignDriveLetter()+0x3c>
c0015eb8:	31 c0                	xor    eax,eax
c0015eba:	83 c4 14             	add    esp,0x14
c0015ebd:	5b                   	pop    ebx
c0015ebe:	5e                   	pop    esi
c0015ebf:	5f                   	pop    edi
c0015ec0:	5d                   	pop    ebp
c0015ec1:	c3                   	ret    

c0015ec2 <LogicalDisk::mount()>:
c0015ec2:	56                   	push   esi
c0015ec3:	53                   	push   ebx
c0015ec4:	51                   	push   ecx
c0015ec5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ec9:	8b 1d 88 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d088
c0015ecf:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015ed9:	85 db                	test   ebx,ebx
c0015edb:	74 50                	je     c0015f2d <LogicalDisk::mount()+0x6b>
c0015edd:	e8 6d 72 00 00       	call   c001d14f <getIRQNestingLevel()>
c0015ee2:	52                   	push   edx
c0015ee3:	52                   	push   edx
c0015ee4:	50                   	push   eax
c0015ee5:	68 24 9e 02 c0       	push   0xc0029e24
c0015eea:	e8 e6 c9 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0015eef:	83 c4 0c             	add    esp,0xc
c0015ef2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015ef9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015efb:	83 e8 41             	sub    eax,0x41
c0015efe:	50                   	push   eax
c0015eff:	56                   	push   esi
c0015f00:	53                   	push   ebx
c0015f01:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f04:	83 c4 10             	add    esp,0x10
c0015f07:	84 c0                	test   al,al
c0015f09:	74 08                	je     c0015f13 <LogicalDisk::mount()+0x51>
c0015f0b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015f11:	eb 1c                	jmp    c0015f2f <LogicalDisk::mount()+0x6d>
c0015f13:	e8 37 72 00 00       	call   c001d14f <getIRQNestingLevel()>
c0015f18:	51                   	push   ecx
c0015f19:	51                   	push   ecx
c0015f1a:	50                   	push   eax
c0015f1b:	68 3f 9e 02 c0       	push   0xc0029e3f
c0015f20:	e8 b0 c9 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0015f25:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015f28:	83 c4 10             	add    esp,0x10
c0015f2b:	eb ac                	jmp    c0015ed9 <LogicalDisk::mount()+0x17>
c0015f2d:	31 c0                	xor    eax,eax
c0015f2f:	5a                   	pop    edx
c0015f30:	5b                   	pop    ebx
c0015f31:	5e                   	pop    esi
c0015f32:	c3                   	ret    
c0015f33:	90                   	nop

c0015f34 <LogicalDisk::unmount()>:
c0015f34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f38:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015f42:	c3                   	ret    
c0015f43:	90                   	nop

c0015f44 <LogicalDisk::unassignDriveLetter()>:
c0015f44:	57                   	push   edi
c0015f45:	56                   	push   esi
c0015f46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f4a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015f51:	84 c9                	test   cl,cl
c0015f53:	75 0f                	jne    c0015f64 <LogicalDisk::unassignDriveLetter()+0x20>
c0015f55:	c7 44 24 0c 5a 9e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029e5a
c0015f5d:	5e                   	pop    esi
c0015f5e:	5f                   	pop    edi
c0015f5f:	e9 51 3c 00 00       	jmp    c0019bb5 <Krnl::panic(char const*)>
c0015f64:	83 e9 41             	sub    ecx,0x41
c0015f67:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015f6e:	b8 01 00 00 00       	mov    eax,0x1
c0015f73:	c7 04 8d 20 d5 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2ae0],0x0
c0015f7e:	d3 e0                	shl    eax,cl
c0015f80:	89 c7                	mov    edi,eax
c0015f82:	f7 d0                	not    eax
c0015f84:	c1 ff 1f             	sar    edi,0x1f
c0015f87:	21 05 00 d5 02 c0    	and    DWORD PTR ds:0xc002d500,eax
c0015f8d:	89 fe                	mov    esi,edi
c0015f8f:	f7 d6                	not    esi
c0015f91:	21 35 04 d5 02 c0    	and    DWORD PTR ds:0xc002d504,esi
c0015f97:	5e                   	pop    esi
c0015f98:	5f                   	pop    edi
c0015f99:	c3                   	ret    

c0015f9a <LogicalDisk::read(unsigned long long, int, void*)>:
c0015f9a:	57                   	push   edi
c0015f9b:	56                   	push   esi
c0015f9c:	53                   	push   ebx
c0015f9d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015fa1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fa5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015fa9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015fad:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015fb3:	77 41                	ja     c0015ff6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015fb5:	99                   	cdq    
c0015fb6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015fbc:	01 c8                	add    eax,ecx
c0015fbe:	11 da                	adc    edx,ebx
c0015fc0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015fc6:	19 d7                	sbb    edi,edx
c0015fc8:	72 33                	jb     c0015ffd <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015fca:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015fd0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015fd6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015fda:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015fde:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015fe4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015fea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015fee:	5b                   	pop    ebx
c0015fef:	5e                   	pop    esi
c0015ff0:	5f                   	pop    edi
c0015ff1:	e9 f8 09 00 00       	jmp    c00169ee <VCache::read(unsigned long long, int, void*)>
c0015ff6:	b8 05 00 00 00       	mov    eax,0x5
c0015ffb:	eb 05                	jmp    c0016002 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015ffd:	b8 07 00 00 00       	mov    eax,0x7
c0016002:	5b                   	pop    ebx
c0016003:	5e                   	pop    esi
c0016004:	5f                   	pop    edi
c0016005:	c3                   	ret    

c0016006 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016006:	57                   	push   edi
c0016007:	56                   	push   esi
c0016008:	53                   	push   ebx
c0016009:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001600d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016011:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016019:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001601f:	77 41                	ja     c0016062 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016021:	99                   	cdq    
c0016022:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016028:	01 c8                	add    eax,ecx
c001602a:	11 da                	adc    edx,ebx
c001602c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016032:	19 d7                	sbb    edi,edx
c0016034:	72 33                	jb     c0016069 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016036:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001603c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016042:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016046:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001604a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016050:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016056:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001605a:	5b                   	pop    ebx
c001605b:	5e                   	pop    esi
c001605c:	5f                   	pop    edi
c001605d:	e9 a8 08 00 00       	jmp    c001690a <VCache::write(unsigned long long, int, void*)>
c0016062:	b8 05 00 00 00       	mov    eax,0x5
c0016067:	eb 05                	jmp    c001606e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0016069:	b8 07 00 00 00       	mov    eax,0x7
c001606e:	5b                   	pop    ebx
c001606f:	5e                   	pop    esi
c0016070:	5f                   	pop    edi
c0016071:	c3                   	ret    

c0016072 <Mouse::Mouse(char const*)>:
c0016072:	83 ec 0c             	sub    esp,0xc
c0016075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016079:	83 ec 08             	sub    esp,0x8
c001607c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016080:	50                   	push   eax
c0016081:	e8 66 de ff ff       	call   c0013eec <Device::Device(char const*)>
c0016086:	83 c4 10             	add    esp,0x10
c0016089:	ba b0 9e 02 c0       	mov    edx,0xc0029eb0
c001608e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016092:	89 10                	mov    DWORD PTR [eax],edx
c0016094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016098:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00160a2:	90                   	nop
c00160a3:	83 c4 0c             	add    esp,0xc
c00160a6:	c3                   	ret    
c00160a7:	90                   	nop

c00160a8 <Mouse::~Mouse()>:
c00160a8:	83 ec 0c             	sub    esp,0xc
c00160ab:	ba b0 9e 02 c0       	mov    edx,0xc0029eb0
c00160b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160b4:	89 10                	mov    DWORD PTR [eax],edx
c00160b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160ba:	83 ec 0c             	sub    esp,0xc
c00160bd:	50                   	push   eax
c00160be:	e8 0b db ff ff       	call   c0013bce <Device::~Device()>
c00160c3:	83 c4 10             	add    esp,0x10
c00160c6:	90                   	nop
c00160c7:	83 c4 0c             	add    esp,0xc
c00160ca:	c3                   	ret    
c00160cb:	90                   	nop

c00160cc <Mouse::~Mouse()>:
c00160cc:	83 ec 0c             	sub    esp,0xc
c00160cf:	83 ec 0c             	sub    esp,0xc
c00160d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160d6:	e8 cd ff ff ff       	call   c00160a8 <Mouse::~Mouse()>
c00160db:	83 c4 10             	add    esp,0x10
c00160de:	83 ec 08             	sub    esp,0x8
c00160e1:	68 58 01 00 00       	push   0x158
c00160e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160ea:	e8 06 c7 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c00160ef:	83 c4 10             	add    esp,0x10
c00160f2:	83 c4 0c             	add    esp,0xc
c00160f5:	c3                   	ret    

c00160f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00160f6:	55                   	push   ebp
c00160f7:	57                   	push   edi
c00160f8:	56                   	push   esi
c00160f9:	53                   	push   ebx
c00160fa:	81 ec 28 01 00 00    	sub    esp,0x128
c0016100:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016107:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001610e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016115:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001611c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016120:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016124:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001612b:	e8 b8 de ff ff       	call   c0013fe8 <Device::getName()>
c0016130:	5a                   	pop    edx
c0016131:	59                   	pop    ecx
c0016132:	50                   	push   eax
c0016133:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0016137:	55                   	push   ebp
c0016138:	e8 26 a6 fe ff       	call   c0000763 <strcpy>
c001613d:	5b                   	pop    ebx
c001613e:	58                   	pop    eax
c001613f:	68 d4 9e 02 c0       	push   0xc0029ed4
c0016144:	55                   	push   ebp
c0016145:	e8 d0 a6 fe ff       	call   c000081a <strcat>
c001614a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016151:	e8 ce 94 ff ff       	call   c000f624 <malloc>
c0016156:	83 c4 0c             	add    esp,0xc
c0016159:	89 c3                	mov    ebx,eax
c001615b:	57                   	push   edi
c001615c:	56                   	push   esi
c001615d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016161:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016165:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001616c:	55                   	push   ebp
c001616d:	50                   	push   eax
c001616e:	e8 e3 fb ff ff       	call   c0015d56 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016173:	83 c4 14             	add    esp,0x14
c0016176:	53                   	push   ebx
c0016177:	e8 90 fc ff ff       	call   c0015e0c <LogicalDisk::assignDriveLetter()>
c001617c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001617f:	e8 3e fd ff ff       	call   c0015ec2 <LogicalDisk::mount()>
c0016184:	58                   	pop    eax
c0016185:	5a                   	pop    edx
c0016186:	53                   	push   ebx
c0016187:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001618e:	e8 69 db ff ff       	call   c0013cfc <Device::addChild(Device*)>
c0016193:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016199:	5b                   	pop    ebx
c001619a:	5e                   	pop    esi
c001619b:	5f                   	pop    edi
c001619c:	5d                   	pop    ebp
c001619d:	c3                   	ret    

c001619e <createPartitionsForDisk(PhysicalDisk*)>:
c001619e:	55                   	push   ebp
c001619f:	57                   	push   edi
c00161a0:	56                   	push   esi
c00161a1:	53                   	push   ebx
c00161a2:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00161a8:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00161af:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00161b5:	3d 00 02 00 00       	cmp    eax,0x200
c00161ba:	74 27                	je     c00161e3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00161bc:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00161c2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00161c8:	83 ec 10             	sub    esp,0x10
c00161cb:	0f a4 f7 0a          	shld   edi,esi,0xa
c00161cf:	99                   	cdq    
c00161d0:	c1 e6 0a             	shl    esi,0xa
c00161d3:	52                   	push   edx
c00161d4:	89 fd                	mov    ebp,edi
c00161d6:	50                   	push   eax
c00161d7:	55                   	push   ebp
c00161d8:	56                   	push   esi
c00161d9:	e8 ee f5 00 00       	call   c00257cc <__udivdi3>
c00161de:	e9 b1 00 00 00       	jmp    c0016294 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00161e3:	83 ec 0c             	sub    esp,0xc
c00161e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00161e8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00161ec:	56                   	push   esi
c00161ed:	6a 01                	push   0x1
c00161ef:	6a 00                	push   0x0
c00161f1:	6a 00                	push   0x0
c00161f3:	53                   	push   ebx
c00161f4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00161f7:	83 c4 20             	add    esp,0x20
c00161fa:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016202:	75 0a                	jne    c001620e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016204:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001620c:	74 2c                	je     c001623a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001620e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016214:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001621a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016220:	83 ec 10             	sub    esp,0x10
c0016223:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016227:	89 f7                	mov    edi,esi
c0016229:	c1 e0 0a             	shl    eax,0xa
c001622c:	c1 ff 1f             	sar    edi,0x1f
c001622f:	57                   	push   edi
c0016230:	56                   	push   esi
c0016231:	52                   	push   edx
c0016232:	50                   	push   eax
c0016233:	e8 94 f5 00 00       	call   c00257cc <__udivdi3>
c0016238:	eb 5a                	jmp    c0016294 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001623a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016241:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016248:	83 e1 7f             	and    ecx,0x7f
c001624b:	83 e0 7f             	and    eax,0x7f
c001624e:	01 c1                	add    ecx,eax
c0016250:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016257:	83 e0 7f             	and    eax,0x7f
c001625a:	01 c1                	add    ecx,eax
c001625c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016263:	83 e0 7f             	and    eax,0x7f
c0016266:	00 c1                	add    cl,al
c0016268:	74 41                	je     c00162ab <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001626a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016270:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016276:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001627c:	83 ec 10             	sub    esp,0x10
c001627f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016283:	89 f7                	mov    edi,esi
c0016285:	c1 e0 0a             	shl    eax,0xa
c0016288:	c1 ff 1f             	sar    edi,0x1f
c001628b:	57                   	push   edi
c001628c:	56                   	push   esi
c001628d:	52                   	push   edx
c001628e:	50                   	push   eax
c001628f:	e8 38 f5 00 00       	call   c00257cc <__udivdi3>
c0016294:	83 c4 14             	add    esp,0x14
c0016297:	52                   	push   edx
c0016298:	50                   	push   eax
c0016299:	6a 00                	push   0x0
c001629b:	6a 00                	push   0x0
c001629d:	53                   	push   ebx
c001629e:	e8 53 fe ff ff       	call   c00160f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00162a3:	83 c4 20             	add    esp,0x20
c00162a6:	e9 79 01 00 00       	jmp    c0016424 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00162ab:	89 f0                	mov    eax,esi
c00162ad:	31 f6                	xor    esi,esi
c00162af:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00162b6:	75 02                	jne    c00162ba <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00162b8:	89 f1                	mov    ecx,esi
c00162ba:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00162c1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00162c8:	c1 e2 08             	shl    edx,0x8
c00162cb:	c1 e7 10             	shl    edi,0x10
c00162ce:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00162d6:	09 fa                	or     edx,edi
c00162d8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00162e0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00162e7:	83 c0 10             	add    eax,0x10
c00162ea:	09 fa                	or     edx,edi
c00162ec:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00162f3:	c1 e7 18             	shl    edi,0x18
c00162f6:	09 fa                	or     edx,edi
c00162f8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00162ff:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016303:	c1 e7 10             	shl    edi,0x10
c0016306:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001630d:	c1 e2 08             	shl    edx,0x8
c0016310:	09 fa                	or     edx,edi
c0016312:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016319:	09 fa                	or     edx,edi
c001631b:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016322:	c1 e7 18             	shl    edi,0x18
c0016325:	09 fa                	or     edx,edi
c0016327:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001632b:	46                   	inc    esi
c001632c:	83 fe 04             	cmp    esi,0x4
c001632f:	0f 85 7a ff ff ff    	jne    c00162af <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016339:	83 f0 01             	xor    eax,0x1
c001633c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016340:	75 57                	jne    c0016399 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016342:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016346:	83 f0 01             	xor    eax,0x1
c0016349:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001634d:	75 4a                	jne    c0016399 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001634f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016353:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001635b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016363:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016369:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001636f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016375:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016379:	89 f7                	mov    edi,esi
c001637b:	c1 e0 0a             	shl    eax,0xa
c001637e:	c1 ff 1f             	sar    edi,0x1f
c0016381:	57                   	push   edi
c0016382:	56                   	push   esi
c0016383:	52                   	push   edx
c0016384:	50                   	push   eax
c0016385:	e8 42 f4 00 00       	call   c00257cc <__udivdi3>
c001638a:	83 c4 10             	add    esp,0x10
c001638d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016391:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016395:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016399:	84 c9                	test   cl,cl
c001639b:	74 53                	je     c00163f0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001639d:	0f b6 c9             	movzx  ecx,cl
c00163a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00163a8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00163ac:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00163b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00163b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00163b8:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00163bc:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00163c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00163c4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00163c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00163d0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00163d4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00163d8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00163dc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00163e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00163e4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00163e8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00163ec:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00163f0:	31 ed                	xor    ebp,ebp
c00163f2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00163f6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00163fa:	89 f8                	mov    eax,edi
c00163fc:	09 f0                	or     eax,esi
c00163fe:	74 1e                	je     c001641e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016400:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016404:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016408:	89 d1                	mov    ecx,edx
c001640a:	09 c1                	or     ecx,eax
c001640c:	74 10                	je     c001641e <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001640e:	83 ec 0c             	sub    esp,0xc
c0016411:	57                   	push   edi
c0016412:	56                   	push   esi
c0016413:	52                   	push   edx
c0016414:	50                   	push   eax
c0016415:	53                   	push   ebx
c0016416:	e8 db fc ff ff       	call   c00160f6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001641b:	83 c4 20             	add    esp,0x20
c001641e:	45                   	inc    ebp
c001641f:	83 fd 04             	cmp    ebp,0x4
c0016422:	75 ce                	jne    c00163f2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016424:	81 c4 5c 02 00 00    	add    esp,0x25c
c001642a:	5b                   	pop    ebx
c001642b:	5e                   	pop    esi
c001642c:	5f                   	pop    edi
c001642d:	5d                   	pop    ebp
c001642e:	c3                   	ret    
c001642f:	90                   	nop

c0016430 <Serial::Serial(char const*)>:
c0016430:	83 ec 0c             	sub    esp,0xc
c0016433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016437:	83 ec 08             	sub    esp,0x8
c001643a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001643e:	50                   	push   eax
c001643f:	e8 a8 da ff ff       	call   c0013eec <Device::Device(char const*)>
c0016444:	83 c4 10             	add    esp,0x10
c0016447:	ba e8 9e 02 c0       	mov    edx,0xc0029ee8
c001644c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016450:	89 10                	mov    DWORD PTR [eax],edx
c0016452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016456:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016460:	90                   	nop
c0016461:	83 c4 0c             	add    esp,0xc
c0016464:	c3                   	ret    
c0016465:	90                   	nop

c0016466 <Serial::~Serial()>:
c0016466:	83 ec 0c             	sub    esp,0xc
c0016469:	ba e8 9e 02 c0       	mov    edx,0xc0029ee8
c001646e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016472:	89 10                	mov    DWORD PTR [eax],edx
c0016474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016478:	83 ec 0c             	sub    esp,0xc
c001647b:	50                   	push   eax
c001647c:	e8 4d d7 ff ff       	call   c0013bce <Device::~Device()>
c0016481:	83 c4 10             	add    esp,0x10
c0016484:	90                   	nop
c0016485:	83 c4 0c             	add    esp,0xc
c0016488:	c3                   	ret    
c0016489:	90                   	nop

c001648a <Serial::~Serial()>:
c001648a:	83 ec 0c             	sub    esp,0xc
c001648d:	83 ec 0c             	sub    esp,0xc
c0016490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016494:	e8 cd ff ff ff       	call   c0016466 <Serial::~Serial()>
c0016499:	83 c4 10             	add    esp,0x10
c001649c:	83 ec 08             	sub    esp,0x8
c001649f:	68 58 01 00 00       	push   0x158
c00164a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164a8:	e8 48 c3 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c00164ad:	83 c4 10             	add    esp,0x10
c00164b0:	83 c4 0c             	add    esp,0xc
c00164b3:	c3                   	ret    

c00164b4 <Timer::Timer(char const*)>:
c00164b4:	83 ec 0c             	sub    esp,0xc
c00164b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164bb:	83 ec 08             	sub    esp,0x8
c00164be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c2:	50                   	push   eax
c00164c3:	e8 24 da ff ff       	call   c0013eec <Device::Device(char const*)>
c00164c8:	83 c4 10             	add    esp,0x10
c00164cb:	ba 2c 9f 02 c0       	mov    edx,0xc0029f2c
c00164d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164d4:	89 10                	mov    DWORD PTR [eax],edx
c00164d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164da:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00164e4:	90                   	nop
c00164e5:	83 c4 0c             	add    esp,0xc
c00164e8:	c3                   	ret    
c00164e9:	90                   	nop

c00164ea <Timer::~Timer()>:
c00164ea:	83 ec 0c             	sub    esp,0xc
c00164ed:	ba 2c 9f 02 c0       	mov    edx,0xc0029f2c
c00164f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f6:	89 10                	mov    DWORD PTR [eax],edx
c00164f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164fc:	83 ec 0c             	sub    esp,0xc
c00164ff:	50                   	push   eax
c0016500:	e8 c9 d6 ff ff       	call   c0013bce <Device::~Device()>
c0016505:	83 c4 10             	add    esp,0x10
c0016508:	90                   	nop
c0016509:	83 c4 0c             	add    esp,0xc
c001650c:	c3                   	ret    
c001650d:	90                   	nop

c001650e <Timer::~Timer()>:
c001650e:	83 ec 0c             	sub    esp,0xc
c0016511:	83 ec 0c             	sub    esp,0xc
c0016514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016518:	e8 cd ff ff ff       	call   c00164ea <Timer::~Timer()>
c001651d:	83 c4 10             	add    esp,0x10
c0016520:	83 ec 08             	sub    esp,0x8
c0016523:	68 5c 01 00 00       	push   0x15c
c0016528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001652c:	e8 c4 c2 ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0016531:	83 c4 10             	add    esp,0x10
c0016534:	83 c4 0c             	add    esp,0xc
c0016537:	c3                   	ret    

c0016538 <Timer::read()>:
c0016538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001653c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016542:	c3                   	ret    

c0016543 <timerHandler(unsigned long long)>:
c0016543:	55                   	push   ebp
c0016544:	57                   	push   edi
c0016545:	56                   	push   esi
c0016546:	53                   	push   ebx
c0016547:	83 ec 0c             	sub    esp,0xc
c001654a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001654e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016552:	01 35 90 d5 02 c0    	add    DWORD PTR ds:0xc002d590,esi
c0016558:	11 3d 94 d5 02 c0    	adc    DWORD PTR ds:0xc002d594,edi
c001655e:	80 3d 0d cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cf0d,0x0
c0016565:	0f 84 07 01 00 00    	je     c0016672 <timerHandler(unsigned long long)+0x12f>
c001656b:	e8 1b 6c 00 00       	call   c001d18b <lockStuff()>
c0016570:	83 ec 0c             	sub    esp,0xc
c0016573:	68 3c e4 02 c0       	push   0xc002e43c
c0016578:	e8 c1 12 01 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001657d:	c7 04 24 3c e4 02 c0 	mov    DWORD PTR [esp],0xc002e43c
c0016584:	89 c3                	mov    ebx,eax
c0016586:	e8 bb 12 01 00       	call   c0027846 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001658b:	83 c4 10             	add    esp,0x10
c001658e:	84 c0                	test   al,al
c0016590:	74 60                	je     c00165f2 <timerHandler(unsigned long long)+0xaf>
c0016592:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016598:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c001659b:	85 c0                	test   eax,eax
c001659d:	0f 85 91 00 00 00    	jne    c0016634 <timerHandler(unsigned long long)+0xf1>
c00165a3:	e9 be 00 00 00       	jmp    c0016666 <timerHandler(unsigned long long)+0x123>
c00165a8:	83 ec 0c             	sub    esp,0xc
c00165ab:	55                   	push   ebp
c00165ac:	e8 cb 71 00 00       	call   c001d77c <unblockTask(ThreadControlBlock*)>
c00165b1:	83 c4 10             	add    esp,0x10
c00165b4:	39 eb                	cmp    ebx,ebp
c00165b6:	75 12                	jne    c00165ca <timerHandler(unsigned long long)+0x87>
c00165b8:	83 ec 0c             	sub    esp,0xc
c00165bb:	68 3c e4 02 c0       	push   0xc002e43c
c00165c0:	e8 79 12 01 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165c5:	89 c3                	mov    ebx,eax
c00165c7:	83 c4 10             	add    esp,0x10
c00165ca:	83 ec 0c             	sub    esp,0xc
c00165cd:	68 3c e4 02 c0       	push   0xc002e43c
c00165d2:	e8 6f 12 01 00       	call   c0027846 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00165d7:	83 c4 10             	add    esp,0x10
c00165da:	84 c0                	test   al,al
c00165dc:	75 b4                	jne    c0016592 <timerHandler(unsigned long long)+0x4f>
c00165de:	83 ec 0c             	sub    esp,0xc
c00165e1:	68 3c e4 02 c0       	push   0xc002e43c
c00165e6:	e8 53 12 01 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165eb:	83 c4 10             	add    esp,0x10
c00165ee:	39 d8                	cmp    eax,ebx
c00165f0:	74 a0                	je     c0016592 <timerHandler(unsigned long long)+0x4f>
c00165f2:	83 ec 0c             	sub    esp,0xc
c00165f5:	68 3c e4 02 c0       	push   0xc002e43c
c00165fa:	e8 3f 12 01 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165ff:	c7 04 24 3c e4 02 c0 	mov    DWORD PTR [esp],0xc002e43c
c0016606:	89 c5                	mov    ebp,eax
c0016608:	e8 55 12 01 00       	call   c0027862 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001660d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016610:	83 c4 10             	add    esp,0x10
c0016613:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016616:	39 15 90 d5 02 c0    	cmp    DWORD PTR ds:0xc002d590,edx
c001661c:	a1 94 d5 02 c0       	mov    eax,ds:0xc002d594
c0016621:	19 c8                	sbb    eax,ecx
c0016623:	73 83                	jae    c00165a8 <timerHandler(unsigned long long)+0x65>
c0016625:	50                   	push   eax
c0016626:	50                   	push   eax
c0016627:	55                   	push   ebp
c0016628:	68 3c e4 02 c0       	push   0xc002e43c
c001662d:	e8 de 12 01 00       	call   c0027910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016632:	eb 93                	jmp    c00165c7 <timerHandler(unsigned long long)+0x84>
c0016634:	80 3d 0c cf 02 c0 00 	cmp    BYTE PTR ds:0xc002cf0c,0x0
c001663b:	74 29                	je     c0016666 <timerHandler(unsigned long long)+0x123>
c001663d:	39 c6                	cmp    esi,eax
c001663f:	bb 00 00 00 00       	mov    ebx,0x0
c0016644:	19 df                	sbb    edi,ebx
c0016646:	72 19                	jb     c0016661 <timerHandler(unsigned long long)+0x11e>
c0016648:	e8 17 6b 00 00       	call   c001d164 <lockScheduler()>
c001664d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016652:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016655:	e8 46 6e 00 00       	call   c001d4a0 <schedule()>
c001665a:	e8 07 6b 00 00       	call   c001d166 <unlockScheduler()>
c001665f:	eb 05                	jmp    c0016666 <timerHandler(unsigned long long)+0x123>
c0016661:	29 f0                	sub    eax,esi
c0016663:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016666:	83 c4 0c             	add    esp,0xc
c0016669:	5b                   	pop    ebx
c001666a:	5e                   	pop    esi
c001666b:	5f                   	pop    edi
c001666c:	5d                   	pop    ebp
c001666d:	e9 b3 6e 00 00       	jmp    c001d525 <unlockStuff()>
c0016672:	83 c4 0c             	add    esp,0xc
c0016675:	5b                   	pop    ebx
c0016676:	5e                   	pop    esi
c0016677:	5f                   	pop    edi
c0016678:	5d                   	pop    ebp
c0016679:	c3                   	ret    

c001667a <setupTimer(int)>:
c001667a:	57                   	push   edi
c001667b:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0016680:	56                   	push   esi
c0016681:	53                   	push   ebx
c0016682:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016686:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001668c:	83 ec 0c             	sub    esp,0xc
c001668f:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016695:	e8 4e d9 ff ff       	call   c0013fe8 <Device::getName()>
c001669a:	83 c4 10             	add    esp,0x10
c001669d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00166a0:	0f 85 8d 00 00 00    	jne    c0016733 <setupTimer(int)+0xb9>
c00166a6:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c00166ab:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00166b2:	74 7f                	je     c0016733 <setupTimer(int)+0xb9>
c00166b4:	83 ec 0c             	sub    esp,0xc
c00166b7:	68 5c 01 00 00       	push   0x15c
c00166bc:	e8 63 8f ff ff       	call   c000f624 <malloc>
c00166c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00166c4:	89 c3                	mov    ebx,eax
c00166c6:	e8 e1 ec 00 00       	call   c00253ac <PIT::PIT()>
c00166cb:	59                   	pop    ecx
c00166cc:	5f                   	pop    edi
c00166cd:	53                   	push   ebx
c00166ce:	ff 35 08 cf 02 c0    	push   DWORD PTR ds:0xc002cf08
c00166d4:	e8 23 d6 ff ff       	call   c0013cfc <Device::addChild(Device*)>
c00166d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00166db:	6a 00                	push   0x0
c00166dd:	6a 00                	push   0x0
c00166df:	56                   	push   esi
c00166e0:	53                   	push   ebx
c00166e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00166e4:	83 c4 14             	add    esp,0x14
c00166e7:	68 60 01 00 00       	push   0x160
c00166ec:	e8 33 8f ff ff       	call   c000f624 <malloc>
c00166f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00166f4:	89 c7                	mov    edi,eax
c00166f6:	e8 61 eb 00 00       	call   c002525c <APICTimer::APICTimer()>
c00166fb:	6a 00                	push   0x0
c00166fd:	6a 00                	push   0x0
c00166ff:	56                   	push   esi
c0016700:	57                   	push   edi
c0016701:	e8 58 ea 00 00       	call   c002515e <APICTimer::open(int, int, void*)>
c0016706:	83 c4 20             	add    esp,0x20
c0016709:	8b 03                	mov    eax,DWORD PTR [ebx]
c001670b:	6a 00                	push   0x0
c001670d:	6a 00                	push   0x0
c001670f:	6a 00                	push   0x0
c0016711:	53                   	push   ebx
c0016712:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016715:	58                   	pop    eax
c0016716:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c001671b:	5a                   	pop    edx
c001671c:	57                   	push   edi
c001671d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016723:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016729:	e8 ce d5 ff ff       	call   c0013cfc <Device::addChild(Device*)>
c001672e:	83 c4 10             	add    esp,0x10
c0016731:	eb 33                	jmp    c0016766 <setupTimer(int)+0xec>
c0016733:	83 ec 0c             	sub    esp,0xc
c0016736:	68 5c 01 00 00       	push   0x15c
c001673b:	e8 e4 8e ff ff       	call   c000f624 <malloc>
c0016740:	89 04 24             	mov    DWORD PTR [esp],eax
c0016743:	89 c3                	mov    ebx,eax
c0016745:	e8 62 ec 00 00       	call   c00253ac <PIT::PIT()>
c001674a:	58                   	pop    eax
c001674b:	5a                   	pop    edx
c001674c:	53                   	push   ebx
c001674d:	ff 35 08 cf 02 c0    	push   DWORD PTR ds:0xc002cf08
c0016753:	e8 a4 d5 ff ff       	call   c0013cfc <Device::addChild(Device*)>
c0016758:	8b 03                	mov    eax,DWORD PTR [ebx]
c001675a:	6a 00                	push   0x0
c001675c:	6a 00                	push   0x0
c001675e:	56                   	push   esi
c001675f:	53                   	push   ebx
c0016760:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016763:	83 c4 20             	add    esp,0x20
c0016766:	89 d8                	mov    eax,ebx
c0016768:	5b                   	pop    ebx
c0016769:	5e                   	pop    esi
c001676a:	5f                   	pop    edi
c001676b:	c3                   	ret    

c001676c <VCache::VCache(PhysicalDisk*)>:
c001676c:	53                   	push   ebx
c001676d:	83 ec 18             	sub    esp,0x18
c0016770:	ba 5c 9f 02 c0       	mov    edx,0xc0029f5c
c0016775:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016779:	89 10                	mov    DWORD PTR [eax],edx
c001677b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001677f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016786:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001678a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016791:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016795:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001679c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00167a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167a7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00167ae:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00167b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167b9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00167c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167c4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00167c8:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00167d0:	83 ec 0c             	sub    esp,0xc
c00167d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00167d7:	e8 48 8e ff ff       	call   c000f624 <malloc>
c00167dc:	83 c4 10             	add    esp,0x10
c00167df:	89 c3                	mov    ebx,eax
c00167e1:	83 ec 0c             	sub    esp,0xc
c00167e4:	53                   	push   ebx
c00167e5:	e8 9a 6a 00 00       	call   c001d284 <Mutex::Mutex()>
c00167ea:	83 c4 10             	add    esp,0x10
c00167ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167f1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00167f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167f8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00167fc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00167ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016803:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001680a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001680e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016818:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001681b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001681f:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016825:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001682b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001682f:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016832:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016835:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016839:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001683d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016841:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016847:	c1 e0 06             	shl    eax,0x6
c001684a:	83 ec 0c             	sub    esp,0xc
c001684d:	50                   	push   eax
c001684e:	e8 d1 8d ff ff       	call   c000f624 <malloc>
c0016853:	83 c4 10             	add    esp,0x10
c0016856:	89 c2                	mov    edx,eax
c0016858:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001685c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001685f:	90                   	nop
c0016860:	83 c4 18             	add    esp,0x18
c0016863:	5b                   	pop    ebx
c0016864:	c3                   	ret    
c0016865:	90                   	nop

c0016866 <VCache::writeWriteBuffer()>:
c0016866:	53                   	push   ebx
c0016867:	83 ec 14             	sub    esp,0x14
c001686a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001686e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016871:	8b 10                	mov    edx,DWORD PTR [eax]
c0016873:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016876:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016879:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001687c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001687f:	50                   	push   eax
c0016880:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016883:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001688a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016891:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016895:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001689c:	83 c4 28             	add    esp,0x28
c001689f:	5b                   	pop    ebx
c00168a0:	c3                   	ret    
c00168a1:	90                   	nop

c00168a2 <VCache::~VCache()>:
c00168a2:	83 ec 0c             	sub    esp,0xc
c00168a5:	ba 5c 9f 02 c0       	mov    edx,0xc0029f5c
c00168aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ae:	89 10                	mov    DWORD PTR [eax],edx
c00168b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b4:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00168b7:	84 c0                	test   al,al
c00168b9:	74 0f                	je     c00168ca <VCache::~VCache()+0x28>
c00168bb:	83 ec 0c             	sub    esp,0xc
c00168be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168c2:	e8 9f ff ff ff       	call   c0016866 <VCache::writeWriteBuffer()>
c00168c7:	83 c4 10             	add    esp,0x10
c00168ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ce:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00168d1:	83 ec 0c             	sub    esp,0xc
c00168d4:	50                   	push   eax
c00168d5:	e8 5a 8d ff ff       	call   c000f634 <free>
c00168da:	83 c4 10             	add    esp,0x10
c00168dd:	90                   	nop
c00168de:	83 c4 0c             	add    esp,0xc
c00168e1:	c3                   	ret    

c00168e2 <VCache::~VCache()>:
c00168e2:	83 ec 0c             	sub    esp,0xc
c00168e5:	83 ec 0c             	sub    esp,0xc
c00168e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ec:	e8 b1 ff ff ff       	call   c00168a2 <VCache::~VCache()>
c00168f1:	83 c4 10             	add    esp,0x10
c00168f4:	83 ec 08             	sub    esp,0x8
c00168f7:	6a 30                	push   0x30
c00168f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168fd:	e8 f3 be ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0016902:	83 c4 10             	add    esp,0x10
c0016905:	83 c4 0c             	add    esp,0xc
c0016908:	c3                   	ret    
c0016909:	90                   	nop

c001690a <VCache::write(unsigned long long, int, void*)>:
c001690a:	55                   	push   ebp
c001690b:	57                   	push   edi
c001690c:	56                   	push   esi
c001690d:	53                   	push   ebx
c001690e:	83 ec 28             	sub    esp,0x28
c0016911:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016915:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016919:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001691d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016921:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016924:	e8 bd 6d 00 00       	call   c001d6e6 <Semaphore::acquire()>
c0016929:	83 c4 10             	add    esp,0x10
c001692c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016930:	74 66                	je     c0016998 <VCache::write(unsigned long long, int, void*)+0x8e>
c0016932:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016935:	99                   	cdq    
c0016936:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001693a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001693d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016940:	89 c1                	mov    ecx,eax
c0016942:	89 d0                	mov    eax,edx
c0016944:	31 f1                	xor    ecx,esi
c0016946:	31 f8                	xor    eax,edi
c0016948:	89 ca                	mov    edx,ecx
c001694a:	09 c2                	or     edx,eax
c001694c:	75 3e                	jne    c001698c <VCache::write(unsigned long long, int, void*)+0x82>
c001694e:	83 fd 01             	cmp    ebp,0x1
c0016951:	75 39                	jne    c001698c <VCache::write(unsigned long long, int, void*)+0x82>
c0016953:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016956:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001695c:	51                   	push   ecx
c001695d:	50                   	push   eax
c001695e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016962:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016966:	0f af c8             	imul   ecx,eax
c0016969:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001696c:	51                   	push   ecx
c001696d:	e8 2e 9d fe ff       	call   c00006a0 <memcpy>
c0016972:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016975:	83 c4 10             	add    esp,0x10
c0016978:	40                   	inc    eax
c0016979:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001697c:	83 f8 40             	cmp    eax,0x40
c001697f:	75 57                	jne    c00169d8 <VCache::write(unsigned long long, int, void*)+0xce>
c0016981:	83 ec 0c             	sub    esp,0xc
c0016984:	53                   	push   ebx
c0016985:	e8 dc fe ff ff       	call   c0016866 <VCache::writeWriteBuffer()>
c001698a:	eb 34                	jmp    c00169c0 <VCache::write(unsigned long long, int, void*)+0xb6>
c001698c:	83 ec 0c             	sub    esp,0xc
c001698f:	53                   	push   ebx
c0016990:	e8 d1 fe ff ff       	call   c0016866 <VCache::writeWriteBuffer()>
c0016995:	83 c4 10             	add    esp,0x10
c0016998:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001699b:	83 fd 3f             	cmp    ebp,0x3f
c001699e:	7f 25                	jg     c00169c5 <VCache::write(unsigned long long, int, void*)+0xbb>
c00169a0:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00169a3:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00169a6:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00169a9:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00169ad:	52                   	push   edx
c00169ae:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00169b4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00169b8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00169bb:	e8 e0 9c fe ff       	call   c00006a0 <memcpy>
c00169c0:	83 c4 10             	add    esp,0x10
c00169c3:	eb 13                	jmp    c00169d8 <VCache::write(unsigned long long, int, void*)+0xce>
c00169c5:	83 ec 0c             	sub    esp,0xc
c00169c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00169ca:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00169ce:	55                   	push   ebp
c00169cf:	57                   	push   edi
c00169d0:	56                   	push   esi
c00169d1:	50                   	push   eax
c00169d2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00169d5:	83 c4 20             	add    esp,0x20
c00169d8:	83 ec 0c             	sub    esp,0xc
c00169db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00169de:	e8 b1 72 00 00       	call   c001dc94 <Semaphore::release()>
c00169e3:	83 c4 2c             	add    esp,0x2c
c00169e6:	31 c0                	xor    eax,eax
c00169e8:	5b                   	pop    ebx
c00169e9:	5e                   	pop    esi
c00169ea:	5f                   	pop    edi
c00169eb:	5d                   	pop    ebp
c00169ec:	c3                   	ret    
c00169ed:	90                   	nop

c00169ee <VCache::read(unsigned long long, int, void*)>:
c00169ee:	57                   	push   edi
c00169ef:	56                   	push   esi
c00169f0:	53                   	push   ebx
c00169f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00169f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00169f9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00169fd:	83 ec 0c             	sub    esp,0xc
c0016a00:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a03:	e8 de 6c 00 00       	call   c001d6e6 <Semaphore::acquire()>
c0016a08:	83 c4 10             	add    esp,0x10
c0016a0b:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a0f:	74 0c                	je     c0016a1d <VCache::read(unsigned long long, int, void*)+0x2f>
c0016a11:	83 ec 0c             	sub    esp,0xc
c0016a14:	53                   	push   ebx
c0016a15:	e8 4c fe ff ff       	call   c0016866 <VCache::writeWriteBuffer()>
c0016a1a:	83 c4 10             	add    esp,0x10
c0016a1d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a20:	83 ec 0c             	sub    esp,0xc
c0016a23:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a2d:	57                   	push   edi
c0016a2e:	56                   	push   esi
c0016a2f:	50                   	push   eax
c0016a30:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016a33:	83 c4 14             	add    esp,0x14
c0016a36:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a39:	e8 56 72 00 00       	call   c001dc94 <Semaphore::release()>
c0016a3e:	83 c4 10             	add    esp,0x10
c0016a41:	31 c0                	xor    eax,eax
c0016a43:	5b                   	pop    ebx
c0016a44:	5e                   	pop    esi
c0016a45:	5f                   	pop    edi
c0016a46:	c3                   	ret    
c0016a47:	90                   	nop

c0016a48 <Video::putrect(int, int, int, int, unsigned int)>:
c0016a48:	55                   	push   ebp
c0016a49:	57                   	push   edi
c0016a4a:	56                   	push   esi
c0016a4b:	53                   	push   ebx
c0016a4c:	83 ec 1c             	sub    esp,0x1c
c0016a4f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016a53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016a57:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016a5b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016a5f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a67:	01 df                	add    edi,ebx
c0016a69:	39 fb                	cmp    ebx,edi
c0016a6b:	7d 1f                	jge    c0016a8c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016a6d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016a71:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016a75:	7d 12                	jge    c0016a89 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016a77:	8b 16                	mov    edx,DWORD PTR [esi]
c0016a79:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016a7d:	53                   	push   ebx
c0016a7e:	55                   	push   ebp
c0016a7f:	45                   	inc    ebp
c0016a80:	56                   	push   esi
c0016a81:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016a84:	83 c4 10             	add    esp,0x10
c0016a87:	eb e8                	jmp    c0016a71 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016a89:	43                   	inc    ebx
c0016a8a:	eb dd                	jmp    c0016a69 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016a8c:	83 c4 1c             	add    esp,0x1c
c0016a8f:	5b                   	pop    ebx
c0016a90:	5e                   	pop    esi
c0016a91:	5f                   	pop    edi
c0016a92:	5d                   	pop    ebp
c0016a93:	c3                   	ret    

c0016a94 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016a94:	55                   	push   ebp
c0016a95:	57                   	push   edi
c0016a96:	31 ff                	xor    edi,edi
c0016a98:	56                   	push   esi
c0016a99:	53                   	push   ebx
c0016a9a:	83 ec 1c             	sub    esp,0x1c
c0016a9d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016aa1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016aa5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016aac:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016ab1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ab5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016ab9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016abd:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016ac0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016ac4:	01 f9                	add    ecx,edi
c0016ac6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016aca:	7d 2f                	jge    c0016afb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016acc:	31 f6                	xor    esi,esi
c0016ace:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016ad2:	01 f2                	add    edx,esi
c0016ad4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016ad8:	7d 1a                	jge    c0016af4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016ada:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016add:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016ae0:	46                   	inc    esi
c0016ae1:	51                   	push   ecx
c0016ae2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016ae6:	52                   	push   edx
c0016ae7:	55                   	push   ebp
c0016ae8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016aeb:	83 c4 10             	add    esp,0x10
c0016aee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016af2:	eb da                	jmp    c0016ace <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016af4:	47                   	inc    edi
c0016af5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016af9:	eb c5                	jmp    c0016ac0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016afb:	83 c4 1c             	add    esp,0x1c
c0016afe:	5b                   	pop    ebx
c0016aff:	5e                   	pop    esi
c0016b00:	5f                   	pop    edi
c0016b01:	5d                   	pop    ebp
c0016b02:	c3                   	ret    
c0016b03:	90                   	nop

c0016b04 <Video::blit(unsigned int*, int, int, int, int)>:
c0016b04:	55                   	push   ebp
c0016b05:	57                   	push   edi
c0016b06:	56                   	push   esi
c0016b07:	53                   	push   ebx
c0016b08:	83 ec 1c             	sub    esp,0x1c
c0016b0b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016b0f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b13:	85 c0                	test   eax,eax
c0016b15:	79 02                	jns    c0016b19 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016b17:	31 c0                	xor    eax,eax
c0016b19:	c1 e0 02             	shl    eax,0x2
c0016b1c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b24:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016b28:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016b2c:	39 d8                	cmp    eax,ebx
c0016b2e:	7e 49                	jle    c0016b79 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016b30:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016b36:	7c 41                	jl     c0016b79 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016b38:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016b3c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016b40:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016b44:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016b48:	39 f9                	cmp    ecx,edi
c0016b4a:	7e 22                	jle    c0016b6e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016b4c:	83 c5 04             	add    ebp,0x4
c0016b4f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016b55:	7c 14                	jl     c0016b6b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016b57:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016b59:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016b5c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016b60:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016b64:	56                   	push   esi
c0016b65:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016b68:	83 c4 10             	add    esp,0x10
c0016b6b:	47                   	inc    edi
c0016b6c:	eb d2                	jmp    c0016b40 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016b6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b72:	43                   	inc    ebx
c0016b73:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016b77:	eb ab                	jmp    c0016b24 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016b79:	83 c4 1c             	add    esp,0x1c
c0016b7c:	5b                   	pop    ebx
c0016b7d:	5e                   	pop    esi
c0016b7e:	5f                   	pop    edi
c0016b7f:	5d                   	pop    ebp
c0016b80:	c3                   	ret    
c0016b81:	90                   	nop

c0016b82 <Video::clearScreen(unsigned int)>:
c0016b82:	57                   	push   edi
c0016b83:	56                   	push   esi
c0016b84:	53                   	push   ebx
c0016b85:	31 db                	xor    ebx,ebx
c0016b87:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016b8b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016b91:	7e 1f                	jle    c0016bb2 <Video::clearScreen(unsigned int)+0x30>
c0016b93:	31 ff                	xor    edi,edi
c0016b95:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016b9b:	7e 12                	jle    c0016baf <Video::clearScreen(unsigned int)+0x2d>
c0016b9d:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ba3:	53                   	push   ebx
c0016ba4:	57                   	push   edi
c0016ba5:	47                   	inc    edi
c0016ba6:	56                   	push   esi
c0016ba7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016baa:	83 c4 10             	add    esp,0x10
c0016bad:	eb e6                	jmp    c0016b95 <Video::clearScreen(unsigned int)+0x13>
c0016baf:	43                   	inc    ebx
c0016bb0:	eb d9                	jmp    c0016b8b <Video::clearScreen(unsigned int)+0x9>
c0016bb2:	5b                   	pop    ebx
c0016bb3:	5e                   	pop    esi
c0016bb4:	5f                   	pop    edi
c0016bb5:	c3                   	ret    

c0016bb6 <Video::putpixel(int, int, unsigned int)>:
c0016bb6:	c7 44 24 04 64 9f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029f64
c0016bbe:	e9 f2 2f 00 00       	jmp    c0019bb5 <Krnl::panic(char const*)>
c0016bc3:	90                   	nop

c0016bc4 <Video::Video(char const*)>:
c0016bc4:	83 ec 0c             	sub    esp,0xc
c0016bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bcb:	83 ec 08             	sub    esp,0x8
c0016bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bd2:	50                   	push   eax
c0016bd3:	e8 14 d3 ff ff       	call   c0013eec <Device::Device(char const*)>
c0016bd8:	83 c4 10             	add    esp,0x10
c0016bdb:	ba e8 9f 02 c0       	mov    edx,0xc0029fe8
c0016be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016be4:	89 10                	mov    DWORD PTR [eax],edx
c0016be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bea:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016bf4:	90                   	nop
c0016bf5:	83 c4 0c             	add    esp,0xc
c0016bf8:	c3                   	ret    
c0016bf9:	90                   	nop

c0016bfa <Video::~Video()>:
c0016bfa:	83 ec 0c             	sub    esp,0xc
c0016bfd:	ba e8 9f 02 c0       	mov    edx,0xc0029fe8
c0016c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c06:	89 10                	mov    DWORD PTR [eax],edx
c0016c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c0c:	83 ec 0c             	sub    esp,0xc
c0016c0f:	50                   	push   eax
c0016c10:	e8 b9 cf ff ff       	call   c0013bce <Device::~Device()>
c0016c15:	83 c4 10             	add    esp,0x10
c0016c18:	90                   	nop
c0016c19:	83 c4 0c             	add    esp,0xc
c0016c1c:	c3                   	ret    
c0016c1d:	90                   	nop

c0016c1e <Video::~Video()>:
c0016c1e:	83 ec 0c             	sub    esp,0xc
c0016c21:	83 ec 0c             	sub    esp,0xc
c0016c24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c28:	e8 cd ff ff ff       	call   c0016bfa <Video::~Video()>
c0016c2d:	83 c4 10             	add    esp,0x10
c0016c30:	83 ec 08             	sub    esp,0x8
c0016c33:	68 64 01 00 00       	push   0x164
c0016c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c3c:	e8 b4 bb ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0016c41:	83 c4 10             	add    esp,0x10
c0016c44:	83 c4 0c             	add    esp,0xc
c0016c47:	c3                   	ret    

c0016c48 <Video::isMonochrome()>:
c0016c48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c4c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016c52:	c3                   	ret    
c0016c53:	90                   	nop

c0016c54 <Video::getWidth()>:
c0016c54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c58:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016c5e:	c3                   	ret    
c0016c5f:	90                   	nop

c0016c60 <Video::getHeight()>:
c0016c60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c64:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c6a:	c3                   	ret    
c0016c6b:	90                   	nop

c0016c6c <Video::drawCursor(int, int, unsigned char*, int)>:
c0016c6c:	55                   	push   ebp
c0016c6d:	57                   	push   edi
c0016c6e:	56                   	push   esi
c0016c6f:	53                   	push   ebx
c0016c70:	83 ec 2c             	sub    esp,0x2c
c0016c73:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016c77:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016c7b:	83 f8 01             	cmp    eax,0x1
c0016c7e:	19 c9                	sbb    ecx,ecx
c0016c80:	31 db                	xor    ebx,ebx
c0016c82:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016c86:	89 cd                	mov    ebp,ecx
c0016c88:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016c90:	f7 d5                	not    ebp
c0016c92:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016c98:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016c9c:	01 d8                	add    eax,ebx
c0016c9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ca2:	56                   	push   esi
c0016ca3:	e8 b8 ff ff ff       	call   c0016c60 <Video::getHeight()>
c0016ca8:	59                   	pop    ecx
c0016ca9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016cad:	7e 70                	jle    c0016d1f <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016caf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016cb3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016cb7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016cba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016cbe:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016cc2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016cc9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ccd:	89 f8                	mov    eax,edi
c0016ccf:	83 c0 20             	add    eax,0x20
c0016cd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016cd6:	56                   	push   esi
c0016cd7:	e8 78 ff ff ff       	call   c0016c54 <Video::getWidth()>
c0016cdc:	5a                   	pop    edx
c0016cdd:	39 c7                	cmp    edi,eax
c0016cdf:	7d 34                	jge    c0016d15 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016ce1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016ce6:	74 05                	je     c0016ced <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016ce8:	8b 06                	mov    eax,DWORD PTR [esi]
c0016cea:	55                   	push   ebp
c0016ceb:	eb 0d                	jmp    c0016cfa <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016ced:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016cf2:	74 12                	je     c0016d06 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016cf4:	8b 06                	mov    eax,DWORD PTR [esi]
c0016cf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016cfa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016cfe:	57                   	push   edi
c0016cff:	56                   	push   esi
c0016d00:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d03:	83 c4 10             	add    esp,0x10
c0016d06:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016d0a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016d0e:	47                   	inc    edi
c0016d0f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016d13:	75 c1                	jne    c0016cd6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016d15:	43                   	inc    ebx
c0016d16:	83 fb 20             	cmp    ebx,0x20
c0016d19:	0f 85 79 ff ff ff    	jne    c0016c98 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016d1f:	83 c4 2c             	add    esp,0x2c
c0016d22:	5b                   	pop    ebx
c0016d23:	5e                   	pop    esi
c0016d24:	5f                   	pop    edi
c0016d25:	5d                   	pop    ebp
c0016d26:	c3                   	ret    
c0016d27:	90                   	nop

c0016d28 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016d28:	55                   	push   ebp
c0016d29:	57                   	push   edi
c0016d2a:	56                   	push   esi
c0016d2b:	53                   	push   ebx
c0016d2c:	83 ec 28             	sub    esp,0x28
c0016d2f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016d33:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016d37:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016d3b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016d3f:	c1 e7 08             	shl    edi,0x8
c0016d42:	01 c7                	add    edi,eax
c0016d44:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016d48:	c1 e0 08             	shl    eax,0x8
c0016d4b:	01 d0                	add    eax,edx
c0016d4d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d55:	0f af c7             	imul   eax,edi
c0016d58:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016d5f:	50                   	push   eax
c0016d60:	e8 bf 88 ff ff       	call   c000f624 <malloc>
c0016d65:	83 c4 10             	add    esp,0x10
c0016d68:	89 c5                	mov    ebp,eax
c0016d6a:	85 c0                	test   eax,eax
c0016d6c:	75 15                	jne    c0016d83 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016d6e:	83 ec 0c             	sub    esp,0xc
c0016d71:	68 85 9f 02 c0       	push   0xc0029f85
c0016d76:	e8 5a bb ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0016d7b:	83 c4 10             	add    esp,0x10
c0016d7e:	e9 1c 01 00 00       	jmp    c0016e9f <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016d83:	be 12 00 00 00       	mov    esi,0x12
c0016d88:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016d8c:	74 11                	je     c0016d9f <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016d8e:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016d92:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016d96:	c1 fe 03             	sar    esi,0x3
c0016d99:	0f af f0             	imul   esi,eax
c0016d9c:	83 c6 12             	add    esi,0x12
c0016d9f:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016da3:	74 04                	je     c0016da9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016da5:	85 ff                	test   edi,edi
c0016da7:	75 12                	jne    c0016dbb <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016da9:	83 ec 0c             	sub    esp,0xc
c0016dac:	68 9c 9f 02 c0       	push   0xc0029f9c
c0016db1:	e8 1f bb ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0016db6:	e9 ce 00 00 00       	jmp    c0016e89 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016dbb:	52                   	push   edx
c0016dbc:	52                   	push   edx
c0016dbd:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016dc1:	50                   	push   eax
c0016dc2:	68 b1 9f 02 c0       	push   0xc0029fb1
c0016dc7:	e8 09 bb ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0016dcc:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016dd0:	83 c4 10             	add    esp,0x10
c0016dd3:	80 fa 02             	cmp    dl,0x2
c0016dd6:	0f 85 98 00 00 00    	jne    c0016e74 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016ddc:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016de1:	75 10                	jne    c0016df3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016de3:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016de7:	75 0a                	jne    c0016df3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016de9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016dec:	83 e8 18             	sub    eax,0x18
c0016def:	a8 f7                	test   al,0xf7
c0016df1:	74 0a                	je     c0016dfd <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016df3:	83 ec 0c             	sub    esp,0xc
c0016df6:	68 be 9f 02 c0       	push   0xc0029fbe
c0016dfb:	eb 7f                	jmp    c0016e7c <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016dfd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016e05:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016e0d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016e11:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016e19:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016e1d:	75 0c                	jne    c0016e2b <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016e1f:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016e24:	c1 e0 18             	shl    eax,0x18
c0016e27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e2b:	41                   	inc    ecx
c0016e2c:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016e31:	c1 e2 10             	shl    edx,0x10
c0016e34:	89 d0                	mov    eax,edx
c0016e36:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016e3b:	c1 e2 08             	shl    edx,0x8
c0016e3e:	09 c2                	or     edx,eax
c0016e40:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016e44:	09 c2                	or     edx,eax
c0016e46:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016e4a:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016e4e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016e52:	c1 f8 03             	sar    eax,0x3
c0016e55:	01 c6                	add    esi,eax
c0016e57:	89 c8                	mov    eax,ecx
c0016e59:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016e5d:	39 c7                	cmp    edi,eax
c0016e5f:	7f b0                	jg     c0016e11 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016e61:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016e65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016e69:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016e6c:	7e 22                	jle    c0016e90 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016e6e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016e72:	eb 99                	jmp    c0016e0d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016e74:	50                   	push   eax
c0016e75:	50                   	push   eax
c0016e76:	52                   	push   edx
c0016e77:	68 cc 9f 02 c0       	push   0xc0029fcc
c0016e7c:	e8 54 ba ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0016e81:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016e84:	e8 ab 87 ff ff       	call   c000f634 <free>
c0016e89:	83 c4 10             	add    esp,0x10
c0016e8c:	31 ed                	xor    ebp,ebp
c0016e8e:	eb 0f                	jmp    c0016e9f <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016e90:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e94:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016e97:	89 38                	mov    DWORD PTR [eax],edi
c0016e99:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e9d:	89 08                	mov    DWORD PTR [eax],ecx
c0016e9f:	83 c4 1c             	add    esp,0x1c
c0016ea2:	89 e8                	mov    eax,ebp
c0016ea4:	5b                   	pop    ebx
c0016ea5:	5e                   	pop    esi
c0016ea6:	5f                   	pop    edi
c0016ea7:	5d                   	pop    ebp
c0016ea8:	c3                   	ret    
c0016ea9:	90                   	nop

c0016eaa <Video::putTGA(int, int, unsigned char*, int)>:
c0016eaa:	55                   	push   ebp
c0016eab:	57                   	push   edi
c0016eac:	56                   	push   esi
c0016ead:	53                   	push   ebx
c0016eae:	83 ec 28             	sub    esp,0x28
c0016eb1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016eb5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016eb9:	50                   	push   eax
c0016eba:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016ebe:	50                   	push   eax
c0016ebf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016ec3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016ec7:	56                   	push   esi
c0016ec8:	e8 5b fe ff ff       	call   c0016d28 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016ecd:	83 c4 20             	add    esp,0x20
c0016ed0:	85 c0                	test   eax,eax
c0016ed2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016ed6:	74 35                	je     c0016f0d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016ed8:	89 c7                	mov    edi,eax
c0016eda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ede:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016ee2:	39 d8                	cmp    eax,ebx
c0016ee4:	7e 27                	jle    c0016f0d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016ee6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016eea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016eee:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016ef2:	39 e8                	cmp    eax,ebp
c0016ef4:	7e 14                	jle    c0016f0a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016ef6:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ef8:	83 c7 04             	add    edi,0x4
c0016efb:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016efe:	53                   	push   ebx
c0016eff:	55                   	push   ebp
c0016f00:	45                   	inc    ebp
c0016f01:	56                   	push   esi
c0016f02:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f05:	83 c4 10             	add    esp,0x10
c0016f08:	eb e0                	jmp    c0016eea <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016f0a:	43                   	inc    ebx
c0016f0b:	eb cd                	jmp    c0016eda <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016f0d:	83 c4 1c             	add    esp,0x1c
c0016f10:	5b                   	pop    ebx
c0016f11:	5e                   	pop    esi
c0016f12:	5f                   	pop    edi
c0016f13:	5d                   	pop    ebp
c0016f14:	c3                   	ret    
c0016f15:	90                   	nop

c0016f16 <ACPI::close(int, int, void*)>:
c0016f16:	83 ec 1c             	sub    esp,0x1c
c0016f19:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016f21:	74 0a                	je     c0016f2d <ACPI::close(int, int, void*)+0x17>
c0016f23:	b8 00 00 00 00       	mov    eax,0x0
c0016f28:	e9 9a 00 00 00       	jmp    c0016fc7 <ACPI::close(int, int, void*)+0xb1>
c0016f2d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f32:	75 37                	jne    c0016f6b <ACPI::close(int, int, void*)+0x55>
c0016f34:	83 ec 0c             	sub    esp,0xc
c0016f37:	68 28 a0 02 c0       	push   0xc002a028
c0016f3c:	e8 94 b9 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0016f41:	83 c4 10             	add    esp,0x10
c0016f44:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0016f49:	85 c0                	test   eax,eax
c0016f4b:	74 07                	je     c0016f54 <ACPI::close(int, int, void*)+0x3e>
c0016f4d:	a1 a8 d5 02 c0       	mov    eax,ds:0xc002d5a8
c0016f52:	ff d0                	call   eax
c0016f54:	83 ec 0c             	sub    esp,0xc
c0016f57:	68 64 a1 02 c0       	push   0xc002a164
c0016f5c:	e8 54 2c 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c0016f61:	83 c4 10             	add    esp,0x10
c0016f64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016f69:	eb 5c                	jmp    c0016fc7 <ACPI::close(int, int, void*)+0xb1>
c0016f6b:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016f70:	75 50                	jne    c0016fc2 <ACPI::close(int, int, void*)+0xac>
c0016f72:	a1 a4 d5 02 c0       	mov    eax,ds:0xc002d5a4
c0016f77:	85 c0                	test   eax,eax
c0016f79:	74 07                	je     c0016f82 <ACPI::close(int, int, void*)+0x6c>
c0016f7b:	a1 a4 d5 02 c0       	mov    eax,ds:0xc002d5a4
c0016f80:	ff d0                	call   eax
c0016f82:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016f87:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016f8c:	83 e0 02             	and    eax,0x2
c0016f8f:	74 1c                	je     c0016fad <ACPI::close(int, int, void*)+0x97>
c0016f91:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016f98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f9c:	89 c2                	mov    edx,eax
c0016f9e:	ec                   	in     al,dx
c0016f9f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016fa3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016fa7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016fab:	eb da                	jmp    c0016f87 <ACPI::close(int, int, void*)+0x71>
c0016fad:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016fb4:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016fb9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016fbd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016fc1:	ee                   	out    dx,al
c0016fc2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016fc7:	83 c4 1c             	add    esp,0x1c
c0016fca:	c3                   	ret    

c0016fcb <findRSDP()>:
c0016fcb:	83 ec 1c             	sub    esp,0x1c
c0016fce:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0016fd3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016fd9:	83 e0 04             	and    eax,0x4
c0016fdc:	84 c0                	test   al,al
c0016fde:	75 07                	jne    c0016fe7 <findRSDP()+0x1c>
c0016fe0:	b8 00 00 00 00       	mov    eax,0x0
c0016fe5:	eb 6a                	jmp    c0017051 <findRSDP()+0x86>
c0016fe7:	a1 50 cf 02 c0       	mov    eax,ds:0xc002cf50
c0016fec:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016ff1:	7f 1b                	jg     c001700e <findRSDP()+0x43>
c0016ff3:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0016ff8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016ffe:	83 e2 fb             	and    edx,0xfffffffb
c0017001:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017007:	b8 00 00 00 00       	mov    eax,0x0
c001700c:	eb 43                	jmp    c0017051 <findRSDP()+0x86>
c001700e:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017016:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001701e:	77 2c                	ja     c001704c <findRSDP()+0x81>
c0017020:	83 ec 04             	sub    esp,0x4
c0017023:	6a 08                	push   0x8
c0017025:	68 35 a0 02 c0       	push   0xc002a035
c001702a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001702e:	e8 0a 96 fe ff       	call   c000063d <memcmp>
c0017033:	83 c4 10             	add    esp,0x10
c0017036:	85 c0                	test   eax,eax
c0017038:	0f 94 c0             	sete   al
c001703b:	84 c0                	test   al,al
c001703d:	74 06                	je     c0017045 <findRSDP()+0x7a>
c001703f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017043:	eb 0c                	jmp    c0017051 <findRSDP()+0x86>
c0017045:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001704a:	eb ca                	jmp    c0017016 <findRSDP()+0x4b>
c001704c:	b8 00 00 00 00       	mov    eax,0x0
c0017051:	83 c4 1c             	add    esp,0x1c
c0017054:	c3                   	ret    

c0017055 <loadACPITables(unsigned char*)>:
c0017055:	56                   	push   esi
c0017056:	53                   	push   ebx
c0017057:	83 ec 44             	sub    esp,0x44
c001705a:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c001705f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017065:	83 e0 04             	and    eax,0x4
c0017068:	84 c0                	test   al,al
c001706a:	0f 84 05 02 00 00    	je     c0017275 <loadACPITables(unsigned char*)+0x220>
c0017070:	a0 c0 d7 02 c0       	mov    al,ds:0xc002d7c0
c0017075:	84 c0                	test   al,al
c0017077:	74 75                	je     c00170ee <loadACPITables(unsigned char*)+0x99>
c0017079:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001707d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017081:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017085:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017088:	83 e8 24             	sub    eax,0x24
c001708b:	c1 e8 03             	shr    eax,0x3
c001708e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017092:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001709a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001709e:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00170a2:	0f 8d b2 00 00 00    	jge    c001715a <loadACPITables(unsigned char*)+0x105>
c00170a8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170ac:	83 c0 24             	add    eax,0x24
c00170af:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00170b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00170b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00170bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00170bf:	c1 e0 03             	shl    eax,0x3
c00170c2:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00170c6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170ca:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00170cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00170cf:	89 c1                	mov    ecx,eax
c00170d1:	a1 ac d5 02 c0       	mov    eax,ds:0xc002d5ac
c00170d6:	8d 50 01             	lea    edx,[eax+0x1]
c00170d9:	89 15 ac d5 02 c0    	mov    DWORD PTR ds:0xc002d5ac,edx
c00170df:	89 ca                	mov    edx,ecx
c00170e1:	89 14 c5 c4 d5 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2a3c],edx
c00170e8:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00170ec:	eb ac                	jmp    c001709a <loadACPITables(unsigned char*)+0x45>
c00170ee:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170f2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00170f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00170fd:	83 e8 24             	sub    eax,0x24
c0017100:	c1 e8 02             	shr    eax,0x2
c0017103:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017107:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001710f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017113:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017117:	7d 41                	jge    c001715a <loadACPITables(unsigned char*)+0x105>
c0017119:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001711d:	83 c0 24             	add    eax,0x24
c0017120:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017124:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017128:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001712c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017130:	c1 e0 02             	shl    eax,0x2
c0017133:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017137:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001713b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001713d:	a1 ac d5 02 c0       	mov    eax,ds:0xc002d5ac
c0017142:	8d 50 01             	lea    edx,[eax+0x1]
c0017145:	89 15 ac d5 02 c0    	mov    DWORD PTR ds:0xc002d5ac,edx
c001714b:	89 ca                	mov    edx,ecx
c001714d:	89 14 c5 c4 d5 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2a3c],edx
c0017154:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017158:	eb b5                	jmp    c001710f <loadACPITables(unsigned char*)+0xba>
c001715a:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017162:	a1 ac d5 02 c0       	mov    eax,ds:0xc002d5ac
c0017167:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001716b:	0f 8d 05 01 00 00    	jge    c0017276 <loadACPITables(unsigned char*)+0x221>
c0017171:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017175:	8b 04 c5 c4 d5 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2a3c]
c001717c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017184:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001718c:	25 ff 0f 00 00       	and    eax,0xfff
c0017191:	89 c6                	mov    esi,eax
c0017193:	e8 dd a8 ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c0017198:	89 c3                	mov    ebx,eax
c001719a:	83 ec 0c             	sub    esp,0xc
c001719d:	6a 01                	push   0x1
c001719f:	e8 41 a7 ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c00171a4:	83 c4 10             	add    esp,0x10
c00171a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00171ab:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00171b1:	83 ec 0c             	sub    esp,0xc
c00171b4:	6a 01                	push   0x1
c00171b6:	6a 01                	push   0x1
c00171b8:	50                   	push   eax
c00171b9:	52                   	push   edx
c00171ba:	53                   	push   ebx
c00171bb:	e8 e4 b0 ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00171c0:	83 c4 20             	add    esp,0x20
c00171c3:	09 f0                	or     eax,esi
c00171c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00171cd:	c1 e0 03             	shl    eax,0x3
c00171d0:	05 c0 d5 02 c0       	add    eax,0xc002d5c0
c00171d5:	83 ec 04             	sub    esp,0x4
c00171d8:	6a 04                	push   0x4
c00171da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171de:	50                   	push   eax
c00171df:	e8 bc 94 fe ff       	call   c00006a0 <memcpy>
c00171e4:	83 c4 10             	add    esp,0x10
c00171e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00171ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00171f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171f6:	05 00 10 00 00       	add    eax,0x1000
c00171fb:	c1 e8 0c             	shr    eax,0xc
c00171fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017206:	89 04 24             	mov    DWORD PTR [esp],eax
c0017209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001720d:	25 ff 0f 00 00       	and    eax,0xfff
c0017212:	89 c6                	mov    esi,eax
c0017214:	e8 5c a8 ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c0017219:	89 c3                	mov    ebx,eax
c001721b:	83 ec 0c             	sub    esp,0xc
c001721e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017222:	e8 be a6 ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c0017227:	83 c4 10             	add    esp,0x10
c001722a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001722e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017234:	83 ec 0c             	sub    esp,0xc
c0017237:	6a 01                	push   0x1
c0017239:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001723d:	50                   	push   eax
c001723e:	52                   	push   edx
c001723f:	53                   	push   ebx
c0017240:	e8 5f b0 ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017245:	83 c4 20             	add    esp,0x20
c0017248:	09 f0                	or     eax,esi
c001724a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001724e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017251:	83 ec 0c             	sub    esp,0xc
c0017254:	50                   	push   eax
c0017255:	e8 ef a9 ff ff       	call   c0011c49 <Virt::freeKernelVirtualPages(unsigned long)>
c001725a:	83 c4 10             	add    esp,0x10
c001725d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017261:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017265:	89 14 c5 c4 d5 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2a3c],edx
c001726c:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017270:	e9 ed fe ff ff       	jmp    c0017162 <loadACPITables(unsigned char*)+0x10d>
c0017275:	90                   	nop
c0017276:	83 c4 44             	add    esp,0x44
c0017279:	5b                   	pop    ebx
c001727a:	5e                   	pop    esi
c001727b:	c3                   	ret    

c001727c <findRSDT(unsigned char*)>:
c001727c:	56                   	push   esi
c001727d:	53                   	push   ebx
c001727e:	83 ec 44             	sub    esp,0x44
c0017281:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0017286:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001728c:	83 e0 04             	and    eax,0x4
c001728f:	84 c0                	test   al,al
c0017291:	75 0a                	jne    c001729d <findRSDT(unsigned char*)+0x21>
c0017293:	b8 00 00 00 00       	mov    eax,0x0
c0017298:	e9 f7 00 00 00       	jmp    c0017394 <findRSDT(unsigned char*)+0x118>
c001729d:	83 ec 04             	sub    esp,0x4
c00172a0:	6a 24                	push   0x24
c00172a2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00172a6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172aa:	50                   	push   eax
c00172ab:	e8 f0 93 fe ff       	call   c00006a0 <memcpy>
c00172b0:	83 c4 10             	add    esp,0x10
c00172b3:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00172b7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00172bb:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00172c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00172c7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00172cb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00172d3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172db:	25 ff 0f 00 00       	and    eax,0xfff
c00172e0:	89 c6                	mov    esi,eax
c00172e2:	e8 8e a7 ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c00172e7:	89 c3                	mov    ebx,eax
c00172e9:	83 ec 0c             	sub    esp,0xc
c00172ec:	6a 02                	push   0x2
c00172ee:	e8 f2 a5 ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c00172f3:	83 c4 10             	add    esp,0x10
c00172f6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00172fa:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017300:	83 ec 0c             	sub    esp,0xc
c0017303:	6a 01                	push   0x1
c0017305:	6a 02                	push   0x2
c0017307:	50                   	push   eax
c0017308:	52                   	push   edx
c0017309:	53                   	push   ebx
c001730a:	e8 95 af ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001730f:	83 c4 20             	add    esp,0x20
c0017312:	09 f0                	or     eax,esi
c0017314:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017318:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001731c:	25 ff 0f 00 00       	and    eax,0xfff
c0017321:	89 c6                	mov    esi,eax
c0017323:	e8 4d a7 ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c0017328:	89 c3                	mov    ebx,eax
c001732a:	83 ec 0c             	sub    esp,0xc
c001732d:	6a 02                	push   0x2
c001732f:	e8 b1 a5 ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c0017334:	83 c4 10             	add    esp,0x10
c0017337:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001733b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017341:	83 ec 0c             	sub    esp,0xc
c0017344:	6a 01                	push   0x1
c0017346:	6a 02                	push   0x2
c0017348:	50                   	push   eax
c0017349:	52                   	push   edx
c001734a:	53                   	push   ebx
c001734b:	e8 54 af ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017350:	83 c4 20             	add    esp,0x20
c0017353:	09 f0                	or     eax,esi
c0017355:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017359:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c001735e:	75 11                	jne    c0017371 <findRSDT(unsigned char*)+0xf5>
c0017360:	c6 05 c0 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d7c0,0x0
c0017367:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001736b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001736f:	eb 1f                	jmp    c0017390 <findRSDT(unsigned char*)+0x114>
c0017371:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017376:	75 11                	jne    c0017389 <findRSDT(unsigned char*)+0x10d>
c0017378:	c6 05 c0 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d7c0,0x1
c001737f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017383:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017387:	eb 07                	jmp    c0017390 <findRSDT(unsigned char*)+0x114>
c0017389:	b8 00 00 00 00       	mov    eax,0x0
c001738e:	eb 04                	jmp    c0017394 <findRSDT(unsigned char*)+0x118>
c0017390:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017394:	83 c4 44             	add    esp,0x44
c0017397:	5b                   	pop    ebx
c0017398:	5e                   	pop    esi
c0017399:	c3                   	ret    

c001739a <findDataTable(unsigned char*, char*)>:
c001739a:	83 ec 1c             	sub    esp,0x1c
c001739d:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c00173a2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00173a8:	83 e0 04             	and    eax,0x4
c00173ab:	84 c0                	test   al,al
c00173ad:	75 07                	jne    c00173b6 <findDataTable(unsigned char*, char*)+0x1c>
c00173af:	b8 00 00 00 00       	mov    eax,0x0
c00173b4:	eb 7c                	jmp    c0017432 <findDataTable(unsigned char*, char*)+0x98>
c00173b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00173be:	a1 ac d5 02 c0       	mov    eax,ds:0xc002d5ac
c00173c3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00173c7:	7d 3a                	jge    c0017403 <findDataTable(unsigned char*, char*)+0x69>
c00173c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173cd:	c1 e0 03             	shl    eax,0x3
c00173d0:	05 c0 d5 02 c0       	add    eax,0xc002d5c0
c00173d5:	83 ec 04             	sub    esp,0x4
c00173d8:	6a 04                	push   0x4
c00173da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00173de:	50                   	push   eax
c00173df:	e8 59 92 fe ff       	call   c000063d <memcmp>
c00173e4:	83 c4 10             	add    esp,0x10
c00173e7:	85 c0                	test   eax,eax
c00173e9:	0f 94 c0             	sete   al
c00173ec:	84 c0                	test   al,al
c00173ee:	74 0d                	je     c00173fd <findDataTable(unsigned char*, char*)+0x63>
c00173f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173f4:	8b 04 c5 c4 d5 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2a3c]
c00173fb:	eb 35                	jmp    c0017432 <findDataTable(unsigned char*, char*)+0x98>
c00173fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017401:	eb bb                	jmp    c00173be <findDataTable(unsigned char*, char*)+0x24>
c0017403:	a0 c0 d7 02 c0       	mov    al,ds:0xc002d7c0
c0017408:	84 c0                	test   al,al
c001740a:	74 07                	je     c0017413 <findDataTable(unsigned char*, char*)+0x79>
c001740c:	b8 58 00 00 00       	mov    eax,0x58
c0017411:	eb 05                	jmp    c0017418 <findDataTable(unsigned char*, char*)+0x7e>
c0017413:	b8 52 00 00 00       	mov    eax,0x52
c0017418:	83 ec 04             	sub    esp,0x4
c001741b:	50                   	push   eax
c001741c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017420:	68 88 a1 02 c0       	push   0xc002a188
c0017425:	e8 ab b4 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001742a:	83 c4 10             	add    esp,0x10
c001742d:	b8 00 00 00 00       	mov    eax,0x0
c0017432:	83 c4 1c             	add    esp,0x1c
c0017435:	c3                   	ret    

c0017436 <scanMADT()>:
c0017436:	53                   	push   ebx
c0017437:	83 ec 38             	sub    esp,0x38
c001743a:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c001743f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017445:	83 e0 04             	and    eax,0x4
c0017448:	84 c0                	test   al,al
c001744a:	0f 84 63 04 00 00    	je     c00178b3 <scanMADT()+0x47d>
c0017450:	e8 76 fb ff ff       	call   c0016fcb <findRSDP()>
c0017455:	a3 cc d7 02 c0       	mov    ds:0xc002d7cc,eax
c001745a:	a1 cc d7 02 c0       	mov    eax,ds:0xc002d7cc
c001745f:	85 c0                	test   eax,eax
c0017461:	75 19                	jne    c001747c <scanMADT()+0x46>
c0017463:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0017468:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001746e:	83 e2 fb             	and    edx,0xfffffffb
c0017471:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017477:	e9 3b 04 00 00       	jmp    c00178b7 <scanMADT()+0x481>
c001747c:	a1 cc d7 02 c0       	mov    eax,ds:0xc002d7cc
c0017481:	83 ec 0c             	sub    esp,0xc
c0017484:	50                   	push   eax
c0017485:	e8 f2 fd ff ff       	call   c001727c <findRSDT(unsigned char*)>
c001748a:	83 c4 10             	add    esp,0x10
c001748d:	a3 c8 d7 02 c0       	mov    ds:0xc002d7c8,eax
c0017492:	a1 c8 d7 02 c0       	mov    eax,ds:0xc002d7c8
c0017497:	85 c0                	test   eax,eax
c0017499:	75 19                	jne    c00174b4 <scanMADT()+0x7e>
c001749b:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c00174a0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00174a6:	83 e2 fb             	and    edx,0xfffffffb
c00174a9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00174af:	e9 03 04 00 00       	jmp    c00178b7 <scanMADT()+0x481>
c00174b4:	a1 c8 d7 02 c0       	mov    eax,ds:0xc002d7c8
c00174b9:	83 ec 0c             	sub    esp,0xc
c00174bc:	50                   	push   eax
c00174bd:	e8 93 fb ff ff       	call   c0017055 <loadACPITables(unsigned char*)>
c00174c2:	83 c4 10             	add    esp,0x10
c00174c5:	a1 c8 d7 02 c0       	mov    eax,ds:0xc002d7c8
c00174ca:	83 ec 08             	sub    esp,0x8
c00174cd:	68 3e a0 02 c0       	push   0xc002a03e
c00174d2:	50                   	push   eax
c00174d3:	e8 c2 fe ff ff       	call   c001739a <findDataTable(unsigned char*, char*)>
c00174d8:	83 c4 10             	add    esp,0x10
c00174db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00174df:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00174e4:	75 19                	jne    c00174ff <scanMADT()+0xc9>
c00174e6:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c00174eb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00174f1:	83 e2 fe             	and    edx,0xfffffffe
c00174f4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00174fa:	e9 b8 03 00 00       	jmp    c00178b7 <scanMADT()+0x481>
c00174ff:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017507:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001750b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001750e:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017512:	0f 87 9f 03 00 00    	ja     c00178b7 <scanMADT()+0x481>
c0017518:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017520:	0f 87 91 03 00 00    	ja     c00178b7 <scanMADT()+0x481>
c0017526:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001752a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001752e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017532:	8d 50 01             	lea    edx,[eax+0x1]
c0017535:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017539:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001753d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017541:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017545:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017549:	8d 50 01             	lea    edx,[eax+0x1]
c001754c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017550:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017554:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017558:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001755c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017561:	0f 86 4f 03 00 00    	jbe    c00178b6 <scanMADT()+0x480>
c0017567:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001756c:	75 57                	jne    c00175c5 <scanMADT()+0x18f>
c001756e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017572:	8d 50 01             	lea    edx,[eax+0x1]
c0017575:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017579:	8a 15 c0 d9 02 c0    	mov    dl,BYTE PTR ds:0xc002d9c0
c001757f:	0f b6 d2             	movzx  edx,dl
c0017582:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017586:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001758a:	88 82 00 da 02 c0    	mov    BYTE PTR [edx-0x3ffd2600],al
c0017590:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017594:	8d 50 01             	lea    edx,[eax+0x1]
c0017597:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001759b:	8a 15 c0 d9 02 c0    	mov    dl,BYTE PTR ds:0xc002d9c0
c00175a1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00175a4:	88 0d c0 d9 02 c0    	mov    BYTE PTR ds:0xc002d9c0,cl
c00175aa:	0f b6 d2             	movzx  edx,dl
c00175ad:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00175b1:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00175b5:	88 82 e0 d9 02 c0    	mov    BYTE PTR [edx-0x3ffd2620],al
c00175bb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00175c0:	e9 da 02 00 00       	jmp    c001789f <scanMADT()+0x469>
c00175c5:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00175ca:	0f 85 14 01 00 00    	jne    c00176e4 <scanMADT()+0x2ae>
c00175d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175d4:	8d 50 01             	lea    edx,[eax+0x1]
c00175d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175db:	8a 15 80 d8 02 c0    	mov    dl,BYTE PTR ds:0xc002d880
c00175e1:	0f b6 d2             	movzx  edx,dl
c00175e4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00175e8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00175ec:	88 82 a0 d8 02 c0    	mov    BYTE PTR [edx-0x3ffd2760],al
c00175f2:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00175f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175fe:	01 d0                	add    eax,edx
c0017600:	83 c0 2c             	add    eax,0x2c
c0017603:	8a 00                	mov    al,BYTE PTR [eax]
c0017605:	0f b6 d0             	movzx  edx,al
c0017608:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001760c:	8d 48 01             	lea    ecx,[eax+0x1]
c001760f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017613:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017617:	0f b6 c0             	movzx  eax,al
c001761a:	c1 e0 08             	shl    eax,0x8
c001761d:	89 d1                	mov    ecx,edx
c001761f:	09 c1                	or     ecx,eax
c0017621:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017625:	8d 50 02             	lea    edx,[eax+0x2]
c0017628:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001762c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017630:	0f b6 c0             	movzx  eax,al
c0017633:	c1 e0 10             	shl    eax,0x10
c0017636:	09 c1                	or     ecx,eax
c0017638:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001763c:	8d 50 03             	lea    edx,[eax+0x3]
c001763f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017643:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017647:	0f b6 c0             	movzx  eax,al
c001764a:	c1 e0 18             	shl    eax,0x18
c001764d:	09 c1                	or     ecx,eax
c001764f:	89 ca                	mov    edx,ecx
c0017651:	a0 80 d8 02 c0       	mov    al,ds:0xc002d880
c0017656:	0f b6 c0             	movzx  eax,al
c0017659:	89 14 85 c0 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2740],edx
c0017660:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017665:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017669:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001766d:	01 d0                	add    eax,edx
c001766f:	83 c0 2c             	add    eax,0x2c
c0017672:	8a 00                	mov    al,BYTE PTR [eax]
c0017674:	0f b6 d0             	movzx  edx,al
c0017677:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001767b:	8d 48 01             	lea    ecx,[eax+0x1]
c001767e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017682:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017686:	0f b6 c0             	movzx  eax,al
c0017689:	c1 e0 08             	shl    eax,0x8
c001768c:	89 d1                	mov    ecx,edx
c001768e:	09 c1                	or     ecx,eax
c0017690:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017694:	8d 50 02             	lea    edx,[eax+0x2]
c0017697:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001769b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001769f:	0f b6 c0             	movzx  eax,al
c00176a2:	c1 e0 10             	shl    eax,0x10
c00176a5:	09 c1                	or     ecx,eax
c00176a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176ab:	8d 50 03             	lea    edx,[eax+0x3]
c00176ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176b2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00176b6:	0f b6 c0             	movzx  eax,al
c00176b9:	c1 e0 18             	shl    eax,0x18
c00176bc:	09 c1                	or     ecx,eax
c00176be:	89 ca                	mov    edx,ecx
c00176c0:	a0 80 d8 02 c0       	mov    al,ds:0xc002d880
c00176c5:	0f b6 c0             	movzx  eax,al
c00176c8:	89 14 85 40 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd26c0],edx
c00176cf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00176d4:	a0 80 d8 02 c0       	mov    al,ds:0xc002d880
c00176d9:	40                   	inc    eax
c00176da:	a2 80 d8 02 c0       	mov    ds:0xc002d880,al
c00176df:	e9 bb 01 00 00       	jmp    c001789f <scanMADT()+0x469>
c00176e4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00176e9:	0f 85 e9 00 00 00    	jne    c00177d8 <scanMADT()+0x3a2>
c00176ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176f3:	8d 50 01             	lea    edx,[eax+0x1]
c00176f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017702:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017706:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001770a:	8d 50 01             	lea    edx,[eax+0x1]
c001770d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017711:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017715:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017719:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001771d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017721:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017725:	01 d0                	add    eax,edx
c0017727:	83 c0 2c             	add    eax,0x2c
c001772a:	8a 00                	mov    al,BYTE PTR [eax]
c001772c:	0f b6 d0             	movzx  edx,al
c001772f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017733:	8d 48 01             	lea    ecx,[eax+0x1]
c0017736:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001773a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001773e:	0f b6 c0             	movzx  eax,al
c0017741:	c1 e0 08             	shl    eax,0x8
c0017744:	89 d1                	mov    ecx,edx
c0017746:	09 c1                	or     ecx,eax
c0017748:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001774c:	8d 50 02             	lea    edx,[eax+0x2]
c001774f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017753:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017757:	0f b6 c0             	movzx  eax,al
c001775a:	c1 e0 10             	shl    eax,0x10
c001775d:	09 c1                	or     ecx,eax
c001775f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017763:	8d 50 03             	lea    edx,[eax+0x3]
c0017766:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001776a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001776e:	0f b6 c0             	movzx  eax,al
c0017771:	c1 e0 18             	shl    eax,0x18
c0017774:	09 c8                	or     eax,ecx
c0017776:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001777a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001777f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017783:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017787:	01 d0                	add    eax,edx
c0017789:	83 c0 2c             	add    eax,0x2c
c001778c:	8a 00                	mov    al,BYTE PTR [eax]
c001778e:	0f b6 c0             	movzx  eax,al
c0017791:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017795:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017798:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001779c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00177a0:	0f b6 d2             	movzx  edx,dl
c00177a3:	c1 e2 08             	shl    edx,0x8
c00177a6:	09 d0                	or     eax,edx
c00177a8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00177ad:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00177b2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00177b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00177bb:	88 90 60 c1 02 c0    	mov    BYTE PTR [eax-0x3ffd3ea0],dl
c00177c1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00177c6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00177cb:	66 89 84 12 60 d8 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd27a0],ax
c00177d3:	e9 c7 00 00 00       	jmp    c001789f <scanMADT()+0x469>
c00177d8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00177dd:	0f 85 b0 00 00 00    	jne    c0017893 <scanMADT()+0x45d>
c00177e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177e7:	8d 50 01             	lea    edx,[eax+0x1]
c00177ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177f2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00177f6:	0f b6 c0             	movzx  eax,al
c00177f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00177fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017801:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017805:	01 d0                	add    eax,edx
c0017807:	83 c0 2c             	add    eax,0x2c
c001780a:	8a 00                	mov    al,BYTE PTR [eax]
c001780c:	0f b6 d0             	movzx  edx,al
c001780f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017813:	8d 48 01             	lea    ecx,[eax+0x1]
c0017816:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001781a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001781e:	0f b6 c0             	movzx  eax,al
c0017821:	c1 e0 08             	shl    eax,0x8
c0017824:	09 d0                	or     eax,edx
c0017826:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001782a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001782f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017833:	8d 50 01             	lea    edx,[eax+0x1]
c0017836:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001783a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001783e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017842:	0f b6 c0             	movzx  eax,al
c0017845:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001784d:	c1 e0 08             	shl    eax,0x8
c0017850:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017854:	89 c1                	mov    ecx,eax
c0017856:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001785a:	c1 e0 18             	shl    eax,0x18
c001785d:	89 c3                	mov    ebx,eax
c001785f:	a1 d0 d7 02 c0       	mov    eax,ds:0xc002d7d0
c0017864:	8d 50 01             	lea    edx,[eax+0x1]
c0017867:	89 15 d0 d7 02 c0    	mov    DWORD PTR ds:0xc002d7d0,edx
c001786d:	09 d9                	or     ecx,ebx
c001786f:	89 ca                	mov    edx,ecx
c0017871:	89 14 85 e0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2820],edx
c0017878:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001787c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017884:	68 b8 a1 02 c0       	push   0xc002a1b8
c0017889:	e8 47 b0 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001788e:	83 c4 10             	add    esp,0x10
c0017891:	eb 0c                	jmp    c001789f <scanMADT()+0x469>
c0017893:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017898:	75 05                	jne    c001789f <scanMADT()+0x469>
c001789a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001789f:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00178a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178a8:	01 d0                	add    eax,edx
c00178aa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00178ae:	e9 54 fc ff ff       	jmp    c0017507 <scanMADT()+0xd1>
c00178b3:	90                   	nop
c00178b4:	eb 01                	jmp    c00178b7 <scanMADT()+0x481>
c00178b6:	90                   	nop
c00178b7:	83 c4 38             	add    esp,0x38
c00178ba:	5b                   	pop    ebx
c00178bb:	c3                   	ret    

c00178bc <ACPI::ACPI()>:
c00178bc:	83 ec 0c             	sub    esp,0xc
c00178bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178c3:	83 ec 08             	sub    esp,0x8
c00178c6:	68 43 a0 02 c0       	push   0xc002a043
c00178cb:	50                   	push   eax
c00178cc:	e8 1b c6 ff ff       	call   c0013eec <Device::Device(char const*)>
c00178d1:	83 c4 10             	add    esp,0x10
c00178d4:	ba 90 a2 02 c0       	mov    edx,0xc002a290
c00178d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178dd:	89 10                	mov    DWORD PTR [eax],edx
c00178df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178e3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00178ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178ee:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00178f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178fc:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0017906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001790a:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0017911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017915:	c6 80 65 22 00 00 00 	mov    BYTE PTR [eax+0x2265],0x0
c001791c:	e8 15 fb ff ff       	call   c0017436 <scanMADT()>
c0017921:	90                   	nop
c0017922:	83 c4 0c             	add    esp,0xc
c0017925:	c3                   	ret    

c0017926 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017926:	83 ec 2c             	sub    esp,0x2c
c0017929:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001792d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017931:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017935:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017939:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001793e:	88 d0                	mov    al,dl
c0017940:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017944:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017949:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017951:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017955:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001795b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001795f:	0f 8d 97 00 00 00    	jge    c00179fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017965:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017969:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001796d:	83 c2 2a             	add    edx,0x2a
c0017970:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017974:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017979:	75 78                	jne    c00179f3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001797b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001797f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017983:	83 c2 2a             	add    edx,0x2a
c0017986:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001798a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001798e:	75 63                	jne    c00179f3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017990:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017995:	74 3a                	je     c00179d1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017997:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001799b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001799f:	83 c2 2a             	add    edx,0x2a
c00179a2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00179a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179ad:	39 c2                	cmp    edx,eax
c00179af:	74 10                	je     c00179c1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00179b1:	83 ec 0c             	sub    esp,0xc
c00179b4:	68 f4 a1 02 c0       	push   0xc002a1f4
c00179b9:	e8 f7 21 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c00179be:	83 c4 10             	add    esp,0x10
c00179c1:	83 ec 0c             	sub    esp,0xc
c00179c4:	68 48 a0 02 c0       	push   0xc002a048
c00179c9:	e8 e7 21 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c00179ce:	83 c4 10             	add    esp,0x10
c00179d1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00179d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00179dd:	83 c2 2a             	add    edx,0x2a
c00179e0:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00179e4:	8b 02                	mov    eax,DWORD PTR [edx]
c00179e6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00179e9:	89 01                	mov    DWORD PTR [ecx],eax
c00179eb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00179ee:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00179f3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00179f7:	e9 55 ff ff ff       	jmp    c0017951 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00179fc:	90                   	nop
c00179fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a01:	83 c4 2c             	add    esp,0x2c
c0017a04:	c2 04 00             	ret    0x4
c0017a07:	90                   	nop

c0017a08 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017a08:	56                   	push   esi
c0017a09:	53                   	push   ebx
c0017a0a:	83 ec 14             	sub    esp,0x14
c0017a0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a11:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017a15:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017a19:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017a1e:	88 c8                	mov    al,cl
c0017a20:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017a24:	88 d0                	mov    al,dl
c0017a26:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017a2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a2e:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0017a34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a38:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0017a3e:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0017a43:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0017a48:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0017a4d:	83 ec 04             	sub    esp,0x4
c0017a50:	56                   	push   esi
c0017a51:	53                   	push   ebx
c0017a52:	51                   	push   ecx
c0017a53:	52                   	push   edx
c0017a54:	50                   	push   eax
c0017a55:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017a59:	68 24 a2 02 c0       	push   0xc002a224
c0017a5e:	e8 72 ae ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017a63:	83 c4 20             	add    esp,0x20
c0017a66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a6a:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017a70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a74:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017a77:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017a7b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017a7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a83:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017a89:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a8d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017a90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a94:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017a99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a9d:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017aa3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017aa7:	8d 48 01             	lea    ecx,[eax+0x1]
c0017aaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aae:	83 c2 2a             	add    edx,0x2a
c0017ab1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017ab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ab9:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017abf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ac6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017aca:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017ace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ad2:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017ad8:	8d 50 01             	lea    edx,[eax+0x1]
c0017adb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017adf:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0017ae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ae9:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017aef:	3d 00 08 00 00       	cmp    eax,0x800
c0017af4:	75 10                	jne    c0017b06 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c0017af6:	83 ec 0c             	sub    esp,0xc
c0017af9:	68 57 a0 02 c0       	push   0xc002a057
c0017afe:	e8 b2 20 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c0017b03:	83 c4 10             	add    esp,0x10
c0017b06:	83 ec 0c             	sub    esp,0xc
c0017b09:	68 74 a0 02 c0       	push   0xc002a074
c0017b0e:	e8 c2 ad ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017b13:	83 c4 10             	add    esp,0x10
c0017b16:	90                   	nop
c0017b17:	83 c4 14             	add    esp,0x14
c0017b1a:	5b                   	pop    ebx
c0017b1b:	5e                   	pop    esi
c0017b1c:	c3                   	ret    
c0017b1d:	90                   	nop

c0017b1e <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017b1e:	b8 00 00 00 00       	mov    eax,0x0
c0017b23:	c3                   	ret    

c0017b24 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017b24:	83 ec 1c             	sub    esp,0x1c
c0017b27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b2b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017b2e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017b32:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0017b37:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017b3c:	83 ec 08             	sub    esp,0x8
c0017b3f:	52                   	push   edx
c0017b40:	50                   	push   eax
c0017b41:	e8 f6 70 ff ff       	call   c000ec3c <Computer::readCMOS(unsigned char)>
c0017b46:	83 c4 10             	add    esp,0x10
c0017b49:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017b4d:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0017b52:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017b57:	83 ec 04             	sub    esp,0x4
c0017b5a:	6a 01                	push   0x1
c0017b5c:	52                   	push   edx
c0017b5d:	50                   	push   eax
c0017b5e:	e8 ef 71 ff ff       	call   c000ed52 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017b63:	83 c4 10             	add    esp,0x10
c0017b66:	90                   	nop
c0017b67:	83 c4 1c             	add    esp,0x1c
c0017b6a:	c3                   	ret    
c0017b6b:	90                   	nop

c0017b6c <ACPI::open(int, int, void*)>:
c0017b6c:	53                   	push   ebx
c0017b6d:	83 ec 28             	sub    esp,0x28
c0017b70:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b74:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0017b7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b7f:	c6 80 65 22 00 00 00 	mov    BYTE PTR [eax+0x2265],0x0
c0017b86:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0017b8b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b91:	83 e0 04             	and    eax,0x4
c0017b94:	84 c0                	test   al,al
c0017b96:	74 47                	je     c0017bdf <ACPI::open(int, int, void*)+0x73>
c0017b98:	a1 c8 d7 02 c0       	mov    eax,ds:0xc002d7c8
c0017b9d:	83 ec 08             	sub    esp,0x8
c0017ba0:	68 8c a0 02 c0       	push   0xc002a08c
c0017ba5:	50                   	push   eax
c0017ba6:	e8 ef f7 ff ff       	call   c001739a <findDataTable(unsigned char*, char*)>
c0017bab:	83 c4 10             	add    esp,0x10
c0017bae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017bb2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017bb7:	74 26                	je     c0017bdf <ACPI::open(int, int, void*)+0x73>
c0017bb9:	83 ec 0c             	sub    esp,0xc
c0017bbc:	68 91 a0 02 c0       	push   0xc002a091
c0017bc1:	e8 0f ad ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017bc6:	83 c4 10             	add    esp,0x10
c0017bc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bcd:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017bd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bd8:	c6 80 65 22 00 00 01 	mov    BYTE PTR [eax+0x2265],0x1
c0017bdf:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0017be7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017beb:	8a 00                	mov    al,BYTE PTR [eax]
c0017bed:	3c 01                	cmp    al,0x1
c0017bef:	75 28                	jne    c0017c19 <ACPI::open(int, int, void*)+0xad>
c0017bf1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bf5:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017bfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c00:	c6 80 65 22 00 00 01 	mov    BYTE PTR [eax+0x2265],0x1
c0017c07:	83 ec 0c             	sub    esp,0xc
c0017c0a:	68 a2 a0 02 c0       	push   0xc002a0a2
c0017c0f:	e8 c1 ac ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017c14:	83 c4 10             	add    esp,0x10
c0017c17:	eb 25                	jmp    c0017c3e <ACPI::open(int, int, void*)+0xd2>
c0017c19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c1d:	8a 00                	mov    al,BYTE PTR [eax]
c0017c1f:	3c 02                	cmp    al,0x2
c0017c21:	75 1b                	jne    c0017c3e <ACPI::open(int, int, void*)+0xd2>
c0017c23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c27:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017c2e:	83 ec 0c             	sub    esp,0xc
c0017c31:	68 aa a0 02 c0       	push   0xc002a0aa
c0017c36:	e8 9a ac ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017c3b:	83 c4 10             	add    esp,0x10
c0017c3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c42:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0017c48:	83 f0 01             	xor    eax,0x1
c0017c4b:	84 c0                	test   al,al
c0017c4d:	74 6a                	je     c0017cb9 <ACPI::open(int, int, void*)+0x14d>
c0017c4f:	83 ec 0c             	sub    esp,0xc
c0017c52:	68 b2 a0 02 c0       	push   0xc002a0b2
c0017c57:	e8 79 ac ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017c5c:	83 c4 10             	add    esp,0x10
c0017c5f:	e8 ec 84 fe ff       	call   c0000150 <manualPCIProbe>
c0017c64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c68:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0017c6d:	75 28                	jne    c0017c97 <ACPI::open(int, int, void*)+0x12b>
c0017c6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c73:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017c7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c7e:	c6 80 65 22 00 00 01 	mov    BYTE PTR [eax+0x2265],0x1
c0017c85:	83 ec 0c             	sub    esp,0xc
c0017c88:	68 c0 a0 02 c0       	push   0xc002a0c0
c0017c8d:	e8 43 ac ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017c92:	83 c4 10             	add    esp,0x10
c0017c95:	eb 22                	jmp    c0017cb9 <ACPI::open(int, int, void*)+0x14d>
c0017c97:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c0017c9c:	75 1b                	jne    c0017cb9 <ACPI::open(int, int, void*)+0x14d>
c0017c9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ca2:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017ca9:	83 ec 0c             	sub    esp,0xc
c0017cac:	68 ca a0 02 c0       	push   0xc002a0ca
c0017cb1:	e8 1f ac ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017cb6:	83 c4 10             	add    esp,0x10
c0017cb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cbd:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0017cc3:	84 c0                	test   al,al
c0017cc5:	74 13                	je     c0017cda <ACPI::open(int, int, void*)+0x16e>
c0017cc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ccb:	8a 80 65 22 00 00    	mov    al,BYTE PTR [eax+0x2265]
c0017cd1:	83 f0 01             	xor    eax,0x1
c0017cd4:	0f b6 c0             	movzx  eax,al
c0017cd7:	40                   	inc    eax
c0017cd8:	eb 05                	jmp    c0017cdf <ACPI::open(int, int, void*)+0x173>
c0017cda:	b8 00 00 00 00       	mov    eax,0x0
c0017cdf:	83 ec 08             	sub    esp,0x8
c0017ce2:	50                   	push   eax
c0017ce3:	68 d4 a0 02 c0       	push   0xc002a0d4
c0017ce8:	e8 e8 ab ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017ced:	83 c4 10             	add    esp,0x10
c0017cf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cf4:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0017cfa:	84 c0                	test   al,al
c0017cfc:	74 67                	je     c0017d65 <ACPI::open(int, int, void*)+0x1f9>
c0017cfe:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0017d06:	83 ec 0c             	sub    esp,0xc
c0017d09:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d0d:	e8 12 79 ff ff       	call   c000f624 <malloc>
c0017d12:	83 c4 10             	add    esp,0x10
c0017d15:	89 c3                	mov    ebx,eax
c0017d17:	83 ec 0c             	sub    esp,0xc
c0017d1a:	53                   	push   ebx
c0017d1b:	e8 48 9f 00 00       	call   c0021c68 <PCI::PCI()>
c0017d20:	83 c4 10             	add    esp,0x10
c0017d23:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017d27:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d2b:	83 ec 08             	sub    esp,0x8
c0017d2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d32:	50                   	push   eax
c0017d33:	e8 c4 bf ff ff       	call   c0013cfc <Device::addChild(Device*)>
c0017d38:	83 c4 10             	add    esp,0x10
c0017d3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d41:	83 c0 08             	add    eax,0x8
c0017d44:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d46:	6a 00                	push   0x0
c0017d48:	6a 00                	push   0x0
c0017d4a:	6a 00                	push   0x0
c0017d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d50:	ff d0                	call   eax
c0017d52:	83 c4 10             	add    esp,0x10
c0017d55:	83 ec 0c             	sub    esp,0xc
c0017d58:	68 dd a0 02 c0       	push   0xc002a0dd
c0017d5d:	e8 73 ab ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0017d62:	83 c4 10             	add    esp,0x10
c0017d65:	83 ec 0c             	sub    esp,0xc
c0017d68:	68 e8 a0 02 c0       	push   0xc002a0e8
c0017d6d:	e8 24 43 00 00       	call   c001c096 <Thr::loadKernelSymbolTable(char const*)>
c0017d72:	83 c4 10             	add    esp,0x10
c0017d75:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0017d7a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d80:	83 e0 04             	and    eax,0x4
c0017d83:	84 c0                	test   al,al
c0017d85:	0f 84 d5 00 00 00    	je     c0017e60 <ACPI::open(int, int, void*)+0x2f4>
c0017d8b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017d92:	83 ec 0c             	sub    esp,0xc
c0017d95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d99:	e8 86 78 ff ff       	call   c000f624 <malloc>
c0017d9e:	83 c4 10             	add    esp,0x10
c0017da1:	89 c3                	mov    ebx,eax
c0017da3:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0017da8:	83 ec 04             	sub    esp,0x4
c0017dab:	50                   	push   eax
c0017dac:	68 06 a1 02 c0       	push   0xc002a106
c0017db1:	53                   	push   ebx
c0017db2:	e8 77 b0 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c0017db7:	83 c4 10             	add    esp,0x10
c0017dba:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017dbe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017dc3:	74 17                	je     c0017ddc <ACPI::open(int, int, void*)+0x270>
c0017dc5:	83 ec 0c             	sub    esp,0xc
c0017dc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dcc:	e8 2f b3 ff ff       	call   c0013100 <File::exists()>
c0017dd1:	83 c4 10             	add    esp,0x10
c0017dd4:	84 c0                	test   al,al
c0017dd6:	74 04                	je     c0017ddc <ACPI::open(int, int, void*)+0x270>
c0017dd8:	b0 01                	mov    al,0x1
c0017dda:	eb 02                	jmp    c0017dde <ACPI::open(int, int, void*)+0x272>
c0017ddc:	b0 00                	mov    al,0x0
c0017dde:	84 c0                	test   al,al
c0017de0:	74 25                	je     c0017e07 <ACPI::open(int, int, void*)+0x29b>
c0017de2:	8b 1d 08 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf08
c0017de8:	83 ec 08             	sub    esp,0x8
c0017deb:	6a 01                	push   0x1
c0017ded:	68 06 a1 02 c0       	push   0xc002a106
c0017df2:	e8 fa 4c 00 00       	call   c001caf1 <Thr::loadDLL(char const*, bool)>
c0017df7:	83 c4 10             	add    esp,0x10
c0017dfa:	83 ec 08             	sub    esp,0x8
c0017dfd:	53                   	push   ebx
c0017dfe:	50                   	push   eax
c0017dff:	e8 fc 4e 00 00       	call   c001cd00 <Thr::executeDLL(unsigned long, void*)>
c0017e04:	83 c4 10             	add    esp,0x10
c0017e07:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e0c:	74 1e                	je     c0017e2c <ACPI::open(int, int, void*)+0x2c0>
c0017e0e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e13:	74 17                	je     c0017e2c <ACPI::open(int, int, void*)+0x2c0>
c0017e15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e19:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e1b:	83 c0 08             	add    eax,0x8
c0017e1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e20:	83 ec 0c             	sub    esp,0xc
c0017e23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e27:	ff d0                	call   eax
c0017e29:	83 c4 10             	add    esp,0x10
c0017e2c:	a1 c8 d7 02 c0       	mov    eax,ds:0xc002d7c8
c0017e31:	83 ec 08             	sub    esp,0x8
c0017e34:	68 23 a1 02 c0       	push   0xc002a123
c0017e39:	50                   	push   eax
c0017e3a:	e8 5b f5 ff ff       	call   c001739a <findDataTable(unsigned char*, char*)>
c0017e3f:	83 c4 10             	add    esp,0x10
c0017e42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017e46:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017e4b:	74 13                	je     c0017e60 <ACPI::open(int, int, void*)+0x2f4>
c0017e4d:	83 ec 08             	sub    esp,0x8
c0017e50:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017e58:	e8 c7 fc ff ff       	call   c0017b24 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017e5d:	83 c4 10             	add    esp,0x10
c0017e60:	8b 1d 08 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf08
c0017e66:	83 ec 08             	sub    esp,0x8
c0017e69:	6a 01                	push   0x1
c0017e6b:	68 28 a1 02 c0       	push   0xc002a128
c0017e70:	e8 7c 4c 00 00       	call   c001caf1 <Thr::loadDLL(char const*, bool)>
c0017e75:	83 c4 10             	add    esp,0x10
c0017e78:	83 ec 08             	sub    esp,0x8
c0017e7b:	53                   	push   ebx
c0017e7c:	50                   	push   eax
c0017e7d:	e8 7e 4e 00 00       	call   c001cd00 <Thr::executeDLL(unsigned long, void*)>
c0017e82:	83 c4 10             	add    esp,0x10
c0017e85:	8b 1d 08 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf08
c0017e8b:	83 ec 08             	sub    esp,0x8
c0017e8e:	6a 01                	push   0x1
c0017e90:	68 45 a1 02 c0       	push   0xc002a145
c0017e95:	e8 57 4c 00 00       	call   c001caf1 <Thr::loadDLL(char const*, bool)>
c0017e9a:	83 c4 10             	add    esp,0x10
c0017e9d:	83 ec 08             	sub    esp,0x8
c0017ea0:	53                   	push   ebx
c0017ea1:	50                   	push   eax
c0017ea2:	e8 59 4e 00 00       	call   c001cd00 <Thr::executeDLL(unsigned long, void*)>
c0017ea7:	83 c4 10             	add    esp,0x10
c0017eaa:	b8 00 00 00 00       	mov    eax,0x0
c0017eaf:	83 c4 28             	add    esp,0x28
c0017eb2:	5b                   	pop    ebx
c0017eb3:	c3                   	ret    

c0017eb4 <ACPI::sleep()>:
c0017eb4:	83 ec 0c             	sub    esp,0xc
c0017eb7:	a1 a0 d5 02 c0       	mov    eax,ds:0xc002d5a0
c0017ebc:	85 c0                	test   eax,eax
c0017ebe:	74 07                	je     c0017ec7 <ACPI::sleep()+0x13>
c0017ec0:	a1 a0 d5 02 c0       	mov    eax,ds:0xc002d5a0
c0017ec5:	ff d0                	call   eax
c0017ec7:	90                   	nop
c0017ec8:	83 c4 0c             	add    esp,0xc
c0017ecb:	c3                   	ret    

c0017ecc <CPU::close(int, int, void*)>:
c0017ecc:	31 c0                	xor    eax,eax
c0017ece:	c3                   	ret    
c0017ecf:	90                   	nop

c0017ed0 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017ed0:	55                   	push   ebp
c0017ed1:	57                   	push   edi
c0017ed2:	56                   	push   esi
c0017ed3:	53                   	push   ebx
c0017ed4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017ed8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017edc:	89 ce                	mov    esi,ecx
c0017ede:	89 d5                	mov    ebp,edx
c0017ee0:	80 f9 04             	cmp    cl,0x4
c0017ee3:	75 28                	jne    c0017f0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017ee5:	8d 42 f9             	lea    eax,[edx-0x7]
c0017ee8:	3c 03                	cmp    al,0x3
c0017eea:	0f 86 63 01 00 00    	jbe    c0018053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017ef0:	80 fa 03             	cmp    dl,0x3
c0017ef3:	0f 84 5a 01 00 00    	je     c0018053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017ef9:	8d 7a f2             	lea    edi,[edx-0xe]
c0017efc:	b8 30 c3 02 c0       	mov    eax,0xc002c330
c0017f01:	89 fb                	mov    ebx,edi
c0017f03:	80 fb 01             	cmp    bl,0x1
c0017f06:	77 4e                	ja     c0017f56 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017f08:	e9 52 01 00 00       	jmp    c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f0d:	80 f9 05             	cmp    cl,0x5
c0017f10:	75 4d                	jne    c0017f5f <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017f12:	b8 40 c3 02 c0       	mov    eax,0xc002c340
c0017f17:	80 fa 03             	cmp    dl,0x3
c0017f1a:	0f 86 3f 01 00 00    	jbe    c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f20:	8d 7a fa             	lea    edi,[edx-0x6]
c0017f23:	b8 50 c3 02 c0       	mov    eax,0xc002c350
c0017f28:	89 fb                	mov    ebx,edi
c0017f2a:	80 fb 01             	cmp    bl,0x1
c0017f2d:	0f 86 2c 01 00 00    	jbe    c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f33:	b8 60 c3 02 c0       	mov    eax,0xc002c360
c0017f38:	80 fa 08             	cmp    dl,0x8
c0017f3b:	0f 84 1e 01 00 00    	je     c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f41:	89 d7                	mov    edi,edx
c0017f43:	b8 70 c3 02 c0       	mov    eax,0xc002c370
c0017f48:	83 e7 fb             	and    edi,0xfffffffb
c0017f4b:	89 fb                	mov    ebx,edi
c0017f4d:	80 fb 09             	cmp    bl,0x9
c0017f50:	0f 84 09 01 00 00    	je     c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f56:	31 c0                	xor    eax,eax
c0017f58:	89 eb                	mov    ebx,ebp
c0017f5a:	0f b6 fb             	movzx  edi,bl
c0017f5d:	eb 30                	jmp    c0017f8f <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017f5f:	31 c0                	xor    eax,eax
c0017f61:	80 f9 06             	cmp    cl,0x6
c0017f64:	75 f2                	jne    c0017f58 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017f66:	80 fa 0a             	cmp    dl,0xa
c0017f69:	77 ed                	ja     c0017f58 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017f6b:	bf de 05 00 00       	mov    edi,0x5de
c0017f70:	0f a3 d7             	bt     edi,edx
c0017f73:	73 e3                	jae    c0017f58 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017f75:	b8 80 c3 02 c0       	mov    eax,0xc002c380
c0017f7a:	e9 e0 00 00 00       	jmp    c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017f7f:	39 c7                	cmp    edi,eax
c0017f81:	0f 84 d3 00 00 00    	je     c001805a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017f87:	40                   	inc    eax
c0017f88:	3d d0 00 00 00       	cmp    eax,0xd0
c0017f8d:	74 09                	je     c0017f98 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017f8f:	89 f3                	mov    ebx,esi
c0017f91:	80 fb 0f             	cmp    bl,0xf
c0017f94:	75 f1                	jne    c0017f87 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017f96:	eb e7                	jmp    c0017f7f <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017f98:	80 f9 10             	cmp    cl,0x10
c0017f9b:	75 14                	jne    c0017fb1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017f9d:	8d 42 fc             	lea    eax,[edx-0x4]
c0017fa0:	83 e0 fb             	and    eax,0xfffffffb
c0017fa3:	3c 02                	cmp    al,0x2
c0017fa5:	76 34                	jbe    c0017fdb <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017fa7:	b8 a6 a5 02 c0       	mov    eax,0xc002a5a6
c0017fac:	80 fa 02             	cmp    dl,0x2
c0017faf:	eb 24                	jmp    c0017fd5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017fb1:	80 f9 11             	cmp    cl,0x11
c0017fb4:	75 13                	jne    c0017fc9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017fb6:	b8 a6 a5 02 c0       	mov    eax,0xc002a5a6
c0017fbb:	80 fa 03             	cmp    dl,0x3
c0017fbe:	0f 85 9b 00 00 00    	jne    c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fc4:	e9 91 00 00 00       	jmp    c001805a <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017fc9:	80 f9 12             	cmp    cl,0x12
c0017fcc:	75 14                	jne    c0017fe2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017fce:	b8 a6 a5 02 c0       	mov    eax,0xc002a5a6
c0017fd3:	fe ca                	dec    dl
c0017fd5:	0f 85 84 00 00 00    	jne    c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fdb:	b8 a0 c3 02 c0       	mov    eax,0xc002c3a0
c0017fe0:	eb 7d                	jmp    c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017fe2:	80 f9 14             	cmp    cl,0x14
c0017fe5:	75 12                	jne    c0017ff9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017fe7:	4a                   	dec    edx
c0017fe8:	b8 a6 a5 02 c0       	mov    eax,0xc002a5a6
c0017fed:	80 fa 01             	cmp    dl,0x1
c0017ff0:	77 6d                	ja     c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ff2:	b8 b0 c3 02 c0       	mov    eax,0xc002c3b0
c0017ff7:	eb 66                	jmp    c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ff9:	80 f9 15             	cmp    cl,0x15
c0017ffc:	75 31                	jne    c001802f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017ffe:	b8 c0 c3 02 c0       	mov    eax,0xc002c3c0
c0018003:	80 fa 01             	cmp    dl,0x1
c0018006:	74 57                	je     c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018008:	b8 a6 a5 02 c0       	mov    eax,0xc002a5a6
c001800d:	80 fa 13             	cmp    dl,0x13
c0018010:	76 0c                	jbe    c001801e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018012:	80 fa 30             	cmp    dl,0x30
c0018015:	75 48                	jne    c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018017:	b8 e0 c3 02 c0       	mov    eax,0xc002c3e0
c001801c:	eb 41                	jmp    c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001801e:	b9 04 00 09 00       	mov    ecx,0x90004
c0018023:	0f a3 d1             	bt     ecx,edx
c0018026:	73 37                	jae    c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018028:	b8 d0 c3 02 c0       	mov    eax,0xc002c3d0
c001802d:	eb 30                	jmp    c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001802f:	b8 a6 a5 02 c0       	mov    eax,0xc002a5a6
c0018034:	80 f9 16             	cmp    cl,0x16
c0018037:	75 26                	jne    c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018039:	b8 f0 c3 02 c0       	mov    eax,0xc002c3f0
c001803e:	84 d2                	test   dl,dl
c0018040:	74 1d                	je     c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018042:	b8 a6 a5 02 c0       	mov    eax,0xc002a5a6
c0018047:	80 fa 30             	cmp    dl,0x30
c001804a:	75 13                	jne    c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001804c:	b8 00 c4 02 c0       	mov    eax,0xc002c400
c0018051:	eb 0c                	jmp    c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018053:	b8 20 c3 02 c0       	mov    eax,0xc002c320
c0018058:	eb 05                	jmp    c001805f <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001805a:	b8 90 c3 02 c0       	mov    eax,0xc002c390
c001805f:	5b                   	pop    ebx
c0018060:	5e                   	pop    esi
c0018061:	5f                   	pop    edi
c0018062:	5d                   	pop    ebp
c0018063:	c3                   	ret    

c0018064 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018064:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018068:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001806c:	80 f9 04             	cmp    cl,0x4
c001806f:	75 6b                	jne    c00180dc <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018071:	b8 80 c1 02 c0       	mov    eax,0xc002c180
c0018076:	80 fa 01             	cmp    dl,0x1
c0018079:	0f 86 92 02 00 00    	jbe    c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001807f:	b8 90 c1 02 c0       	mov    eax,0xc002c190
c0018084:	80 fa 02             	cmp    dl,0x2
c0018087:	0f 84 84 02 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001808d:	b8 a0 c1 02 c0       	mov    eax,0xc002c1a0
c0018092:	80 fa 03             	cmp    dl,0x3
c0018095:	0f 84 76 02 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001809b:	b8 b0 c1 02 c0       	mov    eax,0xc002c1b0
c00180a0:	80 fa 04             	cmp    dl,0x4
c00180a3:	0f 84 68 02 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180a9:	b8 c0 c1 02 c0       	mov    eax,0xc002c1c0
c00180ae:	80 fa 05             	cmp    dl,0x5
c00180b1:	0f 84 5a 02 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180b7:	b8 a0 c1 02 c0       	mov    eax,0xc002c1a0
c00180bc:	80 fa 07             	cmp    dl,0x7
c00180bf:	0f 84 4c 02 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180c5:	83 ea 08             	sub    edx,0x8
c00180c8:	b8 a6 a5 02 c0       	mov    eax,0xc002a5a6
c00180cd:	80 fa 01             	cmp    dl,0x1
c00180d0:	0f 87 3b 02 00 00    	ja     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180d6:	b8 d0 c1 02 c0       	mov    eax,0xc002c1d0
c00180db:	c3                   	ret    
c00180dc:	80 f9 05             	cmp    cl,0x5
c00180df:	75 45                	jne    c0018126 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00180e1:	8d 4a ff             	lea    ecx,[edx-0x1]
c00180e4:	b8 e0 c1 02 c0       	mov    eax,0xc002c1e0
c00180e9:	80 f9 02             	cmp    cl,0x2
c00180ec:	0f 86 1f 02 00 00    	jbe    c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00180f2:	80 fa 04             	cmp    dl,0x4
c00180f5:	0f 84 f3 01 00 00    	je     c00182ee <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00180fb:	80 fa 07             	cmp    dl,0x7
c00180fe:	0f 84 0d 02 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018104:	b8 f0 c1 02 c0       	mov    eax,0xc002c1f0
c0018109:	80 fa 08             	cmp    dl,0x8
c001810c:	0f 84 ff 01 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018112:	b8 a6 a5 02 c0       	mov    eax,0xc002a5a6
c0018117:	80 fa 09             	cmp    dl,0x9
c001811a:	0f 85 f1 01 00 00    	jne    c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018120:	b8 00 c2 02 c0       	mov    eax,0xc002c200
c0018125:	c3                   	ret    
c0018126:	80 f9 06             	cmp    cl,0x6
c0018129:	0f 85 85 01 00 00    	jne    c00182b4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001812f:	b8 10 c2 02 c0       	mov    eax,0xc002c210
c0018134:	80 fa 01             	cmp    dl,0x1
c0018137:	0f 84 d4 01 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001813d:	8d 42 fb             	lea    eax,[edx-0x5]
c0018140:	3c 01                	cmp    al,0x1
c0018142:	0f 86 ac 01 00 00    	jbe    c00182f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018148:	80 fa 03             	cmp    dl,0x3
c001814b:	0f 84 a3 01 00 00    	je     c00182f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018151:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018154:	b8 30 c2 02 c0       	mov    eax,0xc002c230
c0018159:	80 f9 01             	cmp    cl,0x1
c001815c:	0f 86 af 01 00 00    	jbe    c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018162:	80 fa 09             	cmp    dl,0x9
c0018165:	0f 84 8f 01 00 00    	je     c00182fa <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001816b:	8d 4a f6             	lea    ecx,[edx-0xa]
c001816e:	80 f9 01             	cmp    cl,0x1
c0018171:	0f 86 9a 01 00 00    	jbe    c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018177:	b8 40 c2 02 c0       	mov    eax,0xc002c240
c001817c:	80 fa 0d             	cmp    dl,0xd
c001817f:	0f 84 8c 01 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018185:	b8 50 c2 02 c0       	mov    eax,0xc002c250
c001818a:	80 fa 0e             	cmp    dl,0xe
c001818d:	0f 84 7e 01 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018193:	b8 60 c2 02 c0       	mov    eax,0xc002c260
c0018198:	80 fa 0f             	cmp    dl,0xf
c001819b:	0f 84 70 01 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181a1:	b8 40 c2 02 c0       	mov    eax,0xc002c240
c00181a6:	80 fa 15             	cmp    dl,0x15
c00181a9:	0f 84 62 01 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181af:	8d 4a ea             	lea    ecx,[edx-0x16]
c00181b2:	b8 60 c2 02 c0       	mov    eax,0xc002c260
c00181b7:	80 f9 01             	cmp    cl,0x1
c00181ba:	0f 86 51 01 00 00    	jbe    c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181c0:	80 fa 1a             	cmp    dl,0x1a
c00181c3:	0f 84 37 01 00 00    	je     c0018300 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00181c9:	80 fa 1c             	cmp    dl,0x1c
c00181cc:	0f 84 34 01 00 00    	je     c0018306 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00181d2:	80 fa 1d             	cmp    dl,0x1d
c00181d5:	0f 84 36 01 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181db:	b8 90 c2 02 c0       	mov    eax,0xc002c290
c00181e0:	80 fa 25             	cmp    dl,0x25
c00181e3:	0f 84 28 01 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181e9:	8d 4a da             	lea    ecx,[edx-0x26]
c00181ec:	b8 80 c2 02 c0       	mov    eax,0xc002c280
c00181f1:	80 f9 01             	cmp    cl,0x1
c00181f4:	0f 86 17 01 00 00    	jbe    c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00181fa:	b8 a0 c2 02 c0       	mov    eax,0xc002c2a0
c00181ff:	80 fa 2a             	cmp    dl,0x2a
c0018202:	0f 84 09 01 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018208:	b8 90 c2 02 c0       	mov    eax,0xc002c290
c001820d:	80 fa 2c             	cmp    dl,0x2c
c0018210:	0f 84 fb 00 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018216:	b8 a0 c2 02 c0       	mov    eax,0xc002c2a0
c001821b:	80 fa 2d             	cmp    dl,0x2d
c001821e:	0f 84 ed 00 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018224:	b8 70 c2 02 c0       	mov    eax,0xc002c270
c0018229:	80 fa 2e             	cmp    dl,0x2e
c001822c:	0f 84 df 00 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018232:	b8 90 c2 02 c0       	mov    eax,0xc002c290
c0018237:	80 fa 2f             	cmp    dl,0x2f
c001823a:	0f 84 d1 00 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018240:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018243:	b8 80 c2 02 c0       	mov    eax,0xc002c280
c0018248:	80 f9 01             	cmp    cl,0x1
c001824b:	0f 86 c0 00 00 00    	jbe    c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018251:	b8 b0 c2 02 c0       	mov    eax,0xc002c2b0
c0018256:	80 fa 37             	cmp    dl,0x37
c0018259:	0f 84 b2 00 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001825f:	b8 c0 c2 02 c0       	mov    eax,0xc002c2c0
c0018264:	80 fa 3a             	cmp    dl,0x3a
c0018267:	0f 84 a4 00 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001826d:	b8 d0 c2 02 c0       	mov    eax,0xc002c2d0
c0018272:	80 fa 3c             	cmp    dl,0x3c
c0018275:	0f 84 96 00 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001827b:	b8 e0 c2 02 c0       	mov    eax,0xc002c2e0
c0018280:	80 fa 3d             	cmp    dl,0x3d
c0018283:	0f 84 88 00 00 00    	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018289:	b8 c0 c2 02 c0       	mov    eax,0xc002c2c0
c001828e:	80 fa 3e             	cmp    dl,0x3e
c0018291:	74 7e                	je     c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018293:	8d 42 bb             	lea    eax,[edx-0x45]
c0018296:	3c 01                	cmp    al,0x1
c0018298:	76 72                	jbe    c001830c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001829a:	80 fa 3f             	cmp    dl,0x3f
c001829d:	74 6d                	je     c001830c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001829f:	80 fa 4a             	cmp    dl,0x4a
c00182a2:	74 0a                	je     c00182ae <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00182a4:	b8 a6 a5 02 c0       	mov    eax,0xc002a5a6
c00182a9:	80 fa 4d             	cmp    dl,0x4d
c00182ac:	75 63                	jne    c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182ae:	b8 b0 c2 02 c0       	mov    eax,0xc002c2b0
c00182b3:	c3                   	ret    
c00182b4:	b8 a6 a5 02 c0       	mov    eax,0xc002a5a6
c00182b9:	80 f9 0b             	cmp    cl,0xb
c00182bc:	75 0a                	jne    c00182c8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00182be:	fe ca                	dec    dl
c00182c0:	75 4f                	jne    c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182c2:	b8 f0 c2 02 c0       	mov    eax,0xc002c2f0
c00182c7:	c3                   	ret    
c00182c8:	80 f9 0f             	cmp    cl,0xf
c00182cb:	75 44                	jne    c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182cd:	b8 00 c3 02 c0       	mov    eax,0xc002c300
c00182d2:	80 fa 02             	cmp    dl,0x2
c00182d5:	76 3a                	jbe    c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182d7:	8d 42 fd             	lea    eax,[edx-0x3]
c00182da:	3c 01                	cmp    al,0x1
c00182dc:	76 0a                	jbe    c00182e8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00182de:	b8 a6 a5 02 c0       	mov    eax,0xc002a5a6
c00182e3:	80 fa 06             	cmp    dl,0x6
c00182e6:	75 29                	jne    c0018311 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182e8:	b8 10 c3 02 c0       	mov    eax,0xc002c310
c00182ed:	c3                   	ret    
c00182ee:	b8 f0 c1 02 c0       	mov    eax,0xc002c1f0
c00182f3:	c3                   	ret    
c00182f4:	b8 20 c2 02 c0       	mov    eax,0xc002c220
c00182f9:	c3                   	ret    
c00182fa:	b8 40 c2 02 c0       	mov    eax,0xc002c240
c00182ff:	c3                   	ret    
c0018300:	b8 70 c2 02 c0       	mov    eax,0xc002c270
c0018305:	c3                   	ret    
c0018306:	b8 80 c2 02 c0       	mov    eax,0xc002c280
c001830b:	c3                   	ret    
c001830c:	b8 d0 c2 02 c0       	mov    eax,0xc002c2d0
c0018311:	c3                   	ret    

c0018312 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018312:	60                   	pusha  
c0018313:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001831b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001831f:	9c                   	pushf  
c0018320:	fa                   	cli    
c0018321:	0f 09                	wbinvd 
c0018323:	0f 30                	wrmsr  
c0018325:	9d                   	popf   
c0018326:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001832a:	89 02                	mov    DWORD PTR [edx],eax
c001832c:	61                   	popa   
c001832d:	c3                   	ret    

c001832e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001832e:	60                   	pusha  
c001832f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018333:	9c                   	pushf  
c0018334:	fa                   	cli    
c0018335:	0f 09                	wbinvd 
c0018337:	31 c0                	xor    eax,eax
c0018339:	31 d2                	xor    edx,edx
c001833b:	0f 32                	rdmsr  
c001833d:	9d                   	popf   
c001833e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018342:	89 02                	mov    DWORD PTR [edx],eax
c0018344:	61                   	popa   
c0018345:	c3                   	ret    

c0018346 <CPU::AMD_K6_writeback(int, int, int)>:
c0018346:	56                   	push   esi
c0018347:	53                   	push   ebx
c0018348:	83 ec 10             	sub    esp,0x10
c001834b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001834f:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018354:	75 5d                	jne    c00183b3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018356:	83 f8 08             	cmp    eax,0x8
c0018359:	75 09                	jne    c0018364 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001835b:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018360:	7e 13                	jle    c0018375 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018362:	eb 30                	jmp    c0018394 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018364:	83 f8 06             	cmp    eax,0x6
c0018367:	7c 4a                	jl     c00183b3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018369:	83 f8 07             	cmp    eax,0x7
c001836c:	7e 07                	jle    c0018375 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001836e:	83 f8 09             	cmp    eax,0x9
c0018371:	74 21                	je     c0018394 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018373:	eb 3e                	jmp    c00183b3 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018375:	89 e6                	mov    esi,esp
c0018377:	8b 1d 44 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf44
c001837d:	56                   	push   esi
c001837e:	c1 eb 15             	shr    ebx,0x15
c0018381:	68 82 00 00 c0       	push   0xc0000082
c0018386:	83 e3 7e             	and    ebx,0x7e
c0018389:	e8 a0 ff ff ff       	call   c001832e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001838e:	56                   	push   esi
c001838f:	6a 00                	push   0x0
c0018391:	53                   	push   ebx
c0018392:	eb 12                	jmp    c00183a6 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018394:	89 e3                	mov    ebx,esp
c0018396:	53                   	push   ebx
c0018397:	68 82 00 00 c0       	push   0xc0000082
c001839c:	e8 8d ff ff ff       	call   c001832e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00183a1:	53                   	push   ebx
c00183a2:	6a 00                	push   0x0
c00183a4:	6a 00                	push   0x0
c00183a6:	68 82 00 00 c0       	push   0xc0000082
c00183ab:	e8 62 ff ff ff       	call   c0018312 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00183b0:	83 c4 18             	add    esp,0x18
c00183b3:	83 c4 10             	add    esp,0x10
c00183b6:	5b                   	pop    ebx
c00183b7:	5e                   	pop    esi
c00183b8:	c3                   	ret    
c00183b9:	90                   	nop

c00183ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00183ba:	55                   	push   ebp
c00183bb:	57                   	push   edi
c00183bc:	56                   	push   esi
c00183bd:	53                   	push   ebx
c00183be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183c2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00183c6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00183ca:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00183ce:	39 05 20 c4 02 c0    	cmp    DWORD PTR ds:0xc002c420,eax
c00183d4:	75 23                	jne    c00183f9 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00183d6:	a1 2c da 02 c0       	mov    eax,ds:0xc002da2c
c00183db:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00183df:	89 06                	mov    DWORD PTR [esi],eax
c00183e1:	a1 28 da 02 c0       	mov    eax,ds:0xc002da28
c00183e6:	89 07                	mov    DWORD PTR [edi],eax
c00183e8:	a1 24 da 02 c0       	mov    eax,ds:0xc002da24
c00183ed:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00183f0:	a1 20 da 02 c0       	mov    eax,ds:0xc002da20
c00183f5:	89 02                	mov    DWORD PTR [edx],eax
c00183f7:	eb 3f                	jmp    c0018438 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00183f9:	31 c9                	xor    ecx,ecx
c00183fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183ff:	0f a2                	cpuid  
c0018401:	89 06                	mov    DWORD PTR [esi],eax
c0018403:	89 1f                	mov    DWORD PTR [edi],ebx
c0018405:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018409:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001840c:	89 10                	mov    DWORD PTR [eax],edx
c001840e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018412:	a3 20 c4 02 c0       	mov    ds:0xc002c420,eax
c0018417:	8b 06                	mov    eax,DWORD PTR [esi]
c0018419:	a3 2c da 02 c0       	mov    ds:0xc002da2c,eax
c001841e:	8b 07                	mov    eax,DWORD PTR [edi]
c0018420:	a3 28 da 02 c0       	mov    ds:0xc002da28,eax
c0018425:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018428:	a3 24 da 02 c0       	mov    ds:0xc002da24,eax
c001842d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018431:	8b 00                	mov    eax,DWORD PTR [eax]
c0018433:	a3 20 da 02 c0       	mov    ds:0xc002da20,eax
c0018438:	5b                   	pop    ebx
c0018439:	5e                   	pop    esi
c001843a:	5f                   	pop    edi
c001843b:	5d                   	pop    ebp
c001843c:	c3                   	ret    
c001843d:	90                   	nop

c001843e <CPU::cpuidCheckEDX(unsigned int)>:
c001843e:	83 ec 10             	sub    esp,0x10
c0018441:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018445:	50                   	push   eax
c0018446:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001844a:	50                   	push   eax
c001844b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001844f:	50                   	push   eax
c0018450:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018454:	50                   	push   eax
c0018455:	6a 01                	push   0x1
c0018457:	e8 5e ff ff ff       	call   c00183ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001845c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018460:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018464:	0f 95 c0             	setne  al
c0018467:	83 c4 24             	add    esp,0x24
c001846a:	c3                   	ret    
c001846b:	90                   	nop

c001846c <CPU::cpuidCheckECX(unsigned int)>:
c001846c:	83 ec 10             	sub    esp,0x10
c001846f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018473:	50                   	push   eax
c0018474:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018478:	50                   	push   eax
c0018479:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001847d:	50                   	push   eax
c001847e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018482:	50                   	push   eax
c0018483:	6a 01                	push   0x1
c0018485:	e8 30 ff ff ff       	call   c00183ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001848a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001848e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018492:	0f 95 c0             	setne  al
c0018495:	83 c4 24             	add    esp,0x24
c0018498:	c3                   	ret    
c0018499:	90                   	nop

c001849a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001849a:	83 ec 10             	sub    esp,0x10
c001849d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184a1:	50                   	push   eax
c00184a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184a6:	50                   	push   eax
c00184a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184ab:	50                   	push   eax
c00184ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184b0:	50                   	push   eax
c00184b1:	6a 07                	push   0x7
c00184b3:	e8 02 ff ff ff       	call   c00183ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00184b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00184bc:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00184c0:	0f 95 c0             	setne  al
c00184c3:	83 c4 24             	add    esp,0x24
c00184c6:	c3                   	ret    
c00184c7:	90                   	nop

c00184c8 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00184c8:	83 ec 10             	sub    esp,0x10
c00184cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184cf:	50                   	push   eax
c00184d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184d4:	50                   	push   eax
c00184d5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184d9:	50                   	push   eax
c00184da:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00184de:	50                   	push   eax
c00184df:	6a 07                	push   0x7
c00184e1:	e8 d4 fe ff ff       	call   c00183ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00184e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00184ea:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00184ee:	0f 95 c0             	setne  al
c00184f1:	83 c4 24             	add    esp,0x24
c00184f4:	c3                   	ret    
c00184f5:	90                   	nop

c00184f6 <CPU::CPU()>:
c00184f6:	83 ec 0c             	sub    esp,0xc
c00184f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184fd:	83 ec 08             	sub    esp,0x8
c0018500:	68 a6 a5 02 c0       	push   0xc002a5a6
c0018505:	50                   	push   eax
c0018506:	e8 e1 b9 ff ff       	call   c0013eec <Device::Device(char const*)>
c001850b:	83 c4 10             	add    esp,0x10
c001850e:	ba 80 a6 02 c0       	mov    edx,0xc002a680
c0018513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018517:	89 10                	mov    DWORD PTR [eax],edx
c0018519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001851d:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001852b:	05 78 01 00 00       	add    eax,0x178
c0018530:	83 ec 0c             	sub    esp,0xc
c0018533:	50                   	push   eax
c0018534:	e8 03 69 ff ff       	call   c000ee3c <GDT::GDT()>
c0018539:	83 c4 10             	add    esp,0x10
c001853c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018540:	05 7c 09 00 00       	add    eax,0x97c
c0018545:	83 ec 0c             	sub    esp,0xc
c0018548:	50                   	push   eax
c0018549:	e8 50 6b ff ff       	call   c000f09e <IDT::IDT()>
c001854e:	83 c4 10             	add    esp,0x10
c0018551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018555:	05 7c 11 00 00       	add    eax,0x117c
c001855a:	83 ec 0c             	sub    esp,0xc
c001855d:	50                   	push   eax
c001855e:	e8 b3 8c ff ff       	call   c0011216 <TSS::TSS()>
c0018563:	83 c4 10             	add    esp,0x10
c0018566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001856a:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018575:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001857f:	90                   	nop
c0018580:	83 c4 0c             	add    esp,0xc
c0018583:	c3                   	ret    

c0018584 <CPU::displayFeatures()>:
c0018584:	53                   	push   ebx
c0018585:	83 ec 10             	sub    esp,0x10
c0018588:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001858c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018592:	68 b4 a2 02 c0       	push   0xc002a2b4
c0018597:	e8 39 a3 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001859c:	59                   	pop    ecx
c001859d:	58                   	pop    eax
c001859e:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00185a4:	50                   	push   eax
c00185a5:	68 c5 a2 02 c0       	push   0xc002a2c5
c00185aa:	e8 26 a3 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00185af:	58                   	pop    eax
c00185b0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00185b6:	5a                   	pop    edx
c00185b7:	c1 e8 0e             	shr    eax,0xe
c00185ba:	0f b6 c0             	movzx  eax,al
c00185bd:	50                   	push   eax
c00185be:	68 d6 a2 02 c0       	push   0xc002a2d6
c00185c3:	e8 0d a3 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00185c8:	59                   	pop    ecx
c00185c9:	58                   	pop    eax
c00185ca:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00185d0:	66 c1 e8 06          	shr    ax,0x6
c00185d4:	0f b6 c0             	movzx  eax,al
c00185d7:	50                   	push   eax
c00185d8:	68 e7 a2 02 c0       	push   0xc002a2e7
c00185dd:	e8 f3 a2 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00185e2:	c7 04 24 83 a7 02 c0 	mov    DWORD PTR [esp],0xc002a783
c00185e9:	e8 e7 a2 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00185ee:	83 c4 10             	add    esp,0x10
c00185f1:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c00185f6:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00185fd:	74 05                	je     c0018604 <CPU::displayFeatures()+0x80>
c00185ff:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c0018604:	52                   	push   edx
c0018605:	52                   	push   edx
c0018606:	50                   	push   eax
c0018607:	68 f8 a2 02 c0       	push   0xc002a2f8
c001860c:	e8 c4 a2 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0018611:	83 c4 10             	add    esp,0x10
c0018614:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c0018619:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018620:	78 05                	js     c0018627 <CPU::displayFeatures()+0xa3>
c0018622:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c0018627:	51                   	push   ecx
c0018628:	51                   	push   ecx
c0018629:	50                   	push   eax
c001862a:	68 0f a3 02 c0       	push   0xc002a30f
c001862f:	e8 a1 a2 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0018634:	83 c4 10             	add    esp,0x10
c0018637:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c001863c:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018643:	75 05                	jne    c001864a <CPU::displayFeatures()+0xc6>
c0018645:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c001864a:	52                   	push   edx
c001864b:	52                   	push   edx
c001864c:	50                   	push   eax
c001864d:	68 26 a3 02 c0       	push   0xc002a326
c0018652:	e8 7e a2 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0018657:	83 c4 10             	add    esp,0x10
c001865a:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c001865f:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018666:	75 05                	jne    c001866d <CPU::displayFeatures()+0xe9>
c0018668:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c001866d:	51                   	push   ecx
c001866e:	51                   	push   ecx
c001866f:	50                   	push   eax
c0018670:	68 3d a3 02 c0       	push   0xc002a33d
c0018675:	e8 5b a2 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001867a:	83 c4 10             	add    esp,0x10
c001867d:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c0018682:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018689:	75 05                	jne    c0018690 <CPU::displayFeatures()+0x10c>
c001868b:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c0018690:	52                   	push   edx
c0018691:	52                   	push   edx
c0018692:	50                   	push   eax
c0018693:	68 54 a3 02 c0       	push   0xc002a354
c0018698:	e8 38 a2 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001869d:	83 c4 10             	add    esp,0x10
c00186a0:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c00186a5:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00186ac:	75 05                	jne    c00186b3 <CPU::displayFeatures()+0x12f>
c00186ae:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c00186b3:	51                   	push   ecx
c00186b4:	51                   	push   ecx
c00186b5:	50                   	push   eax
c00186b6:	68 6b a3 02 c0       	push   0xc002a36b
c00186bb:	e8 15 a2 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00186c0:	83 c4 10             	add    esp,0x10
c00186c3:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c00186c8:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00186cf:	75 05                	jne    c00186d6 <CPU::displayFeatures()+0x152>
c00186d1:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c00186d6:	52                   	push   edx
c00186d7:	52                   	push   edx
c00186d8:	50                   	push   eax
c00186d9:	68 82 a3 02 c0       	push   0xc002a382
c00186de:	e8 f2 a1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00186e3:	83 c4 10             	add    esp,0x10
c00186e6:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c00186eb:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00186f2:	75 05                	jne    c00186f9 <CPU::displayFeatures()+0x175>
c00186f4:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c00186f9:	51                   	push   ecx
c00186fa:	51                   	push   ecx
c00186fb:	50                   	push   eax
c00186fc:	68 99 a3 02 c0       	push   0xc002a399
c0018701:	e8 cf a1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0018706:	83 c4 10             	add    esp,0x10
c0018709:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c001870e:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018715:	75 05                	jne    c001871c <CPU::displayFeatures()+0x198>
c0018717:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c001871c:	52                   	push   edx
c001871d:	52                   	push   edx
c001871e:	50                   	push   eax
c001871f:	68 b0 a3 02 c0       	push   0xc002a3b0
c0018724:	e8 ac a1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0018729:	83 c4 10             	add    esp,0x10
c001872c:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c0018731:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018738:	75 05                	jne    c001873f <CPU::displayFeatures()+0x1bb>
c001873a:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c001873f:	51                   	push   ecx
c0018740:	51                   	push   ecx
c0018741:	50                   	push   eax
c0018742:	68 c7 a3 02 c0       	push   0xc002a3c7
c0018747:	e8 89 a1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001874c:	83 c4 10             	add    esp,0x10
c001874f:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c0018754:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c001875b:	75 05                	jne    c0018762 <CPU::displayFeatures()+0x1de>
c001875d:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c0018762:	52                   	push   edx
c0018763:	52                   	push   edx
c0018764:	50                   	push   eax
c0018765:	68 de a3 02 c0       	push   0xc002a3de
c001876a:	e8 66 a1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001876f:	83 c4 10             	add    esp,0x10
c0018772:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c0018777:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001877e:	75 05                	jne    c0018785 <CPU::displayFeatures()+0x201>
c0018780:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c0018785:	51                   	push   ecx
c0018786:	51                   	push   ecx
c0018787:	50                   	push   eax
c0018788:	68 f5 a3 02 c0       	push   0xc002a3f5
c001878d:	e8 43 a1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0018792:	83 c4 10             	add    esp,0x10
c0018795:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c001879a:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00187a1:	75 05                	jne    c00187a8 <CPU::displayFeatures()+0x224>
c00187a3:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c00187a8:	52                   	push   edx
c00187a9:	52                   	push   edx
c00187aa:	50                   	push   eax
c00187ab:	68 0c a4 02 c0       	push   0xc002a40c
c00187b0:	e8 20 a1 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00187b5:	83 c4 10             	add    esp,0x10
c00187b8:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c00187bd:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00187c4:	78 05                	js     c00187cb <CPU::displayFeatures()+0x247>
c00187c6:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c00187cb:	51                   	push   ecx
c00187cc:	51                   	push   ecx
c00187cd:	50                   	push   eax
c00187ce:	68 23 a4 02 c0       	push   0xc002a423
c00187d3:	e8 fd a0 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00187d8:	83 c4 10             	add    esp,0x10
c00187db:	b8 d2 8d 02 c0       	mov    eax,0xc0028dd2
c00187e0:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00187e7:	75 05                	jne    c00187ee <CPU::displayFeatures()+0x26a>
c00187e9:	b8 d6 8d 02 c0       	mov    eax,0xc0028dd6
c00187ee:	52                   	push   edx
c00187ef:	52                   	push   edx
c00187f0:	50                   	push   eax
c00187f1:	68 3a a4 02 c0       	push   0xc002a43a
c00187f6:	e8 da a0 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00187fb:	83 c4 18             	add    esp,0x18
c00187fe:	5b                   	pop    ebx
c00187ff:	c3                   	ret    

c0018800 <CPU::detectFeatures()>:
c0018800:	55                   	push   ebp
c0018801:	57                   	push   edi
c0018802:	56                   	push   esi
c0018803:	53                   	push   ebx
c0018804:	83 ec 50             	sub    esp,0x50
c0018807:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c001880b:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018815:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001881c:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018822:	6a 0d                	push   0xd
c0018824:	6a 00                	push   0x0
c0018826:	57                   	push   edi
c0018827:	e8 98 7e fe ff       	call   c00006c4 <memset>
c001882c:	83 c4 10             	add    esp,0x10
c001882f:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0018834:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c001883b:	0f 84 20 09 00 00    	je     c0019161 <CPU::detectFeatures()+0x961>
c0018841:	83 ec 0c             	sub    esp,0xc
c0018844:	6a 10                	push   0x10
c0018846:	e8 f3 fb ff ff       	call   c001843e <CPU::cpuidCheckEDX(unsigned int)>
c001884b:	83 e0 01             	and    eax,0x1
c001884e:	8d 14 00             	lea    edx,[eax+eax*1]
c0018851:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018857:	83 e0 fd             	and    eax,0xfffffffd
c001885a:	09 d0                	or     eax,edx
c001885c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018862:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018869:	e8 d0 fb ff ff       	call   c001843e <CPU::cpuidCheckEDX(unsigned int)>
c001886e:	83 e0 01             	and    eax,0x1
c0018871:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018878:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001887e:	83 e0 fb             	and    eax,0xfffffffb
c0018881:	09 d0                	or     eax,edx
c0018883:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018889:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018890:	e8 a9 fb ff ff       	call   c001843e <CPU::cpuidCheckEDX(unsigned int)>
c0018895:	83 e0 01             	and    eax,0x1
c0018898:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001889f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188a5:	83 e0 f7             	and    eax,0xfffffff7
c00188a8:	09 d0                	or     eax,edx
c00188aa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188b0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00188b7:	e8 82 fb ff ff       	call   c001843e <CPU::cpuidCheckEDX(unsigned int)>
c00188bc:	83 e0 01             	and    eax,0x1
c00188bf:	c1 e0 04             	shl    eax,0x4
c00188c2:	88 c2                	mov    dl,al
c00188c4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188ca:	83 e0 ef             	and    eax,0xffffffef
c00188cd:	09 d0                	or     eax,edx
c00188cf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188d5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00188dc:	e8 5d fb ff ff       	call   c001843e <CPU::cpuidCheckEDX(unsigned int)>
c00188e1:	83 e0 01             	and    eax,0x1
c00188e4:	c1 e0 05             	shl    eax,0x5
c00188e7:	88 c2                	mov    dl,al
c00188e9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188ef:	83 e0 df             	and    eax,0xffffffdf
c00188f2:	09 d0                	or     eax,edx
c00188f4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188fa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018901:	e8 38 fb ff ff       	call   c001843e <CPU::cpuidCheckEDX(unsigned int)>
c0018906:	83 e0 01             	and    eax,0x1
c0018909:	8d 14 00             	lea    edx,[eax+eax*1]
c001890c:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018912:	83 e0 fd             	and    eax,0xfffffffd
c0018915:	09 d0                	or     eax,edx
c0018917:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001891d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018924:	e8 15 fb ff ff       	call   c001843e <CPU::cpuidCheckEDX(unsigned int)>
c0018929:	83 e0 01             	and    eax,0x1
c001892c:	c1 e0 06             	shl    eax,0x6
c001892f:	88 c2                	mov    dl,al
c0018931:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018937:	83 e0 bf             	and    eax,0xffffffbf
c001893a:	09 d0                	or     eax,edx
c001893c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018942:	58                   	pop    eax
c0018943:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018947:	56                   	push   esi
c0018948:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001894c:	55                   	push   ebp
c001894d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018951:	50                   	push   eax
c0018952:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018956:	52                   	push   edx
c0018957:	6a 00                	push   0x0
c0018959:	e8 5c fa ff ff       	call   c00183ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001895e:	83 c4 1c             	add    esp,0x1c
c0018961:	6a 04                	push   0x4
c0018963:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018967:	50                   	push   eax
c0018968:	57                   	push   edi
c0018969:	e8 32 7d fe ff       	call   c00006a0 <memcpy>
c001896e:	83 c4 0c             	add    esp,0xc
c0018971:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018977:	6a 04                	push   0x4
c0018979:	56                   	push   esi
c001897a:	50                   	push   eax
c001897b:	e8 20 7d fe ff       	call   c00006a0 <memcpy>
c0018980:	83 c4 0c             	add    esp,0xc
c0018983:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018989:	6a 04                	push   0x4
c001898b:	55                   	push   ebp
c001898c:	50                   	push   eax
c001898d:	e8 0e 7d fe ff       	call   c00006a0 <memcpy>
c0018992:	58                   	pop    eax
c0018993:	5a                   	pop    edx
c0018994:	68 51 a4 02 c0       	push   0xc002a451
c0018999:	57                   	push   edi
c001899a:	e8 15 7e fe ff       	call   c00007b4 <strcmp>
c001899f:	83 c4 10             	add    esp,0x10
c00189a2:	85 c0                	test   eax,eax
c00189a4:	75 0f                	jne    c00189b5 <CPU::detectFeatures()+0x1b5>
c00189a6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00189b0:	e9 22 02 00 00       	jmp    c0018bd7 <CPU::detectFeatures()+0x3d7>
c00189b5:	50                   	push   eax
c00189b6:	50                   	push   eax
c00189b7:	68 5e a4 02 c0       	push   0xc002a45e
c00189bc:	57                   	push   edi
c00189bd:	e8 f2 7d fe ff       	call   c00007b4 <strcmp>
c00189c2:	83 c4 10             	add    esp,0x10
c00189c5:	85 c0                	test   eax,eax
c00189c7:	74 dd                	je     c00189a6 <CPU::detectFeatures()+0x1a6>
c00189c9:	51                   	push   ecx
c00189ca:	51                   	push   ecx
c00189cb:	68 6b a4 02 c0       	push   0xc002a46b
c00189d0:	57                   	push   edi
c00189d1:	e8 de 7d fe ff       	call   c00007b4 <strcmp>
c00189d6:	83 c4 10             	add    esp,0x10
c00189d9:	85 c0                	test   eax,eax
c00189db:	74 2a                	je     c0018a07 <CPU::detectFeatures()+0x207>
c00189dd:	52                   	push   edx
c00189de:	52                   	push   edx
c00189df:	68 78 a4 02 c0       	push   0xc002a478
c00189e4:	57                   	push   edi
c00189e5:	e8 ca 7d fe ff       	call   c00007b4 <strcmp>
c00189ea:	83 c4 10             	add    esp,0x10
c00189ed:	85 c0                	test   eax,eax
c00189ef:	74 16                	je     c0018a07 <CPU::detectFeatures()+0x207>
c00189f1:	50                   	push   eax
c00189f2:	50                   	push   eax
c00189f3:	68 85 a4 02 c0       	push   0xc002a485
c00189f8:	57                   	push   edi
c00189f9:	e8 b6 7d fe ff       	call   c00007b4 <strcmp>
c00189fe:	83 c4 10             	add    esp,0x10
c0018a01:	85 c0                	test   eax,eax
c0018a03:	74 48                	je     c0018a4d <CPU::detectFeatures()+0x24d>
c0018a05:	eb 0f                	jmp    c0018a16 <CPU::detectFeatures()+0x216>
c0018a07:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018a11:	e9 c1 01 00 00       	jmp    c0018bd7 <CPU::detectFeatures()+0x3d7>
c0018a16:	50                   	push   eax
c0018a17:	50                   	push   eax
c0018a18:	68 92 a4 02 c0       	push   0xc002a492
c0018a1d:	57                   	push   edi
c0018a1e:	e8 91 7d fe ff       	call   c00007b4 <strcmp>
c0018a23:	83 c4 10             	add    esp,0x10
c0018a26:	85 c0                	test   eax,eax
c0018a28:	74 23                	je     c0018a4d <CPU::detectFeatures()+0x24d>
c0018a2a:	50                   	push   eax
c0018a2b:	50                   	push   eax
c0018a2c:	68 9f a4 02 c0       	push   0xc002a49f
c0018a31:	57                   	push   edi
c0018a32:	e8 7d 7d fe ff       	call   c00007b4 <strcmp>
c0018a37:	83 c4 10             	add    esp,0x10
c0018a3a:	85 c0                	test   eax,eax
c0018a3c:	75 1e                	jne    c0018a5c <CPU::detectFeatures()+0x25c>
c0018a3e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018a48:	e9 8a 01 00 00       	jmp    c0018bd7 <CPU::detectFeatures()+0x3d7>
c0018a4d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018a57:	e9 7b 01 00 00       	jmp    c0018bd7 <CPU::detectFeatures()+0x3d7>
c0018a5c:	50                   	push   eax
c0018a5d:	50                   	push   eax
c0018a5e:	68 ac a4 02 c0       	push   0xc002a4ac
c0018a63:	57                   	push   edi
c0018a64:	e8 4b 7d fe ff       	call   c00007b4 <strcmp>
c0018a69:	83 c4 10             	add    esp,0x10
c0018a6c:	85 c0                	test   eax,eax
c0018a6e:	75 0f                	jne    c0018a7f <CPU::detectFeatures()+0x27f>
c0018a70:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018a7a:	e9 58 01 00 00       	jmp    c0018bd7 <CPU::detectFeatures()+0x3d7>
c0018a7f:	50                   	push   eax
c0018a80:	50                   	push   eax
c0018a81:	68 6b a4 02 c0       	push   0xc002a46b
c0018a86:	57                   	push   edi
c0018a87:	e8 28 7d fe ff       	call   c00007b4 <strcmp>
c0018a8c:	83 c4 10             	add    esp,0x10
c0018a8f:	85 c0                	test   eax,eax
c0018a91:	75 0f                	jne    c0018aa2 <CPU::detectFeatures()+0x2a2>
c0018a93:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018a9d:	e9 35 01 00 00       	jmp    c0018bd7 <CPU::detectFeatures()+0x3d7>
c0018aa2:	50                   	push   eax
c0018aa3:	50                   	push   eax
c0018aa4:	68 b9 a4 02 c0       	push   0xc002a4b9
c0018aa9:	57                   	push   edi
c0018aaa:	e8 05 7d fe ff       	call   c00007b4 <strcmp>
c0018aaf:	83 c4 10             	add    esp,0x10
c0018ab2:	85 c0                	test   eax,eax
c0018ab4:	75 0f                	jne    c0018ac5 <CPU::detectFeatures()+0x2c5>
c0018ab6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018ac0:	e9 12 01 00 00       	jmp    c0018bd7 <CPU::detectFeatures()+0x3d7>
c0018ac5:	51                   	push   ecx
c0018ac6:	51                   	push   ecx
c0018ac7:	68 c6 a4 02 c0       	push   0xc002a4c6
c0018acc:	57                   	push   edi
c0018acd:	e8 e2 7c fe ff       	call   c00007b4 <strcmp>
c0018ad2:	83 c4 10             	add    esp,0x10
c0018ad5:	85 c0                	test   eax,eax
c0018ad7:	75 0f                	jne    c0018ae8 <CPU::detectFeatures()+0x2e8>
c0018ad9:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018ae3:	e9 ef 00 00 00       	jmp    c0018bd7 <CPU::detectFeatures()+0x3d7>
c0018ae8:	52                   	push   edx
c0018ae9:	52                   	push   edx
c0018aea:	68 d3 a4 02 c0       	push   0xc002a4d3
c0018aef:	57                   	push   edi
c0018af0:	e8 bf 7c fe ff       	call   c00007b4 <strcmp>
c0018af5:	83 c4 10             	add    esp,0x10
c0018af8:	85 c0                	test   eax,eax
c0018afa:	75 0f                	jne    c0018b0b <CPU::detectFeatures()+0x30b>
c0018afc:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018b06:	e9 cc 00 00 00       	jmp    c0018bd7 <CPU::detectFeatures()+0x3d7>
c0018b0b:	50                   	push   eax
c0018b0c:	50                   	push   eax
c0018b0d:	68 e0 a4 02 c0       	push   0xc002a4e0
c0018b12:	57                   	push   edi
c0018b13:	e8 9c 7c fe ff       	call   c00007b4 <strcmp>
c0018b18:	83 c4 10             	add    esp,0x10
c0018b1b:	85 c0                	test   eax,eax
c0018b1d:	75 0f                	jne    c0018b2e <CPU::detectFeatures()+0x32e>
c0018b1f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018b29:	e9 a9 00 00 00       	jmp    c0018bd7 <CPU::detectFeatures()+0x3d7>
c0018b2e:	50                   	push   eax
c0018b2f:	50                   	push   eax
c0018b30:	68 ed a4 02 c0       	push   0xc002a4ed
c0018b35:	57                   	push   edi
c0018b36:	e8 79 7c fe ff       	call   c00007b4 <strcmp>
c0018b3b:	83 c4 10             	add    esp,0x10
c0018b3e:	85 c0                	test   eax,eax
c0018b40:	75 0f                	jne    c0018b51 <CPU::detectFeatures()+0x351>
c0018b42:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018b4c:	e9 86 00 00 00       	jmp    c0018bd7 <CPU::detectFeatures()+0x3d7>
c0018b51:	50                   	push   eax
c0018b52:	50                   	push   eax
c0018b53:	68 fa a4 02 c0       	push   0xc002a4fa
c0018b58:	57                   	push   edi
c0018b59:	e8 56 7c fe ff       	call   c00007b4 <strcmp>
c0018b5e:	83 c4 10             	add    esp,0x10
c0018b61:	85 c0                	test   eax,eax
c0018b63:	75 0c                	jne    c0018b71 <CPU::detectFeatures()+0x371>
c0018b65:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018b6f:	eb 66                	jmp    c0018bd7 <CPU::detectFeatures()+0x3d7>
c0018b71:	50                   	push   eax
c0018b72:	50                   	push   eax
c0018b73:	68 07 a5 02 c0       	push   0xc002a507
c0018b78:	57                   	push   edi
c0018b79:	e8 36 7c fe ff       	call   c00007b4 <strcmp>
c0018b7e:	83 c4 10             	add    esp,0x10
c0018b81:	85 c0                	test   eax,eax
c0018b83:	75 0c                	jne    c0018b91 <CPU::detectFeatures()+0x391>
c0018b85:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018b8f:	eb 46                	jmp    c0018bd7 <CPU::detectFeatures()+0x3d7>
c0018b91:	50                   	push   eax
c0018b92:	50                   	push   eax
c0018b93:	68 14 a5 02 c0       	push   0xc002a514
c0018b98:	57                   	push   edi
c0018b99:	e8 16 7c fe ff       	call   c00007b4 <strcmp>
c0018b9e:	83 c4 10             	add    esp,0x10
c0018ba1:	85 c0                	test   eax,eax
c0018ba3:	74 e0                	je     c0018b85 <CPU::detectFeatures()+0x385>
c0018ba5:	50                   	push   eax
c0018ba6:	50                   	push   eax
c0018ba7:	68 21 a5 02 c0       	push   0xc002a521
c0018bac:	57                   	push   edi
c0018bad:	e8 02 7c fe ff       	call   c00007b4 <strcmp>
c0018bb2:	83 c4 10             	add    esp,0x10
c0018bb5:	85 c0                	test   eax,eax
c0018bb7:	74 cc                	je     c0018b85 <CPU::detectFeatures()+0x385>
c0018bb9:	51                   	push   ecx
c0018bba:	51                   	push   ecx
c0018bbb:	68 2e a5 02 c0       	push   0xc002a52e
c0018bc0:	57                   	push   edi
c0018bc1:	e8 ee 7b fe ff       	call   c00007b4 <strcmp>
c0018bc6:	83 c4 10             	add    esp,0x10
c0018bc9:	85 c0                	test   eax,eax
c0018bcb:	74 b8                	je     c0018b85 <CPU::detectFeatures()+0x385>
c0018bcd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018bd7:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018bdc:	0f 86 be 00 00 00    	jbe    c0018ca0 <CPU::detectFeatures()+0x4a0>
c0018be2:	83 ec 0c             	sub    esp,0xc
c0018be5:	68 80 00 00 00       	push   0x80
c0018bea:	e8 ab f8 ff ff       	call   c001849a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018bef:	83 e0 01             	and    eax,0x1
c0018bf2:	c1 e0 06             	shl    eax,0x6
c0018bf5:	88 c2                	mov    dl,al
c0018bf7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018bfd:	83 e0 bf             	and    eax,0xffffffbf
c0018c00:	09 d0                	or     eax,edx
c0018c02:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c08:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018c0f:	e8 86 f8 ff ff       	call   c001849a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c14:	83 e0 01             	and    eax,0x1
c0018c17:	c1 e0 04             	shl    eax,0x4
c0018c1a:	88 c2                	mov    dl,al
c0018c1c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018c22:	83 e0 ef             	and    eax,0xffffffef
c0018c25:	09 d0                	or     eax,edx
c0018c27:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018c2d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018c34:	e8 61 f8 ff ff       	call   c001849a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018c39:	c1 e0 07             	shl    eax,0x7
c0018c3c:	88 c2                	mov    dl,al
c0018c3e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c44:	83 e0 7f             	and    eax,0x7f
c0018c47:	09 d0                	or     eax,edx
c0018c49:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c4f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018c56:	e8 6d f8 ff ff       	call   c00184c8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018c5b:	83 e0 01             	and    eax,0x1
c0018c5e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018c65:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018c6b:	83 e0 f7             	and    eax,0xfffffff7
c0018c6e:	09 d0                	or     eax,edx
c0018c70:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018c76:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018c7d:	e8 46 f8 ff ff       	call   c00184c8 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018c82:	83 c4 10             	add    esp,0x10
c0018c85:	83 e0 01             	and    eax,0x1
c0018c88:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018c8f:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018c95:	83 e0 fb             	and    eax,0xfffffffb
c0018c98:	09 d0                	or     eax,edx
c0018c9a:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018ca0:	83 ec 0c             	sub    esp,0xc
c0018ca3:	56                   	push   esi
c0018ca4:	55                   	push   ebp
c0018ca5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018ca9:	57                   	push   edi
c0018caa:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018cae:	50                   	push   eax
c0018caf:	6a 01                	push   0x1
c0018cb1:	e8 04 f7 ff ff       	call   c00183ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018cb6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018cba:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018cc0:	88 ca                	mov    dl,cl
c0018cc2:	83 e0 f0             	and    eax,0xfffffff0
c0018cc5:	83 e2 0f             	and    edx,0xf
c0018cc8:	09 d0                	or     eax,edx
c0018cca:	88 ca                	mov    dl,cl
c0018ccc:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018cd2:	c0 ea 04             	shr    dl,0x4
c0018cd5:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018cd9:	0f b6 c2             	movzx  eax,dl
c0018cdc:	83 c4 20             	add    esp,0x20
c0018cdf:	c1 e0 06             	shl    eax,0x6
c0018ce2:	89 c5                	mov    ebp,eax
c0018ce4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018cea:	66 25 3f c0          	and    ax,0xc03f
c0018cee:	09 e8                	or     eax,ebp
c0018cf0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018cf7:	89 c8                	mov    eax,ecx
c0018cf9:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018cff:	c1 e8 08             	shr    eax,0x8
c0018d02:	83 e2 3f             	and    edx,0x3f
c0018d05:	83 e0 0f             	and    eax,0xf
c0018d08:	89 c5                	mov    ebp,eax
c0018d0a:	c1 e5 06             	shl    ebp,0x6
c0018d0d:	09 d5                	or     ebp,edx
c0018d0f:	89 ea                	mov    edx,ebp
c0018d11:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018d17:	88 c2                	mov    dl,al
c0018d19:	c0 ea 02             	shr    dl,0x2
c0018d1c:	89 d5                	mov    ebp,edx
c0018d1e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018d24:	83 e2 c0             	and    edx,0xffffffc0
c0018d27:	09 d5                	or     ebp,edx
c0018d29:	89 ea                	mov    edx,ebp
c0018d2b:	89 cd                	mov    ebp,ecx
c0018d2d:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018d33:	c1 ed 0c             	shr    ebp,0xc
c0018d36:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018d3c:	83 e5 03             	and    ebp,0x3
c0018d3f:	83 e2 cf             	and    edx,0xffffffcf
c0018d42:	c1 e5 04             	shl    ebp,0x4
c0018d45:	09 d5                	or     ebp,edx
c0018d47:	3c 06                	cmp    al,0x6
c0018d49:	89 ea                	mov    edx,ebp
c0018d4b:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018d51:	74 04                	je     c0018d57 <CPU::detectFeatures()+0x557>
c0018d53:	3c 0f                	cmp    al,0xf
c0018d55:	75 5c                	jne    c0018db3 <CPU::detectFeatures()+0x5b3>
c0018d57:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018d5b:	89 cd                	mov    ebp,ecx
c0018d5d:	c1 ed 10             	shr    ebp,0x10
c0018d60:	c1 e5 04             	shl    ebp,0x4
c0018d63:	09 ea                	or     edx,ebp
c0018d65:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018d6b:	0f b6 d2             	movzx  edx,dl
c0018d6e:	66 81 e5 3f c0       	and    bp,0xc03f
c0018d73:	c1 e2 06             	shl    edx,0x6
c0018d76:	09 ea                	or     edx,ebp
c0018d78:	3c 0f                	cmp    al,0xf
c0018d7a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018d81:	75 30                	jne    c0018db3 <CPU::detectFeatures()+0x5b3>
c0018d83:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018d89:	c1 e9 14             	shr    ecx,0x14
c0018d8c:	83 e0 3f             	and    eax,0x3f
c0018d8f:	83 c1 0f             	add    ecx,0xf
c0018d92:	88 ca                	mov    dl,cl
c0018d94:	c0 e9 02             	shr    cl,0x2
c0018d97:	c1 e2 06             	shl    edx,0x6
c0018d9a:	09 d0                	or     eax,edx
c0018d9c:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018da2:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018da8:	83 e0 c0             	and    eax,0xffffffc0
c0018dab:	09 c1                	or     ecx,eax
c0018dad:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018db3:	83 ec 0c             	sub    esp,0xc
c0018db6:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018dbd:	56                   	push   esi
c0018dbe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018dc2:	50                   	push   eax
c0018dc3:	57                   	push   edi
c0018dc4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018dc8:	55                   	push   ebp
c0018dc9:	68 00 00 00 80       	push   0x80000000
c0018dce:	e8 e7 f5 ff ff       	call   c00183ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dd3:	83 c4 20             	add    esp,0x20
c0018dd6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018dde:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018de2:	76 1e                	jbe    c0018e02 <CPU::detectFeatures()+0x602>
c0018de4:	83 ec 0c             	sub    esp,0xc
c0018de7:	56                   	push   esi
c0018de8:	50                   	push   eax
c0018de9:	57                   	push   edi
c0018dea:	55                   	push   ebp
c0018deb:	68 01 00 00 80       	push   0x80000001
c0018df0:	e8 c5 f5 ff ff       	call   c00183ba <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018df5:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018dff:	83 c4 20             	add    esp,0x20
c0018e02:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018e08:	83 f8 01             	cmp    eax,0x1
c0018e0b:	75 6f                	jne    c0018e7c <CPU::detectFeatures()+0x67c>
c0018e0d:	51                   	push   ecx
c0018e0e:	51                   	push   ecx
c0018e0f:	68 3a a5 02 c0       	push   0xc002a53a
c0018e14:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018e18:	56                   	push   esi
c0018e19:	e8 45 79 fe ff       	call   c0000763 <strcpy>
c0018e1e:	5f                   	pop    edi
c0018e1f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e25:	5d                   	pop    ebp
c0018e26:	66 c1 e8 06          	shr    ax,0x6
c0018e2a:	0f b6 c0             	movzx  eax,al
c0018e2d:	50                   	push   eax
c0018e2e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e34:	c1 e8 0e             	shr    eax,0xe
c0018e37:	0f b6 c0             	movzx  eax,al
c0018e3a:	50                   	push   eax
c0018e3b:	e8 24 f2 ff ff       	call   c0018064 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018e40:	5a                   	pop    edx
c0018e41:	59                   	pop    ecx
c0018e42:	50                   	push   eax
c0018e43:	56                   	push   esi
c0018e44:	e8 d1 79 fe ff       	call   c000081a <strcat>
c0018e49:	5f                   	pop    edi
c0018e4a:	5d                   	pop    ebp
c0018e4b:	56                   	push   esi
c0018e4c:	53                   	push   ebx
c0018e4d:	e8 8c b0 ff ff       	call   c0013ede <Device::setName(char const*)>
c0018e52:	58                   	pop    eax
c0018e53:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018e59:	5a                   	pop    edx
c0018e5a:	68 41 a5 02 c0       	push   0xc002a541
c0018e5f:	50                   	push   eax
c0018e60:	e8 4f 79 fe ff       	call   c00007b4 <strcmp>
c0018e65:	83 c4 10             	add    esp,0x10
c0018e68:	85 c0                	test   eax,eax
c0018e6a:	0f 85 71 03 00 00    	jne    c00191e1 <CPU::detectFeatures()+0x9e1>
c0018e70:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018e77:	e9 65 03 00 00       	jmp    c00191e1 <CPU::detectFeatures()+0x9e1>
c0018e7c:	83 f8 02             	cmp    eax,0x2
c0018e7f:	0f 85 b5 00 00 00    	jne    c0018f3a <CPU::detectFeatures()+0x73a>
c0018e85:	57                   	push   edi
c0018e86:	57                   	push   edi
c0018e87:	68 53 a5 02 c0       	push   0xc002a553
c0018e8c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018e90:	56                   	push   esi
c0018e91:	e8 cd 78 fe ff       	call   c0000763 <strcpy>
c0018e96:	5d                   	pop    ebp
c0018e97:	58                   	pop    eax
c0018e98:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e9e:	66 c1 e8 06          	shr    ax,0x6
c0018ea2:	0f b6 c0             	movzx  eax,al
c0018ea5:	50                   	push   eax
c0018ea6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018eac:	c1 e8 0e             	shr    eax,0xe
c0018eaf:	0f b6 c0             	movzx  eax,al
c0018eb2:	50                   	push   eax
c0018eb3:	e8 18 f0 ff ff       	call   c0017ed0 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018eb8:	5a                   	pop    edx
c0018eb9:	59                   	pop    ecx
c0018eba:	50                   	push   eax
c0018ebb:	56                   	push   esi
c0018ebc:	e8 59 79 fe ff       	call   c000081a <strcat>
c0018ec1:	5f                   	pop    edi
c0018ec2:	5d                   	pop    ebp
c0018ec3:	56                   	push   esi
c0018ec4:	53                   	push   ebx
c0018ec5:	e8 14 b0 ff ff       	call   c0013ede <Device::setName(char const*)>
c0018eca:	58                   	pop    eax
c0018ecb:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018ed1:	5a                   	pop    edx
c0018ed2:	68 58 a5 02 c0       	push   0xc002a558
c0018ed7:	50                   	push   eax
c0018ed8:	e8 d7 78 fe ff       	call   c00007b4 <strcmp>
c0018edd:	83 c4 10             	add    esp,0x10
c0018ee0:	85 c0                	test   eax,eax
c0018ee2:	75 20                	jne    c0018f04 <CPU::detectFeatures()+0x704>
c0018ee4:	8b 15 08 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf08
c0018eea:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018ef0:	a8 01                	test   al,0x1
c0018ef2:	74 10                	je     c0018f04 <CPU::detectFeatures()+0x704>
c0018ef4:	83 e0 fe             	and    eax,0xfffffffe
c0018ef7:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018efd:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018f04:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f0a:	c1 e8 0e             	shr    eax,0xe
c0018f0d:	3c 05                	cmp    al,0x5
c0018f0f:	0f 85 cc 02 00 00    	jne    c00191e1 <CPU::detectFeatures()+0x9e1>
c0018f15:	56                   	push   esi
c0018f16:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018f1c:	83 e0 0f             	and    eax,0xf
c0018f1f:	50                   	push   eax
c0018f20:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f26:	66 c1 e8 06          	shr    ax,0x6
c0018f2a:	0f b6 c0             	movzx  eax,al
c0018f2d:	50                   	push   eax
c0018f2e:	6a 05                	push   0x5
c0018f30:	e8 11 f4 ff ff       	call   c0018346 <CPU::AMD_K6_writeback(int, int, int)>
c0018f35:	e9 1f 02 00 00       	jmp    c0019159 <CPU::detectFeatures()+0x959>
c0018f3a:	8d 50 fd             	lea    edx,[eax-0x3]
c0018f3d:	83 fa 01             	cmp    edx,0x1
c0018f40:	76 09                	jbe    c0018f4b <CPU::detectFeatures()+0x74b>
c0018f42:	83 f8 06             	cmp    eax,0x6
c0018f45:	0f 85 91 01 00 00    	jne    c00190dc <CPU::detectFeatures()+0x8dc>
c0018f4b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018f51:	c1 ea 0e             	shr    edx,0xe
c0018f54:	80 fa 05             	cmp    dl,0x5
c0018f57:	75 7b                	jne    c0018fd4 <CPU::detectFeatures()+0x7d4>
c0018f59:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018f5f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018f64:	66 81 fa 00 01       	cmp    dx,0x100
c0018f69:	75 0c                	jne    c0018f77 <CPU::detectFeatures()+0x777>
c0018f6b:	51                   	push   ecx
c0018f6c:	51                   	push   ecx
c0018f6d:	68 5f a5 02 c0       	push   0xc002a55f
c0018f72:	e9 dc 01 00 00       	jmp    c0019153 <CPU::detectFeatures()+0x953>
c0018f77:	66 81 fa 00 02       	cmp    dx,0x200
c0018f7c:	75 0c                	jne    c0018f8a <CPU::detectFeatures()+0x78a>
c0018f7e:	52                   	push   edx
c0018f7f:	52                   	push   edx
c0018f80:	68 72 a5 02 c0       	push   0xc002a572
c0018f85:	e9 c9 01 00 00       	jmp    c0019153 <CPU::detectFeatures()+0x953>
c0018f8a:	66 81 fa 40 02       	cmp    dx,0x240
c0018f8f:	75 0c                	jne    c0018f9d <CPU::detectFeatures()+0x79d>
c0018f91:	50                   	push   eax
c0018f92:	50                   	push   eax
c0018f93:	68 84 a5 02 c0       	push   0xc002a584
c0018f98:	e9 b6 01 00 00       	jmp    c0019153 <CPU::detectFeatures()+0x953>
c0018f9d:	83 f8 06             	cmp    eax,0x6
c0018fa0:	75 0c                	jne    c0018fae <CPU::detectFeatures()+0x7ae>
c0018fa2:	50                   	push   eax
c0018fa3:	50                   	push   eax
c0018fa4:	68 96 a5 02 c0       	push   0xc002a596
c0018fa9:	e9 a5 01 00 00       	jmp    c0019153 <CPU::detectFeatures()+0x953>
c0018fae:	83 f8 04             	cmp    eax,0x4
c0018fb1:	75 0c                	jne    c0018fbf <CPU::detectFeatures()+0x7bf>
c0018fb3:	50                   	push   eax
c0018fb4:	50                   	push   eax
c0018fb5:	68 a2 a5 02 c0       	push   0xc002a5a2
c0018fba:	e9 94 01 00 00       	jmp    c0019153 <CPU::detectFeatures()+0x953>
c0018fbf:	83 f8 03             	cmp    eax,0x3
c0018fc2:	0f 85 19 02 00 00    	jne    c00191e1 <CPU::detectFeatures()+0x9e1>
c0018fc8:	50                   	push   eax
c0018fc9:	50                   	push   eax
c0018fca:	68 aa a5 02 c0       	push   0xc002a5aa
c0018fcf:	e9 7f 01 00 00       	jmp    c0019153 <CPU::detectFeatures()+0x953>
c0018fd4:	80 fa 06             	cmp    dl,0x6
c0018fd7:	0f 85 db 00 00 00    	jne    c00190b8 <CPU::detectFeatures()+0x8b8>
c0018fdd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018fe3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018fe8:	66 81 fa 80 01       	cmp    dx,0x180
c0018fed:	75 0c                	jne    c0018ffb <CPU::detectFeatures()+0x7fb>
c0018fef:	50                   	push   eax
c0018ff0:	50                   	push   eax
c0018ff1:	68 b5 a5 02 c0       	push   0xc002a5b5
c0018ff6:	e9 58 01 00 00       	jmp    c0019153 <CPU::detectFeatures()+0x953>
c0018ffb:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019001:	66 f7 c1 80 ff       	test   cx,0xff80
c0019006:	75 0c                	jne    c0019014 <CPU::detectFeatures()+0x814>
c0019008:	50                   	push   eax
c0019009:	50                   	push   eax
c001900a:	68 c5 a5 02 c0       	push   0xc002a5c5
c001900f:	e9 3f 01 00 00       	jmp    c0019153 <CPU::detectFeatures()+0x953>
c0019014:	66 81 fa 40 02       	cmp    dx,0x240
c0019019:	75 0c                	jne    c0019027 <CPU::detectFeatures()+0x827>
c001901b:	55                   	push   ebp
c001901c:	55                   	push   ebp
c001901d:	68 cc a5 02 c0       	push   0xc002a5cc
c0019022:	e9 2c 01 00 00       	jmp    c0019153 <CPU::detectFeatures()+0x953>
c0019027:	66 81 fa 80 02       	cmp    dx,0x280
c001902c:	75 0c                	jne    c001903a <CPU::detectFeatures()+0x83a>
c001902e:	57                   	push   edi
c001902f:	57                   	push   edi
c0019030:	68 d5 a5 02 c0       	push   0xc002a5d5
c0019035:	e9 19 01 00 00       	jmp    c0019153 <CPU::detectFeatures()+0x953>
c001903a:	66 81 fa 40 03       	cmp    dx,0x340
c001903f:	74 ed                	je     c001902e <CPU::detectFeatures()+0x82e>
c0019041:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019046:	75 0c                	jne    c0019054 <CPU::detectFeatures()+0x854>
c0019048:	56                   	push   esi
c0019049:	56                   	push   esi
c001904a:	68 dc a5 02 c0       	push   0xc002a5dc
c001904f:	e9 ff 00 00 00       	jmp    c0019153 <CPU::detectFeatures()+0x953>
c0019054:	83 f8 06             	cmp    eax,0x6
c0019057:	0f 84 45 ff ff ff    	je     c0018fa2 <CPU::detectFeatures()+0x7a2>
c001905d:	83 f8 04             	cmp    eax,0x4
c0019060:	0f 84 4d ff ff ff    	je     c0018fb3 <CPU::detectFeatures()+0x7b3>
c0019066:	83 f8 03             	cmp    eax,0x3
c0019069:	0f 85 72 01 00 00    	jne    c00191e1 <CPU::detectFeatures()+0x9e1>
c001906f:	51                   	push   ecx
c0019070:	51                   	push   ecx
c0019071:	68 e5 a5 02 c0       	push   0xc002a5e5
c0019076:	53                   	push   ebx
c0019077:	e8 62 ae ff ff       	call   c0013ede <Device::setName(char const*)>
c001907c:	b1 c1                	mov    cl,0xc1
c001907e:	88 c8                	mov    al,cl
c0019080:	e6 22                	out    0x22,al
c0019082:	e4 23                	in     al,0x23
c0019084:	88 c2                	mov    dl,al
c0019086:	88 c8                	mov    al,cl
c0019088:	e6 22                	out    0x22,al
c001908a:	88 d0                	mov    al,dl
c001908c:	83 c8 10             	or     eax,0x10
c001908f:	e6 23                	out    0x23,al
c0019091:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019098:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001909b:	89 d0                	mov    eax,edx
c001909d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00190a3:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00190a7:	40                   	inc    eax
c00190a8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00190ae:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00190b3:	e9 a1 00 00 00       	jmp    c0019159 <CPU::detectFeatures()+0x959>
c00190b8:	83 f8 06             	cmp    eax,0x6
c00190bb:	0f 84 e1 fe ff ff    	je     c0018fa2 <CPU::detectFeatures()+0x7a2>
c00190c1:	83 f8 04             	cmp    eax,0x4
c00190c4:	0f 84 e9 fe ff ff    	je     c0018fb3 <CPU::detectFeatures()+0x7b3>
c00190ca:	83 f8 03             	cmp    eax,0x3
c00190cd:	0f 85 0e 01 00 00    	jne    c00191e1 <CPU::detectFeatures()+0x9e1>
c00190d3:	52                   	push   edx
c00190d4:	52                   	push   edx
c00190d5:	68 f0 a5 02 c0       	push   0xc002a5f0
c00190da:	eb 77                	jmp    c0019153 <CPU::detectFeatures()+0x953>
c00190dc:	83 f8 07             	cmp    eax,0x7
c00190df:	75 09                	jne    c00190ea <CPU::detectFeatures()+0x8ea>
c00190e1:	50                   	push   eax
c00190e2:	50                   	push   eax
c00190e3:	68 fa a5 02 c0       	push   0xc002a5fa
c00190e8:	eb 69                	jmp    c0019153 <CPU::detectFeatures()+0x953>
c00190ea:	83 f8 0a             	cmp    eax,0xa
c00190ed:	75 09                	jne    c00190f8 <CPU::detectFeatures()+0x8f8>
c00190ef:	50                   	push   eax
c00190f0:	50                   	push   eax
c00190f1:	68 05 a6 02 c0       	push   0xc002a605
c00190f6:	eb 5b                	jmp    c0019153 <CPU::detectFeatures()+0x953>
c00190f8:	83 f8 0b             	cmp    eax,0xb
c00190fb:	75 09                	jne    c0019106 <CPU::detectFeatures()+0x906>
c00190fd:	50                   	push   eax
c00190fe:	50                   	push   eax
c00190ff:	68 0d a6 02 c0       	push   0xc002a60d
c0019104:	eb 4d                	jmp    c0019153 <CPU::detectFeatures()+0x953>
c0019106:	83 f8 08             	cmp    eax,0x8
c0019109:	75 09                	jne    c0019114 <CPU::detectFeatures()+0x914>
c001910b:	50                   	push   eax
c001910c:	50                   	push   eax
c001910d:	68 16 a6 02 c0       	push   0xc002a616
c0019112:	eb 3f                	jmp    c0019153 <CPU::detectFeatures()+0x953>
c0019114:	83 f8 09             	cmp    eax,0x9
c0019117:	75 09                	jne    c0019122 <CPU::detectFeatures()+0x922>
c0019119:	50                   	push   eax
c001911a:	50                   	push   eax
c001911b:	68 1e a6 02 c0       	push   0xc002a61e
c0019120:	eb 31                	jmp    c0019153 <CPU::detectFeatures()+0x953>
c0019122:	83 f8 05             	cmp    eax,0x5
c0019125:	75 09                	jne    c0019130 <CPU::detectFeatures()+0x930>
c0019127:	50                   	push   eax
c0019128:	50                   	push   eax
c0019129:	68 26 a6 02 c0       	push   0xc002a626
c001912e:	eb 23                	jmp    c0019153 <CPU::detectFeatures()+0x953>
c0019130:	83 f8 0c             	cmp    eax,0xc
c0019133:	75 09                	jne    c001913e <CPU::detectFeatures()+0x93e>
c0019135:	55                   	push   ebp
c0019136:	55                   	push   ebp
c0019137:	68 34 a6 02 c0       	push   0xc002a634
c001913c:	eb 15                	jmp    c0019153 <CPU::detectFeatures()+0x953>
c001913e:	83 f8 0d             	cmp    eax,0xd
c0019141:	75 09                	jne    c001914c <CPU::detectFeatures()+0x94c>
c0019143:	57                   	push   edi
c0019144:	57                   	push   edi
c0019145:	68 3f a6 02 c0       	push   0xc002a63f
c001914a:	eb 07                	jmp    c0019153 <CPU::detectFeatures()+0x953>
c001914c:	56                   	push   esi
c001914d:	56                   	push   esi
c001914e:	68 53 a6 02 c0       	push   0xc002a653
c0019153:	53                   	push   ebx
c0019154:	e8 85 ad ff ff       	call   c0013ede <Device::setName(char const*)>
c0019159:	83 c4 10             	add    esp,0x10
c001915c:	e9 80 00 00 00       	jmp    c00191e1 <CPU::detectFeatures()+0x9e1>
c0019161:	51                   	push   ecx
c0019162:	51                   	push   ecx
c0019163:	68 9f a4 02 c0       	push   0xc002a49f
c0019168:	57                   	push   edi
c0019169:	e8 f5 75 fe ff       	call   c0000763 <strcpy>
c001916e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019178:	e8 31 71 fe ff       	call   c00002ae <is486>
c001917d:	83 c4 10             	add    esp,0x10
c0019180:	85 c0                	test   eax,eax
c0019182:	74 2b                	je     c00191af <CPU::detectFeatures()+0x9af>
c0019184:	52                   	push   edx
c0019185:	52                   	push   edx
c0019186:	68 5f a6 02 c0       	push   0xc002a65f
c001918b:	53                   	push   ebx
c001918c:	e8 4d ad ff ff       	call   c0013ede <Device::setName(char const*)>
c0019191:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019198:	0f 20 c0             	mov    eax,cr0
c001919b:	83 e0 14             	and    eax,0x14
c001919e:	83 c4 10             	add    esp,0x10
c00191a1:	83 f8 04             	cmp    eax,0x4
c00191a4:	75 1f                	jne    c00191c5 <CPU::detectFeatures()+0x9c5>
c00191a6:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00191ad:	eb 32                	jmp    c00191e1 <CPU::detectFeatures()+0x9e1>
c00191af:	50                   	push   eax
c00191b0:	50                   	push   eax
c00191b1:	68 6a a6 02 c0       	push   0xc002a66a
c00191b6:	53                   	push   ebx
c00191b7:	e8 22 ad ff ff       	call   c0013ede <Device::setName(char const*)>
c00191bc:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00191c3:	eb d3                	jmp    c0019198 <CPU::detectFeatures()+0x998>
c00191c5:	e8 bf 70 fe ff       	call   c0000289 <hasLegacyFPU>
c00191ca:	83 e0 01             	and    eax,0x1
c00191cd:	8d 14 00             	lea    edx,[eax+eax*1]
c00191d0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00191d6:	83 e0 fd             	and    eax,0xfffffffd
c00191d9:	09 d0                	or     eax,edx
c00191db:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00191e1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00191e8:	83 c4 4c             	add    esp,0x4c
c00191eb:	5b                   	pop    ebx
c00191ec:	5e                   	pop    esi
c00191ed:	5f                   	pop    edi
c00191ee:	5d                   	pop    ebp
c00191ef:	c3                   	ret    

c00191f0 <CPU::setupSMEP()>:
c00191f0:	0f 20 e0             	mov    eax,cr4
c00191f3:	0d 00 00 10 00       	or     eax,0x100000
c00191f8:	0f 22 e0             	mov    cr4,eax
c00191fb:	c3                   	ret    

c00191fc <CPU::setupUMIP()>:
c00191fc:	0f 20 e0             	mov    eax,cr4
c00191ff:	80 cc 08             	or     ah,0x8
c0019202:	0f 22 e0             	mov    cr4,eax
c0019205:	c3                   	ret    

c0019206 <CPU::setupTSC()>:
c0019206:	0f 20 e0             	mov    eax,cr4
c0019209:	83 c8 04             	or     eax,0x4
c001920c:	0f 22 e0             	mov    cr4,eax
c001920f:	c3                   	ret    

c0019210 <CPU::setupLargePages()>:
c0019210:	0f 20 e0             	mov    eax,cr4
c0019213:	83 c8 10             	or     eax,0x10
c0019216:	0f 22 e0             	mov    cr4,eax
c0019219:	c3                   	ret    

c001921a <CPU::setupPAT()>:
c001921a:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c001921f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019226:	74 2c                	je     c0019254 <CPU::setupPAT()+0x3a>
c0019228:	53                   	push   ebx
c0019229:	83 ec 10             	sub    esp,0x10
c001922c:	68 77 02 00 00       	push   0x277
c0019231:	50                   	push   eax
c0019232:	e8 95 59 ff ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c0019237:	83 e2 f8             	and    edx,0xfffffff8
c001923a:	83 ca 01             	or     edx,0x1
c001923d:	52                   	push   edx
c001923e:	50                   	push   eax
c001923f:	68 77 02 00 00       	push   0x277
c0019244:	ff 35 08 cf 02 c0    	push   DWORD PTR ds:0xc002cf08
c001924a:	e8 a9 59 ff ff       	call   c000ebf8 <Computer::wrmsr(unsigned int, unsigned long long)>
c001924f:	83 c4 28             	add    esp,0x28
c0019252:	5b                   	pop    ebx
c0019253:	c3                   	ret    
c0019254:	c3                   	ret    
c0019255:	90                   	nop

c0019256 <CPU::setupMTRR()>:
c0019256:	c3                   	ret    
c0019257:	90                   	nop

c0019258 <CPU::setupGlobalPages()>:
c0019258:	0f 20 e0             	mov    eax,cr4
c001925b:	0c 80                	or     al,0x80
c001925d:	0f 22 e0             	mov    cr4,eax
c0019260:	c3                   	ret    
c0019261:	90                   	nop

c0019262 <CPU::allowUsermodeDataAccess()>:
c0019262:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019266:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001926d:	74 03                	je     c0019272 <CPU::allowUsermodeDataAccess()+0x10>
c001926f:	0f 01 cb             	stac   
c0019272:	c3                   	ret    
c0019273:	90                   	nop

c0019274 <CPU::prohibitUsermodeDataAccess()>:
c0019274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019278:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001927f:	74 03                	je     c0019284 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019281:	0f 01 ca             	clac   
c0019284:	c3                   	ret    
c0019285:	90                   	nop

c0019286 <CPU::setupSMAP()>:
c0019286:	0f 20 e0             	mov    eax,cr4
c0019289:	0d 00 00 20 00       	or     eax,0x200000
c001928e:	0f 22 e0             	mov    cr4,eax
c0019291:	eb e1                	jmp    c0019274 <CPU::prohibitUsermodeDataAccess()>
c0019293:	90                   	nop

c0019294 <CPU::setupFeatures()>:
c0019294:	83 ec 0c             	sub    esp,0xc
c0019297:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001929b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00192a2:	74 07                	je     c00192ab <CPU::setupFeatures()+0x17>
c00192a4:	52                   	push   edx
c00192a5:	e8 46 ff ff ff       	call   c00191f0 <CPU::setupSMEP()>
c00192aa:	58                   	pop    eax
c00192ab:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00192b2:	74 07                	je     c00192bb <CPU::setupFeatures()+0x27>
c00192b4:	52                   	push   edx
c00192b5:	e8 cc ff ff ff       	call   c0019286 <CPU::setupSMAP()>
c00192ba:	58                   	pop    eax
c00192bb:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00192c2:	74 07                	je     c00192cb <CPU::setupFeatures()+0x37>
c00192c4:	52                   	push   edx
c00192c5:	e8 32 ff ff ff       	call   c00191fc <CPU::setupUMIP()>
c00192ca:	58                   	pop    eax
c00192cb:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00192d2:	74 07                	je     c00192db <CPU::setupFeatures()+0x47>
c00192d4:	52                   	push   edx
c00192d5:	e8 2c ff ff ff       	call   c0019206 <CPU::setupTSC()>
c00192da:	58                   	pop    eax
c00192db:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00192e2:	74 07                	je     c00192eb <CPU::setupFeatures()+0x57>
c00192e4:	52                   	push   edx
c00192e5:	e8 26 ff ff ff       	call   c0019210 <CPU::setupLargePages()>
c00192ea:	59                   	pop    ecx
c00192eb:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00192f2:	74 07                	je     c00192fb <CPU::setupFeatures()+0x67>
c00192f4:	52                   	push   edx
c00192f5:	e8 5e ff ff ff       	call   c0019258 <CPU::setupGlobalPages()>
c00192fa:	58                   	pop    eax
c00192fb:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019302:	74 0c                	je     c0019310 <CPU::setupFeatures()+0x7c>
c0019304:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019308:	83 c4 0c             	add    esp,0xc
c001930b:	e9 0a ff ff ff       	jmp    c001921a <CPU::setupPAT()>
c0019310:	83 c4 0c             	add    esp,0xc
c0019313:	c3                   	ret    

c0019314 <CPU::open(int, int, void*)>:
c0019314:	57                   	push   edi
c0019315:	56                   	push   esi
c0019316:	53                   	push   ebx
c0019317:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001931b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001931f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019325:	83 ec 0c             	sub    esp,0xc
c0019328:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001932e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019334:	50                   	push   eax
c0019335:	e8 7e 5b ff ff       	call   c000eeb8 <GDT::setup()>
c001933a:	83 c4 0c             	add    esp,0xc
c001933d:	6a 00                	push   0x0
c001933f:	68 ef be ad de       	push   0xdeadbeef
c0019344:	57                   	push   edi
c0019345:	e8 0c 7f ff ff       	call   c0011256 <TSS::setup(unsigned long, unsigned long)>
c001934a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001934d:	e8 e4 7e ff ff       	call   c0011236 <TSS::flush()>
c0019352:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019358:	89 04 24             	mov    DWORD PTR [esp],eax
c001935b:	e8 b4 5d ff ff       	call   c000f114 <IDT::setup()>
c0019360:	b8 00 04 00 00       	mov    eax,0x400
c0019365:	0f 23 f8             	mov    db7,eax
c0019368:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019372:	e8 2c 69 ff ff       	call   c000fca3 <Phys::allocatePage()>
c0019377:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001937d:	89 30                	mov    DWORD PTR [eax],esi
c001937f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019385:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019388:	58                   	pop    eax
c0019389:	5a                   	pop    edx
c001938a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019390:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019394:	e8 ef 8e ff ff       	call   c0012288 <VAS::setCPUSpecific(unsigned long)>
c0019399:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001939c:	e8 5f f4 ff ff       	call   c0018800 <CPU::detectFeatures()>
c00193a1:	e8 1c be ff ff       	call   c00151c2 <setupInterruptController()>
c00193a6:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00193ac:	a1 20 cf 02 c0       	mov    eax,ds:0xc002cf20
c00193b1:	83 e0 10             	and    eax,0x10
c00193b4:	83 f8 01             	cmp    eax,0x1
c00193b7:	19 c0                	sbb    eax,eax
c00193b9:	83 e0 46             	and    eax,0x46
c00193bc:	83 c0 1e             	add    eax,0x1e
c00193bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00193c2:	e8 b3 d2 ff ff       	call   c001667a <setupTimer(int)>
c00193c7:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00193cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00193d0:	e8 bf fe ff ff       	call   c0019294 <CPU::setupFeatures()>
c00193d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00193d8:	e8 a7 f1 ff ff       	call   c0018584 <CPU::displayFeatures()>
c00193dd:	83 c4 10             	add    esp,0x10
c00193e0:	31 c0                	xor    eax,eax
c00193e2:	5b                   	pop    ebx
c00193e3:	5e                   	pop    esi
c00193e4:	5f                   	pop    edi
c00193e5:	c3                   	ret    

c00193e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00193e6:	57                   	push   edi
c00193e7:	56                   	push   esi
c00193e8:	53                   	push   ebx
c00193e9:	51                   	push   ecx
c00193ea:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00193ee:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00193f1:	0f 02 c0             	lar    eax,ax
c00193f4:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00193f7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00193fb:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00193fe:	88 ca                	mov    dl,cl
c0019400:	c0 ea 06             	shr    dl,0x6
c0019403:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019407:	89 ca                	mov    edx,ecx
c0019409:	66 c1 ea 03          	shr    dx,0x3
c001940d:	83 e2 07             	and    edx,0x7
c0019410:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019415:	88 17                	mov    BYTE PTR [edi],dl
c0019417:	0f 84 a6 01 00 00    	je     c00195c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001941d:	83 e1 07             	and    ecx,0x7
c0019420:	80 f9 04             	cmp    cl,0x4
c0019423:	0f 84 98 00 00 00    	je     c00194c1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019429:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001942e:	0f 95 c0             	setne  al
c0019431:	80 f9 05             	cmp    cl,0x5
c0019434:	0f 95 c2             	setne  dl
c0019437:	08 c2                	or     dl,al
c0019439:	74 79                	je     c00194b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001943b:	84 c9                	test   cl,cl
c001943d:	75 05                	jne    c0019444 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001943f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019442:	eb 3c                	jmp    c0019480 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019444:	80 f9 01             	cmp    cl,0x1
c0019447:	75 05                	jne    c001944e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019449:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001944c:	eb 32                	jmp    c0019480 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001944e:	80 f9 02             	cmp    cl,0x2
c0019451:	75 05                	jne    c0019458 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019453:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019456:	eb 28                	jmp    c0019480 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019458:	31 c0                	xor    eax,eax
c001945a:	80 f9 03             	cmp    cl,0x3
c001945d:	75 05                	jne    c0019464 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001945f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019462:	eb 1c                	jmp    c0019480 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019464:	80 f9 05             	cmp    cl,0x5
c0019467:	75 05                	jne    c001946e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019469:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001946c:	eb 12                	jmp    c0019480 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001946e:	80 f9 06             	cmp    cl,0x6
c0019471:	75 05                	jne    c0019478 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019473:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019476:	eb 08                	jmp    c0019480 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019478:	80 f9 07             	cmp    cl,0x7
c001947b:	75 03                	jne    c0019480 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001947d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019480:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019485:	75 10                	jne    c0019497 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019487:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001948b:	b9 03 00 00 00       	mov    ecx,0x3
c0019490:	01 d0                	add    eax,edx
c0019492:	e9 37 01 00 00       	jmp    c00195ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019497:	b9 02 00 00 00       	mov    ecx,0x2
c001949c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00194a1:	0f 85 27 01 00 00    	jne    c00195ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00194a7:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00194aa:	b9 06 00 00 00       	mov    ecx,0x6
c00194af:	e9 1a 01 00 00       	jmp    c00195ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00194b4:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00194b7:	b9 06 00 00 00       	mov    ecx,0x6
c00194bc:	e9 0f 01 00 00       	jmp    c00195d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00194c1:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00194c4:	88 ca                	mov    dl,cl
c00194c6:	c0 ea 06             	shr    dl,0x6
c00194c9:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00194cd:	89 ca                	mov    edx,ecx
c00194cf:	66 c1 ea 03          	shr    dx,0x3
c00194d3:	83 e2 07             	and    edx,0x7
c00194d6:	80 e1 07             	and    cl,0x7
c00194d9:	75 05                	jne    c00194e0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00194db:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00194de:	eb 4c                	jmp    c001952c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194e0:	80 f9 01             	cmp    cl,0x1
c00194e3:	75 05                	jne    c00194ea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00194e5:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00194e8:	eb 42                	jmp    c001952c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194ea:	80 f9 02             	cmp    cl,0x2
c00194ed:	75 05                	jne    c00194f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00194ef:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00194f2:	eb 38                	jmp    c001952c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194f4:	80 f9 03             	cmp    cl,0x3
c00194f7:	75 05                	jne    c00194fe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00194f9:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00194fc:	eb 2e                	jmp    c001952c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194fe:	80 f9 04             	cmp    cl,0x4
c0019501:	75 12                	jne    c0019515 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019503:	f6 c4 60             	test   ah,0x60
c0019506:	75 08                	jne    c0019510 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019508:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001950b:	8d 78 14             	lea    edi,[eax+0x14]
c001950e:	eb 1c                	jmp    c001952c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019510:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019513:	eb 17                	jmp    c001952c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019515:	80 f9 05             	cmp    cl,0x5
c0019518:	75 05                	jne    c001951f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001951a:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001951d:	eb 0d                	jmp    c001952c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001951f:	80 f9 06             	cmp    cl,0x6
c0019522:	75 05                	jne    c0019529 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019524:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019527:	eb 03                	jmp    c001952c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019529:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001952c:	84 d2                	test   dl,dl
c001952e:	75 05                	jne    c0019535 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019530:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019533:	eb 3c                	jmp    c0019571 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019535:	80 fa 01             	cmp    dl,0x1
c0019538:	75 05                	jne    c001953f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001953a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001953d:	eb 32                	jmp    c0019571 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001953f:	80 fa 02             	cmp    dl,0x2
c0019542:	75 05                	jne    c0019549 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019544:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019547:	eb 28                	jmp    c0019571 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019549:	80 fa 03             	cmp    dl,0x3
c001954c:	75 05                	jne    c0019553 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001954e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019551:	eb 1e                	jmp    c0019571 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019553:	31 c0                	xor    eax,eax
c0019555:	80 fa 04             	cmp    dl,0x4
c0019558:	74 17                	je     c0019571 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001955a:	80 fa 05             	cmp    dl,0x5
c001955d:	75 05                	jne    c0019564 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001955f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019562:	eb 0d                	jmp    c0019571 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019564:	80 fa 06             	cmp    dl,0x6
c0019567:	75 05                	jne    c001956e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019569:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001956c:	eb 03                	jmp    c0019571 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001956e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019571:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019576:	0f 94 c2             	sete   dl
c0019579:	80 f9 05             	cmp    cl,0x5
c001957c:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019580:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019585:	d3 e0                	shl    eax,cl
c0019587:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001958b:	74 0a                	je     c0019597 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001958d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019590:	b9 07 00 00 00       	mov    ecx,0x7
c0019595:	eb 37                	jmp    c00195ce <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019597:	01 f8                	add    eax,edi
c0019599:	b9 03 00 00 00       	mov    ecx,0x3
c001959e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00195a3:	74 2b                	je     c00195d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00195a5:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00195aa:	75 0d                	jne    c00195b9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00195ac:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00195b0:	01 c8                	add    eax,ecx
c00195b2:	b9 04 00 00 00       	mov    ecx,0x4
c00195b7:	eb 17                	jmp    c00195d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00195b9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00195bc:	b9 07 00 00 00       	mov    ecx,0x7
c00195c1:	eb 0d                	jmp    c00195d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00195c3:	b9 02 00 00 00       	mov    ecx,0x2
c00195c8:	b2 01                	mov    dl,0x1
c00195ca:	31 c0                	xor    eax,eax
c00195cc:	eb 02                	jmp    c00195d0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00195ce:	31 d2                	xor    edx,edx
c00195d0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00195d4:	89 0b                	mov    DWORD PTR [ebx],ecx
c00195d6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00195da:	88 11                	mov    BYTE PTR [ecx],dl
c00195dc:	5a                   	pop    edx
c00195dd:	5b                   	pop    ebx
c00195de:	5e                   	pop    esi
c00195df:	5f                   	pop    edi
c00195e0:	c3                   	ret    
c00195e1:	90                   	nop

c00195e2 <EnvVarContainer::getEnv(char const*)>:
c00195e2:	57                   	push   edi
c00195e3:	56                   	push   esi
c00195e4:	53                   	push   ebx
c00195e5:	31 db                	xor    ebx,ebx
c00195e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00195eb:	39 1e                	cmp    DWORD PTR [esi],ebx
c00195ed:	7e 2b                	jle    c001961a <EnvVarContainer::getEnv(char const*)+0x38>
c00195ef:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00195f6:	50                   	push   eax
c00195f7:	50                   	push   eax
c00195f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00195fb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00195fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019602:	e8 ad 71 fe ff       	call   c00007b4 <strcmp>
c0019607:	83 c4 10             	add    esp,0x10
c001960a:	85 c0                	test   eax,eax
c001960c:	75 09                	jne    c0019617 <EnvVarContainer::getEnv(char const*)+0x35>
c001960e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019611:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019615:	eb 05                	jmp    c001961c <EnvVarContainer::getEnv(char const*)+0x3a>
c0019617:	43                   	inc    ebx
c0019618:	eb d1                	jmp    c00195eb <EnvVarContainer::getEnv(char const*)+0x9>
c001961a:	31 c0                	xor    eax,eax
c001961c:	5b                   	pop    ebx
c001961d:	5e                   	pop    esi
c001961e:	5f                   	pop    edi
c001961f:	c3                   	ret    

c0019620 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019620:	57                   	push   edi
c0019621:	56                   	push   esi
c0019622:	53                   	push   ebx
c0019623:	83 ec 1c             	sub    esp,0x1c
c0019626:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001962a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001962e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019632:	57                   	push   edi
c0019633:	e8 a9 70 fe ff       	call   c00006e1 <strlen>
c0019638:	40                   	inc    eax
c0019639:	89 04 24             	mov    DWORD PTR [esp],eax
c001963c:	e8 e3 5f ff ff       	call   c000f624 <malloc>
c0019641:	89 34 24             	mov    DWORD PTR [esp],esi
c0019644:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019648:	e8 94 70 fe ff       	call   c00006e1 <strlen>
c001964d:	40                   	inc    eax
c001964e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019651:	e8 ce 5f ff ff       	call   c000f624 <malloc>
c0019656:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019659:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001965d:	e8 7f 70 fe ff       	call   c00006e1 <strlen>
c0019662:	83 c4 0c             	add    esp,0xc
c0019665:	40                   	inc    eax
c0019666:	50                   	push   eax
c0019667:	6a 00                	push   0x0
c0019669:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001966d:	e8 52 70 fe ff       	call   c00006c4 <memset>
c0019672:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019675:	e8 67 70 fe ff       	call   c00006e1 <strlen>
c001967a:	83 c4 0c             	add    esp,0xc
c001967d:	40                   	inc    eax
c001967e:	50                   	push   eax
c001967f:	57                   	push   edi
c0019680:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019684:	e8 17 70 fe ff       	call   c00006a0 <memcpy>
c0019689:	89 34 24             	mov    DWORD PTR [esp],esi
c001968c:	e8 50 70 fe ff       	call   c00006e1 <strlen>
c0019691:	83 c4 0c             	add    esp,0xc
c0019694:	40                   	inc    eax
c0019695:	50                   	push   eax
c0019696:	6a 00                	push   0x0
c0019698:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001969c:	e8 23 70 fe ff       	call   c00006c4 <memset>
c00196a1:	89 34 24             	mov    DWORD PTR [esp],esi
c00196a4:	e8 38 70 fe ff       	call   c00006e1 <strlen>
c00196a9:	83 c4 0c             	add    esp,0xc
c00196ac:	40                   	inc    eax
c00196ad:	50                   	push   eax
c00196ae:	56                   	push   esi
c00196af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196b3:	e8 e8 6f fe ff       	call   c00006a0 <memcpy>
c00196b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196ba:	40                   	inc    eax
c00196bb:	89 03                	mov    DWORD PTR [ebx],eax
c00196bd:	c1 e0 03             	shl    eax,0x3
c00196c0:	5a                   	pop    edx
c00196c1:	59                   	pop    ecx
c00196c2:	50                   	push   eax
c00196c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00196c6:	e8 45 5f ff ff       	call   c000f610 <realloc>
c00196cb:	83 c4 0c             	add    esp,0xc
c00196ce:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00196d1:	6a 08                	push   0x8
c00196d3:	8d 54 24 10          	lea    edx,[esp+0x10]
c00196d7:	52                   	push   edx
c00196d8:	8b 13                	mov    edx,DWORD PTR [ebx]
c00196da:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00196de:	50                   	push   eax
c00196df:	e8 bc 6f fe ff       	call   c00006a0 <memcpy>
c00196e4:	83 c4 20             	add    esp,0x20
c00196e7:	5b                   	pop    ebx
c00196e8:	5e                   	pop    esi
c00196e9:	5f                   	pop    edi
c00196ea:	c3                   	ret    
c00196eb:	90                   	nop

c00196ec <EnvVarContainer::deleteEnv(char const*)>:
c00196ec:	c3                   	ret    
c00196ed:	90                   	nop

c00196ee <EnvVarContainer::loadFrom(char const*, char const*)>:
c00196ee:	55                   	push   ebp
c00196ef:	57                   	push   edi
c00196f0:	56                   	push   esi
c00196f1:	53                   	push   ebx
c00196f2:	81 ec 38 01 00 00    	sub    esp,0x138
c00196f8:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c00196ff:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019706:	68 14 01 00 00       	push   0x114
c001970b:	e8 14 5f ff ff       	call   c000f624 <malloc>
c0019710:	83 c4 0c             	add    esp,0xc
c0019713:	89 c7                	mov    edi,eax
c0019715:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019718:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001971f:	50                   	push   eax
c0019720:	e8 09 97 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c0019725:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019728:	e8 d3 99 ff ff       	call   c0013100 <File::exists()>
c001972d:	83 c4 10             	add    esp,0x10
c0019730:	84 c0                	test   al,al
c0019732:	75 31                	jne    c0019765 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019734:	51                   	push   ecx
c0019735:	51                   	push   ecx
c0019736:	6a 12                	push   0x12
c0019738:	57                   	push   edi
c0019739:	e8 54 97 ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001973e:	8b 07                	mov    eax,DWORD PTR [edi]
c0019740:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019743:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019746:	e8 96 6f fe ff       	call   c00006e1 <strlen>
c001974b:	5a                   	pop    edx
c001974c:	31 d2                	xor    edx,edx
c001974e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019752:	51                   	push   ecx
c0019753:	55                   	push   ebp
c0019754:	52                   	push   edx
c0019755:	50                   	push   eax
c0019756:	57                   	push   edi
c0019757:	ff d3                	call   ebx
c0019759:	83 c4 14             	add    esp,0x14
c001975c:	57                   	push   edi
c001975d:	e8 8e 97 ff ff       	call   c0012ef0 <File::close()>
c0019762:	83 c4 10             	add    esp,0x10
c0019765:	31 db                	xor    ebx,ebx
c0019767:	50                   	push   eax
c0019768:	31 ed                	xor    ebp,ebp
c001976a:	68 00 01 00 00       	push   0x100
c001976f:	6a 00                	push   0x0
c0019771:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019775:	50                   	push   eax
c0019776:	e8 49 6f fe ff       	call   c00006c4 <memset>
c001977b:	58                   	pop    eax
c001977c:	5a                   	pop    edx
c001977d:	6a 01                	push   0x1
c001977f:	57                   	push   edi
c0019780:	e8 0d 97 ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c0019785:	83 c4 10             	add    esp,0x10
c0019788:	83 ec 0c             	sub    esp,0xc
c001978b:	8b 07                	mov    eax,DWORD PTR [edi]
c001978d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019791:	51                   	push   ecx
c0019792:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019796:	52                   	push   edx
c0019797:	6a 00                	push   0x0
c0019799:	6a 01                	push   0x1
c001979b:	57                   	push   edi
c001979c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001979f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00197a3:	83 c4 20             	add    esp,0x20
c00197a6:	3c 0d                	cmp    al,0xd
c00197a8:	0f 84 12 01 00 00    	je     c00198c0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00197ae:	85 db                	test   ebx,ebx
c00197b0:	0f 84 fd 00 00 00    	je     c00198b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00197b6:	3c 0a                	cmp    al,0xa
c00197b8:	74 13                	je     c00197cd <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00197ba:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00197bf:	74 0c                	je     c00197cd <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00197c1:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c00197c7:	0f 8e e6 00 00 00    	jle    c00198b3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00197cd:	83 ec 0c             	sub    esp,0xc
c00197d0:	8d 53 01             	lea    edx,[ebx+0x1]
c00197d3:	29 dd                	sub    ebp,ebx
c00197d5:	52                   	push   edx
c00197d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00197da:	e8 45 5e ff ff       	call   c000f624 <malloc>
c00197df:	8d 4d 04             	lea    ecx,[ebp+0x4]
c00197e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00197e6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00197e9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00197ed:	e8 32 5e ff ff       	call   c000f624 <malloc>
c00197f2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00197f6:	83 c4 0c             	add    esp,0xc
c00197f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00197fd:	52                   	push   edx
c00197fe:	6a 00                	push   0x0
c0019800:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019804:	e8 bb 6e fe ff       	call   c00006c4 <memset>
c0019809:	83 c4 0c             	add    esp,0xc
c001980c:	53                   	push   ebx
c001980d:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019811:	55                   	push   ebp
c0019812:	01 eb                	add    ebx,ebp
c0019814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019818:	e8 83 6e fe ff       	call   c00006a0 <memcpy>
c001981d:	83 c4 0c             	add    esp,0xc
c0019820:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019824:	51                   	push   ecx
c0019825:	6a 00                	push   0x0
c0019827:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001982b:	e8 94 6e fe ff       	call   c00006c4 <memset>
c0019830:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019833:	e8 a9 6e fe ff       	call   c00006e1 <strlen>
c0019838:	83 c4 0c             	add    esp,0xc
c001983b:	50                   	push   eax
c001983c:	53                   	push   ebx
c001983d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019841:	e8 5a 6e fe ff       	call   c00006a0 <memcpy>
c0019846:	5b                   	pop    ebx
c0019847:	58                   	pop    eax
c0019848:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001984c:	68 a4 a6 02 c0       	push   0xc002a6a4
c0019851:	e8 7f 90 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0019856:	8b 06                	mov    eax,DWORD PTR [esi]
c0019858:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001985b:	40                   	inc    eax
c001985c:	83 c4 10             	add    esp,0x10
c001985f:	89 06                	mov    DWORD PTR [esi],eax
c0019861:	85 d2                	test   edx,edx
c0019863:	75 0c                	jne    c0019871 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019865:	83 ec 0c             	sub    esp,0xc
c0019868:	6a 08                	push   0x8
c001986a:	e8 b5 5d ff ff       	call   c000f624 <malloc>
c001986f:	eb 0c                	jmp    c001987d <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019871:	c1 e0 03             	shl    eax,0x3
c0019874:	51                   	push   ecx
c0019875:	51                   	push   ecx
c0019876:	50                   	push   eax
c0019877:	52                   	push   edx
c0019878:	e8 93 5d ff ff       	call   c000f610 <realloc>
c001987d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019880:	83 c4 10             	add    esp,0x10
c0019883:	31 db                	xor    ebx,ebx
c0019885:	52                   	push   edx
c0019886:	6a 08                	push   0x8
c0019888:	8d 44 24 20          	lea    eax,[esp+0x20]
c001988c:	50                   	push   eax
c001988d:	8b 16                	mov    edx,DWORD PTR [esi]
c001988f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019892:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019896:	50                   	push   eax
c0019897:	e8 04 6e fe ff       	call   c00006a0 <memcpy>
c001989c:	83 c4 0c             	add    esp,0xc
c001989f:	68 00 01 00 00       	push   0x100
c00198a4:	6a 00                	push   0x0
c00198a6:	55                   	push   ebp
c00198a7:	31 ed                	xor    ebp,ebp
c00198a9:	e8 16 6e fe ff       	call   c00006c4 <memset>
c00198ae:	83 c4 10             	add    esp,0x10
c00198b1:	eb 0d                	jmp    c00198c0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00198b3:	3c 3d                	cmp    al,0x3d
c00198b5:	74 07                	je     c00198be <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00198b7:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c00198bb:	45                   	inc    ebp
c00198bc:	eb 02                	jmp    c00198c0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00198be:	89 eb                	mov    ebx,ebp
c00198c0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00198c5:	0f 85 bd fe ff ff    	jne    c0019788 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c00198cb:	50                   	push   eax
c00198cc:	50                   	push   eax
c00198cd:	ff 36                	push   DWORD PTR [esi]
c00198cf:	68 b2 a6 02 c0       	push   0xc002a6b2
c00198d4:	e8 fc 8f ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00198d9:	81 c4 3c 01 00 00    	add    esp,0x13c
c00198df:	5b                   	pop    ebx
c00198e0:	5e                   	pop    esi
c00198e1:	5f                   	pop    edi
c00198e2:	5d                   	pop    ebp
c00198e3:	c3                   	ret    

c00198e4 <EnvVarContainer::__loadSystem()>:
c00198e4:	83 ec 10             	sub    esp,0x10
c00198e7:	68 40 c4 02 c0       	push   0xc002c440
c00198ec:	68 dd a6 02 c0       	push   0xc002a6dd
c00198f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00198f5:	e8 f4 fd ff ff       	call   c00196ee <EnvVarContainer::loadFrom(char const*, char const*)>
c00198fa:	83 c4 1c             	add    esp,0x1c
c00198fd:	c3                   	ret    

c00198fe <EnvVarContainer::__loadUser()>:
c00198fe:	c3                   	ret    
c00198ff:	90                   	nop

c0019900 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019904:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001990a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001990e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019912:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019915:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019919:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019920:	90                   	nop
c0019921:	c3                   	ret    

c0019922 <EnvVarContainer::~EnvVarContainer()>:
c0019922:	83 ec 0c             	sub    esp,0xc
c0019925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019929:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001992c:	85 c0                	test   eax,eax
c001992e:	74 1d                	je     c001994d <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019934:	8b 00                	mov    eax,DWORD PTR [eax]
c0019936:	85 c0                	test   eax,eax
c0019938:	74 13                	je     c001994d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001993a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001993e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019941:	83 ec 0c             	sub    esp,0xc
c0019944:	50                   	push   eax
c0019945:	e8 ea 5c ff ff       	call   c000f634 <free>
c001994a:	83 c4 10             	add    esp,0x10
c001994d:	90                   	nop
c001994e:	83 c4 0c             	add    esp,0xc
c0019951:	c3                   	ret    

c0019952 <Krnl::getEnv(Process*, char const*)>:
c0019952:	53                   	push   ebx
c0019953:	83 ec 08             	sub    esp,0x8
c0019956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001995a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001995e:	39 05 54 e4 02 c0    	cmp    DWORD PTR ds:0xc002e454,eax
c0019964:	74 04                	je     c001996a <Krnl::getEnv(Process*, char const*)+0x18>
c0019966:	85 c0                	test   eax,eax
c0019968:	75 0b                	jne    c0019975 <Krnl::getEnv(Process*, char const*)+0x23>
c001996a:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c001996f:	85 c0                	test   eax,eax
c0019971:	75 19                	jne    c001998c <Krnl::getEnv(Process*, char const*)+0x3a>
c0019973:	eb 27                	jmp    c001999c <Krnl::getEnv(Process*, char const*)+0x4a>
c0019975:	52                   	push   edx
c0019976:	52                   	push   edx
c0019977:	53                   	push   ebx
c0019978:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001997e:	e8 5f fc ff ff       	call   c00195e2 <EnvVarContainer::getEnv(char const*)>
c0019983:	83 c4 10             	add    esp,0x10
c0019986:	85 c0                	test   eax,eax
c0019988:	75 28                	jne    c00199b2 <Krnl::getEnv(Process*, char const*)+0x60>
c001998a:	eb de                	jmp    c001996a <Krnl::getEnv(Process*, char const*)+0x18>
c001998c:	52                   	push   edx
c001998d:	52                   	push   edx
c001998e:	53                   	push   ebx
c001998f:	50                   	push   eax
c0019990:	e8 4d fc ff ff       	call   c00195e2 <EnvVarContainer::getEnv(char const*)>
c0019995:	83 c4 10             	add    esp,0x10
c0019998:	85 c0                	test   eax,eax
c001999a:	75 16                	jne    c00199b2 <Krnl::getEnv(Process*, char const*)+0x60>
c001999c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00199a0:	a1 34 da 02 c0       	mov    eax,ds:0xc002da34
c00199a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00199a9:	83 c4 08             	add    esp,0x8
c00199ac:	5b                   	pop    ebx
c00199ad:	e9 30 fc ff ff       	jmp    c00195e2 <EnvVarContainer::getEnv(char const*)>
c00199b2:	83 c4 08             	add    esp,0x8
c00199b5:	5b                   	pop    ebx
c00199b6:	c3                   	ret    

c00199b7 <Krnl::setEnvSystem(char const*, char const*)>:
c00199b7:	83 ec 10             	sub    esp,0x10
c00199ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00199be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00199c2:	ff 35 34 da 02 c0    	push   DWORD PTR ds:0xc002da34
c00199c8:	e8 53 fc ff ff       	call   c0019620 <EnvVarContainer::setEnv(char const*, char const*)>
c00199cd:	83 c4 1c             	add    esp,0x1c
c00199d0:	c3                   	ret    

c00199d1 <Krnl::setEnvUser(char const*, char const*)>:
c00199d1:	a1 30 da 02 c0       	mov    eax,ds:0xc002da30
c00199d6:	85 c0                	test   eax,eax
c00199d8:	74 15                	je     c00199ef <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00199da:	83 ec 10             	sub    esp,0x10
c00199dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00199e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00199e5:	50                   	push   eax
c00199e6:	e8 35 fc ff ff       	call   c0019620 <EnvVarContainer::setEnv(char const*, char const*)>
c00199eb:	83 c4 1c             	add    esp,0x1c
c00199ee:	c3                   	ret    
c00199ef:	c3                   	ret    

c00199f0 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00199f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199f4:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c00199fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00199fe:	e9 1d fc ff ff       	jmp    c0019620 <EnvVarContainer::setEnv(char const*, char const*)>

c0019a03 <Krnl::deleteEnvSystem(char const*)>:
c0019a03:	c3                   	ret    

c0019a04 <Krnl::deleteEnvUser(char const*)>:
c0019a04:	c3                   	ret    

c0019a05 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019a05:	c3                   	ret    

c0019a06 <Krnl::newProcessEnv(Process*)>:
c0019a06:	83 ec 28             	sub    esp,0x28
c0019a09:	6a 0c                	push   0xc
c0019a0b:	e8 14 5c ff ff       	call   c000f624 <malloc>
c0019a10:	5a                   	pop    edx
c0019a11:	59                   	pop    ecx
c0019a12:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019a16:	50                   	push   eax
c0019a17:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a1b:	e8 e0 fe ff ff       	call   c0019900 <EnvVarContainer::EnvVarContainer(Process*)>
c0019a20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a24:	83 c4 2c             	add    esp,0x2c
c0019a27:	c3                   	ret    

c0019a28 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019a28:	56                   	push   esi
c0019a29:	53                   	push   ebx
c0019a2a:	83 ec 10             	sub    esp,0x10
c0019a2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a31:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c0019a37:	6a 0c                	push   0xc
c0019a39:	e8 e6 5b ff ff       	call   c000f624 <malloc>
c0019a3e:	89 c3                	mov    ebx,eax
c0019a40:	58                   	pop    eax
c0019a41:	5a                   	pop    edx
c0019a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a46:	53                   	push   ebx
c0019a47:	e8 b4 fe ff ff       	call   c0019900 <EnvVarContainer::EnvVarContainer(Process*)>
c0019a4c:	8b 06                	mov    eax,DWORD PTR [esi]
c0019a4e:	89 03                	mov    DWORD PTR [ebx],eax
c0019a50:	c1 e0 03             	shl    eax,0x3
c0019a53:	89 04 24             	mov    DWORD PTR [esp],eax
c0019a56:	e8 c9 5b ff ff       	call   c000f624 <malloc>
c0019a5b:	83 c4 0c             	add    esp,0xc
c0019a5e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019a61:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019a63:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019a6a:	52                   	push   edx
c0019a6b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019a6e:	50                   	push   eax
c0019a6f:	e8 2c 6c fe ff       	call   c00006a0 <memcpy>
c0019a74:	89 d8                	mov    eax,ebx
c0019a76:	83 c4 14             	add    esp,0x14
c0019a79:	5b                   	pop    ebx
c0019a7a:	5e                   	pop    esi
c0019a7b:	c3                   	ret    

c0019a7c <Krnl::loadSystemEnv()>:
c0019a7c:	53                   	push   ebx
c0019a7d:	83 ec 14             	sub    esp,0x14
c0019a80:	6a 0c                	push   0xc
c0019a82:	e8 9d 5b ff ff       	call   c000f624 <malloc>
c0019a87:	89 c3                	mov    ebx,eax
c0019a89:	58                   	pop    eax
c0019a8a:	5a                   	pop    edx
c0019a8b:	ff 35 54 e4 02 c0    	push   DWORD PTR ds:0xc002e454
c0019a91:	53                   	push   ebx
c0019a92:	e8 69 fe ff ff       	call   c0019900 <EnvVarContainer::EnvVarContainer(Process*)>
c0019a97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a9a:	89 1d 34 da 02 c0    	mov    DWORD PTR ds:0xc002da34,ebx
c0019aa0:	e8 3f fe ff ff       	call   c00198e4 <EnvVarContainer::__loadSystem()>
c0019aa5:	83 c4 18             	add    esp,0x18
c0019aa8:	5b                   	pop    ebx
c0019aa9:	c3                   	ret    

c0019aaa <Krnl::loadUserEnv()>:
c0019aaa:	53                   	push   ebx
c0019aab:	83 ec 14             	sub    esp,0x14
c0019aae:	6a 0c                	push   0xc
c0019ab0:	e8 6f 5b ff ff       	call   c000f624 <malloc>
c0019ab5:	89 c3                	mov    ebx,eax
c0019ab7:	58                   	pop    eax
c0019ab8:	5a                   	pop    edx
c0019ab9:	ff 35 54 e4 02 c0    	push   DWORD PTR ds:0xc002e454
c0019abf:	53                   	push   ebx
c0019ac0:	e8 3b fe ff ff       	call   c0019900 <EnvVarContainer::EnvVarContainer(Process*)>
c0019ac5:	89 1d 30 da 02 c0    	mov    DWORD PTR ds:0xc002da30,ebx
c0019acb:	83 c4 18             	add    esp,0x18
c0019ace:	5b                   	pop    ebx
c0019acf:	c3                   	ret    

c0019ad0 <Krnl::flushEnv()>:
c0019ad0:	c3                   	ret    

c0019ad1 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ad5:	8b 15 30 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da30
c0019adb:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019ae1:	a1 34 da 02 c0       	mov    eax,ds:0xc002da34
c0019ae6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ae8:	03 01                	add    eax,DWORD PTR [ecx]
c0019aea:	85 d2                	test   edx,edx
c0019aec:	74 02                	je     c0019af0 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019aee:	03 02                	add    eax,DWORD PTR [edx]
c0019af0:	c3                   	ret    

c0019af1 <Krnl::getProcessEnvPair(Process*, int)>:
c0019af1:	57                   	push   edi
c0019af2:	8b 0d 30 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da30
c0019af8:	56                   	push   esi
c0019af9:	85 c9                	test   ecx,ecx
c0019afb:	53                   	push   ebx
c0019afc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019b00:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019b04:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019b0a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019b0e:	8b 02                	mov    eax,DWORD PTR [edx]
c0019b10:	75 47                	jne    c0019b59 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c0019b12:	39 c3                	cmp    ebx,eax
c0019b14:	7c 47                	jl     c0019b5d <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c0019b16:	8b 15 34 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da34
c0019b1c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019b1e:	01 c1                	add    ecx,eax
c0019b20:	39 d9                	cmp    ecx,ebx
c0019b22:	7e 6c                	jle    c0019b90 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019b24:	51                   	push   ecx
c0019b25:	89 d9                	mov    ecx,ebx
c0019b27:	29 c1                	sub    ecx,eax
c0019b29:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019b2c:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019b30:	53                   	push   ebx
c0019b31:	68 ff a6 02 c0       	push   0xc002a6ff
c0019b36:	e8 9a 8d ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0019b3b:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c0019b41:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019b43:	a1 34 da 02 c0       	mov    eax,ds:0xc002da34
c0019b48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019b4b:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019b4f:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019b52:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019b55:	89 06                	mov    DWORD PTR [esi],eax
c0019b57:	eb 51                	jmp    c0019baa <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c0019b59:	39 c3                	cmp    ebx,eax
c0019b5b:	7d 05                	jge    c0019b62 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019b5d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019b60:	eb 20                	jmp    c0019b82 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019b62:	8b 39                	mov    edi,DWORD PTR [ecx]
c0019b64:	8d 14 07             	lea    edx,[edi+eax*1]
c0019b67:	39 da                	cmp    edx,ebx
c0019b69:	7e 04                	jle    c0019b6f <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019b6b:	29 c3                	sub    ebx,eax
c0019b6d:	eb 10                	jmp    c0019b7f <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019b6f:	8b 0d 34 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002da34
c0019b75:	03 11                	add    edx,DWORD PTR [ecx]
c0019b77:	39 da                	cmp    edx,ebx
c0019b79:	7e 15                	jle    c0019b90 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c0019b7b:	29 c3                	sub    ebx,eax
c0019b7d:	29 fb                	sub    ebx,edi
c0019b7f:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019b82:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019b86:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019b89:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019b8c:	89 06                	mov    DWORD PTR [esi],eax
c0019b8e:	eb 1d                	jmp    c0019bad <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c0019b90:	83 ec 0c             	sub    esp,0xc
c0019b93:	68 13 a7 02 c0       	push   0xc002a713
c0019b98:	e8 18 00 00 00       	call   c0019bb5 <Krnl::panic(char const*)>
c0019b9d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0019ba3:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0019baa:	83 c4 10             	add    esp,0x10
c0019bad:	89 f0                	mov    eax,esi
c0019baf:	5b                   	pop    ebx
c0019bb0:	5e                   	pop    esi
c0019bb1:	5f                   	pop    edi
c0019bb2:	c2 04 00             	ret    0x4

c0019bb5 <Krnl::panic(char const*)>:
c0019bb5:	55                   	push   ebp
c0019bb6:	89 e5                	mov    ebp,esp
c0019bb8:	53                   	push   ebx
c0019bb9:	50                   	push   eax
c0019bba:	a1 3c da 02 c0       	mov    eax,ds:0xc002da3c
c0019bbf:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019bc2:	85 c0                	test   eax,eax
c0019bc4:	74 02                	je     c0019bc8 <Krnl::panic(char const*)+0x13>
c0019bc6:	ff d0                	call   eax
c0019bc8:	fa                   	cli    
c0019bc9:	c6 05 40 da 02 c0 01 	mov    BYTE PTR ds:0xc002da40,0x1
c0019bd0:	83 ec 08             	sub    esp,0x8
c0019bd3:	c6 05 44 be 02 c0 00 	mov    BYTE PTR ds:0xc002be44,0x0
c0019bda:	53                   	push   ebx
c0019bdb:	68 2d a7 02 c0       	push   0xc002a72d
c0019be0:	e8 f0 8c ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0019be5:	58                   	pop    eax
c0019be6:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019beb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019bf1:	e8 a1 6e ff ff       	call   c0010a97 <setActiveTerminal(VgaText*)>
c0019bf6:	83 c4 0c             	add    esp,0xc
c0019bf9:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019bfe:	6a 01                	push   0x1
c0019c00:	6a 0f                	push   0xf
c0019c02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c08:	e8 bb 68 ff ff       	call   c00104c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019c0d:	5a                   	pop    edx
c0019c0e:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019c13:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c19:	e8 1a 71 ff ff       	call   c0010d38 <VgaText::clearScreen()>
c0019c1e:	59                   	pop    ecx
c0019c1f:	58                   	pop    eax
c0019c20:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019c25:	68 46 a7 02 c0       	push   0xc002a746
c0019c2a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c30:	e8 81 72 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019c35:	58                   	pop    eax
c0019c36:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019c3b:	5a                   	pop    edx
c0019c3c:	68 ec a7 02 c0       	push   0xc002a7ec
c0019c41:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c47:	e8 6a 72 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019c4c:	59                   	pop    ecx
c0019c4d:	58                   	pop    eax
c0019c4e:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019c53:	68 62 a7 02 c0       	push   0xc002a762
c0019c58:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c5e:	e8 53 72 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019c63:	58                   	pop    eax
c0019c64:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019c69:	5a                   	pop    edx
c0019c6a:	53                   	push   ebx
c0019c6b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c71:	e8 40 72 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019c76:	59                   	pop    ecx
c0019c77:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019c7c:	5b                   	pop    ebx
c0019c7d:	68 82 a7 02 c0       	push   0xc002a782
c0019c82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c88:	e8 29 72 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019c8d:	58                   	pop    eax
c0019c8e:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019c93:	5a                   	pop    edx
c0019c94:	68 28 a8 02 c0       	push   0xc002a828
c0019c99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019c9f:	e8 12 72 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019ca4:	59                   	pop    ecx
c0019ca5:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019caa:	5b                   	pop    ebx
c0019cab:	68 62 a7 02 c0       	push   0xc002a762
c0019cb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cb6:	e8 fb 71 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019cbb:	58                   	pop    eax
c0019cbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019cc1:	5a                   	pop    edx
c0019cc2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019cc5:	83 c0 0c             	add    eax,0xc
c0019cc8:	50                   	push   eax
c0019cc9:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019cce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cd4:	e8 dd 71 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019cd9:	59                   	pop    ecx
c0019cda:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019cdf:	5b                   	pop    ebx
c0019ce0:	68 81 a7 02 c0       	push   0xc002a781
c0019ce5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ceb:	e8 c6 71 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019cf0:	58                   	pop    eax
c0019cf1:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019cf6:	5a                   	pop    edx
c0019cf7:	68 54 a8 02 c0       	push   0xc002a854
c0019cfc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d02:	e8 af 71 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019d07:	59                   	pop    ecx
c0019d08:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019d0d:	5b                   	pop    ebx
c0019d0e:	68 94 a8 02 c0       	push   0xc002a894
c0019d13:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d19:	e8 98 71 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019d1e:	58                   	pop    eax
c0019d1f:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019d24:	5a                   	pop    edx
c0019d25:	68 6d a7 02 c0       	push   0xc002a76d
c0019d2a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d30:	e8 81 71 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019d35:	59                   	pop    ecx
c0019d36:	5b                   	pop    ebx
c0019d37:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019d3a:	68 85 a7 02 c0       	push   0xc002a785
c0019d3f:	e8 91 8b ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0019d44:	58                   	pop    eax
c0019d45:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019d48:	5a                   	pop    edx
c0019d49:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019d4c:	68 8e a7 02 c0       	push   0xc002a78e
c0019d51:	e8 7f 8b ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0019d56:	59                   	pop    ecx
c0019d57:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019d5a:	5b                   	pop    ebx
c0019d5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d5d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019d60:	68 97 a7 02 c0       	push   0xc002a797
c0019d65:	e8 6b 8b ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0019d6a:	58                   	pop    eax
c0019d6b:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019d70:	5a                   	pop    edx
c0019d71:	68 d8 a8 02 c0       	push   0xc002a8d8
c0019d76:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d7c:	e8 35 71 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019d81:	59                   	pop    ecx
c0019d82:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019d87:	5b                   	pop    ebx
c0019d88:	68 a0 a7 02 c0       	push   0xc002a7a0
c0019d8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d93:	e8 1e 71 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019d98:	0f 20 c0             	mov    eax,cr0
c0019d9b:	5a                   	pop    edx
c0019d9c:	59                   	pop    ecx
c0019d9d:	50                   	push   eax
c0019d9e:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019da3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019da9:	e8 2e 71 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0019dae:	5b                   	pop    ebx
c0019daf:	58                   	pop    eax
c0019db0:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019db5:	68 aa a7 02 c0       	push   0xc002a7aa
c0019dba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dc0:	e8 f1 70 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019dc5:	0f 20 d0             	mov    eax,cr2
c0019dc8:	5a                   	pop    edx
c0019dc9:	59                   	pop    ecx
c0019dca:	50                   	push   eax
c0019dcb:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019dd0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dd6:	e8 01 71 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0019ddb:	5b                   	pop    ebx
c0019ddc:	58                   	pop    eax
c0019ddd:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019de2:	68 b4 a7 02 c0       	push   0xc002a7b4
c0019de7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ded:	e8 c4 70 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019df2:	0f 20 d8             	mov    eax,cr3
c0019df5:	5a                   	pop    edx
c0019df6:	59                   	pop    ecx
c0019df7:	50                   	push   eax
c0019df8:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019dfd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e03:	e8 d4 70 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0019e08:	5b                   	pop    ebx
c0019e09:	58                   	pop    eax
c0019e0a:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019e0f:	68 c7 a7 02 c0       	push   0xc002a7c7
c0019e14:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e1a:	e8 97 70 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019e1f:	0f 20 e0             	mov    eax,cr4
c0019e22:	5a                   	pop    edx
c0019e23:	59                   	pop    ecx
c0019e24:	50                   	push   eax
c0019e25:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019e2a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e30:	e8 a7 70 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0019e35:	5b                   	pop    ebx
c0019e36:	58                   	pop    eax
c0019e37:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019e3c:	68 d1 a7 02 c0       	push   0xc002a7d1
c0019e41:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e47:	e8 6a 70 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019e4c:	5a                   	pop    edx
c0019e4d:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019e52:	59                   	pop    ecx
c0019e53:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019e59:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019e5c:	50                   	push   eax
c0019e5d:	e8 7a 70 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0019e62:	5b                   	pop    ebx
c0019e63:	58                   	pop    eax
c0019e64:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019e69:	68 e8 a7 02 c0       	push   0xc002a7e8
c0019e6e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e74:	e8 3d 70 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019e79:	5a                   	pop    edx
c0019e7a:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019e7f:	59                   	pop    ecx
c0019e80:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019e86:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e89:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019e8c:	50                   	push   eax
c0019e8d:	e8 4a 70 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0019e92:	5b                   	pop    ebx
c0019e93:	58                   	pop    eax
c0019e94:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019e99:	68 e8 a7 02 c0       	push   0xc002a7e8
c0019e9e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ea4:	e8 0d 70 ff ff       	call   c0010eb6 <VgaText::puts(char const*)>
c0019ea9:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c0019eae:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019eb1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019eb7:	8b 12                	mov    edx,DWORD PTR [edx]
c0019eb9:	59                   	pop    ecx
c0019eba:	5b                   	pop    ebx
c0019ebb:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019ebe:	50                   	push   eax
c0019ebf:	e8 18 70 ff ff       	call   c0010edc <VgaText::putx(unsigned int)>
c0019ec4:	83 c4 10             	add    esp,0x10
c0019ec7:	b2 fe                	mov    dl,0xfe
c0019ec9:	e4 60                	in     al,0x60
c0019ecb:	3c 1c                	cmp    al,0x1c
c0019ecd:	74 04                	je     c0019ed3 <Krnl::panic(char const*)+0x31e>
c0019ecf:	3c 5a                	cmp    al,0x5a
c0019ed1:	75 f6                	jne    c0019ec9 <Krnl::panic(char const*)+0x314>
c0019ed3:	e4 64                	in     al,0x64
c0019ed5:	a8 02                	test   al,0x2
c0019ed7:	75 fa                	jne    c0019ed3 <Krnl::panic(char const*)+0x31e>
c0019ed9:	88 d0                	mov    al,dl
c0019edb:	e6 64                	out    0x64,al
c0019edd:	fa                   	cli    
c0019ede:	f4                   	hlt    
c0019edf:	eb e8                	jmp    c0019ec9 <Krnl::panic(char const*)+0x314>

c0019ee1 <Net::switchEndian16(unsigned short)>:
c0019ee1:	83 ec 04             	sub    esp,0x4
c0019ee4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019eec:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019ef0:	c1 f8 08             	sar    eax,0x8
c0019ef3:	89 c2                	mov    edx,eax
c0019ef5:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019ef9:	c1 e0 08             	shl    eax,0x8
c0019efc:	09 d0                	or     eax,edx
c0019efe:	83 c4 04             	add    esp,0x4
c0019f01:	c3                   	ret    

c0019f02 <Net::switchEndian32(unsigned int)>:
c0019f02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f06:	c1 e8 18             	shr    eax,0x18
c0019f09:	89 c2                	mov    edx,eax
c0019f0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f0f:	c1 e0 08             	shl    eax,0x8
c0019f12:	25 00 00 ff 00       	and    eax,0xff0000
c0019f17:	09 c2                	or     edx,eax
c0019f19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f1d:	c1 e8 08             	shr    eax,0x8
c0019f20:	25 00 ff 00 00       	and    eax,0xff00
c0019f25:	09 c2                	or     edx,eax
c0019f27:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f2b:	c1 e0 18             	shl    eax,0x18
c0019f2e:	09 d0                	or     eax,edx
c0019f30:	c3                   	ret    

c0019f31 <Net::crc32Calc(unsigned char*, int)>:
c0019f31:	83 ec 10             	sub    esp,0x10
c0019f34:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019f39:	75 07                	jne    c0019f42 <Net::crc32Calc(unsigned char*, int)+0x11>
c0019f3b:	b8 00 00 00 00       	mov    eax,0x0
c0019f40:	eb 7c                	jmp    c0019fbe <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019f42:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0019f47:	7f 07                	jg     c0019f50 <Net::crc32Calc(unsigned char*, int)+0x1f>
c0019f49:	b8 00 00 00 00       	mov    eax,0x0
c0019f4e:	eb 6e                	jmp    c0019fbe <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019f50:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0019f58:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019f60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f64:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019f68:	7d 4e                	jge    c0019fb8 <Net::crc32Calc(unsigned char*, int)+0x87>
c0019f6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f72:	01 d0                	add    eax,edx
c0019f74:	8a 00                	mov    al,BYTE PTR [eax]
c0019f76:	0f b6 c0             	movzx  eax,al
c0019f79:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0019f7d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019f85:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0019f8a:	7f 26                	jg     c0019fb2 <Net::crc32Calc(unsigned char*, int)+0x81>
c0019f8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f90:	83 e0 01             	and    eax,0x1
c0019f93:	74 0d                	je     c0019fa2 <Net::crc32Calc(unsigned char*, int)+0x71>
c0019f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f99:	d1 e8                	shr    eax,1
c0019f9b:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0019fa0:	eb 06                	jmp    c0019fa8 <Net::crc32Calc(unsigned char*, int)+0x77>
c0019fa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fa6:	d1 e8                	shr    eax,1
c0019fa8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019fac:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019fb0:	eb d3                	jmp    c0019f85 <Net::crc32Calc(unsigned char*, int)+0x54>
c0019fb2:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0019fb6:	eb a8                	jmp    c0019f60 <Net::crc32Calc(unsigned char*, int)+0x2f>
c0019fb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019fbc:	f7 d0                	not    eax
c0019fbe:	83 c4 10             	add    esp,0x10
c0019fc1:	c3                   	ret    

c0019fc2 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0019fc2:	83 ec 1c             	sub    esp,0x1c
c0019fc5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019fc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fcd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019fd5:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c0019fda:	7f 14                	jg     c0019ff0 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c0019fdc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019fe0:	8d 50 01             	lea    edx,[eax+0x1]
c0019fe3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019fe7:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0019fea:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019fee:	eb e5                	jmp    c0019fd5 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c0019ff0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019ff4:	8d 50 01             	lea    edx,[eax+0x1]
c0019ff7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019ffb:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0019ffe:	83 ec 04             	sub    esp,0x4
c001a001:	6a 06                	push   0x6
c001a003:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a007:	50                   	push   eax
c001a008:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a00c:	e8 8f 66 fe ff       	call   c00006a0 <memcpy>
c001a011:	83 c4 10             	add    esp,0x10
c001a014:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a019:	83 ec 04             	sub    esp,0x4
c001a01c:	6a 06                	push   0x6
c001a01e:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a022:	50                   	push   eax
c001a023:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a027:	e8 74 66 fe ff       	call   c00006a0 <memcpy>
c001a02c:	83 c4 10             	add    esp,0x10
c001a02f:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a034:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a038:	0f b7 c0             	movzx  eax,ax
c001a03b:	c1 f8 08             	sar    eax,0x8
c001a03e:	89 c1                	mov    ecx,eax
c001a040:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a044:	8d 50 01             	lea    edx,[eax+0x1]
c001a047:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a04b:	88 ca                	mov    dl,cl
c001a04d:	88 10                	mov    BYTE PTR [eax],dl
c001a04f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a053:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a057:	8d 48 01             	lea    ecx,[eax+0x1]
c001a05a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a05e:	88 10                	mov    BYTE PTR [eax],dl
c001a060:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a064:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a068:	83 ec 04             	sub    esp,0x4
c001a06b:	52                   	push   edx
c001a06c:	50                   	push   eax
c001a06d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a071:	e8 2a 66 fe ff       	call   c00006a0 <memcpy>
c001a076:	83 c4 10             	add    esp,0x10
c001a079:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a07d:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a081:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a085:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a089:	83 ec 08             	sub    esp,0x8
c001a08c:	50                   	push   eax
c001a08d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a091:	e8 9b fe ff ff       	call   c0019f31 <Net::crc32Calc(unsigned char*, int)>
c001a096:	83 c4 10             	add    esp,0x10
c001a099:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a09d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0a1:	c1 e8 18             	shr    eax,0x18
c001a0a4:	89 c1                	mov    ecx,eax
c001a0a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0aa:	8d 50 01             	lea    edx,[eax+0x1]
c001a0ad:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a0b1:	88 ca                	mov    dl,cl
c001a0b3:	88 10                	mov    BYTE PTR [eax],dl
c001a0b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0b9:	c1 e8 10             	shr    eax,0x10
c001a0bc:	89 c1                	mov    ecx,eax
c001a0be:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0c2:	8d 50 01             	lea    edx,[eax+0x1]
c001a0c5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a0c9:	88 ca                	mov    dl,cl
c001a0cb:	88 10                	mov    BYTE PTR [eax],dl
c001a0cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0d1:	c1 e8 08             	shr    eax,0x8
c001a0d4:	89 c1                	mov    ecx,eax
c001a0d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0da:	8d 50 01             	lea    edx,[eax+0x1]
c001a0dd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a0e1:	88 ca                	mov    dl,cl
c001a0e3:	88 10                	mov    BYTE PTR [eax],dl
c001a0e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a0e9:	8d 50 01             	lea    edx,[eax+0x1]
c001a0ec:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a0f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a0f4:	88 10                	mov    BYTE PTR [eax],dl
c001a0f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a0fa:	83 c4 1c             	add    esp,0x1c
c001a0fd:	c3                   	ret    

c001a0fe <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a0fe:	83 ec 2c             	sub    esp,0x2c
c001a101:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a105:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a109:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a10e:	83 ec 04             	sub    esp,0x4
c001a111:	6a 06                	push   0x6
c001a113:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a117:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a11b:	83 c0 0e             	add    eax,0xe
c001a11e:	50                   	push   eax
c001a11f:	e8 7c 65 fe ff       	call   c00006a0 <memcpy>
c001a124:	83 c4 10             	add    esp,0x10
c001a127:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a12c:	83 ec 04             	sub    esp,0x4
c001a12f:	6a 06                	push   0x6
c001a131:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a135:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a139:	83 c0 08             	add    eax,0x8
c001a13c:	50                   	push   eax
c001a13d:	e8 5e 65 fe ff       	call   c00006a0 <memcpy>
c001a142:	83 c4 10             	add    esp,0x10
c001a145:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a14a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a14e:	8d 50 01             	lea    edx,[eax+0x1]
c001a151:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a155:	8a 00                	mov    al,BYTE PTR [eax]
c001a157:	0f b6 c0             	movzx  eax,al
c001a15a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a15f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a163:	8d 50 01             	lea    edx,[eax+0x1]
c001a166:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a16a:	8a 00                	mov    al,BYTE PTR [eax]
c001a16c:	0f b6 c0             	movzx  eax,al
c001a16f:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a174:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a179:	c1 e0 08             	shl    eax,0x8
c001a17c:	89 c2                	mov    edx,eax
c001a17e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a182:	09 d0                	or     eax,edx
c001a184:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a188:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a18c:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a191:	75 3a                	jne    c001a1cd <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a193:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a197:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a19a:	66 3d dc 05          	cmp    ax,0x5dc
c001a19e:	77 10                	ja     c001a1b0 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a1a0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a1a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a1a7:	0f b7 c0             	movzx  eax,ax
c001a1aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a1ae:	eb 1d                	jmp    c001a1cd <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a1b0:	83 ec 0c             	sub    esp,0xc
c001a1b3:	68 00 a9 02 c0       	push   0xc002a900
c001a1b8:	e8 18 87 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001a1bd:	83 c4 10             	add    esp,0x10
c001a1c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a1c4:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a1c8:	e9 c0 00 00 00       	jmp    c001a28d <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a1cd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a1d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a1d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1d7:	83 ec 04             	sub    esp,0x4
c001a1da:	52                   	push   edx
c001a1db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a1df:	50                   	push   eax
c001a1e0:	e8 bb 64 fe ff       	call   c00006a0 <memcpy>
c001a1e5:	83 c4 10             	add    esp,0x10
c001a1e8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a1ec:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a1f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a1f4:	8d 50 01             	lea    edx,[eax+0x1]
c001a1f7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a1fb:	8a 00                	mov    al,BYTE PTR [eax]
c001a1fd:	0f b6 c0             	movzx  eax,al
c001a200:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a204:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a208:	8d 50 01             	lea    edx,[eax+0x1]
c001a20b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a20f:	8a 00                	mov    al,BYTE PTR [eax]
c001a211:	0f b6 c0             	movzx  eax,al
c001a214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a218:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a21c:	8d 50 01             	lea    edx,[eax+0x1]
c001a21f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a223:	8a 00                	mov    al,BYTE PTR [eax]
c001a225:	0f b6 c0             	movzx  eax,al
c001a228:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a22c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a230:	8d 50 01             	lea    edx,[eax+0x1]
c001a233:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a237:	8a 00                	mov    al,BYTE PTR [eax]
c001a239:	0f b6 c0             	movzx  eax,al
c001a23c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a240:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a244:	c1 e0 18             	shl    eax,0x18
c001a247:	89 c2                	mov    edx,eax
c001a249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a24d:	c1 e0 10             	shl    eax,0x10
c001a250:	09 c2                	or     edx,eax
c001a252:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a256:	c1 e0 08             	shl    eax,0x8
c001a259:	09 d0                	or     eax,edx
c001a25b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a25f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a263:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a267:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a26b:	83 e8 04             	sub    eax,0x4
c001a26e:	83 ec 08             	sub    esp,0x8
c001a271:	50                   	push   eax
c001a272:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a276:	e8 b6 fc ff ff       	call   c0019f31 <Net::crc32Calc(unsigned char*, int)>
c001a27b:	83 c4 10             	add    esp,0x10
c001a27e:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a282:	0f 94 c2             	sete   dl
c001a285:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a289:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a28c:	90                   	nop
c001a28d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a291:	83 c4 2c             	add    esp,0x2c
c001a294:	c2 04 00             	ret    0x4

c001a297 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a297:	55                   	push   ebp
c001a298:	57                   	push   edi
c001a299:	56                   	push   esi
c001a29a:	53                   	push   ebx
c001a29b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a2a1:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a2a8:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a2aa:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a2ad:	80 fb 40             	cmp    bl,0x40
c001a2b0:	75 1b                	jne    c001a2cd <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a2b2:	8a 16                	mov    dl,BYTE PTR [esi]
c001a2b4:	84 d2                	test   dl,dl
c001a2b6:	0f 84 f1 00 00 00    	je     c001a3ad <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a2bc:	8d 46 01             	lea    eax,[esi+0x1]
c001a2bf:	80 fa 3a             	cmp    dl,0x3a
c001a2c2:	74 04                	je     c001a2c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a2c4:	89 c6                	mov    esi,eax
c001a2c6:	eb ea                	jmp    c001a2b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a2c8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a2cb:	89 c6                	mov    esi,eax
c001a2cd:	50                   	push   eax
c001a2ce:	6a 40                	push   0x40
c001a2d0:	6a 00                	push   0x0
c001a2d2:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a2d6:	50                   	push   eax
c001a2d7:	e8 e8 63 fe ff       	call   c00006c4 <memset>
c001a2dc:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a2e3:	31 c0                	xor    eax,eax
c001a2e5:	83 c4 10             	add    esp,0x10
c001a2e8:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a2ea:	84 c9                	test   cl,cl
c001a2ec:	0f 84 bb 00 00 00    	je     c001a3ad <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a2f2:	3d c7 00 00 00       	cmp    eax,0xc7
c001a2f7:	0f 8f b0 00 00 00    	jg     c001a3ad <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a2fd:	80 f9 0a             	cmp    cl,0xa
c001a300:	0f 85 98 00 00 00    	jne    c001a39e <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a306:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a30b:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a30f:	a8 df                	test   al,0xdf
c001a311:	0f 94 c1             	sete   cl
c001a314:	3c 23                	cmp    al,0x23
c001a316:	0f 94 c2             	sete   dl
c001a319:	08 d1                	or     cl,dl
c001a31b:	75 4a                	jne    c001a367 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a31d:	8d 50 f7             	lea    edx,[eax-0x9]
c001a320:	80 fa 01             	cmp    dl,0x1
c001a323:	76 42                	jbe    c001a367 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a325:	3c 5b                	cmp    al,0x5b
c001a327:	75 42                	jne    c001a36b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a329:	80 fb 40             	cmp    bl,0x40
c001a32c:	75 39                	jne    c001a367 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a32e:	83 ec 0c             	sub    esp,0xc
c001a331:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a335:	52                   	push   edx
c001a336:	e8 a6 63 fe ff       	call   c00006e1 <strlen>
c001a33b:	83 c4 10             	add    esp,0x10
c001a33e:	83 f8 3f             	cmp    eax,0x3f
c001a341:	77 6a                	ja     c001a3ad <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a343:	50                   	push   eax
c001a344:	50                   	push   eax
c001a345:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a349:	52                   	push   edx
c001a34a:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a34e:	52                   	push   edx
c001a34f:	e8 0f 64 fe ff       	call   c0000763 <strcpy>
c001a354:	58                   	pop    eax
c001a355:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a359:	52                   	push   edx
c001a35a:	e8 82 63 fe ff       	call   c00006e1 <strlen>
c001a35f:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a364:	83 c4 10             	add    esp,0x10
c001a367:	31 d2                	xor    edx,edx
c001a369:	eb 3a                	jmp    c001a3a5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a36b:	80 fb 40             	cmp    bl,0x40
c001a36e:	74 06                	je     c001a376 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a370:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a374:	eb 20                	jmp    c001a396 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a376:	50                   	push   eax
c001a377:	50                   	push   eax
c001a378:	55                   	push   ebp
c001a379:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a37d:	50                   	push   eax
c001a37e:	e8 31 64 fe ff       	call   c00007b4 <strcmp>
c001a383:	83 c4 10             	add    esp,0x10
c001a386:	85 c0                	test   eax,eax
c001a388:	75 dd                	jne    c001a367 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a38a:	eb e4                	jmp    c001a370 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a38c:	8d 50 01             	lea    edx,[eax+0x1]
c001a38f:	80 f9 3d             	cmp    cl,0x3d
c001a392:	74 1d                	je     c001a3b1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a394:	89 d0                	mov    eax,edx
c001a396:	8a 08                	mov    cl,BYTE PTR [eax]
c001a398:	84 c9                	test   cl,cl
c001a39a:	75 f0                	jne    c001a38c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a39c:	eb 0f                	jmp    c001a3ad <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a39e:	8d 50 01             	lea    edx,[eax+0x1]
c001a3a1:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a3a5:	47                   	inc    edi
c001a3a6:	89 d0                	mov    eax,edx
c001a3a8:	e9 3b ff ff ff       	jmp    c001a2e8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a3ad:	31 c0                	xor    eax,eax
c001a3af:	eb 33                	jmp    c001a3e4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a3b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a3b5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a3b8:	50                   	push   eax
c001a3b9:	50                   	push   eax
c001a3ba:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a3be:	50                   	push   eax
c001a3bf:	56                   	push   esi
c001a3c0:	e8 ef 63 fe ff       	call   c00007b4 <strcmp>
c001a3c5:	83 c4 10             	add    esp,0x10
c001a3c8:	85 c0                	test   eax,eax
c001a3ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a3ce:	75 97                	jne    c001a367 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a3d0:	51                   	push   ecx
c001a3d1:	51                   	push   ecx
c001a3d2:	52                   	push   edx
c001a3d3:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a3da:	e8 84 63 fe ff       	call   c0000763 <strcpy>
c001a3df:	83 c4 10             	add    esp,0x10
c001a3e2:	b0 01                	mov    al,0x1
c001a3e4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a3ea:	5b                   	pop    ebx
c001a3eb:	5e                   	pop    esi
c001a3ec:	5f                   	pop    edi
c001a3ed:	5d                   	pop    ebp
c001a3ee:	c3                   	ret    

c001a3ef <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a3ef:	57                   	push   edi
c001a3f0:	56                   	push   esi
c001a3f1:	53                   	push   ebx
c001a3f2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a3f8:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a3ff:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a406:	53                   	push   ebx
c001a407:	e8 d5 62 fe ff       	call   c00006e1 <strlen>
c001a40c:	89 34 24             	mov    DWORD PTR [esp],esi
c001a40f:	89 c7                	mov    edi,eax
c001a411:	e8 cb 62 fe ff       	call   c00006e1 <strlen>
c001a416:	83 c4 10             	add    esp,0x10
c001a419:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a41d:	3d ff 00 00 00       	cmp    eax,0xff
c001a422:	0f 87 d3 00 00 00    	ja     c001a4fb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a428:	57                   	push   edi
c001a429:	57                   	push   edi
c001a42a:	56                   	push   esi
c001a42b:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a42f:	56                   	push   esi
c001a430:	e8 2e 63 fe ff       	call   c0000763 <strcpy>
c001a435:	58                   	pop    eax
c001a436:	5a                   	pop    edx
c001a437:	68 34 ad 02 c0       	push   0xc002ad34
c001a43c:	56                   	push   esi
c001a43d:	e8 d8 63 fe ff       	call   c000081a <strcat>
c001a442:	59                   	pop    ecx
c001a443:	5f                   	pop    edi
c001a444:	53                   	push   ebx
c001a445:	56                   	push   esi
c001a446:	e8 cf 63 fe ff       	call   c000081a <strcat>
c001a44b:	58                   	pop    eax
c001a44c:	5a                   	pop    edx
c001a44d:	68 4c a9 02 c0       	push   0xc002a94c
c001a452:	56                   	push   esi
c001a453:	e8 c2 63 fe ff       	call   c000081a <strcat>
c001a458:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a45f:	e8 c0 51 ff ff       	call   c000f624 <malloc>
c001a464:	83 c4 0c             	add    esp,0xc
c001a467:	89 c3                	mov    ebx,eax
c001a469:	ff 35 54 e4 02 c0    	push   DWORD PTR ds:0xc002e454
c001a46f:	56                   	push   esi
c001a470:	50                   	push   eax
c001a471:	e8 b8 89 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001a476:	83 c4 10             	add    esp,0x10
c001a479:	85 db                	test   ebx,ebx
c001a47b:	74 7e                	je     c001a4fb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a47d:	51                   	push   ecx
c001a47e:	51                   	push   ecx
c001a47f:	6a 01                	push   0x1
c001a481:	53                   	push   ebx
c001a482:	e8 0b 8a ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001a487:	83 c4 10             	add    esp,0x10
c001a48a:	85 c0                	test   eax,eax
c001a48c:	74 08                	je     c001a496 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a48e:	83 ec 0c             	sub    esp,0xc
c001a491:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a493:	53                   	push   ebx
c001a494:	eb 5f                	jmp    c001a4f5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a496:	52                   	push   edx
c001a497:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a49b:	50                   	push   eax
c001a49c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a4a0:	50                   	push   eax
c001a4a1:	53                   	push   ebx
c001a4a2:	e8 97 8c ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c001a4a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a4ab:	83 c4 10             	add    esp,0x10
c001a4ae:	89 c1                	mov    ecx,eax
c001a4b0:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a4b4:	74 31                	je     c001a4e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a4b6:	83 ec 0c             	sub    esp,0xc
c001a4b9:	50                   	push   eax
c001a4ba:	e8 65 51 ff ff       	call   c000f624 <malloc>
c001a4bf:	89 c6                	mov    esi,eax
c001a4c1:	58                   	pop    eax
c001a4c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a4c4:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a4c8:	52                   	push   edx
c001a4c9:	56                   	push   esi
c001a4ca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4ce:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a4d2:	53                   	push   ebx
c001a4d3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a4d6:	83 c4 20             	add    esp,0x20
c001a4d9:	85 c0                	test   eax,eax
c001a4db:	75 0a                	jne    c001a4e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a4dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4e1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a4e5:	74 18                	je     c001a4ff <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a4e7:	83 ec 0c             	sub    esp,0xc
c001a4ea:	53                   	push   ebx
c001a4eb:	e8 00 8a ff ff       	call   c0012ef0 <File::close()>
c001a4f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a4f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a4f8:	83 c4 10             	add    esp,0x10
c001a4fb:	31 c0                	xor    eax,eax
c001a4fd:	eb 3b                	jmp    c001a53a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a4ff:	83 ec 0c             	sub    esp,0xc
c001a502:	53                   	push   ebx
c001a503:	e8 e8 89 ff ff       	call   c0012ef0 <File::close()>
c001a508:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a50a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a50d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a510:	83 c4 0c             	add    esp,0xc
c001a513:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a51a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a521:	56                   	push   esi
c001a522:	e8 70 fd ff ff       	call   c001a297 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a527:	89 34 24             	mov    DWORD PTR [esp],esi
c001a52a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a52e:	e8 01 51 ff ff       	call   c000f634 <free>
c001a533:	83 c4 10             	add    esp,0x10
c001a536:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a53a:	81 c4 20 01 00 00    	add    esp,0x120
c001a540:	5b                   	pop    ebx
c001a541:	5e                   	pop    esi
c001a542:	5f                   	pop    edi
c001a543:	c3                   	ret    

c001a544 <Reg::getLine(char*, char*, char*)>:
c001a544:	57                   	push   edi
c001a545:	56                   	push   esi
c001a546:	53                   	push   ebx
c001a547:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a54b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a54f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a553:	57                   	push   edi
c001a554:	56                   	push   esi
c001a555:	53                   	push   ebx
c001a556:	68 51 a9 02 c0       	push   0xc002a951
c001a55b:	e8 8f fe ff ff       	call   c001a3ef <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a560:	83 c4 10             	add    esp,0x10
c001a563:	84 c0                	test   al,al
c001a565:	75 10                	jne    c001a577 <Reg::getLine(char*, char*, char*)+0x33>
c001a567:	57                   	push   edi
c001a568:	56                   	push   esi
c001a569:	53                   	push   ebx
c001a56a:	68 76 a9 02 c0       	push   0xc002a976
c001a56f:	e8 7b fe ff ff       	call   c001a3ef <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a574:	83 c4 10             	add    esp,0x10
c001a577:	5b                   	pop    ebx
c001a578:	5e                   	pop    esi
c001a579:	5f                   	pop    edi
c001a57a:	c3                   	ret    

c001a57b <Reg::readInt(char*, char*, int*)>:
c001a57b:	55                   	push   ebp
c001a57c:	57                   	push   edi
c001a57d:	56                   	push   esi
c001a57e:	53                   	push   ebx
c001a57f:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a585:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a589:	57                   	push   edi
c001a58a:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a591:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a598:	e8 a7 ff ff ff       	call   c001a544 <Reg::getLine(char*, char*, char*)>
c001a59d:	83 c4 10             	add    esp,0x10
c001a5a0:	84 c0                	test   al,al
c001a5a2:	0f 84 b3 00 00 00    	je     c001a65b <Reg::readInt(char*, char*, int*)+0xe0>
c001a5a8:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a5ac:	80 fa 2b             	cmp    dl,0x2b
c001a5af:	74 0c                	je     c001a5bd <Reg::readInt(char*, char*, int*)+0x42>
c001a5b1:	80 fa 2d             	cmp    dl,0x2d
c001a5b4:	75 0e                	jne    c001a5c4 <Reg::readInt(char*, char*, int*)+0x49>
c001a5b6:	ba 01 00 00 00       	mov    edx,0x1
c001a5bb:	eb 0b                	jmp    c001a5c8 <Reg::readInt(char*, char*, int*)+0x4d>
c001a5bd:	ba 01 00 00 00       	mov    edx,0x1
c001a5c2:	eb 02                	jmp    c001a5c6 <Reg::readInt(char*, char*, int*)+0x4b>
c001a5c4:	31 d2                	xor    edx,edx
c001a5c6:	31 c0                	xor    eax,eax
c001a5c8:	be 0a 00 00 00       	mov    esi,0xa
c001a5cd:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a5d2:	75 20                	jne    c001a5f4 <Reg::readInt(char*, char*, int*)+0x79>
c001a5d4:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a5d8:	80 f9 78             	cmp    cl,0x78
c001a5db:	75 0a                	jne    c001a5e7 <Reg::readInt(char*, char*, int*)+0x6c>
c001a5dd:	83 c2 02             	add    edx,0x2
c001a5e0:	be 10 00 00 00       	mov    esi,0x10
c001a5e5:	eb 0d                	jmp    c001a5f4 <Reg::readInt(char*, char*, int*)+0x79>
c001a5e7:	80 f9 62             	cmp    cl,0x62
c001a5ea:	75 08                	jne    c001a5f4 <Reg::readInt(char*, char*, int*)+0x79>
c001a5ec:	83 c2 02             	add    edx,0x2
c001a5ef:	be 02 00 00 00       	mov    esi,0x2
c001a5f4:	01 d7                	add    edi,edx
c001a5f6:	31 d2                	xor    edx,edx
c001a5f8:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a5fa:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a5fe:	80 fb 0d             	cmp    bl,0xd
c001a601:	0f 94 c3             	sete   bl
c001a604:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a609:	0f 94 c1             	sete   cl
c001a60c:	08 cb                	or     bl,cl
c001a60e:	75 3a                	jne    c001a64a <Reg::readInt(char*, char*, int*)+0xcf>
c001a610:	0f af d6             	imul   edx,esi
c001a613:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a618:	83 fe 10             	cmp    esi,0x10
c001a61b:	75 26                	jne    c001a643 <Reg::readInt(char*, char*, int*)+0xc8>
c001a61d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a621:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a624:	89 e9                	mov    ecx,ebp
c001a626:	80 f9 05             	cmp    cl,0x5
c001a629:	77 06                	ja     c001a631 <Reg::readInt(char*, char*, int*)+0xb6>
c001a62b:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a62f:	eb 16                	jmp    c001a647 <Reg::readInt(char*, char*, int*)+0xcc>
c001a631:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a635:	83 e9 61             	sub    ecx,0x61
c001a638:	80 f9 05             	cmp    cl,0x5
c001a63b:	77 06                	ja     c001a643 <Reg::readInt(char*, char*, int*)+0xc8>
c001a63d:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a641:	eb 04                	jmp    c001a647 <Reg::readInt(char*, char*, int*)+0xcc>
c001a643:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a647:	47                   	inc    edi
c001a648:	eb ae                	jmp    c001a5f8 <Reg::readInt(char*, char*, int*)+0x7d>
c001a64a:	84 c0                	test   al,al
c001a64c:	74 02                	je     c001a650 <Reg::readInt(char*, char*, int*)+0xd5>
c001a64e:	f7 da                	neg    edx
c001a650:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a657:	89 10                	mov    DWORD PTR [eax],edx
c001a659:	88 d8                	mov    al,bl
c001a65b:	81 c4 ec 00 00 00    	add    esp,0xec
c001a661:	5b                   	pop    ebx
c001a662:	5e                   	pop    esi
c001a663:	5f                   	pop    edi
c001a664:	5d                   	pop    ebp
c001a665:	c3                   	ret    

c001a666 <Reg::readString(char*, char*, char*, int)>:
c001a666:	57                   	push   edi
c001a667:	56                   	push   esi
c001a668:	53                   	push   ebx
c001a669:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a66f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a676:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a67a:	57                   	push   edi
c001a67b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a682:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a689:	e8 b6 fe ff ff       	call   c001a544 <Reg::getLine(char*, char*, char*)>
c001a68e:	83 c4 10             	add    esp,0x10
c001a691:	89 c6                	mov    esi,eax
c001a693:	84 c0                	test   al,al
c001a695:	74 44                	je     c001a6db <Reg::readString(char*, char*, char*, int)+0x75>
c001a697:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a69e:	31 c0                	xor    eax,eax
c001a6a0:	4a                   	dec    edx
c001a6a1:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a6a4:	84 c9                	test   cl,cl
c001a6a6:	74 0f                	je     c001a6b7 <Reg::readString(char*, char*, char*, int)+0x51>
c001a6a8:	39 c2                	cmp    edx,eax
c001a6aa:	7e 0b                	jle    c001a6b7 <Reg::readString(char*, char*, char*, int)+0x51>
c001a6ac:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a6af:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a6b4:	40                   	inc    eax
c001a6b5:	eb ea                	jmp    c001a6a1 <Reg::readString(char*, char*, char*, int)+0x3b>
c001a6b7:	83 ec 0c             	sub    esp,0xc
c001a6ba:	53                   	push   ebx
c001a6bb:	e8 21 60 fe ff       	call   c00006e1 <strlen>
c001a6c0:	83 c4 10             	add    esp,0x10
c001a6c3:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a6c8:	75 11                	jne    c001a6db <Reg::readString(char*, char*, char*, int)+0x75>
c001a6ca:	83 ec 0c             	sub    esp,0xc
c001a6cd:	53                   	push   ebx
c001a6ce:	e8 0e 60 fe ff       	call   c00006e1 <strlen>
c001a6d3:	83 c4 10             	add    esp,0x10
c001a6d6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a6db:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a6e1:	89 f0                	mov    eax,esi
c001a6e3:	5b                   	pop    ebx
c001a6e4:	5e                   	pop    esi
c001a6e5:	5f                   	pop    edi
c001a6e6:	c3                   	ret    

c001a6e7 <Reg::readBool(char*, char*, bool*)>:
c001a6e7:	83 ec 20             	sub    esp,0x20
c001a6ea:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a6ee:	50                   	push   eax
c001a6ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6f7:	e8 7f fe ff ff       	call   c001a57b <Reg::readInt(char*, char*, int*)>
c001a6fc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a701:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a705:	0f 95 02             	setne  BYTE PTR [edx]
c001a708:	83 c4 2c             	add    esp,0x2c
c001a70b:	c3                   	ret    

c001a70c <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a70c:	53                   	push   ebx
c001a70d:	83 ec 1c             	sub    esp,0x1c
c001a710:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a714:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a718:	50                   	push   eax
c001a719:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a71d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a721:	e8 c1 ff ff ff       	call   c001a6e7 <Reg::readBool(char*, char*, bool*)>
c001a726:	83 c4 10             	add    esp,0x10
c001a729:	84 c0                	test   al,al
c001a72b:	74 04                	je     c001a731 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a72d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a731:	88 d8                	mov    al,bl
c001a733:	83 c4 18             	add    esp,0x18
c001a736:	5b                   	pop    ebx
c001a737:	c3                   	ret    

c001a738 <Reg::readIntWithDefault(char*, char*, int)>:
c001a738:	53                   	push   ebx
c001a739:	83 ec 1c             	sub    esp,0x1c
c001a73c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a740:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a744:	50                   	push   eax
c001a745:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a749:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a74d:	e8 29 fe ff ff       	call   c001a57b <Reg::readInt(char*, char*, int*)>
c001a752:	83 c4 10             	add    esp,0x10
c001a755:	84 c0                	test   al,al
c001a757:	74 04                	je     c001a75d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a759:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a75d:	89 d8                	mov    eax,ebx
c001a75f:	83 c4 18             	add    esp,0x18
c001a762:	5b                   	pop    ebx
c001a763:	c3                   	ret    

c001a764 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a764:	57                   	push   edi
c001a765:	56                   	push   esi
c001a766:	53                   	push   ebx
c001a767:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a76b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a76f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a773:	56                   	push   esi
c001a774:	53                   	push   ebx
c001a775:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a779:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a77d:	e8 e4 fe ff ff       	call   c001a666 <Reg::readString(char*, char*, char*, int)>
c001a782:	83 c4 10             	add    esp,0x10
c001a785:	84 c0                	test   al,al
c001a787:	75 1b                	jne    c001a7a4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a789:	50                   	push   eax
c001a78a:	56                   	push   esi
c001a78b:	4e                   	dec    esi
c001a78c:	6a 00                	push   0x0
c001a78e:	53                   	push   ebx
c001a78f:	e8 30 5f fe ff       	call   c00006c4 <memset>
c001a794:	83 c4 0c             	add    esp,0xc
c001a797:	56                   	push   esi
c001a798:	57                   	push   edi
c001a799:	53                   	push   ebx
c001a79a:	89 fb                	mov    ebx,edi
c001a79c:	e8 ff 5e fe ff       	call   c00006a0 <memcpy>
c001a7a1:	83 c4 10             	add    esp,0x10
c001a7a4:	89 d8                	mov    eax,ebx
c001a7a6:	5b                   	pop    ebx
c001a7a7:	5e                   	pop    esi
c001a7a8:	5f                   	pop    edi
c001a7a9:	c3                   	ret    

c001a7aa <Sys::exit(regs*)>:
c001a7aa:	83 ec 18             	sub    esp,0x18
c001a7ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a7b1:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a7b4:	e8 ee 33 00 00       	call   c001dba7 <terminateTask(int)>
c001a7b9:	83 c8 ff             	or     eax,0xffffffff
c001a7bc:	83 c4 1c             	add    esp,0x1c
c001a7bf:	89 c2                	mov    edx,eax
c001a7c1:	c3                   	ret    

c001a7c2 <Sys::getCwd(regs*)>:
c001a7c2:	83 ec 10             	sub    esp,0x10
c001a7c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7c9:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a7cc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a7cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a7d4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a7d7:	e8 54 84 ff ff       	call   c0012c30 <Fs::getcwd(Process*, char*, int)>
c001a7dc:	83 c4 1c             	add    esp,0x1c
c001a7df:	99                   	cdq    
c001a7e0:	c3                   	ret    

c001a7e1 <Sys::getPID(regs*)>:
c001a7e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a7e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a7e9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7eb:	99                   	cdq    
c001a7ec:	c3                   	ret    

c001a7ed <Sys::loadDLL(regs*)>:
c001a7ed:	56                   	push   esi
c001a7ee:	53                   	push   ebx
c001a7ef:	31 d2                	xor    edx,edx
c001a7f1:	51                   	push   ecx
c001a7f2:	b8 01 00 00 00       	mov    eax,0x1
c001a7f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a7fb:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a7ff:	0f 84 8c 00 00 00    	je     c001a891 <Sys::loadDLL(regs*)+0xa4>
c001a805:	83 ec 0c             	sub    esp,0xc
c001a808:	68 14 01 00 00       	push   0x114
c001a80d:	e8 12 4e ff ff       	call   c000f624 <malloc>
c001a812:	83 c4 0c             	add    esp,0xc
c001a815:	89 c3                	mov    ebx,eax
c001a817:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a81c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a81f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a822:	53                   	push   ebx
c001a823:	e8 06 86 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001a828:	83 c4 10             	add    esp,0x10
c001a82b:	31 d2                	xor    edx,edx
c001a82d:	b8 02 00 00 00       	mov    eax,0x2
c001a832:	85 db                	test   ebx,ebx
c001a834:	74 5b                	je     c001a891 <Sys::loadDLL(regs*)+0xa4>
c001a836:	83 ec 0c             	sub    esp,0xc
c001a839:	53                   	push   ebx
c001a83a:	e8 c1 88 ff ff       	call   c0013100 <File::exists()>
c001a83f:	83 c4 10             	add    esp,0x10
c001a842:	84 c0                	test   al,al
c001a844:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a846:	75 11                	jne    c001a859 <Sys::loadDLL(regs*)+0x6c>
c001a848:	83 ec 0c             	sub    esp,0xc
c001a84b:	53                   	push   ebx
c001a84c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a84f:	83 c4 10             	add    esp,0x10
c001a852:	b8 03 00 00 00       	mov    eax,0x3
c001a857:	eb 36                	jmp    c001a88f <Sys::loadDLL(regs*)+0xa2>
c001a859:	83 ec 0c             	sub    esp,0xc
c001a85c:	53                   	push   ebx
c001a85d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a860:	58                   	pop    eax
c001a861:	5a                   	pop    edx
c001a862:	6a 00                	push   0x0
c001a864:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a867:	e8 85 22 00 00       	call   c001caf1 <Thr::loadDLL(char const*, bool)>
c001a86c:	83 c4 10             	add    esp,0x10
c001a86f:	89 c1                	mov    ecx,eax
c001a871:	31 d2                	xor    edx,edx
c001a873:	b8 04 00 00 00       	mov    eax,0x4
c001a878:	85 c9                	test   ecx,ecx
c001a87a:	74 15                	je     c001a891 <Sys::loadDLL(regs*)+0xa4>
c001a87c:	53                   	push   ebx
c001a87d:	53                   	push   ebx
c001a87e:	ff 35 08 cf 02 c0    	push   DWORD PTR ds:0xc002cf08
c001a884:	51                   	push   ecx
c001a885:	e8 76 24 00 00       	call   c001cd00 <Thr::executeDLL(unsigned long, void*)>
c001a88a:	83 c4 10             	add    esp,0x10
c001a88d:	31 c0                	xor    eax,eax
c001a88f:	31 d2                	xor    edx,edx
c001a891:	59                   	pop    ecx
c001a892:	5b                   	pop    ebx
c001a893:	5e                   	pop    esi
c001a894:	c3                   	ret    

c001a895 <Sys::read(regs*)>:
c001a895:	57                   	push   edi
c001a896:	56                   	push   esi
c001a897:	53                   	push   ebx
c001a898:	83 ec 10             	sub    esp,0x10
c001a89b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a89f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a8a2:	83 f8 02             	cmp    eax,0x2
c001a8a5:	77 10                	ja     c001a8b7 <Sys::read(regs*)+0x22>
c001a8a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a8ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a8af:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a8b5:	eb 0e                	jmp    c001a8c5 <Sys::read(regs*)+0x30>
c001a8b7:	83 ec 0c             	sub    esp,0xc
c001a8ba:	50                   	push   eax
c001a8bb:	e8 cf 6e ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001a8c0:	83 c4 10             	add    esp,0x10
c001a8c3:	89 c1                	mov    ecx,eax
c001a8c5:	83 c8 ff             	or     eax,0xffffffff
c001a8c8:	85 c9                	test   ecx,ecx
c001a8ca:	89 c2                	mov    edx,eax
c001a8cc:	74 28                	je     c001a8f6 <Sys::read(regs*)+0x61>
c001a8ce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a8d6:	31 ff                	xor    edi,edi
c001a8d8:	83 ec 0c             	sub    esp,0xc
c001a8db:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a8dd:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a8e1:	52                   	push   edx
c001a8e2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a8e5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a8e8:	57                   	push   edi
c001a8e9:	56                   	push   esi
c001a8ea:	51                   	push   ecx
c001a8eb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a8ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a8f2:	83 c4 20             	add    esp,0x20
c001a8f5:	99                   	cdq    
c001a8f6:	83 c4 10             	add    esp,0x10
c001a8f9:	5b                   	pop    ebx
c001a8fa:	5e                   	pop    esi
c001a8fb:	5f                   	pop    edi
c001a8fc:	c3                   	ret    

c001a8fd <Sys::sbrk(regs*)>:
c001a8fd:	56                   	push   esi
c001a8fe:	53                   	push   ebx
c001a8ff:	50                   	push   eax
c001a900:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a905:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a909:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a90c:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a90f:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a915:	85 db                	test   ebx,ebx
c001a917:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a91a:	74 02                	je     c001a91e <Sys::sbrk(regs*)+0x21>
c001a91c:	79 06                	jns    c001a924 <Sys::sbrk(regs*)+0x27>
c001a91e:	89 f0                	mov    eax,esi
c001a920:	31 d2                	xor    edx,edx
c001a922:	eb 2a                	jmp    c001a94e <Sys::sbrk(regs*)+0x51>
c001a924:	83 c8 ff             	or     eax,0xffffffff
c001a927:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a92d:	89 c2                	mov    edx,eax
c001a92f:	77 1d                	ja     c001a94e <Sys::sbrk(regs*)+0x51>
c001a931:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a937:	50                   	push   eax
c001a938:	c1 ea 0c             	shr    edx,0xc
c001a93b:	68 07 04 00 00       	push   0x407
c001a940:	52                   	push   edx
c001a941:	51                   	push   ecx
c001a942:	e8 69 77 ff ff       	call   c00120b0 <VAS::allocatePages(int, int)>
c001a947:	89 f0                	mov    eax,esi
c001a949:	31 d2                	xor    edx,edx
c001a94b:	83 c4 10             	add    esp,0x10
c001a94e:	59                   	pop    ecx
c001a94f:	5b                   	pop    ebx
c001a950:	5e                   	pop    esi
c001a951:	c3                   	ret    

c001a952 <Sys::setCwd(regs*)>:
c001a952:	83 ec 14             	sub    esp,0x14
c001a955:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a959:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a95c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a961:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a964:	e8 36 88 ff ff       	call   c001319f <Fs::setcwd(Process*, char*)>
c001a969:	83 c4 1c             	add    esp,0x1c
c001a96c:	99                   	cdq    
c001a96d:	c3                   	ret    

c001a96e <Sys::setTime(regs*)>:
c001a96e:	55                   	push   ebp
c001a96f:	31 d2                	xor    edx,edx
c001a971:	57                   	push   edi
c001a972:	bf 18 00 00 00       	mov    edi,0x18
c001a977:	56                   	push   esi
c001a978:	53                   	push   ebx
c001a979:	bb 3c 00 00 00       	mov    ebx,0x3c
c001a97e:	83 ec 30             	sub    esp,0x30
c001a981:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001a985:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001a988:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001a98b:	f7 f3                	div    ebx
c001a98d:	89 d6                	mov    esi,edx
c001a98f:	31 d2                	xor    edx,edx
c001a991:	f7 f3                	div    ebx
c001a993:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001a996:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a99a:	bb 10 0e 00 00       	mov    ebx,0xe10
c001a99f:	31 d2                	xor    edx,edx
c001a9a1:	f7 f3                	div    ebx
c001a9a3:	31 d2                	xor    edx,edx
c001a9a5:	bb 0c 00 00 00       	mov    ebx,0xc
c001a9aa:	f7 f7                	div    edi
c001a9ac:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001a9af:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a9b3:	0f b7 cd             	movzx  ecx,bp
c001a9b6:	56                   	push   esi
c001a9b7:	89 c7                	mov    edi,eax
c001a9b9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001a9bd:	c1 e6 10             	shl    esi,0x10
c001a9c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a9c4:	83 e7 1f             	and    edi,0x1f
c001a9c7:	51                   	push   ecx
c001a9c8:	47                   	inc    edi
c001a9c9:	c1 e8 05             	shr    eax,0x5
c001a9cc:	31 d2                	xor    edx,edx
c001a9ce:	f7 f3                	div    ebx
c001a9d0:	31 db                	xor    ebx,ebx
c001a9d2:	52                   	push   edx
c001a9d3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001a9d7:	57                   	push   edi
c001a9d8:	68 91 a9 02 c0       	push   0xc002a991
c001a9dd:	e8 f3 7e ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001a9e2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a9e6:	89 f8                	mov    eax,edi
c001a9e8:	31 c9                	xor    ecx,ecx
c001a9ea:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001a9ee:	88 c1                	mov    cl,al
c001a9f0:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001a9f6:	88 d5                	mov    ch,dl
c001a9f8:	c1 e0 10             	shl    eax,0x10
c001a9fb:	0f b7 d1             	movzx  edx,cx
c001a9fe:	09 c2                	or     edx,eax
c001aa00:	89 d8                	mov    eax,ebx
c001aa02:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001aa07:	09 f0                	or     eax,esi
c001aa09:	89 c3                	mov    ebx,eax
c001aa0b:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001aa0f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001aa13:	83 c4 18             	add    esp,0x18
c001aa16:	53                   	push   ebx
c001aa17:	52                   	push   edx
c001aa18:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001aa1c:	8d 74 24 28          	lea    esi,[esp+0x28]
c001aa20:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001aa24:	e8 90 8e ff ff       	call   c00138b9 <datetimeToSeconds(datetime_t)>
c001aa29:	83 c4 0c             	add    esp,0xc
c001aa2c:	52                   	push   edx
c001aa2d:	50                   	push   eax
c001aa2e:	56                   	push   esi
c001aa2f:	e8 0c 90 ff ff       	call   c0013a40 <secondsToDatetime(unsigned long long)>
c001aa34:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aa38:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aa3c:	51                   	push   ecx
c001aa3d:	89 d6                	mov    esi,edx
c001aa3f:	51                   	push   ecx
c001aa40:	c1 ee 10             	shr    esi,0x10
c001aa43:	89 f3                	mov    ebx,esi
c001aa45:	0f b6 f3             	movzx  esi,bl
c001aa48:	56                   	push   esi
c001aa49:	0f b6 f6             	movzx  esi,dh
c001aa4c:	0f b6 d2             	movzx  edx,dl
c001aa4f:	56                   	push   esi
c001aa50:	52                   	push   edx
c001aa51:	89 c2                	mov    edx,eax
c001aa53:	c1 ea 10             	shr    edx,0x10
c001aa56:	52                   	push   edx
c001aa57:	0f b6 d4             	movzx  edx,ah
c001aa5a:	0f b6 c0             	movzx  eax,al
c001aa5d:	52                   	push   edx
c001aa5e:	50                   	push   eax
c001aa5f:	68 ad a9 02 c0       	push   0xc002a9ad
c001aa64:	e8 6c 7e ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001aa69:	83 c4 2c             	add    esp,0x2c
c001aa6c:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c001aa71:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001aa75:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001aa79:	53                   	push   ebx
c001aa7a:	51                   	push   ecx
c001aa7b:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001aa81:	e8 5a 8f ff ff       	call   c00139e0 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001aa86:	83 f0 01             	xor    eax,0x1
c001aa89:	31 d2                	xor    edx,edx
c001aa8b:	0f b6 c0             	movzx  eax,al
c001aa8e:	83 c4 3c             	add    esp,0x3c
c001aa91:	5b                   	pop    ebx
c001aa92:	5e                   	pop    esi
c001aa93:	5f                   	pop    edi
c001aa94:	5d                   	pop    ebp
c001aa95:	c3                   	ret    

c001aa96 <Sys::timezone(regs*)>:
c001aa96:	53                   	push   ebx
c001aa97:	83 ec 08             	sub    esp,0x8
c001aa9a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa9e:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001aaa2:	75 17                	jne    c001aabb <Sys::timezone(regs*)+0x25>
c001aaa4:	83 ec 0c             	sub    esp,0xc
c001aaa7:	68 c9 a9 02 c0       	push   0xc002a9c9
c001aaac:	e8 24 7e ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001aab1:	83 c8 ff             	or     eax,0xffffffff
c001aab4:	83 c4 10             	add    esp,0x10
c001aab7:	89 c2                	mov    edx,eax
c001aab9:	eb 20                	jmp    c001aadb <Sys::timezone(regs*)+0x45>
c001aabb:	83 ec 0c             	sub    esp,0xc
c001aabe:	68 01 aa 02 c0       	push   0xc002aa01
c001aac3:	e8 0d 7e ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001aac8:	58                   	pop    eax
c001aac9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001aacc:	e8 71 8c ff ff       	call   c0013742 <User::loadClockSettings(int)>
c001aad1:	83 c4 10             	add    esp,0x10
c001aad4:	b8 01 00 00 00       	mov    eax,0x1
c001aad9:	31 d2                	xor    edx,edx
c001aadb:	83 c4 08             	add    esp,0x8
c001aade:	5b                   	pop    ebx
c001aadf:	c3                   	ret    

c001aae0 <Sys::write(regs*)>:
c001aae0:	57                   	push   edi
c001aae1:	56                   	push   esi
c001aae2:	53                   	push   ebx
c001aae3:	83 ec 10             	sub    esp,0x10
c001aae6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aaea:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aaed:	83 f8 02             	cmp    eax,0x2
c001aaf0:	77 10                	ja     c001ab02 <Sys::write(regs*)+0x22>
c001aaf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aaf7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aafa:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ab00:	eb 0e                	jmp    c001ab10 <Sys::write(regs*)+0x30>
c001ab02:	83 ec 0c             	sub    esp,0xc
c001ab05:	50                   	push   eax
c001ab06:	e8 84 6c ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001ab0b:	83 c4 10             	add    esp,0x10
c001ab0e:	89 c1                	mov    ecx,eax
c001ab10:	83 c8 ff             	or     eax,0xffffffff
c001ab13:	85 c9                	test   ecx,ecx
c001ab15:	89 c2                	mov    edx,eax
c001ab17:	74 28                	je     c001ab41 <Sys::write(regs*)+0x61>
c001ab19:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab21:	31 ff                	xor    edi,edi
c001ab23:	83 ec 0c             	sub    esp,0xc
c001ab26:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab28:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ab2c:	52                   	push   edx
c001ab2d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ab30:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ab33:	57                   	push   edi
c001ab34:	56                   	push   esi
c001ab35:	51                   	push   ecx
c001ab36:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001ab39:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ab3d:	83 c4 20             	add    esp,0x20
c001ab40:	99                   	cdq    
c001ab41:	83 c4 10             	add    esp,0x10
c001ab44:	5b                   	pop    ebx
c001ab45:	5e                   	pop    esi
c001ab46:	5f                   	pop    edi
c001ab47:	c3                   	ret    

c001ab48 <Sys::yield(regs*)>:
c001ab48:	57                   	push   edi
c001ab49:	56                   	push   esi
c001ab4a:	53                   	push   ebx
c001ab4b:	e8 14 26 00 00       	call   c001d164 <lockScheduler()>
c001ab50:	e8 4b 29 00 00       	call   c001d4a0 <schedule()>
c001ab55:	e8 0c 26 00 00       	call   c001d166 <unlockScheduler()>
c001ab5a:	8b 35 90 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d590
c001ab60:	8b 3d 94 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d594
c001ab66:	89 f0                	mov    eax,esi
c001ab68:	89 fb                	mov    ebx,edi
c001ab6a:	89 f1                	mov    ecx,esi
c001ab6c:	c1 e0 07             	shl    eax,0x7
c001ab6f:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001ab73:	25 80 30 0f 00       	and    eax,0xf3080
c001ab78:	c1 eb 17             	shr    ebx,0x17
c001ab7b:	31 c8                	xor    eax,ecx
c001ab7d:	89 da                	mov    edx,ebx
c001ab7f:	5b                   	pop    ebx
c001ab80:	5e                   	pop    esi
c001ab81:	5f                   	pop    edi
c001ab82:	c3                   	ret    

c001ab83 <sysCallSeekDir(regs*)>:
c001ab83:	31 c0                	xor    eax,eax
c001ab85:	31 d2                	xor    edx,edx
c001ab87:	c3                   	ret    

c001ab88 <sysCallTellDir(regs*)>:
c001ab88:	31 c0                	xor    eax,eax
c001ab8a:	31 d2                	xor    edx,edx
c001ab8c:	c3                   	ret    

c001ab8d <sysCallVerify(regs*)>:
c001ab8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab91:	31 d2                	xor    edx,edx
c001ab93:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ab96:	c3                   	ret    

c001ab97 <sysCallGetArgc(regs*)>:
c001ab97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab9c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab9f:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001aba5:	99                   	cdq    
c001aba6:	c3                   	ret    

c001aba7 <sysFormatDisk(regs*)>:
c001aba7:	56                   	push   esi
c001aba8:	53                   	push   ebx
c001aba9:	53                   	push   ebx
c001abaa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001abae:	8b 1d 88 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d088
c001abb4:	eb 25                	jmp    c001abdb <sysFormatDisk(regs*)+0x34>
c001abb6:	83 ec 0c             	sub    esp,0xc
c001abb9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001abbc:	8b 13                	mov    edx,DWORD PTR [ebx]
c001abbe:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001abc1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001abc4:	50                   	push   eax
c001abc5:	ff 34 85 20 d5 02 c0 	push   DWORD PTR [eax*4-0x3ffd2ae0]
c001abcc:	53                   	push   ebx
c001abcd:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001abd0:	83 c4 20             	add    esp,0x20
c001abd3:	83 f8 08             	cmp    eax,0x8
c001abd6:	75 12                	jne    c001abea <sysFormatDisk(regs*)+0x43>
c001abd8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001abdb:	85 db                	test   ebx,ebx
c001abdd:	75 d7                	jne    c001abb6 <sysFormatDisk(regs*)+0xf>
c001abdf:	59                   	pop    ecx
c001abe0:	b8 03 00 00 00       	mov    eax,0x3
c001abe5:	31 d2                	xor    edx,edx
c001abe7:	5b                   	pop    ebx
c001abe8:	5e                   	pop    esi
c001abe9:	c3                   	ret    
c001abea:	85 c0                	test   eax,eax
c001abec:	74 1b                	je     c001ac09 <sysFormatDisk(regs*)+0x62>
c001abee:	83 f8 09             	cmp    eax,0x9
c001abf1:	74 0b                	je     c001abfe <sysFormatDisk(regs*)+0x57>
c001abf3:	59                   	pop    ecx
c001abf4:	b8 02 00 00 00       	mov    eax,0x2
c001abf9:	31 d2                	xor    edx,edx
c001abfb:	5b                   	pop    ebx
c001abfc:	5e                   	pop    esi
c001abfd:	c3                   	ret    
c001abfe:	59                   	pop    ecx
c001abff:	b8 01 00 00 00       	mov    eax,0x1
c001ac04:	31 d2                	xor    edx,edx
c001ac06:	5b                   	pop    ebx
c001ac07:	5e                   	pop    esi
c001ac08:	c3                   	ret    
c001ac09:	59                   	pop    ecx
c001ac0a:	31 c0                	xor    eax,eax
c001ac0c:	31 d2                	xor    edx,edx
c001ac0e:	5b                   	pop    ebx
c001ac0f:	5e                   	pop    esi
c001ac10:	c3                   	ret    

c001ac11 <sysSetDiskVolumeLabel(regs*)>:
c001ac11:	56                   	push   esi
c001ac12:	53                   	push   ebx
c001ac13:	53                   	push   ebx
c001ac14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac18:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001ac1b:	83 f8 19             	cmp    eax,0x19
c001ac1e:	77 29                	ja     c001ac49 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ac20:	8b 0c 85 20 d5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2ae0]
c001ac27:	85 c9                	test   ecx,ecx
c001ac29:	74 1e                	je     c001ac49 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ac2b:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001ac2e:	85 d2                	test   edx,edx
c001ac30:	74 17                	je     c001ac49 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ac32:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001ac38:	8b 33                	mov    esi,DWORD PTR [ebx]
c001ac3a:	52                   	push   edx
c001ac3b:	50                   	push   eax
c001ac3c:	51                   	push   ecx
c001ac3d:	53                   	push   ebx
c001ac3e:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001ac41:	83 c4 10             	add    esp,0x10
c001ac44:	99                   	cdq    
c001ac45:	59                   	pop    ecx
c001ac46:	5b                   	pop    ebx
c001ac47:	5e                   	pop    esi
c001ac48:	c3                   	ret    
c001ac49:	59                   	pop    ecx
c001ac4a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ac4f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac54:	5b                   	pop    ebx
c001ac55:	5e                   	pop    esi
c001ac56:	c3                   	ret    

c001ac57 <sysGetDiskVolumeLabel(regs*)>:
c001ac57:	57                   	push   edi
c001ac58:	56                   	push   esi
c001ac59:	53                   	push   ebx
c001ac5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac5e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ac61:	83 fa 19             	cmp    edx,0x19
c001ac64:	77 34                	ja     c001ac9a <sysGetDiskVolumeLabel(regs*)+0x43>
c001ac66:	8b 0c 95 20 d5 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2ae0]
c001ac6d:	85 c9                	test   ecx,ecx
c001ac6f:	74 29                	je     c001ac9a <sysGetDiskVolumeLabel(regs*)+0x43>
c001ac71:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001ac74:	85 db                	test   ebx,ebx
c001ac76:	74 22                	je     c001ac9a <sysGetDiskVolumeLabel(regs*)+0x43>
c001ac78:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001ac7b:	85 c0                	test   eax,eax
c001ac7d:	74 1b                	je     c001ac9a <sysGetDiskVolumeLabel(regs*)+0x43>
c001ac7f:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001ac85:	83 ec 0c             	sub    esp,0xc
c001ac88:	8b 3e                	mov    edi,DWORD PTR [esi]
c001ac8a:	50                   	push   eax
c001ac8b:	53                   	push   ebx
c001ac8c:	52                   	push   edx
c001ac8d:	51                   	push   ecx
c001ac8e:	56                   	push   esi
c001ac8f:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001ac92:	83 c4 20             	add    esp,0x20
c001ac95:	99                   	cdq    
c001ac96:	5b                   	pop    ebx
c001ac97:	5e                   	pop    esi
c001ac98:	5f                   	pop    edi
c001ac99:	c3                   	ret    
c001ac9a:	5b                   	pop    ebx
c001ac9b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001aca0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aca5:	5e                   	pop    esi
c001aca6:	5f                   	pop    edi
c001aca7:	c3                   	ret    

c001aca8 <sysShutdown(regs*)>:
c001aca8:	83 ec 0c             	sub    esp,0xc
c001acab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acaf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001acb2:	85 c0                	test   eax,eax
c001acb4:	74 18                	je     c001acce <sysShutdown(regs*)+0x26>
c001acb6:	83 f8 01             	cmp    eax,0x1
c001acb9:	74 38                	je     c001acf3 <sysShutdown(regs*)+0x4b>
c001acbb:	83 f8 02             	cmp    eax,0x2
c001acbe:	74 24                	je     c001ace4 <sysShutdown(regs*)+0x3c>
c001acc0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001acc5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001acca:	83 c4 0c             	add    esp,0xc
c001accd:	c3                   	ret    
c001acce:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c001acd3:	8b 10                	mov    edx,DWORD PTR [eax]
c001acd5:	6a 00                	push   0x0
c001acd7:	6a 00                	push   0x0
c001acd9:	6a 00                	push   0x0
c001acdb:	50                   	push   eax
c001acdc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001acdf:	83 c4 10             	add    esp,0x10
c001ace2:	eb dc                	jmp    c001acc0 <sysShutdown(regs*)+0x18>
c001ace4:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c001ace9:	8b 10                	mov    edx,DWORD PTR [eax]
c001aceb:	6a 00                	push   0x0
c001aced:	6a 00                	push   0x0
c001acef:	6a 01                	push   0x1
c001acf1:	eb e8                	jmp    c001acdb <sysShutdown(regs*)+0x33>
c001acf3:	a1 a0 d5 02 c0       	mov    eax,ds:0xc002d5a0
c001acf8:	85 c0                	test   eax,eax
c001acfa:	74 02                	je     c001acfe <sysShutdown(regs*)+0x56>
c001acfc:	ff d0                	call   eax
c001acfe:	31 c0                	xor    eax,eax
c001ad00:	31 d2                	xor    edx,edx
c001ad02:	83 c4 0c             	add    esp,0xc
c001ad05:	c3                   	ret    

c001ad06 <sysCallRealpath(regs*)>:
c001ad06:	83 ec 0c             	sub    esp,0xc
c001ad09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad0d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001ad10:	85 d2                	test   edx,edx
c001ad12:	74 07                	je     c001ad1b <sysCallRealpath(regs*)+0x15>
c001ad14:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001ad17:	85 c0                	test   eax,eax
c001ad19:	75 0b                	jne    c001ad26 <sysCallRealpath(regs*)+0x20>
c001ad1b:	b8 01 00 00 00       	mov    eax,0x1
c001ad20:	31 d2                	xor    edx,edx
c001ad22:	83 c4 0c             	add    esp,0xc
c001ad25:	c3                   	ret    
c001ad26:	51                   	push   ecx
c001ad27:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ad2d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001ad30:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001ad36:	51                   	push   ecx
c001ad37:	52                   	push   edx
c001ad38:	50                   	push   eax
c001ad39:	e8 46 7f ff ff       	call   c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>
c001ad3e:	83 c4 10             	add    esp,0x10
c001ad41:	31 c0                	xor    eax,eax
c001ad43:	31 d2                	xor    edx,edx
c001ad45:	83 c4 0c             	add    esp,0xc
c001ad48:	c3                   	ret    

c001ad49 <sysCallReadDir(regs*)>:
c001ad49:	53                   	push   ebx
c001ad4a:	83 ec 18             	sub    esp,0x18
c001ad4d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad51:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ad54:	83 f8 02             	cmp    eax,0x2
c001ad57:	76 53                	jbe    c001adac <sysCallReadDir(regs*)+0x63>
c001ad59:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001ad5c:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001ad62:	77 4f                	ja     c001adb3 <sysCallReadDir(regs*)+0x6a>
c001ad64:	83 ec 0c             	sub    esp,0xc
c001ad67:	50                   	push   eax
c001ad68:	e8 22 6a ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001ad6d:	83 c4 10             	add    esp,0x10
c001ad70:	85 c0                	test   eax,eax
c001ad72:	74 50                	je     c001adc4 <sysCallReadDir(regs*)+0x7b>
c001ad74:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad7c:	83 ec 0c             	sub    esp,0xc
c001ad7f:	8b 10                	mov    edx,DWORD PTR [eax]
c001ad81:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001ad85:	51                   	push   ecx
c001ad86:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ad89:	6a 00                	push   0x0
c001ad8b:	68 10 01 00 00       	push   0x110
c001ad90:	50                   	push   eax
c001ad91:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ad94:	83 c4 20             	add    esp,0x20
c001ad97:	85 c0                	test   eax,eax
c001ad99:	74 38                	je     c001add3 <sysCallReadDir(regs*)+0x8a>
c001ad9b:	83 f8 07             	cmp    eax,0x7
c001ad9e:	74 0c                	je     c001adac <sysCallReadDir(regs*)+0x63>
c001ada0:	b8 02 00 00 00       	mov    eax,0x2
c001ada5:	31 d2                	xor    edx,edx
c001ada7:	83 c4 18             	add    esp,0x18
c001adaa:	5b                   	pop    ebx
c001adab:	c3                   	ret    
c001adac:	b8 01 00 00 00       	mov    eax,0x1
c001adb1:	eb f2                	jmp    c001ada5 <sysCallReadDir(regs*)+0x5c>
c001adb3:	83 ec 08             	sub    esp,0x8
c001adb6:	52                   	push   edx
c001adb7:	68 40 aa 02 c0       	push   0xc002aa40
c001adbc:	e8 14 7b ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001adc1:	83 c4 10             	add    esp,0x10
c001adc4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001adc9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001adce:	83 c4 18             	add    esp,0x18
c001add1:	5b                   	pop    ebx
c001add2:	c3                   	ret    
c001add3:	31 c0                	xor    eax,eax
c001add5:	eb ce                	jmp    c001ada5 <sysCallReadDir(regs*)+0x5c>

c001add7 <sysCallIsATTY(regs*)>:
c001add7:	83 ec 0c             	sub    esp,0xc
c001adda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adde:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ade1:	83 f8 02             	cmp    eax,0x2
c001ade4:	76 07                	jbe    c001aded <sysCallIsATTY(regs*)+0x16>
c001ade6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001adeb:	75 26                	jne    c001ae13 <sysCallIsATTY(regs*)+0x3c>
c001aded:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001adf2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001adf5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001adfb:	85 c0                	test   eax,eax
c001adfd:	74 24                	je     c001ae23 <sysCallIsATTY(regs*)+0x4c>
c001adff:	83 ec 0c             	sub    esp,0xc
c001ae02:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae04:	50                   	push   eax
c001ae05:	ff 12                	call   DWORD PTR [edx]
c001ae07:	31 d2                	xor    edx,edx
c001ae09:	0f b6 c0             	movzx  eax,al
c001ae0c:	83 c4 10             	add    esp,0x10
c001ae0f:	83 c4 0c             	add    esp,0xc
c001ae12:	c3                   	ret    
c001ae13:	83 ec 0c             	sub    esp,0xc
c001ae16:	50                   	push   eax
c001ae17:	e8 73 69 ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001ae1c:	83 c4 10             	add    esp,0x10
c001ae1f:	85 c0                	test   eax,eax
c001ae21:	75 dc                	jne    c001adff <sysCallIsATTY(regs*)+0x28>
c001ae23:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ae28:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ae2d:	83 c4 0c             	add    esp,0xc
c001ae30:	c3                   	ret    

c001ae31 <sysCallSeek(regs*)>:
c001ae31:	53                   	push   ebx
c001ae32:	83 ec 08             	sub    esp,0x8
c001ae35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae39:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae3c:	83 f8 02             	cmp    eax,0x2
c001ae3f:	76 4a                	jbe    c001ae8b <sysCallSeek(regs*)+0x5a>
c001ae41:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ae46:	77 32                	ja     c001ae7a <sysCallSeek(regs*)+0x49>
c001ae48:	83 ec 0c             	sub    esp,0xc
c001ae4b:	50                   	push   eax
c001ae4c:	e8 3e 69 ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001ae51:	83 c4 0c             	add    esp,0xc
c001ae54:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ae57:	31 db                	xor    ebx,ebx
c001ae59:	53                   	push   ebx
c001ae5a:	51                   	push   ecx
c001ae5b:	50                   	push   eax
c001ae5c:	e8 ef 80 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001ae61:	83 c4 10             	add    esp,0x10
c001ae64:	85 c0                	test   eax,eax
c001ae66:	0f 95 c0             	setne  al
c001ae69:	31 d2                	xor    edx,edx
c001ae6b:	0f b6 c0             	movzx  eax,al
c001ae6e:	f7 d8                	neg    eax
c001ae70:	83 d2 00             	adc    edx,0x0
c001ae73:	83 c4 08             	add    esp,0x8
c001ae76:	f7 da                	neg    edx
c001ae78:	5b                   	pop    ebx
c001ae79:	c3                   	ret    
c001ae7a:	83 ec 08             	sub    esp,0x8
c001ae7d:	50                   	push   eax
c001ae7e:	68 af aa 02 c0       	push   0xc002aaaf
c001ae83:	e8 4d 7a ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001ae88:	83 c4 10             	add    esp,0x10
c001ae8b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ae90:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ae95:	83 c4 08             	add    esp,0x8
c001ae98:	5b                   	pop    ebx
c001ae99:	c3                   	ret    

c001ae9a <sysCallTell(regs*)>:
c001ae9a:	53                   	push   ebx
c001ae9b:	83 ec 08             	sub    esp,0x8
c001ae9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aea2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aea5:	83 f8 02             	cmp    eax,0x2
c001aea8:	76 5e                	jbe    c001af08 <sysCallTell(regs*)+0x6e>
c001aeaa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aeaf:	77 2d                	ja     c001aede <sysCallTell(regs*)+0x44>
c001aeb1:	83 ec 0c             	sub    esp,0xc
c001aeb4:	50                   	push   eax
c001aeb5:	e8 d5 68 ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001aeba:	5a                   	pop    edx
c001aebb:	59                   	pop    ecx
c001aebc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aebf:	50                   	push   eax
c001aec0:	e8 e1 80 ff ff       	call   c0012fa6 <File::tell(unsigned long long*)>
c001aec5:	83 c4 10             	add    esp,0x10
c001aec8:	85 c0                	test   eax,eax
c001aeca:	0f 95 c0             	setne  al
c001aecd:	31 d2                	xor    edx,edx
c001aecf:	0f b6 c0             	movzx  eax,al
c001aed2:	f7 d8                	neg    eax
c001aed4:	83 d2 00             	adc    edx,0x0
c001aed7:	83 c4 08             	add    esp,0x8
c001aeda:	f7 da                	neg    edx
c001aedc:	5b                   	pop    ebx
c001aedd:	c3                   	ret    
c001aede:	83 ec 08             	sub    esp,0x8
c001aee1:	50                   	push   eax
c001aee2:	68 c9 aa 02 c0       	push   0xc002aac9
c001aee7:	e8 e9 79 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001aeec:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001aeef:	83 c4 10             	add    esp,0x10
c001aef2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aef8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aeff:	31 d2                	xor    edx,edx
c001af01:	31 c0                	xor    eax,eax
c001af03:	83 c4 08             	add    esp,0x8
c001af06:	5b                   	pop    ebx
c001af07:	c3                   	ret    
c001af08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001af0d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001af12:	83 c4 08             	add    esp,0x8
c001af15:	5b                   	pop    ebx
c001af16:	c3                   	ret    

c001af17 <sysCallSize(regs*)>:
c001af17:	53                   	push   ebx
c001af18:	83 ec 18             	sub    esp,0x18
c001af1b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001af22:	83 f8 02             	cmp    eax,0x2
c001af25:	76 64                	jbe    c001af8b <sysCallSize(regs*)+0x74>
c001af27:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001af2c:	77 33                	ja     c001af61 <sysCallSize(regs*)+0x4a>
c001af2e:	83 ec 0c             	sub    esp,0xc
c001af31:	50                   	push   eax
c001af32:	e8 58 68 ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001af37:	83 c4 0c             	add    esp,0xc
c001af3a:	8d 54 24 13          	lea    edx,[esp+0x13]
c001af3e:	52                   	push   edx
c001af3f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001af42:	50                   	push   eax
c001af43:	e8 f6 81 ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c001af48:	83 c4 10             	add    esp,0x10
c001af4b:	85 c0                	test   eax,eax
c001af4d:	0f 95 c0             	setne  al
c001af50:	31 d2                	xor    edx,edx
c001af52:	0f b6 c0             	movzx  eax,al
c001af55:	f7 d8                	neg    eax
c001af57:	83 d2 00             	adc    edx,0x0
c001af5a:	83 c4 18             	add    esp,0x18
c001af5d:	f7 da                	neg    edx
c001af5f:	5b                   	pop    ebx
c001af60:	c3                   	ret    
c001af61:	83 ec 08             	sub    esp,0x8
c001af64:	50                   	push   eax
c001af65:	68 e3 aa 02 c0       	push   0xc002aae3
c001af6a:	e8 66 79 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001af6f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001af72:	83 c4 10             	add    esp,0x10
c001af75:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001af7b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001af82:	31 d2                	xor    edx,edx
c001af84:	31 c0                	xor    eax,eax
c001af86:	83 c4 18             	add    esp,0x18
c001af89:	5b                   	pop    ebx
c001af8a:	c3                   	ret    
c001af8b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001af90:	ba ff ff ff ff       	mov    edx,0xffffffff
c001af95:	83 c4 18             	add    esp,0x18
c001af98:	5b                   	pop    ebx
c001af99:	c3                   	ret    

c001af9a <sysCallSizeFromFilename(regs*)>:
c001af9a:	57                   	push   edi
c001af9b:	56                   	push   esi
c001af9c:	53                   	push   ebx
c001af9d:	83 ec 20             	sub    esp,0x20
c001afa0:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001afa4:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001afa7:	83 fb 02             	cmp    ebx,0x2
c001afaa:	0f 86 99 00 00 00    	jbe    c001b049 <sysCallSizeFromFilename(regs*)+0xaf>
c001afb0:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001afb6:	77 65                	ja     c001b01d <sysCallSizeFromFilename(regs*)+0x83>
c001afb8:	83 ec 0c             	sub    esp,0xc
c001afbb:	68 14 01 00 00       	push   0x114
c001afc0:	e8 5f 46 ff ff       	call   c000f624 <malloc>
c001afc5:	83 c4 0c             	add    esp,0xc
c001afc8:	89 c6                	mov    esi,eax
c001afca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afcf:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001afd2:	53                   	push   ebx
c001afd3:	56                   	push   esi
c001afd4:	e8 55 7e ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001afd9:	83 c4 0c             	add    esp,0xc
c001afdc:	8d 44 24 23          	lea    eax,[esp+0x23]
c001afe0:	50                   	push   eax
c001afe1:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001afe4:	56                   	push   esi
c001afe5:	e8 54 81 ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c001afea:	83 c4 10             	add    esp,0x10
c001afed:	85 f6                	test   esi,esi
c001afef:	74 14                	je     c001b005 <sysCallSizeFromFilename(regs*)+0x6b>
c001aff1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aff5:	8b 16                	mov    edx,DWORD PTR [esi]
c001aff7:	83 ec 0c             	sub    esp,0xc
c001affa:	56                   	push   esi
c001affb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001affe:	83 c4 10             	add    esp,0x10
c001b001:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b005:	85 c0                	test   eax,eax
c001b007:	0f 95 c0             	setne  al
c001b00a:	31 d2                	xor    edx,edx
c001b00c:	0f b6 c0             	movzx  eax,al
c001b00f:	f7 d8                	neg    eax
c001b011:	83 d2 00             	adc    edx,0x0
c001b014:	83 c4 20             	add    esp,0x20
c001b017:	f7 da                	neg    edx
c001b019:	5b                   	pop    ebx
c001b01a:	5e                   	pop    esi
c001b01b:	5f                   	pop    edi
c001b01c:	c3                   	ret    
c001b01d:	83 ec 08             	sub    esp,0x8
c001b020:	53                   	push   ebx
c001b021:	68 e3 aa 02 c0       	push   0xc002aae3
c001b026:	e8 aa 78 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001b02b:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b02e:	83 c4 10             	add    esp,0x10
c001b031:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b037:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b03e:	31 d2                	xor    edx,edx
c001b040:	83 c4 20             	add    esp,0x20
c001b043:	31 c0                	xor    eax,eax
c001b045:	5b                   	pop    ebx
c001b046:	5e                   	pop    esi
c001b047:	5f                   	pop    edi
c001b048:	c3                   	ret    
c001b049:	83 c4 20             	add    esp,0x20
c001b04c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b051:	5b                   	pop    ebx
c001b052:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b057:	5e                   	pop    esi
c001b058:	5f                   	pop    edi
c001b059:	c3                   	ret    

c001b05a <sysCallClose(regs*)>:
c001b05a:	53                   	push   ebx
c001b05b:	83 ec 08             	sub    esp,0x8
c001b05e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b062:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b065:	83 f8 02             	cmp    eax,0x2
c001b068:	76 50                	jbe    c001b0ba <sysCallClose(regs*)+0x60>
c001b06a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b06f:	74 58                	je     c001b0c9 <sysCallClose(regs*)+0x6f>
c001b071:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b076:	74 60                	je     c001b0d8 <sysCallClose(regs*)+0x7e>
c001b078:	77 2f                	ja     c001b0a9 <sysCallClose(regs*)+0x4f>
c001b07a:	83 ec 0c             	sub    esp,0xc
c001b07d:	50                   	push   eax
c001b07e:	e8 0c 67 ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001b083:	89 c3                	mov    ebx,eax
c001b085:	89 04 24             	mov    DWORD PTR [esp],eax
c001b088:	e8 63 7e ff ff       	call   c0012ef0 <File::close()>
c001b08d:	83 c4 10             	add    esp,0x10
c001b090:	85 db                	test   ebx,ebx
c001b092:	74 0c                	je     c001b0a0 <sysCallClose(regs*)+0x46>
c001b094:	83 ec 0c             	sub    esp,0xc
c001b097:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b099:	53                   	push   ebx
c001b09a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b09d:	83 c4 10             	add    esp,0x10
c001b0a0:	31 c0                	xor    eax,eax
c001b0a2:	31 d2                	xor    edx,edx
c001b0a4:	83 c4 08             	add    esp,0x8
c001b0a7:	5b                   	pop    ebx
c001b0a8:	c3                   	ret    
c001b0a9:	83 ec 08             	sub    esp,0x8
c001b0ac:	50                   	push   eax
c001b0ad:	68 64 aa 02 c0       	push   0xc002aa64
c001b0b2:	e8 1e 78 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001b0b7:	83 c4 10             	add    esp,0x10
c001b0ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b0bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b0c4:	83 c4 08             	add    esp,0x8
c001b0c7:	5b                   	pop    ebx
c001b0c8:	c3                   	ret    
c001b0c9:	83 ec 0c             	sub    esp,0xc
c001b0cc:	68 fe aa 02 c0       	push   0xc002aafe
c001b0d1:	e8 ff 77 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001b0d6:	eb c5                	jmp    c001b09d <sysCallClose(regs*)+0x43>
c001b0d8:	83 ec 0c             	sub    esp,0xc
c001b0db:	68 0c ab 02 c0       	push   0xc002ab0c
c001b0e0:	eb ef                	jmp    c001b0d1 <sysCallClose(regs*)+0x77>

c001b0e2 <sysCallOpenDir(regs*)>:
c001b0e2:	56                   	push   esi
c001b0e3:	53                   	push   ebx
c001b0e4:	53                   	push   ebx
c001b0e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b0e9:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b0ec:	85 f6                	test   esi,esi
c001b0ee:	74 59                	je     c001b149 <sysCallOpenDir(regs*)+0x67>
c001b0f0:	83 ec 0c             	sub    esp,0xc
c001b0f3:	68 14 01 00 00       	push   0x114
c001b0f8:	e8 27 45 ff ff       	call   c000f624 <malloc>
c001b0fd:	83 c4 0c             	add    esp,0xc
c001b100:	89 c6                	mov    esi,eax
c001b102:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b107:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b10a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b10d:	56                   	push   esi
c001b10e:	e8 c7 81 ff ff       	call   c00132da <Directory::Directory(char const*, Process*)>
c001b113:	83 c4 10             	add    esp,0x10
c001b116:	85 f6                	test   esi,esi
c001b118:	74 2f                	je     c001b149 <sysCallOpenDir(regs*)+0x67>
c001b11a:	83 ec 0c             	sub    esp,0xc
c001b11d:	56                   	push   esi
c001b11e:	e8 1b 82 ff ff       	call   c001333e <Directory::open()>
c001b123:	83 c4 10             	add    esp,0x10
c001b126:	85 c0                	test   eax,eax
c001b128:	75 1f                	jne    c001b149 <sysCallOpenDir(regs*)+0x67>
c001b12a:	83 ec 0c             	sub    esp,0xc
c001b12d:	56                   	push   esi
c001b12e:	e8 67 63 ff ff       	call   c001149a <UnixFile::getFileDescriptor()>
c001b133:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b136:	83 c4 10             	add    esp,0x10
c001b139:	89 02                	mov    DWORD PTR [edx],eax
c001b13b:	c1 f8 1f             	sar    eax,0x1f
c001b13e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b141:	31 c0                	xor    eax,eax
c001b143:	59                   	pop    ecx
c001b144:	31 d2                	xor    edx,edx
c001b146:	5b                   	pop    ebx
c001b147:	5e                   	pop    esi
c001b148:	c3                   	ret    
c001b149:	59                   	pop    ecx
c001b14a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b14f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b154:	5b                   	pop    ebx
c001b155:	5e                   	pop    esi
c001b156:	c3                   	ret    

c001b157 <sysCallCloseDir(regs*)>:
c001b157:	53                   	push   ebx
c001b158:	83 ec 08             	sub    esp,0x8
c001b15b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b15f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b162:	83 f8 02             	cmp    eax,0x2
c001b165:	76 47                	jbe    c001b1ae <sysCallCloseDir(regs*)+0x57>
c001b167:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b16c:	77 2f                	ja     c001b19d <sysCallCloseDir(regs*)+0x46>
c001b16e:	83 ec 0c             	sub    esp,0xc
c001b171:	50                   	push   eax
c001b172:	e8 18 66 ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001b177:	89 c3                	mov    ebx,eax
c001b179:	89 04 24             	mov    DWORD PTR [esp],eax
c001b17c:	e8 19 82 ff ff       	call   c001339a <Directory::close()>
c001b181:	83 c4 10             	add    esp,0x10
c001b184:	85 db                	test   ebx,ebx
c001b186:	74 0c                	je     c001b194 <sysCallCloseDir(regs*)+0x3d>
c001b188:	83 ec 0c             	sub    esp,0xc
c001b18b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b18d:	53                   	push   ebx
c001b18e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b191:	83 c4 10             	add    esp,0x10
c001b194:	31 c0                	xor    eax,eax
c001b196:	31 d2                	xor    edx,edx
c001b198:	83 c4 08             	add    esp,0x8
c001b19b:	5b                   	pop    ebx
c001b19c:	c3                   	ret    
c001b19d:	83 ec 08             	sub    esp,0x8
c001b1a0:	50                   	push   eax
c001b1a1:	68 8c aa 02 c0       	push   0xc002aa8c
c001b1a6:	e8 2a 77 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001b1ab:	83 c4 10             	add    esp,0x10
c001b1ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1b3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1b8:	83 c4 08             	add    esp,0x8
c001b1bb:	5b                   	pop    ebx
c001b1bc:	c3                   	ret    

c001b1bd <sysCallMakeDir(regs*)>:
c001b1bd:	56                   	push   esi
c001b1be:	53                   	push   ebx
c001b1bf:	83 ec 10             	sub    esp,0x10
c001b1c2:	68 14 01 00 00       	push   0x114
c001b1c7:	e8 58 44 ff ff       	call   c000f624 <malloc>
c001b1cc:	83 c4 0c             	add    esp,0xc
c001b1cf:	89 c3                	mov    ebx,eax
c001b1d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1d6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b1d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1dd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b1e0:	53                   	push   ebx
c001b1e1:	e8 f4 80 ff ff       	call   c00132da <Directory::Directory(char const*, Process*)>
c001b1e6:	83 c4 10             	add    esp,0x10
c001b1e9:	85 db                	test   ebx,ebx
c001b1eb:	74 32                	je     c001b21f <sysCallMakeDir(regs*)+0x62>
c001b1ed:	83 ec 0c             	sub    esp,0xc
c001b1f0:	53                   	push   ebx
c001b1f1:	e8 28 83 ff ff       	call   c001351e <Directory::create()>
c001b1f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b1f9:	89 c6                	mov    esi,eax
c001b1fb:	e8 9a 81 ff ff       	call   c001339a <Directory::close()>
c001b200:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b202:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b205:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b208:	83 c4 10             	add    esp,0x10
c001b20b:	31 c0                	xor    eax,eax
c001b20d:	59                   	pop    ecx
c001b20e:	85 f6                	test   esi,esi
c001b210:	5b                   	pop    ebx
c001b211:	0f 95 c0             	setne  al
c001b214:	5e                   	pop    esi
c001b215:	31 d2                	xor    edx,edx
c001b217:	f7 d8                	neg    eax
c001b219:	83 d2 00             	adc    edx,0x0
c001b21c:	f7 da                	neg    edx
c001b21e:	c3                   	ret    
c001b21f:	59                   	pop    ecx
c001b220:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b225:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b22a:	5b                   	pop    ebx
c001b22b:	5e                   	pop    esi
c001b22c:	c3                   	ret    

c001b22d <sysCallWait(regs*)>:
c001b22d:	83 ec 10             	sub    esp,0x10
c001b230:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b234:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b237:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b23a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b23d:	e8 d9 23 00 00       	call   c001d61b <waitTask(int, int*, int)>
c001b242:	83 c4 1c             	add    esp,0x1c
c001b245:	99                   	cdq    
c001b246:	c3                   	ret    

c001b247 <sysCallNotImpl(regs*)>:
c001b247:	83 ec 18             	sub    esp,0x18
c001b24a:	68 1a ab 02 c0       	push   0xc002ab1a
c001b24f:	e8 61 e9 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001b254:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b259:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b25e:	83 c4 1c             	add    esp,0x1c
c001b261:	c3                   	ret    

c001b262 <sysPanic(regs*)>:
c001b262:	83 ec 18             	sub    esp,0x18
c001b265:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b269:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b26c:	e8 44 e9 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001b271:	c7 04 24 34 ab 02 c0 	mov    DWORD PTR [esp],0xc002ab34
c001b278:	e8 38 e9 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001b27d:	b8 01 00 00 00       	mov    eax,0x1
c001b282:	31 d2                	xor    edx,edx
c001b284:	83 c4 1c             	add    esp,0x1c
c001b287:	c3                   	ret    

c001b288 <sysCallRmdir(regs*)>:
c001b288:	56                   	push   esi
c001b289:	53                   	push   ebx
c001b28a:	83 ec 20             	sub    esp,0x20
c001b28d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b291:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b294:	68 14 01 00 00       	push   0x114
c001b299:	e8 86 43 ff ff       	call   c000f624 <malloc>
c001b29e:	83 c4 0c             	add    esp,0xc
c001b2a1:	89 c3                	mov    ebx,eax
c001b2a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2a8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b2ab:	56                   	push   esi
c001b2ac:	53                   	push   ebx
c001b2ad:	e8 7c 7b ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001b2b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2b5:	e8 50 7d ff ff       	call   c001300a <File::unlink()>
c001b2ba:	83 c4 10             	add    esp,0x10
c001b2bd:	85 db                	test   ebx,ebx
c001b2bf:	74 14                	je     c001b2d5 <sysCallRmdir(regs*)+0x4d>
c001b2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b2c5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b2c7:	83 ec 0c             	sub    esp,0xc
c001b2ca:	53                   	push   ebx
c001b2cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b2ce:	83 c4 10             	add    esp,0x10
c001b2d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2d5:	85 c0                	test   eax,eax
c001b2d7:	0f 95 c0             	setne  al
c001b2da:	31 d2                	xor    edx,edx
c001b2dc:	0f b6 c0             	movzx  eax,al
c001b2df:	f7 d8                	neg    eax
c001b2e1:	83 d2 00             	adc    edx,0x0
c001b2e4:	83 c4 14             	add    esp,0x14
c001b2e7:	f7 da                	neg    edx
c001b2e9:	5b                   	pop    ebx
c001b2ea:	5e                   	pop    esi
c001b2eb:	c3                   	ret    

c001b2ec <sysCallUnlink(regs*)>:
c001b2ec:	56                   	push   esi
c001b2ed:	53                   	push   ebx
c001b2ee:	83 ec 20             	sub    esp,0x20
c001b2f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b2f5:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b2f8:	68 14 01 00 00       	push   0x114
c001b2fd:	e8 22 43 ff ff       	call   c000f624 <malloc>
c001b302:	83 c4 0c             	add    esp,0xc
c001b305:	89 c3                	mov    ebx,eax
c001b307:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b30c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b30f:	56                   	push   esi
c001b310:	53                   	push   ebx
c001b311:	e8 18 7b ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001b316:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b319:	e8 ec 7c ff ff       	call   c001300a <File::unlink()>
c001b31e:	83 c4 10             	add    esp,0x10
c001b321:	85 db                	test   ebx,ebx
c001b323:	74 14                	je     c001b339 <sysCallUnlink(regs*)+0x4d>
c001b325:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b329:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b32b:	83 ec 0c             	sub    esp,0xc
c001b32e:	53                   	push   ebx
c001b32f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b332:	83 c4 10             	add    esp,0x10
c001b335:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b339:	85 c0                	test   eax,eax
c001b33b:	0f 95 c0             	setne  al
c001b33e:	31 d2                	xor    edx,edx
c001b340:	0f b6 c0             	movzx  eax,al
c001b343:	f7 d8                	neg    eax
c001b345:	83 d2 00             	adc    edx,0x0
c001b348:	83 c4 14             	add    esp,0x14
c001b34b:	f7 da                	neg    edx
c001b34d:	5b                   	pop    ebx
c001b34e:	5e                   	pop    esi
c001b34f:	c3                   	ret    

c001b350 <sysCallGetArgv(regs*)>:
c001b350:	83 ec 0c             	sub    esp,0xc
c001b353:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b357:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b35a:	85 c0                	test   eax,eax
c001b35c:	78 2b                	js     c001b389 <sysCallGetArgv(regs*)+0x39>
c001b35e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b364:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b367:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b36d:	7d 1a                	jge    c001b389 <sysCallGetArgv(regs*)+0x39>
c001b36f:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b376:	85 c0                	test   eax,eax
c001b378:	74 17                	je     c001b391 <sysCallGetArgv(regs*)+0x41>
c001b37a:	83 ec 08             	sub    esp,0x8
c001b37d:	50                   	push   eax
c001b37e:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b381:	e8 dd 53 fe ff       	call   c0000763 <strcpy>
c001b386:	83 c4 10             	add    esp,0x10
c001b389:	31 c0                	xor    eax,eax
c001b38b:	31 d2                	xor    edx,edx
c001b38d:	83 c4 0c             	add    esp,0xc
c001b390:	c3                   	ret    
c001b391:	b8 01 00 00 00       	mov    eax,0x1
c001b396:	31 d2                	xor    edx,edx
c001b398:	83 c4 0c             	add    esp,0xc
c001b39b:	c3                   	ret    

c001b39c <sysCallTTYName(regs*)>:
c001b39c:	56                   	push   esi
c001b39d:	53                   	push   ebx
c001b39e:	53                   	push   ebx
c001b39f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b3a3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b3a6:	85 c0                	test   eax,eax
c001b3a8:	74 5f                	je     c001b409 <sysCallTTYName(regs*)+0x6d>
c001b3aa:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b3ad:	83 f8 02             	cmp    eax,0x2
c001b3b0:	77 3e                	ja     c001b3f0 <sysCallTTYName(regs*)+0x54>
c001b3b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3b7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b3ba:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b3c0:	85 db                	test   ebx,ebx
c001b3c2:	74 45                	je     c001b409 <sysCallTTYName(regs*)+0x6d>
c001b3c4:	83 ec 0c             	sub    esp,0xc
c001b3c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3c9:	53                   	push   ebx
c001b3ca:	ff 10                	call   DWORD PTR [eax]
c001b3cc:	83 c4 10             	add    esp,0x10
c001b3cf:	84 c0                	test   al,al
c001b3d1:	74 41                	je     c001b414 <sysCallTTYName(regs*)+0x78>
c001b3d3:	83 ec 08             	sub    esp,0x8
c001b3d6:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001b3dc:	53                   	push   ebx
c001b3dd:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b3e0:	e8 7e 53 fe ff       	call   c0000763 <strcpy>
c001b3e5:	83 c4 10             	add    esp,0x10
c001b3e8:	31 c0                	xor    eax,eax
c001b3ea:	59                   	pop    ecx
c001b3eb:	31 d2                	xor    edx,edx
c001b3ed:	5b                   	pop    ebx
c001b3ee:	5e                   	pop    esi
c001b3ef:	c3                   	ret    
c001b3f0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b3f5:	74 bb                	je     c001b3b2 <sysCallTTYName(regs*)+0x16>
c001b3f7:	83 ec 0c             	sub    esp,0xc
c001b3fa:	50                   	push   eax
c001b3fb:	e8 8f 63 ff ff       	call   c001178f <getFromFileDescriptor(int)>
c001b400:	83 c4 10             	add    esp,0x10
c001b403:	89 c3                	mov    ebx,eax
c001b405:	85 db                	test   ebx,ebx
c001b407:	75 bb                	jne    c001b3c4 <sysCallTTYName(regs*)+0x28>
c001b409:	59                   	pop    ecx
c001b40a:	b8 01 00 00 00       	mov    eax,0x1
c001b40f:	31 d2                	xor    edx,edx
c001b411:	5b                   	pop    ebx
c001b412:	5e                   	pop    esi
c001b413:	c3                   	ret    
c001b414:	59                   	pop    ecx
c001b415:	b8 02 00 00 00       	mov    eax,0x2
c001b41a:	31 d2                	xor    edx,edx
c001b41c:	5b                   	pop    ebx
c001b41d:	5e                   	pop    esi
c001b41e:	c3                   	ret    

c001b41f <sysCallUSleep(regs*)>:
c001b41f:	83 ec 14             	sub    esp,0x14
c001b422:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b427:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b42b:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b432:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b435:	01 ca                	add    edx,ecx
c001b437:	52                   	push   edx
c001b438:	50                   	push   eax
c001b439:	e8 76 22 00 00       	call   c001d6b4 <nanoSleep(unsigned long long)>
c001b43e:	31 c0                	xor    eax,eax
c001b440:	31 d2                	xor    edx,edx
c001b442:	83 c4 1c             	add    esp,0x1c
c001b445:	c3                   	ret    

c001b446 <sysCallSpawn(regs*)>:
c001b446:	56                   	push   esi
c001b447:	53                   	push   ebx
c001b448:	53                   	push   ebx
c001b449:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b44d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b450:	85 f6                	test   esi,esi
c001b452:	75 08                	jne    c001b45c <sysCallSpawn(regs*)+0x16>
c001b454:	59                   	pop    ecx
c001b455:	31 c0                	xor    eax,eax
c001b457:	31 d2                	xor    edx,edx
c001b459:	5b                   	pop    ebx
c001b45a:	5e                   	pop    esi
c001b45b:	c3                   	ret    
c001b45c:	83 ec 0c             	sub    esp,0xc
c001b45f:	68 3f 07 00 00       	push   0x73f
c001b464:	e8 bb 41 ff ff       	call   c000f624 <malloc>
c001b469:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b46c:	89 c6                	mov    esi,eax
c001b46e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b473:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b476:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b479:	56                   	push   esi
c001b47a:	e8 35 19 00 00       	call   c001cdb4 <Process::Process(char const*, Process*, char**)>
c001b47f:	83 c4 20             	add    esp,0x20
c001b482:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b489:	75 c9                	jne    c001b454 <sysCallSpawn(regs*)+0xe>
c001b48b:	83 ec 0c             	sub    esp,0xc
c001b48e:	56                   	push   esi
c001b48f:	e8 e6 1e 00 00       	call   c001d37a <Process::createUserThread()>
c001b494:	8b 06                	mov    eax,DWORD PTR [esi]
c001b496:	83 c4 10             	add    esp,0x10
c001b499:	99                   	cdq    
c001b49a:	59                   	pop    ecx
c001b49b:	5b                   	pop    ebx
c001b49c:	5e                   	pop    esi
c001b49d:	c3                   	ret    

c001b49e <sysCallGetEnv(regs*)>:
c001b49e:	57                   	push   edi
c001b49f:	56                   	push   esi
c001b4a0:	53                   	push   ebx
c001b4a1:	83 ec 1c             	sub    esp,0x1c
c001b4a4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b4a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4ad:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b4b0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b4b3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4b6:	e8 16 e6 ff ff       	call   c0019ad1 <Krnl::getProcessTotalEnvCount(Process*)>
c001b4bb:	83 c4 10             	add    esp,0x10
c001b4be:	39 c7                	cmp    edi,eax
c001b4c0:	7c 14                	jl     c001b4d6 <sysCallGetEnv(regs*)+0x38>
c001b4c2:	85 f6                	test   esi,esi
c001b4c4:	75 0b                	jne    c001b4d1 <sysCallGetEnv(regs*)+0x33>
c001b4c6:	83 c4 10             	add    esp,0x10
c001b4c9:	31 c0                	xor    eax,eax
c001b4cb:	5b                   	pop    ebx
c001b4cc:	31 d2                	xor    edx,edx
c001b4ce:	5e                   	pop    esi
c001b4cf:	5f                   	pop    edi
c001b4d0:	c3                   	ret    
c001b4d1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b4d4:	eb f0                	jmp    c001b4c6 <sysCallGetEnv(regs*)+0x28>
c001b4d6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b4da:	52                   	push   edx
c001b4db:	57                   	push   edi
c001b4dc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b4e2:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b4e5:	50                   	push   eax
c001b4e6:	e8 06 e6 ff ff       	call   c0019af1 <Krnl::getProcessEnvPair(Process*, int)>
c001b4eb:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b4ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4f2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b4f6:	83 c4 0c             	add    esp,0xc
c001b4f9:	85 c9                	test   ecx,ecx
c001b4fb:	75 23                	jne    c001b520 <sysCallGetEnv(regs*)+0x82>
c001b4fd:	83 ec 0c             	sub    esp,0xc
c001b500:	50                   	push   eax
c001b501:	e8 db 51 fe ff       	call   c00006e1 <strlen>
c001b506:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b509:	89 c3                	mov    ebx,eax
c001b50b:	e8 d1 51 fe ff       	call   c00006e1 <strlen>
c001b510:	83 c4 10             	add    esp,0x10
c001b513:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b517:	83 c4 10             	add    esp,0x10
c001b51a:	31 d2                	xor    edx,edx
c001b51c:	5b                   	pop    ebx
c001b51d:	5e                   	pop    esi
c001b51e:	5f                   	pop    edi
c001b51f:	c3                   	ret    
c001b520:	83 ec 08             	sub    esp,0x8
c001b523:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b526:	50                   	push   eax
c001b527:	56                   	push   esi
c001b528:	e8 36 52 fe ff       	call   c0000763 <strcpy>
c001b52d:	58                   	pop    eax
c001b52e:	5a                   	pop    edx
c001b52f:	68 43 ab 02 c0       	push   0xc002ab43
c001b534:	56                   	push   esi
c001b535:	e8 e0 52 fe ff       	call   c000081a <strcat>
c001b53a:	59                   	pop    ecx
c001b53b:	5b                   	pop    ebx
c001b53c:	57                   	push   edi
c001b53d:	56                   	push   esi
c001b53e:	e8 d7 52 fe ff       	call   c000081a <strcat>
c001b543:	83 c4 10             	add    esp,0x10
c001b546:	e9 7b ff ff ff       	jmp    c001b4c6 <sysCallGetEnv(regs*)+0x28>

c001b54b <sysAppSettings(regs*)>:
c001b54b:	53                   	push   ebx
c001b54c:	83 ec 08             	sub    esp,0x8
c001b54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b553:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b556:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b55c:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b561:	66 3d c0 09          	cmp    ax,0x9c0
c001b565:	75 2f                	jne    c001b596 <sysAppSettings(regs*)+0x4b>
c001b567:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b56d:	83 e0 1f             	and    eax,0x1f
c001b570:	3c 01                	cmp    al,0x1
c001b572:	74 2e                	je     c001b5a2 <sysAppSettings(regs*)+0x57>
c001b574:	3c 07                	cmp    al,0x7
c001b576:	0f 84 bd 00 00 00    	je     c001b639 <sysAppSettings(regs*)+0xee>
c001b57c:	84 c0                	test   al,al
c001b57e:	0f 84 dc 00 00 00    	je     c001b660 <sysAppSettings(regs*)+0x115>
c001b584:	3c 08                	cmp    al,0x8
c001b586:	74 6d                	je     c001b5f5 <sysAppSettings(regs*)+0xaa>
c001b588:	0f b6 c0             	movzx  eax,al
c001b58b:	83 c4 08             	add    esp,0x8
c001b58e:	05 e8 03 00 00       	add    eax,0x3e8
c001b593:	5b                   	pop    ebx
c001b594:	99                   	cdq    
c001b595:	c3                   	ret    
c001b596:	b8 01 00 00 00       	mov    eax,0x1
c001b59b:	31 d2                	xor    edx,edx
c001b59d:	83 c4 08             	add    esp,0x8
c001b5a0:	5b                   	pop    ebx
c001b5a1:	c3                   	ret    
c001b5a2:	51                   	push   ecx
c001b5a3:	68 00 01 00 00       	push   0x100
c001b5a8:	6a 00                	push   0x0
c001b5aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5af:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5b2:	83 c0 0c             	add    eax,0xc
c001b5b5:	50                   	push   eax
c001b5b6:	e8 09 51 fe ff       	call   c00006c4 <memset>
c001b5bb:	83 c4 0c             	add    esp,0xc
c001b5be:	68 ff 00 00 00       	push   0xff
c001b5c3:	53                   	push   ebx
c001b5c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5cc:	83 c0 0c             	add    eax,0xc
c001b5cf:	50                   	push   eax
c001b5d0:	e8 cb 50 fe ff       	call   c00006a0 <memcpy>
c001b5d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5da:	5b                   	pop    ebx
c001b5db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5de:	5a                   	pop    edx
c001b5df:	8d 50 0c             	lea    edx,[eax+0xc]
c001b5e2:	52                   	push   edx
c001b5e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b5e9:	e8 1c 53 ff ff       	call   c001090a <VgaText::setTitle(char*)>
c001b5ee:	83 c4 10             	add    esp,0x10
c001b5f1:	31 c0                	xor    eax,eax
c001b5f3:	eb a6                	jmp    c001b59b <sysAppSettings(regs*)+0x50>
c001b5f5:	83 ec 08             	sub    esp,0x8
c001b5f8:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b5fe:	83 e0 0f             	and    eax,0xf
c001b601:	50                   	push   eax
c001b602:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b607:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b60a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b610:	e8 e5 52 ff ff       	call   c00108fa <VgaText::setTitleColour(VgaColour)>
c001b615:	58                   	pop    eax
c001b616:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b61c:	5a                   	pop    edx
c001b61d:	c1 e8 04             	shr    eax,0x4
c001b620:	83 e0 0f             	and    eax,0xf
c001b623:	50                   	push   eax
c001b624:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b629:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b62c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b632:	e8 b3 52 ff ff       	call   c00108ea <VgaText::setTitleTextColour(VgaColour)>
c001b637:	eb b5                	jmp    c001b5ee <sysAppSettings(regs*)+0xa3>
c001b639:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b63e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b641:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b647:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b64d:	c0 e8 06             	shr    al,0x6
c001b650:	83 e0 01             	and    eax,0x1
c001b653:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b659:	31 c0                	xor    eax,eax
c001b65b:	e9 3b ff ff ff       	jmp    c001b59b <sysAppSettings(regs*)+0x50>
c001b660:	b8 02 00 00 00       	mov    eax,0x2
c001b665:	e9 31 ff ff ff       	jmp    c001b59b <sysAppSettings(regs*)+0x50>

c001b66a <sysSetFatAttrib(regs*)>:
c001b66a:	57                   	push   edi
c001b66b:	56                   	push   esi
c001b66c:	53                   	push   ebx
c001b66d:	83 ec 1c             	sub    esp,0x1c
c001b670:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b674:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b677:	68 14 01 00 00       	push   0x114
c001b67c:	e8 a3 3f ff ff       	call   c000f624 <malloc>
c001b681:	83 c4 0c             	add    esp,0xc
c001b684:	89 c3                	mov    ebx,eax
c001b686:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b68b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b68e:	57                   	push   edi
c001b68f:	53                   	push   ebx
c001b690:	e8 99 77 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001b695:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b698:	83 c4 0c             	add    esp,0xc
c001b69b:	0f b6 d4             	movzx  edx,ah
c001b69e:	0f b6 c0             	movzx  eax,al
c001b6a1:	52                   	push   edx
c001b6a2:	50                   	push   eax
c001b6a3:	53                   	push   ebx
c001b6a4:	e8 fb 79 ff ff       	call   c00130a4 <File::chfatattr(unsigned char, unsigned char)>
c001b6a9:	83 c4 10             	add    esp,0x10
c001b6ac:	85 db                	test   ebx,ebx
c001b6ae:	74 14                	je     c001b6c4 <sysSetFatAttrib(regs*)+0x5a>
c001b6b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6b4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b6b6:	83 ec 0c             	sub    esp,0xc
c001b6b9:	53                   	push   ebx
c001b6ba:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b6bd:	83 c4 10             	add    esp,0x10
c001b6c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6c4:	85 c0                	test   eax,eax
c001b6c6:	0f 95 c0             	setne  al
c001b6c9:	31 d2                	xor    edx,edx
c001b6cb:	0f b6 c0             	movzx  eax,al
c001b6ce:	f7 d8                	neg    eax
c001b6d0:	83 d2 00             	adc    edx,0x0
c001b6d3:	83 c4 10             	add    esp,0x10
c001b6d6:	f7 da                	neg    edx
c001b6d8:	5b                   	pop    ebx
c001b6d9:	5e                   	pop    esi
c001b6da:	5f                   	pop    edi
c001b6db:	c3                   	ret    

c001b6dc <sysPipe(regs*)>:
c001b6dc:	57                   	push   edi
c001b6dd:	56                   	push   esi
c001b6de:	53                   	push   ebx
c001b6df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6e3:	83 ec 0c             	sub    esp,0xc
c001b6e6:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b6e9:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b6ec:	6a 20                	push   0x20
c001b6ee:	e8 31 3f ff ff       	call   c000f624 <malloc>
c001b6f3:	89 c3                	mov    ebx,eax
c001b6f5:	58                   	pop    eax
c001b6f6:	5a                   	pop    edx
c001b6f7:	68 00 50 00 00       	push   0x5000
c001b6fc:	53                   	push   ebx
c001b6fd:	e8 38 4b ff ff       	call   c001023a <Pipe::Pipe(int)>
c001b702:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b705:	e8 90 5d ff ff       	call   c001149a <UnixFile::getFileDescriptor()>
c001b70a:	89 07                	mov    DWORD PTR [edi],eax
c001b70c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b70f:	e8 86 5d ff ff       	call   c001149a <UnixFile::getFileDescriptor()>
c001b714:	83 c4 10             	add    esp,0x10
c001b717:	89 06                	mov    DWORD PTR [esi],eax
c001b719:	31 d2                	xor    edx,edx
c001b71b:	5b                   	pop    ebx
c001b71c:	31 c0                	xor    eax,eax
c001b71e:	5e                   	pop    esi
c001b71f:	5f                   	pop    edi
c001b720:	c3                   	ret    

c001b721 <sysGetUnixTime(regs*)>:
c001b721:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c001b726:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b72c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b730:	e9 e3 80 ff ff       	jmp    c0013818 <Clock::timeInSecondsLocal()>

c001b735 <string_ends_with(char const*, char const*)>:
c001b735:	57                   	push   edi
c001b736:	56                   	push   esi
c001b737:	53                   	push   ebx
c001b738:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b73c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b740:	83 ec 0c             	sub    esp,0xc
c001b743:	53                   	push   ebx
c001b744:	e8 98 4f fe ff       	call   c00006e1 <strlen>
c001b749:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b74c:	89 c6                	mov    esi,eax
c001b74e:	e8 8e 4f fe ff       	call   c00006e1 <strlen>
c001b753:	83 c4 10             	add    esp,0x10
c001b756:	39 c6                	cmp    esi,eax
c001b758:	7d 06                	jge    c001b760 <string_ends_with(char const*, char const*)+0x2b>
c001b75a:	5b                   	pop    ebx
c001b75b:	31 c0                	xor    eax,eax
c001b75d:	5e                   	pop    esi
c001b75e:	5f                   	pop    edi
c001b75f:	c3                   	ret    
c001b760:	83 ec 08             	sub    esp,0x8
c001b763:	29 c6                	sub    esi,eax
c001b765:	57                   	push   edi
c001b766:	01 f3                	add    ebx,esi
c001b768:	53                   	push   ebx
c001b769:	e8 46 50 fe ff       	call   c00007b4 <strcmp>
c001b76e:	83 c4 10             	add    esp,0x10
c001b771:	85 c0                	test   eax,eax
c001b773:	5b                   	pop    ebx
c001b774:	0f 94 c0             	sete   al
c001b777:	5e                   	pop    esi
c001b778:	0f b6 c0             	movzx  eax,al
c001b77b:	5f                   	pop    edi
c001b77c:	c3                   	ret    

c001b77d <sysCallOpen(regs*)>:
c001b77d:	56                   	push   esi
c001b77e:	53                   	push   ebx
c001b77f:	81 ec 04 01 00 00    	sub    esp,0x104
c001b785:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b78c:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b78f:	85 c9                	test   ecx,ecx
c001b791:	0f 84 b3 00 00 00    	je     c001b84a <sysCallOpen(regs*)+0xcd>
c001b797:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b79a:	85 c0                	test   eax,eax
c001b79c:	0f 84 a8 00 00 00    	je     c001b84a <sysCallOpen(regs*)+0xcd>
c001b7a2:	52                   	push   edx
c001b7a3:	68 45 ab 02 c0       	push   0xc002ab45
c001b7a8:	50                   	push   eax
c001b7a9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b7ad:	56                   	push   esi
c001b7ae:	e8 d1 74 ff ff       	call   c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b7b3:	89 34 24             	mov    DWORD PTR [esp],esi
c001b7b6:	e8 26 4f fe ff       	call   c00006e1 <strlen>
c001b7bb:	83 c4 10             	add    esp,0x10
c001b7be:	48                   	dec    eax
c001b7bf:	74 1d                	je     c001b7de <sysCallOpen(regs*)+0x61>
c001b7c1:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b7c4:	eb 0f                	jmp    c001b7d5 <sysCallOpen(regs*)+0x58>
c001b7c6:	80 fa 3a             	cmp    dl,0x3a
c001b7c9:	74 0f                	je     c001b7da <sysCallOpen(regs*)+0x5d>
c001b7cb:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b7cf:	48                   	dec    eax
c001b7d0:	74 0c                	je     c001b7de <sysCallOpen(regs*)+0x61>
c001b7d2:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b7d5:	80 fa 2e             	cmp    dl,0x2e
c001b7d8:	75 ec                	jne    c001b7c6 <sysCallOpen(regs*)+0x49>
c001b7da:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b7de:	83 ec 08             	sub    esp,0x8
c001b7e1:	68 49 ab 02 c0       	push   0xc002ab49
c001b7e6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7e9:	e8 47 ff ff ff       	call   c001b735 <string_ends_with(char const*, char const*)>
c001b7ee:	83 c4 10             	add    esp,0x10
c001b7f1:	85 c0                	test   eax,eax
c001b7f3:	75 17                	jne    c001b80c <sysCallOpen(regs*)+0x8f>
c001b7f5:	83 ec 08             	sub    esp,0x8
c001b7f8:	68 6a ab 02 c0       	push   0xc002ab6a
c001b7fd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b800:	e8 30 ff ff ff       	call   c001b735 <string_ends_with(char const*, char const*)>
c001b805:	83 c4 10             	add    esp,0x10
c001b808:	85 c0                	test   eax,eax
c001b80a:	74 51                	je     c001b85d <sysCallOpen(regs*)+0xe0>
c001b80c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b80f:	83 ec 08             	sub    esp,0x8
c001b812:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b818:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b81f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b822:	ff 30                	push   DWORD PTR [eax]
c001b824:	68 4e ab 02 c0       	push   0xc002ab4e
c001b829:	e8 a7 70 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001b82e:	c7 04 24 5d ab 02 c0 	mov    DWORD PTR [esp],0xc002ab5d
c001b835:	e8 9b 70 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001b83a:	83 c4 10             	add    esp,0x10
c001b83d:	81 c4 04 01 00 00    	add    esp,0x104
c001b843:	31 c0                	xor    eax,eax
c001b845:	31 d2                	xor    edx,edx
c001b847:	5b                   	pop    ebx
c001b848:	5e                   	pop    esi
c001b849:	c3                   	ret    
c001b84a:	81 c4 04 01 00 00    	add    esp,0x104
c001b850:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b855:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b85a:	5b                   	pop    ebx
c001b85b:	5e                   	pop    esi
c001b85c:	c3                   	ret    
c001b85d:	83 ec 08             	sub    esp,0x8
c001b860:	68 4a ab 02 c0       	push   0xc002ab4a
c001b865:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b868:	e8 47 4f fe ff       	call   c00007b4 <strcmp>
c001b86d:	83 c4 10             	add    esp,0x10
c001b870:	85 c0                	test   eax,eax
c001b872:	74 98                	je     c001b80c <sysCallOpen(regs*)+0x8f>
c001b874:	83 ec 08             	sub    esp,0x8
c001b877:	68 49 ab 02 c0       	push   0xc002ab49
c001b87c:	56                   	push   esi
c001b87d:	e8 b3 fe ff ff       	call   c001b735 <string_ends_with(char const*, char const*)>
c001b882:	83 c4 10             	add    esp,0x10
c001b885:	85 c0                	test   eax,eax
c001b887:	75 83                	jne    c001b80c <sysCallOpen(regs*)+0x8f>
c001b889:	83 ec 08             	sub    esp,0x8
c001b88c:	68 6f ab 02 c0       	push   0xc002ab6f
c001b891:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b894:	e8 9c fe ff ff       	call   c001b735 <string_ends_with(char const*, char const*)>
c001b899:	83 c4 10             	add    esp,0x10
c001b89c:	85 c0                	test   eax,eax
c001b89e:	0f 85 d9 00 00 00    	jne    c001b97d <sysCallOpen(regs*)+0x200>
c001b8a4:	83 ec 08             	sub    esp,0x8
c001b8a7:	68 74 ab 02 c0       	push   0xc002ab74
c001b8ac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8af:	e8 81 fe ff ff       	call   c001b735 <string_ends_with(char const*, char const*)>
c001b8b4:	83 c4 10             	add    esp,0x10
c001b8b7:	85 c0                	test   eax,eax
c001b8b9:	0f 85 be 00 00 00    	jne    c001b97d <sysCallOpen(regs*)+0x200>
c001b8bf:	83 ec 08             	sub    esp,0x8
c001b8c2:	68 70 ab 02 c0       	push   0xc002ab70
c001b8c7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8ca:	e8 e5 4e fe ff       	call   c00007b4 <strcmp>
c001b8cf:	83 c4 10             	add    esp,0x10
c001b8d2:	85 c0                	test   eax,eax
c001b8d4:	0f 84 a3 00 00 00    	je     c001b97d <sysCallOpen(regs*)+0x200>
c001b8da:	83 ec 08             	sub    esp,0x8
c001b8dd:	68 6f ab 02 c0       	push   0xc002ab6f
c001b8e2:	56                   	push   esi
c001b8e3:	e8 4d fe ff ff       	call   c001b735 <string_ends_with(char const*, char const*)>
c001b8e8:	83 c4 10             	add    esp,0x10
c001b8eb:	85 c0                	test   eax,eax
c001b8ed:	0f 85 8a 00 00 00    	jne    c001b97d <sysCallOpen(regs*)+0x200>
c001b8f3:	83 ec 0c             	sub    esp,0xc
c001b8f6:	68 14 01 00 00       	push   0x114
c001b8fb:	e8 24 3d ff ff       	call   c000f624 <malloc>
c001b900:	83 c4 0c             	add    esp,0xc
c001b903:	89 c6                	mov    esi,eax
c001b905:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b90a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b90d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b910:	56                   	push   esi
c001b911:	e8 18 75 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001b916:	83 c4 10             	add    esp,0x10
c001b919:	85 f6                	test   esi,esi
c001b91b:	0f 84 29 ff ff ff    	je     c001b84a <sysCallOpen(regs*)+0xcd>
c001b921:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b924:	0f b6 c2             	movzx  eax,dl
c001b927:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b92a:	89 d0                	mov    eax,edx
c001b92c:	83 e0 01             	and    eax,0x1
c001b92f:	f6 c2 02             	test   dl,0x2
c001b932:	74 03                	je     c001b937 <sysCallOpen(regs*)+0x1ba>
c001b934:	83 c8 02             	or     eax,0x2
c001b937:	f6 c2 04             	test   dl,0x4
c001b93a:	74 03                	je     c001b93f <sysCallOpen(regs*)+0x1c2>
c001b93c:	83 c8 04             	or     eax,0x4
c001b93f:	f6 c2 08             	test   dl,0x8
c001b942:	74 03                	je     c001b947 <sysCallOpen(regs*)+0x1ca>
c001b944:	83 c8 0a             	or     eax,0xa
c001b947:	83 e2 10             	and    edx,0x10
c001b94a:	74 03                	je     c001b94f <sysCallOpen(regs*)+0x1d2>
c001b94c:	83 c8 12             	or     eax,0x12
c001b94f:	83 ec 08             	sub    esp,0x8
c001b952:	50                   	push   eax
c001b953:	56                   	push   esi
c001b954:	e8 39 75 ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001b959:	83 c4 10             	add    esp,0x10
c001b95c:	85 c0                	test   eax,eax
c001b95e:	0f 85 e6 fe ff ff    	jne    c001b84a <sysCallOpen(regs*)+0xcd>
c001b964:	83 ec 0c             	sub    esp,0xc
c001b967:	56                   	push   esi
c001b968:	e8 2d 5b ff ff       	call   c001149a <UnixFile::getFileDescriptor()>
c001b96d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b970:	89 02                	mov    DWORD PTR [edx],eax
c001b972:	c1 f8 1f             	sar    eax,0x1f
c001b975:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b978:	e9 bd fe ff ff       	jmp    c001b83a <sysCallOpen(regs*)+0xbd>
c001b97d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b980:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001b986:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b98d:	e9 ab fe ff ff       	jmp    c001b83d <sysCallOpen(regs*)+0xc0>

c001b992 <Sys::loadSyscalls()>:
c001b992:	c7 05 60 da 02 c0 48 ab 01 c0 	mov    DWORD PTR ds:0xc002da60,0xc001ab48
c001b99c:	c7 05 64 da 02 c0 aa a7 01 c0 	mov    DWORD PTR ds:0xc002da64,0xc001a7aa
c001b9a6:	c7 05 68 da 02 c0 fd a8 01 c0 	mov    DWORD PTR ds:0xc002da68,0xc001a8fd
c001b9b0:	c7 05 6c da 02 c0 e0 aa 01 c0 	mov    DWORD PTR ds:0xc002da6c,0xc001aae0
c001b9ba:	c7 05 70 da 02 c0 95 a8 01 c0 	mov    DWORD PTR ds:0xc002da70,0xc001a895
c001b9c4:	c7 05 74 da 02 c0 e1 a7 01 c0 	mov    DWORD PTR ds:0xc002da74,0xc001a7e1
c001b9ce:	c7 05 78 da 02 c0 c2 a7 01 c0 	mov    DWORD PTR ds:0xc002da78,0xc001a7c2
c001b9d8:	c7 05 7c da 02 c0 52 a9 01 c0 	mov    DWORD PTR ds:0xc002da7c,0xc001a952
c001b9e2:	c7 05 84 da 02 c0 5a b0 01 c0 	mov    DWORD PTR ds:0xc002da84,0xc001b05a
c001b9ec:	c7 05 80 da 02 c0 7d b7 01 c0 	mov    DWORD PTR ds:0xc002da80,0xc001b77d
c001b9f6:	c7 05 88 da 02 c0 e2 b0 01 c0 	mov    DWORD PTR ds:0xc002da88,0xc001b0e2
c001ba00:	c7 05 8c da 02 c0 49 ad 01 c0 	mov    DWORD PTR ds:0xc002da8c,0xc001ad49
c001ba0a:	c7 05 90 da 02 c0 83 ab 01 c0 	mov    DWORD PTR ds:0xc002da90,0xc001ab83
c001ba14:	c7 05 94 da 02 c0 88 ab 01 c0 	mov    DWORD PTR ds:0xc002da94,0xc001ab88
c001ba1e:	c7 05 98 da 02 c0 bd b1 01 c0 	mov    DWORD PTR ds:0xc002da98,0xc001b1bd
c001ba28:	c7 05 9c da 02 c0 57 b1 01 c0 	mov    DWORD PTR ds:0xc002da9c,0xc001b157
c001ba32:	c7 05 a0 da 02 c0 31 ae 01 c0 	mov    DWORD PTR ds:0xc002daa0,0xc001ae31
c001ba3c:	c7 05 a4 da 02 c0 9a ae 01 c0 	mov    DWORD PTR ds:0xc002daa4,0xc001ae9a
c001ba46:	c7 05 a8 da 02 c0 17 af 01 c0 	mov    DWORD PTR ds:0xc002daa8,0xc001af17
c001ba50:	c7 05 ac da 02 c0 8d ab 01 c0 	mov    DWORD PTR ds:0xc002daac,0xc001ab8d
c001ba5a:	c7 05 b0 da 02 c0 2d b2 01 c0 	mov    DWORD PTR ds:0xc002dab0,0xc001b22d
c001ba64:	c7 05 b4 da 02 c0 47 b2 01 c0 	mov    DWORD PTR ds:0xc002dab4,0xc001b247
c001ba6e:	c7 05 b8 da 02 c0 47 b2 01 c0 	mov    DWORD PTR ds:0xc002dab8,0xc001b247
c001ba78:	c7 05 bc da 02 c0 88 b2 01 c0 	mov    DWORD PTR ds:0xc002dabc,0xc001b288
c001ba82:	c7 05 c0 da 02 c0 ec b2 01 c0 	mov    DWORD PTR ds:0xc002dac0,0xc001b2ec
c001ba8c:	c7 05 c4 da 02 c0 97 ab 01 c0 	mov    DWORD PTR ds:0xc002dac4,0xc001ab97
c001ba96:	c7 05 c8 da 02 c0 50 b3 01 c0 	mov    DWORD PTR ds:0xc002dac8,0xc001b350
c001baa0:	c7 05 cc da 02 c0 06 ad 01 c0 	mov    DWORD PTR ds:0xc002dacc,0xc001ad06
c001baaa:	c7 05 d0 da 02 c0 9c b3 01 c0 	mov    DWORD PTR ds:0xc002dad0,0xc001b39c
c001bab4:	c7 05 d4 da 02 c0 d7 ad 01 c0 	mov    DWORD PTR ds:0xc002dad4,0xc001add7
c001babe:	c7 05 d8 da 02 c0 1f b4 01 c0 	mov    DWORD PTR ds:0xc002dad8,0xc001b41f
c001bac8:	c7 05 dc da 02 c0 9a af 01 c0 	mov    DWORD PTR ds:0xc002dadc,0xc001af9a
c001bad2:	c7 05 e0 da 02 c0 46 b4 01 c0 	mov    DWORD PTR ds:0xc002dae0,0xc001b446
c001badc:	c7 05 e4 da 02 c0 9e b4 01 c0 	mov    DWORD PTR ds:0xc002dae4,0xc001b49e
c001bae6:	c7 05 e8 da 02 c0 4b b5 01 c0 	mov    DWORD PTR ds:0xc002dae8,0xc001b54b
c001baf0:	c7 05 ec da 02 c0 a7 ab 01 c0 	mov    DWORD PTR ds:0xc002daec,0xc001aba7
c001bafa:	c7 05 f0 da 02 c0 11 ac 01 c0 	mov    DWORD PTR ds:0xc002daf0,0xc001ac11
c001bb04:	c7 05 f4 da 02 c0 57 ac 01 c0 	mov    DWORD PTR ds:0xc002daf4,0xc001ac57
c001bb0e:	c7 05 f8 da 02 c0 6a b6 01 c0 	mov    DWORD PTR ds:0xc002daf8,0xc001b66a
c001bb18:	c7 05 fc da 02 c0 62 b2 01 c0 	mov    DWORD PTR ds:0xc002dafc,0xc001b262
c001bb22:	c7 05 00 db 02 c0 a8 ac 01 c0 	mov    DWORD PTR ds:0xc002db00,0xc001aca8
c001bb2c:	c7 05 04 db 02 c0 dc b6 01 c0 	mov    DWORD PTR ds:0xc002db04,0xc001b6dc
c001bb36:	c7 05 08 db 02 c0 21 b7 01 c0 	mov    DWORD PTR ds:0xc002db08,0xc001b721
c001bb40:	c7 05 0c db 02 c0 ed a7 01 c0 	mov    DWORD PTR ds:0xc002db0c,0xc001a7ed
c001bb4a:	c7 05 10 db 02 c0 6e a9 01 c0 	mov    DWORD PTR ds:0xc002db10,0xc001a96e
c001bb54:	c7 05 14 db 02 c0 96 aa 01 c0 	mov    DWORD PTR ds:0xc002db14,0xc001aa96
c001bb5e:	c3                   	ret    

c001bb5f <Sys::systemCall(regs*, void*)>:
c001bb5f:	53                   	push   ebx
c001bb60:	83 ec 08             	sub    esp,0x8
c001bb63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb67:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001bb6a:	83 f8 7f             	cmp    eax,0x7f
c001bb6d:	77 16                	ja     c001bb85 <Sys::systemCall(regs*, void*)+0x26>
c001bb6f:	8b 14 85 60 da 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd25a0]
c001bb76:	85 d2                	test   edx,edx
c001bb78:	74 0b                	je     c001bb85 <Sys::systemCall(regs*, void*)+0x26>
c001bb7a:	83 ec 0c             	sub    esp,0xc
c001bb7d:	53                   	push   ebx
c001bb7e:	ff d2                	call   edx
c001bb80:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001bb83:	eb 0d                	jmp    c001bb92 <Sys::systemCall(regs*, void*)+0x33>
c001bb85:	52                   	push   edx
c001bb86:	52                   	push   edx
c001bb87:	50                   	push   eax
c001bb88:	68 79 ab 02 c0       	push   0xc002ab79
c001bb8d:	e8 43 6d ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001bb92:	83 c4 10             	add    esp,0x10
c001bb95:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bb9a:	31 d2                	xor    edx,edx
c001bb9c:	83 c4 08             	add    esp,0x8
c001bb9f:	5b                   	pop    ebx
c001bba0:	c3                   	ret    

c001bba1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001bba1:	55                   	push   ebp
c001bba2:	89 e5                	mov    ebp,esp
c001bba4:	57                   	push   edi
c001bba5:	56                   	push   esi
c001bba6:	53                   	push   ebx
c001bba7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001bbad:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001bbb0:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001bbb3:	85 c0                	test   eax,eax
c001bbb5:	0f 95 c1             	setne  cl
c001bbb8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001bbbc:	0f 94 c2             	sete   dl
c001bbbf:	84 d1                	test   cl,dl
c001bbc1:	74 26                	je     c001bbe9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bbc3:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001bbca:	74 1d                	je     c001bbe9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001bbcc:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001bbcf:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001bbd5:	89 d6                	mov    esi,edx
c001bbd7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001bbdd:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001bbe3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bbe6:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001bbe9:	83 ec 0c             	sub    esp,0xc
c001bbec:	05 ff 0f 00 00       	add    eax,0xfff
c001bbf1:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bbf4:	6a 01                	push   0x1
c001bbf6:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001bbfc:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001bc02:	e8 de 5c ff ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c001bc07:	83 c4 10             	add    esp,0x10
c001bc0a:	89 c6                	mov    esi,eax
c001bc0c:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001bc12:	0f 86 21 01 00 00    	jbe    c001bd39 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001bc18:	c1 eb 0c             	shr    ebx,0xc
c001bc1b:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001bc25:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001bc2b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bc2e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bc31:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001bc37:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001bc3a:	29 d8                	sub    eax,ebx
c001bc3c:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001bc42:	0f 83 f4 00 00 00    	jae    c001bd3c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001bc48:	83 ec 0c             	sub    esp,0xc
c001bc4b:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001bc51:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001bc54:	3d 00 10 00 00       	cmp    eax,0x1000
c001bc59:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001bc5b:	52                   	push   edx
c001bc5c:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001bc62:	52                   	push   edx
c001bc63:	76 05                	jbe    c001bc6a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001bc65:	b8 00 10 00 00       	mov    eax,0x1000
c001bc6a:	31 d2                	xor    edx,edx
c001bc6c:	52                   	push   edx
c001bc6d:	50                   	push   eax
c001bc6e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001bc71:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bc74:	83 c4 20             	add    esp,0x20
c001bc77:	85 c0                	test   eax,eax
c001bc79:	74 1f                	je     c001bc9a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001bc7b:	51                   	push   ecx
c001bc7c:	51                   	push   ecx
c001bc7d:	50                   	push   eax
c001bc7e:	68 8d ab 02 c0       	push   0xc002ab8d
c001bc83:	e8 4d 6c ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001bc88:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc8b:	e8 b9 5f ff ff       	call   c0011c49 <Virt::freeKernelVirtualPages(unsigned long)>
c001bc90:	83 c4 10             	add    esp,0x10
c001bc93:	31 c0                	xor    eax,eax
c001bc95:	e9 7c 01 00 00       	jmp    c001be16 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001bc9a:	e8 c5 14 00 00       	call   c001d164 <lockScheduler()>
c001bc9f:	e8 ff 3f ff ff       	call   c000fca3 <Phys::allocatePage()>
c001bca4:	6a 07                	push   0x7
c001bca6:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001bcac:	56                   	push   esi
c001bcad:	50                   	push   eax
c001bcae:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bcb4:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001bcb7:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001bcbd:	e8 ee 62 ff ff       	call   c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001bcc2:	83 c4 0c             	add    esp,0xc
c001bcc5:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bccb:	6a 00                	push   0x0
c001bccd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bcd3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001bcd6:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001bcdc:	e8 39 61 ff ff       	call   c0011e1a <VAS::mapOtherVASIn(bool, VAS*)>
c001bce1:	58                   	pop    eax
c001bce2:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001bce8:	5a                   	pop    edx
c001bce9:	68 07 04 00 00       	push   0x407
c001bcee:	53                   	push   ebx
c001bcef:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bcf5:	50                   	push   eax
c001bcf6:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bcfc:	6a 00                	push   0x0
c001bcfe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd03:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bd06:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bd0c:	e8 59 66 ff ff       	call   c001236a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001bd11:	83 c4 1c             	add    esp,0x1c
c001bd14:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001bd1a:	68 00 10 00 00       	push   0x1000
c001bd1f:	50                   	push   eax
c001bd20:	56                   	push   esi
c001bd21:	e8 7a 49 fe ff       	call   c00006a0 <memcpy>
c001bd26:	e8 3b 14 00 00       	call   c001d166 <unlockScheduler()>
c001bd2b:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001bd31:	83 c4 10             	add    esp,0x10
c001bd34:	e9 f5 fe ff ff       	jmp    c001bc2e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001bd39:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bd3c:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001bd46:	0f 86 bc 00 00 00    	jbe    c001be08 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001bd4c:	e8 13 14 00 00       	call   c001d164 <lockScheduler()>
c001bd51:	51                   	push   ecx
c001bd52:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bd58:	6a 00                	push   0x0
c001bd5a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd5f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bd62:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bd68:	e8 ad 60 ff ff       	call   c0011e1a <VAS::mapOtherVASIn(bool, VAS*)>
c001bd6d:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001bd73:	83 c4 10             	add    esp,0x10
c001bd76:	c1 e8 0c             	shr    eax,0xc
c001bd79:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001bd83:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001bd89:	e8 15 3f ff ff       	call   c000fca3 <Phys::allocatePage()>
c001bd8e:	6a 07                	push   0x7
c001bd90:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001bd96:	56                   	push   esi
c001bd97:	50                   	push   eax
c001bd98:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bd9e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bda1:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001bda7:	e8 04 62 ff ff       	call   c0011fb0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001bdac:	58                   	pop    eax
c001bdad:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001bdb3:	5a                   	pop    edx
c001bdb4:	68 07 04 00 00       	push   0x407
c001bdb9:	53                   	push   ebx
c001bdba:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bdc0:	50                   	push   eax
c001bdc1:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001bdc7:	6a 00                	push   0x0
c001bdc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bdd1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001bdd7:	e8 8e 65 ff ff       	call   c001236a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001bddc:	83 c4 1c             	add    esp,0x1c
c001bddf:	68 00 10 00 00       	push   0x1000
c001bde4:	6a 00                	push   0x0
c001bde6:	56                   	push   esi
c001bde7:	e8 d8 48 fe ff       	call   c00006c4 <memset>
c001bdec:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001bdf2:	83 c4 10             	add    esp,0x10
c001bdf5:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001bdfb:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001be01:	77 86                	ja     c001bd89 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001be03:	e8 5e 13 00 00       	call   c001d166 <unlockScheduler()>
c001be08:	83 ec 0c             	sub    esp,0xc
c001be0b:	56                   	push   esi
c001be0c:	e8 38 5e ff ff       	call   c0011c49 <Virt::freeKernelVirtualPages(unsigned long)>
c001be11:	83 c4 10             	add    esp,0x10
c001be14:	b0 01                	mov    al,0x1
c001be16:	8d 65 f4             	lea    esp,[ebp-0xc]
c001be19:	5b                   	pop    ebx
c001be1a:	5e                   	pop    esi
c001be1b:	5f                   	pop    edi
c001be1c:	5d                   	pop    ebp
c001be1d:	c3                   	ret    

c001be1e <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001be1e:	55                   	push   ebp
c001be1f:	57                   	push   edi
c001be20:	56                   	push   esi
c001be21:	53                   	push   ebx
c001be22:	83 ec 48             	sub    esp,0x48
c001be25:	68 14 01 00 00       	push   0x114
c001be2a:	e8 f5 37 ff ff       	call   c000f624 <malloc>
c001be2f:	83 c4 0c             	add    esp,0xc
c001be32:	89 c6                	mov    esi,eax
c001be34:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001be38:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001be3c:	50                   	push   eax
c001be3d:	e8 ec 6f ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001be42:	58                   	pop    eax
c001be43:	5a                   	pop    edx
c001be44:	6a 01                	push   0x1
c001be46:	56                   	push   esi
c001be47:	e8 46 70 ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001be4c:	83 c4 10             	add    esp,0x10
c001be4f:	85 c0                	test   eax,eax
c001be51:	0f 85 47 01 00 00    	jne    c001bf9e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001be57:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001be5f:	83 ec 0c             	sub    esp,0xc
c001be62:	6a 34                	push   0x34
c001be64:	e8 bb 37 ff ff       	call   c000f624 <malloc>
c001be69:	89 c3                	mov    ebx,eax
c001be6b:	58                   	pop    eax
c001be6c:	8b 06                	mov    eax,DWORD PTR [esi]
c001be6e:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001be72:	57                   	push   edi
c001be73:	53                   	push   ebx
c001be74:	6a 00                	push   0x0
c001be76:	6a 34                	push   0x34
c001be78:	56                   	push   esi
c001be79:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001be7c:	83 c4 20             	add    esp,0x20
c001be7f:	85 c0                	test   eax,eax
c001be81:	0f 85 17 01 00 00    	jne    c001bf9e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001be87:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001be8d:	0f 85 0b 01 00 00    	jne    c001bf9e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001be93:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be96:	85 c0                	test   eax,eax
c001be98:	0f 84 00 01 00 00    	je     c001bf9e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001be9e:	31 d2                	xor    edx,edx
c001bea0:	55                   	push   ebp
c001bea1:	52                   	push   edx
c001bea2:	50                   	push   eax
c001bea3:	56                   	push   esi
c001bea4:	e8 a7 70 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001bea9:	83 c4 10             	add    esp,0x10
c001beac:	85 c0                	test   eax,eax
c001beae:	0f 85 ea 00 00 00    	jne    c001bf9e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001beb4:	83 ec 0c             	sub    esp,0xc
c001beb7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001beba:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001bebe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bec2:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001bec6:	0f af c2             	imul   eax,edx
c001bec9:	50                   	push   eax
c001beca:	e8 55 37 ff ff       	call   c000f624 <malloc>
c001becf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001bed1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bed5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bed8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bedc:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001bee0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001bee4:	0f af c2             	imul   eax,edx
c001bee7:	99                   	cdq    
c001bee8:	52                   	push   edx
c001bee9:	50                   	push   eax
c001beea:	56                   	push   esi
c001beeb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001beee:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bef1:	83 c4 20             	add    esp,0x20
c001bef4:	85 c0                	test   eax,eax
c001bef6:	0f 84 a2 00 00 00    	je     c001bf9e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001befc:	31 d2                	xor    edx,edx
c001befe:	51                   	push   ecx
c001beff:	52                   	push   edx
c001bf00:	50                   	push   eax
c001bf01:	56                   	push   esi
c001bf02:	e8 49 70 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001bf07:	83 c4 10             	add    esp,0x10
c001bf0a:	85 c0                	test   eax,eax
c001bf0c:	0f 85 8c 00 00 00    	jne    c001bf9e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bf12:	83 ec 0c             	sub    esp,0xc
c001bf15:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001bf19:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001bf1d:	31 ed                	xor    ebp,ebp
c001bf1f:	0f af c2             	imul   eax,edx
c001bf22:	50                   	push   eax
c001bf23:	e8 fc 36 ff ff       	call   c000f624 <malloc>
c001bf28:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001bf2a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bf2e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf35:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001bf39:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001bf3d:	0f af c2             	imul   eax,edx
c001bf40:	99                   	cdq    
c001bf41:	52                   	push   edx
c001bf42:	50                   	push   eax
c001bf43:	56                   	push   esi
c001bf44:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bf47:	83 c4 20             	add    esp,0x20
c001bf4a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bf52:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001bf56:	0f 86 80 00 00 00    	jbe    c001bfdc <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001bf5c:	0f b7 fd             	movzx  edi,bp
c001bf5f:	c1 e7 05             	shl    edi,0x5
c001bf62:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001bf66:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001bf69:	75 6b                	jne    c001bfd6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bf6b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001bf6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bf72:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001bf75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bf79:	52                   	push   edx
c001bf7a:	31 d2                	xor    edx,edx
c001bf7c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001bf7f:	52                   	push   edx
c001bf80:	50                   	push   eax
c001bf81:	56                   	push   esi
c001bf82:	e8 c9 6f ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001bf87:	83 c4 10             	add    esp,0x10
c001bf8a:	85 c0                	test   eax,eax
c001bf8c:	74 17                	je     c001bfa5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001bf8e:	83 ec 0c             	sub    esp,0xc
c001bf91:	68 b8 ab 02 c0       	push   0xc002abb8
c001bf96:	e8 3a 69 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001bf9b:	83 c4 10             	add    esp,0x10
c001bf9e:	31 c0                	xor    eax,eax
c001bfa0:	e9 87 00 00 00       	jmp    c001c02c <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001bfa5:	83 ec 0c             	sub    esp,0xc
c001bfa8:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001bfab:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001bfae:	50                   	push   eax
c001bfaf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bfb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bfb7:	56                   	push   esi
c001bfb8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001bfbc:	e8 e0 fb ff ff       	call   c001bba1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001bfc1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bfc5:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001bfc9:	83 c4 20             	add    esp,0x20
c001bfcc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bfd0:	73 04                	jae    c001bfd6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bfd2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bfd6:	45                   	inc    ebp
c001bfd7:	e9 76 ff ff ff       	jmp    c001bf52 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001bfdc:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001bfe0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bfe4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfe8:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001bfee:	83 ec 0c             	sub    esp,0xc
c001bff1:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001bff7:	25 00 f0 ff ff       	and    eax,0xfffff000
c001bffc:	05 00 10 00 00       	add    eax,0x1000
c001c001:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c008:	e8 27 36 ff ff       	call   c000f634 <free>
c001c00d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c010:	e8 1f 36 ff ff       	call   c000f634 <free>
c001c015:	58                   	pop    eax
c001c016:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c01a:	e8 15 36 ff ff       	call   c000f634 <free>
c001c01f:	89 34 24             	mov    DWORD PTR [esp],esi
c001c022:	e8 c9 6e ff ff       	call   c0012ef0 <File::close()>
c001c027:	83 c4 10             	add    esp,0x10
c001c02a:	b0 01                	mov    al,0x1
c001c02c:	83 c4 3c             	add    esp,0x3c
c001c02f:	5b                   	pop    ebx
c001c030:	5e                   	pop    esi
c001c031:	5f                   	pop    edi
c001c032:	5d                   	pop    ebp
c001c033:	c3                   	ret    

c001c034 <Thr::runtimeReferenceHelper()>:
c001c034:	83 ec 18             	sub    esp,0x18
c001c037:	68 c0 ab 02 c0       	push   0xc002abc0
c001c03c:	e8 94 68 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001c041:	fa                   	cli    
c001c042:	83 c4 10             	add    esp,0x10
c001c045:	eb fe                	jmp    c001c045 <Thr::runtimeReferenceHelper()+0x11>

c001c047 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c047:	57                   	push   edi
c001c048:	56                   	push   esi
c001c049:	53                   	push   ebx
c001c04a:	31 db                	xor    ebx,ebx
c001c04c:	39 1d 00 e4 02 c0    	cmp    DWORD PTR ds:0xc002e400,ebx
c001c052:	7e 3c                	jle    c001c090 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c054:	8b 34 9d 80 e3 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd1c80]
c001c05b:	31 ff                	xor    edi,edi
c001c05d:	39 3c 9d 80 e2 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd1d80],edi
c001c064:	7e 27                	jle    c001c08d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c066:	50                   	push   eax
c001c067:	50                   	push   eax
c001c068:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c06c:	8b 06                	mov    eax,DWORD PTR [esi]
c001c06e:	03 04 9d 00 e3 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd1d00]
c001c075:	50                   	push   eax
c001c076:	e8 39 47 fe ff       	call   c00007b4 <strcmp>
c001c07b:	83 c4 10             	add    esp,0x10
c001c07e:	85 c0                	test   eax,eax
c001c080:	75 05                	jne    c001c087 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c082:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c085:	eb 0b                	jmp    c001c092 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c087:	83 c6 10             	add    esi,0x10
c001c08a:	47                   	inc    edi
c001c08b:	eb d0                	jmp    c001c05d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c08d:	43                   	inc    ebx
c001c08e:	eb bc                	jmp    c001c04c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c090:	31 c0                	xor    eax,eax
c001c092:	5b                   	pop    ebx
c001c093:	5e                   	pop    esi
c001c094:	5f                   	pop    edi
c001c095:	c3                   	ret    

c001c096 <Thr::loadKernelSymbolTable(char const*)>:
c001c096:	55                   	push   ebp
c001c097:	57                   	push   edi
c001c098:	56                   	push   esi
c001c099:	53                   	push   ebx
c001c09a:	83 ec 68             	sub    esp,0x68
c001c09d:	8b 35 54 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e454
c001c0a3:	68 14 01 00 00       	push   0x114
c001c0a8:	e8 77 35 ff ff       	call   c000f624 <malloc>
c001c0ad:	83 c4 0c             	add    esp,0xc
c001c0b0:	89 c3                	mov    ebx,eax
c001c0b2:	56                   	push   esi
c001c0b3:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c0b7:	50                   	push   eax
c001c0b8:	e8 71 6d ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001c0bd:	5e                   	pop    esi
c001c0be:	5f                   	pop    edi
c001c0bf:	6a 01                	push   0x1
c001c0c1:	53                   	push   ebx
c001c0c2:	e8 cb 6d ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001c0c7:	83 c4 10             	add    esp,0x10
c001c0ca:	31 d2                	xor    edx,edx
c001c0cc:	85 c0                	test   eax,eax
c001c0ce:	0f 85 74 02 00 00    	jne    c001c348 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001c0d4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c0dc:	83 ec 0c             	sub    esp,0xc
c001c0df:	6a 34                	push   0x34
c001c0e1:	e8 3e 35 ff ff       	call   c000f624 <malloc>
c001c0e6:	59                   	pop    ecx
c001c0e7:	89 c7                	mov    edi,eax
c001c0e9:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c0ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0ef:	56                   	push   esi
c001c0f0:	57                   	push   edi
c001c0f1:	6a 00                	push   0x0
c001c0f3:	6a 34                	push   0x34
c001c0f5:	53                   	push   ebx
c001c0f6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c0f9:	83 c4 20             	add    esp,0x20
c001c0fc:	85 c0                	test   eax,eax
c001c0fe:	74 17                	je     c001c117 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001c100:	83 ec 0c             	sub    esp,0xc
c001c103:	68 e2 ab 02 c0       	push   0xc002abe2
c001c108:	e8 a8 da ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001c10d:	83 c4 10             	add    esp,0x10
c001c110:	31 d2                	xor    edx,edx
c001c112:	e9 31 02 00 00       	jmp    c001c348 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001c117:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c11d:	75 e1                	jne    c001c100 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001c11f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c122:	85 c0                	test   eax,eax
c001c124:	74 da                	je     c001c100 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001c126:	52                   	push   edx
c001c127:	31 d2                	xor    edx,edx
c001c129:	52                   	push   edx
c001c12a:	50                   	push   eax
c001c12b:	53                   	push   ebx
c001c12c:	e8 1f 6e ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c131:	83 c4 10             	add    esp,0x10
c001c134:	85 c0                	test   eax,eax
c001c136:	75 c8                	jne    c001c100 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001c138:	83 ec 0c             	sub    esp,0xc
c001c13b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c13f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c143:	31 ed                	xor    ebp,ebp
c001c145:	0f af c2             	imul   eax,edx
c001c148:	50                   	push   eax
c001c149:	e8 d6 34 ff ff       	call   c000f624 <malloc>
c001c14e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c150:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c154:	89 34 24             	mov    DWORD PTR [esp],esi
c001c157:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c15b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c15f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c163:	0f af c2             	imul   eax,edx
c001c166:	99                   	cdq    
c001c167:	52                   	push   edx
c001c168:	50                   	push   eax
c001c169:	53                   	push   ebx
c001c16a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c16d:	83 c4 20             	add    esp,0x20
c001c170:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c178:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c180:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c188:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c190:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c194:	0f 86 aa 00 00 00    	jbe    c001c244 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001c19a:	0f b7 f5             	movzx  esi,bp
c001c19d:	6b f6 28             	imul   esi,esi,0x28
c001c1a0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c1a4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c1a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c1ab:	50                   	push   eax
c001c1ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c1b0:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c1b4:	8b 16                	mov    edx,DWORD PTR [esi]
c001c1b6:	6b c0 28             	imul   eax,eax,0x28
c001c1b9:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c1bd:	89 d0                	mov    eax,edx
c001c1bf:	31 d2                	xor    edx,edx
c001c1c1:	52                   	push   edx
c001c1c2:	50                   	push   eax
c001c1c3:	53                   	push   ebx
c001c1c4:	e8 87 6d ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c1c9:	83 c4 0c             	add    esp,0xc
c001c1cc:	6a 20                	push   0x20
c001c1ce:	6a 00                	push   0x0
c001c1d0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c1d4:	52                   	push   edx
c001c1d5:	e8 ea 44 fe ff       	call   c00006c4 <memset>
c001c1da:	58                   	pop    eax
c001c1db:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c1dd:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c1e1:	51                   	push   ecx
c001c1e2:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c1e6:	52                   	push   edx
c001c1e7:	6a 00                	push   0x0
c001c1e9:	6a 1f                	push   0x1f
c001c1eb:	53                   	push   ebx
c001c1ec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c1ef:	83 c4 18             	add    esp,0x18
c001c1f2:	68 f9 ab 02 c0       	push   0xc002abf9
c001c1f7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c1fb:	52                   	push   edx
c001c1fc:	e8 b3 45 fe ff       	call   c00007b4 <strcmp>
c001c201:	83 c4 10             	add    esp,0x10
c001c204:	85 c0                	test   eax,eax
c001c206:	75 0f                	jne    c001c217 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001c208:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c20b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c20f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c213:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c217:	50                   	push   eax
c001c218:	50                   	push   eax
c001c219:	68 01 ac 02 c0       	push   0xc002ac01
c001c21e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c222:	50                   	push   eax
c001c223:	e8 8c 45 fe ff       	call   c00007b4 <strcmp>
c001c228:	83 c4 10             	add    esp,0x10
c001c22b:	85 c0                	test   eax,eax
c001c22d:	75 0f                	jne    c001c23e <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001c22f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c232:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c236:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c23a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c23e:	45                   	inc    ebp
c001c23f:	e9 4c ff ff ff       	jmp    c001c190 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001c244:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c249:	75 10                	jne    c001c25b <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001c24b:	83 ec 0c             	sub    esp,0xc
c001c24e:	68 09 ac 02 c0       	push   0xc002ac09
c001c253:	e8 5d d9 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001c258:	83 c4 10             	add    esp,0x10
c001c25b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c260:	75 10                	jne    c001c272 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001c262:	83 ec 0c             	sub    esp,0xc
c001c265:	68 09 ac 02 c0       	push   0xc002ac09
c001c26a:	e8 46 d9 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001c26f:	83 c4 10             	add    esp,0x10
c001c272:	31 d2                	xor    edx,edx
c001c274:	50                   	push   eax
c001c275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c279:	52                   	push   edx
c001c27a:	50                   	push   eax
c001c27b:	53                   	push   ebx
c001c27c:	e8 cf 6c ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c281:	5a                   	pop    edx
c001c282:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c286:	e8 99 33 ff ff       	call   c000f624 <malloc>
c001c28b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c28f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c293:	31 c9                	xor    ecx,ecx
c001c295:	5e                   	pop    esi
c001c296:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c298:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c29c:	55                   	push   ebp
c001c29d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2a1:	51                   	push   ecx
c001c2a2:	52                   	push   edx
c001c2a3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c2a7:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c2ab:	53                   	push   ebx
c001c2ac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c2af:	83 c4 14             	add    esp,0x14
c001c2b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c2b6:	e8 69 33 ff ff       	call   c000f624 <malloc>
c001c2bb:	89 c6                	mov    esi,eax
c001c2bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c2bf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c2c2:	56                   	push   esi
c001c2c3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c2c7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c2cb:	51                   	push   ecx
c001c2cc:	52                   	push   edx
c001c2cd:	53                   	push   ebx
c001c2ce:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c2d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c2d5:	8b 15 00 e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e400
c001c2db:	83 c4 1c             	add    esp,0x1c
c001c2de:	c1 e8 04             	shr    eax,0x4
c001c2e1:	89 04 95 80 e2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1d80],eax
c001c2e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c2ec:	31 d2                	xor    edx,edx
c001c2ee:	52                   	push   edx
c001c2ef:	50                   	push   eax
c001c2f0:	53                   	push   ebx
c001c2f1:	e8 5a 6c ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c2f6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c2f8:	31 d2                	xor    edx,edx
c001c2fa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c2fd:	56                   	push   esi
c001c2fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c302:	52                   	push   edx
c001c303:	50                   	push   eax
c001c304:	53                   	push   ebx
c001c305:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c308:	83 c4 14             	add    esp,0x14
c001c30b:	53                   	push   ebx
c001c30c:	e8 df 6b ff ff       	call   c0012ef0 <File::close()>
c001c311:	5d                   	pop    ebp
c001c312:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c316:	e8 19 33 ff ff       	call   c000f634 <free>
c001c31b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c31e:	e8 11 33 ff ff       	call   c000f634 <free>
c001c323:	a1 00 e4 02 c0       	mov    eax,ds:0xc002e400
c001c328:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c32c:	8d 50 01             	lea    edx,[eax+0x1]
c001c32f:	89 0c 85 80 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1c80],ecx
c001c336:	89 15 00 e4 02 c0    	mov    DWORD PTR ds:0xc002e400,edx
c001c33c:	89 34 85 00 e3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d00],esi
c001c343:	83 c4 10             	add    esp,0x10
c001c346:	b2 01                	mov    dl,0x1
c001c348:	83 c4 5c             	add    esp,0x5c
c001c34b:	88 d0                	mov    al,dl
c001c34d:	5b                   	pop    ebx
c001c34e:	5e                   	pop    esi
c001c34f:	5f                   	pop    edi
c001c350:	5d                   	pop    ebp
c001c351:	c3                   	ret    

c001c352 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c352:	55                   	push   ebp
c001c353:	57                   	push   edi
c001c354:	56                   	push   esi
c001c355:	53                   	push   ebx
c001c356:	81 ec 68 03 00 00    	sub    esp,0x368
c001c35c:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c363:	8b 1d 54 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e454
c001c369:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c36d:	68 14 01 00 00       	push   0x114
c001c372:	e8 ad 32 ff ff       	call   c000f624 <malloc>
c001c377:	83 c4 0c             	add    esp,0xc
c001c37a:	89 c5                	mov    ebp,eax
c001c37c:	53                   	push   ebx
c001c37d:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c384:	50                   	push   eax
c001c385:	e8 a4 6a ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001c38a:	5e                   	pop    esi
c001c38b:	5f                   	pop    edi
c001c38c:	6a 01                	push   0x1
c001c38e:	55                   	push   ebp
c001c38f:	e8 fe 6a ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001c394:	83 c4 10             	add    esp,0x10
c001c397:	85 c0                	test   eax,eax
c001c399:	0f 85 8d 06 00 00    	jne    c001ca2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c39f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c3a7:	83 ec 0c             	sub    esp,0xc
c001c3aa:	6a 34                	push   0x34
c001c3ac:	e8 73 32 ff ff       	call   c000f624 <malloc>
c001c3b1:	5b                   	pop    ebx
c001c3b2:	89 c7                	mov    edi,eax
c001c3b4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c3b8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c3bb:	53                   	push   ebx
c001c3bc:	57                   	push   edi
c001c3bd:	6a 00                	push   0x0
c001c3bf:	6a 34                	push   0x34
c001c3c1:	55                   	push   ebp
c001c3c2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c3c5:	83 c4 20             	add    esp,0x20
c001c3c8:	85 c0                	test   eax,eax
c001c3ca:	0f 85 5c 06 00 00    	jne    c001ca2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c3d0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c3d6:	0f 85 50 06 00 00    	jne    c001ca2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c3dc:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c3df:	85 c0                	test   eax,eax
c001c3e1:	0f 84 45 06 00 00    	je     c001ca2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c3e7:	31 d2                	xor    edx,edx
c001c3e9:	51                   	push   ecx
c001c3ea:	52                   	push   edx
c001c3eb:	50                   	push   eax
c001c3ec:	55                   	push   ebp
c001c3ed:	e8 5e 6b ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c3f2:	83 c4 10             	add    esp,0x10
c001c3f5:	85 c0                	test   eax,eax
c001c3f7:	0f 85 2f 06 00 00    	jne    c001ca2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c3fd:	83 ec 0c             	sub    esp,0xc
c001c400:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c403:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c407:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c40b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c40f:	0f af c2             	imul   eax,edx
c001c412:	50                   	push   eax
c001c413:	e8 0c 32 ff ff       	call   c000f624 <malloc>
c001c418:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c41b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c41f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c422:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c426:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c42a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c42e:	0f af c2             	imul   eax,edx
c001c431:	99                   	cdq    
c001c432:	52                   	push   edx
c001c433:	50                   	push   eax
c001c434:	55                   	push   ebp
c001c435:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c438:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c43b:	83 c4 20             	add    esp,0x20
c001c43e:	85 c0                	test   eax,eax
c001c440:	0f 84 e6 05 00 00    	je     c001ca2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c446:	52                   	push   edx
c001c447:	31 d2                	xor    edx,edx
c001c449:	52                   	push   edx
c001c44a:	50                   	push   eax
c001c44b:	55                   	push   ebp
c001c44c:	e8 ff 6a ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c451:	83 c4 10             	add    esp,0x10
c001c454:	85 c0                	test   eax,eax
c001c456:	0f 85 d0 05 00 00    	jne    c001ca2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c45c:	83 ec 0c             	sub    esp,0xc
c001c45f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c463:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c467:	31 f6                	xor    esi,esi
c001c469:	0f af c2             	imul   eax,edx
c001c46c:	50                   	push   eax
c001c46d:	e8 b2 31 ff ff       	call   c000f624 <malloc>
c001c472:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c475:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c479:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c47c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c480:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c484:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c488:	0f af c2             	imul   eax,edx
c001c48b:	99                   	cdq    
c001c48c:	52                   	push   edx
c001c48d:	50                   	push   eax
c001c48e:	55                   	push   ebp
c001c48f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c492:	83 c4 20             	add    esp,0x20
c001c495:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c499:	0f 86 8a 00 00 00    	jbe    c001c529 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c49f:	0f b7 de             	movzx  ebx,si
c001c4a2:	c1 e3 05             	shl    ebx,0x5
c001c4a5:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c4a9:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c4ac:	75 75                	jne    c001c523 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c4ae:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c4b1:	31 d2                	xor    edx,edx
c001c4b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c4b7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c4ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4be:	50                   	push   eax
c001c4bf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c4c2:	52                   	push   edx
c001c4c3:	50                   	push   eax
c001c4c4:	55                   	push   ebp
c001c4c5:	e8 86 6a ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c4ca:	83 c4 10             	add    esp,0x10
c001c4cd:	85 c0                	test   eax,eax
c001c4cf:	0f 85 57 05 00 00    	jne    c001ca2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001c4d5:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c4dc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c4df:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c4e3:	31 d2                	xor    edx,edx
c001c4e5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c4e9:	83 ec 0c             	sub    esp,0xc
c001c4ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c4f0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c4f7:	50                   	push   eax
c001c4f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c4fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c500:	52                   	push   edx
c001c501:	50                   	push   eax
c001c502:	55                   	push   ebp
c001c503:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c506:	83 c4 1c             	add    esp,0x1c
c001c509:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c50c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c50f:	50                   	push   eax
c001c510:	6a 00                	push   0x0
c001c512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c516:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c51a:	50                   	push   eax
c001c51b:	e8 a4 41 fe ff       	call   c00006c4 <memset>
c001c520:	83 c4 10             	add    esp,0x10
c001c523:	46                   	inc    esi
c001c524:	e9 6c ff ff ff       	jmp    c001c495 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c529:	53                   	push   ebx
c001c52a:	31 db                	xor    ebx,ebx
c001c52c:	68 00 01 00 00       	push   0x100
c001c531:	6a 00                	push   0x0
c001c533:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c537:	50                   	push   eax
c001c538:	e8 87 41 fe ff       	call   c00006c4 <memset>
c001c53d:	83 c4 0c             	add    esp,0xc
c001c540:	68 00 01 00 00       	push   0x100
c001c545:	6a 00                	push   0x0
c001c547:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c54e:	50                   	push   eax
c001c54f:	e8 70 41 fe ff       	call   c00006c4 <memset>
c001c554:	83 c4 10             	add    esp,0x10
c001c557:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c55f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c567:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c56f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c577:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c57f:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c583:	0f 86 30 01 00 00    	jbe    c001c6b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c589:	0f b7 f3             	movzx  esi,bx
c001c58c:	6b f6 28             	imul   esi,esi,0x28
c001c58f:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c593:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c596:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c59a:	52                   	push   edx
c001c59b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c59f:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c5a3:	8b 06                	mov    eax,DWORD PTR [esi]
c001c5a5:	6b d2 28             	imul   edx,edx,0x28
c001c5a8:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c5ac:	31 d2                	xor    edx,edx
c001c5ae:	52                   	push   edx
c001c5af:	50                   	push   eax
c001c5b0:	55                   	push   ebp
c001c5b1:	e8 9a 69 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c5b6:	83 c4 0c             	add    esp,0xc
c001c5b9:	6a 20                	push   0x20
c001c5bb:	6a 00                	push   0x0
c001c5bd:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c5c4:	51                   	push   ecx
c001c5c5:	e8 fa 40 fe ff       	call   c00006c4 <memset>
c001c5ca:	59                   	pop    ecx
c001c5cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c5ce:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c5d2:	52                   	push   edx
c001c5d3:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c5da:	51                   	push   ecx
c001c5db:	6a 00                	push   0x0
c001c5dd:	6a 1f                	push   0x1f
c001c5df:	55                   	push   ebp
c001c5e0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5e3:	83 c4 1c             	add    esp,0x1c
c001c5e6:	6a 09                	push   0x9
c001c5e8:	68 23 ac 02 c0       	push   0xc002ac23
c001c5ed:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c5f4:	51                   	push   ecx
c001c5f5:	e8 43 40 fe ff       	call   c000063d <memcmp>
c001c5fa:	83 c4 10             	add    esp,0x10
c001c5fd:	85 c0                	test   eax,eax
c001c5ff:	75 21                	jne    c001c622 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c601:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c605:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c609:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c60d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c611:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c614:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c61b:	89 d0                	mov    eax,edx
c001c61d:	40                   	inc    eax
c001c61e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c622:	50                   	push   eax
c001c623:	6a 09                	push   0x9
c001c625:	68 2d ac 02 c0       	push   0xc002ac2d
c001c62a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c631:	50                   	push   eax
c001c632:	e8 06 40 fe ff       	call   c000063d <memcmp>
c001c637:	83 c4 10             	add    esp,0x10
c001c63a:	85 c0                	test   eax,eax
c001c63c:	75 21                	jne    c001c65f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c63e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c642:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c646:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c64a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c64e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c651:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c658:	89 d0                	mov    eax,edx
c001c65a:	40                   	inc    eax
c001c65b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c65f:	50                   	push   eax
c001c660:	50                   	push   eax
c001c661:	68 f9 ab 02 c0       	push   0xc002abf9
c001c666:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c66d:	50                   	push   eax
c001c66e:	e8 41 41 fe ff       	call   c00007b4 <strcmp>
c001c673:	83 c4 10             	add    esp,0x10
c001c676:	85 c0                	test   eax,eax
c001c678:	75 0f                	jne    c001c689 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c67a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c67d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c681:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c685:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c689:	50                   	push   eax
c001c68a:	50                   	push   eax
c001c68b:	68 01 ac 02 c0       	push   0xc002ac01
c001c690:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c697:	50                   	push   eax
c001c698:	e8 17 41 fe ff       	call   c00007b4 <strcmp>
c001c69d:	83 c4 10             	add    esp,0x10
c001c6a0:	85 c0                	test   eax,eax
c001c6a2:	75 0f                	jne    c001c6b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c6a4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c6a7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c6ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c6af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c6b3:	43                   	inc    ebx
c001c6b4:	e9 c6 fe ff ff       	jmp    c001c57f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c6b9:	31 d2                	xor    edx,edx
c001c6bb:	50                   	push   eax
c001c6bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c6c0:	52                   	push   edx
c001c6c1:	50                   	push   eax
c001c6c2:	55                   	push   ebp
c001c6c3:	e8 88 68 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c6c8:	58                   	pop    eax
c001c6c9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6cd:	e8 52 2f ff ff       	call   c000f624 <malloc>
c001c6d2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c6d5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c6d9:	31 d2                	xor    edx,edx
c001c6db:	58                   	pop    eax
c001c6dc:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c6e0:	53                   	push   ebx
c001c6e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c6e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c6e9:	52                   	push   edx
c001c6ea:	50                   	push   eax
c001c6eb:	55                   	push   ebp
c001c6ec:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c6ef:	83 c4 14             	add    esp,0x14
c001c6f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c6f6:	e8 29 2f ff ff       	call   c000f624 <malloc>
c001c6fb:	31 d2                	xor    edx,edx
c001c6fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c701:	83 c4 0c             	add    esp,0xc
c001c704:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c708:	52                   	push   edx
c001c709:	50                   	push   eax
c001c70a:	55                   	push   ebp
c001c70b:	e8 40 68 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c710:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c713:	31 d2                	xor    edx,edx
c001c715:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c718:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c71c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c720:	52                   	push   edx
c001c721:	50                   	push   eax
c001c722:	55                   	push   ebp
c001c723:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c726:	83 c4 20             	add    esp,0x20
c001c729:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c731:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c735:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001c739:	0f 84 f1 02 00 00    	je     c001ca30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001c73f:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001c746:	31 d2                	xor    edx,edx
c001c748:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c74c:	c1 e8 03             	shr    eax,0x3
c001c74f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001c753:	51                   	push   ecx
c001c754:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c758:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c75c:	52                   	push   edx
c001c75d:	50                   	push   eax
c001c75e:	55                   	push   ebp
c001c75f:	e8 ec 67 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001c764:	5b                   	pop    ebx
c001c765:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c769:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c770:	e8 af 2e ff ff       	call   c000f624 <malloc>
c001c775:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c778:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c77c:	31 d2                	xor    edx,edx
c001c77e:	5e                   	pop    esi
c001c77f:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c783:	50                   	push   eax
c001c784:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c788:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c78c:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c793:	52                   	push   edx
c001c794:	50                   	push   eax
c001c795:	55                   	push   ebp
c001c796:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c799:	83 c4 20             	add    esp,0x20
c001c79c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c7a4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c7a8:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001c7ac:	0f 8d 62 02 00 00    	jge    c001ca14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001c7b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c7b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7ba:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001c7bf:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001c7c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c7c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c7ca:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001c7ce:	89 d8                	mov    eax,ebx
c001c7d0:	c1 e8 08             	shr    eax,0x8
c001c7d3:	89 c6                	mov    esi,eax
c001c7d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c7d9:	c1 e6 04             	shl    esi,0x4
c001c7dc:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001c7e0:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001c7e3:	85 d2                	test   edx,edx
c001c7e5:	0f 85 bf 00 00 00    	jne    c001c8aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c7eb:	83 ec 0c             	sub    esp,0xc
c001c7ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c7f2:	03 06                	add    eax,DWORD PTR [esi]
c001c7f4:	50                   	push   eax
c001c7f5:	e8 4d f8 ff ff       	call   c001c047 <Thr::getAddressOfKernelSymbol(char const*)>
c001c7fa:	83 c4 10             	add    esp,0x10
c001c7fd:	89 c2                	mov    edx,eax
c001c7ff:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001c804:	85 c0                	test   eax,eax
c001c806:	0f 85 9e 00 00 00    	jne    c001c8aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c80c:	83 ec 0c             	sub    esp,0xc
c001c80f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c813:	03 06                	add    eax,DWORD PTR [esi]
c001c815:	50                   	push   eax
c001c816:	e8 c3 1a ff ff       	call   c000e2de <Krnl::resolveCompatibilitySymbol(char*)>
c001c81b:	83 c4 10             	add    esp,0x10
c001c81e:	89 c2                	mov    edx,eax
c001c820:	85 c0                	test   eax,eax
c001c822:	0f 85 82 00 00 00    	jne    c001c8aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001c828:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c82c:	50                   	push   eax
c001c82d:	50                   	push   eax
c001c82e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c832:	03 06                	add    eax,DWORD PTR [esi]
c001c834:	50                   	push   eax
c001c835:	68 37 ac 02 c0       	push   0xc002ac37
c001c83a:	e8 96 60 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001c83f:	58                   	pop    eax
c001c840:	5a                   	pop    edx
c001c841:	68 51 ac 02 c0       	push   0xc002ac51
c001c846:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c84d:	50                   	push   eax
c001c84e:	e8 10 3f fe ff       	call   c0000763 <strcpy>
c001c853:	59                   	pop    ecx
c001c854:	58                   	pop    eax
c001c855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c859:	03 06                	add    eax,DWORD PTR [esi]
c001c85b:	50                   	push   eax
c001c85c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c863:	50                   	push   eax
c001c864:	e8 b1 3f fe ff       	call   c000081a <strcat>
c001c869:	58                   	pop    eax
c001c86a:	5a                   	pop    edx
c001c86b:	68 e7 ac 02 c0       	push   0xc002ace7
c001c870:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c877:	50                   	push   eax
c001c878:	e8 9d 3f fe ff       	call   c000081a <strcat>
c001c87d:	83 c4 10             	add    esp,0x10
c001c880:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c885:	0f 84 43 01 00 00    	je     c001c9ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c88b:	83 ec 0c             	sub    esp,0xc
c001c88e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c895:	50                   	push   eax
c001c896:	e8 1a d3 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001c89b:	83 c4 10             	add    esp,0x10
c001c89e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001c8a2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c8a6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001c8aa:	80 fb 01             	cmp    bl,0x1
c001c8ad:	75 7d                	jne    c001c92c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001c8af:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c8b6:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c8ba:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001c8be:	01 ce                	add    esi,ecx
c001c8c0:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001c8c6:	0f 94 c0             	sete   al
c001c8c9:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c8cf:	0f 94 c3             	sete   bl
c001c8d2:	09 c3                	or     ebx,eax
c001c8d4:	8b 06                	mov    eax,DWORD PTR [esi]
c001c8d6:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001c8db:	74 36                	je     c001c913 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001c8dd:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001c8e0:	84 db                	test   bl,bl
c001c8e2:	75 0a                	jne    c001c8ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001c8e4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c8e8:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001c8ec:	76 37                	jbe    c001c925 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c8ee:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001c8f2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c8f7:	0f 84 d1 00 00 00    	je     c001c9ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c8fd:	83 ec 0c             	sub    esp,0xc
c001c900:	68 68 ac 02 c0       	push   0xc002ac68
c001c905:	e8 ab d2 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001c90a:	83 c4 10             	add    esp,0x10
c001c90d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c911:	eb 12                	jmp    c001c925 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c913:	01 c1                	add    ecx,eax
c001c915:	84 db                	test   bl,bl
c001c917:	75 0c                	jne    c001c925 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c919:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c91d:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001c921:	77 02                	ja     c001c925 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001c923:	01 d1                	add    ecx,edx
c001c925:	89 0e                	mov    DWORD PTR [esi],ecx
c001c927:	e9 df 00 00 00       	jmp    c001ca0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001c92c:	80 fb 02             	cmp    bl,0x2
c001c92f:	75 71                	jne    c001c9a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001c931:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001c938:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001c93c:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001c940:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001c946:	74 15                	je     c001c95d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001c948:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c94e:	74 0d                	je     c001c95d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001c950:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c954:	83 e8 04             	sub    eax,0x4
c001c957:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001c95b:	76 1f                	jbe    c001c97c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001c95d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001c961:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c966:	74 66                	je     c001c9ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c968:	83 ec 0c             	sub    esp,0xc
c001c96b:	68 84 ac 02 c0       	push   0xc002ac84
c001c970:	e8 40 d2 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001c975:	83 c4 10             	add    esp,0x10
c001c978:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c97c:	8b 06                	mov    eax,DWORD PTR [esi]
c001c97e:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001c983:	74 13                	je     c001c998 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001c985:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c989:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001c990:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001c994:	01 c8                	add    eax,ecx
c001c996:	eb 04                	jmp    c001c99c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001c998:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001c99c:	01 c2                	add    edx,eax
c001c99e:	89 16                	mov    DWORD PTR [esi],edx
c001c9a0:	eb 69                	jmp    c001ca0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001c9a2:	0f b6 db             	movzx  ebx,bl
c001c9a5:	50                   	push   eax
c001c9a6:	50                   	push   eax
c001c9a7:	53                   	push   ebx
c001c9a8:	68 a0 ac 02 c0       	push   0xc002aca0
c001c9ad:	e8 23 5f ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001c9b2:	83 c4 10             	add    esp,0x10
c001c9b5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001c9ba:	74 12                	je     c001c9ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001c9bc:	83 ec 0c             	sub    esp,0xc
c001c9bf:	68 ab ac 02 c0       	push   0xc002acab
c001c9c4:	e8 ec d1 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001c9c9:	83 c4 10             	add    esp,0x10
c001c9cc:	eb 3d                	jmp    c001ca0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001c9ce:	83 ec 0c             	sub    esp,0xc
c001c9d1:	55                   	push   ebp
c001c9d2:	e8 19 65 ff ff       	call   c0012ef0 <File::close()>
c001c9d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c9da:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c9dd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c9e0:	59                   	pop    ecx
c001c9e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c9e5:	e8 4a 2c ff ff       	call   c000f634 <free>
c001c9ea:	5b                   	pop    ebx
c001c9eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9ef:	e8 40 2c ff ff       	call   c000f634 <free>
c001c9f4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c9f7:	e8 38 2c ff ff       	call   c000f634 <free>
c001c9fc:	5e                   	pop    esi
c001c9fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca01:	e8 2e 2c ff ff       	call   c000f634 <free>
c001ca06:	83 c4 10             	add    esp,0x10
c001ca09:	eb 21                	jmp    c001ca2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ca0b:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001ca0f:	e9 90 fd ff ff       	jmp    c001c7a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001ca14:	83 ec 0c             	sub    esp,0xc
c001ca17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ca1b:	e8 14 2c ff ff       	call   c000f634 <free>
c001ca20:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001ca24:	83 c4 10             	add    esp,0x10
c001ca27:	e9 05 fd ff ff       	jmp    c001c731 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001ca2c:	31 c0                	xor    eax,eax
c001ca2e:	eb 33                	jmp    c001ca63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001ca30:	83 ec 0c             	sub    esp,0xc
c001ca33:	55                   	push   ebp
c001ca34:	e8 b7 64 ff ff       	call   c0012ef0 <File::close()>
c001ca39:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ca3c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ca3f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ca42:	58                   	pop    eax
c001ca43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca47:	e8 e8 2b ff ff       	call   c000f634 <free>
c001ca4c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca4f:	e8 e0 2b ff ff       	call   c000f634 <free>
c001ca54:	5a                   	pop    edx
c001ca55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca59:	e8 d6 2b ff ff       	call   c000f634 <free>
c001ca5e:	83 c4 10             	add    esp,0x10
c001ca61:	b0 01                	mov    al,0x1
c001ca63:	81 c4 5c 03 00 00    	add    esp,0x35c
c001ca69:	5b                   	pop    ebx
c001ca6a:	5e                   	pop    esi
c001ca6b:	5f                   	pop    edi
c001ca6c:	5d                   	pop    ebp
c001ca6d:	c3                   	ret    

c001ca6e <Thr::getDriverBaseFromAddress(unsigned long)>:
c001ca6e:	56                   	push   esi
c001ca6f:	31 d2                	xor    edx,edx
c001ca71:	53                   	push   ebx
c001ca72:	8b 1d 60 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc60
c001ca78:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca7c:	39 d3                	cmp    ebx,edx
c001ca7e:	7e 1b                	jle    c001ca9b <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001ca80:	8b 04 95 80 de 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2180]
c001ca87:	39 c8                	cmp    eax,ecx
c001ca89:	77 0d                	ja     c001ca98 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001ca8b:	8b 34 95 80 dc 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd2380]
c001ca92:	01 c6                	add    esi,eax
c001ca94:	39 ce                	cmp    esi,ecx
c001ca96:	77 05                	ja     c001ca9d <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001ca98:	42                   	inc    edx
c001ca99:	eb e1                	jmp    c001ca7c <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001ca9b:	31 c0                	xor    eax,eax
c001ca9d:	5b                   	pop    ebx
c001ca9e:	5e                   	pop    esi
c001ca9f:	c3                   	ret    

c001caa0 <Thr::getDriverNameFromAddress(unsigned long)>:
c001caa0:	53                   	push   ebx
c001caa1:	31 c0                	xor    eax,eax
c001caa3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001caa7:	8b 1d 60 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc60
c001caad:	39 c3                	cmp    ebx,eax
c001caaf:	7e 22                	jle    c001cad3 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cab1:	8b 14 85 80 de 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2180]
c001cab8:	39 ca                	cmp    edx,ecx
c001caba:	77 14                	ja     c001cad0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cabc:	03 14 85 80 dc 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd2380]
c001cac3:	39 ca                	cmp    edx,ecx
c001cac5:	76 09                	jbe    c001cad0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cac7:	8b 04 85 80 e0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1f80]
c001cace:	eb 05                	jmp    c001cad5 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cad0:	40                   	inc    eax
c001cad1:	eb da                	jmp    c001caad <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cad3:	31 c0                	xor    eax,eax
c001cad5:	5b                   	pop    ebx
c001cad6:	c3                   	ret    

c001cad7 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cad7:	53                   	push   ebx
c001cad8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cadc:	53                   	push   ebx
c001cadd:	e8 8c ff ff ff       	call   c001ca6e <Thr::getDriverBaseFromAddress(unsigned long)>
c001cae2:	5a                   	pop    edx
c001cae3:	31 d2                	xor    edx,edx
c001cae5:	85 c0                	test   eax,eax
c001cae7:	74 04                	je     c001caed <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cae9:	89 da                	mov    edx,ebx
c001caeb:	29 c2                	sub    edx,eax
c001caed:	89 d0                	mov    eax,edx
c001caef:	5b                   	pop    ebx
c001caf0:	c3                   	ret    

c001caf1 <Thr::loadDLL(char const*, bool)>:
c001caf1:	55                   	push   ebp
c001caf2:	57                   	push   edi
c001caf3:	56                   	push   esi
c001caf4:	53                   	push   ebx
c001caf5:	81 ec 34 01 00 00    	sub    esp,0x134
c001cafb:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001cb02:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001cb09:	56                   	push   esi
c001cb0a:	68 c3 ac 02 c0       	push   0xc002acc3
c001cb0f:	e8 c1 5d ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001cb14:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001cb1b:	e8 04 2b ff ff       	call   c000f624 <malloc>
c001cb20:	83 c4 0c             	add    esp,0xc
c001cb23:	89 c3                	mov    ebx,eax
c001cb25:	ff 35 54 e4 02 c0    	push   DWORD PTR ds:0xc002e454
c001cb2b:	56                   	push   esi
c001cb2c:	50                   	push   eax
c001cb2d:	e8 fc 62 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001cb32:	83 c4 10             	add    esp,0x10
c001cb35:	85 db                	test   ebx,ebx
c001cb37:	75 3c                	jne    c001cb75 <Thr::loadDLL(char const*, bool)+0x84>
c001cb39:	89 e8                	mov    eax,ebp
c001cb3b:	84 c0                	test   al,al
c001cb3d:	0f 84 b0 01 00 00    	je     c001ccf3 <Thr::loadDLL(char const*, bool)+0x202>
c001cb43:	50                   	push   eax
c001cb44:	50                   	push   eax
c001cb45:	68 d4 ac 02 c0       	push   0xc002acd4
c001cb4a:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001cb4e:	57                   	push   edi
c001cb4f:	e8 0f 3c fe ff       	call   c0000763 <strcpy>
c001cb54:	58                   	pop    eax
c001cb55:	5a                   	pop    edx
c001cb56:	56                   	push   esi
c001cb57:	57                   	push   edi
c001cb58:	e8 bd 3c fe ff       	call   c000081a <strcat>
c001cb5d:	59                   	pop    ecx
c001cb5e:	58                   	pop    eax
c001cb5f:	68 e7 ac 02 c0       	push   0xc002ace7
c001cb64:	57                   	push   edi
c001cb65:	e8 b0 3c fe ff       	call   c000081a <strcat>
c001cb6a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb6d:	e8 43 d0 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001cb72:	83 c4 10             	add    esp,0x10
c001cb75:	50                   	push   eax
c001cb76:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001cb7a:	50                   	push   eax
c001cb7b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001cb7f:	50                   	push   eax
c001cb80:	53                   	push   ebx
c001cb81:	e8 b8 65 ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c001cb86:	83 c4 10             	add    esp,0x10
c001cb89:	85 db                	test   ebx,ebx
c001cb8b:	74 0c                	je     c001cb99 <Thr::loadDLL(char const*, bool)+0xa8>
c001cb8d:	83 ec 0c             	sub    esp,0xc
c001cb90:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb92:	53                   	push   ebx
c001cb93:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cb96:	83 c4 10             	add    esp,0x10
c001cb99:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001cb9e:	75 0a                	jne    c001cbaa <Thr::loadDLL(char const*, bool)+0xb9>
c001cba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cba4:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001cba8:	75 3c                	jne    c001cbe6 <Thr::loadDLL(char const*, bool)+0xf5>
c001cbaa:	89 e8                	mov    eax,ebp
c001cbac:	84 c0                	test   al,al
c001cbae:	0f 84 3d 01 00 00    	je     c001ccf1 <Thr::loadDLL(char const*, bool)+0x200>
c001cbb4:	50                   	push   eax
c001cbb5:	50                   	push   eax
c001cbb6:	68 d4 ac 02 c0       	push   0xc002acd4
c001cbbb:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001cbbf:	53                   	push   ebx
c001cbc0:	e8 9e 3b fe ff       	call   c0000763 <strcpy>
c001cbc5:	58                   	pop    eax
c001cbc6:	5a                   	pop    edx
c001cbc7:	56                   	push   esi
c001cbc8:	53                   	push   ebx
c001cbc9:	e8 4c 3c fe ff       	call   c000081a <strcat>
c001cbce:	59                   	pop    ecx
c001cbcf:	5f                   	pop    edi
c001cbd0:	68 e7 ac 02 c0       	push   0xc002ace7
c001cbd5:	53                   	push   ebx
c001cbd6:	e8 3f 3c fe ff       	call   c000081a <strcat>
c001cbdb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbde:	e8 d2 cf ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001cbe3:	83 c4 10             	add    esp,0x10
c001cbe6:	e8 8a 4e ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c001cbeb:	51                   	push   ecx
c001cbec:	6a 03                	push   0x3
c001cbee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001cbf2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cbf6:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001cbfc:	83 d3 00             	adc    ebx,0x0
c001cbff:	89 ca                	mov    edx,ecx
c001cc01:	89 d1                	mov    ecx,edx
c001cc03:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001cc07:	51                   	push   ecx
c001cc08:	50                   	push   eax
c001cc09:	e8 a2 54 ff ff       	call   c00120b0 <VAS::allocatePages(int, int)>
c001cc0e:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc11:	89 c3                	mov    ebx,eax
c001cc13:	e8 c9 3a fe ff       	call   c00006e1 <strlen>
c001cc18:	8b 3d 60 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dc60
c001cc1e:	40                   	inc    eax
c001cc1f:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc22:	e8 fd 29 ff ff       	call   c000f624 <malloc>
c001cc27:	89 04 bd 80 e0 02 c0 	mov    DWORD PTR [edi*4-0x3ffd1f80],eax
c001cc2e:	5f                   	pop    edi
c001cc2f:	58                   	pop    eax
c001cc30:	a1 60 dc 02 c0       	mov    eax,ds:0xc002dc60
c001cc35:	56                   	push   esi
c001cc36:	ff 34 85 80 e0 02 c0 	push   DWORD PTR [eax*4-0x3ffd1f80]
c001cc3d:	e8 21 3b fe ff       	call   c0000763 <strcpy>
c001cc42:	a1 60 dc 02 c0       	mov    eax,ds:0xc002dc60
c001cc47:	8d 50 01             	lea    edx,[eax+0x1]
c001cc4a:	89 1c 85 80 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2180],ebx
c001cc51:	89 15 60 dc 02 c0    	mov    DWORD PTR ds:0xc002dc60,edx
c001cc57:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cc5b:	83 c4 0c             	add    esp,0xc
c001cc5e:	89 14 85 80 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2380],edx
c001cc65:	6a 01                	push   0x1
c001cc67:	53                   	push   ebx
c001cc68:	56                   	push   esi
c001cc69:	e8 e4 f6 ff ff       	call   c001c352 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001cc6e:	83 c4 10             	add    esp,0x10
c001cc71:	89 c7                	mov    edi,eax
c001cc73:	fe c8                	dec    al
c001cc75:	74 16                	je     c001cc8d <Thr::loadDLL(char const*, bool)+0x19c>
c001cc77:	89 e8                	mov    eax,ebp
c001cc79:	84 c0                	test   al,al
c001cc7b:	74 10                	je     c001cc8d <Thr::loadDLL(char const*, bool)+0x19c>
c001cc7d:	83 ec 0c             	sub    esp,0xc
c001cc80:	68 e9 ac 02 c0       	push   0xc002ace9
c001cc85:	e8 2b cf ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001cc8a:	83 c4 10             	add    esp,0x10
c001cc8d:	31 f6                	xor    esi,esi
c001cc8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc93:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc97:	05 ff 0f 00 00       	add    eax,0xfff
c001cc9c:	83 d2 00             	adc    edx,0x0
c001cc9f:	0f ac d0 0c          	shrd   eax,edx,0xc
c001cca3:	c1 ea 0c             	shr    edx,0xc
c001cca6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ccae:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001ccb2:	ba 00 00 00 00       	mov    edx,0x0
c001ccb7:	89 d0                	mov    eax,edx
c001ccb9:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001ccbd:	73 2c                	jae    c001cceb <Thr::loadDLL(char const*, bool)+0x1fa>
c001ccbf:	e8 b1 4d ff ff       	call   c0011a75 <Virt::getAKernelVAS()>
c001ccc4:	89 f5                	mov    ebp,esi
c001ccc6:	c1 e5 0c             	shl    ebp,0xc
c001ccc9:	52                   	push   edx
c001ccca:	01 dd                	add    ebp,ebx
c001cccc:	52                   	push   edx
c001cccd:	55                   	push   ebp
c001ccce:	50                   	push   eax
c001cccf:	e8 56 4f ff ff       	call   c0011c2a <VAS::getPageTableEntry(unsigned long)>
c001ccd4:	83 c4 10             	add    esp,0x10
c001ccd7:	f6 00 60             	test   BYTE PTR [eax],0x60
c001ccda:	75 0c                	jne    c001cce8 <Thr::loadDLL(char const*, bool)+0x1f7>
c001ccdc:	83 ec 0c             	sub    esp,0xc
c001ccdf:	55                   	push   ebp
c001cce0:	e8 34 2f ff ff       	call   c000fc19 <Phys::freePage(unsigned long)>
c001cce5:	83 c4 10             	add    esp,0x10
c001cce8:	46                   	inc    esi
c001cce9:	eb a4                	jmp    c001cc8f <Thr::loadDLL(char const*, bool)+0x19e>
c001cceb:	89 f8                	mov    eax,edi
c001cced:	84 c0                	test   al,al
c001ccef:	75 02                	jne    c001ccf3 <Thr::loadDLL(char const*, bool)+0x202>
c001ccf1:	31 db                	xor    ebx,ebx
c001ccf3:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ccf9:	89 d8                	mov    eax,ebx
c001ccfb:	5b                   	pop    ebx
c001ccfc:	5e                   	pop    esi
c001ccfd:	5f                   	pop    edi
c001ccfe:	5d                   	pop    ebp
c001ccff:	c3                   	ret    

c001cd00 <Thr::executeDLL(unsigned long, void*)>:
c001cd00:	56                   	push   esi
c001cd01:	53                   	push   ebx
c001cd02:	51                   	push   ecx
c001cd03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001cd0b:	85 db                	test   ebx,ebx
c001cd0d:	75 10                	jne    c001cd1f <Thr::executeDLL(unsigned long, void*)+0x1f>
c001cd0f:	83 ec 0c             	sub    esp,0xc
c001cd12:	68 08 ad 02 c0       	push   0xc002ad08
c001cd17:	e8 99 ce ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001cd1c:	83 c4 10             	add    esp,0x10
c001cd1f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001cd23:	89 d8                	mov    eax,ebx
c001cd25:	5a                   	pop    edx
c001cd26:	5b                   	pop    ebx
c001cd27:	5e                   	pop    esi
c001cd28:	ff e0                	jmp    eax

c001cd2a <changeTSS>:
c001cd2a:	83 ec 14             	sub    esp,0x14
c001cd2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd32:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001cd35:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001cd3a:	c1 e2 15             	shl    edx,0x15
c001cd3d:	29 d0                	sub    eax,edx
c001cd3f:	50                   	push   eax
c001cd40:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c001cd45:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cd4b:	05 7c 11 00 00       	add    eax,0x117c
c001cd50:	50                   	push   eax
c001cd51:	e8 ce 44 ff ff       	call   c0011224 <TSS::setESP(unsigned long)>
c001cd56:	83 c4 1c             	add    esp,0x1c
c001cd59:	c3                   	ret    

c001cd5a <Process::addArgs(char**)>:
c001cd5a:	57                   	push   edi
c001cd5b:	56                   	push   esi
c001cd5c:	53                   	push   ebx
c001cd5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd61:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cd65:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001cd6f:	85 ff                	test   edi,edi
c001cd71:	74 3d                	je     c001cdb0 <Process::addArgs(char**)+0x56>
c001cd73:	8b 07                	mov    eax,DWORD PTR [edi]
c001cd75:	85 c0                	test   eax,eax
c001cd77:	74 37                	je     c001cdb0 <Process::addArgs(char**)+0x56>
c001cd79:	31 db                	xor    ebx,ebx
c001cd7b:	83 ec 0c             	sub    esp,0xc
c001cd7e:	50                   	push   eax
c001cd7f:	e8 5d 39 fe ff       	call   c00006e1 <strlen>
c001cd84:	40                   	inc    eax
c001cd85:	89 04 24             	mov    DWORD PTR [esp],eax
c001cd88:	e8 97 28 ff ff       	call   c000f624 <malloc>
c001cd8d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001cd94:	5a                   	pop    edx
c001cd95:	59                   	pop    ecx
c001cd96:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001cd99:	43                   	inc    ebx
c001cd9a:	50                   	push   eax
c001cd9b:	e8 c3 39 fe ff       	call   c0000763 <strcpy>
c001cda0:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001cda6:	83 c4 10             	add    esp,0x10
c001cda9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001cdac:	85 c0                	test   eax,eax
c001cdae:	75 cb                	jne    c001cd7b <Process::addArgs(char**)+0x21>
c001cdb0:	5b                   	pop    ebx
c001cdb1:	5e                   	pop    esi
c001cdb2:	5f                   	pop    edi
c001cdb3:	c3                   	ret    

c001cdb4 <Process::Process(char const*, Process*, char**)>:
c001cdb4:	56                   	push   esi
c001cdb5:	53                   	push   ebx
c001cdb6:	83 ec 14             	sub    esp,0x14
c001cdb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdbd:	05 0c 02 00 00       	add    eax,0x20c
c001cdc2:	bb 07 00 00 00       	mov    ebx,0x7
c001cdc7:	89 c6                	mov    esi,eax
c001cdc9:	85 db                	test   ebx,ebx
c001cdcb:	78 12                	js     c001cddf <Process::Process(char const*, Process*, char**)+0x2b>
c001cdcd:	83 ec 0c             	sub    esp,0xc
c001cdd0:	56                   	push   esi
c001cdd1:	e8 ac ac 00 00       	call   c0027a82 <ThreadControlBlock::ThreadControlBlock()>
c001cdd6:	83 c4 10             	add    esp,0x10
c001cdd9:	83 c6 63             	add    esi,0x63
c001cddc:	4b                   	dec    ebx
c001cddd:	eb ea                	jmp    c001cdc9 <Process::Process(char const*, Process*, char**)+0x15>
c001cddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cde3:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cdea:	83 ec 0c             	sub    esp,0xc
c001cded:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cdf1:	e8 10 cc ff ff       	call   c0019a06 <Krnl::newProcessEnv(Process*)>
c001cdf6:	83 c4 10             	add    esp,0x10
c001cdf9:	89 c2                	mov    edx,eax
c001cdfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdff:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001ce05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce09:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001ce12:	a1 90 c4 02 c0       	mov    eax,ds:0xc002c490
c001ce17:	8d 50 01             	lea    edx,[eax+0x1]
c001ce1a:	89 15 90 c4 02 c0    	mov    DWORD PTR ds:0xc002c490,edx
c001ce20:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ce24:	89 02                	mov    DWORD PTR [edx],eax
c001ce26:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001ce2e:	83 ec 0c             	sub    esp,0xc
c001ce31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce35:	e8 ea 27 ff ff       	call   c000f624 <malloc>
c001ce3a:	83 c4 10             	add    esp,0x10
c001ce3d:	89 c3                	mov    ebx,eax
c001ce3f:	83 ec 08             	sub    esp,0x8
c001ce42:	6a 00                	push   0x0
c001ce44:	53                   	push   ebx
c001ce45:	e8 0e 56 ff ff       	call   c0012458 <VAS::VAS(bool)>
c001ce4a:	83 c4 10             	add    esp,0x10
c001ce4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce51:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001ce57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce5b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ce65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce69:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ce6d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ce73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce77:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ce7d:	85 c0                	test   eax,eax
c001ce7f:	74 42                	je     c001cec3 <Process::Process(char const*, Process*, char**)+0x10f>
c001ce81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce85:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ce8b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ce91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce95:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001ce9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce9f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cea5:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001ceab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceaf:	05 0c 01 00 00       	add    eax,0x10c
c001ceb4:	83 ec 08             	sub    esp,0x8
c001ceb7:	52                   	push   edx
c001ceb8:	50                   	push   eax
c001ceb9:	e8 a5 38 fe ff       	call   c0000763 <strcpy>
c001cebe:	83 c4 10             	add    esp,0x10
c001cec1:	eb 63                	jmp    c001cf26 <Process::Process(char const*, Process*, char**)+0x172>
c001cec3:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001cecb:	83 ec 0c             	sub    esp,0xc
c001cece:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ced2:	e8 4d 27 ff ff       	call   c000f624 <malloc>
c001ced7:	83 c4 10             	add    esp,0x10
c001ceda:	89 c3                	mov    ebx,eax
c001cedc:	83 ec 08             	sub    esp,0x8
c001cedf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cee3:	53                   	push   ebx
c001cee4:	e8 39 40 ff ff       	call   c0010f22 <VgaText::VgaText(char const*)>
c001cee9:	83 c4 10             	add    esp,0x10
c001ceec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cef0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cefa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cf00:	83 ec 0c             	sub    esp,0xc
c001cf03:	50                   	push   eax
c001cf04:	e8 0c 34 ff ff       	call   c0010315 <addToTerminalCycle(VgaText*)>
c001cf09:	83 c4 10             	add    esp,0x10
c001cf0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf10:	05 0c 01 00 00       	add    eax,0x10c
c001cf15:	83 ec 08             	sub    esp,0x8
c001cf18:	68 32 ad 02 c0       	push   0xc002ad32
c001cf1d:	50                   	push   eax
c001cf1e:	e8 40 38 fe ff       	call   c0000763 <strcpy>
c001cf23:	83 c4 10             	add    esp,0x10
c001cf26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf2a:	83 c0 0c             	add    eax,0xc
c001cf2d:	83 ec 08             	sub    esp,0x8
c001cf30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf34:	50                   	push   eax
c001cf35:	e8 29 38 fe ff       	call   c0000763 <strcpy>
c001cf3a:	83 c4 10             	add    esp,0x10
c001cf3d:	83 ec 08             	sub    esp,0x8
c001cf40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cf44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf48:	e8 0d fe ff ff       	call   c001cd5a <Process::addArgs(char**)>
c001cf4d:	83 c4 10             	add    esp,0x10
c001cf50:	83 ec 08             	sub    esp,0x8
c001cf53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf5b:	e8 be ee ff ff       	call   c001be1e <Thr::loadProgramIntoMemory(Process*, char const*)>
c001cf60:	83 c4 10             	add    esp,0x10
c001cf63:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cf67:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001cf6b:	83 f0 01             	xor    eax,0x1
c001cf6e:	88 c2                	mov    dl,al
c001cf70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf74:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001cf7a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001cf7f:	83 ec 08             	sub    esp,0x8
c001cf82:	50                   	push   eax
c001cf83:	68 30 ae 02 c0       	push   0xc002ae30
c001cf88:	e8 48 59 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001cf8d:	83 c4 10             	add    esp,0x10
c001cf90:	90                   	nop
c001cf91:	83 c4 14             	add    esp,0x14
c001cf94:	5b                   	pop    ebx
c001cf95:	5e                   	pop    esi
c001cf96:	c3                   	ret    
c001cf97:	90                   	nop

c001cf98 <Process::Process(bool, char const*, Process*, char**)>:
c001cf98:	56                   	push   esi
c001cf99:	53                   	push   ebx
c001cf9a:	83 ec 24             	sub    esp,0x24
c001cf9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cfa1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cfa5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cfa9:	05 0c 02 00 00       	add    eax,0x20c
c001cfae:	bb 07 00 00 00       	mov    ebx,0x7
c001cfb3:	89 c6                	mov    esi,eax
c001cfb5:	85 db                	test   ebx,ebx
c001cfb7:	78 12                	js     c001cfcb <Process::Process(bool, char const*, Process*, char**)+0x33>
c001cfb9:	83 ec 0c             	sub    esp,0xc
c001cfbc:	56                   	push   esi
c001cfbd:	e8 c0 aa 00 00       	call   c0027a82 <ThreadControlBlock::ThreadControlBlock()>
c001cfc2:	83 c4 10             	add    esp,0x10
c001cfc5:	83 c6 63             	add    esi,0x63
c001cfc8:	4b                   	dec    ebx
c001cfc9:	eb ea                	jmp    c001cfb5 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001cfcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cfcf:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cfd6:	83 ec 0c             	sub    esp,0xc
c001cfd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cfdd:	e8 24 ca ff ff       	call   c0019a06 <Krnl::newProcessEnv(Process*)>
c001cfe2:	83 c4 10             	add    esp,0x10
c001cfe5:	89 c2                	mov    edx,eax
c001cfe7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cfeb:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cff1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cff5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cffe:	a1 90 c4 02 c0       	mov    eax,ds:0xc002c490
c001d003:	8d 50 01             	lea    edx,[eax+0x1]
c001d006:	89 15 90 c4 02 c0    	mov    DWORD PTR ds:0xc002c490,edx
c001d00c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d010:	89 02                	mov    DWORD PTR [edx],eax
c001d012:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001d01a:	83 ec 0c             	sub    esp,0xc
c001d01d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d021:	e8 fe 25 ff ff       	call   c000f624 <malloc>
c001d026:	83 c4 10             	add    esp,0x10
c001d029:	89 c3                	mov    ebx,eax
c001d02b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d030:	83 ec 08             	sub    esp,0x8
c001d033:	50                   	push   eax
c001d034:	53                   	push   ebx
c001d035:	e8 1e 54 ff ff       	call   c0012458 <VAS::VAS(bool)>
c001d03a:	83 c4 10             	add    esp,0x10
c001d03d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d041:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d047:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d04b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d055:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d059:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d05d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d063:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d067:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d06d:	85 c0                	test   eax,eax
c001d06f:	74 42                	je     c001d0b3 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d071:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d075:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d07b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d081:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d085:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d08b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d08f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d095:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d09b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d09f:	05 0c 01 00 00       	add    eax,0x10c
c001d0a4:	83 ec 08             	sub    esp,0x8
c001d0a7:	52                   	push   edx
c001d0a8:	50                   	push   eax
c001d0a9:	e8 b5 36 fe ff       	call   c0000763 <strcpy>
c001d0ae:	83 c4 10             	add    esp,0x10
c001d0b1:	eb 63                	jmp    c001d116 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d0b3:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001d0bb:	83 ec 0c             	sub    esp,0xc
c001d0be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d0c2:	e8 5d 25 ff ff       	call   c000f624 <malloc>
c001d0c7:	83 c4 10             	add    esp,0x10
c001d0ca:	89 c3                	mov    ebx,eax
c001d0cc:	83 ec 08             	sub    esp,0x8
c001d0cf:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d0d3:	53                   	push   ebx
c001d0d4:	e8 49 3e ff ff       	call   c0010f22 <VgaText::VgaText(char const*)>
c001d0d9:	83 c4 10             	add    esp,0x10
c001d0dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0e0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d0e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0ea:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d0f0:	83 ec 0c             	sub    esp,0xc
c001d0f3:	50                   	push   eax
c001d0f4:	e8 1c 32 ff ff       	call   c0010315 <addToTerminalCycle(VgaText*)>
c001d0f9:	83 c4 10             	add    esp,0x10
c001d0fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d100:	05 0c 01 00 00       	add    eax,0x10c
c001d105:	83 ec 08             	sub    esp,0x8
c001d108:	68 32 ad 02 c0       	push   0xc002ad32
c001d10d:	50                   	push   eax
c001d10e:	e8 50 36 fe ff       	call   c0000763 <strcpy>
c001d113:	83 c4 10             	add    esp,0x10
c001d116:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d11a:	83 c0 0c             	add    eax,0xc
c001d11d:	83 ec 08             	sub    esp,0x8
c001d120:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d124:	50                   	push   eax
c001d125:	e8 39 36 fe ff       	call   c0000763 <strcpy>
c001d12a:	83 c4 10             	add    esp,0x10
c001d12d:	83 ec 08             	sub    esp,0x8
c001d130:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d134:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d138:	e8 1d fc ff ff       	call   c001cd5a <Process::addArgs(char**)>
c001d13d:	83 c4 10             	add    esp,0x10
c001d140:	90                   	nop
c001d141:	83 c4 24             	add    esp,0x24
c001d144:	5b                   	pop    ebx
c001d145:	5e                   	pop    esi
c001d146:	c3                   	ret    

c001d147 <disableIRQs()>:
c001d147:	fa                   	cli    
c001d148:	ff 05 2c e4 02 c0    	inc    DWORD PTR ds:0xc002e42c
c001d14e:	c3                   	ret    

c001d14f <getIRQNestingLevel()>:
c001d14f:	a1 2c e4 02 c0       	mov    eax,ds:0xc002e42c
c001d154:	c3                   	ret    

c001d155 <enableIRQs()>:
c001d155:	a1 2c e4 02 c0       	mov    eax,ds:0xc002e42c
c001d15a:	48                   	dec    eax
c001d15b:	a3 2c e4 02 c0       	mov    ds:0xc002e42c,eax
c001d160:	75 01                	jne    c001d163 <enableIRQs()+0xe>
c001d162:	fb                   	sti    
c001d163:	c3                   	ret    

c001d164 <lockScheduler()>:
c001d164:	eb e1                	jmp    c001d147 <disableIRQs()>

c001d166 <unlockScheduler()>:
c001d166:	eb ed                	jmp    c001d155 <enableIRQs()>

c001d168 <userModeEntryPoint(void*)>:
c001d168:	83 ec 0c             	sub    esp,0xc
c001d16b:	e8 f6 ff ff ff       	call   c001d166 <unlockScheduler()>
c001d170:	fb                   	sti    
c001d171:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d176:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d179:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d17f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d183:	83 c4 0c             	add    esp,0xc
c001d186:	e9 9f 31 fe ff       	jmp    c000032a <goToUsermode>

c001d18b <lockStuff()>:
c001d18b:	e8 b7 ff ff ff       	call   c001d147 <disableIRQs()>
c001d190:	ff 05 28 e4 02 c0    	inc    DWORD PTR ds:0xc002e428
c001d196:	c3                   	ret    

c001d197 <taskStartupFunction>:
c001d197:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d19c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d19f:	c3                   	ret    

c001d1a0 <updateTimeUsed()>:
c001d1a0:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c001d1a5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d1ab:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d1b2:	74 50                	je     c001d204 <updateTimeUsed()+0x64>
c001d1b4:	57                   	push   edi
c001d1b5:	56                   	push   esi
c001d1b6:	53                   	push   ebx
c001d1b7:	0f 31                	rdtsc  
c001d1b9:	89 c1                	mov    ecx,eax
c001d1bb:	a3 68 e4 02 c0       	mov    ds:0xc002e468,eax
c001d1c0:	2b 0d 58 e4 02 c0    	sub    ecx,DWORD PTR ds:0xc002e458
c001d1c6:	89 d3                	mov    ebx,edx
c001d1c8:	89 0d 60 e4 02 c0    	mov    DWORD PTR ds:0xc002e460,ecx
c001d1ce:	1b 1d 5c e4 02 c0    	sbb    ebx,DWORD PTR ds:0xc002e45c
c001d1d4:	a3 58 e4 02 c0       	mov    ds:0xc002e458,eax
c001d1d9:	89 1d 64 e4 02 c0    	mov    DWORD PTR ds:0xc002e464,ebx
c001d1df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1e4:	89 15 6c e4 02 c0    	mov    DWORD PTR ds:0xc002e46c,edx
c001d1ea:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001d1ed:	89 15 5c e4 02 c0    	mov    DWORD PTR ds:0xc002e45c,edx
c001d1f3:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001d1f6:	01 f1                	add    ecx,esi
c001d1f8:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001d1fb:	11 fb                	adc    ebx,edi
c001d1fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001d200:	5b                   	pop    ebx
c001d201:	5e                   	pop    esi
c001d202:	5f                   	pop    edi
c001d203:	c3                   	ret    
c001d204:	c3                   	ret    

c001d205 <switchToThread(ThreadControlBlock*)>:
c001d205:	53                   	push   ebx
c001d206:	83 ec 08             	sub    esp,0x8
c001d209:	a1 28 e4 02 c0       	mov    eax,ds:0xc002e428
c001d20e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d212:	85 c0                	test   eax,eax
c001d214:	75 30                	jne    c001d246 <switchToThread(ThreadControlBlock*)+0x41>
c001d216:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001d219:	3c ff                	cmp    al,0xff
c001d21b:	74 25                	je     c001d242 <switchToThread(ThreadControlBlock*)+0x3d>
c001d21d:	0f b6 d0             	movzx  edx,al
c001d220:	b8 84 03 00 00       	mov    eax,0x384
c001d225:	29 d0                	sub    eax,edx
c001d227:	c1 e0 10             	shl    eax,0x10
c001d22a:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001d22d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001d230:	e8 6b ff ff ff       	call   c001d1a0 <updateTimeUsed()>
c001d235:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001d239:	83 c4 08             	add    esp,0x8
c001d23c:	5b                   	pop    ebx
c001d23d:	e9 20 31 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d242:	31 c0                	xor    eax,eax
c001d244:	eb e7                	jmp    c001d22d <switchToThread(ThreadControlBlock*)+0x28>
c001d246:	c7 05 24 e4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e424,0x1
c001d250:	83 c4 08             	add    esp,0x8
c001d253:	5b                   	pop    ebx
c001d254:	c3                   	ret    
c001d255:	90                   	nop

c001d256 <Semaphore::Semaphore(int)>:
c001d256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d25a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d25e:	89 10                	mov    DWORD PTR [eax],edx
c001d260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d264:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d26b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d26f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d27a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d281:	90                   	nop
c001d282:	c3                   	ret    
c001d283:	90                   	nop

c001d284 <Mutex::Mutex()>:
c001d284:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d288:	6a 01                	push   0x1
c001d28a:	50                   	push   eax
c001d28b:	e8 c6 ff ff ff       	call   c001d256 <Semaphore::Semaphore(int)>
c001d290:	83 c4 08             	add    esp,0x8
c001d293:	90                   	nop
c001d294:	c3                   	ret    
c001d295:	90                   	nop

c001d296 <Process::createThread(void (*)(void*), void*, int)>:
c001d296:	55                   	push   ebp
c001d297:	31 c9                	xor    ecx,ecx
c001d299:	57                   	push   edi
c001d29a:	56                   	push   esi
c001d29b:	53                   	push   ebx
c001d29c:	83 ec 1c             	sub    esp,0x1c
c001d29f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d2a3:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d2aa:	89 f2                	mov    edx,esi
c001d2ac:	0f b7 c2             	movzx  eax,dx
c001d2af:	83 e2 01             	and    edx,0x1
c001d2b2:	74 14                	je     c001d2c8 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001d2b4:	d1 f8                	sar    eax,1
c001d2b6:	41                   	inc    ecx
c001d2b7:	89 c2                	mov    edx,eax
c001d2b9:	83 f9 10             	cmp    ecx,0x10
c001d2bc:	75 ee                	jne    c001d2ac <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d2be:	83 c4 1c             	add    esp,0x1c
c001d2c1:	31 c0                	xor    eax,eax
c001d2c3:	5b                   	pop    ebx
c001d2c4:	5e                   	pop    esi
c001d2c5:	5f                   	pop    edi
c001d2c6:	5d                   	pop    ebp
c001d2c7:	c3                   	ret    
c001d2c8:	83 ec 08             	sub    esp,0x8
c001d2cb:	b8 01 00 00 00       	mov    eax,0x1
c001d2d0:	d3 e0                	shl    eax,cl
c001d2d2:	09 c6                	or     esi,eax
c001d2d4:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d2da:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d2e1:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001d2e4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d2e7:	01 ce                	add    esi,ecx
c001d2e9:	89 f0                	mov    eax,esi
c001d2eb:	c1 e0 05             	shl    eax,0x5
c001d2ee:	01 c6                	add    esi,eax
c001d2f0:	8d 04 33             	lea    eax,[ebx+esi*1]
c001d2f3:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001d2f9:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d2ff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001d303:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d309:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001d30f:	89 ca                	mov    edx,ecx
c001d311:	f7 da                	neg    edx
c001d313:	c1 e2 15             	shl    edx,0x15
c001d316:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001d31c:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001d322:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001d326:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d330:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d336:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d33a:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001d340:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d34a:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d354:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001d35b:	50                   	push   eax
c001d35c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d360:	68 48 e4 02 c0       	push   0xc002e448
c001d365:	e8 a6 a5 00 00       	call   c0027910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d36a:	83 c4 10             	add    esp,0x10
c001d36d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d371:	83 c4 1c             	add    esp,0x1c
c001d374:	5b                   	pop    ebx
c001d375:	5e                   	pop    esi
c001d376:	5f                   	pop    edi
c001d377:	5d                   	pop    ebp
c001d378:	c3                   	ret    
c001d379:	90                   	nop

c001d37a <Process::createUserThread()>:
c001d37a:	83 ec 0c             	sub    esp,0xc
c001d37d:	68 80 00 00 00       	push   0x80
c001d382:	6a 00                	push   0x0
c001d384:	68 68 d1 01 c0       	push   0xc001d168
c001d389:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d38d:	e8 04 ff ff ff       	call   c001d296 <Process::createThread(void (*)(void*), void*, int)>
c001d392:	83 c4 1c             	add    esp,0x1c
c001d395:	c3                   	ret    

c001d396 <setupMultitasking(void (*)())>:
c001d396:	56                   	push   esi
c001d397:	53                   	push   ebx
c001d398:	53                   	push   ebx
c001d399:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d39d:	eb 10                	jmp    c001d3af <setupMultitasking(void (*)())+0x19>
c001d39f:	83 ec 0c             	sub    esp,0xc
c001d3a2:	68 48 e4 02 c0       	push   0xc002e448
c001d3a7:	e8 b6 a4 00 00       	call   c0027862 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d3ac:	83 c4 10             	add    esp,0x10
c001d3af:	83 ec 0c             	sub    esp,0xc
c001d3b2:	68 48 e4 02 c0       	push   0xc002e448
c001d3b7:	e8 8a a4 00 00       	call   c0027846 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d3bc:	83 c4 10             	add    esp,0x10
c001d3bf:	84 c0                	test   al,al
c001d3c1:	74 dc                	je     c001d39f <setupMultitasking(void (*)())+0x9>
c001d3c3:	83 ec 0c             	sub    esp,0xc
c001d3c6:	68 3f 07 00 00       	push   0x73f
c001d3cb:	e8 54 22 ff ff       	call   c000f624 <malloc>
c001d3d0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d3d7:	89 c3                	mov    ebx,eax
c001d3d9:	6a 00                	push   0x0
c001d3db:	68 36 ad 02 c0       	push   0xc002ad36
c001d3e0:	6a 01                	push   0x1
c001d3e2:	50                   	push   eax
c001d3e3:	e8 b0 fb ff ff       	call   c001cf98 <Process::Process(bool, char const*, Process*, char**)>
c001d3e8:	83 c4 18             	add    esp,0x18
c001d3eb:	89 1d 54 e4 02 c0    	mov    DWORD PTR ds:0xc002e454,ebx
c001d3f1:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d3f7:	68 58 ae 02 c0       	push   0xc002ae58
c001d3fc:	e8 d4 54 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001d401:	58                   	pop    eax
c001d402:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d408:	e8 8a 36 ff ff       	call   c0010a97 <setActiveTerminal(VgaText*)>
c001d40d:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d415:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d41b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d41e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d428:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d42e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d434:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d43e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d448:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d452:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d458:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d45e:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d468:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d46e:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d478:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d47e:	5a                   	pop    edx
c001d47f:	59                   	pop    ecx
c001d480:	68 32 ad 02 c0       	push   0xc002ad32
c001d485:	50                   	push   eax
c001d486:	e8 d8 32 fe ff       	call   c0000763 <strcpy>
c001d48b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d492:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d496:	83 c4 14             	add    esp,0x14
c001d499:	5b                   	pop    ebx
c001d49a:	5e                   	pop    esi
c001d49b:	e9 b4 2e fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d4a0 <schedule()>:
c001d4a0:	a1 28 e4 02 c0       	mov    eax,ds:0xc002e428
c001d4a5:	85 c0                	test   eax,eax
c001d4a7:	74 0b                	je     c001d4b4 <schedule()+0x14>
c001d4a9:	c7 05 24 e4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e424,0x1
c001d4b3:	c3                   	ret    
c001d4b4:	53                   	push   ebx
c001d4b5:	83 ec 14             	sub    esp,0x14
c001d4b8:	68 48 e4 02 c0       	push   0xc002e448
c001d4bd:	e8 84 a3 00 00       	call   c0027846 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d4c2:	83 c4 10             	add    esp,0x10
c001d4c5:	84 c0                	test   al,al
c001d4c7:	75 38                	jne    c001d501 <schedule()+0x61>
c001d4c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d4ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d4d1:	4a                   	dec    edx
c001d4d2:	74 32                	je     c001d506 <schedule()+0x66>
c001d4d4:	83 ec 0c             	sub    esp,0xc
c001d4d7:	68 48 e4 02 c0       	push   0xc002e448
c001d4dc:	e8 5d a3 00 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d4e1:	c7 04 24 48 e4 02 c0 	mov    DWORD PTR [esp],0xc002e448
c001d4e8:	89 c3                	mov    ebx,eax
c001d4ea:	e8 73 a3 00 00       	call   c0027862 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d4ef:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d4f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4f9:	e8 07 fd ff ff       	call   c001d205 <switchToThread(ThreadControlBlock*)>
c001d4fe:	83 c4 10             	add    esp,0x10
c001d501:	83 c4 08             	add    esp,0x8
c001d504:	5b                   	pop    ebx
c001d505:	c3                   	ret    
c001d506:	83 ec 08             	sub    esp,0x8
c001d509:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d510:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d516:	68 48 e4 02 c0       	push   0xc002e448
c001d51b:	e8 f0 a3 00 00       	call   c0027910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d520:	83 c4 10             	add    esp,0x10
c001d523:	eb af                	jmp    c001d4d4 <schedule()+0x34>

c001d525 <unlockStuff()>:
c001d525:	a1 28 e4 02 c0       	mov    eax,ds:0xc002e428
c001d52a:	48                   	dec    eax
c001d52b:	a3 28 e4 02 c0       	mov    ds:0xc002e428,eax
c001d530:	75 09                	jne    c001d53b <unlockStuff()+0x16>
c001d532:	a1 24 e4 02 c0       	mov    eax,ds:0xc002e424
c001d537:	85 c0                	test   eax,eax
c001d539:	75 05                	jne    c001d540 <unlockStuff()+0x1b>
c001d53b:	e9 15 fc ff ff       	jmp    c001d155 <enableIRQs()>
c001d540:	83 ec 0c             	sub    esp,0xc
c001d543:	c7 05 24 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e424,0x0
c001d54d:	e8 4e ff ff ff       	call   c001d4a0 <schedule()>
c001d552:	83 c4 0c             	add    esp,0xc
c001d555:	e9 fb fb ff ff       	jmp    c001d155 <enableIRQs()>

c001d55a <Semaphore::tryAcquire()>:
c001d55a:	83 ec 0c             	sub    esp,0xc
c001d55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d561:	e8 25 fc ff ff       	call   c001d18b <lockStuff()>
c001d566:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d569:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d56b:	7c 0b                	jl     c001d578 <Semaphore::tryAcquire()+0x1e>
c001d56d:	e8 b3 ff ff ff       	call   c001d525 <unlockStuff()>
c001d572:	31 c0                	xor    eax,eax
c001d574:	83 c4 0c             	add    esp,0xc
c001d577:	c3                   	ret    
c001d578:	42                   	inc    edx
c001d579:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d57c:	e8 a4 ff ff ff       	call   c001d525 <unlockStuff()>
c001d581:	b0 01                	mov    al,0x1
c001d583:	83 c4 0c             	add    esp,0xc
c001d586:	c3                   	ret    
c001d587:	90                   	nop

c001d588 <Semaphore::assertLocked(char const*)>:
c001d588:	83 ec 0c             	sub    esp,0xc
c001d58b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d58f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d593:	e8 f3 fb ff ff       	call   c001d18b <lockStuff()>
c001d598:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d59a:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d59d:	7c 05                	jl     c001d5a4 <Semaphore::assertLocked(char const*)+0x1c>
c001d59f:	83 c4 0c             	add    esp,0xc
c001d5a2:	eb 81                	jmp    c001d525 <unlockStuff()>
c001d5a4:	83 ec 0c             	sub    esp,0xc
c001d5a7:	52                   	push   edx
c001d5a8:	e8 08 c6 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001d5ad:	83 c4 10             	add    esp,0x10
c001d5b0:	83 c4 0c             	add    esp,0xc
c001d5b3:	e9 6d ff ff ff       	jmp    c001d525 <unlockStuff()>

c001d5b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d5b8:	83 ec 0c             	sub    esp,0xc
c001d5bb:	e8 8f fb ff ff       	call   c001d14f <getIRQNestingLevel()>
c001d5c0:	83 ec 08             	sub    esp,0x8
c001d5c3:	50                   	push   eax
c001d5c4:	68 8c ae 02 c0       	push   0xc002ae8c
c001d5c9:	e8 07 53 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001d5ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d5d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d5d7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d5da:	e8 c1 fe ff ff       	call   c001d4a0 <schedule()>
c001d5df:	e8 82 fb ff ff       	call   c001d166 <unlockScheduler()>
c001d5e4:	e8 66 fb ff ff       	call   c001d14f <getIRQNestingLevel()>
c001d5e9:	5a                   	pop    edx
c001d5ea:	59                   	pop    ecx
c001d5eb:	50                   	push   eax
c001d5ec:	68 c0 ae 02 c0       	push   0xc002aec0
c001d5f1:	e8 df 52 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001d5f6:	83 c4 1c             	add    esp,0x1c
c001d5f9:	c3                   	ret    

c001d5fa <blockTask(TaskState)>:
c001d5fa:	83 ec 0c             	sub    esp,0xc
c001d5fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d601:	e8 5e fb ff ff       	call   c001d164 <lockScheduler()>
c001d606:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d60b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d60e:	e8 8d fe ff ff       	call   c001d4a0 <schedule()>
c001d613:	83 c4 0c             	add    esp,0xc
c001d616:	e9 4b fb ff ff       	jmp    c001d166 <unlockScheduler()>

c001d61b <waitTask(int, int*, int)>:
c001d61b:	83 ec 18             	sub    esp,0x18
c001d61e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d623:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d627:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d62a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d62e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d633:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d636:	6a 07                	push   0x7
c001d638:	e8 bd ff ff ff       	call   c001d5fa <blockTask(TaskState)>
c001d63d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d642:	83 c4 10             	add    esp,0x10
c001d645:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d648:	85 d2                	test   edx,edx
c001d64a:	74 0a                	je     c001d656 <waitTask(int, int*, int)+0x3b>
c001d64c:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d64f:	89 02                	mov    DWORD PTR [edx],eax
c001d651:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d656:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d659:	83 c4 0c             	add    esp,0xc
c001d65c:	c3                   	ret    

c001d65d <nanoSleepUntil(unsigned long long)>:
c001d65d:	83 ec 0c             	sub    esp,0xc
c001d660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d664:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d668:	3b 05 90 d5 02 c0    	cmp    eax,DWORD PTR ds:0xc002d590
c001d66e:	89 d1                	mov    ecx,edx
c001d670:	1b 0d 94 d5 02 c0    	sbb    ecx,DWORD PTR ds:0xc002d594
c001d676:	73 04                	jae    c001d67c <nanoSleepUntil(unsigned long long)+0x1f>
c001d678:	83 c4 0c             	add    esp,0xc
c001d67b:	c3                   	ret    
c001d67c:	e8 0a fb ff ff       	call   c001d18b <lockStuff()>
c001d681:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d687:	83 ec 08             	sub    esp,0x8
c001d68a:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d68d:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d690:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d696:	68 3c e4 02 c0       	push   0xc002e43c
c001d69b:	e8 70 a2 00 00       	call   c0027910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d6a0:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d6a7:	e8 4e ff ff ff       	call   c001d5fa <blockTask(TaskState)>
c001d6ac:	83 c4 1c             	add    esp,0x1c
c001d6af:	e9 71 fe ff ff       	jmp    c001d525 <unlockStuff()>

c001d6b4 <nanoSleep(unsigned long long)>:
c001d6b4:	a1 90 d5 02 c0       	mov    eax,ds:0xc002d590
c001d6b9:	8b 15 94 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d594
c001d6bf:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d6c3:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d6c7:	eb 94                	jmp    c001d65d <nanoSleepUntil(unsigned long long)>

c001d6c9 <sleep(unsigned long long)>:
c001d6c9:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d6d1:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d6d6:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d6da:	01 ca                	add    edx,ecx
c001d6dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d6e0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d6e4:	eb ce                	jmp    c001d6b4 <nanoSleep(unsigned long long)>

c001d6e6 <Semaphore::acquire()>:
c001d6e6:	83 ec 0c             	sub    esp,0xc
c001d6e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6ed:	e8 99 fa ff ff       	call   c001d18b <lockStuff()>
c001d6f2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d6f5:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d6f7:	7d 0c                	jge    c001d705 <Semaphore::acquire()+0x1f>
c001d6f9:	42                   	inc    edx
c001d6fa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d6fd:	83 c4 0c             	add    esp,0xc
c001d700:	e9 20 fe ff ff       	jmp    c001d525 <unlockStuff()>
c001d705:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d70b:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d712:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d715:	85 d2                	test   edx,edx
c001d717:	74 2a                	je     c001d743 <Semaphore::acquire()+0x5d>
c001d719:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d71c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d722:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d725:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d72b:	83 ec 0c             	sub    esp,0xc
c001d72e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d731:	6a 05                	push   0x5
c001d733:	e8 c2 fe ff ff       	call   c001d5fa <blockTask(TaskState)>
c001d738:	83 c4 10             	add    esp,0x10
c001d73b:	83 c4 0c             	add    esp,0xc
c001d73e:	e9 e2 fd ff ff       	jmp    c001d525 <unlockStuff()>
c001d743:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d749:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d74c:	eb d7                	jmp    c001d725 <Semaphore::acquire()+0x3f>

c001d74e <taskReturned>:
c001d74e:	83 ec 18             	sub    esp,0x18
c001d751:	68 f4 ae 02 c0       	push   0xc002aef4
c001d756:	e8 5a c4 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001d75b:	83 c4 10             	add    esp,0x10
c001d75e:	83 ec 0c             	sub    esp,0xc
c001d761:	6a 02                	push   0x2
c001d763:	e8 92 fe ff ff       	call   c001d5fa <blockTask(TaskState)>
c001d768:	e8 f7 f9 ff ff       	call   c001d164 <lockScheduler()>
c001d76d:	e8 2e fd ff ff       	call   c001d4a0 <schedule()>
c001d772:	e8 ef f9 ff ff       	call   c001d166 <unlockScheduler()>
c001d777:	83 c4 10             	add    esp,0x10
c001d77a:	eb e2                	jmp    c001d75e <taskReturned+0x10>

c001d77c <unblockTask(ThreadControlBlock*)>:
c001d77c:	53                   	push   ebx
c001d77d:	83 ec 08             	sub    esp,0x8
c001d780:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d784:	e8 db f9 ff ff       	call   c001d164 <lockScheduler()>
c001d789:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d78c:	85 c0                	test   eax,eax
c001d78e:	74 5c                	je     c001d7ec <unblockTask(ThreadControlBlock*)+0x70>
c001d790:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d793:	48                   	dec    eax
c001d794:	74 31                	je     c001d7c7 <unblockTask(ThreadControlBlock*)+0x4b>
c001d796:	83 ec 0c             	sub    esp,0xc
c001d799:	68 48 e4 02 c0       	push   0xc002e448
c001d79e:	e8 9b a0 00 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d7a3:	83 c4 10             	add    esp,0x10
c001d7a6:	85 c0                	test   eax,eax
c001d7a8:	75 17                	jne    c001d7c1 <unblockTask(ThreadControlBlock*)+0x45>
c001d7aa:	eb 65                	jmp    c001d811 <unblockTask(ThreadControlBlock*)+0x95>
c001d7ac:	83 ec 08             	sub    esp,0x8
c001d7af:	50                   	push   eax
c001d7b0:	68 48 e4 02 c0       	push   0xc002e448
c001d7b5:	e8 5e a3 00 00       	call   c0027b18 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d7ba:	83 c4 10             	add    esp,0x10
c001d7bd:	85 c0                	test   eax,eax
c001d7bf:	74 50                	je     c001d811 <unblockTask(ThreadControlBlock*)+0x95>
c001d7c1:	39 c3                	cmp    ebx,eax
c001d7c3:	75 e7                	jne    c001d7ac <unblockTask(ThreadControlBlock*)+0x30>
c001d7c5:	eb 1c                	jmp    c001d7e3 <unblockTask(ThreadControlBlock*)+0x67>
c001d7c7:	83 ec 0c             	sub    esp,0xc
c001d7ca:	68 e4 af 02 c0       	push   0xc002afe4
c001d7cf:	e8 01 51 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001d7d4:	c7 04 24 70 af 02 c0 	mov    DWORD PTR [esp],0xc002af70
c001d7db:	e8 f5 50 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001d7e0:	83 c4 10             	add    esp,0x10
c001d7e3:	83 c4 08             	add    esp,0x8
c001d7e6:	5b                   	pop    ebx
c001d7e7:	e9 7a f9 ff ff       	jmp    c001d166 <unlockScheduler()>
c001d7ec:	83 ec 0c             	sub    esp,0xc
c001d7ef:	68 28 af 02 c0       	push   0xc002af28
c001d7f4:	e8 dc 50 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001d7f9:	c7 04 24 70 af 02 c0 	mov    DWORD PTR [esp],0xc002af70
c001d800:	e8 d0 50 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001d805:	83 c4 10             	add    esp,0x10
c001d808:	83 c4 08             	add    esp,0x8
c001d80b:	5b                   	pop    ebx
c001d80c:	e9 55 f9 ff ff       	jmp    c001d166 <unlockScheduler()>
c001d811:	83 ec 08             	sub    esp,0x8
c001d814:	53                   	push   ebx
c001d815:	68 48 e4 02 c0       	push   0xc002e448
c001d81a:	e8 f1 a0 00 00       	call   c0027910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d81f:	83 c4 10             	add    esp,0x10
c001d822:	83 c4 08             	add    esp,0x8
c001d825:	5b                   	pop    ebx
c001d826:	e9 3b f9 ff ff       	jmp    c001d166 <unlockScheduler()>

c001d82b <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d82b:	55                   	push   ebp
c001d82c:	57                   	push   edi
c001d82d:	56                   	push   esi
c001d82e:	53                   	push   ebx
c001d82f:	83 ec 1c             	sub    esp,0x1c
c001d832:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d836:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d839:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d83f:	85 ff                	test   edi,edi
c001d841:	7e 20                	jle    c001d863 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d843:	31 f6                	xor    esi,esi
c001d845:	83 ec 0c             	sub    esp,0xc
c001d848:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d84f:	46                   	inc    esi
c001d850:	e8 df 1d ff ff       	call   c000f634 <free>
c001d855:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d858:	83 c4 10             	add    esp,0x10
c001d85b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d861:	7f e2                	jg     c001d845 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d863:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d86d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d872:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d875:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d878:	d3 c0                	rol    eax,cl
c001d87a:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d881:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d884:	89 f7                	mov    edi,esi
c001d886:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d88e:	0f 85 74 01 00 00    	jne    c001da08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d894:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d89a:	85 ed                	test   ebp,ebp
c001d89c:	74 1b                	je     c001d8b9 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d89e:	83 ec 0c             	sub    esp,0xc
c001d8a1:	55                   	push   ebp
c001d8a2:	e8 7b c0 ff ff       	call   c0019922 <EnvVarContainer::~EnvVarContainer()>
c001d8a7:	59                   	pop    ecx
c001d8a8:	5e                   	pop    esi
c001d8a9:	6a 0c                	push   0xc
c001d8ab:	55                   	push   ebp
c001d8ac:	e8 44 4f ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c001d8b1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d8b4:	83 c4 10             	add    esp,0x10
c001d8b7:	89 f7                	mov    edi,esi
c001d8b9:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d8bf:	85 c0                	test   eax,eax
c001d8c1:	0f 84 aa 00 00 00    	je     c001d971 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d8c7:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d8ca:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d8ce:	31 c9                	xor    ecx,ecx
c001d8d0:	eb 10                	jmp    c001d8e2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d8d2:	41                   	inc    ecx
c001d8d3:	83 f9 10             	cmp    ecx,0x10
c001d8d6:	0f 84 95 00 00 00    	je     c001d971 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d8dc:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d8e2:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d8e9:	d3 fa                	sar    edx,cl
c001d8eb:	83 e2 01             	and    edx,0x1
c001d8ee:	74 e2                	je     c001d8d2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d8f0:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d8f3:	01 ca                	add    edx,ecx
c001d8f5:	89 d5                	mov    ebp,edx
c001d8f7:	c1 e5 05             	shl    ebp,0x5
c001d8fa:	01 ea                	add    edx,ebp
c001d8fc:	01 d0                	add    eax,edx
c001d8fe:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d904:	83 fd 07             	cmp    ebp,0x7
c001d907:	75 c9                	jne    c001d8d2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d909:	05 40 02 00 00       	add    eax,0x240
c001d90e:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d911:	83 fd ff             	cmp    ebp,0xffffffff
c001d914:	0f 8c 08 01 00 00    	jl     c001da22 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d91a:	0f 84 b9 01 00 00    	je     c001dad9 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d920:	85 ed                	test   ebp,ebp
c001d922:	0f 84 a0 01 00 00    	je     c001dac8 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d928:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d92a:	75 a6                	jne    c001d8d2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d92c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d932:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d936:	01 d0                	add    eax,edx
c001d938:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d93c:	83 ec 0c             	sub    esp,0xc
c001d93f:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001d945:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d948:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d94e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001d955:	50                   	push   eax
c001d956:	e8 21 fe ff ff       	call   c001d77c <unblockTask(ThreadControlBlock*)>
c001d95b:	83 c4 10             	add    esp,0x10
c001d95e:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d961:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d965:	89 f7                	mov    edi,esi
c001d967:	41                   	inc    ecx
c001d968:	83 f9 10             	cmp    ecx,0x10
c001d96b:	0f 85 6b ff ff ff    	jne    c001d8dc <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001d971:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001d977:	85 c0                	test   eax,eax
c001d979:	74 5d                	je     c001d9d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d97b:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001d981:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001d987:	74 4f                	je     c001d9d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d989:	83 ec 0c             	sub    esp,0xc
c001d98c:	68 48 e4 02 c0       	push   0xc002e448
c001d991:	e8 a8 9e 00 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d996:	c7 04 24 48 e4 02 c0 	mov    DWORD PTR [esp],0xc002e448
c001d99d:	89 c7                	mov    edi,eax
c001d99f:	e8 a2 9e 00 00       	call   c0027846 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d9a4:	83 c4 10             	add    esp,0x10
c001d9a7:	84 c0                	test   al,al
c001d9a9:	0f 84 e4 00 00 00    	je     c001da93 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001d9af:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d9b2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d9b8:	85 d2                	test   edx,edx
c001d9ba:	74 0f                	je     c001d9cb <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001d9bc:	83 ec 0c             	sub    esp,0xc
c001d9bf:	8b 02                	mov    eax,DWORD PTR [edx]
c001d9c1:	52                   	push   edx
c001d9c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d9c5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d9c8:	83 c4 10             	add    esp,0x10
c001d9cb:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001d9d5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d9d8:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001d9de:	85 db                	test   ebx,ebx
c001d9e0:	74 16                	je     c001d9f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001d9e2:	83 ec 0c             	sub    esp,0xc
c001d9e5:	53                   	push   ebx
c001d9e6:	e8 59 44 ff ff       	call   c0011e44 <VAS::~VAS()>
c001d9eb:	58                   	pop    eax
c001d9ec:	5a                   	pop    edx
c001d9ed:	6a 10                	push   0x10
c001d9ef:	53                   	push   ebx
c001d9f0:	e8 00 4e ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c001d9f5:	83 c4 10             	add    esp,0x10
c001d9f8:	83 ec 0c             	sub    esp,0xc
c001d9fb:	68 3d ad 02 c0       	push   0xc002ad3d
c001da00:	e8 d0 4e ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001da05:	83 c4 10             	add    esp,0x10
c001da08:	83 ec 08             	sub    esp,0x8
c001da0b:	68 3f 07 00 00       	push   0x73f
c001da10:	68 4b ad 02 c0       	push   0xc002ad4b
c001da15:	e8 bb 4e ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001da1a:	83 c4 2c             	add    esp,0x2c
c001da1d:	5b                   	pop    ebx
c001da1e:	5e                   	pop    esi
c001da1f:	5f                   	pop    edi
c001da20:	5d                   	pop    ebp
c001da21:	c3                   	ret    
c001da22:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001da26:	83 ec 0c             	sub    esp,0xc
c001da29:	68 28 b0 02 c0       	push   0xc002b028
c001da2e:	e8 82 c1 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001da33:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001da36:	83 c4 10             	add    esp,0x10
c001da39:	89 f7                	mov    edi,esi
c001da3b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001da3f:	e9 8e fe ff ff       	jmp    c001d8d2 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001da44:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001da4a:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001da50:	75 1c                	jne    c001da6e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001da52:	83 ec 0c             	sub    esp,0xc
c001da55:	68 90 b0 02 c0       	push   0xc002b090
c001da5a:	e8 76 4e ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001da5f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001da66:	e8 8f fb ff ff       	call   c001d5fa <blockTask(TaskState)>
c001da6b:	83 c4 10             	add    esp,0x10
c001da6e:	83 ec 08             	sub    esp,0x8
c001da71:	56                   	push   esi
c001da72:	68 48 e4 02 c0       	push   0xc002e448
c001da77:	e8 94 9e 00 00       	call   c0027910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da7c:	c7 04 24 48 e4 02 c0 	mov    DWORD PTR [esp],0xc002e448
c001da83:	e8 b6 9d 00 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001da88:	83 c4 10             	add    esp,0x10
c001da8b:	39 f8                	cmp    eax,edi
c001da8d:	0f 84 1c ff ff ff    	je     c001d9af <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001da93:	83 ec 0c             	sub    esp,0xc
c001da96:	68 48 e4 02 c0       	push   0xc002e448
c001da9b:	e8 9e 9d 00 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001daa0:	c7 04 24 48 e4 02 c0 	mov    DWORD PTR [esp],0xc002e448
c001daa7:	89 c6                	mov    esi,eax
c001daa9:	e8 b4 9d 00 00       	call   c0027862 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001daae:	83 c4 10             	add    esp,0x10
c001dab1:	39 f3                	cmp    ebx,esi
c001dab3:	74 b9                	je     c001da6e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001dab5:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001dab8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dabb:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001dac1:	75 ab                	jne    c001da6e <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001dac3:	e9 7c ff ff ff       	jmp    c001da44 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001dac8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dacc:	83 ec 0c             	sub    esp,0xc
c001dacf:	68 5c b0 02 c0       	push   0xc002b05c
c001dad4:	e9 55 ff ff ff       	jmp    c001da2e <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001dad9:	8b 36                	mov    esi,DWORD PTR [esi]
c001dadb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dadf:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001dae2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dae5:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001daeb:	01 d7                	add    edi,edx
c001daed:	89 f8                	mov    eax,edi
c001daef:	e9 44 fe ff ff       	jmp    c001d938 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001daf4 <cleanerTaskFunction(void*)>:
c001daf4:	53                   	push   ebx
c001daf5:	83 ec 08             	sub    esp,0x8
c001daf8:	e8 69 f6 ff ff       	call   c001d166 <unlockScheduler()>
c001dafd:	e8 62 f6 ff ff       	call   c001d164 <lockScheduler()>
c001db02:	80 3d 0c e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e40c,0x0
c001db09:	0f 85 8e 00 00 00    	jne    c001db9d <cleanerTaskFunction(void*)+0xa9>
c001db0f:	83 ec 0c             	sub    esp,0xc
c001db12:	6a 02                	push   0x2
c001db14:	e8 9f fa ff ff       	call   c001d5b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001db19:	83 c4 10             	add    esp,0x10
c001db1c:	c6 05 0c e4 02 c0 00 	mov    BYTE PTR ds:0xc002e40c,0x0
c001db23:	e8 63 f6 ff ff       	call   c001d18b <lockStuff()>
c001db28:	e8 37 f6 ff ff       	call   c001d164 <lockScheduler()>
c001db2d:	83 ec 0c             	sub    esp,0xc
c001db30:	68 30 e4 02 c0       	push   0xc002e430
c001db35:	e8 0c 9d 00 00       	call   c0027846 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001db3a:	83 c4 10             	add    esp,0x10
c001db3d:	84 c0                	test   al,al
c001db3f:	75 40                	jne    c001db81 <cleanerTaskFunction(void*)+0x8d>
c001db41:	83 ec 0c             	sub    esp,0xc
c001db44:	68 30 e4 02 c0       	push   0xc002e430
c001db49:	e8 f0 9c 00 00       	call   c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001db4e:	c7 04 24 30 e4 02 c0 	mov    DWORD PTR [esp],0xc002e430
c001db55:	89 c3                	mov    ebx,eax
c001db57:	e8 06 9d 00 00       	call   c0027862 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001db5c:	c7 04 24 61 ad 02 c0 	mov    DWORD PTR [esp],0xc002ad61
c001db63:	e8 6d 4d ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001db68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db6b:	e8 bb fc ff ff       	call   c001d82b <cleanupTerminatedTask(ThreadControlBlock*)>
c001db70:	c7 04 24 7a ad 02 c0 	mov    DWORD PTR [esp],0xc002ad7a
c001db77:	e8 59 4d ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001db7c:	83 c4 10             	add    esp,0x10
c001db7f:	eb ac                	jmp    c001db2d <cleanerTaskFunction(void*)+0x39>
c001db81:	e8 e0 f5 ff ff       	call   c001d166 <unlockScheduler()>
c001db86:	e8 9a f9 ff ff       	call   c001d525 <unlockStuff()>
c001db8b:	e8 d4 f5 ff ff       	call   c001d164 <lockScheduler()>
c001db90:	80 3d 0c e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e40c,0x0
c001db97:	0f 84 72 ff ff ff    	je     c001db0f <cleanerTaskFunction(void*)+0x1b>
c001db9d:	e8 c4 f5 ff ff       	call   c001d166 <unlockScheduler()>
c001dba2:	e9 75 ff ff ff       	jmp    c001db1c <cleanerTaskFunction(void*)+0x28>

c001dba7 <terminateTask(int)>:
c001dba7:	83 ec 14             	sub    esp,0x14
c001dbaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbaf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dbb2:	83 c0 0c             	add    eax,0xc
c001dbb5:	50                   	push   eax
c001dbb6:	68 b8 b0 02 c0       	push   0xc002b0b8
c001dbbb:	e8 15 4d ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001dbc0:	e8 c6 f5 ff ff       	call   c001d18b <lockStuff()>
c001dbc5:	e8 9a f5 ff ff       	call   c001d164 <lockScheduler()>
c001dbca:	c7 04 24 8d ad 02 c0 	mov    DWORD PTR [esp],0xc002ad8d
c001dbd1:	e8 ff 4c ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001dbd6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dbda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbdf:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001dbe2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbe7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001dbea:	5a                   	pop    edx
c001dbeb:	59                   	pop    ecx
c001dbec:	50                   	push   eax
c001dbed:	68 30 e4 02 c0       	push   0xc002e430
c001dbf2:	e8 19 9d 00 00       	call   c0027910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dbf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbfc:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001dc03:	c7 04 24 a7 ad 02 c0 	mov    DWORD PTR [esp],0xc002ada7
c001dc0a:	e8 c6 4c ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001dc0f:	83 c4 10             	add    esp,0x10
c001dc12:	a1 08 e4 02 c0       	mov    eax,ds:0xc002e408
c001dc17:	85 c0                	test   eax,eax
c001dc19:	74 5a                	je     c001dc75 <terminateTask(int)+0xce>
c001dc1b:	83 ec 0c             	sub    esp,0xc
c001dc1e:	68 c1 ad 02 c0       	push   0xc002adc1
c001dc23:	e8 ad 4c ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001dc28:	58                   	pop    eax
c001dc29:	c6 05 0c e4 02 c0 01 	mov    BYTE PTR ds:0xc002e40c,0x1
c001dc30:	ff 35 08 e4 02 c0    	push   DWORD PTR ds:0xc002e408
c001dc36:	e8 41 fb ff ff       	call   c001d77c <unblockTask(ThreadControlBlock*)>
c001dc3b:	c7 04 24 db ad 02 c0 	mov    DWORD PTR [esp],0xc002addb
c001dc42:	e8 8e 4c ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001dc47:	83 c4 10             	add    esp,0x10
c001dc4a:	e8 17 f5 ff ff       	call   c001d166 <unlockScheduler()>
c001dc4f:	e8 d1 f8 ff ff       	call   c001d525 <unlockStuff()>
c001dc54:	83 ec 0c             	sub    esp,0xc
c001dc57:	68 13 ae 02 c0       	push   0xc002ae13
c001dc5c:	e8 74 4c ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001dc61:	83 c4 10             	add    esp,0x10
c001dc64:	e8 fb f4 ff ff       	call   c001d164 <lockScheduler()>
c001dc69:	e8 32 f8 ff ff       	call   c001d4a0 <schedule()>
c001dc6e:	e8 f3 f4 ff ff       	call   c001d166 <unlockScheduler()>
c001dc73:	eb ef                	jmp    c001dc64 <terminateTask(int)+0xbd>
c001dc75:	83 ec 0c             	sub    esp,0xc
c001dc78:	68 f5 ad 02 c0       	push   0xc002adf5
c001dc7d:	e8 53 4c ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001dc82:	83 c4 10             	add    esp,0x10
c001dc85:	eb c3                	jmp    c001dc4a <terminateTask(int)+0xa3>

c001dc87 <Thr::terminateFromIRQ(int)>:
c001dc87:	83 ec 18             	sub    esp,0x18
c001dc8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc8e:	e8 14 ff ff ff       	call   c001dba7 <terminateTask(int)>
c001dc93:	90                   	nop

c001dc94 <Semaphore::release()>:
c001dc94:	83 ec 0c             	sub    esp,0xc
c001dc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc9b:	e8 eb f4 ff ff       	call   c001d18b <lockStuff()>
c001dca0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dca3:	85 d2                	test   edx,edx
c001dca5:	74 1a                	je     c001dcc1 <Semaphore::release()+0x2d>
c001dca7:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001dcaa:	83 ec 0c             	sub    esp,0xc
c001dcad:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001dcb0:	52                   	push   edx
c001dcb1:	e8 c6 fa ff ff       	call   c001d77c <unblockTask(ThreadControlBlock*)>
c001dcb6:	83 c4 10             	add    esp,0x10
c001dcb9:	83 c4 0c             	add    esp,0xc
c001dcbc:	e9 64 f8 ff ff       	jmp    c001d525 <unlockStuff()>
c001dcc1:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001dcc4:	83 c4 0c             	add    esp,0xc
c001dcc7:	e9 59 f8 ff ff       	jmp    c001d525 <unlockStuff()>

c001dccc <__static_initialization_and_destruction_0(int, int)>:
c001dccc:	83 ec 0c             	sub    esp,0xc
c001dccf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001dcd4:	0f 85 88 00 00 00    	jne    c001dd62 <__static_initialization_and_destruction_0(int, int)+0x96>
c001dcda:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001dce2:	75 7e                	jne    c001dd62 <__static_initialization_and_destruction_0(int, int)+0x96>
c001dce4:	83 ec 0c             	sub    esp,0xc
c001dce7:	68 48 e4 02 c0       	push   0xc002e448
c001dcec:	e8 cf 9d 00 00       	call   c0027ac0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001dcf1:	83 c4 10             	add    esp,0x10
c001dcf4:	83 ec 04             	sub    esp,0x4
c001dcf7:	68 28 be 02 c0       	push   0xc002be28
c001dcfc:	68 48 e4 02 c0       	push   0xc002e448
c001dd01:	68 80 7a 02 c0       	push   0xc0027a80
c001dd06:	e8 64 4a ff ff       	call   c001276f <__cxa_atexit>
c001dd0b:	83 c4 10             	add    esp,0x10
c001dd0e:	83 ec 0c             	sub    esp,0xc
c001dd11:	68 3c e4 02 c0       	push   0xc002e43c
c001dd16:	e8 a5 9d 00 00       	call   c0027ac0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001dd1b:	83 c4 10             	add    esp,0x10
c001dd1e:	83 ec 04             	sub    esp,0x4
c001dd21:	68 28 be 02 c0       	push   0xc002be28
c001dd26:	68 3c e4 02 c0       	push   0xc002e43c
c001dd2b:	68 80 7a 02 c0       	push   0xc0027a80
c001dd30:	e8 3a 4a ff ff       	call   c001276f <__cxa_atexit>
c001dd35:	83 c4 10             	add    esp,0x10
c001dd38:	83 ec 0c             	sub    esp,0xc
c001dd3b:	68 30 e4 02 c0       	push   0xc002e430
c001dd40:	e8 7b 9d 00 00       	call   c0027ac0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001dd45:	83 c4 10             	add    esp,0x10
c001dd48:	83 ec 04             	sub    esp,0x4
c001dd4b:	68 28 be 02 c0       	push   0xc002be28
c001dd50:	68 30 e4 02 c0       	push   0xc002e430
c001dd55:	68 80 7a 02 c0       	push   0xc0027a80
c001dd5a:	e8 10 4a ff ff       	call   c001276f <__cxa_atexit>
c001dd5f:	83 c4 10             	add    esp,0x10
c001dd62:	90                   	nop
c001dd63:	83 c4 0c             	add    esp,0xc
c001dd66:	c3                   	ret    

c001dd67 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001dd67:	83 ec 0c             	sub    esp,0xc
c001dd6a:	83 ec 08             	sub    esp,0x8
c001dd6d:	68 ff ff 00 00       	push   0xffff
c001dd72:	6a 01                	push   0x1
c001dd74:	e8 53 ff ff ff       	call   c001dccc <__static_initialization_and_destruction_0(int, int)>
c001dd79:	83 c4 10             	add    esp,0x10
c001dd7c:	83 c4 0c             	add    esp,0xc
c001dd7f:	c3                   	ret    

c001dd80 <Vm::inbv(unsigned short)>:
c001dd80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dd84:	66 81 fa fe fe       	cmp    dx,0xfefe
c001dd89:	75 06                	jne    c001dd91 <Vm::inbv(unsigned short)+0x11>
c001dd8b:	a0 8c e4 02 c0       	mov    al,ds:0xc002e48c
c001dd90:	c3                   	ret    
c001dd91:	ec                   	in     al,dx
c001dd92:	c3                   	ret    

c001dd93 <Vm::outbv(unsigned short, unsigned char)>:
c001dd93:	53                   	push   ebx
c001dd94:	83 ec 08             	sub    esp,0x8
c001dd97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dd9b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001dd9f:	66 81 fa fe fe       	cmp    dx,0xfefe
c001dda4:	75 38                	jne    c001ddde <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001dda6:	0f b6 c3             	movzx  eax,bl
c001dda9:	51                   	push   ecx
c001ddaa:	51                   	push   ecx
c001ddab:	50                   	push   eax
c001ddac:	68 d7 b0 02 c0       	push   0xc002b0d7
c001ddb1:	e8 1f 4b ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001ddb6:	8b 15 8c e4 02 c0    	mov    edx,DWORD PTR ds:0xc002e48c
c001ddbc:	83 c4 10             	add    esp,0x10
c001ddbf:	8d 42 01             	lea    eax,[edx+0x1]
c001ddc2:	88 9a a0 e4 02 c0    	mov    BYTE PTR [edx-0x3ffd1b60],bl
c001ddc8:	a3 8c e4 02 c0       	mov    ds:0xc002e48c,eax
c001ddcd:	83 f8 20             	cmp    eax,0x20
c001ddd0:	75 0f                	jne    c001dde1 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ddd2:	c7 05 8c e4 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002e48c,0x1f
c001dddc:	eb 03                	jmp    c001dde1 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001ddde:	88 d8                	mov    al,bl
c001dde0:	ee                   	out    dx,al
c001dde1:	83 c4 08             	add    esp,0x8
c001dde4:	5b                   	pop    ebx
c001dde5:	c3                   	ret    

c001dde6 <Vm::realToLinear(unsigned short, unsigned short)>:
c001dde6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ddeb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ddf0:	c1 e0 04             	shl    eax,0x4
c001ddf3:	01 d0                	add    eax,edx
c001ddf5:	c3                   	ret    

c001ddf6 <Vm::getSegment(unsigned int)>:
c001ddf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddfa:	c1 e8 10             	shr    eax,0x10
c001ddfd:	c3                   	ret    

c001ddfe <Vm::getOffset(unsigned int)>:
c001ddfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de02:	c3                   	ret    

c001de03 <Vm::mainloop2()>:
c001de03:	83 ec 0c             	sub    esp,0xc
c001de06:	e8 59 f3 ff ff       	call   c001d164 <lockScheduler()>
c001de0b:	83 ec 0c             	sub    esp,0xc
c001de0e:	c6 05 85 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e485,0x1
c001de15:	6a 02                	push   0x2
c001de17:	e8 9c f7 ff ff       	call   c001d5b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001de1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de21:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001de25:	52                   	push   edx
c001de26:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001de2a:	52                   	push   edx
c001de2b:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001de2f:	52                   	push   edx
c001de30:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001de34:	50                   	push   eax
c001de35:	e8 c0 24 fe ff       	call   c00002fa <goToVM86>
c001de3a:	83 c4 2c             	add    esp,0x2c
c001de3d:	c3                   	ret    

c001de3e <Vm::mainVm8086Loop(void*)>:
c001de3e:	83 ec 0c             	sub    esp,0xc
c001de41:	e8 20 f3 ff ff       	call   c001d166 <unlockScheduler()>
c001de46:	83 c4 0c             	add    esp,0xc
c001de49:	eb b8                	jmp    c001de03 <Vm::mainloop2()>

c001de4b <Vm::mainloop3(unsigned long)>:
c001de4b:	53                   	push   ebx
c001de4c:	83 ec 08             	sub    esp,0x8
c001de4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de53:	e8 0c f3 ff ff       	call   c001d164 <lockScheduler()>
c001de58:	83 ec 0c             	sub    esp,0xc
c001de5b:	89 1d 80 e4 02 c0    	mov    DWORD PTR ds:0xc002e480,ebx
c001de61:	6a 02                	push   0x2
c001de63:	c6 05 84 e4 02 c0 01 	mov    BYTE PTR ds:0xc002e484,0x1
c001de6a:	e8 49 f7 ff ff       	call   c001d5b8 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001de6f:	83 c4 18             	add    esp,0x18
c001de72:	5b                   	pop    ebx
c001de73:	eb 8e                	jmp    c001de03 <Vm::mainloop2()>

c001de75 <Vm::initialise8086()>:
c001de75:	83 ec 0c             	sub    esp,0xc
c001de78:	68 80 00 00 00       	push   0x80
c001de7d:	6a 00                	push   0x0
c001de7f:	68 3e de 01 c0       	push   0xc001de3e
c001de84:	ff 35 54 e4 02 c0    	push   DWORD PTR ds:0xc002e454
c001de8a:	e8 07 f4 ff ff       	call   c001d296 <Process::createThread(void (*)(void*), void*, int)>
c001de8f:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001de96:	a3 88 e4 02 c0       	mov    ds:0xc002e488,eax
c001de9b:	68 00 01 00 00       	push   0x100
c001dea0:	a1 54 e4 02 c0       	mov    eax,ds:0xc002e454
c001dea5:	6a 00                	push   0x0
c001dea7:	6a 00                	push   0x0
c001dea9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001deaf:	e8 f0 43 ff ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001deb4:	83 c4 2c             	add    esp,0x2c
c001deb7:	c3                   	ret    

c001deb8 <Vm::finish8086()>:
c001deb8:	53                   	push   ebx
c001deb9:	83 ec 08             	sub    esp,0x8
c001debc:	e8 a3 f2 ff ff       	call   c001d164 <lockScheduler()>
c001dec1:	80 3d 84 e4 02 c0 00 	cmp    BYTE PTR ds:0xc002e484,0x0
c001dec8:	75 0c                	jne    c001ded6 <Vm::finish8086()+0x1e>
c001deca:	e8 d1 f5 ff ff       	call   c001d4a0 <schedule()>
c001decf:	e8 92 f2 ff ff       	call   c001d166 <unlockScheduler()>
c001ded4:	eb e6                	jmp    c001debc <Vm::finish8086()+0x4>
c001ded6:	83 ec 0c             	sub    esp,0xc
c001ded9:	8b 1d 80 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e480
c001dedf:	ff 35 88 e4 02 c0    	push   DWORD PTR ds:0xc002e488
c001dee5:	c6 05 84 e4 02 c0 00 	mov    BYTE PTR ds:0xc002e484,0x0
c001deec:	e8 8b f8 ff ff       	call   c001d77c <unblockTask(ThreadControlBlock*)>
c001def1:	e8 70 f2 ff ff       	call   c001d166 <unlockScheduler()>
c001def6:	89 d8                	mov    eax,ebx
c001def8:	83 c4 18             	add    esp,0x18
c001defb:	5b                   	pop    ebx
c001defc:	c3                   	ret    

c001defd <Vm::getOutput8086(unsigned char*)>:
c001defd:	83 ec 10             	sub    esp,0x10
c001df00:	ff 35 8c e4 02 c0    	push   DWORD PTR ds:0xc002e48c
c001df06:	68 a0 e4 02 c0       	push   0xc002e4a0
c001df0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df0f:	e8 8c 27 fe ff       	call   c00006a0 <memcpy>
c001df14:	a1 8c e4 02 c0       	mov    eax,ds:0xc002e48c
c001df19:	c7 05 8c e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e48c,0x0
c001df23:	83 c4 1c             	add    esp,0x1c
c001df26:	c3                   	ret    

c001df27 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001df27:	55                   	push   ebp
c001df28:	57                   	push   edi
c001df29:	56                   	push   esi
c001df2a:	53                   	push   ebx
c001df2b:	83 ec 2c             	sub    esp,0x2c
c001df2e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001df32:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001df36:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001df3a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001df3e:	e8 21 f2 ff ff       	call   c001d164 <lockScheduler()>
c001df43:	a0 85 e4 02 c0       	mov    al,ds:0xc002e485
c001df48:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001df4c:	84 c0                	test   al,al
c001df4e:	75 0c                	jne    c001df5c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001df50:	e8 4b f5 ff ff       	call   c001d4a0 <schedule()>
c001df55:	e8 0c f2 ff ff       	call   c001d166 <unlockScheduler()>
c001df5a:	eb e2                	jmp    c001df3e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001df5c:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c001df61:	c7 05 8c e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e48c,0x0
c001df6b:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001df6f:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001df73:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001df77:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001df7b:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001df7f:	50                   	push   eax
c001df80:	6a 20                	push   0x20
c001df82:	6a 00                	push   0x0
c001df84:	68 a0 e4 02 c0       	push   0xc002e4a0
c001df89:	e8 36 27 fe ff       	call   c00006c4 <memset>
c001df8e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001df95:	e8 8a 16 ff ff       	call   c000f624 <malloc>
c001df9a:	83 c4 0c             	add    esp,0xc
c001df9d:	89 c7                	mov    edi,eax
c001df9f:	ff 35 54 e4 02 c0    	push   DWORD PTR ds:0xc002e454
c001dfa5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dfa9:	50                   	push   eax
c001dfaa:	e8 7f 4e ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001dfaf:	83 c4 10             	add    esp,0x10
c001dfb2:	85 ff                	test   edi,edi
c001dfb4:	75 0a                	jne    c001dfc0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001dfb6:	83 ec 0c             	sub    esp,0xc
c001dfb9:	68 f3 b0 02 c0       	push   0xc002b0f3
c001dfbe:	eb 27                	jmp    c001dfe7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001dfc0:	50                   	push   eax
c001dfc1:	8d 44 24 17          	lea    eax,[esp+0x17]
c001dfc5:	50                   	push   eax
c001dfc6:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dfca:	50                   	push   eax
c001dfcb:	57                   	push   edi
c001dfcc:	e8 6d 51 ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c001dfd1:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001dfd6:	83 c4 10             	add    esp,0x10
c001dfd9:	89 e8                	mov    eax,ebp
c001dfdb:	84 c0                	test   al,al
c001dfdd:	74 19                	je     c001dff8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001dfdf:	83 ec 0c             	sub    esp,0xc
c001dfe2:	68 07 b1 02 c0       	push   0xc002b107
c001dfe7:	e8 c9 bb ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001dfec:	31 ed                	xor    ebp,ebp
c001dfee:	e8 73 f1 ff ff       	call   c001d166 <unlockScheduler()>
c001dff3:	83 c4 10             	add    esp,0x10
c001dff6:	eb 75                	jmp    c001e06d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dff8:	50                   	push   eax
c001dff9:	50                   	push   eax
c001dffa:	6a 01                	push   0x1
c001dffc:	57                   	push   edi
c001dffd:	e8 90 4e ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001e002:	83 c4 10             	add    esp,0x10
c001e005:	85 c0                	test   eax,eax
c001e007:	74 17                	je     c001e020 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001e009:	83 ec 0c             	sub    esp,0xc
c001e00c:	68 20 b1 02 c0       	push   0xc002b120
c001e011:	e8 9f bb ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001e016:	e8 4b f1 ff ff       	call   c001d166 <unlockScheduler()>
c001e01b:	83 c4 10             	add    esp,0x10
c001e01e:	eb 4d                	jmp    c001e06d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e020:	0f b7 f6             	movzx  esi,si
c001e023:	50                   	push   eax
c001e024:	0f b7 db             	movzx  ebx,bx
c001e027:	50                   	push   eax
c001e028:	56                   	push   esi
c001e029:	53                   	push   ebx
c001e02a:	e8 b7 fd ff ff       	call   c001dde6 <Vm::realToLinear(unsigned short, unsigned short)>
c001e02f:	5a                   	pop    edx
c001e030:	8b 17                	mov    edx,DWORD PTR [edi]
c001e032:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e036:	51                   	push   ecx
c001e037:	50                   	push   eax
c001e038:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e03c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e040:	57                   	push   edi
c001e041:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e044:	83 c4 14             	add    esp,0x14
c001e047:	57                   	push   edi
c001e048:	e8 a3 4e ff ff       	call   c0012ef0 <File::close()>
c001e04d:	c6 05 85 e4 02 c0 00 	mov    BYTE PTR ds:0xc002e485,0x0
c001e054:	e8 0d f1 ff ff       	call   c001d166 <unlockScheduler()>
c001e059:	59                   	pop    ecx
c001e05a:	ff 35 88 e4 02 c0    	push   DWORD PTR ds:0xc002e488
c001e060:	e8 17 f7 ff ff       	call   c001d77c <unblockTask(ThreadControlBlock*)>
c001e065:	83 c4 10             	add    esp,0x10
c001e068:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e06d:	83 c4 2c             	add    esp,0x2c
c001e070:	89 e8                	mov    eax,ebp
c001e072:	5b                   	pop    ebx
c001e073:	5e                   	pop    esi
c001e074:	5f                   	pop    edi
c001e075:	5d                   	pop    ebp
c001e076:	c3                   	ret    

c001e077 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e077:	57                   	push   edi
c001e078:	56                   	push   esi
c001e079:	53                   	push   ebx
c001e07a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e07e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e082:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e086:	83 e8 06             	sub    eax,0x6
c001e089:	0f b7 c0             	movzx  eax,ax
c001e08c:	50                   	push   eax
c001e08d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e092:	50                   	push   eax
c001e093:	e8 4e fd ff ff       	call   c001dde6 <Vm::realToLinear(unsigned short, unsigned short)>
c001e098:	5a                   	pop    edx
c001e099:	5e                   	pop    esi
c001e09a:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e09d:	8d 56 fa             	lea    edx,[esi-0x6]
c001e0a0:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e0a6:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e0a9:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e0ac:	83 c2 02             	add    edx,0x2
c001e0af:	66 89 10             	mov    WORD PTR [eax],dx
c001e0b2:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e0b5:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e0b9:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e0bc:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e0c0:	89 d6                	mov    esi,edx
c001e0c2:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e0c8:	66 81 e6 ff fd       	and    si,0xfdff
c001e0cd:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e0d1:	74 07                	je     c001e0da <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e0d3:	89 d6                	mov    esi,edx
c001e0d5:	66 81 ce 00 02       	or     si,0x200
c001e0da:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e0de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0e3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e0e7:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e0ef:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e0f2:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e0fa:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e0fd:	5b                   	pop    ebx
c001e0fe:	5e                   	pop    esi
c001e0ff:	5f                   	pop    edi
c001e100:	c3                   	ret    

c001e101 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e101:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e106:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e10b:	c1 e0 04             	shl    eax,0x4
c001e10e:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e111:	c3                   	ret    

c001e112 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e112:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e117:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e11c:	c1 e0 04             	shl    eax,0x4
c001e11f:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e123:	c3                   	ret    

c001e124 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e124:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e129:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e12e:	c1 e0 04             	shl    eax,0x4
c001e131:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e134:	c3                   	ret    

c001e135 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e135:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e13a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e13f:	c1 e0 04             	shl    eax,0x4
c001e142:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e146:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e149:	c3                   	ret    

c001e14a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e14a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e14f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e154:	c1 e0 04             	shl    eax,0x4
c001e157:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e15b:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e15f:	c3                   	ret    

c001e160 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e160:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e165:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e16a:	c1 e0 04             	shl    eax,0x4
c001e16d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e171:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e174:	c3                   	ret    

c001e175 <Vm::faultHandler(regs*)>:
c001e175:	55                   	push   ebp
c001e176:	57                   	push   edi
c001e177:	56                   	push   esi
c001e178:	53                   	push   ebx
c001e179:	83 ec 1c             	sub    esp,0x1c
c001e17c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e180:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001e183:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001e186:	0f b7 c1             	movzx  eax,cx
c001e189:	50                   	push   eax
c001e18a:	0f b7 c3             	movzx  eax,bx
c001e18d:	c1 e3 04             	shl    ebx,0x4
c001e190:	50                   	push   eax
c001e191:	e8 50 fc ff ff       	call   c001dde6 <Vm::realToLinear(unsigned short, unsigned short)>
c001e196:	5a                   	pop    edx
c001e197:	89 c5                	mov    ebp,eax
c001e199:	5e                   	pop    esi
c001e19a:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001e19e:	50                   	push   eax
c001e19f:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e1a3:	50                   	push   eax
c001e1a4:	e8 3d fc ff ff       	call   c001dde6 <Vm::realToLinear(unsigned short, unsigned short)>
c001e1a9:	01 cb                	add    ebx,ecx
c001e1ab:	89 c6                	mov    esi,eax
c001e1ad:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001e1b1:	50                   	push   eax
c001e1b2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e1b6:	50                   	push   eax
c001e1b7:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e1bb:	50                   	push   eax
c001e1bc:	55                   	push   ebp
c001e1bd:	53                   	push   ebx
c001e1be:	b3 06                	mov    bl,0x6
c001e1c0:	68 39 b1 02 c0       	push   0xc002b139
c001e1c5:	e8 0b 47 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e1ca:	83 c4 20             	add    esp,0x20
c001e1cd:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e1d2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e1d7:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e1db:	3c 9d                	cmp    al,0x9d
c001e1dd:	0f 84 d7 02 00 00    	je     c001e4ba <Vm::faultHandler(regs*)+0x345>
c001e1e3:	0f 87 a3 00 00 00    	ja     c001e28c <Vm::faultHandler(regs*)+0x117>
c001e1e9:	3c 66                	cmp    al,0x66
c001e1eb:	0f 84 15 02 00 00    	je     c001e406 <Vm::faultHandler(regs*)+0x291>
c001e1f1:	77 5f                	ja     c001e252 <Vm::faultHandler(regs*)+0xdd>
c001e1f3:	3c 36                	cmp    al,0x36
c001e1f5:	0f 84 f1 01 00 00    	je     c001e3ec <Vm::faultHandler(regs*)+0x277>
c001e1fb:	77 28                	ja     c001e225 <Vm::faultHandler(regs*)+0xb0>
c001e1fd:	3c 26                	cmp    al,0x26
c001e1ff:	0f 84 99 01 00 00    	je     c001e39e <Vm::faultHandler(regs*)+0x229>
c001e205:	3c 2e                	cmp    al,0x2e
c001e207:	0f 85 3b 07 00 00    	jne    c001e948 <Vm::faultHandler(regs*)+0x7d3>
c001e20d:	83 ec 0c             	sub    esp,0xc
c001e210:	31 db                	xor    ebx,ebx
c001e212:	68 4e b1 02 c0       	push   0xc002b14e
c001e217:	e8 b9 46 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e21c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e21f:	83 c4 10             	add    esp,0x10
c001e222:	45                   	inc    ebp
c001e223:	eb b2                	jmp    c001e1d7 <Vm::faultHandler(regs*)+0x62>
c001e225:	3c 64                	cmp    al,0x64
c001e227:	0f 84 8b 01 00 00    	je     c001e3b8 <Vm::faultHandler(regs*)+0x243>
c001e22d:	0f 87 9f 01 00 00    	ja     c001e3d2 <Vm::faultHandler(regs*)+0x25d>
c001e233:	3c 3e                	cmp    al,0x3e
c001e235:	0f 85 0d 07 00 00    	jne    c001e948 <Vm::faultHandler(regs*)+0x7d3>
c001e23b:	83 ec 0c             	sub    esp,0xc
c001e23e:	b3 01                	mov    bl,0x1
c001e240:	68 52 b1 02 c0       	push   0xc002b152
c001e245:	e8 8b 46 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e24a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e24d:	83 c4 10             	add    esp,0x10
c001e250:	eb d0                	jmp    c001e222 <Vm::faultHandler(regs*)+0xad>
c001e252:	3c 6d                	cmp    al,0x6d
c001e254:	0f 84 af 03 00 00    	je     c001e609 <Vm::faultHandler(regs*)+0x494>
c001e25a:	77 15                	ja     c001e271 <Vm::faultHandler(regs*)+0xfc>
c001e25c:	3c 67                	cmp    al,0x67
c001e25e:	0f 84 bf 01 00 00    	je     c001e423 <Vm::faultHandler(regs*)+0x2ae>
c001e264:	3c 6c                	cmp    al,0x6c
c001e266:	0f 84 3f 03 00 00    	je     c001e5ab <Vm::faultHandler(regs*)+0x436>
c001e26c:	e9 d7 06 00 00       	jmp    c001e948 <Vm::faultHandler(regs*)+0x7d3>
c001e271:	3c 6f                	cmp    al,0x6f
c001e273:	0f 84 a4 04 00 00    	je     c001e71d <Vm::faultHandler(regs*)+0x5a8>
c001e279:	0f 82 11 04 00 00    	jb     c001e690 <Vm::faultHandler(regs*)+0x51b>
c001e27f:	3c 9c                	cmp    al,0x9c
c001e281:	0f 84 ba 01 00 00    	je     c001e441 <Vm::faultHandler(regs*)+0x2cc>
c001e287:	e9 bc 06 00 00       	jmp    c001e948 <Vm::faultHandler(regs*)+0x7d3>
c001e28c:	3c ec                	cmp    al,0xec
c001e28e:	0f 84 24 06 00 00    	je     c001e8b8 <Vm::faultHandler(regs*)+0x743>
c001e294:	0f 87 93 00 00 00    	ja     c001e32d <Vm::faultHandler(regs*)+0x1b8>
c001e29a:	3c e4                	cmp    al,0xe4
c001e29c:	0f 84 5c 05 00 00    	je     c001e7fe <Vm::faultHandler(regs*)+0x689>
c001e2a2:	77 6a                	ja     c001e30e <Vm::faultHandler(regs*)+0x199>
c001e2a4:	3c cd                	cmp    al,0xcd
c001e2a6:	0f 84 7e 02 00 00    	je     c001e52a <Vm::faultHandler(regs*)+0x3b5>
c001e2ac:	3c cf                	cmp    al,0xcf
c001e2ae:	0f 85 94 06 00 00    	jne    c001e948 <Vm::faultHandler(regs*)+0x7d3>
c001e2b4:	83 ec 0c             	sub    esp,0xc
c001e2b7:	68 96 b1 02 c0       	push   0xc002b196
c001e2bc:	e8 14 46 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e2c1:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001e2c4:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001e2c7:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001e2cb:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001e2ce:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001e2d2:	0d 00 02 02 00       	or     eax,0x20200
c001e2d7:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e2da:	56                   	push   esi
c001e2db:	53                   	push   ebx
c001e2dc:	52                   	push   edx
c001e2dd:	68 9c b1 02 c0       	push   0xc002b19c
c001e2e2:	e8 ee 45 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e2e7:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001e2eb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e2f1:	66 c1 e8 09          	shr    ax,0x9
c001e2f5:	83 e0 01             	and    eax,0x1
c001e2f8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e2fb:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e2fe:	83 c0 06             	add    eax,0x6
c001e301:	25 ff ff 00 00       	and    eax,0xffff
c001e306:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e309:	e9 95 02 00 00       	jmp    c001e5a3 <Vm::faultHandler(regs*)+0x42e>
c001e30e:	3c e6                	cmp    al,0xe6
c001e310:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001e314:	0f 84 4e 05 00 00    	je     c001e868 <Vm::faultHandler(regs*)+0x6f3>
c001e31a:	0f 82 0a 05 00 00    	jb     c001e82a <Vm::faultHandler(regs*)+0x6b5>
c001e320:	3c e7                	cmp    al,0xe7
c001e322:	0f 84 69 05 00 00    	je     c001e891 <Vm::faultHandler(regs*)+0x71c>
c001e328:	e9 1b 06 00 00       	jmp    c001e948 <Vm::faultHandler(regs*)+0x7d3>
c001e32d:	3c ef                	cmp    al,0xef
c001e32f:	0f 84 e6 05 00 00    	je     c001e91b <Vm::faultHandler(regs*)+0x7a6>
c001e335:	77 37                	ja     c001e36e <Vm::faultHandler(regs*)+0x1f9>
c001e337:	3c ed                	cmp    al,0xed
c001e339:	0f 84 a3 05 00 00    	je     c001e8e2 <Vm::faultHandler(regs*)+0x76d>
c001e33f:	3c ee                	cmp    al,0xee
c001e341:	0f 85 01 06 00 00    	jne    c001e948 <Vm::faultHandler(regs*)+0x7d3>
c001e347:	52                   	push   edx
c001e348:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e34b:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e34e:	68 37 b2 02 c0       	push   0xc002b237
c001e353:	e8 7d 45 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e358:	59                   	pop    ecx
c001e359:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e35d:	5b                   	pop    ebx
c001e35e:	50                   	push   eax
c001e35f:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e363:	50                   	push   eax
c001e364:	e8 2a fa ff ff       	call   c001dd93 <Vm::outbv(unsigned short, unsigned char)>
c001e369:	e9 a5 05 00 00       	jmp    c001e913 <Vm::faultHandler(regs*)+0x79e>
c001e36e:	3c fa                	cmp    al,0xfa
c001e370:	0f 84 f7 01 00 00    	je     c001e56d <Vm::faultHandler(regs*)+0x3f8>
c001e376:	3c fb                	cmp    al,0xfb
c001e378:	0f 84 0a 02 00 00    	je     c001e588 <Vm::faultHandler(regs*)+0x413>
c001e37e:	3c f3                	cmp    al,0xf3
c001e380:	0f 85 c2 05 00 00    	jne    c001e948 <Vm::faultHandler(regs*)+0x7d3>
c001e386:	83 ec 0c             	sub    esp,0xc
c001e389:	68 6f b1 02 c0       	push   0xc002b16f
c001e38e:	e8 42 45 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e393:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e396:	83 c4 10             	add    esp,0x10
c001e399:	e9 84 fe ff ff       	jmp    c001e222 <Vm::faultHandler(regs*)+0xad>
c001e39e:	83 ec 0c             	sub    esp,0xc
c001e3a1:	b3 02                	mov    bl,0x2
c001e3a3:	68 4a b1 02 c0       	push   0xc002b14a
c001e3a8:	e8 28 45 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e3ad:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e3b0:	83 c4 10             	add    esp,0x10
c001e3b3:	e9 6a fe ff ff       	jmp    c001e222 <Vm::faultHandler(regs*)+0xad>
c001e3b8:	83 ec 0c             	sub    esp,0xc
c001e3bb:	b3 03                	mov    bl,0x3
c001e3bd:	68 56 b1 02 c0       	push   0xc002b156
c001e3c2:	e8 0e 45 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e3c7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e3ca:	83 c4 10             	add    esp,0x10
c001e3cd:	e9 50 fe ff ff       	jmp    c001e222 <Vm::faultHandler(regs*)+0xad>
c001e3d2:	83 ec 0c             	sub    esp,0xc
c001e3d5:	b3 04                	mov    bl,0x4
c001e3d7:	68 5a b1 02 c0       	push   0xc002b15a
c001e3dc:	e8 f4 44 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e3e1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e3e4:	83 c4 10             	add    esp,0x10
c001e3e7:	e9 36 fe ff ff       	jmp    c001e222 <Vm::faultHandler(regs*)+0xad>
c001e3ec:	83 ec 0c             	sub    esp,0xc
c001e3ef:	b3 05                	mov    bl,0x5
c001e3f1:	68 5e b1 02 c0       	push   0xc002b15e
c001e3f6:	e8 da 44 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e3fb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e3fe:	83 c4 10             	add    esp,0x10
c001e401:	e9 1c fe ff ff       	jmp    c001e222 <Vm::faultHandler(regs*)+0xad>
c001e406:	83 ec 0c             	sub    esp,0xc
c001e409:	68 62 b1 02 c0       	push   0xc002b162
c001e40e:	e8 c2 44 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e413:	83 c4 10             	add    esp,0x10
c001e416:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e419:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e41e:	e9 ff fd ff ff       	jmp    c001e222 <Vm::faultHandler(regs*)+0xad>
c001e423:	50                   	push   eax
c001e424:	50                   	push   eax
c001e425:	6a 01                	push   0x1
c001e427:	68 67 b1 02 c0       	push   0xc002b167
c001e42c:	e8 a4 44 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e431:	83 c4 10             	add    esp,0x10
c001e434:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e437:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e43c:	e9 e1 fd ff ff       	jmp    c001e222 <Vm::faultHandler(regs*)+0xad>
c001e441:	83 ec 0c             	sub    esp,0xc
c001e444:	68 75 b1 02 c0       	push   0xc002b175
c001e449:	e8 87 44 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e44e:	83 c4 10             	add    esp,0x10
c001e451:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e454:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e459:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e45c:	74 2f                	je     c001e48d <Vm::faultHandler(regs*)+0x318>
c001e45e:	83 ea 04             	sub    edx,0x4
c001e461:	25 ff 0d 00 00       	and    eax,0xdff
c001e466:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e46c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e46f:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e472:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e478:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e47c:	0f 84 bf 04 00 00    	je     c001e941 <Vm::faultHandler(regs*)+0x7cc>
c001e482:	80 cc 02             	or     ah,0x2
c001e485:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e488:	e9 b4 04 00 00       	jmp    c001e941 <Vm::faultHandler(regs*)+0x7cc>
c001e48d:	83 ea 02             	sub    edx,0x2
c001e490:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e496:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e499:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e49d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e4a3:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e4a7:	74 05                	je     c001e4ae <Vm::faultHandler(regs*)+0x339>
c001e4a9:	80 cc 02             	or     ah,0x2
c001e4ac:	eb 03                	jmp    c001e4b1 <Vm::faultHandler(regs*)+0x33c>
c001e4ae:	80 e4 fd             	and    ah,0xfd
c001e4b1:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e4b5:	e9 87 04 00 00       	jmp    c001e941 <Vm::faultHandler(regs*)+0x7cc>
c001e4ba:	83 ec 0c             	sub    esp,0xc
c001e4bd:	68 7c b1 02 c0       	push   0xc002b17c
c001e4c2:	e8 0e 44 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e4c7:	83 c4 10             	add    esp,0x10
c001e4ca:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e4cf:	74 28                	je     c001e4f9 <Vm::faultHandler(regs*)+0x384>
c001e4d1:	8b 06                	mov    eax,DWORD PTR [esi]
c001e4d3:	25 ff 0d 00 00       	and    eax,0xdff
c001e4d8:	0d 00 02 02 00       	or     eax,0x20200
c001e4dd:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e4e0:	8b 06                	mov    eax,DWORD PTR [esi]
c001e4e2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e4e8:	c1 e8 09             	shr    eax,0x9
c001e4eb:	83 e0 01             	and    eax,0x1
c001e4ee:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e4f1:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e4f4:	83 c0 04             	add    eax,0x4
c001e4f7:	eb 24                	jmp    c001e51d <Vm::faultHandler(regs*)+0x3a8>
c001e4f9:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e4fc:	0d 00 02 02 00       	or     eax,0x20200
c001e501:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e504:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e507:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e50d:	66 c1 e8 09          	shr    ax,0x9
c001e511:	83 e0 01             	and    eax,0x1
c001e514:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e517:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e51a:	83 c0 02             	add    eax,0x2
c001e51d:	25 ff ff 00 00       	and    eax,0xffff
c001e522:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e525:	e9 17 04 00 00       	jmp    c001e941 <Vm::faultHandler(regs*)+0x7cc>
c001e52a:	53                   	push   ebx
c001e52b:	53                   	push   ebx
c001e52c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e530:	50                   	push   eax
c001e531:	68 82 b1 02 c0       	push   0xc002b182
c001e536:	e8 9a 43 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e53b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e53f:	83 c4 10             	add    esp,0x10
c001e542:	3c ee                	cmp    al,0xee
c001e544:	75 10                	jne    c001e556 <Vm::faultHandler(regs*)+0x3e1>
c001e546:	83 ec 0c             	sub    esp,0xc
c001e549:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e54c:	e8 fa f8 ff ff       	call   c001de4b <Vm::mainloop3(unsigned long)>
c001e551:	e9 c0 03 00 00       	jmp    c001e916 <Vm::faultHandler(regs*)+0x7a1>
c001e556:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e55a:	83 ec 0c             	sub    esp,0xc
c001e55d:	53                   	push   ebx
c001e55e:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e562:	53                   	push   ebx
c001e563:	55                   	push   ebp
c001e564:	50                   	push   eax
c001e565:	57                   	push   edi
c001e566:	e8 0c fb ff ff       	call   c001e077 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e56b:	eb 36                	jmp    c001e5a3 <Vm::faultHandler(regs*)+0x42e>
c001e56d:	83 ec 0c             	sub    esp,0xc
c001e570:	68 8c b1 02 c0       	push   0xc002b18c
c001e575:	e8 5b 43 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e57a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e57f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e583:	e9 8b 03 00 00       	jmp    c001e913 <Vm::faultHandler(regs*)+0x79e>
c001e588:	83 ec 0c             	sub    esp,0xc
c001e58b:	68 91 b1 02 c0       	push   0xc002b191
c001e590:	e8 40 43 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e595:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e59a:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e59e:	e9 70 03 00 00       	jmp    c001e913 <Vm::faultHandler(regs*)+0x79e>
c001e5a3:	83 c4 20             	add    esp,0x20
c001e5a6:	e9 99 03 00 00       	jmp    c001e944 <Vm::faultHandler(regs*)+0x7cf>
c001e5ab:	83 ec 0c             	sub    esp,0xc
c001e5ae:	68 cf b1 02 c0       	push   0xc002b1cf
c001e5b3:	e8 1d 43 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e5b8:	83 c4 10             	add    esp,0x10
c001e5bb:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e5be:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e5c3:	74 0d                	je     c001e5d2 <Vm::faultHandler(regs*)+0x45d>
c001e5c5:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e5cc:	0f 87 9e 01 00 00    	ja     c001e770 <Vm::faultHandler(regs*)+0x5fb>
c001e5d2:	83 ec 0c             	sub    esp,0xc
c001e5d5:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e5d9:	0f b7 db             	movzx  ebx,bx
c001e5dc:	50                   	push   eax
c001e5dd:	e8 9e f7 ff ff       	call   c001dd80 <Vm::inbv(unsigned short)>
c001e5e2:	83 c4 0c             	add    esp,0xc
c001e5e5:	0f b6 c0             	movzx  eax,al
c001e5e8:	50                   	push   eax
c001e5e9:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e5ed:	50                   	push   eax
c001e5ee:	53                   	push   ebx
c001e5ef:	e8 41 fb ff ff       	call   c001e135 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e5f4:	83 c4 10             	add    esp,0x10
c001e5f7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e5fa:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e5fe:	74 03                	je     c001e603 <Vm::faultHandler(regs*)+0x48e>
c001e600:	48                   	dec    eax
c001e601:	eb 01                	jmp    c001e604 <Vm::faultHandler(regs*)+0x48f>
c001e603:	40                   	inc    eax
c001e604:	0f b7 c0             	movzx  eax,ax
c001e607:	eb 7f                	jmp    c001e688 <Vm::faultHandler(regs*)+0x513>
c001e609:	83 ec 0c             	sub    esp,0xc
c001e60c:	68 01 b2 02 c0       	push   0xc002b201
c001e611:	e8 bf 42 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e616:	83 c4 10             	add    esp,0x10
c001e619:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e61c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e621:	74 0d                	je     c001e630 <Vm::faultHandler(regs*)+0x4bb>
c001e623:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e62a:	0f 87 40 01 00 00    	ja     c001e770 <Vm::faultHandler(regs*)+0x5fb>
c001e630:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e633:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e637:	0f b7 db             	movzx  ebx,bx
c001e63a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e63f:	74 20                	je     c001e661 <Vm::faultHandler(regs*)+0x4ec>
c001e641:	ed                   	in     eax,dx
c001e642:	51                   	push   ecx
c001e643:	50                   	push   eax
c001e644:	56                   	push   esi
c001e645:	53                   	push   ebx
c001e646:	e8 15 fb ff ff       	call   c001e160 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e64b:	83 c4 10             	add    esp,0x10
c001e64e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e651:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e655:	74 05                	je     c001e65c <Vm::faultHandler(regs*)+0x4e7>
c001e657:	83 e8 04             	sub    eax,0x4
c001e65a:	eb 27                	jmp    c001e683 <Vm::faultHandler(regs*)+0x50e>
c001e65c:	83 c0 04             	add    eax,0x4
c001e65f:	eb 22                	jmp    c001e683 <Vm::faultHandler(regs*)+0x50e>
c001e661:	66 ed                	in     ax,dx
c001e663:	0f b7 c0             	movzx  eax,ax
c001e666:	52                   	push   edx
c001e667:	50                   	push   eax
c001e668:	56                   	push   esi
c001e669:	53                   	push   ebx
c001e66a:	e8 db fa ff ff       	call   c001e14a <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e66f:	83 c4 10             	add    esp,0x10
c001e672:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e675:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e679:	74 05                	je     c001e680 <Vm::faultHandler(regs*)+0x50b>
c001e67b:	83 e8 02             	sub    eax,0x2
c001e67e:	eb 03                	jmp    c001e683 <Vm::faultHandler(regs*)+0x50e>
c001e680:	83 c0 02             	add    eax,0x2
c001e683:	25 ff ff 00 00       	and    eax,0xffff
c001e688:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e68b:	e9 b1 02 00 00       	jmp    c001e941 <Vm::faultHandler(regs*)+0x7cc>
c001e690:	83 ec 0c             	sub    esp,0xc
c001e693:	4b                   	dec    ebx
c001e694:	68 07 b2 02 c0       	push   0xc002b207
c001e699:	e8 37 42 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e69e:	83 c4 10             	add    esp,0x10
c001e6a1:	80 fb 05             	cmp    bl,0x5
c001e6a4:	77 0a                	ja     c001e6b0 <Vm::faultHandler(regs*)+0x53b>
c001e6a6:	0f b6 db             	movzx  ebx,bl
c001e6a9:	ff 24 9d 78 b2 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4d88]
c001e6b0:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e6b4:	eb 1b                	jmp    c001e6d1 <Vm::faultHandler(regs*)+0x55c>
c001e6b6:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e6ba:	eb 15                	jmp    c001e6d1 <Vm::faultHandler(regs*)+0x55c>
c001e6bc:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e6c0:	eb 0f                	jmp    c001e6d1 <Vm::faultHandler(regs*)+0x55c>
c001e6c2:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e6c6:	eb 09                	jmp    c001e6d1 <Vm::faultHandler(regs*)+0x55c>
c001e6c8:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e6cb:	eb 04                	jmp    c001e6d1 <Vm::faultHandler(regs*)+0x55c>
c001e6cd:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e6d1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e6d6:	74 0d                	je     c001e6e5 <Vm::faultHandler(regs*)+0x570>
c001e6d8:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e6df:	0f 87 8b 00 00 00    	ja     c001e770 <Vm::faultHandler(regs*)+0x5fb>
c001e6e5:	53                   	push   ebx
c001e6e6:	53                   	push   ebx
c001e6e7:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e6eb:	52                   	push   edx
c001e6ec:	50                   	push   eax
c001e6ed:	e8 0f fa ff ff       	call   c001e101 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e6f2:	5e                   	pop    esi
c001e6f3:	0f b6 c0             	movzx  eax,al
c001e6f6:	5d                   	pop    ebp
c001e6f7:	50                   	push   eax
c001e6f8:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e6fc:	50                   	push   eax
c001e6fd:	e8 91 f6 ff ff       	call   c001dd93 <Vm::outbv(unsigned short, unsigned char)>
c001e702:	83 c4 10             	add    esp,0x10
c001e705:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e708:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e70c:	74 03                	je     c001e711 <Vm::faultHandler(regs*)+0x59c>
c001e70e:	48                   	dec    eax
c001e70f:	eb 01                	jmp    c001e712 <Vm::faultHandler(regs*)+0x59d>
c001e711:	40                   	inc    eax
c001e712:	0f b7 c0             	movzx  eax,ax
c001e715:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e718:	e9 24 02 00 00       	jmp    c001e941 <Vm::faultHandler(regs*)+0x7cc>
c001e71d:	83 ec 0c             	sub    esp,0xc
c001e720:	4b                   	dec    ebx
c001e721:	68 07 b2 02 c0       	push   0xc002b207
c001e726:	e8 aa 41 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e72b:	83 c4 10             	add    esp,0x10
c001e72e:	80 fb 05             	cmp    bl,0x5
c001e731:	77 0a                	ja     c001e73d <Vm::faultHandler(regs*)+0x5c8>
c001e733:	0f b6 db             	movzx  ebx,bl
c001e736:	ff 24 9d 90 b2 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd4d70]
c001e73d:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e741:	eb 1b                	jmp    c001e75e <Vm::faultHandler(regs*)+0x5e9>
c001e743:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e747:	eb 15                	jmp    c001e75e <Vm::faultHandler(regs*)+0x5e9>
c001e749:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e74d:	eb 0f                	jmp    c001e75e <Vm::faultHandler(regs*)+0x5e9>
c001e74f:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e753:	eb 09                	jmp    c001e75e <Vm::faultHandler(regs*)+0x5e9>
c001e755:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e758:	eb 04                	jmp    c001e75e <Vm::faultHandler(regs*)+0x5e9>
c001e75a:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e75e:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e761:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e766:	74 39                	je     c001e7a1 <Vm::faultHandler(regs*)+0x62c>
c001e768:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e76e:	76 31                	jbe    c001e7a1 <Vm::faultHandler(regs*)+0x62c>
c001e770:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e774:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e778:	51                   	push   ecx
c001e779:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e77d:	51                   	push   ecx
c001e77e:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e782:	51                   	push   ecx
c001e783:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e787:	51                   	push   ecx
c001e788:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e78c:	52                   	push   edx
c001e78d:	50                   	push   eax
c001e78e:	50                   	push   eax
c001e78f:	68 d4 b1 02 c0       	push   0xc002b1d4
c001e794:	e8 3c 41 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e799:	83 c4 20             	add    esp,0x20
c001e79c:	e9 fb 01 00 00       	jmp    c001e99c <Vm::faultHandler(regs*)+0x827>
c001e7a1:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e7a4:	0f b7 d3             	movzx  edx,bx
c001e7a7:	81 e6 00 04 00 00    	and    esi,0x400
c001e7ad:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e7b0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e7b5:	74 1d                	je     c001e7d4 <Vm::faultHandler(regs*)+0x65f>
c001e7b7:	51                   	push   ecx
c001e7b8:	51                   	push   ecx
c001e7b9:	52                   	push   edx
c001e7ba:	50                   	push   eax
c001e7bb:	e8 64 f9 ff ff       	call   c001e124 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e7c0:	83 c4 10             	add    esp,0x10
c001e7c3:	89 ea                	mov    edx,ebp
c001e7c5:	ef                   	out    dx,eax
c001e7c6:	85 f6                	test   esi,esi
c001e7c8:	74 05                	je     c001e7cf <Vm::faultHandler(regs*)+0x65a>
c001e7ca:	83 eb 04             	sub    ebx,0x4
c001e7cd:	eb 21                	jmp    c001e7f0 <Vm::faultHandler(regs*)+0x67b>
c001e7cf:	83 c3 04             	add    ebx,0x4
c001e7d2:	eb 1c                	jmp    c001e7f0 <Vm::faultHandler(regs*)+0x67b>
c001e7d4:	51                   	push   ecx
c001e7d5:	51                   	push   ecx
c001e7d6:	52                   	push   edx
c001e7d7:	50                   	push   eax
c001e7d8:	e8 35 f9 ff ff       	call   c001e112 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e7dd:	83 c4 10             	add    esp,0x10
c001e7e0:	89 ea                	mov    edx,ebp
c001e7e2:	66 ef                	out    dx,ax
c001e7e4:	85 f6                	test   esi,esi
c001e7e6:	74 05                	je     c001e7ed <Vm::faultHandler(regs*)+0x678>
c001e7e8:	83 eb 02             	sub    ebx,0x2
c001e7eb:	eb 03                	jmp    c001e7f0 <Vm::faultHandler(regs*)+0x67b>
c001e7ed:	83 c3 02             	add    ebx,0x2
c001e7f0:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e7f6:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e7f9:	e9 43 01 00 00       	jmp    c001e941 <Vm::faultHandler(regs*)+0x7cc>
c001e7fe:	53                   	push   ebx
c001e7ff:	53                   	push   ebx
c001e800:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e804:	50                   	push   eax
c001e805:	68 0d b2 02 c0       	push   0xc002b20d
c001e80a:	e8 c6 40 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e80f:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e816:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e81a:	89 04 24             	mov    DWORD PTR [esp],eax
c001e81d:	e8 5e f5 ff ff       	call   c001dd80 <Vm::inbv(unsigned short)>
c001e822:	0f b6 c0             	movzx  eax,al
c001e825:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e828:	eb 5e                	jmp    c001e888 <Vm::faultHandler(regs*)+0x713>
c001e82a:	51                   	push   ecx
c001e82b:	51                   	push   ecx
c001e82c:	53                   	push   ebx
c001e82d:	68 13 b2 02 c0       	push   0xc002b213
c001e832:	e8 9e 40 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e837:	83 c4 10             	add    esp,0x10
c001e83a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e83f:	74 07                	je     c001e848 <Vm::faultHandler(regs*)+0x6d3>
c001e841:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e845:	ed                   	in     eax,dx
c001e846:	eb 14                	jmp    c001e85c <Vm::faultHandler(regs*)+0x6e7>
c001e848:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e84b:	66 31 db             	xor    bx,bx
c001e84e:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e851:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e855:	66 ed                	in     ax,dx
c001e857:	0f b7 c0             	movzx  eax,ax
c001e85a:	09 d8                	or     eax,ebx
c001e85c:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e85f:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e863:	e9 dc 00 00 00       	jmp    c001e944 <Vm::faultHandler(regs*)+0x7cf>
c001e868:	50                   	push   eax
c001e869:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e86c:	53                   	push   ebx
c001e86d:	68 19 b2 02 c0       	push   0xc002b219
c001e872:	e8 5e 40 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e877:	58                   	pop    eax
c001e878:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e87c:	5a                   	pop    edx
c001e87d:	50                   	push   eax
c001e87e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e882:	50                   	push   eax
c001e883:	e8 0b f5 ff ff       	call   c001dd93 <Vm::outbv(unsigned short, unsigned char)>
c001e888:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e88c:	e9 85 00 00 00       	jmp    c001e916 <Vm::faultHandler(regs*)+0x7a1>
c001e891:	50                   	push   eax
c001e892:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e895:	53                   	push   ebx
c001e896:	68 22 b2 02 c0       	push   0xc002b222
c001e89b:	e8 35 40 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e8a0:	83 c4 10             	add    esp,0x10
c001e8a3:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e8a7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e8ac:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e8af:	74 03                	je     c001e8b4 <Vm::faultHandler(regs*)+0x73f>
c001e8b1:	ef                   	out    dx,eax
c001e8b2:	eb ab                	jmp    c001e85f <Vm::faultHandler(regs*)+0x6ea>
c001e8b4:	66 ef                	out    dx,ax
c001e8b6:	eb a7                	jmp    c001e85f <Vm::faultHandler(regs*)+0x6ea>
c001e8b8:	55                   	push   ebp
c001e8b9:	55                   	push   ebp
c001e8ba:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e8bd:	68 2b b2 02 c0       	push   0xc002b22b
c001e8c2:	e8 0e 40 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e8c7:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e8ce:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e8d2:	89 04 24             	mov    DWORD PTR [esp],eax
c001e8d5:	e8 a6 f4 ff ff       	call   c001dd80 <Vm::inbv(unsigned short)>
c001e8da:	0f b6 c0             	movzx  eax,al
c001e8dd:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e8e0:	eb 31                	jmp    c001e913 <Vm::faultHandler(regs*)+0x79e>
c001e8e2:	56                   	push   esi
c001e8e3:	56                   	push   esi
c001e8e4:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e8e7:	68 31 b2 02 c0       	push   0xc002b231
c001e8ec:	e8 e4 3f ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e8f1:	83 c4 10             	add    esp,0x10
c001e8f4:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e8f7:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e8fc:	74 03                	je     c001e901 <Vm::faultHandler(regs*)+0x78c>
c001e8fe:	ed                   	in     eax,dx
c001e8ff:	eb 0d                	jmp    c001e90e <Vm::faultHandler(regs*)+0x799>
c001e901:	66 ed                	in     ax,dx
c001e903:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e906:	0f b7 c0             	movzx  eax,ax
c001e909:	66 31 d2             	xor    dx,dx
c001e90c:	09 d0                	or     eax,edx
c001e90e:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e911:	eb 2e                	jmp    c001e941 <Vm::faultHandler(regs*)+0x7cc>
c001e913:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e916:	83 c4 10             	add    esp,0x10
c001e919:	eb 29                	jmp    c001e944 <Vm::faultHandler(regs*)+0x7cf>
c001e91b:	50                   	push   eax
c001e91c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e91f:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e922:	68 40 b2 02 c0       	push   0xc002b240
c001e927:	e8 a9 3f ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e92c:	83 c4 10             	add    esp,0x10
c001e92f:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e932:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e937:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e93a:	74 03                	je     c001e93f <Vm::faultHandler(regs*)+0x7ca>
c001e93c:	ef                   	out    dx,eax
c001e93d:	eb 02                	jmp    c001e941 <Vm::faultHandler(regs*)+0x7cc>
c001e93f:	66 ef                	out    dx,ax
c001e941:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e944:	b0 01                	mov    al,0x1
c001e946:	eb 56                	jmp    c001e99e <Vm::faultHandler(regs*)+0x829>
c001e948:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e94c:	51                   	push   ecx
c001e94d:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e951:	51                   	push   ecx
c001e952:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e956:	51                   	push   ecx
c001e957:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e95b:	51                   	push   ecx
c001e95c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e960:	52                   	push   edx
c001e961:	50                   	push   eax
c001e962:	50                   	push   eax
c001e963:	68 49 b2 02 c0       	push   0xc002b249
c001e968:	e8 68 3f ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001e96d:	83 c4 20             	add    esp,0x20
c001e970:	83 ec 0c             	sub    esp,0xc
c001e973:	6a 60                	push   0x60
c001e975:	e8 06 f4 ff ff       	call   c001dd80 <Vm::inbv(unsigned short)>
c001e97a:	83 c4 10             	add    esp,0x10
c001e97d:	3c 1c                	cmp    al,0x1c
c001e97f:	74 04                	je     c001e985 <Vm::faultHandler(regs*)+0x810>
c001e981:	3c 5a                	cmp    al,0x5a
c001e983:	75 eb                	jne    c001e970 <Vm::faultHandler(regs*)+0x7fb>
c001e985:	3c 1c                	cmp    al,0x1c
c001e987:	74 04                	je     c001e98d <Vm::faultHandler(regs*)+0x818>
c001e989:	3c 5a                	cmp    al,0x5a
c001e98b:	75 0f                	jne    c001e99c <Vm::faultHandler(regs*)+0x827>
c001e98d:	83 ec 0c             	sub    esp,0xc
c001e990:	6a 60                	push   0x60
c001e992:	e8 e9 f3 ff ff       	call   c001dd80 <Vm::inbv(unsigned short)>
c001e997:	83 c4 10             	add    esp,0x10
c001e99a:	eb e9                	jmp    c001e985 <Vm::faultHandler(regs*)+0x810>
c001e99c:	31 c0                	xor    eax,eax
c001e99e:	83 c4 1c             	add    esp,0x1c
c001e9a1:	5b                   	pop    ebx
c001e9a2:	5e                   	pop    esi
c001e9a3:	5f                   	pop    edi
c001e9a4:	5d                   	pop    ebp
c001e9a5:	c3                   	ret    

c001e9a6 <Vm::fpuInternalTo32(unsigned long long)>:
c001e9a6:	57                   	push   edi
c001e9a7:	56                   	push   esi
c001e9a8:	53                   	push   ebx
c001e9a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e9ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b1:	89 d6                	mov    esi,edx
c001e9b3:	89 d7                	mov    edi,edx
c001e9b5:	89 c1                	mov    ecx,eax
c001e9b7:	c1 ef 14             	shr    edi,0x14
c001e9ba:	89 d3                	mov    ebx,edx
c001e9bc:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e9c2:	31 d2                	xor    edx,edx
c001e9c4:	89 f8                	mov    eax,edi
c001e9c6:	81 e6 00 00 00 80    	and    esi,0x80000000
c001e9cc:	bf ff 00 00 00       	mov    edi,0xff
c001e9d1:	05 80 fc ff ff       	add    eax,0xfffffc80
c001e9d6:	83 d2 ff             	adc    edx,0xffffffff
c001e9d9:	39 c7                	cmp    edi,eax
c001e9db:	bf 00 00 00 00       	mov    edi,0x0
c001e9e0:	19 d7                	sbb    edi,edx
c001e9e2:	72 15                	jb     c001e9f9 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001e9e4:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001e9e8:	c1 e0 17             	shl    eax,0x17
c001e9eb:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001e9f1:	09 f1                	or     ecx,esi
c001e9f3:	09 c1                	or     ecx,eax
c001e9f5:	89 cf                	mov    edi,ecx
c001e9f7:	eb 02                	jmp    c001e9fb <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001e9f9:	31 ff                	xor    edi,edi
c001e9fb:	89 f8                	mov    eax,edi
c001e9fd:	5b                   	pop    ebx
c001e9fe:	5e                   	pop    esi
c001e9ff:	5f                   	pop    edi
c001ea00:	c3                   	ret    

c001ea01 <Vm::fpuInternalTo64(unsigned long long)>:
c001ea01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea05:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ea09:	c3                   	ret    

c001ea0a <Vm::fpu32ToInternal(unsigned int)>:
c001ea0a:	57                   	push   edi
c001ea0b:	31 ff                	xor    edi,edi
c001ea0d:	56                   	push   esi
c001ea0e:	53                   	push   ebx
c001ea0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea13:	89 cb                	mov    ebx,ecx
c001ea15:	89 ce                	mov    esi,ecx
c001ea17:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ea1d:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ea23:	c1 e9 17             	shr    ecx,0x17
c001ea26:	89 f0                	mov    eax,esi
c001ea28:	0f b6 d1             	movzx  edx,cl
c001ea2b:	81 c2 80 03 00 00    	add    edx,0x380
c001ea31:	89 d1                	mov    ecx,edx
c001ea33:	89 fa                	mov    edx,edi
c001ea35:	c1 e1 14             	shl    ecx,0x14
c001ea38:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ea3c:	c1 e0 1d             	shl    eax,0x1d
c001ea3f:	89 d7                	mov    edi,edx
c001ea41:	89 c6                	mov    esi,eax
c001ea43:	89 ca                	mov    edx,ecx
c001ea45:	89 f0                	mov    eax,esi
c001ea47:	09 fa                	or     edx,edi
c001ea49:	09 da                	or     edx,ebx
c001ea4b:	5b                   	pop    ebx
c001ea4c:	5e                   	pop    esi
c001ea4d:	5f                   	pop    edi
c001ea4e:	c3                   	ret    

c001ea4f <Vm::fpu64ToInternal(unsigned long long)>:
c001ea4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea53:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ea57:	c3                   	ret    

c001ea58 <Vm::fpuFloatToLong(unsigned long long)>:
c001ea58:	57                   	push   edi
c001ea59:	31 c0                	xor    eax,eax
c001ea5b:	56                   	push   esi
c001ea5c:	31 d2                	xor    edx,edx
c001ea5e:	53                   	push   ebx
c001ea5f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ea63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ea67:	89 d9                	mov    ecx,ebx
c001ea69:	c1 e9 14             	shr    ecx,0x14
c001ea6c:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ea72:	89 cf                	mov    edi,ecx
c001ea74:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ea7a:	78 33                	js     c001eaaf <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ea7c:	89 d9                	mov    ecx,ebx
c001ea7e:	89 f0                	mov    eax,esi
c001ea80:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ea86:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ea8c:	89 ca                	mov    edx,ecx
c001ea8e:	b9 34 00 00 00       	mov    ecx,0x34
c001ea93:	29 f9                	sub    ecx,edi
c001ea95:	0f ad d0             	shrd   eax,edx,cl
c001ea98:	d3 fa                	sar    edx,cl
c001ea9a:	f6 c1 20             	test   cl,0x20
c001ea9d:	74 05                	je     c001eaa4 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ea9f:	89 d0                	mov    eax,edx
c001eaa1:	c1 fa 1f             	sar    edx,0x1f
c001eaa4:	85 db                	test   ebx,ebx
c001eaa6:	79 07                	jns    c001eaaf <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001eaa8:	f7 d8                	neg    eax
c001eaaa:	83 d2 00             	adc    edx,0x0
c001eaad:	f7 da                	neg    edx
c001eaaf:	5b                   	pop    ebx
c001eab0:	5e                   	pop    esi
c001eab1:	5f                   	pop    edi
c001eab2:	c3                   	ret    

c001eab3 <Vm::fpuULongToFloat(unsigned long long)>:
c001eab3:	57                   	push   edi
c001eab4:	31 c9                	xor    ecx,ecx
c001eab6:	56                   	push   esi
c001eab7:	53                   	push   ebx
c001eab8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eabc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001eac0:	0f ba e7 14          	bt     edi,0x14
c001eac4:	72 07                	jb     c001eacd <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001eac6:	01 f6                	add    esi,esi
c001eac8:	11 ff                	adc    edi,edi
c001eaca:	41                   	inc    ecx
c001eacb:	eb f3                	jmp    c001eac0 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001eacd:	89 fa                	mov    edx,edi
c001eacf:	89 f0                	mov    eax,esi
c001ead1:	bb 33 04 00 00       	mov    ebx,0x433
c001ead6:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001eadc:	29 cb                	sub    ebx,ecx
c001eade:	89 d9                	mov    ecx,ebx
c001eae0:	5b                   	pop    ebx
c001eae1:	c1 e1 14             	shl    ecx,0x14
c001eae4:	5e                   	pop    esi
c001eae5:	09 ca                	or     edx,ecx
c001eae7:	5f                   	pop    edi
c001eae8:	c3                   	ret    

c001eae9 <Vm::fpuLongToFloat(long long)>:
c001eae9:	56                   	push   esi
c001eaea:	31 c0                	xor    eax,eax
c001eaec:	53                   	push   ebx
c001eaed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eaf1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eaf5:	39 c8                	cmp    eax,ecx
c001eaf7:	19 d8                	sbb    eax,ebx
c001eaf9:	7d 04                	jge    c001eaff <Vm::fpuLongToFloat(long long)+0x16>
c001eafb:	31 f6                	xor    esi,esi
c001eafd:	eb 0c                	jmp    c001eb0b <Vm::fpuLongToFloat(long long)+0x22>
c001eaff:	f7 d9                	neg    ecx
c001eb01:	be 01 00 00 00       	mov    esi,0x1
c001eb06:	83 d3 00             	adc    ebx,0x0
c001eb09:	f7 db                	neg    ebx
c001eb0b:	31 c0                	xor    eax,eax
c001eb0d:	0f ba e3 14          	bt     ebx,0x14
c001eb11:	72 07                	jb     c001eb1a <Vm::fpuLongToFloat(long long)+0x31>
c001eb13:	01 c9                	add    ecx,ecx
c001eb15:	11 db                	adc    ebx,ebx
c001eb17:	40                   	inc    eax
c001eb18:	eb f3                	jmp    c001eb0d <Vm::fpuLongToFloat(long long)+0x24>
c001eb1a:	ba 33 04 00 00       	mov    edx,0x433
c001eb1f:	29 c2                	sub    edx,eax
c001eb21:	89 c8                	mov    eax,ecx
c001eb23:	c1 e2 14             	shl    edx,0x14
c001eb26:	89 d9                	mov    ecx,ebx
c001eb28:	89 f3                	mov    ebx,esi
c001eb2a:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001eb30:	09 ca                	or     edx,ecx
c001eb32:	84 db                	test   bl,bl
c001eb34:	74 06                	je     c001eb3c <Vm::fpuLongToFloat(long long)+0x53>
c001eb36:	81 ca 00 00 00 80    	or     edx,0x80000000
c001eb3c:	5b                   	pop    ebx
c001eb3d:	5e                   	pop    esi
c001eb3e:	c3                   	ret    

c001eb3f <Vm::fpuGet0()>:
c001eb3f:	31 c0                	xor    eax,eax
c001eb41:	31 d2                	xor    edx,edx
c001eb43:	c3                   	ret    

c001eb44 <Vm::fpuGet1()>:
c001eb44:	b8 01 00 00 00       	mov    eax,0x1
c001eb49:	31 d2                	xor    edx,edx
c001eb4b:	c3                   	ret    

c001eb4c <Vm::fpuGetPi()>:
c001eb4c:	b8 03 00 00 00       	mov    eax,0x3
c001eb51:	31 d2                	xor    edx,edx
c001eb53:	c3                   	ret    

c001eb54 <Vm::fpuGetLog2E()>:
c001eb54:	83 ec 18             	sub    esp,0x18
c001eb57:	68 a8 b2 02 c0       	push   0xc002b2a8
c001eb5c:	e8 54 b0 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001eb61:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eb66:	31 d2                	xor    edx,edx
c001eb68:	83 c4 1c             	add    esp,0x1c
c001eb6b:	c3                   	ret    

c001eb6c <Vm::fpuGetLogE2()>:
c001eb6c:	83 ec 18             	sub    esp,0x18
c001eb6f:	68 b4 b2 02 c0       	push   0xc002b2b4
c001eb74:	e8 3c b0 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001eb79:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eb7e:	31 d2                	xor    edx,edx
c001eb80:	83 c4 1c             	add    esp,0x1c
c001eb83:	c3                   	ret    

c001eb84 <Vm::fpuGetLog210()>:
c001eb84:	83 ec 18             	sub    esp,0x18
c001eb87:	68 c0 b2 02 c0       	push   0xc002b2c0
c001eb8c:	e8 24 b0 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001eb91:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001eb96:	31 d2                	xor    edx,edx
c001eb98:	83 c4 1c             	add    esp,0x1c
c001eb9b:	c3                   	ret    

c001eb9c <Vm::fpuGetLog102()>:
c001eb9c:	83 ec 18             	sub    esp,0x18
c001eb9f:	68 cd b2 02 c0       	push   0xc002b2cd
c001eba4:	e8 0c b0 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001eba9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ebae:	31 d2                	xor    edx,edx
c001ebb0:	83 c4 1c             	add    esp,0x1c
c001ebb3:	c3                   	ret    

c001ebb4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001ebb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ebb8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001ebbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ebc0:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001ebc4:	0f 92 c0             	setb   al
c001ebc7:	c3                   	ret    

c001ebc8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001ebc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ebcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd0:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001ebd4:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001ebd8:	09 c2                	or     edx,eax
c001ebda:	0f 94 c0             	sete   al
c001ebdd:	c3                   	ret    

c001ebde <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001ebde:	57                   	push   edi
c001ebdf:	56                   	push   esi
c001ebe0:	53                   	push   ebx
c001ebe1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ebe5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ebe9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ebed:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ebf1:	57                   	push   edi
c001ebf2:	56                   	push   esi
c001ebf3:	53                   	push   ebx
c001ebf4:	51                   	push   ecx
c001ebf5:	e8 ce ff ff ff       	call   c001ebc8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001ebfa:	83 c4 10             	add    esp,0x10
c001ebfd:	88 c2                	mov    dl,al
c001ebff:	31 c0                	xor    eax,eax
c001ec01:	84 d2                	test   dl,dl
c001ec03:	75 0c                	jne    c001ec11 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001ec05:	57                   	push   edi
c001ec06:	56                   	push   esi
c001ec07:	53                   	push   ebx
c001ec08:	51                   	push   ecx
c001ec09:	e8 a6 ff ff ff       	call   c001ebb4 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001ec0e:	83 c4 10             	add    esp,0x10
c001ec11:	83 e0 01             	and    eax,0x1
c001ec14:	5b                   	pop    ebx
c001ec15:	88 c1                	mov    cl,al
c001ec17:	83 e2 01             	and    edx,0x1
c001ec1a:	a0 c1 e4 02 c0       	mov    al,ds:0xc002e4c1
c001ec1f:	c1 e2 06             	shl    edx,0x6
c001ec22:	83 e0 ba             	and    eax,0xffffffba
c001ec25:	5e                   	pop    esi
c001ec26:	09 c8                	or     eax,ecx
c001ec28:	5f                   	pop    edi
c001ec29:	09 d0                	or     eax,edx
c001ec2b:	a2 c1 e4 02 c0       	mov    ds:0xc002e4c1,al
c001ec30:	c3                   	ret    

c001ec31 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001ec31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec39:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ec3d:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001ec41:	c3                   	ret    

c001ec42 <Vm::fpuAbs(unsigned long long)>:
c001ec42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ec4a:	c3                   	ret    

c001ec4b <Vm::fpuChs(unsigned long long)>:
c001ec4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec4f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ec53:	f7 d8                	neg    eax
c001ec55:	83 d2 00             	adc    edx,0x0
c001ec58:	f7 da                	neg    edx
c001ec5a:	c3                   	ret    

c001ec5b <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001ec5b:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001ec5f:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001ec64:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001ec68:	eb c7                	jmp    c001ec31 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001ec6a <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001ec6a:	53                   	push   ebx
c001ec6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec73:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec77:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ec7b:	0f af ca             	imul   ecx,edx
c001ec7e:	0f af d8             	imul   ebx,eax
c001ec81:	f7 e2                	mul    edx
c001ec83:	01 d9                	add    ecx,ebx
c001ec85:	5b                   	pop    ebx
c001ec86:	01 ca                	add    edx,ecx
c001ec88:	c3                   	ret    

c001ec89 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001ec89:	83 ec 0c             	sub    esp,0xc
c001ec8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec9c:	e8 2b 6b 00 00       	call   c00257cc <__udivdi3>
c001eca1:	83 c4 1c             	add    esp,0x1c
c001eca4:	c3                   	ret    

c001eca5 <Vm::fpuSquare(unsigned long long)>:
c001eca5:	50                   	push   eax
c001eca6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ecaa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ecae:	52                   	push   edx
c001ecaf:	50                   	push   eax
c001ecb0:	52                   	push   edx
c001ecb1:	50                   	push   eax
c001ecb2:	e8 b3 ff ff ff       	call   c001ec6a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ecb7:	83 c4 14             	add    esp,0x14
c001ecba:	c3                   	ret    

c001ecbb <Vm::fpuGetReg(int)>:
c001ecbb:	83 ec 0c             	sub    esp,0xc
c001ecbe:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ecc3:	76 10                	jbe    c001ecd5 <Vm::fpuGetReg(int)+0x1a>
c001ecc5:	83 ec 0c             	sub    esp,0xc
c001ecc8:	68 da b2 02 c0       	push   0xc002b2da
c001eccd:	e8 e3 ae ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001ecd2:	83 c4 10             	add    esp,0x10
c001ecd5:	a0 c1 e4 02 c0       	mov    al,ds:0xc002e4c1
c001ecda:	b9 08 00 00 00       	mov    ecx,0x8
c001ecdf:	c0 e8 03             	shr    al,0x3
c001ece2:	83 e0 07             	and    eax,0x7
c001ece5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ece9:	99                   	cdq    
c001ecea:	f7 f9                	idiv   ecx
c001ecec:	8b 04 d5 c4 e4 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd1b3c]
c001ecf3:	8b 14 d5 c8 e4 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd1b38]
c001ecfa:	83 c4 0c             	add    esp,0xc
c001ecfd:	c3                   	ret    

c001ecfe <Vm::fpuSetReg(int, unsigned long long)>:
c001ecfe:	57                   	push   edi
c001ecff:	56                   	push   esi
c001ed00:	52                   	push   edx
c001ed01:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ed05:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ed09:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ed0e:	76 10                	jbe    c001ed20 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001ed10:	83 ec 0c             	sub    esp,0xc
c001ed13:	68 ed b2 02 c0       	push   0xc002b2ed
c001ed18:	e8 98 ae ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001ed1d:	83 c4 10             	add    esp,0x10
c001ed20:	a0 c1 e4 02 c0       	mov    al,ds:0xc002e4c1
c001ed25:	b9 08 00 00 00       	mov    ecx,0x8
c001ed2a:	c0 e8 03             	shr    al,0x3
c001ed2d:	83 e0 07             	and    eax,0x7
c001ed30:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ed34:	99                   	cdq    
c001ed35:	f7 f9                	idiv   ecx
c001ed37:	89 34 d5 c4 e4 02 c0 	mov    DWORD PTR [edx*8-0x3ffd1b3c],esi
c001ed3e:	89 3c d5 c8 e4 02 c0 	mov    DWORD PTR [edx*8-0x3ffd1b38],edi
c001ed45:	58                   	pop    eax
c001ed46:	5e                   	pop    esi
c001ed47:	5f                   	pop    edi
c001ed48:	c3                   	ret    

c001ed49 <Vm::fpuPush(unsigned long long)>:
c001ed49:	a0 c1 e4 02 c0       	mov    al,ds:0xc002e4c1
c001ed4e:	c0 e8 03             	shr    al,0x3
c001ed51:	83 e0 07             	and    eax,0x7
c001ed54:	83 c0 07             	add    eax,0x7
c001ed57:	88 c2                	mov    dl,al
c001ed59:	83 e0 07             	and    eax,0x7
c001ed5c:	83 e2 07             	and    edx,0x7
c001ed5f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001ed66:	8a 15 c1 e4 02 c0    	mov    dl,BYTE PTR ds:0xc002e4c1
c001ed6c:	83 e2 c7             	and    edx,0xffffffc7
c001ed6f:	09 ca                	or     edx,ecx
c001ed71:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ed75:	88 15 c1 e4 02 c0    	mov    BYTE PTR ds:0xc002e4c1,dl
c001ed7b:	89 0c c5 c8 e4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1b38],ecx
c001ed82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ed86:	89 14 c5 c4 e4 02 c0 	mov    DWORD PTR [eax*8-0x3ffd1b3c],edx
c001ed8d:	a1 04 e5 02 c0       	mov    eax,ds:0xc002e504
c001ed92:	83 f8 08             	cmp    eax,0x8
c001ed95:	75 08                	jne    c001ed9f <Vm::fpuPush(unsigned long long)+0x56>
c001ed97:	80 0d c0 e4 02 c0 40 	or     BYTE PTR ds:0xc002e4c0,0x40
c001ed9e:	c3                   	ret    
c001ed9f:	40                   	inc    eax
c001eda0:	a3 04 e5 02 c0       	mov    ds:0xc002e504,eax
c001eda5:	c3                   	ret    

c001eda6 <Vm::fpuPop()>:
c001eda6:	8a 0d c1 e4 02 c0    	mov    cl,BYTE PTR ds:0xc002e4c1
c001edac:	53                   	push   ebx
c001edad:	c0 e9 03             	shr    cl,0x3
c001edb0:	8a 1d c1 e4 02 c0    	mov    bl,BYTE PTR ds:0xc002e4c1
c001edb6:	83 e1 07             	and    ecx,0x7
c001edb9:	83 e3 c7             	and    ebx,0xffffffc7
c001edbc:	8b 04 cd c4 e4 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd1b3c]
c001edc3:	8b 14 cd c8 e4 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd1b38]
c001edca:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001edd1:	83 e1 38             	and    ecx,0x38
c001edd4:	09 d9                	or     ecx,ebx
c001edd6:	88 0d c1 e4 02 c0    	mov    BYTE PTR ds:0xc002e4c1,cl
c001eddc:	8b 0d 04 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e504
c001ede2:	85 c9                	test   ecx,ecx
c001ede4:	74 09                	je     c001edef <Vm::fpuPop()+0x49>
c001ede6:	49                   	dec    ecx
c001ede7:	89 0d 04 e5 02 c0    	mov    DWORD PTR ds:0xc002e504,ecx
c001eded:	eb 07                	jmp    c001edf6 <Vm::fpuPop()+0x50>
c001edef:	80 0d c0 e4 02 c0 40 	or     BYTE PTR ds:0xc002e4c0,0x40
c001edf6:	5b                   	pop    ebx
c001edf7:	c3                   	ret    

c001edf8 <Vm::x87Handler(regs*)>:
c001edf8:	55                   	push   ebp
c001edf9:	57                   	push   edi
c001edfa:	56                   	push   esi
c001edfb:	53                   	push   ebx
c001edfc:	83 ec 1c             	sub    esp,0x1c
c001edff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ee03:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001ee08:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001ee0b:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001ee13:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001ee17:	50                   	push   eax
c001ee18:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001ee1c:	50                   	push   eax
c001ee1d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ee21:	50                   	push   eax
c001ee22:	53                   	push   ebx
c001ee23:	e8 be a5 ff ff       	call   c00193e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001ee28:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001ee2b:	83 c4 10             	add    esp,0x10
c001ee2e:	89 c6                	mov    esi,eax
c001ee30:	80 fa d9             	cmp    dl,0xd9
c001ee33:	0f 85 52 01 00 00    	jne    c001ef8b <Vm::x87Handler(regs*)+0x193>
c001ee39:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee3d:	8d 50 20             	lea    edx,[eax+0x20]
c001ee40:	80 fa 0e             	cmp    dl,0xe
c001ee43:	0f 87 86 00 00 00    	ja     c001eecf <Vm::x87Handler(regs*)+0xd7>
c001ee49:	0f b6 d2             	movzx  edx,dl
c001ee4c:	ff 24 95 00 b3 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd4d00]
c001ee53:	e8 e7 fc ff ff       	call   c001eb3f <Vm::fpuGet0()>
c001ee58:	eb 05                	jmp    c001ee5f <Vm::x87Handler(regs*)+0x67>
c001ee5a:	e8 e5 fc ff ff       	call   c001eb44 <Vm::fpuGet1()>
c001ee5f:	57                   	push   edi
c001ee60:	57                   	push   edi
c001ee61:	52                   	push   edx
c001ee62:	50                   	push   eax
c001ee63:	e8 e1 fe ff ff       	call   c001ed49 <Vm::fpuPush(unsigned long long)>
c001ee68:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee6c:	83 c4 10             	add    esp,0x10
c001ee6f:	b0 01                	mov    al,0x1
c001ee71:	e9 e3 09 00 00       	jmp    c001f859 <Vm::x87Handler(regs*)+0xa61>
c001ee76:	83 ec 0c             	sub    esp,0xc
c001ee79:	6a 00                	push   0x0
c001ee7b:	e8 3b fe ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001ee80:	59                   	pop    ecx
c001ee81:	5e                   	pop    esi
c001ee82:	52                   	push   edx
c001ee83:	50                   	push   eax
c001ee84:	e8 c2 fd ff ff       	call   c001ec4b <Vm::fpuChs(unsigned long long)>
c001ee89:	eb 13                	jmp    c001ee9e <Vm::x87Handler(regs*)+0xa6>
c001ee8b:	83 ec 0c             	sub    esp,0xc
c001ee8e:	6a 00                	push   0x0
c001ee90:	e8 26 fe ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001ee95:	5f                   	pop    edi
c001ee96:	5d                   	pop    ebp
c001ee97:	52                   	push   edx
c001ee98:	50                   	push   eax
c001ee99:	e8 a4 fd ff ff       	call   c001ec42 <Vm::fpuAbs(unsigned long long)>
c001ee9e:	83 c4 0c             	add    esp,0xc
c001eea1:	52                   	push   edx
c001eea2:	50                   	push   eax
c001eea3:	6a 00                	push   0x0
c001eea5:	e8 54 fe ff ff       	call   c001ecfe <Vm::fpuSetReg(int, unsigned long long)>
c001eeaa:	eb bc                	jmp    c001ee68 <Vm::x87Handler(regs*)+0x70>
c001eeac:	e8 d3 fc ff ff       	call   c001eb84 <Vm::fpuGetLog210()>
c001eeb1:	eb ac                	jmp    c001ee5f <Vm::x87Handler(regs*)+0x67>
c001eeb3:	e8 9c fc ff ff       	call   c001eb54 <Vm::fpuGetLog2E()>
c001eeb8:	eb a5                	jmp    c001ee5f <Vm::x87Handler(regs*)+0x67>
c001eeba:	e8 8d fc ff ff       	call   c001eb4c <Vm::fpuGetPi()>
c001eebf:	eb 9e                	jmp    c001ee5f <Vm::x87Handler(regs*)+0x67>
c001eec1:	e8 d6 fc ff ff       	call   c001eb9c <Vm::fpuGetLog102()>
c001eec6:	eb 97                	jmp    c001ee5f <Vm::x87Handler(regs*)+0x67>
c001eec8:	e8 9f fc ff ff       	call   c001eb6c <Vm::fpuGetLogE2()>
c001eecd:	eb 90                	jmp    c001ee5f <Vm::x87Handler(regs*)+0x67>
c001eecf:	8d 50 40             	lea    edx,[eax+0x40]
c001eed2:	80 fa 07             	cmp    dl,0x7
c001eed5:	77 15                	ja     c001eeec <Vm::x87Handler(regs*)+0xf4>
c001eed7:	83 ec 0c             	sub    esp,0xc
c001eeda:	2d c0 00 00 00       	sub    eax,0xc0
c001eedf:	50                   	push   eax
c001eee0:	e8 d6 fd ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001eee5:	59                   	pop    ecx
c001eee6:	5e                   	pop    esi
c001eee7:	e9 75 ff ff ff       	jmp    c001ee61 <Vm::x87Handler(regs*)+0x69>
c001eeec:	8d 50 38             	lea    edx,[eax+0x38]
c001eeef:	80 fa 07             	cmp    dl,0x7
c001eef2:	77 3c                	ja     c001ef30 <Vm::x87Handler(regs*)+0x138>
c001eef4:	83 ec 0c             	sub    esp,0xc
c001eef7:	2d c8 00 00 00       	sub    eax,0xc8
c001eefc:	50                   	push   eax
c001eefd:	e8 b9 fd ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001ef02:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef09:	89 c6                	mov    esi,eax
c001ef0b:	89 d7                	mov    edi,edx
c001ef0d:	e8 a9 fd ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001ef12:	83 c4 0c             	add    esp,0xc
c001ef15:	52                   	push   edx
c001ef16:	50                   	push   eax
c001ef17:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef1b:	2d c8 00 00 00       	sub    eax,0xc8
c001ef20:	50                   	push   eax
c001ef21:	e8 d8 fd ff ff       	call   c001ecfe <Vm::fpuSetReg(int, unsigned long long)>
c001ef26:	83 c4 0c             	add    esp,0xc
c001ef29:	57                   	push   edi
c001ef2a:	56                   	push   esi
c001ef2b:	e9 73 ff ff ff       	jmp    c001eea3 <Vm::x87Handler(regs*)+0xab>
c001ef30:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ef34:	84 d2                	test   dl,dl
c001ef36:	75 0f                	jne    c001ef47 <Vm::x87Handler(regs*)+0x14f>
c001ef38:	83 ec 0c             	sub    esp,0xc
c001ef3b:	ff 36                	push   DWORD PTR [esi]
c001ef3d:	e8 c8 fa ff ff       	call   c001ea0a <Vm::fpu32ToInternal(unsigned int)>
c001ef42:	e9 bf 00 00 00       	jmp    c001f006 <Vm::x87Handler(regs*)+0x20e>
c001ef47:	80 fa 03             	cmp    dl,0x3
c001ef4a:	75 13                	jne    c001ef5f <Vm::x87Handler(regs*)+0x167>
c001ef4c:	e8 55 fe ff ff       	call   c001eda6 <Vm::fpuPop()>
c001ef51:	55                   	push   ebp
c001ef52:	55                   	push   ebp
c001ef53:	52                   	push   edx
c001ef54:	50                   	push   eax
c001ef55:	e8 4c fa ff ff       	call   c001e9a6 <Vm::fpuInternalTo32(unsigned long long)>
c001ef5a:	e9 88 00 00 00       	jmp    c001efe7 <Vm::x87Handler(regs*)+0x1ef>
c001ef5f:	80 fa 05             	cmp    dl,0x5
c001ef62:	75 0e                	jne    c001ef72 <Vm::x87Handler(regs*)+0x17a>
c001ef64:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ef67:	66 a3 c2 e4 02 c0    	mov    ds:0xc002e4c2,ax
c001ef6d:	e9 df 00 00 00       	jmp    c001f051 <Vm::x87Handler(regs*)+0x259>
c001ef72:	31 c0                	xor    eax,eax
c001ef74:	80 fa 07             	cmp    dl,0x7
c001ef77:	0f 85 dc 08 00 00    	jne    c001f859 <Vm::x87Handler(regs*)+0xa61>
c001ef7d:	66 a1 c2 e4 02 c0    	mov    ax,ds:0xc002e4c2
c001ef83:	66 89 06             	mov    WORD PTR [esi],ax
c001ef86:	e9 c6 00 00 00       	jmp    c001f051 <Vm::x87Handler(regs*)+0x259>
c001ef8b:	80 fa d8             	cmp    dl,0xd8
c001ef8e:	0f 84 c9 00 00 00    	je     c001f05d <Vm::x87Handler(regs*)+0x265>
c001ef94:	80 fa dc             	cmp    dl,0xdc
c001ef97:	0f 84 0d 02 00 00    	je     c001f1aa <Vm::x87Handler(regs*)+0x3b2>
c001ef9d:	80 fa de             	cmp    dl,0xde
c001efa0:	0f 84 cd 02 00 00    	je     c001f273 <Vm::x87Handler(regs*)+0x47b>
c001efa6:	80 fa dd             	cmp    dl,0xdd
c001efa9:	0f 84 5f 04 00 00    	je     c001f40e <Vm::x87Handler(regs*)+0x616>
c001efaf:	80 fa da             	cmp    dl,0xda
c001efb2:	0f 84 24 05 00 00    	je     c001f4dc <Vm::x87Handler(regs*)+0x6e4>
c001efb8:	80 fa df             	cmp    dl,0xdf
c001efbb:	0f 84 68 05 00 00    	je     c001f529 <Vm::x87Handler(regs*)+0x731>
c001efc1:	31 c0                	xor    eax,eax
c001efc3:	80 fa db             	cmp    dl,0xdb
c001efc6:	0f 85 8d 08 00 00    	jne    c001f859 <Vm::x87Handler(regs*)+0xa61>
c001efcc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001efd0:	80 fa 03             	cmp    dl,0x3
c001efd3:	0f 85 70 06 00 00    	jne    c001f649 <Vm::x87Handler(regs*)+0x851>
c001efd9:	e8 c8 fd ff ff       	call   c001eda6 <Vm::fpuPop()>
c001efde:	55                   	push   ebp
c001efdf:	55                   	push   ebp
c001efe0:	52                   	push   edx
c001efe1:	50                   	push   eax
c001efe2:	e8 71 fa ff ff       	call   c001ea58 <Vm::fpuFloatToLong(unsigned long long)>
c001efe7:	83 c4 10             	add    esp,0x10
c001efea:	89 06                	mov    DWORD PTR [esi],eax
c001efec:	eb 63                	jmp    c001f051 <Vm::x87Handler(regs*)+0x259>
c001efee:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eff2:	84 d2                	test   dl,dl
c001eff4:	0f 85 e6 05 00 00    	jne    c001f5e0 <Vm::x87Handler(regs*)+0x7e8>
c001effa:	57                   	push   edi
c001effb:	57                   	push   edi
c001effc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001efff:	ff 36                	push   DWORD PTR [esi]
c001f001:	e8 49 fa ff ff       	call   c001ea4f <Vm::fpu64ToInternal(unsigned long long)>
c001f006:	5e                   	pop    esi
c001f007:	5f                   	pop    edi
c001f008:	52                   	push   edx
c001f009:	50                   	push   eax
c001f00a:	e8 3a fd ff ff       	call   c001ed49 <Vm::fpuPush(unsigned long long)>
c001f00f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f013:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f016:	e9 51 fe ff ff       	jmp    c001ee6c <Vm::x87Handler(regs*)+0x74>
c001f01b:	80 fa 03             	cmp    dl,0x3
c001f01e:	0f 85 d7 06 00 00    	jne    c001f6fb <Vm::x87Handler(regs*)+0x903>
c001f024:	57                   	push   edi
c001f025:	57                   	push   edi
c001f026:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f029:	ff 36                	push   DWORD PTR [esi]
c001f02b:	e8 1f fa ff ff       	call   c001ea4f <Vm::fpu64ToInternal(unsigned long long)>
c001f030:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f037:	89 c6                	mov    esi,eax
c001f039:	89 d7                	mov    edi,edx
c001f03b:	e8 7b fc ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f040:	57                   	push   edi
c001f041:	56                   	push   esi
c001f042:	52                   	push   edx
c001f043:	50                   	push   eax
c001f044:	e8 95 fb ff ff       	call   c001ebde <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f049:	83 c4 20             	add    esp,0x20
c001f04c:	e8 55 fd ff ff       	call   c001eda6 <Vm::fpuPop()>
c001f051:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f055:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f058:	e9 12 fe ff ff       	jmp    c001ee6f <Vm::x87Handler(regs*)+0x77>
c001f05d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f061:	8d 50 40             	lea    edx,[eax+0x40]
c001f064:	80 fa 07             	cmp    dl,0x7
c001f067:	77 29                	ja     c001f092 <Vm::x87Handler(regs*)+0x29a>
c001f069:	83 ec 0c             	sub    esp,0xc
c001f06c:	2d c0 00 00 00       	sub    eax,0xc0
c001f071:	50                   	push   eax
c001f072:	e8 44 fc ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f077:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f07e:	89 c6                	mov    esi,eax
c001f080:	89 d7                	mov    edi,edx
c001f082:	e8 34 fc ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f087:	57                   	push   edi
c001f088:	56                   	push   esi
c001f089:	52                   	push   edx
c001f08a:	50                   	push   eax
c001f08b:	e8 a1 fb ff ff       	call   c001ec31 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f090:	eb 2f                	jmp    c001f0c1 <Vm::x87Handler(regs*)+0x2c9>
c001f092:	8d 50 38             	lea    edx,[eax+0x38]
c001f095:	80 fa 07             	cmp    dl,0x7
c001f098:	77 2f                	ja     c001f0c9 <Vm::x87Handler(regs*)+0x2d1>
c001f09a:	83 ec 0c             	sub    esp,0xc
c001f09d:	2d c8 00 00 00       	sub    eax,0xc8
c001f0a2:	50                   	push   eax
c001f0a3:	e8 13 fc ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f0a8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f0af:	89 c6                	mov    esi,eax
c001f0b1:	89 d7                	mov    edi,edx
c001f0b3:	e8 03 fc ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f0b8:	57                   	push   edi
c001f0b9:	56                   	push   esi
c001f0ba:	52                   	push   edx
c001f0bb:	50                   	push   eax
c001f0bc:	e8 a9 fb ff ff       	call   c001ec6a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f0c1:	83 c4 1c             	add    esp,0x1c
c001f0c4:	e9 d8 fd ff ff       	jmp    c001eea1 <Vm::x87Handler(regs*)+0xa9>
c001f0c9:	8d 50 30             	lea    edx,[eax+0x30]
c001f0cc:	80 fa 07             	cmp    dl,0x7
c001f0cf:	77 0d                	ja     c001f0de <Vm::x87Handler(regs*)+0x2e6>
c001f0d1:	83 ec 0c             	sub    esp,0xc
c001f0d4:	2d d0 00 00 00       	sub    eax,0xd0
c001f0d9:	e9 99 03 00 00       	jmp    c001f477 <Vm::x87Handler(regs*)+0x67f>
c001f0de:	8d 50 28             	lea    edx,[eax+0x28]
c001f0e1:	80 fa 07             	cmp    dl,0x7
c001f0e4:	77 0d                	ja     c001f0f3 <Vm::x87Handler(regs*)+0x2fb>
c001f0e6:	83 ec 0c             	sub    esp,0xc
c001f0e9:	2d d8 00 00 00       	sub    eax,0xd8
c001f0ee:	e9 c0 03 00 00       	jmp    c001f4b3 <Vm::x87Handler(regs*)+0x6bb>
c001f0f3:	8d 50 20             	lea    edx,[eax+0x20]
c001f0f6:	80 fa 07             	cmp    dl,0x7
c001f0f9:	77 1b                	ja     c001f116 <Vm::x87Handler(regs*)+0x31e>
c001f0fb:	83 ec 0c             	sub    esp,0xc
c001f0fe:	2d e0 00 00 00       	sub    eax,0xe0
c001f103:	50                   	push   eax
c001f104:	e8 b2 fb ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f109:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f110:	89 c6                	mov    esi,eax
c001f112:	89 d7                	mov    edi,edx
c001f114:	eb 22                	jmp    c001f138 <Vm::x87Handler(regs*)+0x340>
c001f116:	8d 50 18             	lea    edx,[eax+0x18]
c001f119:	80 fa 07             	cmp    dl,0x7
c001f11c:	77 2d                	ja     c001f14b <Vm::x87Handler(regs*)+0x353>
c001f11e:	83 ec 0c             	sub    esp,0xc
c001f121:	6a 00                	push   0x0
c001f123:	e8 93 fb ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f128:	89 c6                	mov    esi,eax
c001f12a:	89 d7                	mov    edi,edx
c001f12c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f130:	2d e8 00 00 00       	sub    eax,0xe8
c001f135:	89 04 24             	mov    DWORD PTR [esp],eax
c001f138:	e8 7e fb ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f13d:	57                   	push   edi
c001f13e:	56                   	push   esi
c001f13f:	52                   	push   edx
c001f140:	50                   	push   eax
c001f141:	e8 15 fb ff ff       	call   c001ec5b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f146:	e9 76 ff ff ff       	jmp    c001f0c1 <Vm::x87Handler(regs*)+0x2c9>
c001f14b:	8d 50 10             	lea    edx,[eax+0x10]
c001f14e:	80 fa 07             	cmp    dl,0x7
c001f151:	77 1b                	ja     c001f16e <Vm::x87Handler(regs*)+0x376>
c001f153:	83 ec 0c             	sub    esp,0xc
c001f156:	2d f0 00 00 00       	sub    eax,0xf0
c001f15b:	50                   	push   eax
c001f15c:	e8 5a fb ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f161:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f168:	89 c6                	mov    esi,eax
c001f16a:	89 d7                	mov    edi,edx
c001f16c:	eb 22                	jmp    c001f190 <Vm::x87Handler(regs*)+0x398>
c001f16e:	3c f7                	cmp    al,0xf7
c001f170:	0f 86 d1 03 00 00    	jbe    c001f547 <Vm::x87Handler(regs*)+0x74f>
c001f176:	83 ec 0c             	sub    esp,0xc
c001f179:	6a 00                	push   0x0
c001f17b:	e8 3b fb ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f180:	89 c6                	mov    esi,eax
c001f182:	89 d7                	mov    edi,edx
c001f184:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f188:	2d f8 00 00 00       	sub    eax,0xf8
c001f18d:	89 04 24             	mov    DWORD PTR [esp],eax
c001f190:	e8 26 fb ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f195:	57                   	push   edi
c001f196:	56                   	push   esi
c001f197:	52                   	push   edx
c001f198:	50                   	push   eax
c001f199:	e8 eb fa ff ff       	call   c001ec89 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f19e:	83 c4 1c             	add    esp,0x1c
c001f1a1:	52                   	push   edx
c001f1a2:	50                   	push   eax
c001f1a3:	6a 00                	push   0x0
c001f1a5:	e9 51 02 00 00       	jmp    c001f3fb <Vm::x87Handler(regs*)+0x603>
c001f1aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1ae:	8d 50 40             	lea    edx,[eax+0x40]
c001f1b1:	80 fa 07             	cmp    dl,0x7
c001f1b4:	77 37                	ja     c001f1ed <Vm::x87Handler(regs*)+0x3f5>
c001f1b6:	83 ec 0c             	sub    esp,0xc
c001f1b9:	2d c0 00 00 00       	sub    eax,0xc0
c001f1be:	50                   	push   eax
c001f1bf:	e8 f7 fa ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f1c4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f1cb:	89 c6                	mov    esi,eax
c001f1cd:	89 d7                	mov    edi,edx
c001f1cf:	e8 e7 fa ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f1d4:	57                   	push   edi
c001f1d5:	56                   	push   esi
c001f1d6:	52                   	push   edx
c001f1d7:	50                   	push   eax
c001f1d8:	e8 54 fa ff ff       	call   c001ec31 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f1dd:	83 c4 1c             	add    esp,0x1c
c001f1e0:	52                   	push   edx
c001f1e1:	50                   	push   eax
c001f1e2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f1e6:	2d c0 00 00 00       	sub    eax,0xc0
c001f1eb:	eb 3d                	jmp    c001f22a <Vm::x87Handler(regs*)+0x432>
c001f1ed:	8d 50 38             	lea    edx,[eax+0x38]
c001f1f0:	80 fa 07             	cmp    dl,0x7
c001f1f3:	77 3b                	ja     c001f230 <Vm::x87Handler(regs*)+0x438>
c001f1f5:	83 ec 0c             	sub    esp,0xc
c001f1f8:	2d c8 00 00 00       	sub    eax,0xc8
c001f1fd:	50                   	push   eax
c001f1fe:	e8 b8 fa ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f203:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f20a:	89 c6                	mov    esi,eax
c001f20c:	89 d7                	mov    edi,edx
c001f20e:	e8 a8 fa ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f213:	57                   	push   edi
c001f214:	56                   	push   esi
c001f215:	52                   	push   edx
c001f216:	50                   	push   eax
c001f217:	e8 4e fa ff ff       	call   c001ec6a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f21c:	83 c4 1c             	add    esp,0x1c
c001f21f:	52                   	push   edx
c001f220:	50                   	push   eax
c001f221:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f225:	2d c8 00 00 00       	sub    eax,0xc8
c001f22a:	50                   	push   eax
c001f22b:	e9 75 fc ff ff       	jmp    c001eea5 <Vm::x87Handler(regs*)+0xad>
c001f230:	83 c0 18             	add    eax,0x18
c001f233:	3c 07                	cmp    al,0x7
c001f235:	0f 87 3b 04 00 00    	ja     c001f676 <Vm::x87Handler(regs*)+0x87e>
c001f23b:	83 ec 0c             	sub    esp,0xc
c001f23e:	6a 00                	push   0x0
c001f240:	e8 76 fa ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f245:	89 c6                	mov    esi,eax
c001f247:	89 d7                	mov    edi,edx
c001f249:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f24d:	2d e8 00 00 00       	sub    eax,0xe8
c001f252:	89 04 24             	mov    DWORD PTR [esp],eax
c001f255:	e8 61 fa ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f25a:	57                   	push   edi
c001f25b:	56                   	push   esi
c001f25c:	52                   	push   edx
c001f25d:	50                   	push   eax
c001f25e:	e8 f8 f9 ff ff       	call   c001ec5b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f263:	83 c4 1c             	add    esp,0x1c
c001f266:	52                   	push   edx
c001f267:	50                   	push   eax
c001f268:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f26c:	2d e8 00 00 00       	sub    eax,0xe8
c001f271:	eb b7                	jmp    c001f22a <Vm::x87Handler(regs*)+0x432>
c001f273:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f277:	8d 50 40             	lea    edx,[eax+0x40]
c001f27a:	80 fa 07             	cmp    dl,0x7
c001f27d:	77 3a                	ja     c001f2b9 <Vm::x87Handler(regs*)+0x4c1>
c001f27f:	83 ec 0c             	sub    esp,0xc
c001f282:	2d c0 00 00 00       	sub    eax,0xc0
c001f287:	50                   	push   eax
c001f288:	e8 2e fa ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f28d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f294:	89 c6                	mov    esi,eax
c001f296:	89 d7                	mov    edi,edx
c001f298:	e8 1e fa ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f29d:	57                   	push   edi
c001f29e:	56                   	push   esi
c001f29f:	52                   	push   edx
c001f2a0:	50                   	push   eax
c001f2a1:	e8 8b f9 ff ff       	call   c001ec31 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f2a6:	83 c4 1c             	add    esp,0x1c
c001f2a9:	52                   	push   edx
c001f2aa:	50                   	push   eax
c001f2ab:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2af:	2d c0 00 00 00       	sub    eax,0xc0
c001f2b4:	e9 9e 01 00 00       	jmp    c001f457 <Vm::x87Handler(regs*)+0x65f>
c001f2b9:	8d 50 20             	lea    edx,[eax+0x20]
c001f2bc:	80 fa 07             	cmp    dl,0x7
c001f2bf:	77 3a                	ja     c001f2fb <Vm::x87Handler(regs*)+0x503>
c001f2c1:	83 ec 0c             	sub    esp,0xc
c001f2c4:	2d e0 00 00 00       	sub    eax,0xe0
c001f2c9:	50                   	push   eax
c001f2ca:	e8 ec f9 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f2cf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2d6:	89 c6                	mov    esi,eax
c001f2d8:	89 d7                	mov    edi,edx
c001f2da:	e8 dc f9 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f2df:	57                   	push   edi
c001f2e0:	56                   	push   esi
c001f2e1:	52                   	push   edx
c001f2e2:	50                   	push   eax
c001f2e3:	e8 73 f9 ff ff       	call   c001ec5b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f2e8:	83 c4 1c             	add    esp,0x1c
c001f2eb:	52                   	push   edx
c001f2ec:	50                   	push   eax
c001f2ed:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f2f1:	2d e0 00 00 00       	sub    eax,0xe0
c001f2f6:	e9 5c 01 00 00       	jmp    c001f457 <Vm::x87Handler(regs*)+0x65f>
c001f2fb:	8d 50 18             	lea    edx,[eax+0x18]
c001f2fe:	80 fa 07             	cmp    dl,0x7
c001f301:	77 3b                	ja     c001f33e <Vm::x87Handler(regs*)+0x546>
c001f303:	83 ec 0c             	sub    esp,0xc
c001f306:	6a 00                	push   0x0
c001f308:	e8 ae f9 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f30d:	89 c6                	mov    esi,eax
c001f30f:	89 d7                	mov    edi,edx
c001f311:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f315:	2d e8 00 00 00       	sub    eax,0xe8
c001f31a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f31d:	e8 99 f9 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f322:	57                   	push   edi
c001f323:	56                   	push   esi
c001f324:	52                   	push   edx
c001f325:	50                   	push   eax
c001f326:	e8 30 f9 ff ff       	call   c001ec5b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f32b:	83 c4 1c             	add    esp,0x1c
c001f32e:	52                   	push   edx
c001f32f:	50                   	push   eax
c001f330:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f334:	2d e8 00 00 00       	sub    eax,0xe8
c001f339:	e9 19 01 00 00       	jmp    c001f457 <Vm::x87Handler(regs*)+0x65f>
c001f33e:	8d 50 38             	lea    edx,[eax+0x38]
c001f341:	80 fa 07             	cmp    dl,0x7
c001f344:	77 37                	ja     c001f37d <Vm::x87Handler(regs*)+0x585>
c001f346:	83 ec 0c             	sub    esp,0xc
c001f349:	2d c8 00 00 00       	sub    eax,0xc8
c001f34e:	50                   	push   eax
c001f34f:	e8 67 f9 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f354:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f35b:	89 c6                	mov    esi,eax
c001f35d:	89 d7                	mov    edi,edx
c001f35f:	e8 57 f9 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f364:	57                   	push   edi
c001f365:	56                   	push   esi
c001f366:	52                   	push   edx
c001f367:	50                   	push   eax
c001f368:	e8 fd f8 ff ff       	call   c001ec6a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f36d:	83 c4 1c             	add    esp,0x1c
c001f370:	52                   	push   edx
c001f371:	50                   	push   eax
c001f372:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f376:	2d c8 00 00 00       	sub    eax,0xc8
c001f37b:	eb 7d                	jmp    c001f3fa <Vm::x87Handler(regs*)+0x602>
c001f37d:	3c f7                	cmp    al,0xf7
c001f37f:	76 38                	jbe    c001f3b9 <Vm::x87Handler(regs*)+0x5c1>
c001f381:	83 ec 0c             	sub    esp,0xc
c001f384:	6a 00                	push   0x0
c001f386:	e8 30 f9 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f38b:	89 c6                	mov    esi,eax
c001f38d:	89 d7                	mov    edi,edx
c001f38f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f393:	2d f8 00 00 00       	sub    eax,0xf8
c001f398:	89 04 24             	mov    DWORD PTR [esp],eax
c001f39b:	e8 1b f9 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f3a0:	57                   	push   edi
c001f3a1:	56                   	push   esi
c001f3a2:	52                   	push   edx
c001f3a3:	50                   	push   eax
c001f3a4:	e8 e0 f8 ff ff       	call   c001ec89 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f3a9:	83 c4 1c             	add    esp,0x1c
c001f3ac:	52                   	push   edx
c001f3ad:	50                   	push   eax
c001f3ae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3b2:	2d f8 00 00 00       	sub    eax,0xf8
c001f3b7:	eb 41                	jmp    c001f3fa <Vm::x87Handler(regs*)+0x602>
c001f3b9:	8d 50 10             	lea    edx,[eax+0x10]
c001f3bc:	80 fa 07             	cmp    dl,0x7
c001f3bf:	0f 87 5a 01 00 00    	ja     c001f51f <Vm::x87Handler(regs*)+0x727>
c001f3c5:	83 ec 0c             	sub    esp,0xc
c001f3c8:	2d f0 00 00 00       	sub    eax,0xf0
c001f3cd:	50                   	push   eax
c001f3ce:	e8 e8 f8 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f3d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f3da:	89 c6                	mov    esi,eax
c001f3dc:	89 d7                	mov    edi,edx
c001f3de:	e8 d8 f8 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f3e3:	57                   	push   edi
c001f3e4:	56                   	push   esi
c001f3e5:	52                   	push   edx
c001f3e6:	50                   	push   eax
c001f3e7:	e8 9d f8 ff ff       	call   c001ec89 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f3ec:	83 c4 1c             	add    esp,0x1c
c001f3ef:	52                   	push   edx
c001f3f0:	50                   	push   eax
c001f3f1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3f5:	2d f0 00 00 00       	sub    eax,0xf0
c001f3fa:	50                   	push   eax
c001f3fb:	e8 fe f8 ff ff       	call   c001ecfe <Vm::fpuSetReg(int, unsigned long long)>
c001f400:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f404:	e8 9d f9 ff ff       	call   c001eda6 <Vm::fpuPop()>
c001f409:	e9 5e fa ff ff       	jmp    c001ee6c <Vm::x87Handler(regs*)+0x74>
c001f40e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f412:	8d 50 30             	lea    edx,[eax+0x30]
c001f415:	80 fa 07             	cmp    dl,0x7
c001f418:	77 1d                	ja     c001f437 <Vm::x87Handler(regs*)+0x63f>
c001f41a:	83 ec 0c             	sub    esp,0xc
c001f41d:	6a 00                	push   0x0
c001f41f:	e8 97 f8 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f424:	83 c4 0c             	add    esp,0xc
c001f427:	52                   	push   edx
c001f428:	50                   	push   eax
c001f429:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f42d:	2d d0 00 00 00       	sub    eax,0xd0
c001f432:	e9 f3 fd ff ff       	jmp    c001f22a <Vm::x87Handler(regs*)+0x432>
c001f437:	8d 50 28             	lea    edx,[eax+0x28]
c001f43a:	80 fa 07             	cmp    dl,0x7
c001f43d:	77 28                	ja     c001f467 <Vm::x87Handler(regs*)+0x66f>
c001f43f:	83 ec 0c             	sub    esp,0xc
c001f442:	6a 00                	push   0x0
c001f444:	e8 72 f8 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f449:	83 c4 0c             	add    esp,0xc
c001f44c:	52                   	push   edx
c001f44d:	50                   	push   eax
c001f44e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f452:	2d d8 00 00 00       	sub    eax,0xd8
c001f457:	50                   	push   eax
c001f458:	e8 a1 f8 ff ff       	call   c001ecfe <Vm::fpuSetReg(int, unsigned long long)>
c001f45d:	e8 44 f9 ff ff       	call   c001eda6 <Vm::fpuPop()>
c001f462:	e9 01 fa ff ff       	jmp    c001ee68 <Vm::x87Handler(regs*)+0x70>
c001f467:	8d 50 20             	lea    edx,[eax+0x20]
c001f46a:	80 fa 07             	cmp    dl,0x7
c001f46d:	77 30                	ja     c001f49f <Vm::x87Handler(regs*)+0x6a7>
c001f46f:	83 ec 0c             	sub    esp,0xc
c001f472:	2d e0 00 00 00       	sub    eax,0xe0
c001f477:	50                   	push   eax
c001f478:	e8 3e f8 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f47d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f484:	89 c6                	mov    esi,eax
c001f486:	89 d7                	mov    edi,edx
c001f488:	e8 2e f8 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f48d:	57                   	push   edi
c001f48e:	56                   	push   esi
c001f48f:	52                   	push   edx
c001f490:	50                   	push   eax
c001f491:	e8 48 f7 ff ff       	call   c001ebde <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f496:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f49a:	e9 54 02 00 00       	jmp    c001f6f3 <Vm::x87Handler(regs*)+0x8fb>
c001f49f:	8d 50 18             	lea    edx,[eax+0x18]
c001f4a2:	80 fa 07             	cmp    dl,0x7
c001f4a5:	0f 87 43 fb ff ff    	ja     c001efee <Vm::x87Handler(regs*)+0x1f6>
c001f4ab:	83 ec 0c             	sub    esp,0xc
c001f4ae:	2d e8 00 00 00       	sub    eax,0xe8
c001f4b3:	50                   	push   eax
c001f4b4:	e8 02 f8 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f4b9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4c0:	89 c6                	mov    esi,eax
c001f4c2:	89 d7                	mov    edi,edx
c001f4c4:	e8 f2 f7 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f4c9:	57                   	push   edi
c001f4ca:	56                   	push   esi
c001f4cb:	52                   	push   edx
c001f4cc:	50                   	push   eax
c001f4cd:	e8 0c f7 ff ff       	call   c001ebde <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f4d2:	83 c4 20             	add    esp,0x20
c001f4d5:	e8 cc f8 ff ff       	call   c001eda6 <Vm::fpuPop()>
c001f4da:	eb 62                	jmp    c001f53e <Vm::x87Handler(regs*)+0x746>
c001f4dc:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f4e0:	0f 85 0f 01 00 00    	jne    c001f5f5 <Vm::x87Handler(regs*)+0x7fd>
c001f4e6:	83 ec 0c             	sub    esp,0xc
c001f4e9:	6a 01                	push   0x1
c001f4eb:	e8 cb f7 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f4f0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4f7:	89 c6                	mov    esi,eax
c001f4f9:	89 d7                	mov    edi,edx
c001f4fb:	e8 bb f7 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f500:	57                   	push   edi
c001f501:	56                   	push   esi
c001f502:	52                   	push   edx
c001f503:	50                   	push   eax
c001f504:	e8 d5 f6 ff ff       	call   c001ebde <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f509:	83 c4 20             	add    esp,0x20
c001f50c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f510:	e8 91 f8 ff ff       	call   c001eda6 <Vm::fpuPop()>
c001f515:	e8 8c f8 ff ff       	call   c001eda6 <Vm::fpuPop()>
c001f51a:	e9 50 f9 ff ff       	jmp    c001ee6f <Vm::x87Handler(regs*)+0x77>
c001f51f:	3c d9                	cmp    al,0xd9
c001f521:	0f 85 b5 02 00 00    	jne    c001f7dc <Vm::x87Handler(regs*)+0x9e4>
c001f527:	eb bd                	jmp    c001f4e6 <Vm::x87Handler(regs*)+0x6ee>
c001f529:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f52d:	0f 85 ea 02 00 00    	jne    c001f81d <Vm::x87Handler(regs*)+0xa25>
c001f533:	0f b7 05 c0 e4 02 c0 	movzx  eax,WORD PTR ds:0xc002e4c0
c001f53a:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f53e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f542:	e9 28 f9 ff ff       	jmp    c001ee6f <Vm::x87Handler(regs*)+0x77>
c001f547:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f54b:	84 d2                	test   dl,dl
c001f54d:	75 0f                	jne    c001f55e <Vm::x87Handler(regs*)+0x766>
c001f54f:	83 ec 0c             	sub    esp,0xc
c001f552:	ff 36                	push   DWORD PTR [esi]
c001f554:	e8 b1 f4 ff ff       	call   c001ea0a <Vm::fpu32ToInternal(unsigned int)>
c001f559:	e9 2c 01 00 00       	jmp    c001f68a <Vm::x87Handler(regs*)+0x892>
c001f55e:	80 fa 01             	cmp    dl,0x1
c001f561:	75 0f                	jne    c001f572 <Vm::x87Handler(regs*)+0x77a>
c001f563:	83 ec 0c             	sub    esp,0xc
c001f566:	ff 36                	push   DWORD PTR [esi]
c001f568:	e8 9d f4 ff ff       	call   c001ea0a <Vm::fpu32ToInternal(unsigned int)>
c001f56d:	e9 81 02 00 00       	jmp    c001f7f3 <Vm::x87Handler(regs*)+0x9fb>
c001f572:	80 fa 04             	cmp    dl,0x4
c001f575:	75 0f                	jne    c001f586 <Vm::x87Handler(regs*)+0x78e>
c001f577:	83 ec 0c             	sub    esp,0xc
c001f57a:	ff 36                	push   DWORD PTR [esi]
c001f57c:	e8 89 f4 ff ff       	call   c001ea0a <Vm::fpu32ToInternal(unsigned int)>
c001f581:	e9 86 01 00 00       	jmp    c001f70c <Vm::x87Handler(regs*)+0x914>
c001f586:	80 fa 05             	cmp    dl,0x5
c001f589:	75 1b                	jne    c001f5a6 <Vm::x87Handler(regs*)+0x7ae>
c001f58b:	83 ec 0c             	sub    esp,0xc
c001f58e:	6a 00                	push   0x0
c001f590:	e8 26 f7 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f595:	89 c7                	mov    edi,eax
c001f597:	89 d5                	mov    ebp,edx
c001f599:	58                   	pop    eax
c001f59a:	ff 36                	push   DWORD PTR [esi]
c001f59c:	e8 69 f4 ff ff       	call   c001ea0a <Vm::fpu32ToInternal(unsigned int)>
c001f5a1:	e9 a3 01 00 00       	jmp    c001f749 <Vm::x87Handler(regs*)+0x951>
c001f5a6:	80 fa 06             	cmp    dl,0x6
c001f5a9:	75 0f                	jne    c001f5ba <Vm::x87Handler(regs*)+0x7c2>
c001f5ab:	83 ec 0c             	sub    esp,0xc
c001f5ae:	ff 36                	push   DWORD PTR [esi]
c001f5b0:	e8 55 f4 ff ff       	call   c001ea0a <Vm::fpu32ToInternal(unsigned int)>
c001f5b5:	e9 ae 01 00 00       	jmp    c001f768 <Vm::x87Handler(regs*)+0x970>
c001f5ba:	31 c0                	xor    eax,eax
c001f5bc:	80 fa 07             	cmp    dl,0x7
c001f5bf:	0f 85 94 02 00 00    	jne    c001f859 <Vm::x87Handler(regs*)+0xa61>
c001f5c5:	83 ec 0c             	sub    esp,0xc
c001f5c8:	6a 00                	push   0x0
c001f5ca:	e8 ec f6 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f5cf:	89 c7                	mov    edi,eax
c001f5d1:	89 d5                	mov    ebp,edx
c001f5d3:	58                   	pop    eax
c001f5d4:	ff 36                	push   DWORD PTR [esi]
c001f5d6:	e8 2f f4 ff ff       	call   c001ea0a <Vm::fpu32ToInternal(unsigned int)>
c001f5db:	e9 cb 01 00 00       	jmp    c001f7ab <Vm::x87Handler(regs*)+0x9b3>
c001f5e0:	80 fa 03             	cmp    dl,0x3
c001f5e3:	0f 85 d3 01 00 00    	jne    c001f7bc <Vm::x87Handler(regs*)+0x9c4>
c001f5e9:	e8 b8 f7 ff ff       	call   c001eda6 <Vm::fpuPop()>
c001f5ee:	51                   	push   ecx
c001f5ef:	51                   	push   ecx
c001f5f0:	e9 de 01 00 00       	jmp    c001f7d3 <Vm::x87Handler(regs*)+0x9db>
c001f5f5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f5f9:	80 fa 01             	cmp    dl,0x1
c001f5fc:	75 09                	jne    c001f607 <Vm::x87Handler(regs*)+0x80f>
c001f5fe:	57                   	push   edi
c001f5ff:	57                   	push   edi
c001f600:	8b 06                	mov    eax,DWORD PTR [esi]
c001f602:	e9 e3 01 00 00       	jmp    c001f7ea <Vm::x87Handler(regs*)+0x9f2>
c001f607:	80 fa 04             	cmp    dl,0x4
c001f60a:	75 12                	jne    c001f61e <Vm::x87Handler(regs*)+0x826>
c001f60c:	31 d2                	xor    edx,edx
c001f60e:	51                   	push   ecx
c001f60f:	51                   	push   ecx
c001f610:	8b 06                	mov    eax,DWORD PTR [esi]
c001f612:	52                   	push   edx
c001f613:	50                   	push   eax
c001f614:	e8 d0 f4 ff ff       	call   c001eae9 <Vm::fpuLongToFloat(long long)>
c001f619:	e9 ee 00 00 00       	jmp    c001f70c <Vm::x87Handler(regs*)+0x914>
c001f61e:	31 c0                	xor    eax,eax
c001f620:	80 fa 07             	cmp    dl,0x7
c001f623:	0f 85 30 02 00 00    	jne    c001f859 <Vm::x87Handler(regs*)+0xa61>
c001f629:	83 ec 0c             	sub    esp,0xc
c001f62c:	6a 00                	push   0x0
c001f62e:	e8 88 f6 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f633:	89 c7                	mov    edi,eax
c001f635:	89 d5                	mov    ebp,edx
c001f637:	58                   	pop    eax
c001f638:	8b 06                	mov    eax,DWORD PTR [esi]
c001f63a:	5a                   	pop    edx
c001f63b:	31 d2                	xor    edx,edx
c001f63d:	52                   	push   edx
c001f63e:	50                   	push   eax
c001f63f:	e8 a5 f4 ff ff       	call   c001eae9 <Vm::fpuLongToFloat(long long)>
c001f644:	e9 62 01 00 00       	jmp    c001f7ab <Vm::x87Handler(regs*)+0x9b3>
c001f649:	84 d2                	test   dl,dl
c001f64b:	75 0d                	jne    c001f65a <Vm::x87Handler(regs*)+0x862>
c001f64d:	31 d2                	xor    edx,edx
c001f64f:	55                   	push   ebp
c001f650:	55                   	push   ebp
c001f651:	8b 06                	mov    eax,DWORD PTR [esi]
c001f653:	52                   	push   edx
c001f654:	50                   	push   eax
c001f655:	e9 d3 01 00 00       	jmp    c001f82d <Vm::x87Handler(regs*)+0xa35>
c001f65a:	31 c0                	xor    eax,eax
c001f65c:	80 fa 02             	cmp    dl,0x2
c001f65f:	0f 85 f4 01 00 00    	jne    c001f859 <Vm::x87Handler(regs*)+0xa61>
c001f665:	83 ec 0c             	sub    esp,0xc
c001f668:	6a 00                	push   0x0
c001f66a:	e8 4c f6 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f66f:	59                   	pop    ecx
c001f670:	5f                   	pop    edi
c001f671:	e9 6a f9 ff ff       	jmp    c001efe0 <Vm::x87Handler(regs*)+0x1e8>
c001f676:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f67a:	84 d2                	test   dl,dl
c001f67c:	75 2a                	jne    c001f6a8 <Vm::x87Handler(regs*)+0x8b0>
c001f67e:	50                   	push   eax
c001f67f:	50                   	push   eax
c001f680:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f683:	ff 36                	push   DWORD PTR [esi]
c001f685:	e8 c5 f3 ff ff       	call   c001ea4f <Vm::fpu64ToInternal(unsigned long long)>
c001f68a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f691:	89 c6                	mov    esi,eax
c001f693:	89 d7                	mov    edi,edx
c001f695:	e8 21 f6 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f69a:	57                   	push   edi
c001f69b:	56                   	push   esi
c001f69c:	52                   	push   edx
c001f69d:	50                   	push   eax
c001f69e:	e8 8e f5 ff ff       	call   c001ec31 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f6a3:	e9 64 01 00 00       	jmp    c001f80c <Vm::x87Handler(regs*)+0xa14>
c001f6a8:	80 fa 01             	cmp    dl,0x1
c001f6ab:	75 11                	jne    c001f6be <Vm::x87Handler(regs*)+0x8c6>
c001f6ad:	50                   	push   eax
c001f6ae:	50                   	push   eax
c001f6af:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f6b2:	ff 36                	push   DWORD PTR [esi]
c001f6b4:	e8 96 f3 ff ff       	call   c001ea4f <Vm::fpu64ToInternal(unsigned long long)>
c001f6b9:	e9 35 01 00 00       	jmp    c001f7f3 <Vm::x87Handler(regs*)+0x9fb>
c001f6be:	80 fa 02             	cmp    dl,0x2
c001f6c1:	0f 85 54 f9 ff ff    	jne    c001f01b <Vm::x87Handler(regs*)+0x223>
c001f6c7:	55                   	push   ebp
c001f6c8:	55                   	push   ebp
c001f6c9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f6cc:	ff 36                	push   DWORD PTR [esi]
c001f6ce:	e8 7c f3 ff ff       	call   c001ea4f <Vm::fpu64ToInternal(unsigned long long)>
c001f6d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6da:	89 c6                	mov    esi,eax
c001f6dc:	89 d7                	mov    edi,edx
c001f6de:	e8 d8 f5 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f6e3:	57                   	push   edi
c001f6e4:	56                   	push   esi
c001f6e5:	52                   	push   edx
c001f6e6:	50                   	push   eax
c001f6e7:	e8 f2 f4 ff ff       	call   c001ebde <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f6ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f6f0:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f6f3:	83 c4 20             	add    esp,0x20
c001f6f6:	e9 74 f7 ff ff       	jmp    c001ee6f <Vm::x87Handler(regs*)+0x77>
c001f6fb:	80 fa 04             	cmp    dl,0x4
c001f6fe:	75 2a                	jne    c001f72a <Vm::x87Handler(regs*)+0x932>
c001f700:	51                   	push   ecx
c001f701:	51                   	push   ecx
c001f702:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f705:	ff 36                	push   DWORD PTR [esi]
c001f707:	e8 43 f3 ff ff       	call   c001ea4f <Vm::fpu64ToInternal(unsigned long long)>
c001f70c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f713:	89 c6                	mov    esi,eax
c001f715:	89 d7                	mov    edi,edx
c001f717:	e8 9f f5 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f71c:	57                   	push   edi
c001f71d:	56                   	push   esi
c001f71e:	52                   	push   edx
c001f71f:	50                   	push   eax
c001f720:	e8 36 f5 ff ff       	call   c001ec5b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f725:	e9 e2 00 00 00       	jmp    c001f80c <Vm::x87Handler(regs*)+0xa14>
c001f72a:	80 fa 05             	cmp    dl,0x5
c001f72d:	75 28                	jne    c001f757 <Vm::x87Handler(regs*)+0x95f>
c001f72f:	83 ec 0c             	sub    esp,0xc
c001f732:	6a 00                	push   0x0
c001f734:	e8 82 f5 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f739:	89 c7                	mov    edi,eax
c001f73b:	89 d5                	mov    ebp,edx
c001f73d:	58                   	pop    eax
c001f73e:	5a                   	pop    edx
c001f73f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f742:	ff 36                	push   DWORD PTR [esi]
c001f744:	e8 06 f3 ff ff       	call   c001ea4f <Vm::fpu64ToInternal(unsigned long long)>
c001f749:	83 c4 10             	add    esp,0x10
c001f74c:	55                   	push   ebp
c001f74d:	57                   	push   edi
c001f74e:	52                   	push   edx
c001f74f:	50                   	push   eax
c001f750:	e8 06 f5 ff ff       	call   c001ec5b <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f755:	eb 60                	jmp    c001f7b7 <Vm::x87Handler(regs*)+0x9bf>
c001f757:	80 fa 06             	cmp    dl,0x6
c001f75a:	75 2a                	jne    c001f786 <Vm::x87Handler(regs*)+0x98e>
c001f75c:	51                   	push   ecx
c001f75d:	51                   	push   ecx
c001f75e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f761:	ff 36                	push   DWORD PTR [esi]
c001f763:	e8 e7 f2 ff ff       	call   c001ea4f <Vm::fpu64ToInternal(unsigned long long)>
c001f768:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f76f:	89 c6                	mov    esi,eax
c001f771:	89 d7                	mov    edi,edx
c001f773:	e8 43 f5 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f778:	57                   	push   edi
c001f779:	56                   	push   esi
c001f77a:	52                   	push   edx
c001f77b:	50                   	push   eax
c001f77c:	e8 08 f5 ff ff       	call   c001ec89 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f781:	e9 86 00 00 00       	jmp    c001f80c <Vm::x87Handler(regs*)+0xa14>
c001f786:	31 c0                	xor    eax,eax
c001f788:	80 fa 07             	cmp    dl,0x7
c001f78b:	0f 85 c8 00 00 00    	jne    c001f859 <Vm::x87Handler(regs*)+0xa61>
c001f791:	83 ec 0c             	sub    esp,0xc
c001f794:	6a 00                	push   0x0
c001f796:	e8 20 f5 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f79b:	89 c7                	mov    edi,eax
c001f79d:	89 d5                	mov    ebp,edx
c001f79f:	58                   	pop    eax
c001f7a0:	5a                   	pop    edx
c001f7a1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f7a4:	ff 36                	push   DWORD PTR [esi]
c001f7a6:	e8 a4 f2 ff ff       	call   c001ea4f <Vm::fpu64ToInternal(unsigned long long)>
c001f7ab:	83 c4 10             	add    esp,0x10
c001f7ae:	55                   	push   ebp
c001f7af:	57                   	push   edi
c001f7b0:	52                   	push   edx
c001f7b1:	50                   	push   eax
c001f7b2:	e8 d2 f4 ff ff       	call   c001ec89 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f7b7:	83 c4 0c             	add    esp,0xc
c001f7ba:	eb 53                	jmp    c001f80f <Vm::x87Handler(regs*)+0xa17>
c001f7bc:	31 c0                	xor    eax,eax
c001f7be:	80 fa 02             	cmp    dl,0x2
c001f7c1:	0f 85 92 00 00 00    	jne    c001f859 <Vm::x87Handler(regs*)+0xa61>
c001f7c7:	83 ec 0c             	sub    esp,0xc
c001f7ca:	6a 00                	push   0x0
c001f7cc:	e8 ea f4 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f7d1:	59                   	pop    ecx
c001f7d2:	5f                   	pop    edi
c001f7d3:	52                   	push   edx
c001f7d4:	50                   	push   eax
c001f7d5:	e8 27 f2 ff ff       	call   c001ea01 <Vm::fpuInternalTo64(unsigned long long)>
c001f7da:	eb 70                	jmp    c001f84c <Vm::x87Handler(regs*)+0xa54>
c001f7dc:	31 c0                	xor    eax,eax
c001f7de:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f7e3:	75 74                	jne    c001f859 <Vm::x87Handler(regs*)+0xa61>
c001f7e5:	50                   	push   eax
c001f7e6:	50                   	push   eax
c001f7e7:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f7ea:	31 d2                	xor    edx,edx
c001f7ec:	52                   	push   edx
c001f7ed:	50                   	push   eax
c001f7ee:	e8 f6 f2 ff ff       	call   c001eae9 <Vm::fpuLongToFloat(long long)>
c001f7f3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7fa:	89 c6                	mov    esi,eax
c001f7fc:	89 d7                	mov    edi,edx
c001f7fe:	e8 b8 f4 ff ff       	call   c001ecbb <Vm::fpuGetReg(int)>
c001f803:	57                   	push   edi
c001f804:	56                   	push   esi
c001f805:	52                   	push   edx
c001f806:	50                   	push   eax
c001f807:	e8 5e f4 ff ff       	call   c001ec6a <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f80c:	83 c4 1c             	add    esp,0x1c
c001f80f:	52                   	push   edx
c001f810:	50                   	push   eax
c001f811:	6a 00                	push   0x0
c001f813:	e8 e6 f4 ff ff       	call   c001ecfe <Vm::fpuSetReg(int, unsigned long long)>
c001f818:	e9 f2 f7 ff ff       	jmp    c001f00f <Vm::x87Handler(regs*)+0x217>
c001f81d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f821:	80 fa 05             	cmp    dl,0x5
c001f824:	75 11                	jne    c001f837 <Vm::x87Handler(regs*)+0xa3f>
c001f826:	55                   	push   ebp
c001f827:	55                   	push   ebp
c001f828:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f82b:	ff 36                	push   DWORD PTR [esi]
c001f82d:	e8 81 f2 ff ff       	call   c001eab3 <Vm::fpuULongToFloat(unsigned long long)>
c001f832:	e9 cf f7 ff ff       	jmp    c001f006 <Vm::x87Handler(regs*)+0x20e>
c001f837:	31 c0                	xor    eax,eax
c001f839:	80 fa 07             	cmp    dl,0x7
c001f83c:	75 1b                	jne    c001f859 <Vm::x87Handler(regs*)+0xa61>
c001f83e:	e8 63 f5 ff ff       	call   c001eda6 <Vm::fpuPop()>
c001f843:	51                   	push   ecx
c001f844:	51                   	push   ecx
c001f845:	52                   	push   edx
c001f846:	50                   	push   eax
c001f847:	e8 0c f2 ff ff       	call   c001ea58 <Vm::fpuFloatToLong(unsigned long long)>
c001f84c:	83 c4 10             	add    esp,0x10
c001f84f:	89 06                	mov    DWORD PTR [esi],eax
c001f851:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f854:	e9 f8 f7 ff ff       	jmp    c001f051 <Vm::x87Handler(regs*)+0x259>
c001f859:	83 c4 1c             	add    esp,0x1c
c001f85c:	5b                   	pop    ebx
c001f85d:	5e                   	pop    esi
c001f85e:	5f                   	pop    edi
c001f85f:	5d                   	pop    ebp
c001f860:	c3                   	ret    

c001f861 <__static_initialization_and_destruction_0(int, int)>:
c001f861:	83 ec 0c             	sub    esp,0xc
c001f864:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f869:	75 1a                	jne    c001f885 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f86b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f873:	75 10                	jne    c001f885 <__static_initialization_and_destruction_0(int, int)+0x24>
c001f875:	83 ec 0c             	sub    esp,0xc
c001f878:	68 c0 e4 02 c0       	push   0xc002e4c0
c001f87d:	e8 9e 82 00 00       	call   c0027b20 <Vm::_FPUState::_FPUState()>
c001f882:	83 c4 10             	add    esp,0x10
c001f885:	90                   	nop
c001f886:	83 c4 0c             	add    esp,0xc
c001f889:	c3                   	ret    

c001f88a <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f88a:	83 ec 0c             	sub    esp,0xc
c001f88d:	83 ec 08             	sub    esp,0x8
c001f890:	68 ff ff 00 00       	push   0xffff
c001f895:	6a 01                	push   0x1
c001f897:	e8 c5 ff ff ff       	call   c001f861 <__static_initialization_and_destruction_0(int, int)>
c001f89c:	83 c4 10             	add    esp,0x10
c001f89f:	83 c4 0c             	add    esp,0xc
c001f8a2:	c3                   	ret    
c001f8a3:	90                   	nop

c001f8a4 <FAT::getName()>:
c001f8a4:	b8 3c b3 02 c0       	mov    eax,0xc002b33c
c001f8a9:	c3                   	ret    

c001f8aa <FAT::tell(void*, unsigned long long*)>:
c001f8aa:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f8af:	75 06                	jne    c001f8b7 <FAT::tell(void*, unsigned long long*)+0xd>
c001f8b1:	b8 04 00 00 00       	mov    eax,0x4
c001f8b6:	c3                   	ret    
c001f8b7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f8bc:	75 06                	jne    c001f8c4 <FAT::tell(void*, unsigned long long*)+0x1a>
c001f8be:	b8 04 00 00 00       	mov    eax,0x4
c001f8c3:	c3                   	ret    
c001f8c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8c8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f8cb:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f8ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f8d2:	89 01                	mov    DWORD PTR [ecx],eax
c001f8d4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f8d7:	b8 00 00 00 00       	mov    eax,0x0
c001f8dc:	c3                   	ret    
c001f8dd:	90                   	nop

c001f8de <FAT::stat(void*, unsigned long long*)>:
c001f8de:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f8e3:	75 06                	jne    c001f8eb <FAT::stat(void*, unsigned long long*)+0xd>
c001f8e5:	b8 04 00 00 00       	mov    eax,0x4
c001f8ea:	c3                   	ret    
c001f8eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f8f0:	75 06                	jne    c001f8f8 <FAT::stat(void*, unsigned long long*)+0x1a>
c001f8f2:	b8 04 00 00 00       	mov    eax,0x4
c001f8f7:	c3                   	ret    
c001f8f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8fc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f8ff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f902:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f906:	89 01                	mov    DWORD PTR [ecx],eax
c001f908:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f90b:	b8 00 00 00 00       	mov    eax,0x0
c001f910:	c3                   	ret    
c001f911:	90                   	nop

c001f912 <FAT::~FAT()>:
c001f912:	83 ec 0c             	sub    esp,0xc
c001f915:	ba c0 b3 02 c0       	mov    edx,0xc002b3c0
c001f91a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91e:	89 10                	mov    DWORD PTR [eax],edx
c001f920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f924:	83 ec 0c             	sub    esp,0xc
c001f927:	50                   	push   eax
c001f928:	e8 d1 32 ff ff       	call   c0012bfe <Filesystem::~Filesystem()>
c001f92d:	83 c4 10             	add    esp,0x10
c001f930:	90                   	nop
c001f931:	83 c4 0c             	add    esp,0xc
c001f934:	c3                   	ret    
c001f935:	90                   	nop

c001f936 <FAT::~FAT()>:
c001f936:	83 ec 0c             	sub    esp,0xc
c001f939:	83 ec 0c             	sub    esp,0xc
c001f93c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f940:	e8 cd ff ff ff       	call   c001f912 <FAT::~FAT()>
c001f945:	83 c4 10             	add    esp,0x10
c001f948:	83 ec 08             	sub    esp,0x8
c001f94b:	6a 08                	push   0x8
c001f94d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f951:	e8 9f 2e ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c001f956:	83 c4 10             	add    esp,0x10
c001f959:	83 c4 0c             	add    esp,0xc
c001f95c:	c3                   	ret    
c001f95d:	90                   	nop

c001f95e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001f95e:	83 ec 1c             	sub    esp,0x1c
c001f961:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001f968:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001f96d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f971:	8b 04 85 40 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ac0]
c001f978:	83 f8 ff             	cmp    eax,0xffffffff
c001f97b:	75 34                	jne    c001f9b1 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001f97d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f981:	88 c2                	mov    dl,al
c001f983:	a1 20 e5 02 c0       	mov    eax,ds:0xc002e520
c001f988:	01 d0                	add    eax,edx
c001f98a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f98e:	8b 15 20 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e520
c001f994:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f998:	89 14 85 40 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ac0],edx
c001f99f:	a1 20 e5 02 c0       	mov    eax,ds:0xc002e520
c001f9a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f9a8:	89 14 85 c0 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a40],edx
c001f9af:	eb 17                	jmp    c001f9c8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001f9b1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f9b5:	88 c2                	mov    dl,al
c001f9b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f9bb:	8b 04 85 40 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ac0]
c001f9c2:	01 d0                	add    eax,edx
c001f9c4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f9c8:	83 ec 04             	sub    esp,0x4
c001f9cb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f9cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f9d3:	8d 44 24 15          	lea    eax,[esp+0x15]
c001f9d7:	50                   	push   eax
c001f9d8:	e8 44 71 fe ff       	call   c0006b21 <f_getlabel>
c001f9dd:	83 c4 10             	add    esp,0x10
c001f9e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f9e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f9e9:	75 07                	jne    c001f9f2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001f9eb:	b8 00 00 00 00       	mov    eax,0x0
c001f9f0:	eb 05                	jmp    c001f9f7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001f9f2:	b8 01 00 00 00       	mov    eax,0x1
c001f9f7:	83 c4 1c             	add    esp,0x1c
c001f9fa:	c3                   	ret    
c001f9fb:	90                   	nop

c001f9fc <FAT::setlabel(LogicalDisk*, int, char*)>:
c001f9fc:	57                   	push   edi
c001f9fd:	83 ec 58             	sub    esp,0x58
c001fa00:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fa08:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fa0c:	b9 0f 00 00 00       	mov    ecx,0xf
c001fa11:	b8 00 00 00 00       	mov    eax,0x0
c001fa16:	fc                   	cld    
c001fa17:	89 d7                	mov    edi,edx
c001fa19:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fa1b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fa1f:	8b 04 85 40 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ac0]
c001fa26:	83 f8 ff             	cmp    eax,0xffffffff
c001fa29:	75 34                	jne    c001fa5f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001fa2b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fa2f:	88 c2                	mov    dl,al
c001fa31:	a1 20 e5 02 c0       	mov    eax,ds:0xc002e520
c001fa36:	01 d0                	add    eax,edx
c001fa38:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fa3c:	8b 15 20 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e520
c001fa42:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fa46:	89 14 85 40 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ac0],edx
c001fa4d:	a1 20 e5 02 c0       	mov    eax,ds:0xc002e520
c001fa52:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001fa56:	89 14 85 c0 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a40],edx
c001fa5d:	eb 17                	jmp    c001fa76 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fa5f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fa63:	88 c2                	mov    dl,al
c001fa65:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fa69:	8b 04 85 40 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ac0]
c001fa70:	01 d0                	add    eax,edx
c001fa72:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fa76:	83 ec 08             	sub    esp,0x8
c001fa79:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001fa7d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fa81:	50                   	push   eax
c001fa82:	e8 93 0d fe ff       	call   c000081a <strcat>
c001fa87:	83 c4 10             	add    esp,0x10
c001fa8a:	83 ec 0c             	sub    esp,0xc
c001fa8d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fa91:	50                   	push   eax
c001fa92:	e8 78 72 fe ff       	call   c0006d0f <f_setlabel>
c001fa97:	83 c4 10             	add    esp,0x10
c001fa9a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fa9e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001faa3:	75 07                	jne    c001faac <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001faa5:	b8 00 00 00 00       	mov    eax,0x0
c001faaa:	eb 05                	jmp    c001fab1 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001faac:	b8 01 00 00 00       	mov    eax,0x1
c001fab1:	83 c4 58             	add    esp,0x58
c001fab4:	5f                   	pop    edi
c001fab5:	c3                   	ret    

c001fab6 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001fab6:	83 ec 2c             	sub    esp,0x2c
c001fab9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001fac1:	83 ec 08             	sub    esp,0x8
c001fac4:	68 60 b3 02 c0       	push   0xc002b360
c001fac9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001facd:	e8 e2 0c fe ff       	call   c00007b4 <strcmp>
c001fad2:	83 c4 10             	add    esp,0x10
c001fad5:	85 c0                	test   eax,eax
c001fad7:	0f 94 c0             	sete   al
c001fada:	84 c0                	test   al,al
c001fadc:	74 0d                	je     c001faeb <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001fade:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fae6:	e9 a6 00 00 00       	jmp    c001fb91 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001faeb:	83 ec 08             	sub    esp,0x8
c001faee:	68 52 b3 02 c0       	push   0xc002b352
c001faf3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001faf7:	e8 b8 0c fe ff       	call   c00007b4 <strcmp>
c001fafc:	83 c4 10             	add    esp,0x10
c001faff:	85 c0                	test   eax,eax
c001fb01:	0f 94 c0             	sete   al
c001fb04:	84 c0                	test   al,al
c001fb06:	74 0a                	je     c001fb12 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001fb08:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fb10:	eb 7f                	jmp    c001fb91 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fb12:	83 ec 08             	sub    esp,0x8
c001fb15:	68 58 b3 02 c0       	push   0xc002b358
c001fb1a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fb1e:	e8 91 0c fe ff       	call   c00007b4 <strcmp>
c001fb23:	83 c4 10             	add    esp,0x10
c001fb26:	85 c0                	test   eax,eax
c001fb28:	0f 94 c0             	sete   al
c001fb2b:	84 c0                	test   al,al
c001fb2d:	74 0a                	je     c001fb39 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001fb2f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fb37:	eb 58                	jmp    c001fb91 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fb39:	83 ec 08             	sub    esp,0x8
c001fb3c:	68 2c 82 02 c0       	push   0xc002822c
c001fb41:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fb45:	e8 6a 0c fe ff       	call   c00007b4 <strcmp>
c001fb4a:	83 c4 10             	add    esp,0x10
c001fb4d:	85 c0                	test   eax,eax
c001fb4f:	0f 94 c0             	sete   al
c001fb52:	84 c0                	test   al,al
c001fb54:	74 0a                	je     c001fb60 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001fb56:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001fb5e:	eb 31                	jmp    c001fb91 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fb60:	83 ec 08             	sub    esp,0x8
c001fb63:	68 5e b3 02 c0       	push   0xc002b35e
c001fb68:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fb6c:	e8 43 0c fe ff       	call   c00007b4 <strcmp>
c001fb71:	83 c4 10             	add    esp,0x10
c001fb74:	85 c0                	test   eax,eax
c001fb76:	0f 94 c0             	sete   al
c001fb79:	84 c0                	test   al,al
c001fb7b:	74 0a                	je     c001fb87 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001fb7d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001fb85:	eb 0a                	jmp    c001fb91 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fb87:	b8 08 00 00 00       	mov    eax,0x8
c001fb8c:	e9 04 01 00 00       	jmp    c001fc95 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fb91:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001fb98:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001fb9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fba1:	8b 04 85 40 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ac0]
c001fba8:	83 f8 ff             	cmp    eax,0xffffffff
c001fbab:	75 34                	jne    c001fbe1 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001fbad:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001fbb1:	88 c2                	mov    dl,al
c001fbb3:	a1 20 e5 02 c0       	mov    eax,ds:0xc002e520
c001fbb8:	01 d0                	add    eax,edx
c001fbba:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001fbbe:	8b 15 20 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e520
c001fbc4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fbc8:	89 14 85 40 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ac0],edx
c001fbcf:	a1 20 e5 02 c0       	mov    eax,ds:0xc002e520
c001fbd4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001fbd8:	89 14 85 c0 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a40],edx
c001fbdf:	eb 17                	jmp    c001fbf8 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001fbe1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001fbe5:	88 c2                	mov    dl,al
c001fbe7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fbeb:	8b 04 85 40 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ac0]
c001fbf2:	01 d0                	add    eax,edx
c001fbf4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001fbf8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fbfc:	88 04 24             	mov    BYTE PTR [esp],al
c001fbff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001fc03:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc07:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001fc0f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001fc14:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fc1c:	83 ec 0c             	sub    esp,0xc
c001fc1f:	68 00 20 00 00       	push   0x2000
c001fc24:	e8 fb f9 fe ff       	call   c000f624 <malloc>
c001fc29:	83 c4 10             	add    esp,0x10
c001fc2c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fc30:	68 00 20 00 00       	push   0x2000
c001fc35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc39:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fc3d:	50                   	push   eax
c001fc3e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001fc42:	50                   	push   eax
c001fc43:	e8 12 75 fe ff       	call   c000715a <f_mkfs>
c001fc48:	83 c4 10             	add    esp,0x10
c001fc4b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001fc4f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fc54:	75 07                	jne    c001fc5d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001fc56:	b8 00 00 00 00       	mov    eax,0x0
c001fc5b:	eb 38                	jmp    c001fc95 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fc5d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001fc62:	75 17                	jne    c001fc7b <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001fc64:	83 ec 0c             	sub    esp,0xc
c001fc67:	68 90 b3 02 c0       	push   0xc002b390
c001fc6c:	e8 64 2c ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001fc71:	83 c4 10             	add    esp,0x10
c001fc74:	b8 09 00 00 00       	mov    eax,0x9
c001fc79:	eb 1a                	jmp    c001fc95 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001fc7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc7f:	83 ec 08             	sub    esp,0x8
c001fc82:	50                   	push   eax
c001fc83:	68 64 b3 02 c0       	push   0xc002b364
c001fc88:	e8 48 2c ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c001fc8d:	83 c4 10             	add    esp,0x10
c001fc90:	b8 01 00 00 00       	mov    eax,0x1
c001fc95:	83 c4 2c             	add    esp,0x2c
c001fc98:	c3                   	ret    
c001fc99:	90                   	nop

c001fc9a <FAT::tryMount(LogicalDisk*, int)>:
c001fc9a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001fca0:	a1 20 e5 02 c0       	mov    eax,ds:0xc002e520
c001fca5:	83 f8 14             	cmp    eax,0x14
c001fca8:	75 17                	jne    c001fcc1 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001fcaa:	83 ec 0c             	sub    esp,0xc
c001fcad:	68 76 b3 02 c0       	push   0xc002b376
c001fcb2:	e8 fe 9e ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c001fcb7:	83 c4 10             	add    esp,0x10
c001fcba:	b0 00                	mov    al,0x0
c001fcbc:	e9 d7 01 00 00       	jmp    c001fe98 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fcc1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001fcc8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fcce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fcd4:	3d 00 02 00 00       	cmp    eax,0x200
c001fcd9:	74 07                	je     c001fce2 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001fcdb:	b0 00                	mov    al,0x0
c001fcdd:	e9 b6 01 00 00       	jmp    c001fe98 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fce2:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001fcea:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001fcf1:	8b 04 85 40 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ac0]
c001fcf8:	83 f8 ff             	cmp    eax,0xffffffff
c001fcfb:	74 07                	je     c001fd04 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001fcfd:	b0 01                	mov    al,0x1
c001fcff:	e9 94 01 00 00       	jmp    c001fe98 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fd04:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001fd0e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001fd16:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001fd1d:	88 c2                	mov    dl,al
c001fd1f:	a1 20 e5 02 c0       	mov    eax,ds:0xc002e520
c001fd24:	01 d0                	add    eax,edx
c001fd26:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001fd2d:	8b 15 20 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e520
c001fd33:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001fd3a:	89 14 85 40 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ac0],edx
c001fd41:	a1 20 e5 02 c0       	mov    eax,ds:0xc002e520
c001fd46:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001fd4d:	89 14 85 c0 e5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1a40],edx
c001fd54:	83 ec 0c             	sub    esp,0xc
c001fd57:	68 54 02 00 00       	push   0x254
c001fd5c:	e8 c3 f8 fe ff       	call   c000f624 <malloc>
c001fd61:	83 c4 10             	add    esp,0x10
c001fd64:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001fd6b:	83 ec 04             	sub    esp,0x4
c001fd6e:	6a 00                	push   0x0
c001fd70:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fd77:	50                   	push   eax
c001fd78:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fd7f:	e8 94 4f fe ff       	call   c0004d18 <f_mount>
c001fd84:	83 c4 10             	add    esp,0x10
c001fd87:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fd8e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001fd96:	74 19                	je     c001fdb1 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001fd98:	83 ec 0c             	sub    esp,0xc
c001fd9b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fda2:	e8 9d f8 fe ff       	call   c000f644 <rfree>
c001fda7:	83 c4 10             	add    esp,0x10
c001fdaa:	b0 00                	mov    al,0x0
c001fdac:	e9 e7 00 00 00       	jmp    c001fe98 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fdb1:	83 ec 04             	sub    esp,0x4
c001fdb4:	68 00 01 00 00       	push   0x100
c001fdb9:	6a 00                	push   0x0
c001fdbb:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fdc2:	50                   	push   eax
c001fdc3:	e8 fc 08 fe ff       	call   c00006c4 <memset>
c001fdc8:	83 c4 10             	add    esp,0x10
c001fdcb:	83 ec 08             	sub    esp,0x8
c001fdce:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fdd5:	50                   	push   eax
c001fdd6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fddd:	50                   	push   eax
c001fdde:	e8 37 0a fe ff       	call   c000081a <strcat>
c001fde3:	83 c4 10             	add    esp,0x10
c001fde6:	83 ec 08             	sub    esp,0x8
c001fde9:	68 84 b3 02 c0       	push   0xc002b384
c001fdee:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001fdf5:	50                   	push   eax
c001fdf6:	e8 1f 0a fe ff       	call   c000081a <strcat>
c001fdfb:	83 c4 10             	add    esp,0x10
c001fdfe:	83 ec 04             	sub    esp,0x4
c001fe01:	6a 01                	push   0x1
c001fe03:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001fe0a:	50                   	push   eax
c001fe0b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fe0f:	50                   	push   eax
c001fe10:	e8 65 4f fe ff       	call   c0004d7a <f_open>
c001fe15:	83 c4 10             	add    esp,0x10
c001fe18:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fe1f:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001fe26:	85 c0                	test   eax,eax
c001fe28:	74 0a                	je     c001fe34 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001fe2a:	78 2d                	js     c001fe59 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fe2c:	83 e8 04             	sub    eax,0x4
c001fe2f:	83 f8 01             	cmp    eax,0x1
c001fe32:	77 25                	ja     c001fe59 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fe34:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001fe3c:	83 ec 0c             	sub    esp,0xc
c001fe3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fe43:	50                   	push   eax
c001fe44:	e8 83 5a fe ff       	call   c00058cc <f_close>
c001fe49:	83 c4 10             	add    esp,0x10
c001fe4c:	90                   	nop
c001fe4d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001fe55:	74 3a                	je     c001fe91 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001fe57:	eb 2d                	jmp    c001fe86 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001fe59:	83 ec 0c             	sub    esp,0xc
c001fe5c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fe63:	e8 dc f7 fe ff       	call   c000f644 <rfree>
c001fe68:	83 c4 10             	add    esp,0x10
c001fe6b:	83 ec 04             	sub    esp,0x4
c001fe6e:	6a 00                	push   0x0
c001fe70:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fe77:	50                   	push   eax
c001fe78:	6a 00                	push   0x0
c001fe7a:	e8 99 4e fe ff       	call   c0004d18 <f_mount>
c001fe7f:	83 c4 10             	add    esp,0x10
c001fe82:	b0 00                	mov    al,0x0
c001fe84:	eb 12                	jmp    c001fe98 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fe86:	a1 20 e5 02 c0       	mov    eax,ds:0xc002e520
c001fe8b:	40                   	inc    eax
c001fe8c:	a3 20 e5 02 c0       	mov    ds:0xc002e520,eax
c001fe91:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001fe98:	81 c4 6c 03 00 00    	add    esp,0x36c
c001fe9e:	c3                   	ret    
c001fe9f:	90                   	nop

c001fea0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001fea0:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001fea6:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001feae:	74 0a                	je     c001feba <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001feb0:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001feb8:	75 0a                	jne    c001fec4 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001feba:	b8 04 00 00 00       	mov    eax,0x4
c001febf:	e9 db 00 00 00       	jmp    c001ff9f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fec4:	83 ec 08             	sub    esp,0x8
c001fec7:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fece:	50                   	push   eax
c001fecf:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001fed6:	e8 fb 5f fe ff       	call   c0005ed6 <f_readdir>
c001fedb:	83 c4 10             	add    esp,0x10
c001fede:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001fee5:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001feeb:	83 ec 0c             	sub    esp,0xc
c001feee:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001fef5:	83 c0 1a             	add    eax,0x1a
c001fef8:	50                   	push   eax
c001fef9:	e8 e3 07 fe ff       	call   c00006e1 <strlen>
c001fefe:	83 c4 10             	add    esp,0x10
c001ff01:	ba 00 00 00 00       	mov    edx,0x0
c001ff06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ff0a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ff0e:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001ff15:	0f b6 c0             	movzx  eax,al
c001ff18:	83 e0 10             	and    eax,0x10
c001ff1b:	74 07                	je     c001ff24 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001ff1d:	b8 02 00 00 00       	mov    eax,0x2
c001ff22:	eb 05                	jmp    c001ff29 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001ff24:	b8 01 00 00 00       	mov    eax,0x1
c001ff29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff2d:	83 ec 08             	sub    esp,0x8
c001ff30:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ff37:	83 c0 1a             	add    eax,0x1a
c001ff3a:	50                   	push   eax
c001ff3b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ff3f:	83 c0 10             	add    eax,0x10
c001ff42:	50                   	push   eax
c001ff43:	e8 1b 08 fe ff       	call   c0000763 <strcpy>
c001ff48:	83 c4 10             	add    esp,0x10
c001ff4b:	83 ec 04             	sub    esp,0x4
c001ff4e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001ff55:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ff59:	50                   	push   eax
c001ff5a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001ff61:	e8 3a 07 fe ff       	call   c00006a0 <memcpy>
c001ff66:	83 c4 10             	add    esp,0x10
c001ff69:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001ff70:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ff76:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001ff7d:	84 c0                	test   al,al
c001ff7f:	75 07                	jne    c001ff88 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001ff81:	b8 07 00 00 00       	mov    eax,0x7
c001ff86:	eb 17                	jmp    c001ff9f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001ff88:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001ff8f:	85 c0                	test   eax,eax
c001ff91:	75 07                	jne    c001ff9a <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001ff93:	b8 00 00 00 00       	mov    eax,0x0
c001ff98:	eb 05                	jmp    c001ff9f <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001ff9a:	b8 01 00 00 00       	mov    eax,0x1
c001ff9f:	81 c4 3c 02 00 00    	add    esp,0x23c
c001ffa5:	c3                   	ret    

c001ffa6 <FAT::read(void*, unsigned long, void*, int*)>:
c001ffa6:	83 ec 1c             	sub    esp,0x1c
c001ffa9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ffae:	74 07                	je     c001ffb7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001ffb0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ffb5:	75 07                	jne    c001ffbe <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001ffb7:	b8 04 00 00 00       	mov    eax,0x4
c001ffbc:	eb 3d                	jmp    c001fffb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001ffbe:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ffc2:	50                   	push   eax
c001ffc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ffc7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ffcb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ffcf:	e8 e2 51 fe ff       	call   c00051b6 <f_read>
c001ffd4:	83 c4 10             	add    esp,0x10
c001ffd7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ffdb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffdf:	89 c2                	mov    edx,eax
c001ffe1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ffe5:	89 10                	mov    DWORD PTR [eax],edx
c001ffe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ffeb:	85 c0                	test   eax,eax
c001ffed:	75 07                	jne    c001fff6 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001ffef:	b8 00 00 00 00       	mov    eax,0x0
c001fff4:	eb 05                	jmp    c001fffb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fff6:	b8 01 00 00 00       	mov    eax,0x1
c001fffb:	83 c4 1c             	add    esp,0x1c
c001fffe:	c3                   	ret    
c001ffff:	90                   	nop

c0020000 <FAT::write(void*, unsigned long, void*, int*)>:
c0020000:	83 ec 1c             	sub    esp,0x1c
c0020003:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020008:	74 07                	je     c0020011 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c002000a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002000f:	75 07                	jne    c0020018 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020011:	b8 04 00 00 00       	mov    eax,0x4
c0020016:	eb 3d                	jmp    c0020055 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020018:	8d 44 24 08          	lea    eax,[esp+0x8]
c002001c:	50                   	push   eax
c002001d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020021:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020025:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020029:	e8 08 54 fe ff       	call   c0005436 <f_write>
c002002e:	83 c4 10             	add    esp,0x10
c0020031:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020035:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020039:	89 c2                	mov    edx,eax
c002003b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002003f:	89 10                	mov    DWORD PTR [eax],edx
c0020041:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020045:	85 c0                	test   eax,eax
c0020047:	75 07                	jne    c0020050 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020049:	b8 00 00 00 00       	mov    eax,0x0
c002004e:	eb 05                	jmp    c0020055 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020050:	b8 01 00 00 00       	mov    eax,0x1
c0020055:	83 c4 1c             	add    esp,0x1c
c0020058:	c3                   	ret    
c0020059:	90                   	nop

c002005a <FAT::close(void*)>:
c002005a:	83 ec 1c             	sub    esp,0x1c
c002005d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020062:	75 07                	jne    c002006b <FAT::close(void*)+0x11>
c0020064:	b8 04 00 00 00       	mov    eax,0x4
c0020069:	eb 36                	jmp    c00200a1 <FAT::close(void*)+0x47>
c002006b:	83 ec 0c             	sub    esp,0xc
c002006e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020072:	e8 55 58 fe ff       	call   c00058cc <f_close>
c0020077:	83 c4 10             	add    esp,0x10
c002007a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002007e:	83 ec 0c             	sub    esp,0xc
c0020081:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020085:	e8 aa f5 fe ff       	call   c000f634 <free>
c002008a:	83 c4 10             	add    esp,0x10
c002008d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020091:	85 c0                	test   eax,eax
c0020093:	75 07                	jne    c002009c <FAT::close(void*)+0x42>
c0020095:	b8 00 00 00 00       	mov    eax,0x0
c002009a:	eb 05                	jmp    c00200a1 <FAT::close(void*)+0x47>
c002009c:	b8 01 00 00 00       	mov    eax,0x1
c00200a1:	83 c4 1c             	add    esp,0x1c
c00200a4:	c3                   	ret    
c00200a5:	90                   	nop

c00200a6 <FAT::closeDir(void*)>:
c00200a6:	83 ec 1c             	sub    esp,0x1c
c00200a9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00200ae:	75 07                	jne    c00200b7 <FAT::closeDir(void*)+0x11>
c00200b0:	b8 04 00 00 00       	mov    eax,0x4
c00200b5:	eb 36                	jmp    c00200ed <FAT::closeDir(void*)+0x47>
c00200b7:	83 ec 0c             	sub    esp,0xc
c00200ba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00200be:	e8 f1 5d fe ff       	call   c0005eb4 <f_closedir>
c00200c3:	83 c4 10             	add    esp,0x10
c00200c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00200ca:	83 ec 0c             	sub    esp,0xc
c00200cd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00200d1:	e8 5e f5 fe ff       	call   c000f634 <free>
c00200d6:	83 c4 10             	add    esp,0x10
c00200d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00200dd:	85 c0                	test   eax,eax
c00200df:	75 07                	jne    c00200e8 <FAT::closeDir(void*)+0x42>
c00200e1:	b8 00 00 00 00       	mov    eax,0x0
c00200e6:	eb 05                	jmp    c00200ed <FAT::closeDir(void*)+0x47>
c00200e8:	b8 01 00 00 00       	mov    eax,0x1
c00200ed:	83 c4 1c             	add    esp,0x1c
c00200f0:	c3                   	ret    
c00200f1:	90                   	nop

c00200f2 <FAT::seek(void*, unsigned long long)>:
c00200f2:	83 ec 2c             	sub    esp,0x2c
c00200f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00200f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00200fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020101:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020105:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002010a:	75 07                	jne    c0020113 <FAT::seek(void*, unsigned long long)+0x21>
c002010c:	b8 04 00 00 00       	mov    eax,0x4
c0020111:	eb 2f                	jmp    c0020142 <FAT::seek(void*, unsigned long long)+0x50>
c0020113:	83 ec 04             	sub    esp,0x4
c0020116:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002011a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002011e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020122:	e8 d4 57 fe ff       	call   c00058fb <f_lseek>
c0020127:	83 c4 10             	add    esp,0x10
c002012a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002012e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020132:	85 c0                	test   eax,eax
c0020134:	75 07                	jne    c002013d <FAT::seek(void*, unsigned long long)+0x4b>
c0020136:	b8 00 00 00 00       	mov    eax,0x0
c002013b:	eb 05                	jmp    c0020142 <FAT::seek(void*, unsigned long long)+0x50>
c002013d:	b8 01 00 00 00       	mov    eax,0x1
c0020142:	83 c4 2c             	add    esp,0x2c
c0020145:	c3                   	ret    

c0020146 <fatWrapperReadDisk>:
c0020146:	83 ec 1c             	sub    esp,0x1c
c0020149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002014d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020151:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020155:	89 04 24             	mov    DWORD PTR [esp],eax
c0020158:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002015c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020160:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020165:	8b 04 85 20 d5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ae0]
c002016c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020170:	83 ec 0c             	sub    esp,0xc
c0020173:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020177:	52                   	push   edx
c0020178:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002017c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020180:	50                   	push   eax
c0020181:	e8 14 5e ff ff       	call   c0015f9a <LogicalDisk::read(unsigned long long, int, void*)>
c0020186:	83 c4 20             	add    esp,0x20
c0020189:	83 c4 1c             	add    esp,0x1c
c002018c:	c3                   	ret    

c002018d <fatWrapperWriteDisk>:
c002018d:	83 ec 1c             	sub    esp,0x1c
c0020190:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020194:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020198:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002019c:	89 04 24             	mov    DWORD PTR [esp],eax
c002019f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00201a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00201a7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00201ac:	8b 04 85 20 d5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ae0]
c00201b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00201b7:	83 ec 0c             	sub    esp,0xc
c00201ba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00201be:	52                   	push   edx
c00201bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00201c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00201c7:	50                   	push   eax
c00201c8:	e8 39 5e ff ff       	call   c0016006 <LogicalDisk::write(unsigned long long, int, void*)>
c00201cd:	83 c4 20             	add    esp,0x20
c00201d0:	83 c4 1c             	add    esp,0x1c
c00201d3:	c3                   	ret    

c00201d4 <fatWrapperIoctl>:
c00201d4:	53                   	push   ebx
c00201d5:	83 ec 28             	sub    esp,0x28
c00201d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00201dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00201e0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00201e4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00201e8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00201ed:	75 31                	jne    c0020220 <fatWrapperIoctl+0x4c>
c00201ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00201f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00201f7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00201fc:	8b 04 85 20 d5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ae0]
c0020203:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020209:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002020f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020213:	66 89 02             	mov    WORD PTR [edx],ax
c0020216:	b8 00 00 00 00       	mov    eax,0x0
c002021b:	e9 b2 00 00 00       	jmp    c00202d2 <fatWrapperIoctl+0xfe>
c0020220:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020225:	75 6a                	jne    c0020291 <fatWrapperIoctl+0xbd>
c0020227:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002022b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002022f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020234:	8b 04 85 20 d5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ae0]
c002023b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020241:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020247:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002024d:	89 c8                	mov    eax,ecx
c002024f:	89 da                	mov    edx,ebx
c0020251:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020255:	c1 e0 0a             	shl    eax,0xa
c0020258:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002025d:	8b 0c 8d 20 d5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2ae0]
c0020264:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002026a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020270:	89 cb                	mov    ebx,ecx
c0020272:	c1 fb 1f             	sar    ebx,0x1f
c0020275:	53                   	push   ebx
c0020276:	51                   	push   ecx
c0020277:	52                   	push   edx
c0020278:	50                   	push   eax
c0020279:	e8 4e 55 00 00       	call   c00257cc <__udivdi3>
c002027e:	83 c4 10             	add    esp,0x10
c0020281:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020285:	89 01                	mov    DWORD PTR [ecx],eax
c0020287:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002028a:	b8 00 00 00 00       	mov    eax,0x0
c002028f:	eb 41                	jmp    c00202d2 <fatWrapperIoctl+0xfe>
c0020291:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020296:	75 07                	jne    c002029f <fatWrapperIoctl+0xcb>
c0020298:	b8 00 00 00 00       	mov    eax,0x0
c002029d:	eb 33                	jmp    c00202d2 <fatWrapperIoctl+0xfe>
c002029f:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00202a4:	75 19                	jne    c00202bf <fatWrapperIoctl+0xeb>
c00202a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00202aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00202ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00202b2:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00202b8:	b8 00 00 00 00       	mov    eax,0x0
c00202bd:	eb 13                	jmp    c00202d2 <fatWrapperIoctl+0xfe>
c00202bf:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00202c4:	75 07                	jne    c00202cd <fatWrapperIoctl+0xf9>
c00202c6:	b8 00 00 00 00       	mov    eax,0x0
c00202cb:	eb 05                	jmp    c00202d2 <fatWrapperIoctl+0xfe>
c00202cd:	b8 04 00 00 00       	mov    eax,0x4
c00202d2:	83 c4 28             	add    esp,0x28
c00202d5:	5b                   	pop    ebx
c00202d6:	c3                   	ret    
c00202d7:	90                   	nop

c00202d8 <FAT::FAT()>:
c00202d8:	83 ec 1c             	sub    esp,0x1c
c00202db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00202df:	83 ec 0c             	sub    esp,0xc
c00202e2:	50                   	push   eax
c00202e3:	e8 f2 28 ff ff       	call   c0012bda <Filesystem::Filesystem()>
c00202e8:	83 c4 10             	add    esp,0x10
c00202eb:	ba c0 b3 02 c0       	mov    edx,0xc002b3c0
c00202f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00202f4:	89 10                	mov    DWORD PTR [eax],edx
c00202f6:	c7 05 20 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e520,0x0
c0020300:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020308:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002030d:	7f 15                	jg     c0020324 <FAT::FAT()+0x4c>
c002030f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020313:	c7 04 85 40 e5 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd1ac0],0xffffffff
c002031e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020322:	eb e4                	jmp    c0020308 <FAT::FAT()+0x30>
c0020324:	90                   	nop
c0020325:	83 c4 1c             	add    esp,0x1c
c0020328:	c3                   	ret    
c0020329:	90                   	nop

c002032a <FAT::fixFilepath(char*)>:
c002032a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002032e:	8a 00                	mov    al,BYTE PTR [eax]
c0020330:	3c 40                	cmp    al,0x40
c0020332:	7e 2c                	jle    c0020360 <FAT::fixFilepath(char*)+0x36>
c0020334:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020338:	8a 00                	mov    al,BYTE PTR [eax]
c002033a:	83 e8 41             	sub    eax,0x41
c002033d:	88 c2                	mov    dl,al
c002033f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020343:	88 10                	mov    BYTE PTR [eax],dl
c0020345:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020349:	8a 00                	mov    al,BYTE PTR [eax]
c002034b:	0f be c0             	movsx  eax,al
c002034e:	8b 04 85 40 e5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ac0]
c0020355:	83 c0 30             	add    eax,0x30
c0020358:	88 c2                	mov    dl,al
c002035a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002035e:	88 10                	mov    BYTE PTR [eax],dl
c0020360:	90                   	nop
c0020361:	c3                   	ret    

c0020362 <FAT::open(char const*, void**, FileOpenMode)>:
c0020362:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020368:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020370:	74 0a                	je     c002037c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020372:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002037a:	75 0a                	jne    c0020386 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002037c:	b8 04 00 00 00       	mov    eax,0x4
c0020381:	e9 fd 00 00 00       	jmp    c0020483 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020386:	83 ec 08             	sub    esp,0x8
c0020389:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020390:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020394:	50                   	push   eax
c0020395:	e8 c9 03 fe ff       	call   c0000763 <strcpy>
c002039a:	83 c4 10             	add    esp,0x10
c002039d:	83 ec 08             	sub    esp,0x8
c00203a0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00203a4:	50                   	push   eax
c00203a5:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00203ac:	e8 79 ff ff ff       	call   c002032a <FAT::fixFilepath(char*)>
c00203b1:	83 c4 10             	add    esp,0x10
c00203b4:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00203bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00203c3:	83 e0 01             	and    eax,0x1
c00203c6:	74 08                	je     c00203d0 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00203c8:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00203d0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00203d7:	83 e0 04             	and    eax,0x4
c00203da:	74 10                	je     c00203ec <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00203dc:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00203e4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00203ec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00203f3:	83 e0 02             	and    eax,0x2
c00203f6:	74 08                	je     c0020400 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00203f8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020400:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020407:	83 e0 08             	and    eax,0x8
c002040a:	74 08                	je     c0020414 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002040c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020414:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002041b:	83 e0 10             	and    eax,0x10
c002041e:	74 08                	je     c0020428 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020420:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020428:	83 ec 0c             	sub    esp,0xc
c002042b:	68 50 02 00 00       	push   0x250
c0020430:	e8 ef f1 fe ff       	call   c000f624 <malloc>
c0020435:	83 c4 10             	add    esp,0x10
c0020438:	89 c2                	mov    edx,eax
c002043a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020441:	89 10                	mov    DWORD PTR [eax],edx
c0020443:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002044b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020452:	8b 00                	mov    eax,DWORD PTR [eax]
c0020454:	83 ec 04             	sub    esp,0x4
c0020457:	52                   	push   edx
c0020458:	8d 54 24 10          	lea    edx,[esp+0x10]
c002045c:	52                   	push   edx
c002045d:	50                   	push   eax
c002045e:	e8 17 49 fe ff       	call   c0004d7a <f_open>
c0020463:	83 c4 10             	add    esp,0x10
c0020466:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002046d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020475:	74 07                	je     c002047e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020477:	b8 01 00 00 00       	mov    eax,0x1
c002047c:	eb 05                	jmp    c0020483 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002047e:	b8 00 00 00 00       	mov    eax,0x0
c0020483:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020489:	c3                   	ret    

c002048a <FAT::openDir(char const*, void**)>:
c002048a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020490:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020498:	74 0a                	je     c00204a4 <FAT::openDir(char const*, void**)+0x1a>
c002049a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00204a2:	75 07                	jne    c00204ab <FAT::openDir(char const*, void**)+0x21>
c00204a4:	b8 04 00 00 00       	mov    eax,0x4
c00204a9:	eb 7d                	jmp    c0020528 <FAT::openDir(char const*, void**)+0x9e>
c00204ab:	83 ec 08             	sub    esp,0x8
c00204ae:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00204b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00204b9:	50                   	push   eax
c00204ba:	e8 a4 02 fe ff       	call   c0000763 <strcpy>
c00204bf:	83 c4 10             	add    esp,0x10
c00204c2:	83 ec 08             	sub    esp,0x8
c00204c5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00204c9:	50                   	push   eax
c00204ca:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00204d1:	e8 54 fe ff ff       	call   c002032a <FAT::fixFilepath(char*)>
c00204d6:	83 c4 10             	add    esp,0x10
c00204d9:	83 ec 0c             	sub    esp,0xc
c00204dc:	6a 4c                	push   0x4c
c00204de:	e8 41 f1 fe ff       	call   c000f624 <malloc>
c00204e3:	83 c4 10             	add    esp,0x10
c00204e6:	89 c2                	mov    edx,eax
c00204e8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00204ef:	89 10                	mov    DWORD PTR [eax],edx
c00204f1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00204f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00204fa:	83 ec 08             	sub    esp,0x8
c00204fd:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020501:	52                   	push   edx
c0020502:	50                   	push   eax
c0020503:	e8 aa 58 fe ff       	call   c0005db2 <f_opendir>
c0020508:	83 c4 10             	add    esp,0x10
c002050b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020512:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c002051a:	74 07                	je     c0020523 <FAT::openDir(char const*, void**)+0x99>
c002051c:	b8 01 00 00 00       	mov    eax,0x1
c0020521:	eb 05                	jmp    c0020528 <FAT::openDir(char const*, void**)+0x9e>
c0020523:	b8 00 00 00 00       	mov    eax,0x0
c0020528:	81 c4 1c 01 00 00    	add    esp,0x11c
c002052e:	c3                   	ret    
c002052f:	90                   	nop

c0020530 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020530:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020536:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002053e:	75 0a                	jne    c002054a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020540:	b8 04 00 00 00       	mov    eax,0x4
c0020545:	e9 c9 00 00 00       	jmp    c0020613 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002054a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020552:	75 0a                	jne    c002055e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020554:	b8 04 00 00 00       	mov    eax,0x4
c0020559:	e9 b5 00 00 00       	jmp    c0020613 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002055e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020566:	75 0a                	jne    c0020572 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020568:	b8 04 00 00 00       	mov    eax,0x4
c002056d:	e9 a1 00 00 00       	jmp    c0020613 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020572:	83 ec 08             	sub    esp,0x8
c0020575:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002057c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020583:	50                   	push   eax
c0020584:	e8 da 01 fe ff       	call   c0000763 <strcpy>
c0020589:	83 c4 10             	add    esp,0x10
c002058c:	83 ec 08             	sub    esp,0x8
c002058f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020596:	50                   	push   eax
c0020597:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002059e:	e8 87 fd ff ff       	call   c002032a <FAT::fixFilepath(char*)>
c00205a3:	83 c4 10             	add    esp,0x10
c00205a6:	83 ec 08             	sub    esp,0x8
c00205a9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00205ad:	50                   	push   eax
c00205ae:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00205b5:	50                   	push   eax
c00205b6:	e8 b6 59 fe ff       	call   c0005f71 <f_stat>
c00205bb:	83 c4 10             	add    esp,0x10
c00205be:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00205c5:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00205cc:	85 c0                	test   eax,eax
c00205ce:	74 07                	je     c00205d7 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00205d0:	83 f8 04             	cmp    eax,0x4
c00205d3:	74 32                	je     c0020607 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00205d5:	eb 37                	jmp    c002060e <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00205d7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00205db:	0f b6 c0             	movzx  eax,al
c00205de:	83 e0 10             	and    eax,0x10
c00205e1:	0f 95 c2             	setne  dl
c00205e4:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00205eb:	88 10                	mov    BYTE PTR [eax],dl
c00205ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00205f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00205f4:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00205fb:	89 01                	mov    DWORD PTR [ecx],eax
c00205fd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020600:	b8 00 00 00 00       	mov    eax,0x0
c0020605:	eb 0c                	jmp    c0020613 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020607:	b8 02 00 00 00       	mov    eax,0x2
c002060c:	eb 05                	jmp    c0020613 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002060e:	b8 01 00 00 00       	mov    eax,0x1
c0020613:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020619:	c3                   	ret    

c002061a <FAT::unlink(char const*)>:
c002061a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020620:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020628:	75 07                	jne    c0020631 <FAT::unlink(char const*)+0x17>
c002062a:	b8 04 00 00 00       	mov    eax,0x4
c002062f:	eb 5c                	jmp    c002068d <FAT::unlink(char const*)+0x73>
c0020631:	83 ec 08             	sub    esp,0x8
c0020634:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002063b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002063f:	50                   	push   eax
c0020640:	e8 1e 01 fe ff       	call   c0000763 <strcpy>
c0020645:	83 c4 10             	add    esp,0x10
c0020648:	83 ec 08             	sub    esp,0x8
c002064b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002064f:	50                   	push   eax
c0020650:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020657:	e8 ce fc ff ff       	call   c002032a <FAT::fixFilepath(char*)>
c002065c:	83 c4 10             	add    esp,0x10
c002065f:	83 ec 0c             	sub    esp,0xc
c0020662:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020666:	50                   	push   eax
c0020667:	e8 57 5c fe ff       	call   c00062c3 <f_unlink>
c002066c:	83 c4 10             	add    esp,0x10
c002066f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020676:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002067d:	85 c0                	test   eax,eax
c002067f:	75 07                	jne    c0020688 <FAT::unlink(char const*)+0x6e>
c0020681:	b8 00 00 00 00       	mov    eax,0x0
c0020686:	eb 05                	jmp    c002068d <FAT::unlink(char const*)+0x73>
c0020688:	b8 01 00 00 00       	mov    eax,0x1
c002068d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020693:	c3                   	ret    

c0020694 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020694:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002069a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00206a1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00206a8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00206ac:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00206b0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00206b8:	75 0a                	jne    c00206c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00206ba:	b8 04 00 00 00       	mov    eax,0x4
c00206bf:	e9 1c 01 00 00       	jmp    c00207e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00206c4:	83 ec 08             	sub    esp,0x8
c00206c7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00206ce:	8d 44 24 24          	lea    eax,[esp+0x24]
c00206d2:	50                   	push   eax
c00206d3:	e8 8b 00 fe ff       	call   c0000763 <strcpy>
c00206d8:	83 c4 10             	add    esp,0x10
c00206db:	83 ec 08             	sub    esp,0x8
c00206de:	8d 44 24 20          	lea    eax,[esp+0x20]
c00206e2:	50                   	push   eax
c00206e3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00206ea:	e8 3b fc ff ff       	call   c002032a <FAT::fixFilepath(char*)>
c00206ef:	83 c4 10             	add    esp,0x10
c00206f2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00206fa:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020702:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020707:	83 e0 01             	and    eax,0x1
c002070a:	74 08                	je     c0020714 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002070c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020714:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020719:	83 e0 02             	and    eax,0x2
c002071c:	74 08                	je     c0020726 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002071e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020726:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002072b:	83 e0 04             	and    eax,0x4
c002072e:	74 08                	je     c0020738 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020730:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020738:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002073d:	83 e0 08             	and    eax,0x8
c0020740:	74 08                	je     c002074a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020742:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c002074a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002074f:	83 e0 01             	and    eax,0x1
c0020752:	74 08                	je     c002075c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020754:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002075c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020761:	83 e0 02             	and    eax,0x2
c0020764:	74 08                	je     c002076e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020766:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002076e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020773:	83 e0 04             	and    eax,0x4
c0020776:	74 08                	je     c0020780 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020778:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020780:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020785:	83 e0 08             	and    eax,0x8
c0020788:	74 08                	je     c0020792 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c002078a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020792:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020799:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00207a0:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00207a8:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00207b0:	83 ec 04             	sub    esp,0x4
c00207b3:	52                   	push   edx
c00207b4:	50                   	push   eax
c00207b5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00207b9:	50                   	push   eax
c00207ba:	e8 a6 61 fe ff       	call   c0006965 <f_chmod>
c00207bf:	83 c4 10             	add    esp,0x10
c00207c2:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00207c9:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00207d0:	85 c0                	test   eax,eax
c00207d2:	75 07                	jne    c00207db <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00207d4:	b8 00 00 00 00       	mov    eax,0x0
c00207d9:	eb 05                	jmp    c00207e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00207db:	b8 01 00 00 00       	mov    eax,0x1
c00207e0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00207e6:	c3                   	ret    
c00207e7:	90                   	nop

c00207e8 <FAT::rename(char const*, char const*)>:
c00207e8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00207ee:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00207f6:	74 0a                	je     c0020802 <FAT::rename(char const*, char const*)+0x1a>
c00207f8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020800:	75 0a                	jne    c002080c <FAT::rename(char const*, char const*)+0x24>
c0020802:	b8 04 00 00 00       	mov    eax,0x4
c0020807:	e9 98 00 00 00       	jmp    c00208a4 <FAT::rename(char const*, char const*)+0xbc>
c002080c:	83 ec 08             	sub    esp,0x8
c002080f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020816:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002081d:	50                   	push   eax
c002081e:	e8 40 ff fd ff       	call   c0000763 <strcpy>
c0020823:	83 c4 10             	add    esp,0x10
c0020826:	83 ec 08             	sub    esp,0x8
c0020829:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020830:	50                   	push   eax
c0020831:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020838:	e8 ed fa ff ff       	call   c002032a <FAT::fixFilepath(char*)>
c002083d:	83 c4 10             	add    esp,0x10
c0020840:	83 ec 08             	sub    esp,0x8
c0020843:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c002084a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002084e:	50                   	push   eax
c002084f:	e8 0f ff fd ff       	call   c0000763 <strcpy>
c0020854:	83 c4 10             	add    esp,0x10
c0020857:	83 ec 08             	sub    esp,0x8
c002085a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002085e:	50                   	push   eax
c002085f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020866:	e8 bf fa ff ff       	call   c002032a <FAT::fixFilepath(char*)>
c002086b:	83 c4 10             	add    esp,0x10
c002086e:	83 ec 08             	sub    esp,0x8
c0020871:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020875:	50                   	push   eax
c0020876:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002087d:	50                   	push   eax
c002087e:	e8 ef 5d fe ff       	call   c0006672 <f_rename>
c0020883:	83 c4 10             	add    esp,0x10
c0020886:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002088d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020894:	85 c0                	test   eax,eax
c0020896:	75 07                	jne    c002089f <FAT::rename(char const*, char const*)+0xb7>
c0020898:	b8 00 00 00 00       	mov    eax,0x0
c002089d:	eb 05                	jmp    c00208a4 <FAT::rename(char const*, char const*)+0xbc>
c002089f:	b8 01 00 00 00       	mov    eax,0x1
c00208a4:	81 c4 1c 02 00 00    	add    esp,0x21c
c00208aa:	c3                   	ret    
c00208ab:	90                   	nop

c00208ac <FAT::mkdir(char const*)>:
c00208ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00208b2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00208ba:	75 07                	jne    c00208c3 <FAT::mkdir(char const*)+0x17>
c00208bc:	b8 04 00 00 00       	mov    eax,0x4
c00208c1:	eb 5c                	jmp    c002091f <FAT::mkdir(char const*)+0x73>
c00208c3:	83 ec 08             	sub    esp,0x8
c00208c6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00208cd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00208d1:	50                   	push   eax
c00208d2:	e8 8c fe fd ff       	call   c0000763 <strcpy>
c00208d7:	83 c4 10             	add    esp,0x10
c00208da:	83 ec 08             	sub    esp,0x8
c00208dd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00208e1:	50                   	push   eax
c00208e2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00208e9:	e8 3c fa ff ff       	call   c002032a <FAT::fixFilepath(char*)>
c00208ee:	83 c4 10             	add    esp,0x10
c00208f1:	83 ec 0c             	sub    esp,0xc
c00208f4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00208f8:	50                   	push   eax
c00208f9:	e8 48 5b fe ff       	call   c0006446 <f_mkdir>
c00208fe:	83 c4 10             	add    esp,0x10
c0020901:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020908:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002090f:	85 c0                	test   eax,eax
c0020911:	75 07                	jne    c002091a <FAT::mkdir(char const*)+0x6e>
c0020913:	b8 00 00 00 00       	mov    eax,0x0
c0020918:	eb 05                	jmp    c002091f <FAT::mkdir(char const*)+0x73>
c002091a:	b8 01 00 00 00       	mov    eax,0x1
c002091f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020925:	c3                   	ret    

c0020926 <FAT::exists(char const*)>:
c0020926:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002092c:	83 ec 08             	sub    esp,0x8
c002092f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020936:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002093a:	50                   	push   eax
c002093b:	e8 23 fe fd ff       	call   c0000763 <strcpy>
c0020940:	83 c4 10             	add    esp,0x10
c0020943:	83 ec 08             	sub    esp,0x8
c0020946:	8d 44 24 08          	lea    eax,[esp+0x8]
c002094a:	50                   	push   eax
c002094b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020952:	e8 d3 f9 ff ff       	call   c002032a <FAT::fixFilepath(char*)>
c0020957:	83 c4 10             	add    esp,0x10
c002095a:	83 ec 08             	sub    esp,0x8
c002095d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020964:	50                   	push   eax
c0020965:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020969:	50                   	push   eax
c002096a:	e8 02 56 fe ff       	call   c0005f71 <f_stat>
c002096f:	83 c4 10             	add    esp,0x10
c0020972:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020979:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020980:	85 c0                	test   eax,eax
c0020982:	75 04                	jne    c0020988 <FAT::exists(char const*)+0x62>
c0020984:	b0 01                	mov    al,0x1
c0020986:	eb 02                	jmp    c002098a <FAT::exists(char const*)+0x64>
c0020988:	b0 00                	mov    al,0x0
c002098a:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020990:	c3                   	ret    
c0020991:	90                   	nop

c0020992 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020992:	b8 08 00 00 00       	mov    eax,0x8
c0020997:	c3                   	ret    

c0020998 <ISO9660::seek(void*, unsigned long long)>:
c0020998:	53                   	push   ebx
c0020999:	b8 04 00 00 00       	mov    eax,0x4
c002099e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00209a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00209a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00209aa:	85 d2                	test   edx,edx
c00209ac:	74 17                	je     c00209c5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00209ae:	89 c8                	mov    eax,ecx
c00209b0:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00209b3:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00209b6:	b8 01 00 00 00       	mov    eax,0x1
c00209bb:	73 08                	jae    c00209c5 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00209bd:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00209c0:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00209c3:	31 c0                	xor    eax,eax
c00209c5:	5b                   	pop    ebx
c00209c6:	c3                   	ret    
c00209c7:	90                   	nop

c00209c8 <ISO9660::tell(void*, unsigned long long*)>:
c00209c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00209cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209d0:	85 d2                	test   edx,edx
c00209d2:	74 12                	je     c00209e6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00209d4:	85 c0                	test   eax,eax
c00209d6:	74 0e                	je     c00209e6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00209d8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00209db:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00209de:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00209e1:	89 10                	mov    DWORD PTR [eax],edx
c00209e3:	31 c0                	xor    eax,eax
c00209e5:	c3                   	ret    
c00209e6:	b8 04 00 00 00       	mov    eax,0x4
c00209eb:	c3                   	ret    

c00209ec <ISO9660::getName()>:
c00209ec:	b8 1c b4 02 c0       	mov    eax,0xc002b41c
c00209f1:	c3                   	ret    

c00209f2 <ISO9660::stat(void*, unsigned long long*)>:
c00209f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00209f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00209fa:	85 d2                	test   edx,edx
c00209fc:	74 12                	je     c0020a10 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00209fe:	85 c0                	test   eax,eax
c0020a00:	74 0e                	je     c0020a10 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020a02:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020a05:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020a08:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020a0b:	89 10                	mov    DWORD PTR [eax],edx
c0020a0d:	31 c0                	xor    eax,eax
c0020a0f:	c3                   	ret    
c0020a10:	b8 04 00 00 00       	mov    eax,0x4
c0020a15:	c3                   	ret    

c0020a16 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020a16:	b8 01 00 00 00       	mov    eax,0x1
c0020a1b:	c3                   	ret    

c0020a1c <ISO9660::unlink(char const*)>:
c0020a1c:	b8 01 00 00 00       	mov    eax,0x1
c0020a21:	c3                   	ret    

c0020a22 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020a22:	b8 01 00 00 00       	mov    eax,0x1
c0020a27:	c3                   	ret    

c0020a28 <ISO9660::rename(char const*, char const*)>:
c0020a28:	b8 01 00 00 00       	mov    eax,0x1
c0020a2d:	c3                   	ret    

c0020a2e <ISO9660::mkdir(char const*)>:
c0020a2e:	b8 01 00 00 00       	mov    eax,0x1
c0020a33:	c3                   	ret    

c0020a34 <ISO9660::close(void*)>:
c0020a34:	83 ec 0c             	sub    esp,0xc
c0020a37:	b8 04 00 00 00       	mov    eax,0x4
c0020a3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020a40:	85 d2                	test   edx,edx
c0020a42:	74 0e                	je     c0020a52 <ISO9660::close(void*)+0x1e>
c0020a44:	83 ec 0c             	sub    esp,0xc
c0020a47:	52                   	push   edx
c0020a48:	e8 e7 eb fe ff       	call   c000f634 <free>
c0020a4d:	83 c4 10             	add    esp,0x10
c0020a50:	31 c0                	xor    eax,eax
c0020a52:	83 c4 0c             	add    esp,0xc
c0020a55:	c3                   	ret    

c0020a56 <ISO9660::closeDir(void*)>:
c0020a56:	83 ec 0c             	sub    esp,0xc
c0020a59:	b8 04 00 00 00       	mov    eax,0x4
c0020a5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020a62:	85 d2                	test   edx,edx
c0020a64:	74 0e                	je     c0020a74 <ISO9660::closeDir(void*)+0x1e>
c0020a66:	83 ec 0c             	sub    esp,0xc
c0020a69:	52                   	push   edx
c0020a6a:	e8 c5 eb fe ff       	call   c000f634 <free>
c0020a6f:	83 c4 10             	add    esp,0x10
c0020a72:	31 c0                	xor    eax,eax
c0020a74:	83 c4 0c             	add    esp,0xc
c0020a77:	c3                   	ret    

c0020a78 <ISO9660::~ISO9660()>:
c0020a78:	83 ec 0c             	sub    esp,0xc
c0020a7b:	ba 80 b4 02 c0       	mov    edx,0xc002b480
c0020a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a84:	89 10                	mov    DWORD PTR [eax],edx
c0020a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a8a:	83 ec 0c             	sub    esp,0xc
c0020a8d:	50                   	push   eax
c0020a8e:	e8 6b 21 ff ff       	call   c0012bfe <Filesystem::~Filesystem()>
c0020a93:	83 c4 10             	add    esp,0x10
c0020a96:	90                   	nop
c0020a97:	83 c4 0c             	add    esp,0xc
c0020a9a:	c3                   	ret    
c0020a9b:	90                   	nop

c0020a9c <ISO9660::~ISO9660()>:
c0020a9c:	83 ec 0c             	sub    esp,0xc
c0020a9f:	83 ec 0c             	sub    esp,0xc
c0020aa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020aa6:	e8 cd ff ff ff       	call   c0020a78 <ISO9660::~ISO9660()>
c0020aab:	83 c4 10             	add    esp,0x10
c0020aae:	83 ec 08             	sub    esp,0x8
c0020ab1:	6a 08                	push   0x8
c0020ab3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ab7:	e8 39 1d ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0020abc:	83 c4 10             	add    esp,0x10
c0020abf:	83 c4 0c             	add    esp,0xc
c0020ac2:	c3                   	ret    

c0020ac3 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020ac3:	55                   	push   ebp
c0020ac4:	31 c9                	xor    ecx,ecx
c0020ac6:	57                   	push   edi
c0020ac7:	56                   	push   esi
c0020ac8:	53                   	push   ebx
c0020ac9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020acd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020ad1:	89 eb                	mov    ebx,ebp
c0020ad3:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020ad7:	39 ce                	cmp    esi,ecx
c0020ad9:	7e 17                	jle    c0020af2 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020adb:	31 d2                	xor    edx,edx
c0020add:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020ae1:	7d 13                	jge    c0020af6 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020ae3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020ae7:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020aea:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020aed:	75 0d                	jne    c0020afc <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020aef:	42                   	inc    edx
c0020af0:	eb eb                	jmp    c0020add <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020af2:	31 c0                	xor    eax,eax
c0020af4:	eb 0a                	jmp    c0020b00 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020af6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020afa:	eb 04                	jmp    c0020b00 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020afc:	41                   	inc    ecx
c0020afd:	43                   	inc    ebx
c0020afe:	eb d7                	jmp    c0020ad7 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020b00:	5b                   	pop    ebx
c0020b01:	5e                   	pop    esi
c0020b02:	5f                   	pop    edi
c0020b03:	5d                   	pop    ebp
c0020b04:	c3                   	ret    

c0020b05 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020b05:	56                   	push   esi
c0020b06:	53                   	push   ebx
c0020b07:	52                   	push   edx
c0020b08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020b0c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020b10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020b14:	39 0d 20 e6 02 c0    	cmp    DWORD PTR ds:0xc002e620,ecx
c0020b1a:	75 08                	jne    c0020b24 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0020b1c:	38 05 94 c4 02 c0    	cmp    BYTE PTR ds:0xc002c494,al
c0020b22:	74 2b                	je     c0020b4f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0020b24:	83 ec 0c             	sub    esp,0xc
c0020b27:	a2 94 c4 02 c0       	mov    ds:0xc002c494,al
c0020b2c:	68 40 e6 02 c0       	push   0xc002e640
c0020b31:	0f be c0             	movsx  eax,al
c0020b34:	6a 01                	push   0x1
c0020b36:	89 0d 20 e6 02 c0    	mov    DWORD PTR ds:0xc002e620,ecx
c0020b3c:	31 db                	xor    ebx,ebx
c0020b3e:	53                   	push   ebx
c0020b3f:	51                   	push   ecx
c0020b40:	ff 34 85 1c d4 02 c0 	push   DWORD PTR [eax*4-0x3ffd2be4]
c0020b47:	e8 4e 54 ff ff       	call   c0015f9a <LogicalDisk::read(unsigned long long, int, void*)>
c0020b4c:	83 c4 20             	add    esp,0x20
c0020b4f:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0020b57:	c7 44 24 14 40 e6 02 c0 	mov    DWORD PTR [esp+0x14],0xc002e640
c0020b5f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020b63:	58                   	pop    eax
c0020b64:	5b                   	pop    ebx
c0020b65:	5e                   	pop    esi
c0020b66:	e9 35 fb fd ff       	jmp    c00006a0 <memcpy>
c0020b6b:	90                   	nop

c0020b6c <ISO9660::tryMount(LogicalDisk*, int)>:
c0020b6c:	81 ec 10 08 00 00    	sub    esp,0x810
c0020b72:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0020b79:	83 c0 41             	add    eax,0x41
c0020b7c:	0f be c0             	movsx  eax,al
c0020b7f:	50                   	push   eax
c0020b80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020b84:	50                   	push   eax
c0020b85:	6a 10                	push   0x10
c0020b87:	e8 79 ff ff ff       	call   c0020b05 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020b8c:	83 c4 10             	add    esp,0x10
c0020b8f:	31 c0                	xor    eax,eax
c0020b91:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0020b96:	75 1d                	jne    c0020bb5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020b98:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0020b9d:	75 16                	jne    c0020bb5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020b9f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0020ba4:	75 0f                	jne    c0020bb5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020ba6:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0020bab:	75 08                	jne    c0020bb5 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0020bad:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0020bb2:	0f 94 c0             	sete   al
c0020bb5:	81 c4 0c 08 00 00    	add    esp,0x80c
c0020bbb:	c3                   	ret    

c0020bbc <ISO9660::read(void*, unsigned long, void*, int*)>:
c0020bbc:	55                   	push   ebp
c0020bbd:	57                   	push   edi
c0020bbe:	56                   	push   esi
c0020bbf:	53                   	push   ebx
c0020bc0:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0020bc6:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0020bcd:	85 ed                	test   ebp,ebp
c0020bcf:	0f 84 d6 01 00 00    	je     c0020dab <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020bd5:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0020bdd:	0f 84 c8 01 00 00    	je     c0020dab <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0020be3:	b8 01 00 00 00       	mov    eax,0x1
c0020be8:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0020bec:	0f 85 be 01 00 00    	jne    c0020db0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020bf2:	31 d2                	xor    edx,edx
c0020bf4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0020bfb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0020bfe:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0020c01:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020c05:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0020c08:	89 04 24             	mov    DWORD PTR [esp],eax
c0020c0b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020c0f:	01 f0                	add    eax,esi
c0020c11:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0020c14:	11 fa                	adc    edx,edi
c0020c16:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020c1a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0020c1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020c22:	19 d1                	sbb    ecx,edx
c0020c24:	72 0a                	jb     c0020c30 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0020c26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020c2e:	eb 13                	jmp    c0020c43 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0020c30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020c38:	29 f0                	sub    eax,esi
c0020c3a:	19 fa                	sbb    edx,edi
c0020c3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0020c3f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020c43:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020c46:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0020c49:	0f a4 c2 0b          	shld   edx,eax,0xb
c0020c4d:	51                   	push   ecx
c0020c4e:	c1 e0 0b             	shl    eax,0xb
c0020c51:	01 c6                	add    esi,eax
c0020c53:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020c57:	11 d7                	adc    edi,edx
c0020c59:	50                   	push   eax
c0020c5a:	89 fa                	mov    edx,edi
c0020c5c:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0020c60:	89 f0                	mov    eax,esi
c0020c62:	53                   	push   ebx
c0020c63:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020c67:	50                   	push   eax
c0020c68:	e8 98 fe ff ff       	call   c0020b05 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020c6d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020c71:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0020c74:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0020c78:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0020c7e:	83 c4 10             	add    esp,0x10
c0020c81:	b8 00 08 00 00       	mov    eax,0x800
c0020c86:	29 d0                	sub    eax,edx
c0020c88:	39 c1                	cmp    ecx,eax
c0020c8a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0020c8e:	83 d9 00             	sbb    ecx,0x0
c0020c91:	7d 1c                	jge    c0020caf <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0020c93:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0020c98:	75 12                	jne    c0020cac <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0020c9a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020ca1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020ca7:	e9 fb 00 00 00       	jmp    c0020da7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c0020cac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020caf:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0020cb2:	31 d2                	xor    edx,edx
c0020cb4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0020cb8:	39 c2                	cmp    edx,eax
c0020cba:	7d 14                	jge    c0020cd0 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c0020cbc:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0020cc3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020cc7:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0020cca:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0020ccd:	42                   	inc    edx
c0020cce:	eb e8                	jmp    c0020cb8 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0020cd0:	89 c3                	mov    ebx,eax
c0020cd2:	85 c0                	test   eax,eax
c0020cd4:	79 02                	jns    c0020cd8 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0020cd6:	31 db                	xor    ebx,ebx
c0020cd8:	99                   	cdq    
c0020cd9:	01 c3                	add    ebx,eax
c0020cdb:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0020ce2:	01 c6                	add    esi,eax
c0020ce4:	11 d7                	adc    edi,edx
c0020ce6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020cea:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020cee:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0020cf1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0020cf5:	29 c6                	sub    esi,eax
c0020cf7:	19 d7                	sbb    edi,edx
c0020cf9:	89 34 24             	mov    DWORD PTR [esp],esi
c0020cfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0020d00:	b8 ff 07 00 00       	mov    eax,0x7ff
c0020d05:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0020d08:	b8 00 00 00 00       	mov    eax,0x0
c0020d0d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020d11:	7d 3e                	jge    c0020d51 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0020d13:	52                   	push   edx
c0020d14:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020d18:	50                   	push   eax
c0020d19:	53                   	push   ebx
c0020d1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020d1e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020d22:	0f ac d0 0b          	shrd   eax,edx,0xb
c0020d26:	50                   	push   eax
c0020d27:	e8 d9 fd ff ff       	call   c0020b05 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020d2c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0020d34:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0020d39:	81 c3 00 08 00 00    	add    ebx,0x800
c0020d3f:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0020d47:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0020d4c:	83 c4 10             	add    esp,0x10
c0020d4f:	eb af                	jmp    c0020d00 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0020d51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020d55:	0b 04 24             	or     eax,DWORD PTR [esp]
c0020d58:	74 32                	je     c0020d8c <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0020d5a:	50                   	push   eax
c0020d5b:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0020d5f:	50                   	push   eax
c0020d60:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020d64:	50                   	push   eax
c0020d65:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0020d69:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0020d6d:	0f ac fe 0b          	shrd   esi,edi,0xb
c0020d71:	56                   	push   esi
c0020d72:	e8 8e fd ff ff       	call   c0020b05 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020d77:	83 c4 0c             	add    esp,0xc
c0020d7a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0020d7e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0020d82:	50                   	push   eax
c0020d83:	53                   	push   ebx
c0020d84:	e8 17 f9 fd ff       	call   c00006a0 <memcpy>
c0020d89:	83 c4 10             	add    esp,0x10
c0020d8c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020d93:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020d97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020d9b:	89 38                	mov    DWORD PTR [eax],edi
c0020d9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020da1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0020da4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0020da7:	31 c0                	xor    eax,eax
c0020da9:	eb 05                	jmp    c0020db0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0020dab:	b8 04 00 00 00       	mov    eax,0x4
c0020db0:	81 c4 2c 08 00 00    	add    esp,0x82c
c0020db6:	5b                   	pop    ebx
c0020db7:	5e                   	pop    esi
c0020db8:	5f                   	pop    edi
c0020db9:	5d                   	pop    ebp
c0020dba:	c3                   	ret    
c0020dbb:	90                   	nop

c0020dbc <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0020dbc:	55                   	push   ebp
c0020dbd:	57                   	push   edi
c0020dbe:	56                   	push   esi
c0020dbf:	53                   	push   ebx
c0020dc0:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0020dc6:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0020dcd:	85 f6                	test   esi,esi
c0020dcf:	0f 84 64 02 00 00    	je     c0021039 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020dd5:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0020ddd:	0f 84 56 02 00 00    	je     c0021039 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020de3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0020de6:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0020de9:	75 0a                	jne    c0020df5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0020deb:	b8 07 00 00 00       	mov    eax,0x7
c0020df0:	e9 49 02 00 00       	jmp    c002103e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020df5:	50                   	push   eax
c0020df6:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020dfa:	50                   	push   eax
c0020dfb:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020e02:	53                   	push   ebx
c0020e03:	8b 06                	mov    eax,DWORD PTR [esi]
c0020e05:	c1 e0 0b             	shl    eax,0xb
c0020e08:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0020e0b:	c1 e8 0b             	shr    eax,0xb
c0020e0e:	50                   	push   eax
c0020e0f:	e8 f1 fc ff ff       	call   c0020b05 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020e14:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020e17:	83 c4 10             	add    esp,0x10
c0020e1a:	89 c1                	mov    ecx,eax
c0020e1c:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0020e1f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020e25:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020e28:	84 db                	test   bl,bl
c0020e2a:	0f 85 90 00 00 00    	jne    c0020ec0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0020e30:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020e36:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020e3c:	29 c7                	sub    edi,eax
c0020e3e:	89 fb                	mov    ebx,edi
c0020e40:	c1 fb 1f             	sar    ebx,0x1f
c0020e43:	01 f8                	add    eax,edi
c0020e45:	11 da                	adc    edx,ebx
c0020e47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020e4f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020e52:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020e55:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020e58:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020e5b:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e5e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020e62:	89 d8                	mov    eax,ebx
c0020e64:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020e67:	ba 00 00 00 00       	mov    edx,0x0
c0020e6c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020e70:	b8 00 00 00 00       	mov    eax,0x0
c0020e75:	73 0b                	jae    c0020e82 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020e77:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020e7a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020e7e:	29 f8                	sub    eax,edi
c0020e80:	19 da                	sbb    edx,ebx
c0020e82:	89 d3                	mov    ebx,edx
c0020e84:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020e87:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020e8a:	09 c3                	or     ebx,eax
c0020e8c:	0f 84 59 ff ff ff    	je     c0020deb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0020e92:	55                   	push   ebp
c0020e93:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020e97:	50                   	push   eax
c0020e98:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020e9f:	53                   	push   ebx
c0020ea0:	8b 06                	mov    eax,DWORD PTR [esi]
c0020ea2:	c1 e0 0b             	shl    eax,0xb
c0020ea5:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020ea9:	c1 e8 0b             	shr    eax,0xb
c0020eac:	50                   	push   eax
c0020ead:	e8 53 fc ff ff       	call   c0020b05 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020eb2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020eb5:	83 c4 10             	add    esp,0x10
c0020eb8:	25 ff 07 00 00       	and    eax,0x7ff
c0020ebd:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0020ec0:	57                   	push   edi
c0020ec1:	6a 28                	push   0x28
c0020ec3:	6a 00                	push   0x0
c0020ec5:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020ec9:	50                   	push   eax
c0020eca:	e8 f5 f7 fd ff       	call   c00006c4 <memset>
c0020ecf:	31 d2                	xor    edx,edx
c0020ed1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0020ed4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020eda:	89 f8                	mov    eax,edi
c0020edc:	83 c0 21             	add    eax,0x21
c0020edf:	83 d2 00             	adc    edx,0x0
c0020ee2:	89 c7                	mov    edi,eax
c0020ee4:	89 d5                	mov    ebp,edx
c0020ee6:	83 c4 10             	add    esp,0x10
c0020ee9:	31 c9                	xor    ecx,ecx
c0020eeb:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020ef2:	83 f9 28             	cmp    ecx,0x28
c0020ef5:	88 04 24             	mov    BYTE PTR [esp],al
c0020ef8:	0f 94 c2             	sete   dl
c0020efb:	88 d0                	mov    al,dl
c0020efd:	ba ff 07 00 00       	mov    edx,0x7ff
c0020f02:	39 fa                	cmp    edx,edi
c0020f04:	ba 00 00 00 00       	mov    edx,0x0
c0020f09:	19 ea                	sbb    edx,ebp
c0020f0b:	0f 92 c2             	setb   dl
c0020f0e:	09 c2                	or     edx,eax
c0020f10:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020f14:	0f 94 c0             	sete   al
c0020f17:	08 d0                	or     al,dl
c0020f19:	75 16                	jne    c0020f31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020f1b:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020f1f:	74 10                	je     c0020f31 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020f21:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020f24:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020f28:	41                   	inc    ecx
c0020f29:	83 c7 01             	add    edi,0x1
c0020f2c:	83 d5 00             	adc    ebp,0x0
c0020f2f:	eb ba                	jmp    c0020eeb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0020f31:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0020f38:	83 ec 0c             	sub    esp,0xc
c0020f3b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020f3f:	57                   	push   edi
c0020f40:	e8 9c f7 fd ff       	call   c00006e1 <strlen>
c0020f45:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0020f4d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020f51:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0020f58:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020f5b:	5a                   	pop    edx
c0020f5c:	25 ff 07 00 00       	and    eax,0x7ff
c0020f61:	01 c8                	add    eax,ecx
c0020f63:	59                   	pop    ecx
c0020f64:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0020f6a:	83 e0 02             	and    eax,0x2
c0020f6d:	3c 01                	cmp    al,0x1
c0020f6f:	19 c0                	sbb    eax,eax
c0020f71:	83 c0 02             	add    eax,0x2
c0020f74:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020f78:	57                   	push   edi
c0020f79:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020f7d:	50                   	push   eax
c0020f7e:	e8 e0 f7 fd ff       	call   c0000763 <strcpy>
c0020f83:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0020f87:	83 c4 10             	add    esp,0x10
c0020f8a:	84 c0                	test   al,al
c0020f8c:	75 21                	jne    c0020faf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020f8e:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0020f96:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020f9e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020fa6:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020fad:	eb 28                	jmp    c0020fd7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020faf:	fe c8                	dec    al
c0020fb1:	75 24                	jne    c0020fd7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020fb3:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0020fbb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020fc3:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020fcb:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0020fd2:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0020fd7:	0f b6 fb             	movzx  edi,bl
c0020fda:	31 db                	xor    ebx,ebx
c0020fdc:	50                   	push   eax
c0020fdd:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0020fe4:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020fe8:	50                   	push   eax
c0020fe9:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0020ff0:	e8 ab f6 fd ff       	call   c00006a0 <memcpy>
c0020ff5:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0020ffc:	89 f9                	mov    ecx,edi
c0020ffe:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021004:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021007:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c002100a:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c002100d:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021010:	83 c4 10             	add    esp,0x10
c0021013:	39 c7                	cmp    edi,eax
c0021015:	89 df                	mov    edi,ebx
c0021017:	19 d7                	sbb    edi,edx
c0021019:	72 10                	jb     c002102b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c002101b:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021022:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021029:	eb 0a                	jmp    c0021035 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c002102b:	29 c8                	sub    eax,ecx
c002102d:	19 da                	sbb    edx,ebx
c002102f:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021032:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021035:	31 c0                	xor    eax,eax
c0021037:	eb 05                	jmp    c002103e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021039:	b8 04 00 00 00       	mov    eax,0x4
c002103e:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021044:	5b                   	pop    ebx
c0021045:	5e                   	pop    esi
c0021046:	5f                   	pop    edi
c0021047:	5d                   	pop    ebp
c0021048:	c3                   	ret    

c0021049 <readRoot(unsigned int*, unsigned int*, char)>:
c0021049:	81 ec 40 08 00 00    	sub    esp,0x840
c002104f:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021057:	50                   	push   eax
c0021058:	8d 44 24 38          	lea    eax,[esp+0x38]
c002105c:	50                   	push   eax
c002105d:	6a 10                	push   0x10
c002105f:	e8 a1 fa ff ff       	call   c0020b05 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021064:	83 c4 0c             	add    esp,0xc
c0021067:	6a 22                	push   0x22
c0021069:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021070:	50                   	push   eax
c0021071:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021075:	50                   	push   eax
c0021076:	e8 25 f6 fd ff       	call   c00006a0 <memcpy>
c002107b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021082:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021086:	89 10                	mov    DWORD PTR [eax],edx
c0021088:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002108f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021093:	89 10                	mov    DWORD PTR [eax],edx
c0021095:	b0 01                	mov    al,0x1
c0021097:	81 c4 4c 08 00 00    	add    esp,0x84c
c002109d:	c3                   	ret    

c002109e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c002109e:	55                   	push   ebp
c002109f:	57                   	push   edi
c00210a0:	56                   	push   esi
c00210a1:	53                   	push   ebx
c00210a2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00210a8:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00210af:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00210b6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00210ba:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00210be:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00210c2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00210c6:	75 03                	jne    c00210cb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00210c8:	83 c3 02             	add    ebx,0x2
c00210cb:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00210ce:	75 03                	jne    c00210d3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00210d0:	43                   	inc    ebx
c00210d1:	eb f8                	jmp    c00210cb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00210d3:	51                   	push   ecx
c00210d4:	68 00 01 00 00       	push   0x100
c00210d9:	6a 00                	push   0x0
c00210db:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00210df:	50                   	push   eax
c00210e0:	e8 df f5 fd ff       	call   c00006c4 <memset>
c00210e5:	83 c4 10             	add    esp,0x10
c00210e8:	31 d2                	xor    edx,edx
c00210ea:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00210ed:	84 c0                	test   al,al
c00210ef:	74 21                	je     c0021112 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00210f1:	3c 2f                	cmp    al,0x2f
c00210f3:	75 0b                	jne    c0021100 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00210f5:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00210f9:	bd 01 00 00 00       	mov    ebp,0x1
c00210fe:	eb 14                	jmp    c0021114 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021100:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021103:	80 f9 19             	cmp    cl,0x19
c0021106:	77 03                	ja     c002110b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021108:	83 e8 20             	sub    eax,0x20
c002110b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c002110f:	42                   	inc    edx
c0021110:	eb d8                	jmp    c00210ea <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021112:	31 ed                	xor    ebp,ebp
c0021114:	83 ec 0c             	sub    esp,0xc
c0021117:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002111e:	e8 01 e5 fe ff       	call   c000f624 <malloc>
c0021123:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c002112a:	89 c6                	mov    esi,eax
c002112c:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021132:	c1 ef 0b             	shr    edi,0xb
c0021135:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002113c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021140:	83 c4 10             	add    esp,0x10
c0021143:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021148:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002114c:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021153:	74 28                	je     c002117d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021155:	52                   	push   edx
c0021156:	57                   	push   edi
c0021157:	50                   	push   eax
c0021158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002115c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021163:	e8 9d f9 ff ff       	call   c0020b05 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021168:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002116c:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021173:	05 00 08 00 00       	add    eax,0x800
c0021178:	83 c4 10             	add    esp,0x10
c002117b:	eb cb                	jmp    c0021148 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002117d:	83 ec 0c             	sub    esp,0xc
c0021180:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021184:	57                   	push   edi
c0021185:	e8 57 f5 fd ff       	call   c00006e1 <strlen>
c002118a:	50                   	push   eax
c002118b:	57                   	push   edi
c002118c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021193:	56                   	push   esi
c0021194:	e8 2a f9 ff ff       	call   c0020ac3 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021199:	83 c4 20             	add    esp,0x20
c002119c:	85 c0                	test   eax,eax
c002119e:	75 13                	jne    c00211b3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00211a0:	83 ec 0c             	sub    esp,0xc
c00211a3:	56                   	push   esi
c00211a4:	e8 8b e4 fe ff       	call   c000f634 <free>
c00211a9:	83 c4 10             	add    esp,0x10
c00211ac:	31 c0                	xor    eax,eax
c00211ae:	e9 b3 00 00 00       	jmp    c0021266 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00211b3:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00211b7:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00211bb:	c1 e7 08             	shl    edi,0x8
c00211be:	c1 e2 10             	shl    edx,0x10
c00211c1:	09 d7                	or     edi,edx
c00211c3:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00211c7:	09 d7                	or     edi,edx
c00211c9:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00211cd:	c1 e2 18             	shl    edx,0x18
c00211d0:	09 d7                	or     edi,edx
c00211d2:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00211d6:	89 d1                	mov    ecx,edx
c00211d8:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00211dc:	c1 e1 08             	shl    ecx,0x8
c00211df:	c1 e2 10             	shl    edx,0x10
c00211e2:	09 ca                	or     edx,ecx
c00211e4:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00211e8:	09 ca                	or     edx,ecx
c00211ea:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00211ee:	c1 e1 18             	shl    ecx,0x18
c00211f1:	09 ca                	or     edx,ecx
c00211f3:	89 e9                	mov    ecx,ebp
c00211f5:	84 c9                	test   cl,cl
c00211f7:	74 3c                	je     c0021235 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00211f9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00211fd:	83 ec 0c             	sub    esp,0xc
c0021200:	56                   	push   esi
c0021201:	e8 2e e4 fe ff       	call   c000f634 <free>
c0021206:	83 c4 0c             	add    esp,0xc
c0021209:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021210:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021215:	50                   	push   eax
c0021216:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002121d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021224:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021228:	52                   	push   edx
c0021229:	57                   	push   edi
c002122a:	53                   	push   ebx
c002122b:	e8 6e fe ff ff       	call   c002109e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021230:	83 c4 20             	add    esp,0x20
c0021233:	eb 31                	jmp    c0021266 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021235:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021238:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002123f:	d0 e8                	shr    al,1
c0021241:	89 3b                	mov    DWORD PTR [ebx],edi
c0021243:	83 e0 01             	and    eax,0x1
c0021246:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002124d:	83 ec 0c             	sub    esp,0xc
c0021250:	89 13                	mov    DWORD PTR [ebx],edx
c0021252:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021259:	89 03                	mov    DWORD PTR [ebx],eax
c002125b:	56                   	push   esi
c002125c:	e8 d3 e3 fe ff       	call   c000f634 <free>
c0021261:	83 c4 10             	add    esp,0x10
c0021264:	b0 01                	mov    al,0x1
c0021266:	81 c4 1c 01 00 00    	add    esp,0x11c
c002126c:	5b                   	pop    ebx
c002126d:	5e                   	pop    esi
c002126e:	5f                   	pop    edi
c002126f:	5d                   	pop    ebp
c0021270:	c3                   	ret    

c0021271 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021271:	55                   	push   ebp
c0021272:	57                   	push   edi
c0021273:	56                   	push   esi
c0021274:	53                   	push   ebx
c0021275:	83 ec 20             	sub    esp,0x20
c0021278:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002127c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021280:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021284:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002128c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021294:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021299:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c002129f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00212a5:	57                   	push   edi
c00212a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212aa:	50                   	push   eax
c00212ab:	8d 44 24 14          	lea    eax,[esp+0x14]
c00212af:	50                   	push   eax
c00212b0:	e8 94 fd ff ff       	call   c0021049 <readRoot(unsigned int*, unsigned int*, char)>
c00212b5:	5a                   	pop    edx
c00212b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00212ba:	e8 22 f4 fd ff       	call   c00006e1 <strlen>
c00212bf:	83 c4 10             	add    esp,0x10
c00212c2:	83 f8 03             	cmp    eax,0x3
c00212c5:	77 17                	ja     c00212de <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00212c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00212cb:	89 03                	mov    DWORD PTR [ebx],eax
c00212cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212d1:	89 06                	mov    DWORD PTR [esi],eax
c00212d3:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00212da:	b0 01                	mov    al,0x1
c00212dc:	eb 19                	jmp    c00212f7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00212de:	50                   	push   eax
c00212df:	55                   	push   ebp
c00212e0:	57                   	push   edi
c00212e1:	56                   	push   esi
c00212e2:	53                   	push   ebx
c00212e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00212e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00212eb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00212ef:	e8 aa fd ff ff       	call   c002109e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00212f4:	83 c4 20             	add    esp,0x20
c00212f7:	83 c4 1c             	add    esp,0x1c
c00212fa:	5b                   	pop    ebx
c00212fb:	5e                   	pop    esi
c00212fc:	5f                   	pop    edi
c00212fd:	5d                   	pop    ebp
c00212fe:	c3                   	ret    
c00212ff:	90                   	nop

c0021300 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021300:	57                   	push   edi
c0021301:	56                   	push   esi
c0021302:	53                   	push   ebx
c0021303:	83 ec 10             	sub    esp,0x10
c0021306:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002130a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002130e:	85 ff                	test   edi,edi
c0021310:	0f 84 9d 00 00 00    	je     c00213b3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021316:	85 f6                	test   esi,esi
c0021318:	0f 84 95 00 00 00    	je     c00213b3 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002131e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021323:	74 17                	je     c002133c <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021325:	83 ec 0c             	sub    esp,0xc
c0021328:	68 37 b4 02 c0       	push   0xc002b437
c002132d:	e8 a3 15 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0021332:	83 c4 10             	add    esp,0x10
c0021335:	b8 03 00 00 00       	mov    eax,0x3
c002133a:	eb 7c                	jmp    c00213b8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002133c:	83 ec 0c             	sub    esp,0xc
c002133f:	6a 1c                	push   0x1c
c0021341:	e8 de e2 fe ff       	call   c000f624 <malloc>
c0021346:	89 07                	mov    DWORD PTR [edi],eax
c0021348:	89 c3                	mov    ebx,eax
c002134a:	58                   	pop    eax
c002134b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002134f:	50                   	push   eax
c0021350:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021353:	50                   	push   eax
c0021354:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021358:	50                   	push   eax
c0021359:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002135d:	50                   	push   eax
c002135e:	56                   	push   esi
c002135f:	e8 0d ff ff ff       	call   c0021271 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021364:	83 c4 20             	add    esp,0x20
c0021367:	84 c0                	test   al,al
c0021369:	74 07                	je     c0021372 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002136b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021370:	74 0b                	je     c002137d <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021372:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021376:	b8 01 00 00 00       	mov    eax,0x1
c002137b:	eb 3b                	jmp    c00213b8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002137d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021381:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021385:	89 03                	mov    DWORD PTR [ebx],eax
c0021387:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002138e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021392:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021399:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00213a0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00213a3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00213aa:	8a 06                	mov    al,BYTE PTR [esi]
c00213ac:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00213af:	31 c0                	xor    eax,eax
c00213b1:	eb 05                	jmp    c00213b8 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00213b3:	b8 04 00 00 00       	mov    eax,0x4
c00213b8:	83 c4 10             	add    esp,0x10
c00213bb:	5b                   	pop    ebx
c00213bc:	5e                   	pop    esi
c00213bd:	5f                   	pop    edi
c00213be:	c3                   	ret    
c00213bf:	90                   	nop

c00213c0 <ISO9660::exists(char const*)>:
c00213c0:	83 ec 28             	sub    esp,0x28
c00213c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00213c7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00213cb:	52                   	push   edx
c00213cc:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00213cf:	52                   	push   edx
c00213d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00213d4:	52                   	push   edx
c00213d5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00213d9:	52                   	push   edx
c00213da:	50                   	push   eax
c00213db:	e8 91 fe ff ff       	call   c0021271 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00213e0:	83 c4 3c             	add    esp,0x3c
c00213e3:	c3                   	ret    

c00213e4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00213e4:	56                   	push   esi
c00213e5:	53                   	push   ebx
c00213e6:	83 ec 14             	sub    esp,0x14
c00213e9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00213ed:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00213f1:	85 db                	test   ebx,ebx
c00213f3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00213f7:	0f 94 c2             	sete   dl
c00213fa:	85 f6                	test   esi,esi
c00213fc:	0f 94 c0             	sete   al
c00213ff:	08 c2                	or     dl,al
c0021401:	75 68                	jne    c002146b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021403:	85 c9                	test   ecx,ecx
c0021405:	74 64                	je     c002146b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021407:	83 ec 0c             	sub    esp,0xc
c002140a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002140d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021411:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021417:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002141e:	50                   	push   eax
c002141f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021422:	50                   	push   eax
c0021423:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021427:	50                   	push   eax
c0021428:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002142c:	50                   	push   eax
c002142d:	51                   	push   ecx
c002142e:	e8 3e fe ff ff       	call   c0021271 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021433:	83 c4 20             	add    esp,0x20
c0021436:	ba 01 00 00 00       	mov    edx,0x1
c002143b:	84 c0                	test   al,al
c002143d:	74 31                	je     c0021470 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002143f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021443:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002144a:	89 03                	mov    DWORD PTR [ebx],eax
c002144c:	ba 00 00 00 00       	mov    edx,0x0
c0021451:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021455:	85 c0                	test   eax,eax
c0021457:	0f 95 06             	setne  BYTE PTR [esi]
c002145a:	74 14                	je     c0021470 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002145c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021462:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021469:	eb 05                	jmp    c0021470 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002146b:	ba 04 00 00 00       	mov    edx,0x4
c0021470:	83 c4 14             	add    esp,0x14
c0021473:	89 d0                	mov    eax,edx
c0021475:	5b                   	pop    ebx
c0021476:	5e                   	pop    esi
c0021477:	c3                   	ret    

c0021478 <ISO9660::openDir(char const*, void**)>:
c0021478:	57                   	push   edi
c0021479:	56                   	push   esi
c002147a:	53                   	push   ebx
c002147b:	83 ec 10             	sub    esp,0x10
c002147e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021482:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021486:	85 ff                	test   edi,edi
c0021488:	0f 84 95 00 00 00    	je     c0021523 <ISO9660::openDir(char const*, void**)+0xab>
c002148e:	85 f6                	test   esi,esi
c0021490:	0f 84 8d 00 00 00    	je     c0021523 <ISO9660::openDir(char const*, void**)+0xab>
c0021496:	83 ec 0c             	sub    esp,0xc
c0021499:	6a 1c                	push   0x1c
c002149b:	e8 84 e1 fe ff       	call   c000f624 <malloc>
c00214a0:	89 07                	mov    DWORD PTR [edi],eax
c00214a2:	89 c3                	mov    ebx,eax
c00214a4:	59                   	pop    ecx
c00214a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214a9:	50                   	push   eax
c00214aa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00214ad:	50                   	push   eax
c00214ae:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00214b2:	50                   	push   eax
c00214b3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00214b7:	50                   	push   eax
c00214b8:	56                   	push   esi
c00214b9:	e8 b3 fd ff ff       	call   c0021271 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00214be:	83 c4 20             	add    esp,0x20
c00214c1:	84 c0                	test   al,al
c00214c3:	74 07                	je     c00214cc <ISO9660::openDir(char const*, void**)+0x54>
c00214c5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00214ca:	75 21                	jne    c00214ed <ISO9660::openDir(char const*, void**)+0x75>
c00214cc:	0f b6 c0             	movzx  eax,al
c00214cf:	52                   	push   edx
c00214d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00214d4:	50                   	push   eax
c00214d5:	68 5d b4 02 c0       	push   0xc002b45d
c00214da:	e8 f6 13 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00214df:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00214e3:	83 c4 10             	add    esp,0x10
c00214e6:	b8 01 00 00 00       	mov    eax,0x1
c00214eb:	eb 3b                	jmp    c0021528 <ISO9660::openDir(char const*, void**)+0xb0>
c00214ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214f1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00214f5:	89 03                	mov    DWORD PTR [ebx],eax
c00214f7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00214fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021502:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021509:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021510:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021513:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002151a:	8a 06                	mov    al,BYTE PTR [esi]
c002151c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002151f:	31 c0                	xor    eax,eax
c0021521:	eb 05                	jmp    c0021528 <ISO9660::openDir(char const*, void**)+0xb0>
c0021523:	b8 04 00 00 00       	mov    eax,0x4
c0021528:	83 c4 10             	add    esp,0x10
c002152b:	5b                   	pop    ebx
c002152c:	5e                   	pop    esi
c002152d:	5f                   	pop    edi
c002152e:	c3                   	ret    
c002152f:	90                   	nop

c0021530 <ISO9660::ISO9660()>:
c0021530:	83 ec 0c             	sub    esp,0xc
c0021533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021537:	83 ec 0c             	sub    esp,0xc
c002153a:	50                   	push   eax
c002153b:	e8 9a 16 ff ff       	call   c0012bda <Filesystem::Filesystem()>
c0021540:	83 c4 10             	add    esp,0x10
c0021543:	ba 80 b4 02 c0       	mov    edx,0xc002b480
c0021548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002154c:	89 10                	mov    DWORD PTR [eax],edx
c002154e:	90                   	nop
c002154f:	83 c4 0c             	add    esp,0xc
c0021552:	c3                   	ret    
c0021553:	90                   	nop

c0021554 <SoundChannel::~SoundChannel()>:
c0021554:	83 ec 0c             	sub    esp,0xc
c0021557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002155b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002155e:	83 ec 0c             	sub    esp,0xc
c0021561:	50                   	push   eax
c0021562:	e8 cd e0 fe ff       	call   c000f634 <free>
c0021567:	83 c4 10             	add    esp,0x10
c002156a:	90                   	nop
c002156b:	83 c4 0c             	add    esp,0xc
c002156e:	c3                   	ret    
c002156f:	90                   	nop

c0021570 <SoundChannel::setSpeed(float)>:
c0021570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021574:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021578:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002157b:	c3                   	ret    

c002157c <SoundChannel::getSpeed()>:
c002157c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021580:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021583:	c3                   	ret    

c0021584 <SoundChannel::setVolume(int)>:
c0021584:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021588:	83 f8 64             	cmp    eax,0x64
c002158b:	7e 05                	jle    c0021592 <SoundChannel::setVolume(int)+0xe>
c002158d:	b8 64 00 00 00       	mov    eax,0x64
c0021592:	85 c0                	test   eax,eax
c0021594:	79 02                	jns    c0021598 <SoundChannel::setVolume(int)+0x14>
c0021596:	31 c0                	xor    eax,eax
c0021598:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002159c:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c002159f:	c3                   	ret    

c00215a0 <SoundChannel::getVolume()>:
c00215a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215a4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00215a7:	c3                   	ret    

c00215a8 <SoundChannel::pause()>:
c00215a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00215ac:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00215b0:	c3                   	ret    
c00215b1:	90                   	nop

c00215b2 <SoundChannel::SoundChannel(int, int, int, int)>:
c00215b2:	83 ec 1c             	sub    esp,0x1c
c00215b5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00215b9:	e8 ea ff ff ff       	call   c00215a8 <SoundChannel::pause()>
c00215be:	83 c4 04             	add    esp,0x4
c00215c1:	6a 50                	push   0x50
c00215c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00215c7:	e8 b8 ff ff ff       	call   c0021584 <SoundChannel::setVolume(int)>
c00215cc:	83 c4 08             	add    esp,0x8
c00215cf:	a1 f8 b4 02 c0       	mov    eax,ds:0xc002b4f8
c00215d4:	50                   	push   eax
c00215d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00215d9:	e8 92 ff ff ff       	call   c0021570 <SoundChannel::setSpeed(float)>
c00215de:	83 c4 08             	add    esp,0x8
c00215e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00215e5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00215e9:	89 10                	mov    DWORD PTR [eax],edx
c00215eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00215ef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00215f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00215f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00215fa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00215fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021601:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021606:	75 23                	jne    c002162b <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0021608:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002160c:	8b 10                	mov    edx,DWORD PTR [eax]
c002160e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021612:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021615:	0f af c2             	imul   eax,edx
c0021618:	85 c0                	test   eax,eax
c002161a:	79 03                	jns    c002161f <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002161c:	83 c0 03             	add    eax,0x3
c002161f:	c1 f8 02             	sar    eax,0x2
c0021622:	05 a0 0f 00 00       	add    eax,0xfa0
c0021627:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002162b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002162f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021633:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002163a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021641:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021645:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002164c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021650:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021653:	c1 e0 02             	shl    eax,0x2
c0021656:	83 ec 0c             	sub    esp,0xc
c0021659:	50                   	push   eax
c002165a:	e8 c5 df fe ff       	call   c000f624 <malloc>
c002165f:	83 c4 10             	add    esp,0x10
c0021662:	89 c2                	mov    edx,eax
c0021664:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021668:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002166b:	83 ec 04             	sub    esp,0x4
c002166e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021672:	50                   	push   eax
c0021673:	6a 01                	push   0x1
c0021675:	6a 04                	push   0x4
c0021677:	e8 0c 73 fe ff       	call   c0008988 <src_new>
c002167c:	83 c4 10             	add    esp,0x10
c002167f:	89 c2                	mov    edx,eax
c0021681:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021685:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021688:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002168c:	85 c0                	test   eax,eax
c002168e:	74 10                	je     c00216a0 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021690:	83 ec 0c             	sub    esp,0xc
c0021693:	68 dc b4 02 c0       	push   0xc002b4dc
c0021698:	e8 18 85 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c002169d:	83 c4 10             	add    esp,0x10
c00216a0:	a0 40 f2 02 c0       	mov    al,ds:0xc002f240
c00216a5:	83 f0 01             	xor    eax,0x1
c00216a8:	84 c0                	test   al,al
c00216aa:	74 57                	je     c0021703 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00216ac:	a1 fc b4 02 c0       	mov    eax,ds:0xc002b4fc
c00216b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00216b5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00216bd:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00216c5:	7f 35                	jg     c00216fc <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00216c7:	83 ec 0c             	sub    esp,0xc
c00216ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00216ce:	e8 24 4a 00 00       	call   c00260f7 <__floatsisf>
c00216d3:	83 c4 10             	add    esp,0x10
c00216d6:	8b 15 fc b4 02 c0    	mov    edx,DWORD PTR ds:0xc002b4fc
c00216dc:	83 ec 08             	sub    esp,0x8
c00216df:	52                   	push   edx
c00216e0:	50                   	push   eax
c00216e1:	e8 23 46 00 00       	call   c0025d09 <__mulsf3>
c00216e6:	83 c4 10             	add    esp,0x10
c00216e9:	89 c2                	mov    edx,eax
c00216eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216ef:	89 14 85 40 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd11c0],edx
c00216f6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00216fa:	eb c1                	jmp    c00216bd <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c00216fc:	c6 05 40 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f240,0x1
c0021703:	90                   	nop
c0021704:	83 c4 1c             	add    esp,0x1c
c0021707:	c3                   	ret    

c0021708 <SoundChannel::play()>:
c0021708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002170c:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021710:	c3                   	ret    
c0021711:	90                   	nop

c0021712 <SoundChannel::paused()>:
c0021712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021716:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021719:	c3                   	ret    

c002171a <SoundChannel::getSampleRate()>:
c002171a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002171e:	8b 00                	mov    eax,DWORD PTR [eax]
c0021720:	c3                   	ret    
c0021721:	90                   	nop

c0021722 <SoundChannel::getBits()>:
c0021722:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021726:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021729:	c3                   	ret    

c002172a <SoundChannel::getBufferUsed()>:
c002172a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002172e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021731:	c3                   	ret    

c0021732 <SoundChannel::getBufferSize()>:
c0021732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021739:	c3                   	ret    

c002173a <SoundChannel::unbuffer(float*, int, int)>:
c002173a:	56                   	push   esi
c002173b:	53                   	push   ebx
c002173c:	83 ec 40             	sub    esp,0x40
c002173f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021743:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021746:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002174a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002174d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021751:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021755:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021759:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002175d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021761:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021765:	e8 8d 49 00 00       	call   c00260f7 <__floatsisf>
c002176a:	5a                   	pop    edx
c002176b:	89 c6                	mov    esi,eax
c002176d:	ff 33                	push   DWORD PTR [ebx]
c002176f:	e8 83 49 00 00       	call   c00260f7 <__floatsisf>
c0021774:	59                   	pop    ecx
c0021775:	5a                   	pop    edx
c0021776:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0021779:	50                   	push   eax
c002177a:	e8 8a 45 00 00       	call   c0025d09 <__mulsf3>
c002177f:	59                   	pop    ecx
c0021780:	5a                   	pop    edx
c0021781:	50                   	push   eax
c0021782:	56                   	push   esi
c0021783:	e8 44 47 00 00       	call   c0025ecc <__divsf3>
c0021788:	89 04 24             	mov    DWORD PTR [esp],eax
c002178b:	e8 37 5c 00 00       	call   c00273c7 <__extendsfdf2>
c0021790:	59                   	pop    ecx
c0021791:	5e                   	pop    esi
c0021792:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021796:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002179a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00217a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00217a6:	50                   	push   eax
c00217a7:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00217aa:	e8 ce 6d fe ff       	call   c000857d <src_process>
c00217af:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00217b3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00217b6:	83 c4 0c             	add    esp,0xc
c00217b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00217bc:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00217bf:	29 d0                	sub    eax,edx
c00217c1:	c1 e0 02             	shl    eax,0x2
c00217c4:	50                   	push   eax
c00217c5:	8d 04 91             	lea    eax,[ecx+edx*4]
c00217c8:	50                   	push   eax
c00217c9:	51                   	push   ecx
c00217ca:	e8 99 ee fd ff       	call   c0000668 <memmove>
c00217cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00217d3:	83 c4 44             	add    esp,0x44
c00217d6:	5b                   	pop    ebx
c00217d7:	5e                   	pop    esi
c00217d8:	c3                   	ret    
c00217d9:	90                   	nop

c00217da <SoundChannel::buffer8(unsigned char*, int)>:
c00217da:	55                   	push   ebp
c00217db:	57                   	push   edi
c00217dc:	56                   	push   esi
c00217dd:	53                   	push   ebx
c00217de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217e2:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00217e6:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00217e9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00217ed:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00217f0:	74 7a                	je     c002186c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00217f2:	85 ff                	test   edi,edi
c00217f4:	7e 76                	jle    c002186c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00217f6:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00217fa:	8d 70 01             	lea    esi,[eax+0x1]
c00217fd:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021800:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021803:	8b 1c 9d 40 ee 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd11c0]
c002180a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002180d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021810:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021813:	74 5e                	je     c0021873 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021815:	83 ff 01             	cmp    edi,0x1
c0021818:	74 4b                	je     c0021865 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002181a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002181e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021821:	8d 70 01             	lea    esi,[eax+0x1]
c0021824:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021827:	8b 1c 9d 40 ee 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd11c0]
c002182e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021831:	b8 02 00 00 00       	mov    eax,0x2
c0021836:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021839:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002183c:	75 23                	jne    c0021861 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002183e:	eb 27                	jmp    c0021867 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021840:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021845:	8d 71 01             	lea    esi,[ecx+0x1]
c0021848:	40                   	inc    eax
c0021849:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002184c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002184f:	8b 1c 9d 40 ee 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd11c0]
c0021856:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021859:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002185c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002185f:	74 06                	je     c0021867 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021861:	39 c7                	cmp    edi,eax
c0021863:	75 db                	jne    c0021840 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021865:	89 f8                	mov    eax,edi
c0021867:	5b                   	pop    ebx
c0021868:	5e                   	pop    esi
c0021869:	5f                   	pop    edi
c002186a:	5d                   	pop    ebp
c002186b:	c3                   	ret    
c002186c:	5b                   	pop    ebx
c002186d:	31 c0                	xor    eax,eax
c002186f:	5e                   	pop    esi
c0021870:	5f                   	pop    edi
c0021871:	5d                   	pop    ebp
c0021872:	c3                   	ret    
c0021873:	b8 01 00 00 00       	mov    eax,0x1
c0021878:	eb ed                	jmp    c0021867 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002187a <SoundDevice::SoundDevice(char const*)>:
c002187a:	83 ec 1c             	sub    esp,0x1c
c002187d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021881:	83 ec 08             	sub    esp,0x8
c0021884:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021888:	50                   	push   eax
c0021889:	e8 5e 26 ff ff       	call   c0013eec <Device::Device(char const*)>
c002188e:	83 c4 10             	add    esp,0x10
c0021891:	ba 08 b5 02 c0       	mov    edx,0xc002b508
c0021896:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002189a:	89 10                	mov    DWORD PTR [eax],edx
c002189c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00218a0:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00218aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00218ae:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00218b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00218c0:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00218c5:	7f 19                	jg     c00218e0 <SoundDevice::SoundDevice(char const*)+0x66>
c00218c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00218cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00218cf:	83 c2 54             	add    edx,0x54
c00218d2:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00218da:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00218de:	eb e0                	jmp    c00218c0 <SoundDevice::SoundDevice(char const*)+0x46>
c00218e0:	90                   	nop
c00218e1:	83 c4 1c             	add    esp,0x1c
c00218e4:	c3                   	ret    
c00218e5:	90                   	nop

c00218e6 <SoundDevice::~SoundDevice()>:
c00218e6:	53                   	push   ebx
c00218e7:	83 ec 18             	sub    esp,0x18
c00218ea:	ba 08 b5 02 c0       	mov    edx,0xc002b508
c00218ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00218f3:	89 10                	mov    DWORD PTR [eax],edx
c00218f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00218fd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021902:	7f 46                	jg     c002194a <SoundDevice::~SoundDevice()+0x64>
c0021904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021908:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002190c:	83 c2 54             	add    edx,0x54
c002190f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021913:	85 c0                	test   eax,eax
c0021915:	74 2d                	je     c0021944 <SoundDevice::~SoundDevice()+0x5e>
c0021917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002191b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002191f:	83 c2 54             	add    edx,0x54
c0021922:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021926:	85 db                	test   ebx,ebx
c0021928:	74 1a                	je     c0021944 <SoundDevice::~SoundDevice()+0x5e>
c002192a:	83 ec 0c             	sub    esp,0xc
c002192d:	53                   	push   ebx
c002192e:	e8 21 fc ff ff       	call   c0021554 <SoundChannel::~SoundChannel()>
c0021933:	83 c4 10             	add    esp,0x10
c0021936:	83 ec 08             	sub    esp,0x8
c0021939:	6a 2c                	push   0x2c
c002193b:	53                   	push   ebx
c002193c:	e8 b4 0e ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0021941:	83 c4 10             	add    esp,0x10
c0021944:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021948:	eb b3                	jmp    c00218fd <SoundDevice::~SoundDevice()+0x17>
c002194a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002194e:	83 ec 0c             	sub    esp,0xc
c0021951:	50                   	push   eax
c0021952:	e8 77 22 ff ff       	call   c0013bce <Device::~Device()>
c0021957:	83 c4 10             	add    esp,0x10
c002195a:	90                   	nop
c002195b:	83 c4 18             	add    esp,0x18
c002195e:	5b                   	pop    ebx
c002195f:	c3                   	ret    

c0021960 <SoundDevice::~SoundDevice()>:
c0021960:	83 ec 0c             	sub    esp,0xc
c0021963:	83 ec 0c             	sub    esp,0xc
c0021966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002196a:	e8 77 ff ff ff       	call   c00218e6 <SoundDevice::~SoundDevice()>
c002196f:	83 c4 10             	add    esp,0x10
c0021972:	83 ec 08             	sub    esp,0x8
c0021975:	68 e4 01 00 00       	push   0x1e4
c002197a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002197e:	e8 72 0e ff ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0021983:	83 c4 10             	add    esp,0x10
c0021986:	83 c4 0c             	add    esp,0xc
c0021989:	c3                   	ret    

c002198a <SoundDevice::getFreeChannelNum()>:
c002198a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002198e:	31 c0                	xor    eax,eax
c0021990:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021998:	74 09                	je     c00219a3 <SoundDevice::getFreeChannelNum()+0x19>
c002199a:	40                   	inc    eax
c002199b:	83 f8 20             	cmp    eax,0x20
c002199e:	75 f0                	jne    c0021990 <SoundDevice::getFreeChannelNum()+0x6>
c00219a0:	83 c8 ff             	or     eax,0xffffffff
c00219a3:	c3                   	ret    

c00219a4 <SoundDevice::addChannel(SoundChannel*)>:
c00219a4:	56                   	push   esi
c00219a5:	53                   	push   ebx
c00219a6:	51                   	push   ecx
c00219a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00219ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00219af:	53                   	push   ebx
c00219b0:	e8 d5 ff ff ff       	call   c002198a <SoundDevice::getFreeChannelNum()>
c00219b5:	5a                   	pop    edx
c00219b6:	83 f8 ff             	cmp    eax,0xffffffff
c00219b9:	74 51                	je     c0021a0c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00219bb:	85 f6                	test   esi,esi
c00219bd:	74 4d                	je     c0021a0c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00219bf:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00219c6:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00219cd:	75 30                	jne    c00219ff <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00219cf:	83 ec 0c             	sub    esp,0xc
c00219d2:	56                   	push   esi
c00219d3:	e8 42 fd ff ff       	call   c002171a <SoundChannel::getSampleRate()>
c00219d8:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00219de:	89 34 24             	mov    DWORD PTR [esp],esi
c00219e1:	e8 3c fd ff ff       	call   c0021722 <SoundChannel::getBits()>
c00219e6:	83 c4 0c             	add    esp,0xc
c00219e9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00219ef:	8b 13                	mov    edx,DWORD PTR [ebx]
c00219f1:	50                   	push   eax
c00219f2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00219f8:	53                   	push   ebx
c00219f9:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00219fc:	83 c4 10             	add    esp,0x10
c00219ff:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021a05:	b8 01 00 00 00       	mov    eax,0x1
c0021a0a:	eb 03                	jmp    c0021a0f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021a0c:	83 c8 ff             	or     eax,0xffffffff
c0021a0f:	5a                   	pop    edx
c0021a10:	5b                   	pop    ebx
c0021a11:	5e                   	pop    esi
c0021a12:	c3                   	ret    
c0021a13:	90                   	nop

c0021a14 <SoundDevice::removeChannel(int)>:
c0021a14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021a18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a1c:	83 fa 1f             	cmp    edx,0x1f
c0021a1f:	77 23                	ja     c0021a44 <SoundDevice::removeChannel(int)+0x30>
c0021a21:	8d 14 90             	lea    edx,[eax+edx*4]
c0021a24:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021a2b:	74 17                	je     c0021a44 <SoundDevice::removeChannel(int)+0x30>
c0021a2d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021a37:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021a3d:	75 05                	jne    c0021a44 <SoundDevice::removeChannel(int)+0x30>
c0021a3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a41:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021a44:	c3                   	ret    
c0021a45:	90                   	nop

c0021a46 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0021a46:	57                   	push   edi
c0021a47:	56                   	push   esi
c0021a48:	53                   	push   ebx
c0021a49:	31 db                	xor    ebx,ebx
c0021a4b:	83 ec 10             	sub    esp,0x10
c0021a4e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021a52:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021a56:	0f 8d cb 00 00 00    	jge    c0021b27 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021a5c:	83 ec 0c             	sub    esp,0xc
c0021a5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021a63:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021a66:	e8 5c 59 00 00       	call   c00273c7 <__extendsfdf2>
c0021a6b:	83 c4 10             	add    esp,0x10
c0021a6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a76:	68 00 00 f0 3f       	push   0x3ff00000
c0021a7b:	6a 00                	push   0x0
c0021a7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a85:	e8 c9 48 00 00       	call   c0026353 <__adddf3>
c0021a8a:	83 c4 10             	add    esp,0x10
c0021a8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a95:	68 00 00 e0 3f       	push   0x3fe00000
c0021a9a:	6a 00                	push   0x0
c0021a9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021aa0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021aa4:	e8 27 4f 00 00       	call   c00269d0 <__muldf3>
c0021aa9:	83 c4 10             	add    esp,0x10
c0021aac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ab0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ab4:	68 00 00 60 40       	push   0x40600000
c0021ab9:	6a 00                	push   0x0
c0021abb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021abf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ac3:	e8 08 4f 00 00       	call   c00269d0 <__muldf3>
c0021ac8:	59                   	pop    ecx
c0021ac9:	5f                   	pop    edi
c0021aca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021ace:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021ad2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ad6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021ada:	e8 c4 57 00 00       	call   c00272a3 <__truncdfsf2>
c0021adf:	5a                   	pop    edx
c0021ae0:	89 c7                	mov    edi,eax
c0021ae2:	59                   	pop    ecx
c0021ae3:	68 00 00 fe 42       	push   0x42fe0000
c0021ae8:	50                   	push   eax
c0021ae9:	e8 5f 48 00 00       	call   c002634d <__gesf2>
c0021aee:	83 c4 10             	add    esp,0x10
c0021af1:	85 c0                	test   eax,eax
c0021af3:	78 06                	js     c0021afb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0021af5:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0021af9:	eb 26                	jmp    c0021b21 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021afb:	50                   	push   eax
c0021afc:	50                   	push   eax
c0021afd:	6a 00                	push   0x0
c0021aff:	57                   	push   edi
c0021b00:	e8 4c 48 00 00       	call   c0026351 <__lesf2>
c0021b05:	83 c4 10             	add    esp,0x10
c0021b08:	85 c0                	test   eax,eax
c0021b0a:	7f 06                	jg     c0021b12 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0021b0c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0021b10:	eb 0f                	jmp    c0021b21 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021b12:	83 ec 0c             	sub    esp,0xc
c0021b15:	57                   	push   edi
c0021b16:	e8 41 59 00 00       	call   c002745c <lrintf>
c0021b1b:	83 c4 10             	add    esp,0x10
c0021b1e:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021b21:	43                   	inc    ebx
c0021b22:	e9 2b ff ff ff       	jmp    c0021a52 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0021b27:	83 c4 10             	add    esp,0x10
c0021b2a:	5b                   	pop    ebx
c0021b2b:	5e                   	pop    esi
c0021b2c:	5f                   	pop    edi
c0021b2d:	c3                   	ret    

c0021b2e <SoundDevice::getAudio(int, float*, float*)>:
c0021b2e:	55                   	push   ebp
c0021b2f:	57                   	push   edi
c0021b30:	56                   	push   esi
c0021b31:	53                   	push   ebx
c0021b32:	31 db                	xor    ebx,ebx
c0021b34:	83 ec 20             	sub    esp,0x20
c0021b37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021b3b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021b3f:	c1 e0 02             	shl    eax,0x2
c0021b42:	50                   	push   eax
c0021b43:	6a 00                	push   0x0
c0021b45:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021b49:	e8 76 eb fd ff       	call   c00006c4 <memset>
c0021b4e:	83 c4 10             	add    esp,0x10
c0021b51:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021b55:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021b5c:	85 c0                	test   eax,eax
c0021b5e:	0f 84 d7 00 00 00    	je     c0021c3b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021b64:	83 ec 0c             	sub    esp,0xc
c0021b67:	50                   	push   eax
c0021b68:	e8 a5 fb ff ff       	call   c0021712 <SoundChannel::paused()>
c0021b6d:	83 c4 10             	add    esp,0x10
c0021b70:	84 c0                	test   al,al
c0021b72:	0f 85 c3 00 00 00    	jne    c0021c3b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021b78:	83 ec 0c             	sub    esp,0xc
c0021b7b:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021b82:	e8 19 fa ff ff       	call   c00215a0 <SoundChannel::getVolume()>
c0021b87:	83 c4 10             	add    esp,0x10
c0021b8a:	85 c0                	test   eax,eax
c0021b8c:	0f 84 a9 00 00 00    	je     c0021c3b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021b92:	83 ec 0c             	sub    esp,0xc
c0021b95:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021b9c:	e8 ff f9 ff ff       	call   c00215a0 <SoundChannel::getVolume()>
c0021ba1:	83 ec 0c             	sub    esp,0xc
c0021ba4:	50                   	push   eax
c0021ba5:	e8 4d 45 00 00       	call   c00260f7 <__floatsisf>
c0021baa:	59                   	pop    ecx
c0021bab:	5d                   	pop    ebp
c0021bac:	31 ed                	xor    ebp,ebp
c0021bae:	68 00 00 c8 42       	push   0x42c80000
c0021bb3:	50                   	push   eax
c0021bb4:	e8 13 43 00 00       	call   c0025ecc <__divsf3>
c0021bb9:	83 c4 10             	add    esp,0x10
c0021bbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021bc0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0021bc4:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0021bca:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0021bce:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0021bd5:	e8 60 fb ff ff       	call   c002173a <SoundChannel::unbuffer(float*, int, int)>
c0021bda:	83 c4 20             	add    esp,0x20
c0021bdd:	89 c1                	mov    ecx,eax
c0021bdf:	39 cd                	cmp    ebp,ecx
c0021be1:	7d 52                	jge    c0021c35 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021be3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021be7:	50                   	push   eax
c0021be8:	50                   	push   eax
c0021be9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021bed:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021bf0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021bf4:	e8 10 41 00 00       	call   c0025d09 <__mulsf3>
c0021bf9:	5a                   	pop    edx
c0021bfa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021bfe:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0021c04:	e8 ee 44 00 00       	call   c00260f7 <__floatsisf>
c0021c09:	59                   	pop    ecx
c0021c0a:	5a                   	pop    edx
c0021c0b:	50                   	push   eax
c0021c0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021c10:	e8 b7 42 00 00       	call   c0025ecc <__divsf3>
c0021c15:	59                   	pop    ecx
c0021c16:	5a                   	pop    edx
c0021c17:	50                   	push   eax
c0021c18:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021c1c:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021c1f:	e8 c2 3d 00 00       	call   c00259e6 <__addsf3>
c0021c24:	83 c4 10             	add    esp,0x10
c0021c27:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021c2b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021c2f:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0021c32:	45                   	inc    ebp
c0021c33:	eb aa                	jmp    c0021bdf <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0021c35:	39 cf                	cmp    edi,ecx
c0021c37:	7e 02                	jle    c0021c3b <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021c39:	89 cf                	mov    edi,ecx
c0021c3b:	43                   	inc    ebx
c0021c3c:	83 fb 20             	cmp    ebx,0x20
c0021c3f:	0f 85 10 ff ff ff    	jne    c0021b55 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0021c45:	83 c4 1c             	add    esp,0x1c
c0021c48:	89 f8                	mov    eax,edi
c0021c4a:	5b                   	pop    ebx
c0021c4b:	5e                   	pop    esi
c0021c4c:	5f                   	pop    edi
c0021c4d:	5d                   	pop    ebp
c0021c4e:	c3                   	ret    
c0021c4f:	90                   	nop

c0021c50 <PCI::open(int, int, void*)>:
c0021c50:	83 ec 18             	sub    esp,0x18
c0021c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021c57:	8b 10                	mov    edx,DWORD PTR [eax]
c0021c59:	50                   	push   eax
c0021c5a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021c5d:	31 c0                	xor    eax,eax
c0021c5f:	83 c4 1c             	add    esp,0x1c
c0021c62:	c3                   	ret    
c0021c63:	90                   	nop

c0021c64 <PCI::close(int, int, void*)>:
c0021c64:	31 c0                	xor    eax,eax
c0021c66:	c3                   	ret    
c0021c67:	90                   	nop

c0021c68 <PCI::PCI()>:
c0021c68:	83 ec 0c             	sub    esp,0xc
c0021c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c6f:	83 ec 08             	sub    esp,0x8
c0021c72:	68 38 b5 02 c0       	push   0xc002b538
c0021c77:	50                   	push   eax
c0021c78:	e8 f3 18 ff ff       	call   c0013570 <Bus::Bus(char const*)>
c0021c7d:	83 c4 10             	add    esp,0x10
c0021c80:	ba a4 b5 02 c0       	mov    edx,0xc002b5a4
c0021c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c89:	89 10                	mov    DWORD PTR [eax],edx
c0021c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c8f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c95:	0f b6 d0             	movzx  edx,al
c0021c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c9c:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0021ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021cad:	0f b6 d0             	movzx  edx,al
c0021cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb4:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0021cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cbd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021cc3:	8d 50 01             	lea    edx,[eax+0x1]
c0021cc6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021cca:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021cd0:	0f b6 d0             	movzx  edx,al
c0021cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cd7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021cdb:	83 c9 c0             	or     ecx,0xffffffc0
c0021cde:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021ce2:	90                   	nop
c0021ce3:	83 c4 0c             	add    esp,0xc
c0021ce6:	c3                   	ret    
c0021ce7:	90                   	nop

c0021ce8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021ce8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021cec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021cf1:	89 ca                	mov    edx,ecx
c0021cf3:	c1 e0 10             	shl    eax,0x10
c0021cf6:	81 e2 fc 00 00 00    	and    edx,0xfc
c0021cfc:	09 d0                	or     eax,edx
c0021cfe:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0021d03:	c1 e2 08             	shl    edx,0x8
c0021d06:	09 d0                	or     eax,edx
c0021d08:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0021d0d:	c1 e2 0b             	shl    edx,0xb
c0021d10:	09 d0                	or     eax,edx
c0021d12:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021d17:	0d 00 00 00 80       	or     eax,0x80000000
c0021d1c:	ef                   	out    dx,eax
c0021d1d:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021d22:	ed                   	in     eax,dx
c0021d23:	83 e1 02             	and    ecx,0x2
c0021d26:	0f b6 c9             	movzx  ecx,cl
c0021d29:	c1 e1 03             	shl    ecx,0x3
c0021d2c:	d3 e8                	shr    eax,cl
c0021d2e:	c3                   	ret    
c0021d2f:	90                   	nop

c0021d30 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0021d30:	6a 00                	push   0x0
c0021d32:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d37:	50                   	push   eax
c0021d38:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d3d:	50                   	push   eax
c0021d3e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d43:	50                   	push   eax
c0021d44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021d48:	e8 9b ff ff ff       	call   c0021ce8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d4d:	83 c4 14             	add    esp,0x14
c0021d50:	c3                   	ret    
c0021d51:	90                   	nop

c0021d52 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0021d52:	6a 0e                	push   0xe
c0021d54:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d59:	50                   	push   eax
c0021d5a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d5f:	50                   	push   eax
c0021d60:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021d65:	50                   	push   eax
c0021d66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021d6a:	e8 79 ff ff ff       	call   c0021ce8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d6f:	83 c4 14             	add    esp,0x14
c0021d72:	0f b6 c0             	movzx  eax,al
c0021d75:	c3                   	ret    

c0021d76 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0021d76:	55                   	push   ebp
c0021d77:	57                   	push   edi
c0021d78:	56                   	push   esi
c0021d79:	53                   	push   ebx
c0021d7a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0021d7f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0021d84:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0021d89:	6a 0a                	push   0xa
c0021d8b:	56                   	push   esi
c0021d8c:	55                   	push   ebp
c0021d8d:	57                   	push   edi
c0021d8e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021d92:	e8 51 ff ff ff       	call   c0021ce8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d97:	6a 0a                	push   0xa
c0021d99:	89 c3                	mov    ebx,eax
c0021d9b:	56                   	push   esi
c0021d9c:	0f b6 db             	movzx  ebx,bl
c0021d9f:	55                   	push   ebp
c0021da0:	57                   	push   edi
c0021da1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021da5:	e8 3e ff ff ff       	call   c0021ce8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021daa:	83 c4 28             	add    esp,0x28
c0021dad:	25 00 ff 00 00       	and    eax,0xff00
c0021db2:	09 d8                	or     eax,ebx
c0021db4:	5b                   	pop    ebx
c0021db5:	5e                   	pop    esi
c0021db6:	5f                   	pop    edi
c0021db7:	5d                   	pop    ebp
c0021db8:	c3                   	ret    
c0021db9:	90                   	nop

c0021dba <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0021dba:	6a 08                	push   0x8
c0021dbc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021dc1:	50                   	push   eax
c0021dc2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021dc7:	50                   	push   eax
c0021dc8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021dcd:	50                   	push   eax
c0021dce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021dd2:	e8 11 ff ff ff       	call   c0021ce8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021dd7:	83 c4 14             	add    esp,0x14
c0021dda:	0f b6 c4             	movzx  eax,ah
c0021ddd:	c3                   	ret    

c0021dde <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0021dde:	6a 08                	push   0x8
c0021de0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021de5:	50                   	push   eax
c0021de6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021deb:	50                   	push   eax
c0021dec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021df1:	50                   	push   eax
c0021df2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021df6:	e8 ed fe ff ff       	call   c0021ce8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021dfb:	83 c4 14             	add    esp,0x14
c0021dfe:	c3                   	ret    
c0021dff:	90                   	nop

c0021e00 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0021e00:	6a 3c                	push   0x3c
c0021e02:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e07:	50                   	push   eax
c0021e08:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e0d:	50                   	push   eax
c0021e0e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e13:	50                   	push   eax
c0021e14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e18:	e8 cb fe ff ff       	call   c0021ce8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e1d:	83 c4 14             	add    esp,0x14
c0021e20:	c3                   	ret    
c0021e21:	90                   	nop

c0021e22 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0021e22:	6a 18                	push   0x18
c0021e24:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e29:	50                   	push   eax
c0021e2a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e2f:	50                   	push   eax
c0021e30:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021e35:	50                   	push   eax
c0021e36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e3a:	e8 a9 fe ff ff       	call   c0021ce8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e3f:	83 c4 14             	add    esp,0x14
c0021e42:	0f b6 c4             	movzx  eax,ah
c0021e45:	c3                   	ret    

c0021e46 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021e46:	55                   	push   ebp
c0021e47:	57                   	push   edi
c0021e48:	56                   	push   esi
c0021e49:	53                   	push   ebx
c0021e4a:	50                   	push   eax
c0021e4b:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021e4f:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021e54:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021e59:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021e5e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021e65:	8d 43 12             	lea    eax,[ebx+0x12]
c0021e68:	83 c3 10             	add    ebx,0x10
c0021e6b:	0f b6 c0             	movzx  eax,al
c0021e6e:	0f b6 db             	movzx  ebx,bl
c0021e71:	50                   	push   eax
c0021e72:	51                   	push   ecx
c0021e73:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021e77:	57                   	push   edi
c0021e78:	55                   	push   ebp
c0021e79:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021e7d:	e8 66 fe ff ff       	call   c0021ce8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e82:	53                   	push   ebx
c0021e83:	89 c6                	mov    esi,eax
c0021e85:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021e89:	c1 e6 10             	shl    esi,0x10
c0021e8c:	51                   	push   ecx
c0021e8d:	57                   	push   edi
c0021e8e:	55                   	push   ebp
c0021e8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021e93:	e8 50 fe ff ff       	call   c0021ce8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021e98:	83 c4 2c             	add    esp,0x2c
c0021e9b:	0f b7 c0             	movzx  eax,ax
c0021e9e:	5b                   	pop    ebx
c0021e9f:	09 f0                	or     eax,esi
c0021ea1:	5e                   	pop    esi
c0021ea2:	5f                   	pop    edi
c0021ea3:	5d                   	pop    ebp
c0021ea4:	c3                   	ret    
c0021ea5:	90                   	nop

c0021ea6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021ea6:	53                   	push   ebx
c0021ea7:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021eac:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021eb1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021eb5:	c1 e1 10             	shl    ecx,0x10
c0021eb8:	25 fc 00 00 00       	and    eax,0xfc
c0021ebd:	09 c1                	or     ecx,eax
c0021ebf:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ec4:	c1 e0 08             	shl    eax,0x8
c0021ec7:	09 c1                	or     ecx,eax
c0021ec9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021ece:	c1 e0 0b             	shl    eax,0xb
c0021ed1:	09 c1                	or     ecx,eax
c0021ed3:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021ed9:	89 c8                	mov    eax,ecx
c0021edb:	ef                   	out    dx,eax
c0021edc:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021ee1:	ed                   	in     eax,dx
c0021ee2:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0021ee7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0021eec:	74 0a                	je     c0021ef8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0021eee:	0f b7 d8             	movzx  ebx,ax
c0021ef1:	89 d0                	mov    eax,edx
c0021ef3:	c1 e0 10             	shl    eax,0x10
c0021ef6:	eb 05                	jmp    c0021efd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0021ef8:	66 31 c0             	xor    ax,ax
c0021efb:	89 d3                	mov    ebx,edx
c0021efd:	09 c3                	or     ebx,eax
c0021eff:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021f04:	89 c8                	mov    eax,ecx
c0021f06:	ef                   	out    dx,eax
c0021f07:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021f0c:	89 d8                	mov    eax,ebx
c0021f0e:	ef                   	out    dx,eax
c0021f0f:	5b                   	pop    ebx
c0021f10:	c3                   	ret    
c0021f11:	90                   	nop

c0021f12 <PCI::checkBus(unsigned char)>:
c0021f12:	56                   	push   esi
c0021f13:	53                   	push   ebx
c0021f14:	31 db                	xor    ebx,ebx
c0021f16:	51                   	push   ecx
c0021f17:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021f1c:	52                   	push   edx
c0021f1d:	53                   	push   ebx
c0021f1e:	43                   	inc    ebx
c0021f1f:	56                   	push   esi
c0021f20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f24:	e8 2b 03 00 00       	call   c0022254 <PCI::checkDevice(unsigned char, unsigned char)>
c0021f29:	83 c4 10             	add    esp,0x10
c0021f2c:	83 fb 20             	cmp    ebx,0x20
c0021f2f:	75 eb                	jne    c0021f1c <PCI::checkBus(unsigned char)+0xa>
c0021f31:	58                   	pop    eax
c0021f32:	5b                   	pop    ebx
c0021f33:	5e                   	pop    esi
c0021f34:	c3                   	ret    
c0021f35:	90                   	nop

c0021f36 <PCI::foundDevice(PCIDeviceInfo)>:
c0021f36:	55                   	push   ebp
c0021f37:	57                   	push   edi
c0021f38:	56                   	push   esi
c0021f39:	53                   	push   ebx
c0021f3a:	83 ec 1c             	sub    esp,0x1c
c0021f3d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021f41:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0021f47:	0f 84 52 01 00 00    	je     c002209f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021f4d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0021f51:	66 81 f9 06 04       	cmp    cx,0x406
c0021f56:	75 2c                	jne    c0021f84 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0021f58:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0021f5d:	50                   	push   eax
c0021f5e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0021f63:	50                   	push   eax
c0021f64:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0021f69:	50                   	push   eax
c0021f6a:	56                   	push   esi
c0021f6b:	e8 b2 fe ff ff       	call   c0021e22 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021f70:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021f74:	0f b6 c0             	movzx  eax,al
c0021f77:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0021f7b:	83 c4 2c             	add    esp,0x2c
c0021f7e:	5b                   	pop    ebx
c0021f7f:	5e                   	pop    esi
c0021f80:	5f                   	pop    edi
c0021f81:	5d                   	pop    ebp
c0021f82:	eb 8e                	jmp    c0021f12 <PCI::checkBus(unsigned char)>
c0021f84:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021f88:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0021f8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f92:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0021f96:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0021f9a:	88 d3                	mov    bl,dl
c0021f9c:	85 c0                	test   eax,eax
c0021f9e:	74 33                	je     c0021fd3 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0021fa0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021fa3:	85 d2                	test   edx,edx
c0021fa5:	74 28                	je     c0021fcf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021fa7:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021fad:	31 ef                	xor    edi,ebp
c0021faf:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021fb5:	75 18                	jne    c0021fcf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021fb7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021fbb:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0021fc1:	75 0c                	jne    c0021fcf <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021fc3:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0021fc9:	0f 84 d0 00 00 00    	je     c002209f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021fcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fd1:	eb c9                	jmp    c0021f9c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021fd3:	66 81 f9 01 06       	cmp    cx,0x601
c0021fd8:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0021fdc:	75 19                	jne    c0021ff7 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0021fde:	83 ec 0c             	sub    esp,0xc
c0021fe1:	68 64 01 00 00       	push   0x164
c0021fe6:	e8 39 d6 fe ff       	call   c000f624 <malloc>
c0021feb:	89 c5                	mov    ebp,eax
c0021fed:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ff0:	e8 95 0f 00 00       	call   c0022f8a <SATABus::SATABus()>
c0021ff5:	eb 1e                	jmp    c0022015 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0021ff7:	66 81 f9 01 01       	cmp    cx,0x101
c0021ffc:	75 60                	jne    c002205e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0021ffe:	83 ec 0c             	sub    esp,0xc
c0022001:	68 70 02 00 00       	push   0x270
c0022006:	e8 19 d6 fe ff       	call   c000f624 <malloc>
c002200b:	89 c5                	mov    ebp,eax
c002200d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022010:	e8 03 03 00 00       	call   c0022318 <IDE::IDE()>
c0022015:	58                   	pop    eax
c0022016:	5a                   	pop    edx
c0022017:	55                   	push   ebp
c0022018:	56                   	push   esi
c0022019:	e8 de 1c ff ff       	call   c0013cfc <Device::addChild(Device*)>
c002201e:	83 ec 1c             	sub    esp,0x1c
c0022021:	b9 09 00 00 00       	mov    ecx,0x9
c0022026:	fc                   	cld    
c0022027:	89 e7                	mov    edi,esp
c0022029:	89 de                	mov    esi,ebx
c002202b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002202d:	55                   	push   ebp
c002202e:	e8 d3 1b ff ff       	call   c0013c06 <Device::preOpenPCI(PCIDeviceInfo)>
c0022033:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022036:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002203a:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022042:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002204a:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022052:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022055:	83 c4 4c             	add    esp,0x4c
c0022058:	5b                   	pop    ebx
c0022059:	5e                   	pop    esi
c002205a:	5f                   	pop    edi
c002205b:	5d                   	pop    ebp
c002205c:	ff e0                	jmp    eax
c002205e:	83 ec 0c             	sub    esp,0xc
c0022061:	68 58 01 00 00       	push   0x158
c0022066:	e8 b9 d5 fe ff       	call   c000f624 <malloc>
c002206b:	89 c5                	mov    ebp,eax
c002206d:	58                   	pop    eax
c002206e:	5a                   	pop    edx
c002206f:	68 40 b5 02 c0       	push   0xc002b540
c0022074:	55                   	push   ebp
c0022075:	e8 78 1f ff ff       	call   c0013ff2 <DriverlessDevice::DriverlessDevice(char const*)>
c002207a:	59                   	pop    ecx
c002207b:	5f                   	pop    edi
c002207c:	55                   	push   ebp
c002207d:	56                   	push   esi
c002207e:	e8 79 1c ff ff       	call   c0013cfc <Device::addChild(Device*)>
c0022083:	b9 09 00 00 00       	mov    ecx,0x9
c0022088:	fc                   	cld    
c0022089:	89 df                	mov    edi,ebx
c002208b:	89 de                	mov    esi,ebx
c002208d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002208f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022093:	83 c4 2c             	add    esp,0x2c
c0022096:	5b                   	pop    ebx
c0022097:	5e                   	pop    esi
c0022098:	5f                   	pop    edi
c0022099:	5d                   	pop    ebp
c002209a:	e9 67 1b ff ff       	jmp    c0013c06 <Device::preOpenPCI(PCIDeviceInfo)>
c002209f:	83 c4 1c             	add    esp,0x1c
c00220a2:	5b                   	pop    ebx
c00220a3:	5e                   	pop    esi
c00220a4:	5f                   	pop    edi
c00220a5:	5d                   	pop    ebp
c00220a6:	c3                   	ret    
c00220a7:	90                   	nop

c00220a8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00220a8:	55                   	push   ebp
c00220a9:	57                   	push   edi
c00220aa:	56                   	push   esi
c00220ab:	53                   	push   ebx
c00220ac:	83 ec 5c             	sub    esp,0x5c
c00220af:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00220b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00220b7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00220bb:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c00220c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00220c4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c00220c8:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c00220cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00220d1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00220d6:	6a 0c                	push   0xc
c00220d8:	55                   	push   ebp
c00220d9:	53                   	push   ebx
c00220da:	57                   	push   edi
c00220db:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c00220e2:	e8 01 fc ff ff       	call   c0021ce8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00220e7:	55                   	push   ebp
c00220e8:	53                   	push   ebx
c00220e9:	57                   	push   edi
c00220ea:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00220f1:	e8 80 fc ff ff       	call   c0021d76 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00220f6:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00220fb:	83 c4 24             	add    esp,0x24
c00220fe:	55                   	push   ebp
c00220ff:	53                   	push   ebx
c0022100:	57                   	push   edi
c0022101:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022105:	e8 f6 fc ff ff       	call   c0021e00 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002210a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002210e:	6a 3c                	push   0x3c
c0022110:	55                   	push   ebp
c0022111:	53                   	push   ebx
c0022112:	57                   	push   edi
c0022113:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002211a:	e8 c9 fb ff ff       	call   c0021ce8 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002211f:	0f b6 c4             	movzx  eax,ah
c0022122:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022126:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002212a:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c002212e:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0022133:	83 c4 24             	add    esp,0x24
c0022136:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002213c:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0022143:	74 6c                	je     c00221b1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022145:	31 f6                	xor    esi,esi
c0022147:	8b 15 08 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf08
c002214d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022153:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0022159:	7e 56                	jle    c00221b1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c002215b:	8d 14 f2             	lea    edx,[edx+esi*8]
c002215e:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022165:	39 cb                	cmp    ebx,ecx
c0022167:	75 45                	jne    c00221ae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022169:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022170:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022174:	75 38                	jne    c00221ae <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022176:	83 ec 0c             	sub    esp,0xc
c0022179:	68 5a b5 02 c0       	push   0xc002b55a
c002217e:	e8 52 07 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022183:	8b 15 08 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf08
c0022189:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002218f:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022197:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c002219b:	52                   	push   edx
c002219c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00221a0:	53                   	push   ebx
c00221a1:	68 7f b5 02 c0       	push   0xc002b57f
c00221a6:	e8 2a 07 ff ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00221ab:	83 c4 20             	add    esp,0x20
c00221ae:	46                   	inc    esi
c00221af:	eb 96                	jmp    c0022147 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c00221b1:	31 d2                	xor    edx,edx
c00221b3:	83 ec 0c             	sub    esp,0xc
c00221b6:	55                   	push   ebp
c00221b7:	53                   	push   ebx
c00221b8:	57                   	push   edi
c00221b9:	52                   	push   edx
c00221ba:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00221be:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00221c5:	e8 7c fc ff ff       	call   c0021e46 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00221ca:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c00221ce:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00221d2:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00221d6:	42                   	inc    edx
c00221d7:	83 c4 20             	add    esp,0x20
c00221da:	83 fa 06             	cmp    edx,0x6
c00221dd:	75 d4                	jne    c00221b3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c00221df:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00221e3:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c00221e7:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c00221eb:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00221ef:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c00221f3:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00221f7:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00221fc:	86 e0                	xchg   al,ah
c00221fe:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022203:	55                   	push   ebp
c0022204:	53                   	push   ebx
c0022205:	57                   	push   edi
c0022206:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002220a:	e8 ab fb ff ff       	call   c0021dba <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002220f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022213:	55                   	push   ebp
c0022214:	53                   	push   ebx
c0022215:	57                   	push   edi
c0022216:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002221d:	e8 0e fb ff ff       	call   c0021d30 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022222:	83 ec 0c             	sub    esp,0xc
c0022225:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c002222a:	b9 09 00 00 00       	mov    ecx,0x9
c002222f:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022233:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022237:	fc                   	cld    
c0022238:	89 e7                	mov    edi,esp
c002223a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002223c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022243:	e8 ee fc ff ff       	call   c0021f36 <PCI::foundDevice(PCIDeviceInfo)>
c0022248:	81 c4 8c 00 00 00    	add    esp,0x8c
c002224e:	5b                   	pop    ebx
c002224f:	5e                   	pop    esi
c0022250:	5f                   	pop    edi
c0022251:	5d                   	pop    ebp
c0022252:	c3                   	ret    
c0022253:	90                   	nop

c0022254 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022254:	55                   	push   ebp
c0022255:	57                   	push   edi
c0022256:	56                   	push   esi
c0022257:	53                   	push   ebx
c0022258:	83 ec 0c             	sub    esp,0xc
c002225b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002225f:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022264:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022269:	6a 00                	push   0x0
c002226b:	56                   	push   esi
c002226c:	57                   	push   edi
c002226d:	55                   	push   ebp
c002226e:	e8 bd fa ff ff       	call   c0021d30 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022273:	6a 00                	push   0x0
c0022275:	56                   	push   esi
c0022276:	57                   	push   edi
c0022277:	55                   	push   ebp
c0022278:	e8 2b fe ff ff       	call   c00220a8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002227d:	83 c4 20             	add    esp,0x20
c0022280:	6a 00                	push   0x0
c0022282:	56                   	push   esi
c0022283:	57                   	push   edi
c0022284:	55                   	push   ebp
c0022285:	e8 c8 fa ff ff       	call   c0021d52 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002228a:	83 c4 10             	add    esp,0x10
c002228d:	84 c0                	test   al,al
c002228f:	79 27                	jns    c00222b8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022291:	bb 01 00 00 00       	mov    ebx,0x1
c0022296:	53                   	push   ebx
c0022297:	56                   	push   esi
c0022298:	57                   	push   edi
c0022299:	55                   	push   ebp
c002229a:	e8 91 fa ff ff       	call   c0021d30 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002229f:	83 c4 10             	add    esp,0x10
c00222a2:	66 40                	inc    ax
c00222a4:	74 0c                	je     c00222b2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00222a6:	53                   	push   ebx
c00222a7:	56                   	push   esi
c00222a8:	57                   	push   edi
c00222a9:	55                   	push   ebp
c00222aa:	e8 f9 fd ff ff       	call   c00220a8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00222af:	83 c4 10             	add    esp,0x10
c00222b2:	43                   	inc    ebx
c00222b3:	83 fb 08             	cmp    ebx,0x8
c00222b6:	75 de                	jne    c0022296 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00222b8:	83 c4 0c             	add    esp,0xc
c00222bb:	5b                   	pop    ebx
c00222bc:	5e                   	pop    esi
c00222bd:	5f                   	pop    edi
c00222be:	5d                   	pop    ebp
c00222bf:	c3                   	ret    

c00222c0 <PCI::detect()>:
c00222c0:	56                   	push   esi
c00222c1:	53                   	push   ebx
c00222c2:	53                   	push   ebx
c00222c3:	31 db                	xor    ebx,ebx
c00222c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00222c9:	6a 00                	push   0x0
c00222cb:	6a 00                	push   0x0
c00222cd:	6a 00                	push   0x0
c00222cf:	56                   	push   esi
c00222d0:	e8 7d fa ff ff       	call   c0021d52 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00222d5:	83 c4 10             	add    esp,0x10
c00222d8:	a8 80                	test   al,0x80
c00222da:	75 21                	jne    c00222fd <PCI::detect()+0x3d>
c00222dc:	51                   	push   ecx
c00222dd:	51                   	push   ecx
c00222de:	6a 00                	push   0x0
c00222e0:	56                   	push   esi
c00222e1:	e8 2c fc ff ff       	call   c0021f12 <PCI::checkBus(unsigned char)>
c00222e6:	83 c4 10             	add    esp,0x10
c00222e9:	eb 24                	jmp    c002230f <PCI::detect()+0x4f>
c00222eb:	52                   	push   edx
c00222ec:	52                   	push   edx
c00222ed:	53                   	push   ebx
c00222ee:	43                   	inc    ebx
c00222ef:	56                   	push   esi
c00222f0:	e8 1d fc ff ff       	call   c0021f12 <PCI::checkBus(unsigned char)>
c00222f5:	83 c4 10             	add    esp,0x10
c00222f8:	83 fb 08             	cmp    ebx,0x8
c00222fb:	74 12                	je     c002230f <PCI::detect()+0x4f>
c00222fd:	53                   	push   ebx
c00222fe:	6a 00                	push   0x0
c0022300:	6a 00                	push   0x0
c0022302:	56                   	push   esi
c0022303:	e8 28 fa ff ff       	call   c0021d30 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022308:	83 c4 10             	add    esp,0x10
c002230b:	66 40                	inc    ax
c002230d:	74 dc                	je     c00222eb <PCI::detect()+0x2b>
c002230f:	58                   	pop    eax
c0022310:	5b                   	pop    ebx
c0022311:	5e                   	pop    esi
c0022312:	c3                   	ret    
c0022313:	90                   	nop

c0022314 <IDE::close(int, int, void*)>:
c0022314:	83 c8 ff             	or     eax,0xffffffff
c0022317:	c3                   	ret    

c0022318 <IDE::IDE()>:
c0022318:	83 ec 0c             	sub    esp,0xc
c002231b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002231f:	83 ec 08             	sub    esp,0x8
c0022322:	68 c8 b5 02 c0       	push   0xc002b5c8
c0022327:	50                   	push   eax
c0022328:	e8 5b 1d ff ff       	call   c0014088 <HardDiskController::HardDiskController(char const*)>
c002232d:	83 c4 10             	add    esp,0x10
c0022330:	ba 08 b8 02 c0       	mov    edx,0xc002b808
c0022335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022339:	89 10                	mov    DWORD PTR [eax],edx
c002233b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002233f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022346:	90                   	nop
c0022347:	83 c4 0c             	add    esp,0xc
c002234a:	c3                   	ret    
c002234b:	90                   	nop

c002234c <IDE::prepareInterrupt(unsigned char)>:
c002234c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022351:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022355:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002235d:	c3                   	ret    

c002235e <selectDrive(unsigned char, unsigned char)>:
c002235e:	c3                   	ret    
c002235f:	90                   	nop

c0022360 <IDE::getBase(unsigned char)>:
c0022360:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022365:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022369:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022371:	c3                   	ret    

c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022372:	55                   	push   ebp
c0022373:	57                   	push   edi
c0022374:	56                   	push   esi
c0022375:	53                   	push   ebx
c0022376:	83 ec 1c             	sub    esp,0x1c
c0022379:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002237d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022381:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022384:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022388:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002238c:	80 f9 03             	cmp    cl,0x3
c002238f:	77 51                	ja     c00223e2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022391:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022395:	0f b6 f2             	movzx  esi,dl
c0022398:	0f b6 db             	movzx  ebx,bl
c002239b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c002239e:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00223a2:	83 ca 80             	or     edx,0xffffff80
c00223a5:	0f b6 d2             	movzx  edx,dl
c00223a8:	52                   	push   edx
c00223a9:	6a 0c                	push   0xc
c00223ab:	56                   	push   esi
c00223ac:	57                   	push   edi
c00223ad:	e8 c0 ff ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00223b2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00223b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00223bb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00223bf:	ee                   	out    dx,al
c00223c0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00223c5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00223c9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00223cd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00223d1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00223d9:	83 c4 2c             	add    esp,0x2c
c00223dc:	5b                   	pop    ebx
c00223dd:	5e                   	pop    esi
c00223de:	5f                   	pop    edi
c00223df:	5d                   	pop    ebp
c00223e0:	eb 90                	jmp    c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00223e2:	80 fb 07             	cmp    bl,0x7
c00223e5:	77 12                	ja     c00223f9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00223e7:	0f b6 d2             	movzx  edx,dl
c00223ea:	0f b6 db             	movzx  ebx,bl
c00223ed:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00223f5:	89 da                	mov    edx,ebx
c00223f7:	eb 2f                	jmp    c0022428 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00223f9:	80 fb 0d             	cmp    bl,0xd
c00223fc:	77 13                	ja     c0022411 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00223fe:	0f b6 d2             	movzx  edx,dl
c0022401:	0f b6 db             	movzx  ebx,bl
c0022404:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002240b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002240f:	eb 17                	jmp    c0022428 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022411:	80 fb 15             	cmp    bl,0x15
c0022414:	77 13                	ja     c0022429 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022416:	0f b6 d2             	movzx  edx,dl
c0022419:	0f b6 db             	movzx  ebx,bl
c002241c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022424:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022428:	ee                   	out    dx,al
c0022429:	83 c4 1c             	add    esp,0x1c
c002242c:	5b                   	pop    ebx
c002242d:	5e                   	pop    esi
c002242e:	5f                   	pop    edi
c002242f:	5d                   	pop    ebp
c0022430:	c3                   	ret    
c0022431:	90                   	nop

c0022432 <IDE::read(unsigned char, unsigned char)>:
c0022432:	55                   	push   ebp
c0022433:	57                   	push   edi
c0022434:	56                   	push   esi
c0022435:	53                   	push   ebx
c0022436:	83 ec 1c             	sub    esp,0x1c
c0022439:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002243d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022441:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022444:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022448:	3c 03                	cmp    al,0x3
c002244a:	77 43                	ja     c002248f <IDE::read(unsigned char, unsigned char)+0x5d>
c002244c:	0f b6 f2             	movzx  esi,dl
c002244f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022452:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022456:	83 c8 80             	or     eax,0xffffff80
c0022459:	0f b6 c0             	movzx  eax,al
c002245c:	50                   	push   eax
c002245d:	6a 0c                	push   0xc
c002245f:	56                   	push   esi
c0022460:	57                   	push   edi
c0022461:	e8 0c ff ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022466:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002246b:	0f b6 c3             	movzx  eax,bl
c002246e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022472:	ec                   	in     al,dx
c0022473:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022477:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002247c:	52                   	push   edx
c002247d:	6a 0c                	push   0xc
c002247f:	56                   	push   esi
c0022480:	57                   	push   edi
c0022481:	e8 ec fe ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022486:	83 c4 20             	add    esp,0x20
c0022489:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002248d:	eb 49                	jmp    c00224d8 <IDE::read(unsigned char, unsigned char)+0xa6>
c002248f:	80 fb 07             	cmp    bl,0x7
c0022492:	77 12                	ja     c00224a6 <IDE::read(unsigned char, unsigned char)+0x74>
c0022494:	0f b6 d2             	movzx  edx,dl
c0022497:	0f b6 c3             	movzx  eax,bl
c002249a:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00224a2:	89 c2                	mov    edx,eax
c00224a4:	eb 31                	jmp    c00224d7 <IDE::read(unsigned char, unsigned char)+0xa5>
c00224a6:	80 fb 0d             	cmp    bl,0xd
c00224a9:	77 13                	ja     c00224be <IDE::read(unsigned char, unsigned char)+0x8c>
c00224ab:	0f b6 d2             	movzx  edx,dl
c00224ae:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00224b5:	0f b6 d3             	movzx  edx,bl
c00224b8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00224bc:	eb 19                	jmp    c00224d7 <IDE::read(unsigned char, unsigned char)+0xa5>
c00224be:	31 c0                	xor    eax,eax
c00224c0:	80 fb 15             	cmp    bl,0x15
c00224c3:	77 13                	ja     c00224d8 <IDE::read(unsigned char, unsigned char)+0xa6>
c00224c5:	0f b6 d2             	movzx  edx,dl
c00224c8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00224d0:	0f b6 d3             	movzx  edx,bl
c00224d3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00224d7:	ec                   	in     al,dx
c00224d8:	83 c4 1c             	add    esp,0x1c
c00224db:	5b                   	pop    ebx
c00224dc:	5e                   	pop    esi
c00224dd:	5f                   	pop    edi
c00224de:	5d                   	pop    ebp
c00224df:	c3                   	ret    

c00224e0 <IDE::waitInterrupt(unsigned char)>:
c00224e0:	55                   	push   ebp
c00224e1:	57                   	push   edi
c00224e2:	56                   	push   esi
c00224e3:	53                   	push   ebx
c00224e4:	31 db                	xor    ebx,ebx
c00224e6:	83 ec 0c             	sub    esp,0xc
c00224e9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00224ed:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00224f2:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00224fa:	89 e8                	mov    eax,ebp
c00224fc:	84 c0                	test   al,al
c00224fe:	75 34                	jne    c0022534 <IDE::waitInterrupt(unsigned char)+0x54>
c0022500:	52                   	push   edx
c0022501:	6a 0c                	push   0xc
c0022503:	56                   	push   esi
c0022504:	57                   	push   edi
c0022505:	e8 28 ff ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c002250a:	83 c4 10             	add    esp,0x10
c002250d:	a8 01                	test   al,0x1
c002250f:	75 2b                	jne    c002253c <IDE::waitInterrupt(unsigned char)+0x5c>
c0022511:	f6 c3 04             	test   bl,0x4
c0022514:	75 16                	jne    c002252c <IDE::waitInterrupt(unsigned char)+0x4c>
c0022516:	83 fb 32             	cmp    ebx,0x32
c0022519:	7e 11                	jle    c002252c <IDE::waitInterrupt(unsigned char)+0x4c>
c002251b:	50                   	push   eax
c002251c:	50                   	push   eax
c002251d:	6a 00                	push   0x0
c002251f:	68 80 96 98 00       	push   0x989680
c0022524:	e8 8b b1 ff ff       	call   c001d6b4 <nanoSleep(unsigned long long)>
c0022529:	83 c4 10             	add    esp,0x10
c002252c:	83 fb 3c             	cmp    ebx,0x3c
c002252f:	74 0b                	je     c002253c <IDE::waitInterrupt(unsigned char)+0x5c>
c0022531:	43                   	inc    ebx
c0022532:	eb be                	jmp    c00224f2 <IDE::waitInterrupt(unsigned char)+0x12>
c0022534:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002253c:	83 c4 0c             	add    esp,0xc
c002253f:	89 e8                	mov    eax,ebp
c0022541:	5b                   	pop    ebx
c0022542:	5e                   	pop    esi
c0022543:	5f                   	pop    edi
c0022544:	5d                   	pop    ebp
c0022545:	c3                   	ret    

c0022546 <ideChannel0IRQHandler(regs*, void*)>:
c0022546:	83 ec 10             	sub    esp,0x10
c0022549:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002254d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022554:	6a 07                	push   0x7
c0022556:	6a 00                	push   0x0
c0022558:	50                   	push   eax
c0022559:	e8 d4 fe ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c002255e:	83 c4 1c             	add    esp,0x1c
c0022561:	c3                   	ret    

c0022562 <ideChannel1IRQHandler(regs*, void*)>:
c0022562:	83 ec 10             	sub    esp,0x10
c0022565:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022569:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022570:	6a 07                	push   0x7
c0022572:	6a 01                	push   0x1
c0022574:	50                   	push   eax
c0022575:	e8 b8 fe ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c002257a:	83 c4 1c             	add    esp,0x1c
c002257d:	c3                   	ret    

c002257e <IDE::enableIRQs(unsigned char, bool)>:
c002257e:	57                   	push   edi
c002257f:	56                   	push   esi
c0022580:	be 04 00 00 00       	mov    esi,0x4
c0022585:	53                   	push   ebx
c0022586:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002258b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002258f:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022594:	0f 94 c0             	sete   al
c0022597:	d1 e0                	shl    eax,1
c0022599:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00225a0:	0f b6 c0             	movzx  eax,al
c00225a3:	50                   	push   eax
c00225a4:	6a 0c                	push   0xc
c00225a6:	57                   	push   edi
c00225a7:	53                   	push   ebx
c00225a8:	e8 c5 fd ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00225ad:	83 c4 10             	add    esp,0x10
c00225b0:	50                   	push   eax
c00225b1:	6a 0c                	push   0xc
c00225b3:	57                   	push   edi
c00225b4:	53                   	push   ebx
c00225b5:	e8 78 fe ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c00225ba:	83 c4 10             	add    esp,0x10
c00225bd:	4e                   	dec    esi
c00225be:	75 f0                	jne    c00225b0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00225c0:	5b                   	pop    ebx
c00225c1:	5e                   	pop    esi
c00225c2:	5f                   	pop    edi
c00225c3:	c3                   	ret    

c00225c4 <IDE::open(int, int, void*)>:
c00225c4:	55                   	push   ebp
c00225c5:	57                   	push   edi
c00225c6:	56                   	push   esi
c00225c7:	53                   	push   ebx
c00225c8:	83 ec 1c             	sub    esp,0x1c
c00225cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00225cf:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00225d8:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c00225e1:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c00225e8:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c00225ef:	0f 85 b0 02 00 00    	jne    c00228a5 <IDE::open(int, int, void*)+0x2e1>
c00225f5:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c00225fb:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00225ff:	83 e0 7f             	and    eax,0x7f
c0022602:	3c 05                	cmp    al,0x5
c0022604:	74 04                	je     c002260a <IDE::open(int, int, void*)+0x46>
c0022606:	3c 0f                	cmp    al,0xf
c0022608:	75 32                	jne    c002263c <IDE::open(int, int, void*)+0x78>
c002260a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022610:	83 e0 fc             	and    eax,0xfffffffc
c0022613:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002261a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022620:	83 e0 fc             	and    eax,0xfffffffc
c0022623:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002262a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022630:	83 e0 fc             	and    eax,0xfffffffc
c0022633:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002263a:	eb 14                	jmp    c0022650 <IDE::open(int, int, void*)+0x8c>
c002263c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022646:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022650:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0022657:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002265e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022662:	89 c6                	mov    esi,eax
c0022664:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022669:	c1 e6 10             	shl    esi,0x10
c002266c:	89 e8                	mov    eax,ebp
c002266e:	89 fa                	mov    edx,edi
c0022670:	c1 e0 0b             	shl    eax,0xb
c0022673:	09 f0                	or     eax,esi
c0022675:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002267c:	c1 e6 08             	shl    esi,0x8
c002267f:	09 c6                	or     esi,eax
c0022681:	89 f0                	mov    eax,esi
c0022683:	0d 08 00 00 80       	or     eax,0x80000008
c0022688:	ef                   	out    dx,eax
c0022689:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002268e:	89 ca                	mov    edx,ecx
c0022690:	ed                   	in     eax,dx
c0022691:	c1 e8 10             	shr    eax,0x10
c0022694:	3d ff ff 00 00       	cmp    eax,0xffff
c0022699:	0f 84 f5 00 00 00    	je     c0022794 <IDE::open(int, int, void*)+0x1d0>
c002269f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00226a5:	89 fa                	mov    edx,edi
c00226a7:	89 f0                	mov    eax,esi
c00226a9:	ef                   	out    dx,eax
c00226aa:	b0 fe                	mov    al,0xfe
c00226ac:	89 ca                	mov    edx,ecx
c00226ae:	ee                   	out    dx,al
c00226af:	89 f0                	mov    eax,esi
c00226b1:	89 fa                	mov    edx,edi
c00226b3:	ef                   	out    dx,eax
c00226b4:	89 ca                	mov    edx,ecx
c00226b6:	ed                   	in     eax,dx
c00226b7:	3c fe                	cmp    al,0xfe
c00226b9:	0f 85 a9 00 00 00    	jne    c0022768 <IDE::open(int, int, void*)+0x1a4>
c00226bf:	8b 15 08 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf08
c00226c5:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00226cc:	74 33                	je     c0022701 <IDE::open(int, int, void*)+0x13d>
c00226ce:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00226d4:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00226d8:	40                   	inc    eax
c00226d9:	83 ec 0c             	sub    esp,0xc
c00226dc:	0f b6 c0             	movzx  eax,al
c00226df:	50                   	push   eax
c00226e0:	55                   	push   ebp
c00226e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00226e5:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00226eb:	51                   	push   ecx
c00226ec:	e8 35 52 ff ff       	call   c0017926 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00226f1:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c00226f6:	83 c4 1c             	add    esp,0x1c
c00226f9:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00226ff:	eb 0a                	jmp    c002270b <IDE::open(int, int, void*)+0x147>
c0022701:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002270b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022712:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022719:	c1 e1 10             	shl    ecx,0x10
c002271c:	c1 e0 08             	shl    eax,0x8
c002271f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022724:	09 c1                	or     ecx,eax
c0022726:	89 fa                	mov    edx,edi
c0022728:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002272f:	c1 e0 0b             	shl    eax,0xb
c0022732:	09 c1                	or     ecx,eax
c0022734:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002273a:	89 c8                	mov    eax,ecx
c002273c:	ef                   	out    dx,eax
c002273d:	be fc 0c 00 00       	mov    esi,0xcfc
c0022742:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022748:	89 f2                	mov    edx,esi
c002274a:	ee                   	out    dx,al
c002274b:	89 c8                	mov    eax,ecx
c002274d:	89 fa                	mov    edx,edi
c002274f:	ef                   	out    dx,eax
c0022750:	89 f2                	mov    edx,esi
c0022752:	ed                   	in     eax,dx
c0022753:	0f b6 c0             	movzx  eax,al
c0022756:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002275c:	74 46                	je     c00227a4 <IDE::open(int, int, void*)+0x1e0>
c002275e:	83 ec 0c             	sub    esp,0xc
c0022761:	68 e0 b5 02 c0       	push   0xc002b5e0
c0022766:	eb 34                	jmp    c002279c <IDE::open(int, int, void*)+0x1d8>
c0022768:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022771:	75 17                	jne    c002278a <IDE::open(int, int, void*)+0x1c6>
c0022773:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0022778:	74 07                	je     c0022781 <IDE::open(int, int, void*)+0x1bd>
c002277a:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002277f:	75 09                	jne    c002278a <IDE::open(int, int, void*)+0x1c6>
c0022781:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0022788:	eb 1a                	jmp    c00227a4 <IDE::open(int, int, void*)+0x1e0>
c002278a:	83 ec 0c             	sub    esp,0xc
c002278d:	68 e8 b5 02 c0       	push   0xc002b5e8
c0022792:	eb 08                	jmp    c002279c <IDE::open(int, int, void*)+0x1d8>
c0022794:	83 ec 0c             	sub    esp,0xc
c0022797:	68 19 b6 02 c0       	push   0xc002b619
c002279c:	e8 14 74 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c00227a1:	83 c4 10             	add    esp,0x10
c00227a4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00227ab:	79 1a                	jns    c00227c7 <IDE::open(int, int, void*)+0x203>
c00227ad:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00227b3:	83 e0 fc             	and    eax,0xfffffffc
c00227b6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00227bd:	83 c0 08             	add    eax,0x8
c00227c0:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00227c7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00227cd:	89 c2                	mov    edx,eax
c00227cf:	83 e2 0f             	and    edx,0xf
c00227d2:	66 83 fa 08          	cmp    dx,0x8
c00227d6:	75 0a                	jne    c00227e2 <IDE::open(int, int, void*)+0x21e>
c00227d8:	83 e8 02             	sub    eax,0x2
c00227db:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00227e2:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00227e8:	89 c2                	mov    edx,eax
c00227ea:	83 e2 0f             	and    edx,0xf
c00227ed:	66 83 fa 08          	cmp    dx,0x8
c00227f1:	75 0a                	jne    c00227fd <IDE::open(int, int, void*)+0x239>
c00227f3:	83 e8 02             	sub    eax,0x2
c00227f6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00227fd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0022804:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002280b:	89 d0                	mov    eax,edx
c002280d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022810:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022814:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0022818:	8d 4a 01             	lea    ecx,[edx+0x1]
c002281b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022820:	0f b6 c9             	movzx  ecx,cl
c0022823:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002282a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002282d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022831:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022835:	8d 50 02             	lea    edx,[eax+0x2]
c0022838:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002283d:	0f b6 d2             	movzx  edx,dl
c0022840:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0022846:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022849:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002284d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022851:	8d 48 03             	lea    ecx,[eax+0x3]
c0022854:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022859:	0f b6 c9             	movzx  ecx,cl
c002285c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022862:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022865:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022869:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002286d:	8d 50 04             	lea    edx,[eax+0x4]
c0022870:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0022876:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002287b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0022882:	66 85 f6             	test   si,si
c0022885:	74 3e                	je     c00228c5 <IDE::open(int, int, void*)+0x301>
c0022887:	0f b6 d2             	movzx  edx,dl
c002288a:	83 c0 05             	add    eax,0x5
c002288d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022890:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022894:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0022898:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002289e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00228a3:	eb 20                	jmp    c00228c5 <IDE::open(int, int, void*)+0x301>
c00228a5:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00228af:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00228b9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00228c0:	e9 02 ff ff ff       	jmp    c00227c7 <IDE::open(int, int, void*)+0x203>
c00228c5:	52                   	push   edx
c00228c6:	52                   	push   edx
c00228c7:	6a 00                	push   0x0
c00228c9:	53                   	push   ebx
c00228ca:	e8 7d fa ff ff       	call   c002234c <IDE::prepareInterrupt(unsigned char)>
c00228cf:	59                   	pop    ecx
c00228d0:	5e                   	pop    esi
c00228d1:	6a 01                	push   0x1
c00228d3:	53                   	push   ebx
c00228d4:	e8 73 fa ff ff       	call   c002234c <IDE::prepareInterrupt(unsigned char)>
c00228d9:	83 c4 0c             	add    esp,0xc
c00228dc:	6a 00                	push   0x0
c00228de:	6a 00                	push   0x0
c00228e0:	53                   	push   ebx
c00228e1:	e8 98 fc ff ff       	call   c002257e <IDE::enableIRQs(unsigned char, bool)>
c00228e6:	83 c4 0c             	add    esp,0xc
c00228e9:	6a 00                	push   0x0
c00228eb:	6a 01                	push   0x1
c00228ed:	53                   	push   ebx
c00228ee:	e8 8b fc ff ff       	call   c002257e <IDE::enableIRQs(unsigned char, bool)>
c00228f3:	83 c4 10             	add    esp,0x10
c00228f6:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00228fd:	74 40                	je     c002293f <IDE::open(int, int, void*)+0x37b>
c00228ff:	83 ec 0c             	sub    esp,0xc
c0022902:	68 43 b6 02 c0       	push   0xc002b643
c0022907:	e8 c9 ff fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c002290c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002290f:	6a 01                	push   0x1
c0022911:	68 46 25 02 c0       	push   0xc0022546
c0022916:	6a 0e                	push   0xe
c0022918:	53                   	push   ebx
c0022919:	e8 62 13 ff ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002291e:	83 c4 14             	add    esp,0x14
c0022921:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022927:	53                   	push   ebx
c0022928:	6a 01                	push   0x1
c002292a:	68 62 25 02 c0       	push   0xc0022562
c002292f:	6a 0f                	push   0xf
c0022931:	53                   	push   ebx
c0022932:	e8 49 13 ff ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022937:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002293d:	eb 4a                	jmp    c0022989 <IDE::open(int, int, void*)+0x3c5>
c002293f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0022949:	50                   	push   eax
c002294a:	6a 0f                	push   0xf
c002294c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022952:	68 5f b6 02 c0       	push   0xc002b65f
c0022957:	e8 79 ff fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c002295c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002295f:	6a 00                	push   0x0
c0022961:	68 46 25 02 c0       	push   0xc0022546
c0022966:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002296c:	53                   	push   ebx
c002296d:	e8 0e 13 ff ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022972:	83 c4 14             	add    esp,0x14
c0022975:	53                   	push   ebx
c0022976:	6a 00                	push   0x0
c0022978:	68 62 25 02 c0       	push   0xc0022562
c002297d:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0022983:	53                   	push   ebx
c0022984:	e8 f7 12 ff ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022989:	8b 03                	mov    eax,DWORD PTR [ebx]
c002298b:	83 c4 20             	add    esp,0x20
c002298e:	83 ec 0c             	sub    esp,0xc
c0022991:	53                   	push   ebx
c0022992:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0022995:	83 c4 0c             	add    esp,0xc
c0022998:	6a 07                	push   0x7
c002299a:	6a 00                	push   0x0
c002299c:	53                   	push   ebx
c002299d:	e8 90 fa ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c00229a2:	83 c4 0c             	add    esp,0xc
c00229a5:	6a 07                	push   0x7
c00229a7:	6a 01                	push   0x1
c00229a9:	53                   	push   ebx
c00229aa:	e8 83 fa ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c00229af:	83 c4 0c             	add    esp,0xc
c00229b2:	6a 01                	push   0x1
c00229b4:	6a 00                	push   0x0
c00229b6:	53                   	push   ebx
c00229b7:	e8 c2 fb ff ff       	call   c002257e <IDE::enableIRQs(unsigned char, bool)>
c00229bc:	83 c4 0c             	add    esp,0xc
c00229bf:	6a 01                	push   0x1
c00229c1:	6a 01                	push   0x1
c00229c3:	53                   	push   ebx
c00229c4:	e8 b5 fb ff ff       	call   c002257e <IDE::enableIRQs(unsigned char, bool)>
c00229c9:	83 c4 2c             	add    esp,0x2c
c00229cc:	31 c0                	xor    eax,eax
c00229ce:	5b                   	pop    ebx
c00229cf:	5e                   	pop    esi
c00229d0:	5f                   	pop    edi
c00229d1:	5d                   	pop    ebp
c00229d2:	c3                   	ret    
c00229d3:	90                   	nop

c00229d4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00229d4:	55                   	push   ebp
c00229d5:	57                   	push   edi
c00229d6:	56                   	push   esi
c00229d7:	53                   	push   ebx
c00229d8:	83 ec 1c             	sub    esp,0x1c
c00229db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00229df:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00229e3:	8d 50 f8             	lea    edx,[eax-0x8]
c00229e6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00229ea:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00229ee:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00229f2:	80 fa 03             	cmp    dl,0x3
c00229f5:	77 5d                	ja     c0022a54 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00229f7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00229fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00229ff:	0f b6 db             	movzx  ebx,bl
c0022a02:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0022a05:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0022a09:	83 ca 80             	or     edx,0xffffff80
c0022a0c:	0f b6 d2             	movzx  edx,dl
c0022a0f:	52                   	push   edx
c0022a10:	6a 0c                	push   0xc
c0022a12:	53                   	push   ebx
c0022a13:	56                   	push   esi
c0022a14:	e8 59 f9 ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a19:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022a1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022a22:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022a26:	0f b6 c0             	movzx  eax,al
c0022a29:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022a2d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022a2f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022a34:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0022a38:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022a3c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022a40:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022a48:	83 c4 2c             	add    esp,0x2c
c0022a4b:	5b                   	pop    ebx
c0022a4c:	5e                   	pop    esi
c0022a4d:	5f                   	pop    edi
c0022a4e:	5d                   	pop    ebp
c0022a4f:	e9 1e f9 ff ff       	jmp    c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022a54:	3c 07                	cmp    al,0x7
c0022a56:	77 10                	ja     c0022a68 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0022a58:	0f b6 db             	movzx  ebx,bl
c0022a5b:	0f b6 d0             	movzx  edx,al
c0022a5e:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0022a66:	eb 2d                	jmp    c0022a95 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022a68:	3c 0d                	cmp    al,0xd
c0022a6a:	77 13                	ja     c0022a7f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022a6c:	0f b6 db             	movzx  ebx,bl
c0022a6f:	0f b6 c0             	movzx  eax,al
c0022a72:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0022a79:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0022a7d:	eb 16                	jmp    c0022a95 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0022a7f:	3c 15                	cmp    al,0x15
c0022a81:	77 14                	ja     c0022a97 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0022a83:	0f b6 db             	movzx  ebx,bl
c0022a86:	0f b6 c0             	movzx  eax,al
c0022a89:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0022a91:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0022a95:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022a97:	83 c4 1c             	add    esp,0x1c
c0022a9a:	5b                   	pop    ebx
c0022a9b:	5e                   	pop    esi
c0022a9c:	5f                   	pop    edi
c0022a9d:	5d                   	pop    ebp
c0022a9e:	c3                   	ret    
c0022a9f:	90                   	nop

c0022aa0 <IDE::detect()>:
c0022aa0:	55                   	push   ebp
c0022aa1:	57                   	push   edi
c0022aa2:	56                   	push   esi
c0022aa3:	53                   	push   ebx
c0022aa4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0022aaa:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0022ab1:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0022ab8:	0f 85 be 02 00 00    	jne    c0022d7c <IDE::detect()+0x2dc>
c0022abe:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0022ac5:	31 f6                	xor    esi,esi
c0022ac7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0022acf:	31 ed                	xor    ebp,ebp
c0022ad1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ad5:	c1 e0 06             	shl    eax,0x6
c0022ad8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0022ae0:	89 e8                	mov    eax,ebp
c0022ae2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0022ae6:	c1 e0 04             	shl    eax,0x4
c0022ae9:	83 c8 a0             	or     eax,0xffffffa0
c0022aec:	0f b6 c0             	movzx  eax,al
c0022aef:	50                   	push   eax
c0022af0:	6a 06                	push   0x6
c0022af2:	56                   	push   esi
c0022af3:	53                   	push   ebx
c0022af4:	e8 79 f8 ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022af9:	83 c4 0c             	add    esp,0xc
c0022afc:	6a 0c                	push   0xc
c0022afe:	56                   	push   esi
c0022aff:	53                   	push   ebx
c0022b00:	e8 2d f9 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c0022b05:	83 c4 0c             	add    esp,0xc
c0022b08:	6a 0c                	push   0xc
c0022b0a:	56                   	push   esi
c0022b0b:	53                   	push   ebx
c0022b0c:	e8 21 f9 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c0022b11:	83 c4 0c             	add    esp,0xc
c0022b14:	6a 0c                	push   0xc
c0022b16:	56                   	push   esi
c0022b17:	53                   	push   ebx
c0022b18:	e8 15 f9 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c0022b1d:	83 c4 0c             	add    esp,0xc
c0022b20:	6a 0c                	push   0xc
c0022b22:	56                   	push   esi
c0022b23:	53                   	push   ebx
c0022b24:	e8 09 f9 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c0022b29:	68 ec 00 00 00       	push   0xec
c0022b2e:	6a 07                	push   0x7
c0022b30:	56                   	push   esi
c0022b31:	53                   	push   ebx
c0022b32:	e8 3b f8 ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022b37:	83 c4 1c             	add    esp,0x1c
c0022b3a:	6a 0c                	push   0xc
c0022b3c:	56                   	push   esi
c0022b3d:	53                   	push   ebx
c0022b3e:	e8 ef f8 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c0022b43:	83 c4 0c             	add    esp,0xc
c0022b46:	6a 0c                	push   0xc
c0022b48:	56                   	push   esi
c0022b49:	53                   	push   ebx
c0022b4a:	e8 e3 f8 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c0022b4f:	83 c4 0c             	add    esp,0xc
c0022b52:	6a 0c                	push   0xc
c0022b54:	56                   	push   esi
c0022b55:	53                   	push   ebx
c0022b56:	e8 d7 f8 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c0022b5b:	83 c4 0c             	add    esp,0xc
c0022b5e:	6a 0c                	push   0xc
c0022b60:	56                   	push   esi
c0022b61:	53                   	push   ebx
c0022b62:	e8 cb f8 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c0022b67:	83 c4 0c             	add    esp,0xc
c0022b6a:	6a 0c                	push   0xc
c0022b6c:	56                   	push   esi
c0022b6d:	53                   	push   ebx
c0022b6e:	e8 bf f8 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c0022b73:	83 c4 10             	add    esp,0x10
c0022b76:	84 c0                	test   al,al
c0022b78:	0f 84 8b 01 00 00    	je     c0022d09 <IDE::detect()+0x269>
c0022b7e:	31 ff                	xor    edi,edi
c0022b80:	50                   	push   eax
c0022b81:	6a 0c                	push   0xc
c0022b83:	56                   	push   esi
c0022b84:	53                   	push   ebx
c0022b85:	e8 a8 f8 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c0022b8a:	83 c4 10             	add    esp,0x10
c0022b8d:	a8 01                	test   al,0x1
c0022b8f:	0f 85 8e 01 00 00    	jne    c0022d23 <IDE::detect()+0x283>
c0022b95:	84 c0                	test   al,al
c0022b97:	78 04                	js     c0022b9d <IDE::detect()+0xfd>
c0022b99:	a8 08                	test   al,0x8
c0022b9b:	75 27                	jne    c0022bc4 <IDE::detect()+0x124>
c0022b9d:	47                   	inc    edi
c0022b9e:	81 ff 17 01 00 00    	cmp    edi,0x117
c0022ba4:	7e da                	jle    c0022b80 <IDE::detect()+0xe0>
c0022ba6:	50                   	push   eax
c0022ba7:	50                   	push   eax
c0022ba8:	6a 00                	push   0x0
c0022baa:	68 40 4b 4c 00       	push   0x4c4b40
c0022baf:	e8 00 ab ff ff       	call   c001d6b4 <nanoSleep(unsigned long long)>
c0022bb4:	83 c4 10             	add    esp,0x10
c0022bb7:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0022bbd:	75 c1                	jne    c0022b80 <IDE::detect()+0xe0>
c0022bbf:	e9 5f 01 00 00       	jmp    c0022d23 <IDE::detect()+0x283>
c0022bc4:	31 c9                	xor    ecx,ecx
c0022bc6:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0022bca:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022bce:	83 ec 0c             	sub    esp,0xc
c0022bd1:	68 80 00 00 00       	push   0x80
c0022bd6:	57                   	push   edi
c0022bd7:	6a 00                	push   0x0
c0022bd9:	56                   	push   esi
c0022bda:	53                   	push   ebx
c0022bdb:	e8 f4 fd ff ff       	call   c00229d4 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022be0:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0022be5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022be9:	89 d1                	mov    ecx,edx
c0022beb:	c1 e0 06             	shl    eax,0x6
c0022bee:	01 d8                	add    eax,ebx
c0022bf0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0022bf7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0022bfe:	89 f2                	mov    edx,esi
c0022c00:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0022c06:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0022c0a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0022c10:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022c14:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0022c1b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0022c23:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0022c2a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0022c32:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0022c38:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022c3f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0022c45:	8d 54 24 58          	lea    edx,[esp+0x58]
c0022c49:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022c4d:	83 c4 20             	add    esp,0x20
c0022c50:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0022c53:	83 c0 02             	add    eax,0x2
c0022c56:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022c5c:	83 c7 02             	add    edi,0x2
c0022c5f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0022c62:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0022c68:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022c6c:	75 e2                	jne    c0022c50 <IDE::detect()+0x1b0>
c0022c6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c72:	c1 e0 06             	shl    eax,0x6
c0022c75:	01 d8                	add    eax,ebx
c0022c77:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0022c7d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0022c84:	66 c1 ea 09          	shr    dx,0x9
c0022c88:	83 e2 01             	and    edx,0x1
c0022c8b:	84 c9                	test   cl,cl
c0022c8d:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0022c93:	75 2f                	jne    c0022cc4 <IDE::detect()+0x224>
c0022c95:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0022c9b:	85 c0                	test   eax,eax
c0022c9d:	74 66                	je     c0022d05 <IDE::detect()+0x265>
c0022c9f:	50                   	push   eax
c0022ca0:	55                   	push   ebp
c0022ca1:	56                   	push   esi
c0022ca2:	68 7b b6 02 c0       	push   0xc002b67b
c0022ca7:	e8 29 fc fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022cac:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0022cb3:	e8 6c c9 fe ff       	call   c000f624 <malloc>
c0022cb8:	89 c7                	mov    edi,eax
c0022cba:	89 04 24             	mov    DWORD PTR [esp],eax
c0022cbd:	e8 62 06 00 00       	call   c0023324 <ATA::ATA()>
c0022cc2:	eb 28                	jmp    c0022cec <IDE::detect()+0x24c>
c0022cc4:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0022cca:	55                   	push   ebp
c0022ccb:	56                   	push   esi
c0022ccc:	68 aa b6 02 c0       	push   0xc002b6aa
c0022cd1:	e8 ff fb fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022cd6:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0022cdd:	e8 42 c9 fe ff       	call   c000f624 <malloc>
c0022ce2:	89 c7                	mov    edi,eax
c0022ce4:	89 04 24             	mov    DWORD PTR [esp],eax
c0022ce7:	e8 68 0c 00 00       	call   c0023954 <ATAPI::ATAPI()>
c0022cec:	5a                   	pop    edx
c0022ced:	59                   	pop    ecx
c0022cee:	57                   	push   edi
c0022cef:	53                   	push   ebx
c0022cf0:	e8 07 10 ff ff       	call   c0013cfc <Device::addChild(Device*)>
c0022cf5:	8b 07                	mov    eax,DWORD PTR [edi]
c0022cf7:	53                   	push   ebx
c0022cf8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022cfc:	6a 00                	push   0x0
c0022cfe:	57                   	push   edi
c0022cff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022d02:	83 c4 20             	add    esp,0x20
c0022d05:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0022d09:	4d                   	dec    ebp
c0022d0a:	74 0a                	je     c0022d16 <IDE::detect()+0x276>
c0022d0c:	bd 01 00 00 00       	mov    ebp,0x1
c0022d11:	e9 bb fd ff ff       	jmp    c0022ad1 <IDE::detect()+0x31>
c0022d16:	4e                   	dec    esi
c0022d17:	74 63                	je     c0022d7c <IDE::detect()+0x2dc>
c0022d19:	be 01 00 00 00       	mov    esi,0x1
c0022d1e:	e9 ac fd ff ff       	jmp    c0022acf <IDE::detect()+0x2f>
c0022d23:	50                   	push   eax
c0022d24:	6a 04                	push   0x4
c0022d26:	56                   	push   esi
c0022d27:	53                   	push   ebx
c0022d28:	e8 05 f7 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c0022d2d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022d31:	83 c4 0c             	add    esp,0xc
c0022d34:	6a 05                	push   0x5
c0022d36:	56                   	push   esi
c0022d37:	53                   	push   ebx
c0022d38:	e8 f5 f6 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c0022d3d:	83 c4 10             	add    esp,0x10
c0022d40:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0022d44:	80 fa 14             	cmp    dl,0x14
c0022d47:	75 04                	jne    c0022d4d <IDE::detect()+0x2ad>
c0022d49:	3c eb                	cmp    al,0xeb
c0022d4b:	eb 07                	jmp    c0022d54 <IDE::detect()+0x2b4>
c0022d4d:	3c 96                	cmp    al,0x96
c0022d4f:	75 b8                	jne    c0022d09 <IDE::detect()+0x269>
c0022d51:	80 fa 69             	cmp    dl,0x69
c0022d54:	75 b3                	jne    c0022d09 <IDE::detect()+0x269>
c0022d56:	68 a1 00 00 00       	push   0xa1
c0022d5b:	6a 07                	push   0x7
c0022d5d:	56                   	push   esi
c0022d5e:	53                   	push   ebx
c0022d5f:	e8 0e f6 ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d64:	5f                   	pop    edi
c0022d65:	58                   	pop    eax
c0022d66:	6a 00                	push   0x0
c0022d68:	68 40 42 0f 00       	push   0xf4240
c0022d6d:	e8 42 a9 ff ff       	call   c001d6b4 <nanoSleep(unsigned long long)>
c0022d72:	83 c4 10             	add    esp,0x10
c0022d75:	b1 01                	mov    cl,0x1
c0022d77:	e9 4a fe ff ff       	jmp    c0022bc6 <IDE::detect()+0x126>
c0022d7c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0022d82:	5b                   	pop    ebx
c0022d83:	5e                   	pop    esi
c0022d84:	5f                   	pop    edi
c0022d85:	5d                   	pop    ebp
c0022d86:	c3                   	ret    
c0022d87:	90                   	nop

c0022d88 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0022d88:	55                   	push   ebp
c0022d89:	57                   	push   edi
c0022d8a:	56                   	push   esi
c0022d8b:	53                   	push   ebx
c0022d8c:	83 ec 1c             	sub    esp,0x1c
c0022d8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022d93:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022d97:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022d9b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0022d9f:	88 c3                	mov    bl,al
c0022da1:	84 c0                	test   al,al
c0022da3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022da7:	0f 84 67 01 00 00    	je     c0022f14 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0022dad:	83 ec 0c             	sub    esp,0xc
c0022db0:	68 db b6 02 c0       	push   0xc002b6db
c0022db5:	e8 1b fb fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022dba:	83 c4 10             	add    esp,0x10
c0022dbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022dc1:	3c 01                	cmp    al,0x1
c0022dc3:	75 17                	jne    c0022ddc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0022dc5:	83 ec 0c             	sub    esp,0xc
c0022dc8:	b3 13                	mov    bl,0x13
c0022dca:	68 e7 b6 02 c0       	push   0xc002b6e7
c0022dcf:	e8 01 fb fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022dd4:	83 c4 10             	add    esp,0x10
c0022dd7:	e9 25 01 00 00       	jmp    c0022f01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022ddc:	3c 02                	cmp    al,0x2
c0022dde:	0f 85 ef 00 00 00    	jne    c0022ed3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0022de4:	d1 e6                	shl    esi,1
c0022de6:	09 ee                	or     esi,ebp
c0022de8:	52                   	push   edx
c0022de9:	89 f0                	mov    eax,esi
c0022deb:	6a 01                	push   0x1
c0022ded:	0f b6 f0             	movzx  esi,al
c0022df0:	c1 e6 06             	shl    esi,0x6
c0022df3:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0022dfb:	50                   	push   eax
c0022dfc:	57                   	push   edi
c0022dfd:	e8 30 f6 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c0022e02:	83 c4 10             	add    esp,0x10
c0022e05:	89 c6                	mov    esi,eax
c0022e07:	a8 01                	test   al,0x1
c0022e09:	74 12                	je     c0022e1d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0022e0b:	83 ec 0c             	sub    esp,0xc
c0022e0e:	b3 07                	mov    bl,0x7
c0022e10:	68 fc b6 02 c0       	push   0xc002b6fc
c0022e15:	e8 bb fa fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022e1a:	83 c4 10             	add    esp,0x10
c0022e1d:	f7 c6 02 00 00 00    	test   esi,0x2
c0022e23:	74 12                	je     c0022e37 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0022e25:	83 ec 0c             	sub    esp,0xc
c0022e28:	b3 03                	mov    bl,0x3
c0022e2a:	68 1a b7 02 c0       	push   0xc002b71a
c0022e2f:	e8 a1 fa fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022e34:	83 c4 10             	add    esp,0x10
c0022e37:	f7 c6 04 00 00 00    	test   esi,0x4
c0022e3d:	74 12                	je     c0022e51 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022e3f:	83 ec 0c             	sub    esp,0xc
c0022e42:	b3 14                	mov    bl,0x14
c0022e44:	68 3a b7 02 c0       	push   0xc002b73a
c0022e49:	e8 87 fa fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022e4e:	83 c4 10             	add    esp,0x10
c0022e51:	f7 c6 08 00 00 00    	test   esi,0x8
c0022e57:	74 12                	je     c0022e6b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022e59:	83 ec 0c             	sub    esp,0xc
c0022e5c:	b3 03                	mov    bl,0x3
c0022e5e:	68 1a b7 02 c0       	push   0xc002b71a
c0022e63:	e8 6d fa fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022e68:	83 c4 10             	add    esp,0x10
c0022e6b:	f7 c6 10 00 00 00    	test   esi,0x10
c0022e71:	74 12                	je     c0022e85 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0022e73:	83 ec 0c             	sub    esp,0xc
c0022e76:	b3 15                	mov    bl,0x15
c0022e78:	68 52 b7 02 c0       	push   0xc002b752
c0022e7d:	e8 53 fa fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022e82:	83 c4 10             	add    esp,0x10
c0022e85:	f7 c6 20 00 00 00    	test   esi,0x20
c0022e8b:	74 12                	je     c0022e9f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022e8d:	83 ec 0c             	sub    esp,0xc
c0022e90:	b3 03                	mov    bl,0x3
c0022e92:	68 1a b7 02 c0       	push   0xc002b71a
c0022e97:	e8 39 fa fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022e9c:	83 c4 10             	add    esp,0x10
c0022e9f:	f7 c6 40 00 00 00    	test   esi,0x40
c0022ea5:	74 12                	je     c0022eb9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0022ea7:	83 ec 0c             	sub    esp,0xc
c0022eaa:	b3 16                	mov    bl,0x16
c0022eac:	68 6c b7 02 c0       	push   0xc002b76c
c0022eb1:	e8 1f fa fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022eb6:	83 c4 10             	add    esp,0x10
c0022eb9:	89 f0                	mov    eax,esi
c0022ebb:	84 c0                	test   al,al
c0022ebd:	79 42                	jns    c0022f01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022ebf:	83 ec 0c             	sub    esp,0xc
c0022ec2:	b3 0d                	mov    bl,0xd
c0022ec4:	68 8d b7 02 c0       	push   0xc002b78d
c0022ec9:	e8 07 fa fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022ece:	83 c4 10             	add    esp,0x10
c0022ed1:	eb 2e                	jmp    c0022f01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022ed3:	3c 03                	cmp    al,0x3
c0022ed5:	75 14                	jne    c0022eeb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0022ed7:	83 ec 0c             	sub    esp,0xc
c0022eda:	b3 17                	mov    bl,0x17
c0022edc:	68 a1 b7 02 c0       	push   0xc002b7a1
c0022ee1:	e8 ef f9 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022ee6:	83 c4 10             	add    esp,0x10
c0022ee9:	eb 16                	jmp    c0022f01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022eeb:	3c 04                	cmp    al,0x4
c0022eed:	75 12                	jne    c0022f01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022eef:	83 ec 0c             	sub    esp,0xc
c0022ef2:	b3 08                	mov    bl,0x8
c0022ef4:	68 b7 b7 02 c0       	push   0xc002b7b7
c0022ef9:	e8 d7 f9 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022efe:	83 c4 10             	add    esp,0x10
c0022f01:	50                   	push   eax
c0022f02:	50                   	push   eax
c0022f03:	0f b6 c3             	movzx  eax,bl
c0022f06:	50                   	push   eax
c0022f07:	68 cf b7 02 c0       	push   0xc002b7cf
c0022f0c:	e8 c4 f9 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022f11:	83 c4 10             	add    esp,0x10
c0022f14:	83 c4 1c             	add    esp,0x1c
c0022f17:	88 d8                	mov    al,bl
c0022f19:	5b                   	pop    ebx
c0022f1a:	5e                   	pop    esi
c0022f1b:	5f                   	pop    edi
c0022f1c:	5d                   	pop    ebp
c0022f1d:	c3                   	ret    

c0022f1e <IDE::polling(unsigned char, unsigned int)>:
c0022f1e:	57                   	push   edi
c0022f1f:	56                   	push   esi
c0022f20:	53                   	push   ebx
c0022f21:	bb 04 00 00 00       	mov    ebx,0x4
c0022f26:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022f2a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022f2f:	52                   	push   edx
c0022f30:	6a 0c                	push   0xc
c0022f32:	56                   	push   esi
c0022f33:	57                   	push   edi
c0022f34:	e8 f9 f4 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c0022f39:	83 c4 10             	add    esp,0x10
c0022f3c:	4b                   	dec    ebx
c0022f3d:	75 f0                	jne    c0022f2f <IDE::polling(unsigned char, unsigned int)+0x11>
c0022f3f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022f44:	50                   	push   eax
c0022f45:	6a 0c                	push   0xc
c0022f47:	56                   	push   esi
c0022f48:	57                   	push   edi
c0022f49:	e8 e4 f4 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c0022f4e:	83 c4 10             	add    esp,0x10
c0022f51:	a8 01                	test   al,0x1
c0022f53:	74 12                	je     c0022f67 <IDE::polling(unsigned char, unsigned int)+0x49>
c0022f55:	83 ec 0c             	sub    esp,0xc
c0022f58:	68 e9 b7 02 c0       	push   0xc002b7e9
c0022f5d:	e8 73 f9 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0022f62:	83 c4 10             	add    esp,0x10
c0022f65:	eb 17                	jmp    c0022f7e <IDE::polling(unsigned char, unsigned int)+0x60>
c0022f67:	a8 20                	test   al,0x20
c0022f69:	75 0f                	jne    c0022f7a <IDE::polling(unsigned char, unsigned int)+0x5c>
c0022f6b:	4b                   	dec    ebx
c0022f6c:	74 10                	je     c0022f7e <IDE::polling(unsigned char, unsigned int)+0x60>
c0022f6e:	84 c0                	test   al,al
c0022f70:	78 d2                	js     c0022f44 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022f72:	a8 08                	test   al,0x8
c0022f74:	74 ce                	je     c0022f44 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022f76:	31 c0                	xor    eax,eax
c0022f78:	eb 06                	jmp    c0022f80 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022f7a:	b0 01                	mov    al,0x1
c0022f7c:	eb 02                	jmp    c0022f80 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022f7e:	b0 02                	mov    al,0x2
c0022f80:	5b                   	pop    ebx
c0022f81:	5e                   	pop    esi
c0022f82:	5f                   	pop    edi
c0022f83:	c3                   	ret    

c0022f84 <SATABus::close(int, int, void*)>:
c0022f84:	31 c0                	xor    eax,eax
c0022f86:	c3                   	ret    
c0022f87:	90                   	nop

c0022f88 <SATABus::detect()>:
c0022f88:	c3                   	ret    
c0022f89:	90                   	nop

c0022f8a <SATABus::SATABus()>:
c0022f8a:	83 ec 0c             	sub    esp,0xc
c0022f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f91:	83 ec 08             	sub    esp,0x8
c0022f94:	68 2c b8 02 c0       	push   0xc002b82c
c0022f99:	50                   	push   eax
c0022f9a:	e8 e9 10 ff ff       	call   c0014088 <HardDiskController::HardDiskController(char const*)>
c0022f9f:	83 c4 10             	add    esp,0x10
c0022fa2:	ba e8 b8 02 c0       	mov    edx,0xc002b8e8
c0022fa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fab:	89 10                	mov    DWORD PTR [eax],edx
c0022fad:	83 ec 0c             	sub    esp,0xc
c0022fb0:	6a 50                	push   0x50
c0022fb2:	e8 b4 cd fe ff       	call   c000fd6b <Phys::allocateContiguousPages(int)>
c0022fb7:	83 c4 10             	add    esp,0x10
c0022fba:	89 c2                	mov    edx,eax
c0022fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fc0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022fc6:	83 ec 0c             	sub    esp,0xc
c0022fc9:	6a 50                	push   0x50
c0022fcb:	e8 15 e9 fe ff       	call   c00118e5 <Virt::allocateKernelVirtualPages(int)>
c0022fd0:	83 c4 10             	add    esp,0x10
c0022fd3:	89 c2                	mov    edx,eax
c0022fd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fd9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022fdf:	e8 91 ea fe ff       	call   c0011a75 <Virt::getAKernelVAS()>
c0022fe4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022fe8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022fee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022ff2:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022ff8:	83 ec 0c             	sub    esp,0xc
c0022ffb:	6a 03                	push   0x3
c0022ffd:	6a 50                	push   0x50
c0022fff:	51                   	push   ecx
c0023000:	52                   	push   edx
c0023001:	50                   	push   eax
c0023002:	e8 9d f2 fe ff       	call   c00122a4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023007:	83 c4 20             	add    esp,0x20
c002300a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002300e:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023018:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002301e:	83 ec 04             	sub    esp,0x4
c0023021:	52                   	push   edx
c0023022:	50                   	push   eax
c0023023:	68 50 b8 02 c0       	push   0xc002b850
c0023028:	e8 a8 f8 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c002302d:	83 c4 10             	add    esp,0x10
c0023030:	90                   	nop
c0023031:	83 c4 0c             	add    esp,0xc
c0023034:	c3                   	ret    
c0023035:	90                   	nop

c0023036 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023036:	83 ec 0c             	sub    esp,0xc
c0023039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002303d:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023040:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023043:	09 c2                	or     edx,eax
c0023045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023049:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002304f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023051:	31 c0                	xor    eax,eax
c0023053:	c1 e9 08             	shr    ecx,0x8
c0023056:	83 e1 0f             	and    ecx,0xf
c0023059:	39 c8                	cmp    eax,ecx
c002305b:	74 0a                	je     c0023067 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002305d:	f6 c2 01             	test   dl,0x1
c0023060:	74 18                	je     c002307a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023062:	d1 ea                	shr    edx,1
c0023064:	40                   	inc    eax
c0023065:	eb f2                	jmp    c0023059 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023067:	83 ec 0c             	sub    esp,0xc
c002306a:	68 74 b8 02 c0       	push   0xc002b874
c002306f:	e8 41 6b ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c0023074:	83 c4 10             	add    esp,0x10
c0023077:	83 c8 ff             	or     eax,0xffffffff
c002307a:	83 c4 0c             	add    esp,0xc
c002307d:	c3                   	ret    

c002307e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002307e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023082:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023085:	89 c2                	mov    edx,eax
c0023087:	c1 ea 08             	shr    edx,0x8
c002308a:	83 e2 0f             	and    edx,0xf
c002308d:	fe ca                	dec    dl
c002308f:	75 31                	jne    c00230c2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023091:	83 e0 0f             	and    eax,0xf
c0023094:	3c 03                	cmp    al,0x3
c0023096:	75 2a                	jne    c00230c2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023098:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002309b:	b8 02 00 00 00       	mov    eax,0x2
c00230a0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00230a6:	74 1c                	je     c00230c4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00230a8:	b8 04 00 00 00       	mov    eax,0x4
c00230ad:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00230b3:	74 0f                	je     c00230c4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00230b5:	31 c0                	xor    eax,eax
c00230b7:	83 fa 03             	cmp    edx,0x3
c00230ba:	0f 94 c0             	sete   al
c00230bd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00230c1:	c3                   	ret    
c00230c2:	31 c0                	xor    eax,eax
c00230c4:	c3                   	ret    
c00230c5:	90                   	nop

c00230c6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00230c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00230ca:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00230cd:	0f ba e2 0f          	bt     edx,0xf
c00230d1:	72 f7                	jb     c00230ca <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00230d3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00230d6:	83 ca 10             	or     edx,0x10
c00230d9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00230dc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00230df:	83 ca 01             	or     edx,0x1
c00230e2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00230e5:	c3                   	ret    

c00230e6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00230e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00230ea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00230ed:	83 e2 fe             	and    edx,0xfffffffe
c00230f0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00230f3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00230f6:	83 e2 ef             	and    edx,0xffffffef
c00230f9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00230fc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00230ff:	0f ba e2 0e          	bt     edx,0xe
c0023103:	72 f7                	jb     c00230fc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023105:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023108:	0f ba e2 0f          	bt     edx,0xf
c002310c:	72 ee                	jb     c00230fc <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002310e:	c3                   	ret    
c002310f:	90                   	nop

c0023110 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023110:	55                   	push   ebp
c0023111:	57                   	push   edi
c0023112:	56                   	push   esi
c0023113:	53                   	push   ebx
c0023114:	83 ec 1c             	sub    esp,0x1c
c0023117:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002311b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002311f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023123:	53                   	push   ebx
c0023124:	89 fd                	mov    ebp,edi
c0023126:	56                   	push   esi
c0023127:	c1 e5 0a             	shl    ebp,0xa
c002312a:	e8 b7 ff ff ff       	call   c00230e6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002312f:	83 ec 0c             	sub    esp,0xc
c0023132:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023138:	01 e8                	add    eax,ebp
c002313a:	89 03                	mov    DWORD PTR [ebx],eax
c002313c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002313e:	68 00 04 00 00       	push   0x400
c0023143:	6a 00                	push   0x0
c0023145:	50                   	push   eax
c0023146:	e8 79 d5 fd ff       	call   c00006c4 <memset>
c002314b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023151:	89 fa                	mov    edx,edi
c0023153:	01 e8                	add    eax,ebp
c0023155:	c1 e7 0d             	shl    edi,0xd
c0023158:	89 03                	mov    DWORD PTR [ebx],eax
c002315a:	c1 e2 08             	shl    edx,0x8
c002315d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023164:	81 c2 00 80 00 00    	add    edx,0x8000
c002316a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c002316e:	89 d0                	mov    eax,edx
c0023170:	83 c4 1c             	add    esp,0x1c
c0023173:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023179:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002317c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002317f:	68 00 01 00 00       	push   0x100
c0023184:	6a 00                	push   0x0
c0023186:	50                   	push   eax
c0023187:	e8 38 d5 fd ff       	call   c00006c4 <memset>
c002318c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023190:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023196:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c002319c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00231a0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00231a3:	83 c4 10             	add    esp,0x10
c00231a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00231ad:	31 ff                	xor    edi,edi
c00231af:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00231b5:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00231bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00231bf:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00231c5:	83 c5 20             	add    ebp,0x20
c00231c8:	01 f8                	add    eax,edi
c00231ca:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00231cd:	52                   	push   edx
c00231ce:	68 00 01 00 00       	push   0x100
c00231d3:	6a 00                	push   0x0
c00231d5:	50                   	push   eax
c00231d6:	e8 e9 d4 fd ff       	call   c00006c4 <memset>
c00231db:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00231df:	83 c4 10             	add    esp,0x10
c00231e2:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00231e8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00231ef:	01 f8                	add    eax,edi
c00231f1:	81 c7 00 01 00 00    	add    edi,0x100
c00231f7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00231fa:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023200:	75 b3                	jne    c00231b5 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023202:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023206:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c002320a:	83 c4 1c             	add    esp,0x1c
c002320d:	5b                   	pop    ebx
c002320e:	5e                   	pop    esi
c002320f:	5f                   	pop    edi
c0023210:	5d                   	pop    ebp
c0023211:	e9 b0 fe ff ff       	jmp    c00230c6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023216 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023216:	55                   	push   ebp
c0023217:	57                   	push   edi
c0023218:	56                   	push   esi
c0023219:	53                   	push   ebx
c002321a:	31 db                	xor    ebx,ebx
c002321c:	83 ec 0c             	sub    esp,0xc
c002321f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023223:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023227:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002322a:	f7 c7 01 00 00 00    	test   edi,0x1
c0023230:	0f 84 94 00 00 00    	je     c00232ca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0023236:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002323a:	89 d8                	mov    eax,ebx
c002323c:	c1 e0 07             	shl    eax,0x7
c002323f:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023246:	55                   	push   ebp
c0023247:	56                   	push   esi
c0023248:	e8 31 fe ff ff       	call   c002307e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002324d:	59                   	pop    ecx
c002324e:	83 f8 01             	cmp    eax,0x1
c0023251:	5a                   	pop    edx
c0023252:	75 47                	jne    c002329b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c0023254:	51                   	push   ecx
c0023255:	51                   	push   ecx
c0023256:	53                   	push   ebx
c0023257:	68 99 b8 02 c0       	push   0xc002b899
c002325c:	e8 74 f6 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0023261:	83 c4 0c             	add    esp,0xc
c0023264:	53                   	push   ebx
c0023265:	55                   	push   ebp
c0023266:	56                   	push   esi
c0023267:	e8 a4 fe ff ff       	call   c0023110 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002326c:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0023273:	e8 ac c3 fe ff       	call   c000f624 <malloc>
c0023278:	89 04 24             	mov    DWORD PTR [esp],eax
c002327b:	89 c5                	mov    ebp,eax
c002327d:	e8 de 0c 00 00       	call   c0023f60 <SATA::SATA()>
c0023282:	58                   	pop    eax
c0023283:	5a                   	pop    edx
c0023284:	55                   	push   ebp
c0023285:	56                   	push   esi
c0023286:	e8 71 0a ff ff       	call   c0013cfc <Device::addChild(Device*)>
c002328b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002328e:	56                   	push   esi
c002328f:	6a 00                	push   0x0
c0023291:	53                   	push   ebx
c0023292:	55                   	push   ebp
c0023293:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023296:	83 c4 20             	add    esp,0x20
c0023299:	eb 2f                	jmp    c00232ca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c002329b:	83 f8 04             	cmp    eax,0x4
c002329e:	75 1a                	jne    c00232ba <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c00232a0:	52                   	push   edx
c00232a1:	52                   	push   edx
c00232a2:	53                   	push   ebx
c00232a3:	68 b0 b8 02 c0       	push   0xc002b8b0
c00232a8:	e8 28 f6 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00232ad:	83 c4 0c             	add    esp,0xc
c00232b0:	53                   	push   ebx
c00232b1:	55                   	push   ebp
c00232b2:	56                   	push   esi
c00232b3:	e8 58 fe ff ff       	call   c0023110 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00232b8:	eb 0d                	jmp    c00232c7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c00232ba:	50                   	push   eax
c00232bb:	50                   	push   eax
c00232bc:	53                   	push   ebx
c00232bd:	68 c9 b8 02 c0       	push   0xc002b8c9
c00232c2:	e8 0e f6 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00232c7:	83 c4 10             	add    esp,0x10
c00232ca:	d1 ef                	shr    edi,1
c00232cc:	43                   	inc    ebx
c00232cd:	83 fb 20             	cmp    ebx,0x20
c00232d0:	0f 85 54 ff ff ff    	jne    c002322a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00232d6:	83 c4 0c             	add    esp,0xc
c00232d9:	5b                   	pop    ebx
c00232da:	5e                   	pop    esi
c00232db:	5f                   	pop    edi
c00232dc:	5d                   	pop    ebp
c00232dd:	c3                   	ret    

c00232de <SATABus::open(int, int, void*)>:
c00232de:	83 ec 14             	sub    esp,0x14
c00232e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232e5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00232eb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00232f1:	52                   	push   edx
c00232f2:	50                   	push   eax
c00232f3:	e8 1e ff ff ff       	call   c0023216 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00232f8:	31 c0                	xor    eax,eax
c00232fa:	83 c4 1c             	add    esp,0x1c
c00232fd:	c3                   	ret    

c00232fe <ATA::close(int, int, void*)>:
c00232fe:	83 ec 0c             	sub    esp,0xc
c0023301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023305:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002330b:	85 c0                	test   eax,eax
c002330d:	74 0c                	je     c002331b <ATA::close(int, int, void*)+0x1d>
c002330f:	83 ec 0c             	sub    esp,0xc
c0023312:	8b 10                	mov    edx,DWORD PTR [eax]
c0023314:	50                   	push   eax
c0023315:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023318:	83 c4 10             	add    esp,0x10
c002331b:	31 c0                	xor    eax,eax
c002331d:	83 c4 0c             	add    esp,0xc
c0023320:	c3                   	ret    
c0023321:	90                   	nop

c0023322 <ATA::powerSaving(PowerSavingLevel)>:
c0023322:	c3                   	ret    
c0023323:	90                   	nop

c0023324 <ATA::ATA()>:
c0023324:	83 ec 0c             	sub    esp,0xc
c0023327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002332b:	83 ec 04             	sub    esp,0x4
c002332e:	68 00 02 00 00       	push   0x200
c0023333:	68 dc b9 02 c0       	push   0xc002b9dc
c0023338:	50                   	push   eax
c0023339:	e8 ce 0d ff ff       	call   c001410c <PhysicalDisk::PhysicalDisk(char const*, int)>
c002333e:	83 c4 10             	add    esp,0x10
c0023341:	ba 28 b9 02 c0       	mov    edx,0xc002b928
c0023346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002334a:	89 10                	mov    DWORD PTR [eax],edx
c002334c:	90                   	nop
c002334d:	83 c4 0c             	add    esp,0xc
c0023350:	c3                   	ret    
c0023351:	90                   	nop

c0023352 <ATA::flush(bool)>:
c0023352:	53                   	push   ebx
c0023353:	83 ec 08             	sub    esp,0x8
c0023356:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c002335b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002335f:	19 c0                	sbb    eax,eax
c0023361:	83 e0 fd             	and    eax,0xfffffffd
c0023364:	05 ea 00 00 00       	add    eax,0xea
c0023369:	50                   	push   eax
c002336a:	6a 07                	push   0x7
c002336c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023373:	50                   	push   eax
c0023374:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002337a:	e8 f3 ef ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002337f:	83 c4 0c             	add    esp,0xc
c0023382:	6a 00                	push   0x0
c0023384:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002338b:	50                   	push   eax
c002338c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023392:	e8 87 fb ff ff       	call   c0022f1e <IDE::polling(unsigned char, unsigned int)>
c0023397:	83 c4 18             	add    esp,0x18
c002339a:	5b                   	pop    ebx
c002339b:	c3                   	ret    

c002339c <ATA::readyForCommand()>:
c002339c:	56                   	push   esi
c002339d:	53                   	push   ebx
c002339e:	31 db                	xor    ebx,ebx
c00233a0:	50                   	push   eax
c00233a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00233a5:	50                   	push   eax
c00233a6:	6a 0c                	push   0xc
c00233a8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00233af:	50                   	push   eax
c00233b0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00233b6:	e8 77 f0 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c00233bb:	83 c4 10             	add    esp,0x10
c00233be:	a8 88                	test   al,0x88
c00233c0:	74 23                	je     c00233e5 <ATA::readyForCommand()+0x49>
c00233c2:	43                   	inc    ebx
c00233c3:	83 fb 63             	cmp    ebx,0x63
c00233c6:	7e dd                	jle    c00233a5 <ATA::readyForCommand()+0x9>
c00233c8:	51                   	push   ecx
c00233c9:	51                   	push   ecx
c00233ca:	6a 00                	push   0x0
c00233cc:	68 40 42 0f 00       	push   0xf4240
c00233d1:	e8 de a2 ff ff       	call   c001d6b4 <nanoSleep(unsigned long long)>
c00233d6:	83 c4 10             	add    esp,0x10
c00233d9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00233df:	75 c4                	jne    c00233a5 <ATA::readyForCommand()+0x9>
c00233e1:	31 c0                	xor    eax,eax
c00233e3:	eb 02                	jmp    c00233e7 <ATA::readyForCommand()+0x4b>
c00233e5:	b0 01                	mov    al,0x1
c00233e7:	5a                   	pop    edx
c00233e8:	5b                   	pop    ebx
c00233e9:	5e                   	pop    esi
c00233ea:	c3                   	ret    
c00233eb:	90                   	nop

c00233ec <ATA::access(unsigned long long, int, void*, bool)>:
c00233ec:	55                   	push   ebp
c00233ed:	57                   	push   edi
c00233ee:	56                   	push   esi
c00233ef:	53                   	push   ebx
c00233f0:	83 ec 2c             	sub    esp,0x2c
c00233f3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00233f7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00233fb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00233ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023403:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023407:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002340b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002340f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023415:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023419:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002341f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023423:	c1 e0 06             	shl    eax,0x6
c0023426:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002342e:	74 5d                	je     c002348d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023430:	89 fa                	mov    edx,edi
c0023432:	89 f0                	mov    eax,esi
c0023434:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023438:	c1 ea 1c             	shr    edx,0x1c
c002343b:	89 d1                	mov    ecx,edx
c002343d:	09 c1                	or     ecx,eax
c002343f:	74 25                	je     c0023466 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023441:	31 ed                	xor    ebp,ebp
c0023443:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002344a:	89 fa                	mov    edx,edi
c002344c:	89 f0                	mov    eax,esi
c002344e:	0f ad d0             	shrd   eax,edx,cl
c0023451:	d3 ea                	shr    edx,cl
c0023453:	f6 c1 20             	test   cl,0x20
c0023456:	74 02                	je     c002345a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023458:	89 d0                	mov    eax,edx
c002345a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002345e:	45                   	inc    ebp
c002345f:	83 fd 06             	cmp    ebp,0x6
c0023462:	75 df                	jne    c0023443 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023464:	eb 76                	jmp    c00234dc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023466:	89 f0                	mov    eax,esi
c0023468:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002346d:	89 fa                	mov    edx,edi
c002346f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023476:	0f ac d0 10          	shrd   eax,edx,0x10
c002347a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002347f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023483:	c1 ee 18             	shr    esi,0x18
c0023486:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002348b:	eb 56                	jmp    c00234e3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002348d:	6a 00                	push   0x0
c002348f:	6a 3f                	push   0x3f
c0023491:	57                   	push   edi
c0023492:	56                   	push   esi
c0023493:	e8 34 24 00 00       	call   c00258cc <__umoddi3>
c0023498:	83 c4 10             	add    esp,0x10
c002349b:	40                   	inc    eax
c002349c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00234a0:	6a 00                	push   0x0
c00234a2:	68 f0 03 00 00       	push   0x3f0
c00234a7:	57                   	push   edi
c00234a8:	56                   	push   esi
c00234a9:	e8 1e 23 00 00       	call   c00257cc <__udivdi3>
c00234ae:	83 c4 10             	add    esp,0x10
c00234b1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00234b6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00234bd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00234c2:	6a 00                	push   0x0
c00234c4:	6a 3f                	push   0x3f
c00234c6:	57                   	push   edi
c00234c7:	56                   	push   esi
c00234c8:	e8 ff 22 00 00       	call   c00257cc <__udivdi3>
c00234cd:	83 c4 10             	add    esp,0x10
c00234d0:	89 c6                	mov    esi,eax
c00234d2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00234d7:	83 e6 0f             	and    esi,0xf
c00234da:	eb 07                	jmp    c00234e3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00234dc:	31 f6                	xor    esi,esi
c00234de:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00234e3:	bf 01 00 00 00       	mov    edi,0x1
c00234e8:	50                   	push   eax
c00234e9:	6a 00                	push   0x0
c00234eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00234f2:	50                   	push   eax
c00234f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00234f7:	e8 82 f0 ff ff       	call   c002257e <IDE::enableIRQs(unsigned char, bool)>
c00234fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00234ff:	e8 98 fe ff ff       	call   c002339c <ATA::readyForCommand()>
c0023504:	83 c4 10             	add    esp,0x10
c0023507:	84 c0                	test   al,al
c0023509:	0f 84 50 02 00 00    	je     c002375f <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002350f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023515:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002351b:	c1 e0 04             	shl    eax,0x4
c002351e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023525:	09 c6                	or     esi,eax
c0023527:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c002352c:	75 05                	jne    c0023533 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002352e:	83 ce a0             	or     esi,0xffffffa0
c0023531:	eb 03                	jmp    c0023536 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023533:	83 ce e0             	or     esi,0xffffffe0
c0023536:	89 f0                	mov    eax,esi
c0023538:	0f b6 f0             	movzx  esi,al
c002353b:	56                   	push   esi
c002353c:	6a 06                	push   0x6
c002353e:	51                   	push   ecx
c002353f:	52                   	push   edx
c0023540:	e8 2d ee ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023545:	83 c4 10             	add    esp,0x10
c0023548:	6a 00                	push   0x0
c002354a:	6a 01                	push   0x1
c002354c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023553:	50                   	push   eax
c0023554:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002355a:	e8 13 ee ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002355f:	83 c4 10             	add    esp,0x10
c0023562:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023567:	75 6e                	jne    c00235d7 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023569:	6a 00                	push   0x0
c002356b:	6a 08                	push   0x8
c002356d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023574:	50                   	push   eax
c0023575:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002357b:	e8 f2 ed ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023580:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023585:	50                   	push   eax
c0023586:	6a 09                	push   0x9
c0023588:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002358f:	50                   	push   eax
c0023590:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023596:	e8 d7 ed ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002359b:	83 c4 20             	add    esp,0x20
c002359e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00235a3:	50                   	push   eax
c00235a4:	6a 0a                	push   0xa
c00235a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00235ad:	50                   	push   eax
c00235ae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00235b4:	e8 b9 ed ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235b9:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00235be:	50                   	push   eax
c00235bf:	6a 0b                	push   0xb
c00235c1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00235c8:	50                   	push   eax
c00235c9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00235cf:	e8 9e ed ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235d4:	83 c4 20             	add    esp,0x20
c00235d7:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00235dc:	50                   	push   eax
c00235dd:	6a 02                	push   0x2
c00235df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00235e6:	50                   	push   eax
c00235e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00235ed:	e8 80 ed ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235f2:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00235f7:	50                   	push   eax
c00235f8:	6a 03                	push   0x3
c00235fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023601:	50                   	push   eax
c0023602:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023608:	e8 65 ed ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002360d:	83 c4 20             	add    esp,0x20
c0023610:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023615:	50                   	push   eax
c0023616:	6a 04                	push   0x4
c0023618:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002361f:	50                   	push   eax
c0023620:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023626:	e8 47 ed ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002362b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023630:	50                   	push   eax
c0023631:	6a 05                	push   0x5
c0023633:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002363a:	50                   	push   eax
c002363b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023641:	e8 2c ed ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023646:	83 c4 20             	add    esp,0x20
c0023649:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002364e:	0f 94 c0             	sete   al
c0023651:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023656:	74 09                	je     c0023661 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023658:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c002365f:	eb 07                	jmp    c0023668 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023661:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023668:	0f b6 c0             	movzx  eax,al
c002366b:	50                   	push   eax
c002366c:	6a 07                	push   0x7
c002366e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023675:	50                   	push   eax
c0023676:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002367c:	e8 f1 ec ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023681:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023685:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023689:	83 c4 10             	add    esp,0x10
c002368c:	85 f6                	test   esi,esi
c002368e:	0f 84 ac 00 00 00    	je     c0023740 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c0023694:	50                   	push   eax
c0023695:	6a 01                	push   0x1
c0023697:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002369e:	50                   	push   eax
c002369f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236a5:	e8 74 f8 ff ff       	call   c0022f1e <IDE::polling(unsigned char, unsigned int)>
c00236aa:	83 c4 10             	add    esp,0x10
c00236ad:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00236b3:	84 c0                	test   al,al
c00236b5:	74 20                	je     c00236d7 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c00236b7:	0f b6 f8             	movzx  edi,al
c00236ba:	0f b6 d2             	movzx  edx,dl
c00236bd:	57                   	push   edi
c00236be:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00236c5:	50                   	push   eax
c00236c6:	52                   	push   edx
c00236c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236cd:	e8 b6 f6 ff ff       	call   c0022d88 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00236d2:	e9 85 00 00 00       	jmp    c002375c <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00236d7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00236dc:	74 41                	je     c002371f <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00236de:	31 c9                	xor    ecx,ecx
c00236e0:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00236e4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00236e8:	50                   	push   eax
c00236e9:	50                   	push   eax
c00236ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00236f1:	50                   	push   eax
c00236f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00236f8:	e8 63 ec ff ff       	call   c0022360 <IDE::getBase(unsigned char)>
c00236fd:	89 c2                	mov    edx,eax
c00236ff:	89 e8                	mov    eax,ebp
c0023701:	66 ef                	out    dx,ax
c0023703:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023707:	83 c4 10             	add    esp,0x10
c002370a:	41                   	inc    ecx
c002370b:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0023711:	75 cd                	jne    c00236e0 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0023713:	4e                   	dec    esi
c0023714:	81 c7 00 02 00 00    	add    edi,0x200
c002371a:	e9 6d ff ff ff       	jmp    c002368c <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c002371f:	0f b6 d2             	movzx  edx,dl
c0023722:	51                   	push   ecx
c0023723:	51                   	push   ecx
c0023724:	52                   	push   edx
c0023725:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002372b:	e8 30 ec ff ff       	call   c0022360 <IDE::getBase(unsigned char)>
c0023730:	b9 00 01 00 00       	mov    ecx,0x100
c0023735:	89 c2                	mov    edx,eax
c0023737:	fc                   	cld    
c0023738:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002373b:	83 c4 10             	add    esp,0x10
c002373e:	eb d3                	jmp    c0023713 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0023740:	31 ff                	xor    edi,edi
c0023742:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023747:	74 16                	je     c002375f <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0023749:	50                   	push   eax
c002374a:	50                   	push   eax
c002374b:	31 c0                	xor    eax,eax
c002374d:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023752:	0f 94 c0             	sete   al
c0023755:	50                   	push   eax
c0023756:	53                   	push   ebx
c0023757:	e8 f6 fb ff ff       	call   c0023352 <ATA::flush(bool)>
c002375c:	83 c4 10             	add    esp,0x10
c002375f:	83 c4 2c             	add    esp,0x2c
c0023762:	89 f8                	mov    eax,edi
c0023764:	5b                   	pop    ebx
c0023765:	5e                   	pop    esi
c0023766:	5f                   	pop    edi
c0023767:	5d                   	pop    ebp
c0023768:	c3                   	ret    
c0023769:	90                   	nop

c002376a <ATA::read(unsigned long long, int, void*)>:
c002376a:	57                   	push   edi
c002376b:	b8 04 00 00 00       	mov    eax,0x4
c0023770:	56                   	push   esi
c0023771:	53                   	push   ebx
c0023772:	83 ec 10             	sub    esp,0x10
c0023775:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023779:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002377d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023780:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023784:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023788:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002378e:	77 3b                	ja     c00237cb <ATA::read(unsigned long long, int, void*)+0x61>
c0023790:	b8 06 00 00 00       	mov    eax,0x6
c0023795:	85 d2                	test   edx,edx
c0023797:	74 32                	je     c00237cb <ATA::read(unsigned long long, int, void*)+0x61>
c0023799:	50                   	push   eax
c002379a:	50                   	push   eax
c002379b:	6a 00                	push   0x0
c002379d:	52                   	push   edx
c002379e:	53                   	push   ebx
c002379f:	57                   	push   edi
c00237a0:	56                   	push   esi
c00237a1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00237a5:	e8 42 fc ff ff       	call   c00233ec <ATA::access(unsigned long long, int, void*, bool)>
c00237aa:	83 c4 20             	add    esp,0x20
c00237ad:	85 c0                	test   eax,eax
c00237af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00237b3:	75 11                	jne    c00237c6 <ATA::read(unsigned long long, int, void*)+0x5c>
c00237b5:	01 1d 48 f2 02 c0    	add    DWORD PTR ds:0xc002f248,ebx
c00237bb:	e8 7a cf fe ff       	call   c001073a <VgaText::updateDiskUsage()>
c00237c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00237c4:	eb 05                	jmp    c00237cb <ATA::read(unsigned long long, int, void*)+0x61>
c00237c6:	b8 01 00 00 00       	mov    eax,0x1
c00237cb:	83 c4 10             	add    esp,0x10
c00237ce:	5b                   	pop    ebx
c00237cf:	5e                   	pop    esi
c00237d0:	5f                   	pop    edi
c00237d1:	c3                   	ret    

c00237d2 <ATA::write(unsigned long long, int, void*)>:
c00237d2:	57                   	push   edi
c00237d3:	b8 04 00 00 00       	mov    eax,0x4
c00237d8:	56                   	push   esi
c00237d9:	53                   	push   ebx
c00237da:	83 ec 10             	sub    esp,0x10
c00237dd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00237e1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00237e5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00237e8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00237ec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00237f0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00237f6:	77 3b                	ja     c0023833 <ATA::write(unsigned long long, int, void*)+0x61>
c00237f8:	b8 06 00 00 00       	mov    eax,0x6
c00237fd:	85 d2                	test   edx,edx
c00237ff:	74 32                	je     c0023833 <ATA::write(unsigned long long, int, void*)+0x61>
c0023801:	50                   	push   eax
c0023802:	50                   	push   eax
c0023803:	6a 01                	push   0x1
c0023805:	52                   	push   edx
c0023806:	53                   	push   ebx
c0023807:	57                   	push   edi
c0023808:	56                   	push   esi
c0023809:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002380d:	e8 da fb ff ff       	call   c00233ec <ATA::access(unsigned long long, int, void*, bool)>
c0023812:	83 c4 20             	add    esp,0x20
c0023815:	85 c0                	test   eax,eax
c0023817:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002381b:	75 11                	jne    c002382e <ATA::write(unsigned long long, int, void*)+0x5c>
c002381d:	01 1d 44 f2 02 c0    	add    DWORD PTR ds:0xc002f244,ebx
c0023823:	e8 12 cf fe ff       	call   c001073a <VgaText::updateDiskUsage()>
c0023828:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002382c:	eb 05                	jmp    c0023833 <ATA::write(unsigned long long, int, void*)+0x61>
c002382e:	b8 01 00 00 00       	mov    eax,0x1
c0023833:	83 c4 10             	add    esp,0x10
c0023836:	5b                   	pop    ebx
c0023837:	5e                   	pop    esi
c0023838:	5f                   	pop    edi
c0023839:	c3                   	ret    

c002383a <ATA::detectCHS()>:
c002383a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002383e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0023844:	c1 e0 06             	shl    eax,0x6
c0023847:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002384d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0023857:	c7 44 24 04 0c b9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b90c
c002385f:	e9 51 63 ff ff       	jmp    c0019bb5 <Krnl::panic(char const*)>

c0023864 <ATA::open(int, int, void*)>:
c0023864:	53                   	push   ebx
c0023865:	83 ec 08             	sub    esp,0x8
c0023868:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002386c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023870:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023874:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002387a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023880:	c1 e0 06             	shl    eax,0x6
c0023883:	01 d0                	add    eax,edx
c0023885:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002388c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0023892:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0023899:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00238a3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00238a9:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00238b0:	75 0c                	jne    c00238be <ATA::open(int, int, void*)+0x5a>
c00238b2:	83 ec 0c             	sub    esp,0xc
c00238b5:	53                   	push   ebx
c00238b6:	e8 7f ff ff ff       	call   c002383a <ATA::detectCHS()>
c00238bb:	83 c4 10             	add    esp,0x10
c00238be:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00238c4:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00238ca:	c1 e0 06             	shl    eax,0x6
c00238cd:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00238d4:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00238de:	d1 e8                	shr    eax,1
c00238e0:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00238e6:	6a 04                	push   0x4
c00238e8:	6a 0c                	push   0xc
c00238ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00238f1:	50                   	push   eax
c00238f2:	52                   	push   edx
c00238f3:	e8 7a ea ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238f8:	90                   	nop
c00238f9:	90                   	nop
c00238fa:	6a 00                	push   0x0
c00238fc:	6a 0c                	push   0xc
c00238fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023905:	50                   	push   eax
c0023906:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002390c:	e8 61 ea ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023911:	83 c4 14             	add    esp,0x14
c0023914:	53                   	push   ebx
c0023915:	e8 5a 08 ff ff       	call   c0014174 <PhysicalDisk::startCache()>
c002391a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002391d:	e8 7c 28 ff ff       	call   c001619e <createPartitionsForDisk(PhysicalDisk*)>
c0023922:	31 c0                	xor    eax,eax
c0023924:	83 c4 18             	add    esp,0x18
c0023927:	5b                   	pop    ebx
c0023928:	c3                   	ret    
c0023929:	90                   	nop

c002392a <ATAPI::write(unsigned long long, int, void*)>:
c002392a:	b8 03 00 00 00       	mov    eax,0x3
c002392f:	c3                   	ret    

c0023930 <ATAPI::close(int, int, void*)>:
c0023930:	83 ec 0c             	sub    esp,0xc
c0023933:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023937:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002393d:	85 c0                	test   eax,eax
c002393f:	74 0c                	je     c002394d <ATAPI::close(int, int, void*)+0x1d>
c0023941:	83 ec 0c             	sub    esp,0xc
c0023944:	8b 10                	mov    edx,DWORD PTR [eax]
c0023946:	50                   	push   eax
c0023947:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002394a:	83 c4 10             	add    esp,0x10
c002394d:	31 c0                	xor    eax,eax
c002394f:	83 c4 0c             	add    esp,0xc
c0023952:	c3                   	ret    
c0023953:	90                   	nop

c0023954 <ATAPI::ATAPI()>:
c0023954:	83 ec 0c             	sub    esp,0xc
c0023957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002395b:	83 ec 04             	sub    esp,0x4
c002395e:	68 00 08 00 00       	push   0x800
c0023963:	68 54 b9 02 c0       	push   0xc002b954
c0023968:	50                   	push   eax
c0023969:	e8 9e 07 ff ff       	call   c001410c <PhysicalDisk::PhysicalDisk(char const*, int)>
c002396e:	83 c4 10             	add    esp,0x10
c0023971:	ba 94 b9 02 c0       	mov    edx,0xc002b994
c0023976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002397a:	89 10                	mov    DWORD PTR [eax],edx
c002397c:	90                   	nop
c002397d:	83 c4 0c             	add    esp,0xc
c0023980:	c3                   	ret    
c0023981:	90                   	nop

c0023982 <ATAPI::readyForCommand()>:
c0023982:	56                   	push   esi
c0023983:	53                   	push   ebx
c0023984:	31 db                	xor    ebx,ebx
c0023986:	50                   	push   eax
c0023987:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002398b:	50                   	push   eax
c002398c:	6a 0c                	push   0xc
c002398e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023995:	50                   	push   eax
c0023996:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002399c:	e8 91 ea ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c00239a1:	83 c4 10             	add    esp,0x10
c00239a4:	a8 88                	test   al,0x88
c00239a6:	74 23                	je     c00239cb <ATAPI::readyForCommand()+0x49>
c00239a8:	43                   	inc    ebx
c00239a9:	83 fb 63             	cmp    ebx,0x63
c00239ac:	7e dd                	jle    c002398b <ATAPI::readyForCommand()+0x9>
c00239ae:	51                   	push   ecx
c00239af:	51                   	push   ecx
c00239b0:	6a 00                	push   0x0
c00239b2:	68 40 42 0f 00       	push   0xf4240
c00239b7:	e8 f8 9c ff ff       	call   c001d6b4 <nanoSleep(unsigned long long)>
c00239bc:	83 c4 10             	add    esp,0x10
c00239bf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00239c5:	75 c4                	jne    c002398b <ATAPI::readyForCommand()+0x9>
c00239c7:	31 c0                	xor    eax,eax
c00239c9:	eb 02                	jmp    c00239cd <ATAPI::readyForCommand()+0x4b>
c00239cb:	b0 01                	mov    al,0x1
c00239cd:	5a                   	pop    edx
c00239ce:	5b                   	pop    ebx
c00239cf:	5e                   	pop    esi
c00239d0:	c3                   	ret    
c00239d1:	90                   	nop

c00239d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00239d2:	55                   	push   ebp
c00239d3:	57                   	push   edi
c00239d4:	56                   	push   esi
c00239d5:	53                   	push   ebx
c00239d6:	83 ec 20             	sub    esp,0x20
c00239d9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00239dd:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00239e1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00239e5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00239e9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00239ed:	6a 01                	push   0x1
c00239ef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00239f6:	50                   	push   eax
c00239f7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00239fd:	e8 7c eb ff ff       	call   c002257e <IDE::enableIRQs(unsigned char, bool)>
c0023a02:	5e                   	pop    esi
c0023a03:	58                   	pop    eax
c0023a04:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023a0b:	50                   	push   eax
c0023a0c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023a12:	e8 35 e9 ff ff       	call   c002234c <IDE::prepareInterrupt(unsigned char)>
c0023a17:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023a1a:	e8 63 ff ff ff       	call   c0023982 <ATAPI::readyForCommand()>
c0023a1f:	83 c4 10             	add    esp,0x10
c0023a22:	84 c0                	test   al,al
c0023a24:	75 0a                	jne    c0023a30 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0023a26:	bb 01 00 00 00       	mov    ebx,0x1
c0023a2b:	e9 57 02 00 00       	jmp    c0023c87 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023a30:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0023a36:	c1 e0 04             	shl    eax,0x4
c0023a39:	0f b6 c0             	movzx  eax,al
c0023a3c:	50                   	push   eax
c0023a3d:	6a 06                	push   0x6
c0023a3f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023a46:	50                   	push   eax
c0023a47:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023a4d:	e8 20 e9 ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a52:	6a 00                	push   0x0
c0023a54:	6a 01                	push   0x1
c0023a56:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023a5d:	50                   	push   eax
c0023a5e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023a64:	e8 09 e9 ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a69:	83 c4 20             	add    esp,0x20
c0023a6c:	0f b6 c3             	movzx  eax,bl
c0023a6f:	0f b6 df             	movzx  ebx,bh
c0023a72:	50                   	push   eax
c0023a73:	6a 04                	push   0x4
c0023a75:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023a7c:	50                   	push   eax
c0023a7d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023a83:	e8 ea e8 ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a88:	53                   	push   ebx
c0023a89:	6a 05                	push   0x5
c0023a8b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023a92:	50                   	push   eax
c0023a93:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023a99:	e8 d4 e8 ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a9e:	83 c4 20             	add    esp,0x20
c0023aa1:	68 a0 00 00 00       	push   0xa0
c0023aa6:	6a 07                	push   0x7
c0023aa8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023aaf:	50                   	push   eax
c0023ab0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023ab6:	e8 b7 e8 ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023abb:	83 c4 0c             	add    esp,0xc
c0023abe:	6a 01                	push   0x1
c0023ac0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023ac7:	50                   	push   eax
c0023ac8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023ace:	e8 4b f4 ff ff       	call   c0022f1e <IDE::polling(unsigned char, unsigned int)>
c0023ad3:	83 c4 10             	add    esp,0x10
c0023ad6:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0023adc:	84 c0                	test   al,al
c0023ade:	74 23                	je     c0023b03 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0023ae0:	0f b6 d8             	movzx  ebx,al
c0023ae3:	0f b6 d2             	movzx  edx,dl
c0023ae6:	53                   	push   ebx
c0023ae7:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0023aee:	50                   	push   eax
c0023aef:	52                   	push   edx
c0023af0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023af6:	e8 8d f2 ff ff       	call   c0022d88 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023afb:	83 c4 10             	add    esp,0x10
c0023afe:	e9 84 01 00 00       	jmp    c0023c87 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023b03:	0f b6 d2             	movzx  edx,dl
c0023b06:	53                   	push   ebx
c0023b07:	53                   	push   ebx
c0023b08:	52                   	push   edx
c0023b09:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b0f:	e8 4c e8 ff ff       	call   c0022360 <IDE::getBase(unsigned char)>
c0023b14:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023b18:	b9 06 00 00 00       	mov    ecx,0x6
c0023b1d:	89 c2                	mov    edx,eax
c0023b1f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0023b22:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0023b26:	83 c4 10             	add    esp,0x10
c0023b29:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023b2f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023b36:	85 db                	test   ebx,ebx
c0023b38:	0f 84 ec 00 00 00    	je     c0023c2a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023b3e:	51                   	push   ecx
c0023b3f:	51                   	push   ecx
c0023b40:	52                   	push   edx
c0023b41:	50                   	push   eax
c0023b42:	e8 99 e9 ff ff       	call   c00224e0 <IDE::waitInterrupt(unsigned char)>
c0023b47:	83 c4 10             	add    esp,0x10
c0023b4a:	84 c0                	test   al,al
c0023b4c:	0f 84 d4 fe ff ff    	je     c0023a26 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023b52:	56                   	push   esi
c0023b53:	56                   	push   esi
c0023b54:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b5b:	50                   	push   eax
c0023b5c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b62:	e8 e5 e7 ff ff       	call   c002234c <IDE::prepareInterrupt(unsigned char)>
c0023b67:	83 c4 0c             	add    esp,0xc
c0023b6a:	6a 04                	push   0x4
c0023b6c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b73:	50                   	push   eax
c0023b74:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b7a:	e8 b3 e8 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c0023b7f:	83 c4 0c             	add    esp,0xc
c0023b82:	89 c6                	mov    esi,eax
c0023b84:	6a 05                	push   0x5
c0023b86:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023b8d:	50                   	push   eax
c0023b8e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023b94:	e8 99 e8 ff ff       	call   c0022432 <IDE::read(unsigned char, unsigned char)>
c0023b99:	89 f1                	mov    ecx,esi
c0023b9b:	0f b6 c0             	movzx  eax,al
c0023b9e:	0f b6 f1             	movzx  esi,cl
c0023ba1:	c1 e0 08             	shl    eax,0x8
c0023ba4:	09 c6                	or     esi,eax
c0023ba6:	d1 fe                	sar    esi,1
c0023ba8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0023bac:	83 c4 10             	add    esp,0x10
c0023baf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0023bb4:	74 41                	je     c0023bf7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0023bb6:	31 c9                	xor    ecx,ecx
c0023bb8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023bbe:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023bc5:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0023bc9:	75 0a                	jne    c0023bd5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0023bcb:	01 c9                	add    ecx,ecx
c0023bcd:	01 cd                	add    ebp,ecx
c0023bcf:	4b                   	dec    ebx
c0023bd0:	e9 54 ff ff ff       	jmp    c0023b29 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0023bd5:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0023bda:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023bde:	51                   	push   ecx
c0023bdf:	51                   	push   ecx
c0023be0:	52                   	push   edx
c0023be1:	50                   	push   eax
c0023be2:	e8 79 e7 ff ff       	call   c0022360 <IDE::getBase(unsigned char)>
c0023be7:	89 c2                	mov    edx,eax
c0023be9:	89 f0                	mov    eax,esi
c0023beb:	66 ef                	out    dx,ax
c0023bed:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023bf1:	83 c4 10             	add    esp,0x10
c0023bf4:	41                   	inc    ecx
c0023bf5:	eb c1                	jmp    c0023bb8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0023bf7:	31 f6                	xor    esi,esi
c0023bf9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023bff:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0023c06:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0023c0a:	75 06                	jne    c0023c12 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0023c0c:	01 f6                	add    esi,esi
c0023c0e:	01 f5                	add    ebp,esi
c0023c10:	eb bd                	jmp    c0023bcf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0023c12:	51                   	push   ecx
c0023c13:	51                   	push   ecx
c0023c14:	52                   	push   edx
c0023c15:	50                   	push   eax
c0023c16:	e8 45 e7 ff ff       	call   c0022360 <IDE::getBase(unsigned char)>
c0023c1b:	89 c2                	mov    edx,eax
c0023c1d:	66 ed                	in     ax,dx
c0023c1f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0023c24:	83 c4 10             	add    esp,0x10
c0023c27:	46                   	inc    esi
c0023c28:	eb cf                	jmp    c0023bf9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0023c2a:	51                   	push   ecx
c0023c2b:	51                   	push   ecx
c0023c2c:	52                   	push   edx
c0023c2d:	50                   	push   eax
c0023c2e:	e8 ad e8 ff ff       	call   c00224e0 <IDE::waitInterrupt(unsigned char)>
c0023c33:	83 c4 10             	add    esp,0x10
c0023c36:	84 c0                	test   al,al
c0023c38:	0f 84 e8 fd ff ff    	je     c0023a26 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023c3e:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023c43:	52                   	push   edx
c0023c44:	52                   	push   edx
c0023c45:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023c4c:	50                   	push   eax
c0023c4d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023c53:	e8 f4 e6 ff ff       	call   c002234c <IDE::prepareInterrupt(unsigned char)>
c0023c58:	83 c4 10             	add    esp,0x10
c0023c5b:	50                   	push   eax
c0023c5c:	50                   	push   eax
c0023c5d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023c64:	50                   	push   eax
c0023c65:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023c6b:	e8 f0 e6 ff ff       	call   c0022360 <IDE::getBase(unsigned char)>
c0023c70:	8d 50 07             	lea    edx,[eax+0x7]
c0023c73:	ec                   	in     al,dx
c0023c74:	83 c4 10             	add    esp,0x10
c0023c77:	a8 88                	test   al,0x88
c0023c79:	74 0a                	je     c0023c85 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0023c7b:	4b                   	dec    ebx
c0023c7c:	75 dd                	jne    c0023c5b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0023c7e:	bb 02 00 00 00       	mov    ebx,0x2
c0023c83:	eb 02                	jmp    c0023c87 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023c85:	31 db                	xor    ebx,ebx
c0023c87:	83 c4 1c             	add    esp,0x1c
c0023c8a:	89 d8                	mov    eax,ebx
c0023c8c:	5b                   	pop    ebx
c0023c8d:	5e                   	pop    esi
c0023c8e:	5f                   	pop    edi
c0023c8f:	5d                   	pop    ebp
c0023c90:	c3                   	ret    
c0023c91:	90                   	nop

c0023c92 <ATAPI::diskRemoved()>:
c0023c92:	83 ec 18             	sub    esp,0x18
c0023c95:	68 5f b9 02 c0       	push   0xc002b95f
c0023c9a:	e8 36 ec fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0023c9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023ca3:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0023caa:	83 c4 1c             	add    esp,0x1c
c0023cad:	c3                   	ret    

c0023cae <ATAPI::eject()>:
c0023cae:	57                   	push   edi
c0023caf:	b9 03 00 00 00       	mov    ecx,0x3
c0023cb4:	53                   	push   ebx
c0023cb5:	83 ec 14             	sub    esp,0x14
c0023cb8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0023cbc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023cc0:	fc                   	cld    
c0023cc1:	31 c0                	xor    eax,eax
c0023cc3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023cc5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0023cca:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0023ccf:	50                   	push   eax
c0023cd0:	50                   	push   eax
c0023cd1:	6a 00                	push   0x0
c0023cd3:	6a 00                	push   0x0
c0023cd5:	6a 00                	push   0x0
c0023cd7:	6a 02                	push   0x2
c0023cd9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023cdd:	50                   	push   eax
c0023cde:	53                   	push   ebx
c0023cdf:	e8 ee fc ff ff       	call   c00239d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023ce4:	83 c4 14             	add    esp,0x14
c0023ce7:	53                   	push   ebx
c0023ce8:	e8 a5 ff ff ff       	call   c0023c92 <ATAPI::diskRemoved()>
c0023ced:	83 c4 24             	add    esp,0x24
c0023cf0:	5b                   	pop    ebx
c0023cf1:	5f                   	pop    edi
c0023cf2:	c3                   	ret    
c0023cf3:	90                   	nop

c0023cf4 <ATAPI::diskInserted()>:
c0023cf4:	53                   	push   ebx
c0023cf5:	83 ec 14             	sub    esp,0x14
c0023cf8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023cfc:	68 75 b9 02 c0       	push   0xc002b975
c0023d01:	e8 cf eb fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0023d06:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0023d0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023d10:	e8 5f 04 ff ff       	call   c0014174 <PhysicalDisk::startCache()>
c0023d15:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0023d19:	83 c4 18             	add    esp,0x18
c0023d1c:	5b                   	pop    ebx
c0023d1d:	e9 7c 24 ff ff       	jmp    c001619e <createPartitionsForDisk(PhysicalDisk*)>

c0023d22 <ATAPI::detectMedia()>:
c0023d22:	56                   	push   esi
c0023d23:	53                   	push   ebx
c0023d24:	83 ec 28             	sub    esp,0x28
c0023d27:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023d2b:	6a 0c                	push   0xc
c0023d2d:	6a 00                	push   0x0
c0023d2f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0023d33:	56                   	push   esi
c0023d34:	e8 8b c9 fd ff       	call   c00006c4 <memset>
c0023d39:	58                   	pop    eax
c0023d3a:	5a                   	pop    edx
c0023d3b:	6a 00                	push   0x0
c0023d3d:	6a 00                	push   0x0
c0023d3f:	6a 00                	push   0x0
c0023d41:	6a 00                	push   0x0
c0023d43:	56                   	push   esi
c0023d44:	53                   	push   ebx
c0023d45:	e8 88 fc ff ff       	call   c00239d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023d4a:	83 c4 1c             	add    esp,0x1c
c0023d4d:	6a 0c                	push   0xc
c0023d4f:	6a 00                	push   0x0
c0023d51:	56                   	push   esi
c0023d52:	e8 6d c9 fd ff       	call   c00006c4 <memset>
c0023d57:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0023d5c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0023d61:	59                   	pop    ecx
c0023d62:	58                   	pop    eax
c0023d63:	6a 01                	push   0x1
c0023d65:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0023d69:	50                   	push   eax
c0023d6a:	6a 00                	push   0x0
c0023d6c:	6a 12                	push   0x12
c0023d6e:	56                   	push   esi
c0023d6f:	53                   	push   ebx
c0023d70:	e8 5d fc ff ff       	call   c00239d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023d75:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0023d79:	83 c4 20             	add    esp,0x20
c0023d7c:	83 e0 7f             	and    eax,0x7f
c0023d7f:	3c 70                	cmp    al,0x70
c0023d81:	74 15                	je     c0023d98 <ATAPI::detectMedia()+0x76>
c0023d83:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023d8a:	75 0c                	jne    c0023d98 <ATAPI::detectMedia()+0x76>
c0023d8c:	83 ec 0c             	sub    esp,0xc
c0023d8f:	53                   	push   ebx
c0023d90:	e8 5f ff ff ff       	call   c0023cf4 <ATAPI::diskInserted()>
c0023d95:	83 c4 10             	add    esp,0x10
c0023d98:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023d9c:	83 e0 0f             	and    eax,0xf
c0023d9f:	3c 02                	cmp    al,0x2
c0023da1:	75 1b                	jne    c0023dbe <ATAPI::detectMedia()+0x9c>
c0023da3:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0023da8:	75 2d                	jne    c0023dd7 <ATAPI::detectMedia()+0xb5>
c0023daa:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023db1:	74 24                	je     c0023dd7 <ATAPI::detectMedia()+0xb5>
c0023db3:	83 ec 0c             	sub    esp,0xc
c0023db6:	53                   	push   ebx
c0023db7:	e8 d6 fe ff ff       	call   c0023c92 <ATAPI::diskRemoved()>
c0023dbc:	eb 16                	jmp    c0023dd4 <ATAPI::detectMedia()+0xb2>
c0023dbe:	84 c0                	test   al,al
c0023dc0:	75 15                	jne    c0023dd7 <ATAPI::detectMedia()+0xb5>
c0023dc2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0023dc9:	75 0c                	jne    c0023dd7 <ATAPI::detectMedia()+0xb5>
c0023dcb:	83 ec 0c             	sub    esp,0xc
c0023dce:	53                   	push   ebx
c0023dcf:	e8 20 ff ff ff       	call   c0023cf4 <ATAPI::diskInserted()>
c0023dd4:	83 c4 10             	add    esp,0x10
c0023dd7:	83 c4 24             	add    esp,0x24
c0023dda:	5b                   	pop    ebx
c0023ddb:	5e                   	pop    esi
c0023ddc:	c3                   	ret    
c0023ddd:	90                   	nop

c0023dde <ATAPI::open(int, int, void*)>:
c0023dde:	53                   	push   ebx
c0023ddf:	83 ec 08             	sub    esp,0x8
c0023de2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023dea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023dee:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023df4:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023dfa:	c1 e0 06             	shl    eax,0x6
c0023dfd:	01 d0                	add    eax,edx
c0023dff:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0023e06:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0023e0c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0023e13:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023e1d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023e23:	6a 04                	push   0x4
c0023e25:	6a 0c                	push   0xc
c0023e27:	51                   	push   ecx
c0023e28:	52                   	push   edx
c0023e29:	e8 44 e5 ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e2e:	90                   	nop
c0023e2f:	90                   	nop
c0023e30:	6a 00                	push   0x0
c0023e32:	6a 0c                	push   0xc
c0023e34:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e3b:	50                   	push   eax
c0023e3c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e42:	e8 2b e5 ff ff       	call   c0022372 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e47:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023e4e:	83 c4 14             	add    esp,0x14
c0023e51:	53                   	push   ebx
c0023e52:	e8 cb fe ff ff       	call   c0023d22 <ATAPI::detectMedia()>
c0023e57:	31 c0                	xor    eax,eax
c0023e59:	83 c4 18             	add    esp,0x18
c0023e5c:	5b                   	pop    ebx
c0023e5d:	c3                   	ret    

c0023e5e <ATAPI::read(unsigned long long, int, void*)>:
c0023e5e:	55                   	push   ebp
c0023e5f:	57                   	push   edi
c0023e60:	56                   	push   esi
c0023e61:	53                   	push   ebx
c0023e62:	83 ec 1c             	sub    esp,0x1c
c0023e65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e69:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e6d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023e71:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023e78:	74 41                	je     c0023ebb <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023e7a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023e7e:	b9 03 00 00 00       	mov    ecx,0x3
c0023e83:	fc                   	cld    
c0023e84:	31 c0                	xor    eax,eax
c0023e86:	86 fb                	xchg   bl,bh
c0023e88:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023e8a:	c1 c3 10             	rol    ebx,0x10
c0023e8d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023e92:	89 e8                	mov    eax,ebp
c0023e94:	86 fb                	xchg   bl,bh
c0023e96:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023e9a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023e9e:	50                   	push   eax
c0023e9f:	50                   	push   eax
c0023ea0:	55                   	push   ebp
c0023ea1:	c1 e5 0b             	shl    ebp,0xb
c0023ea4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023ea8:	6a 00                	push   0x0
c0023eaa:	55                   	push   ebp
c0023eab:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023eaf:	50                   	push   eax
c0023eb0:	56                   	push   esi
c0023eb1:	e8 1c fb ff ff       	call   c00239d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023eb6:	83 c4 20             	add    esp,0x20
c0023eb9:	eb 1a                	jmp    c0023ed5 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0023ebb:	83 ec 0c             	sub    esp,0xc
c0023ebe:	56                   	push   esi
c0023ebf:	e8 5e fe ff ff       	call   c0023d22 <ATAPI::detectMedia()>
c0023ec4:	83 c4 10             	add    esp,0x10
c0023ec7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023ece:	75 aa                	jne    c0023e7a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023ed0:	b8 02 00 00 00       	mov    eax,0x2
c0023ed5:	83 c4 1c             	add    esp,0x1c
c0023ed8:	5b                   	pop    ebx
c0023ed9:	5e                   	pop    esi
c0023eda:	5f                   	pop    edi
c0023edb:	5d                   	pop    ebp
c0023edc:	c3                   	ret    
c0023edd:	90                   	nop

c0023ede <SATA::close(int, int, void*)>:
c0023ede:	83 ec 0c             	sub    esp,0xc
c0023ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ee5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023eeb:	85 c0                	test   eax,eax
c0023eed:	74 0c                	je     c0023efb <SATA::close(int, int, void*)+0x1d>
c0023eef:	83 ec 0c             	sub    esp,0xc
c0023ef2:	8b 10                	mov    edx,DWORD PTR [eax]
c0023ef4:	50                   	push   eax
c0023ef5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023ef8:	83 c4 10             	add    esp,0x10
c0023efb:	31 c0                	xor    eax,eax
c0023efd:	83 c4 0c             	add    esp,0xc
c0023f00:	c3                   	ret    
c0023f01:	90                   	nop

c0023f02 <SATA::powerSaving(PowerSavingLevel)>:
c0023f02:	c3                   	ret    
c0023f03:	90                   	nop

c0023f04 <SATA::open(int, int, void*)>:
c0023f04:	53                   	push   ebx
c0023f05:	83 ec 14             	sub    esp,0x14
c0023f08:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023f0c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023f10:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023f1a:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023f20:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0023f2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023f2e:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023f38:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023f3e:	68 c0 b9 02 c0       	push   0xc002b9c0
c0023f43:	e8 8d e9 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0023f48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f4b:	e8 24 02 ff ff       	call   c0014174 <PhysicalDisk::startCache()>
c0023f50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f53:	e8 46 22 ff ff       	call   c001619e <createPartitionsForDisk(PhysicalDisk*)>
c0023f58:	31 c0                	xor    eax,eax
c0023f5a:	83 c4 18             	add    esp,0x18
c0023f5d:	5b                   	pop    ebx
c0023f5e:	c3                   	ret    
c0023f5f:	90                   	nop

c0023f60 <SATA::SATA()>:
c0023f60:	83 ec 0c             	sub    esp,0xc
c0023f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f67:	83 ec 04             	sub    esp,0x4
c0023f6a:	68 00 02 00 00       	push   0x200
c0023f6f:	68 db b9 02 c0       	push   0xc002b9db
c0023f74:	50                   	push   eax
c0023f75:	e8 92 01 ff ff       	call   c001410c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023f7a:	83 c4 10             	add    esp,0x10
c0023f7d:	ba b8 ba 02 c0       	mov    edx,0xc002bab8
c0023f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f86:	89 10                	mov    DWORD PTR [eax],edx
c0023f88:	90                   	nop
c0023f89:	83 c4 0c             	add    esp,0xc
c0023f8c:	c3                   	ret    
c0023f8d:	90                   	nop

c0023f8e <SATA::access(unsigned long long, int, void*, bool)>:
c0023f8e:	55                   	push   ebp
c0023f8f:	57                   	push   edi
c0023f90:	56                   	push   esi
c0023f91:	53                   	push   ebx
c0023f92:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0023f98:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0023f9f:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0023fa6:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0023fad:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023fb4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023fb8:	83 ff 08             	cmp    edi,0x8
c0023fbb:	7e 10                	jle    c0023fcd <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0023fbd:	83 ec 0c             	sub    esp,0xc
c0023fc0:	68 eb b9 02 c0       	push   0xc002b9eb
c0023fc5:	e8 eb 5b ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c0023fca:	83 c4 10             	add    esp,0x10
c0023fcd:	51                   	push   ecx
c0023fce:	68 00 02 00 00       	push   0x200
c0023fd3:	68 ee 00 00 00       	push   0xee
c0023fd8:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0023fdc:	55                   	push   ebp
c0023fdd:	e8 e2 c6 fd ff       	call   c00006c4 <memset>
c0023fe2:	83 c4 0c             	add    esp,0xc
c0023fe5:	68 00 02 00 00       	push   0x200
c0023fea:	68 ee 00 00 00       	push   0xee
c0023fef:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0023ff6:	50                   	push   eax
c0023ff7:	e8 c8 c6 fd ff       	call   c00006c4 <memset>
c0023ffc:	55                   	push   ebp
c0023ffd:	57                   	push   edi
c0023ffe:	56                   	push   esi
c0023fff:	68 1d ba 02 c0       	push   0xc002ba1d
c0024004:	e8 cc e8 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0024009:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002400f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024015:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0024019:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002401f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0024023:	c1 e0 07             	shl    eax,0x7
c0024026:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c002402a:	83 c4 18             	add    esp,0x18
c002402d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024037:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002403b:	8d 50 02             	lea    edx,[eax+0x2]
c002403e:	c1 e2 07             	shl    edx,0x7
c0024041:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c0024045:	52                   	push   edx
c0024046:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002404a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024050:	e8 e1 ef ff ff       	call   c0023036 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024055:	89 c1                	mov    ecx,eax
c0024057:	58                   	pop    eax
c0024058:	5a                   	pop    edx
c0024059:	51                   	push   ecx
c002405a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c002405e:	68 52 ba 02 c0       	push   0xc002ba52
c0024063:	e8 6d e8 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0024068:	83 c4 10             	add    esp,0x10
c002406b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002406f:	83 f9 ff             	cmp    ecx,0xffffffff
c0024072:	0f 84 9a 01 00 00    	je     c0024212 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0024078:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002407e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024082:	8b 12                	mov    edx,DWORD PTR [edx]
c0024084:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c002408a:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0024090:	89 c8                	mov    eax,ecx
c0024092:	c1 e0 05             	shl    eax,0x5
c0024095:	01 c2                	add    edx,eax
c0024097:	8a 02                	mov    al,BYTE PTR [edx]
c0024099:	83 e0 a0             	and    eax,0xffffffa0
c002409c:	83 c8 05             	or     eax,0x5
c002409f:	88 02                	mov    BYTE PTR [edx],al
c00240a1:	8d 47 ff             	lea    eax,[edi-0x1]
c00240a4:	c1 f8 04             	sar    eax,0x4
c00240a7:	40                   	inc    eax
c00240a8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00240ac:	0f b7 c0             	movzx  eax,ax
c00240af:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c00240b5:	83 c0 08             	add    eax,0x8
c00240b8:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c00240be:	c1 e0 04             	shl    eax,0x4
c00240c1:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c00240c7:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c00240ca:	01 cb                	add    ebx,ecx
c00240cc:	52                   	push   edx
c00240cd:	50                   	push   eax
c00240ce:	6a 00                	push   0x0
c00240d0:	53                   	push   ebx
c00240d1:	e8 ee c5 fd ff       	call   c00006c4 <memset>
c00240d6:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00240dc:	83 c4 10             	add    esp,0x10
c00240df:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c00240e5:	25 00 00 c0 7f       	and    eax,0x7fc00000
c00240ea:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c00240f1:	0d ff 01 00 80       	or     eax,0x800001ff
c00240f6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00240fa:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024100:	b8 01 00 00 00       	mov    eax,0x1
c0024105:	89 c2                	mov    edx,eax
c0024107:	c1 e2 04             	shl    edx,0x4
c002410a:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c0024111:	8d 50 08             	lea    edx,[eax+0x8]
c0024114:	40                   	inc    eax
c0024115:	c1 e2 04             	shl    edx,0x4
c0024118:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c0024120:	83 f8 10             	cmp    eax,0x10
c0024123:	75 e0                	jne    c0024105 <SATA::access(unsigned long long, int, void*, bool)+0x177>
c0024125:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024128:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c002412c:	66 25 00 7f          	and    ax,0x7f00
c0024130:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c0024134:	66 0d 27 80          	or     ax,0x8027
c0024138:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002413c:	66 89 03             	mov    WORD PTR [ebx],ax
c002413f:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c0024143:	89 f0                	mov    eax,esi
c0024145:	31 d2                	xor    edx,edx
c0024147:	c1 e8 10             	shr    eax,0x10
c002414a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002414d:	89 f0                	mov    eax,esi
c002414f:	c1 e8 18             	shr    eax,0x18
c0024152:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024155:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0024159:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002415c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024160:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024167:	c1 e0 07             	shl    eax,0x7
c002416a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c002416e:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c0024174:	80 e3 88             	and    bl,0x88
c0024177:	74 0b                	je     c0024184 <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c0024179:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c002417f:	74 0b                	je     c002418c <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c0024181:	42                   	inc    edx
c0024182:	eb ea                	jmp    c002416e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0024184:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c002418a:	75 0a                	jne    c0024196 <SATA::access(unsigned long long, int, void*, bool)+0x208>
c002418c:	83 ec 0c             	sub    esp,0xc
c002418f:	68 5b ba 02 c0       	push   0xc002ba5b
c0024194:	eb 60                	jmp    c00241f6 <SATA::access(unsigned long long, int, void*, bool)+0x268>
c0024196:	be 01 00 00 00       	mov    esi,0x1
c002419b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002419f:	d3 e6                	shl    esi,cl
c00241a1:	c1 e3 07             	shl    ebx,0x7
c00241a4:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c00241aa:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c00241ae:	83 ec 0c             	sub    esp,0xc
c00241b1:	68 69 ba 02 c0       	push   0xc002ba69
c00241b6:	e8 1a e7 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c00241bb:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c00241c1:	83 c4 10             	add    esp,0x10
c00241c4:	85 c6                	test   esi,eax
c00241c6:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c00241cc:	74 1a                	je     c00241e8 <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c00241ce:	0f ba e0 1e          	bt     eax,0x1e
c00241d2:	73 da                	jae    c00241ae <SATA::access(unsigned long long, int, void*, bool)+0x220>
c00241d4:	83 ec 0c             	sub    esp,0xc
c00241d7:	68 76 ba 02 c0       	push   0xc002ba76
c00241dc:	e8 d4 59 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c00241e1:	83 c4 10             	add    esp,0x10
c00241e4:	31 c0                	xor    eax,eax
c00241e6:	eb 2f                	jmp    c0024217 <SATA::access(unsigned long long, int, void*, bool)+0x289>
c00241e8:	0f ba e0 1e          	bt     eax,0x1e
c00241ec:	73 12                	jae    c0024200 <SATA::access(unsigned long long, int, void*, bool)+0x272>
c00241ee:	83 ec 0c             	sub    esp,0xc
c00241f1:	68 76 ba 02 c0       	push   0xc002ba76
c00241f6:	e8 ba 59 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c00241fb:	83 c4 10             	add    esp,0x10
c00241fe:	eb 12                	jmp    c0024212 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0024200:	83 ec 0c             	sub    esp,0xc
c0024203:	68 87 ba 02 c0       	push   0xc002ba87
c0024208:	e8 a8 59 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c002420d:	83 c4 10             	add    esp,0x10
c0024210:	eb fe                	jmp    c0024210 <SATA::access(unsigned long long, int, void*, bool)+0x282>
c0024212:	b8 01 00 00 00       	mov    eax,0x1
c0024217:	81 c4 2c 04 00 00    	add    esp,0x42c
c002421d:	5b                   	pop    ebx
c002421e:	5e                   	pop    esi
c002421f:	5f                   	pop    edi
c0024220:	5d                   	pop    ebp
c0024221:	c3                   	ret    

c0024222 <SATA::read(unsigned long long, int, void*)>:
c0024222:	57                   	push   edi
c0024223:	b8 04 00 00 00       	mov    eax,0x4
c0024228:	56                   	push   esi
c0024229:	53                   	push   ebx
c002422a:	83 ec 10             	sub    esp,0x10
c002422d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024231:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024235:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024238:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002423c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024240:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024246:	77 3b                	ja     c0024283 <SATA::read(unsigned long long, int, void*)+0x61>
c0024248:	b8 06 00 00 00       	mov    eax,0x6
c002424d:	85 d2                	test   edx,edx
c002424f:	74 32                	je     c0024283 <SATA::read(unsigned long long, int, void*)+0x61>
c0024251:	50                   	push   eax
c0024252:	50                   	push   eax
c0024253:	6a 00                	push   0x0
c0024255:	52                   	push   edx
c0024256:	53                   	push   ebx
c0024257:	57                   	push   edi
c0024258:	56                   	push   esi
c0024259:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002425d:	e8 2c fd ff ff       	call   c0023f8e <SATA::access(unsigned long long, int, void*, bool)>
c0024262:	83 c4 20             	add    esp,0x20
c0024265:	85 c0                	test   eax,eax
c0024267:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002426b:	75 11                	jne    c002427e <SATA::read(unsigned long long, int, void*)+0x5c>
c002426d:	01 1d 48 f2 02 c0    	add    DWORD PTR ds:0xc002f248,ebx
c0024273:	e8 c2 c4 fe ff       	call   c001073a <VgaText::updateDiskUsage()>
c0024278:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002427c:	eb 05                	jmp    c0024283 <SATA::read(unsigned long long, int, void*)+0x61>
c002427e:	b8 01 00 00 00       	mov    eax,0x1
c0024283:	83 c4 10             	add    esp,0x10
c0024286:	5b                   	pop    ebx
c0024287:	5e                   	pop    esi
c0024288:	5f                   	pop    edi
c0024289:	c3                   	ret    

c002428a <SATA::write(unsigned long long, int, void*)>:
c002428a:	57                   	push   edi
c002428b:	b8 04 00 00 00       	mov    eax,0x4
c0024290:	56                   	push   esi
c0024291:	53                   	push   ebx
c0024292:	83 ec 10             	sub    esp,0x10
c0024295:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024299:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002429d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00242a0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00242a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00242a8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00242ae:	77 3b                	ja     c00242eb <SATA::write(unsigned long long, int, void*)+0x61>
c00242b0:	b8 06 00 00 00       	mov    eax,0x6
c00242b5:	85 d2                	test   edx,edx
c00242b7:	74 32                	je     c00242eb <SATA::write(unsigned long long, int, void*)+0x61>
c00242b9:	50                   	push   eax
c00242ba:	50                   	push   eax
c00242bb:	6a 01                	push   0x1
c00242bd:	52                   	push   edx
c00242be:	53                   	push   ebx
c00242bf:	57                   	push   edi
c00242c0:	56                   	push   esi
c00242c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00242c5:	e8 c4 fc ff ff       	call   c0023f8e <SATA::access(unsigned long long, int, void*, bool)>
c00242ca:	83 c4 20             	add    esp,0x20
c00242cd:	85 c0                	test   eax,eax
c00242cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00242d3:	75 11                	jne    c00242e6 <SATA::write(unsigned long long, int, void*)+0x5c>
c00242d5:	01 1d 44 f2 02 c0    	add    DWORD PTR ds:0xc002f244,ebx
c00242db:	e8 5a c4 fe ff       	call   c001073a <VgaText::updateDiskUsage()>
c00242e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00242e4:	eb 05                	jmp    c00242eb <SATA::write(unsigned long long, int, void*)+0x61>
c00242e6:	b8 01 00 00 00       	mov    eax,0x1
c00242eb:	83 c4 10             	add    esp,0x10
c00242ee:	5b                   	pop    ebx
c00242ef:	5e                   	pop    esi
c00242f0:	5f                   	pop    edi
c00242f1:	c3                   	ret    

c00242f2 <AVX::open(int, int, void*)>:
c00242f2:	83 ec 0c             	sub    esp,0xc
c00242f5:	e8 3e 11 00 00       	call   c0025438 <avxInit>
c00242fa:	b8 00 00 00 00       	mov    eax,0x0
c00242ff:	83 c4 0c             	add    esp,0xc
c0024302:	c3                   	ret    
c0024303:	90                   	nop

c0024304 <AVX::close(int, int, void*)>:
c0024304:	83 ec 0c             	sub    esp,0xc
c0024307:	e8 2d 11 00 00       	call   c0025439 <avxClose>
c002430c:	b8 00 00 00 00       	mov    eax,0x0
c0024311:	83 c4 0c             	add    esp,0xc
c0024314:	c3                   	ret    
c0024315:	90                   	nop

c0024316 <AVX::available()>:
c0024316:	83 ec 0c             	sub    esp,0xc
c0024319:	e8 12 11 00 00       	call   c0025430 <avxDetect>
c002431e:	85 c0                	test   eax,eax
c0024320:	0f 95 c0             	setne  al
c0024323:	83 c4 0c             	add    esp,0xc
c0024326:	c3                   	ret    
c0024327:	90                   	nop

c0024328 <AVX::save(void*)>:
c0024328:	83 ec 0c             	sub    esp,0xc
c002432b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002432f:	83 ec 0c             	sub    esp,0xc
c0024332:	50                   	push   eax
c0024333:	e8 fe 10 00 00       	call   c0025436 <avxSave>
c0024338:	83 c4 10             	add    esp,0x10
c002433b:	90                   	nop
c002433c:	83 c4 0c             	add    esp,0xc
c002433f:	c3                   	ret    

c0024340 <AVX::load(void*)>:
c0024340:	83 ec 0c             	sub    esp,0xc
c0024343:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024347:	83 ec 0c             	sub    esp,0xc
c002434a:	50                   	push   eax
c002434b:	e8 e7 10 00 00       	call   c0025437 <avxLoad>
c0024350:	83 c4 10             	add    esp,0x10
c0024353:	90                   	nop
c0024354:	83 c4 0c             	add    esp,0xc
c0024357:	c3                   	ret    

c0024358 <AVX::AVX()>:
c0024358:	83 ec 0c             	sub    esp,0xc
c002435b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002435f:	83 ec 08             	sub    esp,0x8
c0024362:	68 e4 ba 02 c0       	push   0xc002bae4
c0024367:	50                   	push   eax
c0024368:	e8 7d fe fe ff       	call   c00141ea <FPU::FPU(char const*)>
c002436d:	83 c4 10             	add    esp,0x10
c0024370:	ba f4 ba 02 c0       	mov    edx,0xc002baf4
c0024375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024379:	89 10                	mov    DWORD PTR [eax],edx
c002437b:	90                   	nop
c002437c:	83 c4 0c             	add    esp,0xc
c002437f:	c3                   	ret    

c0024380 <MMX::available()>:
c0024380:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0024385:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002438b:	83 e0 20             	and    eax,0x20
c002438e:	84 c0                	test   al,al
c0024390:	0f 95 c0             	setne  al
c0024393:	c3                   	ret    

c0024394 <MMX::open(int, int, void*)>:
c0024394:	83 ec 0c             	sub    esp,0xc
c0024397:	e8 20 11 00 00       	call   c00254bc <x87Init>
c002439c:	b8 00 00 00 00       	mov    eax,0x0
c00243a1:	83 c4 0c             	add    esp,0xc
c00243a4:	c3                   	ret    
c00243a5:	90                   	nop

c00243a6 <MMX::close(int, int, void*)>:
c00243a6:	83 ec 0c             	sub    esp,0xc
c00243a9:	e8 28 11 00 00       	call   c00254d6 <x87Close>
c00243ae:	b8 00 00 00 00       	mov    eax,0x0
c00243b3:	83 c4 0c             	add    esp,0xc
c00243b6:	c3                   	ret    
c00243b7:	90                   	nop

c00243b8 <MMX::save(void*)>:
c00243b8:	83 ec 0c             	sub    esp,0xc
c00243bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00243bf:	83 ec 0c             	sub    esp,0xc
c00243c2:	50                   	push   eax
c00243c3:	e8 e9 10 00 00       	call   c00254b1 <x87Save>
c00243c8:	83 c4 10             	add    esp,0x10
c00243cb:	90                   	nop
c00243cc:	83 c4 0c             	add    esp,0xc
c00243cf:	c3                   	ret    

c00243d0 <MMX::load(void*)>:
c00243d0:	83 ec 0c             	sub    esp,0xc
c00243d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00243d7:	83 ec 0c             	sub    esp,0xc
c00243da:	50                   	push   eax
c00243db:	e8 d7 10 00 00       	call   c00254b7 <x87Load>
c00243e0:	83 c4 10             	add    esp,0x10
c00243e3:	90                   	nop
c00243e4:	83 c4 0c             	add    esp,0xc
c00243e7:	c3                   	ret    

c00243e8 <MMX::MMX()>:
c00243e8:	83 ec 0c             	sub    esp,0xc
c00243eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00243ef:	83 ec 08             	sub    esp,0x8
c00243f2:	68 24 bb 02 c0       	push   0xc002bb24
c00243f7:	50                   	push   eax
c00243f8:	e8 ed fd fe ff       	call   c00141ea <FPU::FPU(char const*)>
c00243fd:	83 c4 10             	add    esp,0x10
c0024400:	ba 34 bb 02 c0       	mov    edx,0xc002bb34
c0024405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024409:	89 10                	mov    DWORD PTR [eax],edx
c002440b:	90                   	nop
c002440c:	83 c4 0c             	add    esp,0xc
c002440f:	c3                   	ret    

c0024410 <SSE::open(int, int, void*)>:
c0024410:	83 ec 0c             	sub    esp,0xc
c0024413:	e8 5c 10 00 00       	call   c0025474 <sseInit>
c0024418:	b8 00 00 00 00       	mov    eax,0x0
c002441d:	83 c4 0c             	add    esp,0xc
c0024420:	c3                   	ret    
c0024421:	90                   	nop

c0024422 <SSE::close(int, int, void*)>:
c0024422:	83 ec 0c             	sub    esp,0xc
c0024425:	e8 5a 10 00 00       	call   c0025484 <sseClose>
c002442a:	b8 00 00 00 00       	mov    eax,0x0
c002442f:	83 c4 0c             	add    esp,0xc
c0024432:	c3                   	ret    
c0024433:	90                   	nop

c0024434 <SSE::available()>:
c0024434:	83 ec 1c             	sub    esp,0x1c
c0024437:	e8 14 10 00 00       	call   c0025450 <absolutelyNoChanceInHell>
c002443c:	85 c0                	test   eax,eax
c002443e:	0f 95 c0             	setne  al
c0024441:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024445:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024449:	83 c4 1c             	add    esp,0x1c
c002444c:	c3                   	ret    
c002444d:	90                   	nop

c002444e <SSE::save(void*)>:
c002444e:	83 ec 0c             	sub    esp,0xc
c0024451:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024455:	83 ec 0c             	sub    esp,0xc
c0024458:	50                   	push   eax
c0024459:	e8 0a 10 00 00       	call   c0025468 <sseSave>
c002445e:	83 c4 10             	add    esp,0x10
c0024461:	90                   	nop
c0024462:	83 c4 0c             	add    esp,0xc
c0024465:	c3                   	ret    

c0024466 <SSE::load(void*)>:
c0024466:	83 ec 0c             	sub    esp,0xc
c0024469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002446d:	83 ec 0c             	sub    esp,0xc
c0024470:	50                   	push   eax
c0024471:	e8 f8 0f 00 00       	call   c002546e <sseLoad>
c0024476:	83 c4 10             	add    esp,0x10
c0024479:	90                   	nop
c002447a:	83 c4 0c             	add    esp,0xc
c002447d:	c3                   	ret    

c002447e <SSE::SSE()>:
c002447e:	83 ec 0c             	sub    esp,0xc
c0024481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024485:	83 ec 08             	sub    esp,0x8
c0024488:	68 64 bb 02 c0       	push   0xc002bb64
c002448d:	50                   	push   eax
c002448e:	e8 57 fd fe ff       	call   c00141ea <FPU::FPU(char const*)>
c0024493:	83 c4 10             	add    esp,0x10
c0024496:	ba 74 bb 02 c0       	mov    edx,0xc002bb74
c002449b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002449f:	89 10                	mov    DWORD PTR [eax],edx
c00244a1:	90                   	nop
c00244a2:	83 c4 0c             	add    esp,0xc
c00244a5:	c3                   	ret    

c00244a6 <x87::open(int, int, void*)>:
c00244a6:	83 ec 0c             	sub    esp,0xc
c00244a9:	e8 0e 10 00 00       	call   c00254bc <x87Init>
c00244ae:	b8 00 00 00 00       	mov    eax,0x0
c00244b3:	83 c4 0c             	add    esp,0xc
c00244b6:	c3                   	ret    
c00244b7:	90                   	nop

c00244b8 <x87::close(int, int, void*)>:
c00244b8:	83 ec 0c             	sub    esp,0xc
c00244bb:	e8 16 10 00 00       	call   c00254d6 <x87Close>
c00244c0:	b8 00 00 00 00       	mov    eax,0x0
c00244c5:	83 c4 0c             	add    esp,0xc
c00244c8:	c3                   	ret    
c00244c9:	90                   	nop

c00244ca <x87::available()>:
c00244ca:	83 ec 0c             	sub    esp,0xc
c00244cd:	e8 c4 0f 00 00       	call   c0025496 <x87Detect>
c00244d2:	85 c0                	test   eax,eax
c00244d4:	0f 95 c0             	setne  al
c00244d7:	83 c4 0c             	add    esp,0xc
c00244da:	c3                   	ret    
c00244db:	90                   	nop

c00244dc <x87::save(void*)>:
c00244dc:	83 ec 0c             	sub    esp,0xc
c00244df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00244e3:	83 ec 0c             	sub    esp,0xc
c00244e6:	50                   	push   eax
c00244e7:	e8 c5 0f 00 00       	call   c00254b1 <x87Save>
c00244ec:	83 c4 10             	add    esp,0x10
c00244ef:	90                   	nop
c00244f0:	83 c4 0c             	add    esp,0xc
c00244f3:	c3                   	ret    

c00244f4 <x87::load(void*)>:
c00244f4:	83 ec 0c             	sub    esp,0xc
c00244f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00244fb:	83 ec 0c             	sub    esp,0xc
c00244fe:	50                   	push   eax
c00244ff:	e8 b3 0f 00 00       	call   c00254b7 <x87Load>
c0024504:	83 c4 10             	add    esp,0x10
c0024507:	90                   	nop
c0024508:	83 c4 0c             	add    esp,0xc
c002450b:	c3                   	ret    

c002450c <x87::x87()>:
c002450c:	83 ec 0c             	sub    esp,0xc
c002450f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024513:	83 ec 08             	sub    esp,0x8
c0024516:	68 a4 bb 02 c0       	push   0xc002bba4
c002451b:	50                   	push   eax
c002451c:	e8 c9 fc fe ff       	call   c00141ea <FPU::FPU(char const*)>
c0024521:	83 c4 10             	add    esp,0x10
c0024524:	ba b4 bb 02 c0       	mov    edx,0xc002bbb4
c0024529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002452d:	89 10                	mov    DWORD PTR [eax],edx
c002452f:	90                   	nop
c0024530:	83 c4 0c             	add    esp,0xc
c0024533:	c3                   	ret    

c0024534 <APIC::disable()>:
c0024534:	90                   	nop
c0024535:	c3                   	ret    

c0024536 <APIC::close(int, int, void*)>:
c0024536:	55                   	push   ebp
c0024537:	89 e5                	mov    ebp,esp
c0024539:	83 ec 08             	sub    esp,0x8
c002453c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002453f:	8b 00                	mov    eax,DWORD PTR [eax]
c0024541:	83 c0 3c             	add    eax,0x3c
c0024544:	8b 00                	mov    eax,DWORD PTR [eax]
c0024546:	83 ec 0c             	sub    esp,0xc
c0024549:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002454c:	ff d0                	call   eax
c002454e:	83 c4 10             	add    esp,0x10
c0024551:	b8 00 00 00 00       	mov    eax,0x0
c0024556:	c9                   	leave  
c0024557:	c3                   	ret    

c0024558 <IOAPIC::close(int, int, void*)>:
c0024558:	b8 00 00 00 00       	mov    eax,0x0
c002455d:	c3                   	ret    

c002455e <APIC::io_wait()>:
c002455e:	eb 00                	jmp    c0024560 <APIC::io_wait()+0x2>
c0024560:	eb 00                	jmp    c0024562 <APIC::io_wait()+0x4>
c0024562:	90                   	nop
c0024563:	c3                   	ret    

c0024564 <APIC::getBase()>:
c0024564:	55                   	push   ebp
c0024565:	89 e5                	mov    ebp,esp
c0024567:	83 ec 18             	sub    esp,0x18
c002456a:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c002456f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024575:	83 e0 08             	and    eax,0x8
c0024578:	84 c0                	test   al,al
c002457a:	75 07                	jne    c0024583 <APIC::getBase()+0x1f>
c002457c:	b8 00 00 00 00       	mov    eax,0x0
c0024581:	eb 21                	jmp    c00245a4 <APIC::getBase()+0x40>
c0024583:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0024588:	83 ec 08             	sub    esp,0x8
c002458b:	6a 1b                	push   0x1b
c002458d:	50                   	push   eax
c002458e:	e8 39 a6 fe ff       	call   c000ebcc <Computer::rdmsr(unsigned int)>
c0024593:	83 c4 10             	add    esp,0x10
c0024596:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024599:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002459c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002459f:	25 00 f0 ff ff       	and    eax,0xfffff000
c00245a4:	c9                   	leave  
c00245a5:	c3                   	ret    

c00245a6 <APIC::eoi(unsigned char)>:
c00245a6:	55                   	push   ebp
c00245a7:	89 e5                	mov    ebp,esp
c00245a9:	83 ec 28             	sub    esp,0x28
c00245ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00245af:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00245b2:	83 ec 0c             	sub    esp,0xc
c00245b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245b8:	e8 a7 ff ff ff       	call   c0024564 <APIC::getBase()>
c00245bd:	83 c4 10             	add    esp,0x10
c00245c0:	05 b0 00 00 00       	add    eax,0xb0
c00245c5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00245c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00245cb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00245d1:	90                   	nop
c00245d2:	c9                   	leave  
c00245d3:	c3                   	ret    

c00245d4 <APIC::open(int, int, void*)>:
c00245d4:	55                   	push   ebp
c00245d5:	89 e5                	mov    ebp,esp
c00245d7:	57                   	push   edi
c00245d8:	56                   	push   esi
c00245d9:	53                   	push   ebx
c00245da:	83 ec 2c             	sub    esp,0x2c
c00245dd:	83 ec 0c             	sub    esp,0xc
c00245e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00245e3:	e8 7c ff ff ff       	call   c0024564 <APIC::getBase()>
c00245e8:	83 c4 10             	add    esp,0x10
c00245eb:	89 c2                	mov    edx,eax
c00245ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00245f0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00245f6:	0f b6 f8             	movzx  edi,al
c00245f9:	89 d0                	mov    eax,edx
c00245fb:	ba 00 00 00 00       	mov    edx,0x0
c0024600:	89 c1                	mov    ecx,eax
c0024602:	80 e5 ff             	and    ch,0xff
c0024605:	89 cb                	mov    ebx,ecx
c0024607:	0f b6 f2             	movzx  esi,dl
c002460a:	89 d8                	mov    eax,ebx
c002460c:	89 f2                	mov    edx,esi
c002460e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024611:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024614:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024618:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002461c:	83 e0 00             	and    eax,0x0
c002461f:	09 d0                	or     eax,edx
c0024621:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024628:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002462e:	8d 50 01             	lea    edx,[eax+0x1]
c0024631:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024634:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002463a:	0f b6 d0             	movzx  edx,al
c002463d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024640:	83 c2 08             	add    edx,0x8
c0024643:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024647:	0f b6 c9             	movzx  ecx,cl
c002464a:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024650:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024654:	83 ec 0c             	sub    esp,0xc
c0024657:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002465a:	e8 05 ff ff ff       	call   c0024564 <APIC::getBase()>
c002465f:	83 c4 10             	add    esp,0x10
c0024662:	05 f0 00 00 00       	add    eax,0xf0
c0024667:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002466a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002466d:	8b 00                	mov    eax,DWORD PTR [eax]
c002466f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024672:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0024679:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0024680:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024683:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024686:	89 10                	mov    DWORD PTR [eax],edx
c0024688:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002468f:	a1 d0 d7 02 c0       	mov    eax,ds:0xc002d7d0
c0024694:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0024697:	7d 7c                	jge    c0024715 <APIC::open(int, int, void*)+0x141>
c0024699:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002469c:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c00246a3:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00246a6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00246a9:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c00246b0:	c1 e8 08             	shr    eax,0x8
c00246b3:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00246b7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00246ba:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c00246c1:	c1 e8 18             	shr    eax,0x18
c00246c4:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00246c7:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00246cb:	75 40                	jne    c002470d <APIC::open(int, int, void*)+0x139>
c00246cd:	83 ec 0c             	sub    esp,0xc
c00246d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00246d3:	e8 8c fe ff ff       	call   c0024564 <APIC::getBase()>
c00246d8:	83 c4 10             	add    esp,0x10
c00246db:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00246df:	75 07                	jne    c00246e8 <APIC::open(int, int, void*)+0x114>
c00246e1:	ba 60 03 00 00       	mov    edx,0x360
c00246e6:	eb 05                	jmp    c00246ed <APIC::open(int, int, void*)+0x119>
c00246e8:	ba 50 03 00 00       	mov    edx,0x350
c00246ed:	01 d0                	add    eax,edx
c00246ef:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00246f2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00246f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00246f7:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00246fa:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0024701:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0024705:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024708:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002470b:	89 10                	mov    DWORD PTR [eax],edx
c002470d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0024710:	e9 7a ff ff ff       	jmp    c002468f <APIC::open(int, int, void*)+0xbb>
c0024715:	b8 00 00 00 00       	mov    eax,0x0
c002471a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002471d:	5b                   	pop    ebx
c002471e:	5e                   	pop    esi
c002471f:	5f                   	pop    edi
c0024720:	5d                   	pop    ebp
c0024721:	c3                   	ret    

c0024722 <IOAPIC::IOAPIC()>:
c0024722:	83 ec 0c             	sub    esp,0xc
c0024725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024729:	83 ec 08             	sub    esp,0x8
c002472c:	68 e4 bb 02 c0       	push   0xc002bbe4
c0024731:	50                   	push   eax
c0024732:	e8 b5 f7 fe ff       	call   c0013eec <Device::Device(char const*)>
c0024737:	83 c4 10             	add    esp,0x10
c002473a:	ba 0c bd 02 c0       	mov    edx,0xc002bd0c
c002473f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024743:	89 10                	mov    DWORD PTR [eax],edx
c0024745:	90                   	nop
c0024746:	83 c4 0c             	add    esp,0xc
c0024749:	c3                   	ret    

c002474a <APIC::APIC()>:
c002474a:	53                   	push   ebx
c002474b:	83 ec 18             	sub    esp,0x18
c002474e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024752:	83 ec 08             	sub    esp,0x8
c0024755:	68 ec bb 02 c0       	push   0xc002bbec
c002475a:	50                   	push   eax
c002475b:	e8 e4 fe fe ff       	call   c0014644 <InterruptController::InterruptController(char const*)>
c0024760:	83 c4 10             	add    esp,0x10
c0024763:	ba c4 bc 02 c0       	mov    edx,0xc002bcc4
c0024768:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002476c:	89 10                	mov    DWORD PTR [eax],edx
c002476e:	a0 a0 f2 02 c0       	mov    al,ds:0xc002f2a0
c0024773:	83 f0 01             	xor    eax,0x1
c0024776:	84 c0                	test   al,al
c0024778:	0f 84 a1 00 00 00    	je     c002481f <APIC::APIC()+0xd5>
c002477e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0024783:	a0 80 d8 02 c0       	mov    al,ds:0xc002d880
c0024788:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002478c:	0f 83 86 00 00 00    	jae    c0024818 <APIC::APIC()+0xce>
c0024792:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002479a:	83 ec 0c             	sub    esp,0xc
c002479d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00247a1:	e8 7e ae fe ff       	call   c000f624 <malloc>
c00247a6:	83 c4 10             	add    esp,0x10
c00247a9:	89 c3                	mov    ebx,eax
c00247ab:	83 ec 0c             	sub    esp,0xc
c00247ae:	53                   	push   ebx
c00247af:	e8 6e ff ff ff       	call   c0024722 <IOAPIC::IOAPIC()>
c00247b4:	83 c4 10             	add    esp,0x10
c00247b7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00247bb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00247c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00247c4:	89 14 85 80 f2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0d80],edx
c00247cb:	a1 60 f2 02 c0       	mov    eax,ds:0xc002f260
c00247d0:	40                   	inc    eax
c00247d1:	a3 60 f2 02 c0       	mov    ds:0xc002f260,eax
c00247d6:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c00247db:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00247e1:	83 ec 08             	sub    esp,0x8
c00247e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00247e8:	50                   	push   eax
c00247e9:	e8 0e f5 fe ff       	call   c0013cfc <Device::addChild(Device*)>
c00247ee:	83 c4 10             	add    esp,0x10
c00247f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00247f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00247f7:	83 c0 08             	add    eax,0x8
c00247fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00247fc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0024801:	6a 00                	push   0x0
c0024803:	6a 00                	push   0x0
c0024805:	52                   	push   edx
c0024806:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002480a:	ff d0                	call   eax
c002480c:	83 c4 10             	add    esp,0x10
c002480f:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0024813:	e9 6b ff ff ff       	jmp    c0024783 <APIC::APIC()+0x39>
c0024818:	c6 05 a0 f2 02 c0 01 	mov    BYTE PTR ds:0xc002f2a0,0x1
c002481f:	90                   	nop
c0024820:	83 c4 18             	add    esp,0x18
c0024823:	5b                   	pop    ebx
c0024824:	c3                   	ret    
c0024825:	90                   	nop

c0024826 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0024826:	55                   	push   ebp
c0024827:	89 e5                	mov    ebp,esp
c0024829:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002482c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024832:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024835:	72 1d                	jb     c0024854 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024837:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002483a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0024840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024843:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0024849:	01 d0                	add    eax,edx
c002484b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002484e:	73 04                	jae    c0024854 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024850:	b0 01                	mov    al,0x1
c0024852:	eb 02                	jmp    c0024856 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0024854:	b0 00                	mov    al,0x0
c0024856:	5d                   	pop    ebp
c0024857:	c3                   	ret    

c0024858 <IOAPIC::read(int)>:
c0024858:	55                   	push   ebp
c0024859:	89 e5                	mov    ebp,esp
c002485b:	83 ec 10             	sub    esp,0x10
c002485e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024861:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024867:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002486a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002486d:	0f b6 d0             	movzx  edx,al
c0024870:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024873:	89 10                	mov    DWORD PTR [eax],edx
c0024875:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024878:	83 c0 10             	add    eax,0x10
c002487b:	8b 00                	mov    eax,DWORD PTR [eax]
c002487d:	c9                   	leave  
c002487e:	c3                   	ret    
c002487f:	90                   	nop

c0024880 <IOAPIC::open(int, int, void*)>:
c0024880:	55                   	push   ebp
c0024881:	89 e5                	mov    ebp,esp
c0024883:	57                   	push   edi
c0024884:	56                   	push   esi
c0024885:	53                   	push   ebx
c0024886:	83 ec 0c             	sub    esp,0xc
c0024889:	83 ec 0c             	sub    esp,0xc
c002488c:	68 17 bc 02 c0       	push   0xc002bc17
c0024891:	e8 3f e0 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0024896:	83 c4 10             	add    esp,0x10
c0024899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002489c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002489f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00248a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00248a8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00248ae:	8b 14 85 c0 d8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2740]
c00248b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00248b8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00248be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00248c1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00248c7:	8b 14 85 40 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd26c0]
c00248ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00248d1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00248d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00248da:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00248e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00248e3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00248e9:	0f b6 f8             	movzx  edi,al
c00248ec:	89 d0                	mov    eax,edx
c00248ee:	ba 00 00 00 00       	mov    edx,0x0
c00248f3:	89 c1                	mov    ecx,eax
c00248f5:	80 e5 ff             	and    ch,0xff
c00248f8:	89 cb                	mov    ebx,ecx
c00248fa:	0f b6 f2             	movzx  esi,dl
c00248fd:	89 d8                	mov    eax,ebx
c00248ff:	89 f2                	mov    edx,esi
c0024901:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024904:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024907:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002490b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002490f:	83 e0 00             	and    eax,0x0
c0024912:	09 d0                	or     eax,edx
c0024914:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024918:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002491b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024921:	8d 50 01             	lea    edx,[eax+0x1]
c0024924:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024927:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002492d:	0f b6 d0             	movzx  edx,al
c0024930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024933:	83 c2 08             	add    edx,0x8
c0024936:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002493a:	0f b6 c9             	movzx  ecx,cl
c002493d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0024943:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024947:	83 ec 08             	sub    esp,0x8
c002494a:	6a 01                	push   0x1
c002494c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002494f:	e8 04 ff ff ff       	call   c0024858 <IOAPIC::read(int)>
c0024954:	83 c4 10             	add    esp,0x10
c0024957:	c1 f8 10             	sar    eax,0x10
c002495a:	0f b6 c0             	movzx  eax,al
c002495d:	8d 50 01             	lea    edx,[eax+0x1]
c0024960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024963:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0024969:	b8 00 00 00 00       	mov    eax,0x0
c002496e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024971:	5b                   	pop    ebx
c0024972:	5e                   	pop    esi
c0024973:	5f                   	pop    edi
c0024974:	5d                   	pop    ebp
c0024975:	c3                   	ret    

c0024976 <IOAPIC::write(int, int)>:
c0024976:	55                   	push   ebp
c0024977:	89 e5                	mov    ebp,esp
c0024979:	83 ec 10             	sub    esp,0x10
c002497c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002497f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024985:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0024988:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002498b:	0f b6 d0             	movzx  edx,al
c002498e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024991:	89 10                	mov    DWORD PTR [eax],edx
c0024993:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024996:	8d 50 10             	lea    edx,[eax+0x10]
c0024999:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002499c:	89 02                	mov    DWORD PTR [edx],eax
c002499e:	90                   	nop
c002499f:	c9                   	leave  
c00249a0:	c3                   	ret    
c00249a1:	90                   	nop

c00249a2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00249a2:	55                   	push   ebp
c00249a3:	89 e5                	mov    ebp,esp
c00249a5:	53                   	push   ebx
c00249a6:	83 ec 2c             	sub    esp,0x2c
c00249a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00249ac:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00249af:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00249b2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00249b5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00249b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00249bb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00249be:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00249c1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00249c4:	88 d8                	mov    al,bl
c00249c6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00249c9:	88 c8                	mov    al,cl
c00249cb:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00249ce:	88 d0                	mov    al,dl
c00249d0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00249d3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00249d7:	83 c0 08             	add    eax,0x8
c00249da:	01 c0                	add    eax,eax
c00249dc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00249df:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00249e3:	83 c0 08             	add    eax,0x8
c00249e6:	01 c0                	add    eax,eax
c00249e8:	40                   	inc    eax
c00249e9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00249ec:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00249ef:	50                   	push   eax
c00249f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00249f3:	e8 60 fe ff ff       	call   c0024858 <IOAPIC::read(int)>
c00249f8:	83 c4 08             	add    esp,0x8
c00249fb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00249fe:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0024a05:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0024a08:	c1 e0 18             	shl    eax,0x18
c0024a0b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0024a0e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024a11:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024a14:	52                   	push   edx
c0024a15:	50                   	push   eax
c0024a16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a19:	e8 58 ff ff ff       	call   c0024976 <IOAPIC::write(int, int)>
c0024a1e:	83 c4 0c             	add    esp,0xc
c0024a21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024a24:	50                   	push   eax
c0024a25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a28:	e8 2b fe ff ff       	call   c0024858 <IOAPIC::read(int)>
c0024a2d:	83 c4 08             	add    esp,0x8
c0024a30:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0024a33:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0024a3a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0024a41:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0024a48:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024a4c:	74 09                	je     c0024a57 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0024a4e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0024a55:	eb 07                	jmp    c0024a5e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0024a57:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0024a5e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0024a62:	74 09                	je     c0024a6d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0024a64:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0024a6b:	eb 07                	jmp    c0024a74 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0024a6d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0024a74:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0024a7b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0024a7f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0024a82:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0024a85:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024a88:	52                   	push   edx
c0024a89:	50                   	push   eax
c0024a8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a8d:	e8 e4 fe ff ff       	call   c0024976 <IOAPIC::write(int, int)>
c0024a92:	83 c4 0c             	add    esp,0xc
c0024a95:	90                   	nop
c0024a96:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0024a99:	c9                   	leave  
c0024a9a:	c3                   	ret    
c0024a9b:	90                   	nop

c0024a9c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0024a9c:	55                   	push   ebp
c0024a9d:	89 e5                	mov    ebp,esp
c0024a9f:	57                   	push   edi
c0024aa0:	56                   	push   esi
c0024aa1:	53                   	push   ebx
c0024aa2:	83 ec 2c             	sub    esp,0x2c
c0024aa5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0024aa8:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0024aab:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024aaf:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0024ab3:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024ab7:	74 5a                	je     c0024b13 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024ab9:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0024abd:	7f 44                	jg     c0024b03 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0024abf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024ac2:	05 60 c1 02 c0       	add    eax,0xc002c160
c0024ac7:	8a 00                	mov    al,BYTE PTR [eax]
c0024ac9:	0f b6 c0             	movzx  eax,al
c0024acc:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0024acf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024ad2:	66 8b 84 00 60 d8 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd27a0]
c0024ada:	0f b7 c0             	movzx  eax,ax
c0024add:	83 e0 02             	and    eax,0x2
c0024ae0:	85 c0                	test   eax,eax
c0024ae2:	74 04                	je     c0024ae8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0024ae4:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0024ae8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024aeb:	66 8b 84 00 60 d8 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd27a0]
c0024af3:	0f b7 c0             	movzx  eax,ax
c0024af6:	83 e0 08             	and    eax,0x8
c0024af9:	85 c0                	test   eax,eax
c0024afb:	74 16                	je     c0024b13 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024afd:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024b01:	eb 10                	jmp    c0024b13 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024b03:	83 ec 0c             	sub    esp,0xc
c0024b06:	68 28 bc 02 c0       	push   0xc002bc28
c0024b0b:	e8 a5 50 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c0024b10:	83 c4 10             	add    esp,0x10
c0024b13:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0024b17:	a1 60 f2 02 c0       	mov    eax,ds:0xc002f260
c0024b1c:	83 ec 08             	sub    esp,0x8
c0024b1f:	50                   	push   eax
c0024b20:	68 60 bc 02 c0       	push   0xc002bc60
c0024b25:	e8 ab dd fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0024b2a:	83 c4 10             	add    esp,0x10
c0024b2d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0024b34:	a1 60 f2 02 c0       	mov    eax,ds:0xc002f260
c0024b39:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0024b3c:	7d 67                	jge    c0024ba5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024b3e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024b41:	8b 04 85 80 f2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0d80]
c0024b48:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024b4b:	83 ec 08             	sub    esp,0x8
c0024b4e:	52                   	push   edx
c0024b4f:	50                   	push   eax
c0024b50:	e8 d1 fc ff ff       	call   c0024826 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0024b55:	83 c4 10             	add    esp,0x10
c0024b58:	84 c0                	test   al,al
c0024b5a:	74 44                	je     c0024ba0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0024b5c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024b5f:	8b 1c 85 80 f2 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd0d80]
c0024b66:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0024b6a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024b6d:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0024b71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024b74:	83 c0 20             	add    eax,0x20
c0024b77:	0f b6 f0             	movzx  esi,al
c0024b7a:	b8 00 00 00 00       	mov    eax,0x0
c0024b7f:	99                   	cdq    
c0024b80:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024b83:	0f b6 c9             	movzx  ecx,cl
c0024b86:	83 ec 04             	sub    esp,0x4
c0024b89:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0024b8c:	57                   	push   edi
c0024b8d:	56                   	push   esi
c0024b8e:	52                   	push   edx
c0024b8f:	50                   	push   eax
c0024b90:	51                   	push   ecx
c0024b91:	53                   	push   ebx
c0024b92:	e8 0b fe ff ff       	call   c00249a2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0024b97:	83 c4 20             	add    esp,0x20
c0024b9a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0024b9e:	eb 05                	jmp    c0024ba5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024ba0:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0024ba3:	eb 8f                	jmp    c0024b34 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0024ba5:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0024ba8:	83 f0 01             	xor    eax,0x1
c0024bab:	84 c0                	test   al,al
c0024bad:	74 10                	je     c0024bbf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0024baf:	83 ec 0c             	sub    esp,0xc
c0024bb2:	68 77 bc 02 c0       	push   0xc002bc77
c0024bb7:	e8 f9 4f ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c0024bbc:	83 c4 10             	add    esp,0x10
c0024bbf:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0024bc3:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0024bca:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0024bce:	7f 65                	jg     c0024c35 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0024bd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024bd3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024bd6:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024bdd:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024be0:	01 ca                	add    edx,ecx
c0024be2:	83 c2 54             	add    edx,0x54
c0024be5:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0024be9:	85 c0                	test   eax,eax
c0024beb:	75 43                	jne    c0024c30 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0024bed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024bf0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024bf3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024bfa:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024bfd:	01 ca                	add    edx,ecx
c0024bff:	8d 4a 54             	lea    ecx,[edx+0x54]
c0024c02:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0024c05:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0024c09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024c0c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024c0f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024c16:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024c19:	01 ca                	add    edx,ecx
c0024c1b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0024c21:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0024c24:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0024c28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024c2b:	83 e8 20             	sub    eax,0x20
c0024c2e:	eb 1a                	jmp    c0024c4a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0024c30:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0024c33:	eb 95                	jmp    c0024bca <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0024c35:	83 ec 0c             	sub    esp,0xc
c0024c38:	68 84 bc 02 c0       	push   0xc002bc84
c0024c3d:	e8 73 4f ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c0024c42:	83 c4 10             	add    esp,0x10
c0024c45:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024c4a:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024c4d:	5b                   	pop    ebx
c0024c4e:	5e                   	pop    esi
c0024c4f:	5f                   	pop    edi
c0024c50:	5d                   	pop    ebp
c0024c51:	c3                   	ret    

c0024c52 <PIC::disable()>:
c0024c52:	55                   	push   ebp
c0024c53:	89 e5                	mov    ebp,esp
c0024c55:	83 ec 10             	sub    esp,0x10
c0024c58:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0024c5e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0024c62:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024c65:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024c69:	ee                   	out    dx,al
c0024c6a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0024c70:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0024c74:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024c77:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0024c7b:	ee                   	out    dx,al
c0024c7c:	90                   	nop
c0024c7d:	c9                   	leave  
c0024c7e:	c3                   	ret    
c0024c7f:	90                   	nop

c0024c80 <PIC::close(int, int, void*)>:
c0024c80:	55                   	push   ebp
c0024c81:	89 e5                	mov    ebp,esp
c0024c83:	83 ec 08             	sub    esp,0x8
c0024c86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024c89:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c8b:	83 c0 3c             	add    eax,0x3c
c0024c8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c90:	83 ec 0c             	sub    esp,0xc
c0024c93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024c96:	ff d0                	call   eax
c0024c98:	83 c4 10             	add    esp,0x10
c0024c9b:	b8 00 00 00 00       	mov    eax,0x0
c0024ca0:	c9                   	leave  
c0024ca1:	c3                   	ret    

c0024ca2 <PIC::PIC()>:
c0024ca2:	83 ec 0c             	sub    esp,0xc
c0024ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ca9:	83 ec 08             	sub    esp,0x8
c0024cac:	68 30 bd 02 c0       	push   0xc002bd30
c0024cb1:	50                   	push   eax
c0024cb2:	e8 8d f9 fe ff       	call   c0014644 <InterruptController::InterruptController(char const*)>
c0024cb7:	83 c4 10             	add    esp,0x10
c0024cba:	ba 5c bd 02 c0       	mov    edx,0xc002bd5c
c0024cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cc3:	89 10                	mov    DWORD PTR [eax],edx
c0024cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cc9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024ccf:	0f b6 d0             	movzx  edx,al
c0024cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cd6:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0024cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ce1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024ce7:	0f b6 d0             	movzx  edx,al
c0024cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cee:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024cf7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024cfd:	8d 50 01             	lea    edx,[eax+0x1]
c0024d00:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024d04:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024d0a:	0f b6 d0             	movzx  edx,al
c0024d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d11:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024d15:	83 e1 3f             	and    ecx,0x3f
c0024d18:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d20:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024d26:	0f b6 d0             	movzx  edx,al
c0024d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d2d:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0024d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d38:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024d3e:	0f b6 d0             	movzx  edx,al
c0024d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d45:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d4e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024d54:	8d 50 01             	lea    edx,[eax+0x1]
c0024d57:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024d5b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024d61:	0f b6 d0             	movzx  edx,al
c0024d64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d68:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024d6c:	83 e1 3f             	and    ecx,0x3f
c0024d6f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024d73:	90                   	nop
c0024d74:	83 c4 0c             	add    esp,0xc
c0024d77:	c3                   	ret    

c0024d78 <PIC::ioWait()>:
c0024d78:	eb 00                	jmp    c0024d7a <PIC::ioWait()+0x2>
c0024d7a:	eb 00                	jmp    c0024d7c <PIC::ioWait()+0x4>
c0024d7c:	90                   	nop
c0024d7d:	c3                   	ret    

c0024d7e <PIC::getIRQReg(int)>:
c0024d7e:	55                   	push   ebp
c0024d7f:	89 e5                	mov    ebp,esp
c0024d81:	83 ec 10             	sub    esp,0x10
c0024d84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024d87:	0f b6 c0             	movzx  eax,al
c0024d8a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024d90:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0024d93:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024d96:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024d9a:	ee                   	out    dx,al
c0024d9b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024d9e:	0f b6 c0             	movzx  eax,al
c0024da1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024da7:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0024daa:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024dad:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024db1:	ee                   	out    dx,al
c0024db2:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0024db8:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0024dbc:	89 c2                	mov    edx,eax
c0024dbe:	ec                   	in     al,dx
c0024dbf:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0024dc2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024dc5:	0f b6 c0             	movzx  eax,al
c0024dc8:	c1 e0 08             	shl    eax,0x8
c0024dcb:	89 c1                	mov    ecx,eax
c0024dcd:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0024dd3:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0024dd7:	89 c2                	mov    edx,eax
c0024dd9:	ec                   	in     al,dx
c0024dda:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0024ddd:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024de0:	0f b6 c0             	movzx  eax,al
c0024de3:	09 c8                	or     eax,ecx
c0024de5:	c9                   	leave  
c0024de6:	c3                   	ret    
c0024de7:	90                   	nop

c0024de8 <PIC::eoi(unsigned char)>:
c0024de8:	55                   	push   ebp
c0024de9:	89 e5                	mov    ebp,esp
c0024deb:	83 ec 14             	sub    esp,0x14
c0024dee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024df1:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0024df4:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024df8:	75 1e                	jne    c0024e18 <PIC::eoi(unsigned char)+0x30>
c0024dfa:	6a 0b                	push   0xb
c0024dfc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024dff:	e8 7a ff ff ff       	call   c0024d7e <PIC::getIRQReg(int)>
c0024e04:	83 c4 08             	add    esp,0x8
c0024e07:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0024e0b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0024e0f:	25 80 00 00 00       	and    eax,0x80
c0024e14:	85 c0                	test   eax,eax
c0024e16:	74 5f                	je     c0024e77 <PIC::eoi(unsigned char)+0x8f>
c0024e18:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0024e1c:	75 2d                	jne    c0024e4b <PIC::eoi(unsigned char)+0x63>
c0024e1e:	6a 0b                	push   0xb
c0024e20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e23:	e8 56 ff ff ff       	call   c0024d7e <PIC::getIRQReg(int)>
c0024e28:	83 c4 08             	add    esp,0x8
c0024e2b:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0024e2f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024e32:	66 85 c0             	test   ax,ax
c0024e35:	78 14                	js     c0024e4b <PIC::eoi(unsigned char)+0x63>
c0024e37:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0024e3d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0024e41:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024e44:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024e48:	ee                   	out    dx,al
c0024e49:	eb 2d                	jmp    c0024e78 <PIC::eoi(unsigned char)+0x90>
c0024e4b:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024e4f:	76 12                	jbe    c0024e63 <PIC::eoi(unsigned char)+0x7b>
c0024e51:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024e57:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0024e5b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024e5e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024e62:	ee                   	out    dx,al
c0024e63:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024e69:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0024e6d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024e70:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024e74:	ee                   	out    dx,al
c0024e75:	eb 01                	jmp    c0024e78 <PIC::eoi(unsigned char)+0x90>
c0024e77:	90                   	nop
c0024e78:	c9                   	leave  
c0024e79:	c3                   	ret    

c0024e7a <PIC::remap()>:
c0024e7a:	55                   	push   ebp
c0024e7b:	89 e5                	mov    ebp,esp
c0024e7d:	83 ec 48             	sub    esp,0x48
c0024e80:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0024e87:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0024e8e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0024e94:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0024e97:	89 c2                	mov    edx,eax
c0024e99:	ec                   	in     al,dx
c0024e9a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0024e9d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0024ea0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0024ea3:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0024ea9:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0024eac:	89 c2                	mov    edx,eax
c0024eae:	ec                   	in     al,dx
c0024eaf:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0024eb2:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0024eb5:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0024eb8:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0024ebe:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0024ec2:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0024ec5:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0024ec8:	ee                   	out    dx,al
c0024ec9:	83 ec 0c             	sub    esp,0xc
c0024ecc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024ecf:	e8 a4 fe ff ff       	call   c0024d78 <PIC::ioWait()>
c0024ed4:	83 c4 10             	add    esp,0x10
c0024ed7:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0024edd:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0024ee1:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0024ee4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024ee7:	ee                   	out    dx,al
c0024ee8:	83 ec 0c             	sub    esp,0xc
c0024eeb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024eee:	e8 85 fe ff ff       	call   c0024d78 <PIC::ioWait()>
c0024ef3:	83 c4 10             	add    esp,0x10
c0024ef6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024ef9:	0f b6 c0             	movzx  eax,al
c0024efc:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0024f02:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0024f05:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0024f08:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0024f0b:	ee                   	out    dx,al
c0024f0c:	83 ec 0c             	sub    esp,0xc
c0024f0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f12:	e8 61 fe ff ff       	call   c0024d78 <PIC::ioWait()>
c0024f17:	83 c4 10             	add    esp,0x10
c0024f1a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024f1d:	0f b6 c0             	movzx  eax,al
c0024f20:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0024f26:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0024f29:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0024f2c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024f2f:	ee                   	out    dx,al
c0024f30:	83 ec 0c             	sub    esp,0xc
c0024f33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f36:	e8 3d fe ff ff       	call   c0024d78 <PIC::ioWait()>
c0024f3b:	83 c4 10             	add    esp,0x10
c0024f3e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0024f44:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0024f48:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0024f4b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0024f4e:	ee                   	out    dx,al
c0024f4f:	83 ec 0c             	sub    esp,0xc
c0024f52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f55:	e8 1e fe ff ff       	call   c0024d78 <PIC::ioWait()>
c0024f5a:	83 c4 10             	add    esp,0x10
c0024f5d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0024f63:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0024f67:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0024f6a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024f6d:	ee                   	out    dx,al
c0024f6e:	83 ec 0c             	sub    esp,0xc
c0024f71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f74:	e8 ff fd ff ff       	call   c0024d78 <PIC::ioWait()>
c0024f79:	83 c4 10             	add    esp,0x10
c0024f7c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024f82:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0024f86:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0024f89:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024f8c:	ee                   	out    dx,al
c0024f8d:	83 ec 0c             	sub    esp,0xc
c0024f90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024f93:	e8 e0 fd ff ff       	call   c0024d78 <PIC::ioWait()>
c0024f98:	83 c4 10             	add    esp,0x10
c0024f9b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0024fa1:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024fa5:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0024fa8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024fab:	ee                   	out    dx,al
c0024fac:	83 ec 0c             	sub    esp,0xc
c0024faf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024fb2:	e8 c1 fd ff ff       	call   c0024d78 <PIC::ioWait()>
c0024fb7:	83 c4 10             	add    esp,0x10
c0024fba:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0024fbe:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024fc4:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0024fc7:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0024fca:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024fcd:	ee                   	out    dx,al
c0024fce:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024fd2:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0024fd8:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0024fdb:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0024fde:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024fe1:	ee                   	out    dx,al
c0024fe2:	90                   	nop
c0024fe3:	c9                   	leave  
c0024fe4:	c3                   	ret    
c0024fe5:	90                   	nop

c0024fe6 <PIC::open(int, int, void*)>:
c0024fe6:	55                   	push   ebp
c0024fe7:	89 e5                	mov    ebp,esp
c0024fe9:	83 ec 18             	sub    esp,0x18
c0024fec:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0024ff2:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0024ff6:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024ff9:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024ffd:	ee                   	out    dx,al
c0024ffe:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025004:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025008:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002500b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002500f:	ee                   	out    dx,al
c0025010:	83 ec 0c             	sub    esp,0xc
c0025013:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025016:	e8 5f fe ff ff       	call   c0024e7a <PIC::remap()>
c002501b:	83 c4 10             	add    esp,0x10
c002501e:	b8 00 00 00 00       	mov    eax,0x0
c0025023:	c9                   	leave  
c0025024:	c3                   	ret    
c0025025:	90                   	nop

c0025026 <APICTimer::close(int, int, void*)>:
c0025026:	b8 00 00 00 00       	mov    eax,0x0
c002502b:	c3                   	ret    

c002502c <apicTimerHandler(regs*, void*)>:
c002502c:	83 ec 0c             	sub    esp,0xc
c002502f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025033:	8b 00                	mov    eax,DWORD PTR [eax]
c0025035:	99                   	cdq    
c0025036:	52                   	push   edx
c0025037:	50                   	push   eax
c0025038:	6a 00                	push   0x0
c002503a:	68 00 ca 9a 3b       	push   0x3b9aca00
c002503f:	e8 88 07 00 00       	call   c00257cc <__udivdi3>
c0025044:	83 c4 10             	add    esp,0x10
c0025047:	83 ec 08             	sub    esp,0x8
c002504a:	52                   	push   edx
c002504b:	50                   	push   eax
c002504c:	e8 f2 14 ff ff       	call   c0016543 <timerHandler(unsigned long long)>
c0025051:	83 c4 10             	add    esp,0x10
c0025054:	90                   	nop
c0025055:	83 c4 0c             	add    esp,0xc
c0025058:	c3                   	ret    
c0025059:	90                   	nop

c002505a <APICTimer::write(int)>:
c002505a:	53                   	push   ebx
c002505b:	83 ec 28             	sub    esp,0x28
c002505e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025062:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025066:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002506c:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0025071:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025077:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002507d:	83 ec 0c             	sub    esp,0xc
c0025080:	50                   	push   eax
c0025081:	e8 de f4 ff ff       	call   c0024564 <APIC::getBase()>
c0025086:	83 c4 10             	add    esp,0x10
c0025089:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002508d:	a1 90 d5 02 c0       	mov    eax,ds:0xc002d590
c0025092:	8b 15 94 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d594
c0025098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002509c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00250a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00250a4:	05 e0 03 00 00       	add    eax,0x3e0
c00250a9:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00250af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00250b3:	05 80 03 00 00       	add    eax,0x380
c00250b8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00250be:	fb                   	sti    
c00250bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00250c7:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c00250cc:	83 d2 00             	adc    edx,0x0
c00250cf:	89 c1                	mov    ecx,eax
c00250d1:	89 d3                	mov    ebx,edx
c00250d3:	a1 90 d5 02 c0       	mov    eax,ds:0xc002d590
c00250d8:	8b 15 94 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d594
c00250de:	39 c8                	cmp    eax,ecx
c00250e0:	89 d0                	mov    eax,edx
c00250e2:	19 d8                	sbb    eax,ebx
c00250e4:	73 02                	jae    c00250e8 <APICTimer::write(int)+0x8e>
c00250e6:	eb d7                	jmp    c00250bf <APICTimer::write(int)+0x65>
c00250e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00250ec:	05 20 03 00 00       	add    eax,0x320
c00250f1:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00250f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00250fb:	05 90 03 00 00       	add    eax,0x390
c0025100:	8b 00                	mov    eax,DWORD PTR [eax]
c0025102:	f7 d0                	not    eax
c0025104:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025108:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002510c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025110:	ba 00 00 00 00       	mov    edx,0x0
c0025115:	f7 f3                	div    ebx
c0025117:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002511b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002511f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025125:	0d 00 00 02 00       	or     eax,0x20000
c002512a:	89 c2                	mov    edx,eax
c002512c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025130:	05 20 03 00 00       	add    eax,0x320
c0025135:	89 10                	mov    DWORD PTR [eax],edx
c0025137:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002513b:	05 e0 03 00 00       	add    eax,0x3e0
c0025140:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025146:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002514a:	05 80 03 00 00       	add    eax,0x380
c002514f:	89 c2                	mov    edx,eax
c0025151:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025155:	89 02                	mov    DWORD PTR [edx],eax
c0025157:	90                   	nop
c0025158:	83 c4 28             	add    esp,0x28
c002515b:	5b                   	pop    ebx
c002515c:	c3                   	ret    
c002515d:	90                   	nop

c002515e <APICTimer::open(int, int, void*)>:
c002515e:	57                   	push   edi
c002515f:	56                   	push   esi
c0025160:	53                   	push   ebx
c0025161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025165:	8b 00                	mov    eax,DWORD PTR [eax]
c0025167:	83 c0 24             	add    eax,0x24
c002516a:	8b 00                	mov    eax,DWORD PTR [eax]
c002516c:	83 ec 08             	sub    esp,0x8
c002516f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025173:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025177:	ff d0                	call   eax
c0025179:	83 c4 10             	add    esp,0x10
c002517c:	a1 08 cf 02 c0       	mov    eax,ds:0xc002cf08
c0025181:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025187:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002518d:	83 ec 0c             	sub    esp,0xc
c0025190:	50                   	push   eax
c0025191:	e8 ce f3 ff ff       	call   c0024564 <APIC::getBase()>
c0025196:	83 c4 10             	add    esp,0x10
c0025199:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002519f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251a3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00251a9:	0f b6 f8             	movzx  edi,al
c00251ac:	89 d0                	mov    eax,edx
c00251ae:	ba 00 00 00 00       	mov    edx,0x0
c00251b3:	89 c1                	mov    ecx,eax
c00251b5:	80 e5 ff             	and    ch,0xff
c00251b8:	89 cb                	mov    ebx,ecx
c00251ba:	0f b6 f2             	movzx  esi,dl
c00251bd:	89 d8                	mov    eax,ebx
c00251bf:	89 f2                	mov    edx,esi
c00251c1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00251c5:	8d 5f 08             	lea    ebx,[edi+0x8]
c00251c8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00251cc:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00251d0:	83 e0 00             	and    eax,0x0
c00251d3:	09 d0                	or     eax,edx
c00251d5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00251d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251dd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00251e3:	8d 50 01             	lea    edx,[eax+0x1]
c00251e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00251ea:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00251f0:	0f b6 d0             	movzx  edx,al
c00251f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251f7:	83 c2 08             	add    edx,0x8
c00251fa:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00251fe:	0f b6 c9             	movzx  ecx,cl
c0025201:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025207:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002520b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002520f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025213:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002521d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025221:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0025227:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002522b:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0025231:	83 ec 0c             	sub    esp,0xc
c0025234:	51                   	push   ecx
c0025235:	6a 01                	push   0x1
c0025237:	68 2c 50 02 c0       	push   0xc002502c
c002523c:	52                   	push   edx
c002523d:	50                   	push   eax
c002523e:	e8 3d ea fe ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025243:	83 c4 20             	add    esp,0x20
c0025246:	89 c2                	mov    edx,eax
c0025248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002524c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025252:	b8 00 00 00 00       	mov    eax,0x0
c0025257:	5b                   	pop    ebx
c0025258:	5e                   	pop    esi
c0025259:	5f                   	pop    edi
c002525a:	c3                   	ret    
c002525b:	90                   	nop

c002525c <APICTimer::APICTimer()>:
c002525c:	83 ec 0c             	sub    esp,0xc
c002525f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025263:	83 ec 08             	sub    esp,0x8
c0025266:	68 9c bd 02 c0       	push   0xc002bd9c
c002526b:	50                   	push   eax
c002526c:	e8 43 12 ff ff       	call   c00164b4 <Timer::Timer(char const*)>
c0025271:	83 c4 10             	add    esp,0x10
c0025274:	ba b0 bd 02 c0       	mov    edx,0xc002bdb0
c0025279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002527d:	89 10                	mov    DWORD PTR [eax],edx
c002527f:	90                   	nop
c0025280:	83 c4 0c             	add    esp,0xc
c0025283:	c3                   	ret    

c0025284 <PIT::write(int)>:
c0025284:	83 ec 10             	sub    esp,0x10
c0025287:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002528b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002528f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025295:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025299:	a3 a4 f2 02 c0       	mov    ds:0xc002f2a4,eax
c002529e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00252a3:	99                   	cdq    
c00252a4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00252a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00252ac:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00252b3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00252b8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00252bc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00252c1:	ee                   	out    dx,al
c00252c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00252c6:	0f b6 c0             	movzx  eax,al
c00252c9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00252d0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00252d4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00252d8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00252dd:	ee                   	out    dx,al
c00252de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00252e2:	c1 f8 08             	sar    eax,0x8
c00252e5:	0f b6 c0             	movzx  eax,al
c00252e8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00252ef:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00252f3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00252f7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00252fc:	ee                   	out    dx,al
c00252fd:	90                   	nop
c00252fe:	83 c4 10             	add    esp,0x10
c0025301:	c3                   	ret    

c0025302 <pitHandler(regs*, void*)>:
c0025302:	83 ec 0c             	sub    esp,0xc
c0025305:	a1 a4 f2 02 c0       	mov    eax,ds:0xc002f2a4
c002530a:	99                   	cdq    
c002530b:	52                   	push   edx
c002530c:	50                   	push   eax
c002530d:	6a 00                	push   0x0
c002530f:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025314:	e8 b3 04 00 00       	call   c00257cc <__udivdi3>
c0025319:	83 c4 10             	add    esp,0x10
c002531c:	83 ec 08             	sub    esp,0x8
c002531f:	52                   	push   edx
c0025320:	50                   	push   eax
c0025321:	e8 1d 12 ff ff       	call   c0016543 <timerHandler(unsigned long long)>
c0025326:	83 c4 10             	add    esp,0x10
c0025329:	90                   	nop
c002532a:	83 c4 0c             	add    esp,0xc
c002532d:	c3                   	ret    

c002532e <PIT::open(int, int, void*)>:
c002532e:	83 ec 0c             	sub    esp,0xc
c0025331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025335:	8b 00                	mov    eax,DWORD PTR [eax]
c0025337:	83 c0 24             	add    eax,0x24
c002533a:	8b 00                	mov    eax,DWORD PTR [eax]
c002533c:	83 ec 08             	sub    esp,0x8
c002533f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025343:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025347:	ff d0                	call   eax
c0025349:	83 c4 10             	add    esp,0x10
c002534c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025350:	83 ec 0c             	sub    esp,0xc
c0025353:	6a 00                	push   0x0
c0025355:	6a 01                	push   0x1
c0025357:	68 02 53 02 c0       	push   0xc0025302
c002535c:	6a 00                	push   0x0
c002535e:	50                   	push   eax
c002535f:	e8 1c e9 fe ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025364:	83 c4 20             	add    esp,0x20
c0025367:	89 c2                	mov    edx,eax
c0025369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002536d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025373:	b8 00 00 00 00       	mov    eax,0x0
c0025378:	83 c4 0c             	add    esp,0xc
c002537b:	c3                   	ret    

c002537c <PIT::close(int, int, void*)>:
c002537c:	83 ec 0c             	sub    esp,0xc
c002537f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025383:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002538d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025391:	6a 01                	push   0x1
c0025393:	68 02 53 02 c0       	push   0xc0025302
c0025398:	6a 00                	push   0x0
c002539a:	50                   	push   eax
c002539b:	e8 1e e9 fe ff       	call   c0013cbe <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00253a0:	83 c4 10             	add    esp,0x10
c00253a3:	b8 00 00 00 00       	mov    eax,0x0
c00253a8:	83 c4 0c             	add    esp,0xc
c00253ab:	c3                   	ret    

c00253ac <PIT::PIT()>:
c00253ac:	83 ec 0c             	sub    esp,0xc
c00253af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253b3:	83 ec 08             	sub    esp,0x8
c00253b6:	68 d8 bd 02 c0       	push   0xc002bdd8
c00253bb:	50                   	push   eax
c00253bc:	e8 f3 10 ff ff       	call   c00164b4 <Timer::Timer(char const*)>
c00253c1:	83 c4 10             	add    esp,0x10
c00253c4:	ba 00 be 02 c0       	mov    edx,0xc002be00
c00253c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253cd:	89 10                	mov    DWORD PTR [eax],edx
c00253cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00253d9:	0f b6 d0             	movzx  edx,al
c00253dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253e0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c00253e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00253f1:	0f b6 d0             	movzx  edx,al
c00253f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253f8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00253fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025401:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025407:	8d 50 01             	lea    edx,[eax+0x1]
c002540a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002540e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025414:	0f b6 d0             	movzx  edx,al
c0025417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002541b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002541f:	83 e1 3f             	and    ecx,0x3f
c0025422:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025426:	90                   	nop
c0025427:	83 c4 0c             	add    esp,0xc
c002542a:	c3                   	ret    
c002542b:	66 90                	xchg   ax,ax
c002542d:	66 90                	xchg   ax,ax
c002542f:	90                   	nop

c0025430 <avxDetect>:
c0025430:	b8 00 00 00 00       	mov    eax,0x0
c0025435:	c3                   	ret    

c0025436 <avxSave>:
c0025436:	c3                   	ret    

c0025437 <avxLoad>:
c0025437:	c3                   	ret    

c0025438 <avxInit>:
c0025438:	c3                   	ret    

c0025439 <avxClose>:
c0025439:	c3                   	ret    

c002543a <wouldSheSayYes>:
c002543a:	c3                   	ret    
c002543b:	49                   	dec    ecx
c002543c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025440:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025444:	75 20                	jne    c0025466 <sseDetect.noSSE+0x1>
c0025446:	4e                   	dec    esi
c0025447:	79 61                	jns    c00254aa <x87Detect+0x14>
c0025449:	68 2e 2e 2e 00       	push   0x2e2e2e
c002544e:	66 90                	xchg   ax,ax

c0025450 <absolutelyNoChanceInHell>:
c0025450:	b8 01 00 00 00       	mov    eax,0x1
c0025455:	0f a2                	cpuid  
c0025457:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002545d:	74 06                	je     c0025465 <sseDetect.noSSE>
c002545f:	b8 01 00 00 00       	mov    eax,0x1
c0025464:	c3                   	ret    

c0025465 <sseDetect.noSSE>:
c0025465:	31 c0                	xor    eax,eax
c0025467:	c3                   	ret    

c0025468 <sseSave>:
c0025468:	0f ae 44 24 08       	fxsave [esp+0x8]
c002546d:	c3                   	ret    

c002546e <sseLoad>:
c002546e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025473:	c3                   	ret    

c0025474 <sseInit>:
c0025474:	e8 43 00 00 00       	call   c00254bc <x87Init>
c0025479:	0f 20 e0             	mov    eax,cr4
c002547c:	66 0d 00 06          	or     ax,0x600
c0025480:	0f 22 e0             	mov    cr4,eax
c0025483:	c3                   	ret    

c0025484 <sseClose>:
c0025484:	c3                   	ret    
c0025485:	66 90                	xchg   ax,ax
c0025487:	66 90                	xchg   ax,ax
c0025489:	66 90                	xchg   ax,ax
c002548b:	66 90                	xchg   ax,ax
c002548d:	66 90                	xchg   ax,ax
c002548f:	90                   	nop

c0025490 <value_37F>:
c0025490:	7f 03                	jg     c0025495 <value_37A+0x1>

c0025492 <value_37E>:
c0025492:	7e 03                	jle    c0025497 <x87Detect+0x1>

c0025494 <value_37A>:
c0025494:	7a 03                	jp     c0025499 <x87Detect+0x3>

c0025496 <x87Detect>:
c0025496:	b8 01 00 00 00       	mov    eax,0x1
c002549b:	0f a2                	cpuid  
c002549d:	f7 c2 01 00 00 00    	test   edx,0x1
c00254a3:	74 06                	je     c00254ab <x87Detect.nox87>
c00254a5:	b8 01 00 00 00       	mov    eax,0x1
c00254aa:	c3                   	ret    

c00254ab <x87Detect.nox87>:
c00254ab:	b8 00 00 00 00       	mov    eax,0x0
c00254b0:	c3                   	ret    

c00254b1 <x87Save>:
c00254b1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00254b6:	c3                   	ret    

c00254b7 <x87Load>:
c00254b7:	dd 64 24 08          	frstor [esp+0x8]
c00254bb:	c3                   	ret    

c00254bc <x87Init>:
c00254bc:	9b db e3             	finit  
c00254bf:	0f 20 c0             	mov    eax,cr0
c00254c2:	66 25 fb ff          	and    ax,0xfffb
c00254c6:	66 0d 22 00          	or     ax,0x22
c00254ca:	0f 22 c0             	mov    cr0,eax
c00254cd:	0f 06                	clts   
c00254cf:	d9 2d 94 54 02 c0    	fldcw  WORD PTR ds:0xc0025494
c00254d5:	c3                   	ret    

c00254d6 <x87Close>:
c00254d6:	c3                   	ret    
c00254d7:	90                   	nop

c00254d8 <__do_global_ctors_aux>:
c00254d8:	a1 cc 7f 02 c0       	mov    eax,ds:0xc0027fcc
c00254dd:	83 f8 ff             	cmp    eax,0xffffffff
c00254e0:	74 1a                	je     c00254fc <__do_global_ctors_aux+0x24>
c00254e2:	55                   	push   ebp
c00254e3:	89 e5                	mov    ebp,esp
c00254e5:	53                   	push   ebx
c00254e6:	52                   	push   edx
c00254e7:	bb cc 7f 02 c0       	mov    ebx,0xc0027fcc
c00254ec:	ff d0                	call   eax
c00254ee:	83 eb 04             	sub    ebx,0x4
c00254f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00254f3:	83 f8 ff             	cmp    eax,0xffffffff
c00254f6:	75 f4                	jne    c00254ec <__do_global_ctors_aux+0x14>
c00254f8:	58                   	pop    eax
c00254f9:	5b                   	pop    ebx
c00254fa:	5d                   	pop    ebp
c00254fb:	c3                   	ret    
c00254fc:	c3                   	ret    
c00254fd:	66 90                	xchg   ax,ax
c00254ff:	90                   	nop

c0025500 <__divdi3>:
c0025500:	55                   	push   ebp
c0025501:	57                   	push   edi
c0025502:	56                   	push   esi
c0025503:	53                   	push   ebx
c0025504:	83 ec 1c             	sub    esp,0x1c
c0025507:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002550b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002550f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025512:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025516:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002551a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002551e:	85 db                	test   ebx,ebx
c0025520:	0f 88 8e 00 00 00    	js     c00255b4 <__divdi3+0xb4>
c0025526:	89 dd                	mov    ebp,ebx
c0025528:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025530:	89 d3                	mov    ebx,edx
c0025532:	85 d2                	test   edx,edx
c0025534:	79 0d                	jns    c0025543 <__divdi3+0x43>
c0025536:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002553a:	f7 d8                	neg    eax
c002553c:	83 d2 00             	adc    edx,0x0
c002553f:	f7 da                	neg    edx
c0025541:	89 d3                	mov    ebx,edx
c0025543:	89 c7                	mov    edi,eax
c0025545:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025548:	85 db                	test   ebx,ebx
c002554a:	75 48                	jne    c0025594 <__divdi3+0x94>
c002554c:	39 ef                	cmp    edi,ebp
c002554e:	76 24                	jbe    c0025574 <__divdi3+0x74>
c0025550:	89 ea                	mov    edx,ebp
c0025552:	f7 f7                	div    edi
c0025554:	89 c1                	mov    ecx,eax
c0025556:	31 f6                	xor    esi,esi
c0025558:	89 c8                	mov    eax,ecx
c002555a:	89 f2                	mov    edx,esi
c002555c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025560:	85 c9                	test   ecx,ecx
c0025562:	74 07                	je     c002556b <__divdi3+0x6b>
c0025564:	f7 d8                	neg    eax
c0025566:	83 d2 00             	adc    edx,0x0
c0025569:	f7 da                	neg    edx
c002556b:	83 c4 1c             	add    esp,0x1c
c002556e:	5b                   	pop    ebx
c002556f:	5e                   	pop    esi
c0025570:	5f                   	pop    edi
c0025571:	5d                   	pop    ebp
c0025572:	c3                   	ret    
c0025573:	90                   	nop
c0025574:	85 ff                	test   edi,edi
c0025576:	75 0b                	jne    c0025583 <__divdi3+0x83>
c0025578:	b8 01 00 00 00       	mov    eax,0x1
c002557d:	31 d2                	xor    edx,edx
c002557f:	f7 f3                	div    ebx
c0025581:	89 c7                	mov    edi,eax
c0025583:	31 d2                	xor    edx,edx
c0025585:	89 e8                	mov    eax,ebp
c0025587:	f7 f7                	div    edi
c0025589:	89 c6                	mov    esi,eax
c002558b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002558e:	f7 f7                	div    edi
c0025590:	89 c1                	mov    ecx,eax
c0025592:	eb c4                	jmp    c0025558 <__divdi3+0x58>
c0025594:	39 eb                	cmp    ebx,ebp
c0025596:	77 3c                	ja     c00255d4 <__divdi3+0xd4>
c0025598:	0f bd f3             	bsr    esi,ebx
c002559b:	83 f6 1f             	xor    esi,0x1f
c002559e:	75 40                	jne    c00255e0 <__divdi3+0xe0>
c00255a0:	39 eb                	cmp    ebx,ebp
c00255a2:	72 09                	jb     c00255ad <__divdi3+0xad>
c00255a4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00255a7:	0f 87 97 00 00 00    	ja     c0025644 <__divdi3+0x144>
c00255ad:	b9 01 00 00 00       	mov    ecx,0x1
c00255b2:	eb a4                	jmp    c0025558 <__divdi3+0x58>
c00255b4:	f7 d9                	neg    ecx
c00255b6:	83 d3 00             	adc    ebx,0x0
c00255b9:	f7 db                	neg    ebx
c00255bb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00255be:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00255c2:	89 dd                	mov    ebp,ebx
c00255c4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00255cc:	e9 5f ff ff ff       	jmp    c0025530 <__divdi3+0x30>
c00255d1:	8d 76 00             	lea    esi,[esi+0x0]
c00255d4:	31 f6                	xor    esi,esi
c00255d6:	31 c9                	xor    ecx,ecx
c00255d8:	e9 7b ff ff ff       	jmp    c0025558 <__divdi3+0x58>
c00255dd:	8d 76 00             	lea    esi,[esi+0x0]
c00255e0:	b8 20 00 00 00       	mov    eax,0x20
c00255e5:	29 f0                	sub    eax,esi
c00255e7:	89 f1                	mov    ecx,esi
c00255e9:	d3 e3                	shl    ebx,cl
c00255eb:	89 fa                	mov    edx,edi
c00255ed:	88 c1                	mov    cl,al
c00255ef:	d3 ea                	shr    edx,cl
c00255f1:	09 da                	or     edx,ebx
c00255f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00255f7:	89 f1                	mov    ecx,esi
c00255f9:	d3 e7                	shl    edi,cl
c00255fb:	89 eb                	mov    ebx,ebp
c00255fd:	88 c1                	mov    cl,al
c00255ff:	d3 eb                	shr    ebx,cl
c0025601:	89 f1                	mov    ecx,esi
c0025603:	d3 e5                	shl    ebp,cl
c0025605:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0025608:	88 c1                	mov    cl,al
c002560a:	d3 ea                	shr    edx,cl
c002560c:	09 d5                	or     ebp,edx
c002560e:	89 e8                	mov    eax,ebp
c0025610:	89 da                	mov    edx,ebx
c0025612:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025616:	89 d3                	mov    ebx,edx
c0025618:	89 c5                	mov    ebp,eax
c002561a:	f7 e7                	mul    edi
c002561c:	39 d3                	cmp    ebx,edx
c002561e:	72 18                	jb     c0025638 <__divdi3+0x138>
c0025620:	74 0a                	je     c002562c <__divdi3+0x12c>
c0025622:	89 e9                	mov    ecx,ebp
c0025624:	31 f6                	xor    esi,esi
c0025626:	e9 2d ff ff ff       	jmp    c0025558 <__divdi3+0x58>
c002562b:	90                   	nop
c002562c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002562f:	89 f1                	mov    ecx,esi
c0025631:	d3 e7                	shl    edi,cl
c0025633:	39 c7                	cmp    edi,eax
c0025635:	73 eb                	jae    c0025622 <__divdi3+0x122>
c0025637:	90                   	nop
c0025638:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002563b:	31 f6                	xor    esi,esi
c002563d:	e9 16 ff ff ff       	jmp    c0025558 <__divdi3+0x58>
c0025642:	66 90                	xchg   ax,ax
c0025644:	31 c9                	xor    ecx,ecx
c0025646:	e9 0d ff ff ff       	jmp    c0025558 <__divdi3+0x58>
c002564b:	90                   	nop

c002564c <__moddi3>:
c002564c:	55                   	push   ebp
c002564d:	57                   	push   edi
c002564e:	56                   	push   esi
c002564f:	53                   	push   ebx
c0025650:	83 ec 2c             	sub    esp,0x2c
c0025653:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025657:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002565b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002565f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025663:	85 db                	test   ebx,ebx
c0025665:	0f 88 85 00 00 00    	js     c00256f0 <__moddi3+0xa4>
c002566b:	89 de                	mov    esi,ebx
c002566d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025675:	89 d7                	mov    edi,edx
c0025677:	85 d2                	test   edx,edx
c0025679:	79 09                	jns    c0025684 <__moddi3+0x38>
c002567b:	f7 d8                	neg    eax
c002567d:	83 d2 00             	adc    edx,0x0
c0025680:	f7 da                	neg    edx
c0025682:	89 d7                	mov    edi,edx
c0025684:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025688:	89 cd                	mov    ebp,ecx
c002568a:	85 ff                	test   edi,edi
c002568c:	75 52                	jne    c00256e0 <__moddi3+0x94>
c002568e:	89 c3                	mov    ebx,eax
c0025690:	39 f0                	cmp    eax,esi
c0025692:	76 24                	jbe    c00256b8 <__moddi3+0x6c>
c0025694:	89 c8                	mov    eax,ecx
c0025696:	89 f2                	mov    edx,esi
c0025698:	f7 f3                	div    ebx
c002569a:	89 d6                	mov    esi,edx
c002569c:	89 f0                	mov    eax,esi
c002569e:	31 d2                	xor    edx,edx
c00256a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00256a4:	85 c9                	test   ecx,ecx
c00256a6:	74 07                	je     c00256af <__moddi3+0x63>
c00256a8:	f7 d8                	neg    eax
c00256aa:	83 d2 00             	adc    edx,0x0
c00256ad:	f7 da                	neg    edx
c00256af:	83 c4 2c             	add    esp,0x2c
c00256b2:	5b                   	pop    ebx
c00256b3:	5e                   	pop    esi
c00256b4:	5f                   	pop    edi
c00256b5:	5d                   	pop    ebp
c00256b6:	c3                   	ret    
c00256b7:	90                   	nop
c00256b8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00256bc:	85 db                	test   ebx,ebx
c00256be:	75 0d                	jne    c00256cd <__moddi3+0x81>
c00256c0:	b8 01 00 00 00       	mov    eax,0x1
c00256c5:	31 d2                	xor    edx,edx
c00256c7:	f7 f7                	div    edi
c00256c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00256cd:	89 f0                	mov    eax,esi
c00256cf:	31 d2                	xor    edx,edx
c00256d1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00256d5:	f7 f7                	div    edi
c00256d7:	89 e8                	mov    eax,ebp
c00256d9:	f7 f7                	div    edi
c00256db:	89 d6                	mov    esi,edx
c00256dd:	eb bd                	jmp    c002569c <__moddi3+0x50>
c00256df:	90                   	nop
c00256e0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00256e4:	39 f7                	cmp    edi,esi
c00256e6:	76 20                	jbe    c0025708 <__moddi3+0xbc>
c00256e8:	89 c8                	mov    eax,ecx
c00256ea:	89 f2                	mov    edx,esi
c00256ec:	eb b2                	jmp    c00256a0 <__moddi3+0x54>
c00256ee:	66 90                	xchg   ax,ax
c00256f0:	f7 d9                	neg    ecx
c00256f2:	83 d3 00             	adc    ebx,0x0
c00256f5:	f7 db                	neg    ebx
c00256f7:	89 de                	mov    esi,ebx
c00256f9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0025701:	e9 6f ff ff ff       	jmp    c0025675 <__moddi3+0x29>
c0025706:	66 90                	xchg   ax,ax
c0025708:	0f bd c7             	bsr    eax,edi
c002570b:	83 f0 1f             	xor    eax,0x1f
c002570e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025712:	75 24                	jne    c0025738 <__moddi3+0xec>
c0025714:	39 f7                	cmp    edi,esi
c0025716:	72 06                	jb     c002571e <__moddi3+0xd2>
c0025718:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002571c:	77 0c                	ja     c002572a <__moddi3+0xde>
c002571e:	89 e9                	mov    ecx,ebp
c0025720:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0025724:	19 fe                	sbb    esi,edi
c0025726:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002572a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002572e:	89 f2                	mov    edx,esi
c0025730:	e9 6b ff ff ff       	jmp    c00256a0 <__moddi3+0x54>
c0025735:	8d 76 00             	lea    esi,[esi+0x0]
c0025738:	b8 20 00 00 00       	mov    eax,0x20
c002573d:	89 c2                	mov    edx,eax
c002573f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025743:	29 da                	sub    edx,ebx
c0025745:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025749:	88 d9                	mov    cl,bl
c002574b:	d3 e7                	shl    edi,cl
c002574d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025751:	88 d1                	mov    cl,dl
c0025753:	d3 e8                	shr    eax,cl
c0025755:	09 c7                	or     edi,eax
c0025757:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002575b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002575f:	89 d8                	mov    eax,ebx
c0025761:	88 d9                	mov    cl,bl
c0025763:	d3 e7                	shl    edi,cl
c0025765:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025769:	89 f3                	mov    ebx,esi
c002576b:	88 d1                	mov    cl,dl
c002576d:	d3 eb                	shr    ebx,cl
c002576f:	89 c7                	mov    edi,eax
c0025771:	88 c1                	mov    cl,al
c0025773:	d3 e6                	shl    esi,cl
c0025775:	89 e8                	mov    eax,ebp
c0025777:	88 d1                	mov    cl,dl
c0025779:	d3 e8                	shr    eax,cl
c002577b:	09 f0                	or     eax,esi
c002577d:	89 f9                	mov    ecx,edi
c002577f:	d3 e5                	shl    ebp,cl
c0025781:	89 da                	mov    edx,ebx
c0025783:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0025787:	89 d3                	mov    ebx,edx
c0025789:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002578d:	89 c6                	mov    esi,eax
c002578f:	89 d1                	mov    ecx,edx
c0025791:	39 d3                	cmp    ebx,edx
c0025793:	72 27                	jb     c00257bc <__moddi3+0x170>
c0025795:	74 21                	je     c00257b8 <__moddi3+0x16c>
c0025797:	29 f5                	sub    ebp,esi
c0025799:	19 cb                	sbb    ebx,ecx
c002579b:	89 de                	mov    esi,ebx
c002579d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00257a1:	d3 e6                	shl    esi,cl
c00257a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00257a7:	89 f9                	mov    ecx,edi
c00257a9:	d3 ed                	shr    ebp,cl
c00257ab:	09 ee                	or     esi,ebp
c00257ad:	89 f0                	mov    eax,esi
c00257af:	d3 eb                	shr    ebx,cl
c00257b1:	89 da                	mov    edx,ebx
c00257b3:	e9 e8 fe ff ff       	jmp    c00256a0 <__moddi3+0x54>
c00257b8:	39 c5                	cmp    ebp,eax
c00257ba:	73 db                	jae    c0025797 <__moddi3+0x14b>
c00257bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00257c0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00257c4:	89 d1                	mov    ecx,edx
c00257c6:	89 c6                	mov    esi,eax
c00257c8:	eb cd                	jmp    c0025797 <__moddi3+0x14b>
c00257ca:	66 90                	xchg   ax,ax

c00257cc <__udivdi3>:
c00257cc:	55                   	push   ebp
c00257cd:	57                   	push   edi
c00257ce:	56                   	push   esi
c00257cf:	53                   	push   ebx
c00257d0:	83 ec 1c             	sub    esp,0x1c
c00257d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00257d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00257db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00257df:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00257e3:	85 d2                	test   edx,edx
c00257e5:	75 41                	jne    c0025828 <__udivdi3+0x5c>
c00257e7:	39 f7                	cmp    edi,esi
c00257e9:	76 15                	jbe    c0025800 <__udivdi3+0x34>
c00257eb:	89 e8                	mov    eax,ebp
c00257ed:	89 f2                	mov    edx,esi
c00257ef:	f7 f7                	div    edi
c00257f1:	31 db                	xor    ebx,ebx
c00257f3:	89 da                	mov    edx,ebx
c00257f5:	83 c4 1c             	add    esp,0x1c
c00257f8:	5b                   	pop    ebx
c00257f9:	5e                   	pop    esi
c00257fa:	5f                   	pop    edi
c00257fb:	5d                   	pop    ebp
c00257fc:	c3                   	ret    
c00257fd:	8d 76 00             	lea    esi,[esi+0x0]
c0025800:	89 f9                	mov    ecx,edi
c0025802:	85 ff                	test   edi,edi
c0025804:	75 0b                	jne    c0025811 <__udivdi3+0x45>
c0025806:	b8 01 00 00 00       	mov    eax,0x1
c002580b:	31 d2                	xor    edx,edx
c002580d:	f7 f7                	div    edi
c002580f:	89 c1                	mov    ecx,eax
c0025811:	31 d2                	xor    edx,edx
c0025813:	89 f0                	mov    eax,esi
c0025815:	f7 f1                	div    ecx
c0025817:	89 c3                	mov    ebx,eax
c0025819:	89 e8                	mov    eax,ebp
c002581b:	f7 f1                	div    ecx
c002581d:	89 da                	mov    edx,ebx
c002581f:	83 c4 1c             	add    esp,0x1c
c0025822:	5b                   	pop    ebx
c0025823:	5e                   	pop    esi
c0025824:	5f                   	pop    edi
c0025825:	5d                   	pop    ebp
c0025826:	c3                   	ret    
c0025827:	90                   	nop
c0025828:	39 f2                	cmp    edx,esi
c002582a:	77 1c                	ja     c0025848 <__udivdi3+0x7c>
c002582c:	0f bd da             	bsr    ebx,edx
c002582f:	83 f3 1f             	xor    ebx,0x1f
c0025832:	75 24                	jne    c0025858 <__udivdi3+0x8c>
c0025834:	39 f2                	cmp    edx,esi
c0025836:	72 08                	jb     c0025840 <__udivdi3+0x74>
c0025838:	39 ef                	cmp    edi,ebp
c002583a:	0f 87 84 00 00 00    	ja     c00258c4 <__udivdi3+0xf8>
c0025840:	b8 01 00 00 00       	mov    eax,0x1
c0025845:	eb ac                	jmp    c00257f3 <__udivdi3+0x27>
c0025847:	90                   	nop
c0025848:	31 db                	xor    ebx,ebx
c002584a:	31 c0                	xor    eax,eax
c002584c:	89 da                	mov    edx,ebx
c002584e:	83 c4 1c             	add    esp,0x1c
c0025851:	5b                   	pop    ebx
c0025852:	5e                   	pop    esi
c0025853:	5f                   	pop    edi
c0025854:	5d                   	pop    ebp
c0025855:	c3                   	ret    
c0025856:	66 90                	xchg   ax,ax
c0025858:	b8 20 00 00 00       	mov    eax,0x20
c002585d:	29 d8                	sub    eax,ebx
c002585f:	88 d9                	mov    cl,bl
c0025861:	d3 e2                	shl    edx,cl
c0025863:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0025867:	89 fa                	mov    edx,edi
c0025869:	88 c1                	mov    cl,al
c002586b:	d3 ea                	shr    edx,cl
c002586d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025871:	09 d1                	or     ecx,edx
c0025873:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025877:	88 d9                	mov    cl,bl
c0025879:	d3 e7                	shl    edi,cl
c002587b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002587f:	89 f7                	mov    edi,esi
c0025881:	88 c1                	mov    cl,al
c0025883:	d3 ef                	shr    edi,cl
c0025885:	88 d9                	mov    cl,bl
c0025887:	d3 e6                	shl    esi,cl
c0025889:	89 ea                	mov    edx,ebp
c002588b:	88 c1                	mov    cl,al
c002588d:	d3 ea                	shr    edx,cl
c002588f:	09 d6                	or     esi,edx
c0025891:	89 f0                	mov    eax,esi
c0025893:	89 fa                	mov    edx,edi
c0025895:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0025899:	89 d7                	mov    edi,edx
c002589b:	89 c6                	mov    esi,eax
c002589d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00258a1:	39 d7                	cmp    edi,edx
c00258a3:	72 13                	jb     c00258b8 <__udivdi3+0xec>
c00258a5:	74 09                	je     c00258b0 <__udivdi3+0xe4>
c00258a7:	89 f0                	mov    eax,esi
c00258a9:	31 db                	xor    ebx,ebx
c00258ab:	e9 43 ff ff ff       	jmp    c00257f3 <__udivdi3+0x27>
c00258b0:	88 d9                	mov    cl,bl
c00258b2:	d3 e5                	shl    ebp,cl
c00258b4:	39 c5                	cmp    ebp,eax
c00258b6:	73 ef                	jae    c00258a7 <__udivdi3+0xdb>
c00258b8:	8d 46 ff             	lea    eax,[esi-0x1]
c00258bb:	31 db                	xor    ebx,ebx
c00258bd:	e9 31 ff ff ff       	jmp    c00257f3 <__udivdi3+0x27>
c00258c2:	66 90                	xchg   ax,ax
c00258c4:	31 c0                	xor    eax,eax
c00258c6:	e9 28 ff ff ff       	jmp    c00257f3 <__udivdi3+0x27>
c00258cb:	90                   	nop

c00258cc <__umoddi3>:
c00258cc:	55                   	push   ebp
c00258cd:	57                   	push   edi
c00258ce:	56                   	push   esi
c00258cf:	53                   	push   ebx
c00258d0:	83 ec 1c             	sub    esp,0x1c
c00258d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00258d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00258db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00258df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00258e3:	89 da                	mov    edx,ebx
c00258e5:	85 c0                	test   eax,eax
c00258e7:	75 37                	jne    c0025920 <__umoddi3+0x54>
c00258e9:	39 df                	cmp    edi,ebx
c00258eb:	76 13                	jbe    c0025900 <__umoddi3+0x34>
c00258ed:	89 f0                	mov    eax,esi
c00258ef:	f7 f7                	div    edi
c00258f1:	89 d0                	mov    eax,edx
c00258f3:	31 d2                	xor    edx,edx
c00258f5:	83 c4 1c             	add    esp,0x1c
c00258f8:	5b                   	pop    ebx
c00258f9:	5e                   	pop    esi
c00258fa:	5f                   	pop    edi
c00258fb:	5d                   	pop    ebp
c00258fc:	c3                   	ret    
c00258fd:	8d 76 00             	lea    esi,[esi+0x0]
c0025900:	89 fd                	mov    ebp,edi
c0025902:	85 ff                	test   edi,edi
c0025904:	75 0b                	jne    c0025911 <__umoddi3+0x45>
c0025906:	b8 01 00 00 00       	mov    eax,0x1
c002590b:	31 d2                	xor    edx,edx
c002590d:	f7 f7                	div    edi
c002590f:	89 c5                	mov    ebp,eax
c0025911:	89 d8                	mov    eax,ebx
c0025913:	31 d2                	xor    edx,edx
c0025915:	f7 f5                	div    ebp
c0025917:	89 f0                	mov    eax,esi
c0025919:	f7 f5                	div    ebp
c002591b:	89 d0                	mov    eax,edx
c002591d:	eb d4                	jmp    c00258f3 <__umoddi3+0x27>
c002591f:	90                   	nop
c0025920:	89 f1                	mov    ecx,esi
c0025922:	39 d8                	cmp    eax,ebx
c0025924:	76 0a                	jbe    c0025930 <__umoddi3+0x64>
c0025926:	89 f0                	mov    eax,esi
c0025928:	83 c4 1c             	add    esp,0x1c
c002592b:	5b                   	pop    ebx
c002592c:	5e                   	pop    esi
c002592d:	5f                   	pop    edi
c002592e:	5d                   	pop    ebp
c002592f:	c3                   	ret    
c0025930:	0f bd e8             	bsr    ebp,eax
c0025933:	83 f5 1f             	xor    ebp,0x1f
c0025936:	75 1c                	jne    c0025954 <__umoddi3+0x88>
c0025938:	39 d8                	cmp    eax,ebx
c002593a:	72 04                	jb     c0025940 <__umoddi3+0x74>
c002593c:	39 f7                	cmp    edi,esi
c002593e:	77 08                	ja     c0025948 <__umoddi3+0x7c>
c0025940:	89 da                	mov    edx,ebx
c0025942:	29 fe                	sub    esi,edi
c0025944:	19 c2                	sbb    edx,eax
c0025946:	89 f1                	mov    ecx,esi
c0025948:	89 c8                	mov    eax,ecx
c002594a:	83 c4 1c             	add    esp,0x1c
c002594d:	5b                   	pop    ebx
c002594e:	5e                   	pop    esi
c002594f:	5f                   	pop    edi
c0025950:	5d                   	pop    ebp
c0025951:	c3                   	ret    
c0025952:	66 90                	xchg   ax,ax
c0025954:	ba 20 00 00 00       	mov    edx,0x20
c0025959:	29 ea                	sub    edx,ebp
c002595b:	89 e9                	mov    ecx,ebp
c002595d:	d3 e0                	shl    eax,cl
c002595f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025963:	89 f8                	mov    eax,edi
c0025965:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025969:	88 d1                	mov    cl,dl
c002596b:	d3 e8                	shr    eax,cl
c002596d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025971:	09 c1                	or     ecx,eax
c0025973:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025977:	89 e9                	mov    ecx,ebp
c0025979:	d3 e7                	shl    edi,cl
c002597b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002597f:	89 d8                	mov    eax,ebx
c0025981:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025985:	88 d1                	mov    cl,dl
c0025987:	d3 e8                	shr    eax,cl
c0025989:	89 c7                	mov    edi,eax
c002598b:	89 e9                	mov    ecx,ebp
c002598d:	d3 e3                	shl    ebx,cl
c002598f:	89 f0                	mov    eax,esi
c0025991:	88 d1                	mov    cl,dl
c0025993:	d3 e8                	shr    eax,cl
c0025995:	09 d8                	or     eax,ebx
c0025997:	89 e9                	mov    ecx,ebp
c0025999:	d3 e6                	shl    esi,cl
c002599b:	89 f3                	mov    ebx,esi
c002599d:	89 fa                	mov    edx,edi
c002599f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00259a3:	89 d1                	mov    ecx,edx
c00259a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00259a9:	89 c6                	mov    esi,eax
c00259ab:	89 d7                	mov    edi,edx
c00259ad:	39 d1                	cmp    ecx,edx
c00259af:	72 27                	jb     c00259d8 <__umoddi3+0x10c>
c00259b1:	74 21                	je     c00259d4 <__umoddi3+0x108>
c00259b3:	89 ca                	mov    edx,ecx
c00259b5:	29 f3                	sub    ebx,esi
c00259b7:	19 fa                	sbb    edx,edi
c00259b9:	89 d0                	mov    eax,edx
c00259bb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00259bf:	d3 e0                	shl    eax,cl
c00259c1:	89 e9                	mov    ecx,ebp
c00259c3:	d3 eb                	shr    ebx,cl
c00259c5:	09 d8                	or     eax,ebx
c00259c7:	d3 ea                	shr    edx,cl
c00259c9:	83 c4 1c             	add    esp,0x1c
c00259cc:	5b                   	pop    ebx
c00259cd:	5e                   	pop    esi
c00259ce:	5f                   	pop    edi
c00259cf:	5d                   	pop    ebp
c00259d0:	c3                   	ret    
c00259d1:	8d 76 00             	lea    esi,[esi+0x0]
c00259d4:	39 c3                	cmp    ebx,eax
c00259d6:	73 db                	jae    c00259b3 <__umoddi3+0xe7>
c00259d8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00259dc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00259e0:	89 d7                	mov    edi,edx
c00259e2:	89 c6                	mov    esi,eax
c00259e4:	eb cd                	jmp    c00259b3 <__umoddi3+0xe7>

c00259e6 <__addsf3>:
c00259e6:	55                   	push   ebp
c00259e7:	89 e5                	mov    ebp,esp
c00259e9:	57                   	push   edi
c00259ea:	56                   	push   esi
c00259eb:	53                   	push   ebx
c00259ec:	83 ec 08             	sub    esp,0x8
c00259ef:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00259f2:	89 fa                	mov    edx,edi
c00259f4:	89 f8                	mov    eax,edi
c00259f6:	c1 f8 17             	sar    eax,0x17
c00259f9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00259fc:	c1 e2 08             	shl    edx,0x8
c00259ff:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025a05:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025a08:	89 de                	mov    esi,ebx
c0025a0a:	c1 fe 17             	sar    esi,0x17
c0025a0d:	c1 e3 08             	shl    ebx,0x8
c0025a10:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025a16:	31 f0                	xor    eax,esi
c0025a18:	0f 88 3b 01 00 00    	js     c0025b59 <__addsf3+0x173>
c0025a1e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0025a21:	29 f1                	sub    ecx,esi
c0025a23:	85 c9                	test   ecx,ecx
c0025a25:	7e 54                	jle    c0025a7b <__addsf3+0x95>
c0025a27:	89 f0                	mov    eax,esi
c0025a29:	84 c0                	test   al,al
c0025a2b:	75 10                	jne    c0025a3d <__addsf3+0x57>
c0025a2d:	85 db                	test   ebx,ebx
c0025a2f:	0f 84 aa 02 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025a35:	49                   	dec    ecx
c0025a36:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025a39:	74 38                	je     c0025a73 <__addsf3+0x8d>
c0025a3b:	eb 13                	jmp    c0025a50 <__addsf3+0x6a>
c0025a3d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025a40:	f7 d0                	not    eax
c0025a42:	84 c0                	test   al,al
c0025a44:	0f 84 95 02 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025a4a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025a50:	83 f9 1f             	cmp    ecx,0x1f
c0025a53:	0f 8f 86 02 00 00    	jg     c0025cdf <__addsf3+0x2f9>
c0025a59:	89 de                	mov    esi,ebx
c0025a5b:	d3 ee                	shr    esi,cl
c0025a5d:	b8 20 00 00 00       	mov    eax,0x20
c0025a62:	29 c8                	sub    eax,ecx
c0025a64:	89 c1                	mov    ecx,eax
c0025a66:	d3 e3                	shl    ebx,cl
c0025a68:	31 c0                	xor    eax,eax
c0025a6a:	85 db                	test   ebx,ebx
c0025a6c:	0f 95 c0             	setne  al
c0025a6f:	09 f0                	or     eax,esi
c0025a71:	01 d0                	add    eax,edx
c0025a73:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025a76:	e9 b6 00 00 00       	jmp    c0025b31 <__addsf3+0x14b>
c0025a7b:	74 5c                	je     c0025ad9 <__addsf3+0xf3>
c0025a7d:	89 f1                	mov    ecx,esi
c0025a7f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0025a82:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025a85:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0025a89:	75 14                	jne    c0025a9f <__addsf3+0xb9>
c0025a8b:	85 d2                	test   edx,edx
c0025a8d:	0f 84 4c 02 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025a93:	49                   	dec    ecx
c0025a94:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025a97:	0f 84 94 00 00 00    	je     c0025b31 <__addsf3+0x14b>
c0025a9d:	eb 12                	jmp    c0025ab1 <__addsf3+0xcb>
c0025a9f:	89 f0                	mov    eax,esi
c0025aa1:	f7 d0                	not    eax
c0025aa3:	84 c0                	test   al,al
c0025aa5:	0f 84 34 02 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025aab:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025ab1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025ab4:	83 f9 1f             	cmp    ecx,0x1f
c0025ab7:	0f 8f 22 02 00 00    	jg     c0025cdf <__addsf3+0x2f9>
c0025abd:	89 d7                	mov    edi,edx
c0025abf:	d3 ef                	shr    edi,cl
c0025ac1:	b8 20 00 00 00       	mov    eax,0x20
c0025ac6:	29 c8                	sub    eax,ecx
c0025ac8:	89 c1                	mov    ecx,eax
c0025aca:	d3 e2                	shl    edx,cl
c0025acc:	31 c0                	xor    eax,eax
c0025ace:	85 d2                	test   edx,edx
c0025ad0:	0f 95 c0             	setne  al
c0025ad3:	09 f8                	or     eax,edi
c0025ad5:	01 d8                	add    eax,ebx
c0025ad7:	eb 58                	jmp    c0025b31 <__addsf3+0x14b>
c0025ad9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025adc:	8d 70 01             	lea    esi,[eax+0x1]
c0025adf:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0025ae5:	75 32                	jne    c0025b19 <__addsf3+0x133>
c0025ae7:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0025aeb:	75 1f                	jne    c0025b0c <__addsf3+0x126>
c0025aed:	85 d2                	test   edx,edx
c0025aef:	0f 84 e0 01 00 00    	je     c0025cd5 <__addsf3+0x2ef>
c0025af5:	85 db                	test   ebx,ebx
c0025af7:	0f 84 e2 01 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025afd:	89 d0                	mov    eax,edx
c0025aff:	01 d8                	add    eax,ebx
c0025b01:	0f 89 a9 01 00 00    	jns    c0025cb0 <__addsf3+0x2ca>
c0025b07:	e9 9d 01 00 00       	jmp    c0025ca9 <__addsf3+0x2c3>
c0025b0c:	85 d2                	test   edx,edx
c0025b0e:	0f 85 cb 01 00 00    	jne    c0025cdf <__addsf3+0x2f9>
c0025b14:	e9 bc 01 00 00       	jmp    c0025cd5 <__addsf3+0x2ef>
c0025b19:	31 c0                	xor    eax,eax
c0025b1b:	89 f1                	mov    ecx,esi
c0025b1d:	f7 d1                	not    ecx
c0025b1f:	84 c9                	test   cl,cl
c0025b21:	0f 84 90 01 00 00    	je     c0025cb7 <__addsf3+0x2d1>
c0025b27:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025b2a:	d1 e8                	shr    eax,1
c0025b2c:	e9 86 01 00 00       	jmp    c0025cb7 <__addsf3+0x2d1>
c0025b31:	85 c0                	test   eax,eax
c0025b33:	0f 89 7e 01 00 00    	jns    c0025cb7 <__addsf3+0x2d1>
c0025b39:	46                   	inc    esi
c0025b3a:	89 f2                	mov    edx,esi
c0025b3c:	f7 d2                	not    edx
c0025b3e:	84 d2                	test   dl,dl
c0025b40:	0f 84 6f 01 00 00    	je     c0025cb5 <__addsf3+0x2cf>
c0025b46:	89 c2                	mov    edx,eax
c0025b48:	83 e2 01             	and    edx,0x1
c0025b4b:	d1 e8                	shr    eax,1
c0025b4d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025b52:	09 d0                	or     eax,edx
c0025b54:	e9 5e 01 00 00       	jmp    c0025cb7 <__addsf3+0x2d1>
c0025b59:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0025b5d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025b60:	89 f0                	mov    eax,esi
c0025b62:	0f b6 c0             	movzx  eax,al
c0025b65:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025b68:	29 c1                	sub    ecx,eax
c0025b6a:	85 c9                	test   ecx,ecx
c0025b6c:	7e 55                	jle    c0025bc3 <__addsf3+0x1dd>
c0025b6e:	85 c0                	test   eax,eax
c0025b70:	75 11                	jne    c0025b83 <__addsf3+0x19d>
c0025b72:	85 db                	test   ebx,ebx
c0025b74:	0f 84 65 01 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025b7a:	49                   	dec    ecx
c0025b7b:	75 19                	jne    c0025b96 <__addsf3+0x1b0>
c0025b7d:	89 d0                	mov    eax,edx
c0025b7f:	29 d8                	sub    eax,ebx
c0025b81:	eb 38                	jmp    c0025bbb <__addsf3+0x1d5>
c0025b83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025b86:	f7 d0                	not    eax
c0025b88:	84 c0                	test   al,al
c0025b8a:	0f 84 4f 01 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025b90:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025b96:	83 f9 1f             	cmp    ecx,0x1f
c0025b99:	0f 8f 40 01 00 00    	jg     c0025cdf <__addsf3+0x2f9>
c0025b9f:	89 de                	mov    esi,ebx
c0025ba1:	d3 ee                	shr    esi,cl
c0025ba3:	b8 20 00 00 00       	mov    eax,0x20
c0025ba8:	29 c8                	sub    eax,ecx
c0025baa:	89 c1                	mov    ecx,eax
c0025bac:	d3 e3                	shl    ebx,cl
c0025bae:	31 c0                	xor    eax,eax
c0025bb0:	85 db                	test   ebx,ebx
c0025bb2:	0f 95 c0             	setne  al
c0025bb5:	09 f0                	or     eax,esi
c0025bb7:	29 c2                	sub    edx,eax
c0025bb9:	89 d0                	mov    eax,edx
c0025bbb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025bbe:	e9 af 00 00 00       	jmp    c0025c72 <__addsf3+0x28c>
c0025bc3:	74 5c                	je     c0025c21 <__addsf3+0x23b>
c0025bc5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0025bc8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025bcb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0025bcf:	75 14                	jne    c0025be5 <__addsf3+0x1ff>
c0025bd1:	85 d2                	test   edx,edx
c0025bd3:	0f 84 06 01 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025bd9:	48                   	dec    eax
c0025bda:	75 1b                	jne    c0025bf7 <__addsf3+0x211>
c0025bdc:	89 d8                	mov    eax,ebx
c0025bde:	29 d0                	sub    eax,edx
c0025be0:	e9 8d 00 00 00       	jmp    c0025c72 <__addsf3+0x28c>
c0025be5:	89 f1                	mov    ecx,esi
c0025be7:	f7 d1                	not    ecx
c0025be9:	84 c9                	test   cl,cl
c0025beb:	0f 84 ee 00 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025bf1:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025bf7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025bfa:	83 f8 1f             	cmp    eax,0x1f
c0025bfd:	0f 8f dc 00 00 00    	jg     c0025cdf <__addsf3+0x2f9>
c0025c03:	89 d7                	mov    edi,edx
c0025c05:	88 c1                	mov    cl,al
c0025c07:	d3 ef                	shr    edi,cl
c0025c09:	b9 20 00 00 00       	mov    ecx,0x20
c0025c0e:	29 c1                	sub    ecx,eax
c0025c10:	d3 e2                	shl    edx,cl
c0025c12:	31 c0                	xor    eax,eax
c0025c14:	85 d2                	test   edx,edx
c0025c16:	0f 95 c0             	setne  al
c0025c19:	09 f8                	or     eax,edi
c0025c1b:	29 c3                	sub    ebx,eax
c0025c1d:	89 d8                	mov    eax,ebx
c0025c1f:	eb 51                	jmp    c0025c72 <__addsf3+0x28c>
c0025c21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025c24:	40                   	inc    eax
c0025c25:	a8 fe                	test   al,0xfe
c0025c27:	75 3d                	jne    c0025c66 <__addsf3+0x280>
c0025c29:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0025c2d:	0f 85 a7 00 00 00    	jne    c0025cda <__addsf3+0x2f4>
c0025c33:	85 d2                	test   edx,edx
c0025c35:	75 12                	jne    c0025c49 <__addsf3+0x263>
c0025c37:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025c3a:	85 db                	test   ebx,ebx
c0025c3c:	0f 85 9d 00 00 00    	jne    c0025cdf <__addsf3+0x2f9>
c0025c42:	31 ff                	xor    edi,edi
c0025c44:	e9 96 00 00 00       	jmp    c0025cdf <__addsf3+0x2f9>
c0025c49:	85 db                	test   ebx,ebx
c0025c4b:	0f 84 8e 00 00 00    	je     c0025cdf <__addsf3+0x2f9>
c0025c51:	89 d0                	mov    eax,edx
c0025c53:	29 d8                	sub    eax,ebx
c0025c55:	79 06                	jns    c0025c5d <__addsf3+0x277>
c0025c57:	89 d8                	mov    eax,ebx
c0025c59:	29 d0                	sub    eax,edx
c0025c5b:	eb 5a                	jmp    c0025cb7 <__addsf3+0x2d1>
c0025c5d:	bf 00 00 00 00       	mov    edi,0x0
c0025c62:	74 7b                	je     c0025cdf <__addsf3+0x2f9>
c0025c64:	eb 4a                	jmp    c0025cb0 <__addsf3+0x2ca>
c0025c66:	89 d0                	mov    eax,edx
c0025c68:	29 d8                	sub    eax,ebx
c0025c6a:	79 12                	jns    c0025c7e <__addsf3+0x298>
c0025c6c:	89 d8                	mov    eax,ebx
c0025c6e:	29 d0                	sub    eax,edx
c0025c70:	eb 09                	jmp    c0025c7b <__addsf3+0x295>
c0025c72:	85 c0                	test   eax,eax
c0025c74:	79 41                	jns    c0025cb7 <__addsf3+0x2d1>
c0025c76:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025c7b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0025c7e:	31 f6                	xor    esi,esi
c0025c80:	85 c0                	test   eax,eax
c0025c82:	74 33                	je     c0025cb7 <__addsf3+0x2d1>
c0025c84:	0f bd c8             	bsr    ecx,eax
c0025c87:	83 f1 1f             	xor    ecx,0x1f
c0025c8a:	d3 e0                	shl    eax,cl
c0025c8c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0025c90:	39 ca                	cmp    edx,ecx
c0025c92:	7f 10                	jg     c0025ca4 <__addsf3+0x2be>
c0025c94:	29 d1                	sub    ecx,edx
c0025c96:	41                   	inc    ecx
c0025c97:	d3 e8                	shr    eax,cl
c0025c99:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025c9c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0025ca2:	eb 13                	jmp    c0025cb7 <__addsf3+0x2d1>
c0025ca4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025ca7:	29 ce                	sub    esi,ecx
c0025ca9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025cae:	eb 07                	jmp    c0025cb7 <__addsf3+0x2d1>
c0025cb0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025cb3:	eb 02                	jmp    c0025cb7 <__addsf3+0x2d1>
c0025cb5:	31 c0                	xor    eax,eax
c0025cb7:	89 c2                	mov    edx,eax
c0025cb9:	c1 ea 08             	shr    edx,0x8
c0025cbc:	a8 7f                	test   al,0x7f
c0025cbe:	0f 95 c1             	setne  cl
c0025cc1:	09 d1                	or     ecx,edx
c0025cc3:	83 e1 01             	and    ecx,0x1
c0025cc6:	c1 e8 07             	shr    eax,0x7
c0025cc9:	21 c8                	and    eax,ecx
c0025ccb:	c1 e6 17             	shl    esi,0x17
c0025cce:	09 d6                	or     esi,edx
c0025cd0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0025cd3:	eb 0a                	jmp    c0025cdf <__addsf3+0x2f9>
c0025cd5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0025cd8:	eb 05                	jmp    c0025cdf <__addsf3+0x2f9>
c0025cda:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0025cdf:	89 f8                	mov    eax,edi
c0025ce1:	5a                   	pop    edx
c0025ce2:	59                   	pop    ecx
c0025ce3:	5b                   	pop    ebx
c0025ce4:	5e                   	pop    esi
c0025ce5:	5f                   	pop    edi
c0025ce6:	5d                   	pop    ebp
c0025ce7:	c3                   	ret    

c0025ce8 <__subsf3>:
c0025ce8:	55                   	push   ebp
c0025ce9:	89 e5                	mov    ebp,esp
c0025ceb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cee:	05 00 00 00 80       	add    eax,0x80000000
c0025cf3:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025cf6:	5d                   	pop    ebp
c0025cf7:	e9 ea fc ff ff       	jmp    c00259e6 <__addsf3>

c0025cfc <__negsf2>:
c0025cfc:	55                   	push   ebp
c0025cfd:	89 e5                	mov    ebp,esp
c0025cff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025d02:	05 00 00 00 80       	add    eax,0x80000000
c0025d07:	5d                   	pop    ebp
c0025d08:	c3                   	ret    

c0025d09 <__mulsf3>:
c0025d09:	55                   	push   ebp
c0025d0a:	89 e5                	mov    ebp,esp
c0025d0c:	57                   	push   edi
c0025d0d:	56                   	push   esi
c0025d0e:	53                   	push   ebx
c0025d0f:	83 ec 1c             	sub    esp,0x1c
c0025d12:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0025d15:	89 f0                	mov    eax,esi
c0025d17:	89 f1                	mov    ecx,esi
c0025d19:	c1 f9 17             	sar    ecx,0x17
c0025d1c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025d1f:	c1 e0 08             	shl    eax,0x8
c0025d22:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025d27:	89 c1                	mov    ecx,eax
c0025d29:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d2c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025d2f:	89 c7                	mov    edi,eax
c0025d31:	c1 ff 17             	sar    edi,0x17
c0025d34:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025d38:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025d3b:	89 f8                	mov    eax,edi
c0025d3d:	0f b6 c0             	movzx  eax,al
c0025d40:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025d43:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0025d47:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025d4a:	42                   	inc    edx
c0025d4b:	80 e2 fe             	and    dl,0xfe
c0025d4e:	75 7b                	jne    c0025dcb <__mulsf3+0xc2>
c0025d50:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025d54:	74 54                	je     c0025daa <__mulsf3+0xa1>
c0025d56:	85 c9                	test   ecx,ecx
c0025d58:	0f 85 64 01 00 00    	jne    c0025ec2 <__mulsf3+0x1b9>
c0025d5e:	8d 57 01             	lea    edx,[edi+0x1]
c0025d61:	80 e2 fe             	and    dl,0xfe
c0025d64:	75 1f                	jne    c0025d85 <__mulsf3+0x7c>
c0025d66:	85 c0                	test   eax,eax
c0025d68:	b8 00 00 00 00       	mov    eax,0x0
c0025d6d:	74 29                	je     c0025d98 <__mulsf3+0x8f>
c0025d6f:	53                   	push   ebx
c0025d70:	53                   	push   ebx
c0025d71:	50                   	push   eax
c0025d72:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025d75:	e8 96 05 00 00       	call   c0026310 <__nesf2>
c0025d7a:	83 c4 10             	add    esp,0x10
c0025d7d:	85 c0                	test   eax,eax
c0025d7f:	0f 85 3a 01 00 00    	jne    c0025ebf <__mulsf3+0x1b6>
c0025d85:	85 ff                	test   edi,edi
c0025d87:	0f 89 35 01 00 00    	jns    c0025ec2 <__mulsf3+0x1b9>
c0025d8d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0025d93:	e9 2a 01 00 00       	jmp    c0025ec2 <__mulsf3+0x1b9>
c0025d98:	51                   	push   ecx
c0025d99:	51                   	push   ecx
c0025d9a:	50                   	push   eax
c0025d9b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025d9e:	e8 6d 05 00 00       	call   c0026310 <__nesf2>
c0025da3:	83 c4 10             	add    esp,0x10
c0025da6:	85 c0                	test   eax,eax
c0025da8:	eb 15                	jmp    c0025dbf <__mulsf3+0xb6>
c0025daa:	85 c9                	test   ecx,ecx
c0025dac:	74 0b                	je     c0025db9 <__mulsf3+0xb0>
c0025dae:	8d 53 ff             	lea    edx,[ebx-0x1]
c0025db1:	01 c9                	add    ecx,ecx
c0025db3:	78 16                	js     c0025dcb <__mulsf3+0xc2>
c0025db5:	89 d3                	mov    ebx,edx
c0025db7:	eb f5                	jmp    c0025dae <__mulsf3+0xa5>
c0025db9:	89 f8                	mov    eax,edi
c0025dbb:	f7 d0                	not    eax
c0025dbd:	84 c0                	test   al,al
c0025dbf:	75 c4                	jne    c0025d85 <__mulsf3+0x7c>
c0025dc1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0025dc6:	e9 f7 00 00 00       	jmp    c0025ec2 <__mulsf3+0x1b9>
c0025dcb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025dce:	c1 e6 08             	shl    esi,0x8
c0025dd1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0025dd7:	8d 57 01             	lea    edx,[edi+0x1]
c0025dda:	80 e2 fe             	and    dl,0xfe
c0025ddd:	75 63                	jne    c0025e42 <__mulsf3+0x139>
c0025ddf:	85 c0                	test   eax,eax
c0025de1:	74 2f                	je     c0025e12 <__mulsf3+0x109>
c0025de3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025de7:	0f 89 d2 00 00 00    	jns    c0025ebf <__mulsf3+0x1b6>
c0025ded:	52                   	push   edx
c0025dee:	52                   	push   edx
c0025def:	6a 00                	push   0x0
c0025df1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025df4:	e8 dc 04 00 00       	call   c00262d5 <__eqsf2>
c0025df9:	83 c4 10             	add    esp,0x10
c0025dfc:	85 c0                	test   eax,eax
c0025dfe:	0f 85 bb 00 00 00    	jne    c0025ebf <__mulsf3+0x1b6>
c0025e04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e07:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0025e0d:	e9 b0 00 00 00       	jmp    c0025ec2 <__mulsf3+0x1b9>
c0025e12:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025e15:	50                   	push   eax
c0025e16:	50                   	push   eax
c0025e17:	6a 00                	push   0x0
c0025e19:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e1c:	e8 b4 04 00 00       	call   c00262d5 <__eqsf2>
c0025e21:	83 c4 10             	add    esp,0x10
c0025e24:	85 c0                	test   eax,eax
c0025e26:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025e29:	75 0c                	jne    c0025e37 <__mulsf3+0x12e>
c0025e2b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025e2f:	0f 89 8a 00 00 00    	jns    c0025ebf <__mulsf3+0x1b6>
c0025e35:	eb cd                	jmp    c0025e04 <__mulsf3+0xfb>
c0025e37:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025e3a:	01 f6                	add    esi,esi
c0025e3c:	78 04                	js     c0025e42 <__mulsf3+0x139>
c0025e3e:	89 c3                	mov    ebx,eax
c0025e40:	eb f5                	jmp    c0025e37 <__mulsf3+0x12e>
c0025e42:	89 c8                	mov    eax,ecx
c0025e44:	0d 00 00 00 80       	or     eax,0x80000000
c0025e49:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025e4f:	f7 e6                	mul    esi
c0025e51:	85 c0                	test   eax,eax
c0025e53:	0f 95 c0             	setne  al
c0025e56:	0f b6 c0             	movzx  eax,al
c0025e59:	09 c2                	or     edx,eax
c0025e5b:	78 03                	js     c0025e60 <__mulsf3+0x157>
c0025e5d:	01 d2                	add    edx,edx
c0025e5f:	4b                   	dec    ebx
c0025e60:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025e66:	7f 22                	jg     c0025e8a <__mulsf3+0x181>
c0025e68:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025e6e:	85 db                	test   ebx,ebx
c0025e70:	7f 23                	jg     c0025e95 <__mulsf3+0x18c>
c0025e72:	83 fb e9             	cmp    ebx,0xffffffe9
c0025e75:	7c 1a                	jl     c0025e91 <__mulsf3+0x188>
c0025e77:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025e7d:	b9 01 00 00 00       	mov    ecx,0x1
c0025e82:	29 d9                	sub    ecx,ebx
c0025e84:	d3 ea                	shr    edx,cl
c0025e86:	31 db                	xor    ebx,ebx
c0025e88:	eb 0b                	jmp    c0025e95 <__mulsf3+0x18c>
c0025e8a:	bb ff 00 00 00       	mov    ebx,0xff
c0025e8f:	eb 02                	jmp    c0025e93 <__mulsf3+0x18a>
c0025e91:	31 db                	xor    ebx,ebx
c0025e93:	31 d2                	xor    edx,edx
c0025e95:	89 d0                	mov    eax,edx
c0025e97:	c1 e8 08             	shr    eax,0x8
c0025e9a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025e9d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025ea3:	09 fb                	or     ebx,edi
c0025ea5:	c1 e3 17             	shl    ebx,0x17
c0025ea8:	09 c3                	or     ebx,eax
c0025eaa:	f6 c2 7f             	test   dl,0x7f
c0025ead:	0f 95 c1             	setne  cl
c0025eb0:	09 c8                	or     eax,ecx
c0025eb2:	83 e0 01             	and    eax,0x1
c0025eb5:	c1 ea 07             	shr    edx,0x7
c0025eb8:	21 c2                	and    edx,eax
c0025eba:	8d 34 13             	lea    esi,[ebx+edx*1]
c0025ebd:	eb 03                	jmp    c0025ec2 <__mulsf3+0x1b9>
c0025ebf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0025ec2:	89 f0                	mov    eax,esi
c0025ec4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ec7:	5b                   	pop    ebx
c0025ec8:	5e                   	pop    esi
c0025ec9:	5f                   	pop    edi
c0025eca:	5d                   	pop    ebp
c0025ecb:	c3                   	ret    

c0025ecc <__divsf3>:
c0025ecc:	55                   	push   ebp
c0025ecd:	89 e5                	mov    ebp,esp
c0025ecf:	57                   	push   edi
c0025ed0:	56                   	push   esi
c0025ed1:	53                   	push   ebx
c0025ed2:	83 ec 1c             	sub    esp,0x1c
c0025ed5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025ed8:	89 d8                	mov    eax,ebx
c0025eda:	89 d9                	mov    ecx,ebx
c0025edc:	c1 f9 17             	sar    ecx,0x17
c0025edf:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025ee2:	c1 e0 08             	shl    eax,0x8
c0025ee5:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025eea:	89 c1                	mov    ecx,eax
c0025eec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025eef:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025ef2:	89 c7                	mov    edi,eax
c0025ef4:	c1 ff 17             	sar    edi,0x17
c0025ef7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025efb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025efe:	89 f8                	mov    eax,edi
c0025f00:	0f b6 c0             	movzx  eax,al
c0025f03:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025f06:	29 c6                	sub    esi,eax
c0025f08:	83 c6 7f             	add    esi,0x7f
c0025f0b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025f0e:	42                   	inc    edx
c0025f0f:	80 e2 fe             	and    dl,0xfe
c0025f12:	0f 85 9c 00 00 00    	jne    c0025fb4 <__divsf3+0xe8>
c0025f18:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025f1c:	74 33                	je     c0025f51 <__divsf3+0x85>
c0025f1e:	85 c9                	test   ecx,ecx
c0025f20:	0f 85 c7 01 00 00    	jne    c00260ed <__divsf3+0x221>
c0025f26:	8d 57 01             	lea    edx,[edi+0x1]
c0025f29:	80 e2 fe             	and    dl,0xfe
c0025f2c:	75 2f                	jne    c0025f5d <__divsf3+0x91>
c0025f2e:	85 c0                	test   eax,eax
c0025f30:	74 2b                	je     c0025f5d <__divsf3+0x91>
c0025f32:	51                   	push   ecx
c0025f33:	51                   	push   ecx
c0025f34:	6a 00                	push   0x0
c0025f36:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025f39:	e8 d2 03 00 00       	call   c0026310 <__nesf2>
c0025f3e:	83 c4 10             	add    esp,0x10
c0025f41:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025f44:	85 c0                	test   eax,eax
c0025f46:	0f 85 a1 01 00 00    	jne    c00260ed <__divsf3+0x221>
c0025f4c:	e9 92 01 00 00       	jmp    c00260e3 <__divsf3+0x217>
c0025f51:	85 c9                	test   ecx,ecx
c0025f53:	75 1b                	jne    c0025f70 <__divsf3+0xa4>
c0025f55:	8d 57 01             	lea    edx,[edi+0x1]
c0025f58:	80 e2 fe             	and    dl,0xfe
c0025f5b:	74 1e                	je     c0025f7b <__divsf3+0xaf>
c0025f5d:	85 ff                	test   edi,edi
c0025f5f:	0f 89 88 01 00 00    	jns    c00260ed <__divsf3+0x221>
c0025f65:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0025f6b:	e9 7d 01 00 00       	jmp    c00260ed <__divsf3+0x221>
c0025f70:	8d 56 ff             	lea    edx,[esi-0x1]
c0025f73:	01 c9                	add    ecx,ecx
c0025f75:	78 3d                	js     c0025fb4 <__divsf3+0xe8>
c0025f77:	89 d6                	mov    esi,edx
c0025f79:	eb f5                	jmp    c0025f70 <__divsf3+0xa4>
c0025f7b:	85 c0                	test   eax,eax
c0025f7d:	b8 00 00 00 00       	mov    eax,0x0
c0025f82:	74 18                	je     c0025f9c <__divsf3+0xd0>
c0025f84:	52                   	push   edx
c0025f85:	52                   	push   edx
c0025f86:	50                   	push   eax
c0025f87:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025f8a:	e8 81 03 00 00       	call   c0026310 <__nesf2>
c0025f8f:	83 c4 10             	add    esp,0x10
c0025f92:	85 c0                	test   eax,eax
c0025f94:	0f 85 50 01 00 00    	jne    c00260ea <__divsf3+0x21e>
c0025f9a:	eb c1                	jmp    c0025f5d <__divsf3+0x91>
c0025f9c:	56                   	push   esi
c0025f9d:	56                   	push   esi
c0025f9e:	50                   	push   eax
c0025f9f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025fa2:	e8 69 03 00 00       	call   c0026310 <__nesf2>
c0025fa7:	83 c4 10             	add    esp,0x10
c0025faa:	85 c0                	test   eax,eax
c0025fac:	0f 84 31 01 00 00    	je     c00260e3 <__divsf3+0x217>
c0025fb2:	eb a9                	jmp    c0025f5d <__divsf3+0x91>
c0025fb4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025fb7:	c1 e3 08             	shl    ebx,0x8
c0025fba:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025fc0:	8d 57 01             	lea    edx,[edi+0x1]
c0025fc3:	80 e2 fe             	and    dl,0xfe
c0025fc6:	75 71                	jne    c0026039 <__divsf3+0x16d>
c0025fc8:	85 c0                	test   eax,eax
c0025fca:	ba 00 00 00 00       	mov    edx,0x0
c0025fcf:	74 2f                	je     c0026000 <__divsf3+0x134>
c0025fd1:	51                   	push   ecx
c0025fd2:	51                   	push   ecx
c0025fd3:	52                   	push   edx
c0025fd4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025fd7:	e8 f9 02 00 00       	call   c00262d5 <__eqsf2>
c0025fdc:	83 c4 10             	add    esp,0x10
c0025fdf:	85 c0                	test   eax,eax
c0025fe1:	0f 85 03 01 00 00    	jne    c00260ea <__divsf3+0x21e>
c0025fe7:	31 d2                	xor    edx,edx
c0025fe9:	89 d3                	mov    ebx,edx
c0025feb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025fee:	31 f8                	xor    eax,edi
c0025ff0:	0f 89 f7 00 00 00    	jns    c00260ed <__divsf3+0x221>
c0025ff6:	bb 00 00 00 80       	mov    ebx,0x80000000
c0025ffb:	e9 ed 00 00 00       	jmp    c00260ed <__divsf3+0x221>
c0026000:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026003:	50                   	push   eax
c0026004:	50                   	push   eax
c0026005:	52                   	push   edx
c0026006:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026009:	e8 c7 02 00 00       	call   c00262d5 <__eqsf2>
c002600e:	83 c4 10             	add    esp,0x10
c0026011:	85 c0                	test   eax,eax
c0026013:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026016:	75 16                	jne    c002602e <__divsf3+0x162>
c0026018:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002601b:	31 fb                	xor    ebx,edi
c002601d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026023:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026029:	e9 bf 00 00 00       	jmp    c00260ed <__divsf3+0x221>
c002602e:	8d 46 01             	lea    eax,[esi+0x1]
c0026031:	01 db                	add    ebx,ebx
c0026033:	78 04                	js     c0026039 <__divsf3+0x16d>
c0026035:	89 c6                	mov    esi,eax
c0026037:	eb f5                	jmp    c002602e <__divsf3+0x162>
c0026039:	89 c8                	mov    eax,ecx
c002603b:	0d 00 00 00 80       	or     eax,0x80000000
c0026040:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026046:	31 d2                	xor    edx,edx
c0026048:	39 d8                	cmp    eax,ebx
c002604a:	72 07                	jb     c0026053 <__divsf3+0x187>
c002604c:	29 d8                	sub    eax,ebx
c002604e:	ba 01 00 00 00       	mov    edx,0x1
c0026053:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c002605a:	01 d2                	add    edx,edx
c002605c:	89 c1                	mov    ecx,eax
c002605e:	01 c0                	add    eax,eax
c0026060:	85 c9                	test   ecx,ecx
c0026062:	78 04                	js     c0026068 <__divsf3+0x19c>
c0026064:	39 c3                	cmp    ebx,eax
c0026066:	77 05                	ja     c002606d <__divsf3+0x1a1>
c0026068:	29 d8                	sub    eax,ebx
c002606a:	83 ca 01             	or     edx,0x1
c002606d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026070:	75 e8                	jne    c002605a <__divsf3+0x18e>
c0026072:	85 c0                	test   eax,eax
c0026074:	0f 95 c0             	setne  al
c0026077:	0f b6 c0             	movzx  eax,al
c002607a:	c1 e2 06             	shl    edx,0x6
c002607d:	09 c2                	or     edx,eax
c002607f:	78 03                	js     c0026084 <__divsf3+0x1b8>
c0026081:	01 d2                	add    edx,edx
c0026083:	4e                   	dec    esi
c0026084:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002608a:	7f 22                	jg     c00260ae <__divsf3+0x1e2>
c002608c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026092:	85 f6                	test   esi,esi
c0026094:	7f 23                	jg     c00260b9 <__divsf3+0x1ed>
c0026096:	83 fe e9             	cmp    esi,0xffffffe9
c0026099:	7c 1a                	jl     c00260b5 <__divsf3+0x1e9>
c002609b:	81 ca 00 00 00 80    	or     edx,0x80000000
c00260a1:	b9 01 00 00 00       	mov    ecx,0x1
c00260a6:	29 f1                	sub    ecx,esi
c00260a8:	d3 ea                	shr    edx,cl
c00260aa:	31 f6                	xor    esi,esi
c00260ac:	eb 0b                	jmp    c00260b9 <__divsf3+0x1ed>
c00260ae:	be ff 00 00 00       	mov    esi,0xff
c00260b3:	eb 02                	jmp    c00260b7 <__divsf3+0x1eb>
c00260b5:	31 f6                	xor    esi,esi
c00260b7:	31 d2                	xor    edx,edx
c00260b9:	89 d0                	mov    eax,edx
c00260bb:	c1 e8 08             	shr    eax,0x8
c00260be:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00260c1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00260c7:	09 fe                	or     esi,edi
c00260c9:	c1 e6 17             	shl    esi,0x17
c00260cc:	09 c6                	or     esi,eax
c00260ce:	f6 c2 7f             	test   dl,0x7f
c00260d1:	0f 95 c1             	setne  cl
c00260d4:	09 c8                	or     eax,ecx
c00260d6:	83 e0 01             	and    eax,0x1
c00260d9:	c1 ea 07             	shr    edx,0x7
c00260dc:	21 c2                	and    edx,eax
c00260de:	8d 1c 16             	lea    ebx,[esi+edx*1]
c00260e1:	eb 0a                	jmp    c00260ed <__divsf3+0x221>
c00260e3:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c00260e8:	eb 03                	jmp    c00260ed <__divsf3+0x221>
c00260ea:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00260ed:	89 d8                	mov    eax,ebx
c00260ef:	8d 65 f4             	lea    esp,[ebp-0xc]
c00260f2:	5b                   	pop    ebx
c00260f3:	5e                   	pop    esi
c00260f4:	5f                   	pop    edi
c00260f5:	5d                   	pop    ebp
c00260f6:	c3                   	ret    

c00260f7 <__floatsisf>:
c00260f7:	55                   	push   ebp
c00260f8:	89 e5                	mov    ebp,esp
c00260fa:	53                   	push   ebx
c00260fb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00260fe:	85 d2                	test   edx,edx
c0026100:	7e 2b                	jle    c002612d <__floatsisf+0x36>
c0026102:	0f bd ca             	bsr    ecx,edx
c0026105:	83 f1 1f             	xor    ecx,0x1f
c0026108:	d3 e2                	shl    edx,cl
c002610a:	89 d0                	mov    eax,edx
c002610c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026111:	89 c3                	mov    ebx,eax
c0026113:	c1 eb 08             	shr    ebx,0x8
c0026116:	80 e2 7f             	and    dl,0x7f
c0026119:	0f 95 c2             	setne  dl
c002611c:	09 da                	or     edx,ebx
c002611e:	83 e2 01             	and    edx,0x1
c0026121:	c1 e8 07             	shr    eax,0x7
c0026124:	21 c2                	and    edx,eax
c0026126:	b8 9e 00 00 00       	mov    eax,0x9e
c002612b:	eb 32                	jmp    c002615f <__floatsisf+0x68>
c002612d:	b8 00 00 00 00       	mov    eax,0x0
c0026132:	74 34                	je     c0026168 <__floatsisf+0x71>
c0026134:	f7 da                	neg    edx
c0026136:	0f bd ca             	bsr    ecx,edx
c0026139:	83 f1 1f             	xor    ecx,0x1f
c002613c:	d3 e2                	shl    edx,cl
c002613e:	89 d0                	mov    eax,edx
c0026140:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026145:	89 c3                	mov    ebx,eax
c0026147:	c1 eb 08             	shr    ebx,0x8
c002614a:	80 e2 7f             	and    dl,0x7f
c002614d:	0f 95 c2             	setne  dl
c0026150:	09 da                	or     edx,ebx
c0026152:	83 e2 01             	and    edx,0x1
c0026155:	c1 e8 07             	shr    eax,0x7
c0026158:	21 c2                	and    edx,eax
c002615a:	b8 9e 01 00 00       	mov    eax,0x19e
c002615f:	29 c8                	sub    eax,ecx
c0026161:	c1 e0 17             	shl    eax,0x17
c0026164:	09 d8                	or     eax,ebx
c0026166:	01 d0                	add    eax,edx
c0026168:	5b                   	pop    ebx
c0026169:	5d                   	pop    ebp
c002616a:	c3                   	ret    

c002616b <__floatunsisf>:
c002616b:	55                   	push   ebp
c002616c:	89 e5                	mov    ebp,esp
c002616e:	53                   	push   ebx
c002616f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026172:	31 c0                	xor    eax,eax
c0026174:	85 d2                	test   edx,edx
c0026176:	74 32                	je     c00261aa <__floatunsisf+0x3f>
c0026178:	0f bd ca             	bsr    ecx,edx
c002617b:	83 f1 1f             	xor    ecx,0x1f
c002617e:	d3 e2                	shl    edx,cl
c0026180:	89 d0                	mov    eax,edx
c0026182:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026187:	89 c3                	mov    ebx,eax
c0026189:	c1 eb 08             	shr    ebx,0x8
c002618c:	80 e2 7f             	and    dl,0x7f
c002618f:	0f 95 c2             	setne  dl
c0026192:	09 da                	or     edx,ebx
c0026194:	83 e2 01             	and    edx,0x1
c0026197:	c1 e8 07             	shr    eax,0x7
c002619a:	21 c2                	and    edx,eax
c002619c:	b8 9e 00 00 00       	mov    eax,0x9e
c00261a1:	29 c8                	sub    eax,ecx
c00261a3:	c1 e0 17             	shl    eax,0x17
c00261a6:	09 d8                	or     eax,ebx
c00261a8:	01 d0                	add    eax,edx
c00261aa:	5b                   	pop    ebx
c00261ab:	5d                   	pop    ebp
c00261ac:	c3                   	ret    

c00261ad <__fixsfsi>:
c00261ad:	55                   	push   ebp
c00261ae:	89 e5                	mov    ebp,esp
c00261b0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00261b3:	89 d1                	mov    ecx,edx
c00261b5:	c1 e1 08             	shl    ecx,0x8
c00261b8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00261be:	c1 fa 17             	sar    edx,0x17
c00261c1:	78 1c                	js     c00261df <__fixsfsi+0x32>
c00261c3:	83 ea 7f             	sub    edx,0x7f
c00261c6:	31 c0                	xor    eax,eax
c00261c8:	83 fa 1e             	cmp    edx,0x1e
c00261cb:	77 40                	ja     c002620d <__fixsfsi+0x60>
c00261cd:	89 c8                	mov    eax,ecx
c00261cf:	0d 00 00 00 80       	or     eax,0x80000000
c00261d4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00261d9:	29 d1                	sub    ecx,edx
c00261db:	d3 e8                	shr    eax,cl
c00261dd:	eb 2e                	jmp    c002620d <__fixsfsi+0x60>
c00261df:	31 c0                	xor    eax,eax
c00261e1:	81 c2 81 00 00 00    	add    edx,0x81
c00261e7:	78 24                	js     c002620d <__fixsfsi+0x60>
c00261e9:	83 fa 1e             	cmp    edx,0x1e
c00261ec:	7e 09                	jle    c00261f7 <__fixsfsi+0x4a>
c00261ee:	83 fa 1f             	cmp    edx,0x1f
c00261f1:	75 18                	jne    c002620b <__fixsfsi+0x5e>
c00261f3:	85 c9                	test   ecx,ecx
c00261f5:	75 14                	jne    c002620b <__fixsfsi+0x5e>
c00261f7:	89 c8                	mov    eax,ecx
c00261f9:	0d 00 00 00 80       	or     eax,0x80000000
c00261fe:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026203:	29 d1                	sub    ecx,edx
c0026205:	d3 e8                	shr    eax,cl
c0026207:	f7 d8                	neg    eax
c0026209:	eb 02                	jmp    c002620d <__fixsfsi+0x60>
c002620b:	31 c0                	xor    eax,eax
c002620d:	5d                   	pop    ebp
c002620e:	c3                   	ret    

c002620f <__fixunssfsi>:
c002620f:	55                   	push   ebp
c0026210:	89 e5                	mov    ebp,esp
c0026212:	53                   	push   ebx
c0026213:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026216:	89 d3                	mov    ebx,edx
c0026218:	c1 fb 17             	sar    ebx,0x17
c002621b:	83 eb 7f             	sub    ebx,0x7f
c002621e:	31 c0                	xor    eax,eax
c0026220:	83 fb 1f             	cmp    ebx,0x1f
c0026223:	77 18                	ja     c002623d <__fixunssfsi+0x2e>
c0026225:	89 d0                	mov    eax,edx
c0026227:	c1 e0 08             	shl    eax,0x8
c002622a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002622f:	0d 00 00 00 80       	or     eax,0x80000000
c0026234:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026239:	29 d9                	sub    ecx,ebx
c002623b:	d3 e8                	shr    eax,cl
c002623d:	5b                   	pop    ebx
c002623e:	5d                   	pop    ebp
c002623f:	c3                   	ret    

c0026240 <__cmpsf2>:
c0026240:	55                   	push   ebp
c0026241:	89 e5                	mov    ebp,esp
c0026243:	57                   	push   edi
c0026244:	56                   	push   esi
c0026245:	53                   	push   ebx
c0026246:	83 ec 24             	sub    esp,0x24
c0026249:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002624c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002624f:	e8 4f 10 00 00       	call   c00272a3 <__truncdfsf2>
c0026254:	5a                   	pop    edx
c0026255:	59                   	pop    ecx
c0026256:	89 c3                	mov    ebx,eax
c0026258:	c1 e8 17             	shr    eax,0x17
c002625b:	0f b6 f0             	movzx  esi,al
c002625e:	89 d8                	mov    eax,ebx
c0026260:	c1 e8 1f             	shr    eax,0x1f
c0026263:	31 c6                	xor    esi,eax
c0026265:	c1 e3 08             	shl    ebx,0x8
c0026268:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002626b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002626e:	e8 30 10 00 00       	call   c00272a3 <__truncdfsf2>
c0026273:	83 c4 10             	add    esp,0x10
c0026276:	89 c1                	mov    ecx,eax
c0026278:	c1 e9 17             	shr    ecx,0x17
c002627b:	0f b6 c9             	movzx  ecx,cl
c002627e:	89 c7                	mov    edi,eax
c0026280:	c1 ef 1f             	shr    edi,0x1f
c0026283:	89 ca                	mov    edx,ecx
c0026285:	31 fa                	xor    edx,edi
c0026287:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002628a:	c1 e0 08             	shl    eax,0x8
c002628d:	89 c2                	mov    edx,eax
c002628f:	89 d8                	mov    eax,ebx
c0026291:	09 d0                	or     eax,edx
c0026293:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026298:	09 f0                	or     eax,esi
c002629a:	75 08                	jne    c00262a4 <__cmpsf2+0x64>
c002629c:	31 c0                	xor    eax,eax
c002629e:	39 f9                	cmp    ecx,edi
c00262a0:	75 0c                	jne    c00262ae <__cmpsf2+0x6e>
c00262a2:	eb 29                	jmp    c00262cd <__cmpsf2+0x8d>
c00262a4:	b8 01 00 00 00       	mov    eax,0x1
c00262a9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00262ac:	7f 1f                	jg     c00262cd <__cmpsf2+0x8d>
c00262ae:	83 c8 ff             	or     eax,0xffffffff
c00262b1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00262b4:	7c 17                	jl     c00262cd <__cmpsf2+0x8d>
c00262b6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00262bc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00262c2:	b8 01 00 00 00       	mov    eax,0x1
c00262c7:	39 d3                	cmp    ebx,edx
c00262c9:	77 02                	ja     c00262cd <__cmpsf2+0x8d>
c00262cb:	19 c0                	sbb    eax,eax
c00262cd:	8d 65 f4             	lea    esp,[ebp-0xc]
c00262d0:	5b                   	pop    ebx
c00262d1:	5e                   	pop    esi
c00262d2:	5f                   	pop    edi
c00262d3:	5d                   	pop    ebp
c00262d4:	c3                   	ret    

c00262d5 <__eqsf2>:
c00262d5:	55                   	push   ebp
c00262d6:	89 e5                	mov    ebp,esp
c00262d8:	83 ec 24             	sub    esp,0x24
c00262db:	6a 01                	push   0x1
c00262dd:	83 ec 0c             	sub    esp,0xc
c00262e0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00262e3:	e8 df 10 00 00       	call   c00273c7 <__extendsfdf2>
c00262e8:	83 c4 10             	add    esp,0x10
c00262eb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00262ee:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00262f1:	52                   	push   edx
c00262f2:	50                   	push   eax
c00262f3:	50                   	push   eax
c00262f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262f7:	e8 cb 10 00 00       	call   c00273c7 <__extendsfdf2>
c00262fc:	59                   	pop    ecx
c00262fd:	59                   	pop    ecx
c00262fe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026301:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026304:	52                   	push   edx
c0026305:	50                   	push   eax
c0026306:	e8 35 ff ff ff       	call   c0026240 <__cmpsf2>
c002630b:	83 c4 20             	add    esp,0x20
c002630e:	c9                   	leave  
c002630f:	c3                   	ret    

c0026310 <__nesf2>:
c0026310:	eb c3                	jmp    c00262d5 <__eqsf2>

c0026312 <__gtsf2>:
c0026312:	55                   	push   ebp
c0026313:	89 e5                	mov    ebp,esp
c0026315:	83 ec 24             	sub    esp,0x24
c0026318:	6a ff                	push   0xffffffff
c002631a:	83 ec 0c             	sub    esp,0xc
c002631d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026320:	e8 a2 10 00 00       	call   c00273c7 <__extendsfdf2>
c0026325:	83 c4 10             	add    esp,0x10
c0026328:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002632b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002632e:	52                   	push   edx
c002632f:	50                   	push   eax
c0026330:	50                   	push   eax
c0026331:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026334:	e8 8e 10 00 00       	call   c00273c7 <__extendsfdf2>
c0026339:	59                   	pop    ecx
c002633a:	59                   	pop    ecx
c002633b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002633e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0026341:	52                   	push   edx
c0026342:	50                   	push   eax
c0026343:	e8 f8 fe ff ff       	call   c0026240 <__cmpsf2>
c0026348:	83 c4 20             	add    esp,0x20
c002634b:	c9                   	leave  
c002634c:	c3                   	ret    

c002634d <__gesf2>:
c002634d:	eb c3                	jmp    c0026312 <__gtsf2>

c002634f <__ltsf2>:
c002634f:	eb 84                	jmp    c00262d5 <__eqsf2>

c0026351 <__lesf2>:
c0026351:	eb 82                	jmp    c00262d5 <__eqsf2>

c0026353 <__adddf3>:
c0026353:	55                   	push   ebp
c0026354:	89 e5                	mov    ebp,esp
c0026356:	57                   	push   edi
c0026357:	56                   	push   esi
c0026358:	53                   	push   ebx
c0026359:	83 ec 24             	sub    esp,0x24
c002635c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002635f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026362:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026365:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026368:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002636b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002636e:	89 c8                	mov    eax,ecx
c0026370:	89 ce                	mov    esi,ecx
c0026372:	c1 fe 14             	sar    esi,0x14
c0026375:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0026378:	89 fb                	mov    ebx,edi
c002637a:	89 fa                	mov    edx,edi
c002637c:	c1 e2 0b             	shl    edx,0xb
c002637f:	c1 e0 0b             	shl    eax,0xb
c0026382:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026387:	c1 eb 15             	shr    ebx,0x15
c002638a:	09 d8                	or     eax,ebx
c002638c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002638f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026392:	c1 fe 14             	sar    esi,0x14
c0026395:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0026398:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002639b:	89 f3                	mov    ebx,esi
c002639d:	c1 e3 0b             	shl    ebx,0xb
c00263a0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00263a3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00263a6:	c1 e3 0b             	shl    ebx,0xb
c00263a9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00263af:	c1 ee 15             	shr    esi,0x15
c00263b2:	09 f3                	or     ebx,esi
c00263b4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00263b7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00263ba:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00263bd:	0f 88 5f 02 00 00    	js     c0026622 <__adddf3+0x2cf>
c00263c3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00263c6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00263c9:	85 db                	test   ebx,ebx
c00263cb:	0f 8e c7 00 00 00    	jle    c0026498 <__adddf3+0x145>
c00263d1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00263d8:	75 1a                	jne    c00263f4 <__adddf3+0xa1>
c00263da:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00263dd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00263e0:	0f 84 b2 05 00 00    	je     c0026998 <__adddf3+0x645>
c00263e6:	4b                   	dec    ebx
c00263e7:	75 23                	jne    c002640c <__adddf3+0xb9>
c00263e9:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00263ec:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00263ef:	e9 99 00 00 00       	jmp    c002648d <__adddf3+0x13a>
c00263f4:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00263f7:	f7 d6                	not    esi
c00263f9:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00263ff:	0f 84 93 05 00 00    	je     c0026998 <__adddf3+0x645>
c0026405:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002640c:	83 fb 1f             	cmp    ebx,0x1f
c002640f:	7e 42                	jle    c0026453 <__adddf3+0x100>
c0026411:	83 fb 3f             	cmp    ebx,0x3f
c0026414:	0f 8f 7e 05 00 00    	jg     c0026998 <__adddf3+0x645>
c002641a:	83 e3 1f             	and    ebx,0x1f
c002641d:	89 d9                	mov    ecx,ebx
c002641f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026422:	d3 ef                	shr    edi,cl
c0026424:	31 db                	xor    ebx,ebx
c0026426:	85 c9                	test   ecx,ecx
c0026428:	74 15                	je     c002643f <__adddf3+0xec>
c002642a:	be 20 00 00 00       	mov    esi,0x20
c002642f:	29 ce                	sub    esi,ecx
c0026431:	89 f1                	mov    ecx,esi
c0026433:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026436:	d3 e6                	shl    esi,cl
c0026438:	31 db                	xor    ebx,ebx
c002643a:	85 f6                	test   esi,esi
c002643c:	0f 95 c3             	setne  bl
c002643f:	31 c9                	xor    ecx,ecx
c0026441:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026445:	0f 95 c1             	setne  cl
c0026448:	09 cf                	or     edi,ecx
c002644a:	09 fb                	or     ebx,edi
c002644c:	01 da                	add    edx,ebx
c002644e:	83 d0 00             	adc    eax,0x0
c0026451:	eb 3a                	jmp    c002648d <__adddf3+0x13a>
c0026453:	bf 20 00 00 00       	mov    edi,0x20
c0026458:	29 df                	sub    edi,ebx
c002645a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002645d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026460:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026463:	d3 e6                	shl    esi,cl
c0026465:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026468:	88 d9                	mov    cl,bl
c002646a:	d3 ef                	shr    edi,cl
c002646c:	09 fe                	or     esi,edi
c002646e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026471:	88 d9                	mov    cl,bl
c0026473:	d3 ef                	shr    edi,cl
c0026475:	89 fb                	mov    ebx,edi
c0026477:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002647a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002647d:	d3 e7                	shl    edi,cl
c002647f:	85 ff                	test   edi,edi
c0026481:	0f 95 c1             	setne  cl
c0026484:	0f b6 c9             	movzx  ecx,cl
c0026487:	09 ce                	or     esi,ecx
c0026489:	01 f2                	add    edx,esi
c002648b:	11 d8                	adc    eax,ebx
c002648d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026490:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026493:	e9 52 01 00 00       	jmp    c00265ea <__adddf3+0x297>
c0026498:	0f 84 d5 00 00 00    	je     c0026573 <__adddf3+0x220>
c002649e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00264a1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00264a4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00264a7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00264aa:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00264b1:	75 20                	jne    c00264d3 <__adddf3+0x180>
c00264b3:	89 d6                	mov    esi,edx
c00264b5:	09 c6                	or     esi,eax
c00264b7:	0f 84 db 04 00 00    	je     c0026998 <__adddf3+0x645>
c00264bd:	4b                   	dec    ebx
c00264be:	75 29                	jne    c00264e9 <__adddf3+0x196>
c00264c0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00264c3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00264c6:	01 d1                	add    ecx,edx
c00264c8:	11 c6                	adc    esi,eax
c00264ca:	89 f0                	mov    eax,esi
c00264cc:	89 ca                	mov    edx,ecx
c00264ce:	e9 17 01 00 00       	jmp    c00265ea <__adddf3+0x297>
c00264d3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00264d6:	f7 d6                	not    esi
c00264d8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00264de:	0f 84 b4 04 00 00    	je     c0026998 <__adddf3+0x645>
c00264e4:	0d 00 00 00 80       	or     eax,0x80000000
c00264e9:	83 fb 1f             	cmp    ebx,0x1f
c00264ec:	7e 48                	jle    c0026536 <__adddf3+0x1e3>
c00264ee:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00264f1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00264f4:	83 fb 3f             	cmp    ebx,0x3f
c00264f7:	0f 8f 9b 04 00 00    	jg     c0026998 <__adddf3+0x645>
c00264fd:	83 e3 1f             	and    ebx,0x1f
c0026500:	89 d9                	mov    ecx,ebx
c0026502:	89 c7                	mov    edi,eax
c0026504:	d3 ef                	shr    edi,cl
c0026506:	31 db                	xor    ebx,ebx
c0026508:	85 c9                	test   ecx,ecx
c002650a:	74 12                	je     c002651e <__adddf3+0x1cb>
c002650c:	be 20 00 00 00       	mov    esi,0x20
c0026511:	29 ce                	sub    esi,ecx
c0026513:	89 f1                	mov    ecx,esi
c0026515:	d3 e0                	shl    eax,cl
c0026517:	31 db                	xor    ebx,ebx
c0026519:	85 c0                	test   eax,eax
c002651b:	0f 95 c3             	setne  bl
c002651e:	31 c0                	xor    eax,eax
c0026520:	85 d2                	test   edx,edx
c0026522:	0f 95 c0             	setne  al
c0026525:	09 c7                	or     edi,eax
c0026527:	09 fb                	or     ebx,edi
c0026529:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002652c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002652f:	01 da                	add    edx,ebx
c0026531:	83 d6 00             	adc    esi,0x0
c0026534:	eb 39                	jmp    c002656f <__adddf3+0x21c>
c0026536:	be 20 00 00 00       	mov    esi,0x20
c002653b:	29 de                	sub    esi,ebx
c002653d:	89 c7                	mov    edi,eax
c002653f:	89 f1                	mov    ecx,esi
c0026541:	d3 e7                	shl    edi,cl
c0026543:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026546:	89 d7                	mov    edi,edx
c0026548:	88 d9                	mov    cl,bl
c002654a:	d3 ef                	shr    edi,cl
c002654c:	89 f9                	mov    ecx,edi
c002654e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026551:	09 cf                	or     edi,ecx
c0026553:	88 d9                	mov    cl,bl
c0026555:	d3 e8                	shr    eax,cl
c0026557:	89 f1                	mov    ecx,esi
c0026559:	d3 e2                	shl    edx,cl
c002655b:	85 d2                	test   edx,edx
c002655d:	0f 95 c2             	setne  dl
c0026560:	0f b6 d2             	movzx  edx,dl
c0026563:	09 d7                	or     edi,edx
c0026565:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026568:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002656b:	01 fa                	add    edx,edi
c002656d:	11 c6                	adc    esi,eax
c002656f:	89 f0                	mov    eax,esi
c0026571:	eb 77                	jmp    c00265ea <__adddf3+0x297>
c0026573:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026576:	46                   	inc    esi
c0026577:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002657a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026580:	75 41                	jne    c00265c3 <__adddf3+0x270>
c0026582:	89 d3                	mov    ebx,edx
c0026584:	09 c3                	or     ebx,eax
c0026586:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002658d:	75 27                	jne    c00265b6 <__adddf3+0x263>
c002658f:	85 db                	test   ebx,ebx
c0026591:	0f 84 fb 03 00 00    	je     c0026992 <__adddf3+0x63f>
c0026597:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002659a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002659d:	0f 84 f5 03 00 00    	je     c0026998 <__adddf3+0x645>
c00265a3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00265a6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00265a9:	85 c0                	test   eax,eax
c00265ab:	0f 89 91 03 00 00    	jns    c0026942 <__adddf3+0x5ef>
c00265b1:	e9 85 03 00 00       	jmp    c002693b <__adddf3+0x5e8>
c00265b6:	85 db                	test   ebx,ebx
c00265b8:	0f 85 da 03 00 00    	jne    c0026998 <__adddf3+0x645>
c00265be:	e9 cf 03 00 00       	jmp    c0026992 <__adddf3+0x63f>
c00265c3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00265c6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00265c9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00265cc:	f7 d1                	not    ecx
c00265ce:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00265d4:	0f 84 70 03 00 00    	je     c002694a <__adddf3+0x5f7>
c00265da:	d1 ea                	shr    edx,1
c00265dc:	89 c1                	mov    ecx,eax
c00265de:	c1 e1 1f             	shl    ecx,0x1f
c00265e1:	09 ca                	or     edx,ecx
c00265e3:	d1 e8                	shr    eax,1
c00265e5:	e9 6f 03 00 00       	jmp    c0026959 <__adddf3+0x606>
c00265ea:	85 c0                	test   eax,eax
c00265ec:	0f 89 67 03 00 00    	jns    c0026959 <__adddf3+0x606>
c00265f2:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00265f5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00265f8:	f7 d1                	not    ecx
c00265fa:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026600:	0f 84 44 03 00 00    	je     c002694a <__adddf3+0x5f7>
c0026606:	89 d1                	mov    ecx,edx
c0026608:	d1 e9                	shr    ecx,1
c002660a:	83 e2 01             	and    edx,0x1
c002660d:	09 ca                	or     edx,ecx
c002660f:	89 c1                	mov    ecx,eax
c0026611:	c1 e1 1f             	shl    ecx,0x1f
c0026614:	09 ca                	or     edx,ecx
c0026616:	d1 e8                	shr    eax,1
c0026618:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002661d:	e9 37 03 00 00       	jmp    c0026959 <__adddf3+0x606>
c0026622:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026625:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002662b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002662e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026631:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026637:	29 de                	sub    esi,ebx
c0026639:	85 f6                	test   esi,esi
c002663b:	0f 8e bd 00 00 00    	jle    c00266fe <__adddf3+0x3ab>
c0026641:	85 db                	test   ebx,ebx
c0026643:	75 17                	jne    c002665c <__adddf3+0x309>
c0026645:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026648:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002664b:	0f 84 47 03 00 00    	je     c0026998 <__adddf3+0x645>
c0026651:	4e                   	dec    esi
c0026652:	75 20                	jne    c0026674 <__adddf3+0x321>
c0026654:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026657:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002665a:	eb 5b                	jmp    c00266b7 <__adddf3+0x364>
c002665c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002665f:	f7 d3                	not    ebx
c0026661:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026667:	0f 84 2b 03 00 00    	je     c0026998 <__adddf3+0x645>
c002666d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026674:	83 fe 1f             	cmp    esi,0x1f
c0026677:	7e 49                	jle    c00266c2 <__adddf3+0x36f>
c0026679:	83 fe 3f             	cmp    esi,0x3f
c002667c:	0f 8f 16 03 00 00    	jg     c0026998 <__adddf3+0x645>
c0026682:	83 e6 1f             	and    esi,0x1f
c0026685:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026688:	89 f1                	mov    ecx,esi
c002668a:	d3 ef                	shr    edi,cl
c002668c:	31 db                	xor    ebx,ebx
c002668e:	85 f6                	test   esi,esi
c0026690:	74 13                	je     c00266a5 <__adddf3+0x352>
c0026692:	b9 20 00 00 00       	mov    ecx,0x20
c0026697:	29 f1                	sub    ecx,esi
c0026699:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002669c:	d3 e6                	shl    esi,cl
c002669e:	31 db                	xor    ebx,ebx
c00266a0:	85 f6                	test   esi,esi
c00266a2:	0f 95 c3             	setne  bl
c00266a5:	31 c9                	xor    ecx,ecx
c00266a7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00266ab:	0f 95 c1             	setne  cl
c00266ae:	09 cf                	or     edi,ecx
c00266b0:	09 fb                	or     ebx,edi
c00266b2:	29 da                	sub    edx,ebx
c00266b4:	83 d8 00             	sbb    eax,0x0
c00266b7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00266ba:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00266bd:	e9 aa 01 00 00       	jmp    c002686c <__adddf3+0x519>
c00266c2:	bf 20 00 00 00       	mov    edi,0x20
c00266c7:	29 f7                	sub    edi,esi
c00266c9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00266cc:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00266cf:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00266d2:	d3 e3                	shl    ebx,cl
c00266d4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00266d7:	89 f1                	mov    ecx,esi
c00266d9:	d3 ef                	shr    edi,cl
c00266db:	09 fb                	or     ebx,edi
c00266dd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00266e0:	89 f1                	mov    ecx,esi
c00266e2:	d3 ef                	shr    edi,cl
c00266e4:	89 fe                	mov    esi,edi
c00266e6:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00266e9:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00266ec:	d3 e7                	shl    edi,cl
c00266ee:	85 ff                	test   edi,edi
c00266f0:	0f 95 c1             	setne  cl
c00266f3:	0f b6 c9             	movzx  ecx,cl
c00266f6:	09 cb                	or     ebx,ecx
c00266f8:	29 da                	sub    edx,ebx
c00266fa:	19 f0                	sbb    eax,esi
c00266fc:	eb b9                	jmp    c00266b7 <__adddf3+0x364>
c00266fe:	0f 84 cd 00 00 00    	je     c00267d1 <__adddf3+0x47e>
c0026704:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0026707:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002670a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002670d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026711:	75 1b                	jne    c002672e <__adddf3+0x3db>
c0026713:	89 d6                	mov    esi,edx
c0026715:	09 c6                	or     esi,eax
c0026717:	0f 84 7b 02 00 00    	je     c0026998 <__adddf3+0x645>
c002671d:	4b                   	dec    ebx
c002671e:	75 24                	jne    c0026744 <__adddf3+0x3f1>
c0026720:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026723:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026726:	29 d1                	sub    ecx,edx
c0026728:	19 c6                	sbb    esi,eax
c002672a:	89 ca                	mov    edx,ecx
c002672c:	eb 61                	jmp    c002678f <__adddf3+0x43c>
c002672e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026731:	f7 d6                	not    esi
c0026733:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026739:	0f 84 59 02 00 00    	je     c0026998 <__adddf3+0x645>
c002673f:	0d 00 00 00 80       	or     eax,0x80000000
c0026744:	83 fb 1f             	cmp    ebx,0x1f
c0026747:	7e 4d                	jle    c0026796 <__adddf3+0x443>
c0026749:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002674c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002674f:	83 fb 3f             	cmp    ebx,0x3f
c0026752:	0f 8f 40 02 00 00    	jg     c0026998 <__adddf3+0x645>
c0026758:	83 e3 1f             	and    ebx,0x1f
c002675b:	89 d9                	mov    ecx,ebx
c002675d:	89 c7                	mov    edi,eax
c002675f:	d3 ef                	shr    edi,cl
c0026761:	31 db                	xor    ebx,ebx
c0026763:	85 c9                	test   ecx,ecx
c0026765:	74 12                	je     c0026779 <__adddf3+0x426>
c0026767:	be 20 00 00 00       	mov    esi,0x20
c002676c:	29 ce                	sub    esi,ecx
c002676e:	89 f1                	mov    ecx,esi
c0026770:	d3 e0                	shl    eax,cl
c0026772:	31 db                	xor    ebx,ebx
c0026774:	85 c0                	test   eax,eax
c0026776:	0f 95 c3             	setne  bl
c0026779:	31 c0                	xor    eax,eax
c002677b:	85 d2                	test   edx,edx
c002677d:	0f 95 c0             	setne  al
c0026780:	09 c7                	or     edi,eax
c0026782:	09 fb                	or     ebx,edi
c0026784:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026787:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002678a:	29 da                	sub    edx,ebx
c002678c:	83 de 00             	sbb    esi,0x0
c002678f:	89 f0                	mov    eax,esi
c0026791:	e9 d6 00 00 00       	jmp    c002686c <__adddf3+0x519>
c0026796:	be 20 00 00 00       	mov    esi,0x20
c002679b:	29 de                	sub    esi,ebx
c002679d:	89 c7                	mov    edi,eax
c002679f:	89 f1                	mov    ecx,esi
c00267a1:	d3 e7                	shl    edi,cl
c00267a3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00267a6:	89 d7                	mov    edi,edx
c00267a8:	88 d9                	mov    cl,bl
c00267aa:	d3 ef                	shr    edi,cl
c00267ac:	89 f9                	mov    ecx,edi
c00267ae:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00267b1:	09 cf                	or     edi,ecx
c00267b3:	88 d9                	mov    cl,bl
c00267b5:	d3 e8                	shr    eax,cl
c00267b7:	89 f1                	mov    ecx,esi
c00267b9:	d3 e2                	shl    edx,cl
c00267bb:	85 d2                	test   edx,edx
c00267bd:	0f 95 c2             	setne  dl
c00267c0:	0f b6 d2             	movzx  edx,dl
c00267c3:	09 d7                	or     edi,edx
c00267c5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00267c8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00267cb:	29 fa                	sub    edx,edi
c00267cd:	19 c6                	sbb    esi,eax
c00267cf:	eb be                	jmp    c002678f <__adddf3+0x43c>
c00267d1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00267d4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00267d7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00267dd:	75 6a                	jne    c0026849 <__adddf3+0x4f6>
c00267df:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00267e3:	75 58                	jne    c002683d <__adddf3+0x4ea>
c00267e5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00267e8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00267eb:	89 d6                	mov    esi,edx
c00267ed:	09 c6                	or     esi,eax
c00267ef:	75 17                	jne    c0026808 <__adddf3+0x4b5>
c00267f1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00267f4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00267f7:	85 db                	test   ebx,ebx
c00267f9:	0f 85 99 01 00 00    	jne    c0026998 <__adddf3+0x645>
c00267ff:	31 ff                	xor    edi,edi
c0026801:	31 c9                	xor    ecx,ecx
c0026803:	e9 90 01 00 00       	jmp    c0026998 <__adddf3+0x645>
c0026808:	85 db                	test   ebx,ebx
c002680a:	0f 84 88 01 00 00    	je     c0026998 <__adddf3+0x645>
c0026810:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026813:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026816:	85 c0                	test   eax,eax
c0026818:	79 10                	jns    c002682a <__adddf3+0x4d7>
c002681a:	31 c9                	xor    ecx,ecx
c002681c:	f7 da                	neg    edx
c002681e:	0f 95 c1             	setne  cl
c0026821:	01 c8                	add    eax,ecx
c0026823:	f7 d8                	neg    eax
c0026825:	e9 2f 01 00 00       	jmp    c0026959 <__adddf3+0x606>
c002682a:	31 ff                	xor    edi,edi
c002682c:	31 c9                	xor    ecx,ecx
c002682e:	89 c3                	mov    ebx,eax
c0026830:	09 d3                	or     ebx,edx
c0026832:	0f 84 60 01 00 00    	je     c0026998 <__adddf3+0x645>
c0026838:	e9 05 01 00 00       	jmp    c0026942 <__adddf3+0x5ef>
c002683d:	31 ff                	xor    edi,edi
c002683f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026844:	e9 4f 01 00 00       	jmp    c0026998 <__adddf3+0x645>
c0026849:	89 c1                	mov    ecx,eax
c002684b:	89 d0                	mov    eax,edx
c002684d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0026850:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0026853:	89 ca                	mov    edx,ecx
c0026855:	85 c9                	test   ecx,ecx
c0026857:	79 2c                	jns    c0026885 <__adddf3+0x532>
c0026859:	31 c9                	xor    ecx,ecx
c002685b:	f7 d8                	neg    eax
c002685d:	0f 95 c1             	setne  cl
c0026860:	01 ca                	add    edx,ecx
c0026862:	f7 da                	neg    edx
c0026864:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026867:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002686a:	eb 19                	jmp    c0026885 <__adddf3+0x532>
c002686c:	85 c0                	test   eax,eax
c002686e:	0f 89 e5 00 00 00    	jns    c0026959 <__adddf3+0x606>
c0026874:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026879:	89 c1                	mov    ecx,eax
c002687b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002687e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026881:	89 d0                	mov    eax,edx
c0026883:	89 ca                	mov    edx,ecx
c0026885:	85 d2                	test   edx,edx
c0026887:	74 59                	je     c00268e2 <__adddf3+0x58f>
c0026889:	0f bd da             	bsr    ebx,edx
c002688c:	83 f3 1f             	xor    ebx,0x1f
c002688f:	88 d9                	mov    cl,bl
c0026891:	d3 e2                	shl    edx,cl
c0026893:	bf 20 00 00 00       	mov    edi,0x20
c0026898:	89 f9                	mov    ecx,edi
c002689a:	29 d9                	sub    ecx,ebx
c002689c:	89 c6                	mov    esi,eax
c002689e:	d3 ee                	shr    esi,cl
c00268a0:	09 d6                	or     esi,edx
c00268a2:	88 d9                	mov    cl,bl
c00268a4:	d3 e0                	shl    eax,cl
c00268a6:	89 c2                	mov    edx,eax
c00268a8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00268ab:	25 ff 07 00 00       	and    eax,0x7ff
c00268b0:	39 d8                	cmp    eax,ebx
c00268b2:	7f 22                	jg     c00268d6 <__adddf3+0x583>
c00268b4:	29 c3                	sub    ebx,eax
c00268b6:	43                   	inc    ebx
c00268b7:	88 d9                	mov    cl,bl
c00268b9:	d3 ea                	shr    edx,cl
c00268bb:	29 df                	sub    edi,ebx
c00268bd:	89 f9                	mov    ecx,edi
c00268bf:	89 f0                	mov    eax,esi
c00268c1:	d3 e0                	shl    eax,cl
c00268c3:	09 c2                	or     edx,eax
c00268c5:	89 f0                	mov    eax,esi
c00268c7:	88 d9                	mov    cl,bl
c00268c9:	d3 e8                	shr    eax,cl
c00268cb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00268ce:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00268d4:	eb 6f                	jmp    c0026945 <__adddf3+0x5f2>
c00268d6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00268d9:	29 d8                	sub    eax,ebx
c00268db:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00268de:	89 f0                	mov    eax,esi
c00268e0:	eb 59                	jmp    c002693b <__adddf3+0x5e8>
c00268e2:	85 c0                	test   eax,eax
c00268e4:	74 6a                	je     c0026950 <__adddf3+0x5fd>
c00268e6:	0f bd c8             	bsr    ecx,eax
c00268e9:	83 f1 1f             	xor    ecx,0x1f
c00268ec:	d3 e0                	shl    eax,cl
c00268ee:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00268f1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00268f7:	83 c1 20             	add    ecx,0x20
c00268fa:	39 cb                	cmp    ebx,ecx
c00268fc:	7f 35                	jg     c0026933 <__adddf3+0x5e0>
c00268fe:	29 d9                	sub    ecx,ebx
c0026900:	8d 71 01             	lea    esi,[ecx+0x1]
c0026903:	83 fe 1f             	cmp    esi,0x1f
c0026906:	7e 09                	jle    c0026911 <__adddf3+0x5be>
c0026908:	83 e9 1f             	sub    ecx,0x1f
c002690b:	d3 e8                	shr    eax,cl
c002690d:	89 c3                	mov    ebx,eax
c002690f:	eb 11                	jmp    c0026922 <__adddf3+0x5cf>
c0026911:	b9 20 00 00 00       	mov    ecx,0x20
c0026916:	29 f1                	sub    ecx,esi
c0026918:	89 c3                	mov    ebx,eax
c002691a:	d3 e3                	shl    ebx,cl
c002691c:	89 f1                	mov    ecx,esi
c002691e:	d3 e8                	shr    eax,cl
c0026920:	89 c2                	mov    edx,eax
c0026922:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026925:	25 00 f8 ff ff       	and    eax,0xfffff800
c002692a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002692d:	89 d0                	mov    eax,edx
c002692f:	89 da                	mov    edx,ebx
c0026931:	eb 26                	jmp    c0026959 <__adddf3+0x606>
c0026933:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026936:	29 cf                	sub    edi,ecx
c0026938:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002693b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026940:	eb 17                	jmp    c0026959 <__adddf3+0x606>
c0026942:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026945:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026948:	eb 0f                	jmp    c0026959 <__adddf3+0x606>
c002694a:	31 d2                	xor    edx,edx
c002694c:	31 c0                	xor    eax,eax
c002694e:	eb 09                	jmp    c0026959 <__adddf3+0x606>
c0026950:	89 c2                	mov    edx,eax
c0026952:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0026959:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002695c:	c1 e1 14             	shl    ecx,0x14
c002695f:	89 c3                	mov    ebx,eax
c0026961:	c1 eb 0b             	shr    ebx,0xb
c0026964:	09 d9                	or     ecx,ebx
c0026966:	89 d3                	mov    ebx,edx
c0026968:	c1 eb 0b             	shr    ebx,0xb
c002696b:	c1 e0 15             	shl    eax,0x15
c002696e:	09 d8                	or     eax,ebx
c0026970:	89 c7                	mov    edi,eax
c0026972:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0026978:	0f 95 c0             	setne  al
c002697b:	89 c6                	mov    esi,eax
c002697d:	09 f3                	or     ebx,esi
c002697f:	83 e3 01             	and    ebx,0x1
c0026982:	c1 ea 0a             	shr    edx,0xa
c0026985:	21 da                	and    edx,ebx
c0026987:	89 f8                	mov    eax,edi
c0026989:	01 d0                	add    eax,edx
c002698b:	83 d1 00             	adc    ecx,0x0
c002698e:	89 c7                	mov    edi,eax
c0026990:	eb 06                	jmp    c0026998 <__adddf3+0x645>
c0026992:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026995:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026998:	89 f8                	mov    eax,edi
c002699a:	89 ca                	mov    edx,ecx
c002699c:	83 c4 24             	add    esp,0x24
c002699f:	5b                   	pop    ebx
c00269a0:	5e                   	pop    esi
c00269a1:	5f                   	pop    edi
c00269a2:	5d                   	pop    ebp
c00269a3:	c3                   	ret    

c00269a4 <__subdf3>:
c00269a4:	55                   	push   ebp
c00269a5:	89 e5                	mov    ebp,esp
c00269a7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00269aa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00269ad:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00269b3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00269b6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00269b9:	5d                   	pop    ebp
c00269ba:	e9 94 f9 ff ff       	jmp    c0026353 <__adddf3>

c00269bf <__negdf2>:
c00269bf:	55                   	push   ebp
c00269c0:	89 e5                	mov    ebp,esp
c00269c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00269c5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00269c8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00269ce:	5d                   	pop    ebp
c00269cf:	c3                   	ret    

c00269d0 <__muldf3>:
c00269d0:	55                   	push   ebp
c00269d1:	89 e5                	mov    ebp,esp
c00269d3:	57                   	push   edi
c00269d4:	56                   	push   esi
c00269d5:	53                   	push   ebx
c00269d6:	83 ec 24             	sub    esp,0x24
c00269d9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00269dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00269df:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00269e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00269e5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00269e8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00269eb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00269ee:	89 c8                	mov    eax,ecx
c00269f0:	c1 f8 14             	sar    eax,0x14
c00269f3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00269f6:	89 f8                	mov    eax,edi
c00269f8:	89 fb                	mov    ebx,edi
c00269fa:	c1 e3 0b             	shl    ebx,0xb
c00269fd:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0026a00:	c1 e1 0b             	shl    ecx,0xb
c0026a03:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026a09:	c1 e8 15             	shr    eax,0x15
c0026a0c:	09 c1                	or     ecx,eax
c0026a0e:	89 d6                	mov    esi,edx
c0026a10:	89 d0                	mov    eax,edx
c0026a12:	c1 f8 14             	sar    eax,0x14
c0026a15:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026a18:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026a1b:	89 c3                	mov    ebx,eax
c0026a1d:	c1 e3 0b             	shl    ebx,0xb
c0026a20:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026a23:	c1 e6 0b             	shl    esi,0xb
c0026a26:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0026a2c:	c1 e8 15             	shr    eax,0x15
c0026a2f:	09 c6                	or     esi,eax
c0026a31:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026a34:	25 ff 07 00 00       	and    eax,0x7ff
c0026a39:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026a3c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026a3f:	25 ff 07 00 00       	and    eax,0x7ff
c0026a44:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026a47:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026a4a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0026a4d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0026a54:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026a57:	40                   	inc    eax
c0026a58:	a9 fe 07 00 00       	test   eax,0x7fe
c0026a5d:	0f 85 8d 00 00 00    	jne    c0026af0 <__muldf3+0x120>
c0026a63:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026a66:	09 c8                	or     eax,ecx
c0026a68:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0026a6c:	74 44                	je     c0026ab2 <__muldf3+0xe2>
c0026a6e:	85 c0                	test   eax,eax
c0026a70:	0f 85 31 02 00 00    	jne    c0026ca7 <__muldf3+0x2d7>
c0026a76:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026a79:	40                   	inc    eax
c0026a7a:	a9 fe 07 00 00       	test   eax,0x7fe
c0026a7f:	75 13                	jne    c0026a94 <__muldf3+0xc4>
c0026a81:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026a84:	09 f1                	or     ecx,esi
c0026a86:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026a8a:	74 22                	je     c0026aae <__muldf3+0xde>
c0026a8c:	85 c9                	test   ecx,ecx
c0026a8e:	0f 85 0d 02 00 00    	jne    c0026ca1 <__muldf3+0x2d1>
c0026a94:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0026a98:	0f 89 09 02 00 00    	jns    c0026ca7 <__muldf3+0x2d7>
c0026a9e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026aa1:	05 00 00 00 80       	add    eax,0x80000000
c0026aa6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026aa9:	e9 f9 01 00 00       	jmp    c0026ca7 <__muldf3+0x2d7>
c0026aae:	85 c9                	test   ecx,ecx
c0026ab0:	eb 2e                	jmp    c0026ae0 <__muldf3+0x110>
c0026ab2:	85 c0                	test   eax,eax
c0026ab4:	74 20                	je     c0026ad6 <__muldf3+0x106>
c0026ab6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0026ab9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026abc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026abf:	c1 ef 1f             	shr    edi,0x1f
c0026ac2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0026ac5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0026ac8:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026acb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ace:	09 f9                	or     ecx,edi
c0026ad0:	78 1e                	js     c0026af0 <__muldf3+0x120>
c0026ad2:	89 c3                	mov    ebx,eax
c0026ad4:	eb e0                	jmp    c0026ab6 <__muldf3+0xe6>
c0026ad6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026ad9:	f7 d0                	not    eax
c0026adb:	a9 ff 07 00 00       	test   eax,0x7ff
c0026ae0:	75 b2                	jne    c0026a94 <__muldf3+0xc4>
c0026ae2:	31 ff                	xor    edi,edi
c0026ae4:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0026aeb:	e9 b7 01 00 00       	jmp    c0026ca7 <__muldf3+0x2d7>
c0026af0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026af3:	40                   	inc    eax
c0026af4:	a9 fe 07 00 00       	test   eax,0x7fe
c0026af9:	75 57                	jne    c0026b52 <__muldf3+0x182>
c0026afb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026afe:	09 f0                	or     eax,esi
c0026b00:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026b04:	74 23                	je     c0026b29 <__muldf3+0x159>
c0026b06:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026b0a:	0f 89 91 01 00 00    	jns    c0026ca1 <__muldf3+0x2d1>
c0026b10:	85 c0                	test   eax,eax
c0026b12:	0f 85 89 01 00 00    	jne    c0026ca1 <__muldf3+0x2d1>
c0026b18:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026b1b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0026b21:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026b24:	e9 7e 01 00 00       	jmp    c0026ca7 <__muldf3+0x2d7>
c0026b29:	85 c0                	test   eax,eax
c0026b2b:	75 0c                	jne    c0026b39 <__muldf3+0x169>
c0026b2d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026b31:	0f 89 6a 01 00 00    	jns    c0026ca1 <__muldf3+0x2d1>
c0026b37:	eb df                	jmp    c0026b18 <__muldf3+0x148>
c0026b39:	01 f6                	add    esi,esi
c0026b3b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026b3e:	c1 ea 1f             	shr    edx,0x1f
c0026b41:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026b44:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0026b47:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026b4a:	09 d6                	or     esi,edx
c0026b4c:	78 04                	js     c0026b52 <__muldf3+0x182>
c0026b4e:	89 c3                	mov    ebx,eax
c0026b50:	eb e7                	jmp    c0026b39 <__muldf3+0x169>
c0026b52:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0026b58:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026b5e:	89 c8                	mov    eax,ecx
c0026b60:	f7 e6                	mul    esi
c0026b62:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0026b65:	89 c7                	mov    edi,eax
c0026b67:	89 c8                	mov    eax,ecx
c0026b69:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026b6c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0026b6f:	89 c1                	mov    ecx,eax
c0026b71:	89 f0                	mov    eax,esi
c0026b73:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0026b76:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0026b79:	89 c6                	mov    esi,eax
c0026b7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026b7e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0026b81:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0026b84:	31 c0                	xor    eax,eax
c0026b86:	01 f1                	add    ecx,esi
c0026b88:	0f 92 c0             	setb   al
c0026b8b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0026b8e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0026b91:	83 d6 00             	adc    esi,0x0
c0026b94:	01 c7                	add    edi,eax
c0026b96:	83 d6 00             	adc    esi,0x0
c0026b99:	01 ca                	add    edx,ecx
c0026b9b:	0f 92 c1             	setb   cl
c0026b9e:	0f b6 c9             	movzx  ecx,cl
c0026ba1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0026ba4:	83 d6 00             	adc    esi,0x0
c0026ba7:	01 cf                	add    edi,ecx
c0026ba9:	83 d6 00             	adc    esi,0x0
c0026bac:	31 c9                	xor    ecx,ecx
c0026bae:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0026bb1:	0f 95 c1             	setne  cl
c0026bb4:	09 cf                	or     edi,ecx
c0026bb6:	85 f6                	test   esi,esi
c0026bb8:	78 0c                	js     c0026bc6 <__muldf3+0x1f6>
c0026bba:	01 f6                	add    esi,esi
c0026bbc:	89 f8                	mov    eax,edi
c0026bbe:	c1 e8 1f             	shr    eax,0x1f
c0026bc1:	09 c6                	or     esi,eax
c0026bc3:	01 ff                	add    edi,edi
c0026bc5:	4b                   	dec    ebx
c0026bc6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0026bcc:	0f 8f 85 00 00 00    	jg     c0026c57 <__muldf3+0x287>
c0026bd2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0026bd8:	85 db                	test   ebx,ebx
c0026bda:	0f 8f 84 00 00 00    	jg     c0026c64 <__muldf3+0x294>
c0026be0:	83 fb cc             	cmp    ebx,0xffffffcc
c0026be3:	7c 79                	jl     c0026c5e <__muldf3+0x28e>
c0026be5:	ba 01 00 00 00       	mov    edx,0x1
c0026bea:	29 da                	sub    edx,ebx
c0026bec:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026bf2:	83 fa 1f             	cmp    edx,0x1f
c0026bf5:	7e 30                	jle    c0026c27 <__muldf3+0x257>
c0026bf7:	83 fa 20             	cmp    edx,0x20
c0026bfa:	75 0b                	jne    c0026c07 <__muldf3+0x237>
c0026bfc:	31 c0                	xor    eax,eax
c0026bfe:	85 ff                	test   edi,edi
c0026c00:	0f 95 c0             	setne  al
c0026c03:	89 c7                	mov    edi,eax
c0026c05:	eb 1a                	jmp    c0026c21 <__muldf3+0x251>
c0026c07:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0026c0a:	89 f0                	mov    eax,esi
c0026c0c:	d3 e0                	shl    eax,cl
c0026c0e:	09 f8                	or     eax,edi
c0026c10:	0f 95 c0             	setne  al
c0026c13:	0f b6 c0             	movzx  eax,al
c0026c16:	89 c7                	mov    edi,eax
c0026c18:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026c1d:	29 d9                	sub    ecx,ebx
c0026c1f:	d3 ee                	shr    esi,cl
c0026c21:	09 f7                	or     edi,esi
c0026c23:	31 db                	xor    ebx,ebx
c0026c25:	eb 3b                	jmp    c0026c62 <__muldf3+0x292>
c0026c27:	83 c3 1f             	add    ebx,0x1f
c0026c2a:	89 f0                	mov    eax,esi
c0026c2c:	88 d9                	mov    cl,bl
c0026c2e:	d3 e0                	shl    eax,cl
c0026c30:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026c33:	89 f8                	mov    eax,edi
c0026c35:	88 d1                	mov    cl,dl
c0026c37:	d3 e8                	shr    eax,cl
c0026c39:	89 c1                	mov    ecx,eax
c0026c3b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026c3e:	09 c8                	or     eax,ecx
c0026c40:	88 d9                	mov    cl,bl
c0026c42:	d3 e7                	shl    edi,cl
c0026c44:	31 db                	xor    ebx,ebx
c0026c46:	85 ff                	test   edi,edi
c0026c48:	0f 95 c3             	setne  bl
c0026c4b:	89 df                	mov    edi,ebx
c0026c4d:	09 c7                	or     edi,eax
c0026c4f:	88 d1                	mov    cl,dl
c0026c51:	d3 ee                	shr    esi,cl
c0026c53:	31 db                	xor    ebx,ebx
c0026c55:	eb 0d                	jmp    c0026c64 <__muldf3+0x294>
c0026c57:	bb ff 07 00 00       	mov    ebx,0x7ff
c0026c5c:	eb 02                	jmp    c0026c60 <__muldf3+0x290>
c0026c5e:	31 db                	xor    ebx,ebx
c0026c60:	31 ff                	xor    edi,edi
c0026c62:	31 f6                	xor    esi,esi
c0026c64:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026c67:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0026c6a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0026c6f:	09 c3                	or     ebx,eax
c0026c71:	c1 e3 14             	shl    ebx,0x14
c0026c74:	89 f0                	mov    eax,esi
c0026c76:	c1 e8 0b             	shr    eax,0xb
c0026c79:	09 c3                	or     ebx,eax
c0026c7b:	89 f8                	mov    eax,edi
c0026c7d:	c1 e8 0b             	shr    eax,0xb
c0026c80:	c1 e6 15             	shl    esi,0x15
c0026c83:	09 c6                	or     esi,eax
c0026c85:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0026c8b:	0f 95 c1             	setne  cl
c0026c8e:	09 c8                	or     eax,ecx
c0026c90:	83 e0 01             	and    eax,0x1
c0026c93:	c1 ef 0a             	shr    edi,0xa
c0026c96:	21 c7                	and    edi,eax
c0026c98:	01 f7                	add    edi,esi
c0026c9a:	83 d3 00             	adc    ebx,0x0
c0026c9d:	89 da                	mov    edx,ebx
c0026c9f:	eb 03                	jmp    c0026ca4 <__muldf3+0x2d4>
c0026ca1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0026ca4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026ca7:	89 f8                	mov    eax,edi
c0026ca9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026cac:	83 c4 24             	add    esp,0x24
c0026caf:	5b                   	pop    ebx
c0026cb0:	5e                   	pop    esi
c0026cb1:	5f                   	pop    edi
c0026cb2:	5d                   	pop    ebp
c0026cb3:	c3                   	ret    

c0026cb4 <__divdf3>:
c0026cb4:	55                   	push   ebp
c0026cb5:	89 e5                	mov    ebp,esp
c0026cb7:	57                   	push   edi
c0026cb8:	56                   	push   esi
c0026cb9:	53                   	push   ebx
c0026cba:	83 ec 2c             	sub    esp,0x2c
c0026cbd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026cc0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026cc3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026cc6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026cc9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026ccc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026ccf:	89 ce                	mov    esi,ecx
c0026cd1:	89 c8                	mov    eax,ecx
c0026cd3:	c1 f8 14             	sar    eax,0x14
c0026cd6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026cd9:	89 f8                	mov    eax,edi
c0026cdb:	89 fb                	mov    ebx,edi
c0026cdd:	c1 e3 0b             	shl    ebx,0xb
c0026ce0:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0026ce3:	c1 e6 0b             	shl    esi,0xb
c0026ce6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0026cec:	c1 e8 15             	shr    eax,0x15
c0026cef:	09 c6                	or     esi,eax
c0026cf1:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0026cf4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026cf7:	89 c2                	mov    edx,eax
c0026cf9:	c1 fa 14             	sar    edx,0x14
c0026cfc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0026cff:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0026d02:	89 de                	mov    esi,ebx
c0026d04:	c1 e6 0b             	shl    esi,0xb
c0026d07:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0026d0a:	c1 e0 0b             	shl    eax,0xb
c0026d0d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026d12:	c1 eb 15             	shr    ebx,0x15
c0026d15:	09 d8                	or     eax,ebx
c0026d17:	89 c2                	mov    edx,eax
c0026d19:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026d1c:	25 ff 07 00 00       	and    eax,0x7ff
c0026d21:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026d24:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026d27:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026d2d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0026d30:	29 d8                	sub    eax,ebx
c0026d32:	05 ff 03 00 00       	add    eax,0x3ff
c0026d37:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026d3a:	46                   	inc    esi
c0026d3b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026d41:	0f 85 a5 00 00 00    	jne    c0026dec <__divdf3+0x138>
c0026d47:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026d4a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0026d4d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0026d51:	74 2a                	je     c0026d7d <__divdf3+0xc9>
c0026d53:	85 f6                	test   esi,esi
c0026d55:	0f 85 cc 02 00 00    	jne    c0027027 <__divdf3+0x373>
c0026d5b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026d5e:	40                   	inc    eax
c0026d5f:	a9 fe 07 00 00       	test   eax,0x7fe
c0026d64:	75 26                	jne    c0026d8c <__divdf3+0xd8>
c0026d66:	85 db                	test   ebx,ebx
c0026d68:	74 22                	je     c0026d8c <__divdf3+0xd8>
c0026d6a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026d6d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026d70:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026d73:	09 d0                	or     eax,edx
c0026d75:	0f 85 ac 02 00 00    	jne    c0027027 <__divdf3+0x373>
c0026d7b:	eb 63                	jmp    c0026de0 <__divdf3+0x12c>
c0026d7d:	85 f6                	test   esi,esi
c0026d7f:	75 22                	jne    c0026da3 <__divdf3+0xef>
c0026d81:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026d84:	40                   	inc    eax
c0026d85:	a9 fe 07 00 00       	test   eax,0x7fe
c0026d8a:	74 36                	je     c0026dc2 <__divdf3+0x10e>
c0026d8c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d90:	0f 89 91 02 00 00    	jns    c0027027 <__divdf3+0x373>
c0026d96:	89 f8                	mov    eax,edi
c0026d98:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0026d9e:	e9 80 02 00 00       	jmp    c0027023 <__divdf3+0x36f>
c0026da3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026da6:	01 f6                	add    esi,esi
c0026da8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026dab:	c1 ef 1f             	shr    edi,0x1f
c0026dae:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026db1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0026db4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0026db7:	09 f7                	or     edi,esi
c0026db9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0026dbc:	78 2e                	js     c0026dec <__divdf3+0x138>
c0026dbe:	89 c8                	mov    eax,ecx
c0026dc0:	eb e1                	jmp    c0026da3 <__divdf3+0xef>
c0026dc2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026dc5:	09 d0                	or     eax,edx
c0026dc7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026dcb:	74 0f                	je     c0026ddc <__divdf3+0x128>
c0026dcd:	85 c0                	test   eax,eax
c0026dcf:	74 bb                	je     c0026d8c <__divdf3+0xd8>
c0026dd1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026dd4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026dd7:	e9 4b 02 00 00       	jmp    c0027027 <__divdf3+0x373>
c0026ddc:	85 c0                	test   eax,eax
c0026dde:	75 ac                	jne    c0026d8c <__divdf3+0xd8>
c0026de0:	31 ff                	xor    edi,edi
c0026de2:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026de7:	e9 3b 02 00 00       	jmp    c0027027 <__divdf3+0x373>
c0026dec:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026def:	8d 4f 01             	lea    ecx,[edi+0x1]
c0026df2:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0026df8:	75 6b                	jne    c0026e65 <__divdf3+0x1b1>
c0026dfa:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026dfd:	09 d6                	or     esi,edx
c0026dff:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026e03:	74 28                	je     c0026e2d <__divdf3+0x179>
c0026e05:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026e08:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026e0b:	85 f6                	test   esi,esi
c0026e0d:	0f 85 14 02 00 00    	jne    c0027027 <__divdf3+0x373>
c0026e13:	31 ff                	xor    edi,edi
c0026e15:	31 c9                	xor    ecx,ecx
c0026e17:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026e1a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026e1d:	0f 89 04 02 00 00    	jns    c0027027 <__divdf3+0x373>
c0026e23:	b9 00 00 00 80       	mov    ecx,0x80000000
c0026e28:	e9 fa 01 00 00       	jmp    c0027027 <__divdf3+0x373>
c0026e2d:	85 f6                	test   esi,esi
c0026e2f:	75 1b                	jne    c0026e4c <__divdf3+0x198>
c0026e31:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026e34:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026e37:	25 00 00 00 80       	and    eax,0x80000000
c0026e3c:	31 c9                	xor    ecx,ecx
c0026e3e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0026e43:	89 cf                	mov    edi,ecx
c0026e45:	89 c1                	mov    ecx,eax
c0026e47:	e9 db 01 00 00       	jmp    c0027027 <__divdf3+0x373>
c0026e4c:	01 d2                	add    edx,edx
c0026e4e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026e51:	c1 eb 1f             	shr    ebx,0x1f
c0026e54:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026e57:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0026e5a:	8d 48 01             	lea    ecx,[eax+0x1]
c0026e5d:	09 da                	or     edx,ebx
c0026e5f:	78 04                	js     c0026e65 <__divdf3+0x1b1>
c0026e61:	89 c8                	mov    eax,ecx
c0026e63:	eb e7                	jmp    c0026e4c <__divdf3+0x198>
c0026e65:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026e68:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026e6e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e74:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0026e77:	39 d6                	cmp    esi,edx
c0026e79:	77 0d                	ja     c0026e88 <__divdf3+0x1d4>
c0026e7b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026e7e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0026e81:	72 1b                	jb     c0026e9e <__divdf3+0x1ea>
c0026e83:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0026e86:	75 16                	jne    c0026e9e <__divdf3+0x1ea>
c0026e88:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026e8b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026e8e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0026e91:	83 de 00             	sbb    esi,0x0
c0026e94:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0026e97:	ba 01 00 00 00       	mov    edx,0x1
c0026e9c:	eb 02                	jmp    c0026ea0 <__divdf3+0x1ec>
c0026e9e:	31 d2                	xor    edx,edx
c0026ea0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0026ea7:	31 ff                	xor    edi,edi
c0026ea9:	01 ff                	add    edi,edi
c0026eab:	89 d1                	mov    ecx,edx
c0026ead:	c1 e9 1f             	shr    ecx,0x1f
c0026eb0:	09 cf                	or     edi,ecx
c0026eb2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0026eb5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0026eb8:	89 da                	mov    edx,ebx
c0026eba:	89 f3                	mov    ebx,esi
c0026ebc:	8d 34 36             	lea    esi,[esi+esi*1]
c0026ebf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ec2:	c1 e9 1f             	shr    ecx,0x1f
c0026ec5:	09 ce                	or     esi,ecx
c0026ec7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026eca:	01 c9                	add    ecx,ecx
c0026ecc:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0026ecf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026ed2:	85 db                	test   ebx,ebx
c0026ed4:	78 29                	js     c0026eff <__divdf3+0x24b>
c0026ed6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0026ed9:	72 07                	jb     c0026ee2 <__divdf3+0x22e>
c0026edb:	75 3c                	jne    c0026f19 <__divdf3+0x265>
c0026edd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026ee0:	77 37                	ja     c0026f19 <__divdf3+0x265>
c0026ee2:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026ee5:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0026ee8:	31 d2                	xor    edx,edx
c0026eea:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0026eed:	0f 97 c2             	seta   dl
c0026ef0:	29 d6                	sub    esi,edx
c0026ef2:	89 d9                	mov    ecx,ebx
c0026ef4:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0026ef7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026efa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026efd:	eb 17                	jmp    c0026f16 <__divdf3+0x262>
c0026eff:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026f02:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026f05:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026f08:	0f 97 c1             	seta   cl
c0026f0b:	0f b6 c9             	movzx  ecx,cl
c0026f0e:	29 ce                	sub    esi,ecx
c0026f10:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0026f13:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0026f16:	83 ca 01             	or     edx,0x1
c0026f19:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0026f1c:	75 8b                	jne    c0026ea9 <__divdf3+0x1f5>
c0026f1e:	c1 e7 09             	shl    edi,0x9
c0026f21:	89 d1                	mov    ecx,edx
c0026f23:	c1 e9 17             	shr    ecx,0x17
c0026f26:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026f29:	09 f3                	or     ebx,esi
c0026f2b:	0f 95 c3             	setne  bl
c0026f2e:	0f b6 db             	movzx  ebx,bl
c0026f31:	c1 e2 09             	shl    edx,0x9
c0026f34:	09 d3                	or     ebx,edx
c0026f36:	89 ca                	mov    edx,ecx
c0026f38:	09 fa                	or     edx,edi
c0026f3a:	78 0c                	js     c0026f48 <__divdf3+0x294>
c0026f3c:	01 d2                	add    edx,edx
c0026f3e:	89 d9                	mov    ecx,ebx
c0026f40:	c1 e9 1f             	shr    ecx,0x1f
c0026f43:	09 ca                	or     edx,ecx
c0026f45:	01 db                	add    ebx,ebx
c0026f47:	48                   	dec    eax
c0026f48:	3d fe 07 00 00       	cmp    eax,0x7fe
c0026f4d:	0f 8f 83 00 00 00    	jg     c0026fd6 <__divdf3+0x322>
c0026f53:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026f59:	85 c0                	test   eax,eax
c0026f5b:	0f 8f 82 00 00 00    	jg     c0026fe3 <__divdf3+0x32f>
c0026f61:	83 f8 cc             	cmp    eax,0xffffffcc
c0026f64:	7c 77                	jl     c0026fdd <__divdf3+0x329>
c0026f66:	be 01 00 00 00       	mov    esi,0x1
c0026f6b:	29 c6                	sub    esi,eax
c0026f6d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026f73:	83 fe 1f             	cmp    esi,0x1f
c0026f76:	7e 2f                	jle    c0026fa7 <__divdf3+0x2f3>
c0026f78:	83 fe 20             	cmp    esi,0x20
c0026f7b:	75 0a                	jne    c0026f87 <__divdf3+0x2d3>
c0026f7d:	85 db                	test   ebx,ebx
c0026f7f:	0f 95 c3             	setne  bl
c0026f82:	0f b6 db             	movzx  ebx,bl
c0026f85:	eb 1a                	jmp    c0026fa1 <__divdf3+0x2ed>
c0026f87:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0026f8a:	89 d7                	mov    edi,edx
c0026f8c:	d3 e7                	shl    edi,cl
c0026f8e:	89 f9                	mov    ecx,edi
c0026f90:	09 d9                	or     ecx,ebx
c0026f92:	0f 95 c3             	setne  bl
c0026f95:	0f b6 db             	movzx  ebx,bl
c0026f98:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026f9d:	29 c1                	sub    ecx,eax
c0026f9f:	d3 ea                	shr    edx,cl
c0026fa1:	09 d3                	or     ebx,edx
c0026fa3:	31 c0                	xor    eax,eax
c0026fa5:	eb 3a                	jmp    c0026fe1 <__divdf3+0x32d>
c0026fa7:	83 c0 1f             	add    eax,0x1f
c0026faa:	89 d7                	mov    edi,edx
c0026fac:	88 c1                	mov    cl,al
c0026fae:	d3 e7                	shl    edi,cl
c0026fb0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026fb3:	89 df                	mov    edi,ebx
c0026fb5:	89 f1                	mov    ecx,esi
c0026fb7:	d3 ef                	shr    edi,cl
c0026fb9:	89 f9                	mov    ecx,edi
c0026fbb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026fbe:	09 cf                	or     edi,ecx
c0026fc0:	88 c1                	mov    cl,al
c0026fc2:	d3 e3                	shl    ebx,cl
c0026fc4:	85 db                	test   ebx,ebx
c0026fc6:	0f 95 c3             	setne  bl
c0026fc9:	0f b6 db             	movzx  ebx,bl
c0026fcc:	09 fb                	or     ebx,edi
c0026fce:	89 f1                	mov    ecx,esi
c0026fd0:	d3 ea                	shr    edx,cl
c0026fd2:	31 c0                	xor    eax,eax
c0026fd4:	eb 0d                	jmp    c0026fe3 <__divdf3+0x32f>
c0026fd6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0026fdb:	eb 02                	jmp    c0026fdf <__divdf3+0x32b>
c0026fdd:	31 c0                	xor    eax,eax
c0026fdf:	31 db                	xor    ebx,ebx
c0026fe1:	31 d2                	xor    edx,edx
c0026fe3:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026fe6:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026fe9:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0026fef:	09 c8                	or     eax,ecx
c0026ff1:	c1 e0 14             	shl    eax,0x14
c0026ff4:	89 d1                	mov    ecx,edx
c0026ff6:	c1 e9 0b             	shr    ecx,0xb
c0026ff9:	09 c8                	or     eax,ecx
c0026ffb:	89 c6                	mov    esi,eax
c0026ffd:	89 d9                	mov    ecx,ebx
c0026fff:	c1 e9 0b             	shr    ecx,0xb
c0027002:	c1 e2 15             	shl    edx,0x15
c0027005:	09 ca                	or     edx,ecx
c0027007:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c002700d:	0f 95 c0             	setne  al
c0027010:	09 c1                	or     ecx,eax
c0027012:	83 e1 01             	and    ecx,0x1
c0027015:	c1 eb 0a             	shr    ebx,0xa
c0027018:	21 cb                	and    ebx,ecx
c002701a:	01 d3                	add    ebx,edx
c002701c:	89 d8                	mov    eax,ebx
c002701e:	83 d6 00             	adc    esi,0x0
c0027021:	89 f2                	mov    edx,esi
c0027023:	89 c7                	mov    edi,eax
c0027025:	89 d1                	mov    ecx,edx
c0027027:	89 f8                	mov    eax,edi
c0027029:	89 ca                	mov    edx,ecx
c002702b:	83 c4 2c             	add    esp,0x2c
c002702e:	5b                   	pop    ebx
c002702f:	5e                   	pop    esi
c0027030:	5f                   	pop    edi
c0027031:	5d                   	pop    ebp
c0027032:	c3                   	ret    

c0027033 <__floatsidf>:
c0027033:	55                   	push   ebp
c0027034:	89 e5                	mov    ebp,esp
c0027036:	56                   	push   esi
c0027037:	53                   	push   ebx
c0027038:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002703b:	85 db                	test   ebx,ebx
c002703d:	7e 15                	jle    c0027054 <__floatsidf+0x21>
c002703f:	0f bd cb             	bsr    ecx,ebx
c0027042:	83 f1 1f             	xor    ecx,0x1f
c0027045:	d3 e3                	shl    ebx,cl
c0027047:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c002704d:	b8 1e 04 00 00       	mov    eax,0x41e
c0027052:	eb 21                	jmp    c0027075 <__floatsidf+0x42>
c0027054:	b8 00 00 00 00       	mov    eax,0x0
c0027059:	ba 00 00 00 00       	mov    edx,0x0
c002705e:	74 2a                	je     c002708a <__floatsidf+0x57>
c0027060:	f7 db                	neg    ebx
c0027062:	0f bd cb             	bsr    ecx,ebx
c0027065:	83 f1 1f             	xor    ecx,0x1f
c0027068:	d3 e3                	shl    ebx,cl
c002706a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027070:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027075:	29 c8                	sub    eax,ecx
c0027077:	c1 e0 14             	shl    eax,0x14
c002707a:	89 c1                	mov    ecx,eax
c002707c:	89 de                	mov    esi,ebx
c002707e:	c1 ee 0b             	shr    esi,0xb
c0027081:	09 f1                	or     ecx,esi
c0027083:	89 ca                	mov    edx,ecx
c0027085:	c1 e3 15             	shl    ebx,0x15
c0027088:	89 d8                	mov    eax,ebx
c002708a:	5b                   	pop    ebx
c002708b:	5e                   	pop    esi
c002708c:	5d                   	pop    ebp
c002708d:	c3                   	ret    

c002708e <__floatunsidf>:
c002708e:	55                   	push   ebp
c002708f:	89 e5                	mov    ebp,esp
c0027091:	56                   	push   esi
c0027092:	53                   	push   ebx
c0027093:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027096:	85 db                	test   ebx,ebx
c0027098:	74 2a                	je     c00270c4 <__floatunsidf+0x36>
c002709a:	0f bd cb             	bsr    ecx,ebx
c002709d:	83 f1 1f             	xor    ecx,0x1f
c00270a0:	d3 e3                	shl    ebx,cl
c00270a2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00270a8:	b8 1e 04 00 00       	mov    eax,0x41e
c00270ad:	29 c8                	sub    eax,ecx
c00270af:	c1 e0 14             	shl    eax,0x14
c00270b2:	89 c1                	mov    ecx,eax
c00270b4:	89 de                	mov    esi,ebx
c00270b6:	c1 ee 0b             	shr    esi,0xb
c00270b9:	09 f1                	or     ecx,esi
c00270bb:	89 ca                	mov    edx,ecx
c00270bd:	c1 e3 15             	shl    ebx,0x15
c00270c0:	89 d8                	mov    eax,ebx
c00270c2:	eb 04                	jmp    c00270c8 <__floatunsidf+0x3a>
c00270c4:	31 c0                	xor    eax,eax
c00270c6:	31 d2                	xor    edx,edx
c00270c8:	5b                   	pop    ebx
c00270c9:	5e                   	pop    esi
c00270ca:	5d                   	pop    ebp
c00270cb:	c3                   	ret    

c00270cc <__fixdfsi>:
c00270cc:	55                   	push   ebp
c00270cd:	89 e5                	mov    ebp,esp
c00270cf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00270d2:	89 d1                	mov    ecx,edx
c00270d4:	c1 e1 0b             	shl    ecx,0xb
c00270d7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00270dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00270e0:	c1 e8 15             	shr    eax,0x15
c00270e3:	09 c1                	or     ecx,eax
c00270e5:	c1 fa 14             	sar    edx,0x14
c00270e8:	78 1f                	js     c0027109 <__fixdfsi+0x3d>
c00270ea:	81 ea ff 03 00 00    	sub    edx,0x3ff
c00270f0:	31 c0                	xor    eax,eax
c00270f2:	83 fa 1e             	cmp    edx,0x1e
c00270f5:	77 40                	ja     c0027137 <__fixdfsi+0x6b>
c00270f7:	89 c8                	mov    eax,ecx
c00270f9:	0d 00 00 00 80       	or     eax,0x80000000
c00270fe:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027103:	29 d1                	sub    ecx,edx
c0027105:	d3 e8                	shr    eax,cl
c0027107:	eb 2e                	jmp    c0027137 <__fixdfsi+0x6b>
c0027109:	31 c0                	xor    eax,eax
c002710b:	81 c2 01 04 00 00    	add    edx,0x401
c0027111:	78 24                	js     c0027137 <__fixdfsi+0x6b>
c0027113:	83 fa 1e             	cmp    edx,0x1e
c0027116:	7e 09                	jle    c0027121 <__fixdfsi+0x55>
c0027118:	83 fa 1f             	cmp    edx,0x1f
c002711b:	75 18                	jne    c0027135 <__fixdfsi+0x69>
c002711d:	85 c9                	test   ecx,ecx
c002711f:	75 14                	jne    c0027135 <__fixdfsi+0x69>
c0027121:	89 c8                	mov    eax,ecx
c0027123:	0d 00 00 00 80       	or     eax,0x80000000
c0027128:	b9 1f 00 00 00       	mov    ecx,0x1f
c002712d:	29 d1                	sub    ecx,edx
c002712f:	d3 e8                	shr    eax,cl
c0027131:	f7 d8                	neg    eax
c0027133:	eb 02                	jmp    c0027137 <__fixdfsi+0x6b>
c0027135:	31 c0                	xor    eax,eax
c0027137:	5d                   	pop    ebp
c0027138:	c3                   	ret    

c0027139 <__fixunsdfsi>:
c0027139:	55                   	push   ebp
c002713a:	89 e5                	mov    ebp,esp
c002713c:	53                   	push   ebx
c002713d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027140:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027143:	89 d3                	mov    ebx,edx
c0027145:	c1 fb 14             	sar    ebx,0x14
c0027148:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c002714e:	31 c0                	xor    eax,eax
c0027150:	83 fb 1f             	cmp    ebx,0x1f
c0027153:	77 1d                	ja     c0027172 <__fixunsdfsi+0x39>
c0027155:	89 d0                	mov    eax,edx
c0027157:	c1 e0 0b             	shl    eax,0xb
c002715a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002715f:	c1 e9 15             	shr    ecx,0x15
c0027162:	09 c8                	or     eax,ecx
c0027164:	0d 00 00 00 80       	or     eax,0x80000000
c0027169:	b9 1f 00 00 00       	mov    ecx,0x1f
c002716e:	29 d9                	sub    ecx,ebx
c0027170:	d3 e8                	shr    eax,cl
c0027172:	5b                   	pop    ebx
c0027173:	5d                   	pop    ebp
c0027174:	c3                   	ret    

c0027175 <__cmpdf2>:
c0027175:	55                   	push   ebp
c0027176:	89 e5                	mov    ebp,esp
c0027178:	57                   	push   edi
c0027179:	56                   	push   esi
c002717a:	53                   	push   ebx
c002717b:	83 ec 0c             	sub    esp,0xc
c002717e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027181:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027184:	89 ca                	mov    edx,ecx
c0027186:	c1 ea 14             	shr    edx,0x14
c0027189:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002718f:	89 cb                	mov    ebx,ecx
c0027191:	c1 fb 1f             	sar    ebx,0x1f
c0027194:	31 da                	xor    edx,ebx
c0027196:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027199:	89 df                	mov    edi,ebx
c002719b:	c1 e7 0b             	shl    edi,0xb
c002719e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00271a1:	c1 e1 0b             	shl    ecx,0xb
c00271a4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00271aa:	c1 eb 15             	shr    ebx,0x15
c00271ad:	09 d9                	or     ecx,ebx
c00271af:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00271b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00271b5:	89 ce                	mov    esi,ecx
c00271b7:	c1 ee 14             	shr    esi,0x14
c00271ba:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00271c0:	89 cb                	mov    ebx,ecx
c00271c2:	c1 fb 1f             	sar    ebx,0x1f
c00271c5:	31 de                	xor    esi,ebx
c00271c7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00271ca:	89 df                	mov    edi,ebx
c00271cc:	c1 e7 0b             	shl    edi,0xb
c00271cf:	c1 e1 0b             	shl    ecx,0xb
c00271d2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00271d8:	c1 eb 15             	shr    ebx,0x15
c00271db:	09 d9                	or     ecx,ebx
c00271dd:	89 d3                	mov    ebx,edx
c00271df:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00271e5:	43                   	inc    ebx
c00271e6:	83 fb 01             	cmp    ebx,0x1
c00271e9:	77 08                	ja     c00271f3 <__cmpdf2+0x7e>
c00271eb:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00271ee:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00271f1:	75 68                	jne    c002725b <__cmpdf2+0xe6>
c00271f3:	89 f3                	mov    ebx,esi
c00271f5:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c00271fb:	43                   	inc    ebx
c00271fc:	83 fb 01             	cmp    ebx,0x1
c00271ff:	77 06                	ja     c0027207 <__cmpdf2+0x92>
c0027201:	89 fb                	mov    ebx,edi
c0027203:	09 cb                	or     ebx,ecx
c0027205:	75 54                	jne    c002725b <__cmpdf2+0xe6>
c0027207:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002720a:	09 f8                	or     eax,edi
c002720c:	09 c8                	or     eax,ecx
c002720e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027211:	75 12                	jne    c0027225 <__cmpdf2+0xb0>
c0027213:	8d 42 01             	lea    eax,[edx+0x1]
c0027216:	83 f8 01             	cmp    eax,0x1
c0027219:	77 0a                	ja     c0027225 <__cmpdf2+0xb0>
c002721b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002721e:	31 c0                	xor    eax,eax
c0027220:	83 fb 01             	cmp    ebx,0x1
c0027223:	76 36                	jbe    c002725b <__cmpdf2+0xe6>
c0027225:	b8 01 00 00 00       	mov    eax,0x1
c002722a:	39 f2                	cmp    edx,esi
c002722c:	7f 2d                	jg     c002725b <__cmpdf2+0xe6>
c002722e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027233:	7c 26                	jl     c002725b <__cmpdf2+0xe6>
c0027235:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027238:	77 07                	ja     c0027241 <__cmpdf2+0xcc>
c002723a:	72 16                	jb     c0027252 <__cmpdf2+0xdd>
c002723c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002723f:	76 0a                	jbe    c002724b <__cmpdf2+0xd6>
c0027241:	89 d0                	mov    eax,edx
c0027243:	c1 f8 1f             	sar    eax,0x1f
c0027246:	83 c8 01             	or     eax,0x1
c0027249:	eb 10                	jmp    c002725b <__cmpdf2+0xe6>
c002724b:	b8 00 00 00 00       	mov    eax,0x0
c0027250:	73 09                	jae    c002725b <__cmpdf2+0xe6>
c0027252:	89 d0                	mov    eax,edx
c0027254:	c1 f8 1f             	sar    eax,0x1f
c0027257:	83 e0 02             	and    eax,0x2
c002725a:	48                   	dec    eax
c002725b:	83 c4 0c             	add    esp,0xc
c002725e:	5b                   	pop    ebx
c002725f:	5e                   	pop    esi
c0027260:	5f                   	pop    edi
c0027261:	5d                   	pop    ebp
c0027262:	c3                   	ret    

c0027263 <__eqdf2>:
c0027263:	55                   	push   ebp
c0027264:	89 e5                	mov    ebp,esp
c0027266:	50                   	push   eax
c0027267:	6a 01                	push   0x1
c0027269:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002726c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002726f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027272:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027275:	e8 fb fe ff ff       	call   c0027175 <__cmpdf2>
c002727a:	83 c4 18             	add    esp,0x18
c002727d:	c9                   	leave  
c002727e:	c3                   	ret    

c002727f <__nedf2>:
c002727f:	eb e2                	jmp    c0027263 <__eqdf2>

c0027281 <__gtdf2>:
c0027281:	55                   	push   ebp
c0027282:	89 e5                	mov    ebp,esp
c0027284:	50                   	push   eax
c0027285:	6a ff                	push   0xffffffff
c0027287:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002728a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002728d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027290:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027293:	e8 dd fe ff ff       	call   c0027175 <__cmpdf2>
c0027298:	83 c4 18             	add    esp,0x18
c002729b:	c9                   	leave  
c002729c:	c3                   	ret    

c002729d <__gedf2>:
c002729d:	eb e2                	jmp    c0027281 <__gtdf2>

c002729f <__ltdf2>:
c002729f:	eb c2                	jmp    c0027263 <__eqdf2>

c00272a1 <__ledf2>:
c00272a1:	eb c0                	jmp    c0027263 <__eqdf2>

c00272a3 <__truncdfsf2>:
c00272a3:	55                   	push   ebp
c00272a4:	89 e5                	mov    ebp,esp
c00272a6:	57                   	push   edi
c00272a7:	56                   	push   esi
c00272a8:	53                   	push   ebx
c00272a9:	83 ec 0c             	sub    esp,0xc
c00272ac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00272af:	89 d1                	mov    ecx,edx
c00272b1:	c1 f9 14             	sar    ecx,0x14
c00272b4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00272b7:	89 df                	mov    edi,ebx
c00272b9:	c1 e7 0b             	shl    edi,0xb
c00272bc:	89 d0                	mov    eax,edx
c00272be:	c1 e0 0b             	shl    eax,0xb
c00272c1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00272c6:	c1 eb 15             	shr    ebx,0x15
c00272c9:	09 d8                	or     eax,ebx
c00272cb:	89 cb                	mov    ebx,ecx
c00272cd:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00272d3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00272d9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00272df:	0f 86 9e 00 00 00    	jbe    c0027383 <__truncdfsf2+0xe0>
c00272e5:	85 db                	test   ebx,ebx
c00272e7:	75 0a                	jne    c00272f3 <__truncdfsf2+0x50>
c00272e9:	c1 fa 17             	sar    edx,0x17
c00272ec:	30 d2                	xor    dl,dl
c00272ee:	e9 84 00 00 00       	jmp    c0027377 <__truncdfsf2+0xd4>
c00272f3:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c00272f9:	83 fe 83             	cmp    esi,0xffffff83
c00272fc:	7d 4b                	jge    c0027349 <__truncdfsf2+0xa6>
c00272fe:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0027303:	29 f1                	sub    ecx,esi
c0027305:	83 f9 1f             	cmp    ecx,0x1f
c0027308:	7f 6b                	jg     c0027375 <__truncdfsf2+0xd2>
c002730a:	0d 00 00 00 80       	or     eax,0x80000000
c002730f:	89 c3                	mov    ebx,eax
c0027311:	d3 eb                	shr    ebx,cl
c0027313:	be 01 00 00 00       	mov    esi,0x1
c0027318:	d3 e6                	shl    esi,cl
c002731a:	4e                   	dec    esi
c002731b:	21 f0                	and    eax,esi
c002731d:	09 f8                	or     eax,edi
c002731f:	0f 95 c0             	setne  al
c0027322:	0f b6 c0             	movzx  eax,al
c0027325:	09 c3                	or     ebx,eax
c0027327:	89 d9                	mov    ecx,ebx
c0027329:	c1 e9 08             	shr    ecx,0x8
c002732c:	f6 c3 7f             	test   bl,0x7f
c002732f:	0f 95 c0             	setne  al
c0027332:	09 c8                	or     eax,ecx
c0027334:	83 e0 01             	and    eax,0x1
c0027337:	c1 eb 07             	shr    ebx,0x7
c002733a:	21 c3                	and    ebx,eax
c002733c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0027342:	09 d1                	or     ecx,edx
c0027344:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0027347:	eb 76                	jmp    c00273bf <__truncdfsf2+0x11c>
c0027349:	83 c6 80             	add    esi,0xffffff80
c002734c:	7e 1d                	jle    c002736b <__truncdfsf2+0xc8>
c002734e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0027354:	75 0b                	jne    c0027361 <__truncdfsf2+0xbe>
c0027356:	09 f8                	or     eax,edi
c0027358:	74 09                	je     c0027363 <__truncdfsf2+0xc0>
c002735a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002735f:	eb 02                	jmp    c0027363 <__truncdfsf2+0xc0>
c0027361:	31 c0                	xor    eax,eax
c0027363:	c1 fa 17             	sar    edx,0x17
c0027366:	80 ca ff             	or     dl,0xff
c0027369:	eb 0e                	jmp    c0027379 <__truncdfsf2+0xd6>
c002736b:	c1 fa 1f             	sar    edx,0x1f
c002736e:	c1 e2 08             	shl    edx,0x8
c0027371:	09 ca                	or     edx,ecx
c0027373:	eb 04                	jmp    c0027379 <__truncdfsf2+0xd6>
c0027375:	31 d2                	xor    edx,edx
c0027377:	31 c0                	xor    eax,eax
c0027379:	c1 e2 17             	shl    edx,0x17
c002737c:	c1 e8 08             	shr    eax,0x8
c002737f:	09 d0                	or     eax,edx
c0027381:	eb 3c                	jmp    c00273bf <__truncdfsf2+0x11c>
c0027383:	81 e9 80 03 00 00    	sub    ecx,0x380
c0027389:	89 ca                	mov    edx,ecx
c002738b:	c1 fa 0b             	sar    edx,0xb
c002738e:	c1 e2 08             	shl    edx,0x8
c0027391:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027394:	31 db                	xor    ebx,ebx
c0027396:	85 ff                	test   edi,edi
c0027398:	0f 95 c3             	setne  bl
c002739b:	09 d8                	or     eax,ebx
c002739d:	89 c3                	mov    ebx,eax
c002739f:	c1 eb 08             	shr    ebx,0x8
c00273a2:	a8 7f                	test   al,0x7f
c00273a4:	0f 95 c2             	setne  dl
c00273a7:	89 d6                	mov    esi,edx
c00273a9:	09 de                	or     esi,ebx
c00273ab:	83 e6 01             	and    esi,0x1
c00273ae:	c1 e8 07             	shr    eax,0x7
c00273b1:	21 f0                	and    eax,esi
c00273b3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00273b6:	09 ca                	or     edx,ecx
c00273b8:	c1 e2 17             	shl    edx,0x17
c00273bb:	09 da                	or     edx,ebx
c00273bd:	01 d0                	add    eax,edx
c00273bf:	83 c4 0c             	add    esp,0xc
c00273c2:	5b                   	pop    ebx
c00273c3:	5e                   	pop    esi
c00273c4:	5f                   	pop    edi
c00273c5:	5d                   	pop    ebp
c00273c6:	c3                   	ret    

c00273c7 <__extendsfdf2>:
c00273c7:	55                   	push   ebp
c00273c8:	89 e5                	mov    ebp,esp
c00273ca:	57                   	push   edi
c00273cb:	56                   	push   esi
c00273cc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00273cf:	89 d1                	mov    ecx,edx
c00273d1:	c1 f9 17             	sar    ecx,0x17
c00273d4:	c1 e2 08             	shl    edx,0x8
c00273d7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00273dd:	89 c8                	mov    eax,ecx
c00273df:	80 e4 f8             	and    ah,0xf8
c00273e2:	8d 71 01             	lea    esi,[ecx+0x1]
c00273e5:	81 e6 fe 00 00 00    	and    esi,0xfe
c00273eb:	75 27                	jne    c0027414 <__extendsfdf2+0x4d>
c00273ed:	81 e1 ff 00 00 00    	and    ecx,0xff
c00273f3:	75 18                	jne    c002740d <__extendsfdf2+0x46>
c00273f5:	85 d2                	test   edx,edx
c00273f7:	74 20                	je     c0027419 <__extendsfdf2+0x52>
c00273f9:	41                   	inc    ecx
c00273fa:	01 d2                	add    edx,edx
c00273fc:	79 fb                	jns    c00273f9 <__extendsfdf2+0x32>
c00273fe:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027404:	29 c8                	sub    eax,ecx
c0027406:	05 81 03 00 00       	add    eax,0x381
c002740b:	eb 0c                	jmp    c0027419 <__extendsfdf2+0x52>
c002740d:	05 00 07 00 00       	add    eax,0x700
c0027412:	eb 05                	jmp    c0027419 <__extendsfdf2+0x52>
c0027414:	05 80 03 00 00       	add    eax,0x380
c0027419:	c1 e0 14             	shl    eax,0x14
c002741c:	89 c1                	mov    ecx,eax
c002741e:	89 d0                	mov    eax,edx
c0027420:	c1 e8 0b             	shr    eax,0xb
c0027423:	09 c1                	or     ecx,eax
c0027425:	c1 e2 15             	shl    edx,0x15
c0027428:	89 d0                	mov    eax,edx
c002742a:	89 ca                	mov    edx,ecx
c002742c:	5e                   	pop    esi
c002742d:	5f                   	pop    edi
c002742e:	5d                   	pop    ebp
c002742f:	c3                   	ret    

c0027430 <fabs>:
c0027430:	83 ec 0c             	sub    esp,0xc
c0027433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027437:	89 04 24             	mov    DWORD PTR [esp],eax
c002743a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002743e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027443:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027447:	dd 04 24             	fld    QWORD PTR [esp]
c002744a:	83 c4 0c             	add    esp,0xc
c002744d:	c3                   	ret    
c002744e:	66 90                	xchg   ax,ax

c0027450 <lrint>:
c0027450:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027454:	83 ec 04             	sub    esp,0x4
c0027457:	db 1c 24             	fistp  DWORD PTR [esp]
c002745a:	58                   	pop    eax
c002745b:	c3                   	ret    

c002745c <lrintf>:
c002745c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027460:	83 ec 04             	sub    esp,0x4
c0027463:	db 1c 24             	fistp  DWORD PTR [esp]
c0027466:	58                   	pop    eax
c0027467:	c3                   	ret    

Disassembly of section .init:

c0027468 <_init>:
c0027468:	55                   	push   ebp
c0027469:	89 e5                	mov    ebp,esp
c002746b:	e8 a8 8c fd ff       	call   c0000118 <frame_dummy>
c0027470:	e8 63 e0 ff ff       	call   c00254d8 <__do_global_ctors_aux>
c0027475:	5d                   	pop    ebp
c0027476:	c3                   	ret    

Disassembly of section .fini:

c0027477 <_fini>:
c0027477:	55                   	push   ebp
c0027478:	89 e5                	mov    ebp,esp
c002747a:	e8 29 8c fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002747f:	5d                   	pop    ebp
c0027480:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0027482 <Computer::~Computer()>:
c0027482:	83 ec 0c             	sub    esp,0xc
c0027485:	ba 68 8f 02 c0       	mov    edx,0xc0028f68
c002748a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002748e:	89 10                	mov    DWORD PTR [eax],edx
c0027490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027494:	83 ec 0c             	sub    esp,0xc
c0027497:	50                   	push   eax
c0027498:	e8 31 c7 fe ff       	call   c0013bce <Device::~Device()>
c002749d:	83 c4 10             	add    esp,0x10
c00274a0:	90                   	nop
c00274a1:	83 c4 0c             	add    esp,0xc
c00274a4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00274a6 <Computer::~Computer()>:
c00274a6:	83 ec 0c             	sub    esp,0xc
c00274a9:	83 ec 0c             	sub    esp,0xc
c00274ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00274b0:	e8 cd ff ff ff       	call   c0027482 <Computer::~Computer()>
c00274b5:	83 c4 10             	add    esp,0x10
c00274b8:	83 ec 08             	sub    esp,0x8
c00274bb:	68 ec 01 00 00       	push   0x1ec
c00274c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00274c4:	e8 2c b3 fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c00274c9:	83 c4 10             	add    esp,0x10
c00274cc:	83 c4 0c             	add    esp,0xc
c00274cf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00274d0 <idleCommon()>:
c00274d0:	83 ec 0c             	sub    esp,0xc
c00274d3:	e8 8c 5c ff ff       	call   c001d164 <lockScheduler()>
c00274d8:	e8 c3 5f ff ff       	call   c001d4a0 <schedule()>
c00274dd:	83 c4 0c             	add    esp,0xc
c00274e0:	e9 81 5c ff ff       	jmp    c001d166 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00274e6 <LinkedList<UnixFile>::~LinkedList()>:
c00274e6:	90                   	nop
c00274e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00274e8 <LinkedList<UnixFile>::LinkedList()>:
c00274e8:	83 ec 0c             	sub    esp,0xc
c00274eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00274f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027504:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002750b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002750f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027519:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027524:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002752b:	83 ec 0c             	sub    esp,0xc
c002752e:	68 f6 91 02 c0       	push   0xc00291f6
c0027533:	e8 9d b3 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0027538:	83 c4 10             	add    esp,0x10
c002753b:	90                   	nop
c002753c:	83 c4 0c             	add    esp,0xc
c002753f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027540 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027540:	83 ec 0c             	sub    esp,0xc
c0027543:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027548:	75 10                	jne    c002755a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002754a:	83 ec 0c             	sub    esp,0xc
c002754d:	68 10 92 02 c0       	push   0xc0029210
c0027552:	e8 5e 26 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c0027557:	83 c4 10             	add    esp,0x10
c002755a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002755e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027560:	85 c0                	test   eax,eax
c0027562:	74 34                	je     c0027598 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027568:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002756b:	85 c0                	test   eax,eax
c002756d:	74 29                	je     c0027598 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002756f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027573:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027576:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002757a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002757d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027581:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027585:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002758c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002758f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027596:	eb 65                	jmp    c00275fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0027598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002759c:	8b 00                	mov    eax,DWORD PTR [eax]
c002759e:	85 c0                	test   eax,eax
c00275a0:	75 4b                	jne    c00275ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00275a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00275a9:	85 c0                	test   eax,eax
c00275ab:	75 40                	jne    c00275ed <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00275ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00275b5:	89 10                	mov    DWORD PTR [eax],edx
c00275b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00275bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00275c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00275c9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00275d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00275d7:	85 c0                	test   eax,eax
c00275d9:	74 22                	je     c00275fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00275db:	83 ec 0c             	sub    esp,0xc
c00275de:	68 32 92 02 c0       	push   0xc0029232
c00275e3:	e8 cd 25 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c00275e8:	83 c4 10             	add    esp,0x10
c00275eb:	eb 10                	jmp    c00275fd <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00275ed:	83 ec 0c             	sub    esp,0xc
c00275f0:	68 3c 92 02 c0       	push   0xc002923c
c00275f5:	e8 bb 25 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c00275fa:	83 c4 10             	add    esp,0x10
c00275fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027601:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027604:	8d 50 01             	lea    edx,[eax+0x1]
c0027607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002760b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002760e:	90                   	nop
c002760f:	83 c4 0c             	add    esp,0xc
c0027612:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027614 <LinkedList<UnixFile>::getFirstElement()>:
c0027614:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027618:	8b 00                	mov    eax,DWORD PTR [eax]
c002761a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002761c <LinkedList<UnixFile>::removeFirst()>:
c002761c:	83 ec 0c             	sub    esp,0xc
c002761f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027623:	8b 00                	mov    eax,DWORD PTR [eax]
c0027625:	85 c0                	test   eax,eax
c0027627:	75 12                	jne    c002763b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027629:	83 ec 0c             	sub    esp,0xc
c002762c:	68 48 92 02 c0       	push   0xc0029248
c0027631:	e8 7f 25 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c0027636:	83 c4 10             	add    esp,0x10
c0027639:	eb 7e                	jmp    c00276b9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002763b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002763f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027642:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027645:	85 c0                	test   eax,eax
c0027647:	74 10                	je     c0027659 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027649:	83 ec 0c             	sub    esp,0xc
c002764c:	68 93 92 02 c0       	push   0xc0029293
c0027651:	e8 5f 25 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c0027656:	83 c4 10             	add    esp,0x10
c0027659:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002765d:	8b 00                	mov    eax,DWORD PTR [eax]
c002765f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027662:	85 c0                	test   eax,eax
c0027664:	75 33                	jne    c0027699 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002766a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027674:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002767b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002767f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027682:	83 f8 01             	cmp    eax,0x1
c0027685:	74 21                	je     c00276a8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027687:	83 ec 0c             	sub    esp,0xc
c002768a:	68 6c 92 02 c0       	push   0xc002926c
c002768f:	e8 21 25 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c0027694:	83 c4 10             	add    esp,0x10
c0027697:	eb 0f                	jmp    c00276a8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0027699:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002769d:	8b 00                	mov    eax,DWORD PTR [eax]
c002769f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00276a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276a6:	89 10                	mov    DWORD PTR [eax],edx
c00276a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276ac:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00276af:	8d 50 ff             	lea    edx,[eax-0x1]
c00276b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00276b9:	83 c4 0c             	add    esp,0xc
c00276bc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00276be <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00276be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00276c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00276c5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00276c6 <DriverlessDevice::~DriverlessDevice()>:
c00276c6:	ba 84 99 02 c0       	mov    edx,0xc0029984
c00276cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276cf:	89 10                	mov    DWORD PTR [eax],edx
c00276d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276d5:	50                   	push   eax
c00276d6:	e8 f3 c4 fe ff       	call   c0013bce <Device::~Device()>
c00276db:	83 c4 04             	add    esp,0x4
c00276de:	90                   	nop
c00276df:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00276e0 <DriverlessDevice::~DriverlessDevice()>:
c00276e0:	83 ec 0c             	sub    esp,0xc
c00276e3:	83 ec 0c             	sub    esp,0xc
c00276e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276ea:	e8 d7 ff ff ff       	call   c00276c6 <DriverlessDevice::~DriverlessDevice()>
c00276ef:	83 c4 10             	add    esp,0x10
c00276f2:	83 ec 08             	sub    esp,0x8
c00276f5:	68 58 01 00 00       	push   0x158
c00276fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00276fe:	e8 f2 b0 fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027703:	83 c4 10             	add    esp,0x10
c0027706:	83 c4 0c             	add    esp,0xc
c0027709:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002770a <LinkedList<Device>::addElement(Device*)>:
c002770a:	83 ec 0c             	sub    esp,0xc
c002770d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027712:	75 10                	jne    c0027724 <LinkedList<Device>::addElement(Device*)+0x1a>
c0027714:	83 ec 0c             	sub    esp,0xc
c0027717:	68 10 92 02 c0       	push   0xc0029210
c002771c:	e8 94 24 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c0027721:	83 c4 10             	add    esp,0x10
c0027724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027728:	8b 00                	mov    eax,DWORD PTR [eax]
c002772a:	85 c0                	test   eax,eax
c002772c:	74 3a                	je     c0027768 <LinkedList<Device>::addElement(Device*)+0x5e>
c002772e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027732:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027735:	85 c0                	test   eax,eax
c0027737:	74 2f                	je     c0027768 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002773d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027740:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027744:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002774a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002774e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027752:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027759:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002775c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027766:	eb 68                	jmp    c00277d0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002776c:	8b 00                	mov    eax,DWORD PTR [eax]
c002776e:	85 c0                	test   eax,eax
c0027770:	75 4e                	jne    c00277c0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027776:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027779:	85 c0                	test   eax,eax
c002777b:	75 43                	jne    c00277c0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002777d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027785:	89 10                	mov    DWORD PTR [eax],edx
c0027787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002778b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002778f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027796:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027799:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00277a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00277aa:	85 c0                	test   eax,eax
c00277ac:	74 22                	je     c00277d0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00277ae:	83 ec 0c             	sub    esp,0xc
c00277b1:	68 32 92 02 c0       	push   0xc0029232
c00277b6:	e8 fa 23 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c00277bb:	83 c4 10             	add    esp,0x10
c00277be:	eb 10                	jmp    c00277d0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00277c0:	83 ec 0c             	sub    esp,0xc
c00277c3:	68 3c 92 02 c0       	push   0xc002923c
c00277c8:	e8 e8 23 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c00277cd:	83 c4 10             	add    esp,0x10
c00277d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00277d7:	8d 50 01             	lea    edx,[eax+0x1]
c00277da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00277e1:	90                   	nop
c00277e2:	83 c4 0c             	add    esp,0xc
c00277e5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00277e6 <LinkedList<Device>::LinkedList()>:
c00277e6:	83 ec 0c             	sub    esp,0xc
c00277e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00277f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00277fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027802:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002780d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027817:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002781e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027822:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027829:	83 ec 0c             	sub    esp,0xc
c002782c:	68 f6 91 02 c0       	push   0xc00291f6
c0027831:	e8 9f b0 fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0027836:	83 c4 10             	add    esp,0x10
c0027839:	90                   	nop
c002783a:	83 c4 0c             	add    esp,0xc
c002783d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002783e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002783e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027842:	8b 00                	mov    eax,DWORD PTR [eax]
c0027844:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0027846 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0027846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002784a:	8b 00                	mov    eax,DWORD PTR [eax]
c002784c:	85 c0                	test   eax,eax
c002784e:	75 0e                	jne    c002785e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027854:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027857:	85 c0                	test   eax,eax
c0027859:	75 03                	jne    c002785e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002785b:	b0 01                	mov    al,0x1
c002785d:	c3                   	ret    
c002785e:	b0 00                	mov    al,0x0
c0027860:	90                   	nop
c0027861:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027862 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027862:	83 ec 0c             	sub    esp,0xc
c0027865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027869:	8b 00                	mov    eax,DWORD PTR [eax]
c002786b:	85 c0                	test   eax,eax
c002786d:	75 15                	jne    c0027884 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002786f:	83 ec 0c             	sub    esp,0xc
c0027872:	68 48 92 02 c0       	push   0xc0029248
c0027877:	e8 39 23 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c002787c:	83 c4 10             	add    esp,0x10
c002787f:	e9 88 00 00 00       	jmp    c002790c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0027884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027888:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002788b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002788e:	85 c0                	test   eax,eax
c0027890:	0f 95 c0             	setne  al
c0027893:	84 c0                	test   al,al
c0027895:	74 10                	je     c00278a7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0027897:	83 ec 0c             	sub    esp,0xc
c002789a:	68 93 92 02 c0       	push   0xc0029293
c002789f:	e8 11 23 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c00278a4:	83 c4 10             	add    esp,0x10
c00278a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00278ad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00278b0:	85 c0                	test   eax,eax
c00278b2:	0f 94 c0             	sete   al
c00278b5:	84 c0                	test   al,al
c00278b7:	74 33                	je     c00278ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00278b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00278c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00278ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00278d5:	83 f8 01             	cmp    eax,0x1
c00278d8:	74 21                	je     c00278fb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00278da:	83 ec 0c             	sub    esp,0xc
c00278dd:	68 6c 92 02 c0       	push   0xc002926c
c00278e2:	e8 ce 22 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c00278e7:	83 c4 10             	add    esp,0x10
c00278ea:	eb 0f                	jmp    c00278fb <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00278ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00278f2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00278f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278f9:	89 10                	mov    DWORD PTR [eax],edx
c00278fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027902:	8d 50 ff             	lea    edx,[eax-0x1]
c0027905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027909:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002790c:	83 c4 0c             	add    esp,0xc
c002790f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0027910 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0027910:	83 ec 0c             	sub    esp,0xc
c0027913:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027918:	75 10                	jne    c002792a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002791a:	83 ec 0c             	sub    esp,0xc
c002791d:	68 10 92 02 c0       	push   0xc0029210
c0027922:	e8 8e 22 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c0027927:	83 c4 10             	add    esp,0x10
c002792a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002792e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027930:	85 c0                	test   eax,eax
c0027932:	74 34                	je     c0027968 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0027934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027938:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002793b:	85 c0                	test   eax,eax
c002793d:	74 29                	je     c0027968 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002793f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027943:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027946:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002794a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002794d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027951:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027955:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002795c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002795f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027966:	eb 65                	jmp    c00279cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0027968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002796c:	8b 00                	mov    eax,DWORD PTR [eax]
c002796e:	85 c0                	test   eax,eax
c0027970:	75 4b                	jne    c00279bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0027972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027976:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027979:	85 c0                	test   eax,eax
c002797b:	75 40                	jne    c00279bd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002797d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027981:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027985:	89 10                	mov    DWORD PTR [eax],edx
c0027987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002798b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002798f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027999:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00279a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00279a7:	85 c0                	test   eax,eax
c00279a9:	74 22                	je     c00279cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00279ab:	83 ec 0c             	sub    esp,0xc
c00279ae:	68 32 92 02 c0       	push   0xc0029232
c00279b3:	e8 fd 21 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c00279b8:	83 c4 10             	add    esp,0x10
c00279bb:	eb 10                	jmp    c00279cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00279bd:	83 ec 0c             	sub    esp,0xc
c00279c0:	68 3c 92 02 c0       	push   0xc002923c
c00279c5:	e8 eb 21 ff ff       	call   c0019bb5 <Krnl::panic(char const*)>
c00279ca:	83 c4 10             	add    esp,0x10
c00279cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00279d4:	8d 50 01             	lea    edx,[eax+0x1]
c00279d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00279de:	90                   	nop
c00279df:	83 c4 0c             	add    esp,0xc
c00279e2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00279e4 <ACPI::~ACPI()>:
c00279e4:	83 ec 0c             	sub    esp,0xc
c00279e7:	ba 90 a2 02 c0       	mov    edx,0xc002a290
c00279ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279f0:	89 10                	mov    DWORD PTR [eax],edx
c00279f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279f6:	83 ec 0c             	sub    esp,0xc
c00279f9:	50                   	push   eax
c00279fa:	e8 cf c1 fe ff       	call   c0013bce <Device::~Device()>
c00279ff:	83 c4 10             	add    esp,0x10
c0027a02:	90                   	nop
c0027a03:	83 c4 0c             	add    esp,0xc
c0027a06:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0027a08 <ACPI::~ACPI()>:
c0027a08:	83 ec 0c             	sub    esp,0xc
c0027a0b:	83 ec 0c             	sub    esp,0xc
c0027a0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a12:	e8 cd ff ff ff       	call   c00279e4 <ACPI::~ACPI()>
c0027a17:	83 c4 10             	add    esp,0x10
c0027a1a:	83 ec 08             	sub    esp,0x8
c0027a1d:	68 68 22 00 00       	push   0x2268
c0027a22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a26:	e8 ca ad fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027a2b:	83 c4 10             	add    esp,0x10
c0027a2e:	83 c4 0c             	add    esp,0xc
c0027a31:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0027a32 <CPU::~CPU()>:
c0027a32:	83 ec 0c             	sub    esp,0xc
c0027a35:	ba 80 a6 02 c0       	mov    edx,0xc002a680
c0027a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a3e:	89 10                	mov    DWORD PTR [eax],edx
c0027a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a44:	83 ec 0c             	sub    esp,0xc
c0027a47:	50                   	push   eax
c0027a48:	e8 81 c1 fe ff       	call   c0013bce <Device::~Device()>
c0027a4d:	83 c4 10             	add    esp,0x10
c0027a50:	90                   	nop
c0027a51:	83 c4 0c             	add    esp,0xc
c0027a54:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0027a56 <CPU::~CPU()>:
c0027a56:	83 ec 0c             	sub    esp,0xc
c0027a59:	83 ec 0c             	sub    esp,0xc
c0027a5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a60:	e8 cd ff ff ff       	call   c0027a32 <CPU::~CPU()>
c0027a65:	83 c4 10             	add    esp,0x10
c0027a68:	83 ec 08             	sub    esp,0x8
c0027a6b:	68 98 11 00 00       	push   0x1198
c0027a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a74:	e8 7c ad fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027a79:	83 c4 10             	add    esp,0x10
c0027a7c:	83 c4 0c             	add    esp,0xc
c0027a7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0027a80 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0027a80:	90                   	nop
c0027a81:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0027a82 <ThreadControlBlock::ThreadControlBlock()>:
c0027a82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027a86:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027a8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027a91:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0027a98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027a9c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0027aa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027aa7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0027aae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027ab2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0027ab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027aba:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0027abe:	90                   	nop
c0027abf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0027ac0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0027ac0:	83 ec 0c             	sub    esp,0xc
c0027ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ac7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ad1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027adc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027af1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027afc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027b03:	83 ec 0c             	sub    esp,0xc
c0027b06:	68 f6 91 02 c0       	push   0xc00291f6
c0027b0b:	e8 c5 ad fe ff       	call   c00128d5 <Dbg::kprintf(char const*, ...)>
c0027b10:	83 c4 10             	add    esp,0x10
c0027b13:	90                   	nop
c0027b14:	83 c4 0c             	add    esp,0xc
c0027b17:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0027b18 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0027b18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027b1c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0027b1f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0027b20 <Vm::_FPUState::_FPUState()>:
c0027b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027b24:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0027b2b:	90                   	nop
c0027b2c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0027b2e <PCI::~PCI()>:
c0027b2e:	83 ec 0c             	sub    esp,0xc
c0027b31:	ba a4 b5 02 c0       	mov    edx,0xc002b5a4
c0027b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b3a:	89 10                	mov    DWORD PTR [eax],edx
c0027b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b40:	83 ec 0c             	sub    esp,0xc
c0027b43:	50                   	push   eax
c0027b44:	e8 5d ba fe ff       	call   c00135a6 <Bus::~Bus()>
c0027b49:	83 c4 10             	add    esp,0x10
c0027b4c:	90                   	nop
c0027b4d:	83 c4 0c             	add    esp,0xc
c0027b50:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027b52 <PCI::~PCI()>:
c0027b52:	83 ec 0c             	sub    esp,0xc
c0027b55:	83 ec 0c             	sub    esp,0xc
c0027b58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b5c:	e8 cd ff ff ff       	call   c0027b2e <PCI::~PCI()>
c0027b61:	83 c4 10             	add    esp,0x10
c0027b64:	83 ec 08             	sub    esp,0x8
c0027b67:	68 58 01 00 00       	push   0x158
c0027b6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b70:	e8 80 ac fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027b75:	83 c4 10             	add    esp,0x10
c0027b78:	83 c4 0c             	add    esp,0xc
c0027b7b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0027b7c <IDE::~IDE()>:
c0027b7c:	83 ec 0c             	sub    esp,0xc
c0027b7f:	ba 08 b8 02 c0       	mov    edx,0xc002b808
c0027b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b88:	89 10                	mov    DWORD PTR [eax],edx
c0027b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b8e:	83 ec 0c             	sub    esp,0xc
c0027b91:	50                   	push   eax
c0027b92:	e8 27 c5 fe ff       	call   c00140be <HardDiskController::~HardDiskController()>
c0027b97:	83 c4 10             	add    esp,0x10
c0027b9a:	90                   	nop
c0027b9b:	83 c4 0c             	add    esp,0xc
c0027b9e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0027ba0 <IDE::~IDE()>:
c0027ba0:	83 ec 0c             	sub    esp,0xc
c0027ba3:	83 ec 0c             	sub    esp,0xc
c0027ba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027baa:	e8 cd ff ff ff       	call   c0027b7c <IDE::~IDE()>
c0027baf:	83 c4 10             	add    esp,0x10
c0027bb2:	83 ec 08             	sub    esp,0x8
c0027bb5:	68 70 02 00 00       	push   0x270
c0027bba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027bbe:	e8 32 ac fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027bc3:	83 c4 10             	add    esp,0x10
c0027bc6:	83 c4 0c             	add    esp,0xc
c0027bc9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0027bca <SATABus::~SATABus()>:
c0027bca:	83 ec 0c             	sub    esp,0xc
c0027bcd:	ba e8 b8 02 c0       	mov    edx,0xc002b8e8
c0027bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bd6:	89 10                	mov    DWORD PTR [eax],edx
c0027bd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027bdc:	83 ec 0c             	sub    esp,0xc
c0027bdf:	50                   	push   eax
c0027be0:	e8 d9 c4 fe ff       	call   c00140be <HardDiskController::~HardDiskController()>
c0027be5:	83 c4 10             	add    esp,0x10
c0027be8:	90                   	nop
c0027be9:	83 c4 0c             	add    esp,0xc
c0027bec:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0027bee <SATABus::~SATABus()>:
c0027bee:	83 ec 0c             	sub    esp,0xc
c0027bf1:	83 ec 0c             	sub    esp,0xc
c0027bf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027bf8:	e8 cd ff ff ff       	call   c0027bca <SATABus::~SATABus()>
c0027bfd:	83 c4 10             	add    esp,0x10
c0027c00:	83 ec 08             	sub    esp,0x8
c0027c03:	68 64 01 00 00       	push   0x164
c0027c08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c0c:	e8 e4 ab fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027c11:	83 c4 10             	add    esp,0x10
c0027c14:	83 c4 0c             	add    esp,0xc
c0027c17:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0027c18 <ATA::~ATA()>:
c0027c18:	83 ec 0c             	sub    esp,0xc
c0027c1b:	ba 28 b9 02 c0       	mov    edx,0xc002b928
c0027c20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c24:	89 10                	mov    DWORD PTR [eax],edx
c0027c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c2a:	83 ec 0c             	sub    esp,0xc
c0027c2d:	50                   	push   eax
c0027c2e:	e8 69 c5 fe ff       	call   c001419c <PhysicalDisk::~PhysicalDisk()>
c0027c33:	83 c4 10             	add    esp,0x10
c0027c36:	90                   	nop
c0027c37:	83 c4 0c             	add    esp,0xc
c0027c3a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0027c3c <ATA::~ATA()>:
c0027c3c:	83 ec 0c             	sub    esp,0xc
c0027c3f:	83 ec 0c             	sub    esp,0xc
c0027c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c46:	e8 cd ff ff ff       	call   c0027c18 <ATA::~ATA()>
c0027c4b:	83 c4 10             	add    esp,0x10
c0027c4e:	83 ec 08             	sub    esp,0x8
c0027c51:	68 7c 01 00 00       	push   0x17c
c0027c56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c5a:	e8 96 ab fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027c5f:	83 c4 10             	add    esp,0x10
c0027c62:	83 c4 0c             	add    esp,0xc
c0027c65:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027c66 <ATAPI::~ATAPI()>:
c0027c66:	83 ec 0c             	sub    esp,0xc
c0027c69:	ba 94 b9 02 c0       	mov    edx,0xc002b994
c0027c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c72:	89 10                	mov    DWORD PTR [eax],edx
c0027c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027c78:	83 ec 0c             	sub    esp,0xc
c0027c7b:	50                   	push   eax
c0027c7c:	e8 1b c5 fe ff       	call   c001419c <PhysicalDisk::~PhysicalDisk()>
c0027c81:	83 c4 10             	add    esp,0x10
c0027c84:	90                   	nop
c0027c85:	83 c4 0c             	add    esp,0xc
c0027c88:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0027c8a <ATAPI::~ATAPI()>:
c0027c8a:	83 ec 0c             	sub    esp,0xc
c0027c8d:	83 ec 0c             	sub    esp,0xc
c0027c90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027c94:	e8 cd ff ff ff       	call   c0027c66 <ATAPI::~ATAPI()>
c0027c99:	83 c4 10             	add    esp,0x10
c0027c9c:	83 ec 08             	sub    esp,0x8
c0027c9f:	68 80 01 00 00       	push   0x180
c0027ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ca8:	e8 48 ab fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027cad:	83 c4 10             	add    esp,0x10
c0027cb0:	83 c4 0c             	add    esp,0xc
c0027cb3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0027cb4 <SATA::~SATA()>:
c0027cb4:	83 ec 0c             	sub    esp,0xc
c0027cb7:	ba b8 ba 02 c0       	mov    edx,0xc002bab8
c0027cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cc0:	89 10                	mov    DWORD PTR [eax],edx
c0027cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027cc6:	83 ec 0c             	sub    esp,0xc
c0027cc9:	50                   	push   eax
c0027cca:	e8 cd c4 fe ff       	call   c001419c <PhysicalDisk::~PhysicalDisk()>
c0027ccf:	83 c4 10             	add    esp,0x10
c0027cd2:	90                   	nop
c0027cd3:	83 c4 0c             	add    esp,0xc
c0027cd6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0027cd8 <SATA::~SATA()>:
c0027cd8:	83 ec 0c             	sub    esp,0xc
c0027cdb:	83 ec 0c             	sub    esp,0xc
c0027cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ce2:	e8 cd ff ff ff       	call   c0027cb4 <SATA::~SATA()>
c0027ce7:	83 c4 10             	add    esp,0x10
c0027cea:	83 ec 08             	sub    esp,0x8
c0027ced:	68 74 01 00 00       	push   0x174
c0027cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027cf6:	e8 fa aa fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027cfb:	83 c4 10             	add    esp,0x10
c0027cfe:	83 c4 0c             	add    esp,0xc
c0027d01:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0027d02 <AVX::~AVX()>:
c0027d02:	83 ec 0c             	sub    esp,0xc
c0027d05:	ba f4 ba 02 c0       	mov    edx,0xc002baf4
c0027d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d0e:	89 10                	mov    DWORD PTR [eax],edx
c0027d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d14:	83 ec 0c             	sub    esp,0xc
c0027d17:	50                   	push   eax
c0027d18:	e8 03 c5 fe ff       	call   c0014220 <FPU::~FPU()>
c0027d1d:	83 c4 10             	add    esp,0x10
c0027d20:	90                   	nop
c0027d21:	83 c4 0c             	add    esp,0xc
c0027d24:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0027d26 <AVX::~AVX()>:
c0027d26:	83 ec 0c             	sub    esp,0xc
c0027d29:	83 ec 0c             	sub    esp,0xc
c0027d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d30:	e8 cd ff ff ff       	call   c0027d02 <AVX::~AVX()>
c0027d35:	83 c4 10             	add    esp,0x10
c0027d38:	83 ec 08             	sub    esp,0x8
c0027d3b:	68 58 01 00 00       	push   0x158
c0027d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d44:	e8 ac aa fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027d49:	83 c4 10             	add    esp,0x10
c0027d4c:	83 c4 0c             	add    esp,0xc
c0027d4f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0027d50 <MMX::~MMX()>:
c0027d50:	83 ec 0c             	sub    esp,0xc
c0027d53:	ba 34 bb 02 c0       	mov    edx,0xc002bb34
c0027d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d5c:	89 10                	mov    DWORD PTR [eax],edx
c0027d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027d62:	83 ec 0c             	sub    esp,0xc
c0027d65:	50                   	push   eax
c0027d66:	e8 b5 c4 fe ff       	call   c0014220 <FPU::~FPU()>
c0027d6b:	83 c4 10             	add    esp,0x10
c0027d6e:	90                   	nop
c0027d6f:	83 c4 0c             	add    esp,0xc
c0027d72:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0027d74 <MMX::~MMX()>:
c0027d74:	83 ec 0c             	sub    esp,0xc
c0027d77:	83 ec 0c             	sub    esp,0xc
c0027d7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d7e:	e8 cd ff ff ff       	call   c0027d50 <MMX::~MMX()>
c0027d83:	83 c4 10             	add    esp,0x10
c0027d86:	83 ec 08             	sub    esp,0x8
c0027d89:	68 58 01 00 00       	push   0x158
c0027d8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027d92:	e8 5e aa fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027d97:	83 c4 10             	add    esp,0x10
c0027d9a:	83 c4 0c             	add    esp,0xc
c0027d9d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0027d9e <SSE::~SSE()>:
c0027d9e:	83 ec 0c             	sub    esp,0xc
c0027da1:	ba 74 bb 02 c0       	mov    edx,0xc002bb74
c0027da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027daa:	89 10                	mov    DWORD PTR [eax],edx
c0027dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027db0:	83 ec 0c             	sub    esp,0xc
c0027db3:	50                   	push   eax
c0027db4:	e8 67 c4 fe ff       	call   c0014220 <FPU::~FPU()>
c0027db9:	83 c4 10             	add    esp,0x10
c0027dbc:	90                   	nop
c0027dbd:	83 c4 0c             	add    esp,0xc
c0027dc0:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0027dc2 <SSE::~SSE()>:
c0027dc2:	83 ec 0c             	sub    esp,0xc
c0027dc5:	83 ec 0c             	sub    esp,0xc
c0027dc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027dcc:	e8 cd ff ff ff       	call   c0027d9e <SSE::~SSE()>
c0027dd1:	83 c4 10             	add    esp,0x10
c0027dd4:	83 ec 08             	sub    esp,0x8
c0027dd7:	68 58 01 00 00       	push   0x158
c0027ddc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027de0:	e8 10 aa fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027de5:	83 c4 10             	add    esp,0x10
c0027de8:	83 c4 0c             	add    esp,0xc
c0027deb:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0027dec <x87::~x87()>:
c0027dec:	83 ec 0c             	sub    esp,0xc
c0027def:	ba b4 bb 02 c0       	mov    edx,0xc002bbb4
c0027df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027df8:	89 10                	mov    DWORD PTR [eax],edx
c0027dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027dfe:	83 ec 0c             	sub    esp,0xc
c0027e01:	50                   	push   eax
c0027e02:	e8 19 c4 fe ff       	call   c0014220 <FPU::~FPU()>
c0027e07:	83 c4 10             	add    esp,0x10
c0027e0a:	90                   	nop
c0027e0b:	83 c4 0c             	add    esp,0xc
c0027e0e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0027e10 <x87::~x87()>:
c0027e10:	83 ec 0c             	sub    esp,0xc
c0027e13:	83 ec 0c             	sub    esp,0xc
c0027e16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e1a:	e8 cd ff ff ff       	call   c0027dec <x87::~x87()>
c0027e1f:	83 c4 10             	add    esp,0x10
c0027e22:	83 ec 08             	sub    esp,0x8
c0027e25:	68 58 01 00 00       	push   0x158
c0027e2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e2e:	e8 c2 a9 fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027e33:	83 c4 10             	add    esp,0x10
c0027e36:	83 c4 0c             	add    esp,0xc
c0027e39:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0027e3a <IOAPIC::~IOAPIC()>:
c0027e3a:	83 ec 0c             	sub    esp,0xc
c0027e3d:	ba 0c bd 02 c0       	mov    edx,0xc002bd0c
c0027e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e46:	89 10                	mov    DWORD PTR [eax],edx
c0027e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e4c:	83 ec 0c             	sub    esp,0xc
c0027e4f:	50                   	push   eax
c0027e50:	e8 79 bd fe ff       	call   c0013bce <Device::~Device()>
c0027e55:	83 c4 10             	add    esp,0x10
c0027e58:	90                   	nop
c0027e59:	83 c4 0c             	add    esp,0xc
c0027e5c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0027e5e <IOAPIC::~IOAPIC()>:
c0027e5e:	83 ec 0c             	sub    esp,0xc
c0027e61:	83 ec 0c             	sub    esp,0xc
c0027e64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e68:	e8 cd ff ff ff       	call   c0027e3a <IOAPIC::~IOAPIC()>
c0027e6d:	83 c4 10             	add    esp,0x10
c0027e70:	83 ec 08             	sub    esp,0x8
c0027e73:	68 68 01 00 00       	push   0x168
c0027e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027e7c:	e8 74 a9 fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027e81:	83 c4 10             	add    esp,0x10
c0027e84:	83 c4 0c             	add    esp,0xc
c0027e87:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0027e88 <APIC::~APIC()>:
c0027e88:	83 ec 0c             	sub    esp,0xc
c0027e8b:	ba c4 bc 02 c0       	mov    edx,0xc002bcc4
c0027e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e94:	89 10                	mov    DWORD PTR [eax],edx
c0027e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027e9a:	83 ec 0c             	sub    esp,0xc
c0027e9d:	50                   	push   eax
c0027e9e:	e8 47 c8 fe ff       	call   c00146ea <InterruptController::~InterruptController()>
c0027ea3:	83 c4 10             	add    esp,0x10
c0027ea6:	90                   	nop
c0027ea7:	83 c4 0c             	add    esp,0xc
c0027eaa:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0027eac <APIC::~APIC()>:
c0027eac:	83 ec 0c             	sub    esp,0xc
c0027eaf:	83 ec 0c             	sub    esp,0xc
c0027eb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027eb6:	e8 cd ff ff ff       	call   c0027e88 <APIC::~APIC()>
c0027ebb:	83 c4 10             	add    esp,0x10
c0027ebe:	83 ec 08             	sub    esp,0x8
c0027ec1:	68 58 21 00 00       	push   0x2158
c0027ec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027eca:	e8 26 a9 fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027ecf:	83 c4 10             	add    esp,0x10
c0027ed2:	83 c4 0c             	add    esp,0xc
c0027ed5:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0027ed6 <PIC::~PIC()>:
c0027ed6:	83 ec 0c             	sub    esp,0xc
c0027ed9:	ba 5c bd 02 c0       	mov    edx,0xc002bd5c
c0027ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ee2:	89 10                	mov    DWORD PTR [eax],edx
c0027ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ee8:	83 ec 0c             	sub    esp,0xc
c0027eeb:	50                   	push   eax
c0027eec:	e8 f9 c7 fe ff       	call   c00146ea <InterruptController::~InterruptController()>
c0027ef1:	83 c4 10             	add    esp,0x10
c0027ef4:	90                   	nop
c0027ef5:	83 c4 0c             	add    esp,0xc
c0027ef8:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0027efa <PIC::~PIC()>:
c0027efa:	83 ec 0c             	sub    esp,0xc
c0027efd:	83 ec 0c             	sub    esp,0xc
c0027f00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f04:	e8 cd ff ff ff       	call   c0027ed6 <PIC::~PIC()>
c0027f09:	83 c4 10             	add    esp,0x10
c0027f0c:	83 ec 08             	sub    esp,0x8
c0027f0f:	68 58 21 00 00       	push   0x2158
c0027f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f18:	e8 d8 a8 fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027f1d:	83 c4 10             	add    esp,0x10
c0027f20:	83 c4 0c             	add    esp,0xc
c0027f23:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027f24 <APICTimer::~APICTimer()>:
c0027f24:	83 ec 0c             	sub    esp,0xc
c0027f27:	ba b0 bd 02 c0       	mov    edx,0xc002bdb0
c0027f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f30:	89 10                	mov    DWORD PTR [eax],edx
c0027f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f36:	83 ec 0c             	sub    esp,0xc
c0027f39:	50                   	push   eax
c0027f3a:	e8 ab e5 fe ff       	call   c00164ea <Timer::~Timer()>
c0027f3f:	83 c4 10             	add    esp,0x10
c0027f42:	90                   	nop
c0027f43:	83 c4 0c             	add    esp,0xc
c0027f46:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027f48 <APICTimer::~APICTimer()>:
c0027f48:	83 ec 0c             	sub    esp,0xc
c0027f4b:	83 ec 0c             	sub    esp,0xc
c0027f4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f52:	e8 cd ff ff ff       	call   c0027f24 <APICTimer::~APICTimer()>
c0027f57:	83 c4 10             	add    esp,0x10
c0027f5a:	83 ec 08             	sub    esp,0x8
c0027f5d:	68 60 01 00 00       	push   0x160
c0027f62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027f66:	e8 8a a8 fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027f6b:	83 c4 10             	add    esp,0x10
c0027f6e:	83 c4 0c             	add    esp,0xc
c0027f71:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027f72 <PIT::~PIT()>:
c0027f72:	83 ec 0c             	sub    esp,0xc
c0027f75:	ba 00 be 02 c0       	mov    edx,0xc002be00
c0027f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f7e:	89 10                	mov    DWORD PTR [eax],edx
c0027f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027f84:	83 ec 0c             	sub    esp,0xc
c0027f87:	50                   	push   eax
c0027f88:	e8 5d e5 fe ff       	call   c00164ea <Timer::~Timer()>
c0027f8d:	83 c4 10             	add    esp,0x10
c0027f90:	90                   	nop
c0027f91:	83 c4 0c             	add    esp,0xc
c0027f94:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027f96 <PIT::~PIT()>:
c0027f96:	83 ec 0c             	sub    esp,0xc
c0027f99:	83 ec 0c             	sub    esp,0xc
c0027f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027fa0:	e8 cd ff ff ff       	call   c0027f72 <PIT::~PIT()>
c0027fa5:	83 c4 10             	add    esp,0x10
c0027fa8:	83 ec 08             	sub    esp,0x8
c0027fab:	68 5c 01 00 00       	push   0x15c
c0027fb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027fb4:	e8 3c a8 fe ff       	call   c00127f5 <operator delete(void*, unsigned long)>
c0027fb9:	83 c4 10             	add    esp,0x10
c0027fbc:	83 c4 0c             	add    esp,0xc
c0027fbf:	c3                   	ret    
